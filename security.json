{
"constants": [
     {
         "name": "wszCMM_PROP_NAME"
        ,"type": {"kind":"String"}
        ,"value": "Name"
    }
    ,{
         "name": "wszCMM_PROP_DESCRIPTION"
        ,"type": {"kind":"String"}
        ,"value": "Description"
    }
    ,{
         "name": "wszCMM_PROP_COPYRIGHT"
        ,"type": {"kind":"String"}
        ,"value": "Copyright"
    }
    ,{
         "name": "wszCMM_PROP_FILEVER"
        ,"type": {"kind":"String"}
        ,"value": "File Version"
    }
    ,{
         "name": "wszCMM_PROP_PRODUCTVER"
        ,"type": {"kind":"String"}
        ,"value": "Product Version"
    }
    ,{
         "name": "wszCMM_PROP_DISPLAY_HWND"
        ,"type": {"kind":"String"}
        ,"value": "HWND"
    }
    ,{
         "name": "wszCMM_PROP_ISMULTITHREADED"
        ,"type": {"kind":"String"}
        ,"value": "IsMultiThreaded"
    }
],

"types_definitions": [
// --------------------------------------------------------
// Type: MSA_INFO_LEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSA_INFO_LEVEL = *opaque{
};
// --------------------------------------------------------
// Type: MSA_INFO_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSA_INFO_STATE = *opaque{
};
// --------------------------------------------------------
// Type: MSA_INFO_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSA_INFO_0 = extern struct {
    State: Windows.Win32.Security.MSA_INFO_STATE,
};
// --------------------------------------------------------
// Type: HCERTCHAINENGINE
// TypeLayoutAttr: sequential
// RAIIFree 'CertFreeCertificateChainEngine' (TODO: can we use this information?)
pub const HCERTCHAINENGINE = {"kind":"IntPtr"};
// --------------------------------------------------------
// Type: HCRYPTASYNC
// TypeLayoutAttr: sequential
// RAIIFree 'CryptCloseAsyncHandle' (TODO: can we use this information?)
pub const HCRYPTASYNC = {"kind":"IntPtr"};
// --------------------------------------------------------
// Type: LsaHandle
// TypeLayoutAttr: sequential
// RAIIFree 'LsaDeregisterLogonProcess' (TODO: can we use this information?)
pub const LsaHandle = {"kind":"IntPtr"};
// --------------------------------------------------------
// Type: GENERIC_MAPPING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GENERIC_MAPPING = extern struct {
    GenericRead: {"kind":"UInt32"},
    GenericWrite: {"kind":"UInt32"},
    GenericExecute: {"kind":"UInt32"},
    GenericAll: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: LUID_AND_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LUID_AND_ATTRIBUTES = extern struct {
    Luid: Windows.Win32.Kernel.LUID,
    Attributes: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SID_IDENTIFIER_AUTHORITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SID_IDENTIFIER_AUTHORITY = extern struct {
    Value: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SID = extern struct {
    Revision: {"kind":"Byte"},
    SubAuthorityCount: {"kind":"Byte"},
    IdentifierAuthority: Windows.Win32.Security.SID_IDENTIFIER_AUTHORITY,
    SubAuthority: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: SID_NAME_USE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SID_NAME_USE = *opaque{
};
// --------------------------------------------------------
// Type: SID_AND_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SID_AND_ATTRIBUTES = extern struct {
    Sid: {"kind""Ptr","child":{"kind":"Void"}},
    Attributes: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SID_AND_ATTRIBUTES_HASH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SID_AND_ATTRIBUTES_HASH = extern struct {
    SidCount: {"kind":"UInt32"},
    SidAttr: {"kind""Ptr","child":Windows.Win32.Security.SID_AND_ATTRIBUTES},
    Hash: {"kind":"Array","child": {"kind":"UIntPtr"}},
};
// --------------------------------------------------------
// Type: WELL_KNOWN_SID_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WELL_KNOWN_SID_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: ACL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACL = extern struct {
    AclRevision: {"kind":"Byte"},
    Sbz1: {"kind":"Byte"},
    AclSize: {"kind":"UInt16"},
    AceCount: {"kind":"UInt16"},
    Sbz2: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: ACE_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACE_HEADER = extern struct {
    AceType: {"kind":"Byte"},
    AceFlags: {"kind":"Byte"},
    AceSize: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: ACCESS_ALLOWED_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACCESS_ALLOWED_ACE = extern struct {
    Header: Windows.Win32.Security.ACE_HEADER,
    Mask: {"kind":"UInt32"},
    SidStart: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: ACCESS_DENIED_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACCESS_DENIED_ACE = extern struct {
    Header: Windows.Win32.Security.ACE_HEADER,
    Mask: {"kind":"UInt32"},
    SidStart: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SYSTEM_AUDIT_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_AUDIT_ACE = extern struct {
    Header: Windows.Win32.Security.ACE_HEADER,
    Mask: {"kind":"UInt32"},
    SidStart: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SYSTEM_ALARM_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_ALARM_ACE = extern struct {
    Header: Windows.Win32.Security.ACE_HEADER,
    Mask: {"kind":"UInt32"},
    SidStart: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SYSTEM_RESOURCE_ATTRIBUTE_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_RESOURCE_ATTRIBUTE_ACE = extern struct {
    Header: Windows.Win32.Security.ACE_HEADER,
    Mask: {"kind":"UInt32"},
    SidStart: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SYSTEM_SCOPED_POLICY_ID_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_SCOPED_POLICY_ID_ACE = extern struct {
    Header: Windows.Win32.Security.ACE_HEADER,
    Mask: {"kind":"UInt32"},
    SidStart: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SYSTEM_MANDATORY_LABEL_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_MANDATORY_LABEL_ACE = extern struct {
    Header: Windows.Win32.Security.ACE_HEADER,
    Mask: {"kind":"UInt32"},
    SidStart: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: ACCESS_ALLOWED_OBJECT_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACCESS_ALLOWED_OBJECT_ACE = extern struct {
    Header: Windows.Win32.Security.ACE_HEADER,
    Mask: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    ObjectType: Guid,
    InheritedObjectType: Guid,
    SidStart: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: ACCESS_DENIED_OBJECT_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACCESS_DENIED_OBJECT_ACE = extern struct {
    Header: Windows.Win32.Security.ACE_HEADER,
    Mask: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    ObjectType: Guid,
    InheritedObjectType: Guid,
    SidStart: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SYSTEM_AUDIT_OBJECT_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_AUDIT_OBJECT_ACE = extern struct {
    Header: Windows.Win32.Security.ACE_HEADER,
    Mask: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    ObjectType: Guid,
    InheritedObjectType: Guid,
    SidStart: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SYSTEM_ALARM_OBJECT_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_ALARM_OBJECT_ACE = extern struct {
    Header: Windows.Win32.Security.ACE_HEADER,
    Mask: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    ObjectType: Guid,
    InheritedObjectType: Guid,
    SidStart: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: ACCESS_ALLOWED_CALLBACK_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACCESS_ALLOWED_CALLBACK_ACE = extern struct {
    Header: Windows.Win32.Security.ACE_HEADER,
    Mask: {"kind":"UInt32"},
    SidStart: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: ACCESS_DENIED_CALLBACK_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACCESS_DENIED_CALLBACK_ACE = extern struct {
    Header: Windows.Win32.Security.ACE_HEADER,
    Mask: {"kind":"UInt32"},
    SidStart: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SYSTEM_AUDIT_CALLBACK_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_AUDIT_CALLBACK_ACE = extern struct {
    Header: Windows.Win32.Security.ACE_HEADER,
    Mask: {"kind":"UInt32"},
    SidStart: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SYSTEM_ALARM_CALLBACK_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_ALARM_CALLBACK_ACE = extern struct {
    Header: Windows.Win32.Security.ACE_HEADER,
    Mask: {"kind":"UInt32"},
    SidStart: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: ACCESS_ALLOWED_CALLBACK_OBJECT_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACCESS_ALLOWED_CALLBACK_OBJECT_ACE = extern struct {
    Header: Windows.Win32.Security.ACE_HEADER,
    Mask: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    ObjectType: Guid,
    InheritedObjectType: Guid,
    SidStart: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: ACCESS_DENIED_CALLBACK_OBJECT_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACCESS_DENIED_CALLBACK_OBJECT_ACE = extern struct {
    Header: Windows.Win32.Security.ACE_HEADER,
    Mask: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    ObjectType: Guid,
    InheritedObjectType: Guid,
    SidStart: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SYSTEM_AUDIT_CALLBACK_OBJECT_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_AUDIT_CALLBACK_OBJECT_ACE = extern struct {
    Header: Windows.Win32.Security.ACE_HEADER,
    Mask: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    ObjectType: Guid,
    InheritedObjectType: Guid,
    SidStart: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SYSTEM_ALARM_CALLBACK_OBJECT_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_ALARM_CALLBACK_OBJECT_ACE = extern struct {
    Header: Windows.Win32.Security.ACE_HEADER,
    Mask: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    ObjectType: Guid,
    InheritedObjectType: Guid,
    SidStart: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: ACL_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ACL_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: ACL_REVISION_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACL_REVISION_INFORMATION = extern struct {
    AclRevision: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: ACL_SIZE_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACL_SIZE_INFORMATION = extern struct {
    AceCount: {"kind":"UInt32"},
    AclBytesInUse: {"kind":"UInt32"},
    AclBytesFree: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SECURITY_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECURITY_DESCRIPTOR = extern struct {
    Revision: {"kind":"Byte"},
    Sbz1: {"kind":"Byte"},
    Control: {"kind":"UInt16"},
    Owner: {"kind""Ptr","child":{"kind":"Void"}},
    Group: {"kind""Ptr","child":{"kind":"Void"}},
    Sacl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    Dacl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
};
// --------------------------------------------------------
// Type: OBJECT_TYPE_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OBJECT_TYPE_LIST = extern struct {
    Level: {"kind":"UInt16"},
    Sbz: {"kind":"UInt16"},
    ObjectType: {"kind""Ptr","child":Guid},
};
// --------------------------------------------------------
// Type: AUDIT_EVENT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AUDIT_EVENT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: PRIVILEGE_SET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRIVILEGE_SET = extern struct {
    PrivilegeCount: {"kind":"UInt32"},
    Control: {"kind":"UInt32"},
    Privilege: {"kind":"Array","child": Windows.Win32.Security.LUID_AND_ATTRIBUTES},
};
// --------------------------------------------------------
// Type: SECURITY_IMPERSONATION_LEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SECURITY_IMPERSONATION_LEVEL = *opaque{
};
// --------------------------------------------------------
// Type: TOKEN_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TOKEN_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: TOKEN_ELEVATION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TOKEN_ELEVATION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: TOKEN_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TOKEN_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: TOKEN_USER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_USER = extern struct {
    User: Windows.Win32.Security.SID_AND_ATTRIBUTES,
};
// --------------------------------------------------------
// Type: TOKEN_GROUPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_GROUPS = extern struct {
    GroupCount: {"kind":"UInt32"},
    Groups: {"kind":"Array","child": Windows.Win32.Security.SID_AND_ATTRIBUTES},
};
// --------------------------------------------------------
// Type: TOKEN_PRIVILEGES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_PRIVILEGES = extern struct {
    PrivilegeCount: {"kind":"UInt32"},
    Privileges: {"kind":"Array","child": Windows.Win32.Security.LUID_AND_ATTRIBUTES},
};
// --------------------------------------------------------
// Type: TOKEN_OWNER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_OWNER = extern struct {
    Owner: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: TOKEN_PRIMARY_GROUP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_PRIMARY_GROUP = extern struct {
    PrimaryGroup: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: TOKEN_DEFAULT_DACL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_DEFAULT_DACL = extern struct {
    DefaultDacl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
};
// --------------------------------------------------------
// Type: TOKEN_USER_CLAIMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_USER_CLAIMS = extern struct {
    UserClaims: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: TOKEN_DEVICE_CLAIMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_DEVICE_CLAIMS = extern struct {
    DeviceClaims: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: TOKEN_GROUPS_AND_PRIVILEGES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_GROUPS_AND_PRIVILEGES = extern struct {
    SidCount: {"kind":"UInt32"},
    SidLength: {"kind":"UInt32"},
    Sids: {"kind""Ptr","child":Windows.Win32.Security.SID_AND_ATTRIBUTES},
    RestrictedSidCount: {"kind":"UInt32"},
    RestrictedSidLength: {"kind":"UInt32"},
    RestrictedSids: {"kind""Ptr","child":Windows.Win32.Security.SID_AND_ATTRIBUTES},
    PrivilegeCount: {"kind":"UInt32"},
    PrivilegeLength: {"kind":"UInt32"},
    Privileges: {"kind""Ptr","child":Windows.Win32.Security.LUID_AND_ATTRIBUTES},
    AuthenticationId: Windows.Win32.Kernel.LUID,
};
// --------------------------------------------------------
// Type: TOKEN_LINKED_TOKEN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_LINKED_TOKEN = extern struct {
    LinkedToken: Windows.Win32.SystemServices.HANDLE,
};
// --------------------------------------------------------
// Type: TOKEN_ELEVATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_ELEVATION = extern struct {
    TokenIsElevated: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: TOKEN_MANDATORY_LABEL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_MANDATORY_LABEL = extern struct {
    Label: Windows.Win32.Security.SID_AND_ATTRIBUTES,
};
// --------------------------------------------------------
// Type: TOKEN_MANDATORY_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_MANDATORY_POLICY = extern struct {
    Policy: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: TOKEN_ACCESS_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_ACCESS_INFORMATION = extern struct {
    SidHash: {"kind""Ptr","child":Windows.Win32.Security.SID_AND_ATTRIBUTES_HASH},
    RestrictedSidHash: {"kind""Ptr","child":Windows.Win32.Security.SID_AND_ATTRIBUTES_HASH},
    Privileges: {"kind""Ptr","child":Windows.Win32.Security.TOKEN_PRIVILEGES},
    AuthenticationId: Windows.Win32.Kernel.LUID,
    TokenType: Windows.Win32.Security.TOKEN_TYPE,
    ImpersonationLevel: Windows.Win32.Security.SECURITY_IMPERSONATION_LEVEL,
    MandatoryPolicy: Windows.Win32.Security.TOKEN_MANDATORY_POLICY,
    Flags: {"kind":"UInt32"},
    AppContainerNumber: {"kind":"UInt32"},
    PackageSid: {"kind""Ptr","child":{"kind":"Void"}},
    CapabilitiesHash: {"kind""Ptr","child":Windows.Win32.Security.SID_AND_ATTRIBUTES_HASH},
    TrustLevelSid: {"kind""Ptr","child":{"kind":"Void"}},
    SecurityAttributes: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: TOKEN_AUDIT_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_AUDIT_POLICY = extern struct {
    PerUserPolicy: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: TOKEN_SOURCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_SOURCE = extern struct {
    SourceName: {"kind":"Array","child": {"kind":"SByte"}},
    SourceIdentifier: Windows.Win32.Kernel.LUID,
};
// --------------------------------------------------------
// Type: TOKEN_STATISTICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_STATISTICS = extern struct {
    TokenId: Windows.Win32.Kernel.LUID,
    AuthenticationId: Windows.Win32.Kernel.LUID,
    ExpirationTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    TokenType: Windows.Win32.Security.TOKEN_TYPE,
    ImpersonationLevel: Windows.Win32.Security.SECURITY_IMPERSONATION_LEVEL,
    DynamicCharged: {"kind":"UInt32"},
    DynamicAvailable: {"kind":"UInt32"},
    GroupCount: {"kind":"UInt32"},
    PrivilegeCount: {"kind":"UInt32"},
    ModifiedId: Windows.Win32.Kernel.LUID,
};
// --------------------------------------------------------
// Type: TOKEN_CONTROL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_CONTROL = extern struct {
    TokenId: Windows.Win32.Kernel.LUID,
    AuthenticationId: Windows.Win32.Kernel.LUID,
    ModifiedId: Windows.Win32.Kernel.LUID,
    TokenSource: Windows.Win32.Security.TOKEN_SOURCE,
};
// --------------------------------------------------------
// Type: TOKEN_ORIGIN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_ORIGIN = extern struct {
    OriginatingLogonSession: Windows.Win32.Kernel.LUID,
};
// --------------------------------------------------------
// Type: MANDATORY_LEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MANDATORY_LEVEL = *opaque{
};
// --------------------------------------------------------
// Type: TOKEN_APPCONTAINER_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_APPCONTAINER_INFORMATION = extern struct {
    TokenAppContainer: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE = extern struct {
    Version: {"kind":"UInt64"},
    Name: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE = extern struct {
    pValue: {"kind""Ptr","child":{"kind":"Void"}},
    ValueLength: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CLAIM_SECURITY_ATTRIBUTE_V1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLAIM_SECURITY_ATTRIBUTE_V1 = extern struct {
    Name: {"kind""Ptr","child":{"kind":"UInt16"}},
    ValueType: {"kind":"UInt16"},
    Reserved: {"kind":"UInt16"},
    Flags: {"kind":"UInt32"},
    ValueCount: {"kind":"UInt32"},
    Values: Windows.Win32.Security.CLAIM_SECURITY_ATTRIBUTE_V1+_Values_e__Union,
    // --------------------------------------------------------
    // Type: _Values_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Values_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 = extern struct {
    Name: {"kind":"UInt32"},
    ValueType: {"kind":"UInt16"},
    Reserved: {"kind":"UInt16"},
    Flags: {"kind":"UInt32"},
    ValueCount: {"kind":"UInt32"},
    Values: Windows.Win32.Security.CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1+_Values_e__Union,
    // --------------------------------------------------------
    // Type: _Values_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Values_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CLAIM_SECURITY_ATTRIBUTES_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLAIM_SECURITY_ATTRIBUTES_INFORMATION = extern struct {
    Version: {"kind":"UInt16"},
    Reserved: {"kind":"UInt16"},
    AttributeCount: {"kind":"UInt32"},
    Attribute: Windows.Win32.Security.CLAIM_SECURITY_ATTRIBUTES_INFORMATION+_Attribute_e__Union,
    // --------------------------------------------------------
    // Type: _Attribute_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Attribute_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: SECURITY_QUALITY_OF_SERVICE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECURITY_QUALITY_OF_SERVICE = extern struct {
    Length: {"kind":"UInt32"},
    ImpersonationLevel: Windows.Win32.Security.SECURITY_IMPERSONATION_LEVEL,
    ContextTrackingMode: {"kind":"Byte"},
    EffectiveOnly: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: SECURITY_CAPABILITIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECURITY_CAPABILITIES = extern struct {
    AppContainerSid: {"kind""Ptr","child":{"kind":"Void"}},
    Capabilities: {"kind""Ptr","child":Windows.Win32.Security.SID_AND_ATTRIBUTES},
    CapabilityCount: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: QUOTA_LIMITS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QUOTA_LIMITS = extern struct {
    PagedPoolLimit: {"kind":"UIntPtr"},
    NonPagedPoolLimit: {"kind":"UIntPtr"},
    MinimumWorkingSetSize: {"kind":"UIntPtr"},
    MaximumWorkingSetSize: {"kind":"UIntPtr"},
    PagefileLimit: {"kind":"UIntPtr"},
    TimeLimit: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: CMS_KEY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMS_KEY_INFO = extern struct {
    dwVersion: {"kind":"UInt32"},
    Algid: {"kind":"UInt32"},
    pbOID: {"kind""Ptr","child":{"kind":"Byte"}},
    cbOID: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: HMAC_Info
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HMAC_Info = extern struct {
    HashAlgid: {"kind":"UInt32"},
    pbInnerString: {"kind""Ptr","child":{"kind":"Byte"}},
    cbInnerString: {"kind":"UInt32"},
    pbOuterString: {"kind""Ptr","child":{"kind":"Byte"}},
    cbOuterString: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SCHANNEL_ALG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCHANNEL_ALG = extern struct {
    dwUse: {"kind":"UInt32"},
    Algid: {"kind":"UInt32"},
    cBits: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    dwReserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PROV_ENUMALGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROV_ENUMALGS = extern struct {
    aiAlgid: {"kind":"UInt32"},
    dwBitLen: {"kind":"UInt32"},
    dwNameLen: {"kind":"UInt32"},
    szName: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: PROV_ENUMALGS_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROV_ENUMALGS_EX = extern struct {
    aiAlgid: {"kind":"UInt32"},
    dwDefaultLen: {"kind":"UInt32"},
    dwMinLen: {"kind":"UInt32"},
    dwMaxLen: {"kind":"UInt32"},
    dwProtocols: {"kind":"UInt32"},
    dwNameLen: {"kind":"UInt32"},
    szName: {"kind":"Array","child": {"kind":"SByte"}},
    dwLongNameLen: {"kind":"UInt32"},
    szLongName: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: PUBLICKEYSTRUC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PUBLICKEYSTRUC = extern struct {
    bType: {"kind":"Byte"},
    bVersion: {"kind":"Byte"},
    reserved: {"kind":"UInt16"},
    aiKeyAlg: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: RSAPUBKEY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RSAPUBKEY = extern struct {
    magic: {"kind":"UInt32"},
    bitlen: {"kind":"UInt32"},
    pubexp: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PUBKEY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PUBKEY = extern struct {
    magic: {"kind":"UInt32"},
    bitlen: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DSSSEED
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSSSEED = extern struct {
    counter: {"kind":"UInt32"},
    seed: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: PUBKEYVER3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PUBKEYVER3 = extern struct {
    magic: {"kind":"UInt32"},
    bitlenP: {"kind":"UInt32"},
    bitlenQ: {"kind":"UInt32"},
    bitlenJ: {"kind":"UInt32"},
    DSSSeed: Windows.Win32.Security.DSSSEED,
};
// --------------------------------------------------------
// Type: PRIVKEYVER3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRIVKEYVER3 = extern struct {
    magic: {"kind":"UInt32"},
    bitlenP: {"kind":"UInt32"},
    bitlenQ: {"kind":"UInt32"},
    bitlenJ: {"kind":"UInt32"},
    bitlenX: {"kind":"UInt32"},
    DSSSeed: Windows.Win32.Security.DSSSEED,
};
// --------------------------------------------------------
// Type: KEY_TYPE_SUBTYPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KEY_TYPE_SUBTYPE = extern struct {
    dwKeySpec: {"kind":"UInt32"},
    Type: Guid,
    Subtype: Guid,
};
// --------------------------------------------------------
// Type: CERT_FORTEZZA_DATA_PROP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_FORTEZZA_DATA_PROP = extern struct {
    SerialNumber: {"kind":"Array","child": {"kind":"Byte"}},
    CertIndex: {"kind":"Int32"},
    CertLabel: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: CRYPT_RC4_KEY_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_RC4_KEY_STATE = extern struct {
    Key: {"kind":"Array","child": {"kind":"Byte"}},
    SBox: {"kind":"Array","child": {"kind":"Byte"}},
    i: {"kind":"Byte"},
    j: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: CRYPT_DES_KEY_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_DES_KEY_STATE = extern struct {
    Key: {"kind":"Array","child": {"kind":"Byte"}},
    IV: {"kind":"Array","child": {"kind":"Byte"}},
    Feedback: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: CRYPT_3DES_KEY_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_3DES_KEY_STATE = extern struct {
    Key: {"kind":"Array","child": {"kind":"Byte"}},
    IV: {"kind":"Array","child": {"kind":"Byte"}},
    Feedback: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: CRYPT_AES_128_KEY_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_AES_128_KEY_STATE = extern struct {
    Key: {"kind":"Array","child": {"kind":"Byte"}},
    IV: {"kind":"Array","child": {"kind":"Byte"}},
    EncryptionState: {"kind":"Array","child": {"kind":"Byte"}},
    DecryptionState: {"kind":"Array","child": {"kind":"Byte"}},
    Feedback: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: CRYPT_AES_256_KEY_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_AES_256_KEY_STATE = extern struct {
    Key: {"kind":"Array","child": {"kind":"Byte"}},
    IV: {"kind":"Array","child": {"kind":"Byte"}},
    EncryptionState: {"kind":"Array","child": {"kind":"Byte"}},
    DecryptionState: {"kind":"Array","child": {"kind":"Byte"}},
    Feedback: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: CRYPTOAPI_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTOAPI_BLOB = extern struct {
    cbData: {"kind":"UInt32"},
    pbData: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: CMS_DH_KEY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMS_DH_KEY_INFO = extern struct {
    dwVersion: {"kind":"UInt32"},
    Algid: {"kind":"UInt32"},
    pszContentEncObjId: {"kind""Ptr","child":{"kind":"SByte"}},
    PubInfo: Windows.Win32.Security.CRYPTOAPI_BLOB,
    pReserved: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: BCRYPT_KEY_LENGTHS_STRUCT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_KEY_LENGTHS_STRUCT = extern struct {
    dwMinLength: {"kind":"UInt32"},
    dwMaxLength: {"kind":"UInt32"},
    dwIncrement: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: BCRYPT_OID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_OID = extern struct {
    cbOID: {"kind":"UInt32"},
    pbOID: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: BCRYPT_OID_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_OID_LIST = extern struct {
    dwOIDCount: {"kind":"UInt32"},
    pOIDs: {"kind""Ptr","child":Windows.Win32.Security.BCRYPT_OID},
};
// --------------------------------------------------------
// Type: BCRYPT_PKCS1_PADDING_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_PKCS1_PADDING_INFO = extern struct {
    pszAlgId: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: BCRYPT_PSS_PADDING_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_PSS_PADDING_INFO = extern struct {
    pszAlgId: {"kind""Ptr","child":{"kind":"UInt16"}},
    cbSalt: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: BCRYPT_OAEP_PADDING_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_OAEP_PADDING_INFO = extern struct {
    pszAlgId: {"kind""Ptr","child":{"kind":"UInt16"}},
    pbLabel: {"kind""Ptr","child":{"kind":"Byte"}},
    cbLabel: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    dwInfoVersion: {"kind":"UInt32"},
    pbNonce: {"kind""Ptr","child":{"kind":"Byte"}},
    cbNonce: {"kind":"UInt32"},
    pbAuthData: {"kind""Ptr","child":{"kind":"Byte"}},
    cbAuthData: {"kind":"UInt32"},
    pbTag: {"kind""Ptr","child":{"kind":"Byte"}},
    cbTag: {"kind":"UInt32"},
    pbMacContext: {"kind""Ptr","child":{"kind":"Byte"}},
    cbMacContext: {"kind":"UInt32"},
    cbAAD: {"kind":"UInt32"},
    cbData: {"kind":"UInt64"},
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: BCryptBuffer
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCryptBuffer = extern struct {
    cbBuffer: {"kind":"UInt32"},
    BufferType: {"kind":"UInt32"},
    pvBuffer: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: BCryptBufferDesc
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCryptBufferDesc = extern struct {
    ulVersion: {"kind":"UInt32"},
    cBuffers: {"kind":"UInt32"},
    pBuffers: {"kind""Ptr","child":Windows.Win32.Security.BCryptBuffer},
};
// --------------------------------------------------------
// Type: BCRYPT_KEY_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_KEY_BLOB = extern struct {
    Magic: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: BCRYPT_RSAKEY_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_RSAKEY_BLOB = extern struct {
    Magic: {"kind":"UInt32"},
    BitLength: {"kind":"UInt32"},
    cbPublicExp: {"kind":"UInt32"},
    cbModulus: {"kind":"UInt32"},
    cbPrime1: {"kind":"UInt32"},
    cbPrime2: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: BCRYPT_ECCKEY_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_ECCKEY_BLOB = extern struct {
    dwMagic: {"kind":"UInt32"},
    cbKey: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SSL_ECCKEY_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SSL_ECCKEY_BLOB = extern struct {
    dwCurveType: {"kind":"UInt32"},
    cbKey: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: ECC_CURVE_TYPE_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ECC_CURVE_TYPE_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: ECC_CURVE_ALG_ID_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ECC_CURVE_ALG_ID_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: BCRYPT_ECCFULLKEY_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_ECCFULLKEY_BLOB = extern struct {
    dwMagic: {"kind":"UInt32"},
    dwVersion: {"kind":"UInt32"},
    dwCurveType: Windows.Win32.Security.ECC_CURVE_TYPE_ENUM,
    dwCurveGenerationAlgId: Windows.Win32.Security.ECC_CURVE_ALG_ID_ENUM,
    cbFieldLength: {"kind":"UInt32"},
    cbSubgroupOrder: {"kind":"UInt32"},
    cbCofactor: {"kind":"UInt32"},
    cbSeed: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: BCRYPT_DH_KEY_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_DH_KEY_BLOB = extern struct {
    dwMagic: {"kind":"UInt32"},
    cbKey: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: BCRYPT_DH_PARAMETER_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_DH_PARAMETER_HEADER = extern struct {
    cbLength: {"kind":"UInt32"},
    dwMagic: {"kind":"UInt32"},
    cbKeyLength: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: BCRYPT_DSA_KEY_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_DSA_KEY_BLOB = extern struct {
    dwMagic: {"kind":"UInt32"},
    cbKey: {"kind":"UInt32"},
    Count: {"kind":"Array","child": {"kind":"Byte"}},
    Seed: {"kind":"Array","child": {"kind":"Byte"}},
    q: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: HASHALGORITHM_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HASHALGORITHM_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: DSAFIPSVERSION_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DSAFIPSVERSION_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: BCRYPT_DSA_KEY_BLOB_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_DSA_KEY_BLOB_V2 = extern struct {
    dwMagic: {"kind":"UInt32"},
    cbKey: {"kind":"UInt32"},
    hashAlgorithm: Windows.Win32.Security.HASHALGORITHM_ENUM,
    standardVersion: Windows.Win32.Security.DSAFIPSVERSION_ENUM,
    cbSeedLength: {"kind":"UInt32"},
    cbGroupSize: {"kind":"UInt32"},
    Count: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: BCRYPT_KEY_DATA_BLOB_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_KEY_DATA_BLOB_HEADER = extern struct {
    dwMagic: {"kind":"UInt32"},
    dwVersion: {"kind":"UInt32"},
    cbKeyData: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: BCRYPT_DSA_PARAMETER_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_DSA_PARAMETER_HEADER = extern struct {
    cbLength: {"kind":"UInt32"},
    dwMagic: {"kind":"UInt32"},
    cbKeyLength: {"kind":"UInt32"},
    Count: {"kind":"Array","child": {"kind":"Byte"}},
    Seed: {"kind":"Array","child": {"kind":"Byte"}},
    q: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: BCRYPT_DSA_PARAMETER_HEADER_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_DSA_PARAMETER_HEADER_V2 = extern struct {
    cbLength: {"kind":"UInt32"},
    dwMagic: {"kind":"UInt32"},
    cbKeyLength: {"kind":"UInt32"},
    hashAlgorithm: Windows.Win32.Security.HASHALGORITHM_ENUM,
    standardVersion: Windows.Win32.Security.DSAFIPSVERSION_ENUM,
    cbSeedLength: {"kind":"UInt32"},
    cbGroupSize: {"kind":"UInt32"},
    Count: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: BCRYPT_ECC_CURVE_NAMES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_ECC_CURVE_NAMES = extern struct {
    dwEccCurveNames: {"kind":"UInt32"},
    pEccCurveNames: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
};
// --------------------------------------------------------
// Type: BCRYPT_HASH_OPERATION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BCRYPT_HASH_OPERATION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: BCRYPT_MULTI_HASH_OPERATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_MULTI_HASH_OPERATION = extern struct {
    iHash: {"kind":"UInt32"},
    hashOperation: Windows.Win32.Security.BCRYPT_HASH_OPERATION_TYPE,
    pbBuffer: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBuffer: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: BCRYPT_MULTI_OPERATION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BCRYPT_MULTI_OPERATION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: BCRYPT_MULTI_OBJECT_LENGTH_STRUCT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_MULTI_OBJECT_LENGTH_STRUCT = extern struct {
    cbPerObject: {"kind":"UInt32"},
    cbPerElement: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: BCRYPT_ALGORITHM_IDENTIFIER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_ALGORITHM_IDENTIFIER = extern struct {
    pszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwClass: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: BCRYPT_PROVIDER_NAME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_PROVIDER_NAME = extern struct {
    pszProviderName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: BCRYPT_INTERFACE_VERSION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_INTERFACE_VERSION = extern struct {
    MajorVersion: {"kind":"UInt16"},
    MinorVersion: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: CRYPT_INTERFACE_REG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_INTERFACE_REG = extern struct {
    dwInterface: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    cFunctions: {"kind":"UInt32"},
    rgpszFunctions: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
};
// --------------------------------------------------------
// Type: CRYPT_IMAGE_REG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_IMAGE_REG = extern struct {
    pszImage: {"kind""Ptr","child":{"kind":"UInt16"}},
    cInterfaces: {"kind":"UInt32"},
    rgpInterfaces: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CRYPT_INTERFACE_REG}},
};
// --------------------------------------------------------
// Type: CRYPT_PROVIDER_REG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PROVIDER_REG = extern struct {
    cAliases: {"kind":"UInt32"},
    rgpszAliases: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    pUM: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_IMAGE_REG},
    pKM: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_IMAGE_REG},
};
// --------------------------------------------------------
// Type: CRYPT_PROVIDERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PROVIDERS = extern struct {
    cProviders: {"kind":"UInt32"},
    rgpszProviders: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
};
// --------------------------------------------------------
// Type: CRYPT_CONTEXT_CONFIG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_CONTEXT_CONFIG = extern struct {
    dwFlags: {"kind":"UInt32"},
    dwReserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CRYPT_CONTEXT_FUNCTION_CONFIG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_CONTEXT_FUNCTION_CONFIG = extern struct {
    dwFlags: {"kind":"UInt32"},
    dwReserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CRYPT_CONTEXTS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_CONTEXTS = extern struct {
    cContexts: {"kind":"UInt32"},
    rgpszContexts: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
};
// --------------------------------------------------------
// Type: CRYPT_CONTEXT_FUNCTIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_CONTEXT_FUNCTIONS = extern struct {
    cFunctions: {"kind":"UInt32"},
    rgpszFunctions: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
};
// --------------------------------------------------------
// Type: CRYPT_CONTEXT_FUNCTION_PROVIDERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_CONTEXT_FUNCTION_PROVIDERS = extern struct {
    cProviders: {"kind":"UInt32"},
    rgpszProviders: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
};
// --------------------------------------------------------
// Type: CRYPT_PROPERTY_REF
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PROPERTY_REF = extern struct {
    pszProperty: {"kind""Ptr","child":{"kind":"UInt16"}},
    cbValue: {"kind":"UInt32"},
    pbValue: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: CRYPT_IMAGE_REF
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_IMAGE_REF = extern struct {
    pszImage: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CRYPT_PROVIDER_REF
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PROVIDER_REF = extern struct {
    dwInterface: {"kind":"UInt32"},
    pszFunction: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszProvider: {"kind""Ptr","child":{"kind":"UInt16"}},
    cProperties: {"kind":"UInt32"},
    rgpProperties: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CRYPT_PROPERTY_REF}},
    pUM: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_IMAGE_REF},
    pKM: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_IMAGE_REF},
};
// --------------------------------------------------------
// Type: CRYPT_PROVIDER_REFS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PROVIDER_REFS = extern struct {
    cProviders: {"kind":"UInt32"},
    rgpProviders: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CRYPT_PROVIDER_REF}},
};
// --------------------------------------------------------
// Type: PFN_NCRYPT_ALLOC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_NCRYPT_ALLOC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_NCRYPT_FREE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_NCRYPT_FREE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: NCRYPT_ALLOC_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_ALLOC_PARA = extern struct {
    cbSize: {"kind":"UInt32"},
    pfnAlloc: Windows.Win32.Security.PFN_NCRYPT_ALLOC,
    pfnFree: Windows.Win32.Security.PFN_NCRYPT_FREE,
};
// --------------------------------------------------------
// Type: NCRYPT_CIPHER_PADDING_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_CIPHER_PADDING_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    pbIV: {"kind""Ptr","child":{"kind":"Byte"}},
    cbIV: {"kind":"UInt32"},
    pbOtherInfo: {"kind""Ptr","child":{"kind":"Byte"}},
    cbOtherInfo: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NCRYPT_PLATFORM_ATTEST_PADDING_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_PLATFORM_ATTEST_PADDING_INFO = extern struct {
    magic: {"kind":"UInt32"},
    pcrMask: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NCRYPT_KEY_ATTEST_PADDING_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_KEY_ATTEST_PADDING_INFO = extern struct {
    magic: {"kind":"UInt32"},
    pbKeyBlob: {"kind""Ptr","child":{"kind":"Byte"}},
    cbKeyBlob: {"kind":"UInt32"},
    pbKeyAuth: {"kind""Ptr","child":{"kind":"Byte"}},
    cbKeyAuth: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES = extern struct {
    Version: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    cbPublicKeyBlob: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NCRYPT_VSM_KEY_ATTESTATION_STATEMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_VSM_KEY_ATTESTATION_STATEMENT = extern struct {
    Magic: {"kind":"UInt32"},
    Version: {"kind":"UInt32"},
    cbSignature: {"kind":"UInt32"},
    cbReport: {"kind":"UInt32"},
    cbAttributes: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS = extern struct {
    Version: {"kind":"UInt32"},
    TrustletId: {"kind":"UInt64"},
    MinSvn: {"kind":"UInt32"},
    FlagsMask: {"kind":"UInt32"},
    FlagsExpected: {"kind":"UInt32"},
    _bitfield: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NCRYPT_EXPORTED_ISOLATED_KEY_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_EXPORTED_ISOLATED_KEY_HEADER = extern struct {
    Version: {"kind":"UInt32"},
    KeyUsage: {"kind":"UInt32"},
    _bitfield: {"kind":"UInt32"},
    cbAlgName: {"kind":"UInt32"},
    cbNonce: {"kind":"UInt32"},
    cbAuthTag: {"kind":"UInt32"},
    cbWrappingKey: {"kind":"UInt32"},
    cbIsolatedKey: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE = extern struct {
    Header: Windows.Win32.Security.NCRYPT_EXPORTED_ISOLATED_KEY_HEADER,
};
// --------------------------------------------------------
// Type: __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT = extern struct {
    Magic: {"kind":"UInt32"},
    Version: {"kind":"UInt32"},
    HeaderSize: {"kind":"UInt32"},
    cbCertifyInfo: {"kind":"UInt32"},
    cbSignature: {"kind":"UInt32"},
    cbTpmPublic: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT = extern struct {
    Magic: {"kind":"UInt32"},
    Version: {"kind":"UInt32"},
    pcrAlg: {"kind":"UInt32"},
    cbSignature: {"kind":"UInt32"},
    cbQuote: {"kind":"UInt32"},
    cbPcrs: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NCryptAlgorithmName
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCryptAlgorithmName = extern struct {
    pszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwClass: {"kind":"UInt32"},
    dwAlgOperations: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NCryptKeyName
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCryptKeyName = extern struct {
    pszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszAlgid: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwLegacyKeySpec: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NCryptProviderName
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCryptProviderName = extern struct {
    pszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszComment: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: NCRYPT_UI_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_UI_POLICY = extern struct {
    dwVersion: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    pszCreationTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszFriendlyName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszDescription: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: __NCRYPT_KEY_ACCESS_POLICY_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const __NCRYPT_KEY_ACCESS_POLICY_BLOB = extern struct {
    dwVersion: {"kind":"UInt32"},
    dwPolicyFlags: {"kind":"UInt32"},
    cbUserSid: {"kind":"UInt32"},
    cbApplicationSid: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NCRYPT_SUPPORTED_LENGTHS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_SUPPORTED_LENGTHS = extern struct {
    dwMinLength: {"kind":"UInt32"},
    dwMaxLength: {"kind":"UInt32"},
    dwIncrement: {"kind":"UInt32"},
    dwDefaultLength: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: __NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const __NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO = extern struct {
    dwVersion: {"kind":"UInt32"},
    iExpiration: {"kind":"Int32"},
    pabNonce: {"kind":"Array","child": {"kind":"Byte"}},
    pabPolicyRef: {"kind":"Array","child": {"kind":"Byte"}},
    pabHMAC: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: __NCRYPT_PCP_TPM_FW_VERSION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const __NCRYPT_PCP_TPM_FW_VERSION_INFO = extern struct {
    major1: {"kind":"UInt16"},
    major2: {"kind":"UInt16"},
    minor1: {"kind":"UInt16"},
    minor2: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: __NCRYPT_PCP_RAW_POLICYDIGEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const __NCRYPT_PCP_RAW_POLICYDIGEST = extern struct {
    dwVersion: {"kind":"UInt32"},
    cbDigest: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NCRYPT_KEY_BLOB_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_KEY_BLOB_HEADER = extern struct {
    cbSize: {"kind":"UInt32"},
    dwMagic: {"kind":"UInt32"},
    cbAlgName: {"kind":"UInt32"},
    cbKeyData: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER = extern struct {
    magic: {"kind":"UInt32"},
    cbHeader: {"kind":"UInt32"},
    cbPublic: {"kind":"UInt32"},
    cbPrivate: {"kind":"UInt32"},
    cbName: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CRYPT_BIT_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_BIT_BLOB = extern struct {
    cbData: {"kind":"UInt32"},
    pbData: {"kind""Ptr","child":{"kind":"Byte"}},
    cUnusedBits: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CRYPT_ALGORITHM_IDENTIFIER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_ALGORITHM_IDENTIFIER = extern struct {
    pszObjId: {"kind""Ptr","child":{"kind":"SByte"}},
    Parameters: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_OBJID_TABLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_OBJID_TABLE = extern struct {
    dwAlgId: {"kind":"UInt32"},
    pszObjId: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: CRYPT_HASH_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_HASH_INFO = extern struct {
    HashAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    Hash: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CERT_EXTENSION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_EXTENSION = extern struct {
    pszObjId: {"kind""Ptr","child":{"kind":"SByte"}},
    fCritical: Windows.Win32.SystemServices.BOOL,
    Value: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_ATTRIBUTE_TYPE_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_ATTRIBUTE_TYPE_VALUE = extern struct {
    pszObjId: {"kind""Ptr","child":{"kind":"SByte"}},
    Value: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_ATTRIBUTE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_ATTRIBUTE = extern struct {
    pszObjId: {"kind""Ptr","child":{"kind":"SByte"}},
    cValue: {"kind":"UInt32"},
    rgValue: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
};
// --------------------------------------------------------
// Type: CRYPT_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_ATTRIBUTES = extern struct {
    cAttr: {"kind":"UInt32"},
    rgAttr: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_ATTRIBUTE},
};
// --------------------------------------------------------
// Type: CERT_RDN_ATTR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_RDN_ATTR = extern struct {
    pszObjId: {"kind""Ptr","child":{"kind":"SByte"}},
    dwValueType: {"kind":"UInt32"},
    Value: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CERT_RDN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_RDN = extern struct {
    cRDNAttr: {"kind":"UInt32"},
    rgRDNAttr: {"kind""Ptr","child":Windows.Win32.Security.CERT_RDN_ATTR},
};
// --------------------------------------------------------
// Type: CERT_NAME_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_NAME_INFO = extern struct {
    cRDN: {"kind":"UInt32"},
    rgRDN: {"kind""Ptr","child":Windows.Win32.Security.CERT_RDN},
};
// --------------------------------------------------------
// Type: CERT_NAME_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_NAME_VALUE = extern struct {
    dwValueType: {"kind":"UInt32"},
    Value: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CERT_PUBLIC_KEY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_PUBLIC_KEY_INFO = extern struct {
    Algorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    PublicKey: Windows.Win32.Security.CRYPT_BIT_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_ECC_PRIVATE_KEY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_ECC_PRIVATE_KEY_INFO = extern struct {
    dwVersion: {"kind":"UInt32"},
    PrivateKey: Windows.Win32.Security.CRYPTOAPI_BLOB,
    szCurveOid: {"kind""Ptr","child":{"kind":"SByte"}},
    PublicKey: Windows.Win32.Security.CRYPT_BIT_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_PRIVATE_KEY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PRIVATE_KEY_INFO = extern struct {
    Version: {"kind":"UInt32"},
    Algorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    PrivateKey: Windows.Win32.Security.CRYPTOAPI_BLOB,
    pAttributes: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_ATTRIBUTES},
};
// --------------------------------------------------------
// Type: CRYPT_ENCRYPTED_PRIVATE_KEY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_ENCRYPTED_PRIVATE_KEY_INFO = extern struct {
    EncryptionAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedPrivateKey: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: PCRYPT_DECRYPT_PRIVATE_KEY_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PCRYPT_DECRYPT_PRIVATE_KEY_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PCRYPT_RESOLVE_HCRYPTPROV_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PCRYPT_RESOLVE_HCRYPTPROV_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPT_PKCS8_IMPORT_PARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PKCS8_IMPORT_PARAMS = extern struct {
    PrivateKey: Windows.Win32.Security.CRYPTOAPI_BLOB,
    pResolvehCryptProvFunc: Windows.Win32.Security.PCRYPT_RESOLVE_HCRYPTPROV_FUNC,
    pVoidResolveFunc: {"kind""Ptr","child":{"kind":"Void"}},
    pDecryptPrivateKeyFunc: Windows.Win32.Security.PCRYPT_DECRYPT_PRIVATE_KEY_FUNC,
    pVoidDecryptFunc: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: CRYPT_PKCS8_EXPORT_PARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PKCS8_EXPORT_PARAMS = extern struct {
    hCryptProv: {"kind":"UIntPtr"},
    dwKeySpec: {"kind":"UInt32"},
    pszPrivateKeyObjId: {"kind""Ptr","child":{"kind":"SByte"}},
    pEncryptPrivateKeyFunc: Windows.Win32.Security.PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC,
    pVoidEncryptFunc: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: CERT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_INFO = extern struct {
    dwVersion: {"kind":"UInt32"},
    SerialNumber: Windows.Win32.Security.CRYPTOAPI_BLOB,
    SignatureAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    Issuer: Windows.Win32.Security.CRYPTOAPI_BLOB,
    NotBefore: Windows.Win32.WindowsProgramming.FILETIME,
    NotAfter: Windows.Win32.WindowsProgramming.FILETIME,
    Subject: Windows.Win32.Security.CRYPTOAPI_BLOB,
    SubjectPublicKeyInfo: Windows.Win32.Security.CERT_PUBLIC_KEY_INFO,
    IssuerUniqueId: Windows.Win32.Security.CRYPT_BIT_BLOB,
    SubjectUniqueId: Windows.Win32.Security.CRYPT_BIT_BLOB,
    cExtension: {"kind":"UInt32"},
    rgExtension: {"kind""Ptr","child":Windows.Win32.Security.CERT_EXTENSION},
};
// --------------------------------------------------------
// Type: CRL_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRL_ENTRY = extern struct {
    SerialNumber: Windows.Win32.Security.CRYPTOAPI_BLOB,
    RevocationDate: Windows.Win32.WindowsProgramming.FILETIME,
    cExtension: {"kind":"UInt32"},
    rgExtension: {"kind""Ptr","child":Windows.Win32.Security.CERT_EXTENSION},
};
// --------------------------------------------------------
// Type: CRL_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRL_INFO = extern struct {
    dwVersion: {"kind":"UInt32"},
    SignatureAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    Issuer: Windows.Win32.Security.CRYPTOAPI_BLOB,
    ThisUpdate: Windows.Win32.WindowsProgramming.FILETIME,
    NextUpdate: Windows.Win32.WindowsProgramming.FILETIME,
    cCRLEntry: {"kind":"UInt32"},
    rgCRLEntry: {"kind""Ptr","child":Windows.Win32.Security.CRL_ENTRY},
    cExtension: {"kind":"UInt32"},
    rgExtension: {"kind""Ptr","child":Windows.Win32.Security.CERT_EXTENSION},
};
// --------------------------------------------------------
// Type: CERT_OR_CRL_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_OR_CRL_BLOB = extern struct {
    dwChoice: {"kind":"UInt32"},
    cbEncoded: {"kind":"UInt32"},
    pbEncoded: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: CERT_OR_CRL_BUNDLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_OR_CRL_BUNDLE = extern struct {
    cItem: {"kind":"UInt32"},
    rgItem: {"kind""Ptr","child":Windows.Win32.Security.CERT_OR_CRL_BLOB},
};
// --------------------------------------------------------
// Type: CERT_REQUEST_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_REQUEST_INFO = extern struct {
    dwVersion: {"kind":"UInt32"},
    Subject: Windows.Win32.Security.CRYPTOAPI_BLOB,
    SubjectPublicKeyInfo: Windows.Win32.Security.CERT_PUBLIC_KEY_INFO,
    cAttribute: {"kind":"UInt32"},
    rgAttribute: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_ATTRIBUTE},
};
// --------------------------------------------------------
// Type: CERT_KEYGEN_REQUEST_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_KEYGEN_REQUEST_INFO = extern struct {
    dwVersion: {"kind":"UInt32"},
    SubjectPublicKeyInfo: Windows.Win32.Security.CERT_PUBLIC_KEY_INFO,
    pwszChallengeString: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: CERT_SIGNED_CONTENT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_SIGNED_CONTENT_INFO = extern struct {
    ToBeSigned: Windows.Win32.Security.CRYPTOAPI_BLOB,
    SignatureAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    Signature: Windows.Win32.Security.CRYPT_BIT_BLOB,
};
// --------------------------------------------------------
// Type: CTL_USAGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CTL_USAGE = extern struct {
    cUsageIdentifier: {"kind":"UInt32"},
    rgpszUsageIdentifier: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},
};
// --------------------------------------------------------
// Type: CTL_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CTL_ENTRY = extern struct {
    SubjectIdentifier: Windows.Win32.Security.CRYPTOAPI_BLOB,
    cAttribute: {"kind":"UInt32"},
    rgAttribute: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_ATTRIBUTE},
};
// --------------------------------------------------------
// Type: CTL_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CTL_INFO = extern struct {
    dwVersion: {"kind":"UInt32"},
    SubjectUsage: Windows.Win32.Security.CTL_USAGE,
    ListIdentifier: Windows.Win32.Security.CRYPTOAPI_BLOB,
    SequenceNumber: Windows.Win32.Security.CRYPTOAPI_BLOB,
    ThisUpdate: Windows.Win32.WindowsProgramming.FILETIME,
    NextUpdate: Windows.Win32.WindowsProgramming.FILETIME,
    SubjectAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    cCTLEntry: {"kind":"UInt32"},
    rgCTLEntry: {"kind""Ptr","child":Windows.Win32.Security.CTL_ENTRY},
    cExtension: {"kind":"UInt32"},
    rgExtension: {"kind""Ptr","child":Windows.Win32.Security.CERT_EXTENSION},
};
// --------------------------------------------------------
// Type: CRYPT_TIME_STAMP_REQUEST_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_TIME_STAMP_REQUEST_INFO = extern struct {
    pszTimeStampAlgorithm: {"kind""Ptr","child":{"kind":"SByte"}},
    pszContentType: {"kind""Ptr","child":{"kind":"SByte"}},
    Content: Windows.Win32.Security.CRYPTOAPI_BLOB,
    cAttribute: {"kind":"UInt32"},
    rgAttribute: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_ATTRIBUTE},
};
// --------------------------------------------------------
// Type: CRYPT_ENROLLMENT_NAME_VALUE_PAIR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_ENROLLMENT_NAME_VALUE_PAIR = extern struct {
    pwszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszValue: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: CRYPT_CSP_PROVIDER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_CSP_PROVIDER = extern struct {
    dwKeySpec: {"kind":"UInt32"},
    pwszProviderName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Signature: Windows.Win32.Security.CRYPT_BIT_BLOB,
};
// --------------------------------------------------------
// Type: PFN_CRYPT_ALLOC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_ALLOC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CRYPT_FREE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_FREE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPT_ENCODE_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_ENCODE_PARA = extern struct {
    cbSize: {"kind":"UInt32"},
    pfnAlloc: Windows.Win32.Security.PFN_CRYPT_ALLOC,
    pfnFree: Windows.Win32.Security.PFN_CRYPT_FREE,
};
// --------------------------------------------------------
// Type: CRYPT_DECODE_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_DECODE_PARA = extern struct {
    cbSize: {"kind":"UInt32"},
    pfnAlloc: Windows.Win32.Security.PFN_CRYPT_ALLOC,
    pfnFree: Windows.Win32.Security.PFN_CRYPT_FREE,
};
// --------------------------------------------------------
// Type: CERT_EXTENSIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_EXTENSIONS = extern struct {
    cExtension: {"kind":"UInt32"},
    rgExtension: {"kind""Ptr","child":Windows.Win32.Security.CERT_EXTENSION},
};
// --------------------------------------------------------
// Type: CERT_AUTHORITY_KEY_ID_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_AUTHORITY_KEY_ID_INFO = extern struct {
    KeyId: Windows.Win32.Security.CRYPTOAPI_BLOB,
    CertIssuer: Windows.Win32.Security.CRYPTOAPI_BLOB,
    CertSerialNumber: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CERT_PRIVATE_KEY_VALIDITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_PRIVATE_KEY_VALIDITY = extern struct {
    NotBefore: Windows.Win32.WindowsProgramming.FILETIME,
    NotAfter: Windows.Win32.WindowsProgramming.FILETIME,
};
// --------------------------------------------------------
// Type: CERT_KEY_ATTRIBUTES_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_KEY_ATTRIBUTES_INFO = extern struct {
    KeyId: Windows.Win32.Security.CRYPTOAPI_BLOB,
    IntendedKeyUsage: Windows.Win32.Security.CRYPT_BIT_BLOB,
    pPrivateKeyUsagePeriod: {"kind""Ptr","child":Windows.Win32.Security.CERT_PRIVATE_KEY_VALIDITY},
};
// --------------------------------------------------------
// Type: CERT_POLICY_ID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_POLICY_ID = extern struct {
    cCertPolicyElementId: {"kind":"UInt32"},
    rgpszCertPolicyElementId: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},
};
// --------------------------------------------------------
// Type: CERT_KEY_USAGE_RESTRICTION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_KEY_USAGE_RESTRICTION_INFO = extern struct {
    cCertPolicyId: {"kind":"UInt32"},
    rgCertPolicyId: {"kind""Ptr","child":Windows.Win32.Security.CERT_POLICY_ID},
    RestrictedKeyUsage: Windows.Win32.Security.CRYPT_BIT_BLOB,
};
// --------------------------------------------------------
// Type: CERT_OTHER_NAME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_OTHER_NAME = extern struct {
    pszObjId: {"kind""Ptr","child":{"kind":"SByte"}},
    Value: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CERT_ALT_NAME_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_ALT_NAME_ENTRY = extern struct {
    dwAltNameChoice: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.CERT_ALT_NAME_ENTRY+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CERT_ALT_NAME_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_ALT_NAME_INFO = extern struct {
    cAltEntry: {"kind":"UInt32"},
    rgAltEntry: {"kind""Ptr","child":Windows.Win32.Security.CERT_ALT_NAME_ENTRY},
};
// --------------------------------------------------------
// Type: CERT_BASIC_CONSTRAINTS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_BASIC_CONSTRAINTS_INFO = extern struct {
    SubjectType: Windows.Win32.Security.CRYPT_BIT_BLOB,
    fPathLenConstraint: Windows.Win32.SystemServices.BOOL,
    dwPathLenConstraint: {"kind":"UInt32"},
    cSubtreesConstraint: {"kind":"UInt32"},
    rgSubtreesConstraint: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
};
// --------------------------------------------------------
// Type: CERT_BASIC_CONSTRAINTS2_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_BASIC_CONSTRAINTS2_INFO = extern struct {
    fCA: Windows.Win32.SystemServices.BOOL,
    fPathLenConstraint: Windows.Win32.SystemServices.BOOL,
    dwPathLenConstraint: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CERT_POLICY_QUALIFIER_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_POLICY_QUALIFIER_INFO = extern struct {
    pszPolicyQualifierId: {"kind""Ptr","child":{"kind":"SByte"}},
    Qualifier: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CERT_POLICY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_POLICY_INFO = extern struct {
    pszPolicyIdentifier: {"kind""Ptr","child":{"kind":"SByte"}},
    cPolicyQualifier: {"kind":"UInt32"},
    rgPolicyQualifier: {"kind""Ptr","child":Windows.Win32.Security.CERT_POLICY_QUALIFIER_INFO},
};
// --------------------------------------------------------
// Type: CERT_POLICIES_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_POLICIES_INFO = extern struct {
    cPolicyInfo: {"kind":"UInt32"},
    rgPolicyInfo: {"kind""Ptr","child":Windows.Win32.Security.CERT_POLICY_INFO},
};
// --------------------------------------------------------
// Type: CERT_POLICY_QUALIFIER_NOTICE_REFERENCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_POLICY_QUALIFIER_NOTICE_REFERENCE = extern struct {
    pszOrganization: {"kind""Ptr","child":{"kind":"SByte"}},
    cNoticeNumbers: {"kind":"UInt32"},
    rgNoticeNumbers: {"kind""Ptr","child":{"kind":"Int32"}},
};
// --------------------------------------------------------
// Type: CERT_POLICY_QUALIFIER_USER_NOTICE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_POLICY_QUALIFIER_USER_NOTICE = extern struct {
    pNoticeReference: {"kind""Ptr","child":Windows.Win32.Security.CERT_POLICY_QUALIFIER_NOTICE_REFERENCE},
    pszDisplayText: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: CPS_URLS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CPS_URLS = extern struct {
    pszURL: {"kind""Ptr","child":{"kind":"UInt16"}},
    pAlgorithm: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER},
    pDigest: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
};
// --------------------------------------------------------
// Type: CERT_POLICY95_QUALIFIER1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_POLICY95_QUALIFIER1 = extern struct {
    pszPracticesReference: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszNoticeIdentifier: {"kind""Ptr","child":{"kind":"SByte"}},
    pszNSINoticeIdentifier: {"kind""Ptr","child":{"kind":"SByte"}},
    cCPSURLs: {"kind":"UInt32"},
    rgCPSURLs: {"kind""Ptr","child":Windows.Win32.Security.CPS_URLS},
};
// --------------------------------------------------------
// Type: CERT_POLICY_MAPPING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_POLICY_MAPPING = extern struct {
    pszIssuerDomainPolicy: {"kind""Ptr","child":{"kind":"SByte"}},
    pszSubjectDomainPolicy: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: CERT_POLICY_MAPPINGS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_POLICY_MAPPINGS_INFO = extern struct {
    cPolicyMapping: {"kind":"UInt32"},
    rgPolicyMapping: {"kind""Ptr","child":Windows.Win32.Security.CERT_POLICY_MAPPING},
};
// --------------------------------------------------------
// Type: CERT_POLICY_CONSTRAINTS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_POLICY_CONSTRAINTS_INFO = extern struct {
    fRequireExplicitPolicy: Windows.Win32.SystemServices.BOOL,
    dwRequireExplicitPolicySkipCerts: {"kind":"UInt32"},
    fInhibitPolicyMapping: Windows.Win32.SystemServices.BOOL,
    dwInhibitPolicyMappingSkipCerts: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY = extern struct {
    pszObjId: {"kind""Ptr","child":{"kind":"SByte"}},
    cValue: {"kind":"UInt32"},
    rgValue: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
};
// --------------------------------------------------------
// Type: CRYPT_CONTENT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_CONTENT_INFO = extern struct {
    pszObjId: {"kind""Ptr","child":{"kind":"SByte"}},
    Content: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_SEQUENCE_OF_ANY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_SEQUENCE_OF_ANY = extern struct {
    cValue: {"kind":"UInt32"},
    rgValue: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
};
// --------------------------------------------------------
// Type: CERT_AUTHORITY_KEY_ID2_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_AUTHORITY_KEY_ID2_INFO = extern struct {
    KeyId: Windows.Win32.Security.CRYPTOAPI_BLOB,
    AuthorityCertIssuer: Windows.Win32.Security.CERT_ALT_NAME_INFO,
    AuthorityCertSerialNumber: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CERT_ACCESS_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_ACCESS_DESCRIPTION = extern struct {
    pszAccessMethod: {"kind""Ptr","child":{"kind":"SByte"}},
    AccessLocation: Windows.Win32.Security.CERT_ALT_NAME_ENTRY,
};
// --------------------------------------------------------
// Type: CERT_AUTHORITY_INFO_ACCESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_AUTHORITY_INFO_ACCESS = extern struct {
    cAccDescr: {"kind":"UInt32"},
    rgAccDescr: {"kind""Ptr","child":Windows.Win32.Security.CERT_ACCESS_DESCRIPTION},
};
// --------------------------------------------------------
// Type: CRL_DIST_POINT_NAME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRL_DIST_POINT_NAME = extern struct {
    dwDistPointNameChoice: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.CRL_DIST_POINT_NAME+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CRL_DIST_POINT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRL_DIST_POINT = extern struct {
    DistPointName: Windows.Win32.Security.CRL_DIST_POINT_NAME,
    ReasonFlags: Windows.Win32.Security.CRYPT_BIT_BLOB,
    CRLIssuer: Windows.Win32.Security.CERT_ALT_NAME_INFO,
};
// --------------------------------------------------------
// Type: CRL_DIST_POINTS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRL_DIST_POINTS_INFO = extern struct {
    cDistPoint: {"kind":"UInt32"},
    rgDistPoint: {"kind""Ptr","child":Windows.Win32.Security.CRL_DIST_POINT},
};
// --------------------------------------------------------
// Type: CROSS_CERT_DIST_POINTS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CROSS_CERT_DIST_POINTS_INFO = extern struct {
    dwSyncDeltaTime: {"kind":"UInt32"},
    cDistPoint: {"kind":"UInt32"},
    rgDistPoint: {"kind""Ptr","child":Windows.Win32.Security.CERT_ALT_NAME_INFO},
};
// --------------------------------------------------------
// Type: CERT_PAIR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_PAIR = extern struct {
    Forward: Windows.Win32.Security.CRYPTOAPI_BLOB,
    Reverse: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CRL_ISSUING_DIST_POINT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRL_ISSUING_DIST_POINT = extern struct {
    DistPointName: Windows.Win32.Security.CRL_DIST_POINT_NAME,
    fOnlyContainsUserCerts: Windows.Win32.SystemServices.BOOL,
    fOnlyContainsCACerts: Windows.Win32.SystemServices.BOOL,
    OnlySomeReasonFlags: Windows.Win32.Security.CRYPT_BIT_BLOB,
    fIndirectCRL: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: CERT_GENERAL_SUBTREE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_GENERAL_SUBTREE = extern struct {
    Base: Windows.Win32.Security.CERT_ALT_NAME_ENTRY,
    dwMinimum: {"kind":"UInt32"},
    fMaximum: Windows.Win32.SystemServices.BOOL,
    dwMaximum: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CERT_NAME_CONSTRAINTS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_NAME_CONSTRAINTS_INFO = extern struct {
    cPermittedSubtree: {"kind":"UInt32"},
    rgPermittedSubtree: {"kind""Ptr","child":Windows.Win32.Security.CERT_GENERAL_SUBTREE},
    cExcludedSubtree: {"kind":"UInt32"},
    rgExcludedSubtree: {"kind""Ptr","child":Windows.Win32.Security.CERT_GENERAL_SUBTREE},
};
// --------------------------------------------------------
// Type: CERT_DSS_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_DSS_PARAMETERS = extern struct {
    p: Windows.Win32.Security.CRYPTOAPI_BLOB,
    q: Windows.Win32.Security.CRYPTOAPI_BLOB,
    g: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CERT_DH_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_DH_PARAMETERS = extern struct {
    p: Windows.Win32.Security.CRYPTOAPI_BLOB,
    g: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CERT_ECC_SIGNATURE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_ECC_SIGNATURE = extern struct {
    r: Windows.Win32.Security.CRYPTOAPI_BLOB,
    s: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CERT_X942_DH_VALIDATION_PARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_X942_DH_VALIDATION_PARAMS = extern struct {
    seed: Windows.Win32.Security.CRYPT_BIT_BLOB,
    pgenCounter: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CERT_X942_DH_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_X942_DH_PARAMETERS = extern struct {
    p: Windows.Win32.Security.CRYPTOAPI_BLOB,
    g: Windows.Win32.Security.CRYPTOAPI_BLOB,
    q: Windows.Win32.Security.CRYPTOAPI_BLOB,
    j: Windows.Win32.Security.CRYPTOAPI_BLOB,
    pValidationParams: {"kind""Ptr","child":Windows.Win32.Security.CERT_X942_DH_VALIDATION_PARAMS},
};
// --------------------------------------------------------
// Type: CRYPT_X942_OTHER_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_X942_OTHER_INFO = extern struct {
    pszContentEncryptionObjId: {"kind""Ptr","child":{"kind":"SByte"}},
    rgbCounter: {"kind":"Array","child": {"kind":"Byte"}},
    rgbKeyLength: {"kind":"Array","child": {"kind":"Byte"}},
    PubInfo: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_ECC_CMS_SHARED_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_ECC_CMS_SHARED_INFO = extern struct {
    Algorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    EntityUInfo: Windows.Win32.Security.CRYPTOAPI_BLOB,
    rgbSuppPubInfo: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: CRYPT_RC2_CBC_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_RC2_CBC_PARAMETERS = extern struct {
    dwVersion: {"kind":"UInt32"},
    fIV: Windows.Win32.SystemServices.BOOL,
    rgbIV: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: CRYPT_SMIME_CAPABILITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_SMIME_CAPABILITY = extern struct {
    pszObjId: {"kind""Ptr","child":{"kind":"SByte"}},
    Parameters: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_SMIME_CAPABILITIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_SMIME_CAPABILITIES = extern struct {
    cCapability: {"kind":"UInt32"},
    rgCapability: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_SMIME_CAPABILITY},
};
// --------------------------------------------------------
// Type: CERT_QC_STATEMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_QC_STATEMENT = extern struct {
    pszStatementId: {"kind""Ptr","child":{"kind":"SByte"}},
    StatementInfo: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CERT_QC_STATEMENTS_EXT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_QC_STATEMENTS_EXT_INFO = extern struct {
    cStatement: {"kind":"UInt32"},
    rgStatement: {"kind""Ptr","child":Windows.Win32.Security.CERT_QC_STATEMENT},
};
// --------------------------------------------------------
// Type: CRYPT_MASK_GEN_ALGORITHM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_MASK_GEN_ALGORITHM = extern struct {
    pszObjId: {"kind""Ptr","child":{"kind":"SByte"}},
    HashAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
};
// --------------------------------------------------------
// Type: CRYPT_RSA_SSA_PSS_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_RSA_SSA_PSS_PARAMETERS = extern struct {
    HashAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    MaskGenAlgorithm: Windows.Win32.Security.CRYPT_MASK_GEN_ALGORITHM,
    dwSaltLength: {"kind":"UInt32"},
    dwTrailerField: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CRYPT_PSOURCE_ALGORITHM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PSOURCE_ALGORITHM = extern struct {
    pszObjId: {"kind""Ptr","child":{"kind":"SByte"}},
    EncodingParameters: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_RSAES_OAEP_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_RSAES_OAEP_PARAMETERS = extern struct {
    HashAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    MaskGenAlgorithm: Windows.Win32.Security.CRYPT_MASK_GEN_ALGORITHM,
    PSourceAlgorithm: Windows.Win32.Security.CRYPT_PSOURCE_ALGORITHM,
};
// --------------------------------------------------------
// Type: CMC_TAGGED_ATTRIBUTE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMC_TAGGED_ATTRIBUTE = extern struct {
    dwBodyPartID: {"kind":"UInt32"},
    Attribute: Windows.Win32.Security.CRYPT_ATTRIBUTE,
};
// --------------------------------------------------------
// Type: CMC_TAGGED_CERT_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMC_TAGGED_CERT_REQUEST = extern struct {
    dwBodyPartID: {"kind":"UInt32"},
    SignedCertRequest: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CMC_TAGGED_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMC_TAGGED_REQUEST = extern struct {
    dwTaggedRequestChoice: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.CMC_TAGGED_REQUEST+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CMC_TAGGED_CONTENT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMC_TAGGED_CONTENT_INFO = extern struct {
    dwBodyPartID: {"kind":"UInt32"},
    EncodedContentInfo: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CMC_TAGGED_OTHER_MSG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMC_TAGGED_OTHER_MSG = extern struct {
    dwBodyPartID: {"kind":"UInt32"},
    pszObjId: {"kind""Ptr","child":{"kind":"SByte"}},
    Value: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CMC_DATA_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMC_DATA_INFO = extern struct {
    cTaggedAttribute: {"kind":"UInt32"},
    rgTaggedAttribute: {"kind""Ptr","child":Windows.Win32.Security.CMC_TAGGED_ATTRIBUTE},
    cTaggedRequest: {"kind":"UInt32"},
    rgTaggedRequest: {"kind""Ptr","child":Windows.Win32.Security.CMC_TAGGED_REQUEST},
    cTaggedContentInfo: {"kind":"UInt32"},
    rgTaggedContentInfo: {"kind""Ptr","child":Windows.Win32.Security.CMC_TAGGED_CONTENT_INFO},
    cTaggedOtherMsg: {"kind":"UInt32"},
    rgTaggedOtherMsg: {"kind""Ptr","child":Windows.Win32.Security.CMC_TAGGED_OTHER_MSG},
};
// --------------------------------------------------------
// Type: CMC_RESPONSE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMC_RESPONSE_INFO = extern struct {
    cTaggedAttribute: {"kind":"UInt32"},
    rgTaggedAttribute: {"kind""Ptr","child":Windows.Win32.Security.CMC_TAGGED_ATTRIBUTE},
    cTaggedContentInfo: {"kind":"UInt32"},
    rgTaggedContentInfo: {"kind""Ptr","child":Windows.Win32.Security.CMC_TAGGED_CONTENT_INFO},
    cTaggedOtherMsg: {"kind":"UInt32"},
    rgTaggedOtherMsg: {"kind""Ptr","child":Windows.Win32.Security.CMC_TAGGED_OTHER_MSG},
};
// --------------------------------------------------------
// Type: CMC_PEND_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMC_PEND_INFO = extern struct {
    PendToken: Windows.Win32.Security.CRYPTOAPI_BLOB,
    PendTime: Windows.Win32.WindowsProgramming.FILETIME,
};
// --------------------------------------------------------
// Type: CMC_STATUS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMC_STATUS_INFO = extern struct {
    dwStatus: {"kind":"UInt32"},
    cBodyList: {"kind":"UInt32"},
    rgdwBodyList: {"kind""Ptr","child":{"kind":"UInt32"}},
    pwszStatusString: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwOtherInfoChoice: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.CMC_STATUS_INFO+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CMC_ADD_EXTENSIONS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMC_ADD_EXTENSIONS_INFO = extern struct {
    dwCmcDataReference: {"kind":"UInt32"},
    cCertReference: {"kind":"UInt32"},
    rgdwCertReference: {"kind""Ptr","child":{"kind":"UInt32"}},
    cExtension: {"kind":"UInt32"},
    rgExtension: {"kind""Ptr","child":Windows.Win32.Security.CERT_EXTENSION},
};
// --------------------------------------------------------
// Type: CMC_ADD_ATTRIBUTES_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMC_ADD_ATTRIBUTES_INFO = extern struct {
    dwCmcDataReference: {"kind":"UInt32"},
    cCertReference: {"kind":"UInt32"},
    rgdwCertReference: {"kind""Ptr","child":{"kind":"UInt32"}},
    cAttribute: {"kind":"UInt32"},
    rgAttribute: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_ATTRIBUTE},
};
// --------------------------------------------------------
// Type: CERT_TEMPLATE_EXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_TEMPLATE_EXT = extern struct {
    pszObjId: {"kind""Ptr","child":{"kind":"SByte"}},
    dwMajorVersion: {"kind":"UInt32"},
    fMinorVersion: Windows.Win32.SystemServices.BOOL,
    dwMinorVersion: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CERT_HASHED_URL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_HASHED_URL = extern struct {
    HashAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    Hash: Windows.Win32.Security.CRYPTOAPI_BLOB,
    pwszUrl: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: CERT_LOGOTYPE_DETAILS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_LOGOTYPE_DETAILS = extern struct {
    pwszMimeType: {"kind""Ptr","child":{"kind":"UInt16"}},
    cHashedUrl: {"kind":"UInt32"},
    rgHashedUrl: {"kind""Ptr","child":Windows.Win32.Security.CERT_HASHED_URL},
};
// --------------------------------------------------------
// Type: CERT_LOGOTYPE_REFERENCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_LOGOTYPE_REFERENCE = extern struct {
    cHashedUrl: {"kind":"UInt32"},
    rgHashedUrl: {"kind""Ptr","child":Windows.Win32.Security.CERT_HASHED_URL},
};
// --------------------------------------------------------
// Type: CERT_LOGOTYPE_IMAGE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_LOGOTYPE_IMAGE_INFO = extern struct {
    dwLogotypeImageInfoChoice: {"kind":"UInt32"},
    dwFileSize: {"kind":"UInt32"},
    dwXSize: {"kind":"UInt32"},
    dwYSize: {"kind":"UInt32"},
    dwLogotypeImageResolutionChoice: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.CERT_LOGOTYPE_IMAGE_INFO+_Anonymous_e__Union,
    pwszLanguage: {"kind""Ptr","child":{"kind":"UInt16"}},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CERT_LOGOTYPE_IMAGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_LOGOTYPE_IMAGE = extern struct {
    LogotypeDetails: Windows.Win32.Security.CERT_LOGOTYPE_DETAILS,
    pLogotypeImageInfo: {"kind""Ptr","child":Windows.Win32.Security.CERT_LOGOTYPE_IMAGE_INFO},
};
// --------------------------------------------------------
// Type: CERT_LOGOTYPE_AUDIO_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_LOGOTYPE_AUDIO_INFO = extern struct {
    dwFileSize: {"kind":"UInt32"},
    dwPlayTime: {"kind":"UInt32"},
    dwChannels: {"kind":"UInt32"},
    dwSampleRate: {"kind":"UInt32"},
    pwszLanguage: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: CERT_LOGOTYPE_AUDIO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_LOGOTYPE_AUDIO = extern struct {
    LogotypeDetails: Windows.Win32.Security.CERT_LOGOTYPE_DETAILS,
    pLogotypeAudioInfo: {"kind""Ptr","child":Windows.Win32.Security.CERT_LOGOTYPE_AUDIO_INFO},
};
// --------------------------------------------------------
// Type: CERT_LOGOTYPE_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_LOGOTYPE_DATA = extern struct {
    cLogotypeImage: {"kind":"UInt32"},
    rgLogotypeImage: {"kind""Ptr","child":Windows.Win32.Security.CERT_LOGOTYPE_IMAGE},
    cLogotypeAudio: {"kind":"UInt32"},
    rgLogotypeAudio: {"kind""Ptr","child":Windows.Win32.Security.CERT_LOGOTYPE_AUDIO},
};
// --------------------------------------------------------
// Type: CERT_LOGOTYPE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_LOGOTYPE_INFO = extern struct {
    dwLogotypeInfoChoice: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.CERT_LOGOTYPE_INFO+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CERT_OTHER_LOGOTYPE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_OTHER_LOGOTYPE_INFO = extern struct {
    pszObjId: {"kind""Ptr","child":{"kind":"SByte"}},
    LogotypeInfo: Windows.Win32.Security.CERT_LOGOTYPE_INFO,
};
// --------------------------------------------------------
// Type: CERT_LOGOTYPE_EXT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_LOGOTYPE_EXT_INFO = extern struct {
    cCommunityLogo: {"kind":"UInt32"},
    rgCommunityLogo: {"kind""Ptr","child":Windows.Win32.Security.CERT_LOGOTYPE_INFO},
    pIssuerLogo: {"kind""Ptr","child":Windows.Win32.Security.CERT_LOGOTYPE_INFO},
    pSubjectLogo: {"kind""Ptr","child":Windows.Win32.Security.CERT_LOGOTYPE_INFO},
    cOtherLogo: {"kind":"UInt32"},
    rgOtherLogo: {"kind""Ptr","child":Windows.Win32.Security.CERT_OTHER_LOGOTYPE_INFO},
};
// --------------------------------------------------------
// Type: CERT_BIOMETRIC_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_BIOMETRIC_DATA = extern struct {
    dwTypeOfBiometricDataChoice: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.CERT_BIOMETRIC_DATA+_Anonymous_e__Union,
    HashedUrl: Windows.Win32.Security.CERT_HASHED_URL,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CERT_BIOMETRIC_EXT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_BIOMETRIC_EXT_INFO = extern struct {
    cBiometricData: {"kind":"UInt32"},
    rgBiometricData: {"kind""Ptr","child":Windows.Win32.Security.CERT_BIOMETRIC_DATA},
};
// --------------------------------------------------------
// Type: OCSP_SIGNATURE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OCSP_SIGNATURE_INFO = extern struct {
    SignatureAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    Signature: Windows.Win32.Security.CRYPT_BIT_BLOB,
    cCertEncoded: {"kind":"UInt32"},
    rgCertEncoded: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
};
// --------------------------------------------------------
// Type: OCSP_SIGNED_REQUEST_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OCSP_SIGNED_REQUEST_INFO = extern struct {
    ToBeSigned: Windows.Win32.Security.CRYPTOAPI_BLOB,
    pOptionalSignatureInfo: {"kind""Ptr","child":Windows.Win32.Security.OCSP_SIGNATURE_INFO},
};
// --------------------------------------------------------
// Type: OCSP_CERT_ID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OCSP_CERT_ID = extern struct {
    HashAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    IssuerNameHash: Windows.Win32.Security.CRYPTOAPI_BLOB,
    IssuerKeyHash: Windows.Win32.Security.CRYPTOAPI_BLOB,
    SerialNumber: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: OCSP_REQUEST_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OCSP_REQUEST_ENTRY = extern struct {
    CertId: Windows.Win32.Security.OCSP_CERT_ID,
    cExtension: {"kind":"UInt32"},
    rgExtension: {"kind""Ptr","child":Windows.Win32.Security.CERT_EXTENSION},
};
// --------------------------------------------------------
// Type: OCSP_REQUEST_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OCSP_REQUEST_INFO = extern struct {
    dwVersion: {"kind":"UInt32"},
    pRequestorName: {"kind""Ptr","child":Windows.Win32.Security.CERT_ALT_NAME_ENTRY},
    cRequestEntry: {"kind":"UInt32"},
    rgRequestEntry: {"kind""Ptr","child":Windows.Win32.Security.OCSP_REQUEST_ENTRY},
    cExtension: {"kind":"UInt32"},
    rgExtension: {"kind""Ptr","child":Windows.Win32.Security.CERT_EXTENSION},
};
// --------------------------------------------------------
// Type: OCSP_RESPONSE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OCSP_RESPONSE_INFO = extern struct {
    dwStatus: {"kind":"UInt32"},
    pszObjId: {"kind""Ptr","child":{"kind":"SByte"}},
    Value: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: OCSP_BASIC_SIGNED_RESPONSE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OCSP_BASIC_SIGNED_RESPONSE_INFO = extern struct {
    ToBeSigned: Windows.Win32.Security.CRYPTOAPI_BLOB,
    SignatureInfo: Windows.Win32.Security.OCSP_SIGNATURE_INFO,
};
// --------------------------------------------------------
// Type: OCSP_BASIC_REVOKED_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OCSP_BASIC_REVOKED_INFO = extern struct {
    RevocationDate: Windows.Win32.WindowsProgramming.FILETIME,
    dwCrlReasonCode: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: OCSP_BASIC_RESPONSE_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OCSP_BASIC_RESPONSE_ENTRY = extern struct {
    CertId: Windows.Win32.Security.OCSP_CERT_ID,
    dwCertStatus: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.OCSP_BASIC_RESPONSE_ENTRY+_Anonymous_e__Union,
    ThisUpdate: Windows.Win32.WindowsProgramming.FILETIME,
    NextUpdate: Windows.Win32.WindowsProgramming.FILETIME,
    cExtension: {"kind":"UInt32"},
    rgExtension: {"kind""Ptr","child":Windows.Win32.Security.CERT_EXTENSION},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: OCSP_BASIC_RESPONSE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OCSP_BASIC_RESPONSE_INFO = extern struct {
    dwVersion: {"kind":"UInt32"},
    dwResponderIdChoice: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.OCSP_BASIC_RESPONSE_INFO+_Anonymous_e__Union,
    ProducedAt: Windows.Win32.WindowsProgramming.FILETIME,
    cResponseEntry: {"kind":"UInt32"},
    rgResponseEntry: {"kind""Ptr","child":Windows.Win32.Security.OCSP_BASIC_RESPONSE_ENTRY},
    cExtension: {"kind":"UInt32"},
    rgExtension: {"kind""Ptr","child":Windows.Win32.Security.CERT_EXTENSION},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CERT_SUPPORTED_ALGORITHM_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_SUPPORTED_ALGORITHM_INFO = extern struct {
    Algorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    IntendedKeyUsage: Windows.Win32.Security.CRYPT_BIT_BLOB,
    IntendedCertPolicies: Windows.Win32.Security.CERT_POLICIES_INFO,
};
// --------------------------------------------------------
// Type: CERT_TPM_SPECIFICATION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_TPM_SPECIFICATION_INFO = extern struct {
    pwszFamily: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwLevel: {"kind":"UInt32"},
    dwRevision: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CRYPT_OID_FUNC_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_OID_FUNC_ENTRY = extern struct {
    pszOID: {"kind""Ptr","child":{"kind":"SByte"}},
    pvFuncAddr: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: PFN_CRYPT_ENUM_OID_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_ENUM_OID_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPT_OID_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_OID_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    pszOID: {"kind""Ptr","child":{"kind":"SByte"}},
    pwszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwGroupId: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.CRYPT_OID_INFO+_Anonymous_e__Union,
    ExtraInfo: Windows.Win32.Security.CRYPTOAPI_BLOB,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PFN_CRYPT_ENUM_OID_INFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_ENUM_OID_INFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CERT_STRONG_SIGN_SERIALIZED_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_STRONG_SIGN_SERIALIZED_INFO = extern struct {
    dwFlags: {"kind":"UInt32"},
    pwszCNGSignHashAlgids: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszCNGPubKeyMinBitLengths: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: CERT_STRONG_SIGN_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_STRONG_SIGN_PARA = extern struct {
    cbSize: {"kind":"UInt32"},
    dwInfoChoice: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.CERT_STRONG_SIGN_PARA+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CERT_ISSUER_SERIAL_NUMBER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_ISSUER_SERIAL_NUMBER = extern struct {
    Issuer: Windows.Win32.Security.CRYPTOAPI_BLOB,
    SerialNumber: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CERT_ID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_ID = extern struct {
    dwIdChoice: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.CERT_ID+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CMSG_SIGNER_ENCODE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_SIGNER_ENCODE_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    pCertInfo: {"kind""Ptr","child":Windows.Win32.Security.CERT_INFO},
    Anonymous: Windows.Win32.Security.CMSG_SIGNER_ENCODE_INFO+_Anonymous_e__Union,
    dwKeySpec: {"kind":"UInt32"},
    HashAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: {"kind""Ptr","child":{"kind":"Void"}},
    cAuthAttr: {"kind":"UInt32"},
    rgAuthAttr: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_ATTRIBUTE},
    cUnauthAttr: {"kind":"UInt32"},
    rgUnauthAttr: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_ATTRIBUTE},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CMSG_SIGNED_ENCODE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_SIGNED_ENCODE_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    cSigners: {"kind":"UInt32"},
    rgSigners: {"kind""Ptr","child":Windows.Win32.Security.CMSG_SIGNER_ENCODE_INFO},
    cCertEncoded: {"kind":"UInt32"},
    rgCertEncoded: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
    cCrlEncoded: {"kind":"UInt32"},
    rgCrlEncoded: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
};
// --------------------------------------------------------
// Type: CMSG_ENVELOPED_ENCODE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_ENVELOPED_ENCODE_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    hCryptProv: {"kind":"UIntPtr"},
    ContentEncryptionAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    pvEncryptionAuxInfo: {"kind""Ptr","child":{"kind":"Void"}},
    cRecipients: {"kind":"UInt32"},
    rgpRecipients: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CERT_INFO}},
};
// --------------------------------------------------------
// Type: CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    KeyEncryptionAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    pvKeyEncryptionAuxInfo: {"kind""Ptr","child":{"kind":"Void"}},
    hCryptProv: {"kind":"UIntPtr"},
    RecipientPublicKey: Windows.Win32.Security.CRYPT_BIT_BLOB,
    RecipientId: Windows.Win32.Security.CERT_ID,
};
// --------------------------------------------------------
// Type: CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    RecipientPublicKey: Windows.Win32.Security.CRYPT_BIT_BLOB,
    RecipientId: Windows.Win32.Security.CERT_ID,
    Date: Windows.Win32.WindowsProgramming.FILETIME,
    pOtherAttr: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_ATTRIBUTE_TYPE_VALUE},
};
// --------------------------------------------------------
// Type: CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    KeyEncryptionAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    pvKeyEncryptionAuxInfo: {"kind""Ptr","child":{"kind":"Void"}},
    KeyWrapAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    pvKeyWrapAuxInfo: {"kind""Ptr","child":{"kind":"Void"}},
    hCryptProv: {"kind":"UIntPtr"},
    dwKeySpec: {"kind":"UInt32"},
    dwKeyChoice: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO+_Anonymous_e__Union,
    UserKeyingMaterial: Windows.Win32.Security.CRYPTOAPI_BLOB,
    cRecipientEncryptedKeys: {"kind":"UInt32"},
    rgpRecipientEncryptedKeys: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO}},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    KeyEncryptionAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    pvKeyEncryptionAuxInfo: {"kind""Ptr","child":{"kind":"Void"}},
    hCryptProv: {"kind":"UIntPtr"},
    dwKeyChoice: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO+_Anonymous_e__Union,
    KeyId: Windows.Win32.Security.CRYPTOAPI_BLOB,
    Date: Windows.Win32.WindowsProgramming.FILETIME,
    pOtherAttr: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_ATTRIBUTE_TYPE_VALUE},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CMSG_RECIPIENT_ENCODE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_RECIPIENT_ENCODE_INFO = extern struct {
    dwRecipientChoice: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.CMSG_RECIPIENT_ENCODE_INFO+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CMSG_RC2_AUX_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_RC2_AUX_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    dwBitLen: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CMSG_SP3_COMPATIBLE_AUX_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_SP3_COMPATIBLE_AUX_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CMSG_RC4_AUX_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_RC4_AUX_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    dwBitLen: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    SignedInfo: Windows.Win32.Security.CMSG_SIGNED_ENCODE_INFO,
    EnvelopedInfo: Windows.Win32.Security.CMSG_ENVELOPED_ENCODE_INFO,
};
// --------------------------------------------------------
// Type: CMSG_HASHED_ENCODE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_HASHED_ENCODE_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    hCryptProv: {"kind":"UIntPtr"},
    HashAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: CMSG_ENCRYPTED_ENCODE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_ENCRYPTED_ENCODE_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    ContentEncryptionAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    pvEncryptionAuxInfo: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: PFN_CMSG_STREAM_OUTPUT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CMSG_STREAM_OUTPUT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CMSG_STREAM_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_STREAM_INFO = extern struct {
    cbContent: {"kind":"UInt32"},
    pfnStreamOutput: Windows.Win32.Security.PFN_CMSG_STREAM_OUTPUT,
    pvArg: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: CMSG_SIGNER_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_SIGNER_INFO = extern struct {
    dwVersion: {"kind":"UInt32"},
    Issuer: Windows.Win32.Security.CRYPTOAPI_BLOB,
    SerialNumber: Windows.Win32.Security.CRYPTOAPI_BLOB,
    HashAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    HashEncryptionAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedHash: Windows.Win32.Security.CRYPTOAPI_BLOB,
    AuthAttrs: Windows.Win32.Security.CRYPT_ATTRIBUTES,
    UnauthAttrs: Windows.Win32.Security.CRYPT_ATTRIBUTES,
};
// --------------------------------------------------------
// Type: CMSG_CMS_SIGNER_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_CMS_SIGNER_INFO = extern struct {
    dwVersion: {"kind":"UInt32"},
    SignerId: Windows.Win32.Security.CERT_ID,
    HashAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    HashEncryptionAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedHash: Windows.Win32.Security.CRYPTOAPI_BLOB,
    AuthAttrs: Windows.Win32.Security.CRYPT_ATTRIBUTES,
    UnauthAttrs: Windows.Win32.Security.CRYPT_ATTRIBUTES,
};
// --------------------------------------------------------
// Type: CMSG_KEY_TRANS_RECIPIENT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_KEY_TRANS_RECIPIENT_INFO = extern struct {
    dwVersion: {"kind":"UInt32"},
    RecipientId: Windows.Win32.Security.CERT_ID,
    KeyEncryptionAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedKey: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CMSG_RECIPIENT_ENCRYPTED_KEY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_RECIPIENT_ENCRYPTED_KEY_INFO = extern struct {
    RecipientId: Windows.Win32.Security.CERT_ID,
    EncryptedKey: Windows.Win32.Security.CRYPTOAPI_BLOB,
    Date: Windows.Win32.WindowsProgramming.FILETIME,
    pOtherAttr: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_ATTRIBUTE_TYPE_VALUE},
};
// --------------------------------------------------------
// Type: CMSG_KEY_AGREE_RECIPIENT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_KEY_AGREE_RECIPIENT_INFO = extern struct {
    dwVersion: {"kind":"UInt32"},
    dwOriginatorChoice: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.CMSG_KEY_AGREE_RECIPIENT_INFO+_Anonymous_e__Union,
    UserKeyingMaterial: Windows.Win32.Security.CRYPTOAPI_BLOB,
    KeyEncryptionAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    cRecipientEncryptedKeys: {"kind":"UInt32"},
    rgpRecipientEncryptedKeys: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CMSG_RECIPIENT_ENCRYPTED_KEY_INFO}},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CMSG_MAIL_LIST_RECIPIENT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_MAIL_LIST_RECIPIENT_INFO = extern struct {
    dwVersion: {"kind":"UInt32"},
    KeyId: Windows.Win32.Security.CRYPTOAPI_BLOB,
    KeyEncryptionAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedKey: Windows.Win32.Security.CRYPTOAPI_BLOB,
    Date: Windows.Win32.WindowsProgramming.FILETIME,
    pOtherAttr: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_ATTRIBUTE_TYPE_VALUE},
};
// --------------------------------------------------------
// Type: CMSG_CMS_RECIPIENT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_CMS_RECIPIENT_INFO = extern struct {
    dwRecipientChoice: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.CMSG_CMS_RECIPIENT_INFO+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA = extern struct {
    cbSize: {"kind":"UInt32"},
    hCryptProv: {"kind":"UIntPtr"},
    dwSignerIndex: {"kind":"UInt32"},
    dwSignerType: {"kind":"UInt32"},
    pvSigner: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: CMSG_CTRL_DECRYPT_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_CTRL_DECRYPT_PARA = extern struct {
    cbSize: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.CMSG_CTRL_DECRYPT_PARA+_Anonymous_e__Union,
    dwKeySpec: {"kind":"UInt32"},
    dwRecipientIndex: {"kind":"UInt32"},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CMSG_CTRL_KEY_TRANS_DECRYPT_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_CTRL_KEY_TRANS_DECRYPT_PARA = extern struct {
    cbSize: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.CMSG_CTRL_KEY_TRANS_DECRYPT_PARA+_Anonymous_e__Union,
    dwKeySpec: {"kind":"UInt32"},
    pKeyTrans: {"kind""Ptr","child":Windows.Win32.Security.CMSG_KEY_TRANS_RECIPIENT_INFO},
    dwRecipientIndex: {"kind":"UInt32"},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CMSG_CTRL_KEY_AGREE_DECRYPT_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_CTRL_KEY_AGREE_DECRYPT_PARA = extern struct {
    cbSize: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.CMSG_CTRL_KEY_AGREE_DECRYPT_PARA+_Anonymous_e__Union,
    dwKeySpec: {"kind":"UInt32"},
    pKeyAgree: {"kind""Ptr","child":Windows.Win32.Security.CMSG_KEY_AGREE_RECIPIENT_INFO},
    dwRecipientIndex: {"kind":"UInt32"},
    dwRecipientEncryptedKeyIndex: {"kind":"UInt32"},
    OriginatorPublicKey: Windows.Win32.Security.CRYPT_BIT_BLOB,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CMSG_CTRL_MAIL_LIST_DECRYPT_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_CTRL_MAIL_LIST_DECRYPT_PARA = extern struct {
    cbSize: {"kind":"UInt32"},
    hCryptProv: {"kind":"UIntPtr"},
    pMailList: {"kind""Ptr","child":Windows.Win32.Security.CMSG_MAIL_LIST_RECIPIENT_INFO},
    dwRecipientIndex: {"kind":"UInt32"},
    dwKeyChoice: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.CMSG_CTRL_MAIL_LIST_DECRYPT_PARA+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA = extern struct {
    cbSize: {"kind":"UInt32"},
    dwSignerIndex: {"kind":"UInt32"},
    blob: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA = extern struct {
    cbSize: {"kind":"UInt32"},
    dwSignerIndex: {"kind":"UInt32"},
    dwUnauthAttrIndex: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PFN_CMSG_ALLOC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CMSG_ALLOC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CMSG_FREE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CMSG_FREE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CMSG_GEN_ENCRYPT_KEY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CMSG_GEN_ENCRYPT_KEY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CMSG_EXPORT_ENCRYPT_KEY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CMSG_EXPORT_ENCRYPT_KEY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CMSG_IMPORT_ENCRYPT_KEY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CMSG_IMPORT_ENCRYPT_KEY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CMSG_CONTENT_ENCRYPT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_CONTENT_ENCRYPT_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    hCryptProv: {"kind":"UIntPtr"},
    ContentEncryptionAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    pvEncryptionAuxInfo: {"kind""Ptr","child":{"kind":"Void"}},
    cRecipients: {"kind":"UInt32"},
    rgCmsRecipients: {"kind""Ptr","child":Windows.Win32.Security.CMSG_RECIPIENT_ENCODE_INFO},
    pfnAlloc: Windows.Win32.Security.PFN_CMSG_ALLOC,
    pfnFree: Windows.Win32.Security.PFN_CMSG_FREE,
    dwEncryptFlags: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.CMSG_CONTENT_ENCRYPT_INFO+_Anonymous_e__Union,
    dwFlags: {"kind":"UInt32"},
    fCNG: Windows.Win32.SystemServices.BOOL,
    pbCNGContentEncryptKeyObject: {"kind""Ptr","child":{"kind":"Byte"}},
    pbContentEncryptKey: {"kind""Ptr","child":{"kind":"Byte"}},
    cbContentEncryptKey: {"kind":"UInt32"},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CMSG_KEY_TRANS_ENCRYPT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_KEY_TRANS_ENCRYPT_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    dwRecipientIndex: {"kind":"UInt32"},
    KeyEncryptionAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedKey: Windows.Win32.Security.CRYPTOAPI_BLOB,
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PFN_CMSG_EXPORT_KEY_TRANS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CMSG_EXPORT_KEY_TRANS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CMSG_KEY_AGREE_KEY_ENCRYPT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_KEY_AGREE_KEY_ENCRYPT_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    EncryptedKey: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CMSG_KEY_AGREE_ENCRYPT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_KEY_AGREE_ENCRYPT_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    dwRecipientIndex: {"kind":"UInt32"},
    KeyEncryptionAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    UserKeyingMaterial: Windows.Win32.Security.CRYPTOAPI_BLOB,
    dwOriginatorChoice: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.CMSG_KEY_AGREE_ENCRYPT_INFO+_Anonymous_e__Union,
    cKeyAgreeKeyEncryptInfo: {"kind":"UInt32"},
    rgpKeyAgreeKeyEncryptInfo: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CMSG_KEY_AGREE_KEY_ENCRYPT_INFO}},
    dwFlags: {"kind":"UInt32"},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PFN_CMSG_EXPORT_KEY_AGREE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CMSG_EXPORT_KEY_AGREE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CMSG_MAIL_LIST_ENCRYPT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_MAIL_LIST_ENCRYPT_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    dwRecipientIndex: {"kind":"UInt32"},
    KeyEncryptionAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedKey: Windows.Win32.Security.CRYPTOAPI_BLOB,
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PFN_CMSG_EXPORT_MAIL_LIST
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CMSG_EXPORT_MAIL_LIST = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CMSG_IMPORT_KEY_TRANS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CMSG_IMPORT_KEY_TRANS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CMSG_IMPORT_KEY_AGREE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CMSG_IMPORT_KEY_AGREE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CMSG_IMPORT_MAIL_LIST
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CMSG_IMPORT_MAIL_LIST = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CMSG_CNG_CONTENT_DECRYPT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_CNG_CONTENT_DECRYPT_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    ContentEncryptionAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    pfnAlloc: Windows.Win32.Security.PFN_CMSG_ALLOC,
    pfnFree: Windows.Win32.Security.PFN_CMSG_FREE,
    hNCryptKey: {"kind":"UIntPtr"},
    pbContentEncryptKey: {"kind""Ptr","child":{"kind":"Byte"}},
    cbContentEncryptKey: {"kind":"UInt32"},
    hCNGContentEncryptKey: {"kind""Ptr","child":{"kind":"Void"}},
    pbCNGContentEncryptKeyObject: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: PFN_CMSG_CNG_IMPORT_KEY_TRANS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CMSG_CNG_IMPORT_KEY_TRANS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CMSG_CNG_IMPORT_KEY_AGREE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CMSG_CNG_IMPORT_KEY_AGREE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CERT_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_CONTEXT = extern struct {
    dwCertEncodingType: {"kind":"UInt32"},
    pbCertEncoded: {"kind""Ptr","child":{"kind":"Byte"}},
    cbCertEncoded: {"kind":"UInt32"},
    pCertInfo: {"kind""Ptr","child":Windows.Win32.Security.CERT_INFO},
    hCertStore: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: CRL_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRL_CONTEXT = extern struct {
    dwCertEncodingType: {"kind":"UInt32"},
    pbCrlEncoded: {"kind""Ptr","child":{"kind":"Byte"}},
    cbCrlEncoded: {"kind":"UInt32"},
    pCrlInfo: {"kind""Ptr","child":Windows.Win32.Security.CRL_INFO},
    hCertStore: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: CTL_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CTL_CONTEXT = extern struct {
    dwMsgAndCertEncodingType: {"kind":"UInt32"},
    pbCtlEncoded: {"kind""Ptr","child":{"kind":"Byte"}},
    cbCtlEncoded: {"kind":"UInt32"},
    pCtlInfo: {"kind""Ptr","child":Windows.Win32.Security.CTL_INFO},
    hCertStore: {"kind""Ptr","child":{"kind":"Void"}},
    hCryptMsg: {"kind""Ptr","child":{"kind":"Void"}},
    pbCtlContent: {"kind""Ptr","child":{"kind":"Byte"}},
    cbCtlContent: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CertKeyType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CertKeyType = *opaque{
};
// --------------------------------------------------------
// Type: CRYPT_KEY_PROV_PARAM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_KEY_PROV_PARAM = extern struct {
    dwParam: {"kind":"UInt32"},
    pbData: {"kind""Ptr","child":{"kind":"Byte"}},
    cbData: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CRYPT_KEY_PROV_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_KEY_PROV_INFO = extern struct {
    pwszContainerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszProvName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwProvType: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    cProvParam: {"kind":"UInt32"},
    rgProvParam: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_KEY_PROV_PARAM},
    dwKeySpec: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CERT_KEY_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_KEY_CONTEXT = extern struct {
    cbSize: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.CERT_KEY_CONTEXT+_Anonymous_e__Union,
    dwKeySpec: {"kind":"UInt32"},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: ROOT_INFO_LUID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ROOT_INFO_LUID = extern struct {
    LowPart: {"kind":"UInt32"},
    HighPart: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: CRYPT_SMART_CARD_ROOT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_SMART_CARD_ROOT_INFO = extern struct {
    rgbCardID: {"kind":"Array","child": {"kind":"Byte"}},
    luid: Windows.Win32.Security.ROOT_INFO_LUID,
};
// --------------------------------------------------------
// Type: CERT_SYSTEM_STORE_RELOCATE_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_SYSTEM_STORE_RELOCATE_PARA = extern struct {
    Anonymous1: Windows.Win32.Security.CERT_SYSTEM_STORE_RELOCATE_PARA+_Anonymous1_e__Union,
    Anonymous2: Windows.Win32.Security.CERT_SYSTEM_STORE_RELOCATE_PARA+_Anonymous2_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CERT_REGISTRY_STORE_CLIENT_GPT_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_REGISTRY_STORE_CLIENT_GPT_PARA = extern struct {
    hKeyBase: Windows.Win32.WindowsProgramming.HKEY,
    pwszRegPath: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: CERT_REGISTRY_STORE_ROAMING_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_REGISTRY_STORE_ROAMING_PARA = extern struct {
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    pwszStoreDirectory: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: CERT_LDAP_STORE_OPENED_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_LDAP_STORE_OPENED_PARA = extern struct {
    pvLdapSessionHandle: {"kind""Ptr","child":{"kind":"Void"}},
    pwszLdapUrl: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: CERT_STORE_PROV_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_STORE_PROV_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    cStoreProvFunc: {"kind":"UInt32"},
    rgpvStoreProvFunc: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    hStoreProv: {"kind""Ptr","child":{"kind":"Void"}},
    dwStoreProvFlags: {"kind":"UInt32"},
    hStoreProvFuncAddr2: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: PFN_CERT_DLL_OPEN_STORE_PROV_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_DLL_OPEN_STORE_PROV_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_CLOSE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_CLOSE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_READ_CERT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_READ_CERT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_WRITE_CERT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_WRITE_CERT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_DELETE_CERT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_DELETE_CERT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_SET_CERT_PROPERTY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_SET_CERT_PROPERTY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_READ_CRL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_READ_CRL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_WRITE_CRL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_WRITE_CRL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_DELETE_CRL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_DELETE_CRL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_SET_CRL_PROPERTY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_SET_CRL_PROPERTY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_READ_CTL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_READ_CTL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_WRITE_CTL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_WRITE_CTL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_DELETE_CTL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_DELETE_CTL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_SET_CTL_PROPERTY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_SET_CTL_PROPERTY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_CONTROL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_CONTROL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CERT_STORE_PROV_FIND_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_STORE_PROV_FIND_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    dwMsgAndCertEncodingType: {"kind":"UInt32"},
    dwFindFlags: {"kind":"UInt32"},
    dwFindType: {"kind":"UInt32"},
    pvFindPara: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_FIND_CERT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_FIND_CERT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_FREE_FIND_CERT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_FREE_FIND_CERT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_GET_CERT_PROPERTY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_GET_CERT_PROPERTY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_FIND_CRL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_FIND_CRL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_FREE_FIND_CRL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_FREE_FIND_CRL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_GET_CRL_PROPERTY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_GET_CRL_PROPERTY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_FIND_CTL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_FIND_CTL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_FREE_FIND_CTL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_FREE_FIND_CTL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_GET_CTL_PROPERTY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_GET_CTL_PROPERTY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRL_FIND_ISSUED_FOR_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRL_FIND_ISSUED_FOR_PARA = extern struct {
    pSubjectCert: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    pIssuerCert: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
};
// --------------------------------------------------------
// Type: CTL_ANY_SUBJECT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CTL_ANY_SUBJECT_INFO = extern struct {
    SubjectAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    SubjectIdentifier: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CTL_FIND_USAGE_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CTL_FIND_USAGE_PARA = extern struct {
    cbSize: {"kind":"UInt32"},
    SubjectUsage: Windows.Win32.Security.CTL_USAGE,
    ListIdentifier: Windows.Win32.Security.CRYPTOAPI_BLOB,
    pSigner: {"kind""Ptr","child":Windows.Win32.Security.CERT_INFO},
};
// --------------------------------------------------------
// Type: CTL_FIND_SUBJECT_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CTL_FIND_SUBJECT_PARA = extern struct {
    cbSize: {"kind":"UInt32"},
    pUsagePara: {"kind""Ptr","child":Windows.Win32.Security.CTL_FIND_USAGE_PARA},
    dwSubjectType: {"kind":"UInt32"},
    pvSubject: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: PFN_CERT_CREATE_CONTEXT_SORT_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_CREATE_CONTEXT_SORT_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CERT_CREATE_CONTEXT_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_CREATE_CONTEXT_PARA = extern struct {
    cbSize: {"kind":"UInt32"},
    pfnFree: Windows.Win32.Security.PFN_CRYPT_FREE,
    pvFree: {"kind""Ptr","child":{"kind":"Void"}},
    pfnSort: Windows.Win32.Security.PFN_CERT_CREATE_CONTEXT_SORT_FUNC,
    pvSort: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: CERT_SYSTEM_STORE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_SYSTEM_STORE_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CERT_PHYSICAL_STORE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_PHYSICAL_STORE_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    pszOpenStoreProvider: {"kind""Ptr","child":{"kind":"SByte"}},
    dwOpenEncodingType: {"kind":"UInt32"},
    dwOpenFlags: {"kind":"UInt32"},
    OpenParameters: Windows.Win32.Security.CRYPTOAPI_BLOB,
    dwFlags: {"kind":"UInt32"},
    dwPriority: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PFN_CERT_ENUM_SYSTEM_STORE_LOCATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_ENUM_SYSTEM_STORE_LOCATION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_ENUM_SYSTEM_STORE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_ENUM_SYSTEM_STORE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_ENUM_PHYSICAL_STORE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_ENUM_PHYSICAL_STORE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CTL_VERIFY_USAGE_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CTL_VERIFY_USAGE_PARA = extern struct {
    cbSize: {"kind":"UInt32"},
    ListIdentifier: Windows.Win32.Security.CRYPTOAPI_BLOB,
    cCtlStore: {"kind":"UInt32"},
    rghCtlStore: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    cSignerStore: {"kind":"UInt32"},
    rghSignerStore: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
};
// --------------------------------------------------------
// Type: CTL_VERIFY_USAGE_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CTL_VERIFY_USAGE_STATUS = extern struct {
    cbSize: {"kind":"UInt32"},
    dwError: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    ppCtl: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CTL_CONTEXT}},
    dwCtlEntryIndex: {"kind":"UInt32"},
    ppSigner: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT}},
    dwSignerIndex: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CERT_REVOCATION_CRL_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_REVOCATION_CRL_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    pBaseCrlContext: {"kind""Ptr","child":Windows.Win32.Security.CRL_CONTEXT},
    pDeltaCrlContext: {"kind""Ptr","child":Windows.Win32.Security.CRL_CONTEXT},
    pCrlEntry: {"kind""Ptr","child":Windows.Win32.Security.CRL_ENTRY},
    fDeltaCrlEntry: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: CERT_REVOCATION_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_REVOCATION_PARA = extern struct {
    cbSize: {"kind":"UInt32"},
    pIssuerCert: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    cCertStore: {"kind":"UInt32"},
    rgCertStore: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    hCrlStore: {"kind""Ptr","child":{"kind":"Void"}},
    pftTimeToUse: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
};
// --------------------------------------------------------
// Type: CERT_REVOCATION_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_REVOCATION_STATUS = extern struct {
    cbSize: {"kind":"UInt32"},
    dwIndex: {"kind":"UInt32"},
    dwError: {"kind":"UInt32"},
    dwReason: {"kind":"UInt32"},
    fHasFreshnessTime: Windows.Win32.SystemServices.BOOL,
    dwFreshnessTime: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO = extern struct {
    CertSignHashCNGAlgPropData: Windows.Win32.Security.CRYPTOAPI_BLOB,
    CertIssuerPubKeyBitLengthPropData: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO = extern struct {
    cCNGHashAlgid: {"kind":"UInt32"},
    rgpwszCNGHashAlgid: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    dwWeakIndex: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA = extern struct {
    cOID: {"kind":"UInt32"},
    rgpszOID: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},
};
// --------------------------------------------------------
// Type: PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_IMPORT_PRIV_KEY_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_IMPORT_PRIV_KEY_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_EXPORT_PRIV_KEY_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_EXPORT_PRIV_KEY_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CRYPT_GET_SIGNER_CERTIFICATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_GET_SIGNER_CERTIFICATE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPT_SIGN_MESSAGE_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_SIGN_MESSAGE_PARA = extern struct {
    cbSize: {"kind":"UInt32"},
    dwMsgEncodingType: {"kind":"UInt32"},
    pSigningCert: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    HashAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: {"kind""Ptr","child":{"kind":"Void"}},
    cMsgCert: {"kind":"UInt32"},
    rgpMsgCert: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT}},
    cMsgCrl: {"kind":"UInt32"},
    rgpMsgCrl: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CRL_CONTEXT}},
    cAuthAttr: {"kind":"UInt32"},
    rgAuthAttr: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_ATTRIBUTE},
    cUnauthAttr: {"kind":"UInt32"},
    rgUnauthAttr: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_ATTRIBUTE},
    dwFlags: {"kind":"UInt32"},
    dwInnerContentType: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CRYPT_VERIFY_MESSAGE_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_VERIFY_MESSAGE_PARA = extern struct {
    cbSize: {"kind":"UInt32"},
    dwMsgAndCertEncodingType: {"kind":"UInt32"},
    hCryptProv: {"kind":"UIntPtr"},
    pfnGetSignerCertificate: Windows.Win32.Security.PFN_CRYPT_GET_SIGNER_CERTIFICATE,
    pvGetArg: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: CRYPT_ENCRYPT_MESSAGE_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_ENCRYPT_MESSAGE_PARA = extern struct {
    cbSize: {"kind":"UInt32"},
    dwMsgEncodingType: {"kind":"UInt32"},
    hCryptProv: {"kind":"UIntPtr"},
    ContentEncryptionAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    pvEncryptionAuxInfo: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},
    dwInnerContentType: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CRYPT_DECRYPT_MESSAGE_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_DECRYPT_MESSAGE_PARA = extern struct {
    cbSize: {"kind":"UInt32"},
    dwMsgAndCertEncodingType: {"kind":"UInt32"},
    cCertStore: {"kind":"UInt32"},
    rghCertStore: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
};
// --------------------------------------------------------
// Type: CRYPT_HASH_MESSAGE_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_HASH_MESSAGE_PARA = extern struct {
    cbSize: {"kind":"UInt32"},
    dwMsgEncodingType: {"kind":"UInt32"},
    hCryptProv: {"kind":"UIntPtr"},
    HashAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: CRYPT_KEY_SIGN_MESSAGE_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_KEY_SIGN_MESSAGE_PARA = extern struct {
    cbSize: {"kind":"UInt32"},
    dwMsgAndCertEncodingType: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.CRYPT_KEY_SIGN_MESSAGE_PARA+_Anonymous_e__Union,
    dwKeySpec: {"kind":"UInt32"},
    HashAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: {"kind""Ptr","child":{"kind":"Void"}},
    PubKeyAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CRYPT_KEY_VERIFY_MESSAGE_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_KEY_VERIFY_MESSAGE_PARA = extern struct {
    cbSize: {"kind":"UInt32"},
    dwMsgEncodingType: {"kind":"UInt32"},
    hCryptProv: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: CERT_CHAIN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_CHAIN = extern struct {
    cCerts: {"kind":"UInt32"},
    certs: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
    keyLocatorInfo: Windows.Win32.Security.CRYPT_KEY_PROV_INFO,
};
// --------------------------------------------------------
// Type: PFN_CRYPT_ASYNC_PARAM_FREE_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_ASYNC_PARAM_FREE_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPT_BLOB_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_BLOB_ARRAY = extern struct {
    cBlob: {"kind":"UInt32"},
    rgBlob: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
};
// --------------------------------------------------------
// Type: CRYPT_CREDENTIALS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_CREDENTIALS = extern struct {
    cbSize: {"kind":"UInt32"},
    pszCredentialsOid: {"kind""Ptr","child":{"kind":"SByte"}},
    pvCredentials: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: CRYPT_PASSWORD_CREDENTIALSA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PASSWORD_CREDENTIALSA = extern struct {
    cbSize: {"kind":"UInt32"},
    pszUsername: {"kind""Ptr","child":{"kind":"SByte"}},
    pszPassword: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: CRYPT_PASSWORD_CREDENTIALSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PASSWORD_CREDENTIALSW = extern struct {
    cbSize: {"kind":"UInt32"},
    pszUsername: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszPassword: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: PFN_FREE_ENCODED_OBJECT_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_FREE_ENCODED_OBJECT_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPTNET_URL_CACHE_PRE_FETCH_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTNET_URL_CACHE_PRE_FETCH_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    dwObjectType: {"kind":"UInt32"},
    dwError: {"kind":"UInt32"},
    dwReserved: {"kind":"UInt32"},
    ThisUpdateTime: Windows.Win32.WindowsProgramming.FILETIME,
    NextUpdateTime: Windows.Win32.WindowsProgramming.FILETIME,
    PublishTime: Windows.Win32.WindowsProgramming.FILETIME,
};
// --------------------------------------------------------
// Type: CRYPTNET_URL_CACHE_FLUSH_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTNET_URL_CACHE_FLUSH_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    dwExemptSeconds: {"kind":"UInt32"},
    ExpireTime: Windows.Win32.WindowsProgramming.FILETIME,
};
// --------------------------------------------------------
// Type: CRYPTNET_URL_CACHE_RESPONSE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTNET_URL_CACHE_RESPONSE_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    wResponseType: {"kind":"UInt16"},
    wResponseFlags: {"kind":"UInt16"},
    LastModifiedTime: Windows.Win32.WindowsProgramming.FILETIME,
    dwMaxAge: {"kind":"UInt32"},
    pwszETag: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwProxyId: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CRYPT_RETRIEVE_AUX_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_RETRIEVE_AUX_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    pLastSyncTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    dwMaxUrlRetrievalByteCount: {"kind":"UInt32"},
    pPreFetchInfo: {"kind""Ptr","child":Windows.Win32.Security.CRYPTNET_URL_CACHE_PRE_FETCH_INFO},
    pFlushInfo: {"kind""Ptr","child":Windows.Win32.Security.CRYPTNET_URL_CACHE_FLUSH_INFO},
    ppResponseInfo: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CRYPTNET_URL_CACHE_RESPONSE_INFO}},
    pwszCacheFileNamePrefix: {"kind""Ptr","child":{"kind":"UInt16"}},
    pftCacheResync: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    fProxyCacheRetrieval: Windows.Win32.SystemServices.BOOL,
    dwHttpStatusCode: {"kind":"UInt32"},
    ppwszErrorResponseHeaders: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    ppErrorContentBlob: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB}},
};
// --------------------------------------------------------
// Type: PFN_CRYPT_CANCEL_RETRIEVAL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_CANCEL_RETRIEVAL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPT_ASYNC_RETRIEVAL_COMPLETION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_ASYNC_RETRIEVAL_COMPLETION = extern struct {
    pfnCompletion: Windows.Win32.Security.PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC,
    pvCompletion: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: PFN_CANCEL_ASYNC_RETRIEVAL_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CANCEL_ASYNC_RETRIEVAL_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPT_URL_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_URL_ARRAY = extern struct {
    cUrl: {"kind":"UInt32"},
    rgwszUrl: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
};
// --------------------------------------------------------
// Type: CRYPT_URL_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_URL_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    dwSyncDeltaTime: {"kind":"UInt32"},
    cGroup: {"kind":"UInt32"},
    rgcGroupEntry: {"kind""Ptr","child":{"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: CERT_CRL_CONTEXT_PAIR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_CRL_CONTEXT_PAIR = extern struct {
    pCertContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    pCrlContext: {"kind""Ptr","child":Windows.Win32.Security.CRL_CONTEXT},
};
// --------------------------------------------------------
// Type: CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    iDeltaCrlIndicator: {"kind":"Int32"},
    pftCacheResync: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    pLastSyncTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    pMaxAgeTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    pChainPara: {"kind""Ptr","child":Windows.Win32.Security.CERT_REVOCATION_CHAIN_PARA},
    pDeltaCrlIndicator: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
};
// --------------------------------------------------------
// Type: PFN_CRYPT_ENUM_KEYID_PROP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_ENUM_KEYID_PROP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CERT_CHAIN_ENGINE_CONFIG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_CHAIN_ENGINE_CONFIG = extern struct {
    cbSize: {"kind":"UInt32"},
    hRestrictedRoot: {"kind""Ptr","child":{"kind":"Void"}},
    hRestrictedTrust: {"kind""Ptr","child":{"kind":"Void"}},
    hRestrictedOther: {"kind""Ptr","child":{"kind":"Void"}},
    cAdditionalStore: {"kind":"UInt32"},
    rghAdditionalStore: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    dwFlags: {"kind":"UInt32"},
    dwUrlRetrievalTimeout: {"kind":"UInt32"},
    MaximumCachedCertificates: {"kind":"UInt32"},
    CycleDetectionModulus: {"kind":"UInt32"},
    hExclusiveRoot: {"kind""Ptr","child":{"kind":"Void"}},
    hExclusiveTrustedPeople: {"kind""Ptr","child":{"kind":"Void"}},
    dwExclusiveFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CERT_TRUST_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_TRUST_STATUS = extern struct {
    dwErrorStatus: {"kind":"UInt32"},
    dwInfoStatus: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CERT_REVOCATION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_REVOCATION_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    dwRevocationResult: {"kind":"UInt32"},
    pszRevocationOid: {"kind""Ptr","child":{"kind":"SByte"}},
    pvOidSpecificInfo: {"kind""Ptr","child":{"kind":"Void"}},
    fHasFreshnessTime: Windows.Win32.SystemServices.BOOL,
    dwFreshnessTime: {"kind":"UInt32"},
    pCrlInfo: {"kind""Ptr","child":Windows.Win32.Security.CERT_REVOCATION_CRL_INFO},
};
// --------------------------------------------------------
// Type: CERT_TRUST_LIST_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_TRUST_LIST_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    pCtlEntry: {"kind""Ptr","child":Windows.Win32.Security.CTL_ENTRY},
    pCtlContext: {"kind""Ptr","child":Windows.Win32.Security.CTL_CONTEXT},
};
// --------------------------------------------------------
// Type: CERT_CHAIN_ELEMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_CHAIN_ELEMENT = extern struct {
    cbSize: {"kind":"UInt32"},
    pCertContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    TrustStatus: Windows.Win32.Security.CERT_TRUST_STATUS,
    pRevocationInfo: {"kind""Ptr","child":Windows.Win32.Security.CERT_REVOCATION_INFO},
    pIssuanceUsage: {"kind""Ptr","child":Windows.Win32.Security.CTL_USAGE},
    pApplicationUsage: {"kind""Ptr","child":Windows.Win32.Security.CTL_USAGE},
    pwszExtendedErrorInfo: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: CERT_SIMPLE_CHAIN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_SIMPLE_CHAIN = extern struct {
    cbSize: {"kind":"UInt32"},
    TrustStatus: Windows.Win32.Security.CERT_TRUST_STATUS,
    cElement: {"kind":"UInt32"},
    rgpElement: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CERT_CHAIN_ELEMENT}},
    pTrustListInfo: {"kind""Ptr","child":Windows.Win32.Security.CERT_TRUST_LIST_INFO},
    fHasRevocationFreshnessTime: Windows.Win32.SystemServices.BOOL,
    dwRevocationFreshnessTime: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CERT_CHAIN_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_CHAIN_CONTEXT = extern struct {
    cbSize: {"kind":"UInt32"},
    TrustStatus: Windows.Win32.Security.CERT_TRUST_STATUS,
    cChain: {"kind":"UInt32"},
    rgpChain: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CERT_SIMPLE_CHAIN}},
    cLowerQualityChainContext: {"kind":"UInt32"},
    rgpLowerQualityChainContext: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CERT_CHAIN_CONTEXT}},
    fHasRevocationFreshnessTime: Windows.Win32.SystemServices.BOOL,
    dwRevocationFreshnessTime: {"kind":"UInt32"},
    dwCreateFlags: {"kind":"UInt32"},
    ChainId: Guid,
};
// --------------------------------------------------------
// Type: CERT_USAGE_MATCH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_USAGE_MATCH = extern struct {
    dwType: {"kind":"UInt32"},
    Usage: Windows.Win32.Security.CTL_USAGE,
};
// --------------------------------------------------------
// Type: CTL_USAGE_MATCH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CTL_USAGE_MATCH = extern struct {
    dwType: {"kind":"UInt32"},
    Usage: Windows.Win32.Security.CTL_USAGE,
};
// --------------------------------------------------------
// Type: CERT_CHAIN_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_CHAIN_PARA = extern struct {
    cbSize: {"kind":"UInt32"},
    RequestedUsage: Windows.Win32.Security.CERT_USAGE_MATCH,
};
// --------------------------------------------------------
// Type: CERT_REVOCATION_CHAIN_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_REVOCATION_CHAIN_PARA = extern struct {
    cbSize: {"kind":"UInt32"},
    hChainEngine: Windows.Win32.Security.HCERTCHAINENGINE,
    hAdditionalStore: {"kind""Ptr","child":{"kind":"Void"}},
    dwChainFlags: {"kind":"UInt32"},
    dwUrlRetrievalTimeout: {"kind":"UInt32"},
    pftCurrentTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    pftCacheResync: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    cbMaxUrlRetrievalByteCount: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CRL_REVOCATION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRL_REVOCATION_INFO = extern struct {
    pCrlEntry: {"kind""Ptr","child":Windows.Win32.Security.CRL_ENTRY},
    pCrlContext: {"kind""Ptr","child":Windows.Win32.Security.CRL_CONTEXT},
    pCrlIssuerChain: {"kind""Ptr","child":Windows.Win32.Security.CERT_CHAIN_CONTEXT},
};
// --------------------------------------------------------
// Type: PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CERT_CHAIN_FIND_BY_ISSUER_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_CHAIN_FIND_BY_ISSUER_PARA = extern struct {
    cbSize: {"kind":"UInt32"},
    pszUsageIdentifier: {"kind""Ptr","child":{"kind":"SByte"}},
    dwKeySpec: {"kind":"UInt32"},
    dwAcquirePrivateKeyFlags: {"kind":"UInt32"},
    cIssuer: {"kind":"UInt32"},
    rgIssuer: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
    pfnFindCallback: Windows.Win32.Security.PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK,
    pvFindArg: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: CERT_CHAIN_POLICY_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_CHAIN_POLICY_PARA = extern struct {
    cbSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    pvExtraPolicyPara: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: CERT_CHAIN_POLICY_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_CHAIN_POLICY_STATUS = extern struct {
    cbSize: {"kind":"UInt32"},
    dwError: {"kind":"UInt32"},
    lChainIndex: {"kind":"Int32"},
    lElementIndex: {"kind":"Int32"},
    pvExtraPolicyStatus: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA = extern struct {
    cbSize: {"kind":"UInt32"},
    dwRegPolicySettings: {"kind":"UInt32"},
    pSignerInfo: {"kind""Ptr","child":Windows.Win32.Security.CMSG_SIGNER_INFO},
};
// --------------------------------------------------------
// Type: AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS = extern struct {
    cbSize: {"kind":"UInt32"},
    fCommercial: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA = extern struct {
    cbSize: {"kind":"UInt32"},
    dwRegPolicySettings: {"kind":"UInt32"},
    fCommercial: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: HTTPSPolicyCallbackData
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HTTPSPolicyCallbackData = extern struct {
    Anonymous: Windows.Win32.Security.HTTPSPolicyCallbackData+_Anonymous_e__Union,
    dwAuthType: {"kind":"UInt32"},
    fdwChecks: {"kind":"UInt32"},
    pwszServerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: EV_EXTRA_CERT_CHAIN_POLICY_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EV_EXTRA_CERT_CHAIN_POLICY_PARA = extern struct {
    cbSize: {"kind":"UInt32"},
    dwRootProgramQualifierFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: EV_EXTRA_CERT_CHAIN_POLICY_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EV_EXTRA_CERT_CHAIN_POLICY_STATUS = extern struct {
    cbSize: {"kind":"UInt32"},
    dwQualifiers: {"kind":"UInt32"},
    dwIssuanceUsageIndex: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS = extern struct {
    cbSize: {"kind":"UInt32"},
    dwErrorLevel: {"kind":"UInt32"},
    dwErrorCategory: {"kind":"UInt32"},
    dwReserved: {"kind":"UInt32"},
    wszErrorText: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA = extern struct {
    cbSize: {"kind":"UInt32"},
    dwReserved: {"kind":"UInt32"},
    pwszServerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    rgpszHpkpValue: {"kind":"Array","child": {"kind""Ptr","child":{"kind":"SByte"}}},
};
// --------------------------------------------------------
// Type: SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA = extern struct {
    cbSize: {"kind":"UInt32"},
    dwReserved: {"kind":"UInt32"},
    pwszServerName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS = extern struct {
    cbSize: {"kind":"UInt32"},
    lError: {"kind":"Int32"},
    wszErrorText: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: CRYPT_PKCS12_PBE_PARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PKCS12_PBE_PARAMS = extern struct {
    iIterations: {"kind":"Int32"},
    cbSalt: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PKCS12_PBES2_EXPORT_PARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PKCS12_PBES2_EXPORT_PARAMS = extern struct {
    dwSize: {"kind":"UInt32"},
    hNcryptDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    pwszPbes2Alg: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: CERT_SERVER_OCSP_RESPONSE_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_SERVER_OCSP_RESPONSE_CONTEXT = extern struct {
    cbSize: {"kind":"UInt32"},
    pbEncodedOcspResponse: {"kind""Ptr","child":{"kind":"Byte"}},
    cbEncodedOcspResponse: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CERT_SERVER_OCSP_RESPONSE_OPEN_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_SERVER_OCSP_RESPONSE_OPEN_PARA = extern struct {
    cbSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    pcbUsedSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    pwszOcspDirectory: {"kind""Ptr","child":{"kind":"UInt16"}},
    pfnUpdateCallback: Windows.Win32.Security.PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK,
    pvUpdateCallbackArg: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: CERT_SELECT_CHAIN_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_SELECT_CHAIN_PARA = extern struct {
    hChainEngine: Windows.Win32.Security.HCERTCHAINENGINE,
    pTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    hAdditionalStore: {"kind""Ptr","child":{"kind":"Void"}},
    pChainPara: {"kind""Ptr","child":Windows.Win32.Security.CERT_CHAIN_PARA},
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CERT_SELECT_CRITERIA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_SELECT_CRITERIA = extern struct {
    dwType: {"kind":"UInt32"},
    cPara: {"kind":"UInt32"},
    ppPara: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
};
// --------------------------------------------------------
// Type: CRYPT_TIMESTAMP_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_TIMESTAMP_REQUEST = extern struct {
    dwVersion: {"kind":"UInt32"},
    HashAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    HashedMessage: Windows.Win32.Security.CRYPTOAPI_BLOB,
    pszTSAPolicyId: {"kind""Ptr","child":{"kind":"SByte"}},
    Nonce: Windows.Win32.Security.CRYPTOAPI_BLOB,
    fCertReq: Windows.Win32.SystemServices.BOOL,
    cExtension: {"kind":"UInt32"},
    rgExtension: {"kind""Ptr","child":Windows.Win32.Security.CERT_EXTENSION},
};
// --------------------------------------------------------
// Type: CRYPT_TIMESTAMP_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_TIMESTAMP_RESPONSE = extern struct {
    dwStatus: {"kind":"UInt32"},
    cFreeText: {"kind":"UInt32"},
    rgFreeText: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    FailureInfo: Windows.Win32.Security.CRYPT_BIT_BLOB,
    ContentInfo: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_TIMESTAMP_ACCURACY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_TIMESTAMP_ACCURACY = extern struct {
    dwSeconds: {"kind":"UInt32"},
    dwMillis: {"kind":"UInt32"},
    dwMicros: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CRYPT_TIMESTAMP_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_TIMESTAMP_INFO = extern struct {
    dwVersion: {"kind":"UInt32"},
    pszTSAPolicyId: {"kind""Ptr","child":{"kind":"SByte"}},
    HashAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    HashedMessage: Windows.Win32.Security.CRYPTOAPI_BLOB,
    SerialNumber: Windows.Win32.Security.CRYPTOAPI_BLOB,
    ftTime: Windows.Win32.WindowsProgramming.FILETIME,
    pvAccuracy: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_TIMESTAMP_ACCURACY},
    fOrdering: Windows.Win32.SystemServices.BOOL,
    Nonce: Windows.Win32.Security.CRYPTOAPI_BLOB,
    Tsa: Windows.Win32.Security.CRYPTOAPI_BLOB,
    cExtension: {"kind":"UInt32"},
    rgExtension: {"kind""Ptr","child":Windows.Win32.Security.CERT_EXTENSION},
};
// --------------------------------------------------------
// Type: CRYPT_TIMESTAMP_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_TIMESTAMP_CONTEXT = extern struct {
    cbEncoded: {"kind":"UInt32"},
    pbEncoded: {"kind""Ptr","child":{"kind":"Byte"}},
    pTimeStamp: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_TIMESTAMP_INFO},
};
// --------------------------------------------------------
// Type: CRYPT_TIMESTAMP_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_TIMESTAMP_PARA = extern struct {
    pszTSAPolicyId: {"kind""Ptr","child":{"kind":"SByte"}},
    fRequestCerts: Windows.Win32.SystemServices.BOOL,
    Nonce: Windows.Win32.Security.CRYPTOAPI_BLOB,
    cExtension: {"kind":"UInt32"},
    rgExtension: {"kind""Ptr","child":Windows.Win32.Security.CERT_EXTENSION},
};
// --------------------------------------------------------
// Type: PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE = extern struct {
    cbSize: {"kind":"UInt32"},
    pfnGet: Windows.Win32.Security.PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET,
    pfnRelease: Windows.Win32.Security.PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE,
    pfnFreePassword: Windows.Win32.Security.PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD,
    pfnFree: Windows.Win32.Security.PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE,
    pfnFreeIdentifier: Windows.Win32.Security.PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER,
};
// --------------------------------------------------------
// Type: PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_IS_WEAK_HASH
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_IS_WEAK_HASH = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPTPROTECT_PROMPTSTRUCT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTPROTECT_PROMPTSTRUCT = extern struct {
    cbSize: {"kind":"UInt32"},
    dwPromptFlags: {"kind":"UInt32"},
    hwndApp: Windows.Win32.WindowsAndMessaging.HWND,
    szPrompt: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SCARD_READERSTATEA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCARD_READERSTATEA = extern struct {
    szReader: {"kind""Ptr","child":{"kind":"SByte"}},
    pvUserData: {"kind""Ptr","child":{"kind":"Void"}},
    dwCurrentState: {"kind":"UInt32"},
    dwEventState: {"kind":"UInt32"},
    cbAtr: {"kind":"UInt32"},
    rgbAtr: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SCARD_READERSTATEW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCARD_READERSTATEW = extern struct {
    szReader: {"kind""Ptr","child":{"kind":"UInt16"}},
    pvUserData: {"kind""Ptr","child":{"kind":"Void"}},
    dwCurrentState: {"kind":"UInt32"},
    dwEventState: {"kind":"UInt32"},
    cbAtr: {"kind":"UInt32"},
    rgbAtr: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SCARD_ATRMASK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCARD_ATRMASK = extern struct {
    cbAtr: {"kind":"UInt32"},
    rgbAtr: {"kind":"Array","child": {"kind":"Byte"}},
    rgbMask: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: LPOCNCONNPROCA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPOCNCONNPROCA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPOCNCONNPROCW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPOCNCONNPROCW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPOCNCHKPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPOCNCHKPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPOCNDSCPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPOCNDSCPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: OPENCARD_SEARCH_CRITERIAA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OPENCARD_SEARCH_CRITERIAA = extern struct {
    dwStructSize: {"kind":"UInt32"},
    lpstrGroupNames: {"kind""Ptr","child":{"kind":"SByte"}},
    nMaxGroupNames: {"kind":"UInt32"},
    rgguidInterfaces: {"kind""Ptr","child":Guid},
    cguidInterfaces: {"kind":"UInt32"},
    lpstrCardNames: {"kind""Ptr","child":{"kind":"SByte"}},
    nMaxCardNames: {"kind":"UInt32"},
    lpfnCheck: Windows.Win32.Security.LPOCNCHKPROC,
    lpfnConnect: Windows.Win32.Security.LPOCNCONNPROCA,
    lpfnDisconnect: Windows.Win32.Security.LPOCNDSCPROC,
    pvUserData: {"kind""Ptr","child":{"kind":"Void"}},
    dwShareMode: {"kind":"UInt32"},
    dwPreferredProtocols: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: OPENCARD_SEARCH_CRITERIAW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OPENCARD_SEARCH_CRITERIAW = extern struct {
    dwStructSize: {"kind":"UInt32"},
    lpstrGroupNames: {"kind""Ptr","child":{"kind":"UInt16"}},
    nMaxGroupNames: {"kind":"UInt32"},
    rgguidInterfaces: {"kind""Ptr","child":Guid},
    cguidInterfaces: {"kind":"UInt32"},
    lpstrCardNames: {"kind""Ptr","child":{"kind":"UInt16"}},
    nMaxCardNames: {"kind":"UInt32"},
    lpfnCheck: Windows.Win32.Security.LPOCNCHKPROC,
    lpfnConnect: Windows.Win32.Security.LPOCNCONNPROCW,
    lpfnDisconnect: Windows.Win32.Security.LPOCNDSCPROC,
    pvUserData: {"kind""Ptr","child":{"kind":"Void"}},
    dwShareMode: {"kind":"UInt32"},
    dwPreferredProtocols: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: OPENCARDNAME_EXA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OPENCARDNAME_EXA = extern struct {
    dwStructSize: {"kind":"UInt32"},
    hSCardContext: {"kind":"UIntPtr"},
    hwndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    dwFlags: {"kind":"UInt32"},
    lpstrTitle: {"kind""Ptr","child":{"kind":"SByte"}},
    lpstrSearchDesc: {"kind""Ptr","child":{"kind":"SByte"}},
    hIcon: Windows.Win32.Gdi.HICON,
    pOpenCardSearchCriteria: {"kind""Ptr","child":Windows.Win32.Security.OPENCARD_SEARCH_CRITERIAA},
    lpfnConnect: Windows.Win32.Security.LPOCNCONNPROCA,
    pvUserData: {"kind""Ptr","child":{"kind":"Void"}},
    dwShareMode: {"kind":"UInt32"},
    dwPreferredProtocols: {"kind":"UInt32"},
    lpstrRdr: {"kind""Ptr","child":{"kind":"SByte"}},
    nMaxRdr: {"kind":"UInt32"},
    lpstrCard: {"kind""Ptr","child":{"kind":"SByte"}},
    nMaxCard: {"kind":"UInt32"},
    dwActiveProtocol: {"kind":"UInt32"},
    hCardHandle: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: OPENCARDNAME_EXW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OPENCARDNAME_EXW = extern struct {
    dwStructSize: {"kind":"UInt32"},
    hSCardContext: {"kind":"UIntPtr"},
    hwndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    dwFlags: {"kind":"UInt32"},
    lpstrTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpstrSearchDesc: {"kind""Ptr","child":{"kind":"UInt16"}},
    hIcon: Windows.Win32.Gdi.HICON,
    pOpenCardSearchCriteria: {"kind""Ptr","child":Windows.Win32.Security.OPENCARD_SEARCH_CRITERIAW},
    lpfnConnect: Windows.Win32.Security.LPOCNCONNPROCW,
    pvUserData: {"kind""Ptr","child":{"kind":"Void"}},
    dwShareMode: {"kind":"UInt32"},
    dwPreferredProtocols: {"kind":"UInt32"},
    lpstrRdr: {"kind""Ptr","child":{"kind":"UInt16"}},
    nMaxRdr: {"kind":"UInt32"},
    lpstrCard: {"kind""Ptr","child":{"kind":"UInt16"}},
    nMaxCard: {"kind":"UInt32"},
    dwActiveProtocol: {"kind":"UInt32"},
    hCardHandle: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: READER_SEL_REQUEST_MATCH_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const READER_SEL_REQUEST_MATCH_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: READER_SEL_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const READER_SEL_REQUEST = extern struct {
    dwShareMode: {"kind":"UInt32"},
    dwPreferredProtocols: {"kind":"UInt32"},
    MatchType: Windows.Win32.Security.READER_SEL_REQUEST_MATCH_TYPE,
    Anonymous: Windows.Win32.Security.READER_SEL_REQUEST+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _SerialNumberParameter_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _SerialNumberParameter_e__Struct = extern struct {
            cbSerialNumberOffset: {"kind":"UInt32"},
            cbSerialNumberLength: {"kind":"UInt32"},
            dwDesiredCardModuleVersion: {"kind":"UInt32"},
        };
        // --------------------------------------------------------
        // Type: _ReaderAndContainerParameter_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _ReaderAndContainerParameter_e__Struct = extern struct {
            cbReaderNameOffset: {"kind":"UInt32"},
            cchReaderNameLength: {"kind":"UInt32"},
            cbContainerNameOffset: {"kind":"UInt32"},
            cchContainerNameLength: {"kind":"UInt32"},
            dwDesiredCardModuleVersion: {"kind":"UInt32"},
            dwCspFlags: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: READER_SEL_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const READER_SEL_RESPONSE = extern struct {
    cbReaderNameOffset: {"kind":"UInt32"},
    cchReaderNameLength: {"kind":"UInt32"},
    cbCardNameOffset: {"kind":"UInt32"},
    cchCardNameLength: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: OPENCARDNAMEA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OPENCARDNAMEA = extern struct {
    dwStructSize: {"kind":"UInt32"},
    hwndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    hSCardContext: {"kind":"UIntPtr"},
    lpstrGroupNames: {"kind""Ptr","child":{"kind":"SByte"}},
    nMaxGroupNames: {"kind":"UInt32"},
    lpstrCardNames: {"kind""Ptr","child":{"kind":"SByte"}},
    nMaxCardNames: {"kind":"UInt32"},
    rgguidInterfaces: {"kind""Ptr","child":Guid},
    cguidInterfaces: {"kind":"UInt32"},
    lpstrRdr: {"kind""Ptr","child":{"kind":"SByte"}},
    nMaxRdr: {"kind":"UInt32"},
    lpstrCard: {"kind""Ptr","child":{"kind":"SByte"}},
    nMaxCard: {"kind":"UInt32"},
    lpstrTitle: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},
    pvUserData: {"kind""Ptr","child":{"kind":"Void"}},
    dwShareMode: {"kind":"UInt32"},
    dwPreferredProtocols: {"kind":"UInt32"},
    dwActiveProtocol: {"kind":"UInt32"},
    lpfnConnect: Windows.Win32.Security.LPOCNCONNPROCA,
    lpfnCheck: Windows.Win32.Security.LPOCNCHKPROC,
    lpfnDisconnect: Windows.Win32.Security.LPOCNDSCPROC,
    hCardHandle: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: OPENCARDNAMEW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OPENCARDNAMEW = extern struct {
    dwStructSize: {"kind":"UInt32"},
    hwndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    hSCardContext: {"kind":"UIntPtr"},
    lpstrGroupNames: {"kind""Ptr","child":{"kind":"UInt16"}},
    nMaxGroupNames: {"kind":"UInt32"},
    lpstrCardNames: {"kind""Ptr","child":{"kind":"UInt16"}},
    nMaxCardNames: {"kind":"UInt32"},
    rgguidInterfaces: {"kind""Ptr","child":Guid},
    cguidInterfaces: {"kind":"UInt32"},
    lpstrRdr: {"kind""Ptr","child":{"kind":"UInt16"}},
    nMaxRdr: {"kind":"UInt32"},
    lpstrCard: {"kind""Ptr","child":{"kind":"UInt16"}},
    nMaxCard: {"kind":"UInt32"},
    lpstrTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    pvUserData: {"kind""Ptr","child":{"kind":"Void"}},
    dwShareMode: {"kind":"UInt32"},
    dwPreferredProtocols: {"kind":"UInt32"},
    dwActiveProtocol: {"kind":"UInt32"},
    lpfnConnect: Windows.Win32.Security.LPOCNCONNPROCW,
    lpfnCheck: Windows.Win32.Security.LPOCNCHKPROC,
    lpfnDisconnect: Windows.Win32.Security.LPOCNDSCPROC,
    hCardHandle: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: SERVICE_TRIGGER_CUSTOM_STATE_ID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_TRIGGER_CUSTOM_STATE_ID = extern struct {
    Data: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM = extern struct {
    u: Windows.Win32.Security.SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM+_u_e__Union,
    // --------------------------------------------------------
    // Type: _u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _s_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _s_e__Struct = extern struct {
            DataOffset: {"kind":"UInt32"},
            Data: {"kind":"Array","child": {"kind":"Byte"}},
        };
    };
};
// --------------------------------------------------------
// Type: SERVICE_DESCRIPTIONA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_DESCRIPTIONA = extern struct {
    lpDescription: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: SERVICE_DESCRIPTIONW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_DESCRIPTIONW = extern struct {
    lpDescription: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SC_ACTION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SC_ACTION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: SC_ACTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SC_ACTION = extern struct {
    Type: Windows.Win32.Security.SC_ACTION_TYPE,
    Delay: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SERVICE_FAILURE_ACTIONSA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_FAILURE_ACTIONSA = extern struct {
    dwResetPeriod: {"kind":"UInt32"},
    lpRebootMsg: {"kind""Ptr","child":{"kind":"SByte"}},
    lpCommand: {"kind""Ptr","child":{"kind":"SByte"}},
    cActions: {"kind":"UInt32"},
    lpsaActions: {"kind""Ptr","child":Windows.Win32.Security.SC_ACTION},
};
// --------------------------------------------------------
// Type: SERVICE_FAILURE_ACTIONSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_FAILURE_ACTIONSW = extern struct {
    dwResetPeriod: {"kind":"UInt32"},
    lpRebootMsg: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpCommand: {"kind""Ptr","child":{"kind":"UInt16"}},
    cActions: {"kind":"UInt32"},
    lpsaActions: {"kind""Ptr","child":Windows.Win32.Security.SC_ACTION},
};
// --------------------------------------------------------
// Type: SERVICE_DELAYED_AUTO_START_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_DELAYED_AUTO_START_INFO = extern struct {
    fDelayedAutostart: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: SERVICE_FAILURE_ACTIONS_FLAG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_FAILURE_ACTIONS_FLAG = extern struct {
    fFailureActionsOnNonCrashFailures: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: SERVICE_SID_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_SID_INFO = extern struct {
    dwServiceSidType: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SERVICE_REQUIRED_PRIVILEGES_INFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_REQUIRED_PRIVILEGES_INFOA = extern struct {
    pmszRequiredPrivileges: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: SERVICE_REQUIRED_PRIVILEGES_INFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_REQUIRED_PRIVILEGES_INFOW = extern struct {
    pmszRequiredPrivileges: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SERVICE_PRESHUTDOWN_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_PRESHUTDOWN_INFO = extern struct {
    dwPreshutdownTimeout: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SERVICE_TRIGGER_SPECIFIC_DATA_ITEM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_TRIGGER_SPECIFIC_DATA_ITEM = extern struct {
    dwDataType: {"kind":"UInt32"},
    cbData: {"kind":"UInt32"},
    pData: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SERVICE_TRIGGER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_TRIGGER = extern struct {
    dwTriggerType: {"kind":"UInt32"},
    dwAction: {"kind":"UInt32"},
    pTriggerSubtype: {"kind""Ptr","child":Guid},
    cDataItems: {"kind":"UInt32"},
    pDataItems: {"kind""Ptr","child":Windows.Win32.Security.SERVICE_TRIGGER_SPECIFIC_DATA_ITEM},
};
// --------------------------------------------------------
// Type: SERVICE_TRIGGER_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_TRIGGER_INFO = extern struct {
    cTriggers: {"kind":"UInt32"},
    pTriggers: {"kind""Ptr","child":Windows.Win32.Security.SERVICE_TRIGGER},
    pReserved: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SERVICE_PREFERRED_NODE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_PREFERRED_NODE_INFO = extern struct {
    usPreferredNode: {"kind":"UInt16"},
    fDelete: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: SERVICE_TIMECHANGE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_TIMECHANGE_INFO = extern struct {
    liNewTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    liOldTime: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: SERVICE_LAUNCH_PROTECTED_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_LAUNCH_PROTECTED_INFO = extern struct {
    dwLaunchProtected: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SC_HANDLE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SC_HANDLE__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: SERVICE_STATUS_HANDLE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_STATUS_HANDLE__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: SC_STATUS_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SC_STATUS_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: SC_ENUM_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SC_ENUM_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: SERVICE_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_STATUS = extern struct {
    dwServiceType: {"kind":"UInt32"},
    dwCurrentState: {"kind":"UInt32"},
    dwControlsAccepted: {"kind":"UInt32"},
    dwWin32ExitCode: {"kind":"UInt32"},
    dwServiceSpecificExitCode: {"kind":"UInt32"},
    dwCheckPoint: {"kind":"UInt32"},
    dwWaitHint: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SERVICE_STATUS_PROCESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_STATUS_PROCESS = extern struct {
    dwServiceType: {"kind":"UInt32"},
    dwCurrentState: {"kind":"UInt32"},
    dwControlsAccepted: {"kind":"UInt32"},
    dwWin32ExitCode: {"kind":"UInt32"},
    dwServiceSpecificExitCode: {"kind":"UInt32"},
    dwCheckPoint: {"kind":"UInt32"},
    dwWaitHint: {"kind":"UInt32"},
    dwProcessId: {"kind":"UInt32"},
    dwServiceFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: ENUM_SERVICE_STATUSA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENUM_SERVICE_STATUSA = extern struct {
    lpServiceName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpDisplayName: {"kind""Ptr","child":{"kind":"SByte"}},
    ServiceStatus: Windows.Win32.Security.SERVICE_STATUS,
};
// --------------------------------------------------------
// Type: ENUM_SERVICE_STATUSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENUM_SERVICE_STATUSW = extern struct {
    lpServiceName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpDisplayName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ServiceStatus: Windows.Win32.Security.SERVICE_STATUS,
};
// --------------------------------------------------------
// Type: ENUM_SERVICE_STATUS_PROCESSA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENUM_SERVICE_STATUS_PROCESSA = extern struct {
    lpServiceName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpDisplayName: {"kind""Ptr","child":{"kind":"SByte"}},
    ServiceStatusProcess: Windows.Win32.Security.SERVICE_STATUS_PROCESS,
};
// --------------------------------------------------------
// Type: ENUM_SERVICE_STATUS_PROCESSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENUM_SERVICE_STATUS_PROCESSW = extern struct {
    lpServiceName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpDisplayName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ServiceStatusProcess: Windows.Win32.Security.SERVICE_STATUS_PROCESS,
};
// --------------------------------------------------------
// Type: QUERY_SERVICE_LOCK_STATUSA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QUERY_SERVICE_LOCK_STATUSA = extern struct {
    fIsLocked: {"kind":"UInt32"},
    lpLockOwner: {"kind""Ptr","child":{"kind":"SByte"}},
    dwLockDuration: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: QUERY_SERVICE_LOCK_STATUSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QUERY_SERVICE_LOCK_STATUSW = extern struct {
    fIsLocked: {"kind":"UInt32"},
    lpLockOwner: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwLockDuration: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: QUERY_SERVICE_CONFIGA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QUERY_SERVICE_CONFIGA = extern struct {
    dwServiceType: {"kind":"UInt32"},
    dwStartType: {"kind":"UInt32"},
    dwErrorControl: {"kind":"UInt32"},
    lpBinaryPathName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpLoadOrderGroup: {"kind""Ptr","child":{"kind":"SByte"}},
    dwTagId: {"kind":"UInt32"},
    lpDependencies: {"kind""Ptr","child":{"kind":"SByte"}},
    lpServiceStartName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpDisplayName: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: QUERY_SERVICE_CONFIGW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QUERY_SERVICE_CONFIGW = extern struct {
    dwServiceType: {"kind":"UInt32"},
    dwStartType: {"kind":"UInt32"},
    dwErrorControl: {"kind":"UInt32"},
    lpBinaryPathName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpLoadOrderGroup: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwTagId: {"kind":"UInt32"},
    lpDependencies: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpServiceStartName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpDisplayName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SERVICE_MAIN_FUNCTIONW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SERVICE_MAIN_FUNCTIONW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SERVICE_MAIN_FUNCTIONA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SERVICE_MAIN_FUNCTIONA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPSERVICE_MAIN_FUNCTIONW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPSERVICE_MAIN_FUNCTIONW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPSERVICE_MAIN_FUNCTIONA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPSERVICE_MAIN_FUNCTIONA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SERVICE_TABLE_ENTRYA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_TABLE_ENTRYA = extern struct {
    lpServiceName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpServiceProc: Windows.Win32.Security.LPSERVICE_MAIN_FUNCTIONA,
};
// --------------------------------------------------------
// Type: SERVICE_TABLE_ENTRYW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_TABLE_ENTRYW = extern struct {
    lpServiceName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpServiceProc: Windows.Win32.Security.LPSERVICE_MAIN_FUNCTIONW,
};
// --------------------------------------------------------
// Type: HANDLER_FUNCTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HANDLER_FUNCTION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: HANDLER_FUNCTION_EX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HANDLER_FUNCTION_EX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPHANDLER_FUNCTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPHANDLER_FUNCTION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPHANDLER_FUNCTION_EX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPHANDLER_FUNCTION_EX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_SC_NOTIFY_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_SC_NOTIFY_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SERVICE_NOTIFY_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_NOTIFY_1 = extern struct {
    dwVersion: {"kind":"UInt32"},
    pfnNotifyCallback: Windows.Win32.Security.PFN_SC_NOTIFY_CALLBACK,
    pContext: {"kind""Ptr","child":{"kind":"Void"}},
    dwNotificationStatus: {"kind":"UInt32"},
    ServiceStatus: Windows.Win32.Security.SERVICE_STATUS_PROCESS,
};
// --------------------------------------------------------
// Type: SERVICE_NOTIFY_2A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_NOTIFY_2A = extern struct {
    dwVersion: {"kind":"UInt32"},
    pfnNotifyCallback: Windows.Win32.Security.PFN_SC_NOTIFY_CALLBACK,
    pContext: {"kind""Ptr","child":{"kind":"Void"}},
    dwNotificationStatus: {"kind":"UInt32"},
    ServiceStatus: Windows.Win32.Security.SERVICE_STATUS_PROCESS,
    dwNotificationTriggered: {"kind":"UInt32"},
    pszServiceNames: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: SERVICE_NOTIFY_2W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_NOTIFY_2W = extern struct {
    dwVersion: {"kind":"UInt32"},
    pfnNotifyCallback: Windows.Win32.Security.PFN_SC_NOTIFY_CALLBACK,
    pContext: {"kind""Ptr","child":{"kind":"Void"}},
    dwNotificationStatus: {"kind":"UInt32"},
    ServiceStatus: Windows.Win32.Security.SERVICE_STATUS_PROCESS,
    dwNotificationTriggered: {"kind":"UInt32"},
    pszServiceNames: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SERVICE_CONTROL_STATUS_REASON_PARAMSA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_CONTROL_STATUS_REASON_PARAMSA = extern struct {
    dwReason: {"kind":"UInt32"},
    pszComment: {"kind""Ptr","child":{"kind":"SByte"}},
    ServiceStatus: Windows.Win32.Security.SERVICE_STATUS_PROCESS,
};
// --------------------------------------------------------
// Type: SERVICE_CONTROL_STATUS_REASON_PARAMSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_CONTROL_STATUS_REASON_PARAMSW = extern struct {
    dwReason: {"kind":"UInt32"},
    pszComment: {"kind""Ptr","child":{"kind":"UInt16"}},
    ServiceStatus: Windows.Win32.Security.SERVICE_STATUS_PROCESS,
};
// --------------------------------------------------------
// Type: SERVICE_START_REASON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_START_REASON = extern struct {
    dwReason: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SC_EVENT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SC_EVENT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: SC_NOTIFICATION_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SC_NOTIFICATION_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PSC_NOTIFICATION_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PSC_NOTIFICATION_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: _SC_NOTIFICATION_REGISTRATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _SC_NOTIFICATION_REGISTRATION = opaque {
};
// --------------------------------------------------------
// Type: SERVICE_REGISTRY_STATE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SERVICE_REGISTRY_STATE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: SERVICE_DIRECTORY_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SERVICE_DIRECTORY_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: LSA_TRUST_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_TRUST_INFORMATION = extern struct {
    Name: Windows.Win32.Security.UNICODE_STRING,
    Sid: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: LSA_REFERENCED_DOMAIN_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_REFERENCED_DOMAIN_LIST = extern struct {
    Entries: {"kind":"UInt32"},
    Domains: {"kind""Ptr","child":Windows.Win32.Security.LSA_TRUST_INFORMATION},
};
// --------------------------------------------------------
// Type: LSA_TRANSLATED_SID2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_TRANSLATED_SID2 = extern struct {
    Use: Windows.Win32.Security.SID_NAME_USE,
    Sid: {"kind""Ptr","child":{"kind":"Void"}},
    DomainIndex: {"kind":"Int32"},
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: LSA_TRANSLATED_NAME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_TRANSLATED_NAME = extern struct {
    Use: Windows.Win32.Security.SID_NAME_USE,
    Name: Windows.Win32.Security.UNICODE_STRING,
    DomainIndex: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: POLICY_ACCOUNT_DOMAIN_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_ACCOUNT_DOMAIN_INFO = extern struct {
    DomainName: Windows.Win32.Security.UNICODE_STRING,
    DomainSid: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: POLICY_DNS_DOMAIN_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_DNS_DOMAIN_INFO = extern struct {
    Name: Windows.Win32.Security.UNICODE_STRING,
    DnsDomainName: Windows.Win32.Security.UNICODE_STRING,
    DnsForestName: Windows.Win32.Security.UNICODE_STRING,
    DomainGuid: Guid,
    Sid: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: LSA_LOOKUP_DOMAIN_INFO_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_LOOKUP_DOMAIN_INFO_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: SECURITY_LOGON_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SECURITY_LOGON_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: SE_ADT_PARAMETER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SE_ADT_PARAMETER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: SE_ADT_OBJECT_TYPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SE_ADT_OBJECT_TYPE = extern struct {
    ObjectType: Guid,
    Flags: {"kind":"UInt16"},
    Level: {"kind":"UInt16"},
    AccessMask: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SE_ADT_PARAMETER_ARRAY_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SE_ADT_PARAMETER_ARRAY_ENTRY = extern struct {
    Type: Windows.Win32.Security.SE_ADT_PARAMETER_TYPE,
    Length: {"kind":"UInt32"},
    Data: {"kind":"Array","child": {"kind":"UIntPtr"}},
    Address: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: SE_ADT_ACCESS_REASON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SE_ADT_ACCESS_REASON = extern struct {
    AccessMask: {"kind":"UInt32"},
    AccessReasons: {"kind":"Array","child": {"kind":"UInt32"}},
    ObjectTypeIndex: {"kind":"UInt32"},
    AccessGranted: {"kind":"UInt32"},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: SE_ADT_CLAIMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SE_ADT_CLAIMS = extern struct {
    Length: {"kind":"UInt32"},
    Claims: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: SE_ADT_PARAMETER_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SE_ADT_PARAMETER_ARRAY = extern struct {
    CategoryId: {"kind":"UInt32"},
    AuditId: {"kind":"UInt32"},
    ParameterCount: {"kind":"UInt32"},
    Length: {"kind":"UInt32"},
    FlatSubCategoryId: {"kind":"UInt16"},
    Type: {"kind":"UInt16"},
    Flags: {"kind":"UInt32"},
    Parameters: {"kind":"Array","child": Windows.Win32.Security.SE_ADT_PARAMETER_ARRAY_ENTRY},
};
// --------------------------------------------------------
// Type: SE_ADT_PARAMETER_ARRAY_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SE_ADT_PARAMETER_ARRAY_EX = extern struct {
    CategoryId: {"kind":"UInt32"},
    AuditId: {"kind":"UInt32"},
    Version: {"kind":"UInt32"},
    ParameterCount: {"kind":"UInt32"},
    Length: {"kind":"UInt32"},
    FlatSubCategoryId: {"kind":"UInt16"},
    Type: {"kind":"UInt16"},
    Flags: {"kind":"UInt32"},
    Parameters: {"kind":"Array","child": Windows.Win32.Security.SE_ADT_PARAMETER_ARRAY_ENTRY},
};
// --------------------------------------------------------
// Type: POLICY_AUDIT_EVENT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const POLICY_AUDIT_EVENT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: LSA_TRANSLATED_SID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_TRANSLATED_SID = extern struct {
    Use: Windows.Win32.Security.SID_NAME_USE,
    RelativeId: {"kind":"UInt32"},
    DomainIndex: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: POLICY_LSA_SERVER_ROLE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const POLICY_LSA_SERVER_ROLE = *opaque{
};
// --------------------------------------------------------
// Type: POLICY_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const POLICY_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: POLICY_AUDIT_LOG_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_AUDIT_LOG_INFO = extern struct {
    AuditLogPercentFull: {"kind":"UInt32"},
    MaximumLogSize: {"kind":"UInt32"},
    AuditRetentionPeriod: Windows.Win32.SystemServices.LARGE_INTEGER,
    AuditLogFullShutdownInProgress: {"kind":"Byte"},
    TimeToShutdown: Windows.Win32.SystemServices.LARGE_INTEGER,
    NextAuditRecordId: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: POLICY_AUDIT_EVENTS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_AUDIT_EVENTS_INFO = extern struct {
    AuditingMode: {"kind":"Byte"},
    EventAuditingOptions: {"kind""Ptr","child":{"kind":"UInt32"}},
    MaximumAuditEventCount: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: POLICY_AUDIT_SUBCATEGORIES_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_AUDIT_SUBCATEGORIES_INFO = extern struct {
    MaximumSubCategoryCount: {"kind":"UInt32"},
    EventAuditingOptions: {"kind""Ptr","child":{"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: POLICY_AUDIT_CATEGORIES_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_AUDIT_CATEGORIES_INFO = extern struct {
    MaximumCategoryCount: {"kind":"UInt32"},
    SubCategoriesInfo: {"kind""Ptr","child":Windows.Win32.Security.POLICY_AUDIT_SUBCATEGORIES_INFO},
};
// --------------------------------------------------------
// Type: POLICY_PRIMARY_DOMAIN_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_PRIMARY_DOMAIN_INFO = extern struct {
    Name: Windows.Win32.Security.UNICODE_STRING,
    Sid: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: POLICY_PD_ACCOUNT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_PD_ACCOUNT_INFO = extern struct {
    Name: Windows.Win32.Security.UNICODE_STRING,
};
// --------------------------------------------------------
// Type: POLICY_LSA_SERVER_ROLE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_LSA_SERVER_ROLE_INFO = extern struct {
    LsaServerRole: Windows.Win32.Security.POLICY_LSA_SERVER_ROLE,
};
// --------------------------------------------------------
// Type: POLICY_REPLICA_SOURCE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_REPLICA_SOURCE_INFO = extern struct {
    ReplicaSource: Windows.Win32.Security.UNICODE_STRING,
    ReplicaAccountName: Windows.Win32.Security.UNICODE_STRING,
};
// --------------------------------------------------------
// Type: POLICY_DEFAULT_QUOTA_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_DEFAULT_QUOTA_INFO = extern struct {
    QuotaLimits: Windows.Win32.Security.QUOTA_LIMITS,
};
// --------------------------------------------------------
// Type: POLICY_MODIFICATION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_MODIFICATION_INFO = extern struct {
    ModifiedId: Windows.Win32.SystemServices.LARGE_INTEGER,
    DatabaseCreationTime: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: POLICY_AUDIT_FULL_SET_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_AUDIT_FULL_SET_INFO = extern struct {
    ShutDownOnFull: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: POLICY_AUDIT_FULL_QUERY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_AUDIT_FULL_QUERY_INFO = extern struct {
    ShutDownOnFull: {"kind":"Byte"},
    LogIsFull: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: POLICY_DOMAIN_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const POLICY_DOMAIN_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: POLICY_DOMAIN_EFS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_DOMAIN_EFS_INFO = extern struct {
    InfoLength: {"kind":"UInt32"},
    EfsBlob: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: POLICY_DOMAIN_KERBEROS_TICKET_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_DOMAIN_KERBEROS_TICKET_INFO = extern struct {
    AuthenticationOptions: {"kind":"UInt32"},
    MaxServiceTicketAge: Windows.Win32.SystemServices.LARGE_INTEGER,
    MaxTicketAge: Windows.Win32.SystemServices.LARGE_INTEGER,
    MaxRenewAge: Windows.Win32.SystemServices.LARGE_INTEGER,
    MaxClockSkew: Windows.Win32.SystemServices.LARGE_INTEGER,
    Reserved: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: POLICY_MACHINE_ACCT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_MACHINE_ACCT_INFO = extern struct {
    Rid: {"kind":"UInt32"},
    Sid: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: POLICY_NOTIFICATION_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const POLICY_NOTIFICATION_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: TRUSTED_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TRUSTED_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: TRUSTED_DOMAIN_NAME_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRUSTED_DOMAIN_NAME_INFO = extern struct {
    Name: Windows.Win32.Security.UNICODE_STRING,
};
// --------------------------------------------------------
// Type: TRUSTED_CONTROLLERS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRUSTED_CONTROLLERS_INFO = extern struct {
    Entries: {"kind":"UInt32"},
    Names: {"kind""Ptr","child":Windows.Win32.Security.UNICODE_STRING},
};
// --------------------------------------------------------
// Type: TRUSTED_POSIX_OFFSET_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRUSTED_POSIX_OFFSET_INFO = extern struct {
    Offset: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: TRUSTED_PASSWORD_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRUSTED_PASSWORD_INFO = extern struct {
    Password: Windows.Win32.Security.UNICODE_STRING,
    OldPassword: Windows.Win32.Security.UNICODE_STRING,
};
// --------------------------------------------------------
// Type: TRUSTED_DOMAIN_INFORMATION_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRUSTED_DOMAIN_INFORMATION_EX = extern struct {
    Name: Windows.Win32.Security.UNICODE_STRING,
    FlatName: Windows.Win32.Security.UNICODE_STRING,
    Sid: {"kind""Ptr","child":{"kind":"Void"}},
    TrustDirection: {"kind":"UInt32"},
    TrustType: {"kind":"UInt32"},
    TrustAttributes: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: TRUSTED_DOMAIN_INFORMATION_EX2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRUSTED_DOMAIN_INFORMATION_EX2 = extern struct {
    Name: Windows.Win32.Security.UNICODE_STRING,
    FlatName: Windows.Win32.Security.UNICODE_STRING,
    Sid: {"kind""Ptr","child":{"kind":"Void"}},
    TrustDirection: {"kind":"UInt32"},
    TrustType: {"kind":"UInt32"},
    TrustAttributes: {"kind":"UInt32"},
    ForestTrustLength: {"kind":"UInt32"},
    ForestTrustInfo: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: LSA_AUTH_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_AUTH_INFORMATION = extern struct {
    LastUpdateTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    AuthType: {"kind":"UInt32"},
    AuthInfoLength: {"kind":"UInt32"},
    AuthInfo: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: TRUSTED_DOMAIN_AUTH_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRUSTED_DOMAIN_AUTH_INFORMATION = extern struct {
    IncomingAuthInfos: {"kind":"UInt32"},
    IncomingAuthenticationInformation: {"kind""Ptr","child":Windows.Win32.Security.LSA_AUTH_INFORMATION},
    IncomingPreviousAuthenticationInformation: {"kind""Ptr","child":Windows.Win32.Security.LSA_AUTH_INFORMATION},
    OutgoingAuthInfos: {"kind":"UInt32"},
    OutgoingAuthenticationInformation: {"kind""Ptr","child":Windows.Win32.Security.LSA_AUTH_INFORMATION},
    OutgoingPreviousAuthenticationInformation: {"kind""Ptr","child":Windows.Win32.Security.LSA_AUTH_INFORMATION},
};
// --------------------------------------------------------
// Type: TRUSTED_DOMAIN_FULL_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRUSTED_DOMAIN_FULL_INFORMATION = extern struct {
    Information: Windows.Win32.Security.TRUSTED_DOMAIN_INFORMATION_EX,
    PosixOffset: Windows.Win32.Security.TRUSTED_POSIX_OFFSET_INFO,
    AuthInformation: Windows.Win32.Security.TRUSTED_DOMAIN_AUTH_INFORMATION,
};
// --------------------------------------------------------
// Type: TRUSTED_DOMAIN_FULL_INFORMATION2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRUSTED_DOMAIN_FULL_INFORMATION2 = extern struct {
    Information: Windows.Win32.Security.TRUSTED_DOMAIN_INFORMATION_EX2,
    PosixOffset: Windows.Win32.Security.TRUSTED_POSIX_OFFSET_INFO,
    AuthInformation: Windows.Win32.Security.TRUSTED_DOMAIN_AUTH_INFORMATION,
};
// --------------------------------------------------------
// Type: TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES = extern struct {
    SupportedEncryptionTypes: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: LSA_FOREST_TRUST_RECORD_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_FOREST_TRUST_RECORD_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: LSA_FOREST_TRUST_DOMAIN_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_FOREST_TRUST_DOMAIN_INFO = extern struct {
    Sid: {"kind""Ptr","child":{"kind":"Void"}},
    DnsName: Windows.Win32.Security.UNICODE_STRING,
    NetbiosName: Windows.Win32.Security.UNICODE_STRING,
};
// --------------------------------------------------------
// Type: LSA_FOREST_TRUST_BINARY_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_FOREST_TRUST_BINARY_DATA = extern struct {
    Length: {"kind":"UInt32"},
    Buffer: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: LSA_FOREST_TRUST_RECORD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_FOREST_TRUST_RECORD = extern struct {
    Flags: {"kind":"UInt32"},
    ForestTrustType: Windows.Win32.Security.LSA_FOREST_TRUST_RECORD_TYPE,
    Time: Windows.Win32.SystemServices.LARGE_INTEGER,
    ForestTrustData: Windows.Win32.Security.LSA_FOREST_TRUST_RECORD+_ForestTrustData_e__Union,
    // --------------------------------------------------------
    // Type: _ForestTrustData_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _ForestTrustData_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: LSA_FOREST_TRUST_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_FOREST_TRUST_INFORMATION = extern struct {
    RecordCount: {"kind":"UInt32"},
    Entries: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.LSA_FOREST_TRUST_RECORD}},
};
// --------------------------------------------------------
// Type: LSA_FOREST_TRUST_COLLISION_RECORD_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_FOREST_TRUST_COLLISION_RECORD_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: LSA_FOREST_TRUST_COLLISION_RECORD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_FOREST_TRUST_COLLISION_RECORD = extern struct {
    Index: {"kind":"UInt32"},
    Type: Windows.Win32.Security.LSA_FOREST_TRUST_COLLISION_RECORD_TYPE,
    Flags: {"kind":"UInt32"},
    Name: Windows.Win32.Security.UNICODE_STRING,
};
// --------------------------------------------------------
// Type: LSA_FOREST_TRUST_COLLISION_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_FOREST_TRUST_COLLISION_INFORMATION = extern struct {
    RecordCount: {"kind":"UInt32"},
    Entries: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.LSA_FOREST_TRUST_COLLISION_RECORD}},
};
// --------------------------------------------------------
// Type: LSA_ENUMERATION_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_ENUMERATION_INFORMATION = extern struct {
    Sid: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: LSA_LAST_INTER_LOGON_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_LAST_INTER_LOGON_INFO = extern struct {
    LastSuccessfulLogon: Windows.Win32.SystemServices.LARGE_INTEGER,
    LastFailedLogon: Windows.Win32.SystemServices.LARGE_INTEGER,
    FailedAttemptCountSinceLastSuccessfulLogon: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SECURITY_LOGON_SESSION_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECURITY_LOGON_SESSION_DATA = extern struct {
    Size: {"kind":"UInt32"},
    LogonId: Windows.Win32.Kernel.LUID,
    UserName: Windows.Win32.Security.UNICODE_STRING,
    LogonDomain: Windows.Win32.Security.UNICODE_STRING,
    AuthenticationPackage: Windows.Win32.Security.UNICODE_STRING,
    LogonType: {"kind":"UInt32"},
    Session: {"kind":"UInt32"},
    Sid: {"kind""Ptr","child":{"kind":"Void"}},
    LogonTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    LogonServer: Windows.Win32.Security.UNICODE_STRING,
    DnsDomainName: Windows.Win32.Security.UNICODE_STRING,
    Upn: Windows.Win32.Security.UNICODE_STRING,
    UserFlags: {"kind":"UInt32"},
    LastLogonInfo: Windows.Win32.Security.LSA_LAST_INTER_LOGON_INFO,
    LogonScript: Windows.Win32.Security.UNICODE_STRING,
    ProfilePath: Windows.Win32.Security.UNICODE_STRING,
    HomeDirectory: Windows.Win32.Security.UNICODE_STRING,
    HomeDirectoryDrive: Windows.Win32.Security.UNICODE_STRING,
    LogoffTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    KickOffTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    PasswordLastSet: Windows.Win32.SystemServices.LARGE_INTEGER,
    PasswordCanChange: Windows.Win32.SystemServices.LARGE_INTEGER,
    PasswordMustChange: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: CENTRAL_ACCESS_POLICY_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CENTRAL_ACCESS_POLICY_ENTRY = extern struct {
    Name: Windows.Win32.Security.UNICODE_STRING,
    Description: Windows.Win32.Security.UNICODE_STRING,
    ChangeId: Windows.Win32.Security.UNICODE_STRING,
    LengthAppliesTo: {"kind":"UInt32"},
    AppliesTo: {"kind""Ptr","child":{"kind":"Byte"}},
    LengthSD: {"kind":"UInt32"},
    SD: {"kind""Ptr","child":{"kind":"Void"}},
    LengthStagedSD: {"kind":"UInt32"},
    StagedSD: {"kind""Ptr","child":{"kind":"Void"}},
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CENTRAL_ACCESS_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CENTRAL_ACCESS_POLICY = extern struct {
    CAPID: {"kind""Ptr","child":{"kind":"Void"}},
    Name: Windows.Win32.Security.UNICODE_STRING,
    Description: Windows.Win32.Security.UNICODE_STRING,
    ChangeId: Windows.Win32.Security.UNICODE_STRING,
    Flags: {"kind":"UInt32"},
    CAPECount: {"kind":"UInt32"},
    CAPEs: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CENTRAL_ACCESS_POLICY_ENTRY}},
};
// --------------------------------------------------------
// Type: NEGOTIATE_MESSAGES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NEGOTIATE_MESSAGES = *opaque{
};
// --------------------------------------------------------
// Type: NEGOTIATE_PACKAGE_PREFIX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NEGOTIATE_PACKAGE_PREFIX = extern struct {
    PackageId: {"kind":"UIntPtr"},
    PackageDataA: {"kind""Ptr","child":{"kind":"Void"}},
    PackageDataW: {"kind""Ptr","child":{"kind":"Void"}},
    PrefixLen: {"kind":"UIntPtr"},
    Prefix: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: NEGOTIATE_PACKAGE_PREFIXES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NEGOTIATE_PACKAGE_PREFIXES = extern struct {
    MessageType: {"kind":"UInt32"},
    PrefixCount: {"kind":"UInt32"},
    Offset: {"kind":"UInt32"},
    Pad: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NEGOTIATE_CALLER_NAME_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NEGOTIATE_CALLER_NAME_REQUEST = extern struct {
    MessageType: {"kind":"UInt32"},
    LogonId: Windows.Win32.Kernel.LUID,
};
// --------------------------------------------------------
// Type: NEGOTIATE_CALLER_NAME_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NEGOTIATE_CALLER_NAME_RESPONSE = extern struct {
    MessageType: {"kind":"UInt32"},
    CallerName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: DOMAIN_PASSWORD_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOMAIN_PASSWORD_INFORMATION = extern struct {
    MinPasswordLength: {"kind":"UInt16"},
    PasswordHistoryLength: {"kind":"UInt16"},
    PasswordProperties: {"kind":"UInt32"},
    MaxPasswordAge: Windows.Win32.SystemServices.LARGE_INTEGER,
    MinPasswordAge: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: PSAM_PASSWORD_NOTIFICATION_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PSAM_PASSWORD_NOTIFICATION_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PSAM_INIT_NOTIFICATION_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PSAM_INIT_NOTIFICATION_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PSAM_PASSWORD_FILTER_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PSAM_PASSWORD_FILTER_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: MSV1_0_LOGON_SUBMIT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSV1_0_LOGON_SUBMIT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: MSV1_0_PROFILE_BUFFER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSV1_0_PROFILE_BUFFER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: MSV1_0_INTERACTIVE_LOGON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_INTERACTIVE_LOGON = extern struct {
    MessageType: Windows.Win32.Security.MSV1_0_LOGON_SUBMIT_TYPE,
    LogonDomainName: Windows.Win32.Security.UNICODE_STRING,
    UserName: Windows.Win32.Security.UNICODE_STRING,
    Password: Windows.Win32.Security.UNICODE_STRING,
};
// --------------------------------------------------------
// Type: MSV1_0_INTERACTIVE_PROFILE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_INTERACTIVE_PROFILE = extern struct {
    MessageType: Windows.Win32.Security.MSV1_0_PROFILE_BUFFER_TYPE,
    LogonCount: {"kind":"UInt16"},
    BadPasswordCount: {"kind":"UInt16"},
    LogonTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    LogoffTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    KickOffTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    PasswordLastSet: Windows.Win32.SystemServices.LARGE_INTEGER,
    PasswordCanChange: Windows.Win32.SystemServices.LARGE_INTEGER,
    PasswordMustChange: Windows.Win32.SystemServices.LARGE_INTEGER,
    LogonScript: Windows.Win32.Security.UNICODE_STRING,
    HomeDirectory: Windows.Win32.Security.UNICODE_STRING,
    FullName: Windows.Win32.Security.UNICODE_STRING,
    ProfilePath: Windows.Win32.Security.UNICODE_STRING,
    HomeDirectoryDrive: Windows.Win32.Security.UNICODE_STRING,
    LogonServer: Windows.Win32.Security.UNICODE_STRING,
    UserFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MSV1_0_LM20_LOGON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_LM20_LOGON = extern struct {
    MessageType: Windows.Win32.Security.MSV1_0_LOGON_SUBMIT_TYPE,
    LogonDomainName: Windows.Win32.Security.UNICODE_STRING,
    UserName: Windows.Win32.Security.UNICODE_STRING,
    Workstation: Windows.Win32.Security.UNICODE_STRING,
    ChallengeToClient: {"kind":"Array","child": {"kind":"Byte"}},
    CaseSensitiveChallengeResponse: Windows.Win32.WindowsProgramming.STRING,
    CaseInsensitiveChallengeResponse: Windows.Win32.WindowsProgramming.STRING,
    ParameterControl: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MSV1_0_SUBAUTH_LOGON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_SUBAUTH_LOGON = extern struct {
    MessageType: Windows.Win32.Security.MSV1_0_LOGON_SUBMIT_TYPE,
    LogonDomainName: Windows.Win32.Security.UNICODE_STRING,
    UserName: Windows.Win32.Security.UNICODE_STRING,
    Workstation: Windows.Win32.Security.UNICODE_STRING,
    ChallengeToClient: {"kind":"Array","child": {"kind":"Byte"}},
    AuthenticationInfo1: Windows.Win32.WindowsProgramming.STRING,
    AuthenticationInfo2: Windows.Win32.WindowsProgramming.STRING,
    ParameterControl: {"kind":"UInt32"},
    SubAuthPackageId: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MSV1_0_S4U_LOGON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_S4U_LOGON = extern struct {
    MessageType: Windows.Win32.Security.MSV1_0_LOGON_SUBMIT_TYPE,
    Flags: {"kind":"UInt32"},
    UserPrincipalName: Windows.Win32.Security.UNICODE_STRING,
    DomainName: Windows.Win32.Security.UNICODE_STRING,
};
// --------------------------------------------------------
// Type: MSV1_0_LM20_LOGON_PROFILE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_LM20_LOGON_PROFILE = extern struct {
    MessageType: Windows.Win32.Security.MSV1_0_PROFILE_BUFFER_TYPE,
    KickOffTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    LogoffTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    UserFlags: {"kind":"UInt32"},
    UserSessionKey: {"kind":"Array","child": {"kind":"Byte"}},
    LogonDomainName: Windows.Win32.Security.UNICODE_STRING,
    LanmanSessionKey: {"kind":"Array","child": {"kind":"Byte"}},
    LogonServer: Windows.Win32.Security.UNICODE_STRING,
    UserParameters: Windows.Win32.Security.UNICODE_STRING,
};
// --------------------------------------------------------
// Type: MSV1_0_CREDENTIAL_KEY_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSV1_0_CREDENTIAL_KEY_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: MSV1_0_CREDENTIAL_KEY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_CREDENTIAL_KEY = extern struct {
    Data: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: MSV1_0_SUPPLEMENTAL_CREDENTIAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_SUPPLEMENTAL_CREDENTIAL = extern struct {
    Version: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    LmPassword: {"kind":"Array","child": {"kind":"Byte"}},
    NtPassword: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: MSV1_0_SUPPLEMENTAL_CREDENTIAL_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_SUPPLEMENTAL_CREDENTIAL_V2 = extern struct {
    Version: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    NtPassword: {"kind":"Array","child": {"kind":"Byte"}},
    CredentialKey: Windows.Win32.Security.MSV1_0_CREDENTIAL_KEY,
};
// --------------------------------------------------------
// Type: MSV1_0_SUPPLEMENTAL_CREDENTIAL_V3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_SUPPLEMENTAL_CREDENTIAL_V3 = extern struct {
    Version: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    CredentialKeyType: Windows.Win32.Security.MSV1_0_CREDENTIAL_KEY_TYPE,
    NtPassword: {"kind":"Array","child": {"kind":"Byte"}},
    CredentialKey: Windows.Win32.Security.MSV1_0_CREDENTIAL_KEY,
    ShaPassword: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: MSV1_0_IUM_SUPPLEMENTAL_CREDENTIAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_IUM_SUPPLEMENTAL_CREDENTIAL = extern struct {
    Version: {"kind":"UInt32"},
    EncryptedCredsSize: {"kind":"UInt32"},
    EncryptedCreds: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: MSV1_0_REMOTE_SUPPLEMENTAL_CREDENTIAL
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const MSV1_0_REMOTE_SUPPLEMENTAL_CREDENTIAL = *opaque{
};
// --------------------------------------------------------
// Type: MSV1_0_NTLM3_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_NTLM3_RESPONSE = extern struct {
    Response: {"kind":"Array","child": {"kind":"Byte"}},
    RespType: {"kind":"Byte"},
    HiRespType: {"kind":"Byte"},
    Flags: {"kind":"UInt16"},
    MsgWord: {"kind":"UInt32"},
    TimeStamp: {"kind":"UInt64"},
    ChallengeFromClient: {"kind":"Array","child": {"kind":"Byte"}},
    AvPairsOff: {"kind":"UInt32"},
    Buffer: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: MSV1_0_AVID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSV1_0_AVID = *opaque{
};
// --------------------------------------------------------
// Type: MSV1_0_AV_PAIR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_AV_PAIR = extern struct {
    AvId: {"kind":"UInt16"},
    AvLen: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: MSV1_0_PROTOCOL_MESSAGE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSV1_0_PROTOCOL_MESSAGE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: MSV1_0_CHANGEPASSWORD_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_CHANGEPASSWORD_REQUEST = extern struct {
    MessageType: Windows.Win32.Security.MSV1_0_PROTOCOL_MESSAGE_TYPE,
    DomainName: Windows.Win32.Security.UNICODE_STRING,
    AccountName: Windows.Win32.Security.UNICODE_STRING,
    OldPassword: Windows.Win32.Security.UNICODE_STRING,
    NewPassword: Windows.Win32.Security.UNICODE_STRING,
    Impersonating: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: MSV1_0_CHANGEPASSWORD_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_CHANGEPASSWORD_RESPONSE = extern struct {
    MessageType: Windows.Win32.Security.MSV1_0_PROTOCOL_MESSAGE_TYPE,
    PasswordInfoValid: {"kind":"Byte"},
    DomainPasswordInfo: Windows.Win32.Security.DOMAIN_PASSWORD_INFORMATION,
};
// --------------------------------------------------------
// Type: MSV1_0_PASSTHROUGH_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_PASSTHROUGH_REQUEST = extern struct {
    MessageType: Windows.Win32.Security.MSV1_0_PROTOCOL_MESSAGE_TYPE,
    DomainName: Windows.Win32.Security.UNICODE_STRING,
    PackageName: Windows.Win32.Security.UNICODE_STRING,
    DataLength: {"kind":"UInt32"},
    LogonData: {"kind""Ptr","child":{"kind":"Byte"}},
    Pad: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MSV1_0_PASSTHROUGH_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_PASSTHROUGH_RESPONSE = extern struct {
    MessageType: Windows.Win32.Security.MSV1_0_PROTOCOL_MESSAGE_TYPE,
    Pad: {"kind":"UInt32"},
    DataLength: {"kind":"UInt32"},
    ValidationData: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: MSV1_0_SUBAUTH_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_SUBAUTH_REQUEST = extern struct {
    MessageType: Windows.Win32.Security.MSV1_0_PROTOCOL_MESSAGE_TYPE,
    SubAuthPackageId: {"kind":"UInt32"},
    SubAuthInfoLength: {"kind":"UInt32"},
    SubAuthSubmitBuffer: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: MSV1_0_SUBAUTH_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_SUBAUTH_RESPONSE = extern struct {
    MessageType: Windows.Win32.Security.MSV1_0_PROTOCOL_MESSAGE_TYPE,
    SubAuthInfoLength: {"kind":"UInt32"},
    SubAuthReturnBuffer: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: KERB_LOGON_SUBMIT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KERB_LOGON_SUBMIT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: KERB_INTERACTIVE_LOGON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_INTERACTIVE_LOGON = extern struct {
    MessageType: Windows.Win32.Security.KERB_LOGON_SUBMIT_TYPE,
    LogonDomainName: Windows.Win32.Security.UNICODE_STRING,
    UserName: Windows.Win32.Security.UNICODE_STRING,
    Password: Windows.Win32.Security.UNICODE_STRING,
};
// --------------------------------------------------------
// Type: KERB_INTERACTIVE_UNLOCK_LOGON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_INTERACTIVE_UNLOCK_LOGON = extern struct {
    Logon: Windows.Win32.Security.KERB_INTERACTIVE_LOGON,
    LogonId: Windows.Win32.Kernel.LUID,
};
// --------------------------------------------------------
// Type: KERB_SMART_CARD_LOGON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_SMART_CARD_LOGON = extern struct {
    MessageType: Windows.Win32.Security.KERB_LOGON_SUBMIT_TYPE,
    Pin: Windows.Win32.Security.UNICODE_STRING,
    CspDataLength: {"kind":"UInt32"},
    CspData: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: KERB_SMART_CARD_UNLOCK_LOGON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_SMART_CARD_UNLOCK_LOGON = extern struct {
    Logon: Windows.Win32.Security.KERB_SMART_CARD_LOGON,
    LogonId: Windows.Win32.Kernel.LUID,
};
// --------------------------------------------------------
// Type: KERB_CERTIFICATE_LOGON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_CERTIFICATE_LOGON = extern struct {
    MessageType: Windows.Win32.Security.KERB_LOGON_SUBMIT_TYPE,
    DomainName: Windows.Win32.Security.UNICODE_STRING,
    UserName: Windows.Win32.Security.UNICODE_STRING,
    Pin: Windows.Win32.Security.UNICODE_STRING,
    Flags: {"kind":"UInt32"},
    CspDataLength: {"kind":"UInt32"},
    CspData: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: KERB_CERTIFICATE_UNLOCK_LOGON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_CERTIFICATE_UNLOCK_LOGON = extern struct {
    Logon: Windows.Win32.Security.KERB_CERTIFICATE_LOGON,
    LogonId: Windows.Win32.Kernel.LUID,
};
// --------------------------------------------------------
// Type: KERB_CERTIFICATE_S4U_LOGON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_CERTIFICATE_S4U_LOGON = extern struct {
    MessageType: Windows.Win32.Security.KERB_LOGON_SUBMIT_TYPE,
    Flags: {"kind":"UInt32"},
    UserPrincipalName: Windows.Win32.Security.UNICODE_STRING,
    DomainName: Windows.Win32.Security.UNICODE_STRING,
    CertificateLength: {"kind":"UInt32"},
    Certificate: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: KERB_TICKET_LOGON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_TICKET_LOGON = extern struct {
    MessageType: Windows.Win32.Security.KERB_LOGON_SUBMIT_TYPE,
    Flags: {"kind":"UInt32"},
    ServiceTicketLength: {"kind":"UInt32"},
    TicketGrantingTicketLength: {"kind":"UInt32"},
    ServiceTicket: {"kind""Ptr","child":{"kind":"Byte"}},
    TicketGrantingTicket: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: KERB_TICKET_UNLOCK_LOGON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_TICKET_UNLOCK_LOGON = extern struct {
    Logon: Windows.Win32.Security.KERB_TICKET_LOGON,
    LogonId: Windows.Win32.Kernel.LUID,
};
// --------------------------------------------------------
// Type: KERB_S4U_LOGON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_S4U_LOGON = extern struct {
    MessageType: Windows.Win32.Security.KERB_LOGON_SUBMIT_TYPE,
    Flags: {"kind":"UInt32"},
    ClientUpn: Windows.Win32.Security.UNICODE_STRING,
    ClientRealm: Windows.Win32.Security.UNICODE_STRING,
};
// --------------------------------------------------------
// Type: KERB_PROFILE_BUFFER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KERB_PROFILE_BUFFER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: KERB_INTERACTIVE_PROFILE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_INTERACTIVE_PROFILE = extern struct {
    MessageType: Windows.Win32.Security.KERB_PROFILE_BUFFER_TYPE,
    LogonCount: {"kind":"UInt16"},
    BadPasswordCount: {"kind":"UInt16"},
    LogonTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    LogoffTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    KickOffTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    PasswordLastSet: Windows.Win32.SystemServices.LARGE_INTEGER,
    PasswordCanChange: Windows.Win32.SystemServices.LARGE_INTEGER,
    PasswordMustChange: Windows.Win32.SystemServices.LARGE_INTEGER,
    LogonScript: Windows.Win32.Security.UNICODE_STRING,
    HomeDirectory: Windows.Win32.Security.UNICODE_STRING,
    FullName: Windows.Win32.Security.UNICODE_STRING,
    ProfilePath: Windows.Win32.Security.UNICODE_STRING,
    HomeDirectoryDrive: Windows.Win32.Security.UNICODE_STRING,
    LogonServer: Windows.Win32.Security.UNICODE_STRING,
    UserFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: KERB_SMART_CARD_PROFILE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_SMART_CARD_PROFILE = extern struct {
    Profile: Windows.Win32.Security.KERB_INTERACTIVE_PROFILE,
    CertificateSize: {"kind":"UInt32"},
    CertificateData: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: KERB_CRYPTO_KEY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_CRYPTO_KEY = extern struct {
    KeyType: {"kind":"Int32"},
    Length: {"kind":"UInt32"},
    Value: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: KERB_CRYPTO_KEY32
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_CRYPTO_KEY32 = extern struct {
    KeyType: {"kind":"Int32"},
    Length: {"kind":"UInt32"},
    Offset: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: KERB_TICKET_PROFILE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_TICKET_PROFILE = extern struct {
    Profile: Windows.Win32.Security.KERB_INTERACTIVE_PROFILE,
    SessionKey: Windows.Win32.Security.KERB_CRYPTO_KEY,
};
// --------------------------------------------------------
// Type: KERB_PROTOCOL_MESSAGE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KERB_PROTOCOL_MESSAGE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: KERB_QUERY_TKT_CACHE_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_QUERY_TKT_CACHE_REQUEST = extern struct {
    MessageType: Windows.Win32.Security.KERB_PROTOCOL_MESSAGE_TYPE,
    LogonId: Windows.Win32.Kernel.LUID,
};
// --------------------------------------------------------
// Type: KERB_TICKET_CACHE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_TICKET_CACHE_INFO = extern struct {
    ServerName: Windows.Win32.Security.UNICODE_STRING,
    RealmName: Windows.Win32.Security.UNICODE_STRING,
    StartTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    EndTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    RenewTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    EncryptionType: {"kind":"Int32"},
    TicketFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: KERB_TICKET_CACHE_INFO_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_TICKET_CACHE_INFO_EX = extern struct {
    ClientName: Windows.Win32.Security.UNICODE_STRING,
    ClientRealm: Windows.Win32.Security.UNICODE_STRING,
    ServerName: Windows.Win32.Security.UNICODE_STRING,
    ServerRealm: Windows.Win32.Security.UNICODE_STRING,
    StartTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    EndTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    RenewTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    EncryptionType: {"kind":"Int32"},
    TicketFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: KERB_TICKET_CACHE_INFO_EX2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_TICKET_CACHE_INFO_EX2 = extern struct {
    ClientName: Windows.Win32.Security.UNICODE_STRING,
    ClientRealm: Windows.Win32.Security.UNICODE_STRING,
    ServerName: Windows.Win32.Security.UNICODE_STRING,
    ServerRealm: Windows.Win32.Security.UNICODE_STRING,
    StartTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    EndTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    RenewTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    EncryptionType: {"kind":"Int32"},
    TicketFlags: {"kind":"UInt32"},
    SessionKeyType: {"kind":"UInt32"},
    BranchId: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: KERB_TICKET_CACHE_INFO_EX3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_TICKET_CACHE_INFO_EX3 = extern struct {
    ClientName: Windows.Win32.Security.UNICODE_STRING,
    ClientRealm: Windows.Win32.Security.UNICODE_STRING,
    ServerName: Windows.Win32.Security.UNICODE_STRING,
    ServerRealm: Windows.Win32.Security.UNICODE_STRING,
    StartTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    EndTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    RenewTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    EncryptionType: {"kind":"Int32"},
    TicketFlags: {"kind":"UInt32"},
    SessionKeyType: {"kind":"UInt32"},
    BranchId: {"kind":"UInt32"},
    CacheFlags: {"kind":"UInt32"},
    KdcCalled: Windows.Win32.Security.UNICODE_STRING,
};
// --------------------------------------------------------
// Type: KERB_QUERY_TKT_CACHE_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_QUERY_TKT_CACHE_RESPONSE = extern struct {
    MessageType: Windows.Win32.Security.KERB_PROTOCOL_MESSAGE_TYPE,
    CountOfTickets: {"kind":"UInt32"},
    Tickets: {"kind":"Array","child": Windows.Win32.Security.KERB_TICKET_CACHE_INFO},
};
// --------------------------------------------------------
// Type: KERB_QUERY_TKT_CACHE_EX_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_QUERY_TKT_CACHE_EX_RESPONSE = extern struct {
    MessageType: Windows.Win32.Security.KERB_PROTOCOL_MESSAGE_TYPE,
    CountOfTickets: {"kind":"UInt32"},
    Tickets: {"kind":"Array","child": Windows.Win32.Security.KERB_TICKET_CACHE_INFO_EX},
};
// --------------------------------------------------------
// Type: KERB_QUERY_TKT_CACHE_EX2_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_QUERY_TKT_CACHE_EX2_RESPONSE = extern struct {
    MessageType: Windows.Win32.Security.KERB_PROTOCOL_MESSAGE_TYPE,
    CountOfTickets: {"kind":"UInt32"},
    Tickets: {"kind":"Array","child": Windows.Win32.Security.KERB_TICKET_CACHE_INFO_EX2},
};
// --------------------------------------------------------
// Type: KERB_QUERY_TKT_CACHE_EX3_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_QUERY_TKT_CACHE_EX3_RESPONSE = extern struct {
    MessageType: Windows.Win32.Security.KERB_PROTOCOL_MESSAGE_TYPE,
    CountOfTickets: {"kind":"UInt32"},
    Tickets: {"kind":"Array","child": Windows.Win32.Security.KERB_TICKET_CACHE_INFO_EX3},
};
// --------------------------------------------------------
// Type: SecHandle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecHandle = extern struct {
    dwLower: {"kind":"UIntPtr"},
    dwUpper: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: KERB_AUTH_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_AUTH_DATA = extern struct {
    Type: {"kind":"UInt32"},
    Length: {"kind":"UInt32"},
    Data: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: KERB_NET_ADDRESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_NET_ADDRESS = extern struct {
    Family: {"kind":"UInt32"},
    Length: {"kind":"UInt32"},
    Address: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: KERB_NET_ADDRESSES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_NET_ADDRESSES = extern struct {
    Number: {"kind":"UInt32"},
    Addresses: {"kind":"Array","child": Windows.Win32.Security.KERB_NET_ADDRESS},
};
// --------------------------------------------------------
// Type: KERB_EXTERNAL_NAME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_EXTERNAL_NAME = extern struct {
    NameType: {"kind":"Int16"},
    NameCount: {"kind":"UInt16"},
    Names: {"kind":"Array","child": Windows.Win32.Security.UNICODE_STRING},
};
// --------------------------------------------------------
// Type: KERB_EXTERNAL_TICKET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_EXTERNAL_TICKET = extern struct {
    ServiceName: {"kind""Ptr","child":Windows.Win32.Security.KERB_EXTERNAL_NAME},
    TargetName: {"kind""Ptr","child":Windows.Win32.Security.KERB_EXTERNAL_NAME},
    ClientName: {"kind""Ptr","child":Windows.Win32.Security.KERB_EXTERNAL_NAME},
    DomainName: Windows.Win32.Security.UNICODE_STRING,
    TargetDomainName: Windows.Win32.Security.UNICODE_STRING,
    AltTargetDomainName: Windows.Win32.Security.UNICODE_STRING,
    SessionKey: Windows.Win32.Security.KERB_CRYPTO_KEY,
    TicketFlags: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    KeyExpirationTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    StartTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    EndTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    RenewUntil: Windows.Win32.SystemServices.LARGE_INTEGER,
    TimeSkew: Windows.Win32.SystemServices.LARGE_INTEGER,
    EncodedTicketSize: {"kind":"UInt32"},
    EncodedTicket: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: KERB_RETRIEVE_TKT_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_RETRIEVE_TKT_REQUEST = extern struct {
    MessageType: Windows.Win32.Security.KERB_PROTOCOL_MESSAGE_TYPE,
    LogonId: Windows.Win32.Kernel.LUID,
    TargetName: Windows.Win32.Security.UNICODE_STRING,
    TicketFlags: {"kind":"UInt32"},
    CacheOptions: {"kind":"UInt32"},
    EncryptionType: {"kind":"Int32"},
    CredentialsHandle: Windows.Win32.Security.SecHandle,
};
// --------------------------------------------------------
// Type: KERB_RETRIEVE_TKT_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_RETRIEVE_TKT_RESPONSE = extern struct {
    Ticket: Windows.Win32.Security.KERB_EXTERNAL_TICKET,
};
// --------------------------------------------------------
// Type: KERB_PURGE_TKT_CACHE_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_PURGE_TKT_CACHE_REQUEST = extern struct {
    MessageType: Windows.Win32.Security.KERB_PROTOCOL_MESSAGE_TYPE,
    LogonId: Windows.Win32.Kernel.LUID,
    ServerName: Windows.Win32.Security.UNICODE_STRING,
    RealmName: Windows.Win32.Security.UNICODE_STRING,
};
// --------------------------------------------------------
// Type: KERB_PURGE_TKT_CACHE_EX_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_PURGE_TKT_CACHE_EX_REQUEST = extern struct {
    MessageType: Windows.Win32.Security.KERB_PROTOCOL_MESSAGE_TYPE,
    LogonId: Windows.Win32.Kernel.LUID,
    Flags: {"kind":"UInt32"},
    TicketTemplate: Windows.Win32.Security.KERB_TICKET_CACHE_INFO_EX,
};
// --------------------------------------------------------
// Type: KERB_SUBMIT_TKT_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_SUBMIT_TKT_REQUEST = extern struct {
    MessageType: Windows.Win32.Security.KERB_PROTOCOL_MESSAGE_TYPE,
    LogonId: Windows.Win32.Kernel.LUID,
    Flags: {"kind":"UInt32"},
    Key: Windows.Win32.Security.KERB_CRYPTO_KEY32,
    KerbCredSize: {"kind":"UInt32"},
    KerbCredOffset: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: KERB_QUERY_KDC_PROXY_CACHE_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_QUERY_KDC_PROXY_CACHE_REQUEST = extern struct {
    MessageType: Windows.Win32.Security.KERB_PROTOCOL_MESSAGE_TYPE,
    Flags: {"kind":"UInt32"},
    LogonId: Windows.Win32.Kernel.LUID,
};
// --------------------------------------------------------
// Type: KDC_PROXY_CACHE_ENTRY_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KDC_PROXY_CACHE_ENTRY_DATA = extern struct {
    SinceLastUsed: {"kind":"UInt64"},
    DomainName: Windows.Win32.Security.UNICODE_STRING,
    ProxyServerName: Windows.Win32.Security.UNICODE_STRING,
    ProxyServerVdir: Windows.Win32.Security.UNICODE_STRING,
    ProxyServerPort: {"kind":"UInt16"},
    LogonId: Windows.Win32.Kernel.LUID,
    CredUserName: Windows.Win32.Security.UNICODE_STRING,
    CredDomainName: Windows.Win32.Security.UNICODE_STRING,
    GlobalCache: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: KERB_QUERY_KDC_PROXY_CACHE_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_QUERY_KDC_PROXY_CACHE_RESPONSE = extern struct {
    MessageType: Windows.Win32.Security.KERB_PROTOCOL_MESSAGE_TYPE,
    CountOfEntries: {"kind":"UInt32"},
    Entries: {"kind""Ptr","child":Windows.Win32.Security.KDC_PROXY_CACHE_ENTRY_DATA},
};
// --------------------------------------------------------
// Type: KERB_PURGE_KDC_PROXY_CACHE_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_PURGE_KDC_PROXY_CACHE_REQUEST = extern struct {
    MessageType: Windows.Win32.Security.KERB_PROTOCOL_MESSAGE_TYPE,
    Flags: {"kind":"UInt32"},
    LogonId: Windows.Win32.Kernel.LUID,
};
// --------------------------------------------------------
// Type: KERB_PURGE_KDC_PROXY_CACHE_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_PURGE_KDC_PROXY_CACHE_RESPONSE = extern struct {
    MessageType: Windows.Win32.Security.KERB_PROTOCOL_MESSAGE_TYPE,
    CountOfPurged: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: KERB_S4U2PROXY_CACHE_ENTRY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_S4U2PROXY_CACHE_ENTRY_INFO = extern struct {
    ServerName: Windows.Win32.Security.UNICODE_STRING,
    Flags: {"kind":"UInt32"},
    LastStatus: Windows.Win32.SystemServices.NTSTATUS,
    Expiry: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: KERB_S4U2PROXY_CRED
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_S4U2PROXY_CRED = extern struct {
    UserName: Windows.Win32.Security.UNICODE_STRING,
    DomainName: Windows.Win32.Security.UNICODE_STRING,
    Flags: {"kind":"UInt32"},
    LastStatus: Windows.Win32.SystemServices.NTSTATUS,
    Expiry: Windows.Win32.SystemServices.LARGE_INTEGER,
    CountOfEntries: {"kind":"UInt32"},
    Entries: {"kind""Ptr","child":Windows.Win32.Security.KERB_S4U2PROXY_CACHE_ENTRY_INFO},
};
// --------------------------------------------------------
// Type: KERB_QUERY_S4U2PROXY_CACHE_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_QUERY_S4U2PROXY_CACHE_REQUEST = extern struct {
    MessageType: Windows.Win32.Security.KERB_PROTOCOL_MESSAGE_TYPE,
    Flags: {"kind":"UInt32"},
    LogonId: Windows.Win32.Kernel.LUID,
};
// --------------------------------------------------------
// Type: KERB_QUERY_S4U2PROXY_CACHE_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_QUERY_S4U2PROXY_CACHE_RESPONSE = extern struct {
    MessageType: Windows.Win32.Security.KERB_PROTOCOL_MESSAGE_TYPE,
    CountOfCreds: {"kind":"UInt32"},
    Creds: {"kind""Ptr","child":Windows.Win32.Security.KERB_S4U2PROXY_CRED},
};
// --------------------------------------------------------
// Type: KERB_RETRIEVE_KEY_TAB_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_RETRIEVE_KEY_TAB_REQUEST = extern struct {
    MessageType: Windows.Win32.Security.KERB_PROTOCOL_MESSAGE_TYPE,
    Flags: {"kind":"UInt32"},
    UserName: Windows.Win32.Security.UNICODE_STRING,
    DomainName: Windows.Win32.Security.UNICODE_STRING,
    Password: Windows.Win32.Security.UNICODE_STRING,
};
// --------------------------------------------------------
// Type: KERB_RETRIEVE_KEY_TAB_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_RETRIEVE_KEY_TAB_RESPONSE = extern struct {
    MessageType: Windows.Win32.Security.KERB_PROTOCOL_MESSAGE_TYPE,
    KeyTabLength: {"kind":"UInt32"},
    KeyTab: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: KERB_CHANGEPASSWORD_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_CHANGEPASSWORD_REQUEST = extern struct {
    MessageType: Windows.Win32.Security.KERB_PROTOCOL_MESSAGE_TYPE,
    DomainName: Windows.Win32.Security.UNICODE_STRING,
    AccountName: Windows.Win32.Security.UNICODE_STRING,
    OldPassword: Windows.Win32.Security.UNICODE_STRING,
    NewPassword: Windows.Win32.Security.UNICODE_STRING,
    Impersonating: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: KERB_SETPASSWORD_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_SETPASSWORD_REQUEST = extern struct {
    MessageType: Windows.Win32.Security.KERB_PROTOCOL_MESSAGE_TYPE,
    LogonId: Windows.Win32.Kernel.LUID,
    CredentialsHandle: Windows.Win32.Security.SecHandle,
    Flags: {"kind":"UInt32"},
    DomainName: Windows.Win32.Security.UNICODE_STRING,
    AccountName: Windows.Win32.Security.UNICODE_STRING,
    Password: Windows.Win32.Security.UNICODE_STRING,
};
// --------------------------------------------------------
// Type: KERB_SETPASSWORD_EX_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_SETPASSWORD_EX_REQUEST = extern struct {
    MessageType: Windows.Win32.Security.KERB_PROTOCOL_MESSAGE_TYPE,
    LogonId: Windows.Win32.Kernel.LUID,
    CredentialsHandle: Windows.Win32.Security.SecHandle,
    Flags: {"kind":"UInt32"},
    AccountRealm: Windows.Win32.Security.UNICODE_STRING,
    AccountName: Windows.Win32.Security.UNICODE_STRING,
    Password: Windows.Win32.Security.UNICODE_STRING,
    ClientRealm: Windows.Win32.Security.UNICODE_STRING,
    ClientName: Windows.Win32.Security.UNICODE_STRING,
    Impersonating: {"kind":"Byte"},
    KdcAddress: Windows.Win32.Security.UNICODE_STRING,
    KdcAddressType: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: KERB_DECRYPT_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_DECRYPT_REQUEST = extern struct {
    MessageType: Windows.Win32.Security.KERB_PROTOCOL_MESSAGE_TYPE,
    LogonId: Windows.Win32.Kernel.LUID,
    Flags: {"kind":"UInt32"},
    CryptoType: {"kind":"Int32"},
    KeyUsage: {"kind":"Int32"},
    Key: Windows.Win32.Security.KERB_CRYPTO_KEY,
    EncryptedDataSize: {"kind":"UInt32"},
    InitialVectorSize: {"kind":"UInt32"},
    InitialVector: {"kind""Ptr","child":{"kind":"Byte"}},
    EncryptedData: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: KERB_DECRYPT_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_DECRYPT_RESPONSE = extern struct {
    DecryptedData: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: KERB_ADD_BINDING_CACHE_ENTRY_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_ADD_BINDING_CACHE_ENTRY_REQUEST = extern struct {
    MessageType: Windows.Win32.Security.KERB_PROTOCOL_MESSAGE_TYPE,
    RealmName: Windows.Win32.Security.UNICODE_STRING,
    KdcAddress: Windows.Win32.Security.UNICODE_STRING,
    AddressType: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: KERB_REFRESH_SCCRED_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_REFRESH_SCCRED_REQUEST = extern struct {
    MessageType: Windows.Win32.Security.KERB_PROTOCOL_MESSAGE_TYPE,
    CredentialBlob: Windows.Win32.Security.UNICODE_STRING,
    LogonId: Windows.Win32.Kernel.LUID,
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: KERB_ADD_CREDENTIALS_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_ADD_CREDENTIALS_REQUEST = extern struct {
    MessageType: Windows.Win32.Security.KERB_PROTOCOL_MESSAGE_TYPE,
    UserName: Windows.Win32.Security.UNICODE_STRING,
    DomainName: Windows.Win32.Security.UNICODE_STRING,
    Password: Windows.Win32.Security.UNICODE_STRING,
    LogonId: Windows.Win32.Kernel.LUID,
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: KERB_ADD_CREDENTIALS_REQUEST_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_ADD_CREDENTIALS_REQUEST_EX = extern struct {
    Credentials: Windows.Win32.Security.KERB_ADD_CREDENTIALS_REQUEST,
    PrincipalNameCount: {"kind":"UInt32"},
    PrincipalNames: {"kind":"Array","child": Windows.Win32.Security.UNICODE_STRING},
};
// --------------------------------------------------------
// Type: KERB_TRANSFER_CRED_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_TRANSFER_CRED_REQUEST = extern struct {
    MessageType: Windows.Win32.Security.KERB_PROTOCOL_MESSAGE_TYPE,
    OriginLogonId: Windows.Win32.Kernel.LUID,
    DestinationLogonId: Windows.Win32.Kernel.LUID,
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: KERB_CLEANUP_MACHINE_PKINIT_CREDS_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_CLEANUP_MACHINE_PKINIT_CREDS_REQUEST = extern struct {
    MessageType: Windows.Win32.Security.KERB_PROTOCOL_MESSAGE_TYPE,
    LogonId: Windows.Win32.Kernel.LUID,
};
// --------------------------------------------------------
// Type: KERB_BINDING_CACHE_ENTRY_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_BINDING_CACHE_ENTRY_DATA = extern struct {
    DiscoveryTime: {"kind":"UInt64"},
    RealmName: Windows.Win32.Security.UNICODE_STRING,
    KdcAddress: Windows.Win32.Security.UNICODE_STRING,
    AddressType: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    DcFlags: {"kind":"UInt32"},
    CacheFlags: {"kind":"UInt32"},
    KdcName: Windows.Win32.Security.UNICODE_STRING,
};
// --------------------------------------------------------
// Type: KERB_QUERY_BINDING_CACHE_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_QUERY_BINDING_CACHE_RESPONSE = extern struct {
    MessageType: Windows.Win32.Security.KERB_PROTOCOL_MESSAGE_TYPE,
    CountOfEntries: {"kind":"UInt32"},
    Entries: {"kind""Ptr","child":Windows.Win32.Security.KERB_BINDING_CACHE_ENTRY_DATA},
};
// --------------------------------------------------------
// Type: KERB_ADD_BINDING_CACHE_ENTRY_EX_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_ADD_BINDING_CACHE_ENTRY_EX_REQUEST = extern struct {
    MessageType: Windows.Win32.Security.KERB_PROTOCOL_MESSAGE_TYPE,
    RealmName: Windows.Win32.Security.UNICODE_STRING,
    KdcAddress: Windows.Win32.Security.UNICODE_STRING,
    AddressType: {"kind":"UInt32"},
    DcFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: KERB_QUERY_BINDING_CACHE_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_QUERY_BINDING_CACHE_REQUEST = extern struct {
    MessageType: Windows.Win32.Security.KERB_PROTOCOL_MESSAGE_TYPE,
};
// --------------------------------------------------------
// Type: KERB_PURGE_BINDING_CACHE_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_PURGE_BINDING_CACHE_REQUEST = extern struct {
    MessageType: Windows.Win32.Security.KERB_PROTOCOL_MESSAGE_TYPE,
};
// --------------------------------------------------------
// Type: KERB_QUERY_DOMAIN_EXTENDED_POLICIES_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_QUERY_DOMAIN_EXTENDED_POLICIES_REQUEST = extern struct {
    MessageType: Windows.Win32.Security.KERB_PROTOCOL_MESSAGE_TYPE,
    Flags: {"kind":"UInt32"},
    DomainName: Windows.Win32.Security.UNICODE_STRING,
};
// --------------------------------------------------------
// Type: KERB_QUERY_DOMAIN_EXTENDED_POLICIES_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_QUERY_DOMAIN_EXTENDED_POLICIES_RESPONSE = extern struct {
    MessageType: Windows.Win32.Security.KERB_PROTOCOL_MESSAGE_TYPE,
    Flags: {"kind":"UInt32"},
    ExtendedPolicies: {"kind":"UInt32"},
    DsFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: KERB_CERTIFICATE_INFO_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KERB_CERTIFICATE_INFO_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: KERB_CERTIFICATE_HASHINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_CERTIFICATE_HASHINFO = extern struct {
    StoreNameLength: {"kind":"UInt16"},
    HashLength: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: KERB_CERTIFICATE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_CERTIFICATE_INFO = extern struct {
    CertInfoSize: {"kind":"UInt32"},
    InfoType: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: POLICY_AUDIT_SID_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_AUDIT_SID_ARRAY = extern struct {
    UsersCount: {"kind":"UInt32"},
    UserSidArray: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
};
// --------------------------------------------------------
// Type: AUDIT_POLICY_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUDIT_POLICY_INFORMATION = extern struct {
    AuditSubCategoryGuid: Guid,
    AuditingInformation: {"kind":"UInt32"},
    AuditCategoryGuid: Guid,
};
// --------------------------------------------------------
// Type: PKU2U_CERT_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PKU2U_CERT_BLOB = extern struct {
    CertOffset: {"kind":"UInt32"},
    CertLength: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: PKU2U_CREDUI_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PKU2U_CREDUI_CONTEXT = extern struct {
    Version: {"kind":"UInt64"},
    cbHeaderLength: {"kind":"UInt16"},
    cbStructureLength: {"kind":"UInt32"},
    CertArrayCount: {"kind":"UInt16"},
    CertArrayOffset: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PKU2U_LOGON_SUBMIT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PKU2U_LOGON_SUBMIT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: PKU2U_CERTIFICATE_S4U_LOGON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PKU2U_CERTIFICATE_S4U_LOGON = extern struct {
    MessageType: Windows.Win32.Security.PKU2U_LOGON_SUBMIT_TYPE,
    Flags: {"kind":"UInt32"},
    UserPrincipalName: Windows.Win32.Security.UNICODE_STRING,
    DomainName: Windows.Win32.Security.UNICODE_STRING,
    CertificateLength: {"kind":"UInt32"},
    Certificate: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SecPkgInfoW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgInfoW = extern struct {
    fCapabilities: {"kind":"UInt32"},
    wVersion: {"kind":"UInt16"},
    wRPCID: {"kind":"UInt16"},
    cbMaxToken: {"kind":"UInt32"},
    Name: {"kind""Ptr","child":{"kind":"UInt16"}},
    Comment: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SecPkgInfoA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgInfoA = extern struct {
    fCapabilities: {"kind":"UInt32"},
    wVersion: {"kind":"UInt16"},
    wRPCID: {"kind":"UInt16"},
    cbMaxToken: {"kind":"UInt32"},
    Name: {"kind""Ptr","child":{"kind":"SByte"}},
    Comment: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: SecBuffer
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecBuffer = extern struct {
    cbBuffer: {"kind":"UInt32"},
    BufferType: {"kind":"UInt32"},
    pvBuffer: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: SecBufferDesc
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecBufferDesc = extern struct {
    ulVersion: {"kind":"UInt32"},
    cBuffers: {"kind":"UInt32"},
    pBuffers: {"kind""Ptr","child":Windows.Win32.Security.SecBuffer},
};
// --------------------------------------------------------
// Type: SEC_NEGOTIATION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_NEGOTIATION_INFO = extern struct {
    Size: {"kind":"UInt32"},
    NameLength: {"kind":"UInt32"},
    Name: {"kind""Ptr","child":{"kind":"UInt16"}},
    Reserved: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: SEC_CHANNEL_BINDINGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_CHANNEL_BINDINGS = extern struct {
    dwInitiatorAddrType: {"kind":"UInt32"},
    cbInitiatorLength: {"kind":"UInt32"},
    dwInitiatorOffset: {"kind":"UInt32"},
    dwAcceptorAddrType: {"kind":"UInt32"},
    cbAcceptorLength: {"kind":"UInt32"},
    dwAcceptorOffset: {"kind":"UInt32"},
    cbApplicationDataLength: {"kind":"UInt32"},
    dwApplicationDataOffset: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SEC_APPLICATION_PROTOCOL_NEGOTIATION_EXT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SEC_APPLICATION_PROTOCOL_NEGOTIATION_EXT = *opaque{
};
// --------------------------------------------------------
// Type: SEC_APPLICATION_PROTOCOL_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_APPLICATION_PROTOCOL_LIST = extern struct {
    ProtoNegoExt: Windows.Win32.Security.SEC_APPLICATION_PROTOCOL_NEGOTIATION_EXT,
    ProtocolListSize: {"kind":"UInt16"},
    ProtocolList: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SEC_APPLICATION_PROTOCOLS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_APPLICATION_PROTOCOLS = extern struct {
    ProtocolListsSize: {"kind":"UInt32"},
    ProtocolLists: {"kind":"Array","child": Windows.Win32.Security.SEC_APPLICATION_PROTOCOL_LIST},
};
// --------------------------------------------------------
// Type: SEC_SRTP_PROTECTION_PROFILES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_SRTP_PROTECTION_PROFILES = extern struct {
    ProfilesSize: {"kind":"UInt16"},
    ProfilesList: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SEC_SRTP_MASTER_KEY_IDENTIFIER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_SRTP_MASTER_KEY_IDENTIFIER = extern struct {
    MasterKeyIdentifierSize: {"kind":"Byte"},
    MasterKeyIdentifier: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SEC_TOKEN_BINDING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_TOKEN_BINDING = extern struct {
    MajorVersion: {"kind":"Byte"},
    MinorVersion: {"kind":"Byte"},
    KeyParametersSize: {"kind":"UInt16"},
    KeyParameters: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SEC_PRESHAREDKEY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_PRESHAREDKEY = extern struct {
    KeySize: {"kind":"UInt16"},
    Key: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SEC_PRESHAREDKEY_IDENTITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_PRESHAREDKEY_IDENTITY = extern struct {
    KeyIdentitySize: {"kind":"UInt16"},
    KeyIdentity: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SEC_DTLS_MTU
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_DTLS_MTU = extern struct {
    PathMTU: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: SEC_FLAGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_FLAGS = extern struct {
    Flags: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: SEC_TRAFFIC_SECRET_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SEC_TRAFFIC_SECRET_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: SEC_TRAFFIC_SECRETS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_TRAFFIC_SECRETS = extern struct {
    SymmetricAlgId: {"kind":"Array","child": {"kind":"UInt16"}},
    ChainingMode: {"kind":"Array","child": {"kind":"UInt16"}},
    HashAlgId: {"kind":"Array","child": {"kind":"UInt16"}},
    KeySize: {"kind":"UInt16"},
    IvSize: {"kind":"UInt16"},
    MsgSequenceStart: {"kind":"UInt16"},
    MsgSequenceEnd: {"kind":"UInt16"},
    TrafficSecretType: Windows.Win32.Security.SEC_TRAFFIC_SECRET_TYPE,
    TrafficSecretSize: {"kind":"UInt16"},
    TrafficSecret: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SecPkgCredentials_NamesW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgCredentials_NamesW = extern struct {
    sUserName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SecPkgCredentials_NamesA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgCredentials_NamesA = extern struct {
    sUserName: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: SecPkgCredentials_SSIProviderW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgCredentials_SSIProviderW = extern struct {
    sProviderName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ProviderInfoLength: {"kind":"UInt32"},
    ProviderInfo: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: SecPkgCredentials_SSIProviderA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgCredentials_SSIProviderA = extern struct {
    sProviderName: {"kind""Ptr","child":{"kind":"SByte"}},
    ProviderInfoLength: {"kind":"UInt32"},
    ProviderInfo: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: SecPkgCredentials_KdcProxySettingsW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgCredentials_KdcProxySettingsW = extern struct {
    Version: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    ProxyServerOffset: {"kind":"UInt16"},
    ProxyServerLength: {"kind":"UInt16"},
    ClientTlsCredOffset: {"kind":"UInt16"},
    ClientTlsCredLength: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: SecPkgCredentials_Cert
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgCredentials_Cert = extern struct {
    EncodedCertSize: {"kind":"UInt32"},
    EncodedCert: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SecPkgContext_SubjectAttributes
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_SubjectAttributes = extern struct {
    AttributeInfo: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: SECPKG_CRED_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SECPKG_CRED_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: SecPkgContext_CredInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_CredInfo = extern struct {
    CredClass: Windows.Win32.Security.SECPKG_CRED_CLASS,
    IsPromptingNeeded: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SecPkgContext_NegoPackageInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_NegoPackageInfo = extern struct {
    PackageMask: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SecPkgContext_NegoStatus
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_NegoStatus = extern struct {
    LastStatus: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SecPkgContext_Sizes
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_Sizes = extern struct {
    cbMaxToken: {"kind":"UInt32"},
    cbMaxSignature: {"kind":"UInt32"},
    cbBlockSize: {"kind":"UInt32"},
    cbSecurityTrailer: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SecPkgContext_StreamSizes
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_StreamSizes = extern struct {
    cbHeader: {"kind":"UInt32"},
    cbTrailer: {"kind":"UInt32"},
    cbMaximumMessage: {"kind":"UInt32"},
    cBuffers: {"kind":"UInt32"},
    cbBlockSize: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SecPkgContext_NamesW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_NamesW = extern struct {
    sUserName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SECPKG_ATTR_LCT_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SECPKG_ATTR_LCT_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: SecPkgContext_LastClientTokenStatus
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_LastClientTokenStatus = extern struct {
    LastClientTokenStatus: Windows.Win32.Security.SECPKG_ATTR_LCT_STATUS,
};
// --------------------------------------------------------
// Type: SecPkgContext_NamesA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_NamesA = extern struct {
    sUserName: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: SecPkgContext_Lifespan
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_Lifespan = extern struct {
    tsStart: Windows.Win32.SystemServices.LARGE_INTEGER,
    tsExpiry: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: SecPkgContext_DceInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_DceInfo = extern struct {
    AuthzSvc: {"kind":"UInt32"},
    pPac: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: SecPkgContext_KeyInfoA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_KeyInfoA = extern struct {
    sSignatureAlgorithmName: {"kind""Ptr","child":{"kind":"SByte"}},
    sEncryptAlgorithmName: {"kind""Ptr","child":{"kind":"SByte"}},
    KeySize: {"kind":"UInt32"},
    SignatureAlgorithm: {"kind":"UInt32"},
    EncryptAlgorithm: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SecPkgContext_KeyInfoW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_KeyInfoW = extern struct {
    sSignatureAlgorithmName: {"kind""Ptr","child":{"kind":"UInt16"}},
    sEncryptAlgorithmName: {"kind""Ptr","child":{"kind":"UInt16"}},
    KeySize: {"kind":"UInt32"},
    SignatureAlgorithm: {"kind":"UInt32"},
    EncryptAlgorithm: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SecPkgContext_AuthorityA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_AuthorityA = extern struct {
    sAuthorityName: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: SecPkgContext_AuthorityW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_AuthorityW = extern struct {
    sAuthorityName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SecPkgContext_ProtoInfoA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_ProtoInfoA = extern struct {
    sProtocolName: {"kind""Ptr","child":{"kind":"SByte"}},
    majorVersion: {"kind":"UInt32"},
    minorVersion: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SecPkgContext_ProtoInfoW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_ProtoInfoW = extern struct {
    sProtocolName: {"kind""Ptr","child":{"kind":"UInt16"}},
    majorVersion: {"kind":"UInt32"},
    minorVersion: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SecPkgContext_PasswordExpiry
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_PasswordExpiry = extern struct {
    tsPasswordExpires: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: SecPkgContext_LogoffTime
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_LogoffTime = extern struct {
    tsLogoffTime: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: SecPkgContext_SessionKey
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_SessionKey = extern struct {
    SessionKeyLength: {"kind":"UInt32"},
    SessionKey: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SecPkgContext_NegoKeys
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_NegoKeys = extern struct {
    KeyType: {"kind":"UInt32"},
    KeyLength: {"kind":"UInt16"},
    KeyValue: {"kind""Ptr","child":{"kind":"Byte"}},
    VerifyKeyType: {"kind":"UInt32"},
    VerifyKeyLength: {"kind":"UInt16"},
    VerifyKeyValue: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SecPkgContext_PackageInfoW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_PackageInfoW = extern struct {
    PackageInfo: {"kind""Ptr","child":Windows.Win32.Security.SecPkgInfoW},
};
// --------------------------------------------------------
// Type: SecPkgContext_PackageInfoA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_PackageInfoA = extern struct {
    PackageInfo: {"kind""Ptr","child":Windows.Win32.Security.SecPkgInfoA},
};
// --------------------------------------------------------
// Type: SecPkgContext_UserFlags
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_UserFlags = extern struct {
    UserFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SecPkgContext_Flags
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_Flags = extern struct {
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SecPkgContext_NegotiationInfoA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_NegotiationInfoA = extern struct {
    PackageInfo: {"kind""Ptr","child":Windows.Win32.Security.SecPkgInfoA},
    NegotiationState: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SecPkgContext_NegotiationInfoW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_NegotiationInfoW = extern struct {
    PackageInfo: {"kind""Ptr","child":Windows.Win32.Security.SecPkgInfoW},
    NegotiationState: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SecPkgContext_NativeNamesW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_NativeNamesW = extern struct {
    sClientName: {"kind""Ptr","child":{"kind":"UInt16"}},
    sServerName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SecPkgContext_NativeNamesA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_NativeNamesA = extern struct {
    sClientName: {"kind""Ptr","child":{"kind":"SByte"}},
    sServerName: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: SecPkgContext_CredentialNameW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_CredentialNameW = extern struct {
    CredentialType: {"kind":"UInt32"},
    sCredentialName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SecPkgContext_CredentialNameA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_CredentialNameA = extern struct {
    CredentialType: {"kind":"UInt32"},
    sCredentialName: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: SecPkgContext_AccessToken
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_AccessToken = extern struct {
    AccessToken: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: SecPkgContext_TargetInformation
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_TargetInformation = extern struct {
    MarshalledTargetInfoLength: {"kind":"UInt32"},
    MarshalledTargetInfo: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SecPkgContext_AuthzID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_AuthzID = extern struct {
    AuthzIDLength: {"kind":"UInt32"},
    AuthzID: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: SecPkgContext_Target
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_Target = extern struct {
    TargetLength: {"kind":"UInt32"},
    Target: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: SecPkgContext_ClientSpecifiedTarget
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_ClientSpecifiedTarget = extern struct {
    sTargetName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SecPkgContext_Bindings
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_Bindings = extern struct {
    BindingsLength: {"kind":"UInt32"},
    Bindings: {"kind""Ptr","child":Windows.Win32.Security.SEC_CHANNEL_BINDINGS},
};
// --------------------------------------------------------
// Type: SEC_APPLICATION_PROTOCOL_NEGOTIATION_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SEC_APPLICATION_PROTOCOL_NEGOTIATION_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: SecPkgContext_ApplicationProtocol
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_ApplicationProtocol = extern struct {
    ProtoNegoStatus: Windows.Win32.Security.SEC_APPLICATION_PROTOCOL_NEGOTIATION_STATUS,
    ProtoNegoExt: Windows.Win32.Security.SEC_APPLICATION_PROTOCOL_NEGOTIATION_EXT,
    ProtocolIdSize: {"kind":"Byte"},
    ProtocolId: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SecPkgContext_NegotiatedTlsExtensions
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_NegotiatedTlsExtensions = extern struct {
    ExtensionsCount: {"kind":"UInt32"},
    Extensions: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SECPKG_APP_MODE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_APP_MODE_INFO = extern struct {
    UserFunction: {"kind":"UInt32"},
    Argument1: {"kind":"UIntPtr"},
    Argument2: {"kind":"UIntPtr"},
    UserData: Windows.Win32.Security.SecBuffer,
    ReturnToLsa: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: SEC_GET_KEY_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SEC_GET_KEY_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ACQUIRE_CREDENTIALS_HANDLE_FN_W
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ACQUIRE_CREDENTIALS_HANDLE_FN_W = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ACQUIRE_CREDENTIALS_HANDLE_FN_A
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ACQUIRE_CREDENTIALS_HANDLE_FN_A = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FREE_CREDENTIALS_HANDLE_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FREE_CREDENTIALS_HANDLE_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ADD_CREDENTIALS_FN_W
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADD_CREDENTIALS_FN_W = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ADD_CREDENTIALS_FN_A
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADD_CREDENTIALS_FN_A = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CHANGE_PASSWORD_FN_W
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CHANGE_PASSWORD_FN_W = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CHANGE_PASSWORD_FN_A
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CHANGE_PASSWORD_FN_A = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: INITIALIZE_SECURITY_CONTEXT_FN_W
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const INITIALIZE_SECURITY_CONTEXT_FN_W = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: INITIALIZE_SECURITY_CONTEXT_FN_A
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const INITIALIZE_SECURITY_CONTEXT_FN_A = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ACCEPT_SECURITY_CONTEXT_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ACCEPT_SECURITY_CONTEXT_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: COMPLETE_AUTH_TOKEN_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const COMPLETE_AUTH_TOKEN_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: IMPERSONATE_SECURITY_CONTEXT_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IMPERSONATE_SECURITY_CONTEXT_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: REVERT_SECURITY_CONTEXT_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const REVERT_SECURITY_CONTEXT_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: QUERY_SECURITY_CONTEXT_TOKEN_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QUERY_SECURITY_CONTEXT_TOKEN_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DELETE_SECURITY_CONTEXT_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DELETE_SECURITY_CONTEXT_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: APPLY_CONTROL_TOKEN_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const APPLY_CONTROL_TOKEN_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: QUERY_CONTEXT_ATTRIBUTES_FN_W
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QUERY_CONTEXT_ATTRIBUTES_FN_W = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: QUERY_CONTEXT_ATTRIBUTES_EX_FN_W
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QUERY_CONTEXT_ATTRIBUTES_EX_FN_W = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: QUERY_CONTEXT_ATTRIBUTES_FN_A
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QUERY_CONTEXT_ATTRIBUTES_FN_A = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: QUERY_CONTEXT_ATTRIBUTES_EX_FN_A
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QUERY_CONTEXT_ATTRIBUTES_EX_FN_A = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SET_CONTEXT_ATTRIBUTES_FN_W
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SET_CONTEXT_ATTRIBUTES_FN_W = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SET_CONTEXT_ATTRIBUTES_FN_A
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SET_CONTEXT_ATTRIBUTES_FN_A = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: QUERY_CREDENTIALS_ATTRIBUTES_FN_W
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QUERY_CREDENTIALS_ATTRIBUTES_FN_W = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_W
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_W = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: QUERY_CREDENTIALS_ATTRIBUTES_FN_A
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QUERY_CREDENTIALS_ATTRIBUTES_FN_A = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_A
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_A = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SET_CREDENTIALS_ATTRIBUTES_FN_W
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SET_CREDENTIALS_ATTRIBUTES_FN_W = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SET_CREDENTIALS_ATTRIBUTES_FN_A
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SET_CREDENTIALS_ATTRIBUTES_FN_A = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FREE_CONTEXT_BUFFER_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FREE_CONTEXT_BUFFER_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: MAKE_SIGNATURE_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MAKE_SIGNATURE_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VERIFY_SIGNATURE_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VERIFY_SIGNATURE_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ENCRYPT_MESSAGE_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ENCRYPT_MESSAGE_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DECRYPT_MESSAGE_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DECRYPT_MESSAGE_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ENUMERATE_SECURITY_PACKAGES_FN_W
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ENUMERATE_SECURITY_PACKAGES_FN_W = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ENUMERATE_SECURITY_PACKAGES_FN_A
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ENUMERATE_SECURITY_PACKAGES_FN_A = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: QUERY_SECURITY_PACKAGE_INFO_FN_W
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QUERY_SECURITY_PACKAGE_INFO_FN_W = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: QUERY_SECURITY_PACKAGE_INFO_FN_A
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QUERY_SECURITY_PACKAGE_INFO_FN_A = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SecDelegationType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SecDelegationType = *opaque{
};
// --------------------------------------------------------
// Type: EXPORT_SECURITY_CONTEXT_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EXPORT_SECURITY_CONTEXT_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: IMPORT_SECURITY_CONTEXT_FN_W
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IMPORT_SECURITY_CONTEXT_FN_W = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: IMPORT_SECURITY_CONTEXT_FN_A
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IMPORT_SECURITY_CONTEXT_FN_A = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SecurityFunctionTableW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecurityFunctionTableW = extern struct {
    dwVersion: {"kind":"UInt32"},
    EnumerateSecurityPackagesW: Windows.Win32.Security.ENUMERATE_SECURITY_PACKAGES_FN_W,
    QueryCredentialsAttributesW: Windows.Win32.Security.QUERY_CREDENTIALS_ATTRIBUTES_FN_W,
    AcquireCredentialsHandleW: Windows.Win32.Security.ACQUIRE_CREDENTIALS_HANDLE_FN_W,
    FreeCredentialsHandle: Windows.Win32.Security.FREE_CREDENTIALS_HANDLE_FN,
    Reserved2: {"kind""Ptr","child":{"kind":"Void"}},
    InitializeSecurityContextW: Windows.Win32.Security.INITIALIZE_SECURITY_CONTEXT_FN_W,
    AcceptSecurityContext: Windows.Win32.Security.ACCEPT_SECURITY_CONTEXT_FN,
    CompleteAuthToken: Windows.Win32.Security.COMPLETE_AUTH_TOKEN_FN,
    DeleteSecurityContext: Windows.Win32.Security.DELETE_SECURITY_CONTEXT_FN,
    ApplyControlToken: Windows.Win32.Security.APPLY_CONTROL_TOKEN_FN,
    QueryContextAttributesW: Windows.Win32.Security.QUERY_CONTEXT_ATTRIBUTES_FN_W,
    ImpersonateSecurityContext: Windows.Win32.Security.IMPERSONATE_SECURITY_CONTEXT_FN,
    RevertSecurityContext: Windows.Win32.Security.REVERT_SECURITY_CONTEXT_FN,
    MakeSignature: Windows.Win32.Security.MAKE_SIGNATURE_FN,
    VerifySignature: Windows.Win32.Security.VERIFY_SIGNATURE_FN,
    FreeContextBuffer: Windows.Win32.Security.FREE_CONTEXT_BUFFER_FN,
    QuerySecurityPackageInfoW: Windows.Win32.Security.QUERY_SECURITY_PACKAGE_INFO_FN_W,
    Reserved3: {"kind""Ptr","child":{"kind":"Void"}},
    Reserved4: {"kind""Ptr","child":{"kind":"Void"}},
    ExportSecurityContext: Windows.Win32.Security.EXPORT_SECURITY_CONTEXT_FN,
    ImportSecurityContextW: Windows.Win32.Security.IMPORT_SECURITY_CONTEXT_FN_W,
    AddCredentialsW: Windows.Win32.Security.ADD_CREDENTIALS_FN_W,
    Reserved8: {"kind""Ptr","child":{"kind":"Void"}},
    QuerySecurityContextToken: Windows.Win32.Security.QUERY_SECURITY_CONTEXT_TOKEN_FN,
    EncryptMessage: Windows.Win32.Security.ENCRYPT_MESSAGE_FN,
    DecryptMessage: Windows.Win32.Security.DECRYPT_MESSAGE_FN,
    SetContextAttributesW: Windows.Win32.Security.SET_CONTEXT_ATTRIBUTES_FN_W,
    SetCredentialsAttributesW: Windows.Win32.Security.SET_CREDENTIALS_ATTRIBUTES_FN_W,
    ChangeAccountPasswordW: Windows.Win32.Security.CHANGE_PASSWORD_FN_W,
    QueryContextAttributesExW: Windows.Win32.Security.QUERY_CONTEXT_ATTRIBUTES_EX_FN_W,
    QueryCredentialsAttributesExW: Windows.Win32.Security.QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_W,
};
// --------------------------------------------------------
// Type: SecurityFunctionTableA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecurityFunctionTableA = extern struct {
    dwVersion: {"kind":"UInt32"},
    EnumerateSecurityPackagesA: Windows.Win32.Security.ENUMERATE_SECURITY_PACKAGES_FN_A,
    QueryCredentialsAttributesA: Windows.Win32.Security.QUERY_CREDENTIALS_ATTRIBUTES_FN_A,
    AcquireCredentialsHandleA: Windows.Win32.Security.ACQUIRE_CREDENTIALS_HANDLE_FN_A,
    FreeCredentialsHandle: Windows.Win32.Security.FREE_CREDENTIALS_HANDLE_FN,
    Reserved2: {"kind""Ptr","child":{"kind":"Void"}},
    InitializeSecurityContextA: Windows.Win32.Security.INITIALIZE_SECURITY_CONTEXT_FN_A,
    AcceptSecurityContext: Windows.Win32.Security.ACCEPT_SECURITY_CONTEXT_FN,
    CompleteAuthToken: Windows.Win32.Security.COMPLETE_AUTH_TOKEN_FN,
    DeleteSecurityContext: Windows.Win32.Security.DELETE_SECURITY_CONTEXT_FN,
    ApplyControlToken: Windows.Win32.Security.APPLY_CONTROL_TOKEN_FN,
    QueryContextAttributesA: Windows.Win32.Security.QUERY_CONTEXT_ATTRIBUTES_FN_A,
    ImpersonateSecurityContext: Windows.Win32.Security.IMPERSONATE_SECURITY_CONTEXT_FN,
    RevertSecurityContext: Windows.Win32.Security.REVERT_SECURITY_CONTEXT_FN,
    MakeSignature: Windows.Win32.Security.MAKE_SIGNATURE_FN,
    VerifySignature: Windows.Win32.Security.VERIFY_SIGNATURE_FN,
    FreeContextBuffer: Windows.Win32.Security.FREE_CONTEXT_BUFFER_FN,
    QuerySecurityPackageInfoA: Windows.Win32.Security.QUERY_SECURITY_PACKAGE_INFO_FN_A,
    Reserved3: {"kind""Ptr","child":{"kind":"Void"}},
    Reserved4: {"kind""Ptr","child":{"kind":"Void"}},
    ExportSecurityContext: Windows.Win32.Security.EXPORT_SECURITY_CONTEXT_FN,
    ImportSecurityContextA: Windows.Win32.Security.IMPORT_SECURITY_CONTEXT_FN_A,
    AddCredentialsA: Windows.Win32.Security.ADD_CREDENTIALS_FN_A,
    Reserved8: {"kind""Ptr","child":{"kind":"Void"}},
    QuerySecurityContextToken: Windows.Win32.Security.QUERY_SECURITY_CONTEXT_TOKEN_FN,
    EncryptMessage: Windows.Win32.Security.ENCRYPT_MESSAGE_FN,
    DecryptMessage: Windows.Win32.Security.DECRYPT_MESSAGE_FN,
    SetContextAttributesA: Windows.Win32.Security.SET_CONTEXT_ATTRIBUTES_FN_A,
    SetCredentialsAttributesA: Windows.Win32.Security.SET_CREDENTIALS_ATTRIBUTES_FN_A,
    ChangeAccountPasswordA: Windows.Win32.Security.CHANGE_PASSWORD_FN_A,
    QueryContextAttributesExA: Windows.Win32.Security.QUERY_CONTEXT_ATTRIBUTES_EX_FN_A,
    QueryCredentialsAttributesExA: Windows.Win32.Security.QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_A,
};
// --------------------------------------------------------
// Type: INIT_SECURITY_INTERFACE_A
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const INIT_SECURITY_INTERFACE_A = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: INIT_SECURITY_INTERFACE_W
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const INIT_SECURITY_INTERFACE_W = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SASL_AUTHZID_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SASL_AUTHZID_STATE = *opaque{
};
// --------------------------------------------------------
// Type: SEC_WINNT_AUTH_IDENTITY_EX2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_WINNT_AUTH_IDENTITY_EX2 = extern struct {
    Version: {"kind":"UInt32"},
    cbHeaderLength: {"kind":"UInt16"},
    cbStructureLength: {"kind":"UInt32"},
    UserOffset: {"kind":"UInt32"},
    UserLength: {"kind":"UInt16"},
    DomainOffset: {"kind":"UInt32"},
    DomainLength: {"kind":"UInt16"},
    PackedCredentialsOffset: {"kind":"UInt32"},
    PackedCredentialsLength: {"kind":"UInt16"},
    Flags: {"kind":"UInt32"},
    PackageListOffset: {"kind":"UInt32"},
    PackageListLength: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: SEC_WINNT_AUTH_IDENTITY_EXW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_WINNT_AUTH_IDENTITY_EXW = extern struct {
    Version: {"kind":"UInt32"},
    Length: {"kind":"UInt32"},
    User: {"kind""Ptr","child":{"kind":"UInt16"}},
    UserLength: {"kind":"UInt32"},
    Domain: {"kind""Ptr","child":{"kind":"UInt16"}},
    DomainLength: {"kind":"UInt32"},
    Password: {"kind""Ptr","child":{"kind":"UInt16"}},
    PasswordLength: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    PackageList: {"kind""Ptr","child":{"kind":"UInt16"}},
    PackageListLength: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SEC_WINNT_AUTH_IDENTITY_EXA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_WINNT_AUTH_IDENTITY_EXA = extern struct {
    Version: {"kind":"UInt32"},
    Length: {"kind":"UInt32"},
    User: {"kind""Ptr","child":{"kind":"Byte"}},
    UserLength: {"kind":"UInt32"},
    Domain: {"kind""Ptr","child":{"kind":"Byte"}},
    DomainLength: {"kind":"UInt32"},
    Password: {"kind""Ptr","child":{"kind":"Byte"}},
    PasswordLength: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    PackageList: {"kind""Ptr","child":{"kind":"Byte"}},
    PackageListLength: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SEC_WINNT_AUTH_IDENTITY_INFO
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const SEC_WINNT_AUTH_IDENTITY_INFO = *opaque{
};
// --------------------------------------------------------
// Type: SECURITY_PACKAGE_OPTIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECURITY_PACKAGE_OPTIONS = extern struct {
    Size: {"kind":"UInt32"},
    Type: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    SignatureSize: {"kind":"UInt32"},
    Signature: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: CREDENTIAL_ATTRIBUTEA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CREDENTIAL_ATTRIBUTEA = extern struct {
    Keyword: {"kind""Ptr","child":{"kind":"SByte"}},
    Flags: {"kind":"UInt32"},
    ValueSize: {"kind":"UInt32"},
    Value: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: CREDENTIAL_ATTRIBUTEW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CREDENTIAL_ATTRIBUTEW = extern struct {
    Keyword: {"kind""Ptr","child":{"kind":"UInt16"}},
    Flags: {"kind":"UInt32"},
    ValueSize: {"kind":"UInt32"},
    Value: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: CREDENTIALA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CREDENTIALA = extern struct {
    Flags: {"kind":"UInt32"},
    Type: {"kind":"UInt32"},
    TargetName: {"kind""Ptr","child":{"kind":"SByte"}},
    Comment: {"kind""Ptr","child":{"kind":"SByte"}},
    LastWritten: Windows.Win32.WindowsProgramming.FILETIME,
    CredentialBlobSize: {"kind":"UInt32"},
    CredentialBlob: {"kind""Ptr","child":{"kind":"Byte"}},
    Persist: {"kind":"UInt32"},
    AttributeCount: {"kind":"UInt32"},
    Attributes: {"kind""Ptr","child":Windows.Win32.Security.CREDENTIAL_ATTRIBUTEA},
    TargetAlias: {"kind""Ptr","child":{"kind":"SByte"}},
    UserName: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: CREDENTIALW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CREDENTIALW = extern struct {
    Flags: {"kind":"UInt32"},
    Type: {"kind":"UInt32"},
    TargetName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Comment: {"kind""Ptr","child":{"kind":"UInt16"}},
    LastWritten: Windows.Win32.WindowsProgramming.FILETIME,
    CredentialBlobSize: {"kind":"UInt32"},
    CredentialBlob: {"kind""Ptr","child":{"kind":"Byte"}},
    Persist: {"kind":"UInt32"},
    AttributeCount: {"kind":"UInt32"},
    Attributes: {"kind""Ptr","child":Windows.Win32.Security.CREDENTIAL_ATTRIBUTEW},
    TargetAlias: {"kind""Ptr","child":{"kind":"UInt16"}},
    UserName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: CREDENTIAL_TARGET_INFORMATIONA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CREDENTIAL_TARGET_INFORMATIONA = extern struct {
    TargetName: {"kind""Ptr","child":{"kind":"SByte"}},
    NetbiosServerName: {"kind""Ptr","child":{"kind":"SByte"}},
    DnsServerName: {"kind""Ptr","child":{"kind":"SByte"}},
    NetbiosDomainName: {"kind""Ptr","child":{"kind":"SByte"}},
    DnsDomainName: {"kind""Ptr","child":{"kind":"SByte"}},
    DnsTreeName: {"kind""Ptr","child":{"kind":"SByte"}},
    PackageName: {"kind""Ptr","child":{"kind":"SByte"}},
    Flags: {"kind":"UInt32"},
    CredTypeCount: {"kind":"UInt32"},
    CredTypes: {"kind""Ptr","child":{"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: CREDENTIAL_TARGET_INFORMATIONW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CREDENTIAL_TARGET_INFORMATIONW = extern struct {
    TargetName: {"kind""Ptr","child":{"kind":"UInt16"}},
    NetbiosServerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    DnsServerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    NetbiosDomainName: {"kind""Ptr","child":{"kind":"UInt16"}},
    DnsDomainName: {"kind""Ptr","child":{"kind":"UInt16"}},
    DnsTreeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    PackageName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Flags: {"kind":"UInt32"},
    CredTypeCount: {"kind":"UInt32"},
    CredTypes: {"kind""Ptr","child":{"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: CERT_CREDENTIAL_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_CREDENTIAL_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    rgbHashOfCert: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: USERNAME_TARGET_CREDENTIAL_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USERNAME_TARGET_CREDENTIAL_INFO = extern struct {
    UserName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: BINARY_BLOB_CREDENTIAL_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BINARY_BLOB_CREDENTIAL_INFO = extern struct {
    cbBlob: {"kind":"UInt32"},
    pbBlob: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: CRED_MARSHAL_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CRED_MARSHAL_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: CRED_PROTECTION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CRED_PROTECTION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: CREDUI_INFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CREDUI_INFOA = extern struct {
    cbSize: {"kind":"UInt32"},
    hwndParent: Windows.Win32.WindowsAndMessaging.HWND,
    pszMessageText: {"kind""Ptr","child":{"kind":"SByte"}},
    pszCaptionText: {"kind""Ptr","child":{"kind":"SByte"}},
    hbmBanner: Windows.Win32.Gdi.HBITMAP,
};
// --------------------------------------------------------
// Type: CREDUI_INFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CREDUI_INFOW = extern struct {
    cbSize: {"kind":"UInt32"},
    hwndParent: Windows.Win32.WindowsAndMessaging.HWND,
    pszMessageText: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszCaptionText: {"kind""Ptr","child":{"kind":"UInt16"}},
    hbmBanner: Windows.Win32.Gdi.HBITMAP,
};
// --------------------------------------------------------
// Type: LSA_TOKEN_INFORMATION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_TOKEN_INFORMATION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: LSA_TOKEN_INFORMATION_NULL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_TOKEN_INFORMATION_NULL = extern struct {
    ExpirationTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    Groups: {"kind""Ptr","child":Windows.Win32.Security.TOKEN_GROUPS},
};
// --------------------------------------------------------
// Type: LSA_TOKEN_INFORMATION_V1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_TOKEN_INFORMATION_V1 = extern struct {
    ExpirationTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    User: Windows.Win32.Security.TOKEN_USER,
    Groups: {"kind""Ptr","child":Windows.Win32.Security.TOKEN_GROUPS},
    PrimaryGroup: Windows.Win32.Security.TOKEN_PRIMARY_GROUP,
    Privileges: {"kind""Ptr","child":Windows.Win32.Security.TOKEN_PRIVILEGES},
    Owner: Windows.Win32.Security.TOKEN_OWNER,
    DefaultDacl: Windows.Win32.Security.TOKEN_DEFAULT_DACL,
};
// --------------------------------------------------------
// Type: LSA_TOKEN_INFORMATION_V3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_TOKEN_INFORMATION_V3 = extern struct {
    ExpirationTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    User: Windows.Win32.Security.TOKEN_USER,
    Groups: {"kind""Ptr","child":Windows.Win32.Security.TOKEN_GROUPS},
    PrimaryGroup: Windows.Win32.Security.TOKEN_PRIMARY_GROUP,
    Privileges: {"kind""Ptr","child":Windows.Win32.Security.TOKEN_PRIVILEGES},
    Owner: Windows.Win32.Security.TOKEN_OWNER,
    DefaultDacl: Windows.Win32.Security.TOKEN_DEFAULT_DACL,
    UserClaims: Windows.Win32.Security.TOKEN_USER_CLAIMS,
    DeviceClaims: Windows.Win32.Security.TOKEN_DEVICE_CLAIMS,
    DeviceGroups: {"kind""Ptr","child":Windows.Win32.Security.TOKEN_GROUPS},
};
// --------------------------------------------------------
// Type: LSA_CREATE_LOGON_SESSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_CREATE_LOGON_SESSION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_DELETE_LOGON_SESSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_DELETE_LOGON_SESSION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_ADD_CREDENTIAL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_ADD_CREDENTIAL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_GET_CREDENTIALS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_GET_CREDENTIALS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_DELETE_CREDENTIAL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_DELETE_CREDENTIAL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_ALLOCATE_LSA_HEAP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_ALLOCATE_LSA_HEAP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_FREE_LSA_HEAP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_FREE_LSA_HEAP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_ALLOCATE_PRIVATE_HEAP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_ALLOCATE_PRIVATE_HEAP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_FREE_PRIVATE_HEAP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_FREE_PRIVATE_HEAP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_ALLOCATE_CLIENT_BUFFER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_ALLOCATE_CLIENT_BUFFER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_FREE_CLIENT_BUFFER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_FREE_CLIENT_BUFFER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_COPY_TO_CLIENT_BUFFER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_COPY_TO_CLIENT_BUFFER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_COPY_FROM_CLIENT_BUFFER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_COPY_FROM_CLIENT_BUFFER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_CREATE_LOGON_SESSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_CREATE_LOGON_SESSION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_DELETE_LOGON_SESSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_DELETE_LOGON_SESSION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_ADD_CREDENTIAL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_ADD_CREDENTIAL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_GET_CREDENTIALS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_GET_CREDENTIALS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_DELETE_CREDENTIAL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_DELETE_CREDENTIAL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_ALLOCATE_LSA_HEAP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_ALLOCATE_LSA_HEAP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_FREE_LSA_HEAP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_FREE_LSA_HEAP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_ALLOCATE_PRIVATE_HEAP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_ALLOCATE_PRIVATE_HEAP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_FREE_PRIVATE_HEAP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_FREE_PRIVATE_HEAP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_ALLOCATE_CLIENT_BUFFER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_ALLOCATE_CLIENT_BUFFER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_FREE_CLIENT_BUFFER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_FREE_CLIENT_BUFFER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_COPY_TO_CLIENT_BUFFER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_COPY_TO_CLIENT_BUFFER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_COPY_FROM_CLIENT_BUFFER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_COPY_FROM_CLIENT_BUFFER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_DISPATCH_TABLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_DISPATCH_TABLE = extern struct {
    CreateLogonSession: Windows.Win32.Security.PLSA_CREATE_LOGON_SESSION,
    DeleteLogonSession: Windows.Win32.Security.PLSA_DELETE_LOGON_SESSION,
    AddCredential: Windows.Win32.Security.PLSA_ADD_CREDENTIAL,
    GetCredentials: Windows.Win32.Security.PLSA_GET_CREDENTIALS,
    DeleteCredential: Windows.Win32.Security.PLSA_DELETE_CREDENTIAL,
    AllocateLsaHeap: Windows.Win32.Security.PLSA_ALLOCATE_LSA_HEAP,
    FreeLsaHeap: Windows.Win32.Security.PLSA_FREE_LSA_HEAP,
    AllocateClientBuffer: Windows.Win32.Security.PLSA_ALLOCATE_CLIENT_BUFFER,
    FreeClientBuffer: Windows.Win32.Security.PLSA_FREE_CLIENT_BUFFER,
    CopyToClientBuffer: Windows.Win32.Security.PLSA_COPY_TO_CLIENT_BUFFER,
    CopyFromClientBuffer: Windows.Win32.Security.PLSA_COPY_FROM_CLIENT_BUFFER,
};
// --------------------------------------------------------
// Type: LSA_AP_INITIALIZE_PACKAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_AP_INITIALIZE_PACKAGE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_AP_LOGON_USER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_AP_LOGON_USER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_AP_LOGON_USER_EX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_AP_LOGON_USER_EX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_AP_CALL_PACKAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_AP_CALL_PACKAGE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_AP_CALL_PACKAGE_PASSTHROUGH
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_AP_CALL_PACKAGE_PASSTHROUGH = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_AP_LOGON_TERMINATED
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_AP_LOGON_TERMINATED = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_AP_CALL_PACKAGE_UNTRUSTED
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_AP_CALL_PACKAGE_UNTRUSTED = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_AP_INITIALIZE_PACKAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_AP_INITIALIZE_PACKAGE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_AP_LOGON_USER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_AP_LOGON_USER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_AP_LOGON_USER_EX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_AP_LOGON_USER_EX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_AP_CALL_PACKAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_AP_CALL_PACKAGE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_AP_CALL_PACKAGE_PASSTHROUGH
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_AP_CALL_PACKAGE_PASSTHROUGH = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_AP_LOGON_TERMINATED
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_AP_LOGON_TERMINATED = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_AP_CALL_PACKAGE_UNTRUSTED
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_AP_CALL_PACKAGE_UNTRUSTED = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PSAM_CREDENTIAL_UPDATE_NOTIFY_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PSAM_CREDENTIAL_UPDATE_NOTIFY_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PSAM_CREDENTIAL_UPDATE_REGISTER_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PSAM_CREDENTIAL_UPDATE_REGISTER_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PSAM_CREDENTIAL_UPDATE_FREE_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PSAM_CREDENTIAL_UPDATE_FREE_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SAM_REGISTER_MAPPING_ELEMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SAM_REGISTER_MAPPING_ELEMENT = extern struct {
    Original: {"kind""Ptr","child":{"kind":"SByte"}},
    Mapped: {"kind""Ptr","child":{"kind":"SByte"}},
    Continuable: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: SAM_REGISTER_MAPPING_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SAM_REGISTER_MAPPING_LIST = extern struct {
    Count: {"kind":"UInt32"},
    Elements: {"kind""Ptr","child":Windows.Win32.Security.SAM_REGISTER_MAPPING_ELEMENT},
};
// --------------------------------------------------------
// Type: SAM_REGISTER_MAPPING_TABLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SAM_REGISTER_MAPPING_TABLE = extern struct {
    Count: {"kind":"UInt32"},
    Lists: {"kind""Ptr","child":Windows.Win32.Security.SAM_REGISTER_MAPPING_LIST},
};
// --------------------------------------------------------
// Type: PSAM_CREDENTIAL_UPDATE_REGISTER_MAPPED_ENTRYPOINTS_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PSAM_CREDENTIAL_UPDATE_REGISTER_MAPPED_ENTRYPOINTS_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SEC_THREAD_START
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SEC_THREAD_START = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SECPKG_CLIENT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_CLIENT_INFO = extern struct {
    LogonId: Windows.Win32.Kernel.LUID,
    ProcessID: {"kind":"UInt32"},
    ThreadID: {"kind":"UInt32"},
    HasTcbPrivilege: {"kind":"Byte"},
    Impersonating: {"kind":"Byte"},
    Restricted: {"kind":"Byte"},
    ClientFlags: {"kind":"Byte"},
    ImpersonationLevel: Windows.Win32.Security.SECURITY_IMPERSONATION_LEVEL,
    ClientToken: Windows.Win32.SystemServices.HANDLE,
};
// --------------------------------------------------------
// Type: SECPKG_CALL_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_CALL_INFO = extern struct {
    ProcessId: {"kind":"UInt32"},
    ThreadId: {"kind":"UInt32"},
    Attributes: {"kind":"UInt32"},
    CallCount: {"kind":"UInt32"},
    MechOid: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: SECPKG_SUPPLEMENTAL_CRED
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_SUPPLEMENTAL_CRED = extern struct {
    PackageName: Windows.Win32.Security.UNICODE_STRING,
    CredentialSize: {"kind":"UInt32"},
    Credentials: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SECPKG_BYTE_VECTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_BYTE_VECTOR = extern struct {
    ByteArrayOffset: {"kind":"UInt32"},
    ByteArrayLength: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: SECPKG_SHORT_VECTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_SHORT_VECTOR = extern struct {
    ShortArrayOffset: {"kind":"UInt32"},
    ShortArrayCount: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: SECPKG_SUPPLIED_CREDENTIAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_SUPPLIED_CREDENTIAL = extern struct {
    cbHeaderLength: {"kind":"UInt16"},
    cbStructureLength: {"kind":"UInt16"},
    UserName: Windows.Win32.Security.SECPKG_SHORT_VECTOR,
    DomainName: Windows.Win32.Security.SECPKG_SHORT_VECTOR,
    PackedCredentials: Windows.Win32.Security.SECPKG_BYTE_VECTOR,
    CredFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SECPKG_CREDENTIAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_CREDENTIAL = extern struct {
    Version: {"kind":"UInt64"},
    cbHeaderLength: {"kind":"UInt16"},
    cbStructureLength: {"kind":"UInt32"},
    ClientProcess: {"kind":"UInt32"},
    ClientThread: {"kind":"UInt32"},
    LogonId: Windows.Win32.Kernel.LUID,
    ClientToken: Windows.Win32.SystemServices.HANDLE,
    SessionId: {"kind":"UInt32"},
    ModifiedId: Windows.Win32.Kernel.LUID,
    fCredentials: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    PrincipalName: Windows.Win32.Security.SECPKG_BYTE_VECTOR,
    PackageList: Windows.Win32.Security.SECPKG_BYTE_VECTOR,
    MarshaledSuppliedCreds: Windows.Win32.Security.SECPKG_BYTE_VECTOR,
};
// --------------------------------------------------------
// Type: SECPKG_SUPPLEMENTAL_CRED_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_SUPPLEMENTAL_CRED_ARRAY = extern struct {
    CredentialCount: {"kind":"UInt32"},
    Credentials: {"kind":"Array","child": Windows.Win32.Security.SECPKG_SUPPLEMENTAL_CRED},
};
// --------------------------------------------------------
// Type: SECPKG_SURROGATE_LOGON_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_SURROGATE_LOGON_ENTRY = extern struct {
    Type: Guid,
    Data: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: SECPKG_SURROGATE_LOGON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_SURROGATE_LOGON = extern struct {
    Version: {"kind":"UInt32"},
    SurrogateLogonID: Windows.Win32.Kernel.LUID,
    EntryCount: {"kind":"UInt32"},
    Entries: {"kind""Ptr","child":Windows.Win32.Security.SECPKG_SURROGATE_LOGON_ENTRY},
};
// --------------------------------------------------------
// Type: LSA_CALLBACK_FUNCTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_CALLBACK_FUNCTION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_CALLBACK_FUNCTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_CALLBACK_FUNCTION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SECPKG_PRIMARY_CRED
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_PRIMARY_CRED = extern struct {
    LogonId: Windows.Win32.Kernel.LUID,
    DownlevelName: Windows.Win32.Security.UNICODE_STRING,
    DomainName: Windows.Win32.Security.UNICODE_STRING,
    Password: Windows.Win32.Security.UNICODE_STRING,
    OldPassword: Windows.Win32.Security.UNICODE_STRING,
    UserSid: {"kind""Ptr","child":{"kind":"Void"}},
    Flags: {"kind":"UInt32"},
    DnsDomainName: Windows.Win32.Security.UNICODE_STRING,
    Upn: Windows.Win32.Security.UNICODE_STRING,
    LogonServer: Windows.Win32.Security.UNICODE_STRING,
    Spare1: Windows.Win32.Security.UNICODE_STRING,
    Spare2: Windows.Win32.Security.UNICODE_STRING,
    Spare3: Windows.Win32.Security.UNICODE_STRING,
    Spare4: Windows.Win32.Security.UNICODE_STRING,
};
// --------------------------------------------------------
// Type: SECPKG_PRIMARY_CRED_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_PRIMARY_CRED_EX = extern struct {
    LogonId: Windows.Win32.Kernel.LUID,
    DownlevelName: Windows.Win32.Security.UNICODE_STRING,
    DomainName: Windows.Win32.Security.UNICODE_STRING,
    Password: Windows.Win32.Security.UNICODE_STRING,
    OldPassword: Windows.Win32.Security.UNICODE_STRING,
    UserSid: {"kind""Ptr","child":{"kind":"Void"}},
    Flags: {"kind":"UInt32"},
    DnsDomainName: Windows.Win32.Security.UNICODE_STRING,
    Upn: Windows.Win32.Security.UNICODE_STRING,
    LogonServer: Windows.Win32.Security.UNICODE_STRING,
    Spare1: Windows.Win32.Security.UNICODE_STRING,
    Spare2: Windows.Win32.Security.UNICODE_STRING,
    Spare3: Windows.Win32.Security.UNICODE_STRING,
    Spare4: Windows.Win32.Security.UNICODE_STRING,
    PackageId: {"kind":"UIntPtr"},
    PrevLogonId: Windows.Win32.Kernel.LUID,
};
// --------------------------------------------------------
// Type: SECPKG_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_PARAMETERS = extern struct {
    Version: {"kind":"UInt32"},
    MachineState: {"kind":"UInt32"},
    SetupMode: {"kind":"UInt32"},
    DomainSid: {"kind""Ptr","child":{"kind":"Void"}},
    DomainName: Windows.Win32.Security.UNICODE_STRING,
    DnsDomainName: Windows.Win32.Security.UNICODE_STRING,
    DomainGuid: Guid,
};
// --------------------------------------------------------
// Type: SECPKG_EXTENDED_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SECPKG_EXTENDED_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: SECPKG_GSS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_GSS_INFO = extern struct {
    EncodedIdLength: {"kind":"UInt32"},
    EncodedId: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SECPKG_CONTEXT_THUNKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_CONTEXT_THUNKS = extern struct {
    InfoLevelCount: {"kind":"UInt32"},
    Levels: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: SECPKG_MUTUAL_AUTH_LEVEL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_MUTUAL_AUTH_LEVEL = extern struct {
    MutualAuthLevel: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SECPKG_WOW_CLIENT_DLL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_WOW_CLIENT_DLL = extern struct {
    WowClientDllPath: Windows.Win32.Security.UNICODE_STRING,
};
// --------------------------------------------------------
// Type: SECPKG_SERIALIZED_OID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_SERIALIZED_OID = extern struct {
    OidLength: {"kind":"UInt32"},
    OidAttributes: {"kind":"UInt32"},
    OidValue: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SECPKG_EXTRA_OIDS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_EXTRA_OIDS = extern struct {
    OidCount: {"kind":"UInt32"},
    Oids: {"kind":"Array","child": Windows.Win32.Security.SECPKG_SERIALIZED_OID},
};
// --------------------------------------------------------
// Type: SECPKG_NEGO2_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_NEGO2_INFO = extern struct {
    AuthScheme: {"kind":"Array","child": {"kind":"Byte"}},
    PackageFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SECPKG_EXTENDED_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_EXTENDED_INFORMATION = extern struct {
    Class: Windows.Win32.Security.SECPKG_EXTENDED_INFORMATION_CLASS,
    Info: Windows.Win32.Security.SECPKG_EXTENDED_INFORMATION+_Info_e__Union,
    // --------------------------------------------------------
    // Type: _Info_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Info_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: SECPKG_TARGETINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_TARGETINFO = extern struct {
    DomainSid: {"kind""Ptr","child":{"kind":"Void"}},
    ComputerName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SecPkgContext_SaslContext
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_SaslContext = extern struct {
    SaslContext: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: SECURITY_USER_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECURITY_USER_DATA = extern struct {
    UserName: Windows.Win32.Security.UNICODE_STRING,
    LogonDomainName: Windows.Win32.Security.UNICODE_STRING,
    LogonServer: Windows.Win32.Security.UNICODE_STRING,
    pSid: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: SECPKG_CALL_PACKAGE_MESSAGE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SECPKG_CALL_PACKAGE_MESSAGE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: SECPKG_CALL_PACKAGE_PIN_DC_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_CALL_PACKAGE_PIN_DC_REQUEST = extern struct {
    MessageType: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    DomainName: Windows.Win32.Security.UNICODE_STRING,
    DcName: Windows.Win32.Security.UNICODE_STRING,
    DcFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SECPKG_CALL_PACKAGE_UNPIN_ALL_DCS_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_CALL_PACKAGE_UNPIN_ALL_DCS_REQUEST = extern struct {
    MessageType: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SECPKG_CALL_PACKAGE_TRANSFER_CRED_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_CALL_PACKAGE_TRANSFER_CRED_REQUEST = extern struct {
    MessageType: {"kind":"UInt32"},
    OriginLogonId: Windows.Win32.Kernel.LUID,
    DestinationLogonId: Windows.Win32.Kernel.LUID,
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: LSA_REDIRECTED_LOGON_INIT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_REDIRECTED_LOGON_INIT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_REDIRECTED_LOGON_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_REDIRECTED_LOGON_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_REDIRECTED_LOGON_CLEANUP_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_REDIRECTED_LOGON_CLEANUP_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_REDIRECTED_LOGON_GET_LOGON_CREDS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_REDIRECTED_LOGON_GET_LOGON_CREDS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_REDIRECTED_LOGON_GET_SUPP_CREDS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_REDIRECTED_LOGON_GET_SUPP_CREDS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_REDIRECTED_LOGON_INIT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_REDIRECTED_LOGON_INIT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_REDIRECTED_LOGON_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_REDIRECTED_LOGON_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_REDIRECTED_LOGON_GET_LOGON_CREDS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_REDIRECTED_LOGON_GET_LOGON_CREDS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_REDIRECTED_LOGON_GET_SUPP_CREDS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_REDIRECTED_LOGON_GET_SUPP_CREDS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_REDIRECTED_LOGON_CLEANUP_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_REDIRECTED_LOGON_CLEANUP_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SECPKG_REDIRECTED_LOGON_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_REDIRECTED_LOGON_BUFFER = extern struct {
    RedirectedLogonGuid: Guid,
    RedirectedLogonHandle: Windows.Win32.SystemServices.HANDLE,
    Init: Windows.Win32.Security.PLSA_REDIRECTED_LOGON_INIT,
    Callback: Windows.Win32.Security.PLSA_REDIRECTED_LOGON_CALLBACK,
    CleanupCallback: Windows.Win32.Security.PLSA_REDIRECTED_LOGON_CLEANUP_CALLBACK,
    GetLogonCreds: Windows.Win32.Security.PLSA_REDIRECTED_LOGON_GET_LOGON_CREDS,
    GetSupplementalCreds: Windows.Win32.Security.PLSA_REDIRECTED_LOGON_GET_SUPP_CREDS,
};
// --------------------------------------------------------
// Type: SECPKG_POST_LOGON_USER_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_POST_LOGON_USER_INFO = extern struct {
    Flags: {"kind":"UInt32"},
    LogonId: Windows.Win32.Kernel.LUID,
    LinkedLogonId: Windows.Win32.Kernel.LUID,
};
// --------------------------------------------------------
// Type: LSA_IMPERSONATE_CLIENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_IMPERSONATE_CLIENT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_UNLOAD_PACKAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_UNLOAD_PACKAGE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_DUPLICATE_HANDLE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_DUPLICATE_HANDLE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_SAVE_SUPPLEMENTAL_CREDENTIALS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_SAVE_SUPPLEMENTAL_CREDENTIALS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_CREATE_THREAD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_CREATE_THREAD = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_GET_CLIENT_INFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_GET_CLIENT_INFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_REGISTER_NOTIFICATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_REGISTER_NOTIFICATION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_CANCEL_NOTIFICATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_CANCEL_NOTIFICATION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_MAP_BUFFER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_MAP_BUFFER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_CREATE_TOKEN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_CREATE_TOKEN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SECPKG_SESSIONINFO_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SECPKG_SESSIONINFO_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: LSA_CREATE_TOKEN_EX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_CREATE_TOKEN_EX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_AUDIT_LOGON
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_AUDIT_LOGON = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_CALL_PACKAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_CALL_PACKAGE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_CALL_PACKAGEEX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_CALL_PACKAGEEX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_CALL_PACKAGE_PASSTHROUGH
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_CALL_PACKAGE_PASSTHROUGH = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_GET_CALL_INFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_GET_CALL_INFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_CREATE_SHARED_MEMORY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_CREATE_SHARED_MEMORY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_ALLOCATE_SHARED_MEMORY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_ALLOCATE_SHARED_MEMORY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_FREE_SHARED_MEMORY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_FREE_SHARED_MEMORY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_DELETE_SHARED_MEMORY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_DELETE_SHARED_MEMORY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_GET_APP_MODE_INFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_GET_APP_MODE_INFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_SET_APP_MODE_INFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_SET_APP_MODE_INFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SECPKG_NAME_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SECPKG_NAME_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: LSA_OPEN_SAM_USER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_OPEN_SAM_USER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_GET_USER_CREDENTIALS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_GET_USER_CREDENTIALS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_GET_USER_AUTH_DATA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_GET_USER_AUTH_DATA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_CLOSE_SAM_USER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_CLOSE_SAM_USER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_GET_AUTH_DATA_FOR_USER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_GET_AUTH_DATA_FOR_USER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_CONVERT_AUTH_DATA_TO_TOKEN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_CONVERT_AUTH_DATA_TO_TOKEN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_CRACK_SINGLE_NAME
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_CRACK_SINGLE_NAME = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_AUDIT_ACCOUNT_LOGON
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_AUDIT_ACCOUNT_LOGON = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_CLIENT_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_CLIENT_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_REGISTER_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_REGISTER_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_GET_EXTENDED_CALL_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_GET_EXTENDED_CALL_FLAGS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SECPKG_EVENT_PACKAGE_CHANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_EVENT_PACKAGE_CHANGE = extern struct {
    ChangeType: {"kind":"UInt32"},
    PackageId: {"kind":"UIntPtr"},
    PackageName: Windows.Win32.Security.UNICODE_STRING,
};
// --------------------------------------------------------
// Type: SECPKG_EVENT_ROLE_CHANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_EVENT_ROLE_CHANGE = extern struct {
    PreviousRole: {"kind":"UInt32"},
    NewRole: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SECPKG_EVENT_NOTIFY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_EVENT_NOTIFY = extern struct {
    EventClass: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
    EventDataSize: {"kind":"UInt32"},
    EventData: {"kind""Ptr","child":{"kind":"Void"}},
    PackageParameter: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: LSA_UPDATE_PRIMARY_CREDENTIALS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_UPDATE_PRIMARY_CREDENTIALS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_PROTECT_MEMORY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_PROTECT_MEMORY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_OPEN_TOKEN_BY_LOGON_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_OPEN_TOKEN_BY_LOGON_ID = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_EXPAND_AUTH_DATA_FOR_DOMAIN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_EXPAND_AUTH_DATA_FOR_DOMAIN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRED_FETCH
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CRED_FETCH = *opaque{
};
// --------------------------------------------------------
// Type: LSA_GET_SERVICE_ACCOUNT_PASSWORD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_GET_SERVICE_ACCOUNT_PASSWORD = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_AUDIT_LOGON_EX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_AUDIT_LOGON_EX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_CHECK_PROTECTED_USER_BY_TOKEN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_CHECK_PROTECTED_USER_BY_TOKEN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_QUERY_CLIENT_REQUEST
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_QUERY_CLIENT_REQUEST = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_IMPERSONATE_CLIENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_IMPERSONATE_CLIENT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_UNLOAD_PACKAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_UNLOAD_PACKAGE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_DUPLICATE_HANDLE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_DUPLICATE_HANDLE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_SAVE_SUPPLEMENTAL_CREDENTIALS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_SAVE_SUPPLEMENTAL_CREDENTIALS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_CREATE_THREAD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_CREATE_THREAD = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_GET_CLIENT_INFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_GET_CLIENT_INFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_REGISTER_NOTIFICATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_REGISTER_NOTIFICATION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_CANCEL_NOTIFICATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_CANCEL_NOTIFICATION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_MAP_BUFFER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_MAP_BUFFER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_CREATE_TOKEN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_CREATE_TOKEN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_AUDIT_LOGON
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_AUDIT_LOGON = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_CALL_PACKAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_CALL_PACKAGE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_CALL_PACKAGEEX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_CALL_PACKAGEEX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_GET_CALL_INFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_GET_CALL_INFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_CREATE_SHARED_MEMORY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_CREATE_SHARED_MEMORY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_ALLOCATE_SHARED_MEMORY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_ALLOCATE_SHARED_MEMORY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_FREE_SHARED_MEMORY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_FREE_SHARED_MEMORY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_DELETE_SHARED_MEMORY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_DELETE_SHARED_MEMORY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_OPEN_SAM_USER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_OPEN_SAM_USER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_GET_USER_CREDENTIALS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_GET_USER_CREDENTIALS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_GET_USER_AUTH_DATA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_GET_USER_AUTH_DATA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_CLOSE_SAM_USER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_CLOSE_SAM_USER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_CONVERT_AUTH_DATA_TO_TOKEN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_CONVERT_AUTH_DATA_TO_TOKEN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_CLIENT_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_CLIENT_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_REGISTER_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_REGISTER_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_UPDATE_PRIMARY_CREDENTIALS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_UPDATE_PRIMARY_CREDENTIALS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_GET_AUTH_DATA_FOR_USER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_GET_AUTH_DATA_FOR_USER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_CRACK_SINGLE_NAME
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_CRACK_SINGLE_NAME = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_AUDIT_ACCOUNT_LOGON
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_AUDIT_ACCOUNT_LOGON = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_CALL_PACKAGE_PASSTHROUGH
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_CALL_PACKAGE_PASSTHROUGH = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_PROTECT_MEMORY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_PROTECT_MEMORY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_OPEN_TOKEN_BY_LOGON_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_OPEN_TOKEN_BY_LOGON_ID = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_EXPAND_AUTH_DATA_FOR_DOMAIN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_EXPAND_AUTH_DATA_FOR_DOMAIN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_CREATE_TOKEN_EX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_CREATE_TOKEN_EX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_GET_EXTENDED_CALL_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_GET_EXTENDED_CALL_FLAGS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_GET_SERVICE_ACCOUNT_PASSWORD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_GET_SERVICE_ACCOUNT_PASSWORD = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_AUDIT_LOGON_EX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_AUDIT_LOGON_EX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_CHECK_PROTECTED_USER_BY_TOKEN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_CHECK_PROTECTED_USER_BY_TOKEN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_QUERY_CLIENT_REQUEST
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_QUERY_CLIENT_REQUEST = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_GET_APP_MODE_INFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_GET_APP_MODE_INFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_SET_APP_MODE_INFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_SET_APP_MODE_INFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ENCRYPTED_CREDENTIALW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENCRYPTED_CREDENTIALW = extern struct {
    Cred: Windows.Win32.Security.CREDENTIALW,
    ClearCredentialBlobSize: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CredReadFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CredReadFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CredReadDomainCredentialsFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CredReadDomainCredentialsFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CredFreeCredentialsFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CredFreeCredentialsFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CredWriteFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CredWriteFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CrediUnmarshalandDecodeStringFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CrediUnmarshalandDecodeStringFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SEC_WINNT_AUTH_IDENTITY32
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_WINNT_AUTH_IDENTITY32 = extern struct {
    User: {"kind":"UInt32"},
    UserLength: {"kind":"UInt32"},
    Domain: {"kind":"UInt32"},
    DomainLength: {"kind":"UInt32"},
    Password: {"kind":"UInt32"},
    PasswordLength: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SEC_WINNT_AUTH_IDENTITY_EX32
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_WINNT_AUTH_IDENTITY_EX32 = extern struct {
    Version: {"kind":"UInt32"},
    Length: {"kind":"UInt32"},
    User: {"kind":"UInt32"},
    UserLength: {"kind":"UInt32"},
    Domain: {"kind":"UInt32"},
    DomainLength: {"kind":"UInt32"},
    Password: {"kind":"UInt32"},
    PasswordLength: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    PackageList: {"kind":"UInt32"},
    PackageListLength: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: LSA_SECPKG_FUNCTION_TABLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_SECPKG_FUNCTION_TABLE = extern struct {
    CreateLogonSession: Windows.Win32.Security.PLSA_CREATE_LOGON_SESSION,
    DeleteLogonSession: Windows.Win32.Security.PLSA_DELETE_LOGON_SESSION,
    AddCredential: Windows.Win32.Security.PLSA_ADD_CREDENTIAL,
    GetCredentials: Windows.Win32.Security.PLSA_GET_CREDENTIALS,
    DeleteCredential: Windows.Win32.Security.PLSA_DELETE_CREDENTIAL,
    AllocateLsaHeap: Windows.Win32.Security.PLSA_ALLOCATE_LSA_HEAP,
    FreeLsaHeap: Windows.Win32.Security.PLSA_FREE_LSA_HEAP,
    AllocateClientBuffer: Windows.Win32.Security.PLSA_ALLOCATE_CLIENT_BUFFER,
    FreeClientBuffer: Windows.Win32.Security.PLSA_FREE_CLIENT_BUFFER,
    CopyToClientBuffer: Windows.Win32.Security.PLSA_COPY_TO_CLIENT_BUFFER,
    CopyFromClientBuffer: Windows.Win32.Security.PLSA_COPY_FROM_CLIENT_BUFFER,
    ImpersonateClient: Windows.Win32.Security.PLSA_IMPERSONATE_CLIENT,
    UnloadPackage: Windows.Win32.Security.PLSA_UNLOAD_PACKAGE,
    DuplicateHandle: Windows.Win32.Security.PLSA_DUPLICATE_HANDLE,
    SaveSupplementalCredentials: Windows.Win32.Security.PLSA_SAVE_SUPPLEMENTAL_CREDENTIALS,
    CreateThread: Windows.Win32.Security.PLSA_CREATE_THREAD,
    GetClientInfo: Windows.Win32.Security.PLSA_GET_CLIENT_INFO,
    RegisterNotification: Windows.Win32.Security.PLSA_REGISTER_NOTIFICATION,
    CancelNotification: Windows.Win32.Security.PLSA_CANCEL_NOTIFICATION,
    MapBuffer: Windows.Win32.Security.PLSA_MAP_BUFFER,
    CreateToken: Windows.Win32.Security.PLSA_CREATE_TOKEN,
    AuditLogon: Windows.Win32.Security.PLSA_AUDIT_LOGON,
    CallPackage: Windows.Win32.Security.PLSA_CALL_PACKAGE,
    FreeReturnBuffer: Windows.Win32.Security.PLSA_FREE_LSA_HEAP,
    GetCallInfo: Windows.Win32.Security.PLSA_GET_CALL_INFO,
    CallPackageEx: Windows.Win32.Security.PLSA_CALL_PACKAGEEX,
    CreateSharedMemory: Windows.Win32.Security.PLSA_CREATE_SHARED_MEMORY,
    AllocateSharedMemory: Windows.Win32.Security.PLSA_ALLOCATE_SHARED_MEMORY,
    FreeSharedMemory: Windows.Win32.Security.PLSA_FREE_SHARED_MEMORY,
    DeleteSharedMemory: Windows.Win32.Security.PLSA_DELETE_SHARED_MEMORY,
    OpenSamUser: Windows.Win32.Security.PLSA_OPEN_SAM_USER,
    GetUserCredentials: Windows.Win32.Security.PLSA_GET_USER_CREDENTIALS,
    GetUserAuthData: Windows.Win32.Security.PLSA_GET_USER_AUTH_DATA,
    CloseSamUser: Windows.Win32.Security.PLSA_CLOSE_SAM_USER,
    ConvertAuthDataToToken: Windows.Win32.Security.PLSA_CONVERT_AUTH_DATA_TO_TOKEN,
    ClientCallback: Windows.Win32.Security.PLSA_CLIENT_CALLBACK,
    UpdateCredentials: Windows.Win32.Security.PLSA_UPDATE_PRIMARY_CREDENTIALS,
    GetAuthDataForUser: Windows.Win32.Security.PLSA_GET_AUTH_DATA_FOR_USER,
    CrackSingleName: Windows.Win32.Security.PLSA_CRACK_SINGLE_NAME,
    AuditAccountLogon: Windows.Win32.Security.PLSA_AUDIT_ACCOUNT_LOGON,
    CallPackagePassthrough: Windows.Win32.Security.PLSA_CALL_PACKAGE_PASSTHROUGH,
    CrediRead: {"kind""Ptr","child":Windows.Win32.Security.CredReadFn},
    CrediReadDomainCredentials: {"kind""Ptr","child":Windows.Win32.Security.CredReadDomainCredentialsFn},
    CrediFreeCredentials: {"kind""Ptr","child":Windows.Win32.Security.CredFreeCredentialsFn},
    LsaProtectMemory: Windows.Win32.Security.PLSA_PROTECT_MEMORY,
    LsaUnprotectMemory: Windows.Win32.Security.PLSA_PROTECT_MEMORY,
    OpenTokenByLogonId: Windows.Win32.Security.PLSA_OPEN_TOKEN_BY_LOGON_ID,
    ExpandAuthDataForDomain: Windows.Win32.Security.PLSA_EXPAND_AUTH_DATA_FOR_DOMAIN,
    AllocatePrivateHeap: Windows.Win32.Security.PLSA_ALLOCATE_PRIVATE_HEAP,
    FreePrivateHeap: Windows.Win32.Security.PLSA_FREE_PRIVATE_HEAP,
    CreateTokenEx: Windows.Win32.Security.PLSA_CREATE_TOKEN_EX,
    CrediWrite: {"kind""Ptr","child":Windows.Win32.Security.CredWriteFn},
    CrediUnmarshalandDecodeString: {"kind""Ptr","child":Windows.Win32.Security.CrediUnmarshalandDecodeStringFn},
    DummyFunction6: Windows.Win32.Security.PLSA_PROTECT_MEMORY,
    GetExtendedCallFlags: Windows.Win32.Security.PLSA_GET_EXTENDED_CALL_FLAGS,
    DuplicateTokenHandle: Windows.Win32.Security.PLSA_DUPLICATE_HANDLE,
    GetServiceAccountPassword: Windows.Win32.Security.PLSA_GET_SERVICE_ACCOUNT_PASSWORD,
    DummyFunction7: Windows.Win32.Security.PLSA_PROTECT_MEMORY,
    AuditLogonEx: Windows.Win32.Security.PLSA_AUDIT_LOGON_EX,
    CheckProtectedUserByToken: Windows.Win32.Security.PLSA_CHECK_PROTECTED_USER_BY_TOKEN,
    QueryClientRequest: Windows.Win32.Security.PLSA_QUERY_CLIENT_REQUEST,
    GetAppModeInfo: Windows.Win32.Security.PLSA_GET_APP_MODE_INFO,
    SetAppModeInfo: Windows.Win32.Security.PLSA_SET_APP_MODE_INFO,
};
// --------------------------------------------------------
// Type: LSA_LOCATE_PKG_BY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_LOCATE_PKG_BY_ID = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_LOCATE_PKG_BY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_LOCATE_PKG_BY_ID = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SECPKG_DLL_FUNCTIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_DLL_FUNCTIONS = extern struct {
    AllocateHeap: Windows.Win32.Security.PLSA_ALLOCATE_LSA_HEAP,
    FreeHeap: Windows.Win32.Security.PLSA_FREE_LSA_HEAP,
    RegisterCallback: Windows.Win32.Security.PLSA_REGISTER_CALLBACK,
    LocatePackageById: Windows.Win32.Security.PLSA_LOCATE_PKG_BY_ID,
};
// --------------------------------------------------------
// Type: SpInitializeFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpInitializeFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpShutdownFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpShutdownFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpGetInfoFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpGetInfoFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpGetExtendedInformationFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpGetExtendedInformationFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpSetExtendedInformationFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpSetExtendedInformationFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_AP_LOGON_USER_EX2
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_AP_LOGON_USER_EX2 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_AP_LOGON_USER_EX2
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_AP_LOGON_USER_EX2 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_AP_LOGON_USER_EX3
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_AP_LOGON_USER_EX3 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_AP_LOGON_USER_EX3
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_AP_LOGON_USER_EX3 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_AP_PRE_LOGON_USER_SURROGATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_AP_PRE_LOGON_USER_SURROGATE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_AP_PRE_LOGON_USER_SURROGATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_AP_PRE_LOGON_USER_SURROGATE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_AP_POST_LOGON_USER_SURROGATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_AP_POST_LOGON_USER_SURROGATE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_AP_POST_LOGON_USER_SURROGATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_AP_POST_LOGON_USER_SURROGATE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpAcceptCredentialsFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpAcceptCredentialsFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpAcquireCredentialsHandleFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpAcquireCredentialsHandleFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpFreeCredentialsHandleFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpFreeCredentialsHandleFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpQueryCredentialsAttributesFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpQueryCredentialsAttributesFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpSetCredentialsAttributesFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpSetCredentialsAttributesFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpAddCredentialsFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpAddCredentialsFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpSaveCredentialsFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpSaveCredentialsFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpGetCredentialsFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpGetCredentialsFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpDeleteCredentialsFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpDeleteCredentialsFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpInitLsaModeContextFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpInitLsaModeContextFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpDeleteContextFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpDeleteContextFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpApplyControlTokenFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpApplyControlTokenFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpAcceptLsaModeContextFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpAcceptLsaModeContextFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpGetUserInfoFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpGetUserInfoFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpQueryContextAttributesFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpQueryContextAttributesFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpSetContextAttributesFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpSetContextAttributesFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpChangeAccountPasswordFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpChangeAccountPasswordFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpQueryMetaDataFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpQueryMetaDataFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpExchangeMetaDataFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpExchangeMetaDataFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpGetCredUIContextFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpGetCredUIContextFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpUpdateCredentialsFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpUpdateCredentialsFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpValidateTargetInfoFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpValidateTargetInfoFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_AP_POST_LOGON_USER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_AP_POST_LOGON_USER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpGetRemoteCredGuardLogonBufferFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpGetRemoteCredGuardLogonBufferFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpGetRemoteCredGuardSupplementalCredsFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpGetRemoteCredGuardSupplementalCredsFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpGetTbalSupplementalCredsFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpGetTbalSupplementalCredsFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SECPKG_FUNCTION_TABLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_FUNCTION_TABLE = extern struct {
    InitializePackage: Windows.Win32.Security.PLSA_AP_INITIALIZE_PACKAGE,
    LogonUserA: Windows.Win32.Security.PLSA_AP_LOGON_USER,
    CallPackage: Windows.Win32.Security.PLSA_AP_CALL_PACKAGE,
    LogonTerminated: Windows.Win32.Security.PLSA_AP_LOGON_TERMINATED,
    CallPackageUntrusted: Windows.Win32.Security.PLSA_AP_CALL_PACKAGE_UNTRUSTED,
    CallPackagePassthrough: Windows.Win32.Security.PLSA_AP_CALL_PACKAGE_PASSTHROUGH,
    LogonUserExA: Windows.Win32.Security.PLSA_AP_LOGON_USER_EX,
    LogonUserEx2: Windows.Win32.Security.PLSA_AP_LOGON_USER_EX2,
    Initialize: {"kind""Ptr","child":Windows.Win32.Security.SpInitializeFn},
    Shutdown: {"kind""Ptr","child":Windows.Win32.Security.SpShutdownFn},
    GetInfo: {"kind""Ptr","child":Windows.Win32.Security.SpGetInfoFn},
    AcceptCredentials: {"kind""Ptr","child":Windows.Win32.Security.SpAcceptCredentialsFn},
    AcquireCredentialsHandleA: {"kind""Ptr","child":Windows.Win32.Security.SpAcquireCredentialsHandleFn},
    QueryCredentialsAttributesA: {"kind""Ptr","child":Windows.Win32.Security.SpQueryCredentialsAttributesFn},
    FreeCredentialsHandle: {"kind""Ptr","child":Windows.Win32.Security.SpFreeCredentialsHandleFn},
    SaveCredentials: {"kind""Ptr","child":Windows.Win32.Security.SpSaveCredentialsFn},
    GetCredentials: {"kind""Ptr","child":Windows.Win32.Security.SpGetCredentialsFn},
    DeleteCredentials: {"kind""Ptr","child":Windows.Win32.Security.SpDeleteCredentialsFn},
    InitLsaModeContext: {"kind""Ptr","child":Windows.Win32.Security.SpInitLsaModeContextFn},
    AcceptLsaModeContext: {"kind""Ptr","child":Windows.Win32.Security.SpAcceptLsaModeContextFn},
    DeleteContext: {"kind""Ptr","child":Windows.Win32.Security.SpDeleteContextFn},
    ApplyControlToken: {"kind""Ptr","child":Windows.Win32.Security.SpApplyControlTokenFn},
    GetUserInfo: {"kind""Ptr","child":Windows.Win32.Security.SpGetUserInfoFn},
    GetExtendedInformation: {"kind""Ptr","child":Windows.Win32.Security.SpGetExtendedInformationFn},
    QueryContextAttributesA: {"kind""Ptr","child":Windows.Win32.Security.SpQueryContextAttributesFn},
    AddCredentialsA: {"kind""Ptr","child":Windows.Win32.Security.SpAddCredentialsFn},
    SetExtendedInformation: {"kind""Ptr","child":Windows.Win32.Security.SpSetExtendedInformationFn},
    SetContextAttributesA: {"kind""Ptr","child":Windows.Win32.Security.SpSetContextAttributesFn},
    SetCredentialsAttributesA: {"kind""Ptr","child":Windows.Win32.Security.SpSetCredentialsAttributesFn},
    ChangeAccountPasswordA: {"kind""Ptr","child":Windows.Win32.Security.SpChangeAccountPasswordFn},
    QueryMetaData: {"kind""Ptr","child":Windows.Win32.Security.SpQueryMetaDataFn},
    ExchangeMetaData: {"kind""Ptr","child":Windows.Win32.Security.SpExchangeMetaDataFn},
    GetCredUIContext: {"kind""Ptr","child":Windows.Win32.Security.SpGetCredUIContextFn},
    UpdateCredentials: {"kind""Ptr","child":Windows.Win32.Security.SpUpdateCredentialsFn},
    ValidateTargetInfo: {"kind""Ptr","child":Windows.Win32.Security.SpValidateTargetInfoFn},
    PostLogonUser: {"kind""Ptr","child":Windows.Win32.Security.LSA_AP_POST_LOGON_USER},
    GetRemoteCredGuardLogonBuffer: {"kind""Ptr","child":Windows.Win32.Security.SpGetRemoteCredGuardLogonBufferFn},
    GetRemoteCredGuardSupplementalCreds: {"kind""Ptr","child":Windows.Win32.Security.SpGetRemoteCredGuardSupplementalCredsFn},
    GetTbalSupplementalCreds: {"kind""Ptr","child":Windows.Win32.Security.SpGetTbalSupplementalCredsFn},
    LogonUserEx3: Windows.Win32.Security.PLSA_AP_LOGON_USER_EX3,
    PreLogonUserSurrogate: Windows.Win32.Security.PLSA_AP_PRE_LOGON_USER_SURROGATE,
    PostLogonUserSurrogate: Windows.Win32.Security.PLSA_AP_POST_LOGON_USER_SURROGATE,
};
// --------------------------------------------------------
// Type: SpInstanceInitFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpInstanceInitFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpInitUserModeContextFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpInitUserModeContextFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpMakeSignatureFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpMakeSignatureFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpVerifySignatureFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpVerifySignatureFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpSealMessageFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpSealMessageFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpUnsealMessageFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpUnsealMessageFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpGetContextTokenFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpGetContextTokenFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpExportSecurityContextFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpExportSecurityContextFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpImportSecurityContextFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpImportSecurityContextFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpCompleteAuthTokenFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpCompleteAuthTokenFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpFormatCredentialsFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpFormatCredentialsFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpMarshallSupplementalCredsFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpMarshallSupplementalCredsFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SECPKG_USER_FUNCTION_TABLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_USER_FUNCTION_TABLE = extern struct {
    InstanceInit: {"kind""Ptr","child":Windows.Win32.Security.SpInstanceInitFn},
    InitUserModeContext: {"kind""Ptr","child":Windows.Win32.Security.SpInitUserModeContextFn},
    MakeSignature: {"kind""Ptr","child":Windows.Win32.Security.SpMakeSignatureFn},
    VerifySignature: {"kind""Ptr","child":Windows.Win32.Security.SpVerifySignatureFn},
    SealMessage: {"kind""Ptr","child":Windows.Win32.Security.SpSealMessageFn},
    UnsealMessage: {"kind""Ptr","child":Windows.Win32.Security.SpUnsealMessageFn},
    GetContextToken: {"kind""Ptr","child":Windows.Win32.Security.SpGetContextTokenFn},
    QueryContextAttributesA: {"kind""Ptr","child":Windows.Win32.Security.SpQueryContextAttributesFn},
    CompleteAuthToken: {"kind""Ptr","child":Windows.Win32.Security.SpCompleteAuthTokenFn},
    DeleteUserModeContext: {"kind""Ptr","child":Windows.Win32.Security.SpDeleteContextFn},
    FormatCredentials: {"kind""Ptr","child":Windows.Win32.Security.SpFormatCredentialsFn},
    MarshallSupplementalCreds: {"kind""Ptr","child":Windows.Win32.Security.SpMarshallSupplementalCredsFn},
    ExportContext: {"kind""Ptr","child":Windows.Win32.Security.SpExportSecurityContextFn},
    ImportContext: {"kind""Ptr","child":Windows.Win32.Security.SpImportSecurityContextFn},
};
// --------------------------------------------------------
// Type: SpLsaModeInitializeFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpLsaModeInitializeFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpUserModeInitializeFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpUserModeInitializeFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KSEC_CONTEXT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KSEC_CONTEXT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: KSEC_LIST_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KSEC_LIST_ENTRY = extern struct {
    List: Windows.Win32.Kernel.LIST_ENTRY,
    RefCount: {"kind":"Int32"},
    Signature: {"kind":"UInt32"},
    OwningList: {"kind""Ptr","child":{"kind":"Void"}},
    Reserved: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: KSEC_CREATE_CONTEXT_LIST
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KSEC_CREATE_CONTEXT_LIST = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KSEC_INSERT_LIST_ENTRY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KSEC_INSERT_LIST_ENTRY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KSEC_REFERENCE_LIST_ENTRY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KSEC_REFERENCE_LIST_ENTRY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KSEC_DEREFERENCE_LIST_ENTRY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KSEC_DEREFERENCE_LIST_ENTRY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KSEC_SERIALIZE_WINNT_AUTH_DATA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KSEC_SERIALIZE_WINNT_AUTH_DATA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KSEC_SERIALIZE_SCHANNEL_AUTH_DATA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KSEC_SERIALIZE_SCHANNEL_AUTH_DATA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PKSEC_CREATE_CONTEXT_LIST
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PKSEC_CREATE_CONTEXT_LIST = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PKSEC_INSERT_LIST_ENTRY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PKSEC_INSERT_LIST_ENTRY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PKSEC_REFERENCE_LIST_ENTRY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PKSEC_REFERENCE_LIST_ENTRY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PKSEC_DEREFERENCE_LIST_ENTRY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PKSEC_DEREFERENCE_LIST_ENTRY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PKSEC_SERIALIZE_WINNT_AUTH_DATA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PKSEC_SERIALIZE_WINNT_AUTH_DATA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PKSEC_SERIALIZE_SCHANNEL_AUTH_DATA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PKSEC_SERIALIZE_SCHANNEL_AUTH_DATA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KSEC_LOCATE_PKG_BY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KSEC_LOCATE_PKG_BY_ID = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PKSEC_LOCATE_PKG_BY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PKSEC_LOCATE_PKG_BY_ID = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SECPKG_KERNEL_FUNCTIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_KERNEL_FUNCTIONS = extern struct {
    AllocateHeap: Windows.Win32.Security.PLSA_ALLOCATE_LSA_HEAP,
    FreeHeap: Windows.Win32.Security.PLSA_FREE_LSA_HEAP,
    CreateContextList: Windows.Win32.Security.PKSEC_CREATE_CONTEXT_LIST,
    InsertListEntry: Windows.Win32.Security.PKSEC_INSERT_LIST_ENTRY,
    ReferenceListEntry: Windows.Win32.Security.PKSEC_REFERENCE_LIST_ENTRY,
    DereferenceListEntry: Windows.Win32.Security.PKSEC_DEREFERENCE_LIST_ENTRY,
    SerializeWinntAuthData: Windows.Win32.Security.PKSEC_SERIALIZE_WINNT_AUTH_DATA,
    SerializeSchannelAuthData: Windows.Win32.Security.PKSEC_SERIALIZE_SCHANNEL_AUTH_DATA,
    LocatePackageById: Windows.Win32.Security.PKSEC_LOCATE_PKG_BY_ID,
};
// --------------------------------------------------------
// Type: KspInitPackageFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KspInitPackageFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KspDeleteContextFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KspDeleteContextFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KspInitContextFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KspInitContextFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KspMakeSignatureFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KspMakeSignatureFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KspVerifySignatureFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KspVerifySignatureFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KspSealMessageFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KspSealMessageFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KspUnsealMessageFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KspUnsealMessageFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KspGetTokenFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KspGetTokenFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KspQueryAttributesFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KspQueryAttributesFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KspCompleteTokenFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KspCompleteTokenFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KspMapHandleFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KspMapHandleFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KspSetPagingModeFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KspSetPagingModeFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KspSerializeAuthDataFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KspSerializeAuthDataFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SECPKG_KERNEL_FUNCTION_TABLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_KERNEL_FUNCTION_TABLE = extern struct {
    Initialize: {"kind""Ptr","child":Windows.Win32.Security.KspInitPackageFn},
    DeleteContext: {"kind""Ptr","child":Windows.Win32.Security.KspDeleteContextFn},
    InitContext: {"kind""Ptr","child":Windows.Win32.Security.KspInitContextFn},
    MapHandle: {"kind""Ptr","child":Windows.Win32.Security.KspMapHandleFn},
    Sign: {"kind""Ptr","child":Windows.Win32.Security.KspMakeSignatureFn},
    Verify: {"kind""Ptr","child":Windows.Win32.Security.KspVerifySignatureFn},
    Seal: {"kind""Ptr","child":Windows.Win32.Security.KspSealMessageFn},
    Unseal: {"kind""Ptr","child":Windows.Win32.Security.KspUnsealMessageFn},
    GetToken: {"kind""Ptr","child":Windows.Win32.Security.KspGetTokenFn},
    QueryAttributes: {"kind""Ptr","child":Windows.Win32.Security.KspQueryAttributesFn},
    CompleteToken: {"kind""Ptr","child":Windows.Win32.Security.KspCompleteTokenFn},
    ExportContext: {"kind""Ptr","child":Windows.Win32.Security.SpExportSecurityContextFn},
    ImportContext: {"kind""Ptr","child":Windows.Win32.Security.SpImportSecurityContextFn},
    SetPackagePagingMode: {"kind""Ptr","child":Windows.Win32.Security.KspSetPagingModeFn},
    SerializeAuthData: {"kind""Ptr","child":Windows.Win32.Security.KspSerializeAuthDataFn},
};
// --------------------------------------------------------
// Type: SecPkgCred_SupportedAlgs
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgCred_SupportedAlgs = extern struct {
    cSupportedAlgs: {"kind":"UInt32"},
    palgSupportedAlgs: {"kind""Ptr","child":{"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: SecPkgCred_CipherStrengths
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgCred_CipherStrengths = extern struct {
    dwMinimumCipherStrength: {"kind":"UInt32"},
    dwMaximumCipherStrength: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SecPkgCred_SupportedProtocols
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgCred_SupportedProtocols = extern struct {
    grbitProtocol: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SecPkgCred_ClientCertPolicy
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgCred_ClientCertPolicy = extern struct {
    dwFlags: {"kind":"UInt32"},
    guidPolicyId: Guid,
    dwCertFlags: {"kind":"UInt32"},
    dwUrlRetrievalTimeout: {"kind":"UInt32"},
    fCheckRevocationFreshnessTime: Windows.Win32.SystemServices.BOOL,
    dwRevocationFreshnessTime: {"kind":"UInt32"},
    fOmitUsageCheck: Windows.Win32.SystemServices.BOOL,
    pwszSslCtlStoreName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszSslCtlIdentifier: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: eTlsSignatureAlgorithm
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const eTlsSignatureAlgorithm = *opaque{
};
// --------------------------------------------------------
// Type: eTlsHashAlgorithm
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const eTlsHashAlgorithm = *opaque{
};
// --------------------------------------------------------
// Type: SecPkgContext_RemoteCredentialInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_RemoteCredentialInfo = extern struct {
    cbCertificateChain: {"kind":"UInt32"},
    pbCertificateChain: {"kind""Ptr","child":{"kind":"Byte"}},
    cCertificates: {"kind":"UInt32"},
    fFlags: {"kind":"UInt32"},
    dwBits: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SecPkgContext_LocalCredentialInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_LocalCredentialInfo = extern struct {
    cbCertificateChain: {"kind":"UInt32"},
    pbCertificateChain: {"kind""Ptr","child":{"kind":"Byte"}},
    cCertificates: {"kind":"UInt32"},
    fFlags: {"kind":"UInt32"},
    dwBits: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SecPkgContext_ClientCertPolicyResult
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_ClientCertPolicyResult = extern struct {
    dwPolicyResult: Windows.Win32.Com.HRESULT,
    guidPolicyId: Guid,
};
// --------------------------------------------------------
// Type: SecPkgContext_IssuerListInfoEx
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_IssuerListInfoEx = extern struct {
    aIssuers: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
    cIssuers: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SecPkgContext_ConnectionInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_ConnectionInfo = extern struct {
    dwProtocol: {"kind":"UInt32"},
    aiCipher: {"kind":"UInt32"},
    dwCipherStrength: {"kind":"UInt32"},
    aiHash: {"kind":"UInt32"},
    dwHashStrength: {"kind":"UInt32"},
    aiExch: {"kind":"UInt32"},
    dwExchStrength: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SecPkgContext_ConnectionInfoEx
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_ConnectionInfoEx = extern struct {
    dwVersion: {"kind":"UInt32"},
    dwProtocol: {"kind":"UInt32"},
    szCipher: {"kind":"Array","child": {"kind":"UInt16"}},
    dwCipherStrength: {"kind":"UInt32"},
    szHash: {"kind":"Array","child": {"kind":"UInt16"}},
    dwHashStrength: {"kind":"UInt32"},
    szExchange: {"kind":"Array","child": {"kind":"UInt16"}},
    dwExchStrength: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SecPkgContext_CipherInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_CipherInfo = extern struct {
    dwVersion: {"kind":"UInt32"},
    dwProtocol: {"kind":"UInt32"},
    dwCipherSuite: {"kind":"UInt32"},
    dwBaseCipherSuite: {"kind":"UInt32"},
    szCipherSuite: {"kind":"Array","child": {"kind":"UInt16"}},
    szCipher: {"kind":"Array","child": {"kind":"UInt16"}},
    dwCipherLen: {"kind":"UInt32"},
    dwCipherBlockLen: {"kind":"UInt32"},
    szHash: {"kind":"Array","child": {"kind":"UInt16"}},
    dwHashLen: {"kind":"UInt32"},
    szExchange: {"kind":"Array","child": {"kind":"UInt16"}},
    dwMinExchangeLen: {"kind":"UInt32"},
    dwMaxExchangeLen: {"kind":"UInt32"},
    szCertificate: {"kind":"Array","child": {"kind":"UInt16"}},
    dwKeyType: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SecPkgContext_EapKeyBlock
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_EapKeyBlock = extern struct {
    rgbKeys: {"kind":"Array","child": {"kind":"Byte"}},
    rgbIVs: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SecPkgContext_MappedCredAttr
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_MappedCredAttr = extern struct {
    dwAttribute: {"kind":"UInt32"},
    pvBuffer: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: SecPkgContext_SessionInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_SessionInfo = extern struct {
    dwFlags: {"kind":"UInt32"},
    cbSessionId: {"kind":"UInt32"},
    rgbSessionId: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SecPkgContext_SessionAppData
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_SessionAppData = extern struct {
    dwFlags: {"kind":"UInt32"},
    cbAppData: {"kind":"UInt32"},
    pbAppData: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SecPkgContext_EapPrfInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_EapPrfInfo = extern struct {
    dwVersion: {"kind":"UInt32"},
    cbPrfData: {"kind":"UInt32"},
    pbPrfData: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SecPkgContext_SupportedSignatures
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_SupportedSignatures = extern struct {
    cSignatureAndHashAlgorithms: {"kind":"UInt16"},
    pSignatureAndHashAlgorithms: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SecPkgContext_Certificates
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_Certificates = extern struct {
    cCertificates: {"kind":"UInt32"},
    cbCertificateChain: {"kind":"UInt32"},
    pbCertificateChain: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SecPkgContext_CertInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_CertInfo = extern struct {
    dwVersion: {"kind":"UInt32"},
    cbSubjectName: {"kind":"UInt32"},
    pwszSubjectName: {"kind""Ptr","child":{"kind":"UInt16"}},
    cbIssuerName: {"kind":"UInt32"},
    pwszIssuerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwKeySize: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SecPkgContext_UiInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_UiInfo = extern struct {
    hParentWindow: Windows.Win32.WindowsAndMessaging.HWND,
};
// --------------------------------------------------------
// Type: SecPkgContext_EarlyStart
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_EarlyStart = extern struct {
    dwEarlyStartFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SecPkgContext_KeyingMaterialInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_KeyingMaterialInfo = extern struct {
    cbLabel: {"kind":"UInt16"},
    pszLabel: {"kind""Ptr","child":{"kind":"SByte"}},
    cbContextValue: {"kind":"UInt16"},
    pbContextValue: {"kind""Ptr","child":{"kind":"Byte"}},
    cbKeyingMaterial: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SecPkgContext_KeyingMaterial
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_KeyingMaterial = extern struct {
    cbKeyingMaterial: {"kind":"UInt32"},
    pbKeyingMaterial: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SecPkgContext_KeyingMaterial_Inproc
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_KeyingMaterial_Inproc = extern struct {
    cbLabel: {"kind":"UInt16"},
    pszLabel: {"kind""Ptr","child":{"kind":"SByte"}},
    cbContextValue: {"kind":"UInt16"},
    pbContextValue: {"kind""Ptr","child":{"kind":"Byte"}},
    cbKeyingMaterial: {"kind":"UInt32"},
    pbKeyingMaterial: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SecPkgContext_SrtpParameters
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_SrtpParameters = extern struct {
    ProtectionProfile: {"kind":"UInt16"},
    MasterKeyIdentifierSize: {"kind":"Byte"},
    MasterKeyIdentifier: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SecPkgContext_TokenBinding
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_TokenBinding = extern struct {
    MajorVersion: {"kind":"Byte"},
    MinorVersion: {"kind":"Byte"},
    KeyParametersSize: {"kind":"UInt16"},
    KeyParameters: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: _HMAPPER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _HMAPPER = opaque {
};
// --------------------------------------------------------
// Type: SCHANNEL_CRED
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCHANNEL_CRED = extern struct {
    dwVersion: {"kind":"UInt32"},
    cCreds: {"kind":"UInt32"},
    paCred: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT}},
    hRootStore: {"kind""Ptr","child":{"kind":"Void"}},
    cMappers: {"kind":"UInt32"},
    aphMappers: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security._HMAPPER}},
    cSupportedAlgs: {"kind":"UInt32"},
    palgSupportedAlgs: {"kind""Ptr","child":{"kind":"UInt32"}},
    grbitEnabledProtocols: {"kind":"UInt32"},
    dwMinimumCipherStrength: {"kind":"UInt32"},
    dwMaximumCipherStrength: {"kind":"UInt32"},
    dwSessionLifespan: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    dwCredFormat: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SEND_GENERIC_TLS_EXTENSION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEND_GENERIC_TLS_EXTENSION = extern struct {
    ExtensionType: {"kind":"UInt16"},
    HandshakeType: {"kind":"UInt16"},
    Flags: {"kind":"UInt32"},
    BufferSize: {"kind":"UInt16"},
    Buffer: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: TLS_EXTENSION_SUBSCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TLS_EXTENSION_SUBSCRIPTION = extern struct {
    ExtensionType: {"kind":"UInt16"},
    HandshakeType: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: SUBSCRIBE_GENERIC_TLS_EXTENSION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SUBSCRIBE_GENERIC_TLS_EXTENSION = extern struct {
    Flags: {"kind":"UInt32"},
    SubscriptionsCount: {"kind":"UInt32"},
    Subscriptions: {"kind":"Array","child": Windows.Win32.Security.TLS_EXTENSION_SUBSCRIPTION},
};
// --------------------------------------------------------
// Type: SCHANNEL_CERT_HASH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCHANNEL_CERT_HASH = extern struct {
    dwLength: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    hProv: {"kind":"UIntPtr"},
    ShaHash: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SCHANNEL_CERT_HASH_STORE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCHANNEL_CERT_HASH_STORE = extern struct {
    dwLength: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    hProv: {"kind":"UIntPtr"},
    ShaHash: {"kind":"Array","child": {"kind":"Byte"}},
    pwszStoreName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SCHANNEL_ALERT_TOKEN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCHANNEL_ALERT_TOKEN = extern struct {
    dwTokenType: {"kind":"UInt32"},
    dwAlertType: {"kind":"UInt32"},
    dwAlertNumber: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SCHANNEL_SESSION_TOKEN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCHANNEL_SESSION_TOKEN = extern struct {
    dwTokenType: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SCHANNEL_CLIENT_SIGNATURE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCHANNEL_CLIENT_SIGNATURE = extern struct {
    cbLength: {"kind":"UInt32"},
    aiHash: {"kind":"UInt32"},
    cbHash: {"kind":"UInt32"},
    HashValue: {"kind":"Array","child": {"kind":"Byte"}},
    CertThumbprint: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SSL_EMPTY_CACHE_FN_A
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SSL_EMPTY_CACHE_FN_A = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SSL_EMPTY_CACHE_FN_W
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SSL_EMPTY_CACHE_FN_W = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SSL_CREDENTIAL_CERTIFICATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SSL_CREDENTIAL_CERTIFICATE = extern struct {
    cbPrivateKey: {"kind":"UInt32"},
    pPrivateKey: {"kind""Ptr","child":{"kind":"Byte"}},
    cbCertificate: {"kind":"UInt32"},
    pCertificate: {"kind""Ptr","child":{"kind":"Byte"}},
    pszPassword: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: SCH_CRED
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCH_CRED = extern struct {
    dwVersion: {"kind":"UInt32"},
    cCreds: {"kind":"UInt32"},
    paSecret: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    paPublic: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    cMappers: {"kind":"UInt32"},
    aphMappers: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security._HMAPPER}},
};
// --------------------------------------------------------
// Type: SCH_CRED_SECRET_CAPI
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCH_CRED_SECRET_CAPI = extern struct {
    dwType: {"kind":"UInt32"},
    hProv: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: SCH_CRED_SECRET_PRIVKEY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCH_CRED_SECRET_PRIVKEY = extern struct {
    dwType: {"kind":"UInt32"},
    pPrivateKey: {"kind""Ptr","child":{"kind":"Byte"}},
    cbPrivateKey: {"kind":"UInt32"},
    pszPassword: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: SCH_CRED_PUBLIC_CERTCHAIN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCH_CRED_PUBLIC_CERTCHAIN = extern struct {
    dwType: {"kind":"UInt32"},
    cbCertChain: {"kind":"UInt32"},
    pCertChain: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: PctPublicKey
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PctPublicKey = extern struct {
    Type: {"kind":"UInt32"},
    cbKey: {"kind":"UInt32"},
    pKey: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: X509Certificate
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const X509Certificate = extern struct {
    Version: {"kind":"UInt32"},
    SerialNumber: {"kind":"Array","child": {"kind":"UInt32"}},
    SignatureAlgorithm: {"kind":"UInt32"},
    ValidFrom: Windows.Win32.WindowsProgramming.FILETIME,
    ValidUntil: Windows.Win32.WindowsProgramming.FILETIME,
    pszIssuer: {"kind""Ptr","child":{"kind":"SByte"}},
    pszSubject: {"kind""Ptr","child":{"kind":"SByte"}},
    pPublicKey: {"kind""Ptr","child":Windows.Win32.Security.PctPublicKey},
};
// --------------------------------------------------------
// Type: SSL_CRACK_CERTIFICATE_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SSL_CRACK_CERTIFICATE_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SSL_FREE_CERTIFICATE_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SSL_FREE_CERTIFICATE_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SslGetServerIdentityFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SslGetServerIdentityFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SCH_EXTENSION_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCH_EXTENSION_DATA = extern struct {
    ExtensionType: {"kind":"UInt16"},
    pExtData: {"kind""Ptr","child":{"kind":"Byte"}},
    cbExtData: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SchGetExtensionsOptions
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SchGetExtensionsOptions = *opaque{
};
// --------------------------------------------------------
// Type: SslGetExtensionsFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SslGetExtensionsFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: OLD_LARGE_INTEGER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OLD_LARGE_INTEGER = extern struct {
    LowPart: {"kind":"UInt32"},
    HighPart: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: SE_OBJECT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SE_OBJECT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: TRUSTEE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TRUSTEE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: TRUSTEE_FORM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TRUSTEE_FORM = *opaque{
};
// --------------------------------------------------------
// Type: MULTIPLE_TRUSTEE_OPERATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MULTIPLE_TRUSTEE_OPERATION = *opaque{
};
// --------------------------------------------------------
// Type: OBJECTS_AND_SID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OBJECTS_AND_SID = extern struct {
    ObjectsPresent: {"kind":"UInt32"},
    ObjectTypeGuid: Guid,
    InheritedObjectTypeGuid: Guid,
    pSid: {"kind""Ptr","child":Windows.Win32.Security.SID},
};
// --------------------------------------------------------
// Type: OBJECTS_AND_NAME_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OBJECTS_AND_NAME_A = extern struct {
    ObjectsPresent: {"kind":"UInt32"},
    ObjectType: Windows.Win32.Security.SE_OBJECT_TYPE,
    ObjectTypeName: {"kind""Ptr","child":{"kind":"SByte"}},
    InheritedObjectTypeName: {"kind""Ptr","child":{"kind":"SByte"}},
    ptstrName: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: OBJECTS_AND_NAME_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OBJECTS_AND_NAME_W = extern struct {
    ObjectsPresent: {"kind":"UInt32"},
    ObjectType: Windows.Win32.Security.SE_OBJECT_TYPE,
    ObjectTypeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    InheritedObjectTypeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ptstrName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: TRUSTEE_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRUSTEE_A = extern struct {
    pMultipleTrustee: {"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_A},
    MultipleTrusteeOperation: Windows.Win32.Security.MULTIPLE_TRUSTEE_OPERATION,
    TrusteeForm: Windows.Win32.Security.TRUSTEE_FORM,
    TrusteeType: Windows.Win32.Security.TRUSTEE_TYPE,
    ptstrName: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: TRUSTEE_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRUSTEE_W = extern struct {
    pMultipleTrustee: {"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_W},
    MultipleTrusteeOperation: Windows.Win32.Security.MULTIPLE_TRUSTEE_OPERATION,
    TrusteeForm: Windows.Win32.Security.TRUSTEE_FORM,
    TrusteeType: Windows.Win32.Security.TRUSTEE_TYPE,
    ptstrName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: ACCESS_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ACCESS_MODE = *opaque{
};
// --------------------------------------------------------
// Type: EXPLICIT_ACCESS_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EXPLICIT_ACCESS_A = extern struct {
    grfAccessPermissions: {"kind":"UInt32"},
    grfAccessMode: Windows.Win32.Security.ACCESS_MODE,
    grfInheritance: {"kind":"UInt32"},
    Trustee: Windows.Win32.Security.TRUSTEE_A,
};
// --------------------------------------------------------
// Type: EXPLICIT_ACCESS_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EXPLICIT_ACCESS_W = extern struct {
    grfAccessPermissions: {"kind":"UInt32"},
    grfAccessMode: Windows.Win32.Security.ACCESS_MODE,
    grfInheritance: {"kind":"UInt32"},
    Trustee: Windows.Win32.Security.TRUSTEE_W,
};
// --------------------------------------------------------
// Type: TRUSTEE_ACCESSA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRUSTEE_ACCESSA = extern struct {
    lpProperty: {"kind""Ptr","child":{"kind":"SByte"}},
    Access: {"kind":"UInt32"},
    fAccessFlags: {"kind":"UInt32"},
    fReturnedAccess: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: TRUSTEE_ACCESSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRUSTEE_ACCESSW = extern struct {
    lpProperty: {"kind""Ptr","child":{"kind":"UInt16"}},
    Access: {"kind":"UInt32"},
    fAccessFlags: {"kind":"UInt32"},
    fReturnedAccess: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: ACTRL_OVERLAPPED
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACTRL_OVERLAPPED = extern struct {
    Anonymous: Windows.Win32.Security.ACTRL_OVERLAPPED+_Anonymous_e__Union,
    Reserved2: {"kind":"UInt32"},
    hEvent: Windows.Win32.SystemServices.HANDLE,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: ACTRL_ACCESS_INFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACTRL_ACCESS_INFOA = extern struct {
    fAccessPermission: {"kind":"UInt32"},
    lpAccessPermissionName: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: ACTRL_ACCESS_INFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACTRL_ACCESS_INFOW = extern struct {
    fAccessPermission: {"kind":"UInt32"},
    lpAccessPermissionName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: ACTRL_CONTROL_INFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACTRL_CONTROL_INFOA = extern struct {
    lpControlId: {"kind""Ptr","child":{"kind":"SByte"}},
    lpControlName: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: ACTRL_CONTROL_INFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACTRL_CONTROL_INFOW = extern struct {
    lpControlId: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpControlName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: PROG_INVOKE_SETTING
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROG_INVOKE_SETTING = *opaque{
};
// --------------------------------------------------------
// Type: _FN_OBJECT_MGR_FUNCTIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _FN_OBJECT_MGR_FUNCTIONS = extern struct {
    Placeholder: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: INHERITED_FROMA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INHERITED_FROMA = extern struct {
    GenerationGap: {"kind":"Int32"},
    AncestorName: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: INHERITED_FROMW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INHERITED_FROMW = extern struct {
    GenerationGap: {"kind":"Int32"},
    AncestorName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: WLX_SC_NOTIFICATION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLX_SC_NOTIFICATION_INFO = extern struct {
    pszCard: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszReader: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszContainer: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszCryptoProvider: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: WLX_PROFILE_V1_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLX_PROFILE_V1_0 = extern struct {
    dwType: {"kind":"UInt32"},
    pszProfile: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: WLX_PROFILE_V2_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLX_PROFILE_V2_0 = extern struct {
    dwType: {"kind":"UInt32"},
    pszProfile: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszPolicy: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszNetworkDefaultUserProfile: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszServerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszEnvironment: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: WLX_MPR_NOTIFY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLX_MPR_NOTIFY_INFO = extern struct {
    pszUserName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszDomain: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszPassword: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszOldPassword: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: WLX_TERMINAL_SERVICES_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLX_TERMINAL_SERVICES_DATA = extern struct {
    ProfilePath: {"kind":"Array","child": {"kind":"UInt16"}},
    HomeDir: {"kind":"Array","child": {"kind":"UInt16"}},
    HomeDirDrive: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: WLX_CLIENT_CREDENTIALS_INFO_V1_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLX_CLIENT_CREDENTIALS_INFO_V1_0 = extern struct {
    dwType: {"kind":"UInt32"},
    pszUserName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszDomain: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszPassword: {"kind""Ptr","child":{"kind":"UInt16"}},
    fPromptForPassword: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: WLX_CLIENT_CREDENTIALS_INFO_V2_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLX_CLIENT_CREDENTIALS_INFO_V2_0 = extern struct {
    dwType: {"kind":"UInt32"},
    pszUserName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszDomain: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszPassword: {"kind""Ptr","child":{"kind":"UInt16"}},
    fPromptForPassword: Windows.Win32.SystemServices.BOOL,
    fDisconnectOnLogonFailure: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: WLX_CONSOLESWITCH_CREDENTIALS_INFO_V1_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLX_CONSOLESWITCH_CREDENTIALS_INFO_V1_0 = extern struct {
    dwType: {"kind":"UInt32"},
    UserToken: Windows.Win32.SystemServices.HANDLE,
    LogonId: Windows.Win32.Kernel.LUID,
    Quotas: Windows.Win32.Security.QUOTA_LIMITS,
    UserName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Domain: {"kind""Ptr","child":{"kind":"UInt16"}},
    LogonTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    SmartCardLogon: Windows.Win32.SystemServices.BOOL,
    ProfileLength: {"kind":"UInt32"},
    MessageType: {"kind":"UInt32"},
    LogonCount: {"kind":"UInt16"},
    BadPasswordCount: {"kind":"UInt16"},
    ProfileLogonTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    LogoffTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    KickOffTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    PasswordLastSet: Windows.Win32.SystemServices.LARGE_INTEGER,
    PasswordCanChange: Windows.Win32.SystemServices.LARGE_INTEGER,
    PasswordMustChange: Windows.Win32.SystemServices.LARGE_INTEGER,
    LogonScript: {"kind""Ptr","child":{"kind":"UInt16"}},
    HomeDirectory: {"kind""Ptr","child":{"kind":"UInt16"}},
    FullName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ProfilePath: {"kind""Ptr","child":{"kind":"UInt16"}},
    HomeDirectoryDrive: {"kind""Ptr","child":{"kind":"UInt16"}},
    LogonServer: {"kind""Ptr","child":{"kind":"UInt16"}},
    UserFlags: {"kind":"UInt32"},
    PrivateDataLen: {"kind":"UInt32"},
    PrivateData: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: WLX_DESKTOP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLX_DESKTOP = extern struct {
    Size: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    hDesktop: Windows.Win32.WindowsStationsAndDesktops.HDESK,
    pszDesktopName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: PWLX_USE_CTRL_ALT_DEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_USE_CTRL_ALT_DEL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_SET_CONTEXT_POINTER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_SET_CONTEXT_POINTER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_SAS_NOTIFY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_SAS_NOTIFY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_SET_TIMEOUT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_SET_TIMEOUT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_ASSIGN_SHELL_PROTECTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_ASSIGN_SHELL_PROTECTION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_MESSAGE_BOX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_MESSAGE_BOX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_DIALOG_BOX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_DIALOG_BOX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_DIALOG_BOX_INDIRECT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_DIALOG_BOX_INDIRECT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_DIALOG_BOX_PARAM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_DIALOG_BOX_PARAM = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_DIALOG_BOX_INDIRECT_PARAM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_DIALOG_BOX_INDIRECT_PARAM = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_SWITCH_DESKTOP_TO_USER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_SWITCH_DESKTOP_TO_USER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_SWITCH_DESKTOP_TO_WINLOGON
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_SWITCH_DESKTOP_TO_WINLOGON = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_CHANGE_PASSWORD_NOTIFY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_CHANGE_PASSWORD_NOTIFY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_GET_SOURCE_DESKTOP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_GET_SOURCE_DESKTOP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_SET_RETURN_DESKTOP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_SET_RETURN_DESKTOP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_CREATE_USER_DESKTOP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_CREATE_USER_DESKTOP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_CHANGE_PASSWORD_NOTIFY_EX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_CHANGE_PASSWORD_NOTIFY_EX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_CLOSE_USER_DESKTOP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_CLOSE_USER_DESKTOP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_SET_OPTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_SET_OPTION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_GET_OPTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_GET_OPTION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_WIN31_MIGRATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_WIN31_MIGRATE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_QUERY_CLIENT_CREDENTIALS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_QUERY_CLIENT_CREDENTIALS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_QUERY_IC_CREDENTIALS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_QUERY_IC_CREDENTIALS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_QUERY_TS_LOGON_CREDENTIALS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_QUERY_TS_LOGON_CREDENTIALS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_DISCONNECT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_DISCONNECT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_QUERY_TERMINAL_SERVICES_DATA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_QUERY_TERMINAL_SERVICES_DATA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_QUERY_CONSOLESWITCH_CREDENTIALS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_QUERY_CONSOLESWITCH_CREDENTIALS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WLX_DISPATCH_VERSION_1_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLX_DISPATCH_VERSION_1_0 = extern struct {
    WlxUseCtrlAltDel: Windows.Win32.Security.PWLX_USE_CTRL_ALT_DEL,
    WlxSetContextPointer: Windows.Win32.Security.PWLX_SET_CONTEXT_POINTER,
    WlxSasNotify: Windows.Win32.Security.PWLX_SAS_NOTIFY,
    WlxSetTimeout: Windows.Win32.Security.PWLX_SET_TIMEOUT,
    WlxAssignShellProtection: Windows.Win32.Security.PWLX_ASSIGN_SHELL_PROTECTION,
    WlxMessageBox: Windows.Win32.Security.PWLX_MESSAGE_BOX,
    WlxDialogBox: Windows.Win32.Security.PWLX_DIALOG_BOX,
    WlxDialogBoxParam: Windows.Win32.Security.PWLX_DIALOG_BOX_PARAM,
    WlxDialogBoxIndirect: Windows.Win32.Security.PWLX_DIALOG_BOX_INDIRECT,
    WlxDialogBoxIndirectParam: Windows.Win32.Security.PWLX_DIALOG_BOX_INDIRECT_PARAM,
    WlxSwitchDesktopToUser: Windows.Win32.Security.PWLX_SWITCH_DESKTOP_TO_USER,
    WlxSwitchDesktopToWinlogon: Windows.Win32.Security.PWLX_SWITCH_DESKTOP_TO_WINLOGON,
    WlxChangePasswordNotify: Windows.Win32.Security.PWLX_CHANGE_PASSWORD_NOTIFY,
};
// --------------------------------------------------------
// Type: WLX_DISPATCH_VERSION_1_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLX_DISPATCH_VERSION_1_1 = extern struct {
    WlxUseCtrlAltDel: Windows.Win32.Security.PWLX_USE_CTRL_ALT_DEL,
    WlxSetContextPointer: Windows.Win32.Security.PWLX_SET_CONTEXT_POINTER,
    WlxSasNotify: Windows.Win32.Security.PWLX_SAS_NOTIFY,
    WlxSetTimeout: Windows.Win32.Security.PWLX_SET_TIMEOUT,
    WlxAssignShellProtection: Windows.Win32.Security.PWLX_ASSIGN_SHELL_PROTECTION,
    WlxMessageBox: Windows.Win32.Security.PWLX_MESSAGE_BOX,
    WlxDialogBox: Windows.Win32.Security.PWLX_DIALOG_BOX,
    WlxDialogBoxParam: Windows.Win32.Security.PWLX_DIALOG_BOX_PARAM,
    WlxDialogBoxIndirect: Windows.Win32.Security.PWLX_DIALOG_BOX_INDIRECT,
    WlxDialogBoxIndirectParam: Windows.Win32.Security.PWLX_DIALOG_BOX_INDIRECT_PARAM,
    WlxSwitchDesktopToUser: Windows.Win32.Security.PWLX_SWITCH_DESKTOP_TO_USER,
    WlxSwitchDesktopToWinlogon: Windows.Win32.Security.PWLX_SWITCH_DESKTOP_TO_WINLOGON,
    WlxChangePasswordNotify: Windows.Win32.Security.PWLX_CHANGE_PASSWORD_NOTIFY,
    WlxGetSourceDesktop: Windows.Win32.Security.PWLX_GET_SOURCE_DESKTOP,
    WlxSetReturnDesktop: Windows.Win32.Security.PWLX_SET_RETURN_DESKTOP,
    WlxCreateUserDesktop: Windows.Win32.Security.PWLX_CREATE_USER_DESKTOP,
    WlxChangePasswordNotifyEx: Windows.Win32.Security.PWLX_CHANGE_PASSWORD_NOTIFY_EX,
};
// --------------------------------------------------------
// Type: WLX_DISPATCH_VERSION_1_2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLX_DISPATCH_VERSION_1_2 = extern struct {
    WlxUseCtrlAltDel: Windows.Win32.Security.PWLX_USE_CTRL_ALT_DEL,
    WlxSetContextPointer: Windows.Win32.Security.PWLX_SET_CONTEXT_POINTER,
    WlxSasNotify: Windows.Win32.Security.PWLX_SAS_NOTIFY,
    WlxSetTimeout: Windows.Win32.Security.PWLX_SET_TIMEOUT,
    WlxAssignShellProtection: Windows.Win32.Security.PWLX_ASSIGN_SHELL_PROTECTION,
    WlxMessageBox: Windows.Win32.Security.PWLX_MESSAGE_BOX,
    WlxDialogBox: Windows.Win32.Security.PWLX_DIALOG_BOX,
    WlxDialogBoxParam: Windows.Win32.Security.PWLX_DIALOG_BOX_PARAM,
    WlxDialogBoxIndirect: Windows.Win32.Security.PWLX_DIALOG_BOX_INDIRECT,
    WlxDialogBoxIndirectParam: Windows.Win32.Security.PWLX_DIALOG_BOX_INDIRECT_PARAM,
    WlxSwitchDesktopToUser: Windows.Win32.Security.PWLX_SWITCH_DESKTOP_TO_USER,
    WlxSwitchDesktopToWinlogon: Windows.Win32.Security.PWLX_SWITCH_DESKTOP_TO_WINLOGON,
    WlxChangePasswordNotify: Windows.Win32.Security.PWLX_CHANGE_PASSWORD_NOTIFY,
    WlxGetSourceDesktop: Windows.Win32.Security.PWLX_GET_SOURCE_DESKTOP,
    WlxSetReturnDesktop: Windows.Win32.Security.PWLX_SET_RETURN_DESKTOP,
    WlxCreateUserDesktop: Windows.Win32.Security.PWLX_CREATE_USER_DESKTOP,
    WlxChangePasswordNotifyEx: Windows.Win32.Security.PWLX_CHANGE_PASSWORD_NOTIFY_EX,
    WlxCloseUserDesktop: Windows.Win32.Security.PWLX_CLOSE_USER_DESKTOP,
};
// --------------------------------------------------------
// Type: WLX_DISPATCH_VERSION_1_3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLX_DISPATCH_VERSION_1_3 = extern struct {
    WlxUseCtrlAltDel: Windows.Win32.Security.PWLX_USE_CTRL_ALT_DEL,
    WlxSetContextPointer: Windows.Win32.Security.PWLX_SET_CONTEXT_POINTER,
    WlxSasNotify: Windows.Win32.Security.PWLX_SAS_NOTIFY,
    WlxSetTimeout: Windows.Win32.Security.PWLX_SET_TIMEOUT,
    WlxAssignShellProtection: Windows.Win32.Security.PWLX_ASSIGN_SHELL_PROTECTION,
    WlxMessageBox: Windows.Win32.Security.PWLX_MESSAGE_BOX,
    WlxDialogBox: Windows.Win32.Security.PWLX_DIALOG_BOX,
    WlxDialogBoxParam: Windows.Win32.Security.PWLX_DIALOG_BOX_PARAM,
    WlxDialogBoxIndirect: Windows.Win32.Security.PWLX_DIALOG_BOX_INDIRECT,
    WlxDialogBoxIndirectParam: Windows.Win32.Security.PWLX_DIALOG_BOX_INDIRECT_PARAM,
    WlxSwitchDesktopToUser: Windows.Win32.Security.PWLX_SWITCH_DESKTOP_TO_USER,
    WlxSwitchDesktopToWinlogon: Windows.Win32.Security.PWLX_SWITCH_DESKTOP_TO_WINLOGON,
    WlxChangePasswordNotify: Windows.Win32.Security.PWLX_CHANGE_PASSWORD_NOTIFY,
    WlxGetSourceDesktop: Windows.Win32.Security.PWLX_GET_SOURCE_DESKTOP,
    WlxSetReturnDesktop: Windows.Win32.Security.PWLX_SET_RETURN_DESKTOP,
    WlxCreateUserDesktop: Windows.Win32.Security.PWLX_CREATE_USER_DESKTOP,
    WlxChangePasswordNotifyEx: Windows.Win32.Security.PWLX_CHANGE_PASSWORD_NOTIFY_EX,
    WlxCloseUserDesktop: Windows.Win32.Security.PWLX_CLOSE_USER_DESKTOP,
    WlxSetOption: Windows.Win32.Security.PWLX_SET_OPTION,
    WlxGetOption: Windows.Win32.Security.PWLX_GET_OPTION,
    WlxWin31Migrate: Windows.Win32.Security.PWLX_WIN31_MIGRATE,
    WlxQueryClientCredentials: Windows.Win32.Security.PWLX_QUERY_CLIENT_CREDENTIALS,
    WlxQueryInetConnectorCredentials: Windows.Win32.Security.PWLX_QUERY_IC_CREDENTIALS,
    WlxDisconnect: Windows.Win32.Security.PWLX_DISCONNECT,
    WlxQueryTerminalServicesData: Windows.Win32.Security.PWLX_QUERY_TERMINAL_SERVICES_DATA,
};
// --------------------------------------------------------
// Type: WLX_DISPATCH_VERSION_1_4
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLX_DISPATCH_VERSION_1_4 = extern struct {
    WlxUseCtrlAltDel: Windows.Win32.Security.PWLX_USE_CTRL_ALT_DEL,
    WlxSetContextPointer: Windows.Win32.Security.PWLX_SET_CONTEXT_POINTER,
    WlxSasNotify: Windows.Win32.Security.PWLX_SAS_NOTIFY,
    WlxSetTimeout: Windows.Win32.Security.PWLX_SET_TIMEOUT,
    WlxAssignShellProtection: Windows.Win32.Security.PWLX_ASSIGN_SHELL_PROTECTION,
    WlxMessageBox: Windows.Win32.Security.PWLX_MESSAGE_BOX,
    WlxDialogBox: Windows.Win32.Security.PWLX_DIALOG_BOX,
    WlxDialogBoxParam: Windows.Win32.Security.PWLX_DIALOG_BOX_PARAM,
    WlxDialogBoxIndirect: Windows.Win32.Security.PWLX_DIALOG_BOX_INDIRECT,
    WlxDialogBoxIndirectParam: Windows.Win32.Security.PWLX_DIALOG_BOX_INDIRECT_PARAM,
    WlxSwitchDesktopToUser: Windows.Win32.Security.PWLX_SWITCH_DESKTOP_TO_USER,
    WlxSwitchDesktopToWinlogon: Windows.Win32.Security.PWLX_SWITCH_DESKTOP_TO_WINLOGON,
    WlxChangePasswordNotify: Windows.Win32.Security.PWLX_CHANGE_PASSWORD_NOTIFY,
    WlxGetSourceDesktop: Windows.Win32.Security.PWLX_GET_SOURCE_DESKTOP,
    WlxSetReturnDesktop: Windows.Win32.Security.PWLX_SET_RETURN_DESKTOP,
    WlxCreateUserDesktop: Windows.Win32.Security.PWLX_CREATE_USER_DESKTOP,
    WlxChangePasswordNotifyEx: Windows.Win32.Security.PWLX_CHANGE_PASSWORD_NOTIFY_EX,
    WlxCloseUserDesktop: Windows.Win32.Security.PWLX_CLOSE_USER_DESKTOP,
    WlxSetOption: Windows.Win32.Security.PWLX_SET_OPTION,
    WlxGetOption: Windows.Win32.Security.PWLX_GET_OPTION,
    WlxWin31Migrate: Windows.Win32.Security.PWLX_WIN31_MIGRATE,
    WlxQueryClientCredentials: Windows.Win32.Security.PWLX_QUERY_CLIENT_CREDENTIALS,
    WlxQueryInetConnectorCredentials: Windows.Win32.Security.PWLX_QUERY_IC_CREDENTIALS,
    WlxDisconnect: Windows.Win32.Security.PWLX_DISCONNECT,
    WlxQueryTerminalServicesData: Windows.Win32.Security.PWLX_QUERY_TERMINAL_SERVICES_DATA,
    WlxQueryConsoleSwitchCredentials: Windows.Win32.Security.PWLX_QUERY_CONSOLESWITCH_CREDENTIALS,
    WlxQueryTsLogonCredentials: Windows.Win32.Security.PWLX_QUERY_TS_LOGON_CREDENTIALS,
};
// --------------------------------------------------------
// Type: PFNMSGECALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNMSGECALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WLX_NOTIFICATION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLX_NOTIFICATION_INFO = extern struct {
    Size: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    UserName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Domain: {"kind""Ptr","child":{"kind":"UInt16"}},
    WindowStation: {"kind""Ptr","child":{"kind":"UInt16"}},
    hToken: Windows.Win32.SystemServices.HANDLE,
    hDesktop: Windows.Win32.WindowsStationsAndDesktops.HDESK,
    pStatusCallback: Windows.Win32.Security.PFNMSGECALLBACK,
};
// --------------------------------------------------------
// Type: TpmVirtualSmartCardManager
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const TpmVirtualSmartCardManager = opaque {
};
// --------------------------------------------------------
// Type: RemoteTpmVirtualSmartCardManager
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const RemoteTpmVirtualSmartCardManager = opaque {
};
// --------------------------------------------------------
// Type: TPMVSC_ATTESTATION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TPMVSC_ATTESTATION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: TPMVSCMGR_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TPMVSCMGR_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: TPMVSCMGR_ERROR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TPMVSCMGR_ERROR = *opaque{
};
// --------------------------------------------------------
// Type: ITpmVirtualSmartCardManagerStatusCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITpmVirtualSmartCardManagerStatusCallback = *opaque{
    // TODO: Method 'ReportProgress'
    // TODO: Method 'ReportError'
};
// --------------------------------------------------------
// Type: ITpmVirtualSmartCardManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITpmVirtualSmartCardManager = *opaque{
    // TODO: Method 'CreateVirtualSmartCard'
    // TODO: Method 'DestroyVirtualSmartCard'
};
// --------------------------------------------------------
// Type: ITpmVirtualSmartCardManager2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITpmVirtualSmartCardManager2 = *opaque{
    // TODO: Method 'CreateVirtualSmartCardWithPinPolicy'
};
// --------------------------------------------------------
// Type: ITpmVirtualSmartCardManager3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITpmVirtualSmartCardManager3 = *opaque{
    // TODO: Method 'CreateVirtualSmartCardWithAttestation'
};
// --------------------------------------------------------
// Type: KeyCredentialManagerOperationErrorStates
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KeyCredentialManagerOperationErrorStates = *opaque{
};
// --------------------------------------------------------
// Type: KeyCredentialManagerOperationType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KeyCredentialManagerOperationType = *opaque{
};
// --------------------------------------------------------
// Type: KeyCredentialManagerInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KeyCredentialManagerInfo = extern struct {
    containerId: Guid,
};
// --------------------------------------------------------
// Type: IDENTITY_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IDENTITY_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: PF_NPAddConnection
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPAddConnection = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPAddConnection3
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPAddConnection3 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPAddConnection4
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPAddConnection4 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPCancelConnection
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPCancelConnection = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPGetConnection
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPGetConnection = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPGetConnection3
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPGetConnection3 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPGetUniversalName
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPGetUniversalName = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPGetConnectionPerformance
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPGetConnectionPerformance = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPOpenEnum
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPOpenEnum = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPEnumResource
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPEnumResource = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPCloseEnum
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPCloseEnum = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPGetCaps
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPGetCaps = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPGetUser
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPGetUser = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPGetPersistentUseOptionsForConnection
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPGetPersistentUseOptionsForConnection = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPDeviceMode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPDeviceMode = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPSearchDialog
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPSearchDialog = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPGetResourceParent
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPGetResourceParent = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPGetResourceInformation
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPGetResourceInformation = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPFormatNetworkName
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPFormatNetworkName = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPGetPropertyText
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPGetPropertyText = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPPropertyDialog
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPPropertyDialog = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPGetDirectoryType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPGetDirectoryType = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPDirectoryNotify
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPDirectoryNotify = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPLogonNotify
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPLogonNotify = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPPasswordChangeNotify
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPPasswordChangeNotify = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: NOTIFYINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NOTIFYINFO = extern struct {
    dwNotifyStatus: {"kind":"UInt32"},
    dwOperationStatus: {"kind":"UInt32"},
    lpContext: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: NOTIFYADD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NOTIFYADD = extern struct {
    hwndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    NetResource: Windows.Win32.Security.NETRESOURCEA,
    dwAddFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NOTIFYCANCEL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NOTIFYCANCEL = extern struct {
    lpName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpProvider: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    fForce: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: PF_AddConnectNotify
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_AddConnectNotify = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_CancelConnectNotify
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_CancelConnectNotify = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPFMXGetPermCaps
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPFMXGetPermCaps = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPFMXEditPerm
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPFMXEditPerm = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPFMXGetPermHelp
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPFMXGetPermHelp = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LOGON_HOURS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LOGON_HOURS = extern struct {
    UnitsPerWeek: {"kind":"UInt16"},
    LogonHours: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SR_SECURITY_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SR_SECURITY_DESCRIPTOR = extern struct {
    Length: {"kind":"UInt32"},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: USER_ALL_INFORMATION
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const USER_ALL_INFORMATION = *opaque{
};
// --------------------------------------------------------
// Type: CLEAR_BLOCK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLEAR_BLOCK = extern struct {
    data: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: USER_SESSION_KEY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_SESSION_KEY = extern struct {
    data: {"kind":"Array","child": Windows.Win32.PasswordManagement.CYPHER_BLOCK},
};
// --------------------------------------------------------
// Type: NETLOGON_LOGON_INFO_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NETLOGON_LOGON_INFO_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: NETLOGON_LOGON_IDENTITY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NETLOGON_LOGON_IDENTITY_INFO = extern struct {
    LogonDomainName: Windows.Win32.Security.UNICODE_STRING,
    ParameterControl: {"kind":"UInt32"},
    LogonId: Windows.Win32.Security.OLD_LARGE_INTEGER,
    UserName: Windows.Win32.Security.UNICODE_STRING,
    Workstation: Windows.Win32.Security.UNICODE_STRING,
};
// --------------------------------------------------------
// Type: NETLOGON_INTERACTIVE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NETLOGON_INTERACTIVE_INFO = extern struct {
    Identity: Windows.Win32.Security.NETLOGON_LOGON_IDENTITY_INFO,
    LmOwfPassword: Windows.Win32.PasswordManagement.LM_OWF_PASSWORD,
    NtOwfPassword: Windows.Win32.PasswordManagement.LM_OWF_PASSWORD,
};
// --------------------------------------------------------
// Type: NETLOGON_SERVICE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NETLOGON_SERVICE_INFO = extern struct {
    Identity: Windows.Win32.Security.NETLOGON_LOGON_IDENTITY_INFO,
    LmOwfPassword: Windows.Win32.PasswordManagement.LM_OWF_PASSWORD,
    NtOwfPassword: Windows.Win32.PasswordManagement.LM_OWF_PASSWORD,
};
// --------------------------------------------------------
// Type: NETLOGON_NETWORK_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NETLOGON_NETWORK_INFO = extern struct {
    Identity: Windows.Win32.Security.NETLOGON_LOGON_IDENTITY_INFO,
    LmChallenge: Windows.Win32.Security.CLEAR_BLOCK,
    NtChallengeResponse: Windows.Win32.WindowsProgramming.STRING,
    LmChallengeResponse: Windows.Win32.WindowsProgramming.STRING,
};
// --------------------------------------------------------
// Type: NETLOGON_GENERIC_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NETLOGON_GENERIC_INFO = extern struct {
    Identity: Windows.Win32.Security.NETLOGON_LOGON_IDENTITY_INFO,
    PackageName: Windows.Win32.Security.UNICODE_STRING,
    DataLength: {"kind":"UInt32"},
    LogonData: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: MSV1_0_VALIDATION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_VALIDATION_INFO = extern struct {
    LogoffTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    KickoffTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    LogonServer: Windows.Win32.Security.UNICODE_STRING,
    LogonDomainName: Windows.Win32.Security.UNICODE_STRING,
    SessionKey: Windows.Win32.Security.USER_SESSION_KEY,
    Authoritative: {"kind":"Byte"},
    UserFlags: {"kind":"UInt32"},
    WhichFields: {"kind":"UInt32"},
    UserId: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: tag_IdentityUpdateEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const tag_IdentityUpdateEvent = *opaque{
};
// --------------------------------------------------------
// Type: IIdentityAdvise
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IIdentityAdvise = *opaque{
    // TODO: Method 'IdentityUpdated'
};
// --------------------------------------------------------
// Type: AsyncIIdentityAdvise
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const AsyncIIdentityAdvise = *opaque{
    // TODO: Method 'Begin_IdentityUpdated'
    // TODO: Method 'Finish_IdentityUpdated'
};
// --------------------------------------------------------
// Type: IIdentityProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IIdentityProvider = *opaque{
    // TODO: Method 'GetIdentityEnum'
    // TODO: Method 'Create'
    // TODO: Method 'Import'
    // TODO: Method 'Delete'
    // TODO: Method 'FindByUniqueID'
    // TODO: Method 'GetProviderPropertyStore'
    // TODO: Method 'Advise'
    // TODO: Method 'UnAdvise'
};
// --------------------------------------------------------
// Type: AsyncIIdentityProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const AsyncIIdentityProvider = *opaque{
    // TODO: Method 'Begin_GetIdentityEnum'
    // TODO: Method 'Finish_GetIdentityEnum'
    // TODO: Method 'Begin_Create'
    // TODO: Method 'Finish_Create'
    // TODO: Method 'Begin_Import'
    // TODO: Method 'Finish_Import'
    // TODO: Method 'Begin_Delete'
    // TODO: Method 'Finish_Delete'
    // TODO: Method 'Begin_FindByUniqueID'
    // TODO: Method 'Finish_FindByUniqueID'
    // TODO: Method 'Begin_GetProviderPropertyStore'
    // TODO: Method 'Finish_GetProviderPropertyStore'
    // TODO: Method 'Begin_Advise'
    // TODO: Method 'Finish_Advise'
    // TODO: Method 'Begin_UnAdvise'
    // TODO: Method 'Finish_UnAdvise'
};
// --------------------------------------------------------
// Type: IAssociatedIdentityProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAssociatedIdentityProvider = *opaque{
    // TODO: Method 'AssociateIdentity'
    // TODO: Method 'DisassociateIdentity'
    // TODO: Method 'ChangeCredential'
};
// --------------------------------------------------------
// Type: AsyncIAssociatedIdentityProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const AsyncIAssociatedIdentityProvider = *opaque{
    // TODO: Method 'Begin_AssociateIdentity'
    // TODO: Method 'Finish_AssociateIdentity'
    // TODO: Method 'Begin_DisassociateIdentity'
    // TODO: Method 'Finish_DisassociateIdentity'
    // TODO: Method 'Begin_ChangeCredential'
    // TODO: Method 'Finish_ChangeCredential'
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_identityprovider_0000_0003_0001
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_identityprovider_0000_0003_0001 = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_identityprovider_0000_0003_0002
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_identityprovider_0000_0003_0002 = *opaque{
};
// --------------------------------------------------------
// Type: IConnectedIdentityProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IConnectedIdentityProvider = *opaque{
    // TODO: Method 'ConnectIdentity'
    // TODO: Method 'DisconnectIdentity'
    // TODO: Method 'IsConnected'
    // TODO: Method 'GetUrl'
    // TODO: Method 'GetAccountState'
};
// --------------------------------------------------------
// Type: AsyncIConnectedIdentityProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const AsyncIConnectedIdentityProvider = *opaque{
    // TODO: Method 'Begin_ConnectIdentity'
    // TODO: Method 'Finish_ConnectIdentity'
    // TODO: Method 'Begin_DisconnectIdentity'
    // TODO: Method 'Finish_DisconnectIdentity'
    // TODO: Method 'Begin_IsConnected'
    // TODO: Method 'Finish_IsConnected'
    // TODO: Method 'Begin_GetUrl'
    // TODO: Method 'Finish_GetUrl'
    // TODO: Method 'Begin_GetAccountState'
    // TODO: Method 'Finish_GetAccountState'
};
// --------------------------------------------------------
// Type: IIdentityAuthentication
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IIdentityAuthentication = *opaque{
    // TODO: Method 'SetIdentityCredential'
    // TODO: Method 'ValidateIdentityCredential'
};
// --------------------------------------------------------
// Type: AsyncIIdentityAuthentication
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const AsyncIIdentityAuthentication = *opaque{
    // TODO: Method 'Begin_SetIdentityCredential'
    // TODO: Method 'Finish_SetIdentityCredential'
    // TODO: Method 'Begin_ValidateIdentityCredential'
    // TODO: Method 'Finish_ValidateIdentityCredential'
};
// --------------------------------------------------------
// Type: CoClassIdentityStore
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CoClassIdentityStore = opaque {
};
// --------------------------------------------------------
// Type: CIdentityProfileHandler
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CIdentityProfileHandler = opaque {
};
// --------------------------------------------------------
// Type: IIdentityStore
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IIdentityStore = *opaque{
    // TODO: Method 'GetCount'
    // TODO: Method 'GetAt'
    // TODO: Method 'AddToCache'
    // TODO: Method 'ConvertToSid'
    // TODO: Method 'EnumerateIdentities'
    // TODO: Method 'Reset'
};
// --------------------------------------------------------
// Type: AsyncIIdentityStore
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const AsyncIIdentityStore = *opaque{
    // TODO: Method 'Begin_GetCount'
    // TODO: Method 'Finish_GetCount'
    // TODO: Method 'Begin_GetAt'
    // TODO: Method 'Finish_GetAt'
    // TODO: Method 'Begin_AddToCache'
    // TODO: Method 'Finish_AddToCache'
    // TODO: Method 'Begin_ConvertToSid'
    // TODO: Method 'Finish_ConvertToSid'
    // TODO: Method 'Begin_EnumerateIdentities'
    // TODO: Method 'Finish_EnumerateIdentities'
    // TODO: Method 'Begin_Reset'
    // TODO: Method 'Finish_Reset'
};
// --------------------------------------------------------
// Type: IIdentityStoreEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IIdentityStoreEx = *opaque{
    // TODO: Method 'CreateConnectedIdentity'
    // TODO: Method 'DeleteConnectedIdentity'
};
// --------------------------------------------------------
// Type: AsyncIIdentityStoreEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const AsyncIIdentityStoreEx = *opaque{
    // TODO: Method 'Begin_CreateConnectedIdentity'
    // TODO: Method 'Finish_CreateConnectedIdentity'
    // TODO: Method 'Begin_DeleteConnectedIdentity'
    // TODO: Method 'Finish_DeleteConnectedIdentity'
};
// --------------------------------------------------------
// Type: AUDIT_PARAM_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AUDIT_PARAM_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: AUDIT_OBJECT_TYPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUDIT_OBJECT_TYPE = extern struct {
    ObjectType: Guid,
    Flags: {"kind":"UInt16"},
    Level: {"kind":"UInt16"},
    AccessMask: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: AUDIT_OBJECT_TYPES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUDIT_OBJECT_TYPES = extern struct {
    Count: {"kind":"UInt16"},
    Flags: {"kind":"UInt16"},
    pObjectTypes: {"kind""Ptr","child":Windows.Win32.Security.AUDIT_OBJECT_TYPE},
};
// --------------------------------------------------------
// Type: AUDIT_IP_ADDRESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUDIT_IP_ADDRESS = extern struct {
    pIpAddress: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: AUDIT_PARAM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUDIT_PARAM = extern struct {
    Type: Windows.Win32.Security.AUDIT_PARAM_TYPE,
    Length: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    Anonymous1: Windows.Win32.Security.AUDIT_PARAM+_Anonymous1_e__Union,
    Anonymous2: Windows.Win32.Security.AUDIT_PARAM+_Anonymous2_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: AUDIT_PARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUDIT_PARAMS = extern struct {
    Length: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    Count: {"kind":"UInt16"},
    Parameters: {"kind""Ptr","child":Windows.Win32.Security.AUDIT_PARAM},
};
// --------------------------------------------------------
// Type: AUTHZ_AUDIT_EVENT_TYPE_LEGACY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_AUDIT_EVENT_TYPE_LEGACY = extern struct {
    CategoryId: {"kind":"UInt16"},
    AuditId: {"kind":"UInt16"},
    ParameterCount: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: AUTHZ_AUDIT_EVENT_TYPE_UNION
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const AUTHZ_AUDIT_EVENT_TYPE_UNION = *opaque{
};
// --------------------------------------------------------
// Type: AUTHZ_AUDIT_EVENT_TYPE_OLD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_AUDIT_EVENT_TYPE_OLD = extern struct {
    Version: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    RefCount: {"kind":"Int32"},
    hAudit: {"kind":"UIntPtr"},
    LinkId: Windows.Win32.Kernel.LUID,
    u: Windows.Win32.Security.AUTHZ_AUDIT_EVENT_TYPE_UNION,
};
// --------------------------------------------------------
// Type: AUTHZ_ACCESS_CHECK_RESULTS_HANDLE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_ACCESS_CHECK_RESULTS_HANDLE__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: AUTHZ_CLIENT_CONTEXT_HANDLE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_CLIENT_CONTEXT_HANDLE__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: AUTHZ_RESOURCE_MANAGER_HANDLE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_RESOURCE_MANAGER_HANDLE__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: AUTHZ_AUDIT_EVENT_HANDLE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_AUDIT_EVENT_HANDLE__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: AUTHZ_AUDIT_EVENT_TYPE_HANDLE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_AUDIT_EVENT_TYPE_HANDLE__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: AUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: AUTHZ_ACCESS_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_ACCESS_REQUEST = extern struct {
    DesiredAccess: {"kind":"UInt32"},
    PrincipalSelfSid: {"kind""Ptr","child":{"kind":"Void"}},
    ObjectTypeList: {"kind""Ptr","child":Windows.Win32.Security.OBJECT_TYPE_LIST},
    ObjectTypeListLength: {"kind":"UInt32"},
    OptionalArguments: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: AUTHZ_ACCESS_REPLY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_ACCESS_REPLY = extern struct {
    ResultListLength: {"kind":"UInt32"},
    GrantedAccessMask: {"kind""Ptr","child":{"kind":"UInt32"}},
    SaclEvaluationResults: {"kind""Ptr","child":{"kind":"UInt32"}},
    Error: {"kind""Ptr","child":{"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: PFN_AUTHZ_DYNAMIC_ACCESS_CHECK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_AUTHZ_DYNAMIC_ACCESS_CHECK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_AUTHZ_COMPUTE_DYNAMIC_GROUPS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_AUTHZ_COMPUTE_DYNAMIC_GROUPS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_AUTHZ_FREE_DYNAMIC_GROUPS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_AUTHZ_FREE_DYNAMIC_GROUPS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_AUTHZ_GET_CENTRAL_ACCESS_POLICY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_AUTHZ_GET_CENTRAL_ACCESS_POLICY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_AUTHZ_FREE_CENTRAL_ACCESS_POLICY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_AUTHZ_FREE_CENTRAL_ACCESS_POLICY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: AUTHZ_SECURITY_ATTRIBUTE_FQBN_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_SECURITY_ATTRIBUTE_FQBN_VALUE = extern struct {
    Version: {"kind":"UInt64"},
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: AUTHZ_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE = extern struct {
    pValue: {"kind""Ptr","child":{"kind":"Void"}},
    ValueLength: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: AUTHZ_SECURITY_ATTRIBUTE_OPERATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AUTHZ_SECURITY_ATTRIBUTE_OPERATION = *opaque{
};
// --------------------------------------------------------
// Type: AUTHZ_SID_OPERATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AUTHZ_SID_OPERATION = *opaque{
};
// --------------------------------------------------------
// Type: AUTHZ_SECURITY_ATTRIBUTE_V1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_SECURITY_ATTRIBUTE_V1 = extern struct {
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ValueType: {"kind":"UInt16"},
    Reserved: {"kind":"UInt16"},
    Flags: {"kind":"UInt32"},
    ValueCount: {"kind":"UInt32"},
    Values: Windows.Win32.Security.AUTHZ_SECURITY_ATTRIBUTE_V1+_Values_e__Union,
    // --------------------------------------------------------
    // Type: _Values_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Values_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: AUTHZ_SECURITY_ATTRIBUTES_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_SECURITY_ATTRIBUTES_INFORMATION = extern struct {
    Version: {"kind":"UInt16"},
    Reserved: {"kind":"UInt16"},
    AttributeCount: {"kind":"UInt32"},
    Attribute: Windows.Win32.Security.AUTHZ_SECURITY_ATTRIBUTES_INFORMATION+_Attribute_e__Union,
    // --------------------------------------------------------
    // Type: _Attribute_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Attribute_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: AUTHZ_RPC_INIT_INFO_CLIENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_RPC_INIT_INFO_CLIENT = extern struct {
    version: {"kind":"UInt16"},
    ObjectUuid: {"kind""Ptr","child":{"kind":"UInt16"}},
    ProtSeq: {"kind""Ptr","child":{"kind":"UInt16"}},
    NetworkAddr: {"kind""Ptr","child":{"kind":"UInt16"}},
    Endpoint: {"kind""Ptr","child":{"kind":"UInt16"}},
    Options: {"kind""Ptr","child":{"kind":"UInt16"}},
    ServerSpn: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: AUTHZ_INIT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_INIT_INFO = extern struct {
    version: {"kind":"UInt16"},
    szResourceManagerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pfnDynamicAccessCheck: Windows.Win32.Security.PFN_AUTHZ_DYNAMIC_ACCESS_CHECK,
    pfnComputeDynamicGroups: Windows.Win32.Security.PFN_AUTHZ_COMPUTE_DYNAMIC_GROUPS,
    pfnFreeDynamicGroups: Windows.Win32.Security.PFN_AUTHZ_FREE_DYNAMIC_GROUPS,
    pfnGetCentralAccessPolicy: Windows.Win32.Security.PFN_AUTHZ_GET_CENTRAL_ACCESS_POLICY,
    pfnFreeCentralAccessPolicy: Windows.Win32.Security.PFN_AUTHZ_FREE_CENTRAL_ACCESS_POLICY,
};
// --------------------------------------------------------
// Type: AUTHZ_CONTEXT_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AUTHZ_CONTEXT_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: AUTHZ_AUDIT_EVENT_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AUTHZ_AUDIT_EVENT_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: AUTHZ_REGISTRATION_OBJECT_TYPE_NAME_OFFSET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_REGISTRATION_OBJECT_TYPE_NAME_OFFSET = extern struct {
    szObjectTypeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwOffset: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: AUTHZ_SOURCE_SCHEMA_REGISTRATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_SOURCE_SCHEMA_REGISTRATION = extern struct {
    dwFlags: {"kind":"UInt32"},
    szEventSourceName: {"kind""Ptr","child":{"kind":"UInt16"}},
    szEventMessageFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    szEventSourceXmlSchemaFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    szEventAccessStringsFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    szExecutableImagePath: {"kind""Ptr","child":{"kind":"UInt16"}},
    Anonymous: Windows.Win32.Security.AUTHZ_SOURCE_SCHEMA_REGISTRATION+_Anonymous_e__Union,
    dwObjectTypeNameCount: {"kind":"UInt32"},
    ObjectTypeNames: {"kind":"Array","child": Windows.Win32.Security.AUTHZ_REGISTRATION_OBJECT_TYPE_NAME_OFFSET},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: AzAuthorizationStore
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const AzAuthorizationStore = opaque {
};
// --------------------------------------------------------
// Type: AzBizRuleContext
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const AzBizRuleContext = opaque {
};
// --------------------------------------------------------
// Type: AzPrincipalLocator
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const AzPrincipalLocator = opaque {
};
// --------------------------------------------------------
// Type: IAzAuthorizationStore
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzAuthorizationStore = *opaque{
    // TODO: Method 'get_Description'
    // TODO: Method 'put_Description'
    // TODO: Method 'get_ApplicationData'
    // TODO: Method 'put_ApplicationData'
    // TODO: Method 'get_DomainTimeout'
    // TODO: Method 'put_DomainTimeout'
    // TODO: Method 'get_ScriptEngineTimeout'
    // TODO: Method 'put_ScriptEngineTimeout'
    // TODO: Method 'get_MaxScriptEngines'
    // TODO: Method 'put_MaxScriptEngines'
    // TODO: Method 'get_GenerateAudits'
    // TODO: Method 'put_GenerateAudits'
    // TODO: Method 'get_Writable'
    // TODO: Method 'GetProperty'
    // TODO: Method 'SetProperty'
    // TODO: Method 'AddPropertyItem'
    // TODO: Method 'DeletePropertyItem'
    // TODO: Method 'get_PolicyAdministrators'
    // TODO: Method 'get_PolicyReaders'
    // TODO: Method 'AddPolicyAdministrator'
    // TODO: Method 'DeletePolicyAdministrator'
    // TODO: Method 'AddPolicyReader'
    // TODO: Method 'DeletePolicyReader'
    // TODO: Method 'Initialize'
    // TODO: Method 'UpdateCache'
    // TODO: Method 'Delete'
    // TODO: Method 'get_Applications'
    // TODO: Method 'OpenApplication'
    // TODO: Method 'CreateApplication'
    // TODO: Method 'DeleteApplication'
    // TODO: Method 'get_ApplicationGroups'
    // TODO: Method 'CreateApplicationGroup'
    // TODO: Method 'OpenApplicationGroup'
    // TODO: Method 'DeleteApplicationGroup'
    // TODO: Method 'Submit'
    // TODO: Method 'get_DelegatedPolicyUsers'
    // TODO: Method 'AddDelegatedPolicyUser'
    // TODO: Method 'DeleteDelegatedPolicyUser'
    // TODO: Method 'get_TargetMachine'
    // TODO: Method 'get_ApplyStoreSacl'
    // TODO: Method 'put_ApplyStoreSacl'
    // TODO: Method 'get_PolicyAdministratorsName'
    // TODO: Method 'get_PolicyReadersName'
    // TODO: Method 'AddPolicyAdministratorName'
    // TODO: Method 'DeletePolicyAdministratorName'
    // TODO: Method 'AddPolicyReaderName'
    // TODO: Method 'DeletePolicyReaderName'
    // TODO: Method 'get_DelegatedPolicyUsersName'
    // TODO: Method 'AddDelegatedPolicyUserName'
    // TODO: Method 'DeleteDelegatedPolicyUserName'
    // TODO: Method 'CloseApplication'
};
// --------------------------------------------------------
// Type: IAzAuthorizationStore2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzAuthorizationStore2 = *opaque{
    // TODO: Method 'OpenApplication2'
    // TODO: Method 'CreateApplication2'
};
// --------------------------------------------------------
// Type: IAzAuthorizationStore3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzAuthorizationStore3 = *opaque{
    // TODO: Method 'IsUpdateNeeded'
    // TODO: Method 'BizruleGroupSupported'
    // TODO: Method 'UpgradeStoresFunctionalLevel'
    // TODO: Method 'IsFunctionalLevelUpgradeSupported'
    // TODO: Method 'GetSchemaVersion'
};
// --------------------------------------------------------
// Type: IAzApplication
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzApplication = *opaque{
    // TODO: Method 'get_Name'
    // TODO: Method 'put_Name'
    // TODO: Method 'get_Description'
    // TODO: Method 'put_Description'
    // TODO: Method 'get_ApplicationData'
    // TODO: Method 'put_ApplicationData'
    // TODO: Method 'get_AuthzInterfaceClsid'
    // TODO: Method 'put_AuthzInterfaceClsid'
    // TODO: Method 'get_Version'
    // TODO: Method 'put_Version'
    // TODO: Method 'get_GenerateAudits'
    // TODO: Method 'put_GenerateAudits'
    // TODO: Method 'get_ApplyStoreSacl'
    // TODO: Method 'put_ApplyStoreSacl'
    // TODO: Method 'get_Writable'
    // TODO: Method 'GetProperty'
    // TODO: Method 'SetProperty'
    // TODO: Method 'get_PolicyAdministrators'
    // TODO: Method 'get_PolicyReaders'
    // TODO: Method 'AddPolicyAdministrator'
    // TODO: Method 'DeletePolicyAdministrator'
    // TODO: Method 'AddPolicyReader'
    // TODO: Method 'DeletePolicyReader'
    // TODO: Method 'get_Scopes'
    // TODO: Method 'OpenScope'
    // TODO: Method 'CreateScope'
    // TODO: Method 'DeleteScope'
    // TODO: Method 'get_Operations'
    // TODO: Method 'OpenOperation'
    // TODO: Method 'CreateOperation'
    // TODO: Method 'DeleteOperation'
    // TODO: Method 'get_Tasks'
    // TODO: Method 'OpenTask'
    // TODO: Method 'CreateTask'
    // TODO: Method 'DeleteTask'
    // TODO: Method 'get_ApplicationGroups'
    // TODO: Method 'OpenApplicationGroup'
    // TODO: Method 'CreateApplicationGroup'
    // TODO: Method 'DeleteApplicationGroup'
    // TODO: Method 'get_Roles'
    // TODO: Method 'OpenRole'
    // TODO: Method 'CreateRole'
    // TODO: Method 'DeleteRole'
    // TODO: Method 'InitializeClientContextFromToken'
    // TODO: Method 'AddPropertyItem'
    // TODO: Method 'DeletePropertyItem'
    // TODO: Method 'Submit'
    // TODO: Method 'InitializeClientContextFromName'
    // TODO: Method 'get_DelegatedPolicyUsers'
    // TODO: Method 'AddDelegatedPolicyUser'
    // TODO: Method 'DeleteDelegatedPolicyUser'
    // TODO: Method 'InitializeClientContextFromStringSid'
    // TODO: Method 'get_PolicyAdministratorsName'
    // TODO: Method 'get_PolicyReadersName'
    // TODO: Method 'AddPolicyAdministratorName'
    // TODO: Method 'DeletePolicyAdministratorName'
    // TODO: Method 'AddPolicyReaderName'
    // TODO: Method 'DeletePolicyReaderName'
    // TODO: Method 'get_DelegatedPolicyUsersName'
    // TODO: Method 'AddDelegatedPolicyUserName'
    // TODO: Method 'DeleteDelegatedPolicyUserName'
};
// --------------------------------------------------------
// Type: IAzApplication2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzApplication2 = *opaque{
    // TODO: Method 'InitializeClientContextFromToken2'
    // TODO: Method 'InitializeClientContext2'
};
// --------------------------------------------------------
// Type: IAzApplications
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzApplications = *opaque{
    // TODO: Method 'get_Item'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
};
// --------------------------------------------------------
// Type: IAzOperation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzOperation = *opaque{
    // TODO: Method 'get_Name'
    // TODO: Method 'put_Name'
    // TODO: Method 'get_Description'
    // TODO: Method 'put_Description'
    // TODO: Method 'get_ApplicationData'
    // TODO: Method 'put_ApplicationData'
    // TODO: Method 'get_OperationID'
    // TODO: Method 'put_OperationID'
    // TODO: Method 'get_Writable'
    // TODO: Method 'GetProperty'
    // TODO: Method 'SetProperty'
    // TODO: Method 'Submit'
};
// --------------------------------------------------------
// Type: IAzOperations
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzOperations = *opaque{
    // TODO: Method 'get_Item'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
};
// --------------------------------------------------------
// Type: IAzTask
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzTask = *opaque{
    // TODO: Method 'get_Name'
    // TODO: Method 'put_Name'
    // TODO: Method 'get_Description'
    // TODO: Method 'put_Description'
    // TODO: Method 'get_ApplicationData'
    // TODO: Method 'put_ApplicationData'
    // TODO: Method 'get_BizRule'
    // TODO: Method 'put_BizRule'
    // TODO: Method 'get_BizRuleLanguage'
    // TODO: Method 'put_BizRuleLanguage'
    // TODO: Method 'get_BizRuleImportedPath'
    // TODO: Method 'put_BizRuleImportedPath'
    // TODO: Method 'get_IsRoleDefinition'
    // TODO: Method 'put_IsRoleDefinition'
    // TODO: Method 'get_Operations'
    // TODO: Method 'get_Tasks'
    // TODO: Method 'AddOperation'
    // TODO: Method 'DeleteOperation'
    // TODO: Method 'AddTask'
    // TODO: Method 'DeleteTask'
    // TODO: Method 'get_Writable'
    // TODO: Method 'GetProperty'
    // TODO: Method 'SetProperty'
    // TODO: Method 'AddPropertyItem'
    // TODO: Method 'DeletePropertyItem'
    // TODO: Method 'Submit'
};
// --------------------------------------------------------
// Type: IAzTasks
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzTasks = *opaque{
    // TODO: Method 'get_Item'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
};
// --------------------------------------------------------
// Type: IAzScope
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzScope = *opaque{
    // TODO: Method 'get_Name'
    // TODO: Method 'put_Name'
    // TODO: Method 'get_Description'
    // TODO: Method 'put_Description'
    // TODO: Method 'get_ApplicationData'
    // TODO: Method 'put_ApplicationData'
    // TODO: Method 'get_Writable'
    // TODO: Method 'GetProperty'
    // TODO: Method 'SetProperty'
    // TODO: Method 'AddPropertyItem'
    // TODO: Method 'DeletePropertyItem'
    // TODO: Method 'get_PolicyAdministrators'
    // TODO: Method 'get_PolicyReaders'
    // TODO: Method 'AddPolicyAdministrator'
    // TODO: Method 'DeletePolicyAdministrator'
    // TODO: Method 'AddPolicyReader'
    // TODO: Method 'DeletePolicyReader'
    // TODO: Method 'get_ApplicationGroups'
    // TODO: Method 'OpenApplicationGroup'
    // TODO: Method 'CreateApplicationGroup'
    // TODO: Method 'DeleteApplicationGroup'
    // TODO: Method 'get_Roles'
    // TODO: Method 'OpenRole'
    // TODO: Method 'CreateRole'
    // TODO: Method 'DeleteRole'
    // TODO: Method 'get_Tasks'
    // TODO: Method 'OpenTask'
    // TODO: Method 'CreateTask'
    // TODO: Method 'DeleteTask'
    // TODO: Method 'Submit'
    // TODO: Method 'get_CanBeDelegated'
    // TODO: Method 'get_BizrulesWritable'
    // TODO: Method 'get_PolicyAdministratorsName'
    // TODO: Method 'get_PolicyReadersName'
    // TODO: Method 'AddPolicyAdministratorName'
    // TODO: Method 'DeletePolicyAdministratorName'
    // TODO: Method 'AddPolicyReaderName'
    // TODO: Method 'DeletePolicyReaderName'
};
// --------------------------------------------------------
// Type: IAzScopes
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzScopes = *opaque{
    // TODO: Method 'get_Item'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
};
// --------------------------------------------------------
// Type: IAzApplicationGroup
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzApplicationGroup = *opaque{
    // TODO: Method 'get_Name'
    // TODO: Method 'put_Name'
    // TODO: Method 'get_Type'
    // TODO: Method 'put_Type'
    // TODO: Method 'get_LdapQuery'
    // TODO: Method 'put_LdapQuery'
    // TODO: Method 'get_AppMembers'
    // TODO: Method 'get_AppNonMembers'
    // TODO: Method 'get_Members'
    // TODO: Method 'get_NonMembers'
    // TODO: Method 'get_Description'
    // TODO: Method 'put_Description'
    // TODO: Method 'AddAppMember'
    // TODO: Method 'DeleteAppMember'
    // TODO: Method 'AddAppNonMember'
    // TODO: Method 'DeleteAppNonMember'
    // TODO: Method 'AddMember'
    // TODO: Method 'DeleteMember'
    // TODO: Method 'AddNonMember'
    // TODO: Method 'DeleteNonMember'
    // TODO: Method 'get_Writable'
    // TODO: Method 'GetProperty'
    // TODO: Method 'SetProperty'
    // TODO: Method 'AddPropertyItem'
    // TODO: Method 'DeletePropertyItem'
    // TODO: Method 'Submit'
    // TODO: Method 'AddMemberName'
    // TODO: Method 'DeleteMemberName'
    // TODO: Method 'AddNonMemberName'
    // TODO: Method 'DeleteNonMemberName'
    // TODO: Method 'get_MembersName'
    // TODO: Method 'get_NonMembersName'
};
// --------------------------------------------------------
// Type: IAzApplicationGroups
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzApplicationGroups = *opaque{
    // TODO: Method 'get_Item'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
};
// --------------------------------------------------------
// Type: IAzRole
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzRole = *opaque{
    // TODO: Method 'get_Name'
    // TODO: Method 'put_Name'
    // TODO: Method 'get_Description'
    // TODO: Method 'put_Description'
    // TODO: Method 'get_ApplicationData'
    // TODO: Method 'put_ApplicationData'
    // TODO: Method 'AddAppMember'
    // TODO: Method 'DeleteAppMember'
    // TODO: Method 'AddTask'
    // TODO: Method 'DeleteTask'
    // TODO: Method 'AddOperation'
    // TODO: Method 'DeleteOperation'
    // TODO: Method 'AddMember'
    // TODO: Method 'DeleteMember'
    // TODO: Method 'get_Writable'
    // TODO: Method 'GetProperty'
    // TODO: Method 'SetProperty'
    // TODO: Method 'get_AppMembers'
    // TODO: Method 'get_Members'
    // TODO: Method 'get_Operations'
    // TODO: Method 'get_Tasks'
    // TODO: Method 'AddPropertyItem'
    // TODO: Method 'DeletePropertyItem'
    // TODO: Method 'Submit'
    // TODO: Method 'AddMemberName'
    // TODO: Method 'DeleteMemberName'
    // TODO: Method 'get_MembersName'
};
// --------------------------------------------------------
// Type: IAzRoles
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzRoles = *opaque{
    // TODO: Method 'get_Item'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
};
// --------------------------------------------------------
// Type: IAzClientContext
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzClientContext = *opaque{
    // TODO: Method 'AccessCheck'
    // TODO: Method 'GetBusinessRuleString'
    // TODO: Method 'get_UserDn'
    // TODO: Method 'get_UserSamCompat'
    // TODO: Method 'get_UserDisplay'
    // TODO: Method 'get_UserGuid'
    // TODO: Method 'get_UserCanonical'
    // TODO: Method 'get_UserUpn'
    // TODO: Method 'get_UserDnsSamCompat'
    // TODO: Method 'GetProperty'
    // TODO: Method 'GetRoles'
    // TODO: Method 'get_RoleForAccessCheck'
    // TODO: Method 'put_RoleForAccessCheck'
};
// --------------------------------------------------------
// Type: IAzClientContext2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzClientContext2 = *opaque{
    // TODO: Method 'GetAssignedScopesPage'
    // TODO: Method 'AddRoles'
    // TODO: Method 'AddApplicationGroups'
    // TODO: Method 'AddStringSids'
    // TODO: Method 'put_LDAPQueryDN'
    // TODO: Method 'get_LDAPQueryDN'
};
// --------------------------------------------------------
// Type: IAzBizRuleContext
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzBizRuleContext = *opaque{
    // TODO: Method 'put_BusinessRuleResult'
    // TODO: Method 'put_BusinessRuleString'
    // TODO: Method 'get_BusinessRuleString'
    // TODO: Method 'GetParameter'
};
// --------------------------------------------------------
// Type: IAzBizRuleParameters
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzBizRuleParameters = *opaque{
    // TODO: Method 'AddParameter'
    // TODO: Method 'AddParameters'
    // TODO: Method 'GetParameterValue'
    // TODO: Method 'Remove'
    // TODO: Method 'RemoveAll'
    // TODO: Method 'get_Count'
};
// --------------------------------------------------------
// Type: IAzBizRuleInterfaces
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzBizRuleInterfaces = *opaque{
    // TODO: Method 'AddInterface'
    // TODO: Method 'AddInterfaces'
    // TODO: Method 'GetInterfaceValue'
    // TODO: Method 'Remove'
    // TODO: Method 'RemoveAll'
    // TODO: Method 'get_Count'
};
// --------------------------------------------------------
// Type: IAzClientContext3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzClientContext3 = *opaque{
    // TODO: Method 'AccessCheck2'
    // TODO: Method 'IsInRoleAssignment'
    // TODO: Method 'GetOperations'
    // TODO: Method 'GetTasks'
    // TODO: Method 'get_BizRuleParameters'
    // TODO: Method 'get_BizRuleInterfaces'
    // TODO: Method 'GetGroups'
    // TODO: Method 'get_Sids'
};
// --------------------------------------------------------
// Type: IAzScope2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzScope2 = *opaque{
    // TODO: Method 'get_RoleDefinitions'
    // TODO: Method 'CreateRoleDefinition'
    // TODO: Method 'OpenRoleDefinition'
    // TODO: Method 'DeleteRoleDefinition'
    // TODO: Method 'get_RoleAssignments'
    // TODO: Method 'CreateRoleAssignment'
    // TODO: Method 'OpenRoleAssignment'
    // TODO: Method 'DeleteRoleAssignment'
};
// --------------------------------------------------------
// Type: IAzApplication3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzApplication3 = *opaque{
    // TODO: Method 'ScopeExists'
    // TODO: Method 'OpenScope2'
    // TODO: Method 'CreateScope2'
    // TODO: Method 'DeleteScope2'
    // TODO: Method 'get_RoleDefinitions'
    // TODO: Method 'CreateRoleDefinition'
    // TODO: Method 'OpenRoleDefinition'
    // TODO: Method 'DeleteRoleDefinition'
    // TODO: Method 'get_RoleAssignments'
    // TODO: Method 'CreateRoleAssignment'
    // TODO: Method 'OpenRoleAssignment'
    // TODO: Method 'DeleteRoleAssignment'
    // TODO: Method 'get_BizRulesEnabled'
    // TODO: Method 'put_BizRulesEnabled'
};
// --------------------------------------------------------
// Type: IAzOperation2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzOperation2 = *opaque{
    // TODO: Method 'RoleAssignments'
};
// --------------------------------------------------------
// Type: IAzRoleDefinitions
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzRoleDefinitions = *opaque{
    // TODO: Method 'get_Item'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
};
// --------------------------------------------------------
// Type: IAzRoleDefinition
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzRoleDefinition = *opaque{
    // TODO: Method 'RoleAssignments'
    // TODO: Method 'AddRoleDefinition'
    // TODO: Method 'DeleteRoleDefinition'
    // TODO: Method 'get_RoleDefinitions'
};
// --------------------------------------------------------
// Type: IAzRoleAssignment
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzRoleAssignment = *opaque{
    // TODO: Method 'AddRoleDefinition'
    // TODO: Method 'DeleteRoleDefinition'
    // TODO: Method 'get_RoleDefinitions'
    // TODO: Method 'get_Scope'
};
// --------------------------------------------------------
// Type: IAzRoleAssignments
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzRoleAssignments = *opaque{
    // TODO: Method 'get_Item'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
};
// --------------------------------------------------------
// Type: IAzPrincipalLocator
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzPrincipalLocator = *opaque{
    // TODO: Method 'get_NameResolver'
    // TODO: Method 'get_ObjectPicker'
};
// --------------------------------------------------------
// Type: IAzNameResolver
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzNameResolver = *opaque{
    // TODO: Method 'NameFromSid'
    // TODO: Method 'NamesFromSids'
};
// --------------------------------------------------------
// Type: IAzObjectPicker
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzObjectPicker = *opaque{
    // TODO: Method 'GetPrincipals'
    // TODO: Method 'get_Name'
};
// --------------------------------------------------------
// Type: IAzApplicationGroup2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzApplicationGroup2 = *opaque{
    // TODO: Method 'get_BizRule'
    // TODO: Method 'put_BizRule'
    // TODO: Method 'get_BizRuleLanguage'
    // TODO: Method 'put_BizRuleLanguage'
    // TODO: Method 'get_BizRuleImportedPath'
    // TODO: Method 'put_BizRuleImportedPath'
    // TODO: Method 'RoleAssignments'
};
// --------------------------------------------------------
// Type: IAzTask2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzTask2 = *opaque{
    // TODO: Method 'RoleAssignments'
};
// --------------------------------------------------------
// Type: AZ_PROP_CONSTANTS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AZ_PROP_CONSTANTS = *opaque{
};
// --------------------------------------------------------
// Type: SI_OBJECT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SI_OBJECT_INFO = extern struct {
    dwFlags: {"kind":"UInt32"},
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    pszServerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszObjectName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszPageTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    guidObjectType: Guid,
};
// --------------------------------------------------------
// Type: SI_ACCESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SI_ACCESS = extern struct {
    pguid: {"kind""Ptr","child":Guid},
    mask: {"kind":"UInt32"},
    pszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SI_INHERIT_TYPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SI_INHERIT_TYPE = extern struct {
    pguid: {"kind""Ptr","child":Guid},
    dwFlags: {"kind":"UInt32"},
    pszName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SI_PAGE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SI_PAGE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: SI_PAGE_ACTIVATED
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SI_PAGE_ACTIVATED = *opaque{
};
// --------------------------------------------------------
// Type: ISecurityInformation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISecurityInformation = *opaque{
    // TODO: Method 'GetObjectInformation'
    // TODO: Method 'GetSecurity'
    // TODO: Method 'SetSecurity'
    // TODO: Method 'GetAccessRights'
    // TODO: Method 'MapGeneric'
    // TODO: Method 'GetInheritTypes'
    // TODO: Method 'PropertySheetPageCallback'
};
// --------------------------------------------------------
// Type: ISecurityInformation2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISecurityInformation2 = *opaque{
    // TODO: Method 'IsDaclCanonical'
    // TODO: Method 'LookupSids'
};
// --------------------------------------------------------
// Type: SID_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SID_INFO = extern struct {
    pSid: {"kind""Ptr","child":{"kind":"Void"}},
    pwzCommonName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwzClass: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwzUPN: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SID_INFO_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SID_INFO_LIST = extern struct {
    cItems: {"kind":"UInt32"},
    aSidInfo: {"kind":"Array","child": Windows.Win32.Security.SID_INFO},
};
// --------------------------------------------------------
// Type: IEffectivePermission
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEffectivePermission = *opaque{
    // TODO: Method 'GetEffectivePermission'
};
// --------------------------------------------------------
// Type: ISecurityObjectTypeInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISecurityObjectTypeInfo = *opaque{
    // TODO: Method 'GetInheritSource'
};
// --------------------------------------------------------
// Type: ISecurityInformation3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISecurityInformation3 = *opaque{
    // TODO: Method 'GetFullResourceName'
    // TODO: Method 'OpenElevatedEditor'
};
// --------------------------------------------------------
// Type: SECURITY_OBJECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECURITY_OBJECT = extern struct {
    pwszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pData: {"kind""Ptr","child":{"kind":"Void"}},
    cbData: {"kind":"UInt32"},
    pData2: {"kind""Ptr","child":{"kind":"Void"}},
    cbData2: {"kind":"UInt32"},
    Id: {"kind":"UInt32"},
    fWellKnown: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: EFFPERM_RESULT_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EFFPERM_RESULT_LIST = extern struct {
    fEvaluated: {"kind":"Byte"},
    cObjectTypeListLength: {"kind":"UInt32"},
    pObjectTypeList: {"kind""Ptr","child":Windows.Win32.Security.OBJECT_TYPE_LIST},
    pGrantedAccessList: {"kind""Ptr","child":{"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: ISecurityInformation4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISecurityInformation4 = *opaque{
    // TODO: Method 'GetSecondarySecurity'
};
// --------------------------------------------------------
// Type: IEffectivePermission2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEffectivePermission2 = *opaque{
    // TODO: Method 'ComputeEffectivePermissionWithSecondarySecurity'
};
// --------------------------------------------------------
// Type: FN_PROGRESS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FN_PROGRESS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNREADOBJECTSECURITY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNREADOBJECTSECURITY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNWRITEOBJECTSECURITY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNWRITEOBJECTSECURITY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNDSCREATEISECINFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNDSCREATEISECINFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNDSCREATEISECINFOEX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNDSCREATEISECINFOEX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNDSCREATESECPAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNDSCREATESECPAGE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNDSEDITSECURITY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNDSEDITSECURITY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CObjectId
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CObjectId = opaque {
};
// --------------------------------------------------------
// Type: CObjectIds
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CObjectIds = opaque {
};
// --------------------------------------------------------
// Type: CBinaryConverter
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CBinaryConverter = opaque {
};
// --------------------------------------------------------
// Type: CX500DistinguishedName
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX500DistinguishedName = opaque {
};
// --------------------------------------------------------
// Type: CCspInformation
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCspInformation = opaque {
};
// --------------------------------------------------------
// Type: CCspInformations
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCspInformations = opaque {
};
// --------------------------------------------------------
// Type: CCspStatus
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCspStatus = opaque {
};
// --------------------------------------------------------
// Type: CX509PublicKey
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509PublicKey = opaque {
};
// --------------------------------------------------------
// Type: CX509PrivateKey
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509PrivateKey = opaque {
};
// --------------------------------------------------------
// Type: CX509EndorsementKey
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509EndorsementKey = opaque {
};
// --------------------------------------------------------
// Type: CX509Extension
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509Extension = opaque {
};
// --------------------------------------------------------
// Type: CX509Extensions
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509Extensions = opaque {
};
// --------------------------------------------------------
// Type: CX509ExtensionKeyUsage
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509ExtensionKeyUsage = opaque {
};
// --------------------------------------------------------
// Type: CX509ExtensionEnhancedKeyUsage
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509ExtensionEnhancedKeyUsage = opaque {
};
// --------------------------------------------------------
// Type: CX509ExtensionTemplateName
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509ExtensionTemplateName = opaque {
};
// --------------------------------------------------------
// Type: CX509ExtensionTemplate
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509ExtensionTemplate = opaque {
};
// --------------------------------------------------------
// Type: CAlternativeName
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CAlternativeName = opaque {
};
// --------------------------------------------------------
// Type: CAlternativeNames
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CAlternativeNames = opaque {
};
// --------------------------------------------------------
// Type: CX509ExtensionAlternativeNames
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509ExtensionAlternativeNames = opaque {
};
// --------------------------------------------------------
// Type: CX509ExtensionBasicConstraints
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509ExtensionBasicConstraints = opaque {
};
// --------------------------------------------------------
// Type: CX509ExtensionSubjectKeyIdentifier
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509ExtensionSubjectKeyIdentifier = opaque {
};
// --------------------------------------------------------
// Type: CX509ExtensionAuthorityKeyIdentifier
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509ExtensionAuthorityKeyIdentifier = opaque {
};
// --------------------------------------------------------
// Type: CSmimeCapability
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CSmimeCapability = opaque {
};
// --------------------------------------------------------
// Type: CSmimeCapabilities
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CSmimeCapabilities = opaque {
};
// --------------------------------------------------------
// Type: CX509ExtensionSmimeCapabilities
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509ExtensionSmimeCapabilities = opaque {
};
// --------------------------------------------------------
// Type: CPolicyQualifier
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CPolicyQualifier = opaque {
};
// --------------------------------------------------------
// Type: CPolicyQualifiers
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CPolicyQualifiers = opaque {
};
// --------------------------------------------------------
// Type: CCertificatePolicy
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertificatePolicy = opaque {
};
// --------------------------------------------------------
// Type: CCertificatePolicies
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertificatePolicies = opaque {
};
// --------------------------------------------------------
// Type: CX509ExtensionCertificatePolicies
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509ExtensionCertificatePolicies = opaque {
};
// --------------------------------------------------------
// Type: CX509ExtensionMSApplicationPolicies
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509ExtensionMSApplicationPolicies = opaque {
};
// --------------------------------------------------------
// Type: CX509Attribute
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509Attribute = opaque {
};
// --------------------------------------------------------
// Type: CX509Attributes
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509Attributes = opaque {
};
// --------------------------------------------------------
// Type: CX509AttributeExtensions
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509AttributeExtensions = opaque {
};
// --------------------------------------------------------
// Type: CX509AttributeClientId
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509AttributeClientId = opaque {
};
// --------------------------------------------------------
// Type: CX509AttributeRenewalCertificate
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509AttributeRenewalCertificate = opaque {
};
// --------------------------------------------------------
// Type: CX509AttributeArchiveKey
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509AttributeArchiveKey = opaque {
};
// --------------------------------------------------------
// Type: CX509AttributeArchiveKeyHash
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509AttributeArchiveKeyHash = opaque {
};
// --------------------------------------------------------
// Type: CX509AttributeOSVersion
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509AttributeOSVersion = opaque {
};
// --------------------------------------------------------
// Type: CX509AttributeCspProvider
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509AttributeCspProvider = opaque {
};
// --------------------------------------------------------
// Type: CCryptAttribute
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCryptAttribute = opaque {
};
// --------------------------------------------------------
// Type: CCryptAttributes
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCryptAttributes = opaque {
};
// --------------------------------------------------------
// Type: CCertProperty
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertProperty = opaque {
};
// --------------------------------------------------------
// Type: CCertProperties
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertProperties = opaque {
};
// --------------------------------------------------------
// Type: CCertPropertyFriendlyName
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertPropertyFriendlyName = opaque {
};
// --------------------------------------------------------
// Type: CCertPropertyDescription
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertPropertyDescription = opaque {
};
// --------------------------------------------------------
// Type: CCertPropertyAutoEnroll
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertPropertyAutoEnroll = opaque {
};
// --------------------------------------------------------
// Type: CCertPropertyRequestOriginator
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertPropertyRequestOriginator = opaque {
};
// --------------------------------------------------------
// Type: CCertPropertySHA1Hash
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertPropertySHA1Hash = opaque {
};
// --------------------------------------------------------
// Type: CCertPropertyKeyProvInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertPropertyKeyProvInfo = opaque {
};
// --------------------------------------------------------
// Type: CCertPropertyArchived
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertPropertyArchived = opaque {
};
// --------------------------------------------------------
// Type: CCertPropertyBackedUp
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertPropertyBackedUp = opaque {
};
// --------------------------------------------------------
// Type: CCertPropertyEnrollment
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertPropertyEnrollment = opaque {
};
// --------------------------------------------------------
// Type: CCertPropertyRenewal
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertPropertyRenewal = opaque {
};
// --------------------------------------------------------
// Type: CCertPropertyArchivedKeyHash
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertPropertyArchivedKeyHash = opaque {
};
// --------------------------------------------------------
// Type: CCertPropertyEnrollmentPolicyServer
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertPropertyEnrollmentPolicyServer = opaque {
};
// --------------------------------------------------------
// Type: CSignerCertificate
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CSignerCertificate = opaque {
};
// --------------------------------------------------------
// Type: CX509NameValuePair
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509NameValuePair = opaque {
};
// --------------------------------------------------------
// Type: CCertificateAttestationChallenge
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertificateAttestationChallenge = opaque {
};
// --------------------------------------------------------
// Type: CX509CertificateRequestPkcs10
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509CertificateRequestPkcs10 = opaque {
};
// --------------------------------------------------------
// Type: CX509CertificateRequestCertificate
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509CertificateRequestCertificate = opaque {
};
// --------------------------------------------------------
// Type: CX509CertificateRequestPkcs7
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509CertificateRequestPkcs7 = opaque {
};
// --------------------------------------------------------
// Type: CX509CertificateRequestCmc
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509CertificateRequestCmc = opaque {
};
// --------------------------------------------------------
// Type: CX509Enrollment
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509Enrollment = opaque {
};
// --------------------------------------------------------
// Type: CX509EnrollmentWebClassFactory
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509EnrollmentWebClassFactory = opaque {
};
// --------------------------------------------------------
// Type: CX509EnrollmentHelper
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509EnrollmentHelper = opaque {
};
// --------------------------------------------------------
// Type: CX509MachineEnrollmentFactory
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509MachineEnrollmentFactory = opaque {
};
// --------------------------------------------------------
// Type: CX509EnrollmentPolicyActiveDirectory
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509EnrollmentPolicyActiveDirectory = opaque {
};
// --------------------------------------------------------
// Type: CX509EnrollmentPolicyWebService
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509EnrollmentPolicyWebService = opaque {
};
// --------------------------------------------------------
// Type: CX509PolicyServerListManager
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509PolicyServerListManager = opaque {
};
// --------------------------------------------------------
// Type: CX509PolicyServerUrl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509PolicyServerUrl = opaque {
};
// --------------------------------------------------------
// Type: CX509CertificateTemplateADWritable
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509CertificateTemplateADWritable = opaque {
};
// --------------------------------------------------------
// Type: CX509CertificateRevocationListEntry
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509CertificateRevocationListEntry = opaque {
};
// --------------------------------------------------------
// Type: CX509CertificateRevocationListEntries
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509CertificateRevocationListEntries = opaque {
};
// --------------------------------------------------------
// Type: CX509CertificateRevocationList
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509CertificateRevocationList = opaque {
};
// --------------------------------------------------------
// Type: CX509SCEPEnrollment
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509SCEPEnrollment = opaque {
};
// --------------------------------------------------------
// Type: CX509SCEPEnrollmentHelper
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509SCEPEnrollmentHelper = opaque {
};
// --------------------------------------------------------
// Type: CCertGetConfig
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertGetConfig = opaque {
};
// --------------------------------------------------------
// Type: CCertConfig
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertConfig = opaque {
};
// --------------------------------------------------------
// Type: CCertRequest
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertRequest = opaque {
};
// --------------------------------------------------------
// Type: CCertServerPolicy
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertServerPolicy = opaque {
};
// --------------------------------------------------------
// Type: CCertServerExit
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertServerExit = opaque {
};
// --------------------------------------------------------
// Type: ICertServerPolicy
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertServerPolicy = *opaque{
    // TODO: Method 'SetContext'
    // TODO: Method 'GetRequestProperty'
    // TODO: Method 'GetRequestAttribute'
    // TODO: Method 'GetCertificateProperty'
    // TODO: Method 'SetCertificateProperty'
    // TODO: Method 'GetCertificateExtension'
    // TODO: Method 'GetCertificateExtensionFlags'
    // TODO: Method 'SetCertificateExtension'
    // TODO: Method 'EnumerateExtensionsSetup'
    // TODO: Method 'EnumerateExtensions'
    // TODO: Method 'EnumerateExtensionsClose'
    // TODO: Method 'EnumerateAttributesSetup'
    // TODO: Method 'EnumerateAttributes'
    // TODO: Method 'EnumerateAttributesClose'
};
// --------------------------------------------------------
// Type: ICertServerExit
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertServerExit = *opaque{
    // TODO: Method 'SetContext'
    // TODO: Method 'GetRequestProperty'
    // TODO: Method 'GetRequestAttribute'
    // TODO: Method 'GetCertificateProperty'
    // TODO: Method 'GetCertificateExtension'
    // TODO: Method 'GetCertificateExtensionFlags'
    // TODO: Method 'EnumerateExtensionsSetup'
    // TODO: Method 'EnumerateExtensions'
    // TODO: Method 'EnumerateExtensionsClose'
    // TODO: Method 'EnumerateAttributesSetup'
    // TODO: Method 'EnumerateAttributes'
    // TODO: Method 'EnumerateAttributesClose'
};
// --------------------------------------------------------
// Type: ICertGetConfig
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertGetConfig = *opaque{
    // TODO: Method 'GetConfig'
};
// --------------------------------------------------------
// Type: ICertConfig
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertConfig = *opaque{
    // TODO: Method 'Reset'
    // TODO: Method 'Next'
    // TODO: Method 'GetField'
    // TODO: Method 'GetConfig'
};
// --------------------------------------------------------
// Type: ICertConfig2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertConfig2 = *opaque{
    // TODO: Method 'SetSharedFolder'
};
// --------------------------------------------------------
// Type: ICertRequest
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertRequest = *opaque{
    // TODO: Method 'Submit'
    // TODO: Method 'RetrievePending'
    // TODO: Method 'GetLastStatus'
    // TODO: Method 'GetRequestId'
    // TODO: Method 'GetDispositionMessage'
    // TODO: Method 'GetCACertificate'
    // TODO: Method 'GetCertificate'
};
// --------------------------------------------------------
// Type: ICertRequest2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertRequest2 = *opaque{
    // TODO: Method 'GetIssuedCertificate'
    // TODO: Method 'GetErrorMessageText'
    // TODO: Method 'GetCAProperty'
    // TODO: Method 'GetCAPropertyFlags'
    // TODO: Method 'GetCAPropertyDisplayName'
    // TODO: Method 'GetFullResponseProperty'
};
// --------------------------------------------------------
// Type: X509EnrollmentAuthFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509EnrollmentAuthFlags = *opaque{
};
// --------------------------------------------------------
// Type: ICertRequest3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertRequest3 = *opaque{
    // TODO: Method 'SetCredential'
    // TODO: Method 'GetRequestIdString'
    // TODO: Method 'GetIssuedCertificate2'
    // TODO: Method 'GetRefreshPolicy'
};
// --------------------------------------------------------
// Type: ICertManageModule
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertManageModule = *opaque{
    // TODO: Method 'GetProperty'
    // TODO: Method 'SetProperty'
    // TODO: Method 'Configure'
};
// --------------------------------------------------------
// Type: CERTTRANSBLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERTTRANSBLOB = extern struct {
    cb: {"kind":"UInt32"},
    pb: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: CERTVIEWRESTRICTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERTVIEWRESTRICTION = extern struct {
    ColumnIndex: {"kind":"UInt32"},
    SeekOperator: {"kind":"Int32"},
    SortOrder: {"kind":"Int32"},
    pbValue: {"kind""Ptr","child":{"kind":"Byte"}},
    cbValue: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CSEDB_RSTMAPW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CSEDB_RSTMAPW = extern struct {
    pwszDatabaseName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszNewDatabaseName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: FNCERTSRVISSERVERONLINEW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNCERTSRVISSERVERONLINEW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FNCERTSRVBACKUPGETDYNAMICFILELISTW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNCERTSRVBACKUPGETDYNAMICFILELISTW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FNCERTSRVBACKUPPREPAREW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNCERTSRVBACKUPPREPAREW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FNCERTSRVBACKUPGETDATABASENAMESW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNCERTSRVBACKUPGETDATABASENAMESW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FNCERTSRVBACKUPOPENFILEW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNCERTSRVBACKUPOPENFILEW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FNCERTSRVBACKUPREAD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNCERTSRVBACKUPREAD = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FNCERTSRVBACKUPCLOSE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNCERTSRVBACKUPCLOSE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FNCERTSRVBACKUPGETBACKUPLOGSW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNCERTSRVBACKUPGETBACKUPLOGSW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FNCERTSRVBACKUPTRUNCATELOGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNCERTSRVBACKUPTRUNCATELOGS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FNCERTSRVBACKUPEND
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNCERTSRVBACKUPEND = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FNCERTSRVBACKUPFREE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNCERTSRVBACKUPFREE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FNCERTSRVRESTOREGETDATABASELOCATIONSW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNCERTSRVRESTOREGETDATABASELOCATIONSW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FNCERTSRVRESTOREPREPAREW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNCERTSRVRESTOREPREPAREW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FNCERTSRVRESTOREREGISTERW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNCERTSRVRESTOREREGISTERW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FNCERTSRVRESTOREREGISTERCOMPLETE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNCERTSRVRESTOREREGISTERCOMPLETE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FNCERTSRVRESTOREEND
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNCERTSRVRESTOREEND = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FNCERTSRVSERVERCONTROLW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNCERTSRVSERVERCONTROLW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ICertPolicy
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertPolicy = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'VerifyRequest'
    // TODO: Method 'GetDescription'
    // TODO: Method 'ShutDown'
};
// --------------------------------------------------------
// Type: ICertPolicy2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertPolicy2 = *opaque{
    // TODO: Method 'GetManageModule'
};
// --------------------------------------------------------
// Type: X509SCEPMessageType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509SCEPMessageType = *opaque{
};
// --------------------------------------------------------
// Type: X509SCEPDisposition
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509SCEPDisposition = *opaque{
};
// --------------------------------------------------------
// Type: X509SCEPFailInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509SCEPFailInfo = *opaque{
};
// --------------------------------------------------------
// Type: INDESPolicy
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const INDESPolicy = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'Uninitialize'
    // TODO: Method 'GenerateChallenge'
    // TODO: Method 'VerifyRequest'
    // TODO: Method 'Notify'
};
// --------------------------------------------------------
// Type: CERTENROLL_OBJECTID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CERTENROLL_OBJECTID = *opaque{
};
// --------------------------------------------------------
// Type: WebSecurityLevel
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WebSecurityLevel = *opaque{
};
// --------------------------------------------------------
// Type: EncodingType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EncodingType = *opaque{
};
// --------------------------------------------------------
// Type: PFXExportOptions
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFXExportOptions = *opaque{
};
// --------------------------------------------------------
// Type: ObjectIdGroupId
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ObjectIdGroupId = *opaque{
};
// --------------------------------------------------------
// Type: ObjectIdPublicKeyFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ObjectIdPublicKeyFlags = *opaque{
};
// --------------------------------------------------------
// Type: AlgorithmFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AlgorithmFlags = *opaque{
};
// --------------------------------------------------------
// Type: IObjectId
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IObjectId = *opaque{
    // TODO: Method 'InitializeFromName'
    // TODO: Method 'InitializeFromValue'
    // TODO: Method 'InitializeFromAlgorithmName'
    // TODO: Method 'get_Name'
    // TODO: Method 'get_FriendlyName'
    // TODO: Method 'put_FriendlyName'
    // TODO: Method 'get_Value'
    // TODO: Method 'GetAlgorithmName'
};
// --------------------------------------------------------
// Type: IObjectIds
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IObjectIds = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
    // TODO: Method 'AddRange'
};
// --------------------------------------------------------
// Type: IBinaryConverter
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IBinaryConverter = *opaque{
    // TODO: Method 'StringToString'
    // TODO: Method 'VariantByteArrayToString'
    // TODO: Method 'StringToVariantByteArray'
};
// --------------------------------------------------------
// Type: IBinaryConverter2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IBinaryConverter2 = *opaque{
    // TODO: Method 'StringArrayToVariantArray'
    // TODO: Method 'VariantArrayToStringArray'
};
// --------------------------------------------------------
// Type: X500NameFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X500NameFlags = *opaque{
};
// --------------------------------------------------------
// Type: IX500DistinguishedName
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX500DistinguishedName = *opaque{
    // TODO: Method 'Decode'
    // TODO: Method 'Encode'
    // TODO: Method 'get_Name'
    // TODO: Method 'get_EncodedName'
};
// --------------------------------------------------------
// Type: X509CertificateEnrollmentContext
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509CertificateEnrollmentContext = *opaque{
};
// --------------------------------------------------------
// Type: EnrollmentEnrollStatus
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EnrollmentEnrollStatus = *opaque{
};
// --------------------------------------------------------
// Type: EnrollmentSelectionStatus
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EnrollmentSelectionStatus = *opaque{
};
// --------------------------------------------------------
// Type: EnrollmentDisplayStatus
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EnrollmentDisplayStatus = *opaque{
};
// --------------------------------------------------------
// Type: IX509EnrollmentStatus
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509EnrollmentStatus = *opaque{
    // TODO: Method 'AppendText'
    // TODO: Method 'get_Text'
    // TODO: Method 'put_Text'
    // TODO: Method 'get_Selected'
    // TODO: Method 'put_Selected'
    // TODO: Method 'get_Display'
    // TODO: Method 'put_Display'
    // TODO: Method 'get_Status'
    // TODO: Method 'put_Status'
    // TODO: Method 'get_Error'
    // TODO: Method 'put_Error'
    // TODO: Method 'get_ErrorText'
};
// --------------------------------------------------------
// Type: X509ProviderType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509ProviderType = *opaque{
};
// --------------------------------------------------------
// Type: AlgorithmType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AlgorithmType = *opaque{
};
// --------------------------------------------------------
// Type: AlgorithmOperationFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AlgorithmOperationFlags = *opaque{
};
// --------------------------------------------------------
// Type: ICspAlgorithm
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICspAlgorithm = *opaque{
    // TODO: Method 'GetAlgorithmOid'
    // TODO: Method 'get_DefaultLength'
    // TODO: Method 'get_IncrementLength'
    // TODO: Method 'get_LongName'
    // TODO: Method 'get_Valid'
    // TODO: Method 'get_MaxLength'
    // TODO: Method 'get_MinLength'
    // TODO: Method 'get_Name'
    // TODO: Method 'get_Type'
    // TODO: Method 'get_Operations'
};
// --------------------------------------------------------
// Type: ICspAlgorithms
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICspAlgorithms = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
    // TODO: Method 'get_ItemByName'
    // TODO: Method 'get_IndexByObjectId'
};
// --------------------------------------------------------
// Type: X509KeySpec
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509KeySpec = *opaque{
};
// --------------------------------------------------------
// Type: ICspInformation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICspInformation = *opaque{
    // TODO: Method 'InitializeFromName'
    // TODO: Method 'InitializeFromType'
    // TODO: Method 'get_CspAlgorithms'
    // TODO: Method 'get_HasHardwareRandomNumberGenerator'
    // TODO: Method 'get_IsHardwareDevice'
    // TODO: Method 'get_IsRemovable'
    // TODO: Method 'get_IsSoftwareDevice'
    // TODO: Method 'get_Valid'
    // TODO: Method 'get_MaxKeyContainerNameLength'
    // TODO: Method 'get_Name'
    // TODO: Method 'get_Type'
    // TODO: Method 'get_Version'
    // TODO: Method 'get_KeySpec'
    // TODO: Method 'get_IsSmartCard'
    // TODO: Method 'GetDefaultSecurityDescriptor'
    // TODO: Method 'get_LegacyCsp'
    // TODO: Method 'GetCspStatusFromOperations'
};
// --------------------------------------------------------
// Type: ICspInformations
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICspInformations = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
    // TODO: Method 'AddAvailableCsps'
    // TODO: Method 'get_ItemByName'
    // TODO: Method 'GetCspStatusFromProviderName'
    // TODO: Method 'GetCspStatusesFromOperations'
    // TODO: Method 'GetEncryptionCspAlgorithms'
    // TODO: Method 'GetHashAlgorithms'
};
// --------------------------------------------------------
// Type: ICspStatus
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICspStatus = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_Ordinal'
    // TODO: Method 'put_Ordinal'
    // TODO: Method 'get_CspAlgorithm'
    // TODO: Method 'get_CspInformation'
    // TODO: Method 'get_EnrollmentStatus'
    // TODO: Method 'get_DisplayName'
};
// --------------------------------------------------------
// Type: ICspStatuses
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICspStatuses = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
    // TODO: Method 'get_ItemByName'
    // TODO: Method 'get_ItemByOrdinal'
    // TODO: Method 'get_ItemByOperations'
    // TODO: Method 'get_ItemByProvider'
};
// --------------------------------------------------------
// Type: KeyIdentifierHashAlgorithm
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KeyIdentifierHashAlgorithm = *opaque{
};
// --------------------------------------------------------
// Type: IX509PublicKey
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509PublicKey = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'InitializeFromEncodedPublicKeyInfo'
    // TODO: Method 'get_Algorithm'
    // TODO: Method 'get_Length'
    // TODO: Method 'get_EncodedKey'
    // TODO: Method 'get_EncodedParameters'
    // TODO: Method 'ComputeKeyIdentifier'
};
// --------------------------------------------------------
// Type: X509PrivateKeyExportFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509PrivateKeyExportFlags = *opaque{
};
// --------------------------------------------------------
// Type: X509PrivateKeyUsageFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509PrivateKeyUsageFlags = *opaque{
};
// --------------------------------------------------------
// Type: X509PrivateKeyProtection
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509PrivateKeyProtection = *opaque{
};
// --------------------------------------------------------
// Type: X509PrivateKeyVerify
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509PrivateKeyVerify = *opaque{
};
// --------------------------------------------------------
// Type: IX509PrivateKey
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509PrivateKey = *opaque{
    // TODO: Method 'Open'
    // TODO: Method 'Create'
    // TODO: Method 'Close'
    // TODO: Method 'Delete'
    // TODO: Method 'Verify'
    // TODO: Method 'Import'
    // TODO: Method 'Export'
    // TODO: Method 'ExportPublicKey'
    // TODO: Method 'get_ContainerName'
    // TODO: Method 'put_ContainerName'
    // TODO: Method 'get_ContainerNamePrefix'
    // TODO: Method 'put_ContainerNamePrefix'
    // TODO: Method 'get_ReaderName'
    // TODO: Method 'put_ReaderName'
    // TODO: Method 'get_CspInformations'
    // TODO: Method 'put_CspInformations'
    // TODO: Method 'get_CspStatus'
    // TODO: Method 'put_CspStatus'
    // TODO: Method 'get_ProviderName'
    // TODO: Method 'put_ProviderName'
    // TODO: Method 'get_ProviderType'
    // TODO: Method 'put_ProviderType'
    // TODO: Method 'get_LegacyCsp'
    // TODO: Method 'put_LegacyCsp'
    // TODO: Method 'get_Algorithm'
    // TODO: Method 'put_Algorithm'
    // TODO: Method 'get_KeySpec'
    // TODO: Method 'put_KeySpec'
    // TODO: Method 'get_Length'
    // TODO: Method 'put_Length'
    // TODO: Method 'get_ExportPolicy'
    // TODO: Method 'put_ExportPolicy'
    // TODO: Method 'get_KeyUsage'
    // TODO: Method 'put_KeyUsage'
    // TODO: Method 'get_KeyProtection'
    // TODO: Method 'put_KeyProtection'
    // TODO: Method 'get_MachineContext'
    // TODO: Method 'put_MachineContext'
    // TODO: Method 'get_SecurityDescriptor'
    // TODO: Method 'put_SecurityDescriptor'
    // TODO: Method 'get_Certificate'
    // TODO: Method 'put_Certificate'
    // TODO: Method 'get_UniqueContainerName'
    // TODO: Method 'get_Opened'
    // TODO: Method 'get_DefaultContainer'
    // TODO: Method 'get_Existing'
    // TODO: Method 'put_Existing'
    // TODO: Method 'get_Silent'
    // TODO: Method 'put_Silent'
    // TODO: Method 'get_ParentWindow'
    // TODO: Method 'put_ParentWindow'
    // TODO: Method 'get_UIContextMessage'
    // TODO: Method 'put_UIContextMessage'
    // TODO: Method 'put_Pin'
    // TODO: Method 'get_FriendlyName'
    // TODO: Method 'put_FriendlyName'
    // TODO: Method 'get_Description'
    // TODO: Method 'put_Description'
};
// --------------------------------------------------------
// Type: X509HardwareKeyUsageFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509HardwareKeyUsageFlags = *opaque{
};
// --------------------------------------------------------
// Type: X509KeyParametersExportType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509KeyParametersExportType = *opaque{
};
// --------------------------------------------------------
// Type: IX509PrivateKey2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509PrivateKey2 = *opaque{
    // TODO: Method 'get_HardwareKeyUsage'
    // TODO: Method 'put_HardwareKeyUsage'
    // TODO: Method 'get_AlternateStorageLocation'
    // TODO: Method 'put_AlternateStorageLocation'
    // TODO: Method 'get_AlgorithmName'
    // TODO: Method 'put_AlgorithmName'
    // TODO: Method 'get_AlgorithmParameters'
    // TODO: Method 'put_AlgorithmParameters'
    // TODO: Method 'get_ParametersExportType'
    // TODO: Method 'put_ParametersExportType'
};
// --------------------------------------------------------
// Type: IX509EndorsementKey
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509EndorsementKey = *opaque{
    // TODO: Method 'get_ProviderName'
    // TODO: Method 'put_ProviderName'
    // TODO: Method 'get_Length'
    // TODO: Method 'get_Opened'
    // TODO: Method 'AddCertificate'
    // TODO: Method 'RemoveCertificate'
    // TODO: Method 'GetCertificateByIndex'
    // TODO: Method 'GetCertificateCount'
    // TODO: Method 'ExportPublicKey'
    // TODO: Method 'Open'
    // TODO: Method 'Close'
};
// --------------------------------------------------------
// Type: IX509Extension
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509Extension = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_ObjectId'
    // TODO: Method 'get_RawData'
    // TODO: Method 'get_Critical'
    // TODO: Method 'put_Critical'
};
// --------------------------------------------------------
// Type: IX509Extensions
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509Extensions = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
    // TODO: Method 'get_IndexByObjectId'
    // TODO: Method 'AddRange'
};
// --------------------------------------------------------
// Type: X509KeyUsageFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509KeyUsageFlags = *opaque{
};
// --------------------------------------------------------
// Type: IX509ExtensionKeyUsage
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509ExtensionKeyUsage = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_KeyUsage'
};
// --------------------------------------------------------
// Type: IX509ExtensionEnhancedKeyUsage
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509ExtensionEnhancedKeyUsage = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_EnhancedKeyUsage'
};
// --------------------------------------------------------
// Type: IX509ExtensionTemplateName
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509ExtensionTemplateName = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_TemplateName'
};
// --------------------------------------------------------
// Type: IX509ExtensionTemplate
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509ExtensionTemplate = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_TemplateOid'
    // TODO: Method 'get_MajorVersion'
    // TODO: Method 'get_MinorVersion'
};
// --------------------------------------------------------
// Type: AlternativeNameType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AlternativeNameType = *opaque{
};
// --------------------------------------------------------
// Type: IAlternativeName
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAlternativeName = *opaque{
    // TODO: Method 'InitializeFromString'
    // TODO: Method 'InitializeFromRawData'
    // TODO: Method 'InitializeFromOtherName'
    // TODO: Method 'get_Type'
    // TODO: Method 'get_StrValue'
    // TODO: Method 'get_ObjectId'
    // TODO: Method 'get_RawData'
};
// --------------------------------------------------------
// Type: IAlternativeNames
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAlternativeNames = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
};
// --------------------------------------------------------
// Type: IX509ExtensionAlternativeNames
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509ExtensionAlternativeNames = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_AlternativeNames'
};
// --------------------------------------------------------
// Type: IX509ExtensionBasicConstraints
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509ExtensionBasicConstraints = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_IsCA'
    // TODO: Method 'get_PathLenConstraint'
};
// --------------------------------------------------------
// Type: IX509ExtensionSubjectKeyIdentifier
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509ExtensionSubjectKeyIdentifier = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_SubjectKeyIdentifier'
};
// --------------------------------------------------------
// Type: IX509ExtensionAuthorityKeyIdentifier
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509ExtensionAuthorityKeyIdentifier = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_AuthorityKeyIdentifier'
};
// --------------------------------------------------------
// Type: ISmimeCapability
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISmimeCapability = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_ObjectId'
    // TODO: Method 'get_BitCount'
};
// --------------------------------------------------------
// Type: ISmimeCapabilities
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISmimeCapabilities = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
    // TODO: Method 'AddFromCsp'
    // TODO: Method 'AddAvailableSmimeCapabilities'
};
// --------------------------------------------------------
// Type: IX509ExtensionSmimeCapabilities
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509ExtensionSmimeCapabilities = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_SmimeCapabilities'
};
// --------------------------------------------------------
// Type: PolicyQualifierType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PolicyQualifierType = *opaque{
};
// --------------------------------------------------------
// Type: IPolicyQualifier
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPolicyQualifier = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'get_ObjectId'
    // TODO: Method 'get_Qualifier'
    // TODO: Method 'get_Type'
    // TODO: Method 'get_RawData'
};
// --------------------------------------------------------
// Type: IPolicyQualifiers
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPolicyQualifiers = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
};
// --------------------------------------------------------
// Type: ICertificatePolicy
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertificatePolicy = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_ObjectId'
    // TODO: Method 'get_PolicyQualifiers'
};
// --------------------------------------------------------
// Type: ICertificatePolicies
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertificatePolicies = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
};
// --------------------------------------------------------
// Type: IX509ExtensionCertificatePolicies
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509ExtensionCertificatePolicies = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_Policies'
};
// --------------------------------------------------------
// Type: IX509ExtensionMSApplicationPolicies
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509ExtensionMSApplicationPolicies = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_Policies'
};
// --------------------------------------------------------
// Type: IX509Attribute
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509Attribute = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_ObjectId'
    // TODO: Method 'get_RawData'
};
// --------------------------------------------------------
// Type: IX509Attributes
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509Attributes = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
};
// --------------------------------------------------------
// Type: IX509AttributeExtensions
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509AttributeExtensions = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_X509Extensions'
};
// --------------------------------------------------------
// Type: RequestClientInfoClientId
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RequestClientInfoClientId = *opaque{
};
// --------------------------------------------------------
// Type: IX509AttributeClientId
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509AttributeClientId = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_ClientId'
    // TODO: Method 'get_MachineDnsName'
    // TODO: Method 'get_UserSamName'
    // TODO: Method 'get_ProcessName'
};
// --------------------------------------------------------
// Type: IX509AttributeRenewalCertificate
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509AttributeRenewalCertificate = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_RenewalCertificate'
};
// --------------------------------------------------------
// Type: IX509AttributeArchiveKey
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509AttributeArchiveKey = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_EncryptedKeyBlob'
    // TODO: Method 'get_EncryptionAlgorithm'
    // TODO: Method 'get_EncryptionStrength'
};
// --------------------------------------------------------
// Type: IX509AttributeArchiveKeyHash
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509AttributeArchiveKeyHash = *opaque{
    // TODO: Method 'InitializeEncodeFromEncryptedKeyBlob'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_EncryptedKeyHashBlob'
};
// --------------------------------------------------------
// Type: IX509AttributeOSVersion
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509AttributeOSVersion = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_OSVersion'
};
// --------------------------------------------------------
// Type: IX509AttributeCspProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509AttributeCspProvider = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_KeySpec'
    // TODO: Method 'get_ProviderName'
    // TODO: Method 'get_Signature'
};
// --------------------------------------------------------
// Type: ICryptAttribute
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICryptAttribute = *opaque{
    // TODO: Method 'InitializeFromObjectId'
    // TODO: Method 'InitializeFromValues'
    // TODO: Method 'get_ObjectId'
    // TODO: Method 'get_Values'
};
// --------------------------------------------------------
// Type: ICryptAttributes
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICryptAttributes = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
    // TODO: Method 'get_IndexByObjectId'
    // TODO: Method 'AddRange'
};
// --------------------------------------------------------
// Type: CERTENROLL_PROPERTYID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CERTENROLL_PROPERTYID = *opaque{
};
// --------------------------------------------------------
// Type: ICertProperty
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertProperty = *opaque{
    // TODO: Method 'InitializeFromCertificate'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_PropertyId'
    // TODO: Method 'put_PropertyId'
    // TODO: Method 'get_RawData'
    // TODO: Method 'RemoveFromCertificate'
    // TODO: Method 'SetValueOnCertificate'
};
// --------------------------------------------------------
// Type: ICertProperties
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertProperties = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
    // TODO: Method 'InitializeFromCertificate'
};
// --------------------------------------------------------
// Type: ICertPropertyFriendlyName
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertPropertyFriendlyName = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_FriendlyName'
};
// --------------------------------------------------------
// Type: ICertPropertyDescription
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertPropertyDescription = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_Description'
};
// --------------------------------------------------------
// Type: ICertPropertyAutoEnroll
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertPropertyAutoEnroll = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_TemplateName'
};
// --------------------------------------------------------
// Type: ICertPropertyRequestOriginator
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertPropertyRequestOriginator = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'InitializeFromLocalRequestOriginator'
    // TODO: Method 'get_RequestOriginator'
};
// --------------------------------------------------------
// Type: ICertPropertySHA1Hash
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertPropertySHA1Hash = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_SHA1Hash'
};
// --------------------------------------------------------
// Type: ICertPropertyKeyProvInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertPropertyKeyProvInfo = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_PrivateKey'
};
// --------------------------------------------------------
// Type: ICertPropertyArchived
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertPropertyArchived = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_Archived'
};
// --------------------------------------------------------
// Type: ICertPropertyBackedUp
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertPropertyBackedUp = *opaque{
    // TODO: Method 'InitializeFromCurrentTime'
    // TODO: Method 'Initialize'
    // TODO: Method 'get_BackedUpValue'
    // TODO: Method 'get_BackedUpTime'
};
// --------------------------------------------------------
// Type: ICertPropertyEnrollment
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertPropertyEnrollment = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_RequestId'
    // TODO: Method 'get_CADnsName'
    // TODO: Method 'get_CAName'
    // TODO: Method 'get_FriendlyName'
};
// --------------------------------------------------------
// Type: ICertPropertyRenewal
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertPropertyRenewal = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'InitializeFromCertificateHash'
    // TODO: Method 'get_Renewal'
};
// --------------------------------------------------------
// Type: ICertPropertyArchivedKeyHash
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertPropertyArchivedKeyHash = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_ArchivedKeyHash'
};
// --------------------------------------------------------
// Type: EnrollmentPolicyServerPropertyFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EnrollmentPolicyServerPropertyFlags = *opaque{
};
// --------------------------------------------------------
// Type: PolicyServerUrlFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PolicyServerUrlFlags = *opaque{
};
// --------------------------------------------------------
// Type: ICertPropertyEnrollmentPolicyServer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertPropertyEnrollmentPolicyServer = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'GetPolicyServerUrl'
    // TODO: Method 'GetPolicyServerId'
    // TODO: Method 'GetEnrollmentServerUrl'
    // TODO: Method 'GetRequestIdString'
    // TODO: Method 'GetPropertyFlags'
    // TODO: Method 'GetUrlFlags'
    // TODO: Method 'GetAuthentication'
    // TODO: Method 'GetEnrollmentServerAuthentication'
};
// --------------------------------------------------------
// Type: IX509SignatureInformation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509SignatureInformation = *opaque{
    // TODO: Method 'get_HashAlgorithm'
    // TODO: Method 'put_HashAlgorithm'
    // TODO: Method 'get_PublicKeyAlgorithm'
    // TODO: Method 'put_PublicKeyAlgorithm'
    // TODO: Method 'get_Parameters'
    // TODO: Method 'put_Parameters'
    // TODO: Method 'get_AlternateSignatureAlgorithm'
    // TODO: Method 'put_AlternateSignatureAlgorithm'
    // TODO: Method 'get_AlternateSignatureAlgorithmSet'
    // TODO: Method 'get_NullSigned'
    // TODO: Method 'put_NullSigned'
    // TODO: Method 'GetSignatureAlgorithm'
    // TODO: Method 'SetDefaultValues'
};
// --------------------------------------------------------
// Type: ISignerCertificate
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISignerCertificate = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_Certificate'
    // TODO: Method 'get_PrivateKey'
    // TODO: Method 'get_Silent'
    // TODO: Method 'put_Silent'
    // TODO: Method 'get_ParentWindow'
    // TODO: Method 'put_ParentWindow'
    // TODO: Method 'get_UIContextMessage'
    // TODO: Method 'put_UIContextMessage'
    // TODO: Method 'put_Pin'
    // TODO: Method 'get_SignatureInformation'
};
// --------------------------------------------------------
// Type: ISignerCertificates
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISignerCertificates = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
    // TODO: Method 'Find'
};
// --------------------------------------------------------
// Type: IX509NameValuePair
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509NameValuePair = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_Value'
    // TODO: Method 'get_Name'
};
// --------------------------------------------------------
// Type: IX509NameValuePairs
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509NameValuePairs = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
};
// --------------------------------------------------------
// Type: EnrollmentTemplateProperty
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EnrollmentTemplateProperty = *opaque{
};
// --------------------------------------------------------
// Type: IX509CertificateTemplate
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509CertificateTemplate = *opaque{
    // TODO: Method 'get_Property'
};
// --------------------------------------------------------
// Type: IX509CertificateTemplates
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509CertificateTemplates = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
    // TODO: Method 'get_ItemByName'
    // TODO: Method 'get_ItemByOid'
};
// --------------------------------------------------------
// Type: CommitTemplateFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CommitTemplateFlags = *opaque{
};
// --------------------------------------------------------
// Type: IX509CertificateTemplateWritable
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509CertificateTemplateWritable = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'Commit'
    // TODO: Method 'get_Property'
    // TODO: Method 'put_Property'
    // TODO: Method 'get_Template'
};
// --------------------------------------------------------
// Type: EnrollmentCAProperty
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EnrollmentCAProperty = *opaque{
};
// --------------------------------------------------------
// Type: ICertificationAuthority
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertificationAuthority = *opaque{
    // TODO: Method 'get_Property'
};
// --------------------------------------------------------
// Type: ICertificationAuthorities
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertificationAuthorities = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
    // TODO: Method 'ComputeSiteCosts'
    // TODO: Method 'get_ItemByName'
};
// --------------------------------------------------------
// Type: X509EnrollmentPolicyLoadOption
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509EnrollmentPolicyLoadOption = *opaque{
};
// --------------------------------------------------------
// Type: EnrollmentPolicyFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EnrollmentPolicyFlags = *opaque{
};
// --------------------------------------------------------
// Type: PolicyServerUrlPropertyID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PolicyServerUrlPropertyID = *opaque{
};
// --------------------------------------------------------
// Type: X509EnrollmentPolicyExportFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509EnrollmentPolicyExportFlags = *opaque{
};
// --------------------------------------------------------
// Type: IX509EnrollmentPolicyServer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509EnrollmentPolicyServer = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'LoadPolicy'
    // TODO: Method 'GetTemplates'
    // TODO: Method 'GetCAsForTemplate'
    // TODO: Method 'GetCAs'
    // TODO: Method 'Validate'
    // TODO: Method 'GetCustomOids'
    // TODO: Method 'GetNextUpdateTime'
    // TODO: Method 'GetLastUpdateTime'
    // TODO: Method 'GetPolicyServerUrl'
    // TODO: Method 'GetPolicyServerId'
    // TODO: Method 'GetFriendlyName'
    // TODO: Method 'GetIsDefaultCEP'
    // TODO: Method 'GetUseClientId'
    // TODO: Method 'GetAllowUnTrustedCA'
    // TODO: Method 'GetCachePath'
    // TODO: Method 'GetCacheDir'
    // TODO: Method 'GetAuthFlags'
    // TODO: Method 'SetCredential'
    // TODO: Method 'QueryChanges'
    // TODO: Method 'InitializeImport'
    // TODO: Method 'Export'
    // TODO: Method 'get_Cost'
    // TODO: Method 'put_Cost'
};
// --------------------------------------------------------
// Type: IX509PolicyServerUrl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509PolicyServerUrl = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_Url'
    // TODO: Method 'put_Url'
    // TODO: Method 'get_Default'
    // TODO: Method 'put_Default'
    // TODO: Method 'get_Flags'
    // TODO: Method 'put_Flags'
    // TODO: Method 'get_AuthFlags'
    // TODO: Method 'put_AuthFlags'
    // TODO: Method 'get_Cost'
    // TODO: Method 'put_Cost'
    // TODO: Method 'GetStringProperty'
    // TODO: Method 'SetStringProperty'
    // TODO: Method 'UpdateRegistry'
    // TODO: Method 'RemoveFromRegistry'
};
// --------------------------------------------------------
// Type: IX509PolicyServerListManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509PolicyServerListManager = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
    // TODO: Method 'Initialize'
};
// --------------------------------------------------------
// Type: X509RequestType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509RequestType = *opaque{
};
// --------------------------------------------------------
// Type: X509RequestInheritOptions
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509RequestInheritOptions = *opaque{
};
// --------------------------------------------------------
// Type: InnerRequestLevel
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const InnerRequestLevel = *opaque{
};
// --------------------------------------------------------
// Type: IX509CertificateRequest
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509CertificateRequest = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'Encode'
    // TODO: Method 'ResetForEncode'
    // TODO: Method 'GetInnerRequest'
    // TODO: Method 'get_Type'
    // TODO: Method 'get_EnrollmentContext'
    // TODO: Method 'get_Silent'
    // TODO: Method 'put_Silent'
    // TODO: Method 'get_ParentWindow'
    // TODO: Method 'put_ParentWindow'
    // TODO: Method 'get_UIContextMessage'
    // TODO: Method 'put_UIContextMessage'
    // TODO: Method 'get_SuppressDefaults'
    // TODO: Method 'put_SuppressDefaults'
    // TODO: Method 'get_RenewalCertificate'
    // TODO: Method 'put_RenewalCertificate'
    // TODO: Method 'get_ClientId'
    // TODO: Method 'put_ClientId'
    // TODO: Method 'get_CspInformations'
    // TODO: Method 'put_CspInformations'
    // TODO: Method 'get_HashAlgorithm'
    // TODO: Method 'put_HashAlgorithm'
    // TODO: Method 'get_AlternateSignatureAlgorithm'
    // TODO: Method 'put_AlternateSignatureAlgorithm'
    // TODO: Method 'get_RawData'
};
// --------------------------------------------------------
// Type: Pkcs10AllowedSignatureTypes
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const Pkcs10AllowedSignatureTypes = *opaque{
};
// --------------------------------------------------------
// Type: IX509CertificateRequestPkcs10
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509CertificateRequestPkcs10 = *opaque{
    // TODO: Method 'InitializeFromTemplateName'
    // TODO: Method 'InitializeFromPrivateKey'
    // TODO: Method 'InitializeFromPublicKey'
    // TODO: Method 'InitializeFromCertificate'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'CheckSignature'
    // TODO: Method 'IsSmartCard'
    // TODO: Method 'get_TemplateObjectId'
    // TODO: Method 'get_PublicKey'
    // TODO: Method 'get_PrivateKey'
    // TODO: Method 'get_NullSigned'
    // TODO: Method 'get_ReuseKey'
    // TODO: Method 'get_OldCertificate'
    // TODO: Method 'get_Subject'
    // TODO: Method 'put_Subject'
    // TODO: Method 'get_CspStatuses'
    // TODO: Method 'get_SmimeCapabilities'
    // TODO: Method 'put_SmimeCapabilities'
    // TODO: Method 'get_SignatureInformation'
    // TODO: Method 'get_KeyContainerNamePrefix'
    // TODO: Method 'put_KeyContainerNamePrefix'
    // TODO: Method 'get_CryptAttributes'
    // TODO: Method 'get_X509Extensions'
    // TODO: Method 'get_CriticalExtensions'
    // TODO: Method 'get_SuppressOids'
    // TODO: Method 'get_RawDataToBeSigned'
    // TODO: Method 'get_Signature'
    // TODO: Method 'GetCspStatuses'
};
// --------------------------------------------------------
// Type: IX509CertificateRequestPkcs10V2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509CertificateRequestPkcs10V2 = *opaque{
    // TODO: Method 'InitializeFromTemplate'
    // TODO: Method 'InitializeFromPrivateKeyTemplate'
    // TODO: Method 'InitializeFromPublicKeyTemplate'
    // TODO: Method 'get_PolicyServer'
    // TODO: Method 'get_Template'
};
// --------------------------------------------------------
// Type: IX509CertificateRequestPkcs10V3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509CertificateRequestPkcs10V3 = *opaque{
    // TODO: Method 'get_AttestPrivateKey'
    // TODO: Method 'put_AttestPrivateKey'
    // TODO: Method 'get_AttestationEncryptionCertificate'
    // TODO: Method 'put_AttestationEncryptionCertificate'
    // TODO: Method 'get_EncryptionAlgorithm'
    // TODO: Method 'put_EncryptionAlgorithm'
    // TODO: Method 'get_EncryptionStrength'
    // TODO: Method 'put_EncryptionStrength'
    // TODO: Method 'get_ChallengePassword'
    // TODO: Method 'put_ChallengePassword'
    // TODO: Method 'get_NameValuePairs'
};
// --------------------------------------------------------
// Type: KeyAttestationClaimType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KeyAttestationClaimType = *opaque{
};
// --------------------------------------------------------
// Type: IX509CertificateRequestPkcs10V4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509CertificateRequestPkcs10V4 = *opaque{
    // TODO: Method 'get_ClaimType'
    // TODO: Method 'put_ClaimType'
    // TODO: Method 'get_AttestPrivateKeyPreferred'
    // TODO: Method 'put_AttestPrivateKeyPreferred'
};
// --------------------------------------------------------
// Type: IX509CertificateRequestCertificate
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509CertificateRequestCertificate = *opaque{
    // TODO: Method 'CheckPublicKeySignature'
    // TODO: Method 'get_Issuer'
    // TODO: Method 'put_Issuer'
    // TODO: Method 'get_NotBefore'
    // TODO: Method 'put_NotBefore'
    // TODO: Method 'get_NotAfter'
    // TODO: Method 'put_NotAfter'
    // TODO: Method 'get_SerialNumber'
    // TODO: Method 'put_SerialNumber'
    // TODO: Method 'get_SignerCertificate'
    // TODO: Method 'put_SignerCertificate'
};
// --------------------------------------------------------
// Type: IX509CertificateRequestCertificate2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509CertificateRequestCertificate2 = *opaque{
    // TODO: Method 'InitializeFromTemplate'
    // TODO: Method 'InitializeFromPrivateKeyTemplate'
    // TODO: Method 'get_PolicyServer'
    // TODO: Method 'get_Template'
};
// --------------------------------------------------------
// Type: IX509CertificateRequestPkcs7
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509CertificateRequestPkcs7 = *opaque{
    // TODO: Method 'InitializeFromTemplateName'
    // TODO: Method 'InitializeFromCertificate'
    // TODO: Method 'InitializeFromInnerRequest'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_RequesterName'
    // TODO: Method 'put_RequesterName'
    // TODO: Method 'get_SignerCertificate'
    // TODO: Method 'put_SignerCertificate'
};
// --------------------------------------------------------
// Type: IX509CertificateRequestPkcs7V2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509CertificateRequestPkcs7V2 = *opaque{
    // TODO: Method 'InitializeFromTemplate'
    // TODO: Method 'get_PolicyServer'
    // TODO: Method 'get_Template'
    // TODO: Method 'CheckCertificateSignature'
};
// --------------------------------------------------------
// Type: IX509CertificateRequestCmc
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509CertificateRequestCmc = *opaque{
    // TODO: Method 'InitializeFromInnerRequestTemplateName'
    // TODO: Method 'get_TemplateObjectId'
    // TODO: Method 'get_NullSigned'
    // TODO: Method 'get_CryptAttributes'
    // TODO: Method 'get_NameValuePairs'
    // TODO: Method 'get_X509Extensions'
    // TODO: Method 'get_CriticalExtensions'
    // TODO: Method 'get_SuppressOids'
    // TODO: Method 'get_TransactionId'
    // TODO: Method 'put_TransactionId'
    // TODO: Method 'get_SenderNonce'
    // TODO: Method 'put_SenderNonce'
    // TODO: Method 'get_SignatureInformation'
    // TODO: Method 'get_ArchivePrivateKey'
    // TODO: Method 'put_ArchivePrivateKey'
    // TODO: Method 'get_KeyArchivalCertificate'
    // TODO: Method 'put_KeyArchivalCertificate'
    // TODO: Method 'get_EncryptionAlgorithm'
    // TODO: Method 'put_EncryptionAlgorithm'
    // TODO: Method 'get_EncryptionStrength'
    // TODO: Method 'put_EncryptionStrength'
    // TODO: Method 'get_EncryptedKeyHash'
    // TODO: Method 'get_SignerCertificates'
};
// --------------------------------------------------------
// Type: IX509CertificateRequestCmc2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509CertificateRequestCmc2 = *opaque{
    // TODO: Method 'InitializeFromTemplate'
    // TODO: Method 'InitializeFromInnerRequestTemplate'
    // TODO: Method 'get_PolicyServer'
    // TODO: Method 'get_Template'
    // TODO: Method 'CheckSignature'
    // TODO: Method 'CheckCertificateSignature'
};
// --------------------------------------------------------
// Type: InstallResponseRestrictionFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const InstallResponseRestrictionFlags = *opaque{
};
// --------------------------------------------------------
// Type: IX509Enrollment
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509Enrollment = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'InitializeFromTemplateName'
    // TODO: Method 'InitializeFromRequest'
    // TODO: Method 'CreateRequest'
    // TODO: Method 'Enroll'
    // TODO: Method 'InstallResponse'
    // TODO: Method 'CreatePFX'
    // TODO: Method 'get_Request'
    // TODO: Method 'get_Silent'
    // TODO: Method 'put_Silent'
    // TODO: Method 'get_ParentWindow'
    // TODO: Method 'put_ParentWindow'
    // TODO: Method 'get_NameValuePairs'
    // TODO: Method 'get_EnrollmentContext'
    // TODO: Method 'get_Status'
    // TODO: Method 'get_Certificate'
    // TODO: Method 'get_Response'
    // TODO: Method 'get_CertificateFriendlyName'
    // TODO: Method 'put_CertificateFriendlyName'
    // TODO: Method 'get_CertificateDescription'
    // TODO: Method 'put_CertificateDescription'
    // TODO: Method 'get_RequestId'
    // TODO: Method 'get_CAConfigString'
};
// --------------------------------------------------------
// Type: IX509Enrollment2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509Enrollment2 = *opaque{
    // TODO: Method 'InitializeFromTemplate'
    // TODO: Method 'InstallResponse2'
    // TODO: Method 'get_PolicyServer'
    // TODO: Method 'get_Template'
    // TODO: Method 'get_RequestIdString'
};
// --------------------------------------------------------
// Type: WebEnrollmentFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WebEnrollmentFlags = *opaque{
};
// --------------------------------------------------------
// Type: IX509EnrollmentHelper
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509EnrollmentHelper = *opaque{
    // TODO: Method 'AddPolicyServer'
    // TODO: Method 'AddEnrollmentServer'
    // TODO: Method 'Enroll'
    // TODO: Method 'Initialize'
};
// --------------------------------------------------------
// Type: IX509EnrollmentWebClassFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509EnrollmentWebClassFactory = *opaque{
    // TODO: Method 'CreateObject'
};
// --------------------------------------------------------
// Type: IX509MachineEnrollmentFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509MachineEnrollmentFactory = *opaque{
    // TODO: Method 'CreateObject'
};
// --------------------------------------------------------
// Type: CRLRevocationReason
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CRLRevocationReason = *opaque{
};
// --------------------------------------------------------
// Type: IX509CertificateRevocationListEntry
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509CertificateRevocationListEntry = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_SerialNumber'
    // TODO: Method 'get_RevocationDate'
    // TODO: Method 'get_RevocationReason'
    // TODO: Method 'put_RevocationReason'
    // TODO: Method 'get_X509Extensions'
    // TODO: Method 'get_CriticalExtensions'
};
// --------------------------------------------------------
// Type: IX509CertificateRevocationListEntries
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509CertificateRevocationListEntries = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
    // TODO: Method 'get_IndexBySerialNumber'
    // TODO: Method 'AddRange'
};
// --------------------------------------------------------
// Type: IX509CertificateRevocationList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509CertificateRevocationList = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'Encode'
    // TODO: Method 'ResetForEncode'
    // TODO: Method 'CheckPublicKeySignature'
    // TODO: Method 'CheckSignature'
    // TODO: Method 'get_Issuer'
    // TODO: Method 'put_Issuer'
    // TODO: Method 'get_ThisUpdate'
    // TODO: Method 'put_ThisUpdate'
    // TODO: Method 'get_NextUpdate'
    // TODO: Method 'put_NextUpdate'
    // TODO: Method 'get_X509CRLEntries'
    // TODO: Method 'get_X509Extensions'
    // TODO: Method 'get_CriticalExtensions'
    // TODO: Method 'get_SignerCertificate'
    // TODO: Method 'put_SignerCertificate'
    // TODO: Method 'get_CRLNumber'
    // TODO: Method 'put_CRLNumber'
    // TODO: Method 'get_CAVersion'
    // TODO: Method 'put_CAVersion'
    // TODO: Method 'get_BaseCRL'
    // TODO: Method 'get_NullSigned'
    // TODO: Method 'get_HashAlgorithm'
    // TODO: Method 'put_HashAlgorithm'
    // TODO: Method 'get_AlternateSignatureAlgorithm'
    // TODO: Method 'put_AlternateSignatureAlgorithm'
    // TODO: Method 'get_SignatureInformation'
    // TODO: Method 'get_RawData'
    // TODO: Method 'get_RawDataToBeSigned'
    // TODO: Method 'get_Signature'
};
// --------------------------------------------------------
// Type: ICertificateAttestationChallenge
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertificateAttestationChallenge = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'DecryptChallenge'
    // TODO: Method 'get_RequestID'
};
// --------------------------------------------------------
// Type: ICertificateAttestationChallenge2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertificateAttestationChallenge2 = *opaque{
    // TODO: Method 'put_KeyContainerName'
    // TODO: Method 'put_KeyBlob'
};
// --------------------------------------------------------
// Type: IX509SCEPEnrollment
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509SCEPEnrollment = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'InitializeForPending'
    // TODO: Method 'CreateRequestMessage'
    // TODO: Method 'CreateRetrievePendingMessage'
    // TODO: Method 'CreateRetrieveCertificateMessage'
    // TODO: Method 'ProcessResponseMessage'
    // TODO: Method 'put_ServerCapabilities'
    // TODO: Method 'get_FailInfo'
    // TODO: Method 'get_SignerCertificate'
    // TODO: Method 'put_SignerCertificate'
    // TODO: Method 'get_OldCertificate'
    // TODO: Method 'put_OldCertificate'
    // TODO: Method 'get_TransactionId'
    // TODO: Method 'put_TransactionId'
    // TODO: Method 'get_Request'
    // TODO: Method 'get_CertificateFriendlyName'
    // TODO: Method 'put_CertificateFriendlyName'
    // TODO: Method 'get_Status'
    // TODO: Method 'get_Certificate'
    // TODO: Method 'get_Silent'
    // TODO: Method 'put_Silent'
    // TODO: Method 'DeleteRequest'
};
// --------------------------------------------------------
// Type: X509SCEPProcessMessageFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509SCEPProcessMessageFlags = *opaque{
};
// --------------------------------------------------------
// Type: DelayRetryAction
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DelayRetryAction = *opaque{
};
// --------------------------------------------------------
// Type: IX509SCEPEnrollment2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509SCEPEnrollment2 = *opaque{
    // TODO: Method 'CreateChallengeAnswerMessage'
    // TODO: Method 'ProcessResponseMessage2'
    // TODO: Method 'get_ResultMessageText'
    // TODO: Method 'get_DelayRetry'
    // TODO: Method 'get_ActivityId'
    // TODO: Method 'put_ActivityId'
};
// --------------------------------------------------------
// Type: IX509SCEPEnrollmentHelper
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509SCEPEnrollmentHelper = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'InitializeForPending'
    // TODO: Method 'Enroll'
    // TODO: Method 'FetchPending'
    // TODO: Method 'get_X509SCEPEnrollment'
    // TODO: Method 'get_ResultMessageText'
};
// --------------------------------------------------------
// Type: X509CertificateTemplateGeneralFlag
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509CertificateTemplateGeneralFlag = *opaque{
};
// --------------------------------------------------------
// Type: X509CertificateTemplateEnrollmentFlag
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509CertificateTemplateEnrollmentFlag = *opaque{
};
// --------------------------------------------------------
// Type: X509CertificateTemplateSubjectNameFlag
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509CertificateTemplateSubjectNameFlag = *opaque{
};
// --------------------------------------------------------
// Type: X509CertificateTemplatePrivateKeyFlag
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509CertificateTemplatePrivateKeyFlag = *opaque{
};
// --------------------------------------------------------
// Type: ImportPFXFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ImportPFXFlags = *opaque{
};
// --------------------------------------------------------
// Type: FNIMPORTPFXTOPROVIDER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNIMPORTPFXTOPROVIDER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FNIMPORTPFXTOPROVIDERFREEDATA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNIMPORTPFXTOPROVIDERFREEDATA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: NCRYPT_DESCRIPTOR_HANDLE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_DESCRIPTOR_HANDLE__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: NCRYPT_STREAM_HANDLE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_STREAM_HANDLE__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: PFNCryptStreamOutputCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNCryptStreamOutputCallback = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: NCRYPT_PROTECT_STREAM_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_PROTECT_STREAM_INFO = extern struct {
    pfnStreamOutput: Windows.Win32.Security.PFNCryptStreamOutputCallback,
    pvCallbackCtxt: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: PFNCryptStreamOutputCallbackEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNCryptStreamOutputCallbackEx = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: NCRYPT_PROTECT_STREAM_INFO_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_PROTECT_STREAM_INFO_EX = extern struct {
    pfnStreamOutput: Windows.Win32.Security.PFNCryptStreamOutputCallbackEx,
    pvCallbackCtxt: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: TOKENBINDING_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TOKENBINDING_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: TOKENBINDING_EXTENSION_FORMAT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TOKENBINDING_EXTENSION_FORMAT = *opaque{
};
// --------------------------------------------------------
// Type: TOKENBINDING_KEY_PARAMETERS_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TOKENBINDING_KEY_PARAMETERS_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: TOKENBINDING_IDENTIFIER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKENBINDING_IDENTIFIER = extern struct {
    keyType: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: TOKENBINDING_RESULT_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKENBINDING_RESULT_DATA = extern struct {
    bindingType: Windows.Win32.Security.TOKENBINDING_TYPE,
    identifierSize: {"kind":"UInt32"},
    identifierData: {"kind""Ptr","child":Windows.Win32.Security.TOKENBINDING_IDENTIFIER},
    extensionFormat: Windows.Win32.Security.TOKENBINDING_EXTENSION_FORMAT,
    extensionSize: {"kind":"UInt32"},
    extensionData: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: TOKENBINDING_RESULT_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKENBINDING_RESULT_LIST = extern struct {
    resultCount: {"kind":"UInt32"},
    resultData: {"kind""Ptr","child":Windows.Win32.Security.TOKENBINDING_RESULT_DATA},
};
// --------------------------------------------------------
// Type: TOKENBINDING_KEY_TYPES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKENBINDING_KEY_TYPES = extern struct {
    keyCount: {"kind":"UInt32"},
    keyType: {"kind""Ptr","child":Windows.Win32.Security.TOKENBINDING_KEY_PARAMETERS_TYPE},
};
// --------------------------------------------------------
// Type: CRYPT_XML_CHARSET
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CRYPT_XML_CHARSET = *opaque{
};
// --------------------------------------------------------
// Type: CRYPT_XML_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_BLOB = extern struct {
    dwCharset: Windows.Win32.Security.CRYPT_XML_CHARSET,
    cbData: {"kind":"UInt32"},
    pbData: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: CRYPT_XML_DATA_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_DATA_BLOB = extern struct {
    cbData: {"kind":"UInt32"},
    pbData: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: CRYPT_XML_PROPERTY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CRYPT_XML_PROPERTY_ID = *opaque{
};
// --------------------------------------------------------
// Type: CRYPT_XML_PROPERTY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_PROPERTY = extern struct {
    dwPropId: Windows.Win32.Security.CRYPT_XML_PROPERTY_ID,
    pvValue: {"kind""Ptr","child":{"kind":"Void"}},
    cbValue: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PFN_CRYPT_XML_WRITE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_XML_WRITE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CRYPT_XML_DATA_PROVIDER_READ
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_XML_DATA_PROVIDER_READ = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CRYPT_XML_DATA_PROVIDER_CLOSE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_XML_DATA_PROVIDER_CLOSE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPT_XML_DATA_PROVIDER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_DATA_PROVIDER = extern struct {
    pvCallbackState: {"kind""Ptr","child":{"kind":"Void"}},
    cbBufferSize: {"kind":"UInt32"},
    pfnRead: Windows.Win32.Security.PFN_CRYPT_XML_DATA_PROVIDER_READ,
    pfnClose: Windows.Win32.Security.PFN_CRYPT_XML_DATA_PROVIDER_CLOSE,
};
// --------------------------------------------------------
// Type: PFN_CRYPT_XML_CREATE_TRANSFORM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_XML_CREATE_TRANSFORM = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPT_XML_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_STATUS = extern struct {
    cbSize: {"kind":"UInt32"},
    dwErrorStatus: {"kind":"UInt32"},
    dwInfoStatus: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CRYPT_XML_ALGORITHM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_ALGORITHM = extern struct {
    cbSize: {"kind":"UInt32"},
    wszAlgorithm: {"kind""Ptr","child":{"kind":"UInt16"}},
    Encoded: Windows.Win32.Security.CRYPT_XML_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_XML_TRANSFORM_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_TRANSFORM_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    wszAlgorithm: {"kind""Ptr","child":{"kind":"UInt16"}},
    cbBufferSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    pfnCreateTransform: Windows.Win32.Security.PFN_CRYPT_XML_CREATE_TRANSFORM,
};
// --------------------------------------------------------
// Type: CRYPT_XML_TRANSFORM_CHAIN_CONFIG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_TRANSFORM_CHAIN_CONFIG = extern struct {
    cbSize: {"kind":"UInt32"},
    cTransformInfo: {"kind":"UInt32"},
    rgpTransformInfo: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CRYPT_XML_TRANSFORM_INFO}},
};
// --------------------------------------------------------
// Type: CRYPT_XML_KEY_DSA_KEY_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_KEY_DSA_KEY_VALUE = extern struct {
    P: Windows.Win32.Security.CRYPT_XML_DATA_BLOB,
    Q: Windows.Win32.Security.CRYPT_XML_DATA_BLOB,
    G: Windows.Win32.Security.CRYPT_XML_DATA_BLOB,
    Y: Windows.Win32.Security.CRYPT_XML_DATA_BLOB,
    J: Windows.Win32.Security.CRYPT_XML_DATA_BLOB,
    Seed: Windows.Win32.Security.CRYPT_XML_DATA_BLOB,
    Counter: Windows.Win32.Security.CRYPT_XML_DATA_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_XML_KEY_ECDSA_KEY_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_KEY_ECDSA_KEY_VALUE = extern struct {
    wszNamedCurve: {"kind""Ptr","child":{"kind":"UInt16"}},
    X: Windows.Win32.Security.CRYPT_XML_DATA_BLOB,
    Y: Windows.Win32.Security.CRYPT_XML_DATA_BLOB,
    ExplicitPara: Windows.Win32.Security.CRYPT_XML_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_XML_KEY_RSA_KEY_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_KEY_RSA_KEY_VALUE = extern struct {
    Modulus: Windows.Win32.Security.CRYPT_XML_DATA_BLOB,
    Exponent: Windows.Win32.Security.CRYPT_XML_DATA_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_XML_KEY_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_KEY_VALUE = extern struct {
    dwType: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.CRYPT_XML_KEY_VALUE+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CRYPT_XML_ISSUER_SERIAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_ISSUER_SERIAL = extern struct {
    wszIssuer: {"kind""Ptr","child":{"kind":"UInt16"}},
    wszSerial: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: CRYPT_XML_X509DATA_ITEM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_X509DATA_ITEM = extern struct {
    dwType: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.CRYPT_XML_X509DATA_ITEM+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CRYPT_XML_X509DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_X509DATA = extern struct {
    cX509Data: {"kind":"UInt32"},
    rgX509Data: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_XML_X509DATA_ITEM},
};
// --------------------------------------------------------
// Type: CRYPT_XML_KEY_INFO_ITEM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_KEY_INFO_ITEM = extern struct {
    dwType: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.CRYPT_XML_KEY_INFO_ITEM+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CRYPT_XML_KEY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_KEY_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    wszId: {"kind""Ptr","child":{"kind":"UInt16"}},
    cKeyInfo: {"kind":"UInt32"},
    rgKeyInfo: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_XML_KEY_INFO_ITEM},
    hVerifyKey: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: CRYPT_XML_REFERENCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_REFERENCE = extern struct {
    cbSize: {"kind":"UInt32"},
    hReference: {"kind""Ptr","child":{"kind":"Void"}},
    wszId: {"kind""Ptr","child":{"kind":"UInt16"}},
    wszUri: {"kind""Ptr","child":{"kind":"UInt16"}},
    wszType: {"kind""Ptr","child":{"kind":"UInt16"}},
    DigestMethod: Windows.Win32.Security.CRYPT_XML_ALGORITHM,
    DigestValue: Windows.Win32.Security.CRYPTOAPI_BLOB,
    cTransform: {"kind":"UInt32"},
    rgTransform: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_XML_ALGORITHM},
};
// --------------------------------------------------------
// Type: CRYPT_XML_REFERENCES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_REFERENCES = extern struct {
    cReference: {"kind":"UInt32"},
    rgpReference: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CRYPT_XML_REFERENCE}},
};
// --------------------------------------------------------
// Type: CRYPT_XML_SIGNED_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_SIGNED_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    wszId: {"kind""Ptr","child":{"kind":"UInt16"}},
    Canonicalization: Windows.Win32.Security.CRYPT_XML_ALGORITHM,
    SignatureMethod: Windows.Win32.Security.CRYPT_XML_ALGORITHM,
    cReference: {"kind":"UInt32"},
    rgpReference: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CRYPT_XML_REFERENCE}},
    Encoded: Windows.Win32.Security.CRYPT_XML_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_XML_OBJECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_OBJECT = extern struct {
    cbSize: {"kind":"UInt32"},
    hObject: {"kind""Ptr","child":{"kind":"Void"}},
    wszId: {"kind""Ptr","child":{"kind":"UInt16"}},
    wszMimeType: {"kind""Ptr","child":{"kind":"UInt16"}},
    wszEncoding: {"kind""Ptr","child":{"kind":"UInt16"}},
    Manifest: Windows.Win32.Security.CRYPT_XML_REFERENCES,
    Encoded: Windows.Win32.Security.CRYPT_XML_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_XML_SIGNATURE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_SIGNATURE = extern struct {
    cbSize: {"kind":"UInt32"},
    hSignature: {"kind""Ptr","child":{"kind":"Void"}},
    wszId: {"kind""Ptr","child":{"kind":"UInt16"}},
    SignedInfo: Windows.Win32.Security.CRYPT_XML_SIGNED_INFO,
    SignatureValue: Windows.Win32.Security.CRYPTOAPI_BLOB,
    pKeyInfo: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_XML_KEY_INFO},
    cObject: {"kind":"UInt32"},
    rgpObject: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CRYPT_XML_OBJECT}},
};
// --------------------------------------------------------
// Type: CRYPT_XML_DOC_CTXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_DOC_CTXT = extern struct {
    cbSize: {"kind":"UInt32"},
    hDocCtxt: {"kind""Ptr","child":{"kind":"Void"}},
    pTransformsConfig: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_XML_TRANSFORM_CHAIN_CONFIG},
    cSignature: {"kind":"UInt32"},
    rgpSignature: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CRYPT_XML_SIGNATURE}},
};
// --------------------------------------------------------
// Type: CRYPT_XML_KEYINFO_PARAM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_KEYINFO_PARAM = extern struct {
    wszId: {"kind""Ptr","child":{"kind":"UInt16"}},
    wszKeyName: {"kind""Ptr","child":{"kind":"UInt16"}},
    SKI: Windows.Win32.Security.CRYPTOAPI_BLOB,
    wszSubjectName: {"kind""Ptr","child":{"kind":"UInt16"}},
    cCertificate: {"kind":"UInt32"},
    rgCertificate: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
    cCRL: {"kind":"UInt32"},
    rgCRL: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
};
// --------------------------------------------------------
// Type: CRYPT_XML_KEYINFO_SPEC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CRYPT_XML_KEYINFO_SPEC = *opaque{
};
// --------------------------------------------------------
// Type: CRYPT_XML_ALGORITHM_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_ALGORITHM_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    wszAlgorithmURI: {"kind""Ptr","child":{"kind":"UInt16"}},
    wszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwGroupId: {"kind":"UInt32"},
    wszCNGAlgid: {"kind""Ptr","child":{"kind":"UInt16"}},
    wszCNGExtraAlgid: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwSignFlags: {"kind":"UInt32"},
    dwVerifyFlags: {"kind":"UInt32"},
    pvPaddingInfo: {"kind""Ptr","child":{"kind":"Void"}},
    pvExtraInfo: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: PFN_CRYPT_XML_ENUM_ALG_INFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_XML_ENUM_ALG_INFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CryptXmlDllGetInterface
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CryptXmlDllGetInterface = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CryptXmlDllEncodeAlgorithm
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CryptXmlDllEncodeAlgorithm = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CryptXmlDllCreateDigest
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CryptXmlDllCreateDigest = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CryptXmlDllDigestData
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CryptXmlDllDigestData = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CryptXmlDllFinalizeDigest
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CryptXmlDllFinalizeDigest = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CryptXmlDllCloseDigest
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CryptXmlDllCloseDigest = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CryptXmlDllSignData
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CryptXmlDllSignData = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CryptXmlDllVerifySignature
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CryptXmlDllVerifySignature = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CryptXmlDllGetAlgorithmInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CryptXmlDllGetAlgorithmInfo = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPT_XML_CRYPTOGRAPHIC_INTERFACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_CRYPTOGRAPHIC_INTERFACE = extern struct {
    cbSize: {"kind":"UInt32"},
    fpCryptXmlEncodeAlgorithm: Windows.Win32.Security.CryptXmlDllEncodeAlgorithm,
    fpCryptXmlCreateDigest: Windows.Win32.Security.CryptXmlDllCreateDigest,
    fpCryptXmlDigestData: Windows.Win32.Security.CryptXmlDllDigestData,
    fpCryptXmlFinalizeDigest: Windows.Win32.Security.CryptXmlDllFinalizeDigest,
    fpCryptXmlCloseDigest: Windows.Win32.Security.CryptXmlDllCloseDigest,
    fpCryptXmlSignData: Windows.Win32.Security.CryptXmlDllSignData,
    fpCryptXmlVerifySignature: Windows.Win32.Security.CryptXmlDllVerifySignature,
    fpCryptXmlGetAlgorithmInfo: Windows.Win32.Security.CryptXmlDllGetAlgorithmInfo,
};
// --------------------------------------------------------
// Type: CryptXmlDllEncodeKeyValue
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CryptXmlDllEncodeKeyValue = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CryptXmlDllCreateKey
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CryptXmlDllCreateKey = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CCertSrvSetupKeyInformation
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertSrvSetupKeyInformation = opaque {
};
// --------------------------------------------------------
// Type: CCertSrvSetup
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertSrvSetup = opaque {
};
// --------------------------------------------------------
// Type: CMSCEPSetup
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMSCEPSetup = opaque {
};
// --------------------------------------------------------
// Type: CCertificateEnrollmentServerSetup
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertificateEnrollmentServerSetup = opaque {
};
// --------------------------------------------------------
// Type: CCertificateEnrollmentPolicyServerSetup
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertificateEnrollmentPolicyServerSetup = opaque {
};
// --------------------------------------------------------
// Type: ICertSrvSetupKeyInformation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertSrvSetupKeyInformation = *opaque{
    // TODO: Method 'get_ProviderName'
    // TODO: Method 'put_ProviderName'
    // TODO: Method 'get_Length'
    // TODO: Method 'put_Length'
    // TODO: Method 'get_Existing'
    // TODO: Method 'put_Existing'
    // TODO: Method 'get_ContainerName'
    // TODO: Method 'put_ContainerName'
    // TODO: Method 'get_HashAlgorithm'
    // TODO: Method 'put_HashAlgorithm'
    // TODO: Method 'get_ExistingCACertificate'
    // TODO: Method 'put_ExistingCACertificate'
};
// --------------------------------------------------------
// Type: ICertSrvSetupKeyInformationCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertSrvSetupKeyInformationCollection = *opaque{
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'get_Item'
    // TODO: Method 'get_Count'
    // TODO: Method 'Add'
};
// --------------------------------------------------------
// Type: CASetupProperty
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CASetupProperty = *opaque{
};
// --------------------------------------------------------
// Type: ICertSrvSetup
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertSrvSetup = *opaque{
    // TODO: Method 'get_CAErrorId'
    // TODO: Method 'get_CAErrorString'
    // TODO: Method 'InitializeDefaults'
    // TODO: Method 'GetCASetupProperty'
    // TODO: Method 'SetCASetupProperty'
    // TODO: Method 'IsPropertyEditable'
    // TODO: Method 'GetSupportedCATypes'
    // TODO: Method 'GetProviderNameList'
    // TODO: Method 'GetKeyLengthList'
    // TODO: Method 'GetHashAlgorithmList'
    // TODO: Method 'GetPrivateKeyContainerList'
    // TODO: Method 'GetExistingCACertificates'
    // TODO: Method 'CAImportPFX'
    // TODO: Method 'SetCADistinguishedName'
    // TODO: Method 'SetDatabaseInformation'
    // TODO: Method 'SetParentCAInformation'
    // TODO: Method 'SetWebCAInformation'
    // TODO: Method 'Install'
    // TODO: Method 'PreUnInstall'
    // TODO: Method 'PostUnInstall'
};
// --------------------------------------------------------
// Type: MSCEPSetupProperty
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSCEPSetupProperty = *opaque{
};
// --------------------------------------------------------
// Type: IMSCEPSetup
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMSCEPSetup = *opaque{
    // TODO: Method 'get_MSCEPErrorId'
    // TODO: Method 'get_MSCEPErrorString'
    // TODO: Method 'InitializeDefaults'
    // TODO: Method 'GetMSCEPSetupProperty'
    // TODO: Method 'SetMSCEPSetupProperty'
    // TODO: Method 'SetAccountInformation'
    // TODO: Method 'IsMSCEPStoreEmpty'
    // TODO: Method 'GetProviderNameList'
    // TODO: Method 'GetKeyLengthList'
    // TODO: Method 'Install'
    // TODO: Method 'PreUnInstall'
    // TODO: Method 'PostUnInstall'
};
// --------------------------------------------------------
// Type: CESSetupProperty
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CESSetupProperty = *opaque{
};
// --------------------------------------------------------
// Type: ICertificateEnrollmentServerSetup
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertificateEnrollmentServerSetup = *opaque{
    // TODO: Method 'get_ErrorString'
    // TODO: Method 'InitializeInstallDefaults'
    // TODO: Method 'GetProperty'
    // TODO: Method 'SetProperty'
    // TODO: Method 'SetApplicationPoolCredentials'
    // TODO: Method 'Install'
    // TODO: Method 'UnInstall'
};
// --------------------------------------------------------
// Type: CEPSetupProperty
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CEPSetupProperty = *opaque{
};
// --------------------------------------------------------
// Type: ICertificateEnrollmentPolicyServerSetup
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertificateEnrollmentPolicyServerSetup = *opaque{
    // TODO: Method 'get_ErrorString'
    // TODO: Method 'InitializeInstallDefaults'
    // TODO: Method 'GetProperty'
    // TODO: Method 'SetProperty'
    // TODO: Method 'Install'
    // TODO: Method 'UnInstall'
};
// --------------------------------------------------------
// Type: CCertAdmin
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertAdmin = opaque {
};
// --------------------------------------------------------
// Type: CCertView
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertView = opaque {
};
// --------------------------------------------------------
// Type: OCSPPropertyCollection
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const OCSPPropertyCollection = opaque {
};
// --------------------------------------------------------
// Type: OCSPAdmin
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const OCSPAdmin = opaque {
};
// --------------------------------------------------------
// Type: IEnumCERTVIEWCOLUMN
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumCERTVIEWCOLUMN = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'GetName'
    // TODO: Method 'GetDisplayName'
    // TODO: Method 'GetType'
    // TODO: Method 'IsIndexed'
    // TODO: Method 'GetMaxLength'
    // TODO: Method 'GetValue'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IEnumCERTVIEWATTRIBUTE
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumCERTVIEWATTRIBUTE = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'GetName'
    // TODO: Method 'GetValue'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IEnumCERTVIEWEXTENSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumCERTVIEWEXTENSION = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'GetName'
    // TODO: Method 'GetFlags'
    // TODO: Method 'GetValue'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IEnumCERTVIEWROW
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumCERTVIEWROW = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'EnumCertViewColumn'
    // TODO: Method 'EnumCertViewAttribute'
    // TODO: Method 'EnumCertViewExtension'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
    // TODO: Method 'GetMaxIndex'
};
// --------------------------------------------------------
// Type: ICertView
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertView = *opaque{
    // TODO: Method 'OpenConnection'
    // TODO: Method 'EnumCertViewColumn'
    // TODO: Method 'GetColumnCount'
    // TODO: Method 'GetColumnIndex'
    // TODO: Method 'SetResultColumnCount'
    // TODO: Method 'SetResultColumn'
    // TODO: Method 'SetRestriction'
    // TODO: Method 'OpenView'
};
// --------------------------------------------------------
// Type: ICertView2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertView2 = *opaque{
    // TODO: Method 'SetTable'
};
// --------------------------------------------------------
// Type: ICertAdmin
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertAdmin = *opaque{
    // TODO: Method 'IsValidCertificate'
    // TODO: Method 'GetRevocationReason'
    // TODO: Method 'RevokeCertificate'
    // TODO: Method 'SetRequestAttributes'
    // TODO: Method 'SetCertificateExtension'
    // TODO: Method 'DenyRequest'
    // TODO: Method 'ResubmitRequest'
    // TODO: Method 'PublishCRL'
    // TODO: Method 'GetCRL'
    // TODO: Method 'ImportCertificate'
};
// --------------------------------------------------------
// Type: ICertAdmin2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertAdmin2 = *opaque{
    // TODO: Method 'PublishCRLs'
    // TODO: Method 'GetCAProperty'
    // TODO: Method 'SetCAProperty'
    // TODO: Method 'GetCAPropertyFlags'
    // TODO: Method 'GetCAPropertyDisplayName'
    // TODO: Method 'GetArchivedKey'
    // TODO: Method 'GetConfigEntry'
    // TODO: Method 'SetConfigEntry'
    // TODO: Method 'ImportKey'
    // TODO: Method 'GetMyRoles'
    // TODO: Method 'DeleteRow'
};
// --------------------------------------------------------
// Type: IOCSPProperty
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOCSPProperty = *opaque{
    // TODO: Method 'get_Name'
    // TODO: Method 'get_Value'
    // TODO: Method 'put_Value'
    // TODO: Method 'get_Modified'
};
// --------------------------------------------------------
// Type: IOCSPPropertyCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOCSPPropertyCollection = *opaque{
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'get_Item'
    // TODO: Method 'get_Count'
    // TODO: Method 'get_ItemByName'
    // TODO: Method 'CreateProperty'
    // TODO: Method 'DeleteProperty'
    // TODO: Method 'InitializeFromProperties'
    // TODO: Method 'GetAllProperties'
};
// --------------------------------------------------------
// Type: IOCSPCAConfiguration
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOCSPCAConfiguration = *opaque{
    // TODO: Method 'get_Identifier'
    // TODO: Method 'get_CACertificate'
    // TODO: Method 'get_HashAlgorithm'
    // TODO: Method 'put_HashAlgorithm'
    // TODO: Method 'get_SigningFlags'
    // TODO: Method 'put_SigningFlags'
    // TODO: Method 'get_SigningCertificate'
    // TODO: Method 'put_SigningCertificate'
    // TODO: Method 'get_ReminderDuration'
    // TODO: Method 'put_ReminderDuration'
    // TODO: Method 'get_ErrorCode'
    // TODO: Method 'get_CSPName'
    // TODO: Method 'get_KeySpec'
    // TODO: Method 'get_ProviderCLSID'
    // TODO: Method 'put_ProviderCLSID'
    // TODO: Method 'get_ProviderProperties'
    // TODO: Method 'put_ProviderProperties'
    // TODO: Method 'get_Modified'
    // TODO: Method 'get_LocalRevocationInformation'
    // TODO: Method 'put_LocalRevocationInformation'
    // TODO: Method 'get_SigningCertificateTemplate'
    // TODO: Method 'put_SigningCertificateTemplate'
    // TODO: Method 'get_CAConfig'
    // TODO: Method 'put_CAConfig'
};
// --------------------------------------------------------
// Type: IOCSPCAConfigurationCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOCSPCAConfigurationCollection = *opaque{
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'get_Item'
    // TODO: Method 'get_Count'
    // TODO: Method 'get_ItemByName'
    // TODO: Method 'CreateCAConfiguration'
    // TODO: Method 'DeleteCAConfiguration'
};
// --------------------------------------------------------
// Type: IOCSPAdmin
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOCSPAdmin = *opaque{
    // TODO: Method 'get_OCSPServiceProperties'
    // TODO: Method 'get_OCSPCAConfigurationCollection'
    // TODO: Method 'GetConfiguration'
    // TODO: Method 'SetConfiguration'
    // TODO: Method 'GetMyRoles'
    // TODO: Method 'Ping'
    // TODO: Method 'SetSecurity'
    // TODO: Method 'GetSecurity'
    // TODO: Method 'GetSigningCertificates'
    // TODO: Method 'GetHashAlgorithms'
};
// --------------------------------------------------------
// Type: OCSPSigningFlag
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OCSPSigningFlag = *opaque{
};
// --------------------------------------------------------
// Type: OCSPRequestFlag
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OCSPRequestFlag = *opaque{
};
// --------------------------------------------------------
// Type: CCertEncodeStringArray
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertEncodeStringArray = opaque {
};
// --------------------------------------------------------
// Type: CCertEncodeLongArray
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertEncodeLongArray = opaque {
};
// --------------------------------------------------------
// Type: CCertEncodeDateArray
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertEncodeDateArray = opaque {
};
// --------------------------------------------------------
// Type: CCertEncodeCRLDistInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertEncodeCRLDistInfo = opaque {
};
// --------------------------------------------------------
// Type: CCertEncodeAltName
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertEncodeAltName = opaque {
};
// --------------------------------------------------------
// Type: CCertEncodeBitString
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertEncodeBitString = opaque {
};
// --------------------------------------------------------
// Type: ICertEncodeStringArray
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertEncodeStringArray = *opaque{
    // TODO: Method 'Decode'
    // TODO: Method 'GetStringType'
    // TODO: Method 'GetCount'
    // TODO: Method 'GetValue'
    // TODO: Method 'Reset'
    // TODO: Method 'SetValue'
    // TODO: Method 'Encode'
};
// --------------------------------------------------------
// Type: ICertEncodeStringArray2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertEncodeStringArray2 = *opaque{
    // TODO: Method 'DecodeBlob'
    // TODO: Method 'EncodeBlob'
};
// --------------------------------------------------------
// Type: ICertEncodeLongArray
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertEncodeLongArray = *opaque{
    // TODO: Method 'Decode'
    // TODO: Method 'GetCount'
    // TODO: Method 'GetValue'
    // TODO: Method 'Reset'
    // TODO: Method 'SetValue'
    // TODO: Method 'Encode'
};
// --------------------------------------------------------
// Type: ICertEncodeLongArray2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertEncodeLongArray2 = *opaque{
    // TODO: Method 'DecodeBlob'
    // TODO: Method 'EncodeBlob'
};
// --------------------------------------------------------
// Type: ICertEncodeDateArray
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertEncodeDateArray = *opaque{
    // TODO: Method 'Decode'
    // TODO: Method 'GetCount'
    // TODO: Method 'GetValue'
    // TODO: Method 'Reset'
    // TODO: Method 'SetValue'
    // TODO: Method 'Encode'
};
// --------------------------------------------------------
// Type: ICertEncodeDateArray2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertEncodeDateArray2 = *opaque{
    // TODO: Method 'DecodeBlob'
    // TODO: Method 'EncodeBlob'
};
// --------------------------------------------------------
// Type: ICertEncodeCRLDistInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertEncodeCRLDistInfo = *opaque{
    // TODO: Method 'Decode'
    // TODO: Method 'GetDistPointCount'
    // TODO: Method 'GetNameCount'
    // TODO: Method 'GetNameChoice'
    // TODO: Method 'GetName'
    // TODO: Method 'Reset'
    // TODO: Method 'SetNameCount'
    // TODO: Method 'SetNameEntry'
    // TODO: Method 'Encode'
};
// --------------------------------------------------------
// Type: ICertEncodeCRLDistInfo2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertEncodeCRLDistInfo2 = *opaque{
    // TODO: Method 'DecodeBlob'
    // TODO: Method 'EncodeBlob'
};
// --------------------------------------------------------
// Type: ICertEncodeAltName
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertEncodeAltName = *opaque{
    // TODO: Method 'Decode'
    // TODO: Method 'GetNameCount'
    // TODO: Method 'GetNameChoice'
    // TODO: Method 'GetName'
    // TODO: Method 'Reset'
    // TODO: Method 'SetNameEntry'
    // TODO: Method 'Encode'
};
// --------------------------------------------------------
// Type: ICertEncodeAltName2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertEncodeAltName2 = *opaque{
    // TODO: Method 'DecodeBlob'
    // TODO: Method 'EncodeBlob'
    // TODO: Method 'GetNameBlob'
    // TODO: Method 'SetNameEntryBlob'
};
// --------------------------------------------------------
// Type: ICertEncodeBitString
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertEncodeBitString = *opaque{
    // TODO: Method 'Decode'
    // TODO: Method 'GetBitCount'
    // TODO: Method 'GetBitString'
    // TODO: Method 'Encode'
};
// --------------------------------------------------------
// Type: ICertEncodeBitString2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertEncodeBitString2 = *opaque{
    // TODO: Method 'DecodeBlob'
    // TODO: Method 'EncodeBlob'
    // TODO: Method 'GetBitStringBlob'
};
// --------------------------------------------------------
// Type: ICertExit
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertExit = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'Notify'
    // TODO: Method 'GetDescription'
};
// --------------------------------------------------------
// Type: ICertExit2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertExit2 = *opaque{
    // TODO: Method 'GetManageModule'
};
// --------------------------------------------------------
// Type: ENUM_CATYPES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ENUM_CATYPES = *opaque{
};
// --------------------------------------------------------
// Type: CAINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CAINFO = extern struct {
    cbSize: {"kind":"UInt32"},
    CAType: Windows.Win32.Security.ENUM_CATYPES,
    cCASignatureCerts: {"kind":"UInt32"},
    cCAExchangeCerts: {"kind":"UInt32"},
    cExitModules: {"kind":"UInt32"},
    lPropIdMax: {"kind":"Int32"},
    lRoleSeparationEnabled: {"kind":"Int32"},
    cKRACertUsedCount: {"kind":"UInt32"},
    cKRACertCount: {"kind":"UInt32"},
    fAdvancedServer: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: ENUM_PERIOD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ENUM_PERIOD = *opaque{
};
// --------------------------------------------------------
// Type: LLFILETIME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LLFILETIME = extern struct {
    Anonymous: Windows.Win32.Security.LLFILETIME+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PFNCMFILTERPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNCMFILTERPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNCMHOOKPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNCMHOOKPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CERT_SELECT_STRUCT_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_SELECT_STRUCT_A = extern struct {
    dwSize: {"kind":"UInt32"},
    hwndParent: Windows.Win32.WindowsAndMessaging.HWND,
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    pTemplateName: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},
    szTitle: {"kind""Ptr","child":{"kind":"SByte"}},
    cCertStore: {"kind":"UInt32"},
    arrayCertStore: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    szPurposeOid: {"kind""Ptr","child":{"kind":"SByte"}},
    cCertContext: {"kind":"UInt32"},
    arrayCertContext: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT}},
    lCustData: Windows.Win32.WindowsAndMessaging.LPARAM,
    pfnHook: Windows.Win32.Security.PFNCMHOOKPROC,
    pfnFilter: Windows.Win32.Security.PFNCMFILTERPROC,
    szHelpFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    dwHelpId: {"kind":"UInt32"},
    hprov: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: CERT_SELECT_STRUCT_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_SELECT_STRUCT_W = extern struct {
    dwSize: {"kind":"UInt32"},
    hwndParent: Windows.Win32.WindowsAndMessaging.HWND,
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    pTemplateName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    szTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    cCertStore: {"kind":"UInt32"},
    arrayCertStore: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    szPurposeOid: {"kind""Ptr","child":{"kind":"SByte"}},
    cCertContext: {"kind":"UInt32"},
    arrayCertContext: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT}},
    lCustData: Windows.Win32.WindowsAndMessaging.LPARAM,
    pfnHook: Windows.Win32.Security.PFNCMHOOKPROC,
    pfnFilter: Windows.Win32.Security.PFNCMFILTERPROC,
    szHelpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwHelpId: {"kind":"UInt32"},
    hprov: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: CERT_VIEWPROPERTIES_STRUCT_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_VIEWPROPERTIES_STRUCT_A = extern struct {
    dwSize: {"kind":"UInt32"},
    hwndParent: Windows.Win32.WindowsAndMessaging.HWND,
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    dwFlags: {"kind":"UInt32"},
    szTitle: {"kind""Ptr","child":{"kind":"SByte"}},
    pCertContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    arrayPurposes: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},
    cArrayPurposes: {"kind":"UInt32"},
    cRootStores: {"kind":"UInt32"},
    rghstoreRoots: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    cStores: {"kind":"UInt32"},
    rghstoreCAs: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    cTrustStores: {"kind":"UInt32"},
    rghstoreTrust: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    hprov: {"kind":"UIntPtr"},
    lCustData: Windows.Win32.WindowsAndMessaging.LPARAM,
    dwPad: {"kind":"UInt32"},
    szHelpFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    dwHelpId: {"kind":"UInt32"},
    nStartPage: {"kind":"UInt32"},
    cArrayPropSheetPages: {"kind":"UInt32"},
    arrayPropSheetPages: {"kind""Ptr","child":Windows.Win32.Controls.PROPSHEETPAGEA},
};
// --------------------------------------------------------
// Type: CERT_VIEWPROPERTIES_STRUCT_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_VIEWPROPERTIES_STRUCT_W = extern struct {
    dwSize: {"kind":"UInt32"},
    hwndParent: Windows.Win32.WindowsAndMessaging.HWND,
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    dwFlags: {"kind":"UInt32"},
    szTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    pCertContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    arrayPurposes: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},
    cArrayPurposes: {"kind":"UInt32"},
    cRootStores: {"kind":"UInt32"},
    rghstoreRoots: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    cStores: {"kind":"UInt32"},
    rghstoreCAs: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    cTrustStores: {"kind":"UInt32"},
    rghstoreTrust: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    hprov: {"kind":"UIntPtr"},
    lCustData: Windows.Win32.WindowsAndMessaging.LPARAM,
    dwPad: {"kind":"UInt32"},
    szHelpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwHelpId: {"kind":"UInt32"},
    nStartPage: {"kind":"UInt32"},
    cArrayPropSheetPages: {"kind":"UInt32"},
    arrayPropSheetPages: {"kind""Ptr","child":Windows.Win32.Controls.PROPSHEETPAGEA},
};
// --------------------------------------------------------
// Type: tagCMOID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagCMOID = extern struct {
    szExtensionOID: {"kind""Ptr","child":{"kind":"SByte"}},
    dwTestOperation: {"kind":"UInt32"},
    pbTestData: {"kind""Ptr","child":{"kind":"Byte"}},
    cbTestData: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: tagCMFLTR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagCMFLTR = extern struct {
    dwSize: {"kind":"UInt32"},
    cExtensionChecks: {"kind":"UInt32"},
    arrayExtensionChecks: {"kind""Ptr","child":Windows.Win32.Security.tagCMOID},
    dwCheckingFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PFNTRUSTHELPER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNTRUSTHELPER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CERT_VERIFY_CERTIFICATE_TRUST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_VERIFY_CERTIFICATE_TRUST = extern struct {
    cbSize: {"kind":"UInt32"},
    pccert: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    dwFlags: {"kind":"UInt32"},
    dwIgnoreErr: {"kind":"UInt32"},
    pdwErrors: {"kind""Ptr","child":{"kind":"UInt32"}},
    pszUsageOid: {"kind""Ptr","child":{"kind":"SByte"}},
    hprov: {"kind":"UIntPtr"},
    cRootStores: {"kind":"UInt32"},
    rghstoreRoots: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    cStores: {"kind":"UInt32"},
    rghstoreCAs: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    cTrustStores: {"kind":"UInt32"},
    rghstoreTrust: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    lCustData: Windows.Win32.WindowsAndMessaging.LPARAM,
    pfnTrustHelper: Windows.Win32.Security.PFNTRUSTHELPER,
    pcChain: {"kind""Ptr","child":{"kind":"UInt32"}},
    prgChain: {"kind""Ptr","child":{"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT}}},
    prgdwErrors: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt32"}}},
    prgpbTrustInfo: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB}},
};
// --------------------------------------------------------
// Type: CTL_MODIFY_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CTL_MODIFY_REQUEST = extern struct {
    pccert: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    dwOperation: {"kind":"UInt32"},
    dwError: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: WINTRUST_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WINTRUST_DATA = extern struct {
    cbStruct: {"kind":"UInt32"},
    pPolicyCallbackData: {"kind""Ptr","child":{"kind":"Void"}},
    pSIPClientData: {"kind""Ptr","child":{"kind":"Void"}},
    dwUIChoice: {"kind":"UInt32"},
    fdwRevocationChecks: {"kind":"UInt32"},
    dwUnionChoice: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.WINTRUST_DATA+_Anonymous_e__Union,
    dwStateAction: {"kind":"UInt32"},
    hWVTStateData: Windows.Win32.SystemServices.HANDLE,
    pwszURLReference: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwProvFlags: {"kind":"UInt32"},
    dwUIContext: {"kind":"UInt32"},
    pSignatureSettings: {"kind""Ptr","child":Windows.Win32.Security.WINTRUST_SIGNATURE_SETTINGS},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: WINTRUST_SIGNATURE_SETTINGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WINTRUST_SIGNATURE_SETTINGS = extern struct {
    cbStruct: {"kind":"UInt32"},
    dwIndex: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    cSecondarySigs: {"kind":"UInt32"},
    dwVerifiedSigIndex: {"kind":"UInt32"},
    pCryptoPolicy: {"kind""Ptr","child":Windows.Win32.Security.CERT_STRONG_SIGN_PARA},
};
// --------------------------------------------------------
// Type: WINTRUST_FILE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WINTRUST_FILE_INFO = extern struct {
    cbStruct: {"kind":"UInt32"},
    pcwszFilePath: {"kind""Ptr","child":{"kind":"UInt16"}},
    hFile: Windows.Win32.SystemServices.HANDLE,
    pgKnownSubject: {"kind""Ptr","child":Guid},
};
// --------------------------------------------------------
// Type: WINTRUST_CATALOG_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WINTRUST_CATALOG_INFO = extern struct {
    cbStruct: {"kind":"UInt32"},
    dwCatalogVersion: {"kind":"UInt32"},
    pcwszCatalogFilePath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcwszMemberTag: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcwszMemberFilePath: {"kind""Ptr","child":{"kind":"UInt16"}},
    hMemberFile: Windows.Win32.SystemServices.HANDLE,
    pbCalculatedFileHash: {"kind""Ptr","child":{"kind":"Byte"}},
    cbCalculatedFileHash: {"kind":"UInt32"},
    pcCatalogContext: {"kind""Ptr","child":Windows.Win32.Security.CTL_CONTEXT},
    hCatAdmin: {"kind":"IntPtr"},
};
// --------------------------------------------------------
// Type: WINTRUST_BLOB_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WINTRUST_BLOB_INFO = extern struct {
    cbStruct: {"kind":"UInt32"},
    gSubject: Guid,
    pcwszDisplayName: {"kind""Ptr","child":{"kind":"UInt16"}},
    cbMemObject: {"kind":"UInt32"},
    pbMemObject: {"kind""Ptr","child":{"kind":"Byte"}},
    cbMemSignedMsg: {"kind":"UInt32"},
    pbMemSignedMsg: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: WINTRUST_SGNR_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WINTRUST_SGNR_INFO = extern struct {
    cbStruct: {"kind":"UInt32"},
    pcwszDisplayName: {"kind""Ptr","child":{"kind":"UInt16"}},
    psSignerInfo: {"kind""Ptr","child":Windows.Win32.Security.CMSG_SIGNER_INFO},
    chStores: {"kind":"UInt32"},
    pahStores: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
};
// --------------------------------------------------------
// Type: WINTRUST_CERT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WINTRUST_CERT_INFO = extern struct {
    cbStruct: {"kind":"UInt32"},
    pcwszDisplayName: {"kind""Ptr","child":{"kind":"UInt16"}},
    psCertContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    chStores: {"kind":"UInt32"},
    pahStores: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    dwFlags: {"kind":"UInt32"},
    psftVerifyAsOf: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
};
// --------------------------------------------------------
// Type: PFN_CPD_MEM_ALLOC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CPD_MEM_ALLOC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CPD_MEM_FREE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CPD_MEM_FREE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CPD_ADD_STORE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CPD_ADD_STORE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CPD_ADD_SGNR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CPD_ADD_SGNR = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CPD_ADD_CERT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CPD_ADD_CERT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CPD_ADD_PRIVDATA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CPD_ADD_PRIVDATA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_PROVIDER_INIT_CALL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_PROVIDER_INIT_CALL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_PROVIDER_OBJTRUST_CALL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_PROVIDER_OBJTRUST_CALL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_PROVIDER_SIGTRUST_CALL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_PROVIDER_SIGTRUST_CALL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_PROVIDER_CERTTRUST_CALL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_PROVIDER_CERTTRUST_CALL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_PROVIDER_FINALPOLICY_CALL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_PROVIDER_FINALPOLICY_CALL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_PROVIDER_TESTFINALPOLICY_CALL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_PROVIDER_TESTFINALPOLICY_CALL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_PROVIDER_CLEANUP_CALL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_PROVIDER_CLEANUP_CALL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_PROVIDER_CERTCHKPOLICY_CALL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_PROVIDER_CERTCHKPOLICY_CALL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPT_PROVIDER_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PROVIDER_DATA = extern struct {
    cbStruct: {"kind":"UInt32"},
    pWintrustData: {"kind""Ptr","child":Windows.Win32.Security.WINTRUST_DATA},
    fOpenedFile: Windows.Win32.SystemServices.BOOL,
    hWndParent: Windows.Win32.WindowsAndMessaging.HWND,
    pgActionID: {"kind""Ptr","child":Guid},
    hProv: {"kind":"UIntPtr"},
    dwError: {"kind":"UInt32"},
    dwRegSecuritySettings: {"kind":"UInt32"},
    dwRegPolicySettings: {"kind":"UInt32"},
    psPfns: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_PROVIDER_FUNCTIONS},
    cdwTrustStepErrors: {"kind":"UInt32"},
    padwTrustStepErrors: {"kind""Ptr","child":{"kind":"UInt32"}},
    chStores: {"kind":"UInt32"},
    pahStores: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    dwEncoding: {"kind":"UInt32"},
    hMsg: {"kind""Ptr","child":{"kind":"Void"}},
    csSigners: {"kind":"UInt32"},
    pasSigners: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_PROVIDER_SGNR},
    csProvPrivData: {"kind":"UInt32"},
    pasProvPrivData: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_PROVIDER_PRIVDATA},
    dwSubjectChoice: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.CRYPT_PROVIDER_DATA+_Anonymous_e__Union,
    pszUsageOID: {"kind""Ptr","child":{"kind":"SByte"}},
    fRecallWithState: Windows.Win32.SystemServices.BOOL,
    sftSystemTime: Windows.Win32.WindowsProgramming.FILETIME,
    pszCTLSignerUsageOID: {"kind""Ptr","child":{"kind":"SByte"}},
    dwProvFlags: {"kind":"UInt32"},
    dwFinalError: {"kind":"UInt32"},
    pRequestUsage: {"kind""Ptr","child":Windows.Win32.Security.CERT_USAGE_MATCH},
    dwTrustPubSettings: {"kind":"UInt32"},
    dwUIStateFlags: {"kind":"UInt32"},
    pSigState: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_PROVIDER_SIGSTATE},
    pSigSettings: {"kind""Ptr","child":Windows.Win32.Security.WINTRUST_SIGNATURE_SETTINGS},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CRYPT_PROVIDER_SIGSTATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PROVIDER_SIGSTATE = extern struct {
    cbStruct: {"kind":"UInt32"},
    rhSecondarySigs: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    hPrimarySig: {"kind""Ptr","child":{"kind":"Void"}},
    fFirstAttemptMade: Windows.Win32.SystemServices.BOOL,
    fNoMoreSigs: Windows.Win32.SystemServices.BOOL,
    cSecondarySigs: {"kind":"UInt32"},
    dwCurrentIndex: {"kind":"UInt32"},
    fSupportMultiSig: Windows.Win32.SystemServices.BOOL,
    dwCryptoPolicySupport: {"kind":"UInt32"},
    iAttemptCount: {"kind":"UInt32"},
    fCheckedSealing: Windows.Win32.SystemServices.BOOL,
    pSealingSignature: {"kind""Ptr","child":Windows.Win32.Security.SEALING_SIGNATURE_ATTRIBUTE},
};
// --------------------------------------------------------
// Type: CRYPT_PROVIDER_FUNCTIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PROVIDER_FUNCTIONS = extern struct {
    cbStruct: {"kind":"UInt32"},
    pfnAlloc: Windows.Win32.Security.PFN_CPD_MEM_ALLOC,
    pfnFree: Windows.Win32.Security.PFN_CPD_MEM_FREE,
    pfnAddStore2Chain: Windows.Win32.Security.PFN_CPD_ADD_STORE,
    pfnAddSgnr2Chain: Windows.Win32.Security.PFN_CPD_ADD_SGNR,
    pfnAddCert2Chain: Windows.Win32.Security.PFN_CPD_ADD_CERT,
    pfnAddPrivData2Chain: Windows.Win32.Security.PFN_CPD_ADD_PRIVDATA,
    pfnInitialize: Windows.Win32.Security.PFN_PROVIDER_INIT_CALL,
    pfnObjectTrust: Windows.Win32.Security.PFN_PROVIDER_OBJTRUST_CALL,
    pfnSignatureTrust: Windows.Win32.Security.PFN_PROVIDER_SIGTRUST_CALL,
    pfnCertificateTrust: Windows.Win32.Security.PFN_PROVIDER_CERTTRUST_CALL,
    pfnFinalPolicy: Windows.Win32.Security.PFN_PROVIDER_FINALPOLICY_CALL,
    pfnCertCheckPolicy: Windows.Win32.Security.PFN_PROVIDER_CERTCHKPOLICY_CALL,
    pfnTestFinalPolicy: Windows.Win32.Security.PFN_PROVIDER_TESTFINALPOLICY_CALL,
    psUIpfns: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_PROVUI_FUNCS},
    pfnCleanupPolicy: Windows.Win32.Security.PFN_PROVIDER_CLEANUP_CALL,
};
// --------------------------------------------------------
// Type: PFN_PROVUI_CALL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_PROVUI_CALL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPT_PROVUI_FUNCS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PROVUI_FUNCS = extern struct {
    cbStruct: {"kind":"UInt32"},
    psUIData: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_PROVUI_DATA},
    pfnOnMoreInfoClick: Windows.Win32.Security.PFN_PROVUI_CALL,
    pfnOnMoreInfoClickDefault: Windows.Win32.Security.PFN_PROVUI_CALL,
    pfnOnAdvancedClick: Windows.Win32.Security.PFN_PROVUI_CALL,
    pfnOnAdvancedClickDefault: Windows.Win32.Security.PFN_PROVUI_CALL,
};
// --------------------------------------------------------
// Type: CRYPT_PROVUI_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PROVUI_DATA = extern struct {
    cbStruct: {"kind":"UInt32"},
    dwFinalError: {"kind":"UInt32"},
    pYesButtonText: {"kind""Ptr","child":{"kind":"UInt16"}},
    pNoButtonText: {"kind""Ptr","child":{"kind":"UInt16"}},
    pMoreInfoButtonText: {"kind""Ptr","child":{"kind":"UInt16"}},
    pAdvancedLinkText: {"kind""Ptr","child":{"kind":"UInt16"}},
    pCopyActionText: {"kind""Ptr","child":{"kind":"UInt16"}},
    pCopyActionTextNoTS: {"kind""Ptr","child":{"kind":"UInt16"}},
    pCopyActionTextNotSigned: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: CRYPT_PROVIDER_SGNR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PROVIDER_SGNR = extern struct {
    cbStruct: {"kind":"UInt32"},
    sftVerifyAsOf: Windows.Win32.WindowsProgramming.FILETIME,
    csCertChain: {"kind":"UInt32"},
    pasCertChain: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_PROVIDER_CERT},
    dwSignerType: {"kind":"UInt32"},
    psSigner: {"kind""Ptr","child":Windows.Win32.Security.CMSG_SIGNER_INFO},
    dwError: {"kind":"UInt32"},
    csCounterSigners: {"kind":"UInt32"},
    pasCounterSigners: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_PROVIDER_SGNR},
    pChainContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CHAIN_CONTEXT},
};
// --------------------------------------------------------
// Type: CRYPT_PROVIDER_CERT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PROVIDER_CERT = extern struct {
    cbStruct: {"kind":"UInt32"},
    pCert: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    fCommercial: Windows.Win32.SystemServices.BOOL,
    fTrustedRoot: Windows.Win32.SystemServices.BOOL,
    fSelfSigned: Windows.Win32.SystemServices.BOOL,
    fTestCert: Windows.Win32.SystemServices.BOOL,
    dwRevokedReason: {"kind":"UInt32"},
    dwConfidence: {"kind":"UInt32"},
    dwError: {"kind":"UInt32"},
    pTrustListContext: {"kind""Ptr","child":Windows.Win32.Security.CTL_CONTEXT},
    fTrustListSignerCert: Windows.Win32.SystemServices.BOOL,
    pCtlContext: {"kind""Ptr","child":Windows.Win32.Security.CTL_CONTEXT},
    dwCtlError: {"kind":"UInt32"},
    fIsCyclic: Windows.Win32.SystemServices.BOOL,
    pChainElement: {"kind""Ptr","child":Windows.Win32.Security.CERT_CHAIN_ELEMENT},
};
// --------------------------------------------------------
// Type: CRYPT_PROVIDER_PRIVDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PROVIDER_PRIVDATA = extern struct {
    cbStruct: {"kind":"UInt32"},
    gProviderID: Guid,
    cbProvData: {"kind":"UInt32"},
    pvProvData: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: PROVDATA_SIP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROVDATA_SIP = extern struct {
    cbStruct: {"kind":"UInt32"},
    gSubject: Guid,
    pSip: {"kind""Ptr","child":Windows.Win32.Security.SIP_DISPATCH_INFO},
    pCATSip: {"kind""Ptr","child":Windows.Win32.Security.SIP_DISPATCH_INFO},
    psSipSubjectInfo: {"kind""Ptr","child":Windows.Win32.Security.SIP_SUBJECTINFO},
    psSipCATSubjectInfo: {"kind""Ptr","child":Windows.Win32.Security.SIP_SUBJECTINFO},
    psIndirectData: {"kind""Ptr","child":Windows.Win32.Security.SIP_INDIRECT_DATA},
};
// --------------------------------------------------------
// Type: CRYPT_TRUST_REG_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_TRUST_REG_ENTRY = extern struct {
    cbStruct: {"kind":"UInt32"},
    pwszDLLName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszFunctionName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: CRYPT_REGISTER_ACTIONID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_REGISTER_ACTIONID = extern struct {
    cbStruct: {"kind":"UInt32"},
    sInitProvider: Windows.Win32.Security.CRYPT_TRUST_REG_ENTRY,
    sObjectProvider: Windows.Win32.Security.CRYPT_TRUST_REG_ENTRY,
    sSignatureProvider: Windows.Win32.Security.CRYPT_TRUST_REG_ENTRY,
    sCertificateProvider: Windows.Win32.Security.CRYPT_TRUST_REG_ENTRY,
    sCertificatePolicyProvider: Windows.Win32.Security.CRYPT_TRUST_REG_ENTRY,
    sFinalPolicyProvider: Windows.Win32.Security.CRYPT_TRUST_REG_ENTRY,
    sTestPolicyProvider: Windows.Win32.Security.CRYPT_TRUST_REG_ENTRY,
    sCleanupProvider: Windows.Win32.Security.CRYPT_TRUST_REG_ENTRY,
};
// --------------------------------------------------------
// Type: PFN_ALLOCANDFILLDEFUSAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_ALLOCANDFILLDEFUSAGE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_FREEDEFUSAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_FREEDEFUSAGE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPT_PROVIDER_REGDEFUSAGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PROVIDER_REGDEFUSAGE = extern struct {
    cbStruct: {"kind":"UInt32"},
    pgActionID: {"kind""Ptr","child":Guid},
    pwszDllName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszLoadCallbackDataFunctionName: {"kind""Ptr","child":{"kind":"SByte"}},
    pwszFreeCallbackDataFunctionName: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: CRYPT_PROVIDER_DEFUSAGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PROVIDER_DEFUSAGE = extern struct {
    cbStruct: {"kind":"UInt32"},
    gActionID: Guid,
    pDefPolicyCallbackData: {"kind""Ptr","child":{"kind":"Void"}},
    pDefSIPClientData: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: SPC_SERIALIZED_OBJECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SPC_SERIALIZED_OBJECT = extern struct {
    ClassId: {"kind":"Array","child": {"kind":"Byte"}},
    SerializedData: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: SPC_SIGINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SPC_SIGINFO = extern struct {
    dwSipVersion: {"kind":"UInt32"},
    gSIPGuid: Guid,
    dwReserved1: {"kind":"UInt32"},
    dwReserved2: {"kind":"UInt32"},
    dwReserved3: {"kind":"UInt32"},
    dwReserved4: {"kind":"UInt32"},
    dwReserved5: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SPC_LINK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SPC_LINK = extern struct {
    dwLinkChoice: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.SPC_LINK+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: SPC_PE_IMAGE_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SPC_PE_IMAGE_DATA = extern struct {
    Flags: Windows.Win32.Security.CRYPT_BIT_BLOB,
    pFile: {"kind""Ptr","child":Windows.Win32.Security.SPC_LINK},
};
// --------------------------------------------------------
// Type: SPC_INDIRECT_DATA_CONTENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SPC_INDIRECT_DATA_CONTENT = extern struct {
    Data: Windows.Win32.Security.CRYPT_ATTRIBUTE_TYPE_VALUE,
    DigestAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    Digest: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: SPC_FINANCIAL_CRITERIA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SPC_FINANCIAL_CRITERIA = extern struct {
    fFinancialInfoAvailable: Windows.Win32.SystemServices.BOOL,
    fMeetsCriteria: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: SPC_IMAGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SPC_IMAGE = extern struct {
    pImageLink: {"kind""Ptr","child":Windows.Win32.Security.SPC_LINK},
    Bitmap: Windows.Win32.Security.CRYPTOAPI_BLOB,
    Metafile: Windows.Win32.Security.CRYPTOAPI_BLOB,
    EnhancedMetafile: Windows.Win32.Security.CRYPTOAPI_BLOB,
    GifFile: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: SPC_SP_AGENCY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SPC_SP_AGENCY_INFO = extern struct {
    pPolicyInformation: {"kind""Ptr","child":Windows.Win32.Security.SPC_LINK},
    pwszPolicyDisplayText: {"kind""Ptr","child":{"kind":"UInt16"}},
    pLogoImage: {"kind""Ptr","child":Windows.Win32.Security.SPC_IMAGE},
    pLogoLink: {"kind""Ptr","child":Windows.Win32.Security.SPC_LINK},
};
// --------------------------------------------------------
// Type: SPC_STATEMENT_TYPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SPC_STATEMENT_TYPE = extern struct {
    cKeyPurposeId: {"kind":"UInt32"},
    rgpszKeyPurposeId: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},
};
// --------------------------------------------------------
// Type: SPC_SP_OPUS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SPC_SP_OPUS_INFO = extern struct {
    pwszProgramName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pMoreInfo: {"kind""Ptr","child":Windows.Win32.Security.SPC_LINK},
    pPublisherInfo: {"kind""Ptr","child":Windows.Win32.Security.SPC_LINK},
};
// --------------------------------------------------------
// Type: CAT_NAMEVALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CAT_NAMEVALUE = extern struct {
    pwszTag: {"kind""Ptr","child":{"kind":"UInt16"}},
    fdwFlags: {"kind":"UInt32"},
    Value: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CAT_MEMBERINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CAT_MEMBERINFO = extern struct {
    pwszSubjGuid: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwCertVersion: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CAT_MEMBERINFO2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CAT_MEMBERINFO2 = extern struct {
    SubjectGuid: Guid,
    dwCertVersion: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: INTENT_TO_SEAL_ATTRIBUTE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTENT_TO_SEAL_ATTRIBUTE = extern struct {
    version: {"kind":"UInt32"},
    seal: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: SEALING_SIGNATURE_ATTRIBUTE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEALING_SIGNATURE_ATTRIBUTE = extern struct {
    version: {"kind":"UInt32"},
    signerIndex: {"kind":"UInt32"},
    signatureAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    encryptedDigest: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: SEALING_TIMESTAMP_ATTRIBUTE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEALING_TIMESTAMP_ATTRIBUTE = extern struct {
    version: {"kind":"UInt32"},
    signerIndex: {"kind":"UInt32"},
    sealTimeStampToken: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: WIN_CERTIFICATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WIN_CERTIFICATE = extern struct {
    dwLength: {"kind":"UInt32"},
    wRevision: {"kind":"UInt16"},
    wCertificateType: {"kind":"UInt16"},
    bCertificate: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT = extern struct {
    hClientToken: Windows.Win32.SystemServices.HANDLE,
    SubjectType: {"kind""Ptr","child":Guid},
    Subject: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: WIN_TRUST_ACTDATA_SUBJECT_ONLY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WIN_TRUST_ACTDATA_SUBJECT_ONLY = extern struct {
    SubjectType: {"kind""Ptr","child":Guid},
    Subject: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: WIN_TRUST_SUBJECT_FILE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WIN_TRUST_SUBJECT_FILE = extern struct {
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpPath: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: WIN_TRUST_SUBJECT_FILE_AND_DISPLAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WIN_TRUST_SUBJECT_FILE_AND_DISPLAY = extern struct {
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpDisplayName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: WIN_SPUB_TRUSTED_PUBLISHER_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WIN_SPUB_TRUSTED_PUBLISHER_DATA = extern struct {
    hClientToken: Windows.Win32.SystemServices.HANDLE,
    lpCertificate: {"kind""Ptr","child":Windows.Win32.Security.WIN_CERTIFICATE},
};
// --------------------------------------------------------
// Type: PFNCFILTERPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNCFILTERPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CERT_SELECTUI_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_SELECTUI_INPUT = extern struct {
    hStore: {"kind""Ptr","child":{"kind":"Void"}},
    prgpChain: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CERT_CHAIN_CONTEXT}},
    cChain: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CRYPTUI_CERT_MGR_STRUCT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTUI_CERT_MGR_STRUCT = extern struct {
    dwSize: {"kind":"UInt32"},
    hwndParent: Windows.Win32.WindowsAndMessaging.HWND,
    dwFlags: {"kind":"UInt32"},
    pwszTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszInitUsageOID: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: CRYPTUI_WIZ_DIGITAL_SIGN_BLOB_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTUI_WIZ_DIGITAL_SIGN_BLOB_INFO = extern struct {
    dwSize: {"kind":"UInt32"},
    pGuidSubject: {"kind""Ptr","child":Guid},
    cbBlob: {"kind":"UInt32"},
    pbBlob: {"kind""Ptr","child":{"kind":"Byte"}},
    pwszDisplayName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: CRYPTUI_WIZ_DIGITAL_SIGN_STORE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTUI_WIZ_DIGITAL_SIGN_STORE_INFO = extern struct {
    dwSize: {"kind":"UInt32"},
    cCertStore: {"kind":"UInt32"},
    rghCertStore: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pFilterCallback: Windows.Win32.Security.PFNCFILTERPROC,
    pvCallbackData: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: CRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE_INFO = extern struct {
    dwSize: {"kind":"UInt32"},
    pwszPvkFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszProvName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwProvType: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFO = extern struct {
    dwSize: {"kind":"UInt32"},
    pwszSigningCertFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwPvkChoice: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.CRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFO+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO = extern struct {
    dwSize: {"kind":"UInt32"},
    dwAttrFlags: {"kind":"UInt32"},
    pwszDescription: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszMoreInfoLocation: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszHashAlg: {"kind""Ptr","child":{"kind":"SByte"}},
    pwszSigningCertDisplayString: {"kind""Ptr","child":{"kind":"UInt16"}},
    hAdditionalCertStore: {"kind""Ptr","child":{"kind":"Void"}},
    psAuthenticated: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_ATTRIBUTES},
    psUnauthenticated: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_ATTRIBUTES},
};
// --------------------------------------------------------
// Type: CRYPTUI_WIZ_DIGITAL_SIGN_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTUI_WIZ_DIGITAL_SIGN_INFO = extern struct {
    dwSize: {"kind":"UInt32"},
    dwSubjectChoice: {"kind":"UInt32"},
    Anonymous1: Windows.Win32.Security.CRYPTUI_WIZ_DIGITAL_SIGN_INFO+_Anonymous1_e__Union,
    dwSigningCertChoice: {"kind":"UInt32"},
    Anonymous2: Windows.Win32.Security.CRYPTUI_WIZ_DIGITAL_SIGN_INFO+_Anonymous2_e__Union,
    pwszTimestampURL: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwAdditionalCertChoice: {"kind":"UInt32"},
    pSignExtInfo: {"kind""Ptr","child":Windows.Win32.Security.CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO},
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT = extern struct {
    dwSize: {"kind":"UInt32"},
    cbBlob: {"kind":"UInt32"},
    pbBlob: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: CRYPTUI_INITDIALOG_STRUCT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTUI_INITDIALOG_STRUCT = extern struct {
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
    pCertContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
};
// --------------------------------------------------------
// Type: CRYPTUI_VIEWCERTIFICATE_STRUCTW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTUI_VIEWCERTIFICATE_STRUCTW = extern struct {
    dwSize: {"kind":"UInt32"},
    hwndParent: Windows.Win32.WindowsAndMessaging.HWND,
    dwFlags: {"kind":"UInt32"},
    szTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    pCertContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    rgszPurposes: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},
    cPurposes: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.CRYPTUI_VIEWCERTIFICATE_STRUCTW+_Anonymous_e__Union,
    fpCryptProviderDataTrustedUsage: Windows.Win32.SystemServices.BOOL,
    idxSigner: {"kind":"UInt32"},
    idxCert: {"kind":"UInt32"},
    fCounterSigner: Windows.Win32.SystemServices.BOOL,
    idxCounterSigner: {"kind":"UInt32"},
    cStores: {"kind":"UInt32"},
    rghStores: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    cPropSheetPages: {"kind":"UInt32"},
    rgPropSheetPages: {"kind""Ptr","child":Windows.Win32.Controls.PROPSHEETPAGEW},
    nStartPage: {"kind":"UInt32"},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CRYPTUI_VIEWCERTIFICATE_STRUCTA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTUI_VIEWCERTIFICATE_STRUCTA = extern struct {
    dwSize: {"kind":"UInt32"},
    hwndParent: Windows.Win32.WindowsAndMessaging.HWND,
    dwFlags: {"kind":"UInt32"},
    szTitle: {"kind""Ptr","child":{"kind":"SByte"}},
    pCertContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    rgszPurposes: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},
    cPurposes: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.CRYPTUI_VIEWCERTIFICATE_STRUCTA+_Anonymous_e__Union,
    fpCryptProviderDataTrustedUsage: Windows.Win32.SystemServices.BOOL,
    idxSigner: {"kind":"UInt32"},
    idxCert: {"kind":"UInt32"},
    fCounterSigner: Windows.Win32.SystemServices.BOOL,
    idxCounterSigner: {"kind":"UInt32"},
    cStores: {"kind":"UInt32"},
    rghStores: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    cPropSheetPages: {"kind":"UInt32"},
    rgPropSheetPages: {"kind""Ptr","child":Windows.Win32.Controls.PROPSHEETPAGEA},
    nStartPage: {"kind":"UInt32"},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CRYPTUI_WIZ_EXPORT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTUI_WIZ_EXPORT_INFO = extern struct {
    dwSize: {"kind":"UInt32"},
    pwszExportFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwSubjectChoice: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.CRYPTUI_WIZ_EXPORT_INFO+_Anonymous_e__Union,
    cStores: {"kind":"UInt32"},
    rghStores: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CRYPTUI_WIZ_EXPORT_CERTCONTEXT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTUI_WIZ_EXPORT_CERTCONTEXT_INFO = extern struct {
    dwSize: {"kind":"UInt32"},
    dwExportFormat: {"kind":"UInt32"},
    fExportChain: Windows.Win32.SystemServices.BOOL,
    fExportPrivateKeys: Windows.Win32.SystemServices.BOOL,
    pwszPassword: {"kind""Ptr","child":{"kind":"UInt16"}},
    fStrongEncryption: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: CRYPTUI_WIZ_IMPORT_SRC_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTUI_WIZ_IMPORT_SRC_INFO = extern struct {
    dwSize: {"kind":"UInt32"},
    dwSubjectChoice: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.CRYPTUI_WIZ_IMPORT_SRC_INFO+_Anonymous_e__Union,
    dwFlags: {"kind":"UInt32"},
    pwszPassword: {"kind""Ptr","child":{"kind":"UInt16"}},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: SIP_SUBJECTINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SIP_SUBJECTINFO = extern struct {
    cbSize: {"kind":"UInt32"},
    pgSubjectType: {"kind""Ptr","child":Guid},
    hFile: Windows.Win32.SystemServices.HANDLE,
    pwsFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwsDisplayName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwReserved1: {"kind":"UInt32"},
    dwIntVersion: {"kind":"UInt32"},
    hProv: {"kind":"UIntPtr"},
    DigestAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    dwFlags: {"kind":"UInt32"},
    dwEncodingType: {"kind":"UInt32"},
    dwReserved2: {"kind":"UInt32"},
    fdwCAPISettings: {"kind":"UInt32"},
    fdwSecuritySettings: {"kind":"UInt32"},
    dwIndex: {"kind":"UInt32"},
    dwUnionChoice: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Security.SIP_SUBJECTINFO+_Anonymous_e__Union,
    pClientData: {"kind""Ptr","child":{"kind":"Void"}},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: MS_ADDINFO_FLAT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MS_ADDINFO_FLAT = extern struct {
    cbStruct: {"kind":"UInt32"},
    pIndirectData: {"kind""Ptr","child":Windows.Win32.Security.SIP_INDIRECT_DATA},
};
// --------------------------------------------------------
// Type: MS_ADDINFO_CATALOGMEMBER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MS_ADDINFO_CATALOGMEMBER = extern struct {
    cbStruct: {"kind":"UInt32"},
    pStore: {"kind""Ptr","child":Windows.Win32.Security.CRYPTCATSTORE},
    pMember: {"kind""Ptr","child":Windows.Win32.Security.CRYPTCATMEMBER},
};
// --------------------------------------------------------
// Type: MS_ADDINFO_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MS_ADDINFO_BLOB = extern struct {
    cbStruct: {"kind":"UInt32"},
    cbMemObject: {"kind":"UInt32"},
    pbMemObject: {"kind""Ptr","child":{"kind":"Byte"}},
    cbMemSignedMsg: {"kind":"UInt32"},
    pbMemSignedMsg: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SIP_CAP_SET_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SIP_CAP_SET_V2 = extern struct {
    cbSize: {"kind":"UInt32"},
    dwVersion: {"kind":"UInt32"},
    isMultiSign: Windows.Win32.SystemServices.BOOL,
    dwReserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SIP_CAP_SET_V3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SIP_CAP_SET_V3 = extern struct {
    cbSize: {"kind":"UInt32"},
    dwVersion: {"kind":"UInt32"},
    isMultiSign: Windows.Win32.SystemServices.BOOL,
    Anonymous: Windows.Win32.Security.SIP_CAP_SET_V3+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: SIP_INDIRECT_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SIP_INDIRECT_DATA = extern struct {
    Data: Windows.Win32.Security.CRYPT_ATTRIBUTE_TYPE_VALUE,
    DigestAlgorithm: Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER,
    Digest: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: pCryptSIPGetSignedDataMsg
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const pCryptSIPGetSignedDataMsg = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: pCryptSIPPutSignedDataMsg
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const pCryptSIPPutSignedDataMsg = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: pCryptSIPCreateIndirectData
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const pCryptSIPCreateIndirectData = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: pCryptSIPVerifyIndirectData
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const pCryptSIPVerifyIndirectData = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: pCryptSIPRemoveSignedDataMsg
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const pCryptSIPRemoveSignedDataMsg = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SIP_DISPATCH_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SIP_DISPATCH_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    hSIP: Windows.Win32.SystemServices.HANDLE,
    pfGet: Windows.Win32.Security.pCryptSIPGetSignedDataMsg,
    pfPut: Windows.Win32.Security.pCryptSIPPutSignedDataMsg,
    pfCreate: Windows.Win32.Security.pCryptSIPCreateIndirectData,
    pfVerify: Windows.Win32.Security.pCryptSIPVerifyIndirectData,
    pfRemove: Windows.Win32.Security.pCryptSIPRemoveSignedDataMsg,
};
// --------------------------------------------------------
// Type: pfnIsFileSupported
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const pfnIsFileSupported = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: pfnIsFileSupportedName
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const pfnIsFileSupportedName = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SIP_ADD_NEWPROVIDER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SIP_ADD_NEWPROVIDER = extern struct {
    cbStruct: {"kind":"UInt32"},
    pgSubject: {"kind""Ptr","child":Guid},
    pwszDLLFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszMagicNumber: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszIsFunctionName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszGetFuncName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszPutFuncName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszCreateFuncName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszVerifyFuncName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszRemoveFuncName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszIsFunctionNameFmt2: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszGetCapFuncName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: pCryptSIPGetCaps
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const pCryptSIPGetCaps = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: pCryptSIPGetSealedDigest
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const pCryptSIPGetSealedDigest = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPTCATSTORE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTCATSTORE = extern struct {
    cbStruct: {"kind":"UInt32"},
    dwPublicVersion: {"kind":"UInt32"},
    pwszP7File: {"kind""Ptr","child":{"kind":"UInt16"}},
    hProv: {"kind":"UIntPtr"},
    dwEncodingType: {"kind":"UInt32"},
    fdwStoreFlags: {"kind":"UInt32"},
    hReserved: Windows.Win32.SystemServices.HANDLE,
    hAttrs: Windows.Win32.SystemServices.HANDLE,
    hCryptMsg: {"kind""Ptr","child":{"kind":"Void"}},
    hSorted: Windows.Win32.SystemServices.HANDLE,
};
// --------------------------------------------------------
// Type: CRYPTCATMEMBER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTCATMEMBER = extern struct {
    cbStruct: {"kind":"UInt32"},
    pwszReferenceTag: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    gSubjectType: Guid,
    fdwMemberFlags: {"kind":"UInt32"},
    pIndirectData: {"kind""Ptr","child":Windows.Win32.Security.SIP_INDIRECT_DATA},
    dwCertVersion: {"kind":"UInt32"},
    dwReserved: {"kind":"UInt32"},
    hReserved: Windows.Win32.SystemServices.HANDLE,
    sEncodedIndirectData: Windows.Win32.Security.CRYPTOAPI_BLOB,
    sEncodedMemberInfo: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CRYPTCATATTRIBUTE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTCATATTRIBUTE = extern struct {
    cbStruct: {"kind":"UInt32"},
    pwszReferenceTag: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwAttrTypeAndAction: {"kind":"UInt32"},
    cbValue: {"kind":"UInt32"},
    pbValue: {"kind""Ptr","child":{"kind":"Byte"}},
    dwReserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CRYPTCATCDF
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTCATCDF = extern struct {
    cbStruct: {"kind":"UInt32"},
    hFile: Windows.Win32.SystemServices.HANDLE,
    dwCurFilePos: {"kind":"UInt32"},
    dwLastMemberOffset: {"kind":"UInt32"},
    fEOF: Windows.Win32.SystemServices.BOOL,
    pwszResultDir: {"kind""Ptr","child":{"kind":"UInt16"}},
    hCATStore: Windows.Win32.SystemServices.HANDLE,
};
// --------------------------------------------------------
// Type: CATALOG_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CATALOG_INFO = extern struct {
    cbStruct: {"kind":"UInt32"},
    wszCatalogFile: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: PFN_CDF_PARSE_ERROR_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CDF_PARSE_ERROR_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CEnroll2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CEnroll2 = opaque {
};
// --------------------------------------------------------
// Type: CEnroll
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CEnroll = opaque {
};
// --------------------------------------------------------
// Type: ICEnroll
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICEnroll = *opaque{
    // TODO: Method 'createFilePKCS10'
    // TODO: Method 'acceptFilePKCS7'
    // TODO: Method 'createPKCS10'
    // TODO: Method 'acceptPKCS7'
    // TODO: Method 'getCertFromPKCS7'
    // TODO: Method 'enumProviders'
    // TODO: Method 'enumContainers'
    // TODO: Method 'freeRequestInfo'
    // TODO: Method 'get_MyStoreName'
    // TODO: Method 'put_MyStoreName'
    // TODO: Method 'get_MyStoreType'
    // TODO: Method 'put_MyStoreType'
    // TODO: Method 'get_MyStoreFlags'
    // TODO: Method 'put_MyStoreFlags'
    // TODO: Method 'get_CAStoreName'
    // TODO: Method 'put_CAStoreName'
    // TODO: Method 'get_CAStoreType'
    // TODO: Method 'put_CAStoreType'
    // TODO: Method 'get_CAStoreFlags'
    // TODO: Method 'put_CAStoreFlags'
    // TODO: Method 'get_RootStoreName'
    // TODO: Method 'put_RootStoreName'
    // TODO: Method 'get_RootStoreType'
    // TODO: Method 'put_RootStoreType'
    // TODO: Method 'get_RootStoreFlags'
    // TODO: Method 'put_RootStoreFlags'
    // TODO: Method 'get_RequestStoreName'
    // TODO: Method 'put_RequestStoreName'
    // TODO: Method 'get_RequestStoreType'
    // TODO: Method 'put_RequestStoreType'
    // TODO: Method 'get_RequestStoreFlags'
    // TODO: Method 'put_RequestStoreFlags'
    // TODO: Method 'get_ContainerName'
    // TODO: Method 'put_ContainerName'
    // TODO: Method 'get_ProviderName'
    // TODO: Method 'put_ProviderName'
    // TODO: Method 'get_ProviderType'
    // TODO: Method 'put_ProviderType'
    // TODO: Method 'get_KeySpec'
    // TODO: Method 'put_KeySpec'
    // TODO: Method 'get_ProviderFlags'
    // TODO: Method 'put_ProviderFlags'
    // TODO: Method 'get_UseExistingKeySet'
    // TODO: Method 'put_UseExistingKeySet'
    // TODO: Method 'get_GenKeyFlags'
    // TODO: Method 'put_GenKeyFlags'
    // TODO: Method 'get_DeleteRequestCert'
    // TODO: Method 'put_DeleteRequestCert'
    // TODO: Method 'get_WriteCertToCSP'
    // TODO: Method 'put_WriteCertToCSP'
    // TODO: Method 'get_SPCFileName'
    // TODO: Method 'put_SPCFileName'
    // TODO: Method 'get_PVKFileName'
    // TODO: Method 'put_PVKFileName'
    // TODO: Method 'get_HashAlgorithm'
    // TODO: Method 'put_HashAlgorithm'
};
// --------------------------------------------------------
// Type: ICEnroll2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICEnroll2 = *opaque{
    // TODO: Method 'addCertTypeToRequest'
    // TODO: Method 'addNameValuePairToSignature'
    // TODO: Method 'get_WriteCertToUserDS'
    // TODO: Method 'put_WriteCertToUserDS'
    // TODO: Method 'get_EnableT61DNEncoding'
    // TODO: Method 'put_EnableT61DNEncoding'
};
// --------------------------------------------------------
// Type: ICEnroll3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICEnroll3 = *opaque{
    // TODO: Method 'InstallPKCS7'
    // TODO: Method 'Reset'
    // TODO: Method 'GetSupportedKeySpec'
    // TODO: Method 'GetKeyLen'
    // TODO: Method 'EnumAlgs'
    // TODO: Method 'GetAlgName'
    // TODO: Method 'put_ReuseHardwareKeyIfUnableToGenNew'
    // TODO: Method 'get_ReuseHardwareKeyIfUnableToGenNew'
    // TODO: Method 'put_HashAlgID'
    // TODO: Method 'get_HashAlgID'
    // TODO: Method 'put_LimitExchangeKeyToEncipherment'
    // TODO: Method 'get_LimitExchangeKeyToEncipherment'
    // TODO: Method 'put_EnableSMIMECapabilities'
    // TODO: Method 'get_EnableSMIMECapabilities'
};
// --------------------------------------------------------
// Type: ICEnroll4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICEnroll4 = *opaque{
    // TODO: Method 'put_PrivateKeyArchiveCertificate'
    // TODO: Method 'get_PrivateKeyArchiveCertificate'
    // TODO: Method 'put_ThumbPrint'
    // TODO: Method 'get_ThumbPrint'
    // TODO: Method 'binaryToString'
    // TODO: Method 'stringToBinary'
    // TODO: Method 'addExtensionToRequest'
    // TODO: Method 'addAttributeToRequest'
    // TODO: Method 'addNameValuePairToRequest'
    // TODO: Method 'resetExtensions'
    // TODO: Method 'resetAttributes'
    // TODO: Method 'createRequest'
    // TODO: Method 'createFileRequest'
    // TODO: Method 'acceptResponse'
    // TODO: Method 'acceptFileResponse'
    // TODO: Method 'getCertFromResponse'
    // TODO: Method 'getCertFromFileResponse'
    // TODO: Method 'createPFX'
    // TODO: Method 'createFilePFX'
    // TODO: Method 'setPendingRequestInfo'
    // TODO: Method 'enumPendingRequest'
    // TODO: Method 'removePendingRequest'
    // TODO: Method 'GetKeyLenEx'
    // TODO: Method 'InstallPKCS7Ex'
    // TODO: Method 'addCertTypeToRequestEx'
    // TODO: Method 'getProviderType'
    // TODO: Method 'put_SignerCertificate'
    // TODO: Method 'put_ClientId'
    // TODO: Method 'get_ClientId'
    // TODO: Method 'addBlobPropertyToCertificate'
    // TODO: Method 'resetBlobProperties'
    // TODO: Method 'put_IncludeSubjectKeyID'
    // TODO: Method 'get_IncludeSubjectKeyID'
};
// --------------------------------------------------------
// Type: IEnroll
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnroll = *opaque{
    // TODO: Method 'createFilePKCS10WStr'
    // TODO: Method 'acceptFilePKCS7WStr'
    // TODO: Method 'createPKCS10WStr'
    // TODO: Method 'acceptPKCS7Blob'
    // TODO: Method 'getCertContextFromPKCS7'
    // TODO: Method 'getMyStore'
    // TODO: Method 'getCAStore'
    // TODO: Method 'getROOTHStore'
    // TODO: Method 'enumProvidersWStr'
    // TODO: Method 'enumContainersWStr'
    // TODO: Method 'freeRequestInfoBlob'
    // TODO: Method 'get_MyStoreNameWStr'
    // TODO: Method 'put_MyStoreNameWStr'
    // TODO: Method 'get_MyStoreTypeWStr'
    // TODO: Method 'put_MyStoreTypeWStr'
    // TODO: Method 'get_MyStoreFlags'
    // TODO: Method 'put_MyStoreFlags'
    // TODO: Method 'get_CAStoreNameWStr'
    // TODO: Method 'put_CAStoreNameWStr'
    // TODO: Method 'get_CAStoreTypeWStr'
    // TODO: Method 'put_CAStoreTypeWStr'
    // TODO: Method 'get_CAStoreFlags'
    // TODO: Method 'put_CAStoreFlags'
    // TODO: Method 'get_RootStoreNameWStr'
    // TODO: Method 'put_RootStoreNameWStr'
    // TODO: Method 'get_RootStoreTypeWStr'
    // TODO: Method 'put_RootStoreTypeWStr'
    // TODO: Method 'get_RootStoreFlags'
    // TODO: Method 'put_RootStoreFlags'
    // TODO: Method 'get_RequestStoreNameWStr'
    // TODO: Method 'put_RequestStoreNameWStr'
    // TODO: Method 'get_RequestStoreTypeWStr'
    // TODO: Method 'put_RequestStoreTypeWStr'
    // TODO: Method 'get_RequestStoreFlags'
    // TODO: Method 'put_RequestStoreFlags'
    // TODO: Method 'get_ContainerNameWStr'
    // TODO: Method 'put_ContainerNameWStr'
    // TODO: Method 'get_ProviderNameWStr'
    // TODO: Method 'put_ProviderNameWStr'
    // TODO: Method 'get_ProviderType'
    // TODO: Method 'put_ProviderType'
    // TODO: Method 'get_KeySpec'
    // TODO: Method 'put_KeySpec'
    // TODO: Method 'get_ProviderFlags'
    // TODO: Method 'put_ProviderFlags'
    // TODO: Method 'get_UseExistingKeySet'
    // TODO: Method 'put_UseExistingKeySet'
    // TODO: Method 'get_GenKeyFlags'
    // TODO: Method 'put_GenKeyFlags'
    // TODO: Method 'get_DeleteRequestCert'
    // TODO: Method 'put_DeleteRequestCert'
    // TODO: Method 'get_WriteCertToUserDS'
    // TODO: Method 'put_WriteCertToUserDS'
    // TODO: Method 'get_EnableT61DNEncoding'
    // TODO: Method 'put_EnableT61DNEncoding'
    // TODO: Method 'get_WriteCertToCSP'
    // TODO: Method 'put_WriteCertToCSP'
    // TODO: Method 'get_SPCFileNameWStr'
    // TODO: Method 'put_SPCFileNameWStr'
    // TODO: Method 'get_PVKFileNameWStr'
    // TODO: Method 'put_PVKFileNameWStr'
    // TODO: Method 'get_HashAlgorithmWStr'
    // TODO: Method 'put_HashAlgorithmWStr'
    // TODO: Method 'get_RenewalCertificate'
    // TODO: Method 'put_RenewalCertificate'
    // TODO: Method 'AddCertTypeToRequestWStr'
    // TODO: Method 'AddNameValuePairToSignatureWStr'
    // TODO: Method 'AddExtensionsToRequest'
    // TODO: Method 'AddAuthenticatedAttributesToPKCS7Request'
    // TODO: Method 'CreatePKCS7RequestFromRequest'
};
// --------------------------------------------------------
// Type: IEnroll2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnroll2 = *opaque{
    // TODO: Method 'InstallPKCS7Blob'
    // TODO: Method 'Reset'
    // TODO: Method 'GetSupportedKeySpec'
    // TODO: Method 'GetKeyLen'
    // TODO: Method 'EnumAlgs'
    // TODO: Method 'GetAlgNameWStr'
    // TODO: Method 'put_ReuseHardwareKeyIfUnableToGenNew'
    // TODO: Method 'get_ReuseHardwareKeyIfUnableToGenNew'
    // TODO: Method 'put_HashAlgID'
    // TODO: Method 'get_HashAlgID'
    // TODO: Method 'SetHStoreMy'
    // TODO: Method 'SetHStoreCA'
    // TODO: Method 'SetHStoreROOT'
    // TODO: Method 'SetHStoreRequest'
    // TODO: Method 'put_LimitExchangeKeyToEncipherment'
    // TODO: Method 'get_LimitExchangeKeyToEncipherment'
    // TODO: Method 'put_EnableSMIMECapabilities'
    // TODO: Method 'get_EnableSMIMECapabilities'
};
// --------------------------------------------------------
// Type: IEnroll4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnroll4 = *opaque{
    // TODO: Method 'put_ThumbPrintWStr'
    // TODO: Method 'get_ThumbPrintWStr'
    // TODO: Method 'SetPrivateKeyArchiveCertificate'
    // TODO: Method 'GetPrivateKeyArchiveCertificate'
    // TODO: Method 'binaryBlobToString'
    // TODO: Method 'stringToBinaryBlob'
    // TODO: Method 'addExtensionToRequestWStr'
    // TODO: Method 'addAttributeToRequestWStr'
    // TODO: Method 'addNameValuePairToRequestWStr'
    // TODO: Method 'resetExtensions'
    // TODO: Method 'resetAttributes'
    // TODO: Method 'createRequestWStr'
    // TODO: Method 'createFileRequestWStr'
    // TODO: Method 'acceptResponseBlob'
    // TODO: Method 'acceptFileResponseWStr'
    // TODO: Method 'getCertContextFromResponseBlob'
    // TODO: Method 'getCertContextFromFileResponseWStr'
    // TODO: Method 'createPFXWStr'
    // TODO: Method 'createFilePFXWStr'
    // TODO: Method 'setPendingRequestInfoWStr'
    // TODO: Method 'enumPendingRequestWStr'
    // TODO: Method 'removePendingRequestWStr'
    // TODO: Method 'GetKeyLenEx'
    // TODO: Method 'InstallPKCS7BlobEx'
    // TODO: Method 'AddCertTypeToRequestWStrEx'
    // TODO: Method 'getProviderTypeWStr'
    // TODO: Method 'addBlobPropertyToCertificateWStr'
    // TODO: Method 'SetSignerCertificate'
    // TODO: Method 'put_ClientId'
    // TODO: Method 'get_ClientId'
    // TODO: Method 'put_IncludeSubjectKeyID'
    // TODO: Method 'get_IncludeSubjectKeyID'
};
// --------------------------------------------------------
// Type: SCESVC_CONFIGURATION_LINE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCESVC_CONFIGURATION_LINE = extern struct {
    Key: {"kind""Ptr","child":{"kind":"SByte"}},
    Value: {"kind""Ptr","child":{"kind":"SByte"}},
    ValueLen: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SCESVC_CONFIGURATION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCESVC_CONFIGURATION_INFO = extern struct {
    Count: {"kind":"UInt32"},
    Lines: {"kind""Ptr","child":Windows.Win32.Security.SCESVC_CONFIGURATION_LINE},
};
// --------------------------------------------------------
// Type: SCESVC_INFO_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SCESVC_INFO_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: SCESVC_ANALYSIS_LINE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCESVC_ANALYSIS_LINE = extern struct {
    Key: {"kind""Ptr","child":{"kind":"SByte"}},
    Value: {"kind""Ptr","child":{"kind":"Byte"}},
    ValueLen: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SCESVC_ANALYSIS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCESVC_ANALYSIS_INFO = extern struct {
    Count: {"kind":"UInt32"},
    Lines: {"kind""Ptr","child":Windows.Win32.Security.SCESVC_ANALYSIS_LINE},
};
// --------------------------------------------------------
// Type: PFSCE_QUERY_INFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFSCE_QUERY_INFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFSCE_SET_INFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFSCE_SET_INFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFSCE_FREE_INFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFSCE_FREE_INFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFSCE_LOG_INFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFSCE_LOG_INFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SCESVC_CALLBACK_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCESVC_CALLBACK_INFO = extern struct {
    sceHandle: {"kind""Ptr","child":{"kind":"Void"}},
    pfQueryInfo: Windows.Win32.Security.PFSCE_QUERY_INFO,
    pfSetInfo: Windows.Win32.Security.PFSCE_SET_INFO,
    pfFreeInfo: Windows.Win32.Security.PFSCE_FREE_INFO,
    pfLogInfo: Windows.Win32.Security.PFSCE_LOG_INFO,
};
// --------------------------------------------------------
// Type: PF_ConfigAnalyzeService
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_ConfigAnalyzeService = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_UpdateService
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_UpdateService = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ISceSvcAttachmentPersistInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISceSvcAttachmentPersistInfo = *opaque{
    // TODO: Method 'Save'
    // TODO: Method 'IsDirty'
    // TODO: Method 'FreeBuffer'
};
// --------------------------------------------------------
// Type: ISceSvcAttachmentData
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISceSvcAttachmentData = *opaque{
    // TODO: Method 'GetData'
    // TODO: Method 'Initialize'
    // TODO: Method 'FreeBuffer'
    // TODO: Method 'CloseHandle'
};
// --------------------------------------------------------
// Type: SAFER_LEVEL_HANDLE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SAFER_LEVEL_HANDLE__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: SAFER_CODE_PROPERTIES_V1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SAFER_CODE_PROPERTIES_V1 = extern struct {
    cbSize: {"kind":"UInt32"},
    dwCheckFlags: {"kind":"UInt32"},
    ImagePath: {"kind""Ptr","child":{"kind":"UInt16"}},
    hImageFileHandle: Windows.Win32.SystemServices.HANDLE,
    UrlZoneId: {"kind":"UInt32"},
    ImageHash: {"kind":"Array","child": {"kind":"Byte"}},
    dwImageHashSize: {"kind":"UInt32"},
    ImageSize: Windows.Win32.SystemServices.LARGE_INTEGER,
    HashAlgorithm: {"kind":"UInt32"},
    pByteBlock: {"kind""Ptr","child":{"kind":"Byte"}},
    hWndParent: Windows.Win32.WindowsAndMessaging.HWND,
    dwWVTUIChoice: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SAFER_CODE_PROPERTIES_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SAFER_CODE_PROPERTIES_V2 = extern struct {
    cbSize: {"kind":"UInt32"},
    dwCheckFlags: {"kind":"UInt32"},
    ImagePath: {"kind""Ptr","child":{"kind":"UInt16"}},
    hImageFileHandle: Windows.Win32.SystemServices.HANDLE,
    UrlZoneId: {"kind":"UInt32"},
    ImageHash: {"kind":"Array","child": {"kind":"Byte"}},
    dwImageHashSize: {"kind":"UInt32"},
    ImageSize: Windows.Win32.SystemServices.LARGE_INTEGER,
    HashAlgorithm: {"kind":"UInt32"},
    pByteBlock: {"kind""Ptr","child":{"kind":"Byte"}},
    hWndParent: Windows.Win32.WindowsAndMessaging.HWND,
    dwWVTUIChoice: {"kind":"UInt32"},
    PackageMoniker: {"kind""Ptr","child":{"kind":"UInt16"}},
    PackagePublisher: {"kind""Ptr","child":{"kind":"UInt16"}},
    PackageName: {"kind""Ptr","child":{"kind":"UInt16"}},
    PackageVersion: {"kind":"UInt64"},
    PackageIsFramework: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: SAFER_POLICY_INFO_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SAFER_POLICY_INFO_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: SAFER_OBJECT_INFO_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SAFER_OBJECT_INFO_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: SAFER_IDENTIFICATION_TYPES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SAFER_IDENTIFICATION_TYPES = *opaque{
};
// --------------------------------------------------------
// Type: SAFER_IDENTIFICATION_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SAFER_IDENTIFICATION_HEADER = extern struct {
    dwIdentificationType: Windows.Win32.Security.SAFER_IDENTIFICATION_TYPES,
    cbStructSize: {"kind":"UInt32"},
    IdentificationGuid: Guid,
    lastModified: Windows.Win32.WindowsProgramming.FILETIME,
};
// --------------------------------------------------------
// Type: SAFER_PATHNAME_IDENTIFICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SAFER_PATHNAME_IDENTIFICATION = extern struct {
    header: Windows.Win32.Security.SAFER_IDENTIFICATION_HEADER,
    Description: {"kind":"Array","child": {"kind":"UInt16"}},
    ImageName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwSaferFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SAFER_HASH_IDENTIFICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SAFER_HASH_IDENTIFICATION = extern struct {
    header: Windows.Win32.Security.SAFER_IDENTIFICATION_HEADER,
    Description: {"kind":"Array","child": {"kind":"UInt16"}},
    FriendlyName: {"kind":"Array","child": {"kind":"UInt16"}},
    HashSize: {"kind":"UInt32"},
    ImageHash: {"kind":"Array","child": {"kind":"Byte"}},
    HashAlgorithm: {"kind":"UInt32"},
    ImageSize: Windows.Win32.SystemServices.LARGE_INTEGER,
    dwSaferFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SAFER_HASH_IDENTIFICATION2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SAFER_HASH_IDENTIFICATION2 = extern struct {
    hashIdentification: Windows.Win32.Security.SAFER_HASH_IDENTIFICATION,
    HashSize: {"kind":"UInt32"},
    ImageHash: {"kind":"Array","child": {"kind":"Byte"}},
    HashAlgorithm: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SAFER_URLZONE_IDENTIFICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SAFER_URLZONE_IDENTIFICATION = extern struct {
    header: Windows.Win32.Security.SAFER_IDENTIFICATION_HEADER,
    UrlZoneId: {"kind":"UInt32"},
    dwSaferFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SLDATATYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SLDATATYPE = *opaque{
};
// --------------------------------------------------------
// Type: SLIDTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SLIDTYPE = *opaque{
};
// --------------------------------------------------------
// Type: SLLICENSINGSTATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SLLICENSINGSTATUS = *opaque{
};
// --------------------------------------------------------
// Type: SL_LICENSING_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SL_LICENSING_STATUS = extern struct {
    SkuId: Guid,
    eStatus: Windows.Win32.Security.SLLICENSINGSTATUS,
    dwGraceTime: {"kind":"UInt32"},
    dwTotalGraceDays: {"kind":"UInt32"},
    hrReason: Windows.Win32.Com.HRESULT,
    qwValidityExpiration: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: SL_ACTIVATION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SL_ACTIVATION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: SL_ACTIVATION_INFO_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SL_ACTIVATION_INFO_HEADER = extern struct {
    cbSize: {"kind":"UInt32"},
    type: Windows.Win32.Security.SL_ACTIVATION_TYPE,
};
// --------------------------------------------------------
// Type: SL_AD_ACTIVATION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SL_AD_ACTIVATION_INFO = extern struct {
    header: Windows.Win32.Security.SL_ACTIVATION_INFO_HEADER,
    pwszProductKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszActivationObjectName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SLREFERRALTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SLREFERRALTYPE = *opaque{
};
// --------------------------------------------------------
// Type: SL_GENUINE_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SL_GENUINE_STATE = *opaque{
};
// --------------------------------------------------------
// Type: SL_NONGENUINE_UI_OPTIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SL_NONGENUINE_UI_OPTIONS = extern struct {
    cbSize: {"kind":"UInt32"},
    pComponentId: {"kind""Ptr","child":Guid},
    hResultUI: Windows.Win32.Com.HRESULT,
};
// --------------------------------------------------------
// Type: SL_SYSTEM_POLICY_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SL_SYSTEM_POLICY_INFORMATION = extern struct {
    Reserved1: {"kind":"Array","child": {"kind""Ptr","child":{"kind":"Void"}}},
    Reserved2: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: DdqAccessLevel
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DdqAccessLevel = *opaque{
};
// --------------------------------------------------------
// Type: DIAGNOSTIC_DATA_RECORD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIAGNOSTIC_DATA_RECORD = extern struct {
    rowId: {"kind":"Int64"},
    timestamp: {"kind":"UInt64"},
    eventKeywords: {"kind":"UInt64"},
    fullEventName: {"kind""Ptr","child":{"kind":"UInt16"}},
    providerGroupGuid: {"kind""Ptr","child":{"kind":"UInt16"}},
    producerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    privacyTags: {"kind""Ptr","child":{"kind":"Int32"}},
    privacyTagCount: {"kind":"UInt32"},
    categoryIds: {"kind""Ptr","child":{"kind":"Int32"}},
    categoryIdCount: {"kind":"UInt32"},
    isCoreData: Windows.Win32.SystemServices.BOOL,
    extra1: {"kind""Ptr","child":{"kind":"UInt16"}},
    extra2: {"kind""Ptr","child":{"kind":"UInt16"}},
    extra3: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: DIAGNOSTIC_DATA_SEARCH_CRITERIA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIAGNOSTIC_DATA_SEARCH_CRITERIA = extern struct {
    producerNames: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    producerNameCount: {"kind":"UInt32"},
    textToMatch: {"kind""Ptr","child":{"kind":"UInt16"}},
    categoryIds: {"kind""Ptr","child":{"kind":"Int32"}},
    categoryIdCount: {"kind":"UInt32"},
    privacyTags: {"kind""Ptr","child":{"kind":"Int32"}},
    privacyTagCount: {"kind":"UInt32"},
    coreDataOnly: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: DIAGNOSTIC_DATA_EVENT_TAG_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIAGNOSTIC_DATA_EVENT_TAG_DESCRIPTION = extern struct {
    privacyTag: {"kind":"Int32"},
    name: {"kind""Ptr","child":{"kind":"UInt16"}},
    description: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: DIAGNOSTIC_DATA_EVENT_PRODUCER_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIAGNOSTIC_DATA_EVENT_PRODUCER_DESCRIPTION = extern struct {
    name: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: DIAGNOSTIC_DATA_EVENT_CATEGORY_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIAGNOSTIC_DATA_EVENT_CATEGORY_DESCRIPTION = extern struct {
    id: {"kind":"Int32"},
    name: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: DIAGNOSTIC_DATA_EVENT_TAG_STATS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIAGNOSTIC_DATA_EVENT_TAG_STATS = extern struct {
    privacyTag: {"kind":"Int32"},
    eventCount: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DIAGNOSTIC_DATA_EVENT_BINARY_STATS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIAGNOSTIC_DATA_EVENT_BINARY_STATS = extern struct {
    moduleName: {"kind""Ptr","child":{"kind":"UInt16"}},
    friendlyModuleName: {"kind""Ptr","child":{"kind":"UInt16"}},
    eventCount: {"kind":"UInt32"},
    uploadSizeBytes: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: DIAGNOSTIC_DATA_GENERAL_STATS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIAGNOSTIC_DATA_GENERAL_STATS = extern struct {
    optInLevel: {"kind":"UInt32"},
    transcriptSizeBytes: {"kind":"UInt64"},
    oldestEventTimestamp: {"kind":"UInt64"},
    totalEventCountLast24Hours: {"kind":"UInt32"},
    averageDailyEvents: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: DIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATION = extern struct {
    hoursOfHistoryToKeep: {"kind":"UInt32"},
    maxStoreMegabytes: {"kind":"UInt32"},
    requestedMaxStoreMegabytes: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DIAGNOSTIC_REPORT_PARAMETER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIAGNOSTIC_REPORT_PARAMETER = extern struct {
    name: {"kind":"Array","child": {"kind":"UInt16"}},
    value: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: DIAGNOSTIC_REPORT_SIGNATURE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIAGNOSTIC_REPORT_SIGNATURE = extern struct {
    eventName: {"kind":"Array","child": {"kind":"UInt16"}},
    parameters: {"kind":"Array","child": Windows.Win32.Security.DIAGNOSTIC_REPORT_PARAMETER},
};
// --------------------------------------------------------
// Type: DIAGNOSTIC_REPORT_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIAGNOSTIC_REPORT_DATA = extern struct {
    signature: Windows.Win32.Security.DIAGNOSTIC_REPORT_SIGNATURE,
    bucketId: Guid,
    reportId: Guid,
    creationTime: Windows.Win32.WindowsProgramming.FILETIME,
    sizeInBytes: {"kind":"UInt64"},
    cabId: {"kind""Ptr","child":{"kind":"UInt16"}},
    reportStatus: {"kind":"UInt32"},
    reportIntegratorId: Guid,
    fileNames: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    fileCount: {"kind":"UInt32"},
    friendlyEventName: {"kind""Ptr","child":{"kind":"UInt16"}},
    applicationName: {"kind""Ptr","child":{"kind":"UInt16"}},
    applicationPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    description: {"kind""Ptr","child":{"kind":"UInt16"}},
    bucketIdString: {"kind""Ptr","child":{"kind":"UInt16"}},
    legacyBucketId: {"kind":"UInt64"},
    reportKey: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: HDIAGNOSTIC_DATA_QUERY_SESSION__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HDIAGNOSTIC_DATA_QUERY_SESSION__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HDIAGNOSTIC_REPORT__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HDIAGNOSTIC_REPORT__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HDIAGNOSTIC_EVENT_TAG_DESCRIPTION__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HDIAGNOSTIC_EVENT_TAG_DESCRIPTION__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HDIAGNOSTIC_RECORD__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HDIAGNOSTIC_RECORD__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: UNICODE_STRING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UNICODE_STRING = extern struct {
    Length: {"kind":"UInt16"},
    MaximumLength: {"kind":"UInt16"},
    Buffer: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SEC_WINNT_AUTH_IDENTITY_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_WINNT_AUTH_IDENTITY_W = extern struct {
    User: {"kind""Ptr","child":{"kind":"UInt16"}},
    UserLength: {"kind":"UInt32"},
    Domain: {"kind""Ptr","child":{"kind":"UInt16"}},
    DomainLength: {"kind":"UInt32"},
    Password: {"kind""Ptr","child":{"kind":"UInt16"}},
    PasswordLength: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SEC_WINNT_AUTH_IDENTITY_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_WINNT_AUTH_IDENTITY_A = extern struct {
    User: {"kind""Ptr","child":{"kind":"Byte"}},
    UserLength: {"kind":"UInt32"},
    Domain: {"kind""Ptr","child":{"kind":"Byte"}},
    DomainLength: {"kind":"UInt32"},
    Password: {"kind""Ptr","child":{"kind":"Byte"}},
    PasswordLength: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PROCESS_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROCESS_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: NETRESOURCEA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NETRESOURCEA = extern struct {
    dwScope: {"kind":"UInt32"},
    dwType: {"kind":"UInt32"},
    dwDisplayType: {"kind":"UInt32"},
    dwUsage: {"kind":"UInt32"},
    lpLocalName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpRemoteName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpComment: {"kind""Ptr","child":{"kind":"SByte"}},
    lpProvider: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: NETRESOURCEW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NETRESOURCEW = extern struct {
    dwScope: {"kind":"UInt32"},
    dwType: {"kind":"UInt32"},
    dwDisplayType: {"kind":"UInt32"},
    dwUsage: {"kind":"UInt32"},
    lpLocalName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpRemoteName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpComment: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpProvider: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: UNIVERSAL_NAME_INFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UNIVERSAL_NAME_INFOA = extern struct {
    lpUniversalName: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: UNIVERSAL_NAME_INFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UNIVERSAL_NAME_INFOW = extern struct {
    lpUniversalName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: REMOTE_NAME_INFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const REMOTE_NAME_INFOA = extern struct {
    lpUniversalName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpConnectionName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpRemainingPath: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: REMOTE_NAME_INFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const REMOTE_NAME_INFOW = extern struct {
    lpUniversalName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpConnectionName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpRemainingPath: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: NETCONNECTINFOSTRUCT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NETCONNECTINFOSTRUCT = extern struct {
    cbStructure: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    dwSpeed: {"kind":"UInt32"},
    dwDelay: {"kind":"UInt32"},
    dwOptDataSize: {"kind":"UInt32"},
};
],

"func_definitions": [

// set_last_errror=False (can and should we use this?)
pub extern "logoncli" fn NetAddServiceAccount(
    ServerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    AccountName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Password: {"kind""Ptr","child":{"kind":"UInt16"}},
    Flags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "logoncli" fn NetRemoveServiceAccount(
    ServerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    AccountName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Flags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "logoncli" fn NetEnumerateServiceAccounts(
    ServerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Flags: {"kind":"UInt32"},
    AccountsCount: {"kind""Ptr","child":{"kind":"UInt32"}},
    Accounts: {"kind""Ptr","child":{"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}}},

// set_last_errror=False (can and should we use this?)
pub extern "logoncli" fn NetIsServiceAccount(
    ServerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    AccountName: {"kind""Ptr","child":{"kind":"UInt16"}},
    IsService: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "logoncli" fn NetQueryServiceAccount(
    ServerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    AccountName: {"kind""Ptr","child":{"kind":"UInt16"}},
    InfoLevel: {"kind":"UInt32"},
    Buffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SetServiceBits(
    hServiceStatus: {"kind""Ptr","child":Windows.Win32.Security.SERVICE_STATUS_HANDLE__},
    dwServiceBits: {"kind":"UInt32"},
    bSetBitsOn: Windows.Win32.SystemServices.BOOL,
    bUpdateImmediately: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn SetUserObjectSecurity(
    hObj: Windows.Win32.SystemServices.HANDLE,
    pSIRequested: {"kind""Ptr","child":{"kind":"UInt32"}},
    pSID: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn GetUserObjectSecurity(
    hObj: Windows.Win32.SystemServices.HANDLE,
    pSIRequested: {"kind""Ptr","child":{"kind":"UInt32"}},
    pSID: {"kind""Ptr","child":{"kind":"Void"}},
    nLength: {"kind":"UInt32"},
    lpnLengthNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ImpersonateNamedPipeClient(
    hNamedPipe: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AccessCheck(
    pSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    ClientToken: Windows.Win32.SystemServices.HANDLE,
    DesiredAccess: {"kind":"UInt32"},
    GenericMapping: {"kind""Ptr","child":Windows.Win32.Security.GENERIC_MAPPING},
    PrivilegeSet: {"kind""Ptr","child":Windows.Win32.Security.PRIVILEGE_SET},
    PrivilegeSetLength: {"kind""Ptr","child":{"kind":"UInt32"}},
    GrantedAccess: {"kind""Ptr","child":{"kind":"UInt32"}},
    AccessStatus: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn AccessCheckAndAuditAlarmW(
    SubsystemName: {"kind""Ptr","child":{"kind":"UInt16"}},
    HandleId: {"kind""Ptr","child":{"kind":"Void"}},
    ObjectTypeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ObjectName: {"kind""Ptr","child":{"kind":"UInt16"}},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    DesiredAccess: {"kind":"UInt32"},
    GenericMapping: {"kind""Ptr","child":Windows.Win32.Security.GENERIC_MAPPING},
    ObjectCreation: Windows.Win32.SystemServices.BOOL,
    GrantedAccess: {"kind""Ptr","child":{"kind":"UInt32"}},
    AccessStatus: {"kind""Ptr","child":{"kind":"Int32"}},
    pfGenerateOnClose: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AccessCheckByType(
    pSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    PrincipalSelfSid: {"kind""Ptr","child":{"kind":"Void"}},
    ClientToken: Windows.Win32.SystemServices.HANDLE,
    DesiredAccess: {"kind":"UInt32"},
    ObjectTypeList: {"kind""Ptr","child":Windows.Win32.Security.OBJECT_TYPE_LIST},
    ObjectTypeListLength: {"kind":"UInt32"},
    GenericMapping: {"kind""Ptr","child":Windows.Win32.Security.GENERIC_MAPPING},
    PrivilegeSet: {"kind""Ptr","child":Windows.Win32.Security.PRIVILEGE_SET},
    PrivilegeSetLength: {"kind""Ptr","child":{"kind":"UInt32"}},
    GrantedAccess: {"kind""Ptr","child":{"kind":"UInt32"}},
    AccessStatus: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AccessCheckByTypeResultList(
    pSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    PrincipalSelfSid: {"kind""Ptr","child":{"kind":"Void"}},
    ClientToken: Windows.Win32.SystemServices.HANDLE,
    DesiredAccess: {"kind":"UInt32"},
    ObjectTypeList: {"kind""Ptr","child":Windows.Win32.Security.OBJECT_TYPE_LIST},
    ObjectTypeListLength: {"kind":"UInt32"},
    GenericMapping: {"kind""Ptr","child":Windows.Win32.Security.GENERIC_MAPPING},
    PrivilegeSet: {"kind""Ptr","child":Windows.Win32.Security.PRIVILEGE_SET},
    PrivilegeSetLength: {"kind""Ptr","child":{"kind":"UInt32"}},
    GrantedAccessList: {"kind""Ptr","child":{"kind":"UInt32"}},
    AccessStatusList: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn AccessCheckByTypeAndAuditAlarmW(
    SubsystemName: {"kind""Ptr","child":{"kind":"UInt16"}},
    HandleId: {"kind""Ptr","child":{"kind":"Void"}},
    ObjectTypeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ObjectName: {"kind""Ptr","child":{"kind":"UInt16"}},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    PrincipalSelfSid: {"kind""Ptr","child":{"kind":"Void"}},
    DesiredAccess: {"kind":"UInt32"},
    AuditType: Windows.Win32.Security.AUDIT_EVENT_TYPE,
    Flags: {"kind":"UInt32"},
    ObjectTypeList: {"kind""Ptr","child":Windows.Win32.Security.OBJECT_TYPE_LIST},
    ObjectTypeListLength: {"kind":"UInt32"},
    GenericMapping: {"kind""Ptr","child":Windows.Win32.Security.GENERIC_MAPPING},
    ObjectCreation: Windows.Win32.SystemServices.BOOL,
    GrantedAccess: {"kind""Ptr","child":{"kind":"UInt32"}},
    AccessStatus: {"kind""Ptr","child":{"kind":"Int32"}},
    pfGenerateOnClose: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn AccessCheckByTypeResultListAndAuditAlarmW(
    SubsystemName: {"kind""Ptr","child":{"kind":"UInt16"}},
    HandleId: {"kind""Ptr","child":{"kind":"Void"}},
    ObjectTypeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ObjectName: {"kind""Ptr","child":{"kind":"UInt16"}},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    PrincipalSelfSid: {"kind""Ptr","child":{"kind":"Void"}},
    DesiredAccess: {"kind":"UInt32"},
    AuditType: Windows.Win32.Security.AUDIT_EVENT_TYPE,
    Flags: {"kind":"UInt32"},
    ObjectTypeList: {"kind""Ptr","child":Windows.Win32.Security.OBJECT_TYPE_LIST},
    ObjectTypeListLength: {"kind":"UInt32"},
    GenericMapping: {"kind""Ptr","child":Windows.Win32.Security.GENERIC_MAPPING},
    ObjectCreation: Windows.Win32.SystemServices.BOOL,
    GrantedAccessList: {"kind""Ptr","child":{"kind":"UInt32"}},
    AccessStatusList: {"kind""Ptr","child":{"kind":"UInt32"}},
    pfGenerateOnClose: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn AccessCheckByTypeResultListAndAuditAlarmByHandleW(
    SubsystemName: {"kind""Ptr","child":{"kind":"UInt16"}},
    HandleId: {"kind""Ptr","child":{"kind":"Void"}},
    ClientToken: Windows.Win32.SystemServices.HANDLE,
    ObjectTypeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ObjectName: {"kind""Ptr","child":{"kind":"UInt16"}},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    PrincipalSelfSid: {"kind""Ptr","child":{"kind":"Void"}},
    DesiredAccess: {"kind":"UInt32"},
    AuditType: Windows.Win32.Security.AUDIT_EVENT_TYPE,
    Flags: {"kind":"UInt32"},
    ObjectTypeList: {"kind""Ptr","child":Windows.Win32.Security.OBJECT_TYPE_LIST},
    ObjectTypeListLength: {"kind":"UInt32"},
    GenericMapping: {"kind""Ptr","child":Windows.Win32.Security.GENERIC_MAPPING},
    ObjectCreation: Windows.Win32.SystemServices.BOOL,
    GrantedAccessList: {"kind""Ptr","child":{"kind":"UInt32"}},
    AccessStatusList: {"kind""Ptr","child":{"kind":"UInt32"}},
    pfGenerateOnClose: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AddAccessAllowedAce(
    pAcl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    dwAceRevision: {"kind":"UInt32"},
    AccessMask: {"kind":"UInt32"},
    pSid: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AddAccessAllowedAceEx(
    pAcl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    dwAceRevision: {"kind":"UInt32"},
    AceFlags: {"kind":"UInt32"},
    AccessMask: {"kind":"UInt32"},
    pSid: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AddAccessAllowedObjectAce(
    pAcl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    dwAceRevision: {"kind":"UInt32"},
    AceFlags: {"kind":"UInt32"},
    AccessMask: {"kind":"UInt32"},
    ObjectTypeGuid: {"kind""Ptr","child":Guid},
    InheritedObjectTypeGuid: {"kind""Ptr","child":Guid},
    pSid: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AddAccessDeniedAce(
    pAcl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    dwAceRevision: {"kind":"UInt32"},
    AccessMask: {"kind":"UInt32"},
    pSid: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AddAccessDeniedAceEx(
    pAcl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    dwAceRevision: {"kind":"UInt32"},
    AceFlags: {"kind":"UInt32"},
    AccessMask: {"kind":"UInt32"},
    pSid: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AddAccessDeniedObjectAce(
    pAcl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    dwAceRevision: {"kind":"UInt32"},
    AceFlags: {"kind":"UInt32"},
    AccessMask: {"kind":"UInt32"},
    ObjectTypeGuid: {"kind""Ptr","child":Guid},
    InheritedObjectTypeGuid: {"kind""Ptr","child":Guid},
    pSid: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AddAce(
    pAcl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    dwAceRevision: {"kind":"UInt32"},
    dwStartingAceIndex: {"kind":"UInt32"},
    pAceList: {"kind""Ptr","child":{"kind":"Void"}},
    nAceListLength: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AddAuditAccessAce(
    pAcl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    dwAceRevision: {"kind":"UInt32"},
    dwAccessMask: {"kind":"UInt32"},
    pSid: {"kind""Ptr","child":{"kind":"Void"}},
    bAuditSuccess: Windows.Win32.SystemServices.BOOL,
    bAuditFailure: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AddAuditAccessAceEx(
    pAcl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    dwAceRevision: {"kind":"UInt32"},
    AceFlags: {"kind":"UInt32"},
    dwAccessMask: {"kind":"UInt32"},
    pSid: {"kind""Ptr","child":{"kind":"Void"}},
    bAuditSuccess: Windows.Win32.SystemServices.BOOL,
    bAuditFailure: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AddAuditAccessObjectAce(
    pAcl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    dwAceRevision: {"kind":"UInt32"},
    AceFlags: {"kind":"UInt32"},
    AccessMask: {"kind":"UInt32"},
    ObjectTypeGuid: {"kind""Ptr","child":Guid},
    InheritedObjectTypeGuid: {"kind""Ptr","child":Guid},
    pSid: {"kind""Ptr","child":{"kind":"Void"}},
    bAuditSuccess: Windows.Win32.SystemServices.BOOL,
    bAuditFailure: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AddMandatoryAce(
    pAcl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    dwAceRevision: {"kind":"UInt32"},
    AceFlags: {"kind":"UInt32"},
    MandatoryPolicy: {"kind":"UInt32"},
    pLabelSid: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn AddResourceAttributeAce(
    pAcl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    dwAceRevision: {"kind":"UInt32"},
    AceFlags: {"kind":"UInt32"},
    AccessMask: {"kind":"UInt32"},
    pSid: {"kind""Ptr","child":{"kind":"Void"}},
    pAttributeInfo: {"kind""Ptr","child":Windows.Win32.Security.CLAIM_SECURITY_ATTRIBUTES_INFORMATION},
    pReturnLength: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn AddScopedPolicyIDAce(
    pAcl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    dwAceRevision: {"kind":"UInt32"},
    AceFlags: {"kind":"UInt32"},
    AccessMask: {"kind":"UInt32"},
    pSid: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AdjustTokenGroups(
    TokenHandle: Windows.Win32.SystemServices.HANDLE,
    ResetToDefault: Windows.Win32.SystemServices.BOOL,
    NewState: {"kind""Ptr","child":Windows.Win32.Security.TOKEN_GROUPS},
    BufferLength: {"kind":"UInt32"},
    PreviousState: {"kind""Ptr","child":Windows.Win32.Security.TOKEN_GROUPS},
    ReturnLength: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AdjustTokenPrivileges(
    TokenHandle: Windows.Win32.SystemServices.HANDLE,
    DisableAllPrivileges: Windows.Win32.SystemServices.BOOL,
    NewState: {"kind""Ptr","child":Windows.Win32.Security.TOKEN_PRIVILEGES},
    BufferLength: {"kind":"UInt32"},
    PreviousState: {"kind""Ptr","child":Windows.Win32.Security.TOKEN_PRIVILEGES},
    ReturnLength: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AllocateAndInitializeSid(
    pIdentifierAuthority: {"kind""Ptr","child":Windows.Win32.Security.SID_IDENTIFIER_AUTHORITY},
    nSubAuthorityCount: {"kind":"Byte"},
    nSubAuthority0: {"kind":"UInt32"},
    nSubAuthority1: {"kind":"UInt32"},
    nSubAuthority2: {"kind":"UInt32"},
    nSubAuthority3: {"kind":"UInt32"},
    nSubAuthority4: {"kind":"UInt32"},
    nSubAuthority5: {"kind":"UInt32"},
    nSubAuthority6: {"kind":"UInt32"},
    nSubAuthority7: {"kind":"UInt32"},
    pSid: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AllocateLocallyUniqueId(
    Luid: {"kind""Ptr","child":Windows.Win32.Kernel.LUID},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn AreAllAccessesGranted(
    GrantedAccess: {"kind":"UInt32"},
    DesiredAccess: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn AreAnyAccessesGranted(
    GrantedAccess: {"kind":"UInt32"},
    DesiredAccess: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CheckTokenMembership(
    TokenHandle: Windows.Win32.SystemServices.HANDLE,
    SidToCheck: {"kind""Ptr","child":{"kind":"Void"}},
    IsMember: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CheckTokenCapability(
    TokenHandle: Windows.Win32.SystemServices.HANDLE,
    CapabilitySidToCheck: {"kind""Ptr","child":{"kind":"Void"}},
    HasCapability: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetAppContainerAce(
    Acl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    StartingAceIndex: {"kind":"UInt32"},
    AppContainerAce: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    AppContainerAceIndex: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CheckTokenMembershipEx(
    TokenHandle: Windows.Win32.SystemServices.HANDLE,
    SidToCheck: {"kind""Ptr","child":{"kind":"Void"}},
    Flags: {"kind":"UInt32"},
    IsMember: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ConvertToAutoInheritPrivateObjectSecurity(
    ParentDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    CurrentSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    NewSecurityDescriptor: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    ObjectType: {"kind""Ptr","child":Guid},
    IsDirectoryObject: {"kind":"Byte"},
    GenericMapping: {"kind""Ptr","child":Windows.Win32.Security.GENERIC_MAPPING},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CopySid(
    nDestinationSidLength: {"kind":"UInt32"},
    pDestinationSid: {"kind""Ptr","child":{"kind":"Void"}},
    pSourceSid: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CreatePrivateObjectSecurity(
    ParentDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    CreatorDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    NewDescriptor: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    IsDirectoryObject: Windows.Win32.SystemServices.BOOL,
    Token: Windows.Win32.SystemServices.HANDLE,
    GenericMapping: {"kind""Ptr","child":Windows.Win32.Security.GENERIC_MAPPING},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CreatePrivateObjectSecurityEx(
    ParentDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    CreatorDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    NewDescriptor: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    ObjectType: {"kind""Ptr","child":Guid},
    IsContainerObject: Windows.Win32.SystemServices.BOOL,
    AutoInheritFlags: {"kind":"UInt32"},
    Token: Windows.Win32.SystemServices.HANDLE,
    GenericMapping: {"kind""Ptr","child":Windows.Win32.Security.GENERIC_MAPPING},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CreatePrivateObjectSecurityWithMultipleInheritance(
    ParentDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    CreatorDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    NewDescriptor: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    ObjectTypes: {"kind""Ptr","child":{"kind""Ptr","child":Guid}},
    GuidCount: {"kind":"UInt32"},
    IsContainerObject: Windows.Win32.SystemServices.BOOL,
    AutoInheritFlags: {"kind":"UInt32"},
    Token: Windows.Win32.SystemServices.HANDLE,
    GenericMapping: {"kind""Ptr","child":Windows.Win32.Security.GENERIC_MAPPING},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CreateRestrictedToken(
    ExistingTokenHandle: Windows.Win32.SystemServices.HANDLE,
    Flags: {"kind":"UInt32"},
    DisableSidCount: {"kind":"UInt32"},
    SidsToDisable: {"kind""Ptr","child":Windows.Win32.Security.SID_AND_ATTRIBUTES},
    DeletePrivilegeCount: {"kind":"UInt32"},
    PrivilegesToDelete: {"kind""Ptr","child":Windows.Win32.Security.LUID_AND_ATTRIBUTES},
    RestrictedSidCount: {"kind":"UInt32"},
    SidsToRestrict: {"kind""Ptr","child":Windows.Win32.Security.SID_AND_ATTRIBUTES},
    NewTokenHandle: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CreateWellKnownSid(
    WellKnownSidType: Windows.Win32.Security.WELL_KNOWN_SID_TYPE,
    DomainSid: {"kind""Ptr","child":{"kind":"Void"}},
    pSid: {"kind""Ptr","child":{"kind":"Void"}},
    cbSid: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn EqualDomainSid(
    pSid1: {"kind""Ptr","child":{"kind":"Void"}},
    pSid2: {"kind""Ptr","child":{"kind":"Void"}},
    pfEqual: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn DeleteAce(
    pAcl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    dwAceIndex: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn DestroyPrivateObjectSecurity(
    ObjectDescriptor: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn DuplicateToken(
    ExistingTokenHandle: Windows.Win32.SystemServices.HANDLE,
    ImpersonationLevel: Windows.Win32.Security.SECURITY_IMPERSONATION_LEVEL,
    DuplicateTokenHandle: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn DuplicateTokenEx(
    hExistingToken: Windows.Win32.SystemServices.HANDLE,
    dwDesiredAccess: {"kind":"UInt32"},
    lpTokenAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    ImpersonationLevel: Windows.Win32.Security.SECURITY_IMPERSONATION_LEVEL,
    TokenType: Windows.Win32.Security.TOKEN_TYPE,
    phNewToken: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn EqualPrefixSid(
    pSid1: {"kind""Ptr","child":{"kind":"Void"}},
    pSid2: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn EqualSid(
    pSid1: {"kind""Ptr","child":{"kind":"Void"}},
    pSid2: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn FindFirstFreeAce(
    pAcl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    pAce: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn FreeSid(
    pSid: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetAce(
    pAcl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    dwAceIndex: {"kind":"UInt32"},
    pAce: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetAclInformation(
    pAcl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    pAclInformation: {"kind""Ptr","child":{"kind":"Void"}},
    nAclInformationLength: {"kind":"UInt32"},
    dwAclInformationClass: Windows.Win32.Security.ACL_INFORMATION_CLASS,

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetFileSecurityW(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    RequestedInformation: {"kind":"UInt32"},
    pSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    nLength: {"kind":"UInt32"},
    lpnLengthNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetKernelObjectSecurity(
    Handle: Windows.Win32.SystemServices.HANDLE,
    RequestedInformation: {"kind":"UInt32"},
    pSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    nLength: {"kind":"UInt32"},
    lpnLengthNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetLengthSid(
    pSid: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetPrivateObjectSecurity(
    ObjectDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    SecurityInformation: {"kind":"UInt32"},
    ResultantDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    DescriptorLength: {"kind":"UInt32"},
    ReturnLength: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetSecurityDescriptorControl(
    pSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    pControl: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpdwRevision: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetSecurityDescriptorDacl(
    pSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    lpbDaclPresent: {"kind""Ptr","child":{"kind":"Int32"}},
    pDacl: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.ACL}},
    lpbDaclDefaulted: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetSecurityDescriptorGroup(
    pSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    pGroup: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    lpbGroupDefaulted: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetSecurityDescriptorLength(
    pSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetSecurityDescriptorOwner(
    pSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    pOwner: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    lpbOwnerDefaulted: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetSecurityDescriptorRMControl(
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    RMControl: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetSecurityDescriptorSacl(
    pSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    lpbSaclPresent: {"kind""Ptr","child":{"kind":"Int32"}},
    pSacl: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.ACL}},
    lpbSaclDefaulted: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetSidIdentifierAuthority(
    pSid: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetSidLengthRequired(
    nSubAuthorityCount: {"kind":"Byte"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetSidSubAuthority(
    pSid: {"kind""Ptr","child":{"kind":"Void"}},
    nSubAuthority: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetSidSubAuthorityCount(
    pSid: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetTokenInformation(
    TokenHandle: Windows.Win32.SystemServices.HANDLE,
    TokenInformationClass: Windows.Win32.Security.TOKEN_INFORMATION_CLASS,
    TokenInformation: {"kind""Ptr","child":{"kind":"Void"}},
    TokenInformationLength: {"kind":"UInt32"},
    ReturnLength: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetWindowsAccountDomainSid(
    pSid: {"kind""Ptr","child":{"kind":"Void"}},
    pDomainSid: {"kind""Ptr","child":{"kind":"Void"}},
    cbDomainSid: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ImpersonateAnonymousToken(
    ThreadHandle: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ImpersonateLoggedOnUser(
    hToken: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ImpersonateSelf(
    ImpersonationLevel: Windows.Win32.Security.SECURITY_IMPERSONATION_LEVEL,

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn InitializeAcl(
    pAcl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    nAclLength: {"kind":"UInt32"},
    dwAclRevision: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn InitializeSecurityDescriptor(
    pSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    dwRevision: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn InitializeSid(
    Sid: {"kind""Ptr","child":{"kind":"Void"}},
    pIdentifierAuthority: {"kind""Ptr","child":Windows.Win32.Security.SID_IDENTIFIER_AUTHORITY},
    nSubAuthorityCount: {"kind":"Byte"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn IsTokenRestricted(
    TokenHandle: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn IsValidAcl(
    pAcl: {"kind""Ptr","child":Windows.Win32.Security.ACL},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn IsValidSecurityDescriptor(
    pSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn IsValidSid(
    pSid: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn IsWellKnownSid(
    pSid: {"kind""Ptr","child":{"kind":"Void"}},
    WellKnownSidType: Windows.Win32.Security.WELL_KNOWN_SID_TYPE,

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn MakeAbsoluteSD(
    pSelfRelativeSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    pAbsoluteSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    lpdwAbsoluteSecurityDescriptorSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    pDacl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    lpdwDaclSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    pSacl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    lpdwSaclSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    pOwner: {"kind""Ptr","child":{"kind":"Void"}},
    lpdwOwnerSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    pPrimaryGroup: {"kind""Ptr","child":{"kind":"Void"}},
    lpdwPrimaryGroupSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn MakeSelfRelativeSD(
    pAbsoluteSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    pSelfRelativeSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    lpdwBufferLength: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn MapGenericMask(
    AccessMask: {"kind""Ptr","child":{"kind":"UInt32"}},
    GenericMapping: {"kind""Ptr","child":Windows.Win32.Security.GENERIC_MAPPING},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn ObjectCloseAuditAlarmW(
    SubsystemName: {"kind""Ptr","child":{"kind":"UInt16"}},
    HandleId: {"kind""Ptr","child":{"kind":"Void"}},
    GenerateOnClose: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn ObjectDeleteAuditAlarmW(
    SubsystemName: {"kind""Ptr","child":{"kind":"UInt16"}},
    HandleId: {"kind""Ptr","child":{"kind":"Void"}},
    GenerateOnClose: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn ObjectOpenAuditAlarmW(
    SubsystemName: {"kind""Ptr","child":{"kind":"UInt16"}},
    HandleId: {"kind""Ptr","child":{"kind":"Void"}},
    ObjectTypeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ObjectName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    ClientToken: Windows.Win32.SystemServices.HANDLE,
    DesiredAccess: {"kind":"UInt32"},
    GrantedAccess: {"kind":"UInt32"},
    Privileges: {"kind""Ptr","child":Windows.Win32.Security.PRIVILEGE_SET},
    ObjectCreation: Windows.Win32.SystemServices.BOOL,
    AccessGranted: Windows.Win32.SystemServices.BOOL,
    GenerateOnClose: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn ObjectPrivilegeAuditAlarmW(
    SubsystemName: {"kind""Ptr","child":{"kind":"UInt16"}},
    HandleId: {"kind""Ptr","child":{"kind":"Void"}},
    ClientToken: Windows.Win32.SystemServices.HANDLE,
    DesiredAccess: {"kind":"UInt32"},
    Privileges: {"kind""Ptr","child":Windows.Win32.Security.PRIVILEGE_SET},
    AccessGranted: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn PrivilegeCheck(
    ClientToken: Windows.Win32.SystemServices.HANDLE,
    RequiredPrivileges: {"kind""Ptr","child":Windows.Win32.Security.PRIVILEGE_SET},
    pfResult: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn PrivilegedServiceAuditAlarmW(
    SubsystemName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ServiceName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ClientToken: Windows.Win32.SystemServices.HANDLE,
    Privileges: {"kind""Ptr","child":Windows.Win32.Security.PRIVILEGE_SET},
    AccessGranted: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn QuerySecurityAccessMask(
    SecurityInformation: {"kind":"UInt32"},
    DesiredAccess: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn RevertToSelf(

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SetAclInformation(
    pAcl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    pAclInformation: {"kind""Ptr","child":{"kind":"Void"}},
    nAclInformationLength: {"kind":"UInt32"},
    dwAclInformationClass: Windows.Win32.Security.ACL_INFORMATION_CLASS,

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn SetFileSecurityW(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    SecurityInformation: {"kind":"UInt32"},
    pSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SetKernelObjectSecurity(
    Handle: Windows.Win32.SystemServices.HANDLE,
    SecurityInformation: {"kind":"UInt32"},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SetPrivateObjectSecurity(
    SecurityInformation: {"kind":"UInt32"},
    ModificationDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    ObjectsSecurityDescriptor: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    GenericMapping: {"kind""Ptr","child":Windows.Win32.Security.GENERIC_MAPPING},
    Token: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SetPrivateObjectSecurityEx(
    SecurityInformation: {"kind":"UInt32"},
    ModificationDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    ObjectsSecurityDescriptor: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    AutoInheritFlags: {"kind":"UInt32"},
    GenericMapping: {"kind""Ptr","child":Windows.Win32.Security.GENERIC_MAPPING},
    Token: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn SetSecurityAccessMask(
    SecurityInformation: {"kind":"UInt32"},
    DesiredAccess: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SetSecurityDescriptorControl(
    pSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    ControlBitsOfInterest: {"kind":"UInt16"},
    ControlBitsToSet: {"kind":"UInt16"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SetSecurityDescriptorDacl(
    pSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    bDaclPresent: Windows.Win32.SystemServices.BOOL,
    pDacl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    bDaclDefaulted: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SetSecurityDescriptorGroup(
    pSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    pGroup: {"kind""Ptr","child":{"kind":"Void"}},
    bGroupDefaulted: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SetSecurityDescriptorOwner(
    pSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    pOwner: {"kind""Ptr","child":{"kind":"Void"}},
    bOwnerDefaulted: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn SetSecurityDescriptorRMControl(
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    RMControl: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SetSecurityDescriptorSacl(
    pSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    bSaclPresent: Windows.Win32.SystemServices.BOOL,
    pSacl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    bSaclDefaulted: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SetTokenInformation(
    TokenHandle: Windows.Win32.SystemServices.HANDLE,
    TokenInformationClass: Windows.Win32.Security.TOKEN_INFORMATION_CLASS,
    TokenInformation: {"kind""Ptr","child":{"kind":"Void"}},
    TokenInformationLength: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetCachedSigningLevel(
    SourceFiles: {"kind""Ptr","child":{"kind":"IntPtr"}},
    SourceFileCount: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    TargetFile: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetCachedSigningLevel(
    File: Windows.Win32.SystemServices.HANDLE,
    Flags: {"kind""Ptr","child":{"kind":"UInt32"}},
    SigningLevel: {"kind""Ptr","child":{"kind":"UInt32"}},
    Thumbprint: {"kind""Ptr","child":{"kind":"Byte"}},
    ThumbprintSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    ThumbprintAlgorithm: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "api-ms-win-security-base-l1-2-2" fn DeriveCapabilitySidsFromName(
    CapName: {"kind""Ptr","child":{"kind":"UInt16"}},
    CapabilityGroupSids: {"kind""Ptr","child":{"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}}},
    CapabilityGroupSidCount: {"kind""Ptr","child":{"kind":"UInt32"}},
    CapabilitySids: {"kind""Ptr","child":{"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}}},
    CapabilitySidCount: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetAppContainerNamedObjectPath(
    Token: Windows.Win32.SystemServices.HANDLE,
    AppContainerSid: {"kind""Ptr","child":{"kind":"Void"}},
    ObjectPathLength: {"kind":"UInt32"},
    ObjectPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    ReturnLength: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptAcquireContextA(
    phProv: {"kind""Ptr","child":{"kind":"UIntPtr"}},
    szContainer: {"kind""Ptr","child":{"kind":"SByte"}},
    szProvider: {"kind""Ptr","child":{"kind":"SByte"}},
    dwProvType: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptAcquireContextW(
    phProv: {"kind""Ptr","child":{"kind":"UIntPtr"}},
    szContainer: {"kind""Ptr","child":{"kind":"UInt16"}},
    szProvider: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwProvType: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptReleaseContext(
    hProv: {"kind":"UIntPtr"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptGenKey(
    hProv: {"kind":"UIntPtr"},
    Algid: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    phKey: {"kind""Ptr","child":{"kind":"UIntPtr"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptDeriveKey(
    hProv: {"kind":"UIntPtr"},
    Algid: {"kind":"UInt32"},
    hBaseData: {"kind":"UIntPtr"},
    dwFlags: {"kind":"UInt32"},
    phKey: {"kind""Ptr","child":{"kind":"UIntPtr"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptDestroyKey(
    hKey: {"kind":"UIntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptSetKeyParam(
    hKey: {"kind":"UIntPtr"},
    dwParam: {"kind":"UInt32"},
    pbData: {"kind""Ptr","child":{"kind":"Byte"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptGetKeyParam(
    hKey: {"kind":"UIntPtr"},
    dwParam: {"kind":"UInt32"},
    pbData: {"kind""Ptr","child":{"kind":"Byte"}},
    pdwDataLen: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptSetHashParam(
    hHash: {"kind":"UIntPtr"},
    dwParam: {"kind":"UInt32"},
    pbData: {"kind""Ptr","child":{"kind":"Byte"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptGetHashParam(
    hHash: {"kind":"UIntPtr"},
    dwParam: {"kind":"UInt32"},
    pbData: {"kind""Ptr","child":{"kind":"Byte"}},
    pdwDataLen: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptSetProvParam(
    hProv: {"kind":"UIntPtr"},
    dwParam: {"kind":"UInt32"},
    pbData: {"kind""Ptr","child":{"kind":"Byte"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptGetProvParam(
    hProv: {"kind":"UIntPtr"},
    dwParam: {"kind":"UInt32"},
    pbData: {"kind""Ptr","child":{"kind":"Byte"}},
    pdwDataLen: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptGenRandom(
    hProv: {"kind":"UIntPtr"},
    dwLen: {"kind":"UInt32"},
    pbBuffer: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptGetUserKey(
    hProv: {"kind":"UIntPtr"},
    dwKeySpec: {"kind":"UInt32"},
    phUserKey: {"kind""Ptr","child":{"kind":"UIntPtr"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptExportKey(
    hKey: {"kind":"UIntPtr"},
    hExpKey: {"kind":"UIntPtr"},
    dwBlobType: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    pbData: {"kind""Ptr","child":{"kind":"Byte"}},
    pdwDataLen: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptImportKey(
    hProv: {"kind":"UIntPtr"},
    pbData: {"kind""Ptr","child":{"kind":"Byte"}},
    dwDataLen: {"kind":"UInt32"},
    hPubKey: {"kind":"UIntPtr"},
    dwFlags: {"kind":"UInt32"},
    phKey: {"kind""Ptr","child":{"kind":"UIntPtr"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptEncrypt(
    hKey: {"kind":"UIntPtr"},
    hHash: {"kind":"UIntPtr"},
    Final: Windows.Win32.SystemServices.BOOL,
    dwFlags: {"kind":"UInt32"},
    pbData: {"kind""Ptr","child":{"kind":"Byte"}},
    pdwDataLen: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwBufLen: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptDecrypt(
    hKey: {"kind":"UIntPtr"},
    hHash: {"kind":"UIntPtr"},
    Final: Windows.Win32.SystemServices.BOOL,
    dwFlags: {"kind":"UInt32"},
    pbData: {"kind""Ptr","child":{"kind":"Byte"}},
    pdwDataLen: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptCreateHash(
    hProv: {"kind":"UIntPtr"},
    Algid: {"kind":"UInt32"},
    hKey: {"kind":"UIntPtr"},
    dwFlags: {"kind":"UInt32"},
    phHash: {"kind""Ptr","child":{"kind":"UIntPtr"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptHashData(
    hHash: {"kind":"UIntPtr"},
    pbData: {"kind""Ptr","child":{"kind":"Byte"}},
    dwDataLen: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptHashSessionKey(
    hHash: {"kind":"UIntPtr"},
    hKey: {"kind":"UIntPtr"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptDestroyHash(
    hHash: {"kind":"UIntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptSignHashA(
    hHash: {"kind":"UIntPtr"},
    dwKeySpec: {"kind":"UInt32"},
    szDescription: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},
    pbSignature: {"kind""Ptr","child":{"kind":"Byte"}},
    pdwSigLen: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptSignHashW(
    hHash: {"kind":"UIntPtr"},
    dwKeySpec: {"kind":"UInt32"},
    szDescription: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    pbSignature: {"kind""Ptr","child":{"kind":"Byte"}},
    pdwSigLen: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptVerifySignatureA(
    hHash: {"kind":"UIntPtr"},
    pbSignature: {"kind""Ptr","child":{"kind":"Byte"}},
    dwSigLen: {"kind":"UInt32"},
    hPubKey: {"kind":"UIntPtr"},
    szDescription: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptVerifySignatureW(
    hHash: {"kind":"UIntPtr"},
    pbSignature: {"kind""Ptr","child":{"kind":"Byte"}},
    dwSigLen: {"kind":"UInt32"},
    hPubKey: {"kind":"UIntPtr"},
    szDescription: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptSetProviderA(
    pszProvName: {"kind""Ptr","child":{"kind":"SByte"}},
    dwProvType: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptSetProviderW(
    pszProvName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwProvType: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptSetProviderExA(
    pszProvName: {"kind""Ptr","child":{"kind":"SByte"}},
    dwProvType: {"kind":"UInt32"},
    pdwReserved: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptSetProviderExW(
    pszProvName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwProvType: {"kind":"UInt32"},
    pdwReserved: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptGetDefaultProviderA(
    dwProvType: {"kind":"UInt32"},
    pdwReserved: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},
    pszProvName: {"kind""Ptr","child":{"kind":"SByte"}},
    pcbProvName: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptGetDefaultProviderW(
    dwProvType: {"kind":"UInt32"},
    pdwReserved: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},
    pszProvName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcbProvName: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptEnumProviderTypesA(
    dwIndex: {"kind":"UInt32"},
    pdwReserved: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},
    pdwProvType: {"kind""Ptr","child":{"kind":"UInt32"}},
    szTypeName: {"kind""Ptr","child":{"kind":"SByte"}},
    pcbTypeName: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptEnumProviderTypesW(
    dwIndex: {"kind":"UInt32"},
    pdwReserved: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},
    pdwProvType: {"kind""Ptr","child":{"kind":"UInt32"}},
    szTypeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcbTypeName: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptEnumProvidersA(
    dwIndex: {"kind":"UInt32"},
    pdwReserved: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},
    pdwProvType: {"kind""Ptr","child":{"kind":"UInt32"}},
    szProvName: {"kind""Ptr","child":{"kind":"SByte"}},
    pcbProvName: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptEnumProvidersW(
    dwIndex: {"kind":"UInt32"},
    pdwReserved: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},
    pdwProvType: {"kind""Ptr","child":{"kind":"UInt32"}},
    szProvName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcbProvName: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptContextAddRef(
    hProv: {"kind":"UIntPtr"},
    pdwReserved: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptDuplicateKey(
    hKey: {"kind":"UIntPtr"},
    pdwReserved: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},
    phKey: {"kind""Ptr","child":{"kind":"UIntPtr"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptDuplicateHash(
    hHash: {"kind":"UIntPtr"},
    pdwReserved: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},
    phHash: {"kind""Ptr","child":{"kind":"UIntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptOpenAlgorithmProvider(
    phAlgorithm: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pszAlgId: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszImplementation: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptEnumAlgorithms(
    dwAlgOperations: {"kind":"UInt32"},
    pAlgCount: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppAlgList: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.BCRYPT_ALGORITHM_IDENTIFIER}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptEnumProviders(
    pszAlgId: {"kind""Ptr","child":{"kind":"UInt16"}},
    pImplCount: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppImplList: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.BCRYPT_PROVIDER_NAME}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptGetProperty(
    hObject: {"kind""Ptr","child":{"kind":"Void"}},
    pszProperty: {"kind""Ptr","child":{"kind":"UInt16"}},
    pbOutput: {"kind""Ptr","child":{"kind":"Byte"}},
    cbOutput: {"kind":"UInt32"},
    pcbResult: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptSetProperty(
    hObject: {"kind""Ptr","child":{"kind":"Void"}},
    pszProperty: {"kind""Ptr","child":{"kind":"UInt16"}},
    pbInput: {"kind""Ptr","child":{"kind":"Byte"}},
    cbInput: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptCloseAlgorithmProvider(
    hAlgorithm: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptFreeBuffer(
    pvBuffer: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptGenerateSymmetricKey(
    hAlgorithm: {"kind""Ptr","child":{"kind":"Void"}},
    phKey: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pbKeyObject: {"kind""Ptr","child":{"kind":"Byte"}},
    cbKeyObject: {"kind":"UInt32"},
    pbSecret: {"kind""Ptr","child":{"kind":"Byte"}},
    cbSecret: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptGenerateKeyPair(
    hAlgorithm: {"kind""Ptr","child":{"kind":"Void"}},
    phKey: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    dwLength: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptEncrypt(
    hKey: {"kind""Ptr","child":{"kind":"Void"}},
    pbInput: {"kind""Ptr","child":{"kind":"Byte"}},
    cbInput: {"kind":"UInt32"},
    pPaddingInfo: {"kind""Ptr","child":{"kind":"Void"}},
    pbIV: {"kind""Ptr","child":{"kind":"Byte"}},
    cbIV: {"kind":"UInt32"},
    pbOutput: {"kind""Ptr","child":{"kind":"Byte"}},
    cbOutput: {"kind":"UInt32"},
    pcbResult: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptDecrypt(
    hKey: {"kind""Ptr","child":{"kind":"Void"}},
    pbInput: {"kind""Ptr","child":{"kind":"Byte"}},
    cbInput: {"kind":"UInt32"},
    pPaddingInfo: {"kind""Ptr","child":{"kind":"Void"}},
    pbIV: {"kind""Ptr","child":{"kind":"Byte"}},
    cbIV: {"kind":"UInt32"},
    pbOutput: {"kind""Ptr","child":{"kind":"Byte"}},
    cbOutput: {"kind":"UInt32"},
    pcbResult: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptExportKey(
    hKey: {"kind""Ptr","child":{"kind":"Void"}},
    hExportKey: {"kind""Ptr","child":{"kind":"Void"}},
    pszBlobType: {"kind""Ptr","child":{"kind":"UInt16"}},
    pbOutput: {"kind""Ptr","child":{"kind":"Byte"}},
    cbOutput: {"kind":"UInt32"},
    pcbResult: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptImportKey(
    hAlgorithm: {"kind""Ptr","child":{"kind":"Void"}},
    hImportKey: {"kind""Ptr","child":{"kind":"Void"}},
    pszBlobType: {"kind""Ptr","child":{"kind":"UInt16"}},
    phKey: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pbKeyObject: {"kind""Ptr","child":{"kind":"Byte"}},
    cbKeyObject: {"kind":"UInt32"},
    pbInput: {"kind""Ptr","child":{"kind":"Byte"}},
    cbInput: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptImportKeyPair(
    hAlgorithm: {"kind""Ptr","child":{"kind":"Void"}},
    hImportKey: {"kind""Ptr","child":{"kind":"Void"}},
    pszBlobType: {"kind""Ptr","child":{"kind":"UInt16"}},
    phKey: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pbInput: {"kind""Ptr","child":{"kind":"Byte"}},
    cbInput: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptDuplicateKey(
    hKey: {"kind""Ptr","child":{"kind":"Void"}},
    phNewKey: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pbKeyObject: {"kind""Ptr","child":{"kind":"Byte"}},
    cbKeyObject: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptFinalizeKeyPair(
    hKey: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptDestroyKey(
    hKey: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptDestroySecret(
    hSecret: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptSignHash(
    hKey: {"kind""Ptr","child":{"kind":"Void"}},
    pPaddingInfo: {"kind""Ptr","child":{"kind":"Void"}},
    pbInput: {"kind""Ptr","child":{"kind":"Byte"}},
    cbInput: {"kind":"UInt32"},
    pbOutput: {"kind""Ptr","child":{"kind":"Byte"}},
    cbOutput: {"kind":"UInt32"},
    pcbResult: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptVerifySignature(
    hKey: {"kind""Ptr","child":{"kind":"Void"}},
    pPaddingInfo: {"kind""Ptr","child":{"kind":"Void"}},
    pbHash: {"kind""Ptr","child":{"kind":"Byte"}},
    cbHash: {"kind":"UInt32"},
    pbSignature: {"kind""Ptr","child":{"kind":"Byte"}},
    cbSignature: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptSecretAgreement(
    hPrivKey: {"kind""Ptr","child":{"kind":"Void"}},
    hPubKey: {"kind""Ptr","child":{"kind":"Void"}},
    phAgreedSecret: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptDeriveKey(
    hSharedSecret: {"kind""Ptr","child":{"kind":"Void"}},
    pwszKDF: {"kind""Ptr","child":{"kind":"UInt16"}},
    pParameterList: {"kind""Ptr","child":Windows.Win32.Security.BCryptBufferDesc},
    pbDerivedKey: {"kind""Ptr","child":{"kind":"Byte"}},
    cbDerivedKey: {"kind":"UInt32"},
    pcbResult: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptKeyDerivation(
    hKey: {"kind""Ptr","child":{"kind":"Void"}},
    pParameterList: {"kind""Ptr","child":Windows.Win32.Security.BCryptBufferDesc},
    pbDerivedKey: {"kind""Ptr","child":{"kind":"Byte"}},
    cbDerivedKey: {"kind":"UInt32"},
    pcbResult: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptCreateHash(
    hAlgorithm: {"kind""Ptr","child":{"kind":"Void"}},
    phHash: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pbHashObject: {"kind""Ptr","child":{"kind":"Byte"}},
    cbHashObject: {"kind":"UInt32"},
    pbSecret: {"kind""Ptr","child":{"kind":"Byte"}},
    cbSecret: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptHashData(
    hHash: {"kind""Ptr","child":{"kind":"Void"}},
    pbInput: {"kind""Ptr","child":{"kind":"Byte"}},
    cbInput: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptFinishHash(
    hHash: {"kind""Ptr","child":{"kind":"Void"}},
    pbOutput: {"kind""Ptr","child":{"kind":"Byte"}},
    cbOutput: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptCreateMultiHash(
    hAlgorithm: {"kind""Ptr","child":{"kind":"Void"}},
    phHash: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    nHashes: {"kind":"UInt32"},
    pbHashObject: {"kind""Ptr","child":{"kind":"Byte"}},
    cbHashObject: {"kind":"UInt32"},
    pbSecret: {"kind""Ptr","child":{"kind":"Byte"}},
    cbSecret: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptProcessMultiOperations(
    hObject: {"kind""Ptr","child":{"kind":"Void"}},
    operationType: Windows.Win32.Security.BCRYPT_MULTI_OPERATION_TYPE,
    pOperations: {"kind""Ptr","child":{"kind":"Void"}},
    cbOperations: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptDuplicateHash(
    hHash: {"kind""Ptr","child":{"kind":"Void"}},
    phNewHash: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pbHashObject: {"kind""Ptr","child":{"kind":"Byte"}},
    cbHashObject: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptDestroyHash(
    hHash: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptHash(
    hAlgorithm: {"kind""Ptr","child":{"kind":"Void"}},
    pbSecret: {"kind""Ptr","child":{"kind":"Byte"}},
    cbSecret: {"kind":"UInt32"},
    pbInput: {"kind""Ptr","child":{"kind":"Byte"}},
    cbInput: {"kind":"UInt32"},
    pbOutput: {"kind""Ptr","child":{"kind":"Byte"}},
    cbOutput: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptGenRandom(
    hAlgorithm: {"kind""Ptr","child":{"kind":"Void"}},
    pbBuffer: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBuffer: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptDeriveKeyCapi(
    hHash: {"kind""Ptr","child":{"kind":"Void"}},
    hTargetAlg: {"kind""Ptr","child":{"kind":"Void"}},
    pbDerivedKey: {"kind""Ptr","child":{"kind":"Byte"}},
    cbDerivedKey: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptDeriveKeyPBKDF2(
    hPrf: {"kind""Ptr","child":{"kind":"Void"}},
    pbPassword: {"kind""Ptr","child":{"kind":"Byte"}},
    cbPassword: {"kind":"UInt32"},
    pbSalt: {"kind""Ptr","child":{"kind":"Byte"}},
    cbSalt: {"kind":"UInt32"},
    cIterations: {"kind":"UInt64"},
    pbDerivedKey: {"kind""Ptr","child":{"kind":"Byte"}},
    cbDerivedKey: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptQueryProviderRegistration(
    pszProvider: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwMode: {"kind":"UInt32"},
    dwInterface: {"kind":"UInt32"},
    pcbBuffer: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppBuffer: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CRYPT_PROVIDER_REG}},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptEnumRegisteredProviders(
    pcbBuffer: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppBuffer: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CRYPT_PROVIDERS}},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptCreateContext(
    dwTable: {"kind":"UInt32"},
    pszContext: {"kind""Ptr","child":{"kind":"UInt16"}},
    pConfig: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_CONTEXT_CONFIG},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptDeleteContext(
    dwTable: {"kind":"UInt32"},
    pszContext: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptEnumContexts(
    dwTable: {"kind":"UInt32"},
    pcbBuffer: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppBuffer: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CRYPT_CONTEXTS}},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptConfigureContext(
    dwTable: {"kind":"UInt32"},
    pszContext: {"kind""Ptr","child":{"kind":"UInt16"}},
    pConfig: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_CONTEXT_CONFIG},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptQueryContextConfiguration(
    dwTable: {"kind":"UInt32"},
    pszContext: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcbBuffer: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppBuffer: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CRYPT_CONTEXT_CONFIG}},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptAddContextFunction(
    dwTable: {"kind":"UInt32"},
    pszContext: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwInterface: {"kind":"UInt32"},
    pszFunction: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwPosition: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptRemoveContextFunction(
    dwTable: {"kind":"UInt32"},
    pszContext: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwInterface: {"kind":"UInt32"},
    pszFunction: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptEnumContextFunctions(
    dwTable: {"kind":"UInt32"},
    pszContext: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwInterface: {"kind":"UInt32"},
    pcbBuffer: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppBuffer: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CRYPT_CONTEXT_FUNCTIONS}},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptConfigureContextFunction(
    dwTable: {"kind":"UInt32"},
    pszContext: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwInterface: {"kind":"UInt32"},
    pszFunction: {"kind""Ptr","child":{"kind":"UInt16"}},
    pConfig: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_CONTEXT_FUNCTION_CONFIG},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptQueryContextFunctionConfiguration(
    dwTable: {"kind":"UInt32"},
    pszContext: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwInterface: {"kind":"UInt32"},
    pszFunction: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcbBuffer: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppBuffer: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CRYPT_CONTEXT_FUNCTION_CONFIG}},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptEnumContextFunctionProviders(
    dwTable: {"kind":"UInt32"},
    pszContext: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwInterface: {"kind":"UInt32"},
    pszFunction: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcbBuffer: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppBuffer: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CRYPT_CONTEXT_FUNCTION_PROVIDERS}},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptSetContextFunctionProperty(
    dwTable: {"kind":"UInt32"},
    pszContext: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwInterface: {"kind":"UInt32"},
    pszFunction: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszProperty: {"kind""Ptr","child":{"kind":"UInt16"}},
    cbValue: {"kind":"UInt32"},
    pbValue: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptQueryContextFunctionProperty(
    dwTable: {"kind":"UInt32"},
    pszContext: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwInterface: {"kind":"UInt32"},
    pszFunction: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszProperty: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcbValue: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppbValue: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptRegisterConfigChangeNotify(
    phEvent: {"kind""Ptr","child":Windows.Win32.SystemServices.HANDLE},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptUnregisterConfigChangeNotify(
    hEvent: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptResolveProviders(
    pszContext: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwInterface: {"kind":"UInt32"},
    pszFunction: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszProvider: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwMode: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    pcbBuffer: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppBuffer: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CRYPT_PROVIDER_REFS}},

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptGetFipsAlgorithmMode(
    pfEnabled: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptOpenStorageProvider(
    phProvider: {"kind""Ptr","child":{"kind":"UIntPtr"}},
    pszProviderName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptEnumAlgorithms(
    hProvider: {"kind":"UIntPtr"},
    dwAlgOperations: {"kind":"UInt32"},
    pdwAlgCount: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppAlgList: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.NCryptAlgorithmName}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptIsAlgSupported(
    hProvider: {"kind":"UIntPtr"},
    pszAlgId: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptEnumKeys(
    hProvider: {"kind":"UIntPtr"},
    pszScope: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppKeyName: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.NCryptKeyName}},
    ppEnumState: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptEnumStorageProviders(
    pdwProviderCount: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppProviderList: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.NCryptProviderName}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptFreeBuffer(
    pvInput: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptOpenKey(
    hProvider: {"kind":"UIntPtr"},
    phKey: {"kind""Ptr","child":{"kind":"UIntPtr"}},
    pszKeyName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwLegacyKeySpec: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptCreatePersistedKey(
    hProvider: {"kind":"UIntPtr"},
    phKey: {"kind""Ptr","child":{"kind":"UIntPtr"}},
    pszAlgId: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszKeyName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwLegacyKeySpec: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptGetProperty(
    hObject: {"kind":"UIntPtr"},
    pszProperty: {"kind""Ptr","child":{"kind":"UInt16"}},
    pbOutput: {"kind""Ptr","child":{"kind":"Byte"}},
    cbOutput: {"kind":"UInt32"},
    pcbResult: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptSetProperty(
    hObject: {"kind":"UIntPtr"},
    pszProperty: {"kind""Ptr","child":{"kind":"UInt16"}},
    pbInput: {"kind""Ptr","child":{"kind":"Byte"}},
    cbInput: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptFinalizeKey(
    hKey: {"kind":"UIntPtr"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptEncrypt(
    hKey: {"kind":"UIntPtr"},
    pbInput: {"kind""Ptr","child":{"kind":"Byte"}},
    cbInput: {"kind":"UInt32"},
    pPaddingInfo: {"kind""Ptr","child":{"kind":"Void"}},
    pbOutput: {"kind""Ptr","child":{"kind":"Byte"}},
    cbOutput: {"kind":"UInt32"},
    pcbResult: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptDecrypt(
    hKey: {"kind":"UIntPtr"},
    pbInput: {"kind""Ptr","child":{"kind":"Byte"}},
    cbInput: {"kind":"UInt32"},
    pPaddingInfo: {"kind""Ptr","child":{"kind":"Void"}},
    pbOutput: {"kind""Ptr","child":{"kind":"Byte"}},
    cbOutput: {"kind":"UInt32"},
    pcbResult: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptImportKey(
    hProvider: {"kind":"UIntPtr"},
    hImportKey: {"kind":"UIntPtr"},
    pszBlobType: {"kind""Ptr","child":{"kind":"UInt16"}},
    pParameterList: {"kind""Ptr","child":Windows.Win32.Security.BCryptBufferDesc},
    phKey: {"kind""Ptr","child":{"kind":"UIntPtr"}},
    pbData: {"kind""Ptr","child":{"kind":"Byte"}},
    cbData: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptExportKey(
    hKey: {"kind":"UIntPtr"},
    hExportKey: {"kind":"UIntPtr"},
    pszBlobType: {"kind""Ptr","child":{"kind":"UInt16"}},
    pParameterList: {"kind""Ptr","child":Windows.Win32.Security.BCryptBufferDesc},
    pbOutput: {"kind""Ptr","child":{"kind":"Byte"}},
    cbOutput: {"kind":"UInt32"},
    pcbResult: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptSignHash(
    hKey: {"kind":"UIntPtr"},
    pPaddingInfo: {"kind""Ptr","child":{"kind":"Void"}},
    pbHashValue: {"kind""Ptr","child":{"kind":"Byte"}},
    cbHashValue: {"kind":"UInt32"},
    pbSignature: {"kind""Ptr","child":{"kind":"Byte"}},
    cbSignature: {"kind":"UInt32"},
    pcbResult: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptVerifySignature(
    hKey: {"kind":"UIntPtr"},
    pPaddingInfo: {"kind""Ptr","child":{"kind":"Void"}},
    pbHashValue: {"kind""Ptr","child":{"kind":"Byte"}},
    cbHashValue: {"kind":"UInt32"},
    pbSignature: {"kind""Ptr","child":{"kind":"Byte"}},
    cbSignature: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptDeleteKey(
    hKey: {"kind":"UIntPtr"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptFreeObject(
    hObject: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptIsKeyHandle(
    hKey: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptTranslateHandle(
    phProvider: {"kind""Ptr","child":{"kind":"UIntPtr"}},
    phKey: {"kind""Ptr","child":{"kind":"UIntPtr"}},
    hLegacyProv: {"kind":"UIntPtr"},
    hLegacyKey: {"kind":"UIntPtr"},
    dwLegacyKeySpec: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptNotifyChangeKey(
    hProvider: {"kind":"UIntPtr"},
    phEvent: {"kind""Ptr","child":Windows.Win32.SystemServices.HANDLE},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptSecretAgreement(
    hPrivKey: {"kind":"UIntPtr"},
    hPubKey: {"kind":"UIntPtr"},
    phAgreedSecret: {"kind""Ptr","child":{"kind":"UIntPtr"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptDeriveKey(
    hSharedSecret: {"kind":"UIntPtr"},
    pwszKDF: {"kind""Ptr","child":{"kind":"UInt16"}},
    pParameterList: {"kind""Ptr","child":Windows.Win32.Security.BCryptBufferDesc},
    pbDerivedKey: {"kind""Ptr","child":{"kind":"Byte"}},
    cbDerivedKey: {"kind":"UInt32"},
    pcbResult: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptKeyDerivation(
    hKey: {"kind":"UIntPtr"},
    pParameterList: {"kind""Ptr","child":Windows.Win32.Security.BCryptBufferDesc},
    pbDerivedKey: {"kind""Ptr","child":{"kind":"Byte"}},
    cbDerivedKey: {"kind":"UInt32"},
    pcbResult: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptCreateClaim(
    hSubjectKey: {"kind":"UIntPtr"},
    hAuthorityKey: {"kind":"UIntPtr"},
    dwClaimType: {"kind":"UInt32"},
    pParameterList: {"kind""Ptr","child":Windows.Win32.Security.BCryptBufferDesc},
    pbClaimBlob: {"kind""Ptr","child":{"kind":"Byte"}},
    cbClaimBlob: {"kind":"UInt32"},
    pcbResult: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptVerifyClaim(
    hSubjectKey: {"kind":"UIntPtr"},
    hAuthorityKey: {"kind":"UIntPtr"},
    dwClaimType: {"kind":"UInt32"},
    pParameterList: {"kind""Ptr","child":Windows.Win32.Security.BCryptBufferDesc},
    pbClaimBlob: {"kind""Ptr","child":{"kind":"Byte"}},
    cbClaimBlob: {"kind":"UInt32"},
    pOutput: {"kind""Ptr","child":Windows.Win32.Security.BCryptBufferDesc},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptFormatObject(
    dwCertEncodingType: {"kind":"UInt32"},
    dwFormatType: {"kind":"UInt32"},
    dwFormatStrType: {"kind":"UInt32"},
    pFormatStruct: {"kind""Ptr","child":{"kind":"Void"}},
    lpszStructType: {"kind""Ptr","child":{"kind":"SByte"}},
    pbEncoded: {"kind""Ptr","child":{"kind":"Byte"}},
    cbEncoded: {"kind":"UInt32"},
    pbFormat: {"kind""Ptr","child":{"kind":"Void"}},
    pcbFormat: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptEncodeObjectEx(
    dwCertEncodingType: {"kind":"UInt32"},
    lpszStructType: {"kind""Ptr","child":{"kind":"SByte"}},
    pvStructInfo: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},
    pEncodePara: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_ENCODE_PARA},
    pvEncoded: {"kind""Ptr","child":{"kind":"Void"}},
    pcbEncoded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptEncodeObject(
    dwCertEncodingType: {"kind":"UInt32"},
    lpszStructType: {"kind""Ptr","child":{"kind":"SByte"}},
    pvStructInfo: {"kind""Ptr","child":{"kind":"Void"}},
    pbEncoded: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbEncoded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptDecodeObjectEx(
    dwCertEncodingType: {"kind":"UInt32"},
    lpszStructType: {"kind""Ptr","child":{"kind":"SByte"}},
    pbEncoded: {"kind""Ptr","child":{"kind":"Byte"}},
    cbEncoded: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    pDecodePara: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_DECODE_PARA},
    pvStructInfo: {"kind""Ptr","child":{"kind":"Void"}},
    pcbStructInfo: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptDecodeObject(
    dwCertEncodingType: {"kind":"UInt32"},
    lpszStructType: {"kind""Ptr","child":{"kind":"SByte"}},
    pbEncoded: {"kind""Ptr","child":{"kind":"Byte"}},
    cbEncoded: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    pvStructInfo: {"kind""Ptr","child":{"kind":"Void"}},
    pcbStructInfo: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptInstallOIDFunctionAddress(
    hModule: {"kind":"IntPtr"},
    dwEncodingType: {"kind":"UInt32"},
    pszFuncName: {"kind""Ptr","child":{"kind":"SByte"}},
    cFuncEntry: {"kind":"UInt32"},
    rgFuncEntry: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_OID_FUNC_ENTRY},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptInitOIDFunctionSet(
    pszFuncName: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptGetOIDFunctionAddress(
    hFuncSet: {"kind""Ptr","child":{"kind":"Void"}},
    dwEncodingType: {"kind":"UInt32"},
    pszOID: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},
    ppvFuncAddr: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    phFuncAddr: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptGetDefaultOIDDllList(
    hFuncSet: {"kind""Ptr","child":{"kind":"Void"}},
    dwEncodingType: {"kind":"UInt32"},
    pwszDllList: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchDllList: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptGetDefaultOIDFunctionAddress(
    hFuncSet: {"kind""Ptr","child":{"kind":"Void"}},
    dwEncodingType: {"kind":"UInt32"},
    pwszDll: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    ppvFuncAddr: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    phFuncAddr: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptFreeOIDFunctionAddress(
    hFuncAddr: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptRegisterOIDFunction(
    dwEncodingType: {"kind":"UInt32"},
    pszFuncName: {"kind""Ptr","child":{"kind":"SByte"}},
    pszOID: {"kind""Ptr","child":{"kind":"SByte"}},
    pwszDll: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszOverrideFuncName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptUnregisterOIDFunction(
    dwEncodingType: {"kind":"UInt32"},
    pszFuncName: {"kind""Ptr","child":{"kind":"SByte"}},
    pszOID: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptRegisterDefaultOIDFunction(
    dwEncodingType: {"kind":"UInt32"},
    pszFuncName: {"kind""Ptr","child":{"kind":"SByte"}},
    dwIndex: {"kind":"UInt32"},
    pwszDll: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptUnregisterDefaultOIDFunction(
    dwEncodingType: {"kind":"UInt32"},
    pszFuncName: {"kind""Ptr","child":{"kind":"SByte"}},
    pwszDll: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptSetOIDFunctionValue(
    dwEncodingType: {"kind":"UInt32"},
    pszFuncName: {"kind""Ptr","child":{"kind":"SByte"}},
    pszOID: {"kind""Ptr","child":{"kind":"SByte"}},
    pwszValueName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwValueType: {"kind":"UInt32"},
    pbValueData: {"kind""Ptr","child":{"kind":"Byte"}},
    cbValueData: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptGetOIDFunctionValue(
    dwEncodingType: {"kind":"UInt32"},
    pszFuncName: {"kind""Ptr","child":{"kind":"SByte"}},
    pszOID: {"kind""Ptr","child":{"kind":"SByte"}},
    pwszValueName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pdwValueType: {"kind""Ptr","child":{"kind":"UInt32"}},
    pbValueData: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbValueData: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptEnumOIDFunction(
    dwEncodingType: {"kind":"UInt32"},
    pszFuncName: {"kind""Ptr","child":{"kind":"SByte"}},
    pszOID: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},
    pvArg: {"kind""Ptr","child":{"kind":"Void"}},
    pfnEnumOIDFunc: Windows.Win32.Security.PFN_CRYPT_ENUM_OID_FUNC,

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptFindOIDInfo(
    dwKeyType: {"kind":"UInt32"},
    pvKey: {"kind""Ptr","child":{"kind":"Void"}},
    dwGroupId: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptRegisterOIDInfo(
    pInfo: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_OID_INFO},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptUnregisterOIDInfo(
    pInfo: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_OID_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptEnumOIDInfo(
    dwGroupId: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    pvArg: {"kind""Ptr","child":{"kind":"Void"}},
    pfnEnumOIDInfo: Windows.Win32.Security.PFN_CRYPT_ENUM_OID_INFO,

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptFindLocalizedName(
    pwszCryptName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptMsgOpenToEncode(
    dwMsgEncodingType: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    dwMsgType: {"kind":"UInt32"},
    pvMsgEncodeInfo: {"kind""Ptr","child":{"kind":"Void"}},
    pszInnerContentObjID: {"kind""Ptr","child":{"kind":"SByte"}},
    pStreamInfo: {"kind""Ptr","child":Windows.Win32.Security.CMSG_STREAM_INFO},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptMsgCalculateEncodedLength(
    dwMsgEncodingType: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    dwMsgType: {"kind":"UInt32"},
    pvMsgEncodeInfo: {"kind""Ptr","child":{"kind":"Void"}},
    pszInnerContentObjID: {"kind""Ptr","child":{"kind":"SByte"}},
    cbData: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptMsgOpenToDecode(
    dwMsgEncodingType: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    dwMsgType: {"kind":"UInt32"},
    hCryptProv: {"kind":"UIntPtr"},
    pRecipientInfo: {"kind""Ptr","child":Windows.Win32.Security.CERT_INFO},
    pStreamInfo: {"kind""Ptr","child":Windows.Win32.Security.CMSG_STREAM_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptMsgDuplicate(
    hCryptMsg: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptMsgClose(
    hCryptMsg: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptMsgUpdate(
    hCryptMsg: {"kind""Ptr","child":{"kind":"Void"}},
    pbData: {"kind""Ptr","child":{"kind":"Byte"}},
    cbData: {"kind":"UInt32"},
    fFinal: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptMsgGetParam(
    hCryptMsg: {"kind""Ptr","child":{"kind":"Void"}},
    dwParamType: {"kind":"UInt32"},
    dwIndex: {"kind":"UInt32"},
    pvData: {"kind""Ptr","child":{"kind":"Void"}},
    pcbData: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptMsgControl(
    hCryptMsg: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},
    dwCtrlType: {"kind":"UInt32"},
    pvCtrlPara: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptMsgVerifyCountersignatureEncoded(
    hCryptProv: {"kind":"UIntPtr"},
    dwEncodingType: {"kind":"UInt32"},
    pbSignerInfo: {"kind""Ptr","child":{"kind":"Byte"}},
    cbSignerInfo: {"kind":"UInt32"},
    pbSignerInfoCountersignature: {"kind""Ptr","child":{"kind":"Byte"}},
    cbSignerInfoCountersignature: {"kind":"UInt32"},
    pciCountersigner: {"kind""Ptr","child":Windows.Win32.Security.CERT_INFO},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptMsgVerifyCountersignatureEncodedEx(
    hCryptProv: {"kind":"UIntPtr"},
    dwEncodingType: {"kind":"UInt32"},
    pbSignerInfo: {"kind""Ptr","child":{"kind":"Byte"}},
    cbSignerInfo: {"kind":"UInt32"},
    pbSignerInfoCountersignature: {"kind""Ptr","child":{"kind":"Byte"}},
    cbSignerInfoCountersignature: {"kind":"UInt32"},
    dwSignerType: {"kind":"UInt32"},
    pvSigner: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},
    pvExtra: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptMsgCountersign(
    hCryptMsg: {"kind""Ptr","child":{"kind":"Void"}},
    dwIndex: {"kind":"UInt32"},
    cCountersigners: {"kind":"UInt32"},
    rgCountersigners: {"kind""Ptr","child":Windows.Win32.Security.CMSG_SIGNER_ENCODE_INFO},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptMsgCountersignEncoded(
    dwEncodingType: {"kind":"UInt32"},
    pbSignerInfo: {"kind""Ptr","child":{"kind":"Byte"}},
    cbSignerInfo: {"kind":"UInt32"},
    cCountersigners: {"kind":"UInt32"},
    rgCountersigners: {"kind""Ptr","child":Windows.Win32.Security.CMSG_SIGNER_ENCODE_INFO},
    pbCountersignature: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbCountersignature: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertOpenStore(
    lpszStoreProvider: {"kind""Ptr","child":{"kind":"SByte"}},
    dwEncodingType: {"kind":"UInt32"},
    hCryptProv: {"kind":"UIntPtr"},
    dwFlags: {"kind":"UInt32"},
    pvPara: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertDuplicateStore(
    hCertStore: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertSaveStore(
    hCertStore: {"kind""Ptr","child":{"kind":"Void"}},
    dwEncodingType: {"kind":"UInt32"},
    dwSaveAs: {"kind":"UInt32"},
    dwSaveTo: {"kind":"UInt32"},
    pvSaveToPara: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertCloseStore(
    hCertStore: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertGetSubjectCertificateFromStore(
    hCertStore: {"kind""Ptr","child":{"kind":"Void"}},
    dwCertEncodingType: {"kind":"UInt32"},
    pCertId: {"kind""Ptr","child":Windows.Win32.Security.CERT_INFO},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertEnumCertificatesInStore(
    hCertStore: {"kind""Ptr","child":{"kind":"Void"}},
    pPrevCertContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertFindCertificateInStore(
    hCertStore: {"kind""Ptr","child":{"kind":"Void"}},
    dwCertEncodingType: {"kind":"UInt32"},
    dwFindFlags: {"kind":"UInt32"},
    dwFindType: {"kind":"UInt32"},
    pvFindPara: {"kind""Ptr","child":{"kind":"Void"}},
    pPrevCertContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertGetIssuerCertificateFromStore(
    hCertStore: {"kind""Ptr","child":{"kind":"Void"}},
    pSubjectContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    pPrevIssuerContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    pdwFlags: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertVerifySubjectCertificateContext(
    pSubject: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    pIssuer: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    pdwFlags: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertDuplicateCertificateContext(
    pCertContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertCreateCertificateContext(
    dwCertEncodingType: {"kind":"UInt32"},
    pbCertEncoded: {"kind""Ptr","child":{"kind":"Byte"}},
    cbCertEncoded: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertFreeCertificateContext(
    pCertContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertSetCertificateContextProperty(
    pCertContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    dwPropId: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    pvData: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertGetCertificateContextProperty(
    pCertContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    dwPropId: {"kind":"UInt32"},
    pvData: {"kind""Ptr","child":{"kind":"Void"}},
    pcbData: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertEnumCertificateContextProperties(
    pCertContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    dwPropId: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertCreateCTLEntryFromCertificateContextProperties(
    pCertContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    cOptAttr: {"kind":"UInt32"},
    rgOptAttr: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_ATTRIBUTE},
    dwFlags: {"kind":"UInt32"},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},
    pCtlEntry: {"kind""Ptr","child":Windows.Win32.Security.CTL_ENTRY},
    pcbCtlEntry: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertSetCertificateContextPropertiesFromCTLEntry(
    pCertContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    pCtlEntry: {"kind""Ptr","child":Windows.Win32.Security.CTL_ENTRY},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertGetCRLFromStore(
    hCertStore: {"kind""Ptr","child":{"kind":"Void"}},
    pIssuerContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    pPrevCrlContext: {"kind""Ptr","child":Windows.Win32.Security.CRL_CONTEXT},
    pdwFlags: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertEnumCRLsInStore(
    hCertStore: {"kind""Ptr","child":{"kind":"Void"}},
    pPrevCrlContext: {"kind""Ptr","child":Windows.Win32.Security.CRL_CONTEXT},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertFindCRLInStore(
    hCertStore: {"kind""Ptr","child":{"kind":"Void"}},
    dwCertEncodingType: {"kind":"UInt32"},
    dwFindFlags: {"kind":"UInt32"},
    dwFindType: {"kind":"UInt32"},
    pvFindPara: {"kind""Ptr","child":{"kind":"Void"}},
    pPrevCrlContext: {"kind""Ptr","child":Windows.Win32.Security.CRL_CONTEXT},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertDuplicateCRLContext(
    pCrlContext: {"kind""Ptr","child":Windows.Win32.Security.CRL_CONTEXT},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertCreateCRLContext(
    dwCertEncodingType: {"kind":"UInt32"},
    pbCrlEncoded: {"kind""Ptr","child":{"kind":"Byte"}},
    cbCrlEncoded: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertFreeCRLContext(
    pCrlContext: {"kind""Ptr","child":Windows.Win32.Security.CRL_CONTEXT},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertSetCRLContextProperty(
    pCrlContext: {"kind""Ptr","child":Windows.Win32.Security.CRL_CONTEXT},
    dwPropId: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    pvData: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertGetCRLContextProperty(
    pCrlContext: {"kind""Ptr","child":Windows.Win32.Security.CRL_CONTEXT},
    dwPropId: {"kind":"UInt32"},
    pvData: {"kind""Ptr","child":{"kind":"Void"}},
    pcbData: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertEnumCRLContextProperties(
    pCrlContext: {"kind""Ptr","child":Windows.Win32.Security.CRL_CONTEXT},
    dwPropId: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertFindCertificateInCRL(
    pCert: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    pCrlContext: {"kind""Ptr","child":Windows.Win32.Security.CRL_CONTEXT},
    dwFlags: {"kind":"UInt32"},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},
    ppCrlEntry: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CRL_ENTRY}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertIsValidCRLForCertificate(
    pCert: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    pCrl: {"kind""Ptr","child":Windows.Win32.Security.CRL_CONTEXT},
    dwFlags: {"kind":"UInt32"},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertAddEncodedCertificateToStore(
    hCertStore: {"kind""Ptr","child":{"kind":"Void"}},
    dwCertEncodingType: {"kind":"UInt32"},
    pbCertEncoded: {"kind""Ptr","child":{"kind":"Byte"}},
    cbCertEncoded: {"kind":"UInt32"},
    dwAddDisposition: {"kind":"UInt32"},
    ppCertContext: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertAddCertificateContextToStore(
    hCertStore: {"kind""Ptr","child":{"kind":"Void"}},
    pCertContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    dwAddDisposition: {"kind":"UInt32"},
    ppStoreContext: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertAddSerializedElementToStore(
    hCertStore: {"kind""Ptr","child":{"kind":"Void"}},
    pbElement: {"kind""Ptr","child":{"kind":"Byte"}},
    cbElement: {"kind":"UInt32"},
    dwAddDisposition: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    dwContextTypeFlags: {"kind":"UInt32"},
    pdwContextType: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppvContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertDeleteCertificateFromStore(
    pCertContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertAddEncodedCRLToStore(
    hCertStore: {"kind""Ptr","child":{"kind":"Void"}},
    dwCertEncodingType: {"kind":"UInt32"},
    pbCrlEncoded: {"kind""Ptr","child":{"kind":"Byte"}},
    cbCrlEncoded: {"kind":"UInt32"},
    dwAddDisposition: {"kind":"UInt32"},
    ppCrlContext: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CRL_CONTEXT}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertAddCRLContextToStore(
    hCertStore: {"kind""Ptr","child":{"kind":"Void"}},
    pCrlContext: {"kind""Ptr","child":Windows.Win32.Security.CRL_CONTEXT},
    dwAddDisposition: {"kind":"UInt32"},
    ppStoreContext: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CRL_CONTEXT}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertDeleteCRLFromStore(
    pCrlContext: {"kind""Ptr","child":Windows.Win32.Security.CRL_CONTEXT},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertSerializeCertificateStoreElement(
    pCertContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    dwFlags: {"kind":"UInt32"},
    pbElement: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbElement: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertSerializeCRLStoreElement(
    pCrlContext: {"kind""Ptr","child":Windows.Win32.Security.CRL_CONTEXT},
    dwFlags: {"kind":"UInt32"},
    pbElement: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbElement: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertDuplicateCTLContext(
    pCtlContext: {"kind""Ptr","child":Windows.Win32.Security.CTL_CONTEXT},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertCreateCTLContext(
    dwMsgAndCertEncodingType: {"kind":"UInt32"},
    pbCtlEncoded: {"kind""Ptr","child":{"kind":"Byte"}},
    cbCtlEncoded: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertFreeCTLContext(
    pCtlContext: {"kind""Ptr","child":Windows.Win32.Security.CTL_CONTEXT},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertSetCTLContextProperty(
    pCtlContext: {"kind""Ptr","child":Windows.Win32.Security.CTL_CONTEXT},
    dwPropId: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    pvData: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertGetCTLContextProperty(
    pCtlContext: {"kind""Ptr","child":Windows.Win32.Security.CTL_CONTEXT},
    dwPropId: {"kind":"UInt32"},
    pvData: {"kind""Ptr","child":{"kind":"Void"}},
    pcbData: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertEnumCTLContextProperties(
    pCtlContext: {"kind""Ptr","child":Windows.Win32.Security.CTL_CONTEXT},
    dwPropId: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertEnumCTLsInStore(
    hCertStore: {"kind""Ptr","child":{"kind":"Void"}},
    pPrevCtlContext: {"kind""Ptr","child":Windows.Win32.Security.CTL_CONTEXT},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertFindSubjectInCTL(
    dwEncodingType: {"kind":"UInt32"},
    dwSubjectType: {"kind":"UInt32"},
    pvSubject: {"kind""Ptr","child":{"kind":"Void"}},
    pCtlContext: {"kind""Ptr","child":Windows.Win32.Security.CTL_CONTEXT},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertFindCTLInStore(
    hCertStore: {"kind""Ptr","child":{"kind":"Void"}},
    dwMsgAndCertEncodingType: {"kind":"UInt32"},
    dwFindFlags: {"kind":"UInt32"},
    dwFindType: {"kind":"UInt32"},
    pvFindPara: {"kind""Ptr","child":{"kind":"Void"}},
    pPrevCtlContext: {"kind""Ptr","child":Windows.Win32.Security.CTL_CONTEXT},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertAddEncodedCTLToStore(
    hCertStore: {"kind""Ptr","child":{"kind":"Void"}},
    dwMsgAndCertEncodingType: {"kind":"UInt32"},
    pbCtlEncoded: {"kind""Ptr","child":{"kind":"Byte"}},
    cbCtlEncoded: {"kind":"UInt32"},
    dwAddDisposition: {"kind":"UInt32"},
    ppCtlContext: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CTL_CONTEXT}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertAddCTLContextToStore(
    hCertStore: {"kind""Ptr","child":{"kind":"Void"}},
    pCtlContext: {"kind""Ptr","child":Windows.Win32.Security.CTL_CONTEXT},
    dwAddDisposition: {"kind":"UInt32"},
    ppStoreContext: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CTL_CONTEXT}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertSerializeCTLStoreElement(
    pCtlContext: {"kind""Ptr","child":Windows.Win32.Security.CTL_CONTEXT},
    dwFlags: {"kind":"UInt32"},
    pbElement: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbElement: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertDeleteCTLFromStore(
    pCtlContext: {"kind""Ptr","child":Windows.Win32.Security.CTL_CONTEXT},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertAddCertificateLinkToStore(
    hCertStore: {"kind""Ptr","child":{"kind":"Void"}},
    pCertContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    dwAddDisposition: {"kind":"UInt32"},
    ppStoreContext: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertAddCRLLinkToStore(
    hCertStore: {"kind""Ptr","child":{"kind":"Void"}},
    pCrlContext: {"kind""Ptr","child":Windows.Win32.Security.CRL_CONTEXT},
    dwAddDisposition: {"kind":"UInt32"},
    ppStoreContext: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CRL_CONTEXT}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertAddCTLLinkToStore(
    hCertStore: {"kind""Ptr","child":{"kind":"Void"}},
    pCtlContext: {"kind""Ptr","child":Windows.Win32.Security.CTL_CONTEXT},
    dwAddDisposition: {"kind":"UInt32"},
    ppStoreContext: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CTL_CONTEXT}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertAddStoreToCollection(
    hCollectionStore: {"kind""Ptr","child":{"kind":"Void"}},
    hSiblingStore: {"kind""Ptr","child":{"kind":"Void"}},
    dwUpdateFlags: {"kind":"UInt32"},
    dwPriority: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertRemoveStoreFromCollection(
    hCollectionStore: {"kind""Ptr","child":{"kind":"Void"}},
    hSiblingStore: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertControlStore(
    hCertStore: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},
    dwCtrlType: {"kind":"UInt32"},
    pvCtrlPara: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertSetStoreProperty(
    hCertStore: {"kind""Ptr","child":{"kind":"Void"}},
    dwPropId: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    pvData: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertGetStoreProperty(
    hCertStore: {"kind""Ptr","child":{"kind":"Void"}},
    dwPropId: {"kind":"UInt32"},
    pvData: {"kind""Ptr","child":{"kind":"Void"}},
    pcbData: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertCreateContext(
    dwContextType: {"kind":"UInt32"},
    dwEncodingType: {"kind":"UInt32"},
    pbEncoded: {"kind""Ptr","child":{"kind":"Byte"}},
    cbEncoded: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    pCreatePara: {"kind""Ptr","child":Windows.Win32.Security.CERT_CREATE_CONTEXT_PARA},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertRegisterSystemStore(
    pvSystemStore: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},
    pStoreInfo: {"kind""Ptr","child":Windows.Win32.Security.CERT_SYSTEM_STORE_INFO},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertRegisterPhysicalStore(
    pvSystemStore: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},
    pwszStoreName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pStoreInfo: {"kind""Ptr","child":Windows.Win32.Security.CERT_PHYSICAL_STORE_INFO},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertUnregisterSystemStore(
    pvSystemStore: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertUnregisterPhysicalStore(
    pvSystemStore: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},
    pwszStoreName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertEnumSystemStoreLocation(
    dwFlags: {"kind":"UInt32"},
    pvArg: {"kind""Ptr","child":{"kind":"Void"}},
    pfnEnum: Windows.Win32.Security.PFN_CERT_ENUM_SYSTEM_STORE_LOCATION,

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertEnumSystemStore(
    dwFlags: {"kind":"UInt32"},
    pvSystemStoreLocationPara: {"kind""Ptr","child":{"kind":"Void"}},
    pvArg: {"kind""Ptr","child":{"kind":"Void"}},
    pfnEnum: Windows.Win32.Security.PFN_CERT_ENUM_SYSTEM_STORE,

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertEnumPhysicalStore(
    pvSystemStore: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},
    pvArg: {"kind""Ptr","child":{"kind":"Void"}},
    pfnEnum: Windows.Win32.Security.PFN_CERT_ENUM_PHYSICAL_STORE,

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertGetEnhancedKeyUsage(
    pCertContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    dwFlags: {"kind":"UInt32"},
    pUsage: {"kind""Ptr","child":Windows.Win32.Security.CTL_USAGE},
    pcbUsage: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertSetEnhancedKeyUsage(
    pCertContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    pUsage: {"kind""Ptr","child":Windows.Win32.Security.CTL_USAGE},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertAddEnhancedKeyUsageIdentifier(
    pCertContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    pszUsageIdentifier: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertRemoveEnhancedKeyUsageIdentifier(
    pCertContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    pszUsageIdentifier: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertGetValidUsages(
    cCerts: {"kind":"UInt32"},
    rghCerts: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT}},
    cNumOIDs: {"kind""Ptr","child":{"kind":"Int32"}},
    rghOIDs: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},
    pcbOIDs: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptMsgGetAndVerifySigner(
    hCryptMsg: {"kind""Ptr","child":{"kind":"Void"}},
    cSignerStore: {"kind":"UInt32"},
    rghSignerStore: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    dwFlags: {"kind":"UInt32"},
    ppSigner: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT}},
    pdwSignerIndex: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptMsgSignCTL(
    dwMsgEncodingType: {"kind":"UInt32"},
    pbCtlContent: {"kind""Ptr","child":{"kind":"Byte"}},
    cbCtlContent: {"kind":"UInt32"},
    pSignInfo: {"kind""Ptr","child":Windows.Win32.Security.CMSG_SIGNED_ENCODE_INFO},
    dwFlags: {"kind":"UInt32"},
    pbEncoded: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbEncoded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptMsgEncodeAndSignCTL(
    dwMsgEncodingType: {"kind":"UInt32"},
    pCtlInfo: {"kind""Ptr","child":Windows.Win32.Security.CTL_INFO},
    pSignInfo: {"kind""Ptr","child":Windows.Win32.Security.CMSG_SIGNED_ENCODE_INFO},
    dwFlags: {"kind":"UInt32"},
    pbEncoded: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbEncoded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertFindSubjectInSortedCTL(
    pSubjectIdentifier: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
    pCtlContext: {"kind""Ptr","child":Windows.Win32.Security.CTL_CONTEXT},
    dwFlags: {"kind":"UInt32"},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},
    pEncodedAttributes: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertEnumSubjectInSortedCTL(
    pCtlContext: {"kind""Ptr","child":Windows.Win32.Security.CTL_CONTEXT},
    ppvNextSubject: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pSubjectIdentifier: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
    pEncodedAttributes: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertVerifyCTLUsage(
    dwEncodingType: {"kind":"UInt32"},
    dwSubjectType: {"kind":"UInt32"},
    pvSubject: {"kind""Ptr","child":{"kind":"Void"}},
    pSubjectUsage: {"kind""Ptr","child":Windows.Win32.Security.CTL_USAGE},
    dwFlags: {"kind":"UInt32"},
    pVerifyUsagePara: {"kind""Ptr","child":Windows.Win32.Security.CTL_VERIFY_USAGE_PARA},
    pVerifyUsageStatus: {"kind""Ptr","child":Windows.Win32.Security.CTL_VERIFY_USAGE_STATUS},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertVerifyRevocation(
    dwEncodingType: {"kind":"UInt32"},
    dwRevType: {"kind":"UInt32"},
    cContext: {"kind":"UInt32"},
    rgpvContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    dwFlags: {"kind":"UInt32"},
    pRevPara: {"kind""Ptr","child":Windows.Win32.Security.CERT_REVOCATION_PARA},
    pRevStatus: {"kind""Ptr","child":Windows.Win32.Security.CERT_REVOCATION_STATUS},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertCompareIntegerBlob(
    pInt1: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
    pInt2: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertCompareCertificate(
    dwCertEncodingType: {"kind":"UInt32"},
    pCertId1: {"kind""Ptr","child":Windows.Win32.Security.CERT_INFO},
    pCertId2: {"kind""Ptr","child":Windows.Win32.Security.CERT_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertCompareCertificateName(
    dwCertEncodingType: {"kind":"UInt32"},
    pCertName1: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
    pCertName2: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertIsRDNAttrsInCertificateName(
    dwCertEncodingType: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    pCertName: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
    pRDN: {"kind""Ptr","child":Windows.Win32.Security.CERT_RDN},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertComparePublicKeyInfo(
    dwCertEncodingType: {"kind":"UInt32"},
    pPublicKey1: {"kind""Ptr","child":Windows.Win32.Security.CERT_PUBLIC_KEY_INFO},
    pPublicKey2: {"kind""Ptr","child":Windows.Win32.Security.CERT_PUBLIC_KEY_INFO},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertGetPublicKeyLength(
    dwCertEncodingType: {"kind":"UInt32"},
    pPublicKey: {"kind""Ptr","child":Windows.Win32.Security.CERT_PUBLIC_KEY_INFO},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptVerifyCertificateSignature(
    hCryptProv: {"kind":"UIntPtr"},
    dwCertEncodingType: {"kind":"UInt32"},
    pbEncoded: {"kind""Ptr","child":{"kind":"Byte"}},
    cbEncoded: {"kind":"UInt32"},
    pPublicKey: {"kind""Ptr","child":Windows.Win32.Security.CERT_PUBLIC_KEY_INFO},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptVerifyCertificateSignatureEx(
    hCryptProv: {"kind":"UIntPtr"},
    dwCertEncodingType: {"kind":"UInt32"},
    dwSubjectType: {"kind":"UInt32"},
    pvSubject: {"kind""Ptr","child":{"kind":"Void"}},
    dwIssuerType: {"kind":"UInt32"},
    pvIssuer: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},
    pvExtra: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertIsStrongHashToSign(
    pStrongSignPara: {"kind""Ptr","child":Windows.Win32.Security.CERT_STRONG_SIGN_PARA},
    pwszCNGHashAlgid: {"kind""Ptr","child":{"kind":"UInt16"}},
    pSigningCert: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptHashToBeSigned(
    hCryptProv: {"kind":"UIntPtr"},
    dwCertEncodingType: {"kind":"UInt32"},
    pbEncoded: {"kind""Ptr","child":{"kind":"Byte"}},
    cbEncoded: {"kind":"UInt32"},
    pbComputedHash: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbComputedHash: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptHashCertificate(
    hCryptProv: {"kind":"UIntPtr"},
    Algid: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    pbEncoded: {"kind""Ptr","child":{"kind":"Byte"}},
    cbEncoded: {"kind":"UInt32"},
    pbComputedHash: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbComputedHash: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptHashCertificate2(
    pwszCNGHashAlgid: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},
    pbEncoded: {"kind""Ptr","child":{"kind":"Byte"}},
    cbEncoded: {"kind":"UInt32"},
    pbComputedHash: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbComputedHash: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptSignCertificate(
    hCryptProvOrNCryptKey: {"kind":"UIntPtr"},
    dwKeySpec: {"kind":"UInt32"},
    dwCertEncodingType: {"kind":"UInt32"},
    pbEncodedToBeSigned: {"kind""Ptr","child":{"kind":"Byte"}},
    cbEncodedToBeSigned: {"kind":"UInt32"},
    pSignatureAlgorithm: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER},
    pvHashAuxInfo: {"kind""Ptr","child":{"kind":"Void"}},
    pbSignature: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbSignature: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptSignAndEncodeCertificate(
    hCryptProvOrNCryptKey: {"kind":"UIntPtr"},
    dwKeySpec: {"kind":"UInt32"},
    dwCertEncodingType: {"kind":"UInt32"},
    lpszStructType: {"kind""Ptr","child":{"kind":"SByte"}},
    pvStructInfo: {"kind""Ptr","child":{"kind":"Void"}},
    pSignatureAlgorithm: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER},
    pvHashAuxInfo: {"kind""Ptr","child":{"kind":"Void"}},
    pbEncoded: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbEncoded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertVerifyTimeValidity(
    pTimeToVerify: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    pCertInfo: {"kind""Ptr","child":Windows.Win32.Security.CERT_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertVerifyCRLTimeValidity(
    pTimeToVerify: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    pCrlInfo: {"kind""Ptr","child":Windows.Win32.Security.CRL_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertVerifyValidityNesting(
    pSubjectInfo: {"kind""Ptr","child":Windows.Win32.Security.CERT_INFO},
    pIssuerInfo: {"kind""Ptr","child":Windows.Win32.Security.CERT_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertVerifyCRLRevocation(
    dwCertEncodingType: {"kind":"UInt32"},
    pCertId: {"kind""Ptr","child":Windows.Win32.Security.CERT_INFO},
    cCrlInfo: {"kind":"UInt32"},
    rgpCrlInfo: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CRL_INFO}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertAlgIdToOID(
    dwAlgId: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertOIDToAlgId(
    pszObjId: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertFindExtension(
    pszObjId: {"kind""Ptr","child":{"kind":"SByte"}},
    cExtensions: {"kind":"UInt32"},
    rgExtensions: {"kind""Ptr","child":Windows.Win32.Security.CERT_EXTENSION},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertFindAttribute(
    pszObjId: {"kind""Ptr","child":{"kind":"SByte"}},
    cAttr: {"kind":"UInt32"},
    rgAttr: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_ATTRIBUTE},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertFindRDNAttr(
    pszObjId: {"kind""Ptr","child":{"kind":"SByte"}},
    pName: {"kind""Ptr","child":Windows.Win32.Security.CERT_NAME_INFO},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertGetIntendedKeyUsage(
    dwCertEncodingType: {"kind":"UInt32"},
    pCertInfo: {"kind""Ptr","child":Windows.Win32.Security.CERT_INFO},
    pbKeyUsage: {"kind""Ptr","child":{"kind":"Byte"}},
    cbKeyUsage: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptInstallDefaultContext(
    hCryptProv: {"kind":"UIntPtr"},
    dwDefaultType: {"kind":"UInt32"},
    pvDefaultPara: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},
    phDefaultContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptUninstallDefaultContext(
    hDefaultContext: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptExportPublicKeyInfo(
    hCryptProvOrNCryptKey: {"kind":"UIntPtr"},
    dwKeySpec: {"kind":"UInt32"},
    dwCertEncodingType: {"kind":"UInt32"},
    pInfo: {"kind""Ptr","child":Windows.Win32.Security.CERT_PUBLIC_KEY_INFO},
    pcbInfo: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptExportPublicKeyInfoEx(
    hCryptProvOrNCryptKey: {"kind":"UIntPtr"},
    dwKeySpec: {"kind":"UInt32"},
    dwCertEncodingType: {"kind":"UInt32"},
    pszPublicKeyObjId: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},
    pvAuxInfo: {"kind""Ptr","child":{"kind":"Void"}},
    pInfo: {"kind""Ptr","child":Windows.Win32.Security.CERT_PUBLIC_KEY_INFO},
    pcbInfo: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptExportPublicKeyInfoFromBCryptKeyHandle(
    hBCryptKey: {"kind""Ptr","child":{"kind":"Void"}},
    dwCertEncodingType: {"kind":"UInt32"},
    pszPublicKeyObjId: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},
    pvAuxInfo: {"kind""Ptr","child":{"kind":"Void"}},
    pInfo: {"kind""Ptr","child":Windows.Win32.Security.CERT_PUBLIC_KEY_INFO},
    pcbInfo: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptImportPublicKeyInfo(
    hCryptProv: {"kind":"UIntPtr"},
    dwCertEncodingType: {"kind":"UInt32"},
    pInfo: {"kind""Ptr","child":Windows.Win32.Security.CERT_PUBLIC_KEY_INFO},
    phKey: {"kind""Ptr","child":{"kind":"UIntPtr"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptImportPublicKeyInfoEx(
    hCryptProv: {"kind":"UIntPtr"},
    dwCertEncodingType: {"kind":"UInt32"},
    pInfo: {"kind""Ptr","child":Windows.Win32.Security.CERT_PUBLIC_KEY_INFO},
    aiKeyAlg: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    pvAuxInfo: {"kind""Ptr","child":{"kind":"Void"}},
    phKey: {"kind""Ptr","child":{"kind":"UIntPtr"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptImportPublicKeyInfoEx2(
    dwCertEncodingType: {"kind":"UInt32"},
    pInfo: {"kind""Ptr","child":Windows.Win32.Security.CERT_PUBLIC_KEY_INFO},
    dwFlags: {"kind":"UInt32"},
    pvAuxInfo: {"kind""Ptr","child":{"kind":"Void"}},
    phKey: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptAcquireCertificatePrivateKey(
    pCert: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    dwFlags: {"kind":"UInt32"},
    pvParameters: {"kind""Ptr","child":{"kind":"Void"}},
    phCryptProvOrNCryptKey: {"kind""Ptr","child":{"kind":"UIntPtr"}},
    pdwKeySpec: {"kind""Ptr","child":{"kind":"UInt32"}},
    pfCallerFreeProvOrNCryptKey: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptFindCertificateKeyProvInfo(
    pCert: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    dwFlags: {"kind":"UInt32"},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptImportPKCS8(
    sPrivateKeyAndParams: Windows.Win32.Security.CRYPT_PKCS8_IMPORT_PARAMS,
    dwFlags: {"kind":"UInt32"},
    phCryptProv: {"kind""Ptr","child":{"kind":"UIntPtr"}},
    pvAuxInfo: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptExportPKCS8(
    hCryptProv: {"kind":"UIntPtr"},
    dwKeySpec: {"kind":"UInt32"},
    pszPrivateKeyObjId: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},
    pvAuxInfo: {"kind""Ptr","child":{"kind":"Void"}},
    pbPrivateKeyBlob: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbPrivateKeyBlob: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptHashPublicKeyInfo(
    hCryptProv: {"kind":"UIntPtr"},
    Algid: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    dwCertEncodingType: {"kind":"UInt32"},
    pInfo: {"kind""Ptr","child":Windows.Win32.Security.CERT_PUBLIC_KEY_INFO},
    pbComputedHash: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbComputedHash: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertRDNValueToStrA(
    dwValueType: {"kind":"UInt32"},
    pValue: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
    psz: {"kind""Ptr","child":{"kind":"SByte"}},
    csz: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertRDNValueToStrW(
    dwValueType: {"kind":"UInt32"},
    pValue: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
    psz: {"kind""Ptr","child":{"kind":"UInt16"}},
    csz: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertNameToStrA(
    dwCertEncodingType: {"kind":"UInt32"},
    pName: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
    dwStrType: {"kind":"UInt32"},
    psz: {"kind""Ptr","child":{"kind":"SByte"}},
    csz: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertNameToStrW(
    dwCertEncodingType: {"kind":"UInt32"},
    pName: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
    dwStrType: {"kind":"UInt32"},
    psz: {"kind""Ptr","child":{"kind":"UInt16"}},
    csz: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertStrToNameA(
    dwCertEncodingType: {"kind":"UInt32"},
    pszX500: {"kind""Ptr","child":{"kind":"SByte"}},
    dwStrType: {"kind":"UInt32"},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},
    pbEncoded: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbEncoded: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppszError: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertStrToNameW(
    dwCertEncodingType: {"kind":"UInt32"},
    pszX500: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwStrType: {"kind":"UInt32"},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},
    pbEncoded: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbEncoded: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppszError: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertGetNameStringA(
    pCertContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    dwType: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    pvTypePara: {"kind""Ptr","child":{"kind":"Void"}},
    pszNameString: {"kind""Ptr","child":{"kind":"SByte"}},
    cchNameString: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertGetNameStringW(
    pCertContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    dwType: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    pvTypePara: {"kind""Ptr","child":{"kind":"Void"}},
    pszNameString: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchNameString: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptSignMessage(
    pSignPara: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_SIGN_MESSAGE_PARA},
    fDetachedSignature: Windows.Win32.SystemServices.BOOL,
    cToBeSigned: {"kind":"UInt32"},
    rgpbToBeSigned: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    rgcbToBeSigned: {"kind""Ptr","child":{"kind":"UInt32"}},
    pbSignedBlob: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbSignedBlob: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptVerifyMessageSignature(
    pVerifyPara: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_VERIFY_MESSAGE_PARA},
    dwSignerIndex: {"kind":"UInt32"},
    pbSignedBlob: {"kind""Ptr","child":{"kind":"Byte"}},
    cbSignedBlob: {"kind":"UInt32"},
    pbDecoded: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbDecoded: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppSignerCert: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptGetMessageSignerCount(
    dwMsgEncodingType: {"kind":"UInt32"},
    pbSignedBlob: {"kind""Ptr","child":{"kind":"Byte"}},
    cbSignedBlob: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptGetMessageCertificates(
    dwMsgAndCertEncodingType: {"kind":"UInt32"},
    hCryptProv: {"kind":"UIntPtr"},
    dwFlags: {"kind":"UInt32"},
    pbSignedBlob: {"kind""Ptr","child":{"kind":"Byte"}},
    cbSignedBlob: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptVerifyDetachedMessageSignature(
    pVerifyPara: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_VERIFY_MESSAGE_PARA},
    dwSignerIndex: {"kind":"UInt32"},
    pbDetachedSignBlob: {"kind""Ptr","child":{"kind":"Byte"}},
    cbDetachedSignBlob: {"kind":"UInt32"},
    cToBeSigned: {"kind":"UInt32"},
    rgpbToBeSigned: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    rgcbToBeSigned: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppSignerCert: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptEncryptMessage(
    pEncryptPara: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_ENCRYPT_MESSAGE_PARA},
    cRecipientCert: {"kind":"UInt32"},
    rgpRecipientCert: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT}},
    pbToBeEncrypted: {"kind""Ptr","child":{"kind":"Byte"}},
    cbToBeEncrypted: {"kind":"UInt32"},
    pbEncryptedBlob: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbEncryptedBlob: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptDecryptMessage(
    pDecryptPara: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_DECRYPT_MESSAGE_PARA},
    pbEncryptedBlob: {"kind""Ptr","child":{"kind":"Byte"}},
    cbEncryptedBlob: {"kind":"UInt32"},
    pbDecrypted: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbDecrypted: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppXchgCert: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptSignAndEncryptMessage(
    pSignPara: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_SIGN_MESSAGE_PARA},
    pEncryptPara: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_ENCRYPT_MESSAGE_PARA},
    cRecipientCert: {"kind":"UInt32"},
    rgpRecipientCert: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT}},
    pbToBeSignedAndEncrypted: {"kind""Ptr","child":{"kind":"Byte"}},
    cbToBeSignedAndEncrypted: {"kind":"UInt32"},
    pbSignedAndEncryptedBlob: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbSignedAndEncryptedBlob: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptDecryptAndVerifyMessageSignature(
    pDecryptPara: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_DECRYPT_MESSAGE_PARA},
    pVerifyPara: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_VERIFY_MESSAGE_PARA},
    dwSignerIndex: {"kind":"UInt32"},
    pbEncryptedBlob: {"kind""Ptr","child":{"kind":"Byte"}},
    cbEncryptedBlob: {"kind":"UInt32"},
    pbDecrypted: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbDecrypted: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppXchgCert: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT}},
    ppSignerCert: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptDecodeMessage(
    dwMsgTypeFlags: {"kind":"UInt32"},
    pDecryptPara: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_DECRYPT_MESSAGE_PARA},
    pVerifyPara: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_VERIFY_MESSAGE_PARA},
    dwSignerIndex: {"kind":"UInt32"},
    pbEncodedBlob: {"kind""Ptr","child":{"kind":"Byte"}},
    cbEncodedBlob: {"kind":"UInt32"},
    dwPrevInnerContentType: {"kind":"UInt32"},
    pdwMsgType: {"kind""Ptr","child":{"kind":"UInt32"}},
    pdwInnerContentType: {"kind""Ptr","child":{"kind":"UInt32"}},
    pbDecoded: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbDecoded: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppXchgCert: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT}},
    ppSignerCert: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptHashMessage(
    pHashPara: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_HASH_MESSAGE_PARA},
    fDetachedHash: Windows.Win32.SystemServices.BOOL,
    cToBeHashed: {"kind":"UInt32"},
    rgpbToBeHashed: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    rgcbToBeHashed: {"kind""Ptr","child":{"kind":"UInt32"}},
    pbHashedBlob: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbHashedBlob: {"kind""Ptr","child":{"kind":"UInt32"}},
    pbComputedHash: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbComputedHash: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptVerifyMessageHash(
    pHashPara: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_HASH_MESSAGE_PARA},
    pbHashedBlob: {"kind""Ptr","child":{"kind":"Byte"}},
    cbHashedBlob: {"kind":"UInt32"},
    pbToBeHashed: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbToBeHashed: {"kind""Ptr","child":{"kind":"UInt32"}},
    pbComputedHash: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbComputedHash: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptVerifyDetachedMessageHash(
    pHashPara: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_HASH_MESSAGE_PARA},
    pbDetachedHashBlob: {"kind""Ptr","child":{"kind":"Byte"}},
    cbDetachedHashBlob: {"kind":"UInt32"},
    cToBeHashed: {"kind":"UInt32"},
    rgpbToBeHashed: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    rgcbToBeHashed: {"kind""Ptr","child":{"kind":"UInt32"}},
    pbComputedHash: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbComputedHash: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptSignMessageWithKey(
    pSignPara: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_KEY_SIGN_MESSAGE_PARA},
    pbToBeSigned: {"kind""Ptr","child":{"kind":"Byte"}},
    cbToBeSigned: {"kind":"UInt32"},
    pbSignedBlob: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbSignedBlob: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptVerifyMessageSignatureWithKey(
    pVerifyPara: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_KEY_VERIFY_MESSAGE_PARA},
    pPublicKeyInfo: {"kind""Ptr","child":Windows.Win32.Security.CERT_PUBLIC_KEY_INFO},
    pbSignedBlob: {"kind""Ptr","child":{"kind":"Byte"}},
    cbSignedBlob: {"kind":"UInt32"},
    pbDecoded: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbDecoded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertOpenSystemStoreA(
    hProv: {"kind":"UIntPtr"},
    szSubsystemProtocol: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertOpenSystemStoreW(
    hProv: {"kind":"UIntPtr"},
    szSubsystemProtocol: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertAddEncodedCertificateToSystemStoreA(
    szCertStoreName: {"kind""Ptr","child":{"kind":"SByte"}},
    pbCertEncoded: {"kind""Ptr","child":{"kind":"Byte"}},
    cbCertEncoded: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertAddEncodedCertificateToSystemStoreW(
    szCertStoreName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pbCertEncoded: {"kind""Ptr","child":{"kind":"Byte"}},
    cbCertEncoded: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn FindCertsByIssuer(
    pCertChains: {"kind""Ptr","child":Windows.Win32.Security.CERT_CHAIN},
    pcbCertChains: {"kind""Ptr","child":{"kind":"UInt32"}},
    pcCertChains: {"kind""Ptr","child":{"kind":"UInt32"}},
    pbEncodedIssuerName: {"kind""Ptr","child":{"kind":"Byte"}},
    cbEncodedIssuerName: {"kind":"UInt32"},
    pwszPurpose: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwKeySpec: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptQueryObject(
    dwObjectType: {"kind":"UInt32"},
    pvObject: {"kind""Ptr","child":{"kind":"Void"}},
    dwExpectedContentTypeFlags: {"kind":"UInt32"},
    dwExpectedFormatTypeFlags: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    pdwMsgAndCertEncodingType: {"kind""Ptr","child":{"kind":"UInt32"}},
    pdwContentType: {"kind""Ptr","child":{"kind":"UInt32"}},
    pdwFormatType: {"kind""Ptr","child":{"kind":"UInt32"}},
    phCertStore: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    phMsg: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    ppvContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptMemAlloc(
    cbSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptMemRealloc(
    pv: {"kind""Ptr","child":{"kind":"Void"}},
    cbSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptMemFree(
    pv: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptCreateAsyncHandle(
    dwFlags: {"kind":"UInt32"},
    phAsync: {"kind""Ptr","child":Windows.Win32.Security.HCRYPTASYNC},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptSetAsyncParam(
    hAsync: Windows.Win32.Security.HCRYPTASYNC,
    pszParamOid: {"kind""Ptr","child":{"kind":"SByte"}},
    pvParam: {"kind""Ptr","child":{"kind":"Void"}},
    pfnFree: Windows.Win32.Security.PFN_CRYPT_ASYNC_PARAM_FREE_FUNC,

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptGetAsyncParam(
    hAsync: Windows.Win32.Security.HCRYPTASYNC,
    pszParamOid: {"kind""Ptr","child":{"kind":"SByte"}},
    ppvParam: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    ppfnFree: {"kind""Ptr","child":Windows.Win32.Security.PFN_CRYPT_ASYNC_PARAM_FREE_FUNC},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptCloseAsyncHandle(
    hAsync: Windows.Win32.Security.HCRYPTASYNC,

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTNET" fn CryptRetrieveObjectByUrlA(
    pszUrl: {"kind""Ptr","child":{"kind":"SByte"}},
    pszObjectOid: {"kind""Ptr","child":{"kind":"SByte"}},
    dwRetrievalFlags: {"kind":"UInt32"},
    dwTimeout: {"kind":"UInt32"},
    ppvObject: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    hAsyncRetrieve: Windows.Win32.Security.HCRYPTASYNC,
    pCredentials: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_CREDENTIALS},
    pvVerify: {"kind""Ptr","child":{"kind":"Void"}},
    pAuxInfo: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_RETRIEVE_AUX_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTNET" fn CryptRetrieveObjectByUrlW(
    pszUrl: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszObjectOid: {"kind""Ptr","child":{"kind":"SByte"}},
    dwRetrievalFlags: {"kind":"UInt32"},
    dwTimeout: {"kind":"UInt32"},
    ppvObject: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    hAsyncRetrieve: Windows.Win32.Security.HCRYPTASYNC,
    pCredentials: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_CREDENTIALS},
    pvVerify: {"kind""Ptr","child":{"kind":"Void"}},
    pAuxInfo: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_RETRIEVE_AUX_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTNET" fn CryptInstallCancelRetrieval(
    pfnCancel: Windows.Win32.Security.PFN_CRYPT_CANCEL_RETRIEVAL,
    pvArg: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTNET" fn CryptUninstallCancelRetrieval(
    dwFlags: {"kind":"UInt32"},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPTNET" fn CryptGetObjectUrl(
    pszUrlOid: {"kind""Ptr","child":{"kind":"SByte"}},
    pvPara: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},
    pUrlArray: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_URL_ARRAY},
    pcbUrlArray: {"kind""Ptr","child":{"kind":"UInt32"}},
    pUrlInfo: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_URL_INFO},
    pcbUrlInfo: {"kind""Ptr","child":{"kind":"UInt32"}},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertCreateSelfSignCertificate(
    hCryptProvOrNCryptKey: {"kind":"UIntPtr"},
    pSubjectIssuerBlob: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
    dwFlags: {"kind":"UInt32"},
    pKeyProvInfo: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_KEY_PROV_INFO},
    pSignatureAlgorithm: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_ALGORITHM_IDENTIFIER},
    pStartTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.SYSTEMTIME},
    pEndTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.SYSTEMTIME},
    pExtensions: {"kind""Ptr","child":Windows.Win32.Security.CERT_EXTENSIONS},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptGetKeyIdentifierProperty(
    pKeyIdentifier: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
    dwPropId: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    pwszComputerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},
    pvData: {"kind""Ptr","child":{"kind":"Void"}},
    pcbData: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptSetKeyIdentifierProperty(
    pKeyIdentifier: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
    dwPropId: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    pwszComputerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},
    pvData: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptEnumKeyIdentifierProperties(
    pKeyIdentifier: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
    dwPropId: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    pwszComputerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},
    pvArg: {"kind""Ptr","child":{"kind":"Void"}},
    pfnEnum: Windows.Win32.Security.PFN_CRYPT_ENUM_KEYID_PROP,

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptCreateKeyIdentifierFromCSP(
    dwCertEncodingType: {"kind":"UInt32"},
    pszPubKeyOID: {"kind""Ptr","child":{"kind":"SByte"}},
    pPubKeyStruc: {"kind""Ptr","child":Windows.Win32.Security.PUBLICKEYSTRUC},
    cbPubKeyStruc: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},
    pbHash: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbHash: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertCreateCertificateChainEngine(
    pConfig: {"kind""Ptr","child":Windows.Win32.Security.CERT_CHAIN_ENGINE_CONFIG},
    phChainEngine: {"kind""Ptr","child":Windows.Win32.Security.HCERTCHAINENGINE},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertFreeCertificateChainEngine(
    hChainEngine: Windows.Win32.Security.HCERTCHAINENGINE,

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertResyncCertificateChainEngine(
    hChainEngine: Windows.Win32.Security.HCERTCHAINENGINE,

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertGetCertificateChain(
    hChainEngine: Windows.Win32.Security.HCERTCHAINENGINE,
    pCertContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    pTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    hAdditionalStore: {"kind""Ptr","child":{"kind":"Void"}},
    pChainPara: {"kind""Ptr","child":Windows.Win32.Security.CERT_CHAIN_PARA},
    dwFlags: {"kind":"UInt32"},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},
    ppChainContext: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CERT_CHAIN_CONTEXT}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertFreeCertificateChain(
    pChainContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CHAIN_CONTEXT},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertDuplicateCertificateChain(
    pChainContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CHAIN_CONTEXT},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertFindChainInStore(
    hCertStore: {"kind""Ptr","child":{"kind":"Void"}},
    dwCertEncodingType: {"kind":"UInt32"},
    dwFindFlags: {"kind":"UInt32"},
    dwFindType: {"kind":"UInt32"},
    pvFindPara: {"kind""Ptr","child":{"kind":"Void"}},
    pPrevChainContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CHAIN_CONTEXT},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertVerifyCertificateChainPolicy(
    pszPolicyOID: {"kind""Ptr","child":{"kind":"SByte"}},
    pChainContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CHAIN_CONTEXT},
    pPolicyPara: {"kind""Ptr","child":Windows.Win32.Security.CERT_CHAIN_POLICY_PARA},
    pPolicyStatus: {"kind""Ptr","child":Windows.Win32.Security.CERT_CHAIN_POLICY_STATUS},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptStringToBinaryA(
    pszString: {"kind""Ptr","child":{"kind":"SByte"}},
    cchString: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    pbBinary: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbBinary: {"kind""Ptr","child":{"kind":"UInt32"}},
    pdwSkip: {"kind""Ptr","child":{"kind":"UInt32"}},
    pdwFlags: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptStringToBinaryW(
    pszString: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchString: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    pbBinary: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbBinary: {"kind""Ptr","child":{"kind":"UInt32"}},
    pdwSkip: {"kind""Ptr","child":{"kind":"UInt32"}},
    pdwFlags: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptBinaryToStringA(
    pbBinary: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBinary: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    pszString: {"kind""Ptr","child":{"kind":"SByte"}},
    pcchString: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptBinaryToStringW(
    pbBinary: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBinary: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    pszString: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchString: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn PFXImportCertStore(
    pPFX: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
    szPassword: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn PFXIsPFXBlob(
    pPFX: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn PFXVerifyPassword(
    pPFX: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
    szPassword: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn PFXExportCertStoreEx(
    hStore: {"kind""Ptr","child":{"kind":"Void"}},
    pPFX: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
    szPassword: {"kind""Ptr","child":{"kind":"UInt16"}},
    pvPara: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn PFXExportCertStore(
    hStore: {"kind""Ptr","child":{"kind":"Void"}},
    pPFX: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
    szPassword: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertOpenServerOcspResponse(
    pChainContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CHAIN_CONTEXT},
    dwFlags: {"kind":"UInt32"},
    pOpenPara: {"kind""Ptr","child":Windows.Win32.Security.CERT_SERVER_OCSP_RESPONSE_OPEN_PARA},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertAddRefServerOcspResponse(
    hServerOcspResponse: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertCloseServerOcspResponse(
    hServerOcspResponse: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertGetServerOcspResponseContext(
    hServerOcspResponse: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertAddRefServerOcspResponseContext(
    pServerOcspResponseContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_SERVER_OCSP_RESPONSE_CONTEXT},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertFreeServerOcspResponseContext(
    pServerOcspResponseContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_SERVER_OCSP_RESPONSE_CONTEXT},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertRetrieveLogoOrBiometricInfo(
    pCertContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    lpszLogoOrBiometricType: {"kind""Ptr","child":{"kind":"SByte"}},
    dwRetrievalFlags: {"kind":"UInt32"},
    dwTimeout: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},
    ppbData: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    pcbData: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppwszMimeType: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertSelectCertificateChains(
    pSelectionContext: {"kind""Ptr","child":Guid},
    dwFlags: {"kind":"UInt32"},
    pChainParameters: {"kind""Ptr","child":Windows.Win32.Security.CERT_SELECT_CHAIN_PARA},
    cCriteria: {"kind":"UInt32"},
    rgpCriteria: {"kind""Ptr","child":Windows.Win32.Security.CERT_SELECT_CRITERIA},
    hStore: {"kind""Ptr","child":{"kind":"Void"}},
    pcSelection: {"kind""Ptr","child":{"kind":"UInt32"}},
    pprgpSelection: {"kind""Ptr","child":{"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CERT_CHAIN_CONTEXT}}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertFreeCertificateChainList(
    prgpSelection: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CERT_CHAIN_CONTEXT}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptRetrieveTimeStamp(
    wszUrl: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwRetrievalFlags: {"kind":"UInt32"},
    dwTimeout: {"kind":"UInt32"},
    pszHashId: {"kind""Ptr","child":{"kind":"SByte"}},
    pPara: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_TIMESTAMP_PARA},
    pbData: {"kind""Ptr","child":{"kind":"Byte"}},
    cbData: {"kind":"UInt32"},
    ppTsContext: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CRYPT_TIMESTAMP_CONTEXT}},
    ppTsSigner: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT}},
    phStore: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptVerifyTimeStampSignature(
    pbTSContentInfo: {"kind""Ptr","child":{"kind":"Byte"}},
    cbTSContentInfo: {"kind":"UInt32"},
    pbData: {"kind""Ptr","child":{"kind":"Byte"}},
    cbData: {"kind":"UInt32"},
    hAdditionalStore: {"kind""Ptr","child":{"kind":"Void"}},
    ppTsContext: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CRYPT_TIMESTAMP_CONTEXT}},
    ppTsSigner: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT}},
    phStore: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertIsWeakHash(
    dwHashUseType: {"kind":"UInt32"},
    pwszCNGHashAlgid: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwChainFlags: {"kind":"UInt32"},
    pSignerChainContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CHAIN_CONTEXT},
    pTimeStamp: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    pwszFileName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptProtectData(
    pDataIn: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
    szDataDescr: {"kind""Ptr","child":{"kind":"UInt16"}},
    pOptionalEntropy: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},
    pPromptStruct: {"kind""Ptr","child":Windows.Win32.Security.CRYPTPROTECT_PROMPTSTRUCT},
    dwFlags: {"kind":"UInt32"},
    pDataOut: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptUnprotectData(
    pDataIn: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
    ppszDataDescr: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    pOptionalEntropy: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},
    pPromptStruct: {"kind""Ptr","child":Windows.Win32.Security.CRYPTPROTECT_PROMPTSTRUCT},
    dwFlags: {"kind":"UInt32"},
    pDataOut: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptUpdateProtectedState(
    pOldSid: {"kind""Ptr","child":{"kind":"Void"}},
    pwszOldPassword: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    pdwSuccessCount: {"kind""Ptr","child":{"kind":"UInt32"}},
    pdwFailureCount: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptProtectMemory(
    pDataIn: {"kind""Ptr","child":{"kind":"Void"}},
    cbDataIn: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptUnprotectMemory(
    pDataIn: {"kind""Ptr","child":{"kind":"Void"}},
    cbDataIn: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardEstablishContext(
    dwScope: {"kind":"UInt32"},
    pvReserved1: {"kind""Ptr","child":{"kind":"Void"}},
    pvReserved2: {"kind""Ptr","child":{"kind":"Void"}},
    phContext: {"kind""Ptr","child":{"kind":"UIntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardReleaseContext(
    hContext: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardIsValidContext(
    hContext: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardListReaderGroupsA(
    hContext: {"kind":"UIntPtr"},
    mszGroups: {"kind""Ptr","child":{"kind":"SByte"}},
    pcchGroups: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardListReaderGroupsW(
    hContext: {"kind":"UIntPtr"},
    mszGroups: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchGroups: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardListReadersA(
    hContext: {"kind":"UIntPtr"},
    mszGroups: {"kind""Ptr","child":{"kind":"SByte"}},
    mszReaders: {"kind""Ptr","child":{"kind":"SByte"}},
    pcchReaders: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardListReadersW(
    hContext: {"kind":"UIntPtr"},
    mszGroups: {"kind""Ptr","child":{"kind":"UInt16"}},
    mszReaders: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchReaders: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardListCardsA(
    hContext: {"kind":"UIntPtr"},
    pbAtr: {"kind""Ptr","child":{"kind":"Byte"}},
    rgquidInterfaces: {"kind""Ptr","child":Guid},
    cguidInterfaceCount: {"kind":"UInt32"},
    mszCards: {"kind""Ptr","child":{"kind":"SByte"}},
    pcchCards: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardListCardsW(
    hContext: {"kind":"UIntPtr"},
    pbAtr: {"kind""Ptr","child":{"kind":"Byte"}},
    rgquidInterfaces: {"kind""Ptr","child":Guid},
    cguidInterfaceCount: {"kind":"UInt32"},
    mszCards: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchCards: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardListInterfacesA(
    hContext: {"kind":"UIntPtr"},
    szCard: {"kind""Ptr","child":{"kind":"SByte"}},
    pguidInterfaces: {"kind""Ptr","child":Guid},
    pcguidInterfaces: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardListInterfacesW(
    hContext: {"kind":"UIntPtr"},
    szCard: {"kind""Ptr","child":{"kind":"UInt16"}},
    pguidInterfaces: {"kind""Ptr","child":Guid},
    pcguidInterfaces: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardGetProviderIdA(
    hContext: {"kind":"UIntPtr"},
    szCard: {"kind""Ptr","child":{"kind":"SByte"}},
    pguidProviderId: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardGetProviderIdW(
    hContext: {"kind":"UIntPtr"},
    szCard: {"kind""Ptr","child":{"kind":"UInt16"}},
    pguidProviderId: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardGetCardTypeProviderNameA(
    hContext: {"kind":"UIntPtr"},
    szCardName: {"kind""Ptr","child":{"kind":"SByte"}},
    dwProviderId: {"kind":"UInt32"},
    szProvider: {"kind""Ptr","child":{"kind":"SByte"}},
    pcchProvider: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardGetCardTypeProviderNameW(
    hContext: {"kind":"UIntPtr"},
    szCardName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwProviderId: {"kind":"UInt32"},
    szProvider: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchProvider: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardIntroduceReaderGroupA(
    hContext: {"kind":"UIntPtr"},
    szGroupName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardIntroduceReaderGroupW(
    hContext: {"kind":"UIntPtr"},
    szGroupName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardForgetReaderGroupA(
    hContext: {"kind":"UIntPtr"},
    szGroupName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardForgetReaderGroupW(
    hContext: {"kind":"UIntPtr"},
    szGroupName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardIntroduceReaderA(
    hContext: {"kind":"UIntPtr"},
    szReaderName: {"kind""Ptr","child":{"kind":"SByte"}},
    szDeviceName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardIntroduceReaderW(
    hContext: {"kind":"UIntPtr"},
    szReaderName: {"kind""Ptr","child":{"kind":"UInt16"}},
    szDeviceName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardForgetReaderA(
    hContext: {"kind":"UIntPtr"},
    szReaderName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardForgetReaderW(
    hContext: {"kind":"UIntPtr"},
    szReaderName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardAddReaderToGroupA(
    hContext: {"kind":"UIntPtr"},
    szReaderName: {"kind""Ptr","child":{"kind":"SByte"}},
    szGroupName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardAddReaderToGroupW(
    hContext: {"kind":"UIntPtr"},
    szReaderName: {"kind""Ptr","child":{"kind":"UInt16"}},
    szGroupName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardRemoveReaderFromGroupA(
    hContext: {"kind":"UIntPtr"},
    szReaderName: {"kind""Ptr","child":{"kind":"SByte"}},
    szGroupName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardRemoveReaderFromGroupW(
    hContext: {"kind":"UIntPtr"},
    szReaderName: {"kind""Ptr","child":{"kind":"UInt16"}},
    szGroupName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardIntroduceCardTypeA(
    hContext: {"kind":"UIntPtr"},
    szCardName: {"kind""Ptr","child":{"kind":"SByte"}},
    pguidPrimaryProvider: {"kind""Ptr","child":Guid},
    rgguidInterfaces: {"kind""Ptr","child":Guid},
    dwInterfaceCount: {"kind":"UInt32"},
    pbAtr: {"kind""Ptr","child":{"kind":"Byte"}},
    pbAtrMask: {"kind""Ptr","child":{"kind":"Byte"}},
    cbAtrLen: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardIntroduceCardTypeW(
    hContext: {"kind":"UIntPtr"},
    szCardName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pguidPrimaryProvider: {"kind""Ptr","child":Guid},
    rgguidInterfaces: {"kind""Ptr","child":Guid},
    dwInterfaceCount: {"kind":"UInt32"},
    pbAtr: {"kind""Ptr","child":{"kind":"Byte"}},
    pbAtrMask: {"kind""Ptr","child":{"kind":"Byte"}},
    cbAtrLen: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardSetCardTypeProviderNameA(
    hContext: {"kind":"UIntPtr"},
    szCardName: {"kind""Ptr","child":{"kind":"SByte"}},
    dwProviderId: {"kind":"UInt32"},
    szProvider: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardSetCardTypeProviderNameW(
    hContext: {"kind":"UIntPtr"},
    szCardName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwProviderId: {"kind":"UInt32"},
    szProvider: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardForgetCardTypeA(
    hContext: {"kind":"UIntPtr"},
    szCardName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardForgetCardTypeW(
    hContext: {"kind":"UIntPtr"},
    szCardName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardFreeMemory(
    hContext: {"kind":"UIntPtr"},
    pvMem: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "WinSCard" fn SCardAccessStartedEvent(

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardReleaseStartedEvent(

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardLocateCardsA(
    hContext: {"kind":"UIntPtr"},
    mszCards: {"kind""Ptr","child":{"kind":"SByte"}},
    rgReaderStates: {"kind""Ptr","child":Windows.Win32.Security.SCARD_READERSTATEA},
    cReaders: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardLocateCardsW(
    hContext: {"kind":"UIntPtr"},
    mszCards: {"kind""Ptr","child":{"kind":"UInt16"}},
    rgReaderStates: {"kind""Ptr","child":Windows.Win32.Security.SCARD_READERSTATEW},
    cReaders: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardLocateCardsByATRA(
    hContext: {"kind":"UIntPtr"},
    rgAtrMasks: {"kind""Ptr","child":Windows.Win32.Security.SCARD_ATRMASK},
    cAtrs: {"kind":"UInt32"},
    rgReaderStates: {"kind""Ptr","child":Windows.Win32.Security.SCARD_READERSTATEA},
    cReaders: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardLocateCardsByATRW(
    hContext: {"kind":"UIntPtr"},
    rgAtrMasks: {"kind""Ptr","child":Windows.Win32.Security.SCARD_ATRMASK},
    cAtrs: {"kind":"UInt32"},
    rgReaderStates: {"kind""Ptr","child":Windows.Win32.Security.SCARD_READERSTATEW},
    cReaders: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardGetStatusChangeA(
    hContext: {"kind":"UIntPtr"},
    dwTimeout: {"kind":"UInt32"},
    rgReaderStates: {"kind""Ptr","child":Windows.Win32.Security.SCARD_READERSTATEA},
    cReaders: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardGetStatusChangeW(
    hContext: {"kind":"UIntPtr"},
    dwTimeout: {"kind":"UInt32"},
    rgReaderStates: {"kind""Ptr","child":Windows.Win32.Security.SCARD_READERSTATEW},
    cReaders: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardCancel(
    hContext: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardConnectA(
    hContext: {"kind":"UIntPtr"},
    szReader: {"kind""Ptr","child":{"kind":"SByte"}},
    dwShareMode: {"kind":"UInt32"},
    dwPreferredProtocols: {"kind":"UInt32"},
    phCard: {"kind""Ptr","child":{"kind":"UIntPtr"}},
    pdwActiveProtocol: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardConnectW(
    hContext: {"kind":"UIntPtr"},
    szReader: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwShareMode: {"kind":"UInt32"},
    dwPreferredProtocols: {"kind":"UInt32"},
    phCard: {"kind""Ptr","child":{"kind":"UIntPtr"}},
    pdwActiveProtocol: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardReconnect(
    hCard: {"kind":"UIntPtr"},
    dwShareMode: {"kind":"UInt32"},
    dwPreferredProtocols: {"kind":"UInt32"},
    dwInitialization: {"kind":"UInt32"},
    pdwActiveProtocol: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardDisconnect(
    hCard: {"kind":"UIntPtr"},
    dwDisposition: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardBeginTransaction(
    hCard: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardEndTransaction(
    hCard: {"kind":"UIntPtr"},
    dwDisposition: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardState(
    hCard: {"kind":"UIntPtr"},
    pdwState: {"kind""Ptr","child":{"kind":"UInt32"}},
    pdwProtocol: {"kind""Ptr","child":{"kind":"UInt32"}},
    pbAtr: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbAtrLen: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardStatusA(
    hCard: {"kind":"UIntPtr"},
    mszReaderNames: {"kind""Ptr","child":{"kind":"SByte"}},
    pcchReaderLen: {"kind""Ptr","child":{"kind":"UInt32"}},
    pdwState: {"kind""Ptr","child":{"kind":"UInt32"}},
    pdwProtocol: {"kind""Ptr","child":{"kind":"UInt32"}},
    pbAtr: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbAtrLen: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardStatusW(
    hCard: {"kind":"UIntPtr"},
    mszReaderNames: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchReaderLen: {"kind""Ptr","child":{"kind":"UInt32"}},
    pdwState: {"kind""Ptr","child":{"kind":"UInt32"}},
    pdwProtocol: {"kind""Ptr","child":{"kind":"UInt32"}},
    pbAtr: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbAtrLen: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardTransmit(
    hCard: {"kind":"UIntPtr"},
    pioSendPci: {"kind""Ptr","child":Windows.Win32.SystemServices.SCARD_IO_REQUEST},
    pbSendBuffer: {"kind""Ptr","child":{"kind":"Byte"}},
    cbSendLength: {"kind":"UInt32"},
    pioRecvPci: {"kind""Ptr","child":Windows.Win32.SystemServices.SCARD_IO_REQUEST},
    pbRecvBuffer: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbRecvLength: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardGetTransmitCount(
    hCard: {"kind":"UIntPtr"},
    pcTransmitCount: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardControl(
    hCard: {"kind":"UIntPtr"},
    dwControlCode: {"kind":"UInt32"},
    lpInBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    cbInBufferSize: {"kind":"UInt32"},
    lpOutBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    cbOutBufferSize: {"kind":"UInt32"},
    lpBytesReturned: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardGetAttrib(
    hCard: {"kind":"UIntPtr"},
    dwAttrId: {"kind":"UInt32"},
    pbAttr: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbAttrLen: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardSetAttrib(
    hCard: {"kind":"UIntPtr"},
    dwAttrId: {"kind":"UInt32"},
    pbAttr: {"kind""Ptr","child":{"kind":"Byte"}},
    cbAttrLen: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SCARDDLG" fn SCardUIDlgSelectCardA(
    param0: {"kind""Ptr","child":Windows.Win32.Security.OPENCARDNAME_EXA},

// set_last_errror=False (can and should we use this?)
pub extern "SCARDDLG" fn SCardUIDlgSelectCardW(
    param0: {"kind""Ptr","child":Windows.Win32.Security.OPENCARDNAME_EXW},

// set_last_errror=False (can and should we use this?)
pub extern "SCARDDLG" fn GetOpenCardNameA(
    param0: {"kind""Ptr","child":Windows.Win32.Security.OPENCARDNAMEA},

// set_last_errror=False (can and should we use this?)
pub extern "SCARDDLG" fn GetOpenCardNameW(
    param0: {"kind""Ptr","child":Windows.Win32.Security.OPENCARDNAMEW},

// set_last_errror=False (can and should we use this?)
pub extern "SCARDDLG" fn SCardDlgExtendedError(

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardReadCacheA(
    hContext: {"kind":"UIntPtr"},
    CardIdentifier: {"kind""Ptr","child":Guid},
    FreshnessCounter: {"kind":"UInt32"},
    LookupName: {"kind""Ptr","child":{"kind":"SByte"}},
    Data: {"kind""Ptr","child":{"kind":"Byte"}},
    DataLen: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardReadCacheW(
    hContext: {"kind":"UIntPtr"},
    CardIdentifier: {"kind""Ptr","child":Guid},
    FreshnessCounter: {"kind":"UInt32"},
    LookupName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Data: {"kind""Ptr","child":{"kind":"Byte"}},
    DataLen: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardWriteCacheA(
    hContext: {"kind":"UIntPtr"},
    CardIdentifier: {"kind""Ptr","child":Guid},
    FreshnessCounter: {"kind":"UInt32"},
    LookupName: {"kind""Ptr","child":{"kind":"SByte"}},
    Data: {"kind""Ptr","child":{"kind":"Byte"}},
    DataLen: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardWriteCacheW(
    hContext: {"kind":"UIntPtr"},
    CardIdentifier: {"kind""Ptr","child":Guid},
    FreshnessCounter: {"kind":"UInt32"},
    LookupName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Data: {"kind""Ptr","child":{"kind":"Byte"}},
    DataLen: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardGetReaderIconA(
    hContext: {"kind":"UIntPtr"},
    szReaderName: {"kind""Ptr","child":{"kind":"SByte"}},
    pbIcon: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbIcon: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardGetReaderIconW(
    hContext: {"kind":"UIntPtr"},
    szReaderName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pbIcon: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbIcon: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardGetDeviceTypeIdA(
    hContext: {"kind":"UIntPtr"},
    szReaderName: {"kind""Ptr","child":{"kind":"SByte"}},
    pdwDeviceTypeId: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardGetDeviceTypeIdW(
    hContext: {"kind":"UIntPtr"},
    szReaderName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pdwDeviceTypeId: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardGetReaderDeviceInstanceIdA(
    hContext: {"kind":"UIntPtr"},
    szReaderName: {"kind""Ptr","child":{"kind":"SByte"}},
    szDeviceInstanceId: {"kind""Ptr","child":{"kind":"SByte"}},
    pcchDeviceInstanceId: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardGetReaderDeviceInstanceIdW(
    hContext: {"kind":"UIntPtr"},
    szReaderName: {"kind""Ptr","child":{"kind":"UInt16"}},
    szDeviceInstanceId: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchDeviceInstanceId: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardListReadersWithDeviceInstanceIdA(
    hContext: {"kind":"UIntPtr"},
    szDeviceInstanceId: {"kind""Ptr","child":{"kind":"SByte"}},
    mszReaders: {"kind""Ptr","child":{"kind":"SByte"}},
    pcchReaders: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardListReadersWithDeviceInstanceIdW(
    hContext: {"kind":"UIntPtr"},
    szDeviceInstanceId: {"kind""Ptr","child":{"kind":"UInt16"}},
    mszReaders: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchReaders: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardAudit(
    hContext: {"kind":"UIntPtr"},
    dwEvent: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ChangeServiceConfig2A(
    hService: {"kind""Ptr","child":Windows.Win32.Security.SC_HANDLE__},
    dwInfoLevel: {"kind":"UInt32"},
    lpInfo: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ChangeServiceConfig2W(
    hService: {"kind""Ptr","child":Windows.Win32.Security.SC_HANDLE__},
    dwInfoLevel: {"kind":"UInt32"},
    lpInfo: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CloseServiceHandle(
    hSCObject: {"kind""Ptr","child":Windows.Win32.Security.SC_HANDLE__},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ControlService(
    hService: {"kind""Ptr","child":Windows.Win32.Security.SC_HANDLE__},
    dwControl: {"kind":"UInt32"},
    lpServiceStatus: {"kind""Ptr","child":Windows.Win32.Security.SERVICE_STATUS},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn DeleteService(
    hService: {"kind""Ptr","child":Windows.Win32.Security.SC_HANDLE__},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn EnumDependentServicesA(
    hService: {"kind""Ptr","child":Windows.Win32.Security.SC_HANDLE__},
    dwServiceState: {"kind":"UInt32"},
    lpServices: {"kind""Ptr","child":Windows.Win32.Security.ENUM_SERVICE_STATUSA},
    cbBufSize: {"kind":"UInt32"},
    pcbBytesNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpServicesReturned: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn EnumDependentServicesW(
    hService: {"kind""Ptr","child":Windows.Win32.Security.SC_HANDLE__},
    dwServiceState: {"kind":"UInt32"},
    lpServices: {"kind""Ptr","child":Windows.Win32.Security.ENUM_SERVICE_STATUSW},
    cbBufSize: {"kind":"UInt32"},
    pcbBytesNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpServicesReturned: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn EnumServicesStatusA(
    hSCManager: {"kind""Ptr","child":Windows.Win32.Security.SC_HANDLE__},
    dwServiceType: {"kind":"UInt32"},
    dwServiceState: {"kind":"UInt32"},
    lpServices: {"kind""Ptr","child":Windows.Win32.Security.ENUM_SERVICE_STATUSA},
    cbBufSize: {"kind":"UInt32"},
    pcbBytesNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpServicesReturned: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpResumeHandle: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn EnumServicesStatusW(
    hSCManager: {"kind""Ptr","child":Windows.Win32.Security.SC_HANDLE__},
    dwServiceType: {"kind":"UInt32"},
    dwServiceState: {"kind":"UInt32"},
    lpServices: {"kind""Ptr","child":Windows.Win32.Security.ENUM_SERVICE_STATUSW},
    cbBufSize: {"kind":"UInt32"},
    pcbBytesNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpServicesReturned: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpResumeHandle: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn EnumServicesStatusExA(
    hSCManager: {"kind""Ptr","child":Windows.Win32.Security.SC_HANDLE__},
    InfoLevel: Windows.Win32.Security.SC_ENUM_TYPE,
    dwServiceType: {"kind":"UInt32"},
    dwServiceState: {"kind":"UInt32"},
    lpServices: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBufSize: {"kind":"UInt32"},
    pcbBytesNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpServicesReturned: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpResumeHandle: {"kind""Ptr","child":{"kind":"UInt32"}},
    pszGroupName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn EnumServicesStatusExW(
    hSCManager: {"kind""Ptr","child":Windows.Win32.Security.SC_HANDLE__},
    InfoLevel: Windows.Win32.Security.SC_ENUM_TYPE,
    dwServiceType: {"kind":"UInt32"},
    dwServiceState: {"kind":"UInt32"},
    lpServices: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBufSize: {"kind":"UInt32"},
    pcbBytesNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpServicesReturned: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpResumeHandle: {"kind""Ptr","child":{"kind":"UInt32"}},
    pszGroupName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetServiceKeyNameA(
    hSCManager: {"kind""Ptr","child":Windows.Win32.Security.SC_HANDLE__},
    lpDisplayName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpServiceName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpcchBuffer: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetServiceKeyNameW(
    hSCManager: {"kind""Ptr","child":Windows.Win32.Security.SC_HANDLE__},
    lpDisplayName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpServiceName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpcchBuffer: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetServiceDisplayNameA(
    hSCManager: {"kind""Ptr","child":Windows.Win32.Security.SC_HANDLE__},
    lpServiceName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpDisplayName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpcchBuffer: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetServiceDisplayNameW(
    hSCManager: {"kind""Ptr","child":Windows.Win32.Security.SC_HANDLE__},
    lpServiceName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpDisplayName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpcchBuffer: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn LockServiceDatabase(
    hSCManager: {"kind""Ptr","child":Windows.Win32.Security.SC_HANDLE__},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn NotifyBootConfigStatus(
    BootAcceptable: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn OpenSCManagerA(
    lpMachineName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpDatabaseName: {"kind""Ptr","child":{"kind":"SByte"}},
    dwDesiredAccess: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn OpenSCManagerW(
    lpMachineName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpDatabaseName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwDesiredAccess: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn OpenServiceA(
    hSCManager: {"kind""Ptr","child":Windows.Win32.Security.SC_HANDLE__},
    lpServiceName: {"kind""Ptr","child":{"kind":"SByte"}},
    dwDesiredAccess: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn OpenServiceW(
    hSCManager: {"kind""Ptr","child":Windows.Win32.Security.SC_HANDLE__},
    lpServiceName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwDesiredAccess: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn QueryServiceConfigA(
    hService: {"kind""Ptr","child":Windows.Win32.Security.SC_HANDLE__},
    lpServiceConfig: {"kind""Ptr","child":Windows.Win32.Security.QUERY_SERVICE_CONFIGA},
    cbBufSize: {"kind":"UInt32"},
    pcbBytesNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn QueryServiceConfigW(
    hService: {"kind""Ptr","child":Windows.Win32.Security.SC_HANDLE__},
    lpServiceConfig: {"kind""Ptr","child":Windows.Win32.Security.QUERY_SERVICE_CONFIGW},
    cbBufSize: {"kind":"UInt32"},
    pcbBytesNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn QueryServiceConfig2A(
    hService: {"kind""Ptr","child":Windows.Win32.Security.SC_HANDLE__},
    dwInfoLevel: {"kind":"UInt32"},
    lpBuffer: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBufSize: {"kind":"UInt32"},
    pcbBytesNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn QueryServiceConfig2W(
    hService: {"kind""Ptr","child":Windows.Win32.Security.SC_HANDLE__},
    dwInfoLevel: {"kind":"UInt32"},
    lpBuffer: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBufSize: {"kind":"UInt32"},
    pcbBytesNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn QueryServiceLockStatusA(
    hSCManager: {"kind""Ptr","child":Windows.Win32.Security.SC_HANDLE__},
    lpLockStatus: {"kind""Ptr","child":Windows.Win32.Security.QUERY_SERVICE_LOCK_STATUSA},
    cbBufSize: {"kind":"UInt32"},
    pcbBytesNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn QueryServiceLockStatusW(
    hSCManager: {"kind""Ptr","child":Windows.Win32.Security.SC_HANDLE__},
    lpLockStatus: {"kind""Ptr","child":Windows.Win32.Security.QUERY_SERVICE_LOCK_STATUSW},
    cbBufSize: {"kind":"UInt32"},
    pcbBytesNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn QueryServiceObjectSecurity(
    hService: {"kind""Ptr","child":Windows.Win32.Security.SC_HANDLE__},
    dwSecurityInformation: {"kind":"UInt32"},
    lpSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    cbBufSize: {"kind":"UInt32"},
    pcbBytesNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn QueryServiceStatus(
    hService: {"kind""Ptr","child":Windows.Win32.Security.SC_HANDLE__},
    lpServiceStatus: {"kind""Ptr","child":Windows.Win32.Security.SERVICE_STATUS},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn QueryServiceStatusEx(
    hService: {"kind""Ptr","child":Windows.Win32.Security.SC_HANDLE__},
    InfoLevel: Windows.Win32.Security.SC_STATUS_TYPE,
    lpBuffer: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBufSize: {"kind":"UInt32"},
    pcbBytesNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn RegisterServiceCtrlHandlerA(
    lpServiceName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpHandlerProc: Windows.Win32.Security.LPHANDLER_FUNCTION,

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn RegisterServiceCtrlHandlerW(
    lpServiceName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpHandlerProc: Windows.Win32.Security.LPHANDLER_FUNCTION,

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn RegisterServiceCtrlHandlerExA(
    lpServiceName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpHandlerProc: Windows.Win32.Security.LPHANDLER_FUNCTION_EX,
    lpContext: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn RegisterServiceCtrlHandlerExW(
    lpServiceName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpHandlerProc: Windows.Win32.Security.LPHANDLER_FUNCTION_EX,
    lpContext: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SetServiceObjectSecurity(
    hService: {"kind""Ptr","child":Windows.Win32.Security.SC_HANDLE__},
    dwSecurityInformation: {"kind":"UInt32"},
    lpSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SetServiceStatus(
    hServiceStatus: {"kind""Ptr","child":Windows.Win32.Security.SERVICE_STATUS_HANDLE__},
    lpServiceStatus: {"kind""Ptr","child":Windows.Win32.Security.SERVICE_STATUS},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn StartServiceCtrlDispatcherA(
    lpServiceStartTable: {"kind""Ptr","child":Windows.Win32.Security.SERVICE_TABLE_ENTRYA},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn StartServiceCtrlDispatcherW(
    lpServiceStartTable: {"kind""Ptr","child":Windows.Win32.Security.SERVICE_TABLE_ENTRYW},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn StartServiceA(
    hService: {"kind""Ptr","child":Windows.Win32.Security.SC_HANDLE__},
    dwNumServiceArgs: {"kind":"UInt32"},
    lpServiceArgVectors: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn StartServiceW(
    hService: {"kind""Ptr","child":Windows.Win32.Security.SC_HANDLE__},
    dwNumServiceArgs: {"kind":"UInt32"},
    lpServiceArgVectors: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn UnlockServiceDatabase(
    ScLock: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn NotifyServiceStatusChangeA(
    hService: {"kind""Ptr","child":Windows.Win32.Security.SC_HANDLE__},
    dwNotifyMask: {"kind":"UInt32"},
    pNotifyBuffer: {"kind""Ptr","child":Windows.Win32.Security.SERVICE_NOTIFY_2A},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn NotifyServiceStatusChangeW(
    hService: {"kind""Ptr","child":Windows.Win32.Security.SC_HANDLE__},
    dwNotifyMask: {"kind":"UInt32"},
    pNotifyBuffer: {"kind""Ptr","child":Windows.Win32.Security.SERVICE_NOTIFY_2W},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ControlServiceExA(
    hService: {"kind""Ptr","child":Windows.Win32.Security.SC_HANDLE__},
    dwControl: {"kind":"UInt32"},
    dwInfoLevel: {"kind":"UInt32"},
    pControlParams: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ControlServiceExW(
    hService: {"kind""Ptr","child":Windows.Win32.Security.SC_HANDLE__},
    dwControl: {"kind":"UInt32"},
    dwInfoLevel: {"kind":"UInt32"},
    pControlParams: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn QueryServiceDynamicInformation(
    hServiceStatus: {"kind""Ptr","child":Windows.Win32.Security.SERVICE_STATUS_HANDLE__},
    dwInfoLevel: {"kind":"UInt32"},
    ppDynamicInfo: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn WaitServiceState(
    hService: {"kind""Ptr","child":Windows.Win32.Security.SC_HANDLE__},
    dwNotify: {"kind":"UInt32"},
    dwTimeout: {"kind":"UInt32"},
    hCancelEvent: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-service-core-l1-1-3" fn GetServiceRegistryStateKey(
    ServiceStatusHandle: {"kind""Ptr","child":Windows.Win32.Security.SERVICE_STATUS_HANDLE__},
    StateType: Windows.Win32.Security.SERVICE_REGISTRY_STATE_TYPE,
    AccessMask: {"kind":"UInt32"},
    ServiceStateKey: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HKEY},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-service-core-l1-1-4" fn GetServiceDirectory(
    hServiceStatus: {"kind""Ptr","child":Windows.Win32.Security.SERVICE_STATUS_HANDLE__},
    eDirectoryType: Windows.Win32.Security.SERVICE_DIRECTORY_TYPE,
    lpPathBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchPathBufferLength: {"kind":"UInt32"},
    lpcchRequiredBufferLength: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn LsaRegisterLogonProcess(
    LogonProcessName: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.STRING},
    LsaHandle: {"kind""Ptr","child":Windows.Win32.Security.LsaHandle},
    SecurityMode: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn LsaLogonUser(
    LsaHandle: Windows.Win32.SystemServices.HANDLE,
    OriginName: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.STRING},
    LogonType: Windows.Win32.Security.SECURITY_LOGON_TYPE,
    AuthenticationPackage: {"kind":"UInt32"},
    AuthenticationInformation: {"kind""Ptr","child":{"kind":"Void"}},
    AuthenticationInformationLength: {"kind":"UInt32"},
    LocalGroups: {"kind""Ptr","child":Windows.Win32.Security.TOKEN_GROUPS},
    SourceContext: {"kind""Ptr","child":Windows.Win32.Security.TOKEN_SOURCE},
    ProfileBuffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    ProfileBufferLength: {"kind""Ptr","child":{"kind":"UInt32"}},
    LogonId: {"kind""Ptr","child":Windows.Win32.Kernel.LUID},
    Token: {"kind""Ptr","child":{"kind":"IntPtr"}},
    Quotas: {"kind""Ptr","child":Windows.Win32.Security.QUOTA_LIMITS},
    SubStatus: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn LsaLookupAuthenticationPackage(
    LsaHandle: Windows.Win32.SystemServices.HANDLE,
    PackageName: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.STRING},
    AuthenticationPackage: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn LsaFreeReturnBuffer(
    Buffer: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn LsaCallAuthenticationPackage(
    LsaHandle: Windows.Win32.SystemServices.HANDLE,
    AuthenticationPackage: {"kind":"UInt32"},
    ProtocolSubmitBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    SubmitBufferLength: {"kind":"UInt32"},
    ProtocolReturnBuffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    ReturnBufferLength: {"kind""Ptr","child":{"kind":"UInt32"}},
    ProtocolStatus: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn LsaDeregisterLogonProcess(
    LsaHandle: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn LsaConnectUntrusted(
    LsaHandle: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaFreeMemory(
    Buffer: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaClose(
    ObjectHandle: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn LsaEnumerateLogonSessions(
    LogonSessionCount: {"kind""Ptr","child":{"kind":"UInt32"}},
    LogonSessionList: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Kernel.LUID}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn LsaGetLogonSessionData(
    LogonId: {"kind""Ptr","child":Windows.Win32.Kernel.LUID},
    ppLogonSessionData: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.SECURITY_LOGON_SESSION_DATA}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaOpenPolicy(
    SystemName: {"kind""Ptr","child":Windows.Win32.Security.UNICODE_STRING},
    ObjectAttributes: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.OBJECT_ATTRIBUTES},
    DesiredAccess: {"kind":"UInt32"},
    PolicyHandle: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaSetCAPs(
    CAPDNs: {"kind""Ptr","child":Windows.Win32.Security.UNICODE_STRING},
    CAPDNCount: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaGetAppliedCAPIDs(
    SystemName: {"kind""Ptr","child":Windows.Win32.Security.UNICODE_STRING},
    CAPIDs: {"kind""Ptr","child":{"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}}},
    CAPIDCount: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaQueryCAPs(
    CAPIDs: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    CAPIDCount: {"kind":"UInt32"},
    CAPs: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CENTRAL_ACCESS_POLICY}},
    CAPCount: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaQueryInformationPolicy(
    PolicyHandle: {"kind""Ptr","child":{"kind":"Void"}},
    InformationClass: Windows.Win32.Security.POLICY_INFORMATION_CLASS,
    Buffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaSetInformationPolicy(
    PolicyHandle: {"kind""Ptr","child":{"kind":"Void"}},
    InformationClass: Windows.Win32.Security.POLICY_INFORMATION_CLASS,
    Buffer: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaQueryDomainInformationPolicy(
    PolicyHandle: {"kind""Ptr","child":{"kind":"Void"}},
    InformationClass: Windows.Win32.Security.POLICY_DOMAIN_INFORMATION_CLASS,
    Buffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaSetDomainInformationPolicy(
    PolicyHandle: {"kind""Ptr","child":{"kind":"Void"}},
    InformationClass: Windows.Win32.Security.POLICY_DOMAIN_INFORMATION_CLASS,
    Buffer: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn LsaRegisterPolicyChangeNotification(
    InformationClass: Windows.Win32.Security.POLICY_NOTIFICATION_INFORMATION_CLASS,
    NotificationEventHandle: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn LsaUnregisterPolicyChangeNotification(
    InformationClass: Windows.Win32.Security.POLICY_NOTIFICATION_INFORMATION_CLASS,
    NotificationEventHandle: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaEnumerateTrustedDomains(
    PolicyHandle: {"kind""Ptr","child":{"kind":"Void"}},
    EnumerationContext: {"kind""Ptr","child":{"kind":"UInt32"}},
    Buffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    PreferedMaximumLength: {"kind":"UInt32"},
    CountReturned: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaLookupNames(
    PolicyHandle: {"kind""Ptr","child":{"kind":"Void"}},
    Count: {"kind":"UInt32"},
    Names: {"kind""Ptr","child":Windows.Win32.Security.UNICODE_STRING},
    ReferencedDomains: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.LSA_REFERENCED_DOMAIN_LIST}},
    Sids: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.LSA_TRANSLATED_SID}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaLookupNames2(
    PolicyHandle: {"kind""Ptr","child":{"kind":"Void"}},
    Flags: {"kind":"UInt32"},
    Count: {"kind":"UInt32"},
    Names: {"kind""Ptr","child":Windows.Win32.Security.UNICODE_STRING},
    ReferencedDomains: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.LSA_REFERENCED_DOMAIN_LIST}},
    Sids: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.LSA_TRANSLATED_SID2}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaLookupSids(
    PolicyHandle: {"kind""Ptr","child":{"kind":"Void"}},
    Count: {"kind":"UInt32"},
    Sids: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    ReferencedDomains: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.LSA_REFERENCED_DOMAIN_LIST}},
    Names: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.LSA_TRANSLATED_NAME}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaLookupSids2(
    PolicyHandle: {"kind""Ptr","child":{"kind":"Void"}},
    LookupOptions: {"kind":"UInt32"},
    Count: {"kind":"UInt32"},
    Sids: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    ReferencedDomains: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.LSA_REFERENCED_DOMAIN_LIST}},
    Names: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.LSA_TRANSLATED_NAME}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaEnumerateAccountsWithUserRight(
    PolicyHandle: {"kind""Ptr","child":{"kind":"Void"}},
    UserRight: {"kind""Ptr","child":Windows.Win32.Security.UNICODE_STRING},
    Buffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    CountReturned: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaEnumerateAccountRights(
    PolicyHandle: {"kind""Ptr","child":{"kind":"Void"}},
    AccountSid: {"kind""Ptr","child":{"kind":"Void"}},
    UserRights: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.UNICODE_STRING}},
    CountOfRights: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaAddAccountRights(
    PolicyHandle: {"kind""Ptr","child":{"kind":"Void"}},
    AccountSid: {"kind""Ptr","child":{"kind":"Void"}},
    UserRights: {"kind""Ptr","child":Windows.Win32.Security.UNICODE_STRING},
    CountOfRights: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaRemoveAccountRights(
    PolicyHandle: {"kind""Ptr","child":{"kind":"Void"}},
    AccountSid: {"kind""Ptr","child":{"kind":"Void"}},
    AllRights: {"kind":"Byte"},
    UserRights: {"kind""Ptr","child":Windows.Win32.Security.UNICODE_STRING},
    CountOfRights: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaOpenTrustedDomainByName(
    PolicyHandle: {"kind""Ptr","child":{"kind":"Void"}},
    TrustedDomainName: {"kind""Ptr","child":Windows.Win32.Security.UNICODE_STRING},
    DesiredAccess: {"kind":"UInt32"},
    TrustedDomainHandle: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaQueryTrustedDomainInfo(
    PolicyHandle: {"kind""Ptr","child":{"kind":"Void"}},
    TrustedDomainSid: {"kind""Ptr","child":{"kind":"Void"}},
    InformationClass: Windows.Win32.Security.TRUSTED_INFORMATION_CLASS,
    Buffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaSetTrustedDomainInformation(
    PolicyHandle: {"kind""Ptr","child":{"kind":"Void"}},
    TrustedDomainSid: {"kind""Ptr","child":{"kind":"Void"}},
    InformationClass: Windows.Win32.Security.TRUSTED_INFORMATION_CLASS,
    Buffer: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaDeleteTrustedDomain(
    PolicyHandle: {"kind""Ptr","child":{"kind":"Void"}},
    TrustedDomainSid: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaQueryTrustedDomainInfoByName(
    PolicyHandle: {"kind""Ptr","child":{"kind":"Void"}},
    TrustedDomainName: {"kind""Ptr","child":Windows.Win32.Security.UNICODE_STRING},
    InformationClass: Windows.Win32.Security.TRUSTED_INFORMATION_CLASS,
    Buffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaSetTrustedDomainInfoByName(
    PolicyHandle: {"kind""Ptr","child":{"kind":"Void"}},
    TrustedDomainName: {"kind""Ptr","child":Windows.Win32.Security.UNICODE_STRING},
    InformationClass: Windows.Win32.Security.TRUSTED_INFORMATION_CLASS,
    Buffer: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaEnumerateTrustedDomainsEx(
    PolicyHandle: {"kind""Ptr","child":{"kind":"Void"}},
    EnumerationContext: {"kind""Ptr","child":{"kind":"UInt32"}},
    Buffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    PreferedMaximumLength: {"kind":"UInt32"},
    CountReturned: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaCreateTrustedDomainEx(
    PolicyHandle: {"kind""Ptr","child":{"kind":"Void"}},
    TrustedDomainInformation: {"kind""Ptr","child":Windows.Win32.Security.TRUSTED_DOMAIN_INFORMATION_EX},
    AuthenticationInformation: {"kind""Ptr","child":Windows.Win32.Security.TRUSTED_DOMAIN_AUTH_INFORMATION},
    DesiredAccess: {"kind":"UInt32"},
    TrustedDomainHandle: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaQueryForestTrustInformation(
    PolicyHandle: {"kind""Ptr","child":{"kind":"Void"}},
    TrustedDomainName: {"kind""Ptr","child":Windows.Win32.Security.UNICODE_STRING},
    ForestTrustInfo: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.LSA_FOREST_TRUST_INFORMATION}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaSetForestTrustInformation(
    PolicyHandle: {"kind""Ptr","child":{"kind":"Void"}},
    TrustedDomainName: {"kind""Ptr","child":Windows.Win32.Security.UNICODE_STRING},
    ForestTrustInfo: {"kind""Ptr","child":Windows.Win32.Security.LSA_FOREST_TRUST_INFORMATION},
    CheckOnly: {"kind":"Byte"},
    CollisionInfo: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.LSA_FOREST_TRUST_COLLISION_INFORMATION}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaStorePrivateData(
    PolicyHandle: {"kind""Ptr","child":{"kind":"Void"}},
    KeyName: {"kind""Ptr","child":Windows.Win32.Security.UNICODE_STRING},
    PrivateData: {"kind""Ptr","child":Windows.Win32.Security.UNICODE_STRING},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaRetrievePrivateData(
    PolicyHandle: {"kind""Ptr","child":{"kind":"Void"}},
    KeyName: {"kind""Ptr","child":Windows.Win32.Security.UNICODE_STRING},
    PrivateData: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.UNICODE_STRING}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaNtStatusToWinError(
    Status: Windows.Win32.SystemServices.NTSTATUS,

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn SystemFunction036(
    RandomBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    RandomBufferLength: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn SystemFunction040(
    Memory: {"kind""Ptr","child":{"kind":"Void"}},
    MemorySize: {"kind":"UInt32"},
    OptionFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn SystemFunction041(
    Memory: {"kind""Ptr","child":{"kind":"Void"}},
    MemorySize: {"kind":"UInt32"},
    OptionFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditSetSystemPolicy(
    pAuditPolicy: {"kind""Ptr","child":Windows.Win32.Security.AUDIT_POLICY_INFORMATION},
    dwPolicyCount: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditSetPerUserPolicy(
    pSid: {"kind""Ptr","child":{"kind":"Void"}},
    pAuditPolicy: {"kind""Ptr","child":Windows.Win32.Security.AUDIT_POLICY_INFORMATION},
    dwPolicyCount: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditQuerySystemPolicy(
    pSubCategoryGuids: {"kind""Ptr","child":Guid},
    dwPolicyCount: {"kind":"UInt32"},
    ppAuditPolicy: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.AUDIT_POLICY_INFORMATION}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditQueryPerUserPolicy(
    pSid: {"kind""Ptr","child":{"kind":"Void"}},
    pSubCategoryGuids: {"kind""Ptr","child":Guid},
    dwPolicyCount: {"kind":"UInt32"},
    ppAuditPolicy: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.AUDIT_POLICY_INFORMATION}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditEnumeratePerUserPolicy(
    ppAuditSidArray: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.POLICY_AUDIT_SID_ARRAY}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditComputeEffectivePolicyBySid(
    pSid: {"kind""Ptr","child":{"kind":"Void"}},
    pSubCategoryGuids: {"kind""Ptr","child":Guid},
    dwPolicyCount: {"kind":"UInt32"},
    ppAuditPolicy: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.AUDIT_POLICY_INFORMATION}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditComputeEffectivePolicyByToken(
    hTokenHandle: Windows.Win32.SystemServices.HANDLE,
    pSubCategoryGuids: {"kind""Ptr","child":Guid},
    dwPolicyCount: {"kind":"UInt32"},
    ppAuditPolicy: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.AUDIT_POLICY_INFORMATION}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditEnumerateCategories(
    ppAuditCategoriesArray: {"kind""Ptr","child":{"kind""Ptr","child":Guid}},
    pdwCountReturned: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditEnumerateSubCategories(
    pAuditCategoryGuid: {"kind""Ptr","child":Guid},
    bRetrieveAllSubCategories: {"kind":"Byte"},
    ppAuditSubCategoriesArray: {"kind""Ptr","child":{"kind""Ptr","child":Guid}},
    pdwCountReturned: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditLookupCategoryNameW(
    pAuditCategoryGuid: {"kind""Ptr","child":Guid},
    ppszCategoryName: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditLookupCategoryNameA(
    pAuditCategoryGuid: {"kind""Ptr","child":Guid},
    ppszCategoryName: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditLookupSubCategoryNameW(
    pAuditSubCategoryGuid: {"kind""Ptr","child":Guid},
    ppszSubCategoryName: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditLookupSubCategoryNameA(
    pAuditSubCategoryGuid: {"kind""Ptr","child":Guid},
    ppszSubCategoryName: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditLookupCategoryIdFromCategoryGuid(
    pAuditCategoryGuid: {"kind""Ptr","child":Guid},
    pAuditCategoryId: {"kind""Ptr","child":Windows.Win32.Security.POLICY_AUDIT_EVENT_TYPE},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditLookupCategoryGuidFromCategoryId(
    AuditCategoryId: Windows.Win32.Security.POLICY_AUDIT_EVENT_TYPE,
    pAuditCategoryGuid: {"kind""Ptr","child":Guid},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditSetSecurity(
    SecurityInformation: {"kind":"UInt32"},
    pSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditQuerySecurity(
    SecurityInformation: {"kind":"UInt32"},
    ppSecurityDescriptor: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditSetGlobalSaclW(
    ObjectTypeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Acl: {"kind""Ptr","child":Windows.Win32.Security.ACL},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditSetGlobalSaclA(
    ObjectTypeName: {"kind""Ptr","child":{"kind":"SByte"}},
    Acl: {"kind""Ptr","child":Windows.Win32.Security.ACL},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditQueryGlobalSaclW(
    ObjectTypeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Acl: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.ACL}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditQueryGlobalSaclA(
    ObjectTypeName: {"kind""Ptr","child":{"kind":"SByte"}},
    Acl: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.ACL}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn AuditFree(
    Buffer: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn AcquireCredentialsHandleW(
    pszPrincipal: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszPackage: {"kind""Ptr","child":{"kind":"UInt16"}},
    fCredentialUse: {"kind":"UInt32"},
    pvLogonId: {"kind""Ptr","child":{"kind":"Void"}},
    pAuthData: {"kind""Ptr","child":{"kind":"Void"}},
    pGetKeyFn: Windows.Win32.Security.SEC_GET_KEY_FN,
    pvGetKeyArgument: {"kind""Ptr","child":{"kind":"Void"}},
    phCredential: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    ptsExpiry: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn AcquireCredentialsHandleA(
    pszPrincipal: {"kind""Ptr","child":{"kind":"SByte"}},
    pszPackage: {"kind""Ptr","child":{"kind":"SByte"}},
    fCredentialUse: {"kind":"UInt32"},
    pvLogonId: {"kind""Ptr","child":{"kind":"Void"}},
    pAuthData: {"kind""Ptr","child":{"kind":"Void"}},
    pGetKeyFn: Windows.Win32.Security.SEC_GET_KEY_FN,
    pvGetKeyArgument: {"kind""Ptr","child":{"kind":"Void"}},
    phCredential: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    ptsExpiry: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn FreeCredentialsHandle(
    phCredential: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn AddCredentialsW(
    hCredentials: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    pszPrincipal: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszPackage: {"kind""Ptr","child":{"kind":"UInt16"}},
    fCredentialUse: {"kind":"UInt32"},
    pAuthData: {"kind""Ptr","child":{"kind":"Void"}},
    pGetKeyFn: Windows.Win32.Security.SEC_GET_KEY_FN,
    pvGetKeyArgument: {"kind""Ptr","child":{"kind":"Void"}},
    ptsExpiry: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn AddCredentialsA(
    hCredentials: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    pszPrincipal: {"kind""Ptr","child":{"kind":"SByte"}},
    pszPackage: {"kind""Ptr","child":{"kind":"SByte"}},
    fCredentialUse: {"kind":"UInt32"},
    pAuthData: {"kind""Ptr","child":{"kind":"Void"}},
    pGetKeyFn: Windows.Win32.Security.SEC_GET_KEY_FN,
    pvGetKeyArgument: {"kind""Ptr","child":{"kind":"Void"}},
    ptsExpiry: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn ChangeAccountPasswordW(
    pszPackageName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszDomainName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszAccountName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszOldPassword: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszNewPassword: {"kind""Ptr","child":{"kind":"UInt16"}},
    bImpersonating: {"kind":"Byte"},
    dwReserved: {"kind":"UInt32"},
    pOutput: {"kind""Ptr","child":Windows.Win32.Security.SecBufferDesc},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn ChangeAccountPasswordA(
    pszPackageName: {"kind""Ptr","child":{"kind":"SByte"}},
    pszDomainName: {"kind""Ptr","child":{"kind":"SByte"}},
    pszAccountName: {"kind""Ptr","child":{"kind":"SByte"}},
    pszOldPassword: {"kind""Ptr","child":{"kind":"SByte"}},
    pszNewPassword: {"kind""Ptr","child":{"kind":"SByte"}},
    bImpersonating: {"kind":"Byte"},
    dwReserved: {"kind":"UInt32"},
    pOutput: {"kind""Ptr","child":Windows.Win32.Security.SecBufferDesc},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn InitializeSecurityContextW(
    phCredential: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    phContext: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    pszTargetName: {"kind""Ptr","child":{"kind":"UInt16"}},
    fContextReq: {"kind":"UInt32"},
    Reserved1: {"kind":"UInt32"},
    TargetDataRep: {"kind":"UInt32"},
    pInput: {"kind""Ptr","child":Windows.Win32.Security.SecBufferDesc},
    Reserved2: {"kind":"UInt32"},
    phNewContext: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    pOutput: {"kind""Ptr","child":Windows.Win32.Security.SecBufferDesc},
    pfContextAttr: {"kind""Ptr","child":{"kind":"UInt32"}},
    ptsExpiry: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn InitializeSecurityContextA(
    phCredential: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    phContext: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    pszTargetName: {"kind""Ptr","child":{"kind":"SByte"}},
    fContextReq: {"kind":"UInt32"},
    Reserved1: {"kind":"UInt32"},
    TargetDataRep: {"kind":"UInt32"},
    pInput: {"kind""Ptr","child":Windows.Win32.Security.SecBufferDesc},
    Reserved2: {"kind":"UInt32"},
    phNewContext: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    pOutput: {"kind""Ptr","child":Windows.Win32.Security.SecBufferDesc},
    pfContextAttr: {"kind""Ptr","child":{"kind":"UInt32"}},
    ptsExpiry: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn AcceptSecurityContext(
    phCredential: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    phContext: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    pInput: {"kind""Ptr","child":Windows.Win32.Security.SecBufferDesc},
    fContextReq: {"kind":"UInt32"},
    TargetDataRep: {"kind":"UInt32"},
    phNewContext: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    pOutput: {"kind""Ptr","child":Windows.Win32.Security.SecBufferDesc},
    pfContextAttr: {"kind""Ptr","child":{"kind":"UInt32"}},
    ptsExpiry: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn CompleteAuthToken(
    phContext: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    pToken: {"kind""Ptr","child":Windows.Win32.Security.SecBufferDesc},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn ImpersonateSecurityContext(
    phContext: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn RevertSecurityContext(
    phContext: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn QuerySecurityContextToken(
    phContext: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    Token: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn DeleteSecurityContext(
    phContext: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn ApplyControlToken(
    phContext: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    pInput: {"kind""Ptr","child":Windows.Win32.Security.SecBufferDesc},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn QueryContextAttributesW(
    phContext: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    ulAttribute: {"kind":"UInt32"},
    pBuffer: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn QueryContextAttributesExW(
    phContext: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    ulAttribute: {"kind":"UInt32"},
    pBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    cbBuffer: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn QueryContextAttributesA(
    phContext: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    ulAttribute: {"kind":"UInt32"},
    pBuffer: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn QueryContextAttributesExA(
    phContext: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    ulAttribute: {"kind":"UInt32"},
    pBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    cbBuffer: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SetContextAttributesW(
    phContext: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    ulAttribute: {"kind":"UInt32"},
    pBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    cbBuffer: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SetContextAttributesA(
    phContext: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    ulAttribute: {"kind":"UInt32"},
    pBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    cbBuffer: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn QueryCredentialsAttributesW(
    phCredential: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    ulAttribute: {"kind":"UInt32"},
    pBuffer: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn QueryCredentialsAttributesExW(
    phCredential: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    ulAttribute: {"kind":"UInt32"},
    pBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    cbBuffer: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn QueryCredentialsAttributesA(
    phCredential: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    ulAttribute: {"kind":"UInt32"},
    pBuffer: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn QueryCredentialsAttributesExA(
    phCredential: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    ulAttribute: {"kind":"UInt32"},
    pBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    cbBuffer: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SetCredentialsAttributesW(
    phCredential: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    ulAttribute: {"kind":"UInt32"},
    pBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    cbBuffer: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SetCredentialsAttributesA(
    phCredential: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    ulAttribute: {"kind":"UInt32"},
    pBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    cbBuffer: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn FreeContextBuffer(
    pvContextBuffer: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn MakeSignature(
    phContext: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    fQOP: {"kind":"UInt32"},
    pMessage: {"kind""Ptr","child":Windows.Win32.Security.SecBufferDesc},
    MessageSeqNo: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn VerifySignature(
    phContext: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    pMessage: {"kind""Ptr","child":Windows.Win32.Security.SecBufferDesc},
    MessageSeqNo: {"kind":"UInt32"},
    pfQOP: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn EncryptMessage(
    phContext: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    fQOP: {"kind":"UInt32"},
    pMessage: {"kind""Ptr","child":Windows.Win32.Security.SecBufferDesc},
    MessageSeqNo: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn DecryptMessage(
    phContext: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    pMessage: {"kind""Ptr","child":Windows.Win32.Security.SecBufferDesc},
    MessageSeqNo: {"kind":"UInt32"},
    pfQOP: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn EnumerateSecurityPackagesW(
    pcPackages: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppPackageInfo: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.SecPkgInfoW}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn EnumerateSecurityPackagesA(
    pcPackages: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppPackageInfo: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.SecPkgInfoA}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn QuerySecurityPackageInfoW(
    pszPackageName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppPackageInfo: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.SecPkgInfoW}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn QuerySecurityPackageInfoA(
    pszPackageName: {"kind""Ptr","child":{"kind":"SByte"}},
    ppPackageInfo: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.SecPkgInfoA}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn ExportSecurityContext(
    phContext: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    fFlags: {"kind":"UInt32"},
    pPackedContext: {"kind""Ptr","child":Windows.Win32.Security.SecBuffer},
    pToken: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn ImportSecurityContextW(
    pszPackage: {"kind""Ptr","child":{"kind":"UInt16"}},
    pPackedContext: {"kind""Ptr","child":Windows.Win32.Security.SecBuffer},
    Token: {"kind""Ptr","child":{"kind":"Void"}},
    phContext: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn ImportSecurityContextA(
    pszPackage: {"kind""Ptr","child":{"kind":"SByte"}},
    pPackedContext: {"kind""Ptr","child":Windows.Win32.Security.SecBuffer},
    Token: {"kind""Ptr","child":{"kind":"Void"}},
    phContext: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn InitSecurityInterfaceA(

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn InitSecurityInterfaceW(

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SaslEnumerateProfilesA(
    ProfileList: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},
    ProfileCount: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SaslEnumerateProfilesW(
    ProfileList: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    ProfileCount: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SaslGetProfilePackageA(
    ProfileName: {"kind""Ptr","child":{"kind":"SByte"}},
    PackageInfo: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.SecPkgInfoA}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SaslGetProfilePackageW(
    ProfileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    PackageInfo: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.SecPkgInfoW}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SaslIdentifyPackageA(
    pInput: {"kind""Ptr","child":Windows.Win32.Security.SecBufferDesc},
    PackageInfo: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.SecPkgInfoA}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SaslIdentifyPackageW(
    pInput: {"kind""Ptr","child":Windows.Win32.Security.SecBufferDesc},
    PackageInfo: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.SecPkgInfoW}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SaslInitializeSecurityContextW(
    phCredential: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    phContext: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    pszTargetName: {"kind""Ptr","child":{"kind":"UInt16"}},
    fContextReq: {"kind":"UInt32"},
    Reserved1: {"kind":"UInt32"},
    TargetDataRep: {"kind":"UInt32"},
    pInput: {"kind""Ptr","child":Windows.Win32.Security.SecBufferDesc},
    Reserved2: {"kind":"UInt32"},
    phNewContext: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    pOutput: {"kind""Ptr","child":Windows.Win32.Security.SecBufferDesc},
    pfContextAttr: {"kind""Ptr","child":{"kind":"UInt32"}},
    ptsExpiry: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SaslInitializeSecurityContextA(
    phCredential: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    phContext: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    pszTargetName: {"kind""Ptr","child":{"kind":"SByte"}},
    fContextReq: {"kind":"UInt32"},
    Reserved1: {"kind":"UInt32"},
    TargetDataRep: {"kind":"UInt32"},
    pInput: {"kind""Ptr","child":Windows.Win32.Security.SecBufferDesc},
    Reserved2: {"kind":"UInt32"},
    phNewContext: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    pOutput: {"kind""Ptr","child":Windows.Win32.Security.SecBufferDesc},
    pfContextAttr: {"kind""Ptr","child":{"kind":"UInt32"}},
    ptsExpiry: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SaslAcceptSecurityContext(
    phCredential: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    phContext: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    pInput: {"kind""Ptr","child":Windows.Win32.Security.SecBufferDesc},
    fContextReq: {"kind":"UInt32"},
    TargetDataRep: {"kind":"UInt32"},
    phNewContext: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    pOutput: {"kind""Ptr","child":Windows.Win32.Security.SecBufferDesc},
    pfContextAttr: {"kind""Ptr","child":{"kind":"UInt32"}},
    ptsExpiry: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SaslSetContextOption(
    ContextHandle: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    Option: {"kind":"UInt32"},
    Value: {"kind""Ptr","child":{"kind":"Void"}},
    Size: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SaslGetContextOption(
    ContextHandle: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    Option: {"kind":"UInt32"},
    Value: {"kind""Ptr","child":{"kind":"Void"}},
    Size: {"kind":"UInt32"},
    Needed: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "credui" fn SspiPromptForCredentialsW(
    pszTargetName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pUiInfo: {"kind""Ptr","child":{"kind":"Void"}},
    dwAuthError: {"kind":"UInt32"},
    pszPackage: {"kind""Ptr","child":{"kind":"UInt16"}},
    pInputAuthIdentity: {"kind""Ptr","child":{"kind":"Void"}},
    ppAuthIdentity: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pfSave: {"kind""Ptr","child":{"kind":"Int32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "credui" fn SspiPromptForCredentialsA(
    pszTargetName: {"kind""Ptr","child":{"kind":"SByte"}},
    pUiInfo: {"kind""Ptr","child":{"kind":"Void"}},
    dwAuthError: {"kind":"UInt32"},
    pszPackage: {"kind""Ptr","child":{"kind":"SByte"}},
    pInputAuthIdentity: {"kind""Ptr","child":{"kind":"Void"}},
    ppAuthIdentity: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pfSave: {"kind""Ptr","child":{"kind":"Int32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiPrepareForCredRead(
    AuthIdentity: {"kind""Ptr","child":{"kind":"Void"}},
    pszTargetName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pCredmanCredentialType: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppszCredmanTargetName: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiPrepareForCredWrite(
    AuthIdentity: {"kind""Ptr","child":{"kind":"Void"}},
    pszTargetName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pCredmanCredentialType: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppszCredmanTargetName: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    ppszCredmanUserName: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    ppCredentialBlob: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    pCredentialBlobSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiEncryptAuthIdentity(
    AuthData: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiEncryptAuthIdentityEx(
    Options: {"kind":"UInt32"},
    AuthData: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiDecryptAuthIdentity(
    EncryptedAuthData: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiDecryptAuthIdentityEx(
    Options: {"kind":"UInt32"},
    EncryptedAuthData: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiIsAuthIdentityEncrypted(
    EncryptedAuthData: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiEncodeAuthIdentityAsStrings(
    pAuthIdentity: {"kind""Ptr","child":{"kind":"Void"}},
    ppszUserName: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    ppszDomainName: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    ppszPackedCredentialsString: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiValidateAuthIdentity(
    AuthData: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiCopyAuthIdentity(
    AuthData: {"kind""Ptr","child":{"kind":"Void"}},
    AuthDataCopy: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiFreeAuthIdentity(
    AuthData: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiZeroAuthIdentity(
    AuthData: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiLocalFree(
    DataBuffer: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiEncodeStringsAsAuthIdentity(
    pszUserName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszDomainName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszPackedCredentialsString: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppAuthIdentity: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiCompareAuthIdentities(
    AuthIdentity1: {"kind""Ptr","child":{"kind":"Void"}},
    AuthIdentity2: {"kind""Ptr","child":{"kind":"Void"}},
    SameSuppliedUser: {"kind""Ptr","child":{"kind":"Byte"}},
    SameSuppliedIdentity: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiMarshalAuthIdentity(
    AuthIdentity: {"kind""Ptr","child":{"kind":"Void"}},
    AuthIdentityLength: {"kind""Ptr","child":{"kind":"UInt32"}},
    AuthIdentityByteArray: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiUnmarshalAuthIdentity(
    AuthIdentityLength: {"kind":"UInt32"},
    AuthIdentityByteArray: {"kind""Ptr","child":{"kind":"SByte"}},
    ppAuthIdentity: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "credui" fn SspiIsPromptingNeeded(
    ErrorOrNtStatus: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiGetTargetHostName(
    pszTargetName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszHostName: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiExcludePackage(
    AuthIdentity: {"kind""Ptr","child":{"kind":"Void"}},
    pszPackageName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppNewAuthIdentity: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn AddSecurityPackageA(
    pszPackageName: {"kind""Ptr","child":{"kind":"SByte"}},
    pOptions: {"kind""Ptr","child":Windows.Win32.Security.SECURITY_PACKAGE_OPTIONS},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn AddSecurityPackageW(
    pszPackageName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pOptions: {"kind""Ptr","child":Windows.Win32.Security.SECURITY_PACKAGE_OPTIONS},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn DeleteSecurityPackageA(
    pszPackageName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn DeleteSecurityPackageW(
    pszPackageName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredWriteW(
    Credential: {"kind""Ptr","child":Windows.Win32.Security.CREDENTIALW},
    Flags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredWriteA(
    Credential: {"kind""Ptr","child":Windows.Win32.Security.CREDENTIALA},
    Flags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredReadW(
    TargetName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Type: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    Credential: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CREDENTIALW}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredReadA(
    TargetName: {"kind""Ptr","child":{"kind":"SByte"}},
    Type: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    Credential: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CREDENTIALA}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredEnumerateW(
    Filter: {"kind""Ptr","child":{"kind":"UInt16"}},
    Flags: {"kind":"UInt32"},
    Count: {"kind""Ptr","child":{"kind":"UInt32"}},
    Credential: {"kind""Ptr","child":{"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CREDENTIALW}}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredEnumerateA(
    Filter: {"kind""Ptr","child":{"kind":"SByte"}},
    Flags: {"kind":"UInt32"},
    Count: {"kind""Ptr","child":{"kind":"UInt32"}},
    Credential: {"kind""Ptr","child":{"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CREDENTIALA}}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredWriteDomainCredentialsW(
    TargetInfo: {"kind""Ptr","child":Windows.Win32.Security.CREDENTIAL_TARGET_INFORMATIONW},
    Credential: {"kind""Ptr","child":Windows.Win32.Security.CREDENTIALW},
    Flags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredWriteDomainCredentialsA(
    TargetInfo: {"kind""Ptr","child":Windows.Win32.Security.CREDENTIAL_TARGET_INFORMATIONA},
    Credential: {"kind""Ptr","child":Windows.Win32.Security.CREDENTIALA},
    Flags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredReadDomainCredentialsW(
    TargetInfo: {"kind""Ptr","child":Windows.Win32.Security.CREDENTIAL_TARGET_INFORMATIONW},
    Flags: {"kind":"UInt32"},
    Count: {"kind""Ptr","child":{"kind":"UInt32"}},
    Credential: {"kind""Ptr","child":{"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CREDENTIALW}}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredReadDomainCredentialsA(
    TargetInfo: {"kind""Ptr","child":Windows.Win32.Security.CREDENTIAL_TARGET_INFORMATIONA},
    Flags: {"kind":"UInt32"},
    Count: {"kind""Ptr","child":{"kind":"UInt32"}},
    Credential: {"kind""Ptr","child":{"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CREDENTIALA}}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredDeleteW(
    TargetName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Type: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredDeleteA(
    TargetName: {"kind""Ptr","child":{"kind":"SByte"}},
    Type: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredRenameW(
    OldTargetName: {"kind""Ptr","child":{"kind":"UInt16"}},
    NewTargetName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Type: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredRenameA(
    OldTargetName: {"kind""Ptr","child":{"kind":"SByte"}},
    NewTargetName: {"kind""Ptr","child":{"kind":"SByte"}},
    Type: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredGetTargetInfoW(
    TargetName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Flags: {"kind":"UInt32"},
    TargetInfo: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CREDENTIAL_TARGET_INFORMATIONW}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredGetTargetInfoA(
    TargetName: {"kind""Ptr","child":{"kind":"SByte"}},
    Flags: {"kind":"UInt32"},
    TargetInfo: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CREDENTIAL_TARGET_INFORMATIONA}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredMarshalCredentialW(
    CredType: Windows.Win32.Security.CRED_MARSHAL_TYPE,
    Credential: {"kind""Ptr","child":{"kind":"Void"}},
    MarshaledCredential: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredMarshalCredentialA(
    CredType: Windows.Win32.Security.CRED_MARSHAL_TYPE,
    Credential: {"kind""Ptr","child":{"kind":"Void"}},
    MarshaledCredential: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredUnmarshalCredentialW(
    MarshaledCredential: {"kind""Ptr","child":{"kind":"UInt16"}},
    CredType: {"kind""Ptr","child":Windows.Win32.Security.CRED_MARSHAL_TYPE},
    Credential: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredUnmarshalCredentialA(
    MarshaledCredential: {"kind""Ptr","child":{"kind":"SByte"}},
    CredType: {"kind""Ptr","child":Windows.Win32.Security.CRED_MARSHAL_TYPE},
    Credential: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn CredIsMarshaledCredentialW(
    MarshaledCredential: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn CredIsMarshaledCredentialA(
    MarshaledCredential: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "credui" fn CredUnPackAuthenticationBufferW(
    dwFlags: {"kind":"UInt32"},
    pAuthBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    cbAuthBuffer: {"kind":"UInt32"},
    pszUserName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchMaxUserName: {"kind""Ptr","child":{"kind":"UInt32"}},
    pszDomainName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchMaxDomainName: {"kind""Ptr","child":{"kind":"UInt32"}},
    pszPassword: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchMaxPassword: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "credui" fn CredUnPackAuthenticationBufferA(
    dwFlags: {"kind":"UInt32"},
    pAuthBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    cbAuthBuffer: {"kind":"UInt32"},
    pszUserName: {"kind""Ptr","child":{"kind":"SByte"}},
    pcchlMaxUserName: {"kind""Ptr","child":{"kind":"UInt32"}},
    pszDomainName: {"kind""Ptr","child":{"kind":"SByte"}},
    pcchMaxDomainName: {"kind""Ptr","child":{"kind":"UInt32"}},
    pszPassword: {"kind""Ptr","child":{"kind":"SByte"}},
    pcchMaxPassword: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "credui" fn CredPackAuthenticationBufferW(
    dwFlags: {"kind":"UInt32"},
    pszUserName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszPassword: {"kind""Ptr","child":{"kind":"UInt16"}},
    pPackedCredentials: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbPackedCredentials: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "credui" fn CredPackAuthenticationBufferA(
    dwFlags: {"kind":"UInt32"},
    pszUserName: {"kind""Ptr","child":{"kind":"SByte"}},
    pszPassword: {"kind""Ptr","child":{"kind":"SByte"}},
    pPackedCredentials: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbPackedCredentials: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredProtectW(
    fAsSelf: Windows.Win32.SystemServices.BOOL,
    pszCredentials: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchCredentials: {"kind":"UInt32"},
    pszProtectedCredentials: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchMaxChars: {"kind""Ptr","child":{"kind":"UInt32"}},
    ProtectionType: {"kind""Ptr","child":Windows.Win32.Security.CRED_PROTECTION_TYPE},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredProtectA(
    fAsSelf: Windows.Win32.SystemServices.BOOL,
    pszCredentials: {"kind""Ptr","child":{"kind":"SByte"}},
    cchCredentials: {"kind":"UInt32"},
    pszProtectedCredentials: {"kind""Ptr","child":{"kind":"SByte"}},
    pcchMaxChars: {"kind""Ptr","child":{"kind":"UInt32"}},
    ProtectionType: {"kind""Ptr","child":Windows.Win32.Security.CRED_PROTECTION_TYPE},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredUnprotectW(
    fAsSelf: Windows.Win32.SystemServices.BOOL,
    pszProtectedCredentials: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchProtectedCredentials: {"kind":"UInt32"},
    pszCredentials: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchMaxChars: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredUnprotectA(
    fAsSelf: Windows.Win32.SystemServices.BOOL,
    pszProtectedCredentials: {"kind""Ptr","child":{"kind":"SByte"}},
    cchProtectedCredentials: {"kind":"UInt32"},
    pszCredentials: {"kind""Ptr","child":{"kind":"SByte"}},
    pcchMaxChars: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredIsProtectedW(
    pszProtectedCredentials: {"kind""Ptr","child":{"kind":"UInt16"}},
    pProtectionType: {"kind""Ptr","child":Windows.Win32.Security.CRED_PROTECTION_TYPE},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredIsProtectedA(
    pszProtectedCredentials: {"kind""Ptr","child":{"kind":"SByte"}},
    pProtectionType: {"kind""Ptr","child":Windows.Win32.Security.CRED_PROTECTION_TYPE},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredFindBestCredentialW(
    TargetName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Type: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    Credential: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CREDENTIALW}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredFindBestCredentialA(
    TargetName: {"kind""Ptr","child":{"kind":"SByte"}},
    Type: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    Credential: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CREDENTIALA}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredGetSessionTypes(
    MaximumPersistCount: {"kind":"UInt32"},
    MaximumPersist: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn CredFree(
    Buffer: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "credui" fn CredUIPromptForCredentialsW(
    pUiInfo: {"kind""Ptr","child":Windows.Win32.Security.CREDUI_INFOW},
    pszTargetName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pContext: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    dwAuthError: {"kind":"UInt32"},
    pszUserName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ulUserNameBufferSize: {"kind":"UInt32"},
    pszPassword: {"kind""Ptr","child":{"kind":"UInt16"}},
    ulPasswordBufferSize: {"kind":"UInt32"},
    save: {"kind""Ptr","child":{"kind":"Int32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "credui" fn CredUIPromptForCredentialsA(
    pUiInfo: {"kind""Ptr","child":Windows.Win32.Security.CREDUI_INFOA},
    pszTargetName: {"kind""Ptr","child":{"kind":"SByte"}},
    pContext: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    dwAuthError: {"kind":"UInt32"},
    pszUserName: {"kind""Ptr","child":{"kind":"SByte"}},
    ulUserNameBufferSize: {"kind":"UInt32"},
    pszPassword: {"kind""Ptr","child":{"kind":"SByte"}},
    ulPasswordBufferSize: {"kind":"UInt32"},
    save: {"kind""Ptr","child":{"kind":"Int32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "credui" fn CredUIPromptForWindowsCredentialsW(
    pUiInfo: {"kind""Ptr","child":Windows.Win32.Security.CREDUI_INFOW},
    dwAuthError: {"kind":"UInt32"},
    pulAuthPackage: {"kind""Ptr","child":{"kind":"UInt32"}},
    pvInAuthBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    ulInAuthBufferSize: {"kind":"UInt32"},
    ppvOutAuthBuffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pulOutAuthBufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    pfSave: {"kind""Ptr","child":{"kind":"Int32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "credui" fn CredUIPromptForWindowsCredentialsA(
    pUiInfo: {"kind""Ptr","child":Windows.Win32.Security.CREDUI_INFOA},
    dwAuthError: {"kind":"UInt32"},
    pulAuthPackage: {"kind""Ptr","child":{"kind":"UInt32"}},
    pvInAuthBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    ulInAuthBufferSize: {"kind":"UInt32"},
    ppvOutAuthBuffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pulOutAuthBufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    pfSave: {"kind""Ptr","child":{"kind":"Int32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "credui" fn CredUIParseUserNameW(
    UserName: {"kind""Ptr","child":{"kind":"UInt16"}},
    user: {"kind""Ptr","child":{"kind":"UInt16"}},
    userBufferSize: {"kind":"UInt32"},
    domain: {"kind""Ptr","child":{"kind":"UInt16"}},
    domainBufferSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "credui" fn CredUIParseUserNameA(
    userName: {"kind""Ptr","child":{"kind":"SByte"}},
    user: {"kind""Ptr","child":{"kind":"SByte"}},
    userBufferSize: {"kind":"UInt32"},
    domain: {"kind""Ptr","child":{"kind":"SByte"}},
    domainBufferSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "credui" fn CredUICmdLinePromptForCredentialsW(
    pszTargetName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pContext: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    dwAuthError: {"kind":"UInt32"},
    UserName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ulUserBufferSize: {"kind":"UInt32"},
    pszPassword: {"kind""Ptr","child":{"kind":"UInt16"}},
    ulPasswordBufferSize: {"kind":"UInt32"},
    pfSave: {"kind""Ptr","child":{"kind":"Int32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "credui" fn CredUICmdLinePromptForCredentialsA(
    pszTargetName: {"kind""Ptr","child":{"kind":"SByte"}},
    pContext: {"kind""Ptr","child":Windows.Win32.Security.SecHandle},
    dwAuthError: {"kind":"UInt32"},
    UserName: {"kind""Ptr","child":{"kind":"SByte"}},
    ulUserBufferSize: {"kind":"UInt32"},
    pszPassword: {"kind""Ptr","child":{"kind":"SByte"}},
    ulPasswordBufferSize: {"kind":"UInt32"},
    pfSave: {"kind""Ptr","child":{"kind":"Int32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "credui" fn CredUIConfirmCredentialsW(
    pszTargetName: {"kind""Ptr","child":{"kind":"UInt16"}},
    bConfirm: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "credui" fn CredUIConfirmCredentialsA(
    pszTargetName: {"kind""Ptr","child":{"kind":"SByte"}},
    bConfirm: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "credui" fn CredUIStoreSSOCredW(
    pszRealm: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszUsername: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszPassword: {"kind""Ptr","child":{"kind":"UInt16"}},
    bPersist: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "credui" fn CredUIReadSSOCredW(
    pszRealm: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppszUsername: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SECUR32" fn CredMarshalTargetInfo(
    InTargetInfo: {"kind""Ptr","child":Windows.Win32.Security.CREDENTIAL_TARGET_INFORMATIONW},
    Buffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    BufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SECUR32" fn CredUnmarshalTargetInfo(
    Buffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    BufferSize: {"kind":"UInt32"},
    RetTargetInfo: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CREDENTIAL_TARGET_INFORMATIONW}},
    RetActualSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SCHANNEL" fn SslEmptyCacheA(
    pszTargetName: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SCHANNEL" fn SslEmptyCacheW(
    pszTargetName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SCHANNEL" fn SslGenerateRandomBits(
    pRandomData: {"kind""Ptr","child":{"kind":"Byte"}},
    cRandomData: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SCHANNEL" fn SslCrackCertificate(
    pbCertificate: {"kind""Ptr","child":{"kind":"Byte"}},
    cbCertificate: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    ppCertificate: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.X509Certificate}},

// set_last_errror=False (can and should we use this?)
pub extern "SCHANNEL" fn SslFreeCertificate(
    pCertificate: {"kind""Ptr","child":Windows.Win32.Security.X509Certificate},

// set_last_errror=False (can and should we use this?)
pub extern "SCHANNEL" fn SslGetMaximumKeySize(
    Reserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SCHANNEL" fn SslGetServerIdentity(
    ClientHello: {"kind""Ptr","child":{"kind":"Byte"}},
    ClientHelloSize: {"kind":"UInt32"},
    ServerIdentity: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    ServerIdentitySize: {"kind""Ptr","child":{"kind":"UInt32"}},
    Flags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SCHANNEL" fn SslGetExtensions(
    clientHello: {"kind""Ptr","child":{"kind":"Byte"}},
    clientHelloByteSize: {"kind":"UInt32"},
    genericExtensions: {"kind""Ptr","child":Windows.Win32.Security.SCH_EXTENSION_DATA},
    genericExtensionsCount: {"kind":"Byte"},
    bytesToRead: {"kind""Ptr","child":{"kind":"UInt32"}},
    flags: Windows.Win32.Security.SchGetExtensionsOptions,

// set_last_errror=False (can and should we use this?)
pub extern "KeyCredMgr" fn KeyCredentialManagerGetOperationErrorStates(
    keyCredentialManagerOperationType: Windows.Win32.Security.KeyCredentialManagerOperationType,
    isReady: {"kind""Ptr","child":{"kind":"Int32"}},
    keyCredentialManagerOperationErrorStates: {"kind""Ptr","child":Windows.Win32.Security.KeyCredentialManagerOperationErrorStates},

// set_last_errror=False (can and should we use this?)
pub extern "KeyCredMgr" fn KeyCredentialManagerShowUIOperation(
    hWndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    keyCredentialManagerOperationType: Windows.Win32.Security.KeyCredentialManagerOperationType,

// set_last_errror=False (can and should we use this?)
pub extern "KeyCredMgr" fn KeyCredentialManagerGetInformation(
    keyCredentialManagerInfo: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.KeyCredentialManagerInfo}},

// set_last_errror=False (can and should we use this?)
pub extern "KeyCredMgr" fn KeyCredentialManagerFreeInformation(
    keyCredentialManagerInfo: {"kind""Ptr","child":Windows.Win32.Security.KeyCredentialManagerInfo},

// set_last_errror=False (can and should we use this?)
pub extern "davclnt" fn NPAddConnection(
    lpNetResource: {"kind""Ptr","child":Windows.Win32.Security.NETRESOURCEW},
    lpPassword: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpUserName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "davclnt" fn NPAddConnection3(
    hwndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    lpNetResource: {"kind""Ptr","child":Windows.Win32.Security.NETRESOURCEW},
    lpPassword: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpUserName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "NTLANMAN" fn NPAddConnection4(
    hwndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    lpNetResource: {"kind""Ptr","child":Windows.Win32.Security.NETRESOURCEW},
    lpAuthBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    cbAuthBuffer: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    lpUseOptions: {"kind""Ptr","child":{"kind":"Byte"}},
    cbUseOptions: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "davclnt" fn NPCancelConnection(
    lpName: {"kind""Ptr","child":{"kind":"UInt16"}},
    fForce: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "davclnt" fn NPGetConnection(
    lpLocalName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpRemoteName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpnBufferLen: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "NTLANMAN" fn NPGetConnection3(
    lpLocalName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwLevel: {"kind":"UInt32"},
    lpBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    lpBufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "davclnt" fn NPGetUniversalName(
    lpLocalPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwInfoLevel: {"kind":"UInt32"},
    lpBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    lpBufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "NTLANMAN" fn NPGetConnectionPerformance(
    lpRemoteName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpNetConnectInfo: {"kind""Ptr","child":Windows.Win32.Security.NETCONNECTINFOSTRUCT},

// set_last_errror=False (can and should we use this?)
pub extern "davclnt" fn NPOpenEnum(
    dwScope: {"kind":"UInt32"},
    dwType: {"kind":"UInt32"},
    dwUsage: {"kind":"UInt32"},
    lpNetResource: {"kind""Ptr","child":Windows.Win32.Security.NETRESOURCEW},
    lphEnum: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "davclnt" fn NPEnumResource(
    hEnum: Windows.Win32.SystemServices.HANDLE,
    lpcCount: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    lpBufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "davclnt" fn NPCloseEnum(
    hEnum: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "davclnt" fn NPGetCaps(
    ndex: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "davclnt" fn NPGetUser(
    lpName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpUserName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpnBufferLen: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "NTLANMAN" fn NPGetPersistentUseOptionsForConnection(
    lpRemotePath: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpReadUseOptions: {"kind""Ptr","child":{"kind":"Byte"}},
    cbReadUseOptions: {"kind":"UInt32"},
    lpWriteUseOptions: {"kind""Ptr","child":{"kind":"Byte"}},
    lpSizeWriteUseOptions: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "davclnt" fn NPGetResourceParent(
    lpNetResource: {"kind""Ptr","child":Windows.Win32.Security.NETRESOURCEW},
    lpBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    lpBufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "davclnt" fn NPGetResourceInformation(
    lpNetResource: {"kind""Ptr","child":Windows.Win32.Security.NETRESOURCEW},
    lpBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    lpBufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    lplpSystem: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "davclnt" fn NPFormatNetworkName(
    lpRemoteName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpFormattedName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpnLength: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},
    dwAveCharPerLine: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "MPR" fn WNetSetLastErrorA(
    err: {"kind":"UInt32"},
    lpError: {"kind""Ptr","child":{"kind":"SByte"}},
    lpProviders: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPR" fn WNetSetLastErrorW(
    err: {"kind":"UInt32"},
    lpError: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpProviders: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "certpoleng" fn PstGetTrustAnchors(
    pTargetName: {"kind""Ptr","child":Windows.Win32.Security.UNICODE_STRING},
    cCriteria: {"kind":"UInt32"},
    rgpCriteria: {"kind""Ptr","child":Windows.Win32.Security.CERT_SELECT_CRITERIA},
    ppTrustedIssuers: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.SecPkgContext_IssuerListInfoEx}},

// set_last_errror=False (can and should we use this?)
pub extern "certpoleng" fn PstGetTrustAnchorsEx(
    pTargetName: {"kind""Ptr","child":Windows.Win32.Security.UNICODE_STRING},
    cCriteria: {"kind":"UInt32"},
    rgpCriteria: {"kind""Ptr","child":Windows.Win32.Security.CERT_SELECT_CRITERIA},
    pCertContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    ppTrustedIssuers: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.SecPkgContext_IssuerListInfoEx}},

// set_last_errror=False (can and should we use this?)
pub extern "certpoleng" fn PstGetCertificateChain(
    pCert: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    pTrustedIssuers: {"kind""Ptr","child":Windows.Win32.Security.SecPkgContext_IssuerListInfoEx},
    ppCertChainContext: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CERT_CHAIN_CONTEXT}},

// set_last_errror=False (can and should we use this?)
pub extern "certpoleng" fn PstGetCertificates(
    pTargetName: {"kind""Ptr","child":Windows.Win32.Security.UNICODE_STRING},
    cCriteria: {"kind":"UInt32"},
    rgpCriteria: {"kind""Ptr","child":Windows.Win32.Security.CERT_SELECT_CRITERIA},
    bIsClient: Windows.Win32.SystemServices.BOOL,
    pdwCertChainContextCount: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppCertChainContexts: {"kind""Ptr","child":{"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CERT_CHAIN_CONTEXT}}},

// set_last_errror=False (can and should we use this?)
pub extern "certpoleng" fn PstAcquirePrivateKey(
    pCert: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},

// set_last_errror=False (can and should we use this?)
pub extern "certpoleng" fn PstValidate(
    pTargetName: {"kind""Ptr","child":Windows.Win32.Security.UNICODE_STRING},
    bIsClient: Windows.Win32.SystemServices.BOOL,
    pRequestedIssuancePolicy: {"kind""Ptr","child":Windows.Win32.Security.CERT_USAGE_MATCH},
    phAdditionalCertStore: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pCert: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    pProvGUID: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "certpoleng" fn PstMapCertificate(
    pCert: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    pTokenInformationType: {"kind""Ptr","child":Windows.Win32.Security.LSA_TOKEN_INFORMATION_TYPE},
    ppTokenInformation: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "certpoleng" fn PstGetUserNameForCertificate(
    pCertContext: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    UserName: {"kind""Ptr","child":Windows.Win32.Security.UNICODE_STRING},

// set_last_errror=False (can and should we use this?)
pub extern "SAS" fn SendSAS(
    AsUser: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzAccessCheck(
    Flags: {"kind":"UInt32"},
    hAuthzClientContext: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_CLIENT_CONTEXT_HANDLE__},
    pRequest: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_ACCESS_REQUEST},
    hAuditEvent: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_AUDIT_EVENT_HANDLE__},
    pSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    OptionalSecurityDescriptorArray: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    OptionalSecurityDescriptorCount: {"kind":"UInt32"},
    pReply: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_ACCESS_REPLY},
    phAccessCheckResults: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.AUTHZ_ACCESS_CHECK_RESULTS_HANDLE__}},

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzCachedAccessCheck(
    Flags: {"kind":"UInt32"},
    hAccessCheckResults: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_ACCESS_CHECK_RESULTS_HANDLE__},
    pRequest: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_ACCESS_REQUEST},
    hAuditEvent: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_AUDIT_EVENT_HANDLE__},
    pReply: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_ACCESS_REPLY},

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzOpenObjectAudit(
    Flags: {"kind":"UInt32"},
    hAuthzClientContext: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_CLIENT_CONTEXT_HANDLE__},
    pRequest: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_ACCESS_REQUEST},
    hAuditEvent: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_AUDIT_EVENT_HANDLE__},
    pSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    OptionalSecurityDescriptorArray: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    OptionalSecurityDescriptorCount: {"kind":"UInt32"},
    pReply: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_ACCESS_REPLY},

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzFreeHandle(
    hAccessCheckResults: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_ACCESS_CHECK_RESULTS_HANDLE__},

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzInitializeResourceManager(
    Flags: {"kind":"UInt32"},
    pfnDynamicAccessCheck: Windows.Win32.Security.PFN_AUTHZ_DYNAMIC_ACCESS_CHECK,
    pfnComputeDynamicGroups: Windows.Win32.Security.PFN_AUTHZ_COMPUTE_DYNAMIC_GROUPS,
    pfnFreeDynamicGroups: Windows.Win32.Security.PFN_AUTHZ_FREE_DYNAMIC_GROUPS,
    szResourceManagerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    phAuthzResourceManager: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.AUTHZ_RESOURCE_MANAGER_HANDLE__}},

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzInitializeResourceManagerEx(
    Flags: {"kind":"UInt32"},
    pAuthzInitInfo: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_INIT_INFO},
    phAuthzResourceManager: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.AUTHZ_RESOURCE_MANAGER_HANDLE__}},

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzInitializeRemoteResourceManager(
    pRpcInitInfo: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_RPC_INIT_INFO_CLIENT},
    phAuthzResourceManager: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.AUTHZ_RESOURCE_MANAGER_HANDLE__}},

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzFreeResourceManager(
    hAuthzResourceManager: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_RESOURCE_MANAGER_HANDLE__},

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzInitializeContextFromToken(
    Flags: {"kind":"UInt32"},
    TokenHandle: Windows.Win32.SystemServices.HANDLE,
    hAuthzResourceManager: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_RESOURCE_MANAGER_HANDLE__},
    pExpirationTime: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},
    Identifier: Windows.Win32.Kernel.LUID,
    DynamicGroupArgs: {"kind""Ptr","child":{"kind":"Void"}},
    phAuthzClientContext: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.AUTHZ_CLIENT_CONTEXT_HANDLE__}},

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzInitializeContextFromSid(
    Flags: {"kind":"UInt32"},
    UserSid: {"kind""Ptr","child":{"kind":"Void"}},
    hAuthzResourceManager: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_RESOURCE_MANAGER_HANDLE__},
    pExpirationTime: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},
    Identifier: Windows.Win32.Kernel.LUID,
    DynamicGroupArgs: {"kind""Ptr","child":{"kind":"Void"}},
    phAuthzClientContext: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.AUTHZ_CLIENT_CONTEXT_HANDLE__}},

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzInitializeContextFromAuthzContext(
    Flags: {"kind":"UInt32"},
    hAuthzClientContext: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_CLIENT_CONTEXT_HANDLE__},
    pExpirationTime: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},
    Identifier: Windows.Win32.Kernel.LUID,
    DynamicGroupArgs: {"kind""Ptr","child":{"kind":"Void"}},
    phNewAuthzClientContext: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.AUTHZ_CLIENT_CONTEXT_HANDLE__}},

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzInitializeCompoundContext(
    UserContext: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_CLIENT_CONTEXT_HANDLE__},
    DeviceContext: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_CLIENT_CONTEXT_HANDLE__},
    phCompoundContext: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.AUTHZ_CLIENT_CONTEXT_HANDLE__}},

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzAddSidsToContext(
    hAuthzClientContext: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_CLIENT_CONTEXT_HANDLE__},
    Sids: {"kind""Ptr","child":Windows.Win32.Security.SID_AND_ATTRIBUTES},
    SidCount: {"kind":"UInt32"},
    RestrictedSids: {"kind""Ptr","child":Windows.Win32.Security.SID_AND_ATTRIBUTES},
    RestrictedSidCount: {"kind":"UInt32"},
    phNewAuthzClientContext: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.AUTHZ_CLIENT_CONTEXT_HANDLE__}},

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzModifySecurityAttributes(
    hAuthzClientContext: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_CLIENT_CONTEXT_HANDLE__},
    pOperations: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_SECURITY_ATTRIBUTE_OPERATION},
    pAttributes: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_SECURITY_ATTRIBUTES_INFORMATION},

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzModifyClaims(
    hAuthzClientContext: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_CLIENT_CONTEXT_HANDLE__},
    ClaimClass: Windows.Win32.Security.AUTHZ_CONTEXT_INFORMATION_CLASS,
    pClaimOperations: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_SECURITY_ATTRIBUTE_OPERATION},
    pClaims: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_SECURITY_ATTRIBUTES_INFORMATION},

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzModifySids(
    hAuthzClientContext: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_CLIENT_CONTEXT_HANDLE__},
    SidClass: Windows.Win32.Security.AUTHZ_CONTEXT_INFORMATION_CLASS,
    pSidOperations: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_SID_OPERATION},
    pSids: {"kind""Ptr","child":Windows.Win32.Security.TOKEN_GROUPS},

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzSetAppContainerInformation(
    hAuthzClientContext: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_CLIENT_CONTEXT_HANDLE__},
    pAppContainerSid: {"kind""Ptr","child":{"kind":"Void"}},
    CapabilityCount: {"kind":"UInt32"},
    pCapabilitySids: {"kind""Ptr","child":Windows.Win32.Security.SID_AND_ATTRIBUTES},

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzGetInformationFromContext(
    hAuthzClientContext: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_CLIENT_CONTEXT_HANDLE__},
    InfoClass: Windows.Win32.Security.AUTHZ_CONTEXT_INFORMATION_CLASS,
    BufferSize: {"kind":"UInt32"},
    pSizeRequired: {"kind""Ptr","child":{"kind":"UInt32"}},
    Buffer: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzFreeContext(
    hAuthzClientContext: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_CLIENT_CONTEXT_HANDLE__},

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzInitializeObjectAccessAuditEvent(
    Flags: {"kind":"UInt32"},
    hAuditEventType: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_AUDIT_EVENT_TYPE_HANDLE__},
    szOperationType: {"kind""Ptr","child":{"kind":"UInt16"}},
    szObjectType: {"kind""Ptr","child":{"kind":"UInt16"}},
    szObjectName: {"kind""Ptr","child":{"kind":"UInt16"}},
    szAdditionalInfo: {"kind""Ptr","child":{"kind":"UInt16"}},
    phAuditEvent: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.AUTHZ_AUDIT_EVENT_HANDLE__}},
    dwAdditionalParameterCount: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzInitializeObjectAccessAuditEvent2(
    Flags: {"kind":"UInt32"},
    hAuditEventType: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_AUDIT_EVENT_TYPE_HANDLE__},
    szOperationType: {"kind""Ptr","child":{"kind":"UInt16"}},
    szObjectType: {"kind""Ptr","child":{"kind":"UInt16"}},
    szObjectName: {"kind""Ptr","child":{"kind":"UInt16"}},
    szAdditionalInfo: {"kind""Ptr","child":{"kind":"UInt16"}},
    szAdditionalInfo2: {"kind""Ptr","child":{"kind":"UInt16"}},
    phAuditEvent: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.AUTHZ_AUDIT_EVENT_HANDLE__}},
    dwAdditionalParameterCount: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzFreeAuditEvent(
    hAuditEvent: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_AUDIT_EVENT_HANDLE__},

// set_last_errror=False (can and should we use this?)
pub extern "AUTHZ" fn AuthzEvaluateSacl(
    AuthzClientContext: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_CLIENT_CONTEXT_HANDLE__},
    pRequest: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_ACCESS_REQUEST},
    Sacl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    GrantedAccess: {"kind":"UInt32"},
    AccessGranted: Windows.Win32.SystemServices.BOOL,
    pbGenerateAudit: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzInstallSecurityEventSource(
    dwFlags: {"kind":"UInt32"},
    pRegistration: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_SOURCE_SCHEMA_REGISTRATION},

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzUninstallSecurityEventSource(
    dwFlags: {"kind":"UInt32"},
    szEventSourceName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzEnumerateSecurityEventSources(
    dwFlags: {"kind":"UInt32"},
    Buffer: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_SOURCE_SCHEMA_REGISTRATION},
    pdwCount: {"kind""Ptr","child":{"kind":"UInt32"}},
    pdwLength: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzRegisterSecurityEventSource(
    dwFlags: {"kind":"UInt32"},
    szEventSourceName: {"kind""Ptr","child":{"kind":"UInt16"}},
    phEventProvider: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE__}},

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzUnregisterSecurityEventSource(
    dwFlags: {"kind":"UInt32"},
    phEventProvider: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE__}},

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzReportSecurityEvent(
    dwFlags: {"kind":"UInt32"},
    hEventProvider: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE__},
    dwAuditId: {"kind":"UInt32"},
    pUserSid: {"kind""Ptr","child":{"kind":"Void"}},
    dwCount: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzReportSecurityEventFromParams(
    dwFlags: {"kind":"UInt32"},
    hEventProvider: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE__},
    dwAuditId: {"kind":"UInt32"},
    pUserSid: {"kind""Ptr","child":{"kind":"Void"}},
    pParams: {"kind""Ptr","child":Windows.Win32.Security.AUDIT_PARAMS},

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzRegisterCapChangeNotification(
    phCapChangeSubscription: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.AUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE__}},
    pfnCapChangeCallback: Windows.Win32.SystemServices.LPTHREAD_START_ROUTINE,
    pCallbackContext: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzUnregisterCapChangeNotification(
    hCapChangeSubscription: {"kind""Ptr","child":Windows.Win32.Security.AUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE__},

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzFreeCentralAccessPolicyCache(

// set_last_errror=True (can and should we use this?)
pub extern "ACLUI" fn CreateSecurityPage(
    psi: Windows.Win32.Security.ISecurityInformation,

// set_last_errror=True (can and should we use this?)
pub extern "ACLUI" fn EditSecurity(
    hwndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    psi: Windows.Win32.Security.ISecurityInformation,

// set_last_errror=False (can and should we use this?)
pub extern "ACLUI" fn EditSecurityAdvanced(
    hwndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    psi: Windows.Win32.Security.ISecurityInformation,
    uSIPage: Windows.Win32.Security.SI_PAGE_TYPE,

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn SetEntriesInAclA(
    cCountOfExplicitEntries: {"kind":"UInt32"},
    pListOfExplicitEntries: {"kind""Ptr","child":Windows.Win32.Security.EXPLICIT_ACCESS_A},
    OldAcl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    NewAcl: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.ACL}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn SetEntriesInAclW(
    cCountOfExplicitEntries: {"kind":"UInt32"},
    pListOfExplicitEntries: {"kind""Ptr","child":Windows.Win32.Security.EXPLICIT_ACCESS_W},
    OldAcl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    NewAcl: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.ACL}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetExplicitEntriesFromAclA(
    pacl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    pcCountOfExplicitEntries: {"kind""Ptr","child":{"kind":"UInt32"}},
    pListOfExplicitEntries: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.EXPLICIT_ACCESS_A}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetExplicitEntriesFromAclW(
    pacl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    pcCountOfExplicitEntries: {"kind""Ptr","child":{"kind":"UInt32"}},
    pListOfExplicitEntries: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.EXPLICIT_ACCESS_W}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetEffectiveRightsFromAclA(
    pacl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    pTrustee: {"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_A},
    pAccessRights: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetEffectiveRightsFromAclW(
    pacl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    pTrustee: {"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_W},
    pAccessRights: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetAuditedPermissionsFromAclA(
    pacl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    pTrustee: {"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_A},
    pSuccessfulAuditedRights: {"kind""Ptr","child":{"kind":"UInt32"}},
    pFailedAuditRights: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetAuditedPermissionsFromAclW(
    pacl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    pTrustee: {"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_W},
    pSuccessfulAuditedRights: {"kind""Ptr","child":{"kind":"UInt32"}},
    pFailedAuditRights: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetNamedSecurityInfoA(
    pObjectName: {"kind""Ptr","child":{"kind":"SByte"}},
    ObjectType: Windows.Win32.Security.SE_OBJECT_TYPE,
    SecurityInfo: {"kind":"UInt32"},
    ppsidOwner: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    ppsidGroup: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    ppDacl: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.ACL}},
    ppSacl: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.ACL}},
    ppSecurityDescriptor: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetNamedSecurityInfoW(
    pObjectName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ObjectType: Windows.Win32.Security.SE_OBJECT_TYPE,
    SecurityInfo: {"kind":"UInt32"},
    ppsidOwner: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    ppsidGroup: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    ppDacl: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.ACL}},
    ppSacl: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.ACL}},
    ppSecurityDescriptor: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetSecurityInfo(
    handle: Windows.Win32.SystemServices.HANDLE,
    ObjectType: Windows.Win32.Security.SE_OBJECT_TYPE,
    SecurityInfo: {"kind":"UInt32"},
    ppsidOwner: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    ppsidGroup: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    ppDacl: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.ACL}},
    ppSacl: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.ACL}},
    ppSecurityDescriptor: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn SetNamedSecurityInfoA(
    pObjectName: {"kind""Ptr","child":{"kind":"SByte"}},
    ObjectType: Windows.Win32.Security.SE_OBJECT_TYPE,
    SecurityInfo: {"kind":"UInt32"},
    psidOwner: {"kind""Ptr","child":{"kind":"Void"}},
    psidGroup: {"kind""Ptr","child":{"kind":"Void"}},
    pDacl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    pSacl: {"kind""Ptr","child":Windows.Win32.Security.ACL},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn SetNamedSecurityInfoW(
    pObjectName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ObjectType: Windows.Win32.Security.SE_OBJECT_TYPE,
    SecurityInfo: {"kind":"UInt32"},
    psidOwner: {"kind""Ptr","child":{"kind":"Void"}},
    psidGroup: {"kind""Ptr","child":{"kind":"Void"}},
    pDacl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    pSacl: {"kind""Ptr","child":Windows.Win32.Security.ACL},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn SetSecurityInfo(
    handle: Windows.Win32.SystemServices.HANDLE,
    ObjectType: Windows.Win32.Security.SE_OBJECT_TYPE,
    SecurityInfo: {"kind":"UInt32"},
    psidOwner: {"kind""Ptr","child":{"kind":"Void"}},
    psidGroup: {"kind""Ptr","child":{"kind":"Void"}},
    pDacl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    pSacl: {"kind""Ptr","child":Windows.Win32.Security.ACL},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetInheritanceSourceA(
    pObjectName: {"kind""Ptr","child":{"kind":"SByte"}},
    ObjectType: Windows.Win32.Security.SE_OBJECT_TYPE,
    SecurityInfo: {"kind":"UInt32"},
    Container: Windows.Win32.SystemServices.BOOL,
    pObjectClassGuids: {"kind""Ptr","child":{"kind""Ptr","child":Guid}},
    GuidCount: {"kind":"UInt32"},
    pAcl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    pfnArray: {"kind""Ptr","child":Windows.Win32.Security._FN_OBJECT_MGR_FUNCTIONS},
    pGenericMapping: {"kind""Ptr","child":Windows.Win32.Security.GENERIC_MAPPING},
    pInheritArray: {"kind""Ptr","child":Windows.Win32.Security.INHERITED_FROMA},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetInheritanceSourceW(
    pObjectName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ObjectType: Windows.Win32.Security.SE_OBJECT_TYPE,
    SecurityInfo: {"kind":"UInt32"},
    Container: Windows.Win32.SystemServices.BOOL,
    pObjectClassGuids: {"kind""Ptr","child":{"kind""Ptr","child":Guid}},
    GuidCount: {"kind":"UInt32"},
    pAcl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    pfnArray: {"kind""Ptr","child":Windows.Win32.Security._FN_OBJECT_MGR_FUNCTIONS},
    pGenericMapping: {"kind""Ptr","child":Windows.Win32.Security.GENERIC_MAPPING},
    pInheritArray: {"kind""Ptr","child":Windows.Win32.Security.INHERITED_FROMW},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn FreeInheritedFromArray(
    pInheritArray: {"kind""Ptr","child":Windows.Win32.Security.INHERITED_FROMW},
    AceCnt: {"kind":"UInt16"},
    pfnArray: {"kind""Ptr","child":Windows.Win32.Security._FN_OBJECT_MGR_FUNCTIONS},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn TreeResetNamedSecurityInfoA(
    pObjectName: {"kind""Ptr","child":{"kind":"SByte"}},
    ObjectType: Windows.Win32.Security.SE_OBJECT_TYPE,
    SecurityInfo: {"kind":"UInt32"},
    pOwner: {"kind""Ptr","child":{"kind":"Void"}},
    pGroup: {"kind""Ptr","child":{"kind":"Void"}},
    pDacl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    pSacl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    KeepExplicit: Windows.Win32.SystemServices.BOOL,
    fnProgress: Windows.Win32.Security.FN_PROGRESS,
    ProgressInvokeSetting: Windows.Win32.Security.PROG_INVOKE_SETTING,
    Args: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn TreeResetNamedSecurityInfoW(
    pObjectName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ObjectType: Windows.Win32.Security.SE_OBJECT_TYPE,
    SecurityInfo: {"kind":"UInt32"},
    pOwner: {"kind""Ptr","child":{"kind":"Void"}},
    pGroup: {"kind""Ptr","child":{"kind":"Void"}},
    pDacl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    pSacl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    KeepExplicit: Windows.Win32.SystemServices.BOOL,
    fnProgress: Windows.Win32.Security.FN_PROGRESS,
    ProgressInvokeSetting: Windows.Win32.Security.PROG_INVOKE_SETTING,
    Args: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn TreeSetNamedSecurityInfoA(
    pObjectName: {"kind""Ptr","child":{"kind":"SByte"}},
    ObjectType: Windows.Win32.Security.SE_OBJECT_TYPE,
    SecurityInfo: {"kind":"UInt32"},
    pOwner: {"kind""Ptr","child":{"kind":"Void"}},
    pGroup: {"kind""Ptr","child":{"kind":"Void"}},
    pDacl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    pSacl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    dwAction: {"kind":"UInt32"},
    fnProgress: Windows.Win32.Security.FN_PROGRESS,
    ProgressInvokeSetting: Windows.Win32.Security.PROG_INVOKE_SETTING,
    Args: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn TreeSetNamedSecurityInfoW(
    pObjectName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ObjectType: Windows.Win32.Security.SE_OBJECT_TYPE,
    SecurityInfo: {"kind":"UInt32"},
    pOwner: {"kind""Ptr","child":{"kind":"Void"}},
    pGroup: {"kind""Ptr","child":{"kind":"Void"}},
    pDacl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    pSacl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    dwAction: {"kind":"UInt32"},
    fnProgress: Windows.Win32.Security.FN_PROGRESS,
    ProgressInvokeSetting: Windows.Win32.Security.PROG_INVOKE_SETTING,
    Args: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn BuildSecurityDescriptorA(
    pOwner: {"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_A},
    pGroup: {"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_A},
    cCountOfAccessEntries: {"kind":"UInt32"},
    pListOfAccessEntries: {"kind""Ptr","child":Windows.Win32.Security.EXPLICIT_ACCESS_A},
    cCountOfAuditEntries: {"kind":"UInt32"},
    pListOfAuditEntries: {"kind""Ptr","child":Windows.Win32.Security.EXPLICIT_ACCESS_A},
    pOldSD: {"kind""Ptr","child":{"kind":"Void"}},
    pSizeNewSD: {"kind""Ptr","child":{"kind":"UInt32"}},
    pNewSD: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn BuildSecurityDescriptorW(
    pOwner: {"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_W},
    pGroup: {"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_W},
    cCountOfAccessEntries: {"kind":"UInt32"},
    pListOfAccessEntries: {"kind""Ptr","child":Windows.Win32.Security.EXPLICIT_ACCESS_W},
    cCountOfAuditEntries: {"kind":"UInt32"},
    pListOfAuditEntries: {"kind""Ptr","child":Windows.Win32.Security.EXPLICIT_ACCESS_W},
    pOldSD: {"kind""Ptr","child":{"kind":"Void"}},
    pSizeNewSD: {"kind""Ptr","child":{"kind":"UInt32"}},
    pNewSD: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LookupSecurityDescriptorPartsA(
    ppOwner: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_A}},
    ppGroup: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_A}},
    pcCountOfAccessEntries: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppListOfAccessEntries: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.EXPLICIT_ACCESS_A}},
    pcCountOfAuditEntries: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppListOfAuditEntries: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.EXPLICIT_ACCESS_A}},
    pSD: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LookupSecurityDescriptorPartsW(
    ppOwner: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_W}},
    ppGroup: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_W}},
    pcCountOfAccessEntries: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppListOfAccessEntries: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.EXPLICIT_ACCESS_W}},
    pcCountOfAuditEntries: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppListOfAuditEntries: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.EXPLICIT_ACCESS_W}},
    pSD: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn BuildExplicitAccessWithNameA(
    pExplicitAccess: {"kind""Ptr","child":Windows.Win32.Security.EXPLICIT_ACCESS_A},
    pTrusteeName: {"kind""Ptr","child":{"kind":"SByte"}},
    AccessPermissions: {"kind":"UInt32"},
    AccessMode: Windows.Win32.Security.ACCESS_MODE,
    Inheritance: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn BuildExplicitAccessWithNameW(
    pExplicitAccess: {"kind""Ptr","child":Windows.Win32.Security.EXPLICIT_ACCESS_W},
    pTrusteeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    AccessPermissions: {"kind":"UInt32"},
    AccessMode: Windows.Win32.Security.ACCESS_MODE,
    Inheritance: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn BuildImpersonateExplicitAccessWithNameA(
    pExplicitAccess: {"kind""Ptr","child":Windows.Win32.Security.EXPLICIT_ACCESS_A},
    pTrusteeName: {"kind""Ptr","child":{"kind":"SByte"}},
    pTrustee: {"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_A},
    AccessPermissions: {"kind":"UInt32"},
    AccessMode: Windows.Win32.Security.ACCESS_MODE,
    Inheritance: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn BuildImpersonateExplicitAccessWithNameW(
    pExplicitAccess: {"kind""Ptr","child":Windows.Win32.Security.EXPLICIT_ACCESS_W},
    pTrusteeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pTrustee: {"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_W},
    AccessPermissions: {"kind":"UInt32"},
    AccessMode: Windows.Win32.Security.ACCESS_MODE,
    Inheritance: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn BuildTrusteeWithNameA(
    pTrustee: {"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_A},
    pName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn BuildTrusteeWithNameW(
    pTrustee: {"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_W},
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn BuildImpersonateTrusteeA(
    pTrustee: {"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_A},
    pImpersonateTrustee: {"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_A},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn BuildImpersonateTrusteeW(
    pTrustee: {"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_W},
    pImpersonateTrustee: {"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_W},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn BuildTrusteeWithSidA(
    pTrustee: {"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_A},
    pSid: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn BuildTrusteeWithSidW(
    pTrustee: {"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_W},
    pSid: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn BuildTrusteeWithObjectsAndSidA(
    pTrustee: {"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_A},
    pObjSid: {"kind""Ptr","child":Windows.Win32.Security.OBJECTS_AND_SID},
    pObjectGuid: {"kind""Ptr","child":Guid},
    pInheritedObjectGuid: {"kind""Ptr","child":Guid},
    pSid: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn BuildTrusteeWithObjectsAndSidW(
    pTrustee: {"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_W},
    pObjSid: {"kind""Ptr","child":Windows.Win32.Security.OBJECTS_AND_SID},
    pObjectGuid: {"kind""Ptr","child":Guid},
    pInheritedObjectGuid: {"kind""Ptr","child":Guid},
    pSid: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn BuildTrusteeWithObjectsAndNameA(
    pTrustee: {"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_A},
    pObjName: {"kind""Ptr","child":Windows.Win32.Security.OBJECTS_AND_NAME_A},
    ObjectType: Windows.Win32.Security.SE_OBJECT_TYPE,
    ObjectTypeName: {"kind""Ptr","child":{"kind":"SByte"}},
    InheritedObjectTypeName: {"kind""Ptr","child":{"kind":"SByte"}},
    Name: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn BuildTrusteeWithObjectsAndNameW(
    pTrustee: {"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_W},
    pObjName: {"kind""Ptr","child":Windows.Win32.Security.OBJECTS_AND_NAME_W},
    ObjectType: Windows.Win32.Security.SE_OBJECT_TYPE,
    ObjectTypeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    InheritedObjectTypeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Name: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetTrusteeNameA(
    pTrustee: {"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_A},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetTrusteeNameW(
    pTrustee: {"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_W},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetTrusteeTypeA(
    pTrustee: {"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_A},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetTrusteeTypeW(
    pTrustee: {"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_W},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetTrusteeFormA(
    pTrustee: {"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_A},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetTrusteeFormW(
    pTrustee: {"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_W},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetMultipleTrusteeOperationA(
    pTrustee: {"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_A},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetMultipleTrusteeOperationW(
    pTrustee: {"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_W},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetMultipleTrusteeA(
    pTrustee: {"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_A},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetMultipleTrusteeW(
    pTrustee: {"kind""Ptr","child":Windows.Win32.Security.TRUSTEE_W},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ConvertSidToStringSidA(
    Sid: {"kind""Ptr","child":{"kind":"Void"}},
    StringSid: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ConvertSidToStringSidW(
    Sid: {"kind""Ptr","child":{"kind":"Void"}},
    StringSid: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ConvertStringSidToSidA(
    StringSid: {"kind""Ptr","child":{"kind":"SByte"}},
    Sid: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ConvertStringSidToSidW(
    StringSid: {"kind""Ptr","child":{"kind":"UInt16"}},
    Sid: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ConvertStringSecurityDescriptorToSecurityDescriptorA(
    StringSecurityDescriptor: {"kind""Ptr","child":{"kind":"SByte"}},
    StringSDRevision: {"kind":"UInt32"},
    SecurityDescriptor: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    SecurityDescriptorSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ConvertStringSecurityDescriptorToSecurityDescriptorW(
    StringSecurityDescriptor: {"kind""Ptr","child":{"kind":"UInt16"}},
    StringSDRevision: {"kind":"UInt32"},
    SecurityDescriptor: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    SecurityDescriptorSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ConvertSecurityDescriptorToStringSecurityDescriptorA(
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    RequestedStringSDRevision: {"kind":"UInt32"},
    SecurityInformation: {"kind":"UInt32"},
    StringSecurityDescriptor: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},
    StringSecurityDescriptorLen: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ConvertSecurityDescriptorToStringSecurityDescriptorW(
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    RequestedStringSDRevision: {"kind":"UInt32"},
    SecurityInformation: {"kind":"UInt32"},
    StringSecurityDescriptor: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    StringSecurityDescriptorLen: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "DSSEC" fn DSCreateISecurityInfoObject(
    pwszObjectPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszObjectClass: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    ppSI: {"kind""Ptr","child":Windows.Win32.Security.ISecurityInformation},
    pfnReadSD: Windows.Win32.Security.PFNREADOBJECTSECURITY,
    pfnWriteSD: Windows.Win32.Security.PFNWRITEOBJECTSECURITY,
    lpContext: Windows.Win32.WindowsAndMessaging.LPARAM,

// set_last_errror=False (can and should we use this?)
pub extern "DSSEC" fn DSCreateISecurityInfoObjectEx(
    pwszObjectPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszObjectClass: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszServer: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszUserName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszPassword: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    ppSI: {"kind""Ptr","child":Windows.Win32.Security.ISecurityInformation},
    pfnReadSD: Windows.Win32.Security.PFNREADOBJECTSECURITY,
    pfnWriteSD: Windows.Win32.Security.PFNWRITEOBJECTSECURITY,
    lpContext: Windows.Win32.WindowsAndMessaging.LPARAM,

// set_last_errror=False (can and should we use this?)
pub extern "DSSEC" fn DSCreateSecurityPage(
    pwszObjectPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszObjectClass: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    phPage: {"kind""Ptr","child":Windows.Win32.Controls.HPROPSHEETPAGE},
    pfnReadSD: Windows.Win32.Security.PFNREADOBJECTSECURITY,
    pfnWriteSD: Windows.Win32.Security.PFNWRITEOBJECTSECURITY,
    lpContext: Windows.Win32.WindowsAndMessaging.LPARAM,

// set_last_errror=False (can and should we use this?)
pub extern "DSSEC" fn DSEditSecurity(
    hwndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    pwszObjectPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszObjectClass: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    pwszCaption: {"kind""Ptr","child":{"kind":"UInt16"}},
    pfnReadSD: Windows.Win32.Security.PFNREADOBJECTSECURITY,
    pfnWriteSD: Windows.Win32.Security.PFNWRITEOBJECTSECURITY,
    lpContext: Windows.Win32.WindowsAndMessaging.LPARAM,

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvIsServerOnlineW(
    pwszServerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pfServerOnline: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvBackupGetDynamicFileListW(
    hbc: {"kind""Ptr","child":{"kind":"Void"}},
    ppwszzFileList: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    pcbSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvBackupPrepareW(
    pwszServerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    grbitJet: {"kind":"UInt32"},
    dwBackupFlags: {"kind":"UInt32"},
    phbc: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvBackupGetDatabaseNamesW(
    hbc: {"kind""Ptr","child":{"kind":"Void"}},
    ppwszzAttachmentInformation: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    pcbSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvBackupOpenFileW(
    hbc: {"kind""Ptr","child":{"kind":"Void"}},
    pwszAttachmentName: {"kind""Ptr","child":{"kind":"UInt16"}},
    cbReadHintSize: {"kind":"UInt32"},
    pliFileSize: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvBackupRead(
    hbc: {"kind""Ptr","child":{"kind":"Void"}},
    pvBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    cbBuffer: {"kind":"UInt32"},
    pcbRead: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvBackupClose(
    hbc: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvBackupGetBackupLogsW(
    hbc: {"kind""Ptr","child":{"kind":"Void"}},
    ppwszzBackupLogFiles: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    pcbSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvBackupTruncateLogs(
    hbc: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvBackupEnd(
    hbc: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvBackupFree(
    pv: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvRestoreGetDatabaseLocationsW(
    hbc: {"kind""Ptr","child":{"kind":"Void"}},
    ppwszzDatabaseLocationList: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    pcbSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvRestorePrepareW(
    pwszServerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwRestoreFlags: {"kind":"UInt32"},
    phbc: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvRestoreRegisterW(
    hbc: {"kind""Ptr","child":{"kind":"Void"}},
    pwszCheckPointFilePath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszLogPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    rgrstmap: {"kind""Ptr","child":Windows.Win32.Security.CSEDB_RSTMAPW},
    crstmap: {"kind":"Int32"},
    pwszBackupLogPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    genLow: {"kind":"UInt32"},
    genHigh: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvRestoreRegisterThroughFile(
    hbc: {"kind""Ptr","child":{"kind":"Void"}},
    pwszCheckPointFilePath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszLogPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    rgrstmap: {"kind""Ptr","child":Windows.Win32.Security.CSEDB_RSTMAPW},
    crstmap: {"kind":"Int32"},
    pwszBackupLogPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    genLow: {"kind":"UInt32"},
    genHigh: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvRestoreRegisterComplete(
    hbc: {"kind""Ptr","child":{"kind":"Void"}},
    hrRestoreState: Windows.Win32.Com.HRESULT,

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvRestoreEnd(
    hbc: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvServerControlW(
    pwszServerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwControlFlags: {"kind":"UInt32"},
    pcbOut: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppbOut: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptRegisterProtectionDescriptorName(
    pwszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszDescriptorString: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptQueryProtectionDescriptorName(
    pwszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszDescriptorString: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcDescriptorString: {"kind""Ptr","child":{"kind":"UIntPtr"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptCreateProtectionDescriptor(
    pwszDescriptorString: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    phDescriptor: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.NCRYPT_DESCRIPTOR_HANDLE__}},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptCloseProtectionDescriptor(
    hDescriptor: {"kind""Ptr","child":Windows.Win32.Security.NCRYPT_DESCRIPTOR_HANDLE__},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptGetProtectionDescriptorInfo(
    hDescriptor: {"kind""Ptr","child":Windows.Win32.Security.NCRYPT_DESCRIPTOR_HANDLE__},
    pMemPara: {"kind""Ptr","child":Windows.Win32.Security.NCRYPT_ALLOC_PARA},
    dwInfoType: {"kind":"UInt32"},
    ppvInfo: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptProtectSecret(
    hDescriptor: {"kind""Ptr","child":Windows.Win32.Security.NCRYPT_DESCRIPTOR_HANDLE__},
    dwFlags: {"kind":"UInt32"},
    pbData: {"kind""Ptr","child":{"kind":"Byte"}},
    cbData: {"kind":"UInt32"},
    pMemPara: {"kind""Ptr","child":Windows.Win32.Security.NCRYPT_ALLOC_PARA},
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    ppbProtectedBlob: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    pcbProtectedBlob: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptUnprotectSecret(
    phDescriptor: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.NCRYPT_DESCRIPTOR_HANDLE__}},
    dwFlags: {"kind":"UInt32"},
    pbProtectedBlob: {"kind""Ptr","child":{"kind":"Byte"}},
    cbProtectedBlob: {"kind":"UInt32"},
    pMemPara: {"kind""Ptr","child":Windows.Win32.Security.NCRYPT_ALLOC_PARA},
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    ppbData: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    pcbData: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptStreamOpenToProtect(
    hDescriptor: {"kind""Ptr","child":Windows.Win32.Security.NCRYPT_DESCRIPTOR_HANDLE__},
    dwFlags: {"kind":"UInt32"},
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    pStreamInfo: {"kind""Ptr","child":Windows.Win32.Security.NCRYPT_PROTECT_STREAM_INFO},
    phStream: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.NCRYPT_STREAM_HANDLE__}},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptStreamOpenToUnprotect(
    pStreamInfo: {"kind""Ptr","child":Windows.Win32.Security.NCRYPT_PROTECT_STREAM_INFO},
    dwFlags: {"kind":"UInt32"},
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    phStream: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.NCRYPT_STREAM_HANDLE__}},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptStreamOpenToUnprotectEx(
    pStreamInfo: {"kind""Ptr","child":Windows.Win32.Security.NCRYPT_PROTECT_STREAM_INFO_EX},
    dwFlags: {"kind":"UInt32"},
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    phStream: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.NCRYPT_STREAM_HANDLE__}},

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptStreamUpdate(
    hStream: {"kind""Ptr","child":Windows.Win32.Security.NCRYPT_STREAM_HANDLE__},
    pbData: {"kind""Ptr","child":{"kind":"Byte"}},
    cbData: {"kind":"UIntPtr"},
    fFinal: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptStreamClose(
    hStream: {"kind""Ptr","child":Windows.Win32.Security.NCRYPT_STREAM_HANDLE__},

// set_last_errror=False (can and should we use this?)
pub extern "TOKENBINDING" fn TokenBindingGenerateBinding(
    keyType: Windows.Win32.Security.TOKENBINDING_KEY_PARAMETERS_TYPE,
    targetURL: {"kind""Ptr","child":{"kind":"UInt16"}},
    bindingType: Windows.Win32.Security.TOKENBINDING_TYPE,
    tlsEKM: {"kind""Ptr","child":{"kind":"Void"}},
    tlsEKMSize: {"kind":"UInt32"},
    extensionFormat: Windows.Win32.Security.TOKENBINDING_EXTENSION_FORMAT,
    extensionData: {"kind""Ptr","child":{"kind":"Void"}},
    tokenBinding: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    tokenBindingSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    resultData: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.TOKENBINDING_RESULT_DATA}},

// set_last_errror=False (can and should we use this?)
pub extern "TOKENBINDING" fn TokenBindingGenerateMessage(
    tokenBindings: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    tokenBindingsSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    tokenBindingsCount: {"kind":"UInt32"},
    tokenBindingMessage: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    tokenBindingMessageSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "TOKENBINDING" fn TokenBindingVerifyMessage(
    tokenBindingMessage: {"kind""Ptr","child":{"kind":"Void"}},
    tokenBindingMessageSize: {"kind":"UInt32"},
    keyType: Windows.Win32.Security.TOKENBINDING_KEY_PARAMETERS_TYPE,
    tlsEKM: {"kind""Ptr","child":{"kind":"Void"}},
    tlsEKMSize: {"kind":"UInt32"},
    resultList: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.TOKENBINDING_RESULT_LIST}},

// set_last_errror=False (can and should we use this?)
pub extern "TOKENBINDING" fn TokenBindingGetKeyTypesClient(
    keyTypes: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.TOKENBINDING_KEY_TYPES}},

// set_last_errror=False (can and should we use this?)
pub extern "TOKENBINDING" fn TokenBindingGetKeyTypesServer(
    keyTypes: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.TOKENBINDING_KEY_TYPES}},

// set_last_errror=False (can and should we use this?)
pub extern "TOKENBINDING" fn TokenBindingDeleteBinding(
    targetURL: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "TOKENBINDING" fn TokenBindingDeleteAllBindings(

// set_last_errror=False (can and should we use this?)
pub extern "TOKENBINDING" fn TokenBindingGenerateID(
    keyType: Windows.Win32.Security.TOKENBINDING_KEY_PARAMETERS_TYPE,
    publicKey: {"kind""Ptr","child":{"kind":"Void"}},
    publicKeySize: {"kind":"UInt32"},
    resultData: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.TOKENBINDING_RESULT_DATA}},

// set_last_errror=False (can and should we use this?)
pub extern "TOKENBINDING" fn TokenBindingGenerateIDForUri(
    keyType: Windows.Win32.Security.TOKENBINDING_KEY_PARAMETERS_TYPE,
    targetUri: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultData: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.TOKENBINDING_RESULT_DATA}},

// set_last_errror=False (can and should we use this?)
pub extern "TOKENBINDING" fn TokenBindingGetHighestSupportedVersion(
    majorVersion: {"kind""Ptr","child":{"kind":"Byte"}},
    minorVersion: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlClose(
    hCryptXml: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlGetTransforms(
    ppConfig: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CRYPT_XML_TRANSFORM_CHAIN_CONFIG}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlOpenToEncode(
    pConfig: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_XML_TRANSFORM_CHAIN_CONFIG},
    dwFlags: {"kind":"UInt32"},
    wszId: {"kind""Ptr","child":{"kind":"UInt16"}},
    rgProperty: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_XML_PROPERTY},
    cProperty: {"kind":"UInt32"},
    pEncoded: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_XML_BLOB},
    phSignature: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlOpenToDecode(
    pConfig: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_XML_TRANSFORM_CHAIN_CONFIG},
    dwFlags: {"kind":"UInt32"},
    rgProperty: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_XML_PROPERTY},
    cProperty: {"kind":"UInt32"},
    pEncoded: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_XML_BLOB},
    phCryptXml: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlAddObject(
    hSignatureOrObject: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},
    rgProperty: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_XML_PROPERTY},
    cProperty: {"kind":"UInt32"},
    pEncoded: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_XML_BLOB},
    ppObject: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CRYPT_XML_OBJECT}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlCreateReference(
    hCryptXml: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},
    wszId: {"kind""Ptr","child":{"kind":"UInt16"}},
    wszURI: {"kind""Ptr","child":{"kind":"UInt16"}},
    wszType: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDigestMethod: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_XML_ALGORITHM},
    cTransform: {"kind":"UInt32"},
    rgTransform: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_XML_ALGORITHM},
    phReference: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlDigestReference(
    hReference: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},
    pDataProviderIn: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_XML_DATA_PROVIDER},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlSetHMACSecret(
    hSignature: {"kind""Ptr","child":{"kind":"Void"}},
    pbSecret: {"kind""Ptr","child":{"kind":"Byte"}},
    cbSecret: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlSign(
    hSignature: {"kind""Ptr","child":{"kind":"Void"}},
    hKey: {"kind":"UIntPtr"},
    dwKeySpec: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    dwKeyInfoSpec: Windows.Win32.Security.CRYPT_XML_KEYINFO_SPEC,
    pvKeyInfoSpec: {"kind""Ptr","child":{"kind":"Void"}},
    pSignatureMethod: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_XML_ALGORITHM},
    pCanonicalization: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_XML_ALGORITHM},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlImportPublicKey(
    dwFlags: {"kind":"UInt32"},
    pKeyValue: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_XML_KEY_VALUE},
    phKey: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlVerifySignature(
    hSignature: {"kind""Ptr","child":{"kind":"Void"}},
    hKey: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlGetDocContext(
    hCryptXml: {"kind""Ptr","child":{"kind":"Void"}},
    ppStruct: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CRYPT_XML_DOC_CTXT}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlGetSignature(
    hCryptXml: {"kind""Ptr","child":{"kind":"Void"}},
    ppStruct: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CRYPT_XML_SIGNATURE}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlGetReference(
    hCryptXml: {"kind""Ptr","child":{"kind":"Void"}},
    ppStruct: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CRYPT_XML_REFERENCE}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlGetStatus(
    hCryptXml: {"kind""Ptr","child":{"kind":"Void"}},
    pStatus: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_XML_STATUS},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlEncode(
    hCryptXml: {"kind""Ptr","child":{"kind":"Void"}},
    dwCharset: Windows.Win32.Security.CRYPT_XML_CHARSET,
    rgProperty: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_XML_PROPERTY},
    cProperty: {"kind":"UInt32"},
    pvCallbackState: {"kind""Ptr","child":{"kind":"Void"}},
    pfnWrite: Windows.Win32.Security.PFN_CRYPT_XML_WRITE_CALLBACK,

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlGetAlgorithmInfo(
    pXmlAlgorithm: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_XML_ALGORITHM},
    dwFlags: {"kind":"UInt32"},
    ppAlgInfo: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CRYPT_XML_ALGORITHM_INFO}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlFindAlgorithmInfo(
    dwFindByType: {"kind":"UInt32"},
    pvFindBy: {"kind""Ptr","child":{"kind":"Void"}},
    dwGroupId: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlEnumAlgorithmInfo(
    dwGroupId: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    pvArg: {"kind""Ptr","child":{"kind":"Void"}},
    pfnEnumAlgInfo: Windows.Win32.Security.PFN_CRYPT_XML_ENUM_ALG_INFO,

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn WinVerifyTrust(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    pgActionID: {"kind""Ptr","child":Guid},
    pWVTData: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn WinVerifyTrustEx(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    pgActionID: {"kind""Ptr","child":Guid},
    pWinTrustData: {"kind""Ptr","child":Windows.Win32.Security.WINTRUST_DATA},

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn WintrustGetRegPolicyFlags(
    pdwPolicyFlags: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn WintrustSetRegPolicyFlags(
    dwPolicyFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "WINTRUST" fn WintrustAddActionID(
    pgActionID: {"kind""Ptr","child":Guid},
    fdwFlags: {"kind":"UInt32"},
    psProvInfo: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_REGISTER_ACTIONID},

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn WintrustRemoveActionID(
    pgActionID: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn WintrustLoadFunctionPointers(
    pgActionID: {"kind""Ptr","child":Guid},
    pPfns: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_PROVIDER_FUNCTIONS},

// set_last_errror=True (can and should we use this?)
pub extern "WINTRUST" fn WintrustAddDefaultForUsage(
    pszUsageOID: {"kind""Ptr","child":{"kind":"SByte"}},
    psDefUsage: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_PROVIDER_REGDEFUSAGE},

// set_last_errror=True (can and should we use this?)
pub extern "WINTRUST" fn WintrustGetDefaultForUsage(
    dwAction: {"kind":"UInt32"},
    pszUsageOID: {"kind""Ptr","child":{"kind":"SByte"}},
    psUsage: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_PROVIDER_DEFUSAGE},

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn WTHelperGetProvSignerFromChain(
    pProvData: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_PROVIDER_DATA},
    idxSigner: {"kind":"UInt32"},
    fCounterSigner: Windows.Win32.SystemServices.BOOL,
    idxCounterSigner: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn WTHelperGetProvCertFromChain(
    pSgnr: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_PROVIDER_SGNR},
    idxCert: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn WTHelperProvDataFromStateData(
    hStateData: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn WTHelperGetProvPrivateDataFromChain(
    pProvData: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_PROVIDER_DATA},
    pgProviderID: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn WTHelperCertIsSelfSigned(
    dwEncoding: {"kind":"UInt32"},
    pCert: {"kind""Ptr","child":Windows.Win32.Security.CERT_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn WTHelperCertCheckValidSignature(
    pProvData: {"kind""Ptr","child":Windows.Win32.Security.CRYPT_PROVIDER_DATA},

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn OpenPersonalTrustDBDialogEx(
    hwndParent: Windows.Win32.WindowsAndMessaging.HWND,
    dwFlags: {"kind":"UInt32"},
    pvReserved: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn OpenPersonalTrustDBDialog(
    hwndParent: Windows.Win32.WindowsAndMessaging.HWND,

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn WintrustSetDefaultIncludePEPageHashes(
    fIncludePEPageHashes: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTUI" fn CryptUIDlgViewContext(
    dwContextType: {"kind":"UInt32"},
    pvContext: {"kind""Ptr","child":{"kind":"Void"}},
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    pwszTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTUI" fn CryptUIDlgSelectCertificateFromStore(
    hCertStore: {"kind""Ptr","child":{"kind":"Void"}},
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    pwszTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszDisplayString: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwDontUseColumn: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTUI" fn CertSelectionGetSerializedBlob(
    pcsi: {"kind""Ptr","child":Windows.Win32.Security.CERT_SELECTUI_INPUT},
    ppOutBuffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pulOutBufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTUI" fn CryptUIDlgCertMgr(
    pCryptUICertMgr: {"kind""Ptr","child":Windows.Win32.Security.CRYPTUI_CERT_MGR_STRUCT},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTUI" fn CryptUIWizDigitalSign(
    dwFlags: {"kind":"UInt32"},
    hwndParent: Windows.Win32.WindowsAndMessaging.HWND,
    pwszWizardTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDigitalSignInfo: {"kind""Ptr","child":Windows.Win32.Security.CRYPTUI_WIZ_DIGITAL_SIGN_INFO},
    ppSignContext: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT}},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTUI" fn CryptUIWizFreeDigitalSignContext(
    pSignContext: {"kind""Ptr","child":Windows.Win32.Security.CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPTUI" fn CryptUIDlgViewCertificateW(
    pCertViewInfo: {"kind""Ptr","child":Windows.Win32.Security.CRYPTUI_VIEWCERTIFICATE_STRUCTW},
    pfPropertiesChanged: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPTUI" fn CryptUIDlgViewCertificateA(
    pCertViewInfo: {"kind""Ptr","child":Windows.Win32.Security.CRYPTUI_VIEWCERTIFICATE_STRUCTA},
    pfPropertiesChanged: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPTUI" fn CryptUIWizExport(
    dwFlags: {"kind":"UInt32"},
    hwndParent: Windows.Win32.WindowsAndMessaging.HWND,
    pwszWizardTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    pExportInfo: {"kind""Ptr","child":Windows.Win32.Security.CRYPTUI_WIZ_EXPORT_INFO},
    pvoid: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPTUI" fn CryptUIWizImport(
    dwFlags: {"kind":"UInt32"},
    hwndParent: Windows.Win32.WindowsAndMessaging.HWND,
    pwszWizardTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    pImportSrc: {"kind""Ptr","child":Windows.Win32.Security.CRYPTUI_WIZ_IMPORT_SRC_INFO},
    hDestCertStore: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptSIPGetSignedDataMsg(
    pSubjectInfo: {"kind""Ptr","child":Windows.Win32.Security.SIP_SUBJECTINFO},
    pdwEncodingType: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwIndex: {"kind":"UInt32"},
    pcbSignedDataMsg: {"kind""Ptr","child":{"kind":"UInt32"}},
    pbSignedDataMsg: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptSIPPutSignedDataMsg(
    pSubjectInfo: {"kind""Ptr","child":Windows.Win32.Security.SIP_SUBJECTINFO},
    dwEncodingType: {"kind":"UInt32"},
    pdwIndex: {"kind""Ptr","child":{"kind":"UInt32"}},
    cbSignedDataMsg: {"kind":"UInt32"},
    pbSignedDataMsg: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptSIPCreateIndirectData(
    pSubjectInfo: {"kind""Ptr","child":Windows.Win32.Security.SIP_SUBJECTINFO},
    pcbIndirectData: {"kind""Ptr","child":{"kind":"UInt32"}},
    pIndirectData: {"kind""Ptr","child":Windows.Win32.Security.SIP_INDIRECT_DATA},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptSIPVerifyIndirectData(
    pSubjectInfo: {"kind""Ptr","child":Windows.Win32.Security.SIP_SUBJECTINFO},
    pIndirectData: {"kind""Ptr","child":Windows.Win32.Security.SIP_INDIRECT_DATA},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptSIPRemoveSignedDataMsg(
    pSubjectInfo: {"kind""Ptr","child":Windows.Win32.Security.SIP_SUBJECTINFO},
    dwIndex: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptSIPLoad(
    pgSubject: {"kind""Ptr","child":Guid},
    dwFlags: {"kind":"UInt32"},
    pSipDispatch: {"kind""Ptr","child":Windows.Win32.Security.SIP_DISPATCH_INFO},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptSIPRetrieveSubjectGuid(
    FileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    hFileIn: Windows.Win32.SystemServices.HANDLE,
    pgSubject: {"kind""Ptr","child":Guid},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptSIPRetrieveSubjectGuidForCatalogFile(
    FileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    hFileIn: Windows.Win32.SystemServices.HANDLE,
    pgSubject: {"kind""Ptr","child":Guid},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptSIPAddProvider(
    psNewProv: {"kind""Ptr","child":Windows.Win32.Security.SIP_ADD_NEWPROVIDER},

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptSIPRemoveProvider(
    pgProv: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptSIPGetCaps(
    pSubjInfo: {"kind""Ptr","child":Windows.Win32.Security.SIP_SUBJECTINFO},
    pCaps: {"kind""Ptr","child":Windows.Win32.Security.SIP_CAP_SET_V3},

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptSIPGetSealedDigest(
    pSubjectInfo: {"kind""Ptr","child":Windows.Win32.Security.SIP_SUBJECTINFO},
    pSig: {"kind""Ptr","child":{"kind":"Byte"}},
    dwSig: {"kind":"UInt32"},
    pbDigest: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbDigest: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATOpen(
    pwszFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    fdwOpenFlags: {"kind":"UInt32"},
    hProv: {"kind":"UIntPtr"},
    dwPublicVersion: {"kind":"UInt32"},
    dwEncodingType: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATClose(
    hCatalog: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATStoreFromHandle(
    hCatalog: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATHandleFromStore(
    pCatStore: {"kind""Ptr","child":Windows.Win32.Security.CRYPTCATSTORE},

// set_last_errror=True (can and should we use this?)
pub extern "WINTRUST" fn CryptCATPersistStore(
    hCatalog: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATGetCatAttrInfo(
    hCatalog: Windows.Win32.SystemServices.HANDLE,
    pwszReferenceTag: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "WINTRUST" fn CryptCATPutCatAttrInfo(
    hCatalog: Windows.Win32.SystemServices.HANDLE,
    pwszReferenceTag: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwAttrTypeAndAction: {"kind":"UInt32"},
    cbData: {"kind":"UInt32"},
    pbData: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATEnumerateCatAttr(
    hCatalog: Windows.Win32.SystemServices.HANDLE,
    pPrevAttr: {"kind""Ptr","child":Windows.Win32.Security.CRYPTCATATTRIBUTE},

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATGetMemberInfo(
    hCatalog: Windows.Win32.SystemServices.HANDLE,
    pwszReferenceTag: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATAllocSortedMemberInfo(
    hCatalog: Windows.Win32.SystemServices.HANDLE,
    pwszReferenceTag: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATFreeSortedMemberInfo(
    hCatalog: Windows.Win32.SystemServices.HANDLE,
    pCatMember: {"kind""Ptr","child":Windows.Win32.Security.CRYPTCATMEMBER},

// set_last_errror=True (can and should we use this?)
pub extern "WINTRUST" fn CryptCATGetAttrInfo(
    hCatalog: Windows.Win32.SystemServices.HANDLE,
    pCatMember: {"kind""Ptr","child":Windows.Win32.Security.CRYPTCATMEMBER},
    pwszReferenceTag: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "WINTRUST" fn CryptCATPutMemberInfo(
    hCatalog: Windows.Win32.SystemServices.HANDLE,
    pwszFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszReferenceTag: {"kind""Ptr","child":{"kind":"UInt16"}},
    pgSubjectType: {"kind""Ptr","child":Guid},
    dwCertVersion: {"kind":"UInt32"},
    cbSIPIndirectData: {"kind":"UInt32"},
    pbSIPIndirectData: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=True (can and should we use this?)
pub extern "WINTRUST" fn CryptCATPutAttrInfo(
    hCatalog: Windows.Win32.SystemServices.HANDLE,
    pCatMember: {"kind""Ptr","child":Windows.Win32.Security.CRYPTCATMEMBER},
    pwszReferenceTag: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwAttrTypeAndAction: {"kind":"UInt32"},
    cbData: {"kind":"UInt32"},
    pbData: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATEnumerateMember(
    hCatalog: Windows.Win32.SystemServices.HANDLE,
    pPrevMember: {"kind""Ptr","child":Windows.Win32.Security.CRYPTCATMEMBER},

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATEnumerateAttr(
    hCatalog: Windows.Win32.SystemServices.HANDLE,
    pCatMember: {"kind""Ptr","child":Windows.Win32.Security.CRYPTCATMEMBER},
    pPrevAttr: {"kind""Ptr","child":Windows.Win32.Security.CRYPTCATATTRIBUTE},

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATCDFOpen(
    pwszFilePath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pfnParseError: Windows.Win32.Security.PFN_CDF_PARSE_ERROR_CALLBACK,

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATCDFClose(
    pCDF: {"kind""Ptr","child":Windows.Win32.Security.CRYPTCATCDF},

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATCDFEnumCatAttributes(
    pCDF: {"kind""Ptr","child":Windows.Win32.Security.CRYPTCATCDF},
    pPrevAttr: {"kind""Ptr","child":Windows.Win32.Security.CRYPTCATATTRIBUTE},
    pfnParseError: Windows.Win32.Security.PFN_CDF_PARSE_ERROR_CALLBACK,

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATCDFEnumMembers(
    pCDF: {"kind""Ptr","child":Windows.Win32.Security.CRYPTCATCDF},
    pPrevMember: {"kind""Ptr","child":Windows.Win32.Security.CRYPTCATMEMBER},
    pfnParseError: Windows.Win32.Security.PFN_CDF_PARSE_ERROR_CALLBACK,

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATCDFEnumAttributes(
    pCDF: {"kind""Ptr","child":Windows.Win32.Security.CRYPTCATCDF},
    pMember: {"kind""Ptr","child":Windows.Win32.Security.CRYPTCATMEMBER},
    pPrevAttr: {"kind""Ptr","child":Windows.Win32.Security.CRYPTCATATTRIBUTE},
    pfnParseError: Windows.Win32.Security.PFN_CDF_PARSE_ERROR_CALLBACK,

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn IsCatalogFile(
    hFile: Windows.Win32.SystemServices.HANDLE,
    pwszFileName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "WINTRUST" fn CryptCATAdminAcquireContext(
    phCatAdmin: {"kind""Ptr","child":{"kind":"IntPtr"}},
    pgSubsystem: {"kind""Ptr","child":Guid},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "WINTRUST" fn CryptCATAdminAcquireContext2(
    phCatAdmin: {"kind""Ptr","child":{"kind":"IntPtr"}},
    pgSubsystem: {"kind""Ptr","child":Guid},
    pwszHashAlgorithm: {"kind""Ptr","child":{"kind":"UInt16"}},
    pStrongHashPolicy: {"kind""Ptr","child":Windows.Win32.Security.CERT_STRONG_SIGN_PARA},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATAdminReleaseContext(
    hCatAdmin: {"kind":"IntPtr"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATAdminReleaseCatalogContext(
    hCatAdmin: {"kind":"IntPtr"},
    hCatInfo: {"kind":"IntPtr"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "WINTRUST" fn CryptCATAdminEnumCatalogFromHash(
    hCatAdmin: {"kind":"IntPtr"},
    pbHash: {"kind""Ptr","child":{"kind":"Byte"}},
    cbHash: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    phPrevCatInfo: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATAdminCalcHashFromFileHandle(
    hFile: Windows.Win32.SystemServices.HANDLE,
    pcbHash: {"kind""Ptr","child":{"kind":"UInt32"}},
    pbHash: {"kind""Ptr","child":{"kind":"Byte"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "WINTRUST" fn CryptCATAdminCalcHashFromFileHandle2(
    hCatAdmin: {"kind":"IntPtr"},
    hFile: Windows.Win32.SystemServices.HANDLE,
    pcbHash: {"kind""Ptr","child":{"kind":"UInt32"}},
    pbHash: {"kind""Ptr","child":{"kind":"Byte"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "WINTRUST" fn CryptCATAdminAddCatalog(
    hCatAdmin: {"kind":"IntPtr"},
    pwszCatalogFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszSelectBaseName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "WINTRUST" fn CryptCATAdminRemoveCatalog(
    hCatAdmin: {"kind":"IntPtr"},
    pwszCatalogFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "WINTRUST" fn CryptCATCatalogInfoFromContext(
    hCatInfo: {"kind":"IntPtr"},
    psCatInfo: {"kind""Ptr","child":Windows.Win32.Security.CATALOG_INFO},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "WINTRUST" fn CryptCATAdminResolveCatalogPath(
    hCatAdmin: {"kind":"IntPtr"},
    pwszCatalogFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    psCatInfo: {"kind""Ptr","child":Windows.Win32.Security.CATALOG_INFO},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATAdminPauseServiceForBackup(
    dwFlags: {"kind":"UInt32"},
    fResume: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SaferGetPolicyInformation(
    dwScopeId: {"kind":"UInt32"},
    SaferPolicyInfoClass: Windows.Win32.Security.SAFER_POLICY_INFO_CLASS,
    InfoBufferSize: {"kind":"UInt32"},
    InfoBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    InfoBufferRetSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SaferSetPolicyInformation(
    dwScopeId: {"kind":"UInt32"},
    SaferPolicyInfoClass: Windows.Win32.Security.SAFER_POLICY_INFO_CLASS,
    InfoBufferSize: {"kind":"UInt32"},
    InfoBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    lpReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SaferCreateLevel(
    dwScopeId: {"kind":"UInt32"},
    dwLevelId: {"kind":"UInt32"},
    OpenFlags: {"kind":"UInt32"},
    pLevelHandle: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.SAFER_LEVEL_HANDLE__}},
    lpReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SaferCloseLevel(
    hLevelHandle: {"kind""Ptr","child":Windows.Win32.Security.SAFER_LEVEL_HANDLE__},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SaferIdentifyLevel(
    dwNumProperties: {"kind":"UInt32"},
    pCodeProperties: {"kind""Ptr","child":Windows.Win32.Security.SAFER_CODE_PROPERTIES_V2},
    pLevelHandle: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.SAFER_LEVEL_HANDLE__}},
    lpReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SaferComputeTokenFromLevel(
    LevelHandle: {"kind""Ptr","child":Windows.Win32.Security.SAFER_LEVEL_HANDLE__},
    InAccessToken: Windows.Win32.SystemServices.HANDLE,
    OutAccessToken: {"kind""Ptr","child":{"kind":"IntPtr"}},
    dwFlags: {"kind":"UInt32"},
    lpReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SaferGetLevelInformation(
    LevelHandle: {"kind""Ptr","child":Windows.Win32.Security.SAFER_LEVEL_HANDLE__},
    dwInfoType: Windows.Win32.Security.SAFER_OBJECT_INFO_CLASS,
    lpQueryBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    dwInBufferSize: {"kind":"UInt32"},
    lpdwOutBufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SaferSetLevelInformation(
    LevelHandle: {"kind""Ptr","child":Windows.Win32.Security.SAFER_LEVEL_HANDLE__},
    dwInfoType: Windows.Win32.Security.SAFER_OBJECT_INFO_CLASS,
    lpQueryBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    dwInBufferSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SaferRecordEventLogEntry(
    hLevel: {"kind""Ptr","child":Windows.Win32.Security.SAFER_LEVEL_HANDLE__},
    szTargetPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn SaferiIsExecutableFileType(
    szFullPathname: {"kind""Ptr","child":{"kind":"UInt16"}},
    bFromShellExecute: {"kind":"Byte"},

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLOpen(
    phSLC: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLClose(
    hSLC: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLInstallProofOfPurchase(
    hSLC: {"kind""Ptr","child":{"kind":"Void"}},
    pwszPKeyAlgorithm: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszPKeyString: {"kind""Ptr","child":{"kind":"UInt16"}},
    cbPKeySpecificData: {"kind":"UInt32"},
    pbPKeySpecificData: {"kind""Ptr","child":{"kind":"Byte"}},
    pPkeyId: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLUninstallProofOfPurchase(
    hSLC: {"kind""Ptr","child":{"kind":"Void"}},
    pPKeyId: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLInstallLicense(
    hSLC: {"kind""Ptr","child":{"kind":"Void"}},
    cbLicenseBlob: {"kind":"UInt32"},
    pbLicenseBlob: {"kind""Ptr","child":{"kind":"Byte"}},
    pLicenseFileId: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLUninstallLicense(
    hSLC: {"kind""Ptr","child":{"kind":"Void"}},
    pLicenseFileId: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLConsumeRight(
    hSLC: {"kind""Ptr","child":{"kind":"Void"}},
    pAppId: {"kind""Ptr","child":Guid},
    pProductSkuId: {"kind""Ptr","child":Guid},
    pwszRightName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGetProductSkuInformation(
    hSLC: {"kind""Ptr","child":{"kind":"Void"}},
    pProductSkuId: {"kind""Ptr","child":Guid},
    pwszValueName: {"kind""Ptr","child":{"kind":"UInt16"}},
    peDataType: {"kind""Ptr","child":Windows.Win32.Security.SLDATATYPE},
    pcbValue: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppbValue: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGetPKeyInformation(
    hSLC: {"kind""Ptr","child":{"kind":"Void"}},
    pPKeyId: {"kind""Ptr","child":Guid},
    pwszValueName: {"kind""Ptr","child":{"kind":"UInt16"}},
    peDataType: {"kind""Ptr","child":Windows.Win32.Security.SLDATATYPE},
    pcbValue: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppbValue: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGetLicenseInformation(
    hSLC: {"kind""Ptr","child":{"kind":"Void"}},
    pSLLicenseId: {"kind""Ptr","child":Guid},
    pwszValueName: {"kind""Ptr","child":{"kind":"UInt16"}},
    peDataType: {"kind""Ptr","child":Windows.Win32.Security.SLDATATYPE},
    pcbValue: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppbValue: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGetLicensingStatusInformation(
    hSLC: {"kind""Ptr","child":{"kind":"Void"}},
    pAppID: {"kind""Ptr","child":Guid},
    pProductSkuId: {"kind""Ptr","child":Guid},
    pwszRightName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pnStatusCount: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppLicensingStatus: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.SL_LICENSING_STATUS}},

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGetPolicyInformation(
    hSLC: {"kind""Ptr","child":{"kind":"Void"}},
    pwszValueName: {"kind""Ptr","child":{"kind":"UInt16"}},
    peDataType: {"kind""Ptr","child":Windows.Win32.Security.SLDATATYPE},
    pcbValue: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppbValue: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGetPolicyInformationDWORD(
    hSLC: {"kind""Ptr","child":{"kind":"Void"}},
    pwszValueName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pdwValue: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGetServiceInformation(
    hSLC: {"kind""Ptr","child":{"kind":"Void"}},
    pwszValueName: {"kind""Ptr","child":{"kind":"UInt16"}},
    peDataType: {"kind""Ptr","child":Windows.Win32.Security.SLDATATYPE},
    pcbValue: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppbValue: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGetApplicationInformation(
    hSLC: {"kind""Ptr","child":{"kind":"Void"}},
    pApplicationId: {"kind""Ptr","child":Guid},
    pwszValueName: {"kind""Ptr","child":{"kind":"UInt16"}},
    peDataType: {"kind""Ptr","child":Windows.Win32.Security.SLDATATYPE},
    pcbValue: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppbValue: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "slcext" fn SLActivateProduct(
    hSLC: {"kind""Ptr","child":{"kind":"Void"}},
    pProductSkuId: {"kind""Ptr","child":Guid},
    cbAppSpecificData: {"kind":"UInt32"},
    pvAppSpecificData: {"kind""Ptr","child":{"kind":"Void"}},
    pActivationInfo: {"kind""Ptr","child":Windows.Win32.Security.SL_ACTIVATION_INFO_HEADER},
    pwszProxyServer: {"kind""Ptr","child":{"kind":"UInt16"}},
    wProxyPort: {"kind":"UInt16"},

// set_last_errror=False (can and should we use this?)
pub extern "slcext" fn SLGetServerStatus(
    pwszServerURL: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszAcquisitionType: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszProxyServer: {"kind""Ptr","child":{"kind":"UInt16"}},
    wProxyPort: {"kind":"UInt16"},
    phrStatus: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGenerateOfflineInstallationId(
    hSLC: {"kind""Ptr","child":{"kind":"Void"}},
    pProductSkuId: {"kind""Ptr","child":Guid},
    ppwszInstallationId: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGenerateOfflineInstallationIdEx(
    hSLC: {"kind""Ptr","child":{"kind":"Void"}},
    pProductSkuId: {"kind""Ptr","child":Guid},
    pActivationInfo: {"kind""Ptr","child":Windows.Win32.Security.SL_ACTIVATION_INFO_HEADER},
    ppwszInstallationId: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLDepositOfflineConfirmationId(
    hSLC: {"kind""Ptr","child":{"kind":"Void"}},
    pProductSkuId: {"kind""Ptr","child":Guid},
    pwszInstallationId: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszConfirmationId: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLDepositOfflineConfirmationIdEx(
    hSLC: {"kind""Ptr","child":{"kind":"Void"}},
    pProductSkuId: {"kind""Ptr","child":Guid},
    pActivationInfo: {"kind""Ptr","child":Windows.Win32.Security.SL_ACTIVATION_INFO_HEADER},
    pwszInstallationId: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszConfirmationId: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGetPKeyId(
    hSLC: {"kind""Ptr","child":{"kind":"Void"}},
    pwszPKeyAlgorithm: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszPKeyString: {"kind""Ptr","child":{"kind":"UInt16"}},
    cbPKeySpecificData: {"kind":"UInt32"},
    pbPKeySpecificData: {"kind""Ptr","child":{"kind":"Byte"}},
    pPKeyId: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGetInstalledProductKeyIds(
    hSLC: {"kind""Ptr","child":{"kind":"Void"}},
    pProductSkuId: {"kind""Ptr","child":Guid},
    pnProductKeyIds: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppProductKeyIds: {"kind""Ptr","child":{"kind""Ptr","child":Guid}},

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLSetCurrentProductKey(
    hSLC: {"kind""Ptr","child":{"kind":"Void"}},
    pProductSkuId: {"kind""Ptr","child":Guid},
    pProductKeyId: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGetSLIDList(
    hSLC: {"kind""Ptr","child":{"kind":"Void"}},
    eQueryIdType: Windows.Win32.Security.SLIDTYPE,
    pQueryId: {"kind""Ptr","child":Guid},
    eReturnIdType: Windows.Win32.Security.SLIDTYPE,
    pnReturnIds: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppReturnIds: {"kind""Ptr","child":{"kind""Ptr","child":Guid}},

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGetLicenseFileId(
    hSLC: {"kind""Ptr","child":{"kind":"Void"}},
    cbLicenseBlob: {"kind":"UInt32"},
    pbLicenseBlob: {"kind""Ptr","child":{"kind":"Byte"}},
    pLicenseFileId: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGetLicense(
    hSLC: {"kind""Ptr","child":{"kind":"Void"}},
    pLicenseFileId: {"kind""Ptr","child":Guid},
    pcbLicenseFile: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppbLicenseFile: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLFireEvent(
    hSLC: {"kind""Ptr","child":{"kind":"Void"}},
    pwszEventId: {"kind""Ptr","child":{"kind":"UInt16"}},
    pApplicationId: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLRegisterEvent(
    hSLC: {"kind""Ptr","child":{"kind":"Void"}},
    pwszEventId: {"kind""Ptr","child":{"kind":"UInt16"}},
    pApplicationId: {"kind""Ptr","child":Guid},
    hEvent: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLUnregisterEvent(
    hSLC: {"kind""Ptr","child":{"kind":"Void"}},
    pwszEventId: {"kind""Ptr","child":{"kind":"UInt16"}},
    pApplicationId: {"kind""Ptr","child":Guid},
    hEvent: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGetWindowsInformation(
    pwszValueName: {"kind""Ptr","child":{"kind":"UInt16"}},
    peDataType: {"kind""Ptr","child":Windows.Win32.Security.SLDATATYPE},
    pcbValue: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppbValue: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGetWindowsInformationDWORD(
    pwszValueName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pdwValue: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SLWGA" fn SLIsGenuineLocal(
    pAppId: {"kind""Ptr","child":Guid},
    pGenuineState: {"kind""Ptr","child":Windows.Win32.Security.SL_GENUINE_STATE},
    pUIOptions: {"kind""Ptr","child":Windows.Win32.Security.SL_NONGENUINE_UI_OPTIONS},

// set_last_errror=False (can and should we use this?)
pub extern "slcext" fn SLAcquireGenuineTicket(
    ppTicketBlob: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pcbTicketBlob: {"kind""Ptr","child":{"kind":"UInt32"}},
    pwszTemplateId: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszServerUrl: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszClientToken: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLSetGenuineInformation(
    pQueryId: {"kind""Ptr","child":Guid},
    pwszValueName: {"kind""Ptr","child":{"kind":"UInt16"}},
    eDataType: Windows.Win32.Security.SLDATATYPE,
    cbValue: {"kind":"UInt32"},
    pbValue: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "slcext" fn SLGetReferralInformation(
    hSLC: {"kind""Ptr","child":{"kind":"Void"}},
    eReferralType: Windows.Win32.Security.SLREFERRALTYPE,
    pSkuOrAppId: {"kind""Ptr","child":Guid},
    pwszValueName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppwszValue: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGetGenuineInformation(
    pQueryId: {"kind""Ptr","child":Guid},
    pwszValueName: {"kind""Ptr","child":{"kind":"UInt16"}},
    peDataType: {"kind""Ptr","child":Windows.Win32.Security.SLDATATYPE},
    pcbValue: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppbValue: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-slapi-l1-1-0" fn SLQueryLicenseValueFromApp(
    valueName: {"kind""Ptr","child":{"kind":"UInt16"}},
    valueType: {"kind""Ptr","child":{"kind":"UInt32"}},
    dataBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    dataSize: {"kind":"UInt32"},
    resultDataSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqCreateSession(
    accessLevel: Windows.Win32.Security.DdqAccessLevel,
    hSession: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION__}},

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqCloseSession(
    hSession: {"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION__},

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetSessionAccessLevel(
    hSession: {"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION__},
    accessLevel: {"kind""Ptr","child":Windows.Win32.Security.DdqAccessLevel},

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticDataAccessLevelAllowed(
    accessLevel: {"kind""Ptr","child":Windows.Win32.Security.DdqAccessLevel},

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordStats(
    hSession: {"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION__},
    searchCriteria: {"kind""Ptr","child":Windows.Win32.Security.DIAGNOSTIC_DATA_SEARCH_CRITERIA},
    recordCount: {"kind""Ptr","child":{"kind":"UInt32"}},
    minRowId: {"kind""Ptr","child":{"kind":"Int64"}},
    maxRowId: {"kind""Ptr","child":{"kind":"Int64"}},

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordPayload(
    hSession: {"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION__},
    rowId: {"kind":"Int64"},
    payload: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordLocaleTags(
    hSession: {"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION__},
    locale: {"kind""Ptr","child":{"kind":"UInt16"}},
    hTagDescription: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_EVENT_TAG_DESCRIPTION__}},

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqFreeDiagnosticRecordLocaleTags(
    hTagDescription: {"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_EVENT_TAG_DESCRIPTION__},

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordLocaleTagAtIndex(
    hTagDescription: {"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_EVENT_TAG_DESCRIPTION__},
    index: {"kind":"UInt32"},
    tagDescription: {"kind""Ptr","child":Windows.Win32.Security.DIAGNOSTIC_DATA_EVENT_TAG_DESCRIPTION},

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordLocaleTagCount(
    hTagDescription: {"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_EVENT_TAG_DESCRIPTION__},
    tagDescriptionCount: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordProducers(
    hSession: {"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION__},
    hProducerDescription: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION__}},

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqFreeDiagnosticRecordProducers(
    hProducerDescription: {"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION__},

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordProducerAtIndex(
    hProducerDescription: {"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION__},
    index: {"kind":"UInt32"},
    producerDescription: {"kind""Ptr","child":Windows.Win32.Security.DIAGNOSTIC_DATA_EVENT_PRODUCER_DESCRIPTION},

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordProducerCount(
    hProducerDescription: {"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION__},
    producerDescriptionCount: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordProducerCategories(
    hSession: {"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION__},
    producerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    hCategoryDescription: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION__}},

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqFreeDiagnosticRecordProducerCategories(
    hCategoryDescription: {"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION__},

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordCategoryAtIndex(
    hCategoryDescription: {"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION__},
    index: {"kind":"UInt32"},
    categoryDescription: {"kind""Ptr","child":Windows.Win32.Security.DIAGNOSTIC_DATA_EVENT_CATEGORY_DESCRIPTION},

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordCategoryCount(
    hCategoryDescription: {"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION__},
    categoryDescriptionCount: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqIsDiagnosticRecordSampledIn(
    hSession: {"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION__},
    providerGroup: {"kind""Ptr","child":Guid},
    providerId: {"kind""Ptr","child":Guid},
    providerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    eventId: {"kind""Ptr","child":{"kind":"UInt32"}},
    eventName: {"kind""Ptr","child":{"kind":"UInt16"}},
    eventVersion: {"kind""Ptr","child":{"kind":"UInt32"}},
    eventKeywords: {"kind""Ptr","child":{"kind":"UInt64"}},
    isSampledIn: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordPage(
    hSession: {"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION__},
    searchCriteria: {"kind""Ptr","child":Windows.Win32.Security.DIAGNOSTIC_DATA_SEARCH_CRITERIA},
    offset: {"kind":"UInt32"},
    pageRecordCount: {"kind":"UInt32"},
    baseRowId: {"kind":"Int64"},
    hRecord: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_RECORD__}},

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqFreeDiagnosticRecordPage(
    hRecord: {"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_RECORD__},

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordAtIndex(
    hRecord: {"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_RECORD__},
    index: {"kind":"UInt32"},
    record: {"kind""Ptr","child":Windows.Win32.Security.DIAGNOSTIC_DATA_RECORD},

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordCount(
    hRecord: {"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_RECORD__},
    recordCount: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticReportStoreReportCount(
    hSession: {"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION__},
    reportStoreType: {"kind":"UInt32"},
    reportCount: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqCancelDiagnosticRecordOperation(
    hSession: {"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION__},

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticReport(
    hSession: {"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION__},
    reportStoreType: {"kind":"UInt32"},
    hReport: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_REPORT__}},

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqFreeDiagnosticReport(
    hReport: {"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_REPORT__},

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticReportAtIndex(
    hReport: {"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_REPORT__},
    index: {"kind":"UInt32"},
    report: {"kind""Ptr","child":Windows.Win32.Security.DIAGNOSTIC_REPORT_DATA},

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticReportCount(
    hReport: {"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_REPORT__},
    reportCount: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqExtractDiagnosticReport(
    hSession: {"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION__},
    reportStoreType: {"kind":"UInt32"},
    reportKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    destinationPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordTagDistribution(
    hSession: {"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION__},
    producerNames: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    producerNameCount: {"kind":"UInt32"},
    tagStats: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.DIAGNOSTIC_DATA_EVENT_TAG_STATS}},
    statCount: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordBinaryDistribution(
    hSession: {"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION__},
    producerNames: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    producerNameCount: {"kind":"UInt32"},
    topNBinaries: {"kind":"UInt32"},
    binaryStats: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.DIAGNOSTIC_DATA_EVENT_BINARY_STATS}},
    statCount: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordSummary(
    hSession: {"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION__},
    producerNames: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    producerNameCount: {"kind":"UInt32"},
    generalStats: {"kind""Ptr","child":Windows.Win32.Security.DIAGNOSTIC_DATA_GENERAL_STATS},

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqSetTranscriptConfiguration(
    hSession: {"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION__},
    desiredConfig: {"kind""Ptr","child":Windows.Win32.Security.DIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATION},

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetTranscriptConfiguration(
    hSession: {"kind""Ptr","child":Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION__},
    currentConfig: {"kind""Ptr","child":Windows.Win32.Security.DIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATION},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SetThreadToken(
    Thread: {"kind""Ptr","child":{"kind":"IntPtr"}},
    Token: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn OpenProcessToken(
    ProcessHandle: Windows.Win32.SystemServices.HANDLE,
    DesiredAccess: {"kind":"UInt32"},
    TokenHandle: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn OpenThreadToken(
    ThreadHandle: Windows.Win32.SystemServices.HANDLE,
    DesiredAccess: {"kind":"UInt32"},
    OpenAsSelf: Windows.Win32.SystemServices.BOOL,
    TokenHandle: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn InstallELAMCertificateInfo(
    ELAMFile: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AccessCheckAndAuditAlarmA(
    SubsystemName: {"kind""Ptr","child":{"kind":"SByte"}},
    HandleId: {"kind""Ptr","child":{"kind":"Void"}},
    ObjectTypeName: {"kind""Ptr","child":{"kind":"SByte"}},
    ObjectName: {"kind""Ptr","child":{"kind":"SByte"}},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    DesiredAccess: {"kind":"UInt32"},
    GenericMapping: {"kind""Ptr","child":Windows.Win32.Security.GENERIC_MAPPING},
    ObjectCreation: Windows.Win32.SystemServices.BOOL,
    GrantedAccess: {"kind""Ptr","child":{"kind":"UInt32"}},
    AccessStatus: {"kind""Ptr","child":{"kind":"Int32"}},
    pfGenerateOnClose: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AccessCheckByTypeAndAuditAlarmA(
    SubsystemName: {"kind""Ptr","child":{"kind":"SByte"}},
    HandleId: {"kind""Ptr","child":{"kind":"Void"}},
    ObjectTypeName: {"kind""Ptr","child":{"kind":"SByte"}},
    ObjectName: {"kind""Ptr","child":{"kind":"SByte"}},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    PrincipalSelfSid: {"kind""Ptr","child":{"kind":"Void"}},
    DesiredAccess: {"kind":"UInt32"},
    AuditType: Windows.Win32.Security.AUDIT_EVENT_TYPE,
    Flags: {"kind":"UInt32"},
    ObjectTypeList: {"kind""Ptr","child":Windows.Win32.Security.OBJECT_TYPE_LIST},
    ObjectTypeListLength: {"kind":"UInt32"},
    GenericMapping: {"kind""Ptr","child":Windows.Win32.Security.GENERIC_MAPPING},
    ObjectCreation: Windows.Win32.SystemServices.BOOL,
    GrantedAccess: {"kind""Ptr","child":{"kind":"UInt32"}},
    AccessStatus: {"kind""Ptr","child":{"kind":"Int32"}},
    pfGenerateOnClose: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AccessCheckByTypeResultListAndAuditAlarmA(
    SubsystemName: {"kind""Ptr","child":{"kind":"SByte"}},
    HandleId: {"kind""Ptr","child":{"kind":"Void"}},
    ObjectTypeName: {"kind""Ptr","child":{"kind":"SByte"}},
    ObjectName: {"kind""Ptr","child":{"kind":"SByte"}},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    PrincipalSelfSid: {"kind""Ptr","child":{"kind":"Void"}},
    DesiredAccess: {"kind":"UInt32"},
    AuditType: Windows.Win32.Security.AUDIT_EVENT_TYPE,
    Flags: {"kind":"UInt32"},
    ObjectTypeList: {"kind""Ptr","child":Windows.Win32.Security.OBJECT_TYPE_LIST},
    ObjectTypeListLength: {"kind":"UInt32"},
    GenericMapping: {"kind""Ptr","child":Windows.Win32.Security.GENERIC_MAPPING},
    ObjectCreation: Windows.Win32.SystemServices.BOOL,
    GrantedAccess: {"kind""Ptr","child":{"kind":"UInt32"}},
    AccessStatusList: {"kind""Ptr","child":{"kind":"UInt32"}},
    pfGenerateOnClose: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AccessCheckByTypeResultListAndAuditAlarmByHandleA(
    SubsystemName: {"kind""Ptr","child":{"kind":"SByte"}},
    HandleId: {"kind""Ptr","child":{"kind":"Void"}},
    ClientToken: Windows.Win32.SystemServices.HANDLE,
    ObjectTypeName: {"kind""Ptr","child":{"kind":"SByte"}},
    ObjectName: {"kind""Ptr","child":{"kind":"SByte"}},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    PrincipalSelfSid: {"kind""Ptr","child":{"kind":"Void"}},
    DesiredAccess: {"kind":"UInt32"},
    AuditType: Windows.Win32.Security.AUDIT_EVENT_TYPE,
    Flags: {"kind":"UInt32"},
    ObjectTypeList: {"kind""Ptr","child":Windows.Win32.Security.OBJECT_TYPE_LIST},
    ObjectTypeListLength: {"kind":"UInt32"},
    GenericMapping: {"kind""Ptr","child":Windows.Win32.Security.GENERIC_MAPPING},
    ObjectCreation: Windows.Win32.SystemServices.BOOL,
    GrantedAccess: {"kind""Ptr","child":{"kind":"UInt32"}},
    AccessStatusList: {"kind""Ptr","child":{"kind":"UInt32"}},
    pfGenerateOnClose: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ObjectOpenAuditAlarmA(
    SubsystemName: {"kind""Ptr","child":{"kind":"SByte"}},
    HandleId: {"kind""Ptr","child":{"kind":"Void"}},
    ObjectTypeName: {"kind""Ptr","child":{"kind":"SByte"}},
    ObjectName: {"kind""Ptr","child":{"kind":"SByte"}},
    pSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    ClientToken: Windows.Win32.SystemServices.HANDLE,
    DesiredAccess: {"kind":"UInt32"},
    GrantedAccess: {"kind":"UInt32"},
    Privileges: {"kind""Ptr","child":Windows.Win32.Security.PRIVILEGE_SET},
    ObjectCreation: Windows.Win32.SystemServices.BOOL,
    AccessGranted: Windows.Win32.SystemServices.BOOL,
    GenerateOnClose: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ObjectPrivilegeAuditAlarmA(
    SubsystemName: {"kind""Ptr","child":{"kind":"SByte"}},
    HandleId: {"kind""Ptr","child":{"kind":"Void"}},
    ClientToken: Windows.Win32.SystemServices.HANDLE,
    DesiredAccess: {"kind":"UInt32"},
    Privileges: {"kind""Ptr","child":Windows.Win32.Security.PRIVILEGE_SET},
    AccessGranted: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ObjectCloseAuditAlarmA(
    SubsystemName: {"kind""Ptr","child":{"kind":"SByte"}},
    HandleId: {"kind""Ptr","child":{"kind":"Void"}},
    GenerateOnClose: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ObjectDeleteAuditAlarmA(
    SubsystemName: {"kind""Ptr","child":{"kind":"SByte"}},
    HandleId: {"kind""Ptr","child":{"kind":"Void"}},
    GenerateOnClose: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn PrivilegedServiceAuditAlarmA(
    SubsystemName: {"kind""Ptr","child":{"kind":"SByte"}},
    ServiceName: {"kind""Ptr","child":{"kind":"SByte"}},
    ClientToken: Windows.Win32.SystemServices.HANDLE,
    Privileges: {"kind""Ptr","child":Windows.Win32.Security.PRIVILEGE_SET},
    AccessGranted: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AddConditionalAce(
    pAcl: {"kind""Ptr","child":Windows.Win32.Security.ACL},
    dwAceRevision: {"kind":"UInt32"},
    AceFlags: {"kind":"UInt32"},
    AceType: {"kind":"Byte"},
    AccessMask: {"kind":"UInt32"},
    pSid: {"kind""Ptr","child":{"kind":"Void"}},
    ConditionStr: {"kind""Ptr","child":{"kind":"UInt16"}},
    ReturnLength: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SetFileSecurityA(
    lpFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    SecurityInformation: {"kind":"UInt32"},
    pSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetFileSecurityA(
    lpFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    RequestedInformation: {"kind":"UInt32"},
    pSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    nLength: {"kind":"UInt32"},
    lpnLengthNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn LookupAccountSidA(
    lpSystemName: {"kind""Ptr","child":{"kind":"SByte"}},
    Sid: {"kind""Ptr","child":{"kind":"Void"}},
    Name: {"kind""Ptr","child":{"kind":"SByte"}},
    cchName: {"kind""Ptr","child":{"kind":"UInt32"}},
    ReferencedDomainName: {"kind""Ptr","child":{"kind":"SByte"}},
    cchReferencedDomainName: {"kind""Ptr","child":{"kind":"UInt32"}},
    peUse: {"kind""Ptr","child":Windows.Win32.Security.SID_NAME_USE},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn LookupAccountSidW(
    lpSystemName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Sid: {"kind""Ptr","child":{"kind":"Void"}},
    Name: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchName: {"kind""Ptr","child":{"kind":"UInt32"}},
    ReferencedDomainName: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchReferencedDomainName: {"kind""Ptr","child":{"kind":"UInt32"}},
    peUse: {"kind""Ptr","child":Windows.Win32.Security.SID_NAME_USE},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn LookupAccountNameA(
    lpSystemName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpAccountName: {"kind""Ptr","child":{"kind":"SByte"}},
    Sid: {"kind""Ptr","child":{"kind":"Void"}},
    cbSid: {"kind""Ptr","child":{"kind":"UInt32"}},
    ReferencedDomainName: {"kind""Ptr","child":{"kind":"SByte"}},
    cchReferencedDomainName: {"kind""Ptr","child":{"kind":"UInt32"}},
    peUse: {"kind""Ptr","child":Windows.Win32.Security.SID_NAME_USE},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn LookupAccountNameW(
    lpSystemName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpAccountName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Sid: {"kind""Ptr","child":{"kind":"Void"}},
    cbSid: {"kind""Ptr","child":{"kind":"UInt32"}},
    ReferencedDomainName: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchReferencedDomainName: {"kind""Ptr","child":{"kind":"UInt32"}},
    peUse: {"kind""Ptr","child":Windows.Win32.Security.SID_NAME_USE},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn LookupPrivilegeValueA(
    lpSystemName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpLuid: {"kind""Ptr","child":Windows.Win32.Kernel.LUID},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn LookupPrivilegeValueW(
    lpSystemName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpLuid: {"kind""Ptr","child":Windows.Win32.Kernel.LUID},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn LookupPrivilegeNameA(
    lpSystemName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpLuid: {"kind""Ptr","child":Windows.Win32.Kernel.LUID},
    lpName: {"kind""Ptr","child":{"kind":"SByte"}},
    cchName: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn LookupPrivilegeNameW(
    lpSystemName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpLuid: {"kind""Ptr","child":Windows.Win32.Kernel.LUID},
    lpName: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchName: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn LookupPrivilegeDisplayNameA(
    lpSystemName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpDisplayName: {"kind""Ptr","child":{"kind":"SByte"}},
    cchDisplayName: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpLanguageId: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn LookupPrivilegeDisplayNameW(
    lpSystemName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpDisplayName: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchDisplayName: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpLanguageId: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn LogonUserA(
    lpszUsername: {"kind""Ptr","child":{"kind":"SByte"}},
    lpszDomain: {"kind""Ptr","child":{"kind":"SByte"}},
    lpszPassword: {"kind""Ptr","child":{"kind":"SByte"}},
    dwLogonType: {"kind":"UInt32"},
    dwLogonProvider: {"kind":"UInt32"},
    phToken: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn LogonUserW(
    lpszUsername: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpszDomain: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpszPassword: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwLogonType: {"kind":"UInt32"},
    dwLogonProvider: {"kind":"UInt32"},
    phToken: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn LogonUserExA(
    lpszUsername: {"kind""Ptr","child":{"kind":"SByte"}},
    lpszDomain: {"kind""Ptr","child":{"kind":"SByte"}},
    lpszPassword: {"kind""Ptr","child":{"kind":"SByte"}},
    dwLogonType: {"kind":"UInt32"},
    dwLogonProvider: {"kind":"UInt32"},
    phToken: {"kind""Ptr","child":{"kind":"IntPtr"}},
    ppLogonSid: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    ppProfileBuffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pdwProfileLength: {"kind""Ptr","child":{"kind":"UInt32"}},
    pQuotaLimits: {"kind""Ptr","child":Windows.Win32.Security.QUOTA_LIMITS},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn LogonUserExW(
    lpszUsername: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpszDomain: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpszPassword: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwLogonType: {"kind":"UInt32"},
    dwLogonProvider: {"kind":"UInt32"},
    phToken: {"kind""Ptr","child":{"kind":"IntPtr"}},
    ppLogonSid: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    ppProfileBuffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pdwProfileLength: {"kind""Ptr","child":{"kind":"UInt32"}},
    pQuotaLimits: {"kind""Ptr","child":Windows.Win32.Security.QUOTA_LIMITS},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegGetKeySecurity(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    SecurityInformation: {"kind":"UInt32"},
    pSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    lpcbSecurityDescriptor: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegSetKeySecurity(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    SecurityInformation: {"kind":"UInt32"},
    pSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlConvertSidToUnicodeString(
    UnicodeString: {"kind""Ptr","child":Windows.Win32.Security.UNICODE_STRING},
    Sid: {"kind""Ptr","child":{"kind":"Void"}},
    AllocateDestinationString: {"kind":"Byte"},
],

"unicode_aliases": [
     "CRYPT_PASSWORD_CREDENTIALS"
     "SCARD_READERSTATE"
     "LPOCNCONNPROC"
     "OPENCARD_SEARCH_CRITERIA"
     "OPENCARDNAME_EX"
     "OPENCARDNAME"
     "SERVICE_DESCRIPTION"
     "SERVICE_FAILURE_ACTIONS"
     "SERVICE_REQUIRED_PRIVILEGES_INFO"
     "ENUM_SERVICE_STATUS"
     "ENUM_SERVICE_STATUS_PROCESS"
     "QUERY_SERVICE_LOCK_STATUS"
     "QUERY_SERVICE_CONFIG"
     "SERVICE_MAIN_FUNCTION"
     "LPSERVICE_MAIN_FUNCTION"
     "SERVICE_TABLE_ENTRY"
     "SERVICE_NOTIFY_2"
     "SERVICE_CONTROL_STATUS_REASON_PARAMS"
     "SecPkgInfo"
     "SecPkgCredentials_Names"
     "SecPkgCredentials_SSIProvider"
     "SecPkgContext_Names"
     "SecPkgContext_KeyInfo"
     "SecPkgContext_Authority"
     "SecPkgContext_ProtoInfo"
     "SecPkgContext_PackageInfo"
     "SecPkgContext_NegotiationInfo"
     "SecPkgContext_NativeNames"
     "SecPkgContext_CredentialName"
     "ACQUIRE_CREDENTIALS_HANDLE_FN_"
     "ADD_CREDENTIALS_FN_"
     "CHANGE_PASSWORD_FN_"
     "INITIALIZE_SECURITY_CONTEXT_FN_"
     "QUERY_CONTEXT_ATTRIBUTES_FN_"
     "QUERY_CONTEXT_ATTRIBUTES_EX_FN_"
     "SET_CONTEXT_ATTRIBUTES_FN_"
     "QUERY_CREDENTIALS_ATTRIBUTES_FN_"
     "QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_"
     "SET_CREDENTIALS_ATTRIBUTES_FN_"
     "ENUMERATE_SECURITY_PACKAGES_FN_"
     "QUERY_SECURITY_PACKAGE_INFO_FN_"
     "IMPORT_SECURITY_CONTEXT_FN_"
     "SecurityFunctionTable"
     "INIT_SECURITY_INTERFACE_"
     "SEC_WINNT_AUTH_IDENTITY_EX"
     "CREDENTIAL_ATTRIBUTE"
     "CREDENTIAL"
     "CREDENTIAL_TARGET_INFORMATION"
     "CREDUI_INFO"
     "SSL_EMPTY_CACHE_FN_"
     "OBJECTS_AND_NAME_"
     "TRUSTEE_"
     "EXPLICIT_ACCESS_"
     "TRUSTEE_ACCESS"
     "ACTRL_ACCESS_INFO"
     "ACTRL_CONTROL_INFO"
     "INHERITED_FROM"
     "CERT_SELECT_STRUCT_"
     "CERT_VIEWPROPERTIES_STRUCT_"
     "CRYPTUI_VIEWCERTIFICATE_STRUCT"
     "SEC_WINNT_AUTH_IDENTITY_"
     "NETRESOURCE"
     "UNIVERSAL_NAME_INFO"
     "REMOTE_NAME_INFO"
     "AccessCheckAndAuditAlarm"
     "AccessCheckByTypeAndAuditAlarm"
     "AccessCheckByTypeResultListAndAuditAlarm"
     "AccessCheckByTypeResultListAndAuditAlarmByHandle"
     "GetFileSecurity"
     "ObjectCloseAuditAlarm"
     "ObjectDeleteAuditAlarm"
     "ObjectOpenAuditAlarm"
     "ObjectPrivilegeAuditAlarm"
     "PrivilegedServiceAuditAlarm"
     "SetFileSecurity"
     "CryptAcquireContext"
     "CryptSignHash"
     "CryptVerifySignature"
     "CryptSetProvider"
     "CryptSetProviderEx"
     "CryptGetDefaultProvider"
     "CryptEnumProviderTypes"
     "CryptEnumProviders"
     "CertRDNValueToStr"
     "CertNameToStr"
     "CertStrToName"
     "CertGetNameString"
     "CertOpenSystemStore"
     "CertAddEncodedCertificateToSystemStore"
     "CryptRetrieveObjectByUrl"
     "CryptStringToBinary"
     "CryptBinaryToString"
     "SCardListReaderGroups"
     "SCardListReaders"
     "SCardListCards"
     "SCardListInterfaces"
     "SCardGetProviderId"
     "SCardGetCardTypeProviderName"
     "SCardIntroduceReaderGroup"
     "SCardForgetReaderGroup"
     "SCardIntroduceReader"
     "SCardForgetReader"
     "SCardAddReaderToGroup"
     "SCardRemoveReaderFromGroup"
     "SCardIntroduceCardType"
     "SCardSetCardTypeProviderName"
     "SCardForgetCardType"
     "SCardLocateCards"
     "SCardLocateCardsByATR"
     "SCardGetStatusChange"
     "SCardConnect"
     "SCardStatus"
     "SCardUIDlgSelectCard"
     "GetOpenCardName"
     "SCardReadCache"
     "SCardWriteCache"
     "SCardGetReaderIcon"
     "SCardGetDeviceTypeId"
     "SCardGetReaderDeviceInstanceId"
     "SCardListReadersWithDeviceInstanceId"
     "ChangeServiceConfig2"
     "EnumDependentServices"
     "EnumServicesStatus"
     "EnumServicesStatusEx"
     "GetServiceKeyName"
     "GetServiceDisplayName"
     "OpenSCManager"
     "OpenService"
     "QueryServiceConfig"
     "QueryServiceConfig2"
     "QueryServiceLockStatus"
     "RegisterServiceCtrlHandler"
     "RegisterServiceCtrlHandlerEx"
     "StartServiceCtrlDispatcher"
     "StartService"
     "NotifyServiceStatusChange"
     "ControlServiceEx"
     "AuditLookupCategoryName"
     "AuditLookupSubCategoryName"
     "AuditSetGlobalSacl"
     "AuditQueryGlobalSacl"
     "AcquireCredentialsHandle"
     "AddCredentials"
     "ChangeAccountPassword"
     "InitializeSecurityContext"
     "QueryContextAttributes"
     "QueryContextAttributesEx"
     "SetContextAttributes"
     "QueryCredentialsAttributes"
     "QueryCredentialsAttributesEx"
     "SetCredentialsAttributes"
     "EnumerateSecurityPackages"
     "QuerySecurityPackageInfo"
     "ImportSecurityContext"
     "InitSecurityInterface"
     "SaslEnumerateProfiles"
     "SaslGetProfilePackage"
     "SaslIdentifyPackage"
     "SaslInitializeSecurityContext"
     "SspiPromptForCredentials"
     "AddSecurityPackage"
     "DeleteSecurityPackage"
     "CredWrite"
     "CredRead"
     "CredEnumerate"
     "CredWriteDomainCredentials"
     "CredReadDomainCredentials"
     "CredDelete"
     "CredRename"
     "CredGetTargetInfo"
     "CredMarshalCredential"
     "CredUnmarshalCredential"
     "CredIsMarshaledCredential"
     "CredUnPackAuthenticationBuffer"
     "CredPackAuthenticationBuffer"
     "CredProtect"
     "CredUnprotect"
     "CredIsProtected"
     "CredFindBestCredential"
     "CredUIPromptForCredentials"
     "CredUIPromptForWindowsCredentials"
     "CredUIParseUserName"
     "CredUICmdLinePromptForCredentials"
     "CredUIConfirmCredentials"
     "SslEmptyCache"
     "WNetSetLastError"
     "SetEntriesInAcl"
     "GetExplicitEntriesFromAcl"
     "GetEffectiveRightsFromAcl"
     "GetAuditedPermissionsFromAcl"
     "GetNamedSecurityInfo"
     "SetNamedSecurityInfo"
     "GetInheritanceSource"
     "TreeResetNamedSecurityInfo"
     "TreeSetNamedSecurityInfo"
     "BuildSecurityDescriptor"
     "LookupSecurityDescriptorParts"
     "BuildExplicitAccessWithName"
     "BuildImpersonateExplicitAccessWithName"
     "BuildTrusteeWithName"
     "BuildImpersonateTrustee"
     "BuildTrusteeWithSid"
     "BuildTrusteeWithObjectsAndSid"
     "BuildTrusteeWithObjectsAndName"
     "GetTrusteeName"
     "GetTrusteeType"
     "GetTrusteeForm"
     "GetMultipleTrusteeOperation"
     "GetMultipleTrustee"
     "ConvertSidToStringSid"
     "ConvertStringSidToSid"
     "ConvertStringSecurityDescriptorToSecurityDescriptor"
     "ConvertSecurityDescriptorToStringSecurityDescriptor"
     "CryptUIDlgViewCertificate"
     "LookupAccountSid"
     "LookupAccountName"
     "LookupPrivilegeValue"
     "LookupPrivilegeName"
     "LookupPrivilegeDisplayName"
     "LogonUser"
     "LogonUserEx"
]}
