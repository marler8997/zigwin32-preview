{
"constants": [
],

"types_definitions": [
// --------------------------------------------------------
// Type: EDITWORDBREAKPROCA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EDITWORDBREAKPROCA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: EDITWORDBREAKPROCW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EDITWORDBREAKPROCW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: NMHDR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMHDR = extern struct {
    hwndFrom: Windows.Win32.WindowsAndMessaging.HWND,
    idFrom: {"kind":"UIntPtr"},
    code: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MEASUREITEMSTRUCT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MEASUREITEMSTRUCT = extern struct {
    CtlType: {"kind":"UInt32"},
    CtlID: {"kind":"UInt32"},
    itemID: {"kind":"UInt32"},
    itemWidth: {"kind":"UInt32"},
    itemHeight: {"kind":"UInt32"},
    itemData: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: DRAWITEMSTRUCT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DRAWITEMSTRUCT = extern struct {
    CtlType: {"kind":"UInt32"},
    CtlID: {"kind":"UInt32"},
    itemID: {"kind":"UInt32"},
    itemAction: {"kind":"UInt32"},
    itemState: {"kind":"UInt32"},
    hwndItem: Windows.Win32.WindowsAndMessaging.HWND,
    hDC: Windows.Win32.Gdi.HDC,
    rcItem: Windows.Win32.DisplayDevices.RECT,
    itemData: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: DELETEITEMSTRUCT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DELETEITEMSTRUCT = extern struct {
    CtlType: {"kind":"UInt32"},
    CtlID: {"kind":"UInt32"},
    itemID: {"kind":"UInt32"},
    hwndItem: Windows.Win32.WindowsAndMessaging.HWND,
    itemData: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: COMPAREITEMSTRUCT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COMPAREITEMSTRUCT = extern struct {
    CtlType: {"kind":"UInt32"},
    CtlID: {"kind":"UInt32"},
    hwndItem: Windows.Win32.WindowsAndMessaging.HWND,
    itemID1: {"kind":"UInt32"},
    itemData1: {"kind":"UIntPtr"},
    itemID2: {"kind":"UInt32"},
    itemData2: {"kind":"UIntPtr"},
    dwLocaleId: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: POINTER_FEEDBACK_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const POINTER_FEEDBACK_MODE = *opaque{
};
// --------------------------------------------------------
// Type: USAGE_PROPERTIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USAGE_PROPERTIES = extern struct {
    level: {"kind":"UInt16"},
    page: {"kind":"UInt16"},
    usage: {"kind":"UInt16"},
    logicalMinimum: {"kind":"Int32"},
    logicalMaximum: {"kind":"Int32"},
    unit: {"kind":"UInt16"},
    exponent: {"kind":"UInt16"},
    count: {"kind":"Byte"},
    physicalMinimum: {"kind":"Int32"},
    physicalMaximum: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: POINTER_TYPE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POINTER_TYPE_INFO = extern struct {
    type: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Controls.POINTER_TYPE_INFO+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: INPUT_INJECTION_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INPUT_INJECTION_VALUE = extern struct {
    page: {"kind":"UInt16"},
    usage: {"kind":"UInt16"},
    value: {"kind":"Int32"},
    index: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: TOUCH_HIT_TESTING_PROXIMITY_EVALUATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOUCH_HIT_TESTING_PROXIMITY_EVALUATION = extern struct {
    score: {"kind":"UInt16"},
    adjustedPoint: Windows.Win32.DisplayDevices.POINT,
};
// --------------------------------------------------------
// Type: TOUCH_HIT_TESTING_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOUCH_HIT_TESTING_INPUT = extern struct {
    pointerId: {"kind":"UInt32"},
    point: Windows.Win32.DisplayDevices.POINT,
    boundingBox: Windows.Win32.DisplayDevices.RECT,
    nonOccludedBoundingBox: Windows.Win32.DisplayDevices.RECT,
    orientation: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: FEEDBACK_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FEEDBACK_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: SCROLLINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCROLLINFO = extern struct {
    cbSize: {"kind":"UInt32"},
    fMask: {"kind":"UInt32"},
    nMin: {"kind":"Int32"},
    nMax: {"kind":"Int32"},
    nPage: {"kind":"UInt32"},
    nPos: {"kind":"Int32"},
    nTrackPos: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: SCROLLBARINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCROLLBARINFO = extern struct {
    cbSize: {"kind":"UInt32"},
    rcScrollBar: Windows.Win32.DisplayDevices.RECT,
    dxyLineButton: {"kind":"Int32"},
    xyThumbTop: {"kind":"Int32"},
    xyThumbBottom: {"kind":"Int32"},
    reserved: {"kind":"Int32"},
    rgstate: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: COMBOBOXINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COMBOBOXINFO = extern struct {
    cbSize: {"kind":"UInt32"},
    rcItem: Windows.Win32.DisplayDevices.RECT,
    rcButton: Windows.Win32.DisplayDevices.RECT,
    stateButton: {"kind":"UInt32"},
    hwndCombo: Windows.Win32.WindowsAndMessaging.HWND,
    hwndItem: Windows.Win32.WindowsAndMessaging.HWND,
    hwndList: Windows.Win32.WindowsAndMessaging.HWND,
};
// --------------------------------------------------------
// Type: POINTER_DEVICE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const POINTER_DEVICE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: POINTER_DEVICE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POINTER_DEVICE_INFO = extern struct {
    displayOrientation: {"kind":"UInt32"},
    device: Windows.Win32.SystemServices.HANDLE,
    pointerDeviceType: Windows.Win32.Controls.POINTER_DEVICE_TYPE,
    monitor: {"kind":"IntPtr"},
    startingCursorId: {"kind":"UInt32"},
    maxActiveContacts: {"kind":"UInt16"},
    productString: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: POINTER_DEVICE_PROPERTY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POINTER_DEVICE_PROPERTY = extern struct {
    logicalMin: {"kind":"Int32"},
    logicalMax: {"kind":"Int32"},
    physicalMin: {"kind":"Int32"},
    physicalMax: {"kind":"Int32"},
    unit: {"kind":"UInt32"},
    unitExponent: {"kind":"UInt32"},
    usagePageId: {"kind":"UInt16"},
    usageId: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: POINTER_DEVICE_CURSOR_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const POINTER_DEVICE_CURSOR_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: POINTER_DEVICE_CURSOR_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POINTER_DEVICE_CURSOR_INFO = extern struct {
    cursorId: {"kind":"UInt32"},
    cursor: Windows.Win32.Controls.POINTER_DEVICE_CURSOR_TYPE,
};
// --------------------------------------------------------
// Type: INPUT_MESSAGE_DEVICE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const INPUT_MESSAGE_DEVICE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: INPUT_MESSAGE_ORIGIN_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const INPUT_MESSAGE_ORIGIN_ID = *opaque{
};
// --------------------------------------------------------
// Type: INPUT_MESSAGE_SOURCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INPUT_MESSAGE_SOURCE = extern struct {
    deviceType: Windows.Win32.Controls.INPUT_MESSAGE_DEVICE_TYPE,
    originId: Windows.Win32.Controls.INPUT_MESSAGE_ORIGIN_ID,
};
// --------------------------------------------------------
// Type: HIMAGELIST
// TypeLayoutAttr: sequential
// RAIIFree 'ImageList_Destroy' (TODO: can we use this information?)
pub const HIMAGELIST = {"kind":"IntPtr"};
// --------------------------------------------------------
// Type: HPROPSHEETPAGE
// TypeLayoutAttr: sequential
// RAIIFree 'DestroyPropertySheetPage' (TODO: can we use this information?)
pub const HPROPSHEETPAGE = {"kind":"IntPtr"};
// --------------------------------------------------------
// Type: CRGB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRGB = extern struct {
    bRed: {"kind":"Byte"},
    bGreen: {"kind":"Byte"},
    bBlue: {"kind":"Byte"},
    bExtra: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: _PSP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _PSP = opaque {
};
// --------------------------------------------------------
// Type: LPFNPSPCALLBACKA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFNPSPCALLBACKA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPFNPSPCALLBACKW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFNPSPCALLBACKW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PROPSHEETPAGEA_V1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROPSHEETPAGEA_V1 = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    Anonymous1: Windows.Win32.Controls.PROPSHEETPAGEA_V1+_Anonymous1_e__Union,
    Anonymous2: Windows.Win32.Controls.PROPSHEETPAGEA_V1+_Anonymous2_e__Union,
    pszTitle: {"kind""Ptr","child":{"kind":"SByte"}},
    pfnDlgProc: Windows.Win32.WindowsAndMessaging.DLGPROC,
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
    pfnCallback: Windows.Win32.Controls.LPFNPSPCALLBACKA,
    pcRefParent: {"kind""Ptr","child":{"kind":"UInt32"}},
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PROPSHEETPAGEA_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROPSHEETPAGEA_V2 = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    Anonymous1: Windows.Win32.Controls.PROPSHEETPAGEA_V2+_Anonymous1_e__Union,
    Anonymous2: Windows.Win32.Controls.PROPSHEETPAGEA_V2+_Anonymous2_e__Union,
    pszTitle: {"kind""Ptr","child":{"kind":"SByte"}},
    pfnDlgProc: Windows.Win32.WindowsAndMessaging.DLGPROC,
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
    pfnCallback: Windows.Win32.Controls.LPFNPSPCALLBACKA,
    pcRefParent: {"kind""Ptr","child":{"kind":"UInt32"}},
    pszHeaderTitle: {"kind""Ptr","child":{"kind":"SByte"}},
    pszHeaderSubTitle: {"kind""Ptr","child":{"kind":"SByte"}},
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PROPSHEETPAGEA_V3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROPSHEETPAGEA_V3 = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    Anonymous1: Windows.Win32.Controls.PROPSHEETPAGEA_V3+_Anonymous1_e__Union,
    Anonymous2: Windows.Win32.Controls.PROPSHEETPAGEA_V3+_Anonymous2_e__Union,
    pszTitle: {"kind""Ptr","child":{"kind":"SByte"}},
    pfnDlgProc: Windows.Win32.WindowsAndMessaging.DLGPROC,
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
    pfnCallback: Windows.Win32.Controls.LPFNPSPCALLBACKA,
    pcRefParent: {"kind""Ptr","child":{"kind":"UInt32"}},
    pszHeaderTitle: {"kind""Ptr","child":{"kind":"SByte"}},
    pszHeaderSubTitle: {"kind""Ptr","child":{"kind":"SByte"}},
    hActCtx: Windows.Win32.SystemServices.HANDLE,
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PROPSHEETPAGEA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROPSHEETPAGEA = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    Anonymous1: Windows.Win32.Controls.PROPSHEETPAGEA+_Anonymous1_e__Union,
    Anonymous2: Windows.Win32.Controls.PROPSHEETPAGEA+_Anonymous2_e__Union,
    pszTitle: {"kind""Ptr","child":{"kind":"SByte"}},
    pfnDlgProc: Windows.Win32.WindowsAndMessaging.DLGPROC,
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
    pfnCallback: Windows.Win32.Controls.LPFNPSPCALLBACKA,
    pcRefParent: {"kind""Ptr","child":{"kind":"UInt32"}},
    pszHeaderTitle: {"kind""Ptr","child":{"kind":"SByte"}},
    pszHeaderSubTitle: {"kind""Ptr","child":{"kind":"SByte"}},
    hActCtx: Windows.Win32.SystemServices.HANDLE,
    Anonymous3: Windows.Win32.Controls.PROPSHEETPAGEA+_Anonymous3_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous3_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous3_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PROPSHEETPAGEW_V1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROPSHEETPAGEW_V1 = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    Anonymous1: Windows.Win32.Controls.PROPSHEETPAGEW_V1+_Anonymous1_e__Union,
    Anonymous2: Windows.Win32.Controls.PROPSHEETPAGEW_V1+_Anonymous2_e__Union,
    pszTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    pfnDlgProc: Windows.Win32.WindowsAndMessaging.DLGPROC,
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
    pfnCallback: Windows.Win32.Controls.LPFNPSPCALLBACKW,
    pcRefParent: {"kind""Ptr","child":{"kind":"UInt32"}},
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PROPSHEETPAGEW_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROPSHEETPAGEW_V2 = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    Anonymous1: Windows.Win32.Controls.PROPSHEETPAGEW_V2+_Anonymous1_e__Union,
    Anonymous2: Windows.Win32.Controls.PROPSHEETPAGEW_V2+_Anonymous2_e__Union,
    pszTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    pfnDlgProc: Windows.Win32.WindowsAndMessaging.DLGPROC,
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
    pfnCallback: Windows.Win32.Controls.LPFNPSPCALLBACKW,
    pcRefParent: {"kind""Ptr","child":{"kind":"UInt32"}},
    pszHeaderTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszHeaderSubTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PROPSHEETPAGEW_V3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROPSHEETPAGEW_V3 = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    Anonymous1: Windows.Win32.Controls.PROPSHEETPAGEW_V3+_Anonymous1_e__Union,
    Anonymous2: Windows.Win32.Controls.PROPSHEETPAGEW_V3+_Anonymous2_e__Union,
    pszTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    pfnDlgProc: Windows.Win32.WindowsAndMessaging.DLGPROC,
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
    pfnCallback: Windows.Win32.Controls.LPFNPSPCALLBACKW,
    pcRefParent: {"kind""Ptr","child":{"kind":"UInt32"}},
    pszHeaderTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszHeaderSubTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    hActCtx: Windows.Win32.SystemServices.HANDLE,
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PROPSHEETPAGEW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROPSHEETPAGEW = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    Anonymous1: Windows.Win32.Controls.PROPSHEETPAGEW+_Anonymous1_e__Union,
    Anonymous2: Windows.Win32.Controls.PROPSHEETPAGEW+_Anonymous2_e__Union,
    pszTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    pfnDlgProc: Windows.Win32.WindowsAndMessaging.DLGPROC,
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
    pfnCallback: Windows.Win32.Controls.LPFNPSPCALLBACKW,
    pcRefParent: {"kind""Ptr","child":{"kind":"UInt32"}},
    pszHeaderTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszHeaderSubTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    hActCtx: Windows.Win32.SystemServices.HANDLE,
    Anonymous3: Windows.Win32.Controls.PROPSHEETPAGEW+_Anonymous3_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous3_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous3_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PFNPROPSHEETCALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNPROPSHEETCALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PROPSHEETHEADERA_V1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROPSHEETHEADERA_V1 = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    hwndParent: Windows.Win32.WindowsAndMessaging.HWND,
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    Anonymous1: Windows.Win32.Controls.PROPSHEETHEADERA_V1+_Anonymous1_e__Union,
    pszCaption: {"kind""Ptr","child":{"kind":"SByte"}},
    nPages: {"kind":"UInt32"},
    Anonymous2: Windows.Win32.Controls.PROPSHEETHEADERA_V1+_Anonymous2_e__Union,
    Anonymous3: Windows.Win32.Controls.PROPSHEETHEADERA_V1+_Anonymous3_e__Union,
    pfnCallback: Windows.Win32.Controls.PFNPROPSHEETCALLBACK,
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous3_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous3_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PROPSHEETHEADERA_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROPSHEETHEADERA_V2 = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    hwndParent: Windows.Win32.WindowsAndMessaging.HWND,
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    Anonymous1: Windows.Win32.Controls.PROPSHEETHEADERA_V2+_Anonymous1_e__Union,
    pszCaption: {"kind""Ptr","child":{"kind":"SByte"}},
    nPages: {"kind":"UInt32"},
    Anonymous2: Windows.Win32.Controls.PROPSHEETHEADERA_V2+_Anonymous2_e__Union,
    Anonymous3: Windows.Win32.Controls.PROPSHEETHEADERA_V2+_Anonymous3_e__Union,
    pfnCallback: Windows.Win32.Controls.PFNPROPSHEETCALLBACK,
    Anonymous4: Windows.Win32.Controls.PROPSHEETHEADERA_V2+_Anonymous4_e__Union,
    hplWatermark: Windows.Win32.Gdi.HPALETTE,
    Anonymous5: Windows.Win32.Controls.PROPSHEETHEADERA_V2+_Anonymous5_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous5_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous5_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous3_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous3_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous4_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous4_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PROPSHEETHEADERW_V1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROPSHEETHEADERW_V1 = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    hwndParent: Windows.Win32.WindowsAndMessaging.HWND,
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    Anonymous1: Windows.Win32.Controls.PROPSHEETHEADERW_V1+_Anonymous1_e__Union,
    pszCaption: {"kind""Ptr","child":{"kind":"UInt16"}},
    nPages: {"kind":"UInt32"},
    Anonymous2: Windows.Win32.Controls.PROPSHEETHEADERW_V1+_Anonymous2_e__Union,
    Anonymous3: Windows.Win32.Controls.PROPSHEETHEADERW_V1+_Anonymous3_e__Union,
    pfnCallback: Windows.Win32.Controls.PFNPROPSHEETCALLBACK,
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous3_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous3_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PROPSHEETHEADERW_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROPSHEETHEADERW_V2 = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    hwndParent: Windows.Win32.WindowsAndMessaging.HWND,
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    Anonymous1: Windows.Win32.Controls.PROPSHEETHEADERW_V2+_Anonymous1_e__Union,
    pszCaption: {"kind""Ptr","child":{"kind":"UInt16"}},
    nPages: {"kind":"UInt32"},
    Anonymous2: Windows.Win32.Controls.PROPSHEETHEADERW_V2+_Anonymous2_e__Union,
    Anonymous3: Windows.Win32.Controls.PROPSHEETHEADERW_V2+_Anonymous3_e__Union,
    pfnCallback: Windows.Win32.Controls.PFNPROPSHEETCALLBACK,
    Anonymous4: Windows.Win32.Controls.PROPSHEETHEADERW_V2+_Anonymous4_e__Union,
    hplWatermark: Windows.Win32.Gdi.HPALETTE,
    Anonymous5: Windows.Win32.Controls.PROPSHEETHEADERW_V2+_Anonymous5_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous5_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous5_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous3_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous3_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous4_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous4_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: LPFNADDPROPSHEETPAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFNADDPROPSHEETPAGE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPFNADDPROPSHEETPAGES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFNADDPROPSHEETPAGES = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PSHNOTIFY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PSHNOTIFY = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
};
// --------------------------------------------------------
// Type: INITCOMMONCONTROLSEX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INITCOMMONCONTROLSEX = extern struct {
    dwSize: {"kind":"UInt32"},
    dwICC: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: COLORSCHEME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COLORSCHEME = extern struct {
    dwSize: {"kind":"UInt32"},
    clrBtnHighlight: {"kind":"UInt32"},
    clrBtnShadow: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NMTOOLTIPSCREATED
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMTOOLTIPSCREATED = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    hwndToolTips: Windows.Win32.WindowsAndMessaging.HWND,
};
// --------------------------------------------------------
// Type: NMMOUSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMMOUSE = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    dwItemSpec: {"kind":"UIntPtr"},
    dwItemData: {"kind":"UIntPtr"},
    pt: Windows.Win32.DisplayDevices.POINT,
    dwHitInfo: Windows.Win32.WindowsAndMessaging.LPARAM,
};
// --------------------------------------------------------
// Type: NMOBJECTNOTIFY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMOBJECTNOTIFY = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    iItem: {"kind":"Int32"},
    piid: {"kind""Ptr","child":Guid},
    pObject: {"kind""Ptr","child":{"kind":"Void"}},
    hResult: Windows.Win32.Com.HRESULT,
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NMKEY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMKEY = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    nVKey: {"kind":"UInt32"},
    uFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NMCHAR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMCHAR = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    ch: {"kind":"UInt32"},
    dwItemPrev: {"kind":"UInt32"},
    dwItemNext: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NMCUSTOMTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMCUSTOMTEXT = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    hDC: Windows.Win32.Gdi.HDC,
    lpString: {"kind""Ptr","child":{"kind":"UInt16"}},
    nCount: {"kind":"Int32"},
    lpRect: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    uFormat: {"kind":"UInt32"},
    fLink: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: NMCUSTOMDRAW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMCUSTOMDRAW = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    dwDrawStage: {"kind":"UInt32"},
    hdc: Windows.Win32.Gdi.HDC,
    rc: Windows.Win32.DisplayDevices.RECT,
    dwItemSpec: {"kind":"UIntPtr"},
    uItemState: {"kind":"UInt32"},
    lItemlParam: Windows.Win32.WindowsAndMessaging.LPARAM,
};
// --------------------------------------------------------
// Type: NMTTCUSTOMDRAW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMTTCUSTOMDRAW = extern struct {
    nmcd: Windows.Win32.Controls.NMCUSTOMDRAW,
    uDrawFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NMCUSTOMSPLITRECTINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMCUSTOMSPLITRECTINFO = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    rcClient: Windows.Win32.DisplayDevices.RECT,
    rcButton: Windows.Win32.DisplayDevices.RECT,
    rcSplit: Windows.Win32.DisplayDevices.RECT,
};
// --------------------------------------------------------
// Type: _IMAGELIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _IMAGELIST = opaque {
};
// --------------------------------------------------------
// Type: IMAGELISTDRAWPARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGELISTDRAWPARAMS = extern struct {
    cbSize: {"kind":"UInt32"},
    himl: Windows.Win32.Controls.HIMAGELIST,
    i: {"kind":"Int32"},
    hdcDst: Windows.Win32.Gdi.HDC,
    x: {"kind":"Int32"},
    y: {"kind":"Int32"},
    cx: {"kind":"Int32"},
    cy: {"kind":"Int32"},
    xBitmap: {"kind":"Int32"},
    yBitmap: {"kind":"Int32"},
    rgbBk: {"kind":"UInt32"},
    rgbFg: {"kind":"UInt32"},
    fStyle: {"kind":"UInt32"},
    dwRop: {"kind":"UInt32"},
    fState: {"kind":"UInt32"},
    Frame: {"kind":"UInt32"},
    crEffect: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IMAGEINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGEINFO = extern struct {
    hbmImage: Windows.Win32.Gdi.HBITMAP,
    hbmMask: Windows.Win32.Gdi.HBITMAP,
    Unused1: {"kind":"Int32"},
    Unused2: {"kind":"Int32"},
    rcImage: Windows.Win32.DisplayDevices.RECT,
};
// --------------------------------------------------------
// Type: HD_TEXTFILTERA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HD_TEXTFILTERA = extern struct {
    pszText: {"kind""Ptr","child":{"kind":"SByte"}},
    cchTextMax: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HD_TEXTFILTERW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HD_TEXTFILTERW = extern struct {
    pszText: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchTextMax: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HDITEMA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HDITEMA = extern struct {
    mask: {"kind":"UInt32"},
    cxy: {"kind":"Int32"},
    pszText: {"kind""Ptr","child":{"kind":"SByte"}},
    hbm: Windows.Win32.Gdi.HBITMAP,
    cchTextMax: {"kind":"Int32"},
    fmt: {"kind":"Int32"},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
    iImage: {"kind":"Int32"},
    iOrder: {"kind":"Int32"},
    type: {"kind":"UInt32"},
    pvFilter: {"kind""Ptr","child":{"kind":"Void"}},
    state: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: HDITEMW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HDITEMW = extern struct {
    mask: {"kind":"UInt32"},
    cxy: {"kind":"Int32"},
    pszText: {"kind""Ptr","child":{"kind":"UInt16"}},
    hbm: Windows.Win32.Gdi.HBITMAP,
    cchTextMax: {"kind":"Int32"},
    fmt: {"kind":"Int32"},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
    iImage: {"kind":"Int32"},
    iOrder: {"kind":"Int32"},
    type: {"kind":"UInt32"},
    pvFilter: {"kind""Ptr","child":{"kind":"Void"}},
    state: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: HDLAYOUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HDLAYOUT = extern struct {
    prc: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    pwpos: {"kind""Ptr","child":Windows.Win32.WindowsAndMessaging.WINDOWPOS},
};
// --------------------------------------------------------
// Type: HDHITTESTINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HDHITTESTINFO = extern struct {
    pt: Windows.Win32.DisplayDevices.POINT,
    flags: {"kind":"UInt32"},
    iItem: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: NMHEADERA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMHEADERA = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    iItem: {"kind":"Int32"},
    iButton: {"kind":"Int32"},
    pitem: {"kind""Ptr","child":Windows.Win32.Controls.HDITEMA},
};
// --------------------------------------------------------
// Type: NMHEADERW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMHEADERW = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    iItem: {"kind":"Int32"},
    iButton: {"kind":"Int32"},
    pitem: {"kind""Ptr","child":Windows.Win32.Controls.HDITEMW},
};
// --------------------------------------------------------
// Type: NMHDDISPINFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMHDDISPINFOW = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    iItem: {"kind":"Int32"},
    mask: {"kind":"UInt32"},
    pszText: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchTextMax: {"kind":"Int32"},
    iImage: {"kind":"Int32"},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
};
// --------------------------------------------------------
// Type: NMHDDISPINFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMHDDISPINFOA = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    iItem: {"kind":"Int32"},
    mask: {"kind":"UInt32"},
    pszText: {"kind""Ptr","child":{"kind":"SByte"}},
    cchTextMax: {"kind":"Int32"},
    iImage: {"kind":"Int32"},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
};
// --------------------------------------------------------
// Type: NMHDFILTERBTNCLICK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMHDFILTERBTNCLICK = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    iItem: {"kind":"Int32"},
    rc: Windows.Win32.DisplayDevices.RECT,
};
// --------------------------------------------------------
// Type: TBBUTTON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TBBUTTON = extern struct {
    iBitmap: {"kind":"Int32"},
    idCommand: {"kind":"Int32"},
    fsState: {"kind":"Byte"},
    fsStyle: {"kind":"Byte"},
    bReserved: {"kind":"Array","child": {"kind":"Byte"}},
    dwData: {"kind":"UIntPtr"},
    iString: {"kind":"IntPtr"},
};
// --------------------------------------------------------
// Type: COLORMAP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COLORMAP = extern struct {
    from: {"kind":"UInt32"},
    to: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NMTBCUSTOMDRAW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMTBCUSTOMDRAW = extern struct {
    nmcd: Windows.Win32.Controls.NMCUSTOMDRAW,
    hbrMonoDither: Windows.Win32.Gdi.HBRUSH,
    hbrLines: Windows.Win32.Gdi.HBRUSH,
    hpenLines: Windows.Win32.Gdi.HPEN,
    clrText: {"kind":"UInt32"},
    clrMark: {"kind":"UInt32"},
    clrTextHighlight: {"kind":"UInt32"},
    clrBtnFace: {"kind":"UInt32"},
    clrBtnHighlight: {"kind":"UInt32"},
    clrHighlightHotTrack: {"kind":"UInt32"},
    rcText: Windows.Win32.DisplayDevices.RECT,
    nStringBkMode: {"kind":"Int32"},
    nHLStringBkMode: {"kind":"Int32"},
    iListGap: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: TBADDBITMAP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TBADDBITMAP = extern struct {
    hInst: Windows.Win32.SystemServices.HINSTANCE,
    nID: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: TBSAVEPARAMSA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TBSAVEPARAMSA = extern struct {
    hkr: Windows.Win32.WindowsProgramming.HKEY,
    pszSubKey: {"kind""Ptr","child":{"kind":"SByte"}},
    pszValueName: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: TBSAVEPARAMSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TBSAVEPARAMSW = extern struct {
    hkr: Windows.Win32.WindowsProgramming.HKEY,
    pszSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszValueName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: TBINSERTMARK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TBINSERTMARK = extern struct {
    iButton: {"kind":"Int32"},
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: TBREPLACEBITMAP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TBREPLACEBITMAP = extern struct {
    hInstOld: Windows.Win32.SystemServices.HINSTANCE,
    nIDOld: {"kind":"UIntPtr"},
    hInstNew: Windows.Win32.SystemServices.HINSTANCE,
    nIDNew: {"kind":"UIntPtr"},
    nButtons: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: TBBUTTONINFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TBBUTTONINFOA = extern struct {
    cbSize: {"kind":"UInt32"},
    dwMask: {"kind":"UInt32"},
    idCommand: {"kind":"Int32"},
    iImage: {"kind":"Int32"},
    fsState: {"kind":"Byte"},
    fsStyle: {"kind":"Byte"},
    cx: {"kind":"UInt16"},
    lParam: {"kind":"UIntPtr"},
    pszText: {"kind""Ptr","child":{"kind":"SByte"}},
    cchText: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: TBBUTTONINFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TBBUTTONINFOW = extern struct {
    cbSize: {"kind":"UInt32"},
    dwMask: {"kind":"UInt32"},
    idCommand: {"kind":"Int32"},
    iImage: {"kind":"Int32"},
    fsState: {"kind":"Byte"},
    fsStyle: {"kind":"Byte"},
    cx: {"kind":"UInt16"},
    lParam: {"kind":"UIntPtr"},
    pszText: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchText: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: TBMETRICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TBMETRICS = extern struct {
    cbSize: {"kind":"UInt32"},
    dwMask: {"kind":"UInt32"},
    cxPad: {"kind":"Int32"},
    cyPad: {"kind":"Int32"},
    cxBarPad: {"kind":"Int32"},
    cyBarPad: {"kind":"Int32"},
    cxButtonSpacing: {"kind":"Int32"},
    cyButtonSpacing: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: NMTBHOTITEM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMTBHOTITEM = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    idOld: {"kind":"Int32"},
    idNew: {"kind":"Int32"},
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NMTBSAVE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMTBSAVE = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    pData: {"kind""Ptr","child":{"kind":"UInt32"}},
    pCurrent: {"kind""Ptr","child":{"kind":"UInt32"}},
    cbData: {"kind":"UInt32"},
    iItem: {"kind":"Int32"},
    cButtons: {"kind":"Int32"},
    tbButton: Windows.Win32.Controls.TBBUTTON,
};
// --------------------------------------------------------
// Type: NMTBRESTORE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMTBRESTORE = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    pData: {"kind""Ptr","child":{"kind":"UInt32"}},
    pCurrent: {"kind""Ptr","child":{"kind":"UInt32"}},
    cbData: {"kind":"UInt32"},
    iItem: {"kind":"Int32"},
    cButtons: {"kind":"Int32"},
    cbBytesPerRecord: {"kind":"Int32"},
    tbButton: Windows.Win32.Controls.TBBUTTON,
};
// --------------------------------------------------------
// Type: NMTBGETINFOTIPA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMTBGETINFOTIPA = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    pszText: {"kind""Ptr","child":{"kind":"SByte"}},
    cchTextMax: {"kind":"Int32"},
    iItem: {"kind":"Int32"},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
};
// --------------------------------------------------------
// Type: NMTBGETINFOTIPW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMTBGETINFOTIPW = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    pszText: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchTextMax: {"kind":"Int32"},
    iItem: {"kind":"Int32"},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
};
// --------------------------------------------------------
// Type: NMTBDISPINFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMTBDISPINFOA = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    dwMask: {"kind":"UInt32"},
    idCommand: {"kind":"Int32"},
    lParam: {"kind":"UIntPtr"},
    iImage: {"kind":"Int32"},
    pszText: {"kind""Ptr","child":{"kind":"SByte"}},
    cchText: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: NMTBDISPINFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMTBDISPINFOW = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    dwMask: {"kind":"UInt32"},
    idCommand: {"kind":"Int32"},
    lParam: {"kind":"UIntPtr"},
    iImage: {"kind":"Int32"},
    pszText: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchText: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: NMTOOLBARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMTOOLBARA = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    iItem: {"kind":"Int32"},
    tbButton: Windows.Win32.Controls.TBBUTTON,
    cchText: {"kind":"Int32"},
    pszText: {"kind""Ptr","child":{"kind":"SByte"}},
    rcButton: Windows.Win32.DisplayDevices.RECT,
};
// --------------------------------------------------------
// Type: NMTOOLBARW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMTOOLBARW = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    iItem: {"kind":"Int32"},
    tbButton: Windows.Win32.Controls.TBBUTTON,
    cchText: {"kind":"Int32"},
    pszText: {"kind""Ptr","child":{"kind":"UInt16"}},
    rcButton: Windows.Win32.DisplayDevices.RECT,
};
// --------------------------------------------------------
// Type: REBARINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const REBARINFO = extern struct {
    cbSize: {"kind":"UInt32"},
    fMask: {"kind":"UInt32"},
    himl: Windows.Win32.Controls.HIMAGELIST,
};
// --------------------------------------------------------
// Type: REBARBANDINFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const REBARBANDINFOA = extern struct {
    cbSize: {"kind":"UInt32"},
    fMask: {"kind":"UInt32"},
    fStyle: {"kind":"UInt32"},
    clrFore: {"kind":"UInt32"},
    clrBack: {"kind":"UInt32"},
    lpText: {"kind""Ptr","child":{"kind":"SByte"}},
    cch: {"kind":"UInt32"},
    iImage: {"kind":"Int32"},
    hwndChild: Windows.Win32.WindowsAndMessaging.HWND,
    cxMinChild: {"kind":"UInt32"},
    cyMinChild: {"kind":"UInt32"},
    cx: {"kind":"UInt32"},
    hbmBack: Windows.Win32.Gdi.HBITMAP,
    wID: {"kind":"UInt32"},
    cyChild: {"kind":"UInt32"},
    cyMaxChild: {"kind":"UInt32"},
    cyIntegral: {"kind":"UInt32"},
    cxIdeal: {"kind":"UInt32"},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
    cxHeader: {"kind":"UInt32"},
    rcChevronLocation: Windows.Win32.DisplayDevices.RECT,
    uChevronState: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: REBARBANDINFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const REBARBANDINFOW = extern struct {
    cbSize: {"kind":"UInt32"},
    fMask: {"kind":"UInt32"},
    fStyle: {"kind":"UInt32"},
    clrFore: {"kind":"UInt32"},
    clrBack: {"kind":"UInt32"},
    lpText: {"kind""Ptr","child":{"kind":"UInt16"}},
    cch: {"kind":"UInt32"},
    iImage: {"kind":"Int32"},
    hwndChild: Windows.Win32.WindowsAndMessaging.HWND,
    cxMinChild: {"kind":"UInt32"},
    cyMinChild: {"kind":"UInt32"},
    cx: {"kind":"UInt32"},
    hbmBack: Windows.Win32.Gdi.HBITMAP,
    wID: {"kind":"UInt32"},
    cyChild: {"kind":"UInt32"},
    cyMaxChild: {"kind":"UInt32"},
    cyIntegral: {"kind":"UInt32"},
    cxIdeal: {"kind":"UInt32"},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
    cxHeader: {"kind":"UInt32"},
    rcChevronLocation: Windows.Win32.DisplayDevices.RECT,
    uChevronState: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NMREBARCHILDSIZE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMREBARCHILDSIZE = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    uBand: {"kind":"UInt32"},
    wID: {"kind":"UInt32"},
    rcChild: Windows.Win32.DisplayDevices.RECT,
    rcBand: Windows.Win32.DisplayDevices.RECT,
};
// --------------------------------------------------------
// Type: NMREBAR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMREBAR = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    dwMask: {"kind":"UInt32"},
    uBand: {"kind":"UInt32"},
    fStyle: {"kind":"UInt32"},
    wID: {"kind":"UInt32"},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
};
// --------------------------------------------------------
// Type: NMRBAUTOSIZE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMRBAUTOSIZE = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    fChanged: Windows.Win32.SystemServices.BOOL,
    rcTarget: Windows.Win32.DisplayDevices.RECT,
    rcActual: Windows.Win32.DisplayDevices.RECT,
};
// --------------------------------------------------------
// Type: NMREBARCHEVRON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMREBARCHEVRON = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    uBand: {"kind":"UInt32"},
    wID: {"kind":"UInt32"},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
    rc: Windows.Win32.DisplayDevices.RECT,
    lParamNM: Windows.Win32.WindowsAndMessaging.LPARAM,
};
// --------------------------------------------------------
// Type: NMREBARSPLITTER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMREBARSPLITTER = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    rcSizing: Windows.Win32.DisplayDevices.RECT,
};
// --------------------------------------------------------
// Type: NMREBARAUTOBREAK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMREBARAUTOBREAK = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    uBand: {"kind":"UInt32"},
    wID: {"kind":"UInt32"},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
    uMsg: {"kind":"UInt32"},
    fStyleCurrent: {"kind":"UInt32"},
    fAutoBreak: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: RBHITTESTINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RBHITTESTINFO = extern struct {
    pt: Windows.Win32.DisplayDevices.POINT,
    flags: {"kind":"UInt32"},
    iBand: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: TTTOOLINFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TTTOOLINFOA = extern struct {
    cbSize: {"kind":"UInt32"},
    uFlags: {"kind":"UInt32"},
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    uId: {"kind":"UIntPtr"},
    rect: Windows.Win32.DisplayDevices.RECT,
    hinst: Windows.Win32.SystemServices.HINSTANCE,
    lpszText: {"kind""Ptr","child":{"kind":"SByte"}},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
    lpReserved: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: TTTOOLINFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TTTOOLINFOW = extern struct {
    cbSize: {"kind":"UInt32"},
    uFlags: {"kind":"UInt32"},
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    uId: {"kind":"UIntPtr"},
    rect: Windows.Win32.DisplayDevices.RECT,
    hinst: Windows.Win32.SystemServices.HINSTANCE,
    lpszText: {"kind""Ptr","child":{"kind":"UInt16"}},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
    lpReserved: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: TTGETTITLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TTGETTITLE = extern struct {
    dwSize: {"kind":"UInt32"},
    uTitleBitmap: {"kind":"UInt32"},
    cch: {"kind":"UInt32"},
    pszTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: TTHITTESTINFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TTHITTESTINFOA = extern struct {
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    pt: Windows.Win32.DisplayDevices.POINT,
    ti: Windows.Win32.Controls.TTTOOLINFOA,
};
// --------------------------------------------------------
// Type: TTHITTESTINFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TTHITTESTINFOW = extern struct {
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    pt: Windows.Win32.DisplayDevices.POINT,
    ti: Windows.Win32.Controls.TTTOOLINFOW,
};
// --------------------------------------------------------
// Type: NMTTDISPINFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMTTDISPINFOA = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    lpszText: {"kind""Ptr","child":{"kind":"SByte"}},
    szText: {"kind":"Array","child": {"kind":"SByte"}},
    hinst: Windows.Win32.SystemServices.HINSTANCE,
    uFlags: {"kind":"UInt32"},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
};
// --------------------------------------------------------
// Type: NMTTDISPINFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMTTDISPINFOW = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    lpszText: {"kind""Ptr","child":{"kind":"UInt16"}},
    szText: {"kind":"Array","child": {"kind":"UInt16"}},
    hinst: Windows.Win32.SystemServices.HINSTANCE,
    uFlags: {"kind":"UInt32"},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
};
// --------------------------------------------------------
// Type: NMTRBTHUMBPOSCHANGING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMTRBTHUMBPOSCHANGING = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    dwPos: {"kind":"UInt32"},
    nReason: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: DRAGLISTINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DRAGLISTINFO = extern struct {
    uNotification: {"kind":"UInt32"},
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    ptCursor: Windows.Win32.DisplayDevices.POINT,
};
// --------------------------------------------------------
// Type: UDACCEL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UDACCEL = extern struct {
    nSec: {"kind":"UInt32"},
    nInc: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NMUPDOWN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMUPDOWN = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    iPos: {"kind":"Int32"},
    iDelta: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: PBRANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PBRANGE = extern struct {
    iLow: {"kind":"Int32"},
    iHigh: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: LITEM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LITEM = extern struct {
    mask: {"kind":"UInt32"},
    iLink: {"kind":"Int32"},
    state: {"kind":"UInt32"},
    stateMask: {"kind":"UInt32"},
    szID: {"kind":"Array","child": {"kind":"UInt16"}},
    szUrl: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: LHITTESTINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LHITTESTINFO = extern struct {
    pt: Windows.Win32.DisplayDevices.POINT,
    item: Windows.Win32.Controls.LITEM,
};
// --------------------------------------------------------
// Type: NMLINK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMLINK = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    item: Windows.Win32.Controls.LITEM,
};
// --------------------------------------------------------
// Type: LVITEMA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LVITEMA = extern struct {
    mask: {"kind":"UInt32"},
    iItem: {"kind":"Int32"},
    iSubItem: {"kind":"Int32"},
    state: {"kind":"UInt32"},
    stateMask: {"kind":"UInt32"},
    pszText: {"kind""Ptr","child":{"kind":"SByte"}},
    cchTextMax: {"kind":"Int32"},
    iImage: {"kind":"Int32"},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
    iIndent: {"kind":"Int32"},
    iGroupId: {"kind":"Int32"},
    cColumns: {"kind":"UInt32"},
    puColumns: {"kind""Ptr","child":{"kind":"UInt32"}},
    piColFmt: {"kind""Ptr","child":{"kind":"Int32"}},
    iGroup: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: LVITEMW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LVITEMW = extern struct {
    mask: {"kind":"UInt32"},
    iItem: {"kind":"Int32"},
    iSubItem: {"kind":"Int32"},
    state: {"kind":"UInt32"},
    stateMask: {"kind":"UInt32"},
    pszText: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchTextMax: {"kind":"Int32"},
    iImage: {"kind":"Int32"},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
    iIndent: {"kind":"Int32"},
    iGroupId: {"kind":"Int32"},
    cColumns: {"kind":"UInt32"},
    puColumns: {"kind""Ptr","child":{"kind":"UInt32"}},
    piColFmt: {"kind""Ptr","child":{"kind":"Int32"}},
    iGroup: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: LVFINDINFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LVFINDINFOA = extern struct {
    flags: {"kind":"UInt32"},
    psz: {"kind""Ptr","child":{"kind":"SByte"}},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
    pt: Windows.Win32.DisplayDevices.POINT,
    vkDirection: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: LVFINDINFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LVFINDINFOW = extern struct {
    flags: {"kind":"UInt32"},
    psz: {"kind""Ptr","child":{"kind":"UInt16"}},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
    pt: Windows.Win32.DisplayDevices.POINT,
    vkDirection: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: LVHITTESTINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LVHITTESTINFO = extern struct {
    pt: Windows.Win32.DisplayDevices.POINT,
    flags: {"kind":"UInt32"},
    iItem: {"kind":"Int32"},
    iSubItem: {"kind":"Int32"},
    iGroup: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: LVCOLUMNA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LVCOLUMNA = extern struct {
    mask: {"kind":"UInt32"},
    fmt: {"kind":"Int32"},
    cx: {"kind":"Int32"},
    pszText: {"kind""Ptr","child":{"kind":"SByte"}},
    cchTextMax: {"kind":"Int32"},
    iSubItem: {"kind":"Int32"},
    iImage: {"kind":"Int32"},
    iOrder: {"kind":"Int32"},
    cxMin: {"kind":"Int32"},
    cxDefault: {"kind":"Int32"},
    cxIdeal: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: LVCOLUMNW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LVCOLUMNW = extern struct {
    mask: {"kind":"UInt32"},
    fmt: {"kind":"Int32"},
    cx: {"kind":"Int32"},
    pszText: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchTextMax: {"kind":"Int32"},
    iSubItem: {"kind":"Int32"},
    iImage: {"kind":"Int32"},
    iOrder: {"kind":"Int32"},
    cxMin: {"kind":"Int32"},
    cxDefault: {"kind":"Int32"},
    cxIdeal: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: PFNLVCOMPARE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNLVCOMPARE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LVBKIMAGEA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LVBKIMAGEA = extern struct {
    ulFlags: {"kind":"UInt32"},
    hbm: Windows.Win32.Gdi.HBITMAP,
    pszImage: {"kind""Ptr","child":{"kind":"SByte"}},
    cchImageMax: {"kind":"UInt32"},
    xOffsetPercent: {"kind":"Int32"},
    yOffsetPercent: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: LVBKIMAGEW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LVBKIMAGEW = extern struct {
    ulFlags: {"kind":"UInt32"},
    hbm: Windows.Win32.Gdi.HBITMAP,
    pszImage: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchImageMax: {"kind":"UInt32"},
    xOffsetPercent: {"kind":"Int32"},
    yOffsetPercent: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: LVGROUP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LVGROUP = extern struct {
    cbSize: {"kind":"UInt32"},
    mask: {"kind":"UInt32"},
    pszHeader: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchHeader: {"kind":"Int32"},
    pszFooter: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchFooter: {"kind":"Int32"},
    iGroupId: {"kind":"Int32"},
    stateMask: {"kind":"UInt32"},
    state: {"kind":"UInt32"},
    uAlign: {"kind":"UInt32"},
    pszSubtitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchSubtitle: {"kind":"UInt32"},
    pszTask: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchTask: {"kind":"UInt32"},
    pszDescriptionTop: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchDescriptionTop: {"kind":"UInt32"},
    pszDescriptionBottom: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchDescriptionBottom: {"kind":"UInt32"},
    iTitleImage: {"kind":"Int32"},
    iExtendedImage: {"kind":"Int32"},
    iFirstItem: {"kind":"Int32"},
    cItems: {"kind":"UInt32"},
    pszSubsetTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchSubsetTitle: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: LVGROUPMETRICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LVGROUPMETRICS = extern struct {
    cbSize: {"kind":"UInt32"},
    mask: {"kind":"UInt32"},
    Left: {"kind":"UInt32"},
    Top: {"kind":"UInt32"},
    Right: {"kind":"UInt32"},
    Bottom: {"kind":"UInt32"},
    crLeft: {"kind":"UInt32"},
    crTop: {"kind":"UInt32"},
    crRight: {"kind":"UInt32"},
    crBottom: {"kind":"UInt32"},
    crHeader: {"kind":"UInt32"},
    crFooter: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PFNLVGROUPCOMPARE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNLVGROUPCOMPARE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LVINSERTGROUPSORTED
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LVINSERTGROUPSORTED = extern struct {
    pfnGroupCompare: Windows.Win32.Controls.PFNLVGROUPCOMPARE,
    pvData: {"kind""Ptr","child":{"kind":"Void"}},
    lvGroup: Windows.Win32.Controls.LVGROUP,
};
// --------------------------------------------------------
// Type: LVTILEVIEWINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LVTILEVIEWINFO = extern struct {
    cbSize: {"kind":"UInt32"},
    dwMask: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    sizeTile: Windows.Win32.DisplayDevices.SIZE,
    cLines: {"kind":"Int32"},
    rcLabelMargin: Windows.Win32.DisplayDevices.RECT,
};
// --------------------------------------------------------
// Type: LVTILEINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LVTILEINFO = extern struct {
    cbSize: {"kind":"UInt32"},
    iItem: {"kind":"Int32"},
    cColumns: {"kind":"UInt32"},
    puColumns: {"kind""Ptr","child":{"kind":"UInt32"}},
    piColFmt: {"kind""Ptr","child":{"kind":"Int32"}},
};
// --------------------------------------------------------
// Type: LVINSERTMARK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LVINSERTMARK = extern struct {
    cbSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    iItem: {"kind":"Int32"},
    dwReserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: LVSETINFOTIP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LVSETINFOTIP = extern struct {
    cbSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    pszText: {"kind""Ptr","child":{"kind":"UInt16"}},
    iItem: {"kind":"Int32"},
    iSubItem: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: LVFOOTERINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LVFOOTERINFO = extern struct {
    mask: {"kind":"UInt32"},
    pszText: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchTextMax: {"kind":"Int32"},
    cItems: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: LVFOOTERITEM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LVFOOTERITEM = extern struct {
    mask: {"kind":"UInt32"},
    iItem: {"kind":"Int32"},
    pszText: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchTextMax: {"kind":"Int32"},
    state: {"kind":"UInt32"},
    stateMask: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: LVITEMINDEX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LVITEMINDEX = extern struct {
    iItem: {"kind":"Int32"},
    iGroup: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: NMLISTVIEW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMLISTVIEW = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    iItem: {"kind":"Int32"},
    iSubItem: {"kind":"Int32"},
    uNewState: {"kind":"UInt32"},
    uOldState: {"kind":"UInt32"},
    uChanged: {"kind":"UInt32"},
    ptAction: Windows.Win32.DisplayDevices.POINT,
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
};
// --------------------------------------------------------
// Type: NMITEMACTIVATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMITEMACTIVATE = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    iItem: {"kind":"Int32"},
    iSubItem: {"kind":"Int32"},
    uNewState: {"kind":"UInt32"},
    uOldState: {"kind":"UInt32"},
    uChanged: {"kind":"UInt32"},
    ptAction: Windows.Win32.DisplayDevices.POINT,
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
    uKeyFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NMLVCUSTOMDRAW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMLVCUSTOMDRAW = extern struct {
    nmcd: Windows.Win32.Controls.NMCUSTOMDRAW,
    clrText: {"kind":"UInt32"},
    clrTextBk: {"kind":"UInt32"},
    iSubItem: {"kind":"Int32"},
    dwItemType: {"kind":"UInt32"},
    clrFace: {"kind":"UInt32"},
    iIconEffect: {"kind":"Int32"},
    iIconPhase: {"kind":"Int32"},
    iPartId: {"kind":"Int32"},
    iStateId: {"kind":"Int32"},
    rcText: Windows.Win32.DisplayDevices.RECT,
    uAlign: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NMLVCACHEHINT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMLVCACHEHINT = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    iFrom: {"kind":"Int32"},
    iTo: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: NMLVFINDITEMA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMLVFINDITEMA = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    iStart: {"kind":"Int32"},
    lvfi: Windows.Win32.Controls.LVFINDINFOA,
};
// --------------------------------------------------------
// Type: NMLVFINDITEMW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMLVFINDITEMW = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    iStart: {"kind":"Int32"},
    lvfi: Windows.Win32.Controls.LVFINDINFOW,
};
// --------------------------------------------------------
// Type: NMLVODSTATECHANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMLVODSTATECHANGE = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    iFrom: {"kind":"Int32"},
    iTo: {"kind":"Int32"},
    uNewState: {"kind":"UInt32"},
    uOldState: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NMLVDISPINFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMLVDISPINFOA = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    item: Windows.Win32.Controls.LVITEMA,
};
// --------------------------------------------------------
// Type: NMLVDISPINFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMLVDISPINFOW = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    item: Windows.Win32.Controls.LVITEMW,
};
// --------------------------------------------------------
// Type: NMLVKEYDOWN
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const NMLVKEYDOWN = *opaque{
};
// --------------------------------------------------------
// Type: NMLVLINK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMLVLINK = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    link: Windows.Win32.Controls.LITEM,
    iItem: {"kind":"Int32"},
    iSubItem: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: NMLVGETINFOTIPA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMLVGETINFOTIPA = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    dwFlags: {"kind":"UInt32"},
    pszText: {"kind""Ptr","child":{"kind":"SByte"}},
    cchTextMax: {"kind":"Int32"},
    iItem: {"kind":"Int32"},
    iSubItem: {"kind":"Int32"},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
};
// --------------------------------------------------------
// Type: NMLVGETINFOTIPW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMLVGETINFOTIPW = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    dwFlags: {"kind":"UInt32"},
    pszText: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchTextMax: {"kind":"Int32"},
    iItem: {"kind":"Int32"},
    iSubItem: {"kind":"Int32"},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
};
// --------------------------------------------------------
// Type: NMLVSCROLL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMLVSCROLL = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    dx: {"kind":"Int32"},
    dy: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: NMLVEMPTYMARKUP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMLVEMPTYMARKUP = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    dwFlags: {"kind":"UInt32"},
    szMarkup: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: _TREEITEM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _TREEITEM = opaque {
};
// --------------------------------------------------------
// Type: NMTVSTATEIMAGECHANGING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMTVSTATEIMAGECHANGING = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    hti: {"kind""Ptr","child":Windows.Win32.Controls._TREEITEM},
    iOldStateImageIndex: {"kind":"Int32"},
    iNewStateImageIndex: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: TVITEMA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TVITEMA = extern struct {
    mask: {"kind":"UInt32"},
    hItem: {"kind""Ptr","child":Windows.Win32.Controls._TREEITEM},
    state: {"kind":"UInt32"},
    stateMask: {"kind":"UInt32"},
    pszText: {"kind""Ptr","child":{"kind":"SByte"}},
    cchTextMax: {"kind":"Int32"},
    iImage: {"kind":"Int32"},
    iSelectedImage: {"kind":"Int32"},
    cChildren: {"kind":"Int32"},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
};
// --------------------------------------------------------
// Type: TVITEMW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TVITEMW = extern struct {
    mask: {"kind":"UInt32"},
    hItem: {"kind""Ptr","child":Windows.Win32.Controls._TREEITEM},
    state: {"kind":"UInt32"},
    stateMask: {"kind":"UInt32"},
    pszText: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchTextMax: {"kind":"Int32"},
    iImage: {"kind":"Int32"},
    iSelectedImage: {"kind":"Int32"},
    cChildren: {"kind":"Int32"},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
};
// --------------------------------------------------------
// Type: TVITEMEXA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TVITEMEXA = extern struct {
    mask: {"kind":"UInt32"},
    hItem: {"kind""Ptr","child":Windows.Win32.Controls._TREEITEM},
    state: {"kind":"UInt32"},
    stateMask: {"kind":"UInt32"},
    pszText: {"kind""Ptr","child":{"kind":"SByte"}},
    cchTextMax: {"kind":"Int32"},
    iImage: {"kind":"Int32"},
    iSelectedImage: {"kind":"Int32"},
    cChildren: {"kind":"Int32"},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
    iIntegral: {"kind":"Int32"},
    uStateEx: {"kind":"UInt32"},
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    iExpandedImage: {"kind":"Int32"},
    iReserved: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: TVITEMEXW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TVITEMEXW = extern struct {
    mask: {"kind":"UInt32"},
    hItem: {"kind""Ptr","child":Windows.Win32.Controls._TREEITEM},
    state: {"kind":"UInt32"},
    stateMask: {"kind":"UInt32"},
    pszText: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchTextMax: {"kind":"Int32"},
    iImage: {"kind":"Int32"},
    iSelectedImage: {"kind":"Int32"},
    cChildren: {"kind":"Int32"},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
    iIntegral: {"kind":"Int32"},
    uStateEx: {"kind":"UInt32"},
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    iExpandedImage: {"kind":"Int32"},
    iReserved: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: TVINSERTSTRUCTA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TVINSERTSTRUCTA = extern struct {
    hParent: {"kind""Ptr","child":Windows.Win32.Controls._TREEITEM},
    hInsertAfter: {"kind""Ptr","child":Windows.Win32.Controls._TREEITEM},
    Anonymous: Windows.Win32.Controls.TVINSERTSTRUCTA+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: TVINSERTSTRUCTW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TVINSERTSTRUCTW = extern struct {
    hParent: {"kind""Ptr","child":Windows.Win32.Controls._TREEITEM},
    hInsertAfter: {"kind""Ptr","child":Windows.Win32.Controls._TREEITEM},
    Anonymous: Windows.Win32.Controls.TVINSERTSTRUCTW+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: TVHITTESTINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TVHITTESTINFO = extern struct {
    pt: Windows.Win32.DisplayDevices.POINT,
    flags: {"kind":"UInt32"},
    hItem: {"kind""Ptr","child":Windows.Win32.Controls._TREEITEM},
};
// --------------------------------------------------------
// Type: TVITEMPART
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TVITEMPART = *opaque{
};
// --------------------------------------------------------
// Type: TVGETITEMPARTRECTINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TVGETITEMPARTRECTINFO = extern struct {
    hti: {"kind""Ptr","child":Windows.Win32.Controls._TREEITEM},
    prc: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    partID: Windows.Win32.Controls.TVITEMPART,
};
// --------------------------------------------------------
// Type: PFNTVCOMPARE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNTVCOMPARE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: TVSORTCB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TVSORTCB = extern struct {
    hParent: {"kind""Ptr","child":Windows.Win32.Controls._TREEITEM},
    lpfnCompare: Windows.Win32.Controls.PFNTVCOMPARE,
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
};
// --------------------------------------------------------
// Type: NMTREEVIEWA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMTREEVIEWA = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    action: {"kind":"UInt32"},
    itemOld: Windows.Win32.Controls.TVITEMA,
    itemNew: Windows.Win32.Controls.TVITEMA,
    ptDrag: Windows.Win32.DisplayDevices.POINT,
};
// --------------------------------------------------------
// Type: NMTREEVIEWW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMTREEVIEWW = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    action: {"kind":"UInt32"},
    itemOld: Windows.Win32.Controls.TVITEMW,
    itemNew: Windows.Win32.Controls.TVITEMW,
    ptDrag: Windows.Win32.DisplayDevices.POINT,
};
// --------------------------------------------------------
// Type: NMTVDISPINFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMTVDISPINFOA = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    item: Windows.Win32.Controls.TVITEMA,
};
// --------------------------------------------------------
// Type: NMTVDISPINFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMTVDISPINFOW = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    item: Windows.Win32.Controls.TVITEMW,
};
// --------------------------------------------------------
// Type: NMTVDISPINFOEXA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMTVDISPINFOEXA = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    item: Windows.Win32.Controls.TVITEMEXA,
};
// --------------------------------------------------------
// Type: NMTVDISPINFOEXW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMTVDISPINFOEXW = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    item: Windows.Win32.Controls.TVITEMEXW,
};
// --------------------------------------------------------
// Type: NMTVKEYDOWN
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const NMTVKEYDOWN = *opaque{
};
// --------------------------------------------------------
// Type: NMTVCUSTOMDRAW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMTVCUSTOMDRAW = extern struct {
    nmcd: Windows.Win32.Controls.NMCUSTOMDRAW,
    clrText: {"kind":"UInt32"},
    clrTextBk: {"kind":"UInt32"},
    iLevel: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: NMTVGETINFOTIPA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMTVGETINFOTIPA = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    pszText: {"kind""Ptr","child":{"kind":"SByte"}},
    cchTextMax: {"kind":"Int32"},
    hItem: {"kind""Ptr","child":Windows.Win32.Controls._TREEITEM},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
};
// --------------------------------------------------------
// Type: NMTVGETINFOTIPW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMTVGETINFOTIPW = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    pszText: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchTextMax: {"kind":"Int32"},
    hItem: {"kind""Ptr","child":Windows.Win32.Controls._TREEITEM},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
};
// --------------------------------------------------------
// Type: NMTVITEMCHANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMTVITEMCHANGE = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    uChanged: {"kind":"UInt32"},
    hItem: {"kind""Ptr","child":Windows.Win32.Controls._TREEITEM},
    uStateNew: {"kind":"UInt32"},
    uStateOld: {"kind":"UInt32"},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
};
// --------------------------------------------------------
// Type: NMTVASYNCDRAW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMTVASYNCDRAW = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    pimldp: {"kind""Ptr","child":Windows.Win32.Controls.IMAGELISTDRAWPARAMS},
    hr: Windows.Win32.Com.HRESULT,
    hItem: {"kind""Ptr","child":Windows.Win32.Controls._TREEITEM},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
    dwRetFlags: {"kind":"UInt32"},
    iRetImageIndex: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: COMBOBOXEXITEMA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COMBOBOXEXITEMA = extern struct {
    mask: {"kind":"UInt32"},
    iItem: {"kind":"IntPtr"},
    pszText: {"kind""Ptr","child":{"kind":"SByte"}},
    cchTextMax: {"kind":"Int32"},
    iImage: {"kind":"Int32"},
    iSelectedImage: {"kind":"Int32"},
    iOverlay: {"kind":"Int32"},
    iIndent: {"kind":"Int32"},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
};
// --------------------------------------------------------
// Type: COMBOBOXEXITEMW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COMBOBOXEXITEMW = extern struct {
    mask: {"kind":"UInt32"},
    iItem: {"kind":"IntPtr"},
    pszText: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchTextMax: {"kind":"Int32"},
    iImage: {"kind":"Int32"},
    iSelectedImage: {"kind":"Int32"},
    iOverlay: {"kind":"Int32"},
    iIndent: {"kind":"Int32"},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
};
// --------------------------------------------------------
// Type: NMCOMBOBOXEXA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMCOMBOBOXEXA = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    ceItem: Windows.Win32.Controls.COMBOBOXEXITEMA,
};
// --------------------------------------------------------
// Type: NMCOMBOBOXEXW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMCOMBOBOXEXW = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    ceItem: Windows.Win32.Controls.COMBOBOXEXITEMW,
};
// --------------------------------------------------------
// Type: NMCBEDRAGBEGINW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMCBEDRAGBEGINW = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    iItemid: {"kind":"Int32"},
    szText: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: NMCBEDRAGBEGINA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMCBEDRAGBEGINA = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    iItemid: {"kind":"Int32"},
    szText: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: NMCBEENDEDITW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMCBEENDEDITW = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    fChanged: Windows.Win32.SystemServices.BOOL,
    iNewSelection: {"kind":"Int32"},
    szText: {"kind":"Array","child": {"kind":"UInt16"}},
    iWhy: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: NMCBEENDEDITA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMCBEENDEDITA = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    fChanged: Windows.Win32.SystemServices.BOOL,
    iNewSelection: {"kind":"Int32"},
    szText: {"kind":"Array","child": {"kind":"SByte"}},
    iWhy: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: TCITEMHEADERA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TCITEMHEADERA = extern struct {
    mask: {"kind":"UInt32"},
    lpReserved1: {"kind":"UInt32"},
    lpReserved2: {"kind":"UInt32"},
    pszText: {"kind""Ptr","child":{"kind":"SByte"}},
    cchTextMax: {"kind":"Int32"},
    iImage: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: TCITEMHEADERW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TCITEMHEADERW = extern struct {
    mask: {"kind":"UInt32"},
    lpReserved1: {"kind":"UInt32"},
    lpReserved2: {"kind":"UInt32"},
    pszText: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchTextMax: {"kind":"Int32"},
    iImage: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: TCITEMA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TCITEMA = extern struct {
    mask: {"kind":"UInt32"},
    dwState: {"kind":"UInt32"},
    dwStateMask: {"kind":"UInt32"},
    pszText: {"kind""Ptr","child":{"kind":"SByte"}},
    cchTextMax: {"kind":"Int32"},
    iImage: {"kind":"Int32"},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
};
// --------------------------------------------------------
// Type: TCITEMW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TCITEMW = extern struct {
    mask: {"kind":"UInt32"},
    dwState: {"kind":"UInt32"},
    dwStateMask: {"kind":"UInt32"},
    pszText: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchTextMax: {"kind":"Int32"},
    iImage: {"kind":"Int32"},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
};
// --------------------------------------------------------
// Type: TCHITTESTINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TCHITTESTINFO = extern struct {
    pt: Windows.Win32.DisplayDevices.POINT,
    flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NMTCKEYDOWN
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const NMTCKEYDOWN = *opaque{
};
// --------------------------------------------------------
// Type: MCHITTESTINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MCHITTESTINFO = extern struct {
    cbSize: {"kind":"UInt32"},
    pt: Windows.Win32.DisplayDevices.POINT,
    uHit: {"kind":"UInt32"},
    st: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    rc: Windows.Win32.DisplayDevices.RECT,
    iOffset: {"kind":"Int32"},
    iRow: {"kind":"Int32"},
    iCol: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: MCGRIDINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MCGRIDINFO = extern struct {
    cbSize: {"kind":"UInt32"},
    dwPart: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    iCalendar: {"kind":"Int32"},
    iRow: {"kind":"Int32"},
    iCol: {"kind":"Int32"},
    bSelected: Windows.Win32.SystemServices.BOOL,
    stStart: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    stEnd: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    rc: Windows.Win32.DisplayDevices.RECT,
    pszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchName: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: NMSELCHANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMSELCHANGE = extern struct {
    nmhdr: Windows.Win32.Controls.NMHDR,
    stSelStart: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    stSelEnd: Windows.Win32.WindowsProgramming.SYSTEMTIME,
};
// --------------------------------------------------------
// Type: NMDAYSTATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMDAYSTATE = extern struct {
    nmhdr: Windows.Win32.Controls.NMHDR,
    stStart: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    cDayState: {"kind":"Int32"},
    prgDayState: {"kind""Ptr","child":{"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: NMVIEWCHANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMVIEWCHANGE = extern struct {
    nmhdr: Windows.Win32.Controls.NMHDR,
    dwOldView: {"kind":"UInt32"},
    dwNewView: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DATETIMEPICKERINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DATETIMEPICKERINFO = extern struct {
    cbSize: {"kind":"UInt32"},
    rcCheck: Windows.Win32.DisplayDevices.RECT,
    stateCheck: {"kind":"UInt32"},
    rcButton: Windows.Win32.DisplayDevices.RECT,
    stateButton: {"kind":"UInt32"},
    hwndEdit: Windows.Win32.WindowsAndMessaging.HWND,
    hwndUD: Windows.Win32.WindowsAndMessaging.HWND,
    hwndDropDown: Windows.Win32.WindowsAndMessaging.HWND,
};
// --------------------------------------------------------
// Type: NMDATETIMECHANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMDATETIMECHANGE = extern struct {
    nmhdr: Windows.Win32.Controls.NMHDR,
    dwFlags: {"kind":"UInt32"},
    st: Windows.Win32.WindowsProgramming.SYSTEMTIME,
};
// --------------------------------------------------------
// Type: NMDATETIMESTRINGA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMDATETIMESTRINGA = extern struct {
    nmhdr: Windows.Win32.Controls.NMHDR,
    pszUserString: {"kind""Ptr","child":{"kind":"SByte"}},
    st: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NMDATETIMESTRINGW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMDATETIMESTRINGW = extern struct {
    nmhdr: Windows.Win32.Controls.NMHDR,
    pszUserString: {"kind""Ptr","child":{"kind":"UInt16"}},
    st: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NMDATETIMEWMKEYDOWNA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMDATETIMEWMKEYDOWNA = extern struct {
    nmhdr: Windows.Win32.Controls.NMHDR,
    nVirtKey: {"kind":"Int32"},
    pszFormat: {"kind""Ptr","child":{"kind":"SByte"}},
    st: Windows.Win32.WindowsProgramming.SYSTEMTIME,
};
// --------------------------------------------------------
// Type: NMDATETIMEWMKEYDOWNW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMDATETIMEWMKEYDOWNW = extern struct {
    nmhdr: Windows.Win32.Controls.NMHDR,
    nVirtKey: {"kind":"Int32"},
    pszFormat: {"kind""Ptr","child":{"kind":"UInt16"}},
    st: Windows.Win32.WindowsProgramming.SYSTEMTIME,
};
// --------------------------------------------------------
// Type: NMDATETIMEFORMATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMDATETIMEFORMATA = extern struct {
    nmhdr: Windows.Win32.Controls.NMHDR,
    pszFormat: {"kind""Ptr","child":{"kind":"SByte"}},
    st: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    pszDisplay: {"kind""Ptr","child":{"kind":"SByte"}},
    szDisplay: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: NMDATETIMEFORMATW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMDATETIMEFORMATW = extern struct {
    nmhdr: Windows.Win32.Controls.NMHDR,
    pszFormat: {"kind""Ptr","child":{"kind":"UInt16"}},
    st: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    pszDisplay: {"kind""Ptr","child":{"kind":"UInt16"}},
    szDisplay: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: NMDATETIMEFORMATQUERYA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMDATETIMEFORMATQUERYA = extern struct {
    nmhdr: Windows.Win32.Controls.NMHDR,
    pszFormat: {"kind""Ptr","child":{"kind":"SByte"}},
    szMax: Windows.Win32.DisplayDevices.SIZE,
};
// --------------------------------------------------------
// Type: NMDATETIMEFORMATQUERYW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMDATETIMEFORMATQUERYW = extern struct {
    nmhdr: Windows.Win32.Controls.NMHDR,
    pszFormat: {"kind""Ptr","child":{"kind":"UInt16"}},
    szMax: Windows.Win32.DisplayDevices.SIZE,
};
// --------------------------------------------------------
// Type: NMIPADDRESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMIPADDRESS = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    iField: {"kind":"Int32"},
    iValue: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: NMPGSCROLL
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const NMPGSCROLL = *opaque{
};
// --------------------------------------------------------
// Type: NMPGCALCSIZE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMPGCALCSIZE = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    dwFlag: {"kind":"UInt32"},
    iWidth: {"kind":"Int32"},
    iHeight: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: NMPGHOTITEM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMPGHOTITEM = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    idOld: {"kind":"Int32"},
    idNew: {"kind":"Int32"},
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: BUTTON_IMAGELIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BUTTON_IMAGELIST = extern struct {
    himl: Windows.Win32.Controls.HIMAGELIST,
    margin: Windows.Win32.DisplayDevices.RECT,
    uAlign: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NMBCHOTITEM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMBCHOTITEM = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: BUTTON_SPLITINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BUTTON_SPLITINFO = extern struct {
    mask: {"kind":"UInt32"},
    himlGlyph: Windows.Win32.Controls.HIMAGELIST,
    uSplitStyle: {"kind":"UInt32"},
    size: Windows.Win32.DisplayDevices.SIZE,
};
// --------------------------------------------------------
// Type: NMBCDROPDOWN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMBCDROPDOWN = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    rcButton: Windows.Win32.DisplayDevices.RECT,
};
// --------------------------------------------------------
// Type: EDITBALLOONTIP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EDITBALLOONTIP = extern struct {
    cbStruct: {"kind":"UInt32"},
    pszTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszText: {"kind""Ptr","child":{"kind":"UInt16"}},
    ttiIcon: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: EC_ENDOFLINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EC_ENDOFLINE = *opaque{
};
// --------------------------------------------------------
// Type: EC_SEARCHWEB_ENTRYPOINT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EC_SEARCHWEB_ENTRYPOINT = *opaque{
};
// --------------------------------------------------------
// Type: NMSEARCHWEB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NMSEARCHWEB = extern struct {
    hdr: Windows.Win32.Controls.NMHDR,
    entrypoint: Windows.Win32.Controls.EC_SEARCHWEB_ENTRYPOINT,
    hasQueryText: Windows.Win32.SystemServices.BOOL,
    invokeSucceeded: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: PFTASKDIALOGCALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFTASKDIALOGCALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: _TASKDIALOG_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _TASKDIALOG_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: TASKDIALOG_MESSAGES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TASKDIALOG_MESSAGES = *opaque{
};
// --------------------------------------------------------
// Type: TASKDIALOG_NOTIFICATIONS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TASKDIALOG_NOTIFICATIONS = *opaque{
};
// --------------------------------------------------------
// Type: TASKDIALOG_BUTTON
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const TASKDIALOG_BUTTON = *opaque{
};
// --------------------------------------------------------
// Type: TASKDIALOG_ELEMENTS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TASKDIALOG_ELEMENTS = *opaque{
};
// --------------------------------------------------------
// Type: TASKDIALOG_ICON_ELEMENTS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TASKDIALOG_ICON_ELEMENTS = *opaque{
};
// --------------------------------------------------------
// Type: _TASKDIALOG_COMMON_BUTTON_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _TASKDIALOG_COMMON_BUTTON_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: TASKDIALOGCONFIG
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const TASKDIALOGCONFIG = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PFNDAENUMCALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNDAENUMCALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNDAENUMCALLBACKCONST
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNDAENUMCALLBACKCONST = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNDACOMPARE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNDACOMPARE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNDACOMPARECONST
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNDACOMPARECONST = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: _DSA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _DSA = opaque {
};
// --------------------------------------------------------
// Type: _DPA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _DPA = opaque {
};
// --------------------------------------------------------
// Type: DPASTREAMINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DPASTREAMINFO = extern struct {
    iPos: {"kind":"Int32"},
    pvItem: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: PFNDPASTREAM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNDPASTREAM = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNDPAMERGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNDPAMERGE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNDPAMERGECONST
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNDPAMERGECONST = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: _LI_METRIC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _LI_METRIC = *opaque{
};
// --------------------------------------------------------
// Type: ImageList
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ImageList = opaque {
};
// --------------------------------------------------------
// Type: IImageList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IImageList = *opaque{
    // TODO: Method 'Add'
    // TODO: Method 'ReplaceIcon'
    // TODO: Method 'SetOverlayImage'
    // TODO: Method 'Replace'
    // TODO: Method 'AddMasked'
    // TODO: Method 'Draw'
    // TODO: Method 'Remove'
    // TODO: Method 'GetIcon'
    // TODO: Method 'GetImageInfo'
    // TODO: Method 'Copy'
    // TODO: Method 'Merge'
    // TODO: Method 'Clone'
    // TODO: Method 'GetImageRect'
    // TODO: Method 'GetIconSize'
    // TODO: Method 'SetIconSize'
    // TODO: Method 'GetImageCount'
    // TODO: Method 'SetImageCount'
    // TODO: Method 'SetBkColor'
    // TODO: Method 'GetBkColor'
    // TODO: Method 'BeginDrag'
    // TODO: Method 'EndDrag'
    // TODO: Method 'DragEnter'
    // TODO: Method 'DragLeave'
    // TODO: Method 'DragMove'
    // TODO: Method 'SetDragCursorImage'
    // TODO: Method 'DragShowNolock'
    // TODO: Method 'GetDragImage'
    // TODO: Method 'GetItemFlags'
    // TODO: Method 'GetOverlayImage'
};
// --------------------------------------------------------
// Type: IMAGELISTSTATS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGELISTSTATS = extern struct {
    cbSize: {"kind":"UInt32"},
    cAlloc: {"kind":"Int32"},
    cUsed: {"kind":"Int32"},
    cStandby: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: IImageList2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IImageList2 = *opaque{
    // TODO: Method 'Resize'
    // TODO: Method 'GetOriginalSize'
    // TODO: Method 'SetOriginalSize'
    // TODO: Method 'SetCallback'
    // TODO: Method 'GetCallback'
    // TODO: Method 'ForceImagePresent'
    // TODO: Method 'DiscardImages'
    // TODO: Method 'PreloadImages'
    // TODO: Method 'GetStatistics'
    // TODO: Method 'Initialize'
    // TODO: Method 'Replace2'
    // TODO: Method 'ReplaceFromImageList'
};
// --------------------------------------------------------
// Type: TEXTMODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TEXTMODE = *opaque{
};
// --------------------------------------------------------
// Type: IMECOMPTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMECOMPTEXT = extern struct {
    cb: {"kind":"Int32"},
    flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: TABLEROWPARMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TABLEROWPARMS = extern struct {
    cbRow: {"kind":"Byte"},
    cbCell: {"kind":"Byte"},
    cCell: {"kind":"Byte"},
    cRow: {"kind":"Byte"},
    dxCellMargin: {"kind":"Int32"},
    dxIndent: {"kind":"Int32"},
    dyHeight: {"kind":"Int32"},
    _bitfield: {"kind":"UInt32"},
    cpStartRow: {"kind":"Int32"},
    bTableLevel: {"kind":"Byte"},
    iCell: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: TABLECELLPARMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TABLECELLPARMS = extern struct {
    dxWidth: {"kind":"Int32"},
    _bitfield: {"kind":"UInt16"},
    wShading: {"kind":"UInt16"},
    dxBrdrLeft: {"kind":"Int16"},
    dyBrdrTop: {"kind":"Int16"},
    dxBrdrRight: {"kind":"Int16"},
    dyBrdrBottom: {"kind":"Int16"},
    crBrdrLeft: {"kind":"UInt32"},
    crBrdrTop: {"kind":"UInt32"},
    crBrdrRight: {"kind":"UInt32"},
    crBrdrBottom: {"kind":"UInt32"},
    crBackPat: {"kind":"UInt32"},
    crForePat: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: AutoCorrectProc
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AutoCorrectProc = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RICHEDIT_IMAGE_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RICHEDIT_IMAGE_PARAMETERS = extern struct {
    xWidth: {"kind":"Int32"},
    yHeight: {"kind":"Int32"},
    Ascent: {"kind":"Int32"},
    Type: {"kind":"Int32"},
    pwszAlternateText: {"kind""Ptr","child":{"kind":"UInt16"}},
    pIStream: Windows.Win32.StructuredStorage.IStream,
};
// --------------------------------------------------------
// Type: ENDCOMPOSITIONNOTIFY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENDCOMPOSITIONNOTIFY = extern struct {
    nmhdr: Windows.Win32.Controls.NMHDR,
    dwCode: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: EDITWORDBREAKPROCEX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EDITWORDBREAKPROCEX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CHARFORMATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CHARFORMATA = extern struct {
    cbSize: {"kind":"UInt32"},
    dwMask: {"kind":"UInt32"},
    dwEffects: {"kind":"UInt32"},
    yHeight: {"kind":"Int32"},
    yOffset: {"kind":"Int32"},
    crTextColor: {"kind":"UInt32"},
    bCharSet: {"kind":"Byte"},
    bPitchAndFamily: {"kind":"Byte"},
    szFaceName: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: CHARFORMATW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CHARFORMATW = extern struct {
    cbSize: {"kind":"UInt32"},
    dwMask: {"kind":"UInt32"},
    dwEffects: {"kind":"UInt32"},
    yHeight: {"kind":"Int32"},
    yOffset: {"kind":"Int32"},
    crTextColor: {"kind":"UInt32"},
    bCharSet: {"kind":"Byte"},
    bPitchAndFamily: {"kind":"Byte"},
    szFaceName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: CHARFORMAT2W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CHARFORMAT2W = extern struct {
    __AnonymousBase_richedit_L711_C23: Windows.Win32.Controls.CHARFORMATW,
    wWeight: {"kind":"UInt16"},
    sSpacing: {"kind":"Int16"},
    crBackColor: {"kind":"UInt32"},
    lcid: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Controls.CHARFORMAT2W+_Anonymous_e__Union,
    sStyle: {"kind":"Int16"},
    wKerning: {"kind":"UInt16"},
    bUnderlineType: {"kind":"Byte"},
    bAnimation: {"kind":"Byte"},
    bRevAuthor: {"kind":"Byte"},
    bUnderlineColor: {"kind":"Byte"},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CHARFORMAT2A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CHARFORMAT2A = extern struct {
    __AnonymousBase_richedit_L736_C23: Windows.Win32.Controls.CHARFORMATA,
    wWeight: {"kind":"UInt16"},
    sSpacing: {"kind":"Int16"},
    crBackColor: {"kind":"UInt32"},
    lcid: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Controls.CHARFORMAT2A+_Anonymous_e__Union,
    sStyle: {"kind":"Int16"},
    wKerning: {"kind":"UInt16"},
    bUnderlineType: {"kind":"Byte"},
    bAnimation: {"kind":"Byte"},
    bRevAuthor: {"kind":"Byte"},
    bUnderlineColor: {"kind":"Byte"},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CHARRANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CHARRANGE = extern struct {
    cpMin: {"kind":"Int32"},
    cpMax: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: TEXTRANGEA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TEXTRANGEA = extern struct {
    chrg: Windows.Win32.Controls.CHARRANGE,
    lpstrText: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: TEXTRANGEW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TEXTRANGEW = extern struct {
    chrg: Windows.Win32.Controls.CHARRANGE,
    lpstrText: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: EDITSTREAMCALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EDITSTREAMCALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: EDITSTREAM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EDITSTREAM = extern struct {
    dwCookie: {"kind":"UIntPtr"},
    dwError: {"kind":"UInt32"},
    pfnCallback: Windows.Win32.Controls.EDITSTREAMCALLBACK,
};
// --------------------------------------------------------
// Type: FINDTEXTA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FINDTEXTA = extern struct {
    chrg: Windows.Win32.Controls.CHARRANGE,
    lpstrText: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: FINDTEXTW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FINDTEXTW = extern struct {
    chrg: Windows.Win32.Controls.CHARRANGE,
    lpstrText: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: FINDTEXTEXA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FINDTEXTEXA = extern struct {
    chrg: Windows.Win32.Controls.CHARRANGE,
    lpstrText: {"kind""Ptr","child":{"kind":"SByte"}},
    chrgText: Windows.Win32.Controls.CHARRANGE,
};
// --------------------------------------------------------
// Type: FINDTEXTEXW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FINDTEXTEXW = extern struct {
    chrg: Windows.Win32.Controls.CHARRANGE,
    lpstrText: {"kind""Ptr","child":{"kind":"UInt16"}},
    chrgText: Windows.Win32.Controls.CHARRANGE,
};
// --------------------------------------------------------
// Type: FORMATRANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FORMATRANGE = extern struct {
    hdc: Windows.Win32.Gdi.HDC,
    hdcTarget: Windows.Win32.Gdi.HDC,
    rc: Windows.Win32.DisplayDevices.RECT,
    rcPage: Windows.Win32.DisplayDevices.RECT,
    chrg: Windows.Win32.Controls.CHARRANGE,
};
// --------------------------------------------------------
// Type: PARAFORMAT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PARAFORMAT = extern struct {
    cbSize: {"kind":"UInt32"},
    dwMask: {"kind":"UInt32"},
    wNumbering: {"kind":"UInt16"},
    Anonymous: Windows.Win32.Controls.PARAFORMAT+_Anonymous_e__Union,
    dxStartIndent: {"kind":"Int32"},
    dxRightIndent: {"kind":"Int32"},
    dxOffset: {"kind":"Int32"},
    wAlignment: {"kind":"UInt16"},
    cTabCount: {"kind":"Int16"},
    rgxTabs: {"kind":"Array","child": {"kind":"Int32"}},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PARAFORMAT2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PARAFORMAT2 = extern struct {
    __AnonymousBase_richedit_L1149_C22: Windows.Win32.Controls.PARAFORMAT,
    dySpaceBefore: {"kind":"Int32"},
    dySpaceAfter: {"kind":"Int32"},
    dyLineSpacing: {"kind":"Int32"},
    sStyle: {"kind":"Int16"},
    bLineSpacingRule: {"kind":"Byte"},
    bOutlineLevel: {"kind":"Byte"},
    wShadingWeight: {"kind":"UInt16"},
    wShadingStyle: {"kind":"UInt16"},
    wNumberingStart: {"kind":"UInt16"},
    wNumberingStyle: {"kind":"UInt16"},
    wNumberingTab: {"kind":"UInt16"},
    wBorderSpace: {"kind":"UInt16"},
    wBorderWidth: {"kind":"UInt16"},
    wBorders: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: MSGFILTER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSGFILTER = extern struct {
    nmhdr: Windows.Win32.Controls.NMHDR,
    msg: {"kind":"UInt32"},
    wParam: Windows.Win32.WindowsAndMessaging.WPARAM,
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
};
// --------------------------------------------------------
// Type: REQRESIZE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const REQRESIZE = extern struct {
    nmhdr: Windows.Win32.Controls.NMHDR,
    rc: Windows.Win32.DisplayDevices.RECT,
};
// --------------------------------------------------------
// Type: SELCHANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SELCHANGE = extern struct {
    nmhdr: Windows.Win32.Controls.NMHDR,
    chrg: Windows.Win32.Controls.CHARRANGE,
    seltyp: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: _grouptypingchange
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _grouptypingchange = extern struct {
    nmhdr: Windows.Win32.Controls.NMHDR,
    fGroupTyping: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: CLIPBOARDFORMAT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLIPBOARDFORMAT = extern struct {
    nmhdr: Windows.Win32.Controls.NMHDR,
    cf: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: GETCONTEXTMENUEX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GETCONTEXTMENUEX = extern struct {
    chrg: Windows.Win32.Controls.CHARRANGE,
    dwFlags: {"kind":"UInt32"},
    pt: Windows.Win32.DisplayDevices.POINT,
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: ENDROPFILES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENDROPFILES = extern struct {
    nmhdr: Windows.Win32.Controls.NMHDR,
    hDrop: Windows.Win32.SystemServices.HANDLE,
    cp: {"kind":"Int32"},
    fProtected: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: ENPROTECTED
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENPROTECTED = extern struct {
    nmhdr: Windows.Win32.Controls.NMHDR,
    msg: {"kind":"UInt32"},
    wParam: Windows.Win32.WindowsAndMessaging.WPARAM,
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
    chrg: Windows.Win32.Controls.CHARRANGE,
};
// --------------------------------------------------------
// Type: ENSAVECLIPBOARD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENSAVECLIPBOARD = extern struct {
    nmhdr: Windows.Win32.Controls.NMHDR,
    cObjectCount: {"kind":"Int32"},
    cch: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: ENOLEOPFAILED
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENOLEOPFAILED = extern struct {
    nmhdr: Windows.Win32.Controls.NMHDR,
    iob: {"kind":"Int32"},
    lOper: {"kind":"Int32"},
    hr: Windows.Win32.Com.HRESULT,
};
// --------------------------------------------------------
// Type: OBJECTPOSITIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OBJECTPOSITIONS = extern struct {
    nmhdr: Windows.Win32.Controls.NMHDR,
    cObjectCount: {"kind":"Int32"},
    pcpPositions: {"kind""Ptr","child":{"kind":"Int32"}},
};
// --------------------------------------------------------
// Type: ENLINK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENLINK = extern struct {
    nmhdr: Windows.Win32.Controls.NMHDR,
    msg: {"kind":"UInt32"},
    wParam: Windows.Win32.WindowsAndMessaging.WPARAM,
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
    chrg: Windows.Win32.Controls.CHARRANGE,
};
// --------------------------------------------------------
// Type: ENLOWFIRTF
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENLOWFIRTF = extern struct {
    nmhdr: Windows.Win32.Controls.NMHDR,
    szControl: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: ENCORRECTTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENCORRECTTEXT = extern struct {
    nmhdr: Windows.Win32.Controls.NMHDR,
    chrg: Windows.Win32.Controls.CHARRANGE,
    seltyp: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: PUNCTUATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PUNCTUATION = extern struct {
    iSize: {"kind":"UInt32"},
    szPunctuation: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: COMPCOLOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COMPCOLOR = extern struct {
    crText: {"kind":"UInt32"},
    crBackground: {"kind":"UInt32"},
    dwEffects: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: REPASTESPECIAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const REPASTESPECIAL = extern struct {
    dwAspect: {"kind":"UInt32"},
    dwParam: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: UNDONAMEID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UNDONAMEID = *opaque{
};
// --------------------------------------------------------
// Type: SETTEXTEX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SETTEXTEX = extern struct {
    flags: {"kind":"UInt32"},
    codepage: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: GETTEXTEX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GETTEXTEX = extern struct {
    cb: {"kind":"UInt32"},
    flags: {"kind":"UInt32"},
    codepage: {"kind":"UInt32"},
    lpDefaultChar: {"kind""Ptr","child":{"kind":"SByte"}},
    lpUsedDefChar: {"kind""Ptr","child":{"kind":"Int32"}},
};
// --------------------------------------------------------
// Type: GETTEXTLENGTHEX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GETTEXTLENGTHEX = extern struct {
    flags: {"kind":"UInt32"},
    codepage: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: BIDIOPTIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BIDIOPTIONS = extern struct {
    cbSize: {"kind":"UInt32"},
    wMask: {"kind":"UInt16"},
    wEffects: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: KHYPH
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KHYPH = *opaque{
};
// --------------------------------------------------------
// Type: hyphresult
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const hyphresult = extern struct {
    khyph: Windows.Win32.Controls.KHYPH,
    ichHyph: {"kind":"Int32"},
    chHyph: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: HYPHENATEINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HYPHENATEINFO = extern struct {
    cbSize: {"kind":"Int16"},
    dxHyphenateZone: {"kind":"Int16"},
    pfnHyphenate: {"kind":"IntPtr"},
};
// --------------------------------------------------------
// Type: tomConstants
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const tomConstants = *opaque{
};
// --------------------------------------------------------
// Type: OBJECTTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OBJECTTYPE = *opaque{
};
// --------------------------------------------------------
// Type: MANCODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MANCODE = *opaque{
};
// --------------------------------------------------------
// Type: ITextDocument
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITextDocument = *opaque{
    // TODO: Method 'GetName'
    // TODO: Method 'GetSelection'
    // TODO: Method 'GetStoryCount'
    // TODO: Method 'GetStoryRanges'
    // TODO: Method 'GetSaved'
    // TODO: Method 'SetSaved'
    // TODO: Method 'GetDefaultTabStop'
    // TODO: Method 'SetDefaultTabStop'
    // TODO: Method 'New'
    // TODO: Method 'Open'
    // TODO: Method 'Save'
    // TODO: Method 'Freeze'
    // TODO: Method 'Unfreeze'
    // TODO: Method 'BeginEditCollection'
    // TODO: Method 'EndEditCollection'
    // TODO: Method 'Undo'
    // TODO: Method 'Redo'
    // TODO: Method 'Range'
    // TODO: Method 'RangeFromPoint'
};
// --------------------------------------------------------
// Type: ITextRange
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITextRange = *opaque{
    // TODO: Method 'GetText'
    // TODO: Method 'SetText'
    // TODO: Method 'GetChar'
    // TODO: Method 'SetChar'
    // TODO: Method 'GetDuplicate'
    // TODO: Method 'GetFormattedText'
    // TODO: Method 'SetFormattedText'
    // TODO: Method 'GetStart'
    // TODO: Method 'SetStart'
    // TODO: Method 'GetEnd'
    // TODO: Method 'SetEnd'
    // TODO: Method 'GetFont'
    // TODO: Method 'SetFont'
    // TODO: Method 'GetPara'
    // TODO: Method 'SetPara'
    // TODO: Method 'GetStoryLength'
    // TODO: Method 'GetStoryType'
    // TODO: Method 'Collapse'
    // TODO: Method 'Expand'
    // TODO: Method 'GetIndex'
    // TODO: Method 'SetIndex'
    // TODO: Method 'SetRange'
    // TODO: Method 'InRange'
    // TODO: Method 'InStory'
    // TODO: Method 'IsEqual'
    // TODO: Method 'Select'
    // TODO: Method 'StartOf'
    // TODO: Method 'EndOf'
    // TODO: Method 'Move'
    // TODO: Method 'MoveStart'
    // TODO: Method 'MoveEnd'
    // TODO: Method 'MoveWhile'
    // TODO: Method 'MoveStartWhile'
    // TODO: Method 'MoveEndWhile'
    // TODO: Method 'MoveUntil'
    // TODO: Method 'MoveStartUntil'
    // TODO: Method 'MoveEndUntil'
    // TODO: Method 'FindTextA'
    // TODO: Method 'FindTextStart'
    // TODO: Method 'FindTextEnd'
    // TODO: Method 'Delete'
    // TODO: Method 'Cut'
    // TODO: Method 'Copy'
    // TODO: Method 'Paste'
    // TODO: Method 'CanPaste'
    // TODO: Method 'CanEdit'
    // TODO: Method 'ChangeCase'
    // TODO: Method 'GetPoint'
    // TODO: Method 'SetPoint'
    // TODO: Method 'ScrollIntoView'
    // TODO: Method 'GetEmbeddedObject'
};
// --------------------------------------------------------
// Type: ITextSelection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITextSelection = *opaque{
    // TODO: Method 'GetFlags'
    // TODO: Method 'SetFlags'
    // TODO: Method 'GetType'
    // TODO: Method 'MoveLeft'
    // TODO: Method 'MoveRight'
    // TODO: Method 'MoveUp'
    // TODO: Method 'MoveDown'
    // TODO: Method 'HomeKey'
    // TODO: Method 'EndKey'
    // TODO: Method 'TypeText'
};
// --------------------------------------------------------
// Type: ITextFont
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITextFont = *opaque{
    // TODO: Method 'GetDuplicate'
    // TODO: Method 'SetDuplicate'
    // TODO: Method 'CanChange'
    // TODO: Method 'IsEqual'
    // TODO: Method 'Reset'
    // TODO: Method 'GetStyle'
    // TODO: Method 'SetStyle'
    // TODO: Method 'GetAllCaps'
    // TODO: Method 'SetAllCaps'
    // TODO: Method 'GetAnimation'
    // TODO: Method 'SetAnimation'
    // TODO: Method 'GetBackColor'
    // TODO: Method 'SetBackColor'
    // TODO: Method 'GetBold'
    // TODO: Method 'SetBold'
    // TODO: Method 'GetEmboss'
    // TODO: Method 'SetEmboss'
    // TODO: Method 'GetForeColor'
    // TODO: Method 'SetForeColor'
    // TODO: Method 'GetHidden'
    // TODO: Method 'SetHidden'
    // TODO: Method 'GetEngrave'
    // TODO: Method 'SetEngrave'
    // TODO: Method 'GetItalic'
    // TODO: Method 'SetItalic'
    // TODO: Method 'GetKerning'
    // TODO: Method 'SetKerning'
    // TODO: Method 'GetLanguageID'
    // TODO: Method 'SetLanguageID'
    // TODO: Method 'GetName'
    // TODO: Method 'SetName'
    // TODO: Method 'GetOutline'
    // TODO: Method 'SetOutline'
    // TODO: Method 'GetPosition'
    // TODO: Method 'SetPosition'
    // TODO: Method 'GetProtected'
    // TODO: Method 'SetProtected'
    // TODO: Method 'GetShadow'
    // TODO: Method 'SetShadow'
    // TODO: Method 'GetSize'
    // TODO: Method 'SetSize'
    // TODO: Method 'GetSmallCaps'
    // TODO: Method 'SetSmallCaps'
    // TODO: Method 'GetSpacing'
    // TODO: Method 'SetSpacing'
    // TODO: Method 'GetStrikeThrough'
    // TODO: Method 'SetStrikeThrough'
    // TODO: Method 'GetSubscript'
    // TODO: Method 'SetSubscript'
    // TODO: Method 'GetSuperscript'
    // TODO: Method 'SetSuperscript'
    // TODO: Method 'GetUnderline'
    // TODO: Method 'SetUnderline'
    // TODO: Method 'GetWeight'
    // TODO: Method 'SetWeight'
};
// --------------------------------------------------------
// Type: ITextPara
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITextPara = *opaque{
    // TODO: Method 'GetDuplicate'
    // TODO: Method 'SetDuplicate'
    // TODO: Method 'CanChange'
    // TODO: Method 'IsEqual'
    // TODO: Method 'Reset'
    // TODO: Method 'GetStyle'
    // TODO: Method 'SetStyle'
    // TODO: Method 'GetAlignment'
    // TODO: Method 'SetAlignment'
    // TODO: Method 'GetHyphenation'
    // TODO: Method 'SetHyphenation'
    // TODO: Method 'GetFirstLineIndent'
    // TODO: Method 'GetKeepTogether'
    // TODO: Method 'SetKeepTogether'
    // TODO: Method 'GetKeepWithNext'
    // TODO: Method 'SetKeepWithNext'
    // TODO: Method 'GetLeftIndent'
    // TODO: Method 'GetLineSpacing'
    // TODO: Method 'GetLineSpacingRule'
    // TODO: Method 'GetListAlignment'
    // TODO: Method 'SetListAlignment'
    // TODO: Method 'GetListLevelIndex'
    // TODO: Method 'SetListLevelIndex'
    // TODO: Method 'GetListStart'
    // TODO: Method 'SetListStart'
    // TODO: Method 'GetListTab'
    // TODO: Method 'SetListTab'
    // TODO: Method 'GetListType'
    // TODO: Method 'SetListType'
    // TODO: Method 'GetNoLineNumber'
    // TODO: Method 'SetNoLineNumber'
    // TODO: Method 'GetPageBreakBefore'
    // TODO: Method 'SetPageBreakBefore'
    // TODO: Method 'GetRightIndent'
    // TODO: Method 'SetRightIndent'
    // TODO: Method 'SetIndents'
    // TODO: Method 'SetLineSpacing'
    // TODO: Method 'GetSpaceAfter'
    // TODO: Method 'SetSpaceAfter'
    // TODO: Method 'GetSpaceBefore'
    // TODO: Method 'SetSpaceBefore'
    // TODO: Method 'GetWidowControl'
    // TODO: Method 'SetWidowControl'
    // TODO: Method 'GetTabCount'
    // TODO: Method 'AddTab'
    // TODO: Method 'ClearAllTabs'
    // TODO: Method 'DeleteTab'
    // TODO: Method 'GetTab'
};
// --------------------------------------------------------
// Type: ITextStoryRanges
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITextStoryRanges = *opaque{
    // TODO: Method '_NewEnum'
    // TODO: Method 'Item'
    // TODO: Method 'GetCount'
};
// --------------------------------------------------------
// Type: ITextDocument2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITextDocument2 = *opaque{
    // TODO: Method 'GetCaretType'
    // TODO: Method 'SetCaretType'
    // TODO: Method 'GetDisplays'
    // TODO: Method 'GetDocumentFont'
    // TODO: Method 'SetDocumentFont'
    // TODO: Method 'GetDocumentPara'
    // TODO: Method 'SetDocumentPara'
    // TODO: Method 'GetEastAsianFlags'
    // TODO: Method 'GetGenerator'
    // TODO: Method 'SetIMEInProgress'
    // TODO: Method 'GetNotificationMode'
    // TODO: Method 'SetNotificationMode'
    // TODO: Method 'GetSelection2'
    // TODO: Method 'GetStoryRanges2'
    // TODO: Method 'GetTypographyOptions'
    // TODO: Method 'GetVersion'
    // TODO: Method 'GetWindow'
    // TODO: Method 'AttachMsgFilter'
    // TODO: Method 'CheckTextLimit'
    // TODO: Method 'GetCallManager'
    // TODO: Method 'GetClientRect'
    // TODO: Method 'GetEffectColor'
    // TODO: Method 'GetImmContext'
    // TODO: Method 'GetPreferredFont'
    // TODO: Method 'GetProperty'
    // TODO: Method 'GetStrings'
    // TODO: Method 'Notify'
    // TODO: Method 'Range2'
    // TODO: Method 'RangeFromPoint2'
    // TODO: Method 'ReleaseCallManager'
    // TODO: Method 'ReleaseImmContext'
    // TODO: Method 'SetEffectColor'
    // TODO: Method 'SetProperty'
    // TODO: Method 'SetTypographyOptions'
    // TODO: Method 'SysBeep'
    // TODO: Method 'Update'
    // TODO: Method 'UpdateWindow'
    // TODO: Method 'GetMathProperties'
    // TODO: Method 'SetMathProperties'
    // TODO: Method 'GetActiveStory'
    // TODO: Method 'SetActiveStory'
    // TODO: Method 'GetMainStory'
    // TODO: Method 'GetNewStory'
    // TODO: Method 'GetStory'
};
// --------------------------------------------------------
// Type: ITextRange2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITextRange2 = *opaque{
    // TODO: Method 'GetCch'
    // TODO: Method 'GetCells'
    // TODO: Method 'GetColumn'
    // TODO: Method 'GetCount'
    // TODO: Method 'GetDuplicate2'
    // TODO: Method 'GetFont2'
    // TODO: Method 'SetFont2'
    // TODO: Method 'GetFormattedText2'
    // TODO: Method 'SetFormattedText2'
    // TODO: Method 'GetGravity'
    // TODO: Method 'SetGravity'
    // TODO: Method 'GetPara2'
    // TODO: Method 'SetPara2'
    // TODO: Method 'GetRow'
    // TODO: Method 'GetStartPara'
    // TODO: Method 'GetTable'
    // TODO: Method 'GetURL'
    // TODO: Method 'SetURL'
    // TODO: Method 'AddSubrange'
    // TODO: Method 'BuildUpMath'
    // TODO: Method 'DeleteSubrange'
    // TODO: Method 'Find'
    // TODO: Method 'GetChar2'
    // TODO: Method 'GetDropCap'
    // TODO: Method 'GetInlineObject'
    // TODO: Method 'GetProperty'
    // TODO: Method 'GetRect'
    // TODO: Method 'GetSubrange'
    // TODO: Method 'GetText2'
    // TODO: Method 'HexToUnicode'
    // TODO: Method 'InsertTable'
    // TODO: Method 'Linearize'
    // TODO: Method 'SetActiveSubrange'
    // TODO: Method 'SetDropCap'
    // TODO: Method 'SetProperty'
    // TODO: Method 'SetText2'
    // TODO: Method 'UnicodeToHex'
    // TODO: Method 'SetInlineObject'
    // TODO: Method 'GetMathFunctionType'
    // TODO: Method 'InsertImage'
};
// --------------------------------------------------------
// Type: ITextSelection2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITextSelection2 = *opaque{
};
// --------------------------------------------------------
// Type: ITextFont2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITextFont2 = *opaque{
    // TODO: Method 'GetCount'
    // TODO: Method 'GetAutoLigatures'
    // TODO: Method 'SetAutoLigatures'
    // TODO: Method 'GetAutospaceAlpha'
    // TODO: Method 'SetAutospaceAlpha'
    // TODO: Method 'GetAutospaceNumeric'
    // TODO: Method 'SetAutospaceNumeric'
    // TODO: Method 'GetAutospaceParens'
    // TODO: Method 'SetAutospaceParens'
    // TODO: Method 'GetCharRep'
    // TODO: Method 'SetCharRep'
    // TODO: Method 'GetCompressionMode'
    // TODO: Method 'SetCompressionMode'
    // TODO: Method 'GetCookie'
    // TODO: Method 'SetCookie'
    // TODO: Method 'GetDoubleStrike'
    // TODO: Method 'SetDoubleStrike'
    // TODO: Method 'GetDuplicate2'
    // TODO: Method 'SetDuplicate2'
    // TODO: Method 'GetLinkType'
    // TODO: Method 'GetMathZone'
    // TODO: Method 'SetMathZone'
    // TODO: Method 'GetModWidthPairs'
    // TODO: Method 'SetModWidthPairs'
    // TODO: Method 'GetModWidthSpace'
    // TODO: Method 'SetModWidthSpace'
    // TODO: Method 'GetOldNumbers'
    // TODO: Method 'SetOldNumbers'
    // TODO: Method 'GetOverlapping'
    // TODO: Method 'SetOverlapping'
    // TODO: Method 'GetPositionSubSuper'
    // TODO: Method 'SetPositionSubSuper'
    // TODO: Method 'GetScaling'
    // TODO: Method 'SetScaling'
    // TODO: Method 'GetSpaceExtension'
    // TODO: Method 'SetSpaceExtension'
    // TODO: Method 'GetUnderlinePositionMode'
    // TODO: Method 'SetUnderlinePositionMode'
    // TODO: Method 'GetEffects'
    // TODO: Method 'GetEffects2'
    // TODO: Method 'GetProperty'
    // TODO: Method 'GetPropertyInfo'
    // TODO: Method 'IsEqual2'
    // TODO: Method 'SetEffects'
    // TODO: Method 'SetEffects2'
    // TODO: Method 'SetProperty'
};
// --------------------------------------------------------
// Type: ITextPara2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITextPara2 = *opaque{
    // TODO: Method 'GetBorders'
    // TODO: Method 'GetDuplicate2'
    // TODO: Method 'SetDuplicate2'
    // TODO: Method 'GetFontAlignment'
    // TODO: Method 'SetFontAlignment'
    // TODO: Method 'GetHangingPunctuation'
    // TODO: Method 'SetHangingPunctuation'
    // TODO: Method 'GetSnapToGrid'
    // TODO: Method 'SetSnapToGrid'
    // TODO: Method 'GetTrimPunctuationAtStart'
    // TODO: Method 'SetTrimPunctuationAtStart'
    // TODO: Method 'GetEffects'
    // TODO: Method 'GetProperty'
    // TODO: Method 'IsEqual2'
    // TODO: Method 'SetEffects'
    // TODO: Method 'SetProperty'
};
// --------------------------------------------------------
// Type: ITextStoryRanges2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITextStoryRanges2 = *opaque{
    // TODO: Method 'Item2'
};
// --------------------------------------------------------
// Type: ITextStory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITextStory = *opaque{
    // TODO: Method 'GetActive'
    // TODO: Method 'SetActive'
    // TODO: Method 'GetDisplay'
    // TODO: Method 'GetIndex'
    // TODO: Method 'GetType'
    // TODO: Method 'SetType'
    // TODO: Method 'GetProperty'
    // TODO: Method 'GetRange'
    // TODO: Method 'GetText'
    // TODO: Method 'SetFormattedText'
    // TODO: Method 'SetProperty'
    // TODO: Method 'SetText'
};
// --------------------------------------------------------
// Type: ITextStrings
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITextStrings = *opaque{
    // TODO: Method 'Item'
    // TODO: Method 'GetCount'
    // TODO: Method 'Add'
    // TODO: Method 'Append'
    // TODO: Method 'Cat2'
    // TODO: Method 'CatTop2'
    // TODO: Method 'DeleteRange'
    // TODO: Method 'EncodeFunction'
    // TODO: Method 'GetCch'
    // TODO: Method 'InsertNullStr'
    // TODO: Method 'MoveBoundary'
    // TODO: Method 'PrefixTop'
    // TODO: Method 'Remove'
    // TODO: Method 'SetFormattedText'
    // TODO: Method 'SetOpCp'
    // TODO: Method 'SuffixTop'
    // TODO: Method 'Swap'
};
// --------------------------------------------------------
// Type: ITextRow
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITextRow = *opaque{
    // TODO: Method 'GetAlignment'
    // TODO: Method 'SetAlignment'
    // TODO: Method 'GetCellCount'
    // TODO: Method 'SetCellCount'
    // TODO: Method 'GetCellCountCache'
    // TODO: Method 'SetCellCountCache'
    // TODO: Method 'GetCellIndex'
    // TODO: Method 'SetCellIndex'
    // TODO: Method 'GetCellMargin'
    // TODO: Method 'SetCellMargin'
    // TODO: Method 'GetHeight'
    // TODO: Method 'SetHeight'
    // TODO: Method 'GetIndent'
    // TODO: Method 'SetIndent'
    // TODO: Method 'GetKeepTogether'
    // TODO: Method 'SetKeepTogether'
    // TODO: Method 'GetKeepWithNext'
    // TODO: Method 'SetKeepWithNext'
    // TODO: Method 'GetNestLevel'
    // TODO: Method 'GetRTL'
    // TODO: Method 'SetRTL'
    // TODO: Method 'GetCellAlignment'
    // TODO: Method 'SetCellAlignment'
    // TODO: Method 'GetCellColorBack'
    // TODO: Method 'SetCellColorBack'
    // TODO: Method 'GetCellColorFore'
    // TODO: Method 'SetCellColorFore'
    // TODO: Method 'GetCellMergeFlags'
    // TODO: Method 'SetCellMergeFlags'
    // TODO: Method 'GetCellShading'
    // TODO: Method 'SetCellShading'
    // TODO: Method 'GetCellVerticalText'
    // TODO: Method 'SetCellVerticalText'
    // TODO: Method 'GetCellWidth'
    // TODO: Method 'SetCellWidth'
    // TODO: Method 'GetCellBorderColors'
    // TODO: Method 'GetCellBorderWidths'
    // TODO: Method 'SetCellBorderColors'
    // TODO: Method 'SetCellBorderWidths'
    // TODO: Method 'Apply'
    // TODO: Method 'CanChange'
    // TODO: Method 'GetProperty'
    // TODO: Method 'Insert'
    // TODO: Method 'IsEqual'
    // TODO: Method 'Reset'
    // TODO: Method 'SetProperty'
};
// --------------------------------------------------------
// Type: ITextDisplays
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITextDisplays = *opaque{
};
// --------------------------------------------------------
// Type: ITextDocument2Old
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITextDocument2Old = *opaque{
    // TODO: Method 'AttachMsgFilter'
    // TODO: Method 'SetEffectColor'
    // TODO: Method 'GetEffectColor'
    // TODO: Method 'GetCaretType'
    // TODO: Method 'SetCaretType'
    // TODO: Method 'GetImmContext'
    // TODO: Method 'ReleaseImmContext'
    // TODO: Method 'GetPreferredFont'
    // TODO: Method 'GetNotificationMode'
    // TODO: Method 'SetNotificationMode'
    // TODO: Method 'GetClientRect'
    // TODO: Method 'GetSelection2'
    // TODO: Method 'GetWindow'
    // TODO: Method 'GetFEFlags'
    // TODO: Method 'UpdateWindow'
    // TODO: Method 'CheckTextLimit'
    // TODO: Method 'IMEInProgress'
    // TODO: Method 'SysBeep'
    // TODO: Method 'Update'
    // TODO: Method 'Notify'
    // TODO: Method 'GetDocumentFont'
    // TODO: Method 'GetDocumentPara'
    // TODO: Method 'GetCallManager'
    // TODO: Method 'ReleaseCallManager'
};
// --------------------------------------------------------
// Type: REOBJECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const REOBJECT = extern struct {
    cbStruct: {"kind":"UInt32"},
    cp: {"kind":"Int32"},
    clsid: Guid,
    poleobj: Windows.Win32.Com.IOleObject,
    pstg: Windows.Win32.StructuredStorage.IStorage,
    polesite: Windows.Win32.Com.IOleClientSite,
    sizel: Windows.Win32.DisplayDevices.SIZE,
    dvaspect: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    dwUser: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IRichEditOle
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRichEditOle = *opaque{
    // TODO: Method 'GetClientSite'
    // TODO: Method 'GetObjectCount'
    // TODO: Method 'GetLinkCount'
    // TODO: Method 'GetObjectA'
    // TODO: Method 'InsertObject'
    // TODO: Method 'ConvertObject'
    // TODO: Method 'ActivateAs'
    // TODO: Method 'SetHostNames'
    // TODO: Method 'SetLinkAvailable'
    // TODO: Method 'SetDvaspect'
    // TODO: Method 'HandsOffStorage'
    // TODO: Method 'SaveCompleted'
    // TODO: Method 'InPlaceDeactivate'
    // TODO: Method 'ContextSensitiveHelp'
    // TODO: Method 'GetClipboardData'
    // TODO: Method 'ImportDataObject'
};
// --------------------------------------------------------
// Type: IRichEditOleCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRichEditOleCallback = *opaque{
    // TODO: Method 'GetNewStorage'
    // TODO: Method 'GetInPlaceContext'
    // TODO: Method 'ShowContainerUI'
    // TODO: Method 'QueryInsertObject'
    // TODO: Method 'DeleteObject'
    // TODO: Method 'QueryAcceptData'
    // TODO: Method 'ContextSensitiveHelp'
    // TODO: Method 'GetClipboardData'
    // TODO: Method 'GetDragDropEffect'
    // TODO: Method 'GetContextMenu'
};
// --------------------------------------------------------
// Type: TXTBACKSTYLE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TXTBACKSTYLE = *opaque{
};
// --------------------------------------------------------
// Type: TXTHITRESULT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TXTHITRESULT = *opaque{
};
// --------------------------------------------------------
// Type: TXTNATURALSIZE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TXTNATURALSIZE = *opaque{
};
// --------------------------------------------------------
// Type: TXTVIEW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TXTVIEW = *opaque{
};
// --------------------------------------------------------
// Type: CHANGETYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CHANGETYPE = *opaque{
};
// --------------------------------------------------------
// Type: CHANGENOTIFY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CHANGENOTIFY = extern struct {
    dwChangeType: {"kind":"UInt32"},
    pvCookieData: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: ITextServices
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITextServices = *opaque{
    // TODO: Method 'TxSendMessage'
    // TODO: Method 'TxDraw'
    // TODO: Method 'TxGetHScroll'
    // TODO: Method 'TxGetVScroll'
    // TODO: Method 'OnTxSetCursor'
    // TODO: Method 'TxQueryHitPoint'
    // TODO: Method 'OnTxInPlaceActivate'
    // TODO: Method 'OnTxInPlaceDeactivate'
    // TODO: Method 'OnTxUIActivate'
    // TODO: Method 'OnTxUIDeactivate'
    // TODO: Method 'TxGetText'
    // TODO: Method 'TxSetText'
    // TODO: Method 'TxGetCurTargetX'
    // TODO: Method 'TxGetBaseLinePos'
    // TODO: Method 'TxGetNaturalSize'
    // TODO: Method 'TxGetDropTarget'
    // TODO: Method 'OnTxPropertyBitsChange'
    // TODO: Method 'TxGetCachedSize'
};
// --------------------------------------------------------
// Type: CARET_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CARET_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CARET_INFO
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const CARET_INFO = *opaque{
};
// --------------------------------------------------------
// Type: ITextHost
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITextHost = *opaque{
    // TODO: Method 'TxGetDC'
    // TODO: Method 'TxReleaseDC'
    // TODO: Method 'TxShowScrollBar'
    // TODO: Method 'TxEnableScrollBar'
    // TODO: Method 'TxSetScrollRange'
    // TODO: Method 'TxSetScrollPos'
    // TODO: Method 'TxInvalidateRect'
    // TODO: Method 'TxViewChange'
    // TODO: Method 'TxCreateCaret'
    // TODO: Method 'TxShowCaret'
    // TODO: Method 'TxSetCaretPos'
    // TODO: Method 'TxSetTimer'
    // TODO: Method 'TxKillTimer'
    // TODO: Method 'TxScrollWindowEx'
    // TODO: Method 'TxSetCapture'
    // TODO: Method 'TxSetFocus'
    // TODO: Method 'TxSetCursor'
    // TODO: Method 'TxScreenToClient'
    // TODO: Method 'TxClientToScreen'
    // TODO: Method 'TxActivate'
    // TODO: Method 'TxDeactivate'
    // TODO: Method 'TxGetClientRect'
    // TODO: Method 'TxGetViewInset'
    // TODO: Method 'TxGetCharFormat'
    // TODO: Method 'TxGetParaFormat'
    // TODO: Method 'TxGetSysColor'
    // TODO: Method 'TxGetBackStyle'
    // TODO: Method 'TxGetMaxLength'
    // TODO: Method 'TxGetScrollBars'
    // TODO: Method 'TxGetPasswordChar'
    // TODO: Method 'TxGetAcceleratorPos'
    // TODO: Method 'TxGetExtent'
    // TODO: Method 'OnTxCharFormatChange'
    // TODO: Method 'OnTxParaFormatChange'
    // TODO: Method 'TxGetPropertyBits'
    // TODO: Method 'TxNotify'
    // TODO: Method 'TxImmGetContext'
    // TODO: Method 'TxImmReleaseContext'
    // TODO: Method 'TxGetSelectionBarWidth'
};
// --------------------------------------------------------
// Type: IRicheditWindowlessAccessibility
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRicheditWindowlessAccessibility = *opaque{
    // TODO: Method 'CreateProvider'
};
// --------------------------------------------------------
// Type: IRichEditUiaInformation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRichEditUiaInformation = *opaque{
    // TODO: Method 'GetBoundaryRectangle'
    // TODO: Method 'IsVisible'
};
// --------------------------------------------------------
// Type: IRicheditUiaOverrides
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRicheditUiaOverrides = *opaque{
    // TODO: Method 'GetPropertyOverrideValue'
};
// --------------------------------------------------------
// Type: PCreateTextServices
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PCreateTextServices = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PShutdownTextServices
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PShutdownTextServices = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ITextHost2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITextHost2 = *opaque{
    // TODO: Method 'TxIsDoubleClickPending'
    // TODO: Method 'TxGetWindow'
    // TODO: Method 'TxSetForegroundWindow'
    // TODO: Method 'TxGetPalette'
    // TODO: Method 'TxGetEastAsianFlags'
    // TODO: Method 'TxSetCursor2'
    // TODO: Method 'TxFreeTextServicesNotification'
    // TODO: Method 'TxGetEditStyle'
    // TODO: Method 'TxGetWindowStyles'
    // TODO: Method 'TxShowDropCaret'
    // TODO: Method 'TxDestroyCaret'
    // TODO: Method 'TxGetHorzExtent'
};
// --------------------------------------------------------
// Type: ITextServices2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITextServices2 = *opaque{
    // TODO: Method 'TxGetNaturalSize2'
    // TODO: Method 'TxDrawD2D'
};
// --------------------------------------------------------
// Type: TA_PROPERTY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TA_PROPERTY = *opaque{
};
// --------------------------------------------------------
// Type: TA_PROPERTY_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TA_PROPERTY_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: TA_TRANSFORM_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TA_TRANSFORM_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: TA_TRANSFORM_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TA_TRANSFORM_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: TA_TRANSFORM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TA_TRANSFORM = extern struct {
    eTransformType: Windows.Win32.Controls.TA_TRANSFORM_TYPE,
    dwTimingFunctionId: {"kind":"UInt32"},
    dwStartTime: {"kind":"UInt32"},
    dwDurationTime: {"kind":"UInt32"},
    eFlags: Windows.Win32.Controls.TA_TRANSFORM_FLAG,
};
// --------------------------------------------------------
// Type: TA_TRANSFORM_2D
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TA_TRANSFORM_2D = extern struct {
    header: Windows.Win32.Controls.TA_TRANSFORM,
    rX: {"kind":"Single"},
    rY: {"kind":"Single"},
    rInitialX: {"kind":"Single"},
    rInitialY: {"kind":"Single"},
    rOriginX: {"kind":"Single"},
    rOriginY: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: TA_TRANSFORM_OPACITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TA_TRANSFORM_OPACITY = extern struct {
    header: Windows.Win32.Controls.TA_TRANSFORM,
    rOpacity: {"kind":"Single"},
    rInitialOpacity: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: TA_TRANSFORM_CLIP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TA_TRANSFORM_CLIP = extern struct {
    header: Windows.Win32.Controls.TA_TRANSFORM,
    rLeft: {"kind":"Single"},
    rTop: {"kind":"Single"},
    rRight: {"kind":"Single"},
    rBottom: {"kind":"Single"},
    rInitialLeft: {"kind":"Single"},
    rInitialTop: {"kind":"Single"},
    rInitialRight: {"kind":"Single"},
    rInitialBottom: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: TA_TIMINGFUNCTION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TA_TIMINGFUNCTION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: TA_TIMINGFUNCTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TA_TIMINGFUNCTION = extern struct {
    eTimingFunctionType: Windows.Win32.Controls.TA_TIMINGFUNCTION_TYPE,
};
// --------------------------------------------------------
// Type: TA_CUBIC_BEZIER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TA_CUBIC_BEZIER = extern struct {
    header: Windows.Win32.Controls.TA_TIMINGFUNCTION,
    rX0: {"kind":"Single"},
    rY0: {"kind":"Single"},
    rX1: {"kind":"Single"},
    rY1: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: DTBGOPTS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DTBGOPTS = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    rcClip: Windows.Win32.DisplayDevices.RECT,
};
// --------------------------------------------------------
// Type: THEMESIZE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const THEMESIZE = *opaque{
};
// --------------------------------------------------------
// Type: MARGINS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MARGINS = extern struct {
    cxLeftWidth: {"kind":"Int32"},
    cxRightWidth: {"kind":"Int32"},
    cyTopHeight: {"kind":"Int32"},
    cyBottomHeight: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: INTLIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTLIST = extern struct {
    iValueCount: {"kind":"Int32"},
    iValues: {"kind":"Array","child": {"kind":"Int32"}},
};
// --------------------------------------------------------
// Type: PROPERTYORIGIN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROPERTYORIGIN = *opaque{
};
// --------------------------------------------------------
// Type: WINDOWTHEMEATTRIBUTETYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WINDOWTHEMEATTRIBUTETYPE = *opaque{
};
// --------------------------------------------------------
// Type: WTA_OPTIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTA_OPTIONS = extern struct {
    dwFlags: {"kind":"UInt32"},
    dwMask: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DTT_CALLBACK_PROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DTT_CALLBACK_PROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DTTOPTS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DTTOPTS = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    crText: {"kind":"UInt32"},
    crBorder: {"kind":"UInt32"},
    crShadow: {"kind":"UInt32"},
    iTextShadowType: {"kind":"Int32"},
    ptShadowOffset: Windows.Win32.DisplayDevices.POINT,
    iBorderSize: {"kind":"Int32"},
    iFontPropId: {"kind":"Int32"},
    iColorPropId: {"kind":"Int32"},
    iStateId: {"kind":"Int32"},
    fApplyOverlay: Windows.Win32.SystemServices.BOOL,
    iGlowSize: {"kind":"Int32"},
    pfnDrawTextCallback: Windows.Win32.Controls.DTT_CALLBACK_PROC,
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
};
// --------------------------------------------------------
// Type: BP_BUFFERFORMAT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BP_BUFFERFORMAT = *opaque{
};
// --------------------------------------------------------
// Type: BP_ANIMATIONSTYLE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BP_ANIMATIONSTYLE = *opaque{
};
// --------------------------------------------------------
// Type: BP_ANIMATIONPARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BP_ANIMATIONPARAMS = extern struct {
    cbSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    style: Windows.Win32.Controls.BP_ANIMATIONSTYLE,
    dwDuration: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: BP_PAINTPARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BP_PAINTPARAMS = extern struct {
    cbSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    prcExclude: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    pBlendFunction: {"kind""Ptr","child":Windows.Win32.Gdi.BLENDFUNCTION},
};
],

"func_definitions": [

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn CheckDlgButton(
    hDlg: Windows.Win32.WindowsAndMessaging.HWND,
    nIDButton: {"kind":"Int32"},
    uCheck: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn CheckRadioButton(
    hDlg: Windows.Win32.WindowsAndMessaging.HWND,
    nIDFirstButton: {"kind":"Int32"},
    nIDLastButton: {"kind":"Int32"},
    nIDCheckButton: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn IsDlgButtonChecked(
    hDlg: Windows.Win32.WindowsAndMessaging.HWND,
    nIDButton: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn IsCharLowerW(
    ch: {"kind":"UInt16"},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn InitializeTouchInjection(
    maxCount: {"kind":"UInt32"},
    dwMode: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn InjectTouchInput(
    count: {"kind":"UInt32"},
    contacts: {"kind""Ptr","child":Windows.Win32.PointerInput.POINTER_TOUCH_INFO},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn CreateSyntheticPointerDevice(
    pointerType: {"kind":"UInt32"},
    maxCount: {"kind":"UInt32"},
    mode: Windows.Win32.Controls.POINTER_FEEDBACK_MODE,

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn InjectSyntheticPointerInput(
    device: {"kind":"IntPtr"},
    pointerInfo: {"kind""Ptr","child":Windows.Win32.Controls.POINTER_TYPE_INFO},
    count: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn DestroySyntheticPointerDevice(
    device: {"kind":"IntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn RegisterTouchHitTestingWindow(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    value: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn EvaluateProximityToRect(
    controlBoundingBox: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    pHitTestingInput: {"kind""Ptr","child":Windows.Win32.Controls.TOUCH_HIT_TESTING_INPUT},
    pProximityEval: {"kind""Ptr","child":Windows.Win32.Controls.TOUCH_HIT_TESTING_PROXIMITY_EVALUATION},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn EvaluateProximityToPolygon(
    numVertices: {"kind":"UInt32"},
    controlPolygon: {"kind""Ptr","child":Windows.Win32.DisplayDevices.POINT},
    pHitTestingInput: {"kind""Ptr","child":Windows.Win32.Controls.TOUCH_HIT_TESTING_INPUT},
    pProximityEval: {"kind""Ptr","child":Windows.Win32.Controls.TOUCH_HIT_TESTING_PROXIMITY_EVALUATION},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn PackTouchHitTestingProximityEvaluation(
    pHitTestingInput: {"kind""Ptr","child":Windows.Win32.Controls.TOUCH_HIT_TESTING_INPUT},
    pProximityEval: {"kind""Ptr","child":Windows.Win32.Controls.TOUCH_HIT_TESTING_PROXIMITY_EVALUATION},

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn GetWindowFeedbackSetting(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    feedback: Windows.Win32.Controls.FEEDBACK_TYPE,
    dwFlags: {"kind":"UInt32"},
    pSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    config: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn SetWindowFeedbackSetting(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    feedback: Windows.Win32.Controls.FEEDBACK_TYPE,
    dwFlags: {"kind":"UInt32"},
    size: {"kind":"UInt32"},
    configuration: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn ScrollWindow(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    XAmount: {"kind":"Int32"},
    YAmount: {"kind":"Int32"},
    lpRect: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    lpClipRect: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn ScrollDC(
    hDC: Windows.Win32.Gdi.HDC,
    dx: {"kind":"Int32"},
    dy: {"kind":"Int32"},
    lprcScroll: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    lprcClip: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    hrgnUpdate: Windows.Win32.Gdi.HRGN,
    lprcUpdate: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn ScrollWindowEx(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    dx: {"kind":"Int32"},
    dy: {"kind":"Int32"},
    prcScroll: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    prcClip: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    hrgnUpdate: Windows.Win32.Gdi.HRGN,
    prcUpdate: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    flags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn SetScrollPos(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    nBar: {"kind":"Int32"},
    nPos: {"kind":"Int32"},
    bRedraw: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn GetScrollPos(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    nBar: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn SetScrollRange(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    nBar: {"kind":"Int32"},
    nMinPos: {"kind":"Int32"},
    nMaxPos: {"kind":"Int32"},
    bRedraw: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn GetScrollRange(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    nBar: {"kind":"Int32"},
    lpMinPos: {"kind""Ptr","child":{"kind":"Int32"}},
    lpMaxPos: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn ShowScrollBar(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    wBar: {"kind":"Int32"},
    bShow: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn EnableScrollBar(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    wSBflags: {"kind":"UInt32"},
    wArrows: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn DlgDirListA(
    hDlg: Windows.Win32.WindowsAndMessaging.HWND,
    lpPathSpec: {"kind""Ptr","child":{"kind":"SByte"}},
    nIDListBox: {"kind":"Int32"},
    nIDStaticPath: {"kind":"Int32"},
    uFileType: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn DlgDirListW(
    hDlg: Windows.Win32.WindowsAndMessaging.HWND,
    lpPathSpec: {"kind""Ptr","child":{"kind":"UInt16"}},
    nIDListBox: {"kind":"Int32"},
    nIDStaticPath: {"kind":"Int32"},
    uFileType: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn DlgDirSelectExA(
    hwndDlg: Windows.Win32.WindowsAndMessaging.HWND,
    lpString: {"kind""Ptr","child":{"kind":"SByte"}},
    chCount: {"kind":"Int32"},
    idListBox: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn DlgDirSelectExW(
    hwndDlg: Windows.Win32.WindowsAndMessaging.HWND,
    lpString: {"kind""Ptr","child":{"kind":"UInt16"}},
    chCount: {"kind":"Int32"},
    idListBox: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn DlgDirListComboBoxA(
    hDlg: Windows.Win32.WindowsAndMessaging.HWND,
    lpPathSpec: {"kind""Ptr","child":{"kind":"SByte"}},
    nIDComboBox: {"kind":"Int32"},
    nIDStaticPath: {"kind":"Int32"},
    uFiletype: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn DlgDirListComboBoxW(
    hDlg: Windows.Win32.WindowsAndMessaging.HWND,
    lpPathSpec: {"kind""Ptr","child":{"kind":"UInt16"}},
    nIDComboBox: {"kind":"Int32"},
    nIDStaticPath: {"kind":"Int32"},
    uFiletype: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn DlgDirSelectComboBoxExA(
    hwndDlg: Windows.Win32.WindowsAndMessaging.HWND,
    lpString: {"kind""Ptr","child":{"kind":"SByte"}},
    cchOut: {"kind":"Int32"},
    idComboBox: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn DlgDirSelectComboBoxExW(
    hwndDlg: Windows.Win32.WindowsAndMessaging.HWND,
    lpString: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchOut: {"kind":"Int32"},
    idComboBox: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn SetScrollInfo(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    nBar: {"kind":"Int32"},
    lpsi: {"kind""Ptr","child":Windows.Win32.Controls.SCROLLINFO},
    redraw: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn GetScrollInfo(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    nBar: {"kind":"Int32"},
    lpsi: {"kind""Ptr","child":Windows.Win32.Controls.SCROLLINFO},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn GetScrollBarInfo(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    idObject: {"kind":"Int32"},
    psbi: {"kind""Ptr","child":Windows.Win32.Controls.SCROLLBARINFO},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn GetComboBoxInfo(
    hwndCombo: Windows.Win32.WindowsAndMessaging.HWND,
    pcbi: {"kind""Ptr","child":Windows.Win32.Controls.COMBOBOXINFO},

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn GetListBoxInfo(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn GetPointerDevices(
    deviceCount: {"kind""Ptr","child":{"kind":"UInt32"}},
    pointerDevices: {"kind""Ptr","child":Windows.Win32.Controls.POINTER_DEVICE_INFO},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn GetPointerDevice(
    device: Windows.Win32.SystemServices.HANDLE,
    pointerDevice: {"kind""Ptr","child":Windows.Win32.Controls.POINTER_DEVICE_INFO},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn GetPointerDeviceProperties(
    device: Windows.Win32.SystemServices.HANDLE,
    propertyCount: {"kind""Ptr","child":{"kind":"UInt32"}},
    pointerProperties: {"kind""Ptr","child":Windows.Win32.Controls.POINTER_DEVICE_PROPERTY},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn RegisterPointerDeviceNotifications(
    window: Windows.Win32.WindowsAndMessaging.HWND,
    notifyRange: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn GetPointerDeviceRects(
    device: Windows.Win32.SystemServices.HANDLE,
    pointerDeviceRect: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    displayRect: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn GetPointerDeviceCursors(
    device: Windows.Win32.SystemServices.HANDLE,
    cursorCount: {"kind""Ptr","child":{"kind":"UInt32"}},
    deviceCursors: {"kind""Ptr","child":Windows.Win32.Controls.POINTER_DEVICE_CURSOR_INFO},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn GetRawPointerDeviceData(
    pointerId: {"kind":"UInt32"},
    historyCount: {"kind":"UInt32"},
    propertiesCount: {"kind":"UInt32"},
    pProperties: {"kind""Ptr","child":Windows.Win32.Controls.POINTER_DEVICE_PROPERTY},
    pValues: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn GetCurrentInputMessageSource(
    inputMessageSource: {"kind""Ptr","child":Windows.Win32.Controls.INPUT_MESSAGE_SOURCE},

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn GetCIMSSM(
    inputMessageSource: {"kind""Ptr","child":Windows.Win32.Controls.INPUT_MESSAGE_SOURCE},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn CreatePropertySheetPageA(
    constPropSheetPagePointer: {"kind""Ptr","child":Windows.Win32.Controls.PROPSHEETPAGEA},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn CreatePropertySheetPageW(
    constPropSheetPagePointer: {"kind""Ptr","child":Windows.Win32.Controls.PROPSHEETPAGEW},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DestroyPropertySheetPage(
    param0: Windows.Win32.Controls.HPROPSHEETPAGE,

// set_last_errror=True (can and should we use this?)
pub extern "COMCTL32" fn PropertySheetA(
    param0: {"kind""Ptr","child":Windows.Win32.Controls.PROPSHEETHEADERA_V2},

// set_last_errror=True (can and should we use this?)
pub extern "COMCTL32" fn PropertySheetW(
    param0: {"kind""Ptr","child":Windows.Win32.Controls.PROPSHEETHEADERW_V2},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn InitCommonControls(

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn InitCommonControlsEx(
    picce: {"kind""Ptr","child":Windows.Win32.Controls.INITCOMMONCONTROLSEX},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_Create(
    cx: {"kind":"Int32"},
    cy: {"kind":"Int32"},
    flags: {"kind":"UInt32"},
    cInitial: {"kind":"Int32"},
    cGrow: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_Destroy(
    himl: Windows.Win32.Controls.HIMAGELIST,

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_GetImageCount(
    himl: Windows.Win32.Controls.HIMAGELIST,

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_SetImageCount(
    himl: Windows.Win32.Controls.HIMAGELIST,
    uNewCount: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_Add(
    himl: Windows.Win32.Controls.HIMAGELIST,
    hbmImage: Windows.Win32.Gdi.HBITMAP,
    hbmMask: Windows.Win32.Gdi.HBITMAP,

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_ReplaceIcon(
    himl: Windows.Win32.Controls.HIMAGELIST,
    i: {"kind":"Int32"},
    hicon: Windows.Win32.Gdi.HICON,

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_SetBkColor(
    himl: Windows.Win32.Controls.HIMAGELIST,
    clrBk: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_GetBkColor(
    himl: Windows.Win32.Controls.HIMAGELIST,

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_SetOverlayImage(
    himl: Windows.Win32.Controls.HIMAGELIST,
    iImage: {"kind":"Int32"},
    iOverlay: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_Draw(
    himl: Windows.Win32.Controls.HIMAGELIST,
    i: {"kind":"Int32"},
    hdcDst: Windows.Win32.Gdi.HDC,
    x: {"kind":"Int32"},
    y: {"kind":"Int32"},
    fStyle: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_Replace(
    himl: Windows.Win32.Controls.HIMAGELIST,
    i: {"kind":"Int32"},
    hbmImage: Windows.Win32.Gdi.HBITMAP,
    hbmMask: Windows.Win32.Gdi.HBITMAP,

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_AddMasked(
    himl: Windows.Win32.Controls.HIMAGELIST,
    hbmImage: Windows.Win32.Gdi.HBITMAP,
    crMask: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_DrawEx(
    himl: Windows.Win32.Controls.HIMAGELIST,
    i: {"kind":"Int32"},
    hdcDst: Windows.Win32.Gdi.HDC,
    x: {"kind":"Int32"},
    y: {"kind":"Int32"},
    dx: {"kind":"Int32"},
    dy: {"kind":"Int32"},
    rgbBk: {"kind":"UInt32"},
    rgbFg: {"kind":"UInt32"},
    fStyle: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_DrawIndirect(
    pimldp: {"kind""Ptr","child":Windows.Win32.Controls.IMAGELISTDRAWPARAMS},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_Remove(
    himl: Windows.Win32.Controls.HIMAGELIST,
    i: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_GetIcon(
    himl: Windows.Win32.Controls.HIMAGELIST,
    i: {"kind":"Int32"},
    flags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_LoadImageA(
    hi: Windows.Win32.SystemServices.HINSTANCE,
    lpbmp: {"kind""Ptr","child":{"kind":"SByte"}},
    cx: {"kind":"Int32"},
    cGrow: {"kind":"Int32"},
    crMask: {"kind":"UInt32"},
    uType: {"kind":"UInt32"},
    uFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_LoadImageW(
    hi: Windows.Win32.SystemServices.HINSTANCE,
    lpbmp: {"kind""Ptr","child":{"kind":"UInt16"}},
    cx: {"kind":"Int32"},
    cGrow: {"kind":"Int32"},
    crMask: {"kind":"UInt32"},
    uType: {"kind":"UInt32"},
    uFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_Copy(
    himlDst: Windows.Win32.Controls.HIMAGELIST,
    iDst: {"kind":"Int32"},
    himlSrc: Windows.Win32.Controls.HIMAGELIST,
    iSrc: {"kind":"Int32"},
    uFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_BeginDrag(
    himlTrack: Windows.Win32.Controls.HIMAGELIST,
    iTrack: {"kind":"Int32"},
    dxHotspot: {"kind":"Int32"},
    dyHotspot: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_EndDrag(

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_DragEnter(
    hwndLock: Windows.Win32.WindowsAndMessaging.HWND,
    x: {"kind":"Int32"},
    y: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_DragLeave(
    hwndLock: Windows.Win32.WindowsAndMessaging.HWND,

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_DragMove(
    x: {"kind":"Int32"},
    y: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_SetDragCursorImage(
    himlDrag: Windows.Win32.Controls.HIMAGELIST,
    iDrag: {"kind":"Int32"},
    dxHotspot: {"kind":"Int32"},
    dyHotspot: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_DragShowNolock(
    fShow: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_GetDragImage(
    ppt: {"kind""Ptr","child":Windows.Win32.DisplayDevices.POINT},
    pptHotspot: {"kind""Ptr","child":Windows.Win32.DisplayDevices.POINT},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_Read(
    pstm: Windows.Win32.StructuredStorage.IStream,

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_Write(
    himl: Windows.Win32.Controls.HIMAGELIST,
    pstm: Windows.Win32.StructuredStorage.IStream,

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_ReadEx(
    dwFlags: {"kind":"UInt32"},
    pstm: Windows.Win32.StructuredStorage.IStream,
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_WriteEx(
    himl: Windows.Win32.Controls.HIMAGELIST,
    dwFlags: {"kind":"UInt32"},
    pstm: Windows.Win32.StructuredStorage.IStream,

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_GetIconSize(
    himl: Windows.Win32.Controls.HIMAGELIST,
    cx: {"kind""Ptr","child":{"kind":"Int32"}},
    cy: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_SetIconSize(
    himl: Windows.Win32.Controls.HIMAGELIST,
    cx: {"kind":"Int32"},
    cy: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_GetImageInfo(
    himl: Windows.Win32.Controls.HIMAGELIST,
    i: {"kind":"Int32"},
    pImageInfo: {"kind""Ptr","child":Windows.Win32.Controls.IMAGEINFO},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_Merge(
    himl1: Windows.Win32.Controls.HIMAGELIST,
    i1: {"kind":"Int32"},
    himl2: Windows.Win32.Controls.HIMAGELIST,
    i2: {"kind":"Int32"},
    dx: {"kind":"Int32"},
    dy: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_Duplicate(
    himl: Windows.Win32.Controls.HIMAGELIST,

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn HIMAGELIST_QueryInterface(
    himl: Windows.Win32.Controls.HIMAGELIST,
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=True (can and should we use this?)
pub extern "COMCTL32" fn CreateToolbarEx(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    ws: {"kind":"UInt32"},
    wID: {"kind":"UInt32"},
    nBitmaps: {"kind":"Int32"},
    hBMInst: Windows.Win32.SystemServices.HINSTANCE,
    wBMID: {"kind":"UIntPtr"},
    lpButtons: {"kind""Ptr","child":Windows.Win32.Controls.TBBUTTON},
    iNumButtons: {"kind":"Int32"},
    dxButton: {"kind":"Int32"},
    dyButton: {"kind":"Int32"},
    dxBitmap: {"kind":"Int32"},
    dyBitmap: {"kind":"Int32"},
    uStructSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "COMCTL32" fn CreateMappedBitmap(
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    idBitmap: {"kind":"IntPtr"},
    wFlags: {"kind":"UInt32"},
    lpColorMap: {"kind""Ptr","child":Windows.Win32.Controls.COLORMAP},
    iNumMaps: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DrawStatusTextA(
    hDC: Windows.Win32.Gdi.HDC,
    lprc: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    pszText: {"kind""Ptr","child":{"kind":"SByte"}},
    uFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DrawStatusTextW(
    hDC: Windows.Win32.Gdi.HDC,
    lprc: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    pszText: {"kind""Ptr","child":{"kind":"UInt16"}},
    uFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "COMCTL32" fn CreateStatusWindowA(
    style: {"kind":"Int32"},
    lpszText: {"kind""Ptr","child":{"kind":"SByte"}},
    hwndParent: Windows.Win32.WindowsAndMessaging.HWND,
    wID: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "COMCTL32" fn CreateStatusWindowW(
    style: {"kind":"Int32"},
    lpszText: {"kind""Ptr","child":{"kind":"UInt16"}},
    hwndParent: Windows.Win32.WindowsAndMessaging.HWND,
    wID: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn MenuHelp(
    uMsg: {"kind":"UInt32"},
    wParam: Windows.Win32.WindowsAndMessaging.WPARAM,
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
    hMainMenu: Windows.Win32.MenusAndResources.HMENU,
    hInst: Windows.Win32.SystemServices.HINSTANCE,
    hwndStatus: Windows.Win32.WindowsAndMessaging.HWND,
    lpwIDs: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ShowHideMenuCtl(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    uFlags: {"kind":"UIntPtr"},
    lpInfo: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn GetEffectiveClientRect(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    lprc: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    lpInfo: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn MakeDragList(
    hLB: Windows.Win32.WindowsAndMessaging.HWND,

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DrawInsert(
    handParent: Windows.Win32.WindowsAndMessaging.HWND,
    hLB: Windows.Win32.WindowsAndMessaging.HWND,
    nItem: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn LBItemFromPt(
    hLB: Windows.Win32.WindowsAndMessaging.HWND,
    pt: Windows.Win32.DisplayDevices.POINT,
    bAutoScroll: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn CreateUpDownControl(
    dwStyle: {"kind":"UInt32"},
    x: {"kind":"Int32"},
    y: {"kind":"Int32"},
    cx: {"kind":"Int32"},
    cy: {"kind":"Int32"},
    hParent: Windows.Win32.WindowsAndMessaging.HWND,
    nID: {"kind":"Int32"},
    hInst: Windows.Win32.SystemServices.HINSTANCE,
    hBuddy: Windows.Win32.WindowsAndMessaging.HWND,
    nUpper: {"kind":"Int32"},
    nLower: {"kind":"Int32"},
    nPos: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn TaskDialogIndirect(
    pTaskConfig: {"kind""Ptr","child":Windows.Win32.Controls.TASKDIALOGCONFIG},
    pnButton: {"kind""Ptr","child":{"kind":"Int32"}},
    pnRadioButton: {"kind""Ptr","child":{"kind":"Int32"}},
    pfVerificationFlagChecked: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn TaskDialog(
    hwndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    pszWindowTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszMainInstruction: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszContent: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwCommonButtons: {"kind":"Int32"},
    pszIcon: {"kind""Ptr","child":{"kind":"UInt16"}},
    pnButton: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn InitMUILanguage(
    uiLang: {"kind":"UInt16"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn GetMUILanguage(

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DSA_Create(
    cbItem: {"kind":"Int32"},
    cItemGrow: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DSA_Destroy(
    hdsa: {"kind""Ptr","child":Windows.Win32.Controls._DSA},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DSA_DestroyCallback(
    hdsa: {"kind""Ptr","child":Windows.Win32.Controls._DSA},
    pfnCB: Windows.Win32.Controls.PFNDAENUMCALLBACK,
    pData: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DSA_DeleteItem(
    hdsa: {"kind""Ptr","child":Windows.Win32.Controls._DSA},
    i: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DSA_DeleteAllItems(
    hdsa: {"kind""Ptr","child":Windows.Win32.Controls._DSA},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DSA_EnumCallback(
    hdsa: {"kind""Ptr","child":Windows.Win32.Controls._DSA},
    pfnCB: Windows.Win32.Controls.PFNDAENUMCALLBACK,
    pData: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DSA_InsertItem(
    hdsa: {"kind""Ptr","child":Windows.Win32.Controls._DSA},
    i: {"kind":"Int32"},
    pitem: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DSA_GetItemPtr(
    hdsa: {"kind""Ptr","child":Windows.Win32.Controls._DSA},
    i: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DSA_GetItem(
    hdsa: {"kind""Ptr","child":Windows.Win32.Controls._DSA},
    i: {"kind":"Int32"},
    pitem: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DSA_SetItem(
    hdsa: {"kind""Ptr","child":Windows.Win32.Controls._DSA},
    i: {"kind":"Int32"},
    pitem: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DSA_Clone(
    hdsa: {"kind""Ptr","child":Windows.Win32.Controls._DSA},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DSA_GetSize(
    hdsa: {"kind""Ptr","child":Windows.Win32.Controls._DSA},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DSA_Sort(
    pdsa: {"kind""Ptr","child":Windows.Win32.Controls._DSA},
    pfnCompare: Windows.Win32.Controls.PFNDACOMPARE,
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DPA_Create(
    cItemGrow: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DPA_CreateEx(
    cpGrow: {"kind":"Int32"},
    hheap: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DPA_Clone(
    hdpa: {"kind""Ptr","child":Windows.Win32.Controls._DPA},
    hdpaNew: {"kind""Ptr","child":Windows.Win32.Controls._DPA},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DPA_Destroy(
    hdpa: {"kind""Ptr","child":Windows.Win32.Controls._DPA},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DPA_DestroyCallback(
    hdpa: {"kind""Ptr","child":Windows.Win32.Controls._DPA},
    pfnCB: Windows.Win32.Controls.PFNDAENUMCALLBACK,
    pData: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DPA_DeletePtr(
    hdpa: {"kind""Ptr","child":Windows.Win32.Controls._DPA},
    i: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DPA_DeleteAllPtrs(
    hdpa: {"kind""Ptr","child":Windows.Win32.Controls._DPA},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DPA_EnumCallback(
    hdpa: {"kind""Ptr","child":Windows.Win32.Controls._DPA},
    pfnCB: Windows.Win32.Controls.PFNDAENUMCALLBACK,
    pData: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DPA_Grow(
    pdpa: {"kind""Ptr","child":Windows.Win32.Controls._DPA},
    cp: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DPA_InsertPtr(
    hdpa: {"kind""Ptr","child":Windows.Win32.Controls._DPA},
    i: {"kind":"Int32"},
    p: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DPA_SetPtr(
    hdpa: {"kind""Ptr","child":Windows.Win32.Controls._DPA},
    i: {"kind":"Int32"},
    p: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DPA_GetPtr(
    hdpa: {"kind""Ptr","child":Windows.Win32.Controls._DPA},
    i: {"kind":"IntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DPA_GetPtrIndex(
    hdpa: {"kind""Ptr","child":Windows.Win32.Controls._DPA},
    p: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DPA_GetSize(
    hdpa: {"kind""Ptr","child":Windows.Win32.Controls._DPA},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DPA_Sort(
    hdpa: {"kind""Ptr","child":Windows.Win32.Controls._DPA},
    pfnCompare: Windows.Win32.Controls.PFNDACOMPARE,
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DPA_LoadStream(
    phdpa: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Controls._DPA}},
    pfn: Windows.Win32.Controls.PFNDPASTREAM,
    pstream: Windows.Win32.StructuredStorage.IStream,
    pvInstData: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DPA_SaveStream(
    hdpa: {"kind""Ptr","child":Windows.Win32.Controls._DPA},
    pfn: Windows.Win32.Controls.PFNDPASTREAM,
    pstream: Windows.Win32.StructuredStorage.IStream,
    pvInstData: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DPA_Merge(
    hdpaDest: {"kind""Ptr","child":Windows.Win32.Controls._DPA},
    hdpaSrc: {"kind""Ptr","child":Windows.Win32.Controls._DPA},
    dwFlags: {"kind":"UInt32"},
    pfnCompare: Windows.Win32.Controls.PFNDACOMPARE,
    pfnMerge: Windows.Win32.Controls.PFNDPAMERGE,
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DPA_Search(
    hdpa: {"kind""Ptr","child":Windows.Win32.Controls._DPA},
    pFind: {"kind""Ptr","child":{"kind":"Void"}},
    iStart: {"kind":"Int32"},
    pfnCompare: Windows.Win32.Controls.PFNDACOMPARE,
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
    options: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn Str_SetPtrW(
    ppsz: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    psz: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn FlatSB_EnableScrollBar(
    param0: Windows.Win32.WindowsAndMessaging.HWND,
    param1: {"kind":"Int32"},
    param2: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn FlatSB_ShowScrollBar(
    param0: Windows.Win32.WindowsAndMessaging.HWND,
    code: {"kind":"Int32"},
    param2: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn FlatSB_GetScrollRange(
    param0: Windows.Win32.WindowsAndMessaging.HWND,
    code: {"kind":"Int32"},
    param2: {"kind""Ptr","child":{"kind":"Int32"}},
    param3: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn FlatSB_GetScrollInfo(
    param0: Windows.Win32.WindowsAndMessaging.HWND,
    code: {"kind":"Int32"},
    param2: {"kind""Ptr","child":Windows.Win32.Controls.SCROLLINFO},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn FlatSB_GetScrollPos(
    param0: Windows.Win32.WindowsAndMessaging.HWND,
    code: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn FlatSB_GetScrollProp(
    param0: Windows.Win32.WindowsAndMessaging.HWND,
    propIndex: {"kind":"Int32"},
    param2: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn FlatSB_SetScrollPos(
    param0: Windows.Win32.WindowsAndMessaging.HWND,
    code: {"kind":"Int32"},
    pos: {"kind":"Int32"},
    fRedraw: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn FlatSB_SetScrollInfo(
    param0: Windows.Win32.WindowsAndMessaging.HWND,
    code: {"kind":"Int32"},
    psi: {"kind""Ptr","child":Windows.Win32.Controls.SCROLLINFO},
    fRedraw: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn FlatSB_SetScrollRange(
    param0: Windows.Win32.WindowsAndMessaging.HWND,
    code: {"kind":"Int32"},
    min: {"kind":"Int32"},
    max: {"kind":"Int32"},
    fRedraw: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn FlatSB_SetScrollProp(
    param0: Windows.Win32.WindowsAndMessaging.HWND,
    index: {"kind":"UInt32"},
    newValue: {"kind":"IntPtr"},
    param3: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn InitializeFlatSB(
    param0: Windows.Win32.WindowsAndMessaging.HWND,

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn UninitializeFlatSB(
    param0: Windows.Win32.WindowsAndMessaging.HWND,

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn LoadIconMetric(
    hinst: Windows.Win32.SystemServices.HINSTANCE,
    pszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lims: {"kind":"Int32"},
    phico: {"kind""Ptr","child":Windows.Win32.Gdi.HICON},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn LoadIconWithScaleDown(
    hinst: Windows.Win32.SystemServices.HINSTANCE,
    pszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    cx: {"kind":"Int32"},
    cy: {"kind":"Int32"},
    phico: {"kind""Ptr","child":Windows.Win32.Gdi.HICON},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DrawShadowText(
    hdc: Windows.Win32.Gdi.HDC,
    pszText: {"kind""Ptr","child":{"kind":"UInt16"}},
    cch: {"kind":"UInt32"},
    prc: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    dwFlags: {"kind":"UInt32"},
    crText: {"kind":"UInt32"},
    crShadow: {"kind":"UInt32"},
    ixOffset: {"kind":"Int32"},
    iyOffset: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn ImageList_CoCreateInstance(
    rclsid: {"kind""Ptr","child":Guid},
    punkOuter: Windows.Win32.Com.IUnknown,
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn GetThemeAnimationProperty(
    hTheme: {"kind":"IntPtr"},
    iStoryboardId: {"kind":"Int32"},
    iTargetId: {"kind":"Int32"},
    eProperty: Windows.Win32.Controls.TA_PROPERTY,
    pvProperty: {"kind""Ptr","child":{"kind":"Void"}},
    cbSize: {"kind":"UInt32"},
    pcbSizeOut: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn GetThemeAnimationTransform(
    hTheme: {"kind":"IntPtr"},
    iStoryboardId: {"kind":"Int32"},
    iTargetId: {"kind":"Int32"},
    dwTransformIndex: {"kind":"UInt32"},
    pTransform: {"kind""Ptr","child":Windows.Win32.Controls.TA_TRANSFORM},
    cbSize: {"kind":"UInt32"},
    pcbSizeOut: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn GetThemeTimingFunction(
    hTheme: {"kind":"IntPtr"},
    iTimingFunctionId: {"kind":"Int32"},
    pTimingFunction: {"kind""Ptr","child":Windows.Win32.Controls.TA_TIMINGFUNCTION},
    cbSize: {"kind":"UInt32"},
    pcbSizeOut: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn OpenThemeData(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    pszClassList: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn OpenThemeDataEx(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    pszClassList: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn CloseThemeData(
    hTheme: {"kind":"IntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn DrawThemeBackground(
    hTheme: {"kind":"IntPtr"},
    hdc: Windows.Win32.Gdi.HDC,
    iPartId: {"kind":"Int32"},
    iStateId: {"kind":"Int32"},
    pRect: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    pClipRect: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn DrawThemeBackgroundEx(
    hTheme: {"kind":"IntPtr"},
    hdc: Windows.Win32.Gdi.HDC,
    iPartId: {"kind":"Int32"},
    iStateId: {"kind":"Int32"},
    pRect: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    pOptions: {"kind""Ptr","child":Windows.Win32.Controls.DTBGOPTS},

// set_last_errror=False (can and should we use this?)
pub extern "UxTheme" fn DrawThemeText(
    hTheme: {"kind":"IntPtr"},
    hdc: Windows.Win32.Gdi.HDC,
    iPartId: {"kind":"Int32"},
    iStateId: {"kind":"Int32"},
    pszText: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchText: {"kind":"Int32"},
    dwTextFlags: {"kind":"UInt32"},
    dwTextFlags2: {"kind":"UInt32"},
    pRect: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn GetThemeBackgroundContentRect(
    hTheme: {"kind":"IntPtr"},
    hdc: Windows.Win32.Gdi.HDC,
    iPartId: {"kind":"Int32"},
    iStateId: {"kind":"Int32"},
    pBoundingRect: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    pContentRect: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn GetThemeBackgroundExtent(
    hTheme: {"kind":"IntPtr"},
    hdc: Windows.Win32.Gdi.HDC,
    iPartId: {"kind":"Int32"},
    iStateId: {"kind":"Int32"},
    pContentRect: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    pExtentRect: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},

// set_last_errror=False (can and should we use this?)
pub extern "UxTheme" fn GetThemeBackgroundRegion(
    hTheme: {"kind":"IntPtr"},
    hdc: Windows.Win32.Gdi.HDC,
    iPartId: {"kind":"Int32"},
    iStateId: {"kind":"Int32"},
    pRect: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    pRegion: {"kind""Ptr","child":Windows.Win32.Gdi.HRGN},

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn GetThemePartSize(
    hTheme: {"kind":"IntPtr"},
    hdc: Windows.Win32.Gdi.HDC,
    iPartId: {"kind":"Int32"},
    iStateId: {"kind":"Int32"},
    prc: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    eSize: Windows.Win32.Controls.THEMESIZE,
    psz: {"kind""Ptr","child":Windows.Win32.DisplayDevices.SIZE},

// set_last_errror=False (can and should we use this?)
pub extern "UxTheme" fn GetThemeTextExtent(
    hTheme: {"kind":"IntPtr"},
    hdc: Windows.Win32.Gdi.HDC,
    iPartId: {"kind":"Int32"},
    iStateId: {"kind":"Int32"},
    pszText: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchCharCount: {"kind":"Int32"},
    dwTextFlags: {"kind":"UInt32"},
    pBoundingRect: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    pExtentRect: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},

// set_last_errror=False (can and should we use this?)
pub extern "UxTheme" fn GetThemeTextMetrics(
    hTheme: {"kind":"IntPtr"},
    hdc: Windows.Win32.Gdi.HDC,
    iPartId: {"kind":"Int32"},
    iStateId: {"kind":"Int32"},
    ptm: {"kind""Ptr","child":Windows.Win32.Gdi.TEXTMETRICW},

// set_last_errror=False (can and should we use this?)
pub extern "UxTheme" fn HitTestThemeBackground(
    hTheme: {"kind":"IntPtr"},
    hdc: Windows.Win32.Gdi.HDC,
    iPartId: {"kind":"Int32"},
    iStateId: {"kind":"Int32"},
    dwOptions: {"kind":"UInt32"},
    pRect: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    hrgn: Windows.Win32.Gdi.HRGN,
    ptTest: Windows.Win32.DisplayDevices.POINT,
    pwHitTestCode: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "UxTheme" fn DrawThemeEdge(
    hTheme: {"kind":"IntPtr"},
    hdc: Windows.Win32.Gdi.HDC,
    iPartId: {"kind":"Int32"},
    iStateId: {"kind":"Int32"},
    pDestRect: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    uEdge: {"kind":"UInt32"},
    uFlags: {"kind":"UInt32"},
    pContentRect: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},

// set_last_errror=False (can and should we use this?)
pub extern "UxTheme" fn DrawThemeIcon(
    hTheme: {"kind":"IntPtr"},
    hdc: Windows.Win32.Gdi.HDC,
    iPartId: {"kind":"Int32"},
    iStateId: {"kind":"Int32"},
    pRect: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    himl: Windows.Win32.Controls.HIMAGELIST,
    iImageIndex: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn IsThemePartDefined(
    hTheme: {"kind":"IntPtr"},
    iPartId: {"kind":"Int32"},
    iStateId: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "UxTheme" fn IsThemeBackgroundPartiallyTransparent(
    hTheme: {"kind":"IntPtr"},
    iPartId: {"kind":"Int32"},
    iStateId: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn GetThemeColor(
    hTheme: {"kind":"IntPtr"},
    iPartId: {"kind":"Int32"},
    iStateId: {"kind":"Int32"},
    iPropId: {"kind":"Int32"},
    pColor: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn GetThemeMetric(
    hTheme: {"kind":"IntPtr"},
    hdc: Windows.Win32.Gdi.HDC,
    iPartId: {"kind":"Int32"},
    iStateId: {"kind":"Int32"},
    iPropId: {"kind":"Int32"},
    piVal: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "UxTheme" fn GetThemeString(
    hTheme: {"kind":"IntPtr"},
    iPartId: {"kind":"Int32"},
    iStateId: {"kind":"Int32"},
    iPropId: {"kind":"Int32"},
    pszBuff: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchMaxBuffChars: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "UxTheme" fn GetThemeBool(
    hTheme: {"kind":"IntPtr"},
    iPartId: {"kind":"Int32"},
    iStateId: {"kind":"Int32"},
    iPropId: {"kind":"Int32"},
    pfVal: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn GetThemeInt(
    hTheme: {"kind":"IntPtr"},
    iPartId: {"kind":"Int32"},
    iStateId: {"kind":"Int32"},
    iPropId: {"kind":"Int32"},
    piVal: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn GetThemeEnumValue(
    hTheme: {"kind":"IntPtr"},
    iPartId: {"kind":"Int32"},
    iStateId: {"kind":"Int32"},
    iPropId: {"kind":"Int32"},
    piVal: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn GetThemePosition(
    hTheme: {"kind":"IntPtr"},
    iPartId: {"kind":"Int32"},
    iStateId: {"kind":"Int32"},
    iPropId: {"kind":"Int32"},
    pPoint: {"kind""Ptr","child":Windows.Win32.DisplayDevices.POINT},

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn GetThemeFont(
    hTheme: {"kind":"IntPtr"},
    hdc: Windows.Win32.Gdi.HDC,
    iPartId: {"kind":"Int32"},
    iStateId: {"kind":"Int32"},
    iPropId: {"kind":"Int32"},
    pFont: {"kind""Ptr","child":Windows.Win32.Shell.LOGFONTW},

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn GetThemeRect(
    hTheme: {"kind":"IntPtr"},
    iPartId: {"kind":"Int32"},
    iStateId: {"kind":"Int32"},
    iPropId: {"kind":"Int32"},
    pRect: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn GetThemeMargins(
    hTheme: {"kind":"IntPtr"},
    hdc: Windows.Win32.Gdi.HDC,
    iPartId: {"kind":"Int32"},
    iStateId: {"kind":"Int32"},
    iPropId: {"kind":"Int32"},
    prc: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    pMargins: {"kind""Ptr","child":Windows.Win32.Controls.MARGINS},

// set_last_errror=False (can and should we use this?)
pub extern "UxTheme" fn GetThemeIntList(
    hTheme: {"kind":"IntPtr"},
    iPartId: {"kind":"Int32"},
    iStateId: {"kind":"Int32"},
    iPropId: {"kind":"Int32"},
    pIntList: {"kind""Ptr","child":Windows.Win32.Controls.INTLIST},

// set_last_errror=False (can and should we use this?)
pub extern "UxTheme" fn GetThemePropertyOrigin(
    hTheme: {"kind":"IntPtr"},
    iPartId: {"kind":"Int32"},
    iStateId: {"kind":"Int32"},
    iPropId: {"kind":"Int32"},
    pOrigin: {"kind""Ptr","child":Windows.Win32.Controls.PROPERTYORIGIN},

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn SetWindowTheme(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    pszSubAppName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszSubIdList: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "UxTheme" fn GetThemeFilename(
    hTheme: {"kind":"IntPtr"},
    iPartId: {"kind":"Int32"},
    iStateId: {"kind":"Int32"},
    iPropId: {"kind":"Int32"},
    pszThemeFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchMaxBuffChars: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "UxTheme" fn GetThemeSysColor(
    hTheme: {"kind":"IntPtr"},
    iColorId: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "UxTheme" fn GetThemeSysColorBrush(
    hTheme: {"kind":"IntPtr"},
    iColorId: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "UxTheme" fn GetThemeSysBool(
    hTheme: {"kind":"IntPtr"},
    iBoolId: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "UxTheme" fn GetThemeSysSize(
    hTheme: {"kind":"IntPtr"},
    iSizeId: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "UxTheme" fn GetThemeSysFont(
    hTheme: {"kind":"IntPtr"},
    iFontId: {"kind":"Int32"},
    plf: {"kind""Ptr","child":Windows.Win32.Shell.LOGFONTW},

// set_last_errror=False (can and should we use this?)
pub extern "UxTheme" fn GetThemeSysString(
    hTheme: {"kind":"IntPtr"},
    iStringId: {"kind":"Int32"},
    pszStringBuff: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchMaxStringChars: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "UxTheme" fn GetThemeSysInt(
    hTheme: {"kind":"IntPtr"},
    iIntId: {"kind":"Int32"},
    piValue: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn IsThemeActive(

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn IsAppThemed(

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn GetWindowTheme(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,

// set_last_errror=False (can and should we use this?)
pub extern "UxTheme" fn EnableThemeDialogTexture(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "UxTheme" fn IsThemeDialogTextureEnabled(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn GetThemeAppProperties(

// set_last_errror=False (can and should we use this?)
pub extern "UxTheme" fn SetThemeAppProperties(
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn GetCurrentThemeName(
    pszThemeFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchMaxNameChars: {"kind":"Int32"},
    pszColorBuff: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchMaxColorChars: {"kind":"Int32"},
    pszSizeBuff: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchMaxSizeChars: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "UxTheme" fn GetThemeDocumentationProperty(
    pszThemeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszPropertyName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszValueBuff: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchMaxValChars: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn DrawThemeParentBackground(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    hdc: Windows.Win32.Gdi.HDC,
    prc: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},

// set_last_errror=False (can and should we use this?)
pub extern "UxTheme" fn EnableTheming(
    fEnable: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "UxTheme" fn DrawThemeParentBackgroundEx(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    hdc: Windows.Win32.Gdi.HDC,
    dwFlags: {"kind":"UInt32"},
    prc: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn SetWindowThemeAttribute(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    eAttribute: Windows.Win32.Controls.WINDOWTHEMEATTRIBUTETYPE,
    pvAttribute: {"kind""Ptr","child":{"kind":"Void"}},
    cbAttribute: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn DrawThemeTextEx(
    hTheme: {"kind":"IntPtr"},
    hdc: Windows.Win32.Gdi.HDC,
    iPartId: {"kind":"Int32"},
    iStateId: {"kind":"Int32"},
    pszText: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchText: {"kind":"Int32"},
    dwTextFlags: {"kind":"UInt32"},
    pRect: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    pOptions: {"kind""Ptr","child":Windows.Win32.Controls.DTTOPTS},

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn GetThemeBitmap(
    hTheme: {"kind":"IntPtr"},
    iPartId: {"kind":"Int32"},
    iStateId: {"kind":"Int32"},
    iPropId: {"kind":"Int32"},
    dwFlags: {"kind":"UInt32"},
    phBitmap: {"kind""Ptr","child":Windows.Win32.Gdi.HBITMAP},

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn GetThemeStream(
    hTheme: {"kind":"IntPtr"},
    iPartId: {"kind":"Int32"},
    iStateId: {"kind":"Int32"},
    iPropId: {"kind":"Int32"},
    ppvStream: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pcbStream: {"kind""Ptr","child":{"kind":"UInt32"}},
    hInst: Windows.Win32.SystemServices.HINSTANCE,

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn BufferedPaintInit(

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn BufferedPaintUnInit(

// set_last_errror=True (can and should we use this?)
pub extern "UXTHEME" fn BeginBufferedPaint(
    hdcTarget: Windows.Win32.Gdi.HDC,
    prcTarget: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    dwFormat: Windows.Win32.Controls.BP_BUFFERFORMAT,
    pPaintParams: {"kind""Ptr","child":Windows.Win32.Controls.BP_PAINTPARAMS},
    phdc: {"kind""Ptr","child":Windows.Win32.Gdi.HDC},

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn EndBufferedPaint(
    hBufferedPaint: {"kind":"IntPtr"},
    fUpdateTarget: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "UxTheme" fn GetBufferedPaintTargetRect(
    hBufferedPaint: {"kind":"IntPtr"},
    prc: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},

// set_last_errror=False (can and should we use this?)
pub extern "UxTheme" fn GetBufferedPaintTargetDC(
    hBufferedPaint: {"kind":"IntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "UxTheme" fn GetBufferedPaintDC(
    hBufferedPaint: {"kind":"IntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn GetBufferedPaintBits(
    hBufferedPaint: {"kind":"IntPtr"},
    ppbBuffer: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Gdi.RGBQUAD}},
    pcxRow: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn BufferedPaintClear(
    hBufferedPaint: {"kind":"IntPtr"},
    prc: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},

// set_last_errror=False (can and should we use this?)
pub extern "UxTheme" fn BufferedPaintSetAlpha(
    hBufferedPaint: {"kind":"IntPtr"},
    prc: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    alpha: {"kind":"Byte"},

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn BufferedPaintStopAllAnimations(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,

// set_last_errror=False (can and should we use this?)
pub extern "UxTheme" fn BeginBufferedAnimation(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    hdcTarget: Windows.Win32.Gdi.HDC,
    prcTarget: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    dwFormat: Windows.Win32.Controls.BP_BUFFERFORMAT,
    pPaintParams: {"kind""Ptr","child":Windows.Win32.Controls.BP_PAINTPARAMS},
    pAnimationParams: {"kind""Ptr","child":Windows.Win32.Controls.BP_ANIMATIONPARAMS},
    phdcFrom: {"kind""Ptr","child":Windows.Win32.Gdi.HDC},
    phdcTo: {"kind""Ptr","child":Windows.Win32.Gdi.HDC},

// set_last_errror=False (can and should we use this?)
pub extern "UxTheme" fn EndBufferedAnimation(
    hbpAnimation: {"kind":"IntPtr"},
    fUpdateTarget: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "UxTheme" fn BufferedPaintRenderAnimation(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    hdcTarget: Windows.Win32.Gdi.HDC,

// set_last_errror=False (can and should we use this?)
pub extern "UXTHEME" fn IsCompositionActive(

// set_last_errror=False (can and should we use this?)
pub extern "UxTheme" fn GetThemeTransitionDuration(
    hTheme: {"kind":"IntPtr"},
    iPartId: {"kind":"Int32"},
    iStateIdFrom: {"kind":"Int32"},
    iStateIdTo: {"kind":"Int32"},
    iPropId: {"kind":"Int32"},
    pdwDuration: {"kind""Ptr","child":{"kind":"UInt32"}},
],

"unicode_aliases": [
     "EDITWORDBREAKPROC"
     "LPFNPSPCALLBACK"
     "PROPSHEETPAGE"
     "HD_TEXTFILTER"
     "HDITEM"
     "NMHEADER"
     "NMHDDISPINFO"
     "TBSAVEPARAMS"
     "TBBUTTONINFO"
     "NMTBGETINFOTIP"
     "NMTBDISPINFO"
     "NMTOOLBAR"
     "REBARBANDINFO"
     "TTTOOLINFO"
     "TTHITTESTINFO"
     "NMTTDISPINFO"
     "LVITEM"
     "LVFINDINFO"
     "LVCOLUMN"
     "LVBKIMAGE"
     "NMLVFINDITEM"
     "NMLVDISPINFO"
     "NMLVGETINFOTIP"
     "TVITEM"
     "TVITEMEX"
     "TVINSERTSTRUCT"
     "NMTREEVIEW"
     "NMTVDISPINFO"
     "NMTVDISPINFOEX"
     "NMTVGETINFOTIP"
     "COMBOBOXEXITEM"
     "NMCOMBOBOXEX"
     "NMCBEDRAGBEGIN"
     "NMCBEENDEDIT"
     "TCITEMHEADER"
     "TCITEM"
     "NMDATETIMESTRING"
     "NMDATETIMEWMKEYDOWN"
     "NMDATETIMEFORMAT"
     "NMDATETIMEFORMATQUERY"
     "CHARFORMAT"
     "CHARFORMAT2"
     "TEXTRANGE"
     "FINDTEXT"
     "FINDTEXTEX"
     "DlgDirList"
     "DlgDirSelectEx"
     "DlgDirListComboBox"
     "DlgDirSelectComboBoxEx"
     "CreatePropertySheetPage"
     "PropertySheet"
     "ImageList_LoadImage"
     "DrawStatusText"
     "CreateStatusWindow"
]}
