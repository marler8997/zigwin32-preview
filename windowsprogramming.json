{
"constants": [
],

"types_definitions": [
// --------------------------------------------------------
// Type: NETLOGON_INFO_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NETLOGON_INFO_1 = extern struct {
    netlog1_flags: {"kind":"UInt32"},
    netlog1_pdc_connection_status: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NETLOGON_INFO_2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NETLOGON_INFO_2 = extern struct {
    netlog2_flags: {"kind":"UInt32"},
    netlog2_pdc_connection_status: {"kind":"UInt32"},
    netlog2_trusted_dc_name: {"kind""Ptr","child":{"kind":"UInt16"}},
    netlog2_tc_connection_status: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NETLOGON_INFO_3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NETLOGON_INFO_3 = extern struct {
    netlog3_flags: {"kind":"UInt32"},
    netlog3_logon_attempts: {"kind":"UInt32"},
    netlog3_reserved1: {"kind":"UInt32"},
    netlog3_reserved2: {"kind":"UInt32"},
    netlog3_reserved3: {"kind":"UInt32"},
    netlog3_reserved4: {"kind":"UInt32"},
    netlog3_reserved5: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NETLOGON_INFO_4
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NETLOGON_INFO_4 = extern struct {
    netlog4_trusted_dc_name: {"kind""Ptr","child":{"kind":"UInt16"}},
    netlog4_trusted_domain_name: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: PROCESS_CREATION_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROCESS_CREATION_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: HANDLE_FLAG_OPTIONS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HANDLE_FLAG_OPTIONS = *opaque{
};
// --------------------------------------------------------
// Type: DUPLICATE_HANDLE_OPTIONS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DUPLICATE_HANDLE_OPTIONS = *opaque{
};
// --------------------------------------------------------
// Type: STD_HANDLE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STD_HANDLE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: VER_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VER_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: ProcessAccessRights
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ProcessAccessRights = *opaque{
};
// --------------------------------------------------------
// Type: EventLogHandle
// TypeLayoutAttr: sequential
// RAIIFree 'CloseEventLog' (TODO: can we use this information?)
pub const EventLogHandle = {"kind":"IntPtr"};
// --------------------------------------------------------
// Type: EventSourceHandle
// TypeLayoutAttr: sequential
// RAIIFree 'DeregisterEventSource' (TODO: can we use this information?)
pub const EventSourceHandle = {"kind":"IntPtr"};
// --------------------------------------------------------
// Type: HeapHandle
// TypeLayoutAttr: sequential
// RAIIFree 'HeapDestroy' (TODO: can we use this information?)
pub const HeapHandle = {"kind":"IntPtr"};
// --------------------------------------------------------
// Type: HKEY
// TypeLayoutAttr: sequential
// RAIIFree 'RegCloseKey' (TODO: can we use this information?)
pub const HKEY = {"kind":"IntPtr"};
// --------------------------------------------------------
// Type: FIRMWARE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FIRMWARE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: OSVERSIONINFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OSVERSIONINFOA = extern struct {
    dwOSVersionInfoSize: {"kind":"UInt32"},
    dwMajorVersion: {"kind":"UInt32"},
    dwMinorVersion: {"kind":"UInt32"},
    dwBuildNumber: {"kind":"UInt32"},
    dwPlatformId: {"kind":"UInt32"},
    szCSDVersion: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: OSVERSIONINFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OSVERSIONINFOW = extern struct {
    dwOSVersionInfoSize: {"kind":"UInt32"},
    dwMajorVersion: {"kind":"UInt32"},
    dwMinorVersion: {"kind":"UInt32"},
    dwBuildNumber: {"kind":"UInt32"},
    dwPlatformId: {"kind":"UInt32"},
    szCSDVersion: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: OSVERSIONINFOEXA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OSVERSIONINFOEXA = extern struct {
    dwOSVersionInfoSize: {"kind":"UInt32"},
    dwMajorVersion: {"kind":"UInt32"},
    dwMinorVersion: {"kind":"UInt32"},
    dwBuildNumber: {"kind":"UInt32"},
    dwPlatformId: {"kind":"UInt32"},
    szCSDVersion: {"kind":"Array","child": {"kind":"SByte"}},
    wServicePackMajor: {"kind":"UInt16"},
    wServicePackMinor: {"kind":"UInt16"},
    wSuiteMask: {"kind":"UInt16"},
    wProductType: {"kind":"Byte"},
    wReserved: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: OSVERSIONINFOEXW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OSVERSIONINFOEXW = extern struct {
    dwOSVersionInfoSize: {"kind":"UInt32"},
    dwMajorVersion: {"kind":"UInt32"},
    dwMinorVersion: {"kind":"UInt32"},
    dwBuildNumber: {"kind":"UInt32"},
    dwPlatformId: {"kind":"UInt32"},
    szCSDVersion: {"kind":"Array","child": {"kind":"UInt16"}},
    wServicePackMajor: {"kind":"UInt16"},
    wServicePackMinor: {"kind":"UInt16"},
    wSuiteMask: {"kind":"UInt16"},
    wProductType: {"kind":"Byte"},
    wReserved: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: FILETIME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILETIME = extern struct {
    dwLowDateTime: {"kind":"UInt32"},
    dwHighDateTime: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SYSTEMTIME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEMTIME = extern struct {
    wYear: {"kind":"UInt16"},
    wMonth: {"kind":"UInt16"},
    wDayOfWeek: {"kind":"UInt16"},
    wDay: {"kind":"UInt16"},
    wHour: {"kind":"UInt16"},
    wMinute: {"kind":"UInt16"},
    wSecond: {"kind":"UInt16"},
    wMilliseconds: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: UpdateImpactLevel
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UpdateImpactLevel = *opaque{
};
// --------------------------------------------------------
// Type: UpdateAssessmentStatus
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UpdateAssessmentStatus = *opaque{
};
// --------------------------------------------------------
// Type: UpdateAssessment
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UpdateAssessment = extern struct {
    status: Windows.Win32.WindowsProgramming.UpdateAssessmentStatus,
    impact: Windows.Win32.WindowsProgramming.UpdateImpactLevel,
    daysOutOfDate: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: OSUpdateAssessment
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OSUpdateAssessment = extern struct {
    isEndOfSupport: Windows.Win32.SystemServices.BOOL,
    assessmentForCurrent: Windows.Win32.WindowsProgramming.UpdateAssessment,
    assessmentForUpToDate: Windows.Win32.WindowsProgramming.UpdateAssessment,
    securityStatus: Windows.Win32.WindowsProgramming.UpdateAssessmentStatus,
    assessmentTime: Windows.Win32.WindowsProgramming.FILETIME,
    releaseInfoTime: Windows.Win32.WindowsProgramming.FILETIME,
    currentOSBuild: {"kind""Ptr","child":{"kind":"UInt16"}},
    currentOSReleaseTime: Windows.Win32.WindowsProgramming.FILETIME,
    upToDateOSBuild: {"kind""Ptr","child":{"kind":"UInt16"}},
    upToDateOSReleaseTime: Windows.Win32.WindowsProgramming.FILETIME,
};
// --------------------------------------------------------
// Type: EXTENDED_NAME_FORMAT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EXTENDED_NAME_FORMAT = *opaque{
};
// --------------------------------------------------------
// Type: STRING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STRING = extern struct {
    Length: {"kind":"UInt16"},
    MaximumLength: {"kind":"UInt16"},
    Buffer: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: _PROC_THREAD_ATTRIBUTE_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _PROC_THREAD_ATTRIBUTE_LIST = opaque {
};
// --------------------------------------------------------
// Type: THREAD_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const THREAD_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: SYSTEM_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_INFO = extern struct {
    Anonymous: Windows.Win32.WindowsProgramming.SYSTEM_INFO+_Anonymous_e__Union,
    dwPageSize: {"kind":"UInt32"},
    lpMinimumApplicationAddress: {"kind""Ptr","child":{"kind":"Void"}},
    lpMaximumApplicationAddress: {"kind""Ptr","child":{"kind":"Void"}},
    dwActiveProcessorMask: {"kind":"UIntPtr"},
    dwNumberOfProcessors: {"kind":"UInt32"},
    dwProcessorType: {"kind":"UInt32"},
    dwAllocationGranularity: {"kind":"UInt32"},
    wProcessorLevel: {"kind":"UInt16"},
    wProcessorRevision: {"kind":"UInt16"},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            wProcessorArchitecture: {"kind":"UInt16"},
            wReserved: {"kind":"UInt16"},
        };
    };
};
// --------------------------------------------------------
// Type: COMPUTER_NAME_FORMAT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const COMPUTER_NAME_FORMAT = *opaque{
};
// --------------------------------------------------------
// Type: LPFIBER_START_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFIBER_START_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFIBER_CALLOUT_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFIBER_CALLOUT_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: JIT_DEBUG_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const JIT_DEBUG_INFO = extern struct {
    dwSize: {"kind":"UInt32"},
    dwProcessorArchitecture: {"kind":"UInt32"},
    dwThreadID: {"kind":"UInt32"},
    dwReserved0: {"kind":"UInt32"},
    lpExceptionAddress: {"kind":"UInt64"},
    lpExceptionRecord: {"kind":"UInt64"},
    lpContextRecord: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: PUMS_SCHEDULER_ENTRY_POINT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PUMS_SCHEDULER_ENTRY_POINT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DEP_SYSTEM_POLICY_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DEP_SYSTEM_POLICY_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: PROC_THREAD_ATTRIBUTE_NUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROC_THREAD_ATTRIBUTE_NUM = *opaque{
};
// --------------------------------------------------------
// Type: PGET_SYSTEM_WOW64_DIRECTORY_A
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PGET_SYSTEM_WOW64_DIRECTORY_A = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PGET_SYSTEM_WOW64_DIRECTORY_W
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PGET_SYSTEM_WOW64_DIRECTORY_W = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: HW_PROFILE_INFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HW_PROFILE_INFOA = extern struct {
    dwDockInfo: {"kind":"UInt32"},
    szHwProfileGuid: {"kind":"Array","child": {"kind":"SByte"}},
    szHwProfileName: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: HW_PROFILE_INFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HW_PROFILE_INFOW = extern struct {
    dwDockInfo: {"kind":"UInt32"},
    szHwProfileGuid: {"kind":"Array","child": {"kind":"UInt16"}},
    szHwProfileName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: TIME_ZONE_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TIME_ZONE_INFORMATION = extern struct {
    Bias: {"kind":"Int32"},
    StandardName: {"kind":"Array","child": {"kind":"UInt16"}},
    StandardDate: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    StandardBias: {"kind":"Int32"},
    DaylightName: {"kind":"Array","child": {"kind":"UInt16"}},
    DaylightDate: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    DaylightBias: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: DYNAMIC_TIME_ZONE_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DYNAMIC_TIME_ZONE_INFORMATION = extern struct {
    Bias: {"kind":"Int32"},
    StandardName: {"kind":"Array","child": {"kind":"UInt16"}},
    StandardDate: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    StandardBias: {"kind":"Int32"},
    DaylightName: {"kind":"Array","child": {"kind":"UInt16"}},
    DaylightDate: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    DaylightBias: {"kind":"Int32"},
    TimeZoneKeyName: {"kind":"Array","child": {"kind":"UInt16"}},
    DynamicDaylightTimeDisabled: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: ACTCTX_SECTION_KEYED_DATA_2600
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACTCTX_SECTION_KEYED_DATA_2600 = extern struct {
    cbSize: {"kind":"UInt32"},
    ulDataFormatVersion: {"kind":"UInt32"},
    lpData: {"kind""Ptr","child":{"kind":"Void"}},
    ulLength: {"kind":"UInt32"},
    lpSectionGlobalData: {"kind""Ptr","child":{"kind":"Void"}},
    ulSectionGlobalDataLength: {"kind":"UInt32"},
    lpSectionBase: {"kind""Ptr","child":{"kind":"Void"}},
    ulSectionTotalLength: {"kind":"UInt32"},
    hActCtx: Windows.Win32.SystemServices.HANDLE,
    ulAssemblyRosterIndex: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = extern struct {
    lpInformation: {"kind""Ptr","child":{"kind":"Void"}},
    lpSectionBase: {"kind""Ptr","child":{"kind":"Void"}},
    ulSectionLength: {"kind":"UInt32"},
    lpSectionGlobalDataBase: {"kind""Ptr","child":{"kind":"Void"}},
    ulSectionGlobalDataLength: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: ACTIVATION_CONTEXT_BASIC_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACTIVATION_CONTEXT_BASIC_INFORMATION = extern struct {
    hActCtx: Windows.Win32.SystemServices.HANDLE,
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PQUERYACTCTXW_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PQUERYACTCTXW_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: APPLICATION_RECOVERY_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const APPLICATION_RECOVERY_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FILE_CASE_SENSITIVE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_CASE_SENSITIVE_INFO = extern struct {
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: FILE_DISPOSITION_INFO_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_DISPOSITION_INFO_EX = extern struct {
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: val_context
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const val_context = extern struct {
    valuelen: {"kind":"Int32"},
    value_context: {"kind""Ptr","child":{"kind":"Void"}},
    val_buff_ptr: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: pvalueA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const pvalueA = extern struct {
    pv_valuename: {"kind""Ptr","child":{"kind":"SByte"}},
    pv_valuelen: {"kind":"Int32"},
    pv_value_context: {"kind""Ptr","child":{"kind":"Void"}},
    pv_type: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: pvalueW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const pvalueW = extern struct {
    pv_valuename: {"kind""Ptr","child":{"kind":"UInt16"}},
    pv_valuelen: {"kind":"Int32"},
    pv_value_context: {"kind""Ptr","child":{"kind":"Void"}},
    pv_type: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: QUERYHANDLER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QUERYHANDLER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PQUERYHANDLER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PQUERYHANDLER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: provider_info
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const provider_info = extern struct {
    pi_R0_1val: Windows.Win32.WindowsProgramming.PQUERYHANDLER,
    pi_R0_allvals: Windows.Win32.WindowsProgramming.PQUERYHANDLER,
    pi_R3_1val: Windows.Win32.WindowsProgramming.PQUERYHANDLER,
    pi_R3_allvals: Windows.Win32.WindowsProgramming.PQUERYHANDLER,
    pi_flags: {"kind":"UInt32"},
    pi_key_context: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: VALENTA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VALENTA = extern struct {
    ve_valuename: {"kind""Ptr","child":{"kind":"SByte"}},
    ve_valuelen: {"kind":"UInt32"},
    ve_valueptr: {"kind":"UIntPtr"},
    ve_type: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: VALENTW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VALENTW = extern struct {
    ve_valuename: {"kind""Ptr","child":{"kind":"UInt16"}},
    ve_valuelen: {"kind":"UInt32"},
    ve_valueptr: {"kind":"UIntPtr"},
    ve_type: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DOMDocument
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DOMDocument = opaque {
};
// --------------------------------------------------------
// Type: DOMFreeThreadedDocument
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DOMFreeThreadedDocument = opaque {
};
// --------------------------------------------------------
// Type: XMLHTTPRequest
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const XMLHTTPRequest = opaque {
};
// --------------------------------------------------------
// Type: XMLDSOControl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const XMLDSOControl = opaque {
};
// --------------------------------------------------------
// Type: XMLDocument
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const XMLDocument = opaque {
};
// --------------------------------------------------------
// Type: XML_ERROR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const XML_ERROR = extern struct {
    _nLine: {"kind":"UInt32"},
    _pchBuf: Windows.Win32.Automation.BSTR,
    _cchBuf: {"kind":"UInt32"},
    _ich: {"kind":"UInt32"},
    _pszFound: Windows.Win32.Automation.BSTR,
    _pszExpected: Windows.Win32.Automation.BSTR,
    _reserved1: {"kind":"UInt32"},
    _reserved2: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DOMNodeType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOMNodeType = *opaque{
};
// --------------------------------------------------------
// Type: XMLEMEM_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const XMLEMEM_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IXMLDOMImplementation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMImplementation = *opaque{
    // TODO: Method 'hasFeature'
};
// --------------------------------------------------------
// Type: IXMLDOMNode
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMNode = *opaque{
    // TODO: Method 'get_nodeName'
    // TODO: Method 'get_nodeValue'
    // TODO: Method 'put_nodeValue'
    // TODO: Method 'get_nodeType'
    // TODO: Method 'get_parentNode'
    // TODO: Method 'get_childNodes'
    // TODO: Method 'get_firstChild'
    // TODO: Method 'get_lastChild'
    // TODO: Method 'get_previousSibling'
    // TODO: Method 'get_nextSibling'
    // TODO: Method 'get_attributes'
    // TODO: Method 'insertBefore'
    // TODO: Method 'replaceChild'
    // TODO: Method 'removeChild'
    // TODO: Method 'appendChild'
    // TODO: Method 'hasChildNodes'
    // TODO: Method 'get_ownerDocument'
    // TODO: Method 'cloneNode'
    // TODO: Method 'get_nodeTypeString'
    // TODO: Method 'get_text'
    // TODO: Method 'put_text'
    // TODO: Method 'get_specified'
    // TODO: Method 'get_definition'
    // TODO: Method 'get_nodeTypedValue'
    // TODO: Method 'put_nodeTypedValue'
    // TODO: Method 'get_dataType'
    // TODO: Method 'put_dataType'
    // TODO: Method 'get_xml'
    // TODO: Method 'transformNode'
    // TODO: Method 'selectNodes'
    // TODO: Method 'selectSingleNode'
    // TODO: Method 'get_parsed'
    // TODO: Method 'get_namespaceURI'
    // TODO: Method 'get_prefix'
    // TODO: Method 'get_baseName'
    // TODO: Method 'transformNodeToObject'
};
// --------------------------------------------------------
// Type: IXMLDOMDocumentFragment
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMDocumentFragment = *opaque{
};
// --------------------------------------------------------
// Type: IXMLDOMDocument
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMDocument = *opaque{
    // TODO: Method 'get_doctype'
    // TODO: Method 'get_implementation'
    // TODO: Method 'get_documentElement'
    // TODO: Method 'putref_documentElement'
    // TODO: Method 'createElement'
    // TODO: Method 'createDocumentFragment'
    // TODO: Method 'createTextNode'
    // TODO: Method 'createComment'
    // TODO: Method 'createCDATASection'
    // TODO: Method 'createProcessingInstruction'
    // TODO: Method 'createAttribute'
    // TODO: Method 'createEntityReference'
    // TODO: Method 'getElementsByTagName'
    // TODO: Method 'createNode'
    // TODO: Method 'nodeFromID'
    // TODO: Method 'load'
    // TODO: Method 'get_readyState'
    // TODO: Method 'get_parseError'
    // TODO: Method 'get_url'
    // TODO: Method 'get_async'
    // TODO: Method 'put_async'
    // TODO: Method 'abort'
    // TODO: Method 'loadXML'
    // TODO: Method 'save'
    // TODO: Method 'get_validateOnParse'
    // TODO: Method 'put_validateOnParse'
    // TODO: Method 'get_resolveExternals'
    // TODO: Method 'put_resolveExternals'
    // TODO: Method 'get_preserveWhiteSpace'
    // TODO: Method 'put_preserveWhiteSpace'
    // TODO: Method 'put_onreadystatechange'
    // TODO: Method 'put_ondataavailable'
    // TODO: Method 'put_ontransformnode'
};
// --------------------------------------------------------
// Type: IXMLDOMNodeList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMNodeList = *opaque{
    // TODO: Method 'get_item'
    // TODO: Method 'get_length'
    // TODO: Method 'nextNode'
    // TODO: Method 'reset'
    // TODO: Method 'get__newEnum'
};
// --------------------------------------------------------
// Type: IXMLDOMNamedNodeMap
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMNamedNodeMap = *opaque{
    // TODO: Method 'getNamedItem'
    // TODO: Method 'setNamedItem'
    // TODO: Method 'removeNamedItem'
    // TODO: Method 'get_item'
    // TODO: Method 'get_length'
    // TODO: Method 'getQualifiedItem'
    // TODO: Method 'removeQualifiedItem'
    // TODO: Method 'nextNode'
    // TODO: Method 'reset'
    // TODO: Method 'get__newEnum'
};
// --------------------------------------------------------
// Type: IXMLDOMCharacterData
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMCharacterData = *opaque{
    // TODO: Method 'get_data'
    // TODO: Method 'put_data'
    // TODO: Method 'get_length'
    // TODO: Method 'substringData'
    // TODO: Method 'appendData'
    // TODO: Method 'insertData'
    // TODO: Method 'deleteData'
    // TODO: Method 'replaceData'
};
// --------------------------------------------------------
// Type: IXMLDOMAttribute
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMAttribute = *opaque{
    // TODO: Method 'get_name'
    // TODO: Method 'get_value'
    // TODO: Method 'put_value'
};
// --------------------------------------------------------
// Type: IXMLDOMElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMElement = *opaque{
    // TODO: Method 'get_tagName'
    // TODO: Method 'getAttribute'
    // TODO: Method 'setAttribute'
    // TODO: Method 'removeAttribute'
    // TODO: Method 'getAttributeNode'
    // TODO: Method 'setAttributeNode'
    // TODO: Method 'removeAttributeNode'
    // TODO: Method 'getElementsByTagName'
    // TODO: Method 'normalize'
};
// --------------------------------------------------------
// Type: IXMLDOMText
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMText = *opaque{
    // TODO: Method 'splitText'
};
// --------------------------------------------------------
// Type: IXMLDOMComment
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMComment = *opaque{
};
// --------------------------------------------------------
// Type: IXMLDOMProcessingInstruction
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMProcessingInstruction = *opaque{
    // TODO: Method 'get_target'
    // TODO: Method 'get_data'
    // TODO: Method 'put_data'
};
// --------------------------------------------------------
// Type: IXMLDOMCDATASection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMCDATASection = *opaque{
};
// --------------------------------------------------------
// Type: IXMLDOMDocumentType
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMDocumentType = *opaque{
    // TODO: Method 'get_name'
    // TODO: Method 'get_entities'
    // TODO: Method 'get_notations'
};
// --------------------------------------------------------
// Type: IXMLDOMNotation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMNotation = *opaque{
    // TODO: Method 'get_publicId'
    // TODO: Method 'get_systemId'
};
// --------------------------------------------------------
// Type: IXMLDOMEntity
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMEntity = *opaque{
    // TODO: Method 'get_publicId'
    // TODO: Method 'get_systemId'
    // TODO: Method 'get_notationName'
};
// --------------------------------------------------------
// Type: IXMLDOMEntityReference
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMEntityReference = *opaque{
};
// --------------------------------------------------------
// Type: IXMLDOMParseError
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMParseError = *opaque{
    // TODO: Method 'get_errorCode'
    // TODO: Method 'get_url'
    // TODO: Method 'get_reason'
    // TODO: Method 'get_srcText'
    // TODO: Method 'get_line'
    // TODO: Method 'get_linepos'
    // TODO: Method 'get_filepos'
};
// --------------------------------------------------------
// Type: IXTLRuntime
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXTLRuntime = *opaque{
    // TODO: Method 'uniqueID'
    // TODO: Method 'depth'
    // TODO: Method 'childNumber'
    // TODO: Method 'ancestorChildNumber'
    // TODO: Method 'absoluteChildNumber'
    // TODO: Method 'formatIndex'
    // TODO: Method 'formatNumber'
    // TODO: Method 'formatDate'
    // TODO: Method 'formatTime'
};
// --------------------------------------------------------
// Type: XMLDOMDocumentEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const XMLDOMDocumentEvents = *opaque{
};
// --------------------------------------------------------
// Type: IXMLHttpRequest
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLHttpRequest = *opaque{
    // TODO: Method 'open'
    // TODO: Method 'setRequestHeader'
    // TODO: Method 'getResponseHeader'
    // TODO: Method 'getAllResponseHeaders'
    // TODO: Method 'send'
    // TODO: Method 'abort'
    // TODO: Method 'get_status'
    // TODO: Method 'get_statusText'
    // TODO: Method 'get_responseXML'
    // TODO: Method 'get_responseText'
    // TODO: Method 'get_responseBody'
    // TODO: Method 'get_responseStream'
    // TODO: Method 'get_readyState'
    // TODO: Method 'put_onreadystatechange'
};
// --------------------------------------------------------
// Type: IXMLDSOControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDSOControl = *opaque{
    // TODO: Method 'get_XMLDocument'
    // TODO: Method 'put_XMLDocument'
    // TODO: Method 'get_JavaDSOCompatible'
    // TODO: Method 'put_JavaDSOCompatible'
    // TODO: Method 'get_readyState'
};
// --------------------------------------------------------
// Type: IXMLElementCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLElementCollection = *opaque{
    // TODO: Method 'put_length'
    // TODO: Method 'get_length'
    // TODO: Method 'get__newEnum'
    // TODO: Method 'item'
};
// --------------------------------------------------------
// Type: IXMLDocument
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDocument = *opaque{
    // TODO: Method 'get_root'
    // TODO: Method 'get_fileSize'
    // TODO: Method 'get_fileModifiedDate'
    // TODO: Method 'get_fileUpdatedDate'
    // TODO: Method 'get_URL'
    // TODO: Method 'put_URL'
    // TODO: Method 'get_mimeType'
    // TODO: Method 'get_readyState'
    // TODO: Method 'get_charset'
    // TODO: Method 'put_charset'
    // TODO: Method 'get_version'
    // TODO: Method 'get_doctype'
    // TODO: Method 'get_dtdURL'
    // TODO: Method 'createElement'
};
// --------------------------------------------------------
// Type: IXMLDocument2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDocument2 = *opaque{
    // TODO: Method 'get_root'
    // TODO: Method 'get_fileSize'
    // TODO: Method 'get_fileModifiedDate'
    // TODO: Method 'get_fileUpdatedDate'
    // TODO: Method 'get_URL'
    // TODO: Method 'put_URL'
    // TODO: Method 'get_mimeType'
    // TODO: Method 'get_readyState'
    // TODO: Method 'get_charset'
    // TODO: Method 'put_charset'
    // TODO: Method 'get_version'
    // TODO: Method 'get_doctype'
    // TODO: Method 'get_dtdURL'
    // TODO: Method 'createElement'
    // TODO: Method 'get_async'
    // TODO: Method 'put_async'
};
// --------------------------------------------------------
// Type: IXMLElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLElement = *opaque{
    // TODO: Method 'get_tagName'
    // TODO: Method 'put_tagName'
    // TODO: Method 'get_parent'
    // TODO: Method 'setAttribute'
    // TODO: Method 'getAttribute'
    // TODO: Method 'removeAttribute'
    // TODO: Method 'get_children'
    // TODO: Method 'get_type'
    // TODO: Method 'get_text'
    // TODO: Method 'put_text'
    // TODO: Method 'addChild'
    // TODO: Method 'removeChild'
};
// --------------------------------------------------------
// Type: IXMLElement2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLElement2 = *opaque{
    // TODO: Method 'get_tagName'
    // TODO: Method 'put_tagName'
    // TODO: Method 'get_parent'
    // TODO: Method 'setAttribute'
    // TODO: Method 'getAttribute'
    // TODO: Method 'removeAttribute'
    // TODO: Method 'get_children'
    // TODO: Method 'get_type'
    // TODO: Method 'get_text'
    // TODO: Method 'put_text'
    // TODO: Method 'addChild'
    // TODO: Method 'removeChild'
    // TODO: Method 'get_attributes'
};
// --------------------------------------------------------
// Type: IXMLAttribute
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLAttribute = *opaque{
    // TODO: Method 'get_name'
    // TODO: Method 'get_value'
};
// --------------------------------------------------------
// Type: IXMLError
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLError = *opaque{
    // TODO: Method 'GetErrorInfo'
};
// --------------------------------------------------------
// Type: CLIENT_ID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLIENT_ID = extern struct {
    UniqueProcess: Windows.Win32.SystemServices.HANDLE,
    UniqueThread: Windows.Win32.SystemServices.HANDLE,
};
// --------------------------------------------------------
// Type: LDR_DATA_TABLE_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LDR_DATA_TABLE_ENTRY = extern struct {
    Reserved1: {"kind":"Array","child": {"kind""Ptr","child":{"kind":"Void"}}},
    InMemoryOrderLinks: Windows.Win32.Kernel.LIST_ENTRY,
    Reserved2: {"kind":"Array","child": {"kind""Ptr","child":{"kind":"Void"}}},
    DllBase: {"kind""Ptr","child":{"kind":"Void"}},
    Reserved3: {"kind":"Array","child": {"kind""Ptr","child":{"kind":"Void"}}},
    FullDllName: Windows.Win32.Security.UNICODE_STRING,
    Reserved4: {"kind":"Array","child": {"kind":"Byte"}},
    Reserved5: {"kind":"Array","child": {"kind""Ptr","child":{"kind":"Void"}}},
    Anonymous: Windows.Win32.WindowsProgramming.LDR_DATA_TABLE_ENTRY+_Anonymous_e__Union,
    TimeDateStamp: {"kind":"UInt32"},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PPS_POST_PROCESS_INIT_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PPS_POST_PROCESS_INIT_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: OBJECT_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OBJECT_ATTRIBUTES = extern struct {
    Length: {"kind":"UInt32"},
    RootDirectory: Windows.Win32.SystemServices.HANDLE,
    ObjectName: {"kind""Ptr","child":Windows.Win32.Security.UNICODE_STRING},
    Attributes: {"kind":"UInt32"},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    SecurityQualityOfService: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: IO_STATUS_BLOCK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IO_STATUS_BLOCK = extern struct {
    Anonymous: Windows.Win32.WindowsProgramming.IO_STATUS_BLOCK+_Anonymous_e__Union,
    Information: {"kind":"UIntPtr"},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PIO_APC_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PIO_APC_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PROCESS_BASIC_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESS_BASIC_INFORMATION = extern struct {
    Reserved1: {"kind""Ptr","child":{"kind":"Void"}},
    PebBaseAddress: {"kind""Ptr","child":Windows.Win32.SystemServices.PEB},
    Reserved2: {"kind":"Array","child": {"kind""Ptr","child":{"kind":"Void"}}},
    UniqueProcessId: {"kind":"UIntPtr"},
    Reserved3: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION = extern struct {
    IdleTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    KernelTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    UserTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    Reserved1: {"kind":"Array","child": Windows.Win32.SystemServices.LARGE_INTEGER},
    Reserved2: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SYSTEM_PROCESS_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_PROCESS_INFORMATION = extern struct {
    NextEntryOffset: {"kind":"UInt32"},
    NumberOfThreads: {"kind":"UInt32"},
    Reserved1: {"kind":"Array","child": {"kind":"Byte"}},
    ImageName: Windows.Win32.Security.UNICODE_STRING,
    BasePriority: {"kind":"Int32"},
    UniqueProcessId: Windows.Win32.SystemServices.HANDLE,
    Reserved2: {"kind""Ptr","child":{"kind":"Void"}},
    HandleCount: {"kind":"UInt32"},
    SessionId: {"kind":"UInt32"},
    Reserved3: {"kind""Ptr","child":{"kind":"Void"}},
    PeakVirtualSize: {"kind":"UIntPtr"},
    VirtualSize: {"kind":"UIntPtr"},
    Reserved4: {"kind":"UInt32"},
    PeakWorkingSetSize: {"kind":"UIntPtr"},
    WorkingSetSize: {"kind":"UIntPtr"},
    Reserved5: {"kind""Ptr","child":{"kind":"Void"}},
    QuotaPagedPoolUsage: {"kind":"UIntPtr"},
    Reserved6: {"kind""Ptr","child":{"kind":"Void"}},
    QuotaNonPagedPoolUsage: {"kind":"UIntPtr"},
    PagefileUsage: {"kind":"UIntPtr"},
    PeakPagefileUsage: {"kind":"UIntPtr"},
    PrivatePageCount: {"kind":"UIntPtr"},
    Reserved7: {"kind":"Array","child": Windows.Win32.SystemServices.LARGE_INTEGER},
};
// --------------------------------------------------------
// Type: SYSTEM_THREAD_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_THREAD_INFORMATION = extern struct {
    Reserved1: {"kind":"Array","child": Windows.Win32.SystemServices.LARGE_INTEGER},
    Reserved2: {"kind":"UInt32"},
    StartAddress: {"kind""Ptr","child":{"kind":"Void"}},
    ClientId: Windows.Win32.WindowsProgramming.CLIENT_ID,
    Priority: {"kind":"Int32"},
    BasePriority: {"kind":"Int32"},
    Reserved3: {"kind":"UInt32"},
    ThreadState: {"kind":"UInt32"},
    WaitReason: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SYSTEM_REGISTRY_QUOTA_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_REGISTRY_QUOTA_INFORMATION = extern struct {
    RegistryQuotaAllowed: {"kind":"UInt32"},
    RegistryQuotaUsed: {"kind":"UInt32"},
    Reserved1: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: SYSTEM_BASIC_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_BASIC_INFORMATION = extern struct {
    Reserved1: {"kind":"Array","child": {"kind":"Byte"}},
    Reserved2: {"kind":"Array","child": {"kind""Ptr","child":{"kind":"Void"}}},
    NumberOfProcessors: {"kind":"SByte"},
};
// --------------------------------------------------------
// Type: SYSTEM_TIMEOFDAY_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_TIMEOFDAY_INFORMATION = extern struct {
    Reserved1: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SYSTEM_PERFORMANCE_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_PERFORMANCE_INFORMATION = extern struct {
    Reserved1: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SYSTEM_EXCEPTION_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_EXCEPTION_INFORMATION = extern struct {
    Reserved1: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SYSTEM_LOOKASIDE_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_LOOKASIDE_INFORMATION = extern struct {
    Reserved1: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SYSTEM_INTERRUPT_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_INTERRUPT_INFORMATION = extern struct {
    Reserved1: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SYSTEM_POLICY_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_POLICY_INFORMATION = extern struct {
    Reserved1: {"kind":"Array","child": {"kind""Ptr","child":{"kind":"Void"}}},
    Reserved2: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: FILE_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FILE_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: PROCESSINFOCLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROCESSINFOCLASS = *opaque{
};
// --------------------------------------------------------
// Type: THREADINFOCLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const THREADINFOCLASS = *opaque{
};
// --------------------------------------------------------
// Type: SYSTEM_CODEINTEGRITY_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_CODEINTEGRITY_INFORMATION = extern struct {
    Length: {"kind":"UInt32"},
    CodeIntegrityOptions: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SYSTEM_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SYSTEM_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: OBJECT_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OBJECT_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: PUBLIC_OBJECT_BASIC_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PUBLIC_OBJECT_BASIC_INFORMATION = extern struct {
    Attributes: {"kind":"UInt32"},
    GrantedAccess: {"kind":"UInt32"},
    HandleCount: {"kind":"UInt32"},
    PointerCount: {"kind":"UInt32"},
    Reserved: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: __PUBLIC_OBJECT_TYPE_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const __PUBLIC_OBJECT_TYPE_INFORMATION = extern struct {
    TypeName: Windows.Win32.Security.UNICODE_STRING,
    Reserved: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: KEY_VALUE_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KEY_VALUE_ENTRY = extern struct {
    ValueName: {"kind""Ptr","child":Windows.Win32.Security.UNICODE_STRING},
    DataLength: {"kind":"UInt32"},
    DataOffset: {"kind":"UInt32"},
    Type: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: KEY_SET_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KEY_SET_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: WINSTATIONINFOCLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WINSTATIONINFOCLASS = *opaque{
};
// --------------------------------------------------------
// Type: WINSTATIONINFORMATIONW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WINSTATIONINFORMATIONW = extern struct {
    Reserved2: {"kind":"Array","child": {"kind":"Byte"}},
    LogonId: {"kind":"UInt32"},
    Reserved3: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: PWINSTATIONQUERYINFORMATIONW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWINSTATIONQUERYINFORMATIONW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: AVRF_BACKTRACE_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AVRF_BACKTRACE_INFORMATION = extern struct {
    Depth: {"kind":"UInt32"},
    Index: {"kind":"UInt32"},
    ReturnAddresses: {"kind":"Array","child": {"kind":"UInt64"}},
};
// --------------------------------------------------------
// Type: eUserAllocationState
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const eUserAllocationState = *opaque{
};
// --------------------------------------------------------
// Type: eHeapAllocationState
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const eHeapAllocationState = *opaque{
};
// --------------------------------------------------------
// Type: eHeapEnumerationLevel
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const eHeapEnumerationLevel = *opaque{
};
// --------------------------------------------------------
// Type: AVRF_HEAP_ALLOCATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AVRF_HEAP_ALLOCATION = extern struct {
    HeapHandle: {"kind":"UInt64"},
    UserAllocation: {"kind":"UInt64"},
    UserAllocationSize: {"kind":"UInt64"},
    Allocation: {"kind":"UInt64"},
    AllocationSize: {"kind":"UInt64"},
    UserAllocationState: {"kind":"UInt32"},
    HeapState: {"kind":"UInt32"},
    HeapContext: {"kind":"UInt64"},
    BackTraceInformation: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.AVRF_BACKTRACE_INFORMATION},
};
// --------------------------------------------------------
// Type: eHANDLE_TRACE_OPERATIONS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const eHANDLE_TRACE_OPERATIONS = *opaque{
};
// --------------------------------------------------------
// Type: AVRF_HANDLE_OPERATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AVRF_HANDLE_OPERATION = extern struct {
    Handle: {"kind":"UInt64"},
    ProcessId: {"kind":"UInt32"},
    ThreadId: {"kind":"UInt32"},
    OperationType: {"kind":"UInt32"},
    Spare0: {"kind":"UInt32"},
    BackTraceInformation: Windows.Win32.WindowsProgramming.AVRF_BACKTRACE_INFORMATION,
};
// --------------------------------------------------------
// Type: eAvrfResourceTypes
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const eAvrfResourceTypes = *opaque{
};
// --------------------------------------------------------
// Type: AVRF_RESOURCE_ENUMERATE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AVRF_RESOURCE_ENUMERATE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: AVRF_HEAPALLOCATION_ENUMERATE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AVRF_HEAPALLOCATION_ENUMERATE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: AVRF_HANDLEOPERATION_ENUMERATE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AVRF_HANDLEOPERATION_ENUMERATE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CameraUIControl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CameraUIControl = opaque {
};
// --------------------------------------------------------
// Type: CameraUIControlMode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CameraUIControlMode = *opaque{
};
// --------------------------------------------------------
// Type: CameraUIControlLinearSelectionMode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CameraUIControlLinearSelectionMode = *opaque{
};
// --------------------------------------------------------
// Type: CameraUIControlCaptureMode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CameraUIControlCaptureMode = *opaque{
};
// --------------------------------------------------------
// Type: CameraUIControlPhotoFormat
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CameraUIControlPhotoFormat = *opaque{
};
// --------------------------------------------------------
// Type: CameraUIControlVideoFormat
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CameraUIControlVideoFormat = *opaque{
};
// --------------------------------------------------------
// Type: CameraUIControlViewType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CameraUIControlViewType = *opaque{
};
// --------------------------------------------------------
// Type: ICameraUIControlEventCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICameraUIControlEventCallback = *opaque{
    // TODO: Method 'OnStartupComplete'
    // TODO: Method 'OnSuspendComplete'
    // TODO: Method 'OnItemCaptured'
    // TODO: Method 'OnItemDeleted'
    // TODO: Method 'OnClosed'
};
// --------------------------------------------------------
// Type: ICameraUIControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICameraUIControl = *opaque{
    // TODO: Method 'Show'
    // TODO: Method 'Close'
    // TODO: Method 'Suspend'
    // TODO: Method 'Resume'
    // TODO: Method 'GetCurrentViewType'
    // TODO: Method 'GetActiveItem'
    // TODO: Method 'GetSelectedItems'
    // TODO: Method 'RemoveCapturedItem'
};
// --------------------------------------------------------
// Type: ERF
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ERF = extern struct {
    erfOper: {"kind":"Int32"},
    erfType: {"kind":"Int32"},
    fError: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: FCIERROR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FCIERROR = *opaque{
};
// --------------------------------------------------------
// Type: CCAB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CCAB = extern struct {
    cb: {"kind":"UInt32"},
    cbFolderThresh: {"kind":"UInt32"},
    cbReserveCFHeader: {"kind":"UInt32"},
    cbReserveCFFolder: {"kind":"UInt32"},
    cbReserveCFData: {"kind":"UInt32"},
    iCab: {"kind":"Int32"},
    iDisk: {"kind":"Int32"},
    fFailOnIncompressible: {"kind":"Int32"},
    setID: {"kind":"UInt16"},
    szDisk: {"kind":"Array","child": {"kind":"SByte"}},
    szCab: {"kind":"Array","child": {"kind":"SByte"}},
    szCabPath: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: PFNFCIALLOC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNFCIALLOC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNFCIFREE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNFCIFREE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNFCIOPEN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNFCIOPEN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNFCIREAD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNFCIREAD = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNFCIWRITE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNFCIWRITE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNFCICLOSE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNFCICLOSE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNFCISEEK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNFCISEEK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNFCIDELETE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNFCIDELETE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNFCIGETNEXTCABINET
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNFCIGETNEXTCABINET = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNFCIFILEPLACED
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNFCIFILEPLACED = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNFCIGETOPENINFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNFCIGETOPENINFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNFCISTATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNFCISTATUS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNFCIGETTEMPFILE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNFCIGETTEMPFILE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FDIERROR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FDIERROR = *opaque{
};
// --------------------------------------------------------
// Type: FDICABINETINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FDICABINETINFO = extern struct {
    cbCabinet: {"kind":"Int32"},
    cFolders: {"kind":"UInt16"},
    cFiles: {"kind":"UInt16"},
    setID: {"kind":"UInt16"},
    iCabinet: {"kind":"UInt16"},
    fReserve: Windows.Win32.SystemServices.BOOL,
    hasprev: Windows.Win32.SystemServices.BOOL,
    hasnext: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: FDIDECRYPTTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FDIDECRYPTTYPE = *opaque{
};
// --------------------------------------------------------
// Type: FDIDECRYPT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FDIDECRYPT = extern struct {
    fdidt: Windows.Win32.WindowsProgramming.FDIDECRYPTTYPE,
    pvUser: {"kind""Ptr","child":{"kind":"Void"}},
    Anonymous: Windows.Win32.WindowsProgramming.FDIDECRYPT+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _decrypt_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _decrypt_e__Struct = extern struct {
            pDataReserve: {"kind""Ptr","child":{"kind":"Void"}},
            cbDataReserve: {"kind":"UInt16"},
            pbData: {"kind""Ptr","child":{"kind":"Void"}},
            cbData: {"kind":"UInt16"},
            fSplit: Windows.Win32.SystemServices.BOOL,
            cbPartial: {"kind":"UInt16"},
        };
        // --------------------------------------------------------
        // Type: _cabinet_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _cabinet_e__Struct = extern struct {
            pHeaderReserve: {"kind""Ptr","child":{"kind":"Void"}},
            cbHeaderReserve: {"kind":"UInt16"},
            setID: {"kind":"UInt16"},
            iCabinet: {"kind":"Int32"},
        };
        // --------------------------------------------------------
        // Type: _folder_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _folder_e__Struct = extern struct {
            pFolderReserve: {"kind""Ptr","child":{"kind":"Void"}},
            cbFolderReserve: {"kind":"UInt16"},
            iFolder: {"kind":"UInt16"},
        };
    };
};
// --------------------------------------------------------
// Type: PFNALLOC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNALLOC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNFREE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNFREE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNOPEN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNOPEN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNREAD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNREAD = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNWRITE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNWRITE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNCLOSE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNCLOSE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNSEEK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNSEEK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNFDIDECRYPT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNFDIDECRYPT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FDINOTIFICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FDINOTIFICATION = extern struct {
    cb: {"kind":"Int32"},
    psz1: {"kind""Ptr","child":{"kind":"SByte"}},
    psz2: {"kind""Ptr","child":{"kind":"SByte"}},
    psz3: {"kind""Ptr","child":{"kind":"SByte"}},
    pv: {"kind""Ptr","child":{"kind":"Void"}},
    hf: {"kind":"IntPtr"},
    date: {"kind":"UInt16"},
    time: {"kind":"UInt16"},
    attribs: {"kind":"UInt16"},
    setID: {"kind":"UInt16"},
    iCabinet: {"kind":"UInt16"},
    iFolder: {"kind":"UInt16"},
    fdie: Windows.Win32.WindowsProgramming.FDIERROR,
};
// --------------------------------------------------------
// Type: FDINOTIFICATIONTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FDINOTIFICATIONTYPE = *opaque{
};
// --------------------------------------------------------
// Type: PFNFDINOTIFY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNFDINOTIFY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FDISPILLFILE
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const FDISPILLFILE = *opaque{
};
// --------------------------------------------------------
// Type: VDMCONTEXT_WITHOUT_XSAVE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDMCONTEXT_WITHOUT_XSAVE = extern struct {
    ContextFlags: {"kind":"UInt32"},
    Dr0: {"kind":"UInt32"},
    Dr1: {"kind":"UInt32"},
    Dr2: {"kind":"UInt32"},
    Dr3: {"kind":"UInt32"},
    Dr6: {"kind":"UInt32"},
    Dr7: {"kind":"UInt32"},
    FloatSave: Windows.Win32.SystemServices.FLOATING_SAVE_AREA,
    SegGs: {"kind":"UInt32"},
    SegFs: {"kind":"UInt32"},
    SegEs: {"kind":"UInt32"},
    SegDs: {"kind":"UInt32"},
    Edi: {"kind":"UInt32"},
    Esi: {"kind":"UInt32"},
    Ebx: {"kind":"UInt32"},
    Edx: {"kind":"UInt32"},
    Ecx: {"kind":"UInt32"},
    Eax: {"kind":"UInt32"},
    Ebp: {"kind":"UInt32"},
    Eip: {"kind":"UInt32"},
    SegCs: {"kind":"UInt32"},
    EFlags: {"kind":"UInt32"},
    Esp: {"kind":"UInt32"},
    SegSs: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SEGMENT_NOTE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEGMENT_NOTE = extern struct {
    Selector1: {"kind":"UInt16"},
    Selector2: {"kind":"UInt16"},
    Segment: {"kind":"UInt16"},
    Module: {"kind":"Array","child": {"kind":"SByte"}},
    FileName: {"kind":"Array","child": {"kind":"SByte"}},
    Type: {"kind":"UInt16"},
    Length: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IMAGE_NOTE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_NOTE = extern struct {
    Module: {"kind":"Array","child": {"kind":"SByte"}},
    FileName: {"kind":"Array","child": {"kind":"SByte"}},
    hModule: {"kind":"UInt16"},
    hTask: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: MODULEENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MODULEENTRY = extern struct {
    dwSize: {"kind":"UInt32"},
    szModule: {"kind":"Array","child": {"kind":"SByte"}},
    hModule: Windows.Win32.SystemServices.HANDLE,
    wcUsage: {"kind":"UInt16"},
    szExePath: {"kind":"Array","child": {"kind":"SByte"}},
    wNext: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: TEMP_BP_NOTE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TEMP_BP_NOTE = extern struct {
    Seg: {"kind":"UInt16"},
    Offset: {"kind":"UInt32"},
    bPM: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: VDM_SEGINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDM_SEGINFO = extern struct {
    Selector: {"kind":"UInt16"},
    SegNumber: {"kind":"UInt16"},
    Length: {"kind":"UInt32"},
    Type: {"kind":"UInt16"},
    ModuleName: {"kind":"Array","child": {"kind":"SByte"}},
    FileName: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: GLOBALENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GLOBALENTRY = extern struct {
    dwSize: {"kind":"UInt32"},
    dwAddress: {"kind":"UInt32"},
    dwBlockSize: {"kind":"UInt32"},
    hBlock: Windows.Win32.SystemServices.HANDLE,
    wcLock: {"kind":"UInt16"},
    wcPageLock: {"kind":"UInt16"},
    wFlags: {"kind":"UInt16"},
    wHeapPresent: Windows.Win32.SystemServices.BOOL,
    hOwner: Windows.Win32.SystemServices.HANDLE,
    wType: {"kind":"UInt16"},
    wData: {"kind":"UInt16"},
    dwNext: {"kind":"UInt32"},
    dwNextAlt: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DEBUGEVENTPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DEBUGEVENTPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PROCESSENUMPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROCESSENUMPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: TASKENUMPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TASKENUMPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: TASKENUMPROCEX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TASKENUMPROCEX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMPROCESSEXCEPTIONPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMPROCESSEXCEPTIONPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMGETTHREADSELECTORENTRYPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMGETTHREADSELECTORENTRYPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMGETPOINTERPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMGETPOINTERPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMGETCONTEXTPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMGETCONTEXTPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMSETCONTEXTPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMSETCONTEXTPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMKILLWOWPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMKILLWOWPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMDETECTWOWPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMDETECTWOWPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMBREAKTHREADPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMBREAKTHREADPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMGETSELECTORMODULEPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMGETSELECTORMODULEPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMGETMODULESELECTORPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMGETMODULESELECTORPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMMODULEFIRSTPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMMODULEFIRSTPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMMODULENEXTPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMMODULENEXTPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMGLOBALFIRSTPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMGLOBALFIRSTPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMGLOBALNEXTPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMGLOBALNEXTPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMENUMPROCESSWOWPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMENUMPROCESSWOWPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMENUMTASKWOWPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMENUMTASKWOWPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMENUMTASKWOWEXPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMENUMTASKWOWEXPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMTERMINATETASKINWOWPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMTERMINATETASKINWOWPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMSTARTTASKINWOWPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMSTARTTASKINWOWPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMGETDBGFLAGSPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMGETDBGFLAGSPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMSETDBGFLAGSPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMSETDBGFLAGSPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMISMODULELOADEDPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMISMODULELOADEDPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMGETSEGMENTINFOPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMGETSEGMENTINFOPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMGETSYMBOLPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMGETSYMBOLPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMGETADDREXPRESSIONPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMGETADDREXPRESSIONPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: EditionUpgradeHelper
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const EditionUpgradeHelper = opaque {
};
// --------------------------------------------------------
// Type: EditionUpgradeBroker
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const EditionUpgradeBroker = opaque {
};
// --------------------------------------------------------
// Type: IEditionUpgradeHelper
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEditionUpgradeHelper = *opaque{
    // TODO: Method 'CanUpgrade'
    // TODO: Method 'UpdateOperatingSystem'
    // TODO: Method 'ShowProductKeyUI'
    // TODO: Method 'GetOsProductContentId'
    // TODO: Method 'GetGenuineLocalStatus'
};
// --------------------------------------------------------
// Type: IWindowsLockModeHelper
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWindowsLockModeHelper = *opaque{
    // TODO: Method 'GetSMode'
};
// --------------------------------------------------------
// Type: IEditionUpgradeBroker
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEditionUpgradeBroker = *opaque{
    // TODO: Method 'InitializeParentWindow'
    // TODO: Method 'UpdateOperatingSystem'
    // TODO: Method 'ShowProductKeyUI'
    // TODO: Method 'CanUpgrade'
};
// --------------------------------------------------------
// Type: IContainerActivationHelper
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IContainerActivationHelper = *opaque{
    // TODO: Method 'CanActivateClientVM'
};
// --------------------------------------------------------
// Type: IClipServiceNotificationHelper
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IClipServiceNotificationHelper = *opaque{
    // TODO: Method 'ShowToast'
};
// --------------------------------------------------------
// Type: FEATURE_CHANGE_TIME
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FEATURE_CHANGE_TIME = *opaque{
};
// --------------------------------------------------------
// Type: FEATURE_ENABLED_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FEATURE_ENABLED_STATE = *opaque{
};
// --------------------------------------------------------
// Type: FEATURE_ERROR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FEATURE_ERROR = extern struct {
    hr: Windows.Win32.Com.HRESULT,
    lineNumber: {"kind":"UInt16"},
    file: {"kind""Ptr","child":{"kind":"SByte"}},
    process: {"kind""Ptr","child":{"kind":"SByte"}},
    module: {"kind""Ptr","child":{"kind":"SByte"}},
    callerReturnAddressOffset: {"kind":"UInt32"},
    callerModule: {"kind""Ptr","child":{"kind":"SByte"}},
    message: {"kind""Ptr","child":{"kind":"SByte"}},
    originLineNumber: {"kind":"UInt16"},
    originFile: {"kind""Ptr","child":{"kind":"SByte"}},
    originModule: {"kind""Ptr","child":{"kind":"SByte"}},
    originCallerReturnAddressOffset: {"kind":"UInt32"},
    originCallerModule: {"kind""Ptr","child":{"kind":"SByte"}},
    originName: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: FEATURE_STATE_CHANGE_SUBSCRIPTION__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FEATURE_STATE_CHANGE_SUBSCRIPTION__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: FEATURE_STATE_CHANGE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FEATURE_STATE_CHANGE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFEATURE_STATE_CHANGE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFEATURE_STATE_CHANGE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FhConfigMgr
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const FhConfigMgr = opaque {
};
// --------------------------------------------------------
// Type: FhReassociation
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const FhReassociation = opaque {
};
// --------------------------------------------------------
// Type: FH_TARGET_PROPERTY_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FH_TARGET_PROPERTY_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: FH_TARGET_DRIVE_TYPES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FH_TARGET_DRIVE_TYPES = *opaque{
};
// --------------------------------------------------------
// Type: IFhTarget
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFhTarget = *opaque{
    // TODO: Method 'GetStringProperty'
    // TODO: Method 'GetNumericalProperty'
};
// --------------------------------------------------------
// Type: IFhScopeIterator
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFhScopeIterator = *opaque{
    // TODO: Method 'MoveToNextItem'
    // TODO: Method 'GetItem'
};
// --------------------------------------------------------
// Type: FH_PROTECTED_ITEM_CATEGORY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FH_PROTECTED_ITEM_CATEGORY = *opaque{
};
// --------------------------------------------------------
// Type: FH_LOCAL_POLICY_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FH_LOCAL_POLICY_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: FH_RETENTION_TYPES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FH_RETENTION_TYPES = *opaque{
};
// --------------------------------------------------------
// Type: FH_BACKUP_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FH_BACKUP_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: FH_DEVICE_VALIDATION_RESULT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FH_DEVICE_VALIDATION_RESULT = *opaque{
};
// --------------------------------------------------------
// Type: IFhConfigMgr
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFhConfigMgr = *opaque{
    // TODO: Method 'LoadConfiguration'
    // TODO: Method 'CreateDefaultConfiguration'
    // TODO: Method 'SaveConfiguration'
    // TODO: Method 'AddRemoveExcludeRule'
    // TODO: Method 'GetIncludeExcludeRules'
    // TODO: Method 'GetLocalPolicy'
    // TODO: Method 'SetLocalPolicy'
    // TODO: Method 'GetBackupStatus'
    // TODO: Method 'SetBackupStatus'
    // TODO: Method 'GetDefaultTarget'
    // TODO: Method 'ValidateTarget'
    // TODO: Method 'ProvisionAndSetNewTarget'
    // TODO: Method 'ChangeDefaultTargetRecommendation'
    // TODO: Method 'QueryProtectionStatus'
};
// --------------------------------------------------------
// Type: IFhReassociation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFhReassociation = *opaque{
    // TODO: Method 'ValidateTarget'
    // TODO: Method 'ScanTargetForConfigurations'
    // TODO: Method 'GetConfigurationDetails'
    // TODO: Method 'SelectConfiguration'
    // TODO: Method 'PerformReassociation'
};
// --------------------------------------------------------
// Type: FhBackupStopReason
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FhBackupStopReason = *opaque{
};
// --------------------------------------------------------
// Type: FH_SERVICE_PIPE_HANDLE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FH_SERVICE_PIPE_HANDLE__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: DCICMD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DCICMD = extern struct {
    dwCommand: {"kind":"UInt32"},
    dwParam1: {"kind":"UInt32"},
    dwParam2: {"kind":"UInt32"},
    dwVersion: {"kind":"UInt32"},
    dwReserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DCICREATEINPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DCICREATEINPUT = extern struct {
    cmd: Windows.Win32.WindowsProgramming.DCICMD,
    dwCompression: {"kind":"UInt32"},
    dwMask: {"kind":"Array","child": {"kind":"UInt32"}},
    dwWidth: {"kind":"UInt32"},
    dwHeight: {"kind":"UInt32"},
    dwDCICaps: {"kind":"UInt32"},
    dwBitCount: {"kind":"UInt32"},
    lpSurface: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: DCISURFACEINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DCISURFACEINFO = extern struct {
    dwSize: {"kind":"UInt32"},
    dwDCICaps: {"kind":"UInt32"},
    dwCompression: {"kind":"UInt32"},
    dwMask: {"kind":"Array","child": {"kind":"UInt32"}},
    dwWidth: {"kind":"UInt32"},
    dwHeight: {"kind":"UInt32"},
    lStride: {"kind":"Int32"},
    dwBitCount: {"kind":"UInt32"},
    dwOffSurface: {"kind":"UIntPtr"},
    wSelSurface: {"kind":"UInt16"},
    wReserved: {"kind":"UInt16"},
    dwReserved1: {"kind":"UInt32"},
    dwReserved2: {"kind":"UInt32"},
    dwReserved3: {"kind":"UInt32"},
    BeginAccess: {"kind":"IntPtr"},
    EndAccess: {"kind":"IntPtr"},
    DestroySurface: {"kind":"IntPtr"},
};
// --------------------------------------------------------
// Type: ENUM_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ENUM_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DCIENUMINPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DCIENUMINPUT = extern struct {
    cmd: Windows.Win32.WindowsProgramming.DCICMD,
    rSrc: Windows.Win32.DisplayDevices.RECT,
    rDst: Windows.Win32.DisplayDevices.RECT,
    EnumCallback: {"kind":"IntPtr"},
    lpContext: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: DCIOFFSCREEN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DCIOFFSCREEN = extern struct {
    dciInfo: Windows.Win32.WindowsProgramming.DCISURFACEINFO,
    Draw: {"kind":"IntPtr"},
    SetClipList: {"kind":"IntPtr"},
    SetDestination: {"kind":"IntPtr"},
};
// --------------------------------------------------------
// Type: DCIOVERLAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DCIOVERLAY = extern struct {
    dciInfo: Windows.Win32.WindowsProgramming.DCISURFACEINFO,
    dwChromakeyValue: {"kind":"UInt32"},
    dwChromakeyMask: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: HWINWATCH__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HWINWATCH__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: WINWATCHNOTIFYPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WINWATCHNOTIFYPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WaaSAssessor
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WaaSAssessor = opaque {
};
// --------------------------------------------------------
// Type: IWaaSAssessor
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWaaSAssessor = *opaque{
    // TODO: Method 'GetOSUpdateAssessment'
};
// --------------------------------------------------------
// Type: VMEML
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VMEML = extern struct {
    next: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.VMEML},
    ptr: {"kind":"UIntPtr"},
    size: {"kind":"UInt32"},
    bDiscardable: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: VMEMR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VMEMR = extern struct {
    next: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.VMEMR},
    prev: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.VMEMR},
    pUp: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.VMEMR},
    pDown: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.VMEMR},
    pLeft: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.VMEMR},
    pRight: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.VMEMR},
    ptr: {"kind":"UIntPtr"},
    size: {"kind":"UInt32"},
    x: {"kind":"UInt32"},
    y: {"kind":"UInt32"},
    cx: {"kind":"UInt32"},
    cy: {"kind":"UInt32"},
    flags: {"kind":"UInt32"},
    pBits: {"kind":"UIntPtr"},
    bDiscardable: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: PROCESS_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESS_LIST = extern struct {
    lpLink: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.PROCESS_LIST},
    dwProcessId: {"kind":"UInt32"},
    dwRefCnt: {"kind":"UInt32"},
    dwAlphaDepth: {"kind":"UInt32"},
    dwZDepth: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DDMONITORINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDMONITORINFO = extern struct {
    Manufacturer: {"kind":"UInt16"},
    Product: {"kind":"UInt16"},
    SerialNumber: {"kind":"UInt32"},
    DeviceIdentifier: Guid,
    Mode640x480: {"kind":"Int32"},
    Mode800x600: {"kind":"Int32"},
    Mode1024x768: {"kind":"Int32"},
    Mode1280x1024: {"kind":"Int32"},
    Mode1600x1200: {"kind":"Int32"},
    ModeReserved1: {"kind":"Int32"},
    ModeReserved2: {"kind":"Int32"},
    ModeReserved3: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: IDirectDrawClipperVtbl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDirectDrawClipperVtbl = opaque {
};
// --------------------------------------------------------
// Type: IDirectDrawPaletteVtbl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDirectDrawPaletteVtbl = opaque {
};
// --------------------------------------------------------
// Type: IDirectDrawSurfaceVtbl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDirectDrawSurfaceVtbl = opaque {
};
// --------------------------------------------------------
// Type: IDirectDrawSurface2Vtbl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDirectDrawSurface2Vtbl = opaque {
};
// --------------------------------------------------------
// Type: IDirectDrawSurface3Vtbl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDirectDrawSurface3Vtbl = opaque {
};
// --------------------------------------------------------
// Type: IDirectDrawSurface4Vtbl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDirectDrawSurface4Vtbl = opaque {
};
// --------------------------------------------------------
// Type: IDirectDrawSurface7Vtbl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDirectDrawSurface7Vtbl = opaque {
};
// --------------------------------------------------------
// Type: IDirectDrawColorControlVtbl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDirectDrawColorControlVtbl = opaque {
};
// --------------------------------------------------------
// Type: IDirectDrawVtbl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDirectDrawVtbl = opaque {
};
// --------------------------------------------------------
// Type: IDirectDraw2Vtbl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDirectDraw2Vtbl = opaque {
};
// --------------------------------------------------------
// Type: IDirectDraw4Vtbl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDirectDraw4Vtbl = opaque {
};
// --------------------------------------------------------
// Type: IDirectDraw7Vtbl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDirectDraw7Vtbl = opaque {
};
// --------------------------------------------------------
// Type: IDirectDrawKernelVtbl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDirectDrawKernelVtbl = opaque {
};
// --------------------------------------------------------
// Type: IDirectDrawSurfaceKernelVtbl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDirectDrawSurfaceKernelVtbl = opaque {
};
// --------------------------------------------------------
// Type: IDirectDrawGammaControlVtbl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDirectDrawGammaControlVtbl = opaque {
};
// --------------------------------------------------------
// Type: DD32BITDRIVERDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD32BITDRIVERDATA = extern struct {
    szName: {"kind":"Array","child": {"kind":"SByte"}},
    szEntryPoint: {"kind":"Array","child": {"kind":"SByte"}},
    dwContext: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DDVERSIONDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDVERSIONDATA = extern struct {
    dwHALVersion: {"kind":"UInt32"},
    dwReserved1: {"kind":"UIntPtr"},
    dwReserved2: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: LPDD32BITDRIVERINIT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDD32BITDRIVERINIT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VIDMEM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDMEM = extern struct {
    dwFlags: {"kind":"UInt32"},
    fpStart: {"kind":"UIntPtr"},
    Anonymous1: Windows.Win32.WindowsProgramming.VIDMEM+_Anonymous1_e__Union,
    ddsCaps: Windows.Win32.DirectDraw.DDSCAPS,
    ddsCapsAlt: Windows.Win32.DirectDraw.DDSCAPS,
    Anonymous2: Windows.Win32.WindowsProgramming.VIDMEM+_Anonymous2_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: VIDMEMINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDMEMINFO = extern struct {
    fpPrimary: {"kind":"UIntPtr"},
    dwFlags: {"kind":"UInt32"},
    dwDisplayWidth: {"kind":"UInt32"},
    dwDisplayHeight: {"kind":"UInt32"},
    lDisplayPitch: {"kind":"Int32"},
    ddpfDisplay: Windows.Win32.DirectDraw.DDPIXELFORMAT,
    dwOffscreenAlign: {"kind":"UInt32"},
    dwOverlayAlign: {"kind":"UInt32"},
    dwTextureAlign: {"kind":"UInt32"},
    dwZBufferAlign: {"kind":"UInt32"},
    dwAlphaAlign: {"kind":"UInt32"},
    dwNumHeaps: {"kind":"UInt32"},
    pvmList: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.VIDMEM},
};
// --------------------------------------------------------
// Type: HEAPALIAS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HEAPALIAS = extern struct {
    fpVidMem: {"kind":"UIntPtr"},
    lpAlias: {"kind""Ptr","child":{"kind":"Void"}},
    dwAliasSize: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: HEAPALIASINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HEAPALIASINFO = extern struct {
    dwRefCnt: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    dwNumHeaps: {"kind":"UInt32"},
    lpAliases: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HEAPALIAS},
};
// --------------------------------------------------------
// Type: IUNKNOWN_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IUNKNOWN_LIST = extern struct {
    lpLink: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.IUNKNOWN_LIST},
    lpGuid: {"kind""Ptr","child":Guid},
    lpIUnknown: Windows.Win32.Com.IUnknown,
};
// --------------------------------------------------------
// Type: LPDDHEL_INIT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHEL_INIT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHAL_SETCOLORKEY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_SETCOLORKEY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHAL_CANCREATESURFACE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_CANCREATESURFACE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHAL_WAITFORVERTICALBLANK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_WAITFORVERTICALBLANK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHAL_CREATESURFACE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_CREATESURFACE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHAL_DESTROYDRIVER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_DESTROYDRIVER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHAL_SETMODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_SETMODE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHAL_CREATEPALETTE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_CREATEPALETTE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHAL_GETSCANLINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_GETSCANLINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHAL_SETEXCLUSIVEMODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_SETEXCLUSIVEMODE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHAL_FLIPTOGDISURFACE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_FLIPTOGDISURFACE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHAL_GETDRIVERINFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_GETDRIVERINFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DDHAL_DDCALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_DDCALLBACKS = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    DestroyDriver: Windows.Win32.WindowsProgramming.LPDDHAL_DESTROYDRIVER,
    CreateSurface: Windows.Win32.WindowsProgramming.LPDDHAL_CREATESURFACE,
    SetColorKey: Windows.Win32.WindowsProgramming.LPDDHAL_SETCOLORKEY,
    SetMode: Windows.Win32.WindowsProgramming.LPDDHAL_SETMODE,
    WaitForVerticalBlank: Windows.Win32.WindowsProgramming.LPDDHAL_WAITFORVERTICALBLANK,
    CanCreateSurface: Windows.Win32.WindowsProgramming.LPDDHAL_CANCREATESURFACE,
    CreatePalette: Windows.Win32.WindowsProgramming.LPDDHAL_CREATEPALETTE,
    GetScanLine: Windows.Win32.WindowsProgramming.LPDDHAL_GETSCANLINE,
    SetExclusiveMode: Windows.Win32.WindowsProgramming.LPDDHAL_SETEXCLUSIVEMODE,
    FlipToGDISurface: Windows.Win32.WindowsProgramming.LPDDHAL_FLIPTOGDISURFACE,
};
// --------------------------------------------------------
// Type: LPDDHALPALCB_DESTROYPALETTE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALPALCB_DESTROYPALETTE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALPALCB_SETENTRIES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALPALCB_SETENTRIES = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DDHAL_DDPALETTECALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_DDPALETTECALLBACKS = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    DestroyPalette: Windows.Win32.WindowsProgramming.LPDDHALPALCB_DESTROYPALETTE,
    SetEntries: Windows.Win32.WindowsProgramming.LPDDHALPALCB_SETENTRIES,
};
// --------------------------------------------------------
// Type: LPDDHALSURFCB_LOCK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALSURFCB_LOCK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALSURFCB_UNLOCK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALSURFCB_UNLOCK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALSURFCB_BLT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALSURFCB_BLT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALSURFCB_UPDATEOVERLAY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALSURFCB_UPDATEOVERLAY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALSURFCB_SETOVERLAYPOSITION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALSURFCB_SETOVERLAYPOSITION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALSURFCB_SETPALETTE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALSURFCB_SETPALETTE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALSURFCB_FLIP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALSURFCB_FLIP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALSURFCB_DESTROYSURFACE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALSURFCB_DESTROYSURFACE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALSURFCB_SETCLIPLIST
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALSURFCB_SETCLIPLIST = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALSURFCB_ADDATTACHEDSURFACE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALSURFCB_ADDATTACHEDSURFACE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALSURFCB_SETCOLORKEY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALSURFCB_SETCOLORKEY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALSURFCB_GETBLTSTATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALSURFCB_GETBLTSTATUS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALSURFCB_GETFLIPSTATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALSURFCB_GETFLIPSTATUS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DDHAL_DDSURFACECALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_DDSURFACECALLBACKS = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    DestroySurface: Windows.Win32.WindowsProgramming.LPDDHALSURFCB_DESTROYSURFACE,
    Flip: Windows.Win32.WindowsProgramming.LPDDHALSURFCB_FLIP,
    SetClipList: Windows.Win32.WindowsProgramming.LPDDHALSURFCB_SETCLIPLIST,
    Lock: Windows.Win32.WindowsProgramming.LPDDHALSURFCB_LOCK,
    Unlock: Windows.Win32.WindowsProgramming.LPDDHALSURFCB_UNLOCK,
    Blt: Windows.Win32.WindowsProgramming.LPDDHALSURFCB_BLT,
    SetColorKey: Windows.Win32.WindowsProgramming.LPDDHALSURFCB_SETCOLORKEY,
    AddAttachedSurface: Windows.Win32.WindowsProgramming.LPDDHALSURFCB_ADDATTACHEDSURFACE,
    GetBltStatus: Windows.Win32.WindowsProgramming.LPDDHALSURFCB_GETBLTSTATUS,
    GetFlipStatus: Windows.Win32.WindowsProgramming.LPDDHALSURFCB_GETFLIPSTATUS,
    UpdateOverlay: Windows.Win32.WindowsProgramming.LPDDHALSURFCB_UPDATEOVERLAY,
    SetOverlayPosition: Windows.Win32.WindowsProgramming.LPDDHALSURFCB_SETOVERLAYPOSITION,
    reserved4: {"kind""Ptr","child":{"kind":"Void"}},
    SetPalette: Windows.Win32.WindowsProgramming.LPDDHALSURFCB_SETPALETTE,
};
// --------------------------------------------------------
// Type: LPDDHAL_GETAVAILDRIVERMEMORY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_GETAVAILDRIVERMEMORY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHAL_UPDATENONLOCALHEAP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_UPDATENONLOCALHEAP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHAL_GETHEAPALIGNMENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_GETHEAPALIGNMENT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DDHAL_DDMISCELLANEOUSCALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_DDMISCELLANEOUSCALLBACKS = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    GetAvailDriverMemory: Windows.Win32.WindowsProgramming.LPDDHAL_GETAVAILDRIVERMEMORY,
    UpdateNonLocalHeap: Windows.Win32.WindowsProgramming.LPDDHAL_UPDATENONLOCALHEAP,
    GetHeapAlignment: Windows.Win32.WindowsProgramming.LPDDHAL_GETHEAPALIGNMENT,
    GetSysmemBltStatus: Windows.Win32.WindowsProgramming.LPDDHALSURFCB_GETBLTSTATUS,
};
// --------------------------------------------------------
// Type: LPDDHAL_CREATESURFACEEX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_CREATESURFACEEX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHAL_GETDRIVERSTATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_GETDRIVERSTATE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHAL_DESTROYDDLOCAL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_DESTROYDDLOCAL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DDHAL_DDMISCELLANEOUS2CALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_DDMISCELLANEOUS2CALLBACKS = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    Reserved: {"kind""Ptr","child":{"kind":"Void"}},
    CreateSurfaceEx: Windows.Win32.WindowsProgramming.LPDDHAL_CREATESURFACEEX,
    GetDriverState: Windows.Win32.WindowsProgramming.LPDDHAL_GETDRIVERSTATE,
    DestroyDDLocal: Windows.Win32.WindowsProgramming.LPDDHAL_DESTROYDDLOCAL,
};
// --------------------------------------------------------
// Type: LPDDHALEXEBUFCB_CANCREATEEXEBUF
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALEXEBUFCB_CANCREATEEXEBUF = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALEXEBUFCB_CREATEEXEBUF
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALEXEBUFCB_CREATEEXEBUF = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALEXEBUFCB_DESTROYEXEBUF
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALEXEBUFCB_DESTROYEXEBUF = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALEXEBUFCB_LOCKEXEBUF
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALEXEBUFCB_LOCKEXEBUF = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALEXEBUFCB_UNLOCKEXEBUF
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALEXEBUFCB_UNLOCKEXEBUF = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DDHAL_DDEXEBUFCALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_DDEXEBUFCALLBACKS = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    CanCreateExecuteBuffer: Windows.Win32.WindowsProgramming.LPDDHALEXEBUFCB_CANCREATEEXEBUF,
    CreateExecuteBuffer: Windows.Win32.WindowsProgramming.LPDDHALEXEBUFCB_CREATEEXEBUF,
    DestroyExecuteBuffer: Windows.Win32.WindowsProgramming.LPDDHALEXEBUFCB_DESTROYEXEBUF,
    LockExecuteBuffer: Windows.Win32.WindowsProgramming.LPDDHALEXEBUFCB_LOCKEXEBUF,
    UnlockExecuteBuffer: Windows.Win32.WindowsProgramming.LPDDHALEXEBUFCB_UNLOCKEXEBUF,
};
// --------------------------------------------------------
// Type: LPDDHALVPORTCB_CANCREATEVIDEOPORT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALVPORTCB_CANCREATEVIDEOPORT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALVPORTCB_CREATEVIDEOPORT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALVPORTCB_CREATEVIDEOPORT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALVPORTCB_FLIP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALVPORTCB_FLIP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALVPORTCB_GETBANDWIDTH
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALVPORTCB_GETBANDWIDTH = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALVPORTCB_GETINPUTFORMATS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALVPORTCB_GETINPUTFORMATS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALVPORTCB_GETOUTPUTFORMATS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALVPORTCB_GETOUTPUTFORMATS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALVPORTCB_GETFIELD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALVPORTCB_GETFIELD = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALVPORTCB_GETLINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALVPORTCB_GETLINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALVPORTCB_GETVPORTCONNECT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALVPORTCB_GETVPORTCONNECT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALVPORTCB_DESTROYVPORT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALVPORTCB_DESTROYVPORT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALVPORTCB_GETFLIPSTATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALVPORTCB_GETFLIPSTATUS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALVPORTCB_UPDATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALVPORTCB_UPDATE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALVPORTCB_WAITFORSYNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALVPORTCB_WAITFORSYNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALVPORTCB_GETSIGNALSTATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALVPORTCB_GETSIGNALSTATUS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALVPORTCB_COLORCONTROL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALVPORTCB_COLORCONTROL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DDHAL_DDVIDEOPORTCALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_DDVIDEOPORTCALLBACKS = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    CanCreateVideoPort: Windows.Win32.WindowsProgramming.LPDDHALVPORTCB_CANCREATEVIDEOPORT,
    CreateVideoPort: Windows.Win32.WindowsProgramming.LPDDHALVPORTCB_CREATEVIDEOPORT,
    FlipVideoPort: Windows.Win32.WindowsProgramming.LPDDHALVPORTCB_FLIP,
    GetVideoPortBandwidth: Windows.Win32.WindowsProgramming.LPDDHALVPORTCB_GETBANDWIDTH,
    GetVideoPortInputFormats: Windows.Win32.WindowsProgramming.LPDDHALVPORTCB_GETINPUTFORMATS,
    GetVideoPortOutputFormats: Windows.Win32.WindowsProgramming.LPDDHALVPORTCB_GETOUTPUTFORMATS,
    lpReserved1: {"kind""Ptr","child":{"kind":"Void"}},
    GetVideoPortField: Windows.Win32.WindowsProgramming.LPDDHALVPORTCB_GETFIELD,
    GetVideoPortLine: Windows.Win32.WindowsProgramming.LPDDHALVPORTCB_GETLINE,
    GetVideoPortConnectInfo: Windows.Win32.WindowsProgramming.LPDDHALVPORTCB_GETVPORTCONNECT,
    DestroyVideoPort: Windows.Win32.WindowsProgramming.LPDDHALVPORTCB_DESTROYVPORT,
    GetVideoPortFlipStatus: Windows.Win32.WindowsProgramming.LPDDHALVPORTCB_GETFLIPSTATUS,
    UpdateVideoPort: Windows.Win32.WindowsProgramming.LPDDHALVPORTCB_UPDATE,
    WaitForVideoPortSync: Windows.Win32.WindowsProgramming.LPDDHALVPORTCB_WAITFORSYNC,
    GetVideoSignalStatus: Windows.Win32.WindowsProgramming.LPDDHALVPORTCB_GETSIGNALSTATUS,
    ColorControl: Windows.Win32.WindowsProgramming.LPDDHALVPORTCB_COLORCONTROL,
};
// --------------------------------------------------------
// Type: LPDDHALCOLORCB_COLORCONTROL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALCOLORCB_COLORCONTROL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DDHAL_DDCOLORCONTROLCALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_DDCOLORCONTROLCALLBACKS = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    ColorControl: Windows.Win32.WindowsProgramming.LPDDHALCOLORCB_COLORCONTROL,
};
// --------------------------------------------------------
// Type: LPDDHALKERNELCB_SYNCSURFACE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALKERNELCB_SYNCSURFACE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALKERNELCB_SYNCVIDEOPORT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALKERNELCB_SYNCVIDEOPORT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DDHAL_DDKERNELCALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_DDKERNELCALLBACKS = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    SyncSurfaceData: Windows.Win32.WindowsProgramming.LPDDHALKERNELCB_SYNCSURFACE,
    SyncVideoPortData: Windows.Win32.WindowsProgramming.LPDDHALKERNELCB_SYNCVIDEOPORT,
};
// --------------------------------------------------------
// Type: LPDDGAMMACALIBRATORPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDGAMMACALIBRATORPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALMOCOMPCB_GETGUIDS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALMOCOMPCB_GETGUIDS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALMOCOMPCB_GETFORMATS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALMOCOMPCB_GETFORMATS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALMOCOMPCB_CREATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALMOCOMPCB_CREATE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALMOCOMPCB_GETCOMPBUFFINFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALMOCOMPCB_GETCOMPBUFFINFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALMOCOMPCB_GETINTERNALINFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALMOCOMPCB_GETINTERNALINFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALMOCOMPCB_BEGINFRAME
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALMOCOMPCB_BEGINFRAME = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALMOCOMPCB_ENDFRAME
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALMOCOMPCB_ENDFRAME = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALMOCOMPCB_RENDER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALMOCOMPCB_RENDER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALMOCOMPCB_QUERYSTATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALMOCOMPCB_QUERYSTATUS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALMOCOMPCB_DESTROY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALMOCOMPCB_DESTROY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DDHAL_DDMOTIONCOMPCALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_DDMOTIONCOMPCALLBACKS = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    GetMoCompGuids: Windows.Win32.WindowsProgramming.LPDDHALMOCOMPCB_GETGUIDS,
    GetMoCompFormats: Windows.Win32.WindowsProgramming.LPDDHALMOCOMPCB_GETFORMATS,
    CreateMoComp: Windows.Win32.WindowsProgramming.LPDDHALMOCOMPCB_CREATE,
    GetMoCompBuffInfo: Windows.Win32.WindowsProgramming.LPDDHALMOCOMPCB_GETCOMPBUFFINFO,
    GetInternalMoCompInfo: Windows.Win32.WindowsProgramming.LPDDHALMOCOMPCB_GETINTERNALINFO,
    BeginMoCompFrame: Windows.Win32.WindowsProgramming.LPDDHALMOCOMPCB_BEGINFRAME,
    EndMoCompFrame: Windows.Win32.WindowsProgramming.LPDDHALMOCOMPCB_ENDFRAME,
    RenderMoComp: Windows.Win32.WindowsProgramming.LPDDHALMOCOMPCB_RENDER,
    QueryMoCompStatus: Windows.Win32.WindowsProgramming.LPDDHALMOCOMPCB_QUERYSTATUS,
    DestroyMoComp: Windows.Win32.WindowsProgramming.LPDDHALMOCOMPCB_DESTROY,
};
// --------------------------------------------------------
// Type: DDNONLOCALVIDMEMCAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDNONLOCALVIDMEMCAPS = extern struct {
    dwSize: {"kind":"UInt32"},
    dwNLVBCaps: {"kind":"UInt32"},
    dwNLVBCaps2: {"kind":"UInt32"},
    dwNLVBCKeyCaps: {"kind":"UInt32"},
    dwNLVBFXCaps: {"kind":"UInt32"},
    dwNLVBRops: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: DDMORESURFACECAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDMORESURFACECAPS = extern struct {
    dwSize: {"kind":"UInt32"},
    ddsCapsMore: Windows.Win32.DirectDraw.DDSCAPSEX,
    ddsExtendedHeapRestrictions: {"kind":"Array","child": Windows.Win32.WindowsProgramming.DDMORESURFACECAPS+tagExtendedHeapRestrictions},
    // --------------------------------------------------------
    // Type: tagExtendedHeapRestrictions
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const tagExtendedHeapRestrictions = extern struct {
        ddsCapsEx: Windows.Win32.DirectDraw.DDSCAPSEX,
        ddsCapsExAlt: Windows.Win32.DirectDraw.DDSCAPSEX,
    };
};
// --------------------------------------------------------
// Type: DDSTEREOMODE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDSTEREOMODE = extern struct {
    dwSize: {"kind":"UInt32"},
    dwHeight: {"kind":"UInt32"},
    dwWidth: {"kind":"UInt32"},
    dwBpp: {"kind":"UInt32"},
    dwRefreshRate: {"kind":"UInt32"},
    bSupported: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: DDRAWI_DDRAWPALETTE_INT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DDRAWPALETTE_INT = extern struct {
    lpVtbl: {"kind""Ptr","child":{"kind":"Void"}},
    lpLcl: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWPALETTE_LCL},
    lpLink: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWPALETTE_INT},
    dwIntRefCnt: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DDRAWI_DDRAWPALETTE_GBL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DDRAWPALETTE_GBL = extern struct {
    dwRefCnt: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    lpDD_lcl: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    dwProcessId: {"kind":"UInt32"},
    lpColorTable: {"kind""Ptr","child":Windows.Win32.Direct2D.PALETTEENTRY},
    Anonymous: Windows.Win32.WindowsProgramming.DDRAWI_DDRAWPALETTE_GBL+_Anonymous_e__Union,
    dwDriverReserved: {"kind":"UInt32"},
    dwContentsStamp: {"kind":"UInt32"},
    dwSaveStamp: {"kind":"UInt32"},
    dwHandle: {"kind":"UInt32"},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: DDRAWI_DDRAWPALETTE_LCL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DDRAWPALETTE_LCL = extern struct {
    lpPalMore: {"kind":"UInt32"},
    lpGbl: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWPALETTE_GBL},
    dwUnused0: {"kind":"UIntPtr"},
    dwLocalRefCnt: {"kind":"UInt32"},
    pUnkOuter: Windows.Win32.Com.IUnknown,
    lpDD_lcl: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    dwReserved1: {"kind":"UIntPtr"},
    dwDDRAWReserved1: {"kind":"UIntPtr"},
    dwDDRAWReserved2: {"kind":"UIntPtr"},
    dwDDRAWReserved3: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: DDRAWI_DDRAWCLIPPER_INT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DDRAWCLIPPER_INT = extern struct {
    lpVtbl: {"kind""Ptr","child":{"kind":"Void"}},
    lpLcl: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWCLIPPER_LCL},
    lpLink: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWCLIPPER_INT},
    dwIntRefCnt: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DDRAWI_DDRAWCLIPPER_GBL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DDRAWCLIPPER_GBL = extern struct {
    dwRefCnt: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_GBL},
    dwProcessId: {"kind":"UInt32"},
    dwReserved1: {"kind":"UIntPtr"},
    hWnd: {"kind":"UIntPtr"},
    lpStaticClipList: {"kind""Ptr","child":Windows.Win32.Gdi.RGNDATA},
};
// --------------------------------------------------------
// Type: DDRAWI_DDRAWCLIPPER_LCL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DDRAWCLIPPER_LCL = extern struct {
    lpClipMore: {"kind":"UInt32"},
    lpGbl: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWCLIPPER_GBL},
    lpDD_lcl: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    dwLocalRefCnt: {"kind":"UInt32"},
    pUnkOuter: Windows.Win32.Com.IUnknown,
    lpDD_int: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_INT},
    dwReserved1: {"kind":"UIntPtr"},
    pAddrefedThisOwner: Windows.Win32.Com.IUnknown,
};
// --------------------------------------------------------
// Type: ATTACHLIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ATTACHLIST = extern struct {
    dwFlags: {"kind":"UInt32"},
    lpLink: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.ATTACHLIST},
    lpAttached: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL},
    lpIAttached: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_INT},
};
// --------------------------------------------------------
// Type: DBLNODE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DBLNODE = extern struct {
    next: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DBLNODE},
    prev: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DBLNODE},
    object: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL},
    object_int: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_INT},
};
// --------------------------------------------------------
// Type: ACCESSRECTLIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACCESSRECTLIST = extern struct {
    lpLink: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.ACCESSRECTLIST},
    rDest: Windows.Win32.DisplayDevices.RECT,
    lpOwner: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    lpSurfaceData: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},
    lpHeapAliasInfo: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HEAPALIASINFO},
};
// --------------------------------------------------------
// Type: DDRAWI_DDRAWSURFACE_INT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DDRAWSURFACE_INT = extern struct {
    lpVtbl: {"kind""Ptr","child":{"kind":"Void"}},
    lpLcl: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL},
    lpLink: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_INT},
    dwIntRefCnt: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DDRAWI_DDRAWSURFACE_GBL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DDRAWSURFACE_GBL = extern struct {
    dwRefCnt: {"kind":"UInt32"},
    dwGlobalFlags: {"kind":"UInt32"},
    Anonymous1: Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_GBL+_Anonymous1_e__Union,
    Anonymous2: Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_GBL+_Anonymous2_e__Union,
    Anonymous3: Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_GBL+_Anonymous3_e__Union,
    fpVidMem: {"kind":"UIntPtr"},
    Anonymous4: Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_GBL+_Anonymous4_e__Union,
    wHeight: {"kind":"UInt16"},
    wWidth: {"kind":"UInt16"},
    dwUsageCount: {"kind":"UInt32"},
    dwReserved1: {"kind":"UIntPtr"},
    ddpfSurface: Windows.Win32.DirectDraw.DDPIXELFORMAT,
    // --------------------------------------------------------
    // Type: _Anonymous3_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous3_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous4_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous4_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: DDRAWI_DDRAWSURFACE_GBL_MORE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DDRAWSURFACE_GBL_MORE = extern struct {
    dwSize: {"kind":"UInt32"},
    Anonymous: Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_GBL_MORE+_Anonymous_e__Union,
    pPageTable: {"kind""Ptr","child":{"kind":"UInt32"}},
    cPages: {"kind":"UInt32"},
    dwSavedDCContext: {"kind":"UIntPtr"},
    fpAliasedVidMem: {"kind":"UIntPtr"},
    dwDriverReserved: {"kind":"UIntPtr"},
    dwHELReserved: {"kind":"UIntPtr"},
    cPageUnlocks: {"kind":"UInt32"},
    hKernelSurface: {"kind":"UIntPtr"},
    dwKernelRefCnt: {"kind":"UInt32"},
    lpColorInfo: {"kind""Ptr","child":Windows.Win32.DirectDraw.DDCOLORCONTROL},
    fpNTAlias: {"kind":"UIntPtr"},
    dwContentsStamp: {"kind":"UInt32"},
    lpvUnswappedDriverReserved: {"kind""Ptr","child":{"kind":"Void"}},
    lpDDRAWReserved2: {"kind""Ptr","child":{"kind":"Void"}},
    dwDDRAWReserved1: {"kind":"UInt32"},
    dwDDRAWReserved2: {"kind":"UInt32"},
    fpAliasOfVidMem: {"kind":"UIntPtr"},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: DDRAWI_DDRAWSURFACE_MORE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DDRAWSURFACE_MORE = extern struct {
    dwSize: {"kind":"UInt32"},
    lpIUnknowns: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.IUNKNOWN_LIST},
    lpDD_lcl: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    dwPageLockCount: {"kind":"UInt32"},
    dwBytesAllocated: {"kind":"UInt32"},
    lpDD_int: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_INT},
    dwMipMapCount: {"kind":"UInt32"},
    lpDDIClipper: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWCLIPPER_INT},
    lpHeapAliasInfo: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HEAPALIASINFO},
    dwOverlayFlags: {"kind":"UInt32"},
    rgjunc: {"kind""Ptr","child":{"kind":"Void"}},
    lpVideoPort: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDVIDEOPORT_LCL},
    lpddOverlayFX: {"kind""Ptr","child":Windows.Win32.DirectDraw.DDOVERLAYFX},
    ddsCapsEx: Windows.Win32.DirectDraw.DDSCAPSEX,
    dwTextureStage: {"kind":"UInt32"},
    lpDDRAWReserved: {"kind""Ptr","child":{"kind":"Void"}},
    lpDDRAWReserved2: {"kind""Ptr","child":{"kind":"Void"}},
    lpDDrawReserved3: {"kind""Ptr","child":{"kind":"Void"}},
    dwDDrawReserved4: {"kind":"UInt32"},
    lpDDrawReserved5: {"kind""Ptr","child":{"kind":"Void"}},
    lpGammaRamp: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpOriginalGammaRamp: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpDDrawReserved6: {"kind""Ptr","child":{"kind":"Void"}},
    dwSurfaceHandle: {"kind":"UInt32"},
    qwDDrawReserved8: {"kind":"Array","child": {"kind":"UInt32"}},
    lpDDrawReserved9: {"kind""Ptr","child":{"kind":"Void"}},
    cSurfaces: {"kind":"UInt32"},
    pCreatedDDSurfaceDesc2: {"kind""Ptr","child":Windows.Win32.DirectDraw.DDSURFACEDESC2},
    slist: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL}},
    dwFVF: {"kind":"UInt32"},
    lpVB: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: DDRAWI_DDRAWSURFACE_LCL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DDRAWSURFACE_LCL = extern struct {
    lpSurfMore: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_MORE},
    lpGbl: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_GBL},
    hDDSurface: {"kind":"UIntPtr"},
    lpAttachList: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.ATTACHLIST},
    lpAttachListFrom: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.ATTACHLIST},
    dwLocalRefCnt: {"kind":"UInt32"},
    dwProcessId: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    ddsCaps: Windows.Win32.DirectDraw.DDSCAPS,
    Anonymous1: Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL+_Anonymous1_e__Union,
    Anonymous2: Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL+_Anonymous2_e__Union,
    dwModeCreatedIn: {"kind":"UInt32"},
    dwBackBufferCount: {"kind":"UInt32"},
    ddckCKDestBlt: Windows.Win32.DirectShow.DDCOLORKEY,
    ddckCKSrcBlt: Windows.Win32.DirectShow.DDCOLORKEY,
    hDC: {"kind":"UIntPtr"},
    dwReserved1: {"kind":"UIntPtr"},
    ddckCKSrcOverlay: Windows.Win32.DirectShow.DDCOLORKEY,
    ddckCKDestOverlay: Windows.Win32.DirectShow.DDCOLORKEY,
    lpSurfaceOverlaying: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_INT},
    dbnOverlayNode: Windows.Win32.WindowsProgramming.DBLNODE,
    rcOverlaySrc: Windows.Win32.DisplayDevices.RECT,
    rcOverlayDest: Windows.Win32.DisplayDevices.RECT,
    dwClrXparent: {"kind":"UInt32"},
    dwAlpha: {"kind":"UInt32"},
    lOverlayX: {"kind":"Int32"},
    lOverlayY: {"kind":"Int32"},
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: DDHALMODEINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHALMODEINFO = extern struct {
    dwWidth: {"kind":"UInt32"},
    dwHeight: {"kind":"UInt32"},
    lPitch: {"kind":"Int32"},
    dwBPP: {"kind":"UInt32"},
    wFlags: {"kind":"UInt16"},
    wRefreshRate: {"kind":"UInt16"},
    dwRBitMask: {"kind":"UInt32"},
    dwGBitMask: {"kind":"UInt32"},
    dwBBitMask: {"kind":"UInt32"},
    dwAlphaBitMask: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DDRAWI_DIRECTDRAW_INT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DIRECTDRAW_INT = extern struct {
    lpVtbl: {"kind""Ptr","child":{"kind":"Void"}},
    lpLcl: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    lpLink: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_INT},
    dwIntRefCnt: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DDHAL_CALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_CALLBACKS = extern struct {
    cbDDCallbacks: Windows.Win32.WindowsProgramming.DDHAL_DDCALLBACKS,
    cbDDSurfaceCallbacks: Windows.Win32.WindowsProgramming.DDHAL_DDSURFACECALLBACKS,
    cbDDPaletteCallbacks: Windows.Win32.WindowsProgramming.DDHAL_DDPALETTECALLBACKS,
    HALDD: Windows.Win32.WindowsProgramming.DDHAL_DDCALLBACKS,
    HALDDSurface: Windows.Win32.WindowsProgramming.DDHAL_DDSURFACECALLBACKS,
    HALDDPalette: Windows.Win32.WindowsProgramming.DDHAL_DDPALETTECALLBACKS,
    HELDD: Windows.Win32.WindowsProgramming.DDHAL_DDCALLBACKS,
    HELDDSurface: Windows.Win32.WindowsProgramming.DDHAL_DDSURFACECALLBACKS,
    HELDDPalette: Windows.Win32.WindowsProgramming.DDHAL_DDPALETTECALLBACKS,
    cbDDExeBufCallbacks: Windows.Win32.WindowsProgramming.DDHAL_DDEXEBUFCALLBACKS,
    HALDDExeBuf: Windows.Win32.WindowsProgramming.DDHAL_DDEXEBUFCALLBACKS,
    HELDDExeBuf: Windows.Win32.WindowsProgramming.DDHAL_DDEXEBUFCALLBACKS,
    cbDDVideoPortCallbacks: Windows.Win32.WindowsProgramming.DDHAL_DDVIDEOPORTCALLBACKS,
    HALDDVideoPort: Windows.Win32.WindowsProgramming.DDHAL_DDVIDEOPORTCALLBACKS,
    cbDDColorControlCallbacks: Windows.Win32.WindowsProgramming.DDHAL_DDCOLORCONTROLCALLBACKS,
    HALDDColorControl: Windows.Win32.WindowsProgramming.DDHAL_DDCOLORCONTROLCALLBACKS,
    cbDDMiscellaneousCallbacks: Windows.Win32.WindowsProgramming.DDHAL_DDMISCELLANEOUSCALLBACKS,
    HALDDMiscellaneous: Windows.Win32.WindowsProgramming.DDHAL_DDMISCELLANEOUSCALLBACKS,
    cbDDKernelCallbacks: Windows.Win32.WindowsProgramming.DDHAL_DDKERNELCALLBACKS,
    HALDDKernel: Windows.Win32.WindowsProgramming.DDHAL_DDKERNELCALLBACKS,
    cbDDMotionCompCallbacks: Windows.Win32.WindowsProgramming.DDHAL_DDMOTIONCOMPCALLBACKS,
    HALDDMotionComp: Windows.Win32.WindowsProgramming.DDHAL_DDMOTIONCOMPCALLBACKS,
};
// --------------------------------------------------------
// Type: DDRAWI_DIRECTDRAW_GBL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DIRECTDRAW_GBL = extern struct {
    dwRefCnt: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    fpPrimaryOrig: {"kind":"UIntPtr"},
    ddCaps: Windows.Win32.DisplayDevices.DDCORECAPS,
    dwInternal1: {"kind":"UInt32"},
    dwUnused1: {"kind":"Array","child": {"kind":"UInt32"}},
    lpDDCBtmp: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDHAL_CALLBACKS},
    dsList: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_INT},
    palList: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWPALETTE_INT},
    clipperList: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWCLIPPER_INT},
    lp16DD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_GBL},
    dwMaxOverlays: {"kind":"UInt32"},
    dwCurrOverlays: {"kind":"UInt32"},
    dwMonitorFrequency: {"kind":"UInt32"},
    ddHELCaps: Windows.Win32.DisplayDevices.DDCORECAPS,
    dwUnused2: {"kind":"Array","child": {"kind":"UInt32"}},
    ddckCKDestOverlay: Windows.Win32.DirectShow.DDCOLORKEY,
    ddckCKSrcOverlay: Windows.Win32.DirectShow.DDCOLORKEY,
    vmiData: Windows.Win32.WindowsProgramming.VIDMEMINFO,
    lpDriverHandle: {"kind""Ptr","child":{"kind":"Void"}},
    lpExclusiveOwner: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    dwModeIndex: {"kind":"UInt32"},
    dwModeIndexOrig: {"kind":"UInt32"},
    dwNumFourCC: {"kind":"UInt32"},
    lpdwFourCC: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwNumModes: {"kind":"UInt32"},
    lpModeInfo: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDHALMODEINFO},
    plProcessList: Windows.Win32.WindowsProgramming.PROCESS_LIST,
    dwSurfaceLockCount: {"kind":"UInt32"},
    dwAliasedLockCnt: {"kind":"UInt32"},
    dwReserved3: {"kind":"UIntPtr"},
    hDD: {"kind":"UIntPtr"},
    cObsolete: {"kind":"Array","child": {"kind":"SByte"}},
    dwReserved1: {"kind":"UInt32"},
    dwReserved2: {"kind":"UInt32"},
    dbnOverlayRoot: Windows.Win32.WindowsProgramming.DBLNODE,
    lpwPDeviceFlags: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwPDevice: {"kind":"UInt32"},
    dwWin16LockCnt: {"kind":"UInt32"},
    dwUnused3: {"kind":"UInt32"},
    hInstance: {"kind":"UInt32"},
    dwEvent16: {"kind":"UInt32"},
    dwSaveNumModes: {"kind":"UInt32"},
    lpD3DGlobalDriverData: {"kind":"UIntPtr"},
    lpD3DHALCallbacks: {"kind":"UIntPtr"},
    ddBothCaps: Windows.Win32.DisplayDevices.DDCORECAPS,
    lpDDVideoPortCaps: {"kind""Ptr","child":Windows.Win32.DisplayDevices.DDVIDEOPORTCAPS},
    dvpList: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDVIDEOPORT_INT},
    lpD3DHALCallbacks2: {"kind":"UIntPtr"},
    rectDevice: Windows.Win32.DisplayDevices.RECT,
    cMonitors: {"kind":"UInt32"},
    gpbmiSrc: {"kind""Ptr","child":{"kind":"Void"}},
    gpbmiDest: {"kind""Ptr","child":{"kind":"Void"}},
    phaiHeapAliases: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HEAPALIASINFO},
    hKernelHandle: {"kind":"UIntPtr"},
    pfnNotifyProc: {"kind":"UIntPtr"},
    lpDDKernelCaps: {"kind""Ptr","child":Windows.Win32.DisplayDevices.DDKERNELCAPS},
    lpddNLVCaps: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDNONLOCALVIDMEMCAPS},
    lpddNLVHELCaps: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDNONLOCALVIDMEMCAPS},
    lpddNLVBothCaps: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDNONLOCALVIDMEMCAPS},
    lpD3DExtendedCaps: {"kind":"UIntPtr"},
    dwDOSBoxEvent: {"kind":"UInt32"},
    rectDesktop: Windows.Win32.DisplayDevices.RECT,
    cDriverName: {"kind":"Array","child": {"kind":"SByte"}},
    lpD3DHALCallbacks3: {"kind":"UIntPtr"},
    dwNumZPixelFormats: {"kind":"UInt32"},
    lpZPixelFormats: {"kind""Ptr","child":Windows.Win32.DirectDraw.DDPIXELFORMAT},
    mcList: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDMOTIONCOMP_INT},
    hDDVxd: {"kind":"UInt32"},
    ddsCapsMore: Windows.Win32.DirectDraw.DDSCAPSEX,
};
// --------------------------------------------------------
// Type: DDRAWI_DIRECTDRAW_LCL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DIRECTDRAW_LCL = extern struct {
    lpDDMore: {"kind":"UInt32"},
    lpGbl: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_GBL},
    dwUnused0: {"kind":"UInt32"},
    dwLocalFlags: {"kind":"UInt32"},
    dwLocalRefCnt: {"kind":"UInt32"},
    dwProcessId: {"kind":"UInt32"},
    pUnkOuter: Windows.Win32.Com.IUnknown,
    dwObsolete1: {"kind":"UInt32"},
    hWnd: {"kind":"UIntPtr"},
    hDC: {"kind":"UIntPtr"},
    dwErrorMode: {"kind":"UInt32"},
    lpPrimary: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_INT},
    lpCB: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_INT},
    dwPreferredMode: {"kind":"UInt32"},
    hD3DInstance: Windows.Win32.SystemServices.HINSTANCE,
    pD3DIUnknown: Windows.Win32.Com.IUnknown,
    lpDDCB: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDHAL_CALLBACKS},
    hDDVxd: {"kind":"UIntPtr"},
    dwAppHackFlags: {"kind":"UInt32"},
    hFocusWnd: {"kind":"UIntPtr"},
    dwHotTracking: {"kind":"UInt32"},
    dwIMEState: {"kind":"UInt32"},
    hWndPopup: {"kind":"UIntPtr"},
    hDD: {"kind":"UIntPtr"},
    hGammaCalibrator: {"kind":"UIntPtr"},
    lpGammaCalibrator: Windows.Win32.WindowsProgramming.LPDDGAMMACALIBRATORPROC,
};
// --------------------------------------------------------
// Type: DDRAWI_DDVIDEOPORT_INT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DDVIDEOPORT_INT = extern struct {
    lpVtbl: {"kind""Ptr","child":{"kind":"Void"}},
    lpLcl: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDVIDEOPORT_LCL},
    lpLink: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDVIDEOPORT_INT},
    dwIntRefCnt: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DDRAWI_DDVIDEOPORT_LCL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DDVIDEOPORT_LCL = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    ddvpDesc: Windows.Win32.DisplayDevices.DDVIDEOPORTDESC,
    ddvpInfo: Windows.Win32.DisplayDevices.DDVIDEOPORTINFO,
    lpSurface: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_INT},
    lpVBISurface: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_INT},
    lpFlipInts: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_INT}},
    dwNumAutoflip: {"kind":"UInt32"},
    dwProcessID: {"kind":"UInt32"},
    dwStateFlags: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    dwRefCnt: {"kind":"UInt32"},
    fpLastFlip: {"kind":"UIntPtr"},
    dwReserved1: {"kind":"UIntPtr"},
    dwReserved2: {"kind":"UIntPtr"},
    hDDVideoPort: Windows.Win32.SystemServices.HANDLE,
    dwNumVBIAutoflip: {"kind":"UInt32"},
    lpVBIDesc: {"kind""Ptr","child":Windows.Win32.DisplayDevices.DDVIDEOPORTDESC},
    lpVideoDesc: {"kind""Ptr","child":Windows.Win32.DisplayDevices.DDVIDEOPORTDESC},
    lpVBIInfo: {"kind""Ptr","child":Windows.Win32.DisplayDevices.DDVIDEOPORTINFO},
    lpVideoInfo: {"kind""Ptr","child":Windows.Win32.DisplayDevices.DDVIDEOPORTINFO},
    dwVBIProcessID: {"kind":"UInt32"},
    lpVPNotify: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDVIDEOPORT_INT},
};
// --------------------------------------------------------
// Type: DDRAWI_DDMOTIONCOMP_INT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DDMOTIONCOMP_INT = extern struct {
    lpVtbl: {"kind""Ptr","child":{"kind":"Void"}},
    lpLcl: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDMOTIONCOMP_LCL},
    lpLink: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDMOTIONCOMP_INT},
    dwIntRefCnt: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DDRAWI_DDMOTIONCOMP_LCL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DDMOTIONCOMP_LCL = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    guid: Guid,
    dwUncompWidth: {"kind":"UInt32"},
    dwUncompHeight: {"kind":"UInt32"},
    ddUncompPixelFormat: Windows.Win32.DirectDraw.DDPIXELFORMAT,
    dwInternalFlags: {"kind":"UInt32"},
    dwRefCnt: {"kind":"UInt32"},
    dwProcessId: {"kind":"UInt32"},
    hMoComp: Windows.Win32.SystemServices.HANDLE,
    dwDriverReserved1: {"kind":"UInt32"},
    dwDriverReserved2: {"kind":"UInt32"},
    dwDriverReserved3: {"kind":"UInt32"},
    lpDriverReserved1: {"kind""Ptr","child":{"kind":"Void"}},
    lpDriverReserved2: {"kind""Ptr","child":{"kind":"Void"}},
    lpDriverReserved3: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: DDHALINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHALINFO = extern struct {
    dwSize: {"kind":"UInt32"},
    lpDDCallbacks: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDHAL_DDCALLBACKS},
    lpDDSurfaceCallbacks: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDHAL_DDSURFACECALLBACKS},
    lpDDPaletteCallbacks: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDHAL_DDPALETTECALLBACKS},
    vmiData: Windows.Win32.WindowsProgramming.VIDMEMINFO,
    ddCaps: Windows.Win32.DisplayDevices.DDCORECAPS,
    dwMonitorFrequency: {"kind":"UInt32"},
    GetDriverInfo: Windows.Win32.WindowsProgramming.LPDDHAL_GETDRIVERINFO,
    dwModeIndex: {"kind":"UInt32"},
    lpdwFourCC: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwNumModes: {"kind":"UInt32"},
    lpModeInfo: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDHALMODEINFO},
    dwFlags: {"kind":"UInt32"},
    lpPDevice: {"kind""Ptr","child":{"kind":"Void"}},
    hInstance: {"kind":"UInt32"},
    lpD3DGlobalDriverData: {"kind":"UIntPtr"},
    lpD3DHALCallbacks: {"kind":"UIntPtr"},
    lpDDExeBufCallbacks: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDHAL_DDEXEBUFCALLBACKS},
};
// --------------------------------------------------------
// Type: LPDDHAL_SETINFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_SETINFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHAL_VIDMEMALLOC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_VIDMEMALLOC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHAL_VIDMEMFREE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_VIDMEMFREE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DDHALDDRAWFNS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHALDDRAWFNS = extern struct {
    dwSize: {"kind":"UInt32"},
    lpSetInfo: Windows.Win32.WindowsProgramming.LPDDHAL_SETINFO,
    lpVidMemAlloc: Windows.Win32.WindowsProgramming.LPDDHAL_VIDMEMALLOC,
    lpVidMemFree: Windows.Win32.WindowsProgramming.LPDDHAL_VIDMEMFREE,
};
// --------------------------------------------------------
// Type: DDHAL_BLTDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_BLTDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_GBL},
    lpDDDestSurface: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL},
    rDest: Windows.Win32.DisplayDevices.RECTL,
    lpDDSrcSurface: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL},
    rSrc: Windows.Win32.DisplayDevices.RECTL,
    dwFlags: {"kind":"UInt32"},
    dwROPFlags: {"kind":"UInt32"},
    bltFX: Windows.Win32.DirectDraw.DDBLTFX,
    ddRVal: Windows.Win32.Com.HRESULT,
    Blt: Windows.Win32.WindowsProgramming.LPDDHALSURFCB_BLT,
    IsClipped: Windows.Win32.SystemServices.BOOL,
    rOrigDest: Windows.Win32.DisplayDevices.RECTL,
    rOrigSrc: Windows.Win32.DisplayDevices.RECTL,
    dwRectCnt: {"kind":"UInt32"},
    prDestRects: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
};
// --------------------------------------------------------
// Type: DDHAL_LOCKDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_LOCKDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_GBL},
    lpDDSurface: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL},
    bHasRect: {"kind":"UInt32"},
    rArea: Windows.Win32.DisplayDevices.RECTL,
    lpSurfData: {"kind""Ptr","child":{"kind":"Void"}},
    ddRVal: Windows.Win32.Com.HRESULT,
    Lock: Windows.Win32.WindowsProgramming.LPDDHALSURFCB_LOCK,
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DDHAL_UNLOCKDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_UNLOCKDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_GBL},
    lpDDSurface: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL},
    ddRVal: Windows.Win32.Com.HRESULT,
    Unlock: Windows.Win32.WindowsProgramming.LPDDHALSURFCB_UNLOCK,
};
// --------------------------------------------------------
// Type: DDHAL_UPDATEOVERLAYDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_UPDATEOVERLAYDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_GBL},
    lpDDDestSurface: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL},
    rDest: Windows.Win32.DisplayDevices.RECTL,
    lpDDSrcSurface: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL},
    rSrc: Windows.Win32.DisplayDevices.RECTL,
    dwFlags: {"kind":"UInt32"},
    overlayFX: Windows.Win32.DirectDraw.DDOVERLAYFX,
    ddRVal: Windows.Win32.Com.HRESULT,
    UpdateOverlay: Windows.Win32.WindowsProgramming.LPDDHALSURFCB_UPDATEOVERLAY,
};
// --------------------------------------------------------
// Type: DDHAL_SETOVERLAYPOSITIONDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_SETOVERLAYPOSITIONDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_GBL},
    lpDDSrcSurface: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL},
    lpDDDestSurface: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL},
    lXPos: {"kind":"Int32"},
    lYPos: {"kind":"Int32"},
    ddRVal: Windows.Win32.Com.HRESULT,
    SetOverlayPosition: Windows.Win32.WindowsProgramming.LPDDHALSURFCB_SETOVERLAYPOSITION,
};
// --------------------------------------------------------
// Type: DDHAL_SETPALETTEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_SETPALETTEDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_GBL},
    lpDDSurface: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL},
    lpDDPalette: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWPALETTE_GBL},
    ddRVal: Windows.Win32.Com.HRESULT,
    SetPalette: Windows.Win32.WindowsProgramming.LPDDHALSURFCB_SETPALETTE,
    Attach: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: DDHAL_FLIPDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_FLIPDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_GBL},
    lpSurfCurr: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL},
    lpSurfTarg: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL},
    dwFlags: {"kind":"UInt32"},
    ddRVal: Windows.Win32.Com.HRESULT,
    Flip: Windows.Win32.WindowsProgramming.LPDDHALSURFCB_FLIP,
    lpSurfCurrLeft: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL},
    lpSurfTargLeft: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL},
};
// --------------------------------------------------------
// Type: DDHAL_DESTROYSURFACEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_DESTROYSURFACEDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_GBL},
    lpDDSurface: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL},
    ddRVal: Windows.Win32.Com.HRESULT,
    DestroySurface: Windows.Win32.WindowsProgramming.LPDDHALSURFCB_DESTROYSURFACE,
};
// --------------------------------------------------------
// Type: DDHAL_SETCLIPLISTDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_SETCLIPLISTDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_GBL},
    lpDDSurface: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL},
    ddRVal: Windows.Win32.Com.HRESULT,
    SetClipList: Windows.Win32.WindowsProgramming.LPDDHALSURFCB_SETCLIPLIST,
};
// --------------------------------------------------------
// Type: DDHAL_ADDATTACHEDSURFACEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_ADDATTACHEDSURFACEDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_GBL},
    lpDDSurface: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL},
    lpSurfAttached: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL},
    ddRVal: Windows.Win32.Com.HRESULT,
    AddAttachedSurface: Windows.Win32.WindowsProgramming.LPDDHALSURFCB_ADDATTACHEDSURFACE,
};
// --------------------------------------------------------
// Type: DDHAL_SETCOLORKEYDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_SETCOLORKEYDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_GBL},
    lpDDSurface: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL},
    dwFlags: {"kind":"UInt32"},
    ckNew: Windows.Win32.DirectShow.DDCOLORKEY,
    ddRVal: Windows.Win32.Com.HRESULT,
    SetColorKey: Windows.Win32.WindowsProgramming.LPDDHALSURFCB_SETCOLORKEY,
};
// --------------------------------------------------------
// Type: DDHAL_GETBLTSTATUSDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETBLTSTATUSDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_GBL},
    lpDDSurface: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL},
    dwFlags: {"kind":"UInt32"},
    ddRVal: Windows.Win32.Com.HRESULT,
    GetBltStatus: Windows.Win32.WindowsProgramming.LPDDHALSURFCB_GETBLTSTATUS,
};
// --------------------------------------------------------
// Type: DDHAL_GETFLIPSTATUSDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETFLIPSTATUSDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_GBL},
    lpDDSurface: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL},
    dwFlags: {"kind":"UInt32"},
    ddRVal: Windows.Win32.Com.HRESULT,
    GetFlipStatus: Windows.Win32.WindowsProgramming.LPDDHALSURFCB_GETFLIPSTATUS,
};
// --------------------------------------------------------
// Type: DDHAL_DESTROYPALETTEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_DESTROYPALETTEDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_GBL},
    lpDDPalette: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWPALETTE_GBL},
    ddRVal: Windows.Win32.Com.HRESULT,
    DestroyPalette: Windows.Win32.WindowsProgramming.LPDDHALPALCB_DESTROYPALETTE,
};
// --------------------------------------------------------
// Type: DDHAL_SETENTRIESDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_SETENTRIESDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_GBL},
    lpDDPalette: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWPALETTE_GBL},
    dwBase: {"kind":"UInt32"},
    dwNumEntries: {"kind":"UInt32"},
    lpEntries: {"kind""Ptr","child":Windows.Win32.Direct2D.PALETTEENTRY},
    ddRVal: Windows.Win32.Com.HRESULT,
    SetEntries: Windows.Win32.WindowsProgramming.LPDDHALPALCB_SETENTRIES,
};
// --------------------------------------------------------
// Type: DDHAL_CREATESURFACEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_CREATESURFACEDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_GBL},
    lpDDSurfaceDesc: {"kind""Ptr","child":Windows.Win32.DirectDraw.DDSURFACEDESC},
    lplpSList: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL}},
    dwSCnt: {"kind":"UInt32"},
    ddRVal: Windows.Win32.Com.HRESULT,
    CreateSurface: Windows.Win32.WindowsProgramming.LPDDHAL_CREATESURFACE,
};
// --------------------------------------------------------
// Type: DDHAL_CANCREATESURFACEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_CANCREATESURFACEDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_GBL},
    lpDDSurfaceDesc: {"kind""Ptr","child":Windows.Win32.DirectDraw.DDSURFACEDESC},
    bIsDifferentPixelFormat: {"kind":"UInt32"},
    ddRVal: Windows.Win32.Com.HRESULT,
    CanCreateSurface: Windows.Win32.WindowsProgramming.LPDDHAL_CANCREATESURFACE,
};
// --------------------------------------------------------
// Type: DDHAL_CREATEPALETTEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_CREATEPALETTEDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_GBL},
    lpDDPalette: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWPALETTE_GBL},
    lpColorTable: {"kind""Ptr","child":Windows.Win32.Direct2D.PALETTEENTRY},
    ddRVal: Windows.Win32.Com.HRESULT,
    CreatePalette: Windows.Win32.WindowsProgramming.LPDDHAL_CREATEPALETTE,
    is_excl: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: DDHAL_DESTROYDRIVERDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_DESTROYDRIVERDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_GBL},
    ddRVal: Windows.Win32.Com.HRESULT,
    DestroyDriver: Windows.Win32.WindowsProgramming.LPDDHAL_DESTROYDRIVER,
};
// --------------------------------------------------------
// Type: DDHAL_SETMODEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_SETMODEDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_GBL},
    dwModeIndex: {"kind":"UInt32"},
    ddRVal: Windows.Win32.Com.HRESULT,
    SetMode: Windows.Win32.WindowsProgramming.LPDDHAL_SETMODE,
    inexcl: Windows.Win32.SystemServices.BOOL,
    useRefreshRate: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: DDHAL_DRVSETCOLORKEYDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_DRVSETCOLORKEYDATA = extern struct {
    lpDDSurface: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL},
    dwFlags: {"kind":"UInt32"},
    ckNew: Windows.Win32.DirectShow.DDCOLORKEY,
    ddRVal: Windows.Win32.Com.HRESULT,
    SetColorKey: Windows.Win32.WindowsProgramming.LPDDHAL_SETCOLORKEY,
};
// --------------------------------------------------------
// Type: DDHAL_GETSCANLINEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETSCANLINEDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_GBL},
    dwScanLine: {"kind":"UInt32"},
    ddRVal: Windows.Win32.Com.HRESULT,
    GetScanLine: Windows.Win32.WindowsProgramming.LPDDHAL_GETSCANLINE,
};
// --------------------------------------------------------
// Type: DDHAL_SETEXCLUSIVEMODEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_SETEXCLUSIVEMODEDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_GBL},
    dwEnterExcl: {"kind":"UInt32"},
    dwReserved: {"kind":"UInt32"},
    ddRVal: Windows.Win32.Com.HRESULT,
    SetExclusiveMode: Windows.Win32.WindowsProgramming.LPDDHAL_SETEXCLUSIVEMODE,
};
// --------------------------------------------------------
// Type: DDHAL_FLIPTOGDISURFACEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_FLIPTOGDISURFACEDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_GBL},
    dwToGDI: {"kind":"UInt32"},
    dwReserved: {"kind":"UInt32"},
    ddRVal: Windows.Win32.Com.HRESULT,
    FlipToGDISurface: Windows.Win32.WindowsProgramming.LPDDHAL_FLIPTOGDISURFACE,
};
// --------------------------------------------------------
// Type: DDHAL_CANCREATEVPORTDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_CANCREATEVPORTDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    lpDDVideoPortDesc: {"kind""Ptr","child":Windows.Win32.DisplayDevices.DDVIDEOPORTDESC},
    ddRVal: Windows.Win32.Com.HRESULT,
    CanCreateVideoPort: Windows.Win32.WindowsProgramming.LPDDHALVPORTCB_CANCREATEVIDEOPORT,
};
// --------------------------------------------------------
// Type: DDHAL_CREATEVPORTDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_CREATEVPORTDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    lpDDVideoPortDesc: {"kind""Ptr","child":Windows.Win32.DisplayDevices.DDVIDEOPORTDESC},
    lpVideoPort: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDVIDEOPORT_LCL},
    ddRVal: Windows.Win32.Com.HRESULT,
    CreateVideoPort: Windows.Win32.WindowsProgramming.LPDDHALVPORTCB_CREATEVIDEOPORT,
};
// --------------------------------------------------------
// Type: DDHAL_FLIPVPORTDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_FLIPVPORTDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    lpVideoPort: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDVIDEOPORT_LCL},
    lpSurfCurr: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL},
    lpSurfTarg: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL},
    ddRVal: Windows.Win32.Com.HRESULT,
    FlipVideoPort: Windows.Win32.WindowsProgramming.LPDDHALVPORTCB_FLIP,
};
// --------------------------------------------------------
// Type: DDHAL_GETVPORTBANDWIDTHDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETVPORTBANDWIDTHDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    lpVideoPort: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDVIDEOPORT_LCL},
    lpddpfFormat: {"kind""Ptr","child":Windows.Win32.DirectDraw.DDPIXELFORMAT},
    dwWidth: {"kind":"UInt32"},
    dwHeight: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    lpBandwidth: {"kind""Ptr","child":Windows.Win32.DisplayDevices.DDVIDEOPORTBANDWIDTH},
    ddRVal: Windows.Win32.Com.HRESULT,
    GetVideoPortBandwidth: Windows.Win32.WindowsProgramming.LPDDHALVPORTCB_GETBANDWIDTH,
};
// --------------------------------------------------------
// Type: DDHAL_GETVPORTINPUTFORMATDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETVPORTINPUTFORMATDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    lpVideoPort: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDVIDEOPORT_LCL},
    dwFlags: {"kind":"UInt32"},
    lpddpfFormat: {"kind""Ptr","child":Windows.Win32.DirectDraw.DDPIXELFORMAT},
    dwNumFormats: {"kind":"UInt32"},
    ddRVal: Windows.Win32.Com.HRESULT,
    GetVideoPortInputFormats: Windows.Win32.WindowsProgramming.LPDDHALVPORTCB_GETINPUTFORMATS,
};
// --------------------------------------------------------
// Type: DDHAL_GETVPORTOUTPUTFORMATDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETVPORTOUTPUTFORMATDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    lpVideoPort: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDVIDEOPORT_LCL},
    dwFlags: {"kind":"UInt32"},
    lpddpfInputFormat: {"kind""Ptr","child":Windows.Win32.DirectDraw.DDPIXELFORMAT},
    lpddpfOutputFormats: {"kind""Ptr","child":Windows.Win32.DirectDraw.DDPIXELFORMAT},
    dwNumFormats: {"kind":"UInt32"},
    ddRVal: Windows.Win32.Com.HRESULT,
    GetVideoPortOutputFormats: Windows.Win32.WindowsProgramming.LPDDHALVPORTCB_GETOUTPUTFORMATS,
};
// --------------------------------------------------------
// Type: DDHAL_GETVPORTFIELDDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETVPORTFIELDDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    lpVideoPort: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDVIDEOPORT_LCL},
    bField: Windows.Win32.SystemServices.BOOL,
    ddRVal: Windows.Win32.Com.HRESULT,
    GetVideoPortField: Windows.Win32.WindowsProgramming.LPDDHALVPORTCB_GETFIELD,
};
// --------------------------------------------------------
// Type: DDHAL_GETVPORTLINEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETVPORTLINEDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    lpVideoPort: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDVIDEOPORT_LCL},
    dwLine: {"kind":"UInt32"},
    ddRVal: Windows.Win32.Com.HRESULT,
    GetVideoPortLine: Windows.Win32.WindowsProgramming.LPDDHALVPORTCB_GETLINE,
};
// --------------------------------------------------------
// Type: DDHAL_GETVPORTCONNECTDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETVPORTCONNECTDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    dwPortId: {"kind":"UInt32"},
    lpConnect: {"kind""Ptr","child":Windows.Win32.CoreAudio.DDVIDEOPORTCONNECT},
    dwNumEntries: {"kind":"UInt32"},
    ddRVal: Windows.Win32.Com.HRESULT,
    GetVideoPortConnectInfo: Windows.Win32.WindowsProgramming.LPDDHALVPORTCB_GETVPORTCONNECT,
};
// --------------------------------------------------------
// Type: DDHAL_DESTROYVPORTDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_DESTROYVPORTDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    lpVideoPort: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDVIDEOPORT_LCL},
    ddRVal: Windows.Win32.Com.HRESULT,
    DestroyVideoPort: Windows.Win32.WindowsProgramming.LPDDHALVPORTCB_DESTROYVPORT,
};
// --------------------------------------------------------
// Type: DDHAL_GETVPORTFLIPSTATUSDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETVPORTFLIPSTATUSDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    fpSurface: {"kind":"UIntPtr"},
    ddRVal: Windows.Win32.Com.HRESULT,
    GetVideoPortFlipStatus: Windows.Win32.WindowsProgramming.LPDDHALVPORTCB_GETFLIPSTATUS,
};
// --------------------------------------------------------
// Type: DDHAL_UPDATEVPORTDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_UPDATEVPORTDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    lpVideoPort: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDVIDEOPORT_LCL},
    lplpDDSurface: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_INT}},
    lplpDDVBISurface: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_INT}},
    lpVideoInfo: {"kind""Ptr","child":Windows.Win32.DisplayDevices.DDVIDEOPORTINFO},
    dwFlags: {"kind":"UInt32"},
    dwNumAutoflip: {"kind":"UInt32"},
    dwNumVBIAutoflip: {"kind":"UInt32"},
    ddRVal: Windows.Win32.Com.HRESULT,
    UpdateVideoPort: Windows.Win32.WindowsProgramming.LPDDHALVPORTCB_UPDATE,
};
// --------------------------------------------------------
// Type: DDHAL_WAITFORVPORTSYNCDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_WAITFORVPORTSYNCDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    lpVideoPort: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDVIDEOPORT_LCL},
    dwFlags: {"kind":"UInt32"},
    dwLine: {"kind":"UInt32"},
    dwTimeOut: {"kind":"UInt32"},
    ddRVal: Windows.Win32.Com.HRESULT,
    WaitForVideoPortSync: Windows.Win32.WindowsProgramming.LPDDHALVPORTCB_WAITFORSYNC,
};
// --------------------------------------------------------
// Type: DDHAL_GETVPORTSIGNALDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETVPORTSIGNALDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    lpVideoPort: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDVIDEOPORT_LCL},
    dwStatus: {"kind":"UInt32"},
    ddRVal: Windows.Win32.Com.HRESULT,
    GetVideoSignalStatus: Windows.Win32.WindowsProgramming.LPDDHALVPORTCB_GETSIGNALSTATUS,
};
// --------------------------------------------------------
// Type: DDHAL_VPORTCOLORDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_VPORTCOLORDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    lpVideoPort: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDVIDEOPORT_LCL},
    dwFlags: {"kind":"UInt32"},
    lpColorData: {"kind""Ptr","child":Windows.Win32.DirectDraw.DDCOLORCONTROL},
    ddRVal: Windows.Win32.Com.HRESULT,
    ColorControl: Windows.Win32.WindowsProgramming.LPDDHALVPORTCB_COLORCONTROL,
};
// --------------------------------------------------------
// Type: DDHAL_COLORCONTROLDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_COLORCONTROLDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_GBL},
    lpDDSurface: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL},
    lpColorData: {"kind""Ptr","child":Windows.Win32.DirectDraw.DDCOLORCONTROL},
    dwFlags: {"kind":"UInt32"},
    ddRVal: Windows.Win32.Com.HRESULT,
    ColorControl: Windows.Win32.WindowsProgramming.LPDDHALCOLORCB_COLORCONTROL,
};
// --------------------------------------------------------
// Type: DDHAL_GETDRIVERINFODATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETDRIVERINFODATA = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    guidInfo: Guid,
    dwExpectedSize: {"kind":"UInt32"},
    lpvData: {"kind""Ptr","child":{"kind":"Void"}},
    dwActualSize: {"kind":"UInt32"},
    ddRVal: Windows.Win32.Com.HRESULT,
    dwContext: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: DDHAL_GETAVAILDRIVERMEMORYDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETAVAILDRIVERMEMORYDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_GBL},
    DDSCaps: Windows.Win32.DirectDraw.DDSCAPS,
    dwTotal: {"kind":"UInt32"},
    dwFree: {"kind":"UInt32"},
    ddRVal: Windows.Win32.Com.HRESULT,
    GetAvailDriverMemory: Windows.Win32.WindowsProgramming.LPDDHAL_GETAVAILDRIVERMEMORY,
    ddsCapsEx: Windows.Win32.DirectDraw.DDSCAPSEX,
};
// --------------------------------------------------------
// Type: DDHAL_UPDATENONLOCALHEAPDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_UPDATENONLOCALHEAPDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_GBL},
    dwHeap: {"kind":"UInt32"},
    fpGARTLin: {"kind":"UIntPtr"},
    fpGARTDev: {"kind":"UIntPtr"},
    ulPolicyMaxBytes: {"kind":"UIntPtr"},
    ddRVal: Windows.Win32.Com.HRESULT,
    UpdateNonLocalHeap: Windows.Win32.WindowsProgramming.LPDDHAL_UPDATENONLOCALHEAP,
};
// --------------------------------------------------------
// Type: DDHAL_GETHEAPALIGNMENTDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETHEAPALIGNMENTDATA = extern struct {
    dwInstance: {"kind":"UIntPtr"},
    dwHeap: {"kind":"UInt32"},
    ddRVal: Windows.Win32.Com.HRESULT,
    GetHeapAlignment: Windows.Win32.WindowsProgramming.LPDDHAL_GETHEAPALIGNMENT,
    Alignment: Windows.Win32.DisplayDevices.HEAPALIGNMENT,
};
// --------------------------------------------------------
// Type: DDHAL_CREATESURFACEEXDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_CREATESURFACEEXDATA = extern struct {
    dwFlags: {"kind":"UInt32"},
    lpDDLcl: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    lpDDSLcl: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL},
    ddRVal: Windows.Win32.Com.HRESULT,
};
// --------------------------------------------------------
// Type: DDHAL_GETDRIVERSTATEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETDRIVERSTATEDATA = extern struct {
    dwFlags: {"kind":"UInt32"},
    Anonymous: Windows.Win32.WindowsProgramming.DDHAL_GETDRIVERSTATEDATA+_Anonymous_e__Union,
    lpdwStates: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwLength: {"kind":"UInt32"},
    ddRVal: Windows.Win32.Com.HRESULT,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: DDHAL_SYNCSURFACEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_SYNCSURFACEDATA = extern struct {
    dwSize: {"kind":"UInt32"},
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    lpDDSurface: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL},
    dwSurfaceOffset: {"kind":"UInt32"},
    fpLockPtr: {"kind":"UIntPtr"},
    lPitch: {"kind":"Int32"},
    dwOverlayOffset: {"kind":"UInt32"},
    dwOverlaySrcWidth: {"kind":"UInt32"},
    dwOverlaySrcHeight: {"kind":"UInt32"},
    dwOverlayDestWidth: {"kind":"UInt32"},
    dwOverlayDestHeight: {"kind":"UInt32"},
    dwDriverReserved1: {"kind":"UIntPtr"},
    dwDriverReserved2: {"kind":"UIntPtr"},
    dwDriverReserved3: {"kind":"UIntPtr"},
    ddRVal: Windows.Win32.Com.HRESULT,
};
// --------------------------------------------------------
// Type: DDHAL_SYNCVIDEOPORTDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_SYNCVIDEOPORTDATA = extern struct {
    dwSize: {"kind":"UInt32"},
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    lpVideoPort: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDVIDEOPORT_LCL},
    dwOriginOffset: {"kind":"UInt32"},
    dwHeight: {"kind":"UInt32"},
    dwVBIHeight: {"kind":"UInt32"},
    dwDriverReserved1: {"kind":"UIntPtr"},
    dwDriverReserved2: {"kind":"UIntPtr"},
    dwDriverReserved3: {"kind":"UIntPtr"},
    ddRVal: Windows.Win32.Com.HRESULT,
};
// --------------------------------------------------------
// Type: DDHAL_GETMOCOMPGUIDSDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETMOCOMPGUIDSDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    dwNumGuids: {"kind":"UInt32"},
    lpGuids: {"kind""Ptr","child":Guid},
    ddRVal: Windows.Win32.Com.HRESULT,
    GetMoCompGuids: Windows.Win32.WindowsProgramming.LPDDHALMOCOMPCB_GETGUIDS,
};
// --------------------------------------------------------
// Type: DDHAL_GETMOCOMPFORMATSDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETMOCOMPFORMATSDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    lpGuid: {"kind""Ptr","child":Guid},
    dwNumFormats: {"kind":"UInt32"},
    lpFormats: {"kind""Ptr","child":Windows.Win32.DirectDraw.DDPIXELFORMAT},
    ddRVal: Windows.Win32.Com.HRESULT,
    GetMoCompFormats: Windows.Win32.WindowsProgramming.LPDDHALMOCOMPCB_GETFORMATS,
};
// --------------------------------------------------------
// Type: DDHAL_CREATEMOCOMPDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_CREATEMOCOMPDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    lpMoComp: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDMOTIONCOMP_LCL},
    lpGuid: {"kind""Ptr","child":Guid},
    dwUncompWidth: {"kind":"UInt32"},
    dwUncompHeight: {"kind":"UInt32"},
    ddUncompPixelFormat: Windows.Win32.DirectDraw.DDPIXELFORMAT,
    lpData: {"kind""Ptr","child":{"kind":"Void"}},
    dwDataSize: {"kind":"UInt32"},
    ddRVal: Windows.Win32.Com.HRESULT,
    CreateMoComp: Windows.Win32.WindowsProgramming.LPDDHALMOCOMPCB_CREATE,
};
// --------------------------------------------------------
// Type: DDMCCOMPBUFFERINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDMCCOMPBUFFERINFO = extern struct {
    dwSize: {"kind":"UInt32"},
    dwNumCompBuffers: {"kind":"UInt32"},
    dwWidthToCreate: {"kind":"UInt32"},
    dwHeightToCreate: {"kind":"UInt32"},
    dwBytesToAllocate: {"kind":"UInt32"},
    ddCompCaps: Windows.Win32.DirectDraw.DDSCAPS2,
    ddPixelFormat: Windows.Win32.DirectDraw.DDPIXELFORMAT,
};
// --------------------------------------------------------
// Type: DDHAL_GETMOCOMPCOMPBUFFDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETMOCOMPCOMPBUFFDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    lpGuid: {"kind""Ptr","child":Guid},
    dwWidth: {"kind":"UInt32"},
    dwHeight: {"kind":"UInt32"},
    ddPixelFormat: Windows.Win32.DirectDraw.DDPIXELFORMAT,
    dwNumTypesCompBuffs: {"kind":"UInt32"},
    lpCompBuffInfo: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDMCCOMPBUFFERINFO},
    ddRVal: Windows.Win32.Com.HRESULT,
    GetMoCompBuffInfo: Windows.Win32.WindowsProgramming.LPDDHALMOCOMPCB_GETCOMPBUFFINFO,
};
// --------------------------------------------------------
// Type: DDHAL_GETINTERNALMOCOMPDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETINTERNALMOCOMPDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    lpGuid: {"kind""Ptr","child":Guid},
    dwWidth: {"kind":"UInt32"},
    dwHeight: {"kind":"UInt32"},
    ddPixelFormat: Windows.Win32.DirectDraw.DDPIXELFORMAT,
    dwScratchMemAlloc: {"kind":"UInt32"},
    ddRVal: Windows.Win32.Com.HRESULT,
    GetInternalMoCompInfo: Windows.Win32.WindowsProgramming.LPDDHALMOCOMPCB_GETINTERNALINFO,
};
// --------------------------------------------------------
// Type: DDHAL_BEGINMOCOMPFRAMEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_BEGINMOCOMPFRAMEDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    lpMoComp: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDMOTIONCOMP_LCL},
    lpDestSurface: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL},
    dwInputDataSize: {"kind":"UInt32"},
    lpInputData: {"kind""Ptr","child":{"kind":"Void"}},
    dwOutputDataSize: {"kind":"UInt32"},
    lpOutputData: {"kind""Ptr","child":{"kind":"Void"}},
    ddRVal: Windows.Win32.Com.HRESULT,
    BeginMoCompFrame: Windows.Win32.WindowsProgramming.LPDDHALMOCOMPCB_BEGINFRAME,
};
// --------------------------------------------------------
// Type: DDHAL_ENDMOCOMPFRAMEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_ENDMOCOMPFRAMEDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    lpMoComp: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDMOTIONCOMP_LCL},
    lpInputData: {"kind""Ptr","child":{"kind":"Void"}},
    dwInputDataSize: {"kind":"UInt32"},
    ddRVal: Windows.Win32.Com.HRESULT,
    EndMoCompFrame: Windows.Win32.WindowsProgramming.LPDDHALMOCOMPCB_ENDFRAME,
};
// --------------------------------------------------------
// Type: DDMCBUFFERINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDMCBUFFERINFO = extern struct {
    dwSize: {"kind":"UInt32"},
    lpCompSurface: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL},
    dwDataOffset: {"kind":"UInt32"},
    dwDataSize: {"kind":"UInt32"},
    lpPrivate: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: DDHAL_RENDERMOCOMPDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_RENDERMOCOMPDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    lpMoComp: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDMOTIONCOMP_LCL},
    dwNumBuffers: {"kind":"UInt32"},
    lpBufferInfo: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDMCBUFFERINFO},
    dwFunction: {"kind":"UInt32"},
    lpInputData: {"kind""Ptr","child":{"kind":"Void"}},
    dwInputDataSize: {"kind":"UInt32"},
    lpOutputData: {"kind""Ptr","child":{"kind":"Void"}},
    dwOutputDataSize: {"kind":"UInt32"},
    ddRVal: Windows.Win32.Com.HRESULT,
    RenderMoComp: Windows.Win32.WindowsProgramming.LPDDHALMOCOMPCB_RENDER,
};
// --------------------------------------------------------
// Type: DDHAL_QUERYMOCOMPSTATUSDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_QUERYMOCOMPSTATUSDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    lpMoComp: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDMOTIONCOMP_LCL},
    lpSurface: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDRAWSURFACE_LCL},
    dwFlags: {"kind":"UInt32"},
    ddRVal: Windows.Win32.Com.HRESULT,
    QueryMoCompStatus: Windows.Win32.WindowsProgramming.LPDDHALMOCOMPCB_QUERYSTATUS,
};
// --------------------------------------------------------
// Type: DDHAL_DESTROYMOCOMPDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_DESTROYMOCOMPDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DIRECTDRAW_LCL},
    lpMoComp: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DDRAWI_DDMOTIONCOMP_LCL},
    ddRVal: Windows.Win32.Com.HRESULT,
    DestroyMoComp: Windows.Win32.WindowsProgramming.LPDDHALMOCOMPCB_DESTROY,
};
// --------------------------------------------------------
// Type: PFNCHECKCONNECTIONWIZARD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNCHECKCONNECTIONWIZARD = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNSETSHELLNEXT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNSETSHELLNEXT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: _D3DHAL_CALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _D3DHAL_CALLBACKS = opaque {
};
// --------------------------------------------------------
// Type: _D3DHAL_GLOBALDRIVERDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _D3DHAL_GLOBALDRIVERDATA = opaque {
};
// --------------------------------------------------------
// Type: STRENTRYA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STRENTRYA = extern struct {
    pszName: {"kind""Ptr","child":{"kind":"SByte"}},
    pszValue: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: STRENTRYW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STRENTRYW = extern struct {
    pszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszValue: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: STRTABLEA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STRTABLEA = extern struct {
    cEntries: {"kind":"UInt32"},
    pse: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.STRENTRYA},
};
// --------------------------------------------------------
// Type: STRTABLEW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STRTABLEW = extern struct {
    cEntries: {"kind":"UInt32"},
    pse: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.STRENTRYW},
};
// --------------------------------------------------------
// Type: REGINSTALLA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const REGINSTALLA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: _CabInfoA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _CabInfoA = extern struct {
    pszCab: {"kind""Ptr","child":{"kind":"SByte"}},
    pszInf: {"kind""Ptr","child":{"kind":"SByte"}},
    pszSection: {"kind""Ptr","child":{"kind":"SByte"}},
    szSrcPath: {"kind":"Array","child": {"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: _CabInfoW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _CabInfoW = extern struct {
    pszCab: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszInf: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszSection: {"kind""Ptr","child":{"kind":"UInt16"}},
    szSrcPath: {"kind":"Array","child": {"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PERUSERSECTIONA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PERUSERSECTIONA = extern struct {
    szGUID: {"kind":"Array","child": {"kind":"SByte"}},
    szDispName: {"kind":"Array","child": {"kind":"SByte"}},
    szLocale: {"kind":"Array","child": {"kind":"SByte"}},
    szStub: {"kind":"Array","child": {"kind":"SByte"}},
    szVersion: {"kind":"Array","child": {"kind":"SByte"}},
    szCompID: {"kind":"Array","child": {"kind":"SByte"}},
    dwIsInstalled: {"kind":"UInt32"},
    bRollback: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: PERUSERSECTIONW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PERUSERSECTIONW = extern struct {
    szGUID: {"kind":"Array","child": {"kind":"UInt16"}},
    szDispName: {"kind":"Array","child": {"kind":"UInt16"}},
    szLocale: {"kind":"Array","child": {"kind":"UInt16"}},
    szStub: {"kind":"Array","child": {"kind":"UInt16"}},
    szVersion: {"kind":"Array","child": {"kind":"UInt16"}},
    szCompID: {"kind":"Array","child": {"kind":"UInt16"}},
    dwIsInstalled: {"kind":"UInt32"},
    bRollback: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: IMESTRUCT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMESTRUCT = extern struct {
    fnc: {"kind":"UInt32"},
    wParam: Windows.Win32.WindowsAndMessaging.WPARAM,
    wCount: {"kind":"UInt32"},
    dchSource: {"kind":"UInt32"},
    dchDest: {"kind":"UInt32"},
    lParam1: Windows.Win32.WindowsAndMessaging.LPARAM,
    lParam2: Windows.Win32.WindowsAndMessaging.LPARAM,
    lParam3: Windows.Win32.WindowsAndMessaging.LPARAM,
};
// --------------------------------------------------------
// Type: UNDETERMINESTRUCT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UNDETERMINESTRUCT = extern struct {
    dwSize: {"kind":"UInt32"},
    uDefIMESize: {"kind":"UInt32"},
    uDefIMEPos: {"kind":"UInt32"},
    uUndetTextLen: {"kind":"UInt32"},
    uUndetTextPos: {"kind":"UInt32"},
    uUndetAttrPos: {"kind":"UInt32"},
    uCursorPos: {"kind":"UInt32"},
    uDeltaStart: {"kind":"UInt32"},
    uDetermineTextLen: {"kind":"UInt32"},
    uDetermineTextPos: {"kind":"UInt32"},
    uDetermineDelimPos: {"kind":"UInt32"},
    uYomiTextLen: {"kind":"UInt32"},
    uYomiTextPos: {"kind":"UInt32"},
    uYomiDelimPos: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: STRINGEXSTRUCT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STRINGEXSTRUCT = extern struct {
    dwSize: {"kind":"UInt32"},
    uDeterminePos: {"kind":"UInt32"},
    uDetermineDelimPos: {"kind":"UInt32"},
    uYomiPos: {"kind":"UInt32"},
    uYomiDelimPos: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DATETIME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DATETIME = extern struct {
    year: {"kind":"UInt16"},
    month: {"kind":"UInt16"},
    day: {"kind":"UInt16"},
    hour: {"kind":"UInt16"},
    min: {"kind":"UInt16"},
    sec: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: IMEPROA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMEPROA = extern struct {
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    InstDate: Windows.Win32.WindowsProgramming.DATETIME,
    wVersion: {"kind":"UInt32"},
    szDescription: {"kind":"Array","child": {"kind":"Byte"}},
    szName: {"kind":"Array","child": {"kind":"Byte"}},
    szOptions: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: IMEPROW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMEPROW = extern struct {
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    InstDate: Windows.Win32.WindowsProgramming.DATETIME,
    wVersion: {"kind":"UInt32"},
    szDescription: {"kind":"Array","child": {"kind":"UInt16"}},
    szName: {"kind":"Array","child": {"kind":"UInt16"}},
    szOptions: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: WebBrowser_V1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WebBrowser_V1 = opaque {
};
// --------------------------------------------------------
// Type: WebBrowser
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WebBrowser = opaque {
};
// --------------------------------------------------------
// Type: InternetExplorer
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const InternetExplorer = opaque {
};
// --------------------------------------------------------
// Type: InternetExplorerMedium
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const InternetExplorerMedium = opaque {
};
// --------------------------------------------------------
// Type: ShellBrowserWindow
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ShellBrowserWindow = opaque {
};
// --------------------------------------------------------
// Type: ShellWindows
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ShellWindows = opaque {
};
// --------------------------------------------------------
// Type: ShellUIHelper
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ShellUIHelper = opaque {
};
// --------------------------------------------------------
// Type: ShellNameSpace
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ShellNameSpace = opaque {
};
// --------------------------------------------------------
// Type: CScriptErrorList
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CScriptErrorList = opaque {
};
// --------------------------------------------------------
// Type: CommandStateChangeConstants
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CommandStateChangeConstants = *opaque{
};
// --------------------------------------------------------
// Type: SecureLockIconConstants
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SecureLockIconConstants = *opaque{
};
// --------------------------------------------------------
// Type: NewProcessCauseConstants
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NewProcessCauseConstants = *opaque{
};
// --------------------------------------------------------
// Type: BrowserNavConstants
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BrowserNavConstants = *opaque{
};
// --------------------------------------------------------
// Type: RefreshConstants
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RefreshConstants = *opaque{
};
// --------------------------------------------------------
// Type: IWebBrowser
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWebBrowser = *opaque{
    // TODO: Method 'GoBack'
    // TODO: Method 'GoForward'
    // TODO: Method 'GoHome'
    // TODO: Method 'GoSearch'
    // TODO: Method 'Navigate'
    // TODO: Method 'Refresh'
    // TODO: Method 'Refresh2'
    // TODO: Method 'Stop'
    // TODO: Method 'get_Application'
    // TODO: Method 'get_Parent'
    // TODO: Method 'get_Container'
    // TODO: Method 'get_Document'
    // TODO: Method 'get_TopLevelContainer'
    // TODO: Method 'get_Type'
    // TODO: Method 'get_Left'
    // TODO: Method 'put_Left'
    // TODO: Method 'get_Top'
    // TODO: Method 'put_Top'
    // TODO: Method 'get_Width'
    // TODO: Method 'put_Width'
    // TODO: Method 'get_Height'
    // TODO: Method 'put_Height'
    // TODO: Method 'get_LocationName'
    // TODO: Method 'get_LocationURL'
    // TODO: Method 'get_Busy'
};
// --------------------------------------------------------
// Type: DWebBrowserEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DWebBrowserEvents = *opaque{
};
// --------------------------------------------------------
// Type: IWebBrowserApp
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWebBrowserApp = *opaque{
    // TODO: Method 'Quit'
    // TODO: Method 'ClientToWindow'
    // TODO: Method 'PutProperty'
    // TODO: Method 'GetProperty'
    // TODO: Method 'get_Name'
    // TODO: Method 'get_HWND'
    // TODO: Method 'get_FullName'
    // TODO: Method 'get_Path'
    // TODO: Method 'get_Visible'
    // TODO: Method 'put_Visible'
    // TODO: Method 'get_StatusBar'
    // TODO: Method 'put_StatusBar'
    // TODO: Method 'get_StatusText'
    // TODO: Method 'put_StatusText'
    // TODO: Method 'get_ToolBar'
    // TODO: Method 'put_ToolBar'
    // TODO: Method 'get_MenuBar'
    // TODO: Method 'put_MenuBar'
    // TODO: Method 'get_FullScreen'
    // TODO: Method 'put_FullScreen'
};
// --------------------------------------------------------
// Type: IWebBrowser2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWebBrowser2 = *opaque{
    // TODO: Method 'Navigate2'
    // TODO: Method 'QueryStatusWB'
    // TODO: Method 'ExecWB'
    // TODO: Method 'ShowBrowserBar'
    // TODO: Method 'get_ReadyState'
    // TODO: Method 'get_Offline'
    // TODO: Method 'put_Offline'
    // TODO: Method 'get_Silent'
    // TODO: Method 'put_Silent'
    // TODO: Method 'get_RegisterAsBrowser'
    // TODO: Method 'put_RegisterAsBrowser'
    // TODO: Method 'get_RegisterAsDropTarget'
    // TODO: Method 'put_RegisterAsDropTarget'
    // TODO: Method 'get_TheaterMode'
    // TODO: Method 'put_TheaterMode'
    // TODO: Method 'get_AddressBar'
    // TODO: Method 'put_AddressBar'
    // TODO: Method 'get_Resizable'
    // TODO: Method 'put_Resizable'
};
// --------------------------------------------------------
// Type: DWebBrowserEvents2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DWebBrowserEvents2 = *opaque{
};
// --------------------------------------------------------
// Type: DShellWindowsEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DShellWindowsEvents = *opaque{
};
// --------------------------------------------------------
// Type: IShellUIHelper
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellUIHelper = *opaque{
    // TODO: Method 'ResetFirstBootMode'
    // TODO: Method 'ResetSafeMode'
    // TODO: Method 'RefreshOfflineDesktop'
    // TODO: Method 'AddFavorite'
    // TODO: Method 'AddChannel'
    // TODO: Method 'AddDesktopComponent'
    // TODO: Method 'IsSubscribed'
    // TODO: Method 'NavigateAndFind'
    // TODO: Method 'ImportExportFavorites'
    // TODO: Method 'AutoCompleteSaveForm'
    // TODO: Method 'AutoScan'
    // TODO: Method 'AutoCompleteAttach'
    // TODO: Method 'ShowBrowserUI'
};
// --------------------------------------------------------
// Type: IShellUIHelper2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellUIHelper2 = *opaque{
    // TODO: Method 'AddSearchProvider'
    // TODO: Method 'RunOnceShown'
    // TODO: Method 'SkipRunOnce'
    // TODO: Method 'CustomizeSettings'
    // TODO: Method 'SqmEnabled'
    // TODO: Method 'PhishingEnabled'
    // TODO: Method 'BrandImageUri'
    // TODO: Method 'SkipTabsWelcome'
    // TODO: Method 'DiagnoseConnection'
    // TODO: Method 'CustomizeClearType'
    // TODO: Method 'IsSearchProviderInstalled'
    // TODO: Method 'IsSearchMigrated'
    // TODO: Method 'DefaultSearchProvider'
    // TODO: Method 'RunOnceRequiredSettingsComplete'
    // TODO: Method 'RunOnceHasShown'
    // TODO: Method 'SearchGuideUrl'
};
// --------------------------------------------------------
// Type: IShellUIHelper3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellUIHelper3 = *opaque{
    // TODO: Method 'AddService'
    // TODO: Method 'IsServiceInstalled'
    // TODO: Method 'InPrivateFilteringEnabled'
    // TODO: Method 'AddToFavoritesBar'
    // TODO: Method 'BuildNewTabPage'
    // TODO: Method 'SetRecentlyClosedVisible'
    // TODO: Method 'SetActivitiesVisible'
    // TODO: Method 'ContentDiscoveryReset'
    // TODO: Method 'IsSuggestedSitesEnabled'
    // TODO: Method 'EnableSuggestedSites'
    // TODO: Method 'NavigateToSuggestedSites'
    // TODO: Method 'ShowTabsHelp'
    // TODO: Method 'ShowInPrivateHelp'
};
// --------------------------------------------------------
// Type: IShellUIHelper4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellUIHelper4 = *opaque{
    // TODO: Method 'msIsSiteMode'
    // TODO: Method 'msSiteModeShowThumbBar'
    // TODO: Method 'msSiteModeAddThumbBarButton'
    // TODO: Method 'msSiteModeUpdateThumbBarButton'
    // TODO: Method 'msSiteModeSetIconOverlay'
    // TODO: Method 'msSiteModeClearIconOverlay'
    // TODO: Method 'msAddSiteMode'
    // TODO: Method 'msSiteModeCreateJumpList'
    // TODO: Method 'msSiteModeAddJumpListItem'
    // TODO: Method 'msSiteModeClearJumpList'
    // TODO: Method 'msSiteModeShowJumpList'
    // TODO: Method 'msSiteModeAddButtonStyle'
    // TODO: Method 'msSiteModeShowButtonStyle'
    // TODO: Method 'msSiteModeActivate'
    // TODO: Method 'msIsSiteModeFirstRun'
    // TODO: Method 'msAddTrackingProtectionList'
    // TODO: Method 'msTrackingProtectionEnabled'
    // TODO: Method 'msActiveXFilteringEnabled'
};
// --------------------------------------------------------
// Type: IShellUIHelper5
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellUIHelper5 = *opaque{
    // TODO: Method 'msProvisionNetworks'
    // TODO: Method 'msReportSafeUrl'
    // TODO: Method 'msSiteModeRefreshBadge'
    // TODO: Method 'msSiteModeClearBadge'
    // TODO: Method 'msDiagnoseConnectionUILess'
    // TODO: Method 'msLaunchNetworkClientHelp'
    // TODO: Method 'msChangeDefaultBrowser'
};
// --------------------------------------------------------
// Type: IShellUIHelper6
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellUIHelper6 = *opaque{
    // TODO: Method 'msStopPeriodicTileUpdate'
    // TODO: Method 'msStartPeriodicTileUpdate'
    // TODO: Method 'msStartPeriodicTileUpdateBatch'
    // TODO: Method 'msClearTile'
    // TODO: Method 'msEnableTileNotificationQueue'
    // TODO: Method 'msPinnedSiteState'
    // TODO: Method 'msEnableTileNotificationQueueForSquare150x150'
    // TODO: Method 'msEnableTileNotificationQueueForWide310x150'
    // TODO: Method 'msEnableTileNotificationQueueForSquare310x310'
    // TODO: Method 'msScheduledTileNotification'
    // TODO: Method 'msRemoveScheduledTileNotification'
    // TODO: Method 'msStartPeriodicBadgeUpdate'
    // TODO: Method 'msStopPeriodicBadgeUpdate'
    // TODO: Method 'msLaunchInternetOptions'
};
// --------------------------------------------------------
// Type: IShellUIHelper7
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellUIHelper7 = *opaque{
    // TODO: Method 'SetExperimentalFlag'
    // TODO: Method 'GetExperimentalFlag'
    // TODO: Method 'SetExperimentalValue'
    // TODO: Method 'GetExperimentalValue'
    // TODO: Method 'ResetAllExperimentalFlagsAndValues'
    // TODO: Method 'GetNeedIEAutoLaunchFlag'
    // TODO: Method 'SetNeedIEAutoLaunchFlag'
    // TODO: Method 'HasNeedIEAutoLaunchFlag'
    // TODO: Method 'LaunchIE'
};
// --------------------------------------------------------
// Type: IShellUIHelper8
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellUIHelper8 = *opaque{
    // TODO: Method 'GetCVListData'
    // TODO: Method 'GetCVListLocalData'
    // TODO: Method 'GetEMIEListData'
    // TODO: Method 'GetEMIEListLocalData'
    // TODO: Method 'OpenFavoritesPane'
    // TODO: Method 'OpenFavoritesSettings'
    // TODO: Method 'LaunchInHVSI'
};
// --------------------------------------------------------
// Type: IShellUIHelper9
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellUIHelper9 = *opaque{
    // TODO: Method 'GetOSSku'
};
// --------------------------------------------------------
// Type: DShellNameSpaceEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DShellNameSpaceEvents = *opaque{
};
// --------------------------------------------------------
// Type: IShellFavoritesNameSpace
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellFavoritesNameSpace = *opaque{
    // TODO: Method 'MoveSelectionUp'
    // TODO: Method 'MoveSelectionDown'
    // TODO: Method 'ResetSort'
    // TODO: Method 'NewFolder'
    // TODO: Method 'Synchronize'
    // TODO: Method 'Import'
    // TODO: Method 'Export'
    // TODO: Method 'InvokeContextMenuCommand'
    // TODO: Method 'MoveSelectionTo'
    // TODO: Method 'get_SubscriptionsEnabled'
    // TODO: Method 'CreateSubscriptionForSelection'
    // TODO: Method 'DeleteSubscriptionForSelection'
    // TODO: Method 'SetRoot'
};
// --------------------------------------------------------
// Type: IShellNameSpace
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellNameSpace = *opaque{
    // TODO: Method 'get_EnumOptions'
    // TODO: Method 'put_EnumOptions'
    // TODO: Method 'get_SelectedItem'
    // TODO: Method 'put_SelectedItem'
    // TODO: Method 'get_Root'
    // TODO: Method 'put_Root'
    // TODO: Method 'get_Depth'
    // TODO: Method 'put_Depth'
    // TODO: Method 'get_Mode'
    // TODO: Method 'put_Mode'
    // TODO: Method 'get_Flags'
    // TODO: Method 'put_Flags'
    // TODO: Method 'put_TVFlags'
    // TODO: Method 'get_TVFlags'
    // TODO: Method 'get_Columns'
    // TODO: Method 'put_Columns'
    // TODO: Method 'get_CountViewTypes'
    // TODO: Method 'SetViewType'
    // TODO: Method 'SelectedItems'
    // TODO: Method 'Expand'
    // TODO: Method 'UnselectAll'
};
// --------------------------------------------------------
// Type: IScriptErrorList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IScriptErrorList = *opaque{
    // TODO: Method 'advanceError'
    // TODO: Method 'retreatError'
    // TODO: Method 'canAdvanceError'
    // TODO: Method 'canRetreatError'
    // TODO: Method 'getErrorLine'
    // TODO: Method 'getErrorChar'
    // TODO: Method 'getErrorCode'
    // TODO: Method 'getErrorMsg'
    // TODO: Method 'getErrorUrl'
    // TODO: Method 'getAlwaysShowLockState'
    // TODO: Method 'getDetailsPaneOpen'
    // TODO: Method 'setDetailsPaneOpen'
    // TODO: Method 'getPerErrorDisplay'
    // TODO: Method 'setPerErrorDisplay'
};
// --------------------------------------------------------
// Type: JAVA_TRUST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const JAVA_TRUST = extern struct {
    cbSize: {"kind":"UInt32"},
    flag: {"kind":"UInt32"},
    fAllActiveXPermissions: Windows.Win32.SystemServices.BOOL,
    fAllPermissions: Windows.Win32.SystemServices.BOOL,
    dwEncodingType: {"kind":"UInt32"},
    pbJavaPermissions: {"kind""Ptr","child":{"kind":"Byte"}},
    cbJavaPermissions: {"kind":"UInt32"},
    pbSigner: {"kind""Ptr","child":{"kind":"Byte"}},
    cbSigner: {"kind":"UInt32"},
    pwszZone: {"kind""Ptr","child":{"kind":"UInt16"}},
    guidZone: Guid,
    hVerify: Windows.Win32.Com.HRESULT,
};
// --------------------------------------------------------
// Type: IsolatedAppLauncher
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IsolatedAppLauncher = opaque {
};
// --------------------------------------------------------
// Type: IsolatedAppLauncherTelemetryParameters
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IsolatedAppLauncherTelemetryParameters = extern struct {
    EnableForLaunch: Windows.Win32.SystemServices.BOOL,
    CorrelationGUID: Guid,
};
// --------------------------------------------------------
// Type: IIsolatedAppLauncher
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IIsolatedAppLauncher = *opaque{
    // TODO: Method 'Launch'
};
// --------------------------------------------------------
// Type: WSCProductList
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WSCProductList = opaque {
};
// --------------------------------------------------------
// Type: WSCDefaultProduct
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WSCDefaultProduct = opaque {
};
// --------------------------------------------------------
// Type: WSC_SECURITY_PRODUCT_SUBSTATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSC_SECURITY_PRODUCT_SUBSTATUS = *opaque{
};
// --------------------------------------------------------
// Type: WSC_SECURITY_PRODUCT_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSC_SECURITY_PRODUCT_STATE = *opaque{
};
// --------------------------------------------------------
// Type: SECURITY_PRODUCT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SECURITY_PRODUCT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WSC_SECURITY_SIGNATURE_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSC_SECURITY_SIGNATURE_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: IWscProduct
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWscProduct = *opaque{
    // TODO: Method 'get_ProductName'
    // TODO: Method 'get_ProductState'
    // TODO: Method 'get_SignatureStatus'
    // TODO: Method 'get_RemediationPath'
    // TODO: Method 'get_ProductStateTimestamp'
    // TODO: Method 'get_ProductGuid'
    // TODO: Method 'get_ProductIsDefault'
};
// --------------------------------------------------------
// Type: IWscProduct2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWscProduct2 = *opaque{
    // TODO: Method 'get_AntivirusScanSubstatus'
    // TODO: Method 'get_AntivirusSettingsSubstatus'
    // TODO: Method 'get_AntivirusProtectionUpdateSubstatus'
    // TODO: Method 'get_FirewallDomainProfileSubstatus'
    // TODO: Method 'get_FirewallPrivateProfileSubstatus'
    // TODO: Method 'get_FirewallPublicProfileSubstatus'
};
// --------------------------------------------------------
// Type: IWscProduct3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWscProduct3 = *opaque{
    // TODO: Method 'get_AntivirusDaysUntilExpired'
};
// --------------------------------------------------------
// Type: IWSCProductList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWSCProductList = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_Count'
    // TODO: Method 'get_Item'
};
// --------------------------------------------------------
// Type: IWSCDefaultProduct
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWSCDefaultProduct = *opaque{
    // TODO: Method 'SetDefaultProduct'
};
// --------------------------------------------------------
// Type: WSC_SECURITY_PROVIDER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSC_SECURITY_PROVIDER = *opaque{
};
// --------------------------------------------------------
// Type: WSC_SECURITY_PROVIDER_HEALTH
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSC_SECURITY_PROVIDER_HEALTH = *opaque{
};
// --------------------------------------------------------
// Type: PFN_IO_COMPLETION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_IO_COMPLETION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FH_OVERLAPPED
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FH_OVERLAPPED = extern struct {
    Internal: {"kind":"UIntPtr"},
    InternalHigh: {"kind":"UIntPtr"},
    Offset: {"kind":"UInt32"},
    OffsetHigh: {"kind":"UInt32"},
    hEvent: Windows.Win32.SystemServices.HANDLE,
    pfnCompletion: Windows.Win32.WindowsProgramming.PFN_IO_COMPLETION,
    Reserved1: {"kind":"UIntPtr"},
    Reserved2: {"kind":"UIntPtr"},
    Reserved3: {"kind":"UIntPtr"},
    Reserved4: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: FIO_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FIO_CONTEXT = extern struct {
    m_dwTempHack: {"kind":"UInt32"},
    m_dwSignature: {"kind":"UInt32"},
    m_hFile: Windows.Win32.SystemServices.HANDLE,
    m_dwLinesOffset: {"kind":"UInt32"},
    m_dwHeaderLength: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: FCACHE_CREATE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FCACHE_CREATE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FCACHE_RICHCREATE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FCACHE_RICHCREATE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CACHE_KEY_COMPARE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CACHE_KEY_COMPARE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CACHE_KEY_HASH
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CACHE_KEY_HASH = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CACHE_READ_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CACHE_READ_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CACHE_DESTROY_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CACHE_DESTROY_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CACHE_ACCESS_CHECK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CACHE_ACCESS_CHECK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: NAME_CACHE_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NAME_CACHE_CONTEXT = extern struct {
    m_dwSignature: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: TDIEntityID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TDIEntityID = extern struct {
    tei_entity: {"kind":"UInt32"},
    tei_instance: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: TDIObjectID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TDIObjectID = extern struct {
    toi_entity: Windows.Win32.WindowsProgramming.TDIEntityID,
    toi_class: {"kind":"UInt32"},
    toi_type: {"kind":"UInt32"},
    toi_id: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: tcp_request_query_information_ex_xp
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tcp_request_query_information_ex_xp = extern struct {
    ID: Windows.Win32.WindowsProgramming.TDIObjectID,
    Context: {"kind":"Array","child": {"kind":"UIntPtr"}},
};
// --------------------------------------------------------
// Type: tcp_request_query_information_ex_w2k
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tcp_request_query_information_ex_w2k = extern struct {
    ID: Windows.Win32.WindowsProgramming.TDIObjectID,
    Context: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: tcp_request_set_information_ex
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tcp_request_set_information_ex = extern struct {
    ID: Windows.Win32.WindowsProgramming.TDIObjectID,
    BufferSize: {"kind":"UInt32"},
    Buffer: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: TDI_TL_IO_CONTROL_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TDI_TL_IO_CONTROL_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: TDI_TL_IO_CONTROL_ENDPOINT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TDI_TL_IO_CONTROL_ENDPOINT = extern struct {
    Type: Windows.Win32.WindowsProgramming.TDI_TL_IO_CONTROL_TYPE,
    Level: {"kind":"UInt32"},
    Anonymous: Windows.Win32.WindowsProgramming.TDI_TL_IO_CONTROL_ENDPOINT+_Anonymous_e__Union,
    InputBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    InputBufferLength: {"kind":"UInt32"},
    OutputBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    OutputBufferLength: {"kind":"UInt32"},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: WLDP_HOST
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WLDP_HOST = *opaque{
};
// --------------------------------------------------------
// Type: WLDP_HOST_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WLDP_HOST_ID = *opaque{
};
// --------------------------------------------------------
// Type: DECISION_LOCATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DECISION_LOCATION = *opaque{
};
// --------------------------------------------------------
// Type: WLDP_KEY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WLDP_KEY = *opaque{
};
// --------------------------------------------------------
// Type: VALUENAME
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VALUENAME = *opaque{
};
// --------------------------------------------------------
// Type: WLDP_WINDOWS_LOCKDOWN_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WLDP_WINDOWS_LOCKDOWN_MODE = *opaque{
};
// --------------------------------------------------------
// Type: WLDP_WINDOWS_LOCKDOWN_RESTRICTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WLDP_WINDOWS_LOCKDOWN_RESTRICTION = *opaque{
};
// --------------------------------------------------------
// Type: WLDP_HOST_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLDP_HOST_INFORMATION = extern struct {
    dwRevision: {"kind":"UInt32"},
    dwHostId: Windows.Win32.WindowsProgramming.WLDP_HOST_ID,
    szSource: {"kind""Ptr","child":{"kind":"UInt16"}},
    hSource: Windows.Win32.SystemServices.HANDLE,
};
// --------------------------------------------------------
// Type: PWLDP_SETDYNAMICCODETRUST_API
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLDP_SETDYNAMICCODETRUST_API = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLDP_ISDYNAMICCODEPOLICYENABLED_API
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLDP_ISDYNAMICCODEPOLICYENABLED_API = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLDP_QUERYDYNAMICODETRUST_API
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLDP_QUERYDYNAMICODETRUST_API = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLDP_QUERYWINDOWSLOCKDOWNMODE_API
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLDP_QUERYWINDOWSLOCKDOWNMODE_API = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLDP_QUERYWINDOWSLOCKDOWNRESTRICTION_API
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLDP_QUERYWINDOWSLOCKDOWNRESTRICTION_API = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLDP_SETWINDOWSLOCKDOWNRESTRICTION_API
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLDP_SETWINDOWSLOCKDOWNRESTRICTION_API = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLDP_WLDPISAPPAPPROVEDBYPOLICY_API
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLDP_WLDPISAPPAPPROVEDBYPOLICY_API = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: XmlNodeType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const XmlNodeType = *opaque{
};
// --------------------------------------------------------
// Type: XmlConformanceLevel
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const XmlConformanceLevel = *opaque{
};
// --------------------------------------------------------
// Type: DtdProcessing
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DtdProcessing = *opaque{
};
// --------------------------------------------------------
// Type: XmlReadState
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const XmlReadState = *opaque{
};
// --------------------------------------------------------
// Type: XmlReaderProperty
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const XmlReaderProperty = *opaque{
};
// --------------------------------------------------------
// Type: XmlError
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const XmlError = *opaque{
};
// --------------------------------------------------------
// Type: XmlStandalone
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const XmlStandalone = *opaque{
};
// --------------------------------------------------------
// Type: XmlWriterProperty
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const XmlWriterProperty = *opaque{
};
// --------------------------------------------------------
// Type: IXmlReader
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXmlReader = *opaque{
    // TODO: Method 'SetInput'
    // TODO: Method 'GetProperty'
    // TODO: Method 'SetProperty'
    // TODO: Method 'Read'
    // TODO: Method 'GetNodeType'
    // TODO: Method 'MoveToFirstAttribute'
    // TODO: Method 'MoveToNextAttribute'
    // TODO: Method 'MoveToAttributeByName'
    // TODO: Method 'MoveToElement'
    // TODO: Method 'GetQualifiedName'
    // TODO: Method 'GetNamespaceUri'
    // TODO: Method 'GetLocalName'
    // TODO: Method 'GetPrefix'
    // TODO: Method 'GetValue'
    // TODO: Method 'ReadValueChunk'
    // TODO: Method 'GetBaseUri'
    // TODO: Method 'IsDefault'
    // TODO: Method 'IsEmptyElement'
    // TODO: Method 'GetLineNumber'
    // TODO: Method 'GetLinePosition'
    // TODO: Method 'GetAttributeCount'
    // TODO: Method 'GetDepth'
    // TODO: Method 'IsEOF'
};
// --------------------------------------------------------
// Type: IXmlResolver
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXmlResolver = *opaque{
    // TODO: Method 'ResolveUri'
};
// --------------------------------------------------------
// Type: IXmlWriter
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXmlWriter = *opaque{
    // TODO: Method 'SetOutput'
    // TODO: Method 'GetProperty'
    // TODO: Method 'SetProperty'
    // TODO: Method 'WriteAttributes'
    // TODO: Method 'WriteAttributeString'
    // TODO: Method 'WriteCData'
    // TODO: Method 'WriteCharEntity'
    // TODO: Method 'WriteChars'
    // TODO: Method 'WriteComment'
    // TODO: Method 'WriteDocType'
    // TODO: Method 'WriteElementString'
    // TODO: Method 'WriteEndDocument'
    // TODO: Method 'WriteEndElement'
    // TODO: Method 'WriteEntityRef'
    // TODO: Method 'WriteFullEndElement'
    // TODO: Method 'WriteName'
    // TODO: Method 'WriteNmToken'
    // TODO: Method 'WriteNode'
    // TODO: Method 'WriteNodeShallow'
    // TODO: Method 'WriteProcessingInstruction'
    // TODO: Method 'WriteQualifiedName'
    // TODO: Method 'WriteRaw'
    // TODO: Method 'WriteRawChars'
    // TODO: Method 'WriteStartDocument'
    // TODO: Method 'WriteStartElement'
    // TODO: Method 'WriteString'
    // TODO: Method 'WriteSurrogateCharEntity'
    // TODO: Method 'WriteWhitespace'
    // TODO: Method 'Flush'
};
// --------------------------------------------------------
// Type: IXmlWriterLite
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXmlWriterLite = *opaque{
    // TODO: Method 'SetOutput'
    // TODO: Method 'GetProperty'
    // TODO: Method 'SetProperty'
    // TODO: Method 'WriteAttributes'
    // TODO: Method 'WriteAttributeString'
    // TODO: Method 'WriteCData'
    // TODO: Method 'WriteCharEntity'
    // TODO: Method 'WriteChars'
    // TODO: Method 'WriteComment'
    // TODO: Method 'WriteDocType'
    // TODO: Method 'WriteElementString'
    // TODO: Method 'WriteEndDocument'
    // TODO: Method 'WriteEndElement'
    // TODO: Method 'WriteEntityRef'
    // TODO: Method 'WriteFullEndElement'
    // TODO: Method 'WriteName'
    // TODO: Method 'WriteNmToken'
    // TODO: Method 'WriteNode'
    // TODO: Method 'WriteNodeShallow'
    // TODO: Method 'WriteProcessingInstruction'
    // TODO: Method 'WriteRaw'
    // TODO: Method 'WriteRawChars'
    // TODO: Method 'WriteStartDocument'
    // TODO: Method 'WriteStartElement'
    // TODO: Method 'WriteString'
    // TODO: Method 'WriteSurrogateCharEntity'
    // TODO: Method 'WriteWhitespace'
    // TODO: Method 'Flush'
};
// --------------------------------------------------------
// Type: DEVPROP_OPERATOR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DEVPROP_OPERATOR = *opaque{
};
// --------------------------------------------------------
// Type: DEVPROP_FILTER_EXPRESSION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVPROP_FILTER_EXPRESSION = extern struct {
    Operator: Windows.Win32.WindowsProgramming.DEVPROP_OPERATOR,
    Property: Windows.Win32.SystemServices.DEVPROPERTY,
};
// --------------------------------------------------------
// Type: DEV_OBJECT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DEV_OBJECT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DEV_QUERY_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DEV_QUERY_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: DEV_QUERY_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DEV_QUERY_STATE = *opaque{
};
// --------------------------------------------------------
// Type: DEV_QUERY_RESULT_ACTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DEV_QUERY_RESULT_ACTION = *opaque{
};
// --------------------------------------------------------
// Type: DEV_OBJECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEV_OBJECT = extern struct {
    ObjectType: Windows.Win32.WindowsProgramming.DEV_OBJECT_TYPE,
    pszObjectId: {"kind""Ptr","child":{"kind":"UInt16"}},
    cPropertyCount: {"kind":"UInt32"},
    pProperties: {"kind""Ptr","child":Windows.Win32.SystemServices.DEVPROPERTY},
};
// --------------------------------------------------------
// Type: DEV_QUERY_RESULT_ACTION_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEV_QUERY_RESULT_ACTION_DATA = extern struct {
    Action: Windows.Win32.WindowsProgramming.DEV_QUERY_RESULT_ACTION,
    Data: Windows.Win32.WindowsProgramming.DEV_QUERY_RESULT_ACTION_DATA+_DEV_QUERY_RESULT_UPDATE_PAYLOAD,
    // --------------------------------------------------------
    // Type: _DEV_QUERY_RESULT_UPDATE_PAYLOAD
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _DEV_QUERY_RESULT_UPDATE_PAYLOAD = *opaque{
    };
};
// --------------------------------------------------------
// Type: DEV_QUERY_PARAMETER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEV_QUERY_PARAMETER = extern struct {
    Key: Windows.Win32.SystemServices.DEVPROPKEY,
    Type: {"kind":"UInt32"},
    BufferSize: {"kind":"UInt32"},
    Buffer: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: HDEVQUERY__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HDEVQUERY__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: PDEV_QUERY_RESULT_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDEV_QUERY_RESULT_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: _GlobalFilter
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _GlobalFilter = *opaque{
};
// --------------------------------------------------------
// Type: _PfForwardAction
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _PfForwardAction = *opaque{
};
// --------------------------------------------------------
// Type: _PfAddresType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _PfAddresType = *opaque{
};
// --------------------------------------------------------
// Type: PF_FILTER_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PF_FILTER_DESCRIPTOR = extern struct {
    dwFilterFlags: {"kind":"UInt32"},
    dwRule: {"kind":"UInt32"},
    pfatType: Windows.Win32.WindowsProgramming._PfAddresType,
    SrcAddr: {"kind""Ptr","child":{"kind":"Byte"}},
    SrcMask: {"kind""Ptr","child":{"kind":"Byte"}},
    DstAddr: {"kind""Ptr","child":{"kind":"Byte"}},
    DstMask: {"kind""Ptr","child":{"kind":"Byte"}},
    dwProtocol: {"kind":"UInt32"},
    fLateBound: {"kind":"UInt32"},
    wSrcPort: {"kind":"UInt16"},
    wDstPort: {"kind":"UInt16"},
    wSrcPortHighRange: {"kind":"UInt16"},
    wDstPortHighRange: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: PF_FILTER_STATS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PF_FILTER_STATS = extern struct {
    dwNumPacketsFiltered: {"kind":"UInt32"},
    info: Windows.Win32.WindowsProgramming.PF_FILTER_DESCRIPTOR,
};
// --------------------------------------------------------
// Type: PF_INTERFACE_STATS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PF_INTERFACE_STATS = extern struct {
    pvDriverContext: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},
    dwInDrops: {"kind":"UInt32"},
    dwOutDrops: {"kind":"UInt32"},
    eaInAction: Windows.Win32.WindowsProgramming._PfForwardAction,
    eaOutAction: Windows.Win32.WindowsProgramming._PfForwardAction,
    dwNumInFilters: {"kind":"UInt32"},
    dwNumOutFilters: {"kind":"UInt32"},
    dwFrag: {"kind":"UInt32"},
    dwSpoof: {"kind":"UInt32"},
    dwReserved1: {"kind":"UInt32"},
    dwReserved2: {"kind":"UInt32"},
    liSYN: Windows.Win32.SystemServices.LARGE_INTEGER,
    liTotalLogged: Windows.Win32.SystemServices.LARGE_INTEGER,
    dwLostLogEntries: {"kind":"UInt32"},
    FilterInfo: {"kind":"Array","child": Windows.Win32.WindowsProgramming.PF_FILTER_STATS},
};
// --------------------------------------------------------
// Type: PF_LATEBIND_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PF_LATEBIND_INFO = extern struct {
    SrcAddr: {"kind""Ptr","child":{"kind":"Byte"}},
    DstAddr: {"kind""Ptr","child":{"kind":"Byte"}},
    Mask: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: _PfFrameType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _PfFrameType = *opaque{
};
// --------------------------------------------------------
// Type: _pfLogFrame
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _pfLogFrame = extern struct {
    Timestamp: Windows.Win32.SystemServices.LARGE_INTEGER,
    pfeTypeOfFrame: Windows.Win32.WindowsProgramming._PfFrameType,
    dwTotalSizeUsed: {"kind":"UInt32"},
    dwFilterRule: {"kind":"UInt32"},
    wSizeOfAdditionalData: {"kind":"UInt16"},
    wSizeOfIpHeader: {"kind":"UInt16"},
    dwInterfaceName: {"kind":"UInt32"},
    dwIPIndex: {"kind":"UInt32"},
    bPacketData: {"kind":"Array","child": {"kind":"Byte"}},
};
],

"func_definitions": [

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn I_NetLogonControl2(
    ServerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    FunctionCode: {"kind":"UInt32"},
    QueryLevel: {"kind":"UInt32"},
    Data: {"kind""Ptr","child":{"kind":"Byte"}},
    Buffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn DisableProcessWindowsGhosting(

// set_last_errror=False (can and should we use this?)
pub extern "loadperf" fn InstallPerfDllW(
    szComputerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpIniFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "loadperf" fn InstallPerfDllA(
    szComputerName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpIniFile: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn RtlRaiseException(
    ExceptionRecord: {"kind""Ptr","child":Windows.Win32.Debug.EXCEPTION_RECORD},

// set_last_errror=False (can and should we use this?)
pub extern "ole32" fn CoInstall(
    pbc: Windows.Win32.Com.IBindCtx,
    dwFlags: {"kind":"UInt32"},
    pClassSpec: {"kind""Ptr","child":Windows.Win32.SystemServices.uCLSSPEC},
    pQuery: {"kind""Ptr","child":Windows.Win32.Com.QUERYCONTEXT},
    pszCodeBase: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn CompareFileTime(
    lpFileTime1: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    lpFileTime2: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FileTimeToLocalFileTime(
    lpFileTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    lpLocalFileTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetFileTime(
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpCreationTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    lpLastAccessTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    lpLastWriteTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn LocalFileTimeToFileTime(
    lpLocalFileTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    lpFileTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetFileTime(
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpCreationTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    lpLastAccessTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    lpLastWriteTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetSystemWow64DirectoryA(
    lpBuffer: {"kind""Ptr","child":{"kind":"SByte"}},
    uSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetSystemWow64DirectoryW(
    lpBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    uSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "api-ms-win-core-wow64-l1-1-1" fn GetSystemWow64Directory2A(
    lpBuffer: {"kind""Ptr","child":{"kind":"SByte"}},
    uSize: {"kind":"UInt32"},
    ImageFileMachineType: {"kind":"UInt16"},

// set_last_errror=True (can and should we use this?)
pub extern "api-ms-win-core-wow64-l1-1-1" fn GetSystemWow64Directory2W(
    lpBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    uSize: {"kind":"UInt32"},
    ImageFileMachineType: {"kind":"UInt16"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn IsWow64GuestMachineSupported(
    WowGuestMachine: {"kind":"UInt16"},
    MachineIsSupported: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=True (can and should we use this?)
pub extern "SspiCli" fn GetUserNameExA(
    NameFormat: Windows.Win32.WindowsProgramming.EXTENDED_NAME_FORMAT,
    lpNameBuffer: {"kind""Ptr","child":{"kind":"SByte"}},
    nSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "SspiCli" fn GetUserNameExW(
    NameFormat: Windows.Win32.WindowsProgramming.EXTENDED_NAME_FORMAT,
    lpNameBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    nSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "SECUR32" fn GetComputerObjectNameA(
    NameFormat: Windows.Win32.WindowsProgramming.EXTENDED_NAME_FORMAT,
    lpNameBuffer: {"kind""Ptr","child":{"kind":"SByte"}},
    nSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "SECUR32" fn GetComputerObjectNameW(
    NameFormat: Windows.Win32.WindowsProgramming.EXTENDED_NAME_FORMAT,
    lpNameBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    nSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "SECUR32" fn TranslateNameA(
    lpAccountName: {"kind""Ptr","child":{"kind":"SByte"}},
    AccountNameFormat: Windows.Win32.WindowsProgramming.EXTENDED_NAME_FORMAT,
    DesiredNameFormat: Windows.Win32.WindowsProgramming.EXTENDED_NAME_FORMAT,
    lpTranslatedName: {"kind""Ptr","child":{"kind":"SByte"}},
    nSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "SECUR32" fn TranslateNameW(
    lpAccountName: {"kind""Ptr","child":{"kind":"UInt16"}},
    AccountNameFormat: Windows.Win32.WindowsProgramming.EXTENDED_NAME_FORMAT,
    DesiredNameFormat: Windows.Win32.WindowsProgramming.EXTENDED_NAME_FORMAT,
    lpTranslatedName: {"kind""Ptr","child":{"kind":"UInt16"}},
    nSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrSimpleStructMarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrComplexStructMarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantArrayMarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrComplexArrayMarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrSimpleStructUnmarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    ppMemory: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},
    fMustAlloc: {"kind":"Byte"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrComplexStructUnmarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    ppMemory: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},
    fMustAlloc: {"kind":"Byte"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrComplexArrayUnmarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    ppMemory: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},
    fMustAlloc: {"kind":"Byte"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrUserMarshalUnmarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    ppMemory: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},
    fMustAlloc: {"kind":"Byte"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrSimpleStructBufferSize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrComplexStructBufferSize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantArrayBufferSize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrComplexArrayBufferSize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-apiquery-l2-1-0" fn IsApiSetImplemented(
    Contract: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetEnvironmentStringsW(
    NewEnvironment: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetStdHandle(
    nStdHandle: Windows.Win32.WindowsProgramming.STD_HANDLE_TYPE,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetStdHandle(
    nStdHandle: Windows.Win32.WindowsProgramming.STD_HANDLE_TYPE,
    hHandle: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetStdHandleEx(
    nStdHandle: Windows.Win32.WindowsProgramming.STD_HANDLE_TYPE,
    hHandle: Windows.Win32.SystemServices.HANDLE,
    phPrevValue: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn ExpandEnvironmentStringsA(
    lpSrc: {"kind""Ptr","child":{"kind":"SByte"}},
    lpDst: {"kind""Ptr","child":{"kind":"SByte"}},
    nSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn ExpandEnvironmentStringsW(
    lpSrc: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpDst: {"kind""Ptr","child":{"kind":"UInt16"}},
    nSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetCurrentDirectoryA(
    lpPathName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetCurrentDirectoryW(
    lpPathName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetCurrentDirectoryA(
    nBufferLength: {"kind":"UInt32"},
    lpBuffer: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetCurrentDirectoryW(
    nBufferLength: {"kind":"UInt32"},
    lpBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CloseHandle(
    hObject: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn DuplicateHandle(
    hSourceProcessHandle: Windows.Win32.SystemServices.HANDLE,
    hSourceHandle: Windows.Win32.SystemServices.HANDLE,
    hTargetProcessHandle: Windows.Win32.SystemServices.HANDLE,
    lpTargetHandle: {"kind""Ptr","child":{"kind":"IntPtr"}},
    dwDesiredAccess: {"kind":"UInt32"},
    bInheritHandle: Windows.Win32.SystemServices.BOOL,
    dwOptions: Windows.Win32.WindowsProgramming.DUPLICATE_HANDLE_OPTIONS,

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-handle-l1-1-0" fn CompareObjectHandles(
    hFirstObjectHandle: Windows.Win32.SystemServices.HANDLE,
    hSecondObjectHandle: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetHandleInformation(
    hObject: Windows.Win32.SystemServices.HANDLE,
    lpdwFlags: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetHandleInformation(
    hObject: Windows.Win32.SystemServices.HANDLE,
    dwMask: {"kind":"UInt32"},
    dwFlags: Windows.Win32.WindowsProgramming.HANDLE_FLAG_OPTIONS,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn QueryPerformanceCounter(
    lpPerformanceCount: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn QueryPerformanceFrequency(
    lpFrequency: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetProcessDynamicEHContinuationTargets(
    Process: Windows.Win32.SystemServices.HANDLE,
    NumberOfTargets: {"kind":"UInt16"},
    Targets: {"kind""Ptr","child":Windows.Win32.SystemServices.PROCESS_DYNAMIC_EH_CONTINUATION_TARGET},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn IsProcessorFeaturePresent(
    ProcessorFeature: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetSystemTimes(
    lpIdleTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    lpKernelTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    lpUserTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetSystemCpuSetInformation(
    Information: {"kind""Ptr","child":Windows.Win32.SystemServices.SYSTEM_CPU_SET_INFORMATION},
    BufferLength: {"kind":"UInt32"},
    ReturnedLength: {"kind""Ptr","child":{"kind":"UInt32"}},
    Process: Windows.Win32.SystemServices.HANDLE,
    Flags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetProcessDefaultCpuSets(
    Process: Windows.Win32.SystemServices.HANDLE,
    CpuSetIds: {"kind""Ptr","child":{"kind":"UInt32"}},
    CpuSetIdCount: {"kind":"UInt32"},
    RequiredIdCount: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetProcessDefaultCpuSets(
    Process: Windows.Win32.SystemServices.HANDLE,
    CpuSetIds: {"kind""Ptr","child":{"kind":"UInt32"}},
    CpuSetIdCount: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetThreadSelectedCpuSets(
    Thread: Windows.Win32.SystemServices.HANDLE,
    CpuSetIds: {"kind""Ptr","child":{"kind":"UInt32"}},
    CpuSetIdCount: {"kind":"UInt32"},
    RequiredIdCount: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetThreadSelectedCpuSets(
    Thread: Windows.Win32.SystemServices.HANDLE,
    CpuSetIds: {"kind""Ptr","child":{"kind":"UInt32"}},
    CpuSetIdCount: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetSystemInfo(
    lpSystemInfo: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.SYSTEM_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetSystemTime(
    lpSystemTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.SYSTEMTIME},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetSystemTimeAsFileTime(
    lpSystemTimeAsFileTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetLocalTime(
    lpSystemTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.SYSTEMTIME},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn IsUserCetAvailableInEnvironment(
    UserCetEnvironment: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetSystemLeapSecondInformation(
    Enabled: {"kind""Ptr","child":{"kind":"Int32"}},
    Flags: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetVersion(

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetLocalTime(
    lpSystemTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.SYSTEMTIME},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetTickCount(

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetTickCount64(

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetSystemTimeAdjustment(
    lpTimeAdjustment: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpTimeIncrement: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpTimeAdjustmentDisabled: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=True (can and should we use this?)
pub extern "api-ms-win-core-sysinfo-l1-2-4" fn GetSystemTimeAdjustmentPrecise(
    lpTimeAdjustment: {"kind""Ptr","child":{"kind":"UInt64"}},
    lpTimeIncrement: {"kind""Ptr","child":{"kind":"UInt64"}},
    lpTimeAdjustmentDisabled: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetSystemDirectoryA(
    lpBuffer: {"kind""Ptr","child":{"kind":"SByte"}},
    uSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetSystemDirectoryW(
    lpBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    uSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetWindowsDirectoryA(
    lpBuffer: {"kind""Ptr","child":{"kind":"SByte"}},
    uSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetWindowsDirectoryW(
    lpBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    uSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetSystemWindowsDirectoryA(
    lpBuffer: {"kind""Ptr","child":{"kind":"SByte"}},
    uSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetSystemWindowsDirectoryW(
    lpBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    uSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetComputerNameExA(
    NameType: Windows.Win32.WindowsProgramming.COMPUTER_NAME_FORMAT,
    lpBuffer: {"kind""Ptr","child":{"kind":"SByte"}},
    nSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetComputerNameExW(
    NameType: Windows.Win32.WindowsProgramming.COMPUTER_NAME_FORMAT,
    lpBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    nSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetComputerNameExW(
    NameType: Windows.Win32.WindowsProgramming.COMPUTER_NAME_FORMAT,
    lpBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetSystemTime(
    lpSystemTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.SYSTEMTIME},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetVersionExA(
    lpVersionInformation: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.OSVERSIONINFOA},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetVersionExW(
    lpVersionInformation: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.OSVERSIONINFOW},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetNativeSystemInfo(
    lpSystemInfo: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.SYSTEM_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetSystemTimePreciseAsFileTime(
    lpSystemTimeAsFileTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetProductInfo(
    dwOSMajorVersion: {"kind":"UInt32"},
    dwOSMinorVersion: {"kind":"UInt32"},
    dwSpMajorVersion: {"kind":"UInt32"},
    dwSpMinorVersion: {"kind":"UInt32"},
    pdwReturnedProductType: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn VerSetConditionMask(
    ConditionMask: {"kind":"UInt64"},
    TypeMask: {"kind":"UInt32"},
    Condition: {"kind":"Byte"},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-sysinfo-l1-2-0" fn GetOsSafeBootMode(
    Flags: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn EnumSystemFirmwareTables(
    FirmwareTableProviderSignature: {"kind":"UInt32"},
    pFirmwareTableEnumBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    BufferSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetSystemFirmwareTable(
    FirmwareTableProviderSignature: {"kind":"UInt32"},
    FirmwareTableID: {"kind":"UInt32"},
    pFirmwareTableBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    BufferSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn DnsHostnameToComputerNameExW(
    Hostname: {"kind""Ptr","child":{"kind":"UInt16"}},
    ComputerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    nSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetComputerNameEx2W(
    NameType: Windows.Win32.WindowsProgramming.COMPUTER_NAME_FORMAT,
    Flags: {"kind":"UInt32"},
    lpBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetSystemTimeAdjustment(
    dwTimeAdjustment: {"kind":"UInt32"},
    bTimeAdjustmentDisabled: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "api-ms-win-core-sysinfo-l1-2-4" fn SetSystemTimeAdjustmentPrecise(
    dwTimeAdjustment: {"kind":"UInt64"},
    bTimeAdjustmentDisabled: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-sysinfo-l1-2-3" fn GetOsManufacturingMode(
    pbEnabled: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-sysinfo-l1-2-3" fn GetIntegratedDisplaySize(
    sizeInInches: {"kind""Ptr","child":{"kind":"Double"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetComputerNameA(
    lpComputerName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetComputerNameW(
    lpComputerName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetComputerNameExA(
    NameType: Windows.Win32.WindowsProgramming.COMPUTER_NAME_FORMAT,
    lpBuffer: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-realtime-l1-1-1" fn QueryInterruptTimePrecise(
    lpInterruptTimePrecise: {"kind""Ptr","child":{"kind":"UInt64"}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-realtime-l1-1-1" fn QueryUnbiasedInterruptTimePrecise(
    lpUnbiasedInterruptTimePrecise: {"kind""Ptr","child":{"kind":"UInt64"}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-realtime-l1-1-1" fn QueryInterruptTime(
    lpInterruptTime: {"kind""Ptr","child":{"kind":"UInt64"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn QueryUnbiasedInterruptTime(
    UnbiasedTime: {"kind""Ptr","child":{"kind":"UInt64"}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-realtime-l1-1-2" fn QueryAuxiliaryCounterFrequency(
    lpAuxiliaryCounterFrequency: {"kind""Ptr","child":{"kind":"UInt64"}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-realtime-l1-1-2" fn ConvertAuxiliaryCounterToPerformanceCounter(
    ullAuxiliaryCounterValue: {"kind":"UInt64"},
    lpPerformanceCounterValue: {"kind""Ptr","child":{"kind":"UInt64"}},
    lpConversionError: {"kind""Ptr","child":{"kind":"UInt64"}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-realtime-l1-1-2" fn ConvertPerformanceCounterToAuxiliaryCounter(
    ullPerformanceCounterValue: {"kind":"UInt64"},
    lpAuxiliaryCounterValue: {"kind""Ptr","child":{"kind":"UInt64"}},
    lpConversionError: {"kind""Ptr","child":{"kind":"UInt64"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GlobalCompact(
    dwMinFree: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GlobalFix(
    hMem: {"kind":"IntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GlobalUnfix(
    hMem: {"kind":"IntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GlobalWire(
    hMem: {"kind":"IntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GlobalUnWire(
    hMem: {"kind":"IntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn LocalShrink(
    hMem: {"kind":"IntPtr"},
    cbNewSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn LocalCompact(
    uMinFree: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetEnvironmentStringsA(
    NewEnvironment: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetHandleCount(
    uNumber: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn RequestDeviceWakeup(
    hDevice: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn CancelDeviceWakeupRequest(
    hDevice: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetMessageWaitingIndicator(
    hMsgIndicator: Windows.Win32.SystemServices.HANDLE,
    ulMsgCount: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn MulDiv(
    nNumber: {"kind":"Int32"},
    nNumerator: {"kind":"Int32"},
    nDenominator: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetSystemRegistryQuota(
    pdwQuotaAllowed: {"kind""Ptr","child":{"kind":"UInt32"}},
    pdwQuotaUsed: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FileTimeToDosDateTime(
    lpFileTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    lpFatDate: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpFatTime: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn DosDateTimeToFileTime(
    wFatDate: {"kind":"UInt16"},
    wFatTime: {"kind":"UInt16"},
    lpFileTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn _lopen(
    lpPathName: {"kind""Ptr","child":{"kind":"SByte"}},
    iReadWrite: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn _lcreat(
    lpPathName: {"kind""Ptr","child":{"kind":"SByte"}},
    iAttribute: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn _lread(
    hFile: {"kind":"Int32"},
    lpBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    uBytes: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn _lwrite(
    hFile: {"kind":"Int32"},
    lpBuffer: {"kind""Ptr","child":{"kind":"SByte"}},
    uBytes: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn _hread(
    hFile: {"kind":"Int32"},
    lpBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    lBytes: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn _hwrite(
    hFile: {"kind":"Int32"},
    lpBuffer: {"kind""Ptr","child":{"kind":"SByte"}},
    lBytes: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn _lclose(
    hFile: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn _llseek(
    hFile: {"kind":"Int32"},
    lOffset: {"kind":"Int32"},
    iOrigin: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn OpenMutexA(
    dwDesiredAccess: {"kind":"UInt32"},
    bInheritHandle: Windows.Win32.SystemServices.BOOL,
    lpName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn OpenSemaphoreA(
    dwDesiredAccess: {"kind":"UInt32"},
    bInheritHandle: Windows.Win32.SystemServices.BOOL,
    lpName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn CreateWaitableTimerA(
    lpTimerAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    bManualReset: Windows.Win32.SystemServices.BOOL,
    lpTimerName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn OpenWaitableTimerA(
    dwDesiredAccess: {"kind":"UInt32"},
    bInheritHandle: Windows.Win32.SystemServices.BOOL,
    lpTimerName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn CreateWaitableTimerExA(
    lpTimerAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    lpTimerName: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},
    dwDesiredAccess: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetStartupInfoA(
    lpStartupInfo: {"kind""Ptr","child":Windows.Win32.SystemServices.STARTUPINFOA},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetFirmwareEnvironmentVariableA(
    lpName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpGuid: {"kind""Ptr","child":{"kind":"SByte"}},
    pBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    nSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetFirmwareEnvironmentVariableW(
    lpName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpGuid: {"kind""Ptr","child":{"kind":"UInt16"}},
    pBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    nSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetFirmwareEnvironmentVariableExA(
    lpName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpGuid: {"kind""Ptr","child":{"kind":"SByte"}},
    pBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    nSize: {"kind":"UInt32"},
    pdwAttribubutes: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetFirmwareEnvironmentVariableExW(
    lpName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpGuid: {"kind""Ptr","child":{"kind":"UInt16"}},
    pBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    nSize: {"kind":"UInt32"},
    pdwAttribubutes: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetFirmwareEnvironmentVariableA(
    lpName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpGuid: {"kind""Ptr","child":{"kind":"SByte"}},
    pValue: {"kind""Ptr","child":{"kind":"Void"}},
    nSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetFirmwareEnvironmentVariableW(
    lpName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpGuid: {"kind""Ptr","child":{"kind":"UInt16"}},
    pValue: {"kind""Ptr","child":{"kind":"Void"}},
    nSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetFirmwareEnvironmentVariableExA(
    lpName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpGuid: {"kind""Ptr","child":{"kind":"SByte"}},
    pValue: {"kind""Ptr","child":{"kind":"Void"}},
    nSize: {"kind":"UInt32"},
    dwAttributes: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetFirmwareEnvironmentVariableExW(
    lpName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpGuid: {"kind""Ptr","child":{"kind":"UInt16"}},
    pValue: {"kind""Ptr","child":{"kind":"Void"}},
    nSize: {"kind":"UInt32"},
    dwAttributes: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetFirmwareType(
    FirmwareType: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FIRMWARE_TYPE},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn IsNativeVhdBoot(
    NativeVhdBoot: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetProfileIntA(
    lpAppName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpKeyName: {"kind""Ptr","child":{"kind":"SByte"}},
    nDefault: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetProfileIntW(
    lpAppName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpKeyName: {"kind""Ptr","child":{"kind":"UInt16"}},
    nDefault: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetProfileStringA(
    lpAppName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpKeyName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpDefault: {"kind""Ptr","child":{"kind":"SByte"}},
    lpReturnedString: {"kind""Ptr","child":{"kind":"SByte"}},
    nSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetProfileStringW(
    lpAppName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpKeyName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpDefault: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpReturnedString: {"kind""Ptr","child":{"kind":"UInt16"}},
    nSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn WriteProfileStringA(
    lpAppName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpKeyName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpString: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn WriteProfileStringW(
    lpAppName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpKeyName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpString: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetProfileSectionA(
    lpAppName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpReturnedString: {"kind""Ptr","child":{"kind":"SByte"}},
    nSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetProfileSectionW(
    lpAppName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpReturnedString: {"kind""Ptr","child":{"kind":"UInt16"}},
    nSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn WriteProfileSectionA(
    lpAppName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpString: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn WriteProfileSectionW(
    lpAppName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpString: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetPrivateProfileIntA(
    lpAppName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpKeyName: {"kind""Ptr","child":{"kind":"SByte"}},
    nDefault: {"kind":"Int32"},
    lpFileName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetPrivateProfileIntW(
    lpAppName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpKeyName: {"kind""Ptr","child":{"kind":"UInt16"}},
    nDefault: {"kind":"Int32"},
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetPrivateProfileStringA(
    lpAppName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpKeyName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpDefault: {"kind""Ptr","child":{"kind":"SByte"}},
    lpReturnedString: {"kind""Ptr","child":{"kind":"SByte"}},
    nSize: {"kind":"UInt32"},
    lpFileName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetPrivateProfileStringW(
    lpAppName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpKeyName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpDefault: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpReturnedString: {"kind""Ptr","child":{"kind":"UInt16"}},
    nSize: {"kind":"UInt32"},
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn WritePrivateProfileStringA(
    lpAppName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpKeyName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpString: {"kind""Ptr","child":{"kind":"SByte"}},
    lpFileName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn WritePrivateProfileStringW(
    lpAppName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpKeyName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpString: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetPrivateProfileSectionA(
    lpAppName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpReturnedString: {"kind""Ptr","child":{"kind":"SByte"}},
    nSize: {"kind":"UInt32"},
    lpFileName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetPrivateProfileSectionW(
    lpAppName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpReturnedString: {"kind""Ptr","child":{"kind":"UInt16"}},
    nSize: {"kind":"UInt32"},
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn WritePrivateProfileSectionA(
    lpAppName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpString: {"kind""Ptr","child":{"kind":"SByte"}},
    lpFileName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn WritePrivateProfileSectionW(
    lpAppName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpString: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetPrivateProfileSectionNamesA(
    lpszReturnBuffer: {"kind""Ptr","child":{"kind":"SByte"}},
    nSize: {"kind":"UInt32"},
    lpFileName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetPrivateProfileSectionNamesW(
    lpszReturnBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    nSize: {"kind":"UInt32"},
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetPrivateProfileStructA(
    lpszSection: {"kind""Ptr","child":{"kind":"SByte"}},
    lpszKey: {"kind""Ptr","child":{"kind":"SByte"}},
    lpStruct: {"kind""Ptr","child":{"kind":"Void"}},
    uSizeStruct: {"kind":"UInt32"},
    szFile: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetPrivateProfileStructW(
    lpszSection: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpszKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpStruct: {"kind""Ptr","child":{"kind":"Void"}},
    uSizeStruct: {"kind":"UInt32"},
    szFile: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn WritePrivateProfileStructA(
    lpszSection: {"kind""Ptr","child":{"kind":"SByte"}},
    lpszKey: {"kind""Ptr","child":{"kind":"SByte"}},
    lpStruct: {"kind""Ptr","child":{"kind":"Void"}},
    uSizeStruct: {"kind":"UInt32"},
    szFile: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn WritePrivateProfileStructW(
    lpszSection: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpszKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpStruct: {"kind""Ptr","child":{"kind":"Void"}},
    uSizeStruct: {"kind":"UInt32"},
    szFile: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn IsBadHugeReadPtr(
    lp: {"kind""Ptr","child":{"kind":"Void"}},
    ucb: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn IsBadHugeWritePtr(
    lp: {"kind""Ptr","child":{"kind":"Void"}},
    ucb: {"kind":"UIntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetComputerNameA(
    lpBuffer: {"kind""Ptr","child":{"kind":"SByte"}},
    nSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetComputerNameW(
    lpBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    nSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn DnsHostnameToComputerNameA(
    Hostname: {"kind""Ptr","child":{"kind":"SByte"}},
    ComputerName: {"kind""Ptr","child":{"kind":"SByte"}},
    nSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn DnsHostnameToComputerNameW(
    Hostname: {"kind""Ptr","child":{"kind":"UInt16"}},
    ComputerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    nSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetUserNameA(
    lpBuffer: {"kind""Ptr","child":{"kind":"SByte"}},
    pcbBuffer: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetUserNameW(
    lpBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcbBuffer: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn IsTokenUntrusted(
    TokenHandle: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetTimerQueueTimer(
    TimerQueue: Windows.Win32.SystemServices.HANDLE,
    Callback: Windows.Win32.SystemServices.WAITORTIMERCALLBACK,
    Parameter: {"kind""Ptr","child":{"kind":"Void"}},
    DueTime: {"kind":"UInt32"},
    Period: {"kind":"UInt32"},
    PreferIo: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn CancelTimerQueueTimer(
    TimerQueue: Windows.Win32.SystemServices.HANDLE,
    Timer: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetCurrentHwProfileA(
    lpHwProfileInfo: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HW_PROFILE_INFOA},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetCurrentHwProfileW(
    lpHwProfileInfo: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HW_PROFILE_INFOW},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn VerifyVersionInfoA(
    lpVersionInformation: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.OSVERSIONINFOEXA},
    dwTypeMask: {"kind":"UInt32"},
    dwlConditionMask: {"kind":"UInt64"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn VerifyVersionInfoW(
    lpVersionInformation: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.OSVERSIONINFOEXW},
    dwTypeMask: {"kind":"UInt32"},
    dwlConditionMask: {"kind":"UInt64"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SystemTimeToTzSpecificLocalTime(
    lpTimeZoneInformation: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.TIME_ZONE_INFORMATION},
    lpUniversalTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.SYSTEMTIME},
    lpLocalTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.SYSTEMTIME},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn TzSpecificLocalTimeToSystemTime(
    lpTimeZoneInformation: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.TIME_ZONE_INFORMATION},
    lpLocalTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.SYSTEMTIME},
    lpUniversalTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.SYSTEMTIME},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FileTimeToSystemTime(
    lpFileTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    lpSystemTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.SYSTEMTIME},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SystemTimeToFileTime(
    lpSystemTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.SYSTEMTIME},
    lpFileTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetTimeZoneInformation(
    lpTimeZoneInformation: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.TIME_ZONE_INFORMATION},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetTimeZoneInformation(
    lpTimeZoneInformation: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.TIME_ZONE_INFORMATION},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetDynamicTimeZoneInformation(
    lpTimeZoneInformation: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DYNAMIC_TIME_ZONE_INFORMATION},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetDynamicTimeZoneInformation(
    pTimeZoneInformation: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DYNAMIC_TIME_ZONE_INFORMATION},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetTimeZoneInformationForYear(
    wYear: {"kind":"UInt16"},
    pdtzi: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DYNAMIC_TIME_ZONE_INFORMATION},
    ptzi: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.TIME_ZONE_INFORMATION},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn EnumDynamicTimeZoneInformation(
    dwIndex: {"kind":"UInt32"},
    lpTimeZoneInformation: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DYNAMIC_TIME_ZONE_INFORMATION},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetDynamicTimeZoneInformationEffectiveYears(
    lpTimeZoneInformation: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DYNAMIC_TIME_ZONE_INFORMATION},
    FirstYear: {"kind""Ptr","child":{"kind":"UInt32"}},
    LastYear: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SystemTimeToTzSpecificLocalTimeEx(
    lpTimeZoneInformation: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DYNAMIC_TIME_ZONE_INFORMATION},
    lpUniversalTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.SYSTEMTIME},
    lpLocalTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.SYSTEMTIME},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn TzSpecificLocalTimeToSystemTimeEx(
    lpTimeZoneInformation: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DYNAMIC_TIME_ZONE_INFORMATION},
    lpLocalTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.SYSTEMTIME},
    lpUniversalTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.SYSTEMTIME},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn LocalFileTimeToLocalSystemTime(
    timeZoneInformation: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.TIME_ZONE_INFORMATION},
    localFileTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    localSystemTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.SYSTEMTIME},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn LocalSystemTimeToLocalFileTime(
    timeZoneInformation: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.TIME_ZONE_INFORMATION},
    localSystemTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.SYSTEMTIME},
    localFileTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn CreateJobSet(
    NumJob: {"kind":"UInt32"},
    UserJobSet: {"kind""Ptr","child":Windows.Win32.SystemServices.JOB_SET_ARRAY},
    Flags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn ReplacePartitionUnit(
    TargetPartition: {"kind""Ptr","child":{"kind":"UInt16"}},
    SparePartition: {"kind""Ptr","child":{"kind":"UInt16"}},
    Flags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn InitializeContext2(
    Buffer: {"kind""Ptr","child":{"kind":"Void"}},
    ContextFlags: {"kind":"UInt32"},
    Context: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Debug.CONTEXT}},
    ContextLength: {"kind""Ptr","child":{"kind":"UInt32"}},
    XStateCompactionMask: {"kind":"UInt64"},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-backgroundtask-l1-1-0" fn RaiseCustomSystemEventTrigger(
    CustomSystemEventTriggerConfig: {"kind""Ptr","child":Windows.Win32.SystemServices.CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegCloseKey(
    hKey: Windows.Win32.WindowsProgramming.HKEY,

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegOverridePredefKey(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    hNewHKey: Windows.Win32.WindowsProgramming.HKEY,

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegOpenUserClassesRoot(
    hToken: Windows.Win32.SystemServices.HANDLE,
    dwOptions: {"kind":"UInt32"},
    samDesired: {"kind":"UInt32"},
    phkResult: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HKEY},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegOpenCurrentUser(
    samDesired: {"kind":"UInt32"},
    phkResult: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HKEY},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegDisablePredefinedCache(

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegDisablePredefinedCacheEx(

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegConnectRegistryA(
    lpMachineName: {"kind""Ptr","child":{"kind":"SByte"}},
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    phkResult: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HKEY},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegConnectRegistryW(
    lpMachineName: {"kind""Ptr","child":{"kind":"UInt16"}},
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    phkResult: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HKEY},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegConnectRegistryExA(
    lpMachineName: {"kind""Ptr","child":{"kind":"SByte"}},
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    Flags: {"kind":"UInt32"},
    phkResult: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HKEY},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegConnectRegistryExW(
    lpMachineName: {"kind""Ptr","child":{"kind":"UInt16"}},
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    Flags: {"kind":"UInt32"},
    phkResult: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HKEY},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegCreateKeyA(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"SByte"}},
    phkResult: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HKEY},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegCreateKeyW(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    phkResult: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HKEY},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegCreateKeyExA(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"SByte"}},
    Reserved: {"kind":"UInt32"},
    lpClass: {"kind""Ptr","child":{"kind":"SByte"}},
    dwOptions: {"kind":"UInt32"},
    samDesired: {"kind":"UInt32"},
    lpSecurityAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    phkResult: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HKEY},
    lpdwDisposition: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegCreateKeyExW(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    Reserved: {"kind":"UInt32"},
    lpClass: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwOptions: {"kind":"UInt32"},
    samDesired: {"kind":"UInt32"},
    lpSecurityAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    phkResult: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HKEY},
    lpdwDisposition: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegCreateKeyTransactedA(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"SByte"}},
    Reserved: {"kind":"UInt32"},
    lpClass: {"kind""Ptr","child":{"kind":"SByte"}},
    dwOptions: {"kind":"UInt32"},
    samDesired: {"kind":"UInt32"},
    lpSecurityAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    phkResult: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HKEY},
    lpdwDisposition: {"kind""Ptr","child":{"kind":"UInt32"}},
    hTransaction: Windows.Win32.SystemServices.HANDLE,
    pExtendedParemeter: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegCreateKeyTransactedW(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    Reserved: {"kind":"UInt32"},
    lpClass: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwOptions: {"kind":"UInt32"},
    samDesired: {"kind":"UInt32"},
    lpSecurityAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    phkResult: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HKEY},
    lpdwDisposition: {"kind""Ptr","child":{"kind":"UInt32"}},
    hTransaction: Windows.Win32.SystemServices.HANDLE,
    pExtendedParemeter: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegDeleteKeyA(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegDeleteKeyW(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegDeleteKeyExA(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"SByte"}},
    samDesired: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegDeleteKeyExW(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    samDesired: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegDeleteKeyTransactedA(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"SByte"}},
    samDesired: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
    hTransaction: Windows.Win32.SystemServices.HANDLE,
    pExtendedParameter: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegDeleteKeyTransactedW(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    samDesired: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
    hTransaction: Windows.Win32.SystemServices.HANDLE,
    pExtendedParameter: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegDisableReflectionKey(
    hBase: Windows.Win32.WindowsProgramming.HKEY,

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegEnableReflectionKey(
    hBase: Windows.Win32.WindowsProgramming.HKEY,

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegQueryReflectionKey(
    hBase: Windows.Win32.WindowsProgramming.HKEY,
    bIsReflectionDisabled: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegDeleteValueA(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpValueName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegDeleteValueW(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpValueName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegEnumKeyA(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    dwIndex: {"kind":"UInt32"},
    lpName: {"kind""Ptr","child":{"kind":"SByte"}},
    cchName: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegEnumKeyW(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    dwIndex: {"kind":"UInt32"},
    lpName: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchName: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegEnumKeyExA(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    dwIndex: {"kind":"UInt32"},
    lpName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpcchName: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpReserved: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpClass: {"kind""Ptr","child":{"kind":"SByte"}},
    lpcchClass: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpftLastWriteTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegEnumKeyExW(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    dwIndex: {"kind":"UInt32"},
    lpName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpcchName: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpReserved: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpClass: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpcchClass: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpftLastWriteTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegEnumValueA(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    dwIndex: {"kind":"UInt32"},
    lpValueName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpcchValueName: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpReserved: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpType: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpData: {"kind""Ptr","child":{"kind":"Byte"}},
    lpcbData: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegEnumValueW(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    dwIndex: {"kind":"UInt32"},
    lpValueName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpcchValueName: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpReserved: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpType: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpData: {"kind""Ptr","child":{"kind":"Byte"}},
    lpcbData: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegFlushKey(
    hKey: Windows.Win32.WindowsProgramming.HKEY,

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegLoadKeyA(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"SByte"}},
    lpFile: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegLoadKeyW(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpFile: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegNotifyChangeKeyValue(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    bWatchSubtree: Windows.Win32.SystemServices.BOOL,
    dwNotifyFilter: {"kind":"UInt32"},
    hEvent: Windows.Win32.SystemServices.HANDLE,
    fAsynchronous: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegOpenKeyA(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"SByte"}},
    phkResult: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HKEY},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegOpenKeyW(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    phkResult: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HKEY},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegOpenKeyExA(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"SByte"}},
    ulOptions: {"kind":"UInt32"},
    samDesired: {"kind":"UInt32"},
    phkResult: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HKEY},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegOpenKeyExW(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    ulOptions: {"kind":"UInt32"},
    samDesired: {"kind":"UInt32"},
    phkResult: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HKEY},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegOpenKeyTransactedA(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"SByte"}},
    ulOptions: {"kind":"UInt32"},
    samDesired: {"kind":"UInt32"},
    phkResult: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HKEY},
    hTransaction: Windows.Win32.SystemServices.HANDLE,
    pExtendedParemeter: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegOpenKeyTransactedW(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    ulOptions: {"kind":"UInt32"},
    samDesired: {"kind":"UInt32"},
    phkResult: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HKEY},
    hTransaction: Windows.Win32.SystemServices.HANDLE,
    pExtendedParemeter: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegQueryInfoKeyA(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpClass: {"kind""Ptr","child":{"kind":"SByte"}},
    lpcchClass: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpReserved: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpcSubKeys: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpcbMaxSubKeyLen: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpcbMaxClassLen: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpcValues: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpcbMaxValueNameLen: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpcbMaxValueLen: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpcbSecurityDescriptor: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpftLastWriteTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegQueryInfoKeyW(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpClass: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpcchClass: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpReserved: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpcSubKeys: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpcbMaxSubKeyLen: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpcbMaxClassLen: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpcValues: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpcbMaxValueNameLen: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpcbMaxValueLen: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpcbSecurityDescriptor: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpftLastWriteTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegQueryValueA(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"SByte"}},
    lpData: {"kind""Ptr","child":{"kind":"SByte"}},
    lpcbData: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegQueryValueW(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpData: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpcbData: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegQueryMultipleValuesA(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    val_list: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.VALENTA},
    num_vals: {"kind":"UInt32"},
    lpValueBuf: {"kind""Ptr","child":{"kind":"SByte"}},
    ldwTotsize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegQueryMultipleValuesW(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    val_list: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.VALENTW},
    num_vals: {"kind":"UInt32"},
    lpValueBuf: {"kind""Ptr","child":{"kind":"UInt16"}},
    ldwTotsize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegQueryValueExA(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpValueName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpReserved: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpType: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpData: {"kind""Ptr","child":{"kind":"Byte"}},
    lpcbData: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegQueryValueExW(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpValueName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpReserved: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpType: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpData: {"kind""Ptr","child":{"kind":"Byte"}},
    lpcbData: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegReplaceKeyA(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"SByte"}},
    lpNewFile: {"kind""Ptr","child":{"kind":"SByte"}},
    lpOldFile: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegReplaceKeyW(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpNewFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpOldFile: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegRestoreKeyA(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpFile: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegRestoreKeyW(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegRenameKey(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKeyName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpNewKeyName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegSaveKeyA(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpFile: {"kind""Ptr","child":{"kind":"SByte"}},
    lpSecurityAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegSaveKeyW(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpSecurityAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegSetValueA(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"SByte"}},
    dwType: {"kind":"UInt32"},
    lpData: {"kind""Ptr","child":{"kind":"SByte"}},
    cbData: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegSetValueW(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwType: {"kind":"UInt32"},
    lpData: {"kind""Ptr","child":{"kind":"UInt16"}},
    cbData: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegSetValueExA(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpValueName: {"kind""Ptr","child":{"kind":"SByte"}},
    Reserved: {"kind":"UInt32"},
    dwType: {"kind":"UInt32"},
    lpData: {"kind""Ptr","child":{"kind":"Byte"}},
    cbData: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegSetValueExW(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpValueName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Reserved: {"kind":"UInt32"},
    dwType: {"kind":"UInt32"},
    lpData: {"kind""Ptr","child":{"kind":"Byte"}},
    cbData: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegUnLoadKeyA(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegUnLoadKeyW(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegDeleteKeyValueA(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"SByte"}},
    lpValueName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegDeleteKeyValueW(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpValueName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegSetKeyValueA(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"SByte"}},
    lpValueName: {"kind""Ptr","child":{"kind":"SByte"}},
    dwType: {"kind":"UInt32"},
    lpData: {"kind""Ptr","child":{"kind":"Void"}},
    cbData: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegSetKeyValueW(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpValueName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwType: {"kind":"UInt32"},
    lpData: {"kind""Ptr","child":{"kind":"Void"}},
    cbData: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegDeleteTreeA(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegDeleteTreeW(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegCopyTreeA(
    hKeySrc: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"SByte"}},
    hKeyDest: Windows.Win32.WindowsProgramming.HKEY,

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegGetValueA(
    hkey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"SByte"}},
    lpValue: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},
    pdwType: {"kind""Ptr","child":{"kind":"UInt32"}},
    pvData: {"kind""Ptr","child":{"kind":"Void"}},
    pcbData: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegGetValueW(
    hkey: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpValue: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    pdwType: {"kind""Ptr","child":{"kind":"UInt32"}},
    pvData: {"kind""Ptr","child":{"kind":"Void"}},
    pcbData: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegCopyTreeW(
    hKeySrc: Windows.Win32.WindowsProgramming.HKEY,
    lpSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    hKeyDest: Windows.Win32.WindowsProgramming.HKEY,

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegLoadMUIStringA(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    pszValue: {"kind""Ptr","child":{"kind":"SByte"}},
    pszOutBuf: {"kind""Ptr","child":{"kind":"SByte"}},
    cbOutBuf: {"kind":"UInt32"},
    pcbData: {"kind""Ptr","child":{"kind":"UInt32"}},
    Flags: {"kind":"UInt32"},
    pszDirectory: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegLoadMUIStringW(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    pszValue: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszOutBuf: {"kind""Ptr","child":{"kind":"UInt16"}},
    cbOutBuf: {"kind":"UInt32"},
    pcbData: {"kind""Ptr","child":{"kind":"UInt32"}},
    Flags: {"kind":"UInt32"},
    pszDirectory: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegLoadAppKeyA(
    lpFile: {"kind""Ptr","child":{"kind":"SByte"}},
    phkResult: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HKEY},
    samDesired: {"kind":"UInt32"},
    dwOptions: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegLoadAppKeyW(
    lpFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    phkResult: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HKEY},
    samDesired: {"kind":"UInt32"},
    dwOptions: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn CheckForHiberboot(
    pHiberboot: {"kind""Ptr","child":{"kind":"Byte"}},
    bClearFlag: {"kind":"Byte"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegSaveKeyExA(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpFile: {"kind""Ptr","child":{"kind":"SByte"}},
    lpSecurityAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    Flags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegSaveKeyExW(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    lpFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpSecurityAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    Flags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn NtClose(
    Handle: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn NtCreateFile(
    FileHandle: {"kind""Ptr","child":{"kind":"IntPtr"}},
    DesiredAccess: {"kind":"UInt32"},
    ObjectAttributes: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.OBJECT_ATTRIBUTES},
    IoStatusBlock: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.IO_STATUS_BLOCK},
    AllocationSize: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},
    FileAttributes: {"kind":"UInt32"},
    ShareAccess: {"kind":"UInt32"},
    CreateDisposition: {"kind":"UInt32"},
    CreateOptions: {"kind":"UInt32"},
    EaBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    EaLength: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn NtOpenFile(
    FileHandle: {"kind""Ptr","child":{"kind":"IntPtr"}},
    DesiredAccess: {"kind":"UInt32"},
    ObjectAttributes: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.OBJECT_ATTRIBUTES},
    IoStatusBlock: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.IO_STATUS_BLOCK},
    ShareAccess: {"kind":"UInt32"},
    OpenOptions: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn NtRenameKey(
    KeyHandle: Windows.Win32.SystemServices.HANDLE,
    NewName: {"kind""Ptr","child":Windows.Win32.Security.UNICODE_STRING},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn NtNotifyChangeMultipleKeys(
    MasterKeyHandle: Windows.Win32.SystemServices.HANDLE,
    Count: {"kind":"UInt32"},
    SubordinateObjects: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.OBJECT_ATTRIBUTES},
    Event: Windows.Win32.SystemServices.HANDLE,
    ApcRoutine: Windows.Win32.WindowsProgramming.PIO_APC_ROUTINE,
    ApcContext: {"kind""Ptr","child":{"kind":"Void"}},
    IoStatusBlock: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.IO_STATUS_BLOCK},
    CompletionFilter: {"kind":"UInt32"},
    WatchTree: {"kind":"Byte"},
    Buffer: {"kind""Ptr","child":{"kind":"Void"}},
    BufferSize: {"kind":"UInt32"},
    Asynchronous: {"kind":"Byte"},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn NtQueryMultipleValueKey(
    KeyHandle: Windows.Win32.SystemServices.HANDLE,
    ValueEntries: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.KEY_VALUE_ENTRY},
    EntryCount: {"kind":"UInt32"},
    ValueBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    BufferLength: {"kind""Ptr","child":{"kind":"UInt32"}},
    RequiredBufferLength: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn NtSetInformationKey(
    KeyHandle: Windows.Win32.SystemServices.HANDLE,
    KeySetInformationClass: Windows.Win32.WindowsProgramming.KEY_SET_INFORMATION_CLASS,
    KeySetInformation: {"kind""Ptr","child":{"kind":"Void"}},
    KeySetInformationLength: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn NtDeviceIoControlFile(
    FileHandle: Windows.Win32.SystemServices.HANDLE,
    Event: Windows.Win32.SystemServices.HANDLE,
    ApcRoutine: Windows.Win32.WindowsProgramming.PIO_APC_ROUTINE,
    ApcContext: {"kind""Ptr","child":{"kind":"Void"}},
    IoStatusBlock: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.IO_STATUS_BLOCK},
    IoControlCode: {"kind":"UInt32"},
    InputBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    InputBufferLength: {"kind":"UInt32"},
    OutputBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    OutputBufferLength: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn NtWaitForSingleObject(
    Handle: Windows.Win32.SystemServices.HANDLE,
    Alertable: {"kind":"Byte"},
    Timeout: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlIsNameLegalDOS8Dot3(
    Name: {"kind""Ptr","child":Windows.Win32.Security.UNICODE_STRING},
    OemName: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.STRING},
    NameContainsSpaces: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn NtQueryObject(
    Handle: Windows.Win32.SystemServices.HANDLE,
    ObjectInformationClass: Windows.Win32.WindowsProgramming.OBJECT_INFORMATION_CLASS,
    ObjectInformation: {"kind""Ptr","child":{"kind":"Void"}},
    ObjectInformationLength: {"kind":"UInt32"},
    ReturnLength: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn NtQuerySystemInformation(
    SystemInformationClass: Windows.Win32.WindowsProgramming.SYSTEM_INFORMATION_CLASS,
    SystemInformation: {"kind""Ptr","child":{"kind":"Void"}},
    SystemInformationLength: {"kind":"UInt32"},
    ReturnLength: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn NtQuerySystemTime(
    SystemTime: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlLocalTimeToSystemTime(
    LocalTime: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},
    SystemTime: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlTimeToSecondsSince1970(
    Time: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},
    ElapsedSeconds: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlFreeAnsiString(
    AnsiString: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.STRING},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlFreeUnicodeString(
    UnicodeString: {"kind""Ptr","child":Windows.Win32.Security.UNICODE_STRING},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlFreeOemString(
    OemString: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.STRING},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlInitString(
    DestinationString: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.STRING},
    SourceString: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlInitStringEx(
    DestinationString: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.STRING},
    SourceString: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlInitAnsiString(
    DestinationString: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.STRING},
    SourceString: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlInitAnsiStringEx(
    DestinationString: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.STRING},
    SourceString: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlInitUnicodeString(
    DestinationString: {"kind""Ptr","child":Windows.Win32.Security.UNICODE_STRING},
    SourceString: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlAnsiStringToUnicodeString(
    DestinationString: {"kind""Ptr","child":Windows.Win32.Security.UNICODE_STRING},
    SourceString: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.STRING},
    AllocateDestinationString: {"kind":"Byte"},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlUnicodeStringToAnsiString(
    DestinationString: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.STRING},
    SourceString: {"kind""Ptr","child":Windows.Win32.Security.UNICODE_STRING},
    AllocateDestinationString: {"kind":"Byte"},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlUnicodeStringToOemString(
    DestinationString: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.STRING},
    SourceString: {"kind""Ptr","child":Windows.Win32.Security.UNICODE_STRING},
    AllocateDestinationString: {"kind":"Byte"},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlUnicodeToMultiByteSize(
    BytesInMultiByteString: {"kind""Ptr","child":{"kind":"UInt32"}},
    UnicodeString: {"kind""Ptr","child":{"kind":"UInt16"}},
    BytesInUnicodeString: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlCharToInteger(
    String: {"kind""Ptr","child":{"kind":"SByte"}},
    Base: {"kind":"UInt32"},
    Value: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlUniform(
    Seed: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "Cabinet" fn FCICreate(
    perf: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.ERF},
    pfnfcifp: Windows.Win32.WindowsProgramming.PFNFCIFILEPLACED,
    pfna: Windows.Win32.WindowsProgramming.PFNFCIALLOC,
    pfnf: Windows.Win32.WindowsProgramming.PFNFCIFREE,
    pfnopen: Windows.Win32.WindowsProgramming.PFNFCIOPEN,
    pfnread: Windows.Win32.WindowsProgramming.PFNFCIREAD,
    pfnwrite: Windows.Win32.WindowsProgramming.PFNFCIWRITE,
    pfnclose: Windows.Win32.WindowsProgramming.PFNFCICLOSE,
    pfnseek: Windows.Win32.WindowsProgramming.PFNFCISEEK,
    pfndelete: Windows.Win32.WindowsProgramming.PFNFCIDELETE,
    pfnfcigtf: Windows.Win32.WindowsProgramming.PFNFCIGETTEMPFILE,
    pccab: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.CCAB},
    pv: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "Cabinet" fn FCIAddFile(
    hfci: {"kind""Ptr","child":{"kind":"Void"}},
    pszSourceFile: {"kind""Ptr","child":{"kind":"SByte"}},
    pszFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    fExecute: Windows.Win32.SystemServices.BOOL,
    pfnfcignc: Windows.Win32.WindowsProgramming.PFNFCIGETNEXTCABINET,
    pfnfcis: Windows.Win32.WindowsProgramming.PFNFCISTATUS,
    pfnfcigoi: Windows.Win32.WindowsProgramming.PFNFCIGETOPENINFO,
    typeCompress: {"kind":"UInt16"},

// set_last_errror=False (can and should we use this?)
pub extern "Cabinet" fn FCIFlushCabinet(
    hfci: {"kind""Ptr","child":{"kind":"Void"}},
    fGetNextCab: Windows.Win32.SystemServices.BOOL,
    pfnfcignc: Windows.Win32.WindowsProgramming.PFNFCIGETNEXTCABINET,
    pfnfcis: Windows.Win32.WindowsProgramming.PFNFCISTATUS,

// set_last_errror=False (can and should we use this?)
pub extern "Cabinet" fn FCIFlushFolder(
    hfci: {"kind""Ptr","child":{"kind":"Void"}},
    pfnfcignc: Windows.Win32.WindowsProgramming.PFNFCIGETNEXTCABINET,
    pfnfcis: Windows.Win32.WindowsProgramming.PFNFCISTATUS,

// set_last_errror=False (can and should we use this?)
pub extern "Cabinet" fn FCIDestroy(
    hfci: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "Cabinet" fn FDICreate(
    pfnalloc: Windows.Win32.WindowsProgramming.PFNALLOC,
    pfnfree: Windows.Win32.WindowsProgramming.PFNFREE,
    pfnopen: Windows.Win32.WindowsProgramming.PFNOPEN,
    pfnread: Windows.Win32.WindowsProgramming.PFNREAD,
    pfnwrite: Windows.Win32.WindowsProgramming.PFNWRITE,
    pfnclose: Windows.Win32.WindowsProgramming.PFNCLOSE,
    pfnseek: Windows.Win32.WindowsProgramming.PFNSEEK,
    cpuType: {"kind":"Int32"},
    perf: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.ERF},

// set_last_errror=False (can and should we use this?)
pub extern "Cabinet" fn FDIIsCabinet(
    hfdi: {"kind""Ptr","child":{"kind":"Void"}},
    hf: {"kind":"IntPtr"},
    pfdici: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FDICABINETINFO},

// set_last_errror=False (can and should we use this?)
pub extern "Cabinet" fn FDICopy(
    hfdi: {"kind""Ptr","child":{"kind":"Void"}},
    pszCabinet: {"kind""Ptr","child":{"kind":"SByte"}},
    pszCabPath: {"kind""Ptr","child":{"kind":"SByte"}},
    flags: {"kind":"Int32"},
    pfnfdin: Windows.Win32.WindowsProgramming.PFNFDINOTIFY,
    pfnfdid: Windows.Win32.WindowsProgramming.PFNFDIDECRYPT,
    pvUser: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "Cabinet" fn FDIDestroy(
    hfdi: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "Cabinet" fn FDITruncateCabinet(
    hfdi: {"kind""Ptr","child":{"kind":"Void"}},
    pszCabinetName: {"kind""Ptr","child":{"kind":"SByte"}},
    iFolderToDelete: {"kind":"UInt16"},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-featurestaging-l1-1-0" fn GetFeatureEnabledState(
    featureId: {"kind":"UInt32"},
    changeTime: Windows.Win32.WindowsProgramming.FEATURE_CHANGE_TIME,

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-featurestaging-l1-1-0" fn RecordFeatureUsage(
    featureId: {"kind":"UInt32"},
    kind: {"kind":"UInt32"},
    addend: {"kind":"UInt32"},
    originName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-featurestaging-l1-1-0" fn RecordFeatureError(
    featureId: {"kind":"UInt32"},
    error: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FEATURE_ERROR},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-featurestaging-l1-1-0" fn SubscribeFeatureStateChangeNotification(
    subscription: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.WindowsProgramming.FEATURE_STATE_CHANGE_SUBSCRIPTION__}},
    callback: Windows.Win32.WindowsProgramming.PFEATURE_STATE_CHANGE_CALLBACK,
    context: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-featurestaging-l1-1-0" fn UnsubscribeFeatureStateChangeNotification(
    subscription: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FEATURE_STATE_CHANGE_SUBSCRIPTION__},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-featurestaging-l1-1-1" fn GetFeatureVariant(
    featureId: {"kind":"UInt32"},
    changeTime: Windows.Win32.WindowsProgramming.FEATURE_CHANGE_TIME,
    payloadId: {"kind""Ptr","child":{"kind":"UInt32"}},
    hasNotification: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "fhsvcctl" fn FhServiceOpenPipe(
    StartServiceIfStopped: Windows.Win32.SystemServices.BOOL,
    Pipe: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.WindowsProgramming.FH_SERVICE_PIPE_HANDLE__}},

// set_last_errror=False (can and should we use this?)
pub extern "fhsvcctl" fn FhServiceClosePipe(
    Pipe: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FH_SERVICE_PIPE_HANDLE__},

// set_last_errror=False (can and should we use this?)
pub extern "fhsvcctl" fn FhServiceStartBackup(
    Pipe: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FH_SERVICE_PIPE_HANDLE__},
    LowPriorityIo: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "fhsvcctl" fn FhServiceStopBackup(
    Pipe: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FH_SERVICE_PIPE_HANDLE__},
    StopTracking: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "fhsvcctl" fn FhServiceReloadConfiguration(
    Pipe: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FH_SERVICE_PIPE_HANDLE__},

// set_last_errror=False (can and should we use this?)
pub extern "fhsvcctl" fn FhServiceBlockBackup(
    Pipe: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FH_SERVICE_PIPE_HANDLE__},

// set_last_errror=False (can and should we use this?)
pub extern "fhsvcctl" fn FhServiceUnblockBackup(
    Pipe: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FH_SERVICE_PIPE_HANDLE__},

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn DCIOpenProvider(

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn DCICloseProvider(
    hdc: Windows.Win32.Gdi.HDC,

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn DCICreatePrimary(
    hdc: Windows.Win32.Gdi.HDC,
    lplpSurface: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.WindowsProgramming.DCISURFACEINFO}},

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn DCICreateOffscreen(
    hdc: Windows.Win32.Gdi.HDC,
    dwCompression: {"kind":"UInt32"},
    dwRedMask: {"kind":"UInt32"},
    dwGreenMask: {"kind":"UInt32"},
    dwBlueMask: {"kind":"UInt32"},
    dwWidth: {"kind":"UInt32"},
    dwHeight: {"kind":"UInt32"},
    dwDCICaps: {"kind":"UInt32"},
    dwBitCount: {"kind":"UInt32"},
    lplpSurface: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.WindowsProgramming.DCIOFFSCREEN}},

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn DCICreateOverlay(
    hdc: Windows.Win32.Gdi.HDC,
    lpOffscreenSurf: {"kind""Ptr","child":{"kind":"Void"}},
    lplpSurface: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.WindowsProgramming.DCIOVERLAY}},

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn DCIEnum(
    hdc: Windows.Win32.Gdi.HDC,
    lprDst: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    lprSrc: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    lpFnCallback: {"kind""Ptr","child":{"kind":"Void"}},
    lpContext: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn DCISetSrcDestClip(
    pdci: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DCIOFFSCREEN},
    srcrc: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    destrc: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    prd: {"kind""Ptr","child":Windows.Win32.Gdi.RGNDATA},

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn WinWatchOpen(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn WinWatchClose(
    hWW: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HWINWATCH__},

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn WinWatchGetClipList(
    hWW: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HWINWATCH__},
    prc: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    size: {"kind":"UInt32"},
    prd: {"kind""Ptr","child":Windows.Win32.Gdi.RGNDATA},

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn WinWatchDidStatusChange(
    hWW: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HWINWATCH__},

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn GetWindowRegionData(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    size: {"kind":"UInt32"},
    prd: {"kind""Ptr","child":Windows.Win32.Gdi.RGNDATA},

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn GetDCRegionData(
    hdc: Windows.Win32.Gdi.HDC,
    size: {"kind":"UInt32"},
    prd: {"kind""Ptr","child":Windows.Win32.Gdi.RGNDATA},

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn WinWatchNotify(
    hWW: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HWINWATCH__},
    NotifyCallback: Windows.Win32.WindowsProgramming.WINWATCHNOTIFYPROC,
    NotifyParam: Windows.Win32.WindowsAndMessaging.LPARAM,

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn DCIEndAccess(
    pdci: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DCISURFACEINFO},

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn DCIBeginAccess(
    pdci: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DCISURFACEINFO},
    x: {"kind":"Int32"},
    y: {"kind":"Int32"},
    dx: {"kind":"Int32"},
    dy: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn DCIDestroy(
    pdci: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DCISURFACEINFO},

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn DCIDraw(
    pdci: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DCIOFFSCREEN},

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn DCISetClipList(
    pdci: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DCIOFFSCREEN},
    prd: {"kind""Ptr","child":Windows.Win32.Gdi.RGNDATA},

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn DCISetDestination(
    pdci: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DCIOFFSCREEN},
    dst: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    src: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-dx-d3dkmt-l1-1-0" fn GdiEntry13(

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn RunSetupCommandA(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    szCmdName: {"kind""Ptr","child":{"kind":"SByte"}},
    szInfSection: {"kind""Ptr","child":{"kind":"SByte"}},
    szDir: {"kind""Ptr","child":{"kind":"SByte"}},
    lpszTitle: {"kind""Ptr","child":{"kind":"SByte"}},
    phEXE: {"kind""Ptr","child":Windows.Win32.SystemServices.HANDLE},
    dwFlags: {"kind":"UInt32"},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn RunSetupCommandW(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    szCmdName: {"kind""Ptr","child":{"kind":"UInt16"}},
    szInfSection: {"kind""Ptr","child":{"kind":"UInt16"}},
    szDir: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpszTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    phEXE: {"kind""Ptr","child":Windows.Win32.SystemServices.HANDLE},
    dwFlags: {"kind":"UInt32"},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn NeedRebootInit(

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn NeedReboot(
    dwRebootCheck: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn RebootCheckOnInstallA(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    pszINF: {"kind""Ptr","child":{"kind":"SByte"}},
    pszSec: {"kind""Ptr","child":{"kind":"SByte"}},
    dwReserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn RebootCheckOnInstallW(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    pszINF: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszSec: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwReserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn TranslateInfStringA(
    pszInfFilename: {"kind""Ptr","child":{"kind":"SByte"}},
    pszInstallSection: {"kind""Ptr","child":{"kind":"SByte"}},
    pszTranslateSection: {"kind""Ptr","child":{"kind":"SByte"}},
    pszTranslateKey: {"kind""Ptr","child":{"kind":"SByte"}},
    pszBuffer: {"kind""Ptr","child":{"kind":"SByte"}},
    cchBuffer: {"kind":"UInt32"},
    pdwRequiredSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn TranslateInfStringW(
    pszInfFilename: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszInstallSection: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszTranslateSection: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszTranslateKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchBuffer: {"kind":"UInt32"},
    pdwRequiredSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn RegInstallA(
    hmod: {"kind":"IntPtr"},
    pszSection: {"kind""Ptr","child":{"kind":"SByte"}},
    pstTable: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.STRTABLEA},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn RegInstallW(
    hmod: {"kind":"IntPtr"},
    pszSection: {"kind""Ptr","child":{"kind":"UInt16"}},
    pstTable: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.STRTABLEW},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn LaunchINFSectionExW(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    pszParms: {"kind""Ptr","child":{"kind":"UInt16"}},
    nShow: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn ExecuteCabA(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    pCab: {"kind""Ptr","child":Windows.Win32.WindowsProgramming._CabInfoA},
    pReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn ExecuteCabW(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    pCab: {"kind""Ptr","child":Windows.Win32.WindowsProgramming._CabInfoW},
    pReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn AdvInstallFileA(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    lpszSourceDir: {"kind""Ptr","child":{"kind":"SByte"}},
    lpszSourceFile: {"kind""Ptr","child":{"kind":"SByte"}},
    lpszDestDir: {"kind""Ptr","child":{"kind":"SByte"}},
    lpszDestFile: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},
    dwReserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn AdvInstallFileW(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    lpszSourceDir: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpszSourceFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpszDestDir: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpszDestFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    dwReserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn RegSaveRestoreA(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    pszTitleString: {"kind""Ptr","child":{"kind":"SByte"}},
    hkBckupKey: Windows.Win32.WindowsProgramming.HKEY,
    pcszRootKey: {"kind""Ptr","child":{"kind":"SByte"}},
    pcszSubKey: {"kind""Ptr","child":{"kind":"SByte"}},
    pcszValueName: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn RegSaveRestoreW(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    pszTitleString: {"kind""Ptr","child":{"kind":"UInt16"}},
    hkBckupKey: Windows.Win32.WindowsProgramming.HKEY,
    pcszRootKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcszSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcszValueName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn RegSaveRestoreOnINFA(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    pszTitle: {"kind""Ptr","child":{"kind":"SByte"}},
    pszINF: {"kind""Ptr","child":{"kind":"SByte"}},
    pszSection: {"kind""Ptr","child":{"kind":"SByte"}},
    hHKLMBackKey: Windows.Win32.WindowsProgramming.HKEY,
    hHKCUBackKey: Windows.Win32.WindowsProgramming.HKEY,
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn RegSaveRestoreOnINFW(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    pszTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszINF: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszSection: {"kind""Ptr","child":{"kind":"UInt16"}},
    hHKLMBackKey: Windows.Win32.WindowsProgramming.HKEY,
    hHKCUBackKey: Windows.Win32.WindowsProgramming.HKEY,
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn RegRestoreAllA(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    pszTitleString: {"kind""Ptr","child":{"kind":"SByte"}},
    hkBckupKey: Windows.Win32.WindowsProgramming.HKEY,

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn RegRestoreAllW(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    pszTitleString: {"kind""Ptr","child":{"kind":"UInt16"}},
    hkBckupKey: Windows.Win32.WindowsProgramming.HKEY,

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn FileSaveRestoreW(
    hDlg: Windows.Win32.WindowsAndMessaging.HWND,
    lpFileList: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpDir: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpBaseName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn FileSaveRestoreOnINFA(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    pszTitle: {"kind""Ptr","child":{"kind":"SByte"}},
    pszINF: {"kind""Ptr","child":{"kind":"SByte"}},
    pszSection: {"kind""Ptr","child":{"kind":"SByte"}},
    pszBackupDir: {"kind""Ptr","child":{"kind":"SByte"}},
    pszBaseBackupFile: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn FileSaveRestoreOnINFW(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    pszTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszINF: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszSection: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszBackupDir: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszBaseBackupFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn AddDelBackupEntryA(
    lpcszFileList: {"kind""Ptr","child":{"kind":"SByte"}},
    lpcszBackupDir: {"kind""Ptr","child":{"kind":"SByte"}},
    lpcszBaseName: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn AddDelBackupEntryW(
    lpcszFileList: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpcszBackupDir: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpcszBaseName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn FileSaveMarkNotExistA(
    lpFileList: {"kind""Ptr","child":{"kind":"SByte"}},
    lpDir: {"kind""Ptr","child":{"kind":"SByte"}},
    lpBaseName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn FileSaveMarkNotExistW(
    lpFileList: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpDir: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpBaseName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn GetVersionFromFileA(
    lpszFilename: {"kind""Ptr","child":{"kind":"SByte"}},
    pdwMSVer: {"kind""Ptr","child":{"kind":"UInt32"}},
    pdwLSVer: {"kind""Ptr","child":{"kind":"UInt32"}},
    bVersion: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn GetVersionFromFileW(
    lpszFilename: {"kind""Ptr","child":{"kind":"UInt16"}},
    pdwMSVer: {"kind""Ptr","child":{"kind":"UInt32"}},
    pdwLSVer: {"kind""Ptr","child":{"kind":"UInt32"}},
    bVersion: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn GetVersionFromFileExA(
    lpszFilename: {"kind""Ptr","child":{"kind":"SByte"}},
    pdwMSVer: {"kind""Ptr","child":{"kind":"UInt32"}},
    pdwLSVer: {"kind""Ptr","child":{"kind":"UInt32"}},
    bVersion: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn GetVersionFromFileExW(
    lpszFilename: {"kind""Ptr","child":{"kind":"UInt16"}},
    pdwMSVer: {"kind""Ptr","child":{"kind":"UInt32"}},
    pdwLSVer: {"kind""Ptr","child":{"kind":"UInt32"}},
    bVersion: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn IsNTAdmin(
    dwReserved: {"kind":"UInt32"},
    lpdwReserved: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn DelNodeA(
    pszFileOrDirName: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn DelNodeW(
    pszFileOrDirName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn DelNodeRunDLL32W(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    pszParms: {"kind""Ptr","child":{"kind":"UInt16"}},
    nShow: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn OpenINFEngineA(
    pszInfFilename: {"kind""Ptr","child":{"kind":"SByte"}},
    pszInstallSection: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},
    phInf: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn OpenINFEngineW(
    pszInfFilename: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszInstallSection: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    phInf: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn TranslateInfStringExA(
    hInf: {"kind""Ptr","child":{"kind":"Void"}},
    pszInfFilename: {"kind""Ptr","child":{"kind":"SByte"}},
    pszTranslateSection: {"kind""Ptr","child":{"kind":"SByte"}},
    pszTranslateKey: {"kind""Ptr","child":{"kind":"SByte"}},
    pszBuffer: {"kind""Ptr","child":{"kind":"SByte"}},
    dwBufferSize: {"kind":"UInt32"},
    pdwRequiredSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn TranslateInfStringExW(
    hInf: {"kind""Ptr","child":{"kind":"Void"}},
    pszInfFilename: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszTranslateSection: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszTranslateKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwBufferSize: {"kind":"UInt32"},
    pdwRequiredSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn CloseINFEngine(
    hInf: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn ExtractFilesA(
    pszCabName: {"kind""Ptr","child":{"kind":"SByte"}},
    pszExpandDir: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},
    pszFileList: {"kind""Ptr","child":{"kind":"SByte"}},
    lpReserved: {"kind""Ptr","child":{"kind":"Void"}},
    dwReserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn ExtractFilesW(
    pszCabName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszExpandDir: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    pszFileList: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpReserved: {"kind""Ptr","child":{"kind":"Void"}},
    dwReserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn LaunchINFSectionW(
    hwndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    pszParams: {"kind""Ptr","child":{"kind":"UInt16"}},
    nShow: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn UserInstStubWrapperA(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    pszParms: {"kind""Ptr","child":{"kind":"SByte"}},
    nShow: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn UserInstStubWrapperW(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    pszParms: {"kind""Ptr","child":{"kind":"UInt16"}},
    nShow: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn UserUnInstStubWrapperA(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    pszParms: {"kind""Ptr","child":{"kind":"SByte"}},
    nShow: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn UserUnInstStubWrapperW(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    pszParms: {"kind""Ptr","child":{"kind":"UInt16"}},
    nShow: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn SetPerUserSecValuesA(
    pPerUser: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.PERUSERSECTIONA},

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn SetPerUserSecValuesW(
    pPerUser: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.PERUSERSECTIONW},

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn SendIMEMessageExA(
    param0: Windows.Win32.WindowsAndMessaging.HWND,
    param1: Windows.Win32.WindowsAndMessaging.LPARAM,

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn SendIMEMessageExW(
    param0: Windows.Win32.WindowsAndMessaging.HWND,
    param1: Windows.Win32.WindowsAndMessaging.LPARAM,

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn IMPGetIMEA(
    param0: Windows.Win32.WindowsAndMessaging.HWND,
    param1: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.IMEPROA},

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn IMPGetIMEW(
    param0: Windows.Win32.WindowsAndMessaging.HWND,
    param1: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.IMEPROW},

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn IMPQueryIMEA(
    param0: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.IMEPROA},

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn IMPQueryIMEW(
    param0: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.IMEPROW},

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn IMPSetIMEA(
    param0: Windows.Win32.WindowsAndMessaging.HWND,
    param1: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.IMEPROA},

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn IMPSetIMEW(
    param0: Windows.Win32.WindowsAndMessaging.HWND,
    param1: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.IMEPROW},

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn WINNLSGetIMEHotkey(
    param0: Windows.Win32.WindowsAndMessaging.HWND,

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn WINNLSEnableIME(
    param0: Windows.Win32.WindowsAndMessaging.HWND,
    param1: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn WINNLSGetEnableStatus(
    param0: Windows.Win32.WindowsAndMessaging.HWND,

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-security-isolatedcontainer-l1-1-1" fn IsProcessInWDAGContainer(
    Reserved: {"kind""Ptr","child":{"kind":"Void"}},
    isProcessInWDAGContainer: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-security-isolatedcontainer-l1-1-0" fn IsProcessInIsolatedContainer(
    isProcessInIsolatedContainer: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WSCAPI" fn WscRegisterForChanges(
    Reserved: {"kind""Ptr","child":{"kind":"Void"}},
    phCallbackRegistration: {"kind""Ptr","child":{"kind":"IntPtr"}},
    lpCallbackAddress: Windows.Win32.SystemServices.LPTHREAD_START_ROUTINE,
    pContext: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "WSCAPI" fn WscUnRegisterChanges(
    hRegistrationHandle: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "WSCAPI" fn WscRegisterForUserNotifications(

// set_last_errror=False (can and should we use this?)
pub extern "WSCAPI" fn WscGetSecurityProviderHealth(
    Providers: {"kind":"UInt32"},
    pHealth: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.WSC_SECURITY_PROVIDER_HEALTH},

// set_last_errror=False (can and should we use this?)
pub extern "WSCAPI" fn WscQueryAntiMalwareUri(

// set_last_errror=False (can and should we use this?)
pub extern "WSCAPI" fn WscGetAntiMalwareUri(
    ppszUri: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "APPHELP" fn ApphelpCheckShellObject(
    ObjectCLSID: {"kind""Ptr","child":Guid},
    bShimIfNecessary: Windows.Win32.SystemServices.BOOL,
    pullFlags: {"kind""Ptr","child":{"kind":"UInt64"}},

// set_last_errror=False (can and should we use this?)
pub extern "Wldp" fn WldpGetLockdownPolicy(
    hostInformation: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.WLDP_HOST_INFORMATION},
    lockdownState: {"kind""Ptr","child":{"kind":"UInt32"}},
    lockdownFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "Wldp" fn WldpIsClassInApprovedList(
    classID: {"kind""Ptr","child":Guid},
    hostInformation: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.WLDP_HOST_INFORMATION},
    isApproved: {"kind""Ptr","child":{"kind":"Int32"}},
    optionalFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "Wldp" fn WldpSetDynamicCodeTrust(
    fileHandle: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "Wldp" fn WldpIsDynamicCodePolicyEnabled(
    isEnabled: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "Wldp" fn WldpQueryDynamicCodeTrust(
    fileHandle: Windows.Win32.SystemServices.HANDLE,
    baseImage: {"kind""Ptr","child":{"kind":"Void"}},
    imageSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn CeipIsOptedIn(

// set_last_errror=False (can and should we use this?)
pub extern "XmlLite" fn CreateXmlReader(
    riid: {"kind""Ptr","child":Guid},
    ppvObject: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pMalloc: Windows.Win32.Com.IMalloc,

// set_last_errror=False (can and should we use this?)
pub extern "XmlLite" fn CreateXmlReaderInputWithEncodingCodePage(
    pInputStream: Windows.Win32.Com.IUnknown,
    pMalloc: Windows.Win32.Com.IMalloc,
    nEncodingCodePage: {"kind":"UInt32"},
    fEncodingHint: Windows.Win32.SystemServices.BOOL,
    pwszBaseUri: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppInput: {"kind""Ptr","child":Windows.Win32.Com.IUnknown},

// set_last_errror=False (can and should we use this?)
pub extern "XmlLite" fn CreateXmlReaderInputWithEncodingName(
    pInputStream: Windows.Win32.Com.IUnknown,
    pMalloc: Windows.Win32.Com.IMalloc,
    pwszEncodingName: {"kind""Ptr","child":{"kind":"UInt16"}},
    fEncodingHint: Windows.Win32.SystemServices.BOOL,
    pwszBaseUri: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppInput: {"kind""Ptr","child":Windows.Win32.Com.IUnknown},

// set_last_errror=False (can and should we use this?)
pub extern "XmlLite" fn CreateXmlWriter(
    riid: {"kind""Ptr","child":Guid},
    ppvObject: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pMalloc: Windows.Win32.Com.IMalloc,

// set_last_errror=False (can and should we use this?)
pub extern "XmlLite" fn CreateXmlWriterOutputWithEncodingCodePage(
    pOutputStream: Windows.Win32.Com.IUnknown,
    pMalloc: Windows.Win32.Com.IMalloc,
    nEncodingCodePage: {"kind":"UInt32"},
    ppOutput: {"kind""Ptr","child":Windows.Win32.Com.IUnknown},

// set_last_errror=False (can and should we use this?)
pub extern "XmlLite" fn CreateXmlWriterOutputWithEncodingName(
    pOutputStream: Windows.Win32.Com.IUnknown,
    pMalloc: Windows.Win32.Com.IMalloc,
    pwszEncodingName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppOutput: {"kind""Ptr","child":Windows.Win32.Com.IUnknown},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-query-l1-1-0" fn DevCreateObjectQuery(
    ObjectType: Windows.Win32.WindowsProgramming.DEV_OBJECT_TYPE,
    QueryFlags: {"kind":"UInt32"},
    cRequestedProperties: {"kind":"UInt32"},
    pRequestedProperties: {"kind""Ptr","child":Windows.Win32.SystemServices.DEVPROPCOMPKEY},
    cFilterExpressionCount: {"kind":"UInt32"},
    pFilter: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DEVPROP_FILTER_EXPRESSION},
    pCallback: Windows.Win32.WindowsProgramming.PDEV_QUERY_RESULT_CALLBACK,
    pContext: {"kind""Ptr","child":{"kind":"Void"}},
    phDevQuery: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.WindowsProgramming.HDEVQUERY__}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-query-l1-1-1" fn DevCreateObjectQueryEx(
    ObjectType: Windows.Win32.WindowsProgramming.DEV_OBJECT_TYPE,
    QueryFlags: {"kind":"UInt32"},
    cRequestedProperties: {"kind":"UInt32"},
    pRequestedProperties: {"kind""Ptr","child":Windows.Win32.SystemServices.DEVPROPCOMPKEY},
    cFilterExpressionCount: {"kind":"UInt32"},
    pFilter: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DEVPROP_FILTER_EXPRESSION},
    cExtendedParameterCount: {"kind":"UInt32"},
    pExtendedParameters: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DEV_QUERY_PARAMETER},
    pCallback: Windows.Win32.WindowsProgramming.PDEV_QUERY_RESULT_CALLBACK,
    pContext: {"kind""Ptr","child":{"kind":"Void"}},
    phDevQuery: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.WindowsProgramming.HDEVQUERY__}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-query-l1-1-0" fn DevCreateObjectQueryFromId(
    ObjectType: Windows.Win32.WindowsProgramming.DEV_OBJECT_TYPE,
    pszObjectId: {"kind""Ptr","child":{"kind":"UInt16"}},
    QueryFlags: {"kind":"UInt32"},
    cRequestedProperties: {"kind":"UInt32"},
    pRequestedProperties: {"kind""Ptr","child":Windows.Win32.SystemServices.DEVPROPCOMPKEY},
    cFilterExpressionCount: {"kind":"UInt32"},
    pFilter: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DEVPROP_FILTER_EXPRESSION},
    pCallback: Windows.Win32.WindowsProgramming.PDEV_QUERY_RESULT_CALLBACK,
    pContext: {"kind""Ptr","child":{"kind":"Void"}},
    phDevQuery: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.WindowsProgramming.HDEVQUERY__}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-query-l1-1-1" fn DevCreateObjectQueryFromIdEx(
    ObjectType: Windows.Win32.WindowsProgramming.DEV_OBJECT_TYPE,
    pszObjectId: {"kind""Ptr","child":{"kind":"UInt16"}},
    QueryFlags: {"kind":"UInt32"},
    cRequestedProperties: {"kind":"UInt32"},
    pRequestedProperties: {"kind""Ptr","child":Windows.Win32.SystemServices.DEVPROPCOMPKEY},
    cFilterExpressionCount: {"kind":"UInt32"},
    pFilter: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DEVPROP_FILTER_EXPRESSION},
    cExtendedParameterCount: {"kind":"UInt32"},
    pExtendedParameters: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DEV_QUERY_PARAMETER},
    pCallback: Windows.Win32.WindowsProgramming.PDEV_QUERY_RESULT_CALLBACK,
    pContext: {"kind""Ptr","child":{"kind":"Void"}},
    phDevQuery: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.WindowsProgramming.HDEVQUERY__}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-query-l1-1-0" fn DevCreateObjectQueryFromIds(
    ObjectType: Windows.Win32.WindowsProgramming.DEV_OBJECT_TYPE,
    pszzObjectIds: {"kind""Ptr","child":{"kind":"UInt16"}},
    QueryFlags: {"kind":"UInt32"},
    cRequestedProperties: {"kind":"UInt32"},
    pRequestedProperties: {"kind""Ptr","child":Windows.Win32.SystemServices.DEVPROPCOMPKEY},
    cFilterExpressionCount: {"kind":"UInt32"},
    pFilter: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DEVPROP_FILTER_EXPRESSION},
    pCallback: Windows.Win32.WindowsProgramming.PDEV_QUERY_RESULT_CALLBACK,
    pContext: {"kind""Ptr","child":{"kind":"Void"}},
    phDevQuery: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.WindowsProgramming.HDEVQUERY__}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-query-l1-1-1" fn DevCreateObjectQueryFromIdsEx(
    ObjectType: Windows.Win32.WindowsProgramming.DEV_OBJECT_TYPE,
    pszzObjectIds: {"kind""Ptr","child":{"kind":"UInt16"}},
    QueryFlags: {"kind":"UInt32"},
    cRequestedProperties: {"kind":"UInt32"},
    pRequestedProperties: {"kind""Ptr","child":Windows.Win32.SystemServices.DEVPROPCOMPKEY},
    cFilterExpressionCount: {"kind":"UInt32"},
    pFilter: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DEVPROP_FILTER_EXPRESSION},
    cExtendedParameterCount: {"kind":"UInt32"},
    pExtendedParameters: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DEV_QUERY_PARAMETER},
    pCallback: Windows.Win32.WindowsProgramming.PDEV_QUERY_RESULT_CALLBACK,
    pContext: {"kind""Ptr","child":{"kind":"Void"}},
    phDevQuery: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.WindowsProgramming.HDEVQUERY__}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-query-l1-1-0" fn DevCloseObjectQuery(
    hDevQuery: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HDEVQUERY__},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-query-l1-1-0" fn DevGetObjects(
    ObjectType: Windows.Win32.WindowsProgramming.DEV_OBJECT_TYPE,
    QueryFlags: {"kind":"UInt32"},
    cRequestedProperties: {"kind":"UInt32"},
    pRequestedProperties: {"kind""Ptr","child":Windows.Win32.SystemServices.DEVPROPCOMPKEY},
    cFilterExpressionCount: {"kind":"UInt32"},
    pFilter: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DEVPROP_FILTER_EXPRESSION},
    pcObjectCount: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppObjects: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.WindowsProgramming.DEV_OBJECT}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-query-l1-1-1" fn DevGetObjectsEx(
    ObjectType: Windows.Win32.WindowsProgramming.DEV_OBJECT_TYPE,
    QueryFlags: {"kind":"UInt32"},
    cRequestedProperties: {"kind":"UInt32"},
    pRequestedProperties: {"kind""Ptr","child":Windows.Win32.SystemServices.DEVPROPCOMPKEY},
    cFilterExpressionCount: {"kind":"UInt32"},
    pFilter: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DEVPROP_FILTER_EXPRESSION},
    cExtendedParameterCount: {"kind":"UInt32"},
    pExtendedParameters: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DEV_QUERY_PARAMETER},
    pcObjectCount: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppObjects: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.WindowsProgramming.DEV_OBJECT}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-query-l1-1-0" fn DevFreeObjects(
    cObjectCount: {"kind":"UInt32"},
    pObjects: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DEV_OBJECT},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-query-l1-1-0" fn DevGetObjectProperties(
    ObjectType: Windows.Win32.WindowsProgramming.DEV_OBJECT_TYPE,
    pszObjectId: {"kind""Ptr","child":{"kind":"UInt16"}},
    QueryFlags: {"kind":"UInt32"},
    cRequestedProperties: {"kind":"UInt32"},
    pRequestedProperties: {"kind""Ptr","child":Windows.Win32.SystemServices.DEVPROPCOMPKEY},
    pcPropertyCount: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppProperties: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.SystemServices.DEVPROPERTY}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-query-l1-1-1" fn DevGetObjectPropertiesEx(
    ObjectType: Windows.Win32.WindowsProgramming.DEV_OBJECT_TYPE,
    pszObjectId: {"kind""Ptr","child":{"kind":"UInt16"}},
    QueryFlags: {"kind":"UInt32"},
    cRequestedProperties: {"kind":"UInt32"},
    pRequestedProperties: {"kind""Ptr","child":Windows.Win32.SystemServices.DEVPROPCOMPKEY},
    cExtendedParameterCount: {"kind":"UInt32"},
    pExtendedParameters: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.DEV_QUERY_PARAMETER},
    pcPropertyCount: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppProperties: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.SystemServices.DEVPROPERTY}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-query-l1-1-0" fn DevFreeObjectProperties(
    cPropertyCount: {"kind":"UInt32"},
    pProperties: {"kind""Ptr","child":Windows.Win32.SystemServices.DEVPROPERTY},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-query-l1-1-0" fn DevFindProperty(
    pKey: {"kind""Ptr","child":Windows.Win32.SystemServices.DEVPROPKEY},
    Store: Windows.Win32.SystemServices.DEVPROPSTORE,
    pszLocaleName: {"kind""Ptr","child":{"kind":"UInt16"}},
    cProperties: {"kind":"UInt32"},
    pProperties: {"kind""Ptr","child":Windows.Win32.SystemServices.DEVPROPERTY},

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn PfCreateInterface(
    dwName: {"kind":"UInt32"},
    inAction: Windows.Win32.WindowsProgramming._PfForwardAction,
    outAction: Windows.Win32.WindowsProgramming._PfForwardAction,
    bUseLog: Windows.Win32.SystemServices.BOOL,
    bMustBeUnique: Windows.Win32.SystemServices.BOOL,
    ppInterface: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn PfDeleteInterface(
    pInterface: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn PfAddFiltersToInterface(
    ih: {"kind""Ptr","child":{"kind":"Void"}},
    cInFilters: {"kind":"UInt32"},
    pfiltIn: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.PF_FILTER_DESCRIPTOR},
    cOutFilters: {"kind":"UInt32"},
    pfiltOut: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.PF_FILTER_DESCRIPTOR},
    pfHandle: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn PfRemoveFiltersFromInterface(
    ih: {"kind""Ptr","child":{"kind":"Void"}},
    cInFilters: {"kind":"UInt32"},
    pfiltIn: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.PF_FILTER_DESCRIPTOR},
    cOutFilters: {"kind":"UInt32"},
    pfiltOut: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.PF_FILTER_DESCRIPTOR},

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn PfRemoveFilterHandles(
    pInterface: {"kind""Ptr","child":{"kind":"Void"}},
    cFilters: {"kind":"UInt32"},
    pvHandles: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn PfUnBindInterface(
    pInterface: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn PfBindInterfaceToIndex(
    pInterface: {"kind""Ptr","child":{"kind":"Void"}},
    dwIndex: {"kind":"UInt32"},
    pfatLinkType: Windows.Win32.WindowsProgramming._PfAddresType,
    LinkIPAddress: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn PfBindInterfaceToIPAddress(
    pInterface: {"kind""Ptr","child":{"kind":"Void"}},
    pfatType: Windows.Win32.WindowsProgramming._PfAddresType,
    IPAddress: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn PfRebindFilters(
    pInterface: {"kind""Ptr","child":{"kind":"Void"}},
    pLateBindInfo: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.PF_LATEBIND_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn PfAddGlobalFilterToInterface(
    pInterface: {"kind""Ptr","child":{"kind":"Void"}},
    gfFilter: Windows.Win32.WindowsProgramming._GlobalFilter,

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn PfRemoveGlobalFilterFromInterface(
    pInterface: {"kind""Ptr","child":{"kind":"Void"}},
    gfFilter: Windows.Win32.WindowsProgramming._GlobalFilter,

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn PfMakeLog(
    hEvent: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn PfSetLogBuffer(
    pbBuffer: {"kind""Ptr","child":{"kind":"Byte"}},
    dwSize: {"kind":"UInt32"},
    dwThreshold: {"kind":"UInt32"},
    dwEntries: {"kind":"UInt32"},
    pdwLoggedEntries: {"kind""Ptr","child":{"kind":"UInt32"}},
    pdwLostEntries: {"kind""Ptr","child":{"kind":"UInt32"}},
    pdwSizeUsed: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn PfDeleteLog(

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn PfGetInterfaceStatistics(
    pInterface: {"kind""Ptr","child":{"kind":"Void"}},
    ppfStats: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.PF_INTERFACE_STATS},
    pdwBufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    fResetCounters: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn PfTestPacket(
    pInInterface: {"kind""Ptr","child":{"kind":"Void"}},
    pOutInterface: {"kind""Ptr","child":{"kind":"Void"}},
    cBytes: {"kind":"UInt32"},
    pbPacket: {"kind""Ptr","child":{"kind":"Byte"}},
    ppAction: {"kind""Ptr","child":Windows.Win32.WindowsProgramming._PfForwardAction},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-state-helpers-l1-1-0" fn GetRegistryValueWithFallbackW(
    hkeyPrimary: Windows.Win32.WindowsProgramming.HKEY,
    pwszPrimarySubKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    hkeyFallback: Windows.Win32.WindowsProgramming.HKEY,
    pwszFallbackSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszValue: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    pdwType: {"kind""Ptr","child":{"kind":"UInt32"}},
    pvData: {"kind""Ptr","child":{"kind":"Void"}},
    cbDataIn: {"kind":"UInt32"},
    pcbDataOut: {"kind""Ptr","child":{"kind":"UInt32"}},
],

"unicode_aliases": [
     "OSVERSIONINFO"
     "OSVERSIONINFOEX"
     "PGET_SYSTEM_WOW64_DIRECTORY_"
     "HW_PROFILE_INFO"
     "pvalue"
     "VALENT"
     "STRENTRY"
     "STRTABLE"
     "_CabInfo"
     "PERUSERSECTION"
     "IMEPRO"
     "InstallPerfDll"
     "GetSystemWow64Directory"
     "GetSystemWow64Directory2"
     "GetUserNameEx"
     "GetComputerObjectName"
     "TranslateName"
     "SetEnvironmentStrings"
     "ExpandEnvironmentStrings"
     "SetCurrentDirectory"
     "GetCurrentDirectory"
     "GetSystemDirectory"
     "GetWindowsDirectory"
     "GetSystemWindowsDirectory"
     "GetComputerNameEx"
     "SetComputerNameEx"
     "GetVersionEx"
     "SetComputerName"
     "GetFirmwareEnvironmentVariable"
     "GetFirmwareEnvironmentVariableEx"
     "SetFirmwareEnvironmentVariable"
     "SetFirmwareEnvironmentVariableEx"
     "GetProfileInt"
     "GetProfileString"
     "WriteProfileString"
     "GetProfileSection"
     "WriteProfileSection"
     "GetPrivateProfileInt"
     "GetPrivateProfileString"
     "WritePrivateProfileString"
     "GetPrivateProfileSection"
     "WritePrivateProfileSection"
     "GetPrivateProfileSectionNames"
     "GetPrivateProfileStruct"
     "WritePrivateProfileStruct"
     "GetComputerName"
     "DnsHostnameToComputerName"
     "GetUserName"
     "GetCurrentHwProfile"
     "VerifyVersionInfo"
     "RegConnectRegistry"
     "RegConnectRegistryEx"
     "RegCreateKey"
     "RegCreateKeyEx"
     "RegCreateKeyTransacted"
     "RegDeleteKey"
     "RegDeleteKeyEx"
     "RegDeleteKeyTransacted"
     "RegDeleteValue"
     "RegEnumKey"
     "RegEnumKeyEx"
     "RegEnumValue"
     "RegLoadKey"
     "RegOpenKey"
     "RegOpenKeyEx"
     "RegOpenKeyTransacted"
     "RegQueryInfoKey"
     "RegQueryValue"
     "RegQueryMultipleValues"
     "RegQueryValueEx"
     "RegReplaceKey"
     "RegRestoreKey"
     "RegSaveKey"
     "RegSetValue"
     "RegSetValueEx"
     "RegUnLoadKey"
     "RegDeleteKeyValue"
     "RegSetKeyValue"
     "RegDeleteTree"
     "RegCopyTree"
     "RegGetValue"
     "RegLoadMUIString"
     "RegLoadAppKey"
     "RegSaveKeyEx"
     "RunSetupCommand"
     "RebootCheckOnInstall"
     "TranslateInfString"
     "RegInstall"
     "ExecuteCab"
     "AdvInstallFile"
     "RegSaveRestore"
     "RegSaveRestoreOnINF"
     "RegRestoreAll"
     "FileSaveRestoreOnINF"
     "AddDelBackupEntry"
     "FileSaveMarkNotExist"
     "GetVersionFromFile"
     "GetVersionFromFileEx"
     "DelNode"
     "OpenINFEngine"
     "TranslateInfStringEx"
     "ExtractFiles"
     "UserInstStubWrapper"
     "UserUnInstStubWrapper"
     "SetPerUserSecValues"
     "SendIMEMessageEx"
     "IMPGetIME"
     "IMPQueryIME"
     "IMPSetIME"
]}
