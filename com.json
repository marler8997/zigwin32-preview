{
"constants": [
],

"types_definitions": [
// --------------------------------------------------------
// Type: COAUTHIDENTITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COAUTHIDENTITY = extern struct {
    User: {"kind""Ptr","child":{"kind":"UInt16"}},
    UserLength: {"kind":"UInt32"},
    Domain: {"kind""Ptr","child":{"kind":"UInt16"}},
    DomainLength: {"kind":"UInt32"},
    Password: {"kind""Ptr","child":{"kind":"UInt16"}},
    PasswordLength: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: COAUTHINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COAUTHINFO = extern struct {
    dwAuthnSvc: {"kind":"UInt32"},
    dwAuthzSvc: {"kind":"UInt32"},
    pwszServerPrincName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwAuthnLevel: {"kind":"UInt32"},
    dwImpersonationLevel: {"kind":"UInt32"},
    pAuthIdentityData: {"kind""Ptr","child":Windows.Win32.Com.COAUTHIDENTITY},
    dwCapabilities: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MEMCTX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MEMCTX = *opaque{
};
// --------------------------------------------------------
// Type: CLSCTX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CLSCTX = *opaque{
};
// --------------------------------------------------------
// Type: MSHLFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSHLFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: MSHCTX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSHCTX = *opaque{
};
// --------------------------------------------------------
// Type: BYTE_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BYTE_BLOB = extern struct {
    clSize: {"kind":"UInt32"},
    abData: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: WORD_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WORD_BLOB = extern struct {
    clSize: {"kind":"UInt32"},
    asData: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: DWORD_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWORD_BLOB = extern struct {
    clSize: {"kind":"UInt32"},
    alData: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: FLAGGED_BYTE_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FLAGGED_BYTE_BLOB = extern struct {
    fFlags: {"kind":"UInt32"},
    clSize: {"kind":"UInt32"},
    abData: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: FLAGGED_WORD_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FLAGGED_WORD_BLOB = extern struct {
    fFlags: {"kind":"UInt32"},
    clSize: {"kind":"UInt32"},
    asData: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: BYTE_SIZEDARR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BYTE_SIZEDARR = extern struct {
    clSize: {"kind":"UInt32"},
    pData: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SHORT_SIZEDARR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SHORT_SIZEDARR = extern struct {
    clSize: {"kind":"UInt32"},
    pData: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: LONG_SIZEDARR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LONG_SIZEDARR = extern struct {
    clSize: {"kind":"UInt32"},
    pData: {"kind""Ptr","child":{"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: HYPER_SIZEDARR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HYPER_SIZEDARR = extern struct {
    clSize: {"kind":"UInt32"},
    pData: {"kind""Ptr","child":{"kind":"Int64"}},
};
// --------------------------------------------------------
// Type: REGCLS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const REGCLS = *opaque{
};
// --------------------------------------------------------
// Type: COINITBASE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const COINITBASE = *opaque{
};
// --------------------------------------------------------
// Type: IUnknown
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUnknown = *opaque{
    // TODO: Method 'QueryInterface'
    // TODO: Method 'AddRef'
    // TODO: Method 'Release'
};
// --------------------------------------------------------
// Type: AsyncIUnknown
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const AsyncIUnknown = *opaque{
    // TODO: Method 'Begin_QueryInterface'
    // TODO: Method 'Finish_QueryInterface'
    // TODO: Method 'Begin_AddRef'
    // TODO: Method 'Finish_AddRef'
    // TODO: Method 'Begin_Release'
    // TODO: Method 'Finish_Release'
};
// --------------------------------------------------------
// Type: IClassFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IClassFactory = *opaque{
    // TODO: Method 'CreateInstance'
    // TODO: Method 'LockServer'
};
// --------------------------------------------------------
// Type: IEnumContextProps
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IEnumContextProps = opaque {
};
// --------------------------------------------------------
// Type: IContext
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IContext = opaque {
};
// --------------------------------------------------------
// Type: IObjContext
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IObjContext = opaque {
};
// --------------------------------------------------------
// Type: COSERVERINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COSERVERINFO = extern struct {
    dwReserved1: {"kind":"UInt32"},
    pwszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pAuthInfo: {"kind""Ptr","child":Windows.Win32.Com.COAUTHINFO},
    dwReserved2: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IMarshal
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMarshal = *opaque{
    // TODO: Method 'GetUnmarshalClass'
    // TODO: Method 'GetMarshalSizeMax'
    // TODO: Method 'MarshalInterface'
    // TODO: Method 'UnmarshalInterface'
    // TODO: Method 'ReleaseMarshalData'
    // TODO: Method 'DisconnectObject'
};
// --------------------------------------------------------
// Type: INoMarshal
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const INoMarshal = *opaque{
};
// --------------------------------------------------------
// Type: IAgileObject
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAgileObject = *opaque{
};
// --------------------------------------------------------
// Type: IActivationFilter
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActivationFilter = *opaque{
    // TODO: Method 'HandleActivation'
};
// --------------------------------------------------------
// Type: IMarshal2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMarshal2 = *opaque{
};
// --------------------------------------------------------
// Type: IMalloc
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMalloc = *opaque{
    // TODO: Method 'Alloc'
    // TODO: Method 'Realloc'
    // TODO: Method 'Free'
    // TODO: Method 'GetSize'
    // TODO: Method 'DidAlloc'
    // TODO: Method 'HeapMinimize'
};
// --------------------------------------------------------
// Type: IStdMarshalInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IStdMarshalInfo = *opaque{
    // TODO: Method 'GetClassForHandler'
};
// --------------------------------------------------------
// Type: EXTCONN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EXTCONN = *opaque{
};
// --------------------------------------------------------
// Type: IExternalConnection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IExternalConnection = *opaque{
    // TODO: Method 'AddConnection'
    // TODO: Method 'ReleaseConnection'
};
// --------------------------------------------------------
// Type: MULTI_QI
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MULTI_QI = extern struct {
    pIID: {"kind""Ptr","child":Guid},
    pItf: Windows.Win32.Com.IUnknown,
    hr: Windows.Win32.Com.HRESULT,
};
// --------------------------------------------------------
// Type: IMultiQI
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMultiQI = *opaque{
    // TODO: Method 'QueryMultipleInterfaces'
};
// --------------------------------------------------------
// Type: AsyncIMultiQI
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const AsyncIMultiQI = *opaque{
    // TODO: Method 'Begin_QueryMultipleInterfaces'
    // TODO: Method 'Finish_QueryMultipleInterfaces'
};
// --------------------------------------------------------
// Type: IInternalUnknown
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInternalUnknown = *opaque{
    // TODO: Method 'QueryInternalInterface'
};
// --------------------------------------------------------
// Type: IEnumUnknown
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumUnknown = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IEnumString
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumString = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: RPCOLEMESSAGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPCOLEMESSAGE = extern struct {
    reserved1: {"kind""Ptr","child":{"kind":"Void"}},
    dataRepresentation: {"kind":"UInt32"},
    Buffer: {"kind""Ptr","child":{"kind":"Void"}},
    cbBuffer: {"kind":"UInt32"},
    iMethod: {"kind":"UInt32"},
    reserved2: {"kind":"Array","child": {"kind""Ptr","child":{"kind":"Void"}}},
    rpcFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IRpcChannelBuffer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRpcChannelBuffer = *opaque{
    // TODO: Method 'GetBuffer'
    // TODO: Method 'SendReceive'
    // TODO: Method 'FreeBuffer'
    // TODO: Method 'GetDestCtx'
    // TODO: Method 'IsConnected'
};
// --------------------------------------------------------
// Type: IRpcChannelBuffer2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRpcChannelBuffer2 = *opaque{
    // TODO: Method 'GetProtocolVersion'
};
// --------------------------------------------------------
// Type: IAsyncRpcChannelBuffer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAsyncRpcChannelBuffer = *opaque{
    // TODO: Method 'Send'
    // TODO: Method 'Receive'
    // TODO: Method 'GetDestCtxEx'
};
// --------------------------------------------------------
// Type: IRpcChannelBuffer3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRpcChannelBuffer3 = *opaque{
    // TODO: Method 'Send'
    // TODO: Method 'Receive'
    // TODO: Method 'Cancel'
    // TODO: Method 'GetCallContext'
    // TODO: Method 'GetDestCtxEx'
    // TODO: Method 'GetState'
    // TODO: Method 'RegisterAsync'
};
// --------------------------------------------------------
// Type: IRpcSyntaxNegotiate
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRpcSyntaxNegotiate = *opaque{
    // TODO: Method 'NegotiateSyntax'
};
// --------------------------------------------------------
// Type: IRpcProxyBuffer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRpcProxyBuffer = *opaque{
    // TODO: Method 'Connect'
    // TODO: Method 'Disconnect'
};
// --------------------------------------------------------
// Type: IRpcStubBuffer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRpcStubBuffer = *opaque{
    // TODO: Method 'Connect'
    // TODO: Method 'Disconnect'
    // TODO: Method 'Invoke'
    // TODO: Method 'IsIIDSupported'
    // TODO: Method 'CountRefs'
    // TODO: Method 'DebugServerQueryInterface'
    // TODO: Method 'DebugServerRelease'
};
// --------------------------------------------------------
// Type: IPSFactoryBuffer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPSFactoryBuffer = *opaque{
    // TODO: Method 'CreateProxy'
    // TODO: Method 'CreateStub'
};
// --------------------------------------------------------
// Type: SChannelHookCallInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SChannelHookCallInfo = extern struct {
    iid: Guid,
    cbSize: {"kind":"UInt32"},
    uCausality: Guid,
    dwServerPid: {"kind":"UInt32"},
    iMethod: {"kind":"UInt32"},
    pObject: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: IChannelHook
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IChannelHook = *opaque{
    // TODO: Method 'ClientGetSize'
    // TODO: Method 'ClientFillBuffer'
    // TODO: Method 'ClientNotify'
    // TODO: Method 'ServerNotify'
    // TODO: Method 'ServerGetSize'
    // TODO: Method 'ServerFillBuffer'
};
// --------------------------------------------------------
// Type: SOLE_AUTHENTICATION_SERVICE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SOLE_AUTHENTICATION_SERVICE = extern struct {
    dwAuthnSvc: {"kind":"UInt32"},
    dwAuthzSvc: {"kind":"UInt32"},
    pPrincipalName: {"kind""Ptr","child":{"kind":"UInt16"}},
    hr: Windows.Win32.Com.HRESULT,
};
// --------------------------------------------------------
// Type: EOLE_AUTHENTICATION_CAPABILITIES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EOLE_AUTHENTICATION_CAPABILITIES = *opaque{
};
// --------------------------------------------------------
// Type: SOLE_AUTHENTICATION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SOLE_AUTHENTICATION_INFO = extern struct {
    dwAuthnSvc: {"kind":"UInt32"},
    dwAuthzSvc: {"kind":"UInt32"},
    pAuthInfo: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: SOLE_AUTHENTICATION_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SOLE_AUTHENTICATION_LIST = extern struct {
    cAuthInfo: {"kind":"UInt32"},
    aAuthInfo: {"kind""Ptr","child":Windows.Win32.Com.SOLE_AUTHENTICATION_INFO},
};
// --------------------------------------------------------
// Type: IClientSecurity
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IClientSecurity = *opaque{
    // TODO: Method 'QueryBlanket'
    // TODO: Method 'SetBlanket'
    // TODO: Method 'CopyProxy'
};
// --------------------------------------------------------
// Type: IServerSecurity
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IServerSecurity = *opaque{
    // TODO: Method 'QueryBlanket'
    // TODO: Method 'ImpersonateClient'
    // TODO: Method 'RevertToSelf'
    // TODO: Method 'IsImpersonating'
};
// --------------------------------------------------------
// Type: RPCOPT_PROPERTIES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPCOPT_PROPERTIES = *opaque{
};
// --------------------------------------------------------
// Type: RPCOPT_SERVER_LOCALITY_VALUES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPCOPT_SERVER_LOCALITY_VALUES = *opaque{
};
// --------------------------------------------------------
// Type: IRpcOptions
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRpcOptions = *opaque{
    // TODO: Method 'Set'
    // TODO: Method 'Query'
};
// --------------------------------------------------------
// Type: GLOBALOPT_PROPERTIES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const GLOBALOPT_PROPERTIES = *opaque{
};
// --------------------------------------------------------
// Type: GLOBALOPT_EH_VALUES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const GLOBALOPT_EH_VALUES = *opaque{
};
// --------------------------------------------------------
// Type: GLOBALOPT_RPCTP_VALUES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const GLOBALOPT_RPCTP_VALUES = *opaque{
};
// --------------------------------------------------------
// Type: GLOBALOPT_RO_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const GLOBALOPT_RO_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: GLOBALOPT_UNMARSHALING_POLICY_VALUES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const GLOBALOPT_UNMARSHALING_POLICY_VALUES = *opaque{
};
// --------------------------------------------------------
// Type: IGlobalOptions
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IGlobalOptions = *opaque{
    // TODO: Method 'Set'
    // TODO: Method 'Query'
};
// --------------------------------------------------------
// Type: ISurrogate
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISurrogate = *opaque{
    // TODO: Method 'LoadDllServer'
    // TODO: Method 'FreeSurrogate'
};
// --------------------------------------------------------
// Type: IGlobalInterfaceTable
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IGlobalInterfaceTable = *opaque{
    // TODO: Method 'RegisterInterfaceInGlobal'
    // TODO: Method 'RevokeInterfaceFromGlobal'
    // TODO: Method 'GetInterfaceFromGlobal'
};
// --------------------------------------------------------
// Type: ISynchronize
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISynchronize = *opaque{
    // TODO: Method 'Wait'
    // TODO: Method 'Signal'
    // TODO: Method 'Reset'
};
// --------------------------------------------------------
// Type: ISynchronizeHandle
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISynchronizeHandle = *opaque{
    // TODO: Method 'GetHandle'
};
// --------------------------------------------------------
// Type: ISynchronizeEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISynchronizeEvent = *opaque{
    // TODO: Method 'SetEventHandle'
};
// --------------------------------------------------------
// Type: ISynchronizeContainer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISynchronizeContainer = *opaque{
    // TODO: Method 'AddSynchronize'
    // TODO: Method 'WaitMultiple'
};
// --------------------------------------------------------
// Type: ISynchronizeMutex
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISynchronizeMutex = *opaque{
    // TODO: Method 'ReleaseMutex'
};
// --------------------------------------------------------
// Type: ICancelMethodCalls
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICancelMethodCalls = *opaque{
    // TODO: Method 'Cancel'
    // TODO: Method 'TestCancel'
};
// --------------------------------------------------------
// Type: DCOM_CALL_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DCOM_CALL_STATE = *opaque{
};
// --------------------------------------------------------
// Type: IAsyncManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAsyncManager = *opaque{
    // TODO: Method 'CompleteCall'
    // TODO: Method 'GetCallContext'
    // TODO: Method 'GetState'
};
// --------------------------------------------------------
// Type: ICallFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICallFactory = *opaque{
    // TODO: Method 'CreateCall'
};
// --------------------------------------------------------
// Type: IRpcHelper
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRpcHelper = *opaque{
    // TODO: Method 'GetDCOMProtocolVersion'
    // TODO: Method 'GetIIDFromOBJREF'
};
// --------------------------------------------------------
// Type: IReleaseMarshalBuffers
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IReleaseMarshalBuffers = *opaque{
    // TODO: Method 'ReleaseMarshalBuffer'
};
// --------------------------------------------------------
// Type: IWaitMultiple
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWaitMultiple = *opaque{
    // TODO: Method 'WaitMultiple'
    // TODO: Method 'AddSynchronize'
};
// --------------------------------------------------------
// Type: IAddrTrackingControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAddrTrackingControl = *opaque{
    // TODO: Method 'EnableCOMDynamicAddrTracking'
    // TODO: Method 'DisableCOMDynamicAddrTracking'
};
// --------------------------------------------------------
// Type: IAddrExclusionControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAddrExclusionControl = *opaque{
    // TODO: Method 'GetCurrentAddrExclusionList'
    // TODO: Method 'UpdateAddrExclusionList'
};
// --------------------------------------------------------
// Type: IPipeByte
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPipeByte = *opaque{
    // TODO: Method 'Pull'
    // TODO: Method 'Push'
};
// --------------------------------------------------------
// Type: AsyncIPipeByte
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const AsyncIPipeByte = *opaque{
    // TODO: Method 'Begin_Pull'
    // TODO: Method 'Finish_Pull'
    // TODO: Method 'Begin_Push'
    // TODO: Method 'Finish_Push'
};
// --------------------------------------------------------
// Type: IPipeLong
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPipeLong = *opaque{
    // TODO: Method 'Pull'
    // TODO: Method 'Push'
};
// --------------------------------------------------------
// Type: AsyncIPipeLong
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const AsyncIPipeLong = *opaque{
    // TODO: Method 'Begin_Pull'
    // TODO: Method 'Finish_Pull'
    // TODO: Method 'Begin_Push'
    // TODO: Method 'Finish_Push'
};
// --------------------------------------------------------
// Type: IPipeDouble
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPipeDouble = *opaque{
    // TODO: Method 'Pull'
    // TODO: Method 'Push'
};
// --------------------------------------------------------
// Type: AsyncIPipeDouble
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const AsyncIPipeDouble = *opaque{
    // TODO: Method 'Begin_Pull'
    // TODO: Method 'Finish_Pull'
    // TODO: Method 'Begin_Push'
    // TODO: Method 'Finish_Push'
};
// --------------------------------------------------------
// Type: APTTYPEQUALIFIER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const APTTYPEQUALIFIER = *opaque{
};
// --------------------------------------------------------
// Type: APTTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const APTTYPE = *opaque{
};
// --------------------------------------------------------
// Type: THDTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const THDTYPE = *opaque{
};
// --------------------------------------------------------
// Type: IComThreadingInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IComThreadingInfo = *opaque{
    // TODO: Method 'GetCurrentApartmentType'
    // TODO: Method 'GetCurrentThreadType'
    // TODO: Method 'GetCurrentLogicalThreadId'
    // TODO: Method 'SetCurrentLogicalThreadId'
};
// --------------------------------------------------------
// Type: IProcessInitControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IProcessInitControl = *opaque{
    // TODO: Method 'ResetInitializerTimeout'
};
// --------------------------------------------------------
// Type: IFastRundown
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFastRundown = *opaque{
};
// --------------------------------------------------------
// Type: CO_MARSHALING_CONTEXT_ATTRIBUTES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CO_MARSHALING_CONTEXT_ATTRIBUTES = *opaque{
};
// --------------------------------------------------------
// Type: IMarshalingStream
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMarshalingStream = *opaque{
    // TODO: Method 'GetMarshalingContextAttribute'
};
// --------------------------------------------------------
// Type: CO_MTA_USAGE_COOKIE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CO_MTA_USAGE_COOKIE__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: STDMSHLFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STDMSHLFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: COWAIT_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const COWAIT_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CWMO_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CWMO_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: LPFNGETCLASSOBJECT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFNGETCLASSOBJECT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPFNCANUNLOADNOW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFNCANUNLOADNOW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CO_DEVICE_CATALOG_COOKIE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CO_DEVICE_CATALOG_COOKIE__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: IMallocSpy
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMallocSpy = *opaque{
    // TODO: Method 'PreAlloc'
    // TODO: Method 'PostAlloc'
    // TODO: Method 'PreFree'
    // TODO: Method 'PostFree'
    // TODO: Method 'PreRealloc'
    // TODO: Method 'PostRealloc'
    // TODO: Method 'PreGetSize'
    // TODO: Method 'PostGetSize'
    // TODO: Method 'PreDidAlloc'
    // TODO: Method 'PostDidAlloc'
    // TODO: Method 'PreHeapMinimize'
    // TODO: Method 'PostHeapMinimize'
};
// --------------------------------------------------------
// Type: BIND_OPTS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BIND_OPTS = extern struct {
    cbStruct: {"kind":"UInt32"},
    grfFlags: {"kind":"UInt32"},
    grfMode: {"kind":"UInt32"},
    dwTickCountDeadline: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: BIND_OPTS2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BIND_OPTS2 = extern struct {
    __AnonymousBase_objidl_L8451_C36: Windows.Win32.Com.BIND_OPTS,
    dwTrackFlags: {"kind":"UInt32"},
    dwClassContext: {"kind":"UInt32"},
    locale: {"kind":"UInt32"},
    pServerInfo: {"kind""Ptr","child":Windows.Win32.Com.COSERVERINFO},
};
// --------------------------------------------------------
// Type: BIND_OPTS3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BIND_OPTS3 = extern struct {
    __AnonymousBase_objidl_L8475_C36: Windows.Win32.Com.BIND_OPTS2,
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
};
// --------------------------------------------------------
// Type: BIND_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BIND_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: IBindCtx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IBindCtx = *opaque{
    // TODO: Method 'RegisterObjectBound'
    // TODO: Method 'RevokeObjectBound'
    // TODO: Method 'ReleaseBoundObjects'
    // TODO: Method 'SetBindOptions'
    // TODO: Method 'GetBindOptions'
    // TODO: Method 'GetRunningObjectTable'
    // TODO: Method 'RegisterObjectParam'
    // TODO: Method 'GetObjectParam'
    // TODO: Method 'EnumObjectParam'
    // TODO: Method 'RevokeObjectParam'
};
// --------------------------------------------------------
// Type: IEnumMoniker
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumMoniker = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IRunnableObject
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRunnableObject = *opaque{
    // TODO: Method 'GetRunningClass'
    // TODO: Method 'Run'
    // TODO: Method 'IsRunning'
    // TODO: Method 'LockRunning'
    // TODO: Method 'SetContainedObject'
};
// --------------------------------------------------------
// Type: IRunningObjectTable
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRunningObjectTable = *opaque{
    // TODO: Method 'Register'
    // TODO: Method 'Revoke'
    // TODO: Method 'IsRunning'
    // TODO: Method 'GetObjectA'
    // TODO: Method 'NoteChangeTime'
    // TODO: Method 'GetTimeOfLastChange'
    // TODO: Method 'EnumRunning'
};
// --------------------------------------------------------
// Type: IPersist
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPersist = *opaque{
    // TODO: Method 'GetClassID'
};
// --------------------------------------------------------
// Type: IPersistStream
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPersistStream = *opaque{
    // TODO: Method 'IsDirty'
    // TODO: Method 'Load'
    // TODO: Method 'Save'
    // TODO: Method 'GetSizeMax'
};
// --------------------------------------------------------
// Type: MKSYS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MKSYS = *opaque{
};
// --------------------------------------------------------
// Type: MKREDUCE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MKREDUCE = *opaque{
};
// --------------------------------------------------------
// Type: IMoniker
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMoniker = *opaque{
    // TODO: Method 'BindToObject'
    // TODO: Method 'BindToStorage'
    // TODO: Method 'Reduce'
    // TODO: Method 'ComposeWith'
    // TODO: Method 'Enum'
    // TODO: Method 'IsEqual'
    // TODO: Method 'Hash'
    // TODO: Method 'IsRunning'
    // TODO: Method 'GetTimeOfLastChange'
    // TODO: Method 'Inverse'
    // TODO: Method 'CommonPrefixWith'
    // TODO: Method 'RelativePathTo'
    // TODO: Method 'GetDisplayName'
    // TODO: Method 'ParseDisplayName'
    // TODO: Method 'IsSystemMoniker'
};
// --------------------------------------------------------
// Type: IROTData
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IROTData = *opaque{
    // TODO: Method 'GetComparisonData'
};
// --------------------------------------------------------
// Type: IPersistFile
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPersistFile = *opaque{
    // TODO: Method 'IsDirty'
    // TODO: Method 'Load'
    // TODO: Method 'Save'
    // TODO: Method 'SaveCompleted'
    // TODO: Method 'GetCurFile'
};
// --------------------------------------------------------
// Type: IPersistStorage
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPersistStorage = *opaque{
    // TODO: Method 'IsDirty'
    // TODO: Method 'InitNew'
    // TODO: Method 'Load'
    // TODO: Method 'Save'
    // TODO: Method 'SaveCompleted'
    // TODO: Method 'HandsOffStorage'
};
// --------------------------------------------------------
// Type: DVTARGETDEVICE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DVTARGETDEVICE = extern struct {
    tdSize: {"kind":"UInt32"},
    tdDriverNameOffset: {"kind":"UInt16"},
    tdDeviceNameOffset: {"kind":"UInt16"},
    tdPortNameOffset: {"kind":"UInt16"},
    tdExtDevmodeOffset: {"kind":"UInt16"},
    tdData: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: FORMATETC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FORMATETC = extern struct {
    cfFormat: {"kind":"UInt16"},
    ptd: {"kind""Ptr","child":Windows.Win32.Com.DVTARGETDEVICE},
    dwAspect: {"kind":"UInt32"},
    lindex: {"kind":"Int32"},
    tymed: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IEnumFORMATETC
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumFORMATETC = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: ADVF
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADVF = *opaque{
};
// --------------------------------------------------------
// Type: STATDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STATDATA = extern struct {
    formatetc: Windows.Win32.Com.FORMATETC,
    advf: {"kind":"UInt32"},
    pAdvSink: Windows.Win32.Com.IAdviseSink,
    dwConnection: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IEnumSTATDATA
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumSTATDATA = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: TYMED
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TYMED = *opaque{
};
// --------------------------------------------------------
// Type: RemSTGMEDIUM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RemSTGMEDIUM = extern struct {
    tymed: {"kind":"UInt32"},
    dwHandleType: {"kind":"UInt32"},
    pData: {"kind":"UInt32"},
    pUnkForRelease: {"kind":"UInt32"},
    cbData: {"kind":"UInt32"},
    data: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: STGMEDIUM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STGMEDIUM = extern struct {
    tymed: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Com.STGMEDIUM+_Anonymous_e__Union,
    pUnkForRelease: Windows.Win32.Com.IUnknown,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: GDI_OBJECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GDI_OBJECT = extern struct {
    ObjectType: {"kind":"UInt32"},
    u: Windows.Win32.Com.GDI_OBJECT+_u_e__Struct,
    // --------------------------------------------------------
    // Type: _u_e__Struct
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Struct = *opaque{
    };
};
// --------------------------------------------------------
// Type: userSTGMEDIUM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const userSTGMEDIUM = extern struct {
    pUnkForRelease: Windows.Win32.Com.IUnknown,
    // --------------------------------------------------------
    // Type: _STGMEDIUM_UNION
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _STGMEDIUM_UNION = extern struct {
        tymed: {"kind":"UInt32"},
        u: Windows.Win32.Com.userSTGMEDIUM+_STGMEDIUM_UNION+_u_e__Struct,
        // --------------------------------------------------------
        // Type: _u_e__Struct
        // TypeLayoutAttr: explicit
        // not generating the actual code for this type because it has an explicit layout
        pub const _u_e__Struct = *opaque{
        };
    };
};
// --------------------------------------------------------
// Type: userFLAG_STGMEDIUM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const userFLAG_STGMEDIUM = extern struct {
    ContextFlags: {"kind":"Int32"},
    fPassOwnership: {"kind":"Int32"},
    Stgmed: Windows.Win32.Com.userSTGMEDIUM,
};
// --------------------------------------------------------
// Type: FLAG_STGMEDIUM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FLAG_STGMEDIUM = extern struct {
    ContextFlags: {"kind":"Int32"},
    fPassOwnership: {"kind":"Int32"},
    Stgmed: Windows.Win32.Com.STGMEDIUM,
};
// --------------------------------------------------------
// Type: IAdviseSink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAdviseSink = *opaque{
    // TODO: Method 'OnDataChange'
    // TODO: Method 'OnViewChange'
    // TODO: Method 'OnRename'
    // TODO: Method 'OnSave'
    // TODO: Method 'OnClose'
};
// --------------------------------------------------------
// Type: AsyncIAdviseSink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const AsyncIAdviseSink = *opaque{
    // TODO: Method 'Begin_OnDataChange'
    // TODO: Method 'Finish_OnDataChange'
    // TODO: Method 'Begin_OnViewChange'
    // TODO: Method 'Finish_OnViewChange'
    // TODO: Method 'Begin_OnRename'
    // TODO: Method 'Finish_OnRename'
    // TODO: Method 'Begin_OnSave'
    // TODO: Method 'Finish_OnSave'
    // TODO: Method 'Begin_OnClose'
    // TODO: Method 'Finish_OnClose'
};
// --------------------------------------------------------
// Type: IAdviseSink2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAdviseSink2 = *opaque{
    // TODO: Method 'OnLinkSrcChange'
};
// --------------------------------------------------------
// Type: AsyncIAdviseSink2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const AsyncIAdviseSink2 = *opaque{
    // TODO: Method 'Begin_OnLinkSrcChange'
    // TODO: Method 'Finish_OnLinkSrcChange'
};
// --------------------------------------------------------
// Type: DATADIR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DATADIR = *opaque{
};
// --------------------------------------------------------
// Type: IDataObject
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDataObject = *opaque{
    // TODO: Method 'GetData'
    // TODO: Method 'GetDataHere'
    // TODO: Method 'QueryGetData'
    // TODO: Method 'GetCanonicalFormatEtc'
    // TODO: Method 'SetData'
    // TODO: Method 'EnumFormatEtc'
    // TODO: Method 'DAdvise'
    // TODO: Method 'DUnadvise'
    // TODO: Method 'EnumDAdvise'
};
// --------------------------------------------------------
// Type: IDataAdviseHolder
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDataAdviseHolder = *opaque{
    // TODO: Method 'Advise'
    // TODO: Method 'Unadvise'
    // TODO: Method 'EnumAdvise'
    // TODO: Method 'SendOnDataChange'
};
// --------------------------------------------------------
// Type: CALLTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CALLTYPE = *opaque{
};
// --------------------------------------------------------
// Type: SERVERCALL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SERVERCALL = *opaque{
};
// --------------------------------------------------------
// Type: PENDINGTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PENDINGTYPE = *opaque{
};
// --------------------------------------------------------
// Type: PENDINGMSG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PENDINGMSG = *opaque{
};
// --------------------------------------------------------
// Type: INTERFACEINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERFACEINFO = extern struct {
    pUnk: Windows.Win32.Com.IUnknown,
    iid: Guid,
    wMethod: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: IMessageFilter
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMessageFilter = *opaque{
    // TODO: Method 'HandleInComingCall'
    // TODO: Method 'RetryRejectedCall'
    // TODO: Method 'MessagePending'
};
// --------------------------------------------------------
// Type: IClassActivator
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IClassActivator = *opaque{
    // TODO: Method 'GetClassObject'
};
// --------------------------------------------------------
// Type: IProgressNotify
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IProgressNotify = *opaque{
    // TODO: Method 'OnProgress'
};
// --------------------------------------------------------
// Type: IBlockingLock
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IBlockingLock = *opaque{
    // TODO: Method 'Lock'
    // TODO: Method 'Unlock'
};
// --------------------------------------------------------
// Type: ITimeAndNoticeControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITimeAndNoticeControl = *opaque{
    // TODO: Method 'SuppressChanges'
};
// --------------------------------------------------------
// Type: IOplockStorage
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOplockStorage = *opaque{
    // TODO: Method 'CreateStorageEx'
    // TODO: Method 'OpenStorageEx'
};
// --------------------------------------------------------
// Type: IUrlMon
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUrlMon = *opaque{
    // TODO: Method 'AsyncGetClassBits'
};
// --------------------------------------------------------
// Type: IForegroundTransfer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IForegroundTransfer = *opaque{
    // TODO: Method 'AllowForegroundTransfer'
};
// --------------------------------------------------------
// Type: IThumbnailExtractor
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IThumbnailExtractor = *opaque{
    // TODO: Method 'ExtractThumbnail'
    // TODO: Method 'OnFileUpdated'
};
// --------------------------------------------------------
// Type: IDummyHICONIncluder
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDummyHICONIncluder = *opaque{
    // TODO: Method 'Dummy'
};
// --------------------------------------------------------
// Type: ApplicationType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ApplicationType = *opaque{
};
// --------------------------------------------------------
// Type: ShutdownType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ShutdownType = *opaque{
};
// --------------------------------------------------------
// Type: IProcessLock
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IProcessLock = *opaque{
    // TODO: Method 'AddRefOnProcess'
    // TODO: Method 'ReleaseRefOnProcess'
};
// --------------------------------------------------------
// Type: ISurrogateService
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISurrogateService = *opaque{
    // TODO: Method 'Init'
    // TODO: Method 'ApplicationLaunch'
    // TODO: Method 'ApplicationFree'
    // TODO: Method 'CatalogRefresh'
    // TODO: Method 'ProcessShutdown'
};
// --------------------------------------------------------
// Type: IInitializeSpy
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInitializeSpy = *opaque{
    // TODO: Method 'PreInitialize'
    // TODO: Method 'PostInitialize'
    // TODO: Method 'PreUninitialize'
    // TODO: Method 'PostUninitialize'
};
// --------------------------------------------------------
// Type: IOleAdviseHolder
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOleAdviseHolder = *opaque{
    // TODO: Method 'Advise'
    // TODO: Method 'Unadvise'
    // TODO: Method 'EnumAdvise'
    // TODO: Method 'SendOnRename'
    // TODO: Method 'SendOnSave'
    // TODO: Method 'SendOnClose'
};
// --------------------------------------------------------
// Type: IOleCache
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOleCache = *opaque{
    // TODO: Method 'Cache'
    // TODO: Method 'Uncache'
    // TODO: Method 'EnumCache'
    // TODO: Method 'InitCache'
    // TODO: Method 'SetData'
};
// --------------------------------------------------------
// Type: DISCARDCACHE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DISCARDCACHE = *opaque{
};
// --------------------------------------------------------
// Type: IOleCache2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOleCache2 = *opaque{
    // TODO: Method 'UpdateCache'
    // TODO: Method 'DiscardCache'
};
// --------------------------------------------------------
// Type: IOleCacheControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOleCacheControl = *opaque{
    // TODO: Method 'OnRun'
    // TODO: Method 'OnStop'
};
// --------------------------------------------------------
// Type: IParseDisplayName
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IParseDisplayName = *opaque{
    // TODO: Method 'ParseDisplayName'
};
// --------------------------------------------------------
// Type: IOleContainer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOleContainer = *opaque{
    // TODO: Method 'EnumObjects'
    // TODO: Method 'LockContainer'
};
// --------------------------------------------------------
// Type: IOleClientSite
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOleClientSite = *opaque{
    // TODO: Method 'SaveObject'
    // TODO: Method 'GetMoniker'
    // TODO: Method 'GetContainer'
    // TODO: Method 'ShowObject'
    // TODO: Method 'OnShowWindow'
    // TODO: Method 'RequestNewObjectLayout'
};
// --------------------------------------------------------
// Type: OLEGETMONIKER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OLEGETMONIKER = *opaque{
};
// --------------------------------------------------------
// Type: OLEWHICHMK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OLEWHICHMK = *opaque{
};
// --------------------------------------------------------
// Type: USERCLASSTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const USERCLASSTYPE = *opaque{
};
// --------------------------------------------------------
// Type: OLEMISC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OLEMISC = *opaque{
};
// --------------------------------------------------------
// Type: OLECLOSE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OLECLOSE = *opaque{
};
// --------------------------------------------------------
// Type: IOleObject
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOleObject = *opaque{
    // TODO: Method 'SetClientSite'
    // TODO: Method 'GetClientSite'
    // TODO: Method 'SetHostNames'
    // TODO: Method 'Close'
    // TODO: Method 'SetMoniker'
    // TODO: Method 'GetMoniker'
    // TODO: Method 'InitFromData'
    // TODO: Method 'GetClipboardData'
    // TODO: Method 'DoVerb'
    // TODO: Method 'EnumVerbs'
    // TODO: Method 'Update'
    // TODO: Method 'IsUpToDate'
    // TODO: Method 'GetUserClassID'
    // TODO: Method 'GetUserType'
    // TODO: Method 'SetExtent'
    // TODO: Method 'GetExtent'
    // TODO: Method 'Advise'
    // TODO: Method 'Unadvise'
    // TODO: Method 'EnumAdvise'
    // TODO: Method 'GetMiscStatus'
    // TODO: Method 'SetColorScheme'
};
// --------------------------------------------------------
// Type: OLERENDER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OLERENDER = *opaque{
};
// --------------------------------------------------------
// Type: OBJECTDESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OBJECTDESCRIPTOR = extern struct {
    cbSize: {"kind":"UInt32"},
    clsid: Guid,
    dwDrawAspect: {"kind":"UInt32"},
    sizel: Windows.Win32.DisplayDevices.SIZE,
    pointl: Windows.Win32.DisplayDevices.POINTL,
    dwStatus: {"kind":"UInt32"},
    dwFullUserTypeName: {"kind":"UInt32"},
    dwSrcOfCopy: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IOleWindow
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOleWindow = *opaque{
    // TODO: Method 'GetWindow'
    // TODO: Method 'ContextSensitiveHelp'
};
// --------------------------------------------------------
// Type: OLEUPDATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OLEUPDATE = *opaque{
};
// --------------------------------------------------------
// Type: OLELINKBIND
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OLELINKBIND = *opaque{
};
// --------------------------------------------------------
// Type: IOleLink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOleLink = *opaque{
    // TODO: Method 'SetUpdateOptions'
    // TODO: Method 'GetUpdateOptions'
    // TODO: Method 'SetSourceMoniker'
    // TODO: Method 'GetSourceMoniker'
    // TODO: Method 'SetSourceDisplayName'
    // TODO: Method 'GetSourceDisplayName'
    // TODO: Method 'BindToSource'
    // TODO: Method 'BindIfRunning'
    // TODO: Method 'GetBoundSource'
    // TODO: Method 'UnbindSource'
    // TODO: Method 'Update'
};
// --------------------------------------------------------
// Type: BINDSPEED
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BINDSPEED = *opaque{
};
// --------------------------------------------------------
// Type: OLECONTF
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OLECONTF = *opaque{
};
// --------------------------------------------------------
// Type: IOleItemContainer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOleItemContainer = *opaque{
    // TODO: Method 'GetObjectA'
    // TODO: Method 'GetObjectStorage'
    // TODO: Method 'IsRunning'
};
// --------------------------------------------------------
// Type: IOleInPlaceUIWindow
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOleInPlaceUIWindow = *opaque{
    // TODO: Method 'GetBorder'
    // TODO: Method 'RequestBorderSpace'
    // TODO: Method 'SetBorderSpace'
    // TODO: Method 'SetActiveObject'
};
// --------------------------------------------------------
// Type: IOleInPlaceActiveObject
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOleInPlaceActiveObject = *opaque{
    // TODO: Method 'TranslateAcceleratorA'
    // TODO: Method 'OnFrameWindowActivate'
    // TODO: Method 'OnDocWindowActivate'
    // TODO: Method 'ResizeBorder'
    // TODO: Method 'EnableModeless'
};
// --------------------------------------------------------
// Type: OIFI
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OIFI = extern struct {
    cb: {"kind":"UInt32"},
    fMDIApp: Windows.Win32.SystemServices.BOOL,
    hwndFrame: Windows.Win32.WindowsAndMessaging.HWND,
    haccel: Windows.Win32.MenusAndResources.HACCEL,
    cAccelEntries: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: OleMenuGroupWidths
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OleMenuGroupWidths = extern struct {
    width: {"kind":"Array","child": {"kind":"Int32"}},
};
// --------------------------------------------------------
// Type: IOleInPlaceFrame
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOleInPlaceFrame = *opaque{
    // TODO: Method 'InsertMenus'
    // TODO: Method 'SetMenu'
    // TODO: Method 'RemoveMenus'
    // TODO: Method 'SetStatusText'
    // TODO: Method 'EnableModeless'
    // TODO: Method 'TranslateAcceleratorA'
};
// --------------------------------------------------------
// Type: IOleInPlaceObject
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOleInPlaceObject = *opaque{
    // TODO: Method 'InPlaceDeactivate'
    // TODO: Method 'UIDeactivate'
    // TODO: Method 'SetObjectRects'
    // TODO: Method 'ReactivateAndUndo'
};
// --------------------------------------------------------
// Type: IOleInPlaceSite
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOleInPlaceSite = *opaque{
    // TODO: Method 'CanInPlaceActivate'
    // TODO: Method 'OnInPlaceActivate'
    // TODO: Method 'OnUIActivate'
    // TODO: Method 'GetWindowContext'
    // TODO: Method 'Scroll'
    // TODO: Method 'OnUIDeactivate'
    // TODO: Method 'OnInPlaceDeactivate'
    // TODO: Method 'DiscardUndoState'
    // TODO: Method 'DeactivateAndUndo'
    // TODO: Method 'OnPosRectChange'
};
// --------------------------------------------------------
// Type: IContinue
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IContinue = *opaque{
    // TODO: Method 'FContinue'
};
// --------------------------------------------------------
// Type: IViewObject
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IViewObject = *opaque{
    // TODO: Method 'Draw'
    // TODO: Method 'GetColorSet'
    // TODO: Method 'Freeze'
    // TODO: Method 'Unfreeze'
    // TODO: Method 'SetAdvise'
    // TODO: Method 'GetAdvise'
};
// --------------------------------------------------------
// Type: IViewObject2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IViewObject2 = *opaque{
    // TODO: Method 'GetExtent'
};
// --------------------------------------------------------
// Type: IDropSource
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDropSource = *opaque{
    // TODO: Method 'QueryContinueDrag'
    // TODO: Method 'GiveFeedback'
};
// --------------------------------------------------------
// Type: IDropTarget
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDropTarget = *opaque{
    // TODO: Method 'DragEnter'
    // TODO: Method 'DragOver'
    // TODO: Method 'DragLeave'
    // TODO: Method 'Drop'
};
// --------------------------------------------------------
// Type: IDropSourceNotify
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDropSourceNotify = *opaque{
    // TODO: Method 'DragEnterTarget'
    // TODO: Method 'DragLeaveTarget'
};
// --------------------------------------------------------
// Type: IEnterpriseDropTarget
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnterpriseDropTarget = *opaque{
    // TODO: Method 'SetDropSourceEnterpriseId'
    // TODO: Method 'IsEvaluatingEdpPolicy'
};
// --------------------------------------------------------
// Type: OLEVERB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OLEVERB = extern struct {
    lVerb: {"kind":"Int32"},
    lpszVerbName: {"kind""Ptr","child":{"kind":"UInt16"}},
    fuFlags: {"kind":"UInt32"},
    grfAttribs: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: OLEVERBATTRIB
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OLEVERBATTRIB = *opaque{
};
// --------------------------------------------------------
// Type: IEnumOLEVERB
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumOLEVERB = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IEObjectType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IEObjectType = *opaque{
};
// --------------------------------------------------------
// Type: IPersistMoniker
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPersistMoniker = *opaque{
    // TODO: Method 'GetClassID'
    // TODO: Method 'IsDirty'
    // TODO: Method 'Load'
    // TODO: Method 'Save'
    // TODO: Method 'SaveCompleted'
    // TODO: Method 'GetCurMoniker'
};
// --------------------------------------------------------
// Type: MONIKERPROPERTY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MONIKERPROPERTY = *opaque{
};
// --------------------------------------------------------
// Type: IMonikerProp
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMonikerProp = *opaque{
    // TODO: Method 'PutProperty'
};
// --------------------------------------------------------
// Type: IBindProtocol
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IBindProtocol = *opaque{
    // TODO: Method 'CreateBinding'
};
// --------------------------------------------------------
// Type: IBinding
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IBinding = *opaque{
    // TODO: Method 'Abort'
    // TODO: Method 'Suspend'
    // TODO: Method 'Resume'
    // TODO: Method 'SetPriority'
    // TODO: Method 'GetPriority'
    // TODO: Method 'GetBindResult'
};
// --------------------------------------------------------
// Type: BINDVERB
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BINDVERB = *opaque{
};
// --------------------------------------------------------
// Type: BINDINFOF
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BINDINFOF = *opaque{
};
// --------------------------------------------------------
// Type: BINDF
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BINDF = *opaque{
};
// --------------------------------------------------------
// Type: URL_ENCODING
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const URL_ENCODING = *opaque{
};
// --------------------------------------------------------
// Type: BINDINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BINDINFO = extern struct {
    cbSize: {"kind":"UInt32"},
    szExtraInfo: {"kind""Ptr","child":{"kind":"UInt16"}},
    stgmedData: Windows.Win32.Com.STGMEDIUM,
    grfBindInfoF: {"kind":"UInt32"},
    dwBindVerb: {"kind":"UInt32"},
    szCustomVerb: {"kind""Ptr","child":{"kind":"UInt16"}},
    cbstgmedData: {"kind":"UInt32"},
    dwOptions: {"kind":"UInt32"},
    dwOptionsFlags: {"kind":"UInt32"},
    dwCodePage: {"kind":"UInt32"},
    securityAttributes: Windows.Win32.SystemServices.SECURITY_ATTRIBUTES,
    iid: Guid,
    pUnk: Windows.Win32.Com.IUnknown,
    dwReserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: REMSECURITY_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const REMSECURITY_ATTRIBUTES = extern struct {
    nLength: {"kind":"UInt32"},
    lpSecurityDescriptor: {"kind":"UInt32"},
    bInheritHandle: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: RemBINDINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RemBINDINFO = extern struct {
    cbSize: {"kind":"UInt32"},
    szExtraInfo: {"kind""Ptr","child":{"kind":"UInt16"}},
    grfBindInfoF: {"kind":"UInt32"},
    dwBindVerb: {"kind":"UInt32"},
    szCustomVerb: {"kind""Ptr","child":{"kind":"UInt16"}},
    cbstgmedData: {"kind":"UInt32"},
    dwOptions: {"kind":"UInt32"},
    dwOptionsFlags: {"kind":"UInt32"},
    dwCodePage: {"kind":"UInt32"},
    securityAttributes: Windows.Win32.Com.REMSECURITY_ATTRIBUTES,
    iid: Guid,
    pUnk: Windows.Win32.Com.IUnknown,
    dwReserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: RemFORMATETC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RemFORMATETC = extern struct {
    cfFormat: {"kind":"UInt32"},
    ptd: {"kind":"UInt32"},
    dwAspect: {"kind":"UInt32"},
    lindex: {"kind":"Int32"},
    tymed: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: BINDINFO_OPTIONS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BINDINFO_OPTIONS = *opaque{
};
// --------------------------------------------------------
// Type: BSCF
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BSCF = *opaque{
};
// --------------------------------------------------------
// Type: BINDSTATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BINDSTATUS = *opaque{
};
// --------------------------------------------------------
// Type: IBindStatusCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IBindStatusCallback = *opaque{
    // TODO: Method 'OnStartBinding'
    // TODO: Method 'GetPriority'
    // TODO: Method 'OnLowResource'
    // TODO: Method 'OnProgress'
    // TODO: Method 'OnStopBinding'
    // TODO: Method 'GetBindInfo'
    // TODO: Method 'OnDataAvailable'
    // TODO: Method 'OnObjectAvailable'
};
// --------------------------------------------------------
// Type: BINDF2
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BINDF2 = *opaque{
};
// --------------------------------------------------------
// Type: IBindStatusCallbackEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IBindStatusCallbackEx = *opaque{
    // TODO: Method 'GetBindInfoEx'
};
// --------------------------------------------------------
// Type: IAuthenticate
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAuthenticate = *opaque{
    // TODO: Method 'Authenticate'
};
// --------------------------------------------------------
// Type: AUTHENTICATEF
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AUTHENTICATEF = *opaque{
};
// --------------------------------------------------------
// Type: AUTHENTICATEINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHENTICATEINFO = extern struct {
    dwFlags: {"kind":"UInt32"},
    dwReserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IAuthenticateEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAuthenticateEx = *opaque{
    // TODO: Method 'AuthenticateEx'
};
// --------------------------------------------------------
// Type: IHttpNegotiate
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHttpNegotiate = *opaque{
    // TODO: Method 'BeginningTransaction'
    // TODO: Method 'OnResponse'
};
// --------------------------------------------------------
// Type: IHttpNegotiate2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHttpNegotiate2 = *opaque{
    // TODO: Method 'GetRootSecurityId'
};
// --------------------------------------------------------
// Type: IHttpNegotiate3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHttpNegotiate3 = *opaque{
    // TODO: Method 'GetSerializedClientCertContext'
};
// --------------------------------------------------------
// Type: IWinInetFileStream
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWinInetFileStream = *opaque{
    // TODO: Method 'SetHandleForUnlock'
    // TODO: Method 'SetDeleteFile'
};
// --------------------------------------------------------
// Type: IWindowForBindingUI
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWindowForBindingUI = *opaque{
    // TODO: Method 'GetWindow'
};
// --------------------------------------------------------
// Type: CIP_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CIP_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: ICodeInstall
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICodeInstall = *opaque{
    // TODO: Method 'OnCodeInstallProblem'
};
// --------------------------------------------------------
// Type: Uri_PROPERTY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const Uri_PROPERTY = *opaque{
};
// --------------------------------------------------------
// Type: Uri_HOST_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const Uri_HOST_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IUri
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUri = *opaque{
    // TODO: Method 'GetPropertyBSTR'
    // TODO: Method 'GetPropertyLength'
    // TODO: Method 'GetPropertyDWORD'
    // TODO: Method 'HasProperty'
    // TODO: Method 'GetAbsoluteUri'
    // TODO: Method 'GetAuthority'
    // TODO: Method 'GetDisplayUri'
    // TODO: Method 'GetDomain'
    // TODO: Method 'GetExtension'
    // TODO: Method 'GetFragment'
    // TODO: Method 'GetHost'
    // TODO: Method 'GetPassword'
    // TODO: Method 'GetPath'
    // TODO: Method 'GetPathAndQuery'
    // TODO: Method 'GetQuery'
    // TODO: Method 'GetRawUri'
    // TODO: Method 'GetSchemeName'
    // TODO: Method 'GetUserInfo'
    // TODO: Method 'GetUserNameA'
    // TODO: Method 'GetHostType'
    // TODO: Method 'GetPort'
    // TODO: Method 'GetScheme'
    // TODO: Method 'GetZone'
    // TODO: Method 'GetProperties'
    // TODO: Method 'IsEqual'
};
// --------------------------------------------------------
// Type: IUriContainer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUriContainer = *opaque{
    // TODO: Method 'GetIUri'
};
// --------------------------------------------------------
// Type: IUriBuilder
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUriBuilder = *opaque{
    // TODO: Method 'CreateUriSimple'
    // TODO: Method 'CreateUri'
    // TODO: Method 'CreateUriWithFlags'
    // TODO: Method 'GetIUri'
    // TODO: Method 'SetIUri'
    // TODO: Method 'GetFragment'
    // TODO: Method 'GetHost'
    // TODO: Method 'GetPassword'
    // TODO: Method 'GetPath'
    // TODO: Method 'GetPort'
    // TODO: Method 'GetQuery'
    // TODO: Method 'GetSchemeName'
    // TODO: Method 'GetUserNameA'
    // TODO: Method 'SetFragment'
    // TODO: Method 'SetHost'
    // TODO: Method 'SetPassword'
    // TODO: Method 'SetPath'
    // TODO: Method 'SetPortA'
    // TODO: Method 'SetQuery'
    // TODO: Method 'SetSchemeName'
    // TODO: Method 'SetUserName'
    // TODO: Method 'RemoveProperties'
    // TODO: Method 'HasBeenModified'
};
// --------------------------------------------------------
// Type: IUriBuilderFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUriBuilderFactory = *opaque{
    // TODO: Method 'CreateIUriBuilder'
    // TODO: Method 'CreateInitializedIUriBuilder'
};
// --------------------------------------------------------
// Type: IWinInetInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWinInetInfo = *opaque{
    // TODO: Method 'QueryOption'
};
// --------------------------------------------------------
// Type: IHttpSecurity
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHttpSecurity = *opaque{
    // TODO: Method 'OnSecurityProblem'
};
// --------------------------------------------------------
// Type: IWinInetHttpInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWinInetHttpInfo = *opaque{
    // TODO: Method 'QueryInfo'
};
// --------------------------------------------------------
// Type: IWinInetHttpTimeouts
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWinInetHttpTimeouts = *opaque{
    // TODO: Method 'GetRequestTimeouts'
};
// --------------------------------------------------------
// Type: IWinInetCacheHints
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWinInetCacheHints = *opaque{
    // TODO: Method 'SetCacheExtension'
};
// --------------------------------------------------------
// Type: IWinInetCacheHints2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWinInetCacheHints2 = *opaque{
    // TODO: Method 'SetCacheExtension2'
};
// --------------------------------------------------------
// Type: IBindHost
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IBindHost = *opaque{
    // TODO: Method 'CreateMoniker'
    // TODO: Method 'MonikerBindToStorage'
    // TODO: Method 'MonikerBindToObject'
};
// --------------------------------------------------------
// Type: IInternet
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInternet = *opaque{
};
// --------------------------------------------------------
// Type: BINDSTRING
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BINDSTRING = *opaque{
};
// --------------------------------------------------------
// Type: IInternetBindInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInternetBindInfo = *opaque{
    // TODO: Method 'GetBindInfo'
    // TODO: Method 'GetBindString'
};
// --------------------------------------------------------
// Type: IInternetBindInfoEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInternetBindInfoEx = *opaque{
    // TODO: Method 'GetBindInfoEx'
};
// --------------------------------------------------------
// Type: PI_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PI_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: PROTOCOLDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROTOCOLDATA = extern struct {
    grfFlags: {"kind":"UInt32"},
    dwState: {"kind":"UInt32"},
    pData: {"kind""Ptr","child":{"kind":"Void"}},
    cbData: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: StartParam
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const StartParam = extern struct {
    iid: Guid,
    pIBindCtx: Windows.Win32.Com.IBindCtx,
    pItf: Windows.Win32.Com.IUnknown,
};
// --------------------------------------------------------
// Type: IInternetProtocolRoot
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInternetProtocolRoot = *opaque{
    // TODO: Method 'Start'
    // TODO: Method 'Continue'
    // TODO: Method 'Abort'
    // TODO: Method 'Terminate'
    // TODO: Method 'Suspend'
    // TODO: Method 'Resume'
};
// --------------------------------------------------------
// Type: IInternetProtocol
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInternetProtocol = *opaque{
    // TODO: Method 'Read'
    // TODO: Method 'Seek'
    // TODO: Method 'LockRequest'
    // TODO: Method 'UnlockRequest'
};
// --------------------------------------------------------
// Type: IInternetProtocolEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInternetProtocolEx = *opaque{
    // TODO: Method 'StartEx'
};
// --------------------------------------------------------
// Type: IInternetProtocolSink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInternetProtocolSink = *opaque{
    // TODO: Method 'Switch'
    // TODO: Method 'ReportProgress'
    // TODO: Method 'ReportData'
    // TODO: Method 'ReportResult'
};
// --------------------------------------------------------
// Type: IInternetProtocolSinkStackable
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInternetProtocolSinkStackable = *opaque{
    // TODO: Method 'SwitchSink'
    // TODO: Method 'CommitSwitch'
    // TODO: Method 'RollbackSwitch'
};
// --------------------------------------------------------
// Type: OIBDG_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OIBDG_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: IInternetSession
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInternetSession = *opaque{
    // TODO: Method 'RegisterNameSpace'
    // TODO: Method 'UnregisterNameSpace'
    // TODO: Method 'RegisterMimeFilter'
    // TODO: Method 'UnregisterMimeFilter'
    // TODO: Method 'CreateBinding'
    // TODO: Method 'SetSessionOption'
    // TODO: Method 'GetSessionOption'
};
// --------------------------------------------------------
// Type: IInternetThreadSwitch
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInternetThreadSwitch = *opaque{
    // TODO: Method 'Prepare'
    // TODO: Method 'Continue'
};
// --------------------------------------------------------
// Type: IInternetPriority
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInternetPriority = *opaque{
    // TODO: Method 'SetPriority'
    // TODO: Method 'GetPriority'
};
// --------------------------------------------------------
// Type: PARSEACTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PARSEACTION = *opaque{
};
// --------------------------------------------------------
// Type: PSUACTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PSUACTION = *opaque{
};
// --------------------------------------------------------
// Type: QUERYOPTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QUERYOPTION = *opaque{
};
// --------------------------------------------------------
// Type: IInternetProtocolInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInternetProtocolInfo = *opaque{
    // TODO: Method 'ParseUrl'
    // TODO: Method 'CombineUrl'
    // TODO: Method 'CompareUrl'
    // TODO: Method 'QueryInfo'
};
// --------------------------------------------------------
// Type: INTERNETFEATURELIST
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const INTERNETFEATURELIST = *opaque{
};
// --------------------------------------------------------
// Type: IInternetSecurityMgrSite
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInternetSecurityMgrSite = *opaque{
    // TODO: Method 'GetWindow'
    // TODO: Method 'EnableModeless'
};
// --------------------------------------------------------
// Type: PUAF
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PUAF = *opaque{
};
// --------------------------------------------------------
// Type: PUAFOUT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PUAFOUT = *opaque{
};
// --------------------------------------------------------
// Type: SZM_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SZM_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: IInternetSecurityManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInternetSecurityManager = *opaque{
    // TODO: Method 'SetSecuritySite'
    // TODO: Method 'GetSecuritySite'
    // TODO: Method 'MapUrlToZone'
    // TODO: Method 'GetSecurityId'
    // TODO: Method 'ProcessUrlAction'
    // TODO: Method 'QueryCustomPolicy'
    // TODO: Method 'SetZoneMapping'
    // TODO: Method 'GetZoneMappings'
};
// --------------------------------------------------------
// Type: IInternetSecurityManagerEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInternetSecurityManagerEx = *opaque{
    // TODO: Method 'ProcessUrlActionEx'
};
// --------------------------------------------------------
// Type: IInternetSecurityManagerEx2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInternetSecurityManagerEx2 = *opaque{
    // TODO: Method 'MapUrlToZoneEx2'
    // TODO: Method 'ProcessUrlActionEx2'
    // TODO: Method 'GetSecurityIdEx2'
    // TODO: Method 'QueryCustomPolicyEx2'
};
// --------------------------------------------------------
// Type: IZoneIdentifier
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IZoneIdentifier = *opaque{
    // TODO: Method 'GetId'
    // TODO: Method 'SetId'
    // TODO: Method 'Remove'
};
// --------------------------------------------------------
// Type: IZoneIdentifier2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IZoneIdentifier2 = *opaque{
    // TODO: Method 'GetLastWriterPackageFamilyName'
    // TODO: Method 'SetLastWriterPackageFamilyName'
    // TODO: Method 'RemoveLastWriterPackageFamilyName'
    // TODO: Method 'GetAppZoneId'
    // TODO: Method 'SetAppZoneId'
    // TODO: Method 'RemoveAppZoneId'
};
// --------------------------------------------------------
// Type: IInternetHostSecurityManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInternetHostSecurityManager = *opaque{
    // TODO: Method 'GetSecurityId'
    // TODO: Method 'ProcessUrlAction'
    // TODO: Method 'QueryCustomPolicy'
};
// --------------------------------------------------------
// Type: URLZONE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const URLZONE = *opaque{
};
// --------------------------------------------------------
// Type: URLTEMPLATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const URLTEMPLATE = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL_IInternetZoneManager_0001
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL_IInternetZoneManager_0001 = *opaque{
};
// --------------------------------------------------------
// Type: ZAFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ZAFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: ZONEATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ZONEATTRIBUTES = extern struct {
    cbSize: {"kind":"UInt32"},
    szDisplayName: {"kind":"Array","child": {"kind":"UInt16"}},
    szDescription: {"kind":"Array","child": {"kind":"UInt16"}},
    szIconPath: {"kind":"Array","child": {"kind":"UInt16"}},
    dwTemplateMinLevel: {"kind":"UInt32"},
    dwTemplateRecommended: {"kind":"UInt32"},
    dwTemplateCurrentLevel: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: URLZONEREG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const URLZONEREG = *opaque{
};
// --------------------------------------------------------
// Type: IInternetZoneManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInternetZoneManager = *opaque{
    // TODO: Method 'GetZoneAttributes'
    // TODO: Method 'SetZoneAttributes'
    // TODO: Method 'GetZoneCustomPolicy'
    // TODO: Method 'SetZoneCustomPolicy'
    // TODO: Method 'GetZoneActionPolicy'
    // TODO: Method 'SetZoneActionPolicy'
    // TODO: Method 'PromptAction'
    // TODO: Method 'LogAction'
    // TODO: Method 'CreateZoneEnumerator'
    // TODO: Method 'GetZoneAt'
    // TODO: Method 'DestroyZoneEnumerator'
    // TODO: Method 'CopyTemplatePoliciesToZone'
};
// --------------------------------------------------------
// Type: IInternetZoneManagerEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInternetZoneManagerEx = *opaque{
    // TODO: Method 'GetZoneActionPolicyEx'
    // TODO: Method 'SetZoneActionPolicyEx'
};
// --------------------------------------------------------
// Type: IInternetZoneManagerEx2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInternetZoneManagerEx2 = *opaque{
    // TODO: Method 'GetZoneAttributesEx'
    // TODO: Method 'GetZoneSecurityState'
    // TODO: Method 'GetIESecurityState'
    // TODO: Method 'FixUnsecureSettings'
};
// --------------------------------------------------------
// Type: CODEBASEHOLD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CODEBASEHOLD = extern struct {
    cbSize: {"kind":"UInt32"},
    szDistUnit: {"kind""Ptr","child":{"kind":"UInt16"}},
    szCodeBase: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwVersionMS: {"kind":"UInt32"},
    dwVersionLS: {"kind":"UInt32"},
    dwStyle: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: ISoftDistExt
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISoftDistExt = *opaque{
    // TODO: Method 'ProcessSoftDist'
    // TODO: Method 'GetFirstCodeBase'
    // TODO: Method 'GetNextCodeBase'
    // TODO: Method 'AsyncInstallDistributionUnit'
};
// --------------------------------------------------------
// Type: ICatalogFileInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICatalogFileInfo = *opaque{
    // TODO: Method 'GetCatalogFile'
    // TODO: Method 'GetJavaTrust'
};
// --------------------------------------------------------
// Type: IDataFilter
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDataFilter = *opaque{
    // TODO: Method 'DoEncode'
    // TODO: Method 'DoDecode'
    // TODO: Method 'SetEncodingLevel'
};
// --------------------------------------------------------
// Type: PROTOCOLFILTERDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROTOCOLFILTERDATA = extern struct {
    cbSize: {"kind":"UInt32"},
    pProtocolSink: Windows.Win32.Com.IInternetProtocolSink,
    pProtocol: Windows.Win32.Com.IInternetProtocol,
    pUnk: Windows.Win32.Com.IUnknown,
    dwFilterFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DATAINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DATAINFO = extern struct {
    ulTotalSize: {"kind":"UInt32"},
    ulavrPacketSize: {"kind":"UInt32"},
    ulConnectSpeed: {"kind":"UInt32"},
    ulProcessorSpeed: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IEncodingFilterFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEncodingFilterFactory = *opaque{
    // TODO: Method 'FindBestFilter'
    // TODO: Method 'GetDefaultFilter'
};
// --------------------------------------------------------
// Type: HIT_LOGGING_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HIT_LOGGING_INFO = extern struct {
    dwStructSize: {"kind":"UInt32"},
    lpszLoggedUrlName: {"kind""Ptr","child":{"kind":"SByte"}},
    StartTime: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    EndTime: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    lpszExtendedInfo: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: CONFIRMSAFETY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CONFIRMSAFETY = extern struct {
    clsid: Guid,
    pUnk: Windows.Win32.Com.IUnknown,
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IWrappedProtocol
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWrappedProtocol = *opaque{
    // TODO: Method 'GetWrapperCode'
};
// --------------------------------------------------------
// Type: BINDHANDLETYPES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BINDHANDLETYPES = *opaque{
};
// --------------------------------------------------------
// Type: IGetBindHandle
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IGetBindHandle = *opaque{
    // TODO: Method 'GetBindHandle'
};
// --------------------------------------------------------
// Type: PROTOCOL_ARGUMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROTOCOL_ARGUMENT = extern struct {
    szMethod: {"kind""Ptr","child":{"kind":"UInt16"}},
    szTargetUrl: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: IBindCallbackRedirect
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IBindCallbackRedirect = *opaque{
    // TODO: Method 'Redirect'
};
// --------------------------------------------------------
// Type: IBindHttpSecurity
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IBindHttpSecurity = *opaque{
    // TODO: Method 'GetIgnoreCertMask'
};
// --------------------------------------------------------
// Type: OLESTREAMVTBL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OLESTREAMVTBL = extern struct {
    Get: {"kind":"IntPtr"},
    Put: {"kind":"IntPtr"},
};
// --------------------------------------------------------
// Type: OLESTREAM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OLESTREAM = extern struct {
    lpstbl: {"kind""Ptr","child":Windows.Win32.Com.OLESTREAMVTBL},
};
// --------------------------------------------------------
// Type: UASFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UASFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CONNECTDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CONNECTDATA = extern struct {
    pUnk: Windows.Win32.Com.IUnknown,
    dwCookie: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IEnumConnections
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumConnections = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IConnectionPoint
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IConnectionPoint = *opaque{
    // TODO: Method 'GetConnectionInterface'
    // TODO: Method 'GetConnectionPointContainer'
    // TODO: Method 'Advise'
    // TODO: Method 'Unadvise'
    // TODO: Method 'EnumConnections'
};
// --------------------------------------------------------
// Type: IEnumConnectionPoints
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumConnectionPoints = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IConnectionPointContainer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IConnectionPointContainer = *opaque{
    // TODO: Method 'EnumConnectionPoints'
    // TODO: Method 'FindConnectionPoint'
};
// --------------------------------------------------------
// Type: LICINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LICINFO = extern struct {
    cbLicInfo: {"kind":"Int32"},
    fRuntimeKeyAvail: Windows.Win32.SystemServices.BOOL,
    fLicVerified: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: IClassFactory2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IClassFactory2 = *opaque{
    // TODO: Method 'GetLicInfo'
    // TODO: Method 'RequestLicKey'
    // TODO: Method 'CreateInstanceLic'
};
// --------------------------------------------------------
// Type: IProvideClassInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IProvideClassInfo = *opaque{
    // TODO: Method 'GetClassInfoA'
};
// --------------------------------------------------------
// Type: GUIDKIND
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const GUIDKIND = *opaque{
};
// --------------------------------------------------------
// Type: IProvideClassInfo2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IProvideClassInfo2 = *opaque{
    // TODO: Method 'GetGUID'
};
// --------------------------------------------------------
// Type: IProvideMultipleClassInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IProvideMultipleClassInfo = *opaque{
    // TODO: Method 'GetMultiTypeInfoCount'
    // TODO: Method 'GetInfoOfIndex'
};
// --------------------------------------------------------
// Type: CONTROLINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CONTROLINFO = extern struct {
    cb: {"kind":"UInt32"},
    hAccel: Windows.Win32.MenusAndResources.HACCEL,
    cAccel: {"kind":"UInt16"},
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CTRLINFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CTRLINFO = *opaque{
};
// --------------------------------------------------------
// Type: IOleControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOleControl = *opaque{
    // TODO: Method 'GetControlInfo'
    // TODO: Method 'OnMnemonic'
    // TODO: Method 'OnAmbientPropertyChange'
    // TODO: Method 'FreezeEvents'
};
// --------------------------------------------------------
// Type: POINTF
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POINTF = extern struct {
    x: {"kind":"Single"},
    y: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: XFORMCOORDS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const XFORMCOORDS = *opaque{
};
// --------------------------------------------------------
// Type: IOleControlSite
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOleControlSite = *opaque{
    // TODO: Method 'OnControlInfoChanged'
    // TODO: Method 'LockInPlaceActive'
    // TODO: Method 'GetExtendedControl'
    // TODO: Method 'TransformCoords'
    // TODO: Method 'TranslateAcceleratorA'
    // TODO: Method 'OnFocus'
    // TODO: Method 'ShowPropertyFrame'
};
// --------------------------------------------------------
// Type: PROPPAGEINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROPPAGEINFO = extern struct {
    cb: {"kind":"UInt32"},
    pszTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    size: Windows.Win32.DisplayDevices.SIZE,
    pszDocString: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszHelpFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwHelpContext: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IPropertyPage
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPropertyPage = *opaque{
    // TODO: Method 'SetPageSite'
    // TODO: Method 'Activate'
    // TODO: Method 'Deactivate'
    // TODO: Method 'GetPageInfo'
    // TODO: Method 'SetObjects'
    // TODO: Method 'Show'
    // TODO: Method 'Move'
    // TODO: Method 'IsPageDirty'
    // TODO: Method 'Apply'
    // TODO: Method 'Help'
    // TODO: Method 'TranslateAcceleratorA'
};
// --------------------------------------------------------
// Type: IPropertyPage2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPropertyPage2 = *opaque{
    // TODO: Method 'EditProperty'
};
// --------------------------------------------------------
// Type: PROPPAGESTATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROPPAGESTATUS = *opaque{
};
// --------------------------------------------------------
// Type: IPropertyPageSite
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPropertyPageSite = *opaque{
    // TODO: Method 'OnStatusChange'
    // TODO: Method 'GetLocaleID'
    // TODO: Method 'GetPageContainer'
    // TODO: Method 'TranslateAcceleratorA'
};
// --------------------------------------------------------
// Type: IPropertyNotifySink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPropertyNotifySink = *opaque{
    // TODO: Method 'OnChanged'
    // TODO: Method 'OnRequestEdit'
};
// --------------------------------------------------------
// Type: CAUUID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CAUUID = extern struct {
    cElems: {"kind":"UInt32"},
    pElems: {"kind""Ptr","child":Guid},
};
// --------------------------------------------------------
// Type: ISpecifyPropertyPages
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISpecifyPropertyPages = *opaque{
    // TODO: Method 'GetPages'
};
// --------------------------------------------------------
// Type: IPersistMemory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPersistMemory = *opaque{
    // TODO: Method 'IsDirty'
    // TODO: Method 'Load'
    // TODO: Method 'Save'
    // TODO: Method 'GetSizeMax'
    // TODO: Method 'InitNew'
};
// --------------------------------------------------------
// Type: IPersistStreamInit
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPersistStreamInit = *opaque{
    // TODO: Method 'IsDirty'
    // TODO: Method 'Load'
    // TODO: Method 'Save'
    // TODO: Method 'GetSizeMax'
    // TODO: Method 'InitNew'
};
// --------------------------------------------------------
// Type: IPersistPropertyBag
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPersistPropertyBag = *opaque{
    // TODO: Method 'InitNew'
    // TODO: Method 'Load'
    // TODO: Method 'Save'
};
// --------------------------------------------------------
// Type: ISimpleFrameSite
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISimpleFrameSite = *opaque{
    // TODO: Method 'PreMessageFilter'
    // TODO: Method 'PostMessageFilter'
};
// --------------------------------------------------------
// Type: IFont
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFont = *opaque{
    // TODO: Method 'get_Name'
    // TODO: Method 'put_Name'
    // TODO: Method 'get_Size'
    // TODO: Method 'put_Size'
    // TODO: Method 'get_Bold'
    // TODO: Method 'put_Bold'
    // TODO: Method 'get_Italic'
    // TODO: Method 'put_Italic'
    // TODO: Method 'get_Underline'
    // TODO: Method 'put_Underline'
    // TODO: Method 'get_Strikethrough'
    // TODO: Method 'put_Strikethrough'
    // TODO: Method 'get_Weight'
    // TODO: Method 'put_Weight'
    // TODO: Method 'get_Charset'
    // TODO: Method 'put_Charset'
    // TODO: Method 'get_hFont'
    // TODO: Method 'Clone'
    // TODO: Method 'IsEqual'
    // TODO: Method 'SetRatio'
    // TODO: Method 'QueryTextMetrics'
    // TODO: Method 'AddRefHfont'
    // TODO: Method 'ReleaseHfont'
    // TODO: Method 'SetHdc'
};
// --------------------------------------------------------
// Type: PictureAttributes
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PictureAttributes = *opaque{
};
// --------------------------------------------------------
// Type: IPicture
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPicture = *opaque{
    // TODO: Method 'get_Handle'
    // TODO: Method 'get_hPal'
    // TODO: Method 'get_Type'
    // TODO: Method 'get_Width'
    // TODO: Method 'get_Height'
    // TODO: Method 'Render'
    // TODO: Method 'set_hPal'
    // TODO: Method 'get_CurDC'
    // TODO: Method 'SelectPicture'
    // TODO: Method 'get_KeepOriginalFormat'
    // TODO: Method 'put_KeepOriginalFormat'
    // TODO: Method 'PictureChanged'
    // TODO: Method 'SaveAsFile'
    // TODO: Method 'get_Attributes'
};
// --------------------------------------------------------
// Type: IPicture2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPicture2 = *opaque{
    // TODO: Method 'get_Handle'
    // TODO: Method 'get_hPal'
    // TODO: Method 'get_Type'
    // TODO: Method 'get_Width'
    // TODO: Method 'get_Height'
    // TODO: Method 'Render'
    // TODO: Method 'set_hPal'
    // TODO: Method 'get_CurDC'
    // TODO: Method 'SelectPicture'
    // TODO: Method 'get_KeepOriginalFormat'
    // TODO: Method 'put_KeepOriginalFormat'
    // TODO: Method 'PictureChanged'
    // TODO: Method 'SaveAsFile'
    // TODO: Method 'get_Attributes'
};
// --------------------------------------------------------
// Type: IFontEventsDisp
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFontEventsDisp = *opaque{
};
// --------------------------------------------------------
// Type: IFontDisp
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFontDisp = *opaque{
};
// --------------------------------------------------------
// Type: IPictureDisp
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPictureDisp = *opaque{
};
// --------------------------------------------------------
// Type: IOleInPlaceObjectWindowless
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOleInPlaceObjectWindowless = *opaque{
    // TODO: Method 'OnWindowMessage'
    // TODO: Method 'GetDropTarget'
};
// --------------------------------------------------------
// Type: ACTIVATEFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ACTIVATEFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: IOleInPlaceSiteEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOleInPlaceSiteEx = *opaque{
    // TODO: Method 'OnInPlaceActivateEx'
    // TODO: Method 'OnInPlaceDeactivateEx'
    // TODO: Method 'RequestUIActivate'
};
// --------------------------------------------------------
// Type: OLEDCFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OLEDCFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: IOleInPlaceSiteWindowless
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOleInPlaceSiteWindowless = *opaque{
    // TODO: Method 'CanWindowlessActivate'
    // TODO: Method 'GetCapture'
    // TODO: Method 'SetCapture'
    // TODO: Method 'GetFocus'
    // TODO: Method 'SetFocus'
    // TODO: Method 'GetDC'
    // TODO: Method 'ReleaseDC'
    // TODO: Method 'InvalidateRect'
    // TODO: Method 'InvalidateRgn'
    // TODO: Method 'ScrollRect'
    // TODO: Method 'AdjustRect'
    // TODO: Method 'OnDefWindowMessage'
};
// --------------------------------------------------------
// Type: VIEWSTATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VIEWSTATUS = *opaque{
};
// --------------------------------------------------------
// Type: HITRESULT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HITRESULT = *opaque{
};
// --------------------------------------------------------
// Type: DVASPECT2
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DVASPECT2 = *opaque{
};
// --------------------------------------------------------
// Type: ExtentInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ExtentInfo = extern struct {
    cb: {"kind":"UInt32"},
    dwExtentMode: {"kind":"UInt32"},
    sizelProposed: Windows.Win32.DisplayDevices.SIZE,
};
// --------------------------------------------------------
// Type: ExtentMode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ExtentMode = *opaque{
};
// --------------------------------------------------------
// Type: AspectInfoFlag
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AspectInfoFlag = *opaque{
};
// --------------------------------------------------------
// Type: AspectInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AspectInfo = extern struct {
    cb: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IViewObjectEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IViewObjectEx = *opaque{
    // TODO: Method 'GetRect'
    // TODO: Method 'GetViewStatus'
    // TODO: Method 'QueryHitPoint'
    // TODO: Method 'QueryHitRect'
    // TODO: Method 'GetNaturalExtent'
};
// --------------------------------------------------------
// Type: IOleUndoUnit
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOleUndoUnit = *opaque{
    // TODO: Method 'Do'
    // TODO: Method 'GetDescription'
    // TODO: Method 'GetUnitType'
    // TODO: Method 'OnNextAdd'
};
// --------------------------------------------------------
// Type: IOleParentUndoUnit
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOleParentUndoUnit = *opaque{
    // TODO: Method 'Open'
    // TODO: Method 'Close'
    // TODO: Method 'Add'
    // TODO: Method 'FindUnit'
    // TODO: Method 'GetParentState'
};
// --------------------------------------------------------
// Type: IEnumOleUndoUnits
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumOleUndoUnits = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IOleUndoManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOleUndoManager = *opaque{
    // TODO: Method 'Open'
    // TODO: Method 'Close'
    // TODO: Method 'Add'
    // TODO: Method 'GetOpenParentState'
    // TODO: Method 'DiscardFrom'
    // TODO: Method 'UndoTo'
    // TODO: Method 'RedoTo'
    // TODO: Method 'EnumUndoable'
    // TODO: Method 'EnumRedoable'
    // TODO: Method 'GetLastUndoDescription'
    // TODO: Method 'GetLastRedoDescription'
    // TODO: Method 'Enable'
};
// --------------------------------------------------------
// Type: POINTERINACTIVE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const POINTERINACTIVE = *opaque{
};
// --------------------------------------------------------
// Type: IPointerInactive
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPointerInactive = *opaque{
    // TODO: Method 'GetActivationPolicy'
    // TODO: Method 'OnInactiveMouseMove'
    // TODO: Method 'OnInactiveSetCursor'
};
// --------------------------------------------------------
// Type: IObjectWithSite
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IObjectWithSite = *opaque{
    // TODO: Method 'SetSite'
    // TODO: Method 'GetSite'
};
// --------------------------------------------------------
// Type: CALPOLESTR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CALPOLESTR = extern struct {
    cElems: {"kind":"UInt32"},
    pElems: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
};
// --------------------------------------------------------
// Type: CADWORD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CADWORD = extern struct {
    cElems: {"kind":"UInt32"},
    pElems: {"kind""Ptr","child":{"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: IPerPropertyBrowsing
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPerPropertyBrowsing = *opaque{
    // TODO: Method 'GetDisplayString'
    // TODO: Method 'MapPropertyToPage'
    // TODO: Method 'GetPredefinedStrings'
    // TODO: Method 'GetPredefinedValue'
};
// --------------------------------------------------------
// Type: PROPBAG2_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROPBAG2_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: PROPBAG2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROPBAG2 = extern struct {
    dwType: {"kind":"UInt32"},
    vt: {"kind":"UInt16"},
    cfType: {"kind":"UInt16"},
    dwHint: {"kind":"UInt32"},
    pstrName: {"kind""Ptr","child":{"kind":"UInt16"}},
    clsid: Guid,
};
// --------------------------------------------------------
// Type: IPropertyBag2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPropertyBag2 = *opaque{
    // TODO: Method 'Read'
    // TODO: Method 'Write'
    // TODO: Method 'CountProperties'
    // TODO: Method 'GetPropertyInfo'
    // TODO: Method 'LoadObject'
};
// --------------------------------------------------------
// Type: IPersistPropertyBag2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPersistPropertyBag2 = *opaque{
    // TODO: Method 'InitNew'
    // TODO: Method 'Load'
    // TODO: Method 'Save'
    // TODO: Method 'IsDirty'
};
// --------------------------------------------------------
// Type: IAdviseSinkEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAdviseSinkEx = *opaque{
    // TODO: Method 'OnViewStatusChange'
};
// --------------------------------------------------------
// Type: QACONTAINERFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QACONTAINERFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: QACONTAINER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QACONTAINER = extern struct {
    cbSize: {"kind":"UInt32"},
    pClientSite: Windows.Win32.Com.IOleClientSite,
    pAdviseSink: Windows.Win32.Com.IAdviseSinkEx,
    pPropertyNotifySink: Windows.Win32.Com.IPropertyNotifySink,
    pUnkEventSink: Windows.Win32.Com.IUnknown,
    dwAmbientFlags: {"kind":"UInt32"},
    colorFore: {"kind":"UInt32"},
    colorBack: {"kind":"UInt32"},
    pFont: Windows.Win32.Com.IFont,
    pUndoMgr: Windows.Win32.Com.IOleUndoManager,
    dwAppearance: {"kind":"UInt32"},
    lcid: {"kind":"Int32"},
    hpal: Windows.Win32.Gdi.HPALETTE,
    pBindHost: Windows.Win32.Com.IBindHost,
    pOleControlSite: Windows.Win32.Com.IOleControlSite,
    pServiceProvider: Windows.Win32.SystemServices.IServiceProvider,
};
// --------------------------------------------------------
// Type: QACONTROL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QACONTROL = extern struct {
    cbSize: {"kind":"UInt32"},
    dwMiscStatus: {"kind":"UInt32"},
    dwViewStatus: {"kind":"UInt32"},
    dwEventCookie: {"kind":"UInt32"},
    dwPropNotifyCookie: {"kind":"UInt32"},
    dwPointerActivationPolicy: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IQuickActivate
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IQuickActivate = *opaque{
    // TODO: Method 'QuickActivate'
    // TODO: Method 'SetContentExtent'
    // TODO: Method 'GetContentExtent'
};
// --------------------------------------------------------
// Type: OCPFIPARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OCPFIPARAMS = extern struct {
    cbStructSize: {"kind":"UInt32"},
    hWndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    x: {"kind":"Int32"},
    y: {"kind":"Int32"},
    lpszCaption: {"kind""Ptr","child":{"kind":"UInt16"}},
    cObjects: {"kind":"UInt32"},
    lplpUnk: {"kind""Ptr","child":Windows.Win32.Com.IUnknown},
    cPages: {"kind":"UInt32"},
    lpPages: {"kind""Ptr","child":Guid},
    lcid: {"kind":"UInt32"},
    dispidInitialProperty: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: FONTDESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FONTDESC = extern struct {
    cbSizeofstruct: {"kind":"UInt32"},
    lpstrName: {"kind""Ptr","child":{"kind":"UInt16"}},
    cySize: Windows.Win32.SystemServices.CY,
    sWeight: {"kind":"Int16"},
    sCharset: {"kind":"Int16"},
    fItalic: Windows.Win32.SystemServices.BOOL,
    fUnderline: Windows.Win32.SystemServices.BOOL,
    fStrikethrough: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: PICTDESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PICTDESC = extern struct {
    cbSizeofstruct: {"kind":"UInt32"},
    picType: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Com.PICTDESC+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _emf_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _emf_e__Struct = extern struct {
            hemf: {"kind":"IntPtr"},
        };
        // --------------------------------------------------------
        // Type: _wmf_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _wmf_e__Struct = extern struct {
            hmeta: {"kind":"IntPtr"},
            xExt: {"kind":"Int32"},
            yExt: {"kind":"Int32"},
        };
        // --------------------------------------------------------
        // Type: _bmp_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _bmp_e__Struct = extern struct {
            hbitmap: Windows.Win32.Gdi.HBITMAP,
            hpal: Windows.Win32.Gdi.HPALETTE,
        };
        // --------------------------------------------------------
        // Type: _icon_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _icon_e__Struct = extern struct {
            hicon: Windows.Win32.Gdi.HICON,
        };
    };
};
// --------------------------------------------------------
// Type: OLE_TRISTATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OLE_TRISTATE = *opaque{
};
// --------------------------------------------------------
// Type: IVBGetControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVBGetControl = *opaque{
    // TODO: Method 'EnumControls'
};
// --------------------------------------------------------
// Type: IGetOleObject
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IGetOleObject = *opaque{
    // TODO: Method 'GetOleObject'
};
// --------------------------------------------------------
// Type: IVBFormat
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVBFormat = *opaque{
    // TODO: Method 'Format'
};
// --------------------------------------------------------
// Type: IGetVBAObject
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IGetVBAObject = *opaque{
    // TODO: Method 'GetObjectA'
};
// --------------------------------------------------------
// Type: DOCMISC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOCMISC = *opaque{
};
// --------------------------------------------------------
// Type: IOleDocument
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOleDocument = *opaque{
    // TODO: Method 'CreateView'
    // TODO: Method 'GetDocMiscStatus'
    // TODO: Method 'EnumViews'
};
// --------------------------------------------------------
// Type: IOleDocumentSite
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOleDocumentSite = *opaque{
    // TODO: Method 'ActivateMe'
};
// --------------------------------------------------------
// Type: IOleDocumentView
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOleDocumentView = *opaque{
    // TODO: Method 'SetInPlaceSite'
    // TODO: Method 'GetInPlaceSite'
    // TODO: Method 'GetDocument'
    // TODO: Method 'SetRect'
    // TODO: Method 'GetRect'
    // TODO: Method 'SetRectComplex'
    // TODO: Method 'Show'
    // TODO: Method 'UIActivate'
    // TODO: Method 'Open'
    // TODO: Method 'CloseView'
    // TODO: Method 'SaveViewState'
    // TODO: Method 'ApplyViewState'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IEnumOleDocumentViews
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumOleDocumentViews = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IContinueCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IContinueCallback = *opaque{
    // TODO: Method 'FContinue'
    // TODO: Method 'FContinuePrinting'
};
// --------------------------------------------------------
// Type: __MIDL_IPrint_0001
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL_IPrint_0001 = *opaque{
};
// --------------------------------------------------------
// Type: PAGERANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PAGERANGE = extern struct {
    nFromPage: {"kind":"Int32"},
    nToPage: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: PAGESET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PAGESET = extern struct {
    cbStruct: {"kind":"UInt32"},
    fOddPages: Windows.Win32.SystemServices.BOOL,
    fEvenPages: Windows.Win32.SystemServices.BOOL,
    cPageRange: {"kind":"UInt32"},
    rgPages: {"kind":"Array","child": Windows.Win32.Com.PAGERANGE},
};
// --------------------------------------------------------
// Type: IPrint
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPrint = *opaque{
    // TODO: Method 'SetInitialPageNum'
    // TODO: Method 'GetPageInfo'
    // TODO: Method 'Print'
};
// --------------------------------------------------------
// Type: OLECMDF
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OLECMDF = *opaque{
};
// --------------------------------------------------------
// Type: OLECMD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OLECMD = extern struct {
    cmdID: {"kind":"UInt32"},
    cmdf: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: OLECMDTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OLECMDTEXT = extern struct {
    cmdtextf: {"kind":"UInt32"},
    cwActual: {"kind":"UInt32"},
    cwBuf: {"kind":"UInt32"},
    rgwz: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: OLECMDTEXTF
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OLECMDTEXTF = *opaque{
};
// --------------------------------------------------------
// Type: OLECMDEXECOPT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OLECMDEXECOPT = *opaque{
};
// --------------------------------------------------------
// Type: OLECMDID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OLECMDID = *opaque{
};
// --------------------------------------------------------
// Type: MEDIAPLAYBACK_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MEDIAPLAYBACK_STATE = *opaque{
};
// --------------------------------------------------------
// Type: IGNOREMIME
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IGNOREMIME = *opaque{
};
// --------------------------------------------------------
// Type: WPCSETTING
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WPCSETTING = *opaque{
};
// --------------------------------------------------------
// Type: IOleCommandTarget
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOleCommandTarget = *opaque{
    // TODO: Method 'QueryStatus'
    // TODO: Method 'Exec'
};
// --------------------------------------------------------
// Type: OLECMDID_REFRESHFLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OLECMDID_REFRESHFLAG = *opaque{
};
// --------------------------------------------------------
// Type: OLECMDID_PAGEACTIONFLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OLECMDID_PAGEACTIONFLAG = *opaque{
};
// --------------------------------------------------------
// Type: OLECMDID_BROWSERSTATEFLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OLECMDID_BROWSERSTATEFLAG = *opaque{
};
// --------------------------------------------------------
// Type: OLECMDID_OPTICAL_ZOOMFLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OLECMDID_OPTICAL_ZOOMFLAG = *opaque{
};
// --------------------------------------------------------
// Type: PAGEACTION_UI
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PAGEACTION_UI = *opaque{
};
// --------------------------------------------------------
// Type: OLECMDID_WINDOWSTATE_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OLECMDID_WINDOWSTATE_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: OLECMDID_VIEWPORT_MODE_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OLECMDID_VIEWPORT_MODE_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: IZoomEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IZoomEvents = *opaque{
    // TODO: Method 'OnZoomPercentChanged'
};
// --------------------------------------------------------
// Type: IProtectFocus
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IProtectFocus = *opaque{
    // TODO: Method 'AllowFocusChange'
};
// --------------------------------------------------------
// Type: IProtectedModeMenuServices
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IProtectedModeMenuServices = *opaque{
    // TODO: Method 'CreateMenu'
    // TODO: Method 'LoadMenuA'
    // TODO: Method 'LoadMenuID'
};
// --------------------------------------------------------
// Type: LPFNOLEUIHOOK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFNOLEUIHOOK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: OLEUIINSERTOBJECTW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OLEUIINSERTOBJECTW = extern struct {
    cbStruct: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    hWndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    lpszCaption: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpfnHook: Windows.Win32.Com.LPFNOLEUIHOOK,
    lCustData: Windows.Win32.WindowsAndMessaging.LPARAM,
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    lpszTemplate: {"kind""Ptr","child":{"kind":"UInt16"}},
    hResource: {"kind":"IntPtr"},
    clsid: Guid,
    lpszFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchFile: {"kind":"UInt32"},
    cClsidExclude: {"kind":"UInt32"},
    lpClsidExclude: {"kind""Ptr","child":Guid},
    iid: Guid,
    oleRender: {"kind":"UInt32"},
    lpFormatEtc: {"kind""Ptr","child":Windows.Win32.Com.FORMATETC},
    lpIOleClientSite: Windows.Win32.Com.IOleClientSite,
    lpIStorage: Windows.Win32.StructuredStorage.IStorage,
    ppvObj: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    sc: {"kind":"Int32"},
    hMetaPict: {"kind":"IntPtr"},
};
// --------------------------------------------------------
// Type: OLEUIINSERTOBJECTA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OLEUIINSERTOBJECTA = extern struct {
    cbStruct: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    hWndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    lpszCaption: {"kind""Ptr","child":{"kind":"SByte"}},
    lpfnHook: Windows.Win32.Com.LPFNOLEUIHOOK,
    lCustData: Windows.Win32.WindowsAndMessaging.LPARAM,
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    lpszTemplate: {"kind""Ptr","child":{"kind":"SByte"}},
    hResource: {"kind":"IntPtr"},
    clsid: Guid,
    lpszFile: {"kind""Ptr","child":{"kind":"SByte"}},
    cchFile: {"kind":"UInt32"},
    cClsidExclude: {"kind":"UInt32"},
    lpClsidExclude: {"kind""Ptr","child":Guid},
    iid: Guid,
    oleRender: {"kind":"UInt32"},
    lpFormatEtc: {"kind""Ptr","child":Windows.Win32.Com.FORMATETC},
    lpIOleClientSite: Windows.Win32.Com.IOleClientSite,
    lpIStorage: Windows.Win32.StructuredStorage.IStorage,
    ppvObj: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    sc: {"kind":"Int32"},
    hMetaPict: {"kind":"IntPtr"},
};
// --------------------------------------------------------
// Type: OLEUIPASTEFLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OLEUIPASTEFLAG = *opaque{
};
// --------------------------------------------------------
// Type: OLEUIPASTEENTRYW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OLEUIPASTEENTRYW = extern struct {
    fmtetc: Windows.Win32.Com.FORMATETC,
    lpstrFormatName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpstrResultText: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    dwScratchSpace: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: OLEUIPASTEENTRYA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OLEUIPASTEENTRYA = extern struct {
    fmtetc: Windows.Win32.Com.FORMATETC,
    lpstrFormatName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpstrResultText: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},
    dwScratchSpace: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: OLEUIPASTESPECIALW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OLEUIPASTESPECIALW = extern struct {
    cbStruct: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    hWndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    lpszCaption: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpfnHook: Windows.Win32.Com.LPFNOLEUIHOOK,
    lCustData: Windows.Win32.WindowsAndMessaging.LPARAM,
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    lpszTemplate: {"kind""Ptr","child":{"kind":"UInt16"}},
    hResource: {"kind":"IntPtr"},
    lpSrcDataObj: Windows.Win32.Com.IDataObject,
    arrPasteEntries: {"kind""Ptr","child":Windows.Win32.Com.OLEUIPASTEENTRYW},
    cPasteEntries: {"kind":"Int32"},
    arrLinkTypes: {"kind""Ptr","child":{"kind":"UInt32"}},
    cLinkTypes: {"kind":"Int32"},
    cClsidExclude: {"kind":"UInt32"},
    lpClsidExclude: {"kind""Ptr","child":Guid},
    nSelectedIndex: {"kind":"Int32"},
    fLink: Windows.Win32.SystemServices.BOOL,
    hMetaPict: {"kind":"IntPtr"},
    sizel: Windows.Win32.DisplayDevices.SIZE,
};
// --------------------------------------------------------
// Type: OLEUIPASTESPECIALA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OLEUIPASTESPECIALA = extern struct {
    cbStruct: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    hWndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    lpszCaption: {"kind""Ptr","child":{"kind":"SByte"}},
    lpfnHook: Windows.Win32.Com.LPFNOLEUIHOOK,
    lCustData: Windows.Win32.WindowsAndMessaging.LPARAM,
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    lpszTemplate: {"kind""Ptr","child":{"kind":"SByte"}},
    hResource: {"kind":"IntPtr"},
    lpSrcDataObj: Windows.Win32.Com.IDataObject,
    arrPasteEntries: {"kind""Ptr","child":Windows.Win32.Com.OLEUIPASTEENTRYA},
    cPasteEntries: {"kind":"Int32"},
    arrLinkTypes: {"kind""Ptr","child":{"kind":"UInt32"}},
    cLinkTypes: {"kind":"Int32"},
    cClsidExclude: {"kind":"UInt32"},
    lpClsidExclude: {"kind""Ptr","child":Guid},
    nSelectedIndex: {"kind":"Int32"},
    fLink: Windows.Win32.SystemServices.BOOL,
    hMetaPict: {"kind":"IntPtr"},
    sizel: Windows.Win32.DisplayDevices.SIZE,
};
// --------------------------------------------------------
// Type: IOleUILinkContainerW
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOleUILinkContainerW = *opaque{
    // TODO: Method 'GetNextLink'
    // TODO: Method 'SetLinkUpdateOptions'
    // TODO: Method 'GetLinkUpdateOptions'
    // TODO: Method 'SetLinkSource'
    // TODO: Method 'GetLinkSource'
    // TODO: Method 'OpenLinkSource'
    // TODO: Method 'UpdateLink'
    // TODO: Method 'CancelLink'
};
// --------------------------------------------------------
// Type: IOleUILinkContainerA
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOleUILinkContainerA = *opaque{
    // TODO: Method 'GetNextLink'
    // TODO: Method 'SetLinkUpdateOptions'
    // TODO: Method 'GetLinkUpdateOptions'
    // TODO: Method 'SetLinkSource'
    // TODO: Method 'GetLinkSource'
    // TODO: Method 'OpenLinkSource'
    // TODO: Method 'UpdateLink'
    // TODO: Method 'CancelLink'
};
// --------------------------------------------------------
// Type: OLEUIEDITLINKSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OLEUIEDITLINKSW = extern struct {
    cbStruct: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    hWndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    lpszCaption: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpfnHook: Windows.Win32.Com.LPFNOLEUIHOOK,
    lCustData: Windows.Win32.WindowsAndMessaging.LPARAM,
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    lpszTemplate: {"kind""Ptr","child":{"kind":"UInt16"}},
    hResource: {"kind":"IntPtr"},
    lpOleUILinkContainer: Windows.Win32.Com.IOleUILinkContainerW,
};
// --------------------------------------------------------
// Type: OLEUIEDITLINKSA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OLEUIEDITLINKSA = extern struct {
    cbStruct: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    hWndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    lpszCaption: {"kind""Ptr","child":{"kind":"SByte"}},
    lpfnHook: Windows.Win32.Com.LPFNOLEUIHOOK,
    lCustData: Windows.Win32.WindowsAndMessaging.LPARAM,
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    lpszTemplate: {"kind""Ptr","child":{"kind":"SByte"}},
    hResource: {"kind":"IntPtr"},
    lpOleUILinkContainer: Windows.Win32.Com.IOleUILinkContainerA,
};
// --------------------------------------------------------
// Type: OLEUICHANGEICONW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OLEUICHANGEICONW = extern struct {
    cbStruct: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    hWndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    lpszCaption: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpfnHook: Windows.Win32.Com.LPFNOLEUIHOOK,
    lCustData: Windows.Win32.WindowsAndMessaging.LPARAM,
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    lpszTemplate: {"kind""Ptr","child":{"kind":"UInt16"}},
    hResource: {"kind":"IntPtr"},
    hMetaPict: {"kind":"IntPtr"},
    clsid: Guid,
    szIconExe: {"kind":"Array","child": {"kind":"UInt16"}},
    cchIconExe: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: OLEUICHANGEICONA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OLEUICHANGEICONA = extern struct {
    cbStruct: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    hWndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    lpszCaption: {"kind""Ptr","child":{"kind":"SByte"}},
    lpfnHook: Windows.Win32.Com.LPFNOLEUIHOOK,
    lCustData: Windows.Win32.WindowsAndMessaging.LPARAM,
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    lpszTemplate: {"kind""Ptr","child":{"kind":"SByte"}},
    hResource: {"kind":"IntPtr"},
    hMetaPict: {"kind":"IntPtr"},
    clsid: Guid,
    szIconExe: {"kind":"Array","child": {"kind":"SByte"}},
    cchIconExe: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: OLEUICONVERTW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OLEUICONVERTW = extern struct {
    cbStruct: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    hWndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    lpszCaption: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpfnHook: Windows.Win32.Com.LPFNOLEUIHOOK,
    lCustData: Windows.Win32.WindowsAndMessaging.LPARAM,
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    lpszTemplate: {"kind""Ptr","child":{"kind":"UInt16"}},
    hResource: {"kind":"IntPtr"},
    clsid: Guid,
    clsidConvertDefault: Guid,
    clsidActivateDefault: Guid,
    clsidNew: Guid,
    dvAspect: {"kind":"UInt32"},
    wFormat: {"kind":"UInt16"},
    fIsLinkedObject: Windows.Win32.SystemServices.BOOL,
    hMetaPict: {"kind":"IntPtr"},
    lpszUserType: {"kind""Ptr","child":{"kind":"UInt16"}},
    fObjectsIconChanged: Windows.Win32.SystemServices.BOOL,
    lpszDefLabel: {"kind""Ptr","child":{"kind":"UInt16"}},
    cClsidExclude: {"kind":"UInt32"},
    lpClsidExclude: {"kind""Ptr","child":Guid},
};
// --------------------------------------------------------
// Type: OLEUICONVERTA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OLEUICONVERTA = extern struct {
    cbStruct: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    hWndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    lpszCaption: {"kind""Ptr","child":{"kind":"SByte"}},
    lpfnHook: Windows.Win32.Com.LPFNOLEUIHOOK,
    lCustData: Windows.Win32.WindowsAndMessaging.LPARAM,
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    lpszTemplate: {"kind""Ptr","child":{"kind":"SByte"}},
    hResource: {"kind":"IntPtr"},
    clsid: Guid,
    clsidConvertDefault: Guid,
    clsidActivateDefault: Guid,
    clsidNew: Guid,
    dvAspect: {"kind":"UInt32"},
    wFormat: {"kind":"UInt16"},
    fIsLinkedObject: Windows.Win32.SystemServices.BOOL,
    hMetaPict: {"kind":"IntPtr"},
    lpszUserType: {"kind""Ptr","child":{"kind":"SByte"}},
    fObjectsIconChanged: Windows.Win32.SystemServices.BOOL,
    lpszDefLabel: {"kind""Ptr","child":{"kind":"SByte"}},
    cClsidExclude: {"kind":"UInt32"},
    lpClsidExclude: {"kind""Ptr","child":Guid},
};
// --------------------------------------------------------
// Type: OLEUIBUSYW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OLEUIBUSYW = extern struct {
    cbStruct: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    hWndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    lpszCaption: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpfnHook: Windows.Win32.Com.LPFNOLEUIHOOK,
    lCustData: Windows.Win32.WindowsAndMessaging.LPARAM,
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    lpszTemplate: {"kind""Ptr","child":{"kind":"UInt16"}},
    hResource: {"kind":"IntPtr"},
    hTask: {"kind":"IntPtr"},
    lphWndDialog: {"kind""Ptr","child":Windows.Win32.WindowsAndMessaging.HWND},
};
// --------------------------------------------------------
// Type: OLEUIBUSYA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OLEUIBUSYA = extern struct {
    cbStruct: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    hWndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    lpszCaption: {"kind""Ptr","child":{"kind":"SByte"}},
    lpfnHook: Windows.Win32.Com.LPFNOLEUIHOOK,
    lCustData: Windows.Win32.WindowsAndMessaging.LPARAM,
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    lpszTemplate: {"kind""Ptr","child":{"kind":"SByte"}},
    hResource: {"kind":"IntPtr"},
    hTask: {"kind":"IntPtr"},
    lphWndDialog: {"kind""Ptr","child":Windows.Win32.WindowsAndMessaging.HWND},
};
// --------------------------------------------------------
// Type: OLEUICHANGESOURCEW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OLEUICHANGESOURCEW = extern struct {
    cbStruct: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    hWndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    lpszCaption: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpfnHook: Windows.Win32.Com.LPFNOLEUIHOOK,
    lCustData: Windows.Win32.WindowsAndMessaging.LPARAM,
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    lpszTemplate: {"kind""Ptr","child":{"kind":"UInt16"}},
    hResource: {"kind":"IntPtr"},
    lpOFN: {"kind""Ptr","child":Windows.Win32.WindowsAndMessaging.OPENFILENAMEW},
    dwReserved1: {"kind":"Array","child": {"kind":"UInt32"}},
    lpOleUILinkContainer: Windows.Win32.Com.IOleUILinkContainerW,
    dwLink: {"kind":"UInt32"},
    lpszDisplayName: {"kind""Ptr","child":{"kind":"UInt16"}},
    nFileLength: {"kind":"UInt32"},
    lpszFrom: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpszTo: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: OLEUICHANGESOURCEA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OLEUICHANGESOURCEA = extern struct {
    cbStruct: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    hWndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    lpszCaption: {"kind""Ptr","child":{"kind":"SByte"}},
    lpfnHook: Windows.Win32.Com.LPFNOLEUIHOOK,
    lCustData: Windows.Win32.WindowsAndMessaging.LPARAM,
    hInstance: Windows.Win32.SystemServices.HINSTANCE,
    lpszTemplate: {"kind""Ptr","child":{"kind":"SByte"}},
    hResource: {"kind":"IntPtr"},
    lpOFN: {"kind""Ptr","child":Windows.Win32.WindowsAndMessaging.OPENFILENAMEA},
    dwReserved1: {"kind":"Array","child": {"kind":"UInt32"}},
    lpOleUILinkContainer: Windows.Win32.Com.IOleUILinkContainerA,
    dwLink: {"kind":"UInt32"},
    lpszDisplayName: {"kind""Ptr","child":{"kind":"SByte"}},
    nFileLength: {"kind":"UInt32"},
    lpszFrom: {"kind""Ptr","child":{"kind":"SByte"}},
    lpszTo: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: IOleUIObjInfoW
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOleUIObjInfoW = *opaque{
    // TODO: Method 'GetObjectInfo'
    // TODO: Method 'GetConvertInfo'
    // TODO: Method 'ConvertObject'
    // TODO: Method 'GetViewInfo'
    // TODO: Method 'SetViewInfo'
};
// --------------------------------------------------------
// Type: IOleUIObjInfoA
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOleUIObjInfoA = *opaque{
    // TODO: Method 'GetObjectInfo'
    // TODO: Method 'GetConvertInfo'
    // TODO: Method 'ConvertObject'
    // TODO: Method 'GetViewInfo'
    // TODO: Method 'SetViewInfo'
};
// --------------------------------------------------------
// Type: IOleUILinkInfoW
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOleUILinkInfoW = *opaque{
    // TODO: Method 'GetLastUpdate'
};
// --------------------------------------------------------
// Type: IOleUILinkInfoA
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOleUILinkInfoA = *opaque{
    // TODO: Method 'GetLastUpdate'
};
// --------------------------------------------------------
// Type: OLEUIGNRLPROPSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OLEUIGNRLPROPSW = extern struct {
    cbStruct: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    dwReserved1: {"kind":"Array","child": {"kind":"UInt32"}},
    lpfnHook: Windows.Win32.Com.LPFNOLEUIHOOK,
    lCustData: Windows.Win32.WindowsAndMessaging.LPARAM,
    dwReserved2: {"kind":"Array","child": {"kind":"UInt32"}},
    lpOP: {"kind""Ptr","child":Windows.Win32.Com.OLEUIOBJECTPROPSW},
};
// --------------------------------------------------------
// Type: OLEUIGNRLPROPSA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OLEUIGNRLPROPSA = extern struct {
    cbStruct: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    dwReserved1: {"kind":"Array","child": {"kind":"UInt32"}},
    lpfnHook: Windows.Win32.Com.LPFNOLEUIHOOK,
    lCustData: Windows.Win32.WindowsAndMessaging.LPARAM,
    dwReserved2: {"kind":"Array","child": {"kind":"UInt32"}},
    lpOP: {"kind""Ptr","child":Windows.Win32.Com.OLEUIOBJECTPROPSA},
};
// --------------------------------------------------------
// Type: OLEUIVIEWPROPSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OLEUIVIEWPROPSW = extern struct {
    cbStruct: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    dwReserved1: {"kind":"Array","child": {"kind":"UInt32"}},
    lpfnHook: Windows.Win32.Com.LPFNOLEUIHOOK,
    lCustData: Windows.Win32.WindowsAndMessaging.LPARAM,
    dwReserved2: {"kind":"Array","child": {"kind":"UInt32"}},
    lpOP: {"kind""Ptr","child":Windows.Win32.Com.OLEUIOBJECTPROPSW},
    nScaleMin: {"kind":"Int32"},
    nScaleMax: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: OLEUIVIEWPROPSA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OLEUIVIEWPROPSA = extern struct {
    cbStruct: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    dwReserved1: {"kind":"Array","child": {"kind":"UInt32"}},
    lpfnHook: Windows.Win32.Com.LPFNOLEUIHOOK,
    lCustData: Windows.Win32.WindowsAndMessaging.LPARAM,
    dwReserved2: {"kind":"Array","child": {"kind":"UInt32"}},
    lpOP: {"kind""Ptr","child":Windows.Win32.Com.OLEUIOBJECTPROPSA},
    nScaleMin: {"kind":"Int32"},
    nScaleMax: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: OLEUILINKPROPSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OLEUILINKPROPSW = extern struct {
    cbStruct: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    dwReserved1: {"kind":"Array","child": {"kind":"UInt32"}},
    lpfnHook: Windows.Win32.Com.LPFNOLEUIHOOK,
    lCustData: Windows.Win32.WindowsAndMessaging.LPARAM,
    dwReserved2: {"kind":"Array","child": {"kind":"UInt32"}},
    lpOP: {"kind""Ptr","child":Windows.Win32.Com.OLEUIOBJECTPROPSW},
};
// --------------------------------------------------------
// Type: OLEUILINKPROPSA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OLEUILINKPROPSA = extern struct {
    cbStruct: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    dwReserved1: {"kind":"Array","child": {"kind":"UInt32"}},
    lpfnHook: Windows.Win32.Com.LPFNOLEUIHOOK,
    lCustData: Windows.Win32.WindowsAndMessaging.LPARAM,
    dwReserved2: {"kind":"Array","child": {"kind":"UInt32"}},
    lpOP: {"kind""Ptr","child":Windows.Win32.Com.OLEUIOBJECTPROPSA},
};
// --------------------------------------------------------
// Type: OLEUIOBJECTPROPSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OLEUIOBJECTPROPSW = extern struct {
    cbStruct: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    lpPS: {"kind""Ptr","child":Windows.Win32.Controls.PROPSHEETHEADERW_V2},
    dwObject: {"kind":"UInt32"},
    lpObjInfo: Windows.Win32.Com.IOleUIObjInfoW,
    dwLink: {"kind":"UInt32"},
    lpLinkInfo: Windows.Win32.Com.IOleUILinkInfoW,
    lpGP: {"kind""Ptr","child":Windows.Win32.Com.OLEUIGNRLPROPSW},
    lpVP: {"kind""Ptr","child":Windows.Win32.Com.OLEUIVIEWPROPSW},
    lpLP: {"kind""Ptr","child":Windows.Win32.Com.OLEUILINKPROPSW},
};
// --------------------------------------------------------
// Type: OLEUIOBJECTPROPSA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OLEUIOBJECTPROPSA = extern struct {
    cbStruct: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    lpPS: {"kind""Ptr","child":Windows.Win32.Controls.PROPSHEETHEADERA_V2},
    dwObject: {"kind":"UInt32"},
    lpObjInfo: Windows.Win32.Com.IOleUIObjInfoA,
    dwLink: {"kind":"UInt32"},
    lpLinkInfo: Windows.Win32.Com.IOleUILinkInfoA,
    lpGP: {"kind""Ptr","child":Windows.Win32.Com.OLEUIGNRLPROPSA},
    lpVP: {"kind""Ptr","child":Windows.Win32.Com.OLEUIVIEWPROPSA},
    lpLP: {"kind""Ptr","child":Windows.Win32.Com.OLEUILINKPROPSA},
};
// --------------------------------------------------------
// Type: CALLFRAMEINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CALLFRAMEINFO = extern struct {
    iMethod: {"kind":"UInt32"},
    fHasInValues: Windows.Win32.SystemServices.BOOL,
    fHasInOutValues: Windows.Win32.SystemServices.BOOL,
    fHasOutValues: Windows.Win32.SystemServices.BOOL,
    fDerivesFromIDispatch: Windows.Win32.SystemServices.BOOL,
    cInInterfacesMax: {"kind":"Int32"},
    cInOutInterfacesMax: {"kind":"Int32"},
    cOutInterfacesMax: {"kind":"Int32"},
    cTopLevelInInterfaces: {"kind":"Int32"},
    iid: Guid,
    cMethod: {"kind":"UInt32"},
    cParams: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CALLFRAMEPARAMINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CALLFRAMEPARAMINFO = extern struct {
    fIn: {"kind":"Byte"},
    fOut: {"kind":"Byte"},
    stackOffset: {"kind":"UInt32"},
    cbParam: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CALLFRAME_COPY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CALLFRAME_COPY = *opaque{
};
// --------------------------------------------------------
// Type: CALLFRAME_FREE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CALLFRAME_FREE = *opaque{
};
// --------------------------------------------------------
// Type: CALLFRAME_NULL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CALLFRAME_NULL = *opaque{
};
// --------------------------------------------------------
// Type: CALLFRAME_WALK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CALLFRAME_WALK = *opaque{
};
// --------------------------------------------------------
// Type: CALLFRAME_MARSHALCONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CALLFRAME_MARSHALCONTEXT = extern struct {
    fIn: {"kind":"Byte"},
    dwDestContext: {"kind":"UInt32"},
    pvDestContext: {"kind""Ptr","child":{"kind":"Void"}},
    punkReserved: Windows.Win32.Com.IUnknown,
    guidTransferSyntax: Guid,
};
// --------------------------------------------------------
// Type: ICallFrame
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICallFrame = *opaque{
    // TODO: Method 'GetInfo'
    // TODO: Method 'GetIIDAndMethod'
    // TODO: Method 'GetNames'
    // TODO: Method 'GetStackLocation'
    // TODO: Method 'SetStackLocation'
    // TODO: Method 'SetReturnValue'
    // TODO: Method 'GetReturnValue'
    // TODO: Method 'GetParamInfo'
    // TODO: Method 'SetParam'
    // TODO: Method 'GetParam'
    // TODO: Method 'Copy'
    // TODO: Method 'Free'
    // TODO: Method 'FreeParam'
    // TODO: Method 'WalkFrame'
    // TODO: Method 'GetMarshalSizeMax'
    // TODO: Method 'Marshal'
    // TODO: Method 'Unmarshal'
    // TODO: Method 'ReleaseMarshalData'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ICallIndirect
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICallIndirect = *opaque{
    // TODO: Method 'CallIndirect'
    // TODO: Method 'GetMethodInfo'
    // TODO: Method 'GetStackSize'
    // TODO: Method 'GetIID'
};
// --------------------------------------------------------
// Type: ICallInterceptor
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICallInterceptor = *opaque{
    // TODO: Method 'RegisterSink'
    // TODO: Method 'GetRegisteredSink'
};
// --------------------------------------------------------
// Type: ICallFrameEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICallFrameEvents = *opaque{
    // TODO: Method 'OnCall'
};
// --------------------------------------------------------
// Type: ICallUnmarshal
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICallUnmarshal = *opaque{
    // TODO: Method 'Unmarshal'
    // TODO: Method 'ReleaseMarshalData'
};
// --------------------------------------------------------
// Type: ICallFrameWalker
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICallFrameWalker = *opaque{
    // TODO: Method 'OnWalkInterface'
};
// --------------------------------------------------------
// Type: IInterfaceRelated
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInterfaceRelated = *opaque{
    // TODO: Method 'SetIID'
    // TODO: Method 'GetIID'
};
// --------------------------------------------------------
// Type: RECORD_READING_POLICY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RECORD_READING_POLICY = *opaque{
};
// --------------------------------------------------------
// Type: ILog
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ILog = *opaque{
    // TODO: Method 'Force'
    // TODO: Method 'AppendRecord'
    // TODO: Method 'ReadRecord'
    // TODO: Method 'ReadRecordPrefix'
    // TODO: Method 'GetLogLimits'
    // TODO: Method 'TruncatePrefix'
    // TODO: Method 'SetAccessPolicyHint'
};
// --------------------------------------------------------
// Type: IFileBasedLogInit
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFileBasedLogInit = *opaque{
    // TODO: Method 'InitNew'
};
// --------------------------------------------------------
// Type: IEnumGUID
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumGUID = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: CATEGORYINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CATEGORYINFO = extern struct {
    catid: Guid,
    lcid: {"kind":"UInt32"},
    szDescription: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: IEnumCATEGORYINFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumCATEGORYINFO = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: ICatRegister
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICatRegister = *opaque{
    // TODO: Method 'RegisterCategories'
    // TODO: Method 'UnRegisterCategories'
    // TODO: Method 'RegisterClassImplCategories'
    // TODO: Method 'UnRegisterClassImplCategories'
    // TODO: Method 'RegisterClassReqCategories'
    // TODO: Method 'UnRegisterClassReqCategories'
};
// --------------------------------------------------------
// Type: ICatInformation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICatInformation = *opaque{
    // TODO: Method 'EnumCategories'
    // TODO: Method 'GetCategoryDesc'
    // TODO: Method 'EnumClassesOfCategories'
    // TODO: Method 'IsClassOfCategories'
    // TODO: Method 'EnumImplCategoriesOfClass'
    // TODO: Method 'EnumReqCategoriesOfClass'
};
// --------------------------------------------------------
// Type: IAccessControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAccessControl = *opaque{
    // TODO: Method 'GrantAccessRights'
    // TODO: Method 'SetAccessRights'
    // TODO: Method 'SetOwner'
    // TODO: Method 'RevokeAccessRights'
    // TODO: Method 'GetAllAccessRights'
    // TODO: Method 'IsAccessAllowed'
};
// --------------------------------------------------------
// Type: IAuditControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAuditControl = *opaque{
    // TODO: Method 'GrantAuditRights'
    // TODO: Method 'SetAuditRights'
    // TODO: Method 'RevokeAuditRights'
    // TODO: Method 'GetAllAuditRights'
    // TODO: Method 'IsAccessAudited'
};
// --------------------------------------------------------
// Type: ComCallData
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ComCallData = extern struct {
    dwDispid: {"kind":"UInt32"},
    dwReserved: {"kind":"UInt32"},
    pUserDefined: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: PFNCONTEXTCALL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNCONTEXTCALL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: IContextCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IContextCallback = *opaque{
    // TODO: Method 'ContextCallback'
};
// --------------------------------------------------------
// Type: IMessageDispatcher
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMessageDispatcher = *opaque{
    // TODO: Method 'PumpMessages'
};
// --------------------------------------------------------
// Type: IAccessibilityDockingServiceCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAccessibilityDockingServiceCallback = *opaque{
    // TODO: Method 'Undocked'
};
// --------------------------------------------------------
// Type: IAccessibilityDockingService
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAccessibilityDockingService = *opaque{
    // TODO: Method 'GetAvailableSize'
    // TODO: Method 'DockWindow'
    // TODO: Method 'UndockWindow'
};
// --------------------------------------------------------
// Type: HRESULT
// TypeLayoutAttr: sequential
pub const HRESULT = {"kind":"Int32"};
// --------------------------------------------------------
// Type: COINIT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const COINIT = *opaque{
};
// --------------------------------------------------------
// Type: COMSD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const COMSD = *opaque{
};
// --------------------------------------------------------
// Type: DVASPECT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DVASPECT = *opaque{
};
// --------------------------------------------------------
// Type: CSPLATFORM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CSPLATFORM = extern struct {
    dwPlatformId: {"kind":"UInt32"},
    dwVersionHi: {"kind":"UInt32"},
    dwVersionLo: {"kind":"UInt32"},
    dwProcessorArch: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: QUERYCONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QUERYCONTEXT = extern struct {
    dwContext: {"kind":"UInt32"},
    Platform: Windows.Win32.Com.CSPLATFORM,
    Locale: {"kind":"UInt32"},
    dwVersionHi: {"kind":"UInt32"},
    dwVersionLo: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: TYSPEC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TYSPEC = *opaque{
};
// --------------------------------------------------------
// Type: ACTRL_ACCESS_ENTRYA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACTRL_ACCESS_ENTRYA = extern struct {
    Trustee: Windows.Win32.Security.TRUSTEE_A,
    fAccessFlags: {"kind":"UInt32"},
    Access: {"kind":"UInt32"},
    ProvSpecificAccess: {"kind":"UInt32"},
    Inheritance: {"kind":"UInt32"},
    lpInheritProperty: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: ACTRL_ACCESS_ENTRYW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACTRL_ACCESS_ENTRYW = extern struct {
    Trustee: Windows.Win32.Security.TRUSTEE_W,
    fAccessFlags: {"kind":"UInt32"},
    Access: {"kind":"UInt32"},
    ProvSpecificAccess: {"kind":"UInt32"},
    Inheritance: {"kind":"UInt32"},
    lpInheritProperty: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: ACTRL_ACCESS_ENTRY_LISTA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACTRL_ACCESS_ENTRY_LISTA = extern struct {
    cEntries: {"kind":"UInt32"},
    pAccessList: {"kind""Ptr","child":Windows.Win32.Com.ACTRL_ACCESS_ENTRYA},
};
// --------------------------------------------------------
// Type: ACTRL_ACCESS_ENTRY_LISTW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACTRL_ACCESS_ENTRY_LISTW = extern struct {
    cEntries: {"kind":"UInt32"},
    pAccessList: {"kind""Ptr","child":Windows.Win32.Com.ACTRL_ACCESS_ENTRYW},
};
// --------------------------------------------------------
// Type: ACTRL_PROPERTY_ENTRYA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACTRL_PROPERTY_ENTRYA = extern struct {
    lpProperty: {"kind""Ptr","child":{"kind":"SByte"}},
    pAccessEntryList: {"kind""Ptr","child":Windows.Win32.Com.ACTRL_ACCESS_ENTRY_LISTA},
    fListFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: ACTRL_PROPERTY_ENTRYW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACTRL_PROPERTY_ENTRYW = extern struct {
    lpProperty: {"kind""Ptr","child":{"kind":"UInt16"}},
    pAccessEntryList: {"kind""Ptr","child":Windows.Win32.Com.ACTRL_ACCESS_ENTRY_LISTW},
    fListFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: ACTRL_ACCESSA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACTRL_ACCESSA = extern struct {
    cEntries: {"kind":"UInt32"},
    pPropertyAccessList: {"kind""Ptr","child":Windows.Win32.Com.ACTRL_PROPERTY_ENTRYA},
};
// --------------------------------------------------------
// Type: ACTRL_ACCESSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACTRL_ACCESSW = extern struct {
    cEntries: {"kind":"UInt32"},
    pPropertyAccessList: {"kind""Ptr","child":Windows.Win32.Com.ACTRL_PROPERTY_ENTRYW},
};
// --------------------------------------------------------
// Type: IEventPublisher
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEventPublisher = *opaque{
    // TODO: Method 'get_PublisherID'
    // TODO: Method 'put_PublisherID'
    // TODO: Method 'get_PublisherName'
    // TODO: Method 'put_PublisherName'
    // TODO: Method 'get_PublisherType'
    // TODO: Method 'put_PublisherType'
    // TODO: Method 'get_OwnerSID'
    // TODO: Method 'put_OwnerSID'
    // TODO: Method 'get_Description'
    // TODO: Method 'put_Description'
    // TODO: Method 'GetDefaultProperty'
    // TODO: Method 'PutDefaultProperty'
    // TODO: Method 'RemoveDefaultProperty'
    // TODO: Method 'GetDefaultPropertyCollection'
};
// --------------------------------------------------------
// Type: EOC_ChangeType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EOC_ChangeType = *opaque{
};
// --------------------------------------------------------
// Type: IEventProperty
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEventProperty = *opaque{
    // TODO: Method 'get_Name'
    // TODO: Method 'put_Name'
    // TODO: Method 'get_Value'
    // TODO: Method 'put_Value'
};
],

"func_definitions": [

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoGetMalloc(
    dwMemContext: {"kind":"UInt32"},
    ppMalloc: {"kind""Ptr","child":Windows.Win32.Com.IMalloc},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoUninitialize(

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoGetCurrentProcess(

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoInitializeEx(
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},
    dwCoInit: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoGetCallerTID(
    lpdwTID: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoGetCurrentLogicalThreadId(
    pguid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoGetContextToken(
    pToken: {"kind""Ptr","child":{"kind":"UIntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoGetApartmentType(
    pAptType: {"kind""Ptr","child":Windows.Win32.Com.APTTYPE},
    pAptQualifier: {"kind""Ptr","child":Windows.Win32.Com.APTTYPEQUALIFIER},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoIncrementMTAUsage(
    pCookie: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoDecrementMTAUsage(
    Cookie: {"kind":"IntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoAllowUnmarshalerCLSID(
    clsid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoGetObjectContext(
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoGetClassObject(
    rclsid: {"kind""Ptr","child":Guid},
    dwClsContext: {"kind":"UInt32"},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoRegisterClassObject(
    rclsid: {"kind""Ptr","child":Guid},
    pUnk: Windows.Win32.Com.IUnknown,
    dwClsContext: {"kind":"UInt32"},
    flags: {"kind":"UInt32"},
    lpdwRegister: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoRevokeClassObject(
    dwRegister: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoResumeClassObjects(

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoSuspendClassObjects(

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoAddRefServerProcess(

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoReleaseServerProcess(

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoGetPSClsid(
    riid: {"kind""Ptr","child":Guid},
    pClsid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoRegisterPSClsid(
    riid: {"kind""Ptr","child":Guid},
    rclsid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoRegisterSurrogate(
    pSurrogate: Windows.Win32.Com.ISurrogate,

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoGetMarshalSizeMax(
    pulSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    riid: {"kind""Ptr","child":Guid},
    pUnk: Windows.Win32.Com.IUnknown,
    dwDestContext: {"kind":"UInt32"},
    pvDestContext: {"kind""Ptr","child":{"kind":"Void"}},
    mshlflags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoMarshalInterface(
    pStm: Windows.Win32.StructuredStorage.IStream,
    riid: {"kind""Ptr","child":Guid},
    pUnk: Windows.Win32.Com.IUnknown,
    dwDestContext: {"kind":"UInt32"},
    pvDestContext: {"kind""Ptr","child":{"kind":"Void"}},
    mshlflags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoUnmarshalInterface(
    pStm: Windows.Win32.StructuredStorage.IStream,
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoMarshalHresult(
    pstm: Windows.Win32.StructuredStorage.IStream,
    hresult: Windows.Win32.Com.HRESULT,

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoUnmarshalHresult(
    pstm: Windows.Win32.StructuredStorage.IStream,
    phresult: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoReleaseMarshalData(
    pStm: Windows.Win32.StructuredStorage.IStream,

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoDisconnectObject(
    pUnk: Windows.Win32.Com.IUnknown,
    dwReserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoLockObjectExternal(
    pUnk: Windows.Win32.Com.IUnknown,
    fLock: Windows.Win32.SystemServices.BOOL,
    fLastUnlockReleases: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoGetStandardMarshal(
    riid: {"kind""Ptr","child":Guid},
    pUnk: Windows.Win32.Com.IUnknown,
    dwDestContext: {"kind":"UInt32"},
    pvDestContext: {"kind""Ptr","child":{"kind":"Void"}},
    mshlflags: {"kind":"UInt32"},
    ppMarshal: {"kind""Ptr","child":Windows.Win32.Com.IMarshal},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoGetStdMarshalEx(
    pUnkOuter: Windows.Win32.Com.IUnknown,
    smexflags: {"kind":"UInt32"},
    ppUnkInner: {"kind""Ptr","child":Windows.Win32.Com.IUnknown},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoIsHandlerConnected(
    pUnk: Windows.Win32.Com.IUnknown,

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoMarshalInterThreadInterfaceInStream(
    riid: {"kind""Ptr","child":Guid},
    pUnk: Windows.Win32.Com.IUnknown,
    ppStm: {"kind""Ptr","child":Windows.Win32.StructuredStorage.IStream},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoGetInterfaceAndReleaseStream(
    pStm: Windows.Win32.StructuredStorage.IStream,
    iid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoCreateFreeThreadedMarshaler(
    punkOuter: Windows.Win32.Com.IUnknown,
    ppunkMarshal: {"kind""Ptr","child":Windows.Win32.Com.IUnknown},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoFreeUnusedLibraries(

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoFreeUnusedLibrariesEx(
    dwUnloadDelay: {"kind":"UInt32"},
    dwReserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoDisconnectContext(
    dwTimeout: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoInitializeSecurity(
    pSecDesc: {"kind""Ptr","child":{"kind":"Void"}},
    cAuthSvc: {"kind":"Int32"},
    asAuthSvc: {"kind""Ptr","child":Windows.Win32.Com.SOLE_AUTHENTICATION_SERVICE},
    pReserved1: {"kind""Ptr","child":{"kind":"Void"}},
    dwAuthnLevel: {"kind":"UInt32"},
    dwImpLevel: {"kind":"UInt32"},
    pAuthList: {"kind""Ptr","child":{"kind":"Void"}},
    dwCapabilities: {"kind":"UInt32"},
    pReserved3: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoGetCallContext(
    riid: {"kind""Ptr","child":Guid},
    ppInterface: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoQueryProxyBlanket(
    pProxy: Windows.Win32.Com.IUnknown,
    pwAuthnSvc: {"kind""Ptr","child":{"kind":"UInt32"}},
    pAuthzSvc: {"kind""Ptr","child":{"kind":"UInt32"}},
    pServerPrincName: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    pAuthnLevel: {"kind""Ptr","child":{"kind":"UInt32"}},
    pImpLevel: {"kind""Ptr","child":{"kind":"UInt32"}},
    pAuthInfo: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pCapabilites: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoSetProxyBlanket(
    pProxy: Windows.Win32.Com.IUnknown,
    dwAuthnSvc: {"kind":"UInt32"},
    dwAuthzSvc: {"kind":"UInt32"},
    pServerPrincName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwAuthnLevel: {"kind":"UInt32"},
    dwImpLevel: {"kind":"UInt32"},
    pAuthInfo: {"kind""Ptr","child":{"kind":"Void"}},
    dwCapabilities: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoCopyProxy(
    pProxy: Windows.Win32.Com.IUnknown,
    ppCopy: {"kind""Ptr","child":Windows.Win32.Com.IUnknown},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoQueryClientBlanket(
    pAuthnSvc: {"kind""Ptr","child":{"kind":"UInt32"}},
    pAuthzSvc: {"kind""Ptr","child":{"kind":"UInt32"}},
    pServerPrincName: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    pAuthnLevel: {"kind""Ptr","child":{"kind":"UInt32"}},
    pImpLevel: {"kind""Ptr","child":{"kind":"UInt32"}},
    pPrivs: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pCapabilities: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoImpersonateClient(

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoRevertToSelf(

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoQueryAuthenticationServices(
    pcAuthSvc: {"kind""Ptr","child":{"kind":"UInt32"}},
    asAuthSvc: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Com.SOLE_AUTHENTICATION_SERVICE}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoSwitchCallContext(
    pNewObject: Windows.Win32.Com.IUnknown,
    ppOldObject: {"kind""Ptr","child":Windows.Win32.Com.IUnknown},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoCreateInstance(
    rclsid: {"kind""Ptr","child":Guid},
    pUnkOuter: Windows.Win32.Com.IUnknown,
    dwClsContext: {"kind":"UInt32"},
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoCreateInstanceEx(
    Clsid: {"kind""Ptr","child":Guid},
    punkOuter: Windows.Win32.Com.IUnknown,
    dwClsCtx: {"kind":"UInt32"},
    pServerInfo: {"kind""Ptr","child":Windows.Win32.Com.COSERVERINFO},
    dwCount: {"kind":"UInt32"},
    pResults: {"kind""Ptr","child":Windows.Win32.Com.MULTI_QI},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoCreateInstanceFromApp(
    Clsid: {"kind""Ptr","child":Guid},
    punkOuter: Windows.Win32.Com.IUnknown,
    dwClsCtx: {"kind":"UInt32"},
    reserved: {"kind""Ptr","child":{"kind":"Void"}},
    dwCount: {"kind":"UInt32"},
    pResults: {"kind""Ptr","child":Windows.Win32.Com.MULTI_QI},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoRegisterActivationFilter(
    pActivationFilter: Windows.Win32.Com.IActivationFilter,

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoGetCancelObject(
    dwThreadId: {"kind":"UInt32"},
    iid: {"kind""Ptr","child":Guid},
    ppUnk: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoSetCancelObject(
    pUnk: Windows.Win32.Com.IUnknown,

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoCancelCall(
    dwThreadId: {"kind":"UInt32"},
    ulTimeout: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoTestCancel(

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoEnableCallCancellation(
    pReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoDisableCallCancellation(
    pReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn StringFromCLSID(
    rclsid: {"kind""Ptr","child":Guid},
    lplpsz: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CLSIDFromString(
    lpsz: {"kind""Ptr","child":{"kind":"UInt16"}},
    pclsid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn StringFromIID(
    rclsid: {"kind""Ptr","child":Guid},
    lplpsz: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn IIDFromString(
    lpsz: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpiid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn ProgIDFromCLSID(
    clsid: {"kind""Ptr","child":Guid},
    lplpszProgID: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CLSIDFromProgID(
    lpszProgID: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpclsid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn StringFromGUID2(
    rguid: {"kind""Ptr","child":Guid},
    lpsz: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchMax: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoCreateGuid(
    pguid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoWaitForMultipleHandles(
    dwFlags: {"kind":"UInt32"},
    dwTimeout: {"kind":"UInt32"},
    cHandles: {"kind":"UInt32"},
    pHandles: {"kind""Ptr","child":{"kind":"IntPtr"}},
    lpdwindex: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoWaitForMultipleObjects(
    dwFlags: {"kind":"UInt32"},
    dwTimeout: {"kind":"UInt32"},
    cHandles: {"kind":"UInt32"},
    pHandles: {"kind""Ptr","child":{"kind":"IntPtr"}},
    lpdwindex: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoGetTreatAsClass(
    clsidOld: {"kind""Ptr","child":Guid},
    pClsidNew: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoInvalidateRemoteMachineBindings(
    pszMachineName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoTaskMemAlloc(
    cb: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoTaskMemRealloc(
    pv: {"kind""Ptr","child":{"kind":"Void"}},
    cb: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoTaskMemFree(
    pv: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoFileTimeNow(
    lpFileTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CLSIDFromProgIDEx(
    lpszProgID: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpclsid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoRegisterDeviceCatalog(
    deviceInstanceId: {"kind""Ptr","child":{"kind":"UInt16"}},
    cookie: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoRevokeDeviceCatalog(
    cookie: {"kind":"IntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CLIPFORMAT_UserSize(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind":"UInt32"},
    param2: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CLIPFORMAT_UserMarshal(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CLIPFORMAT_UserUnmarshal(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CLIPFORMAT_UserFree(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HBITMAP_UserSize(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind":"UInt32"},
    param2: {"kind""Ptr","child":Windows.Win32.Gdi.HBITMAP},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HBITMAP_UserMarshal(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":Windows.Win32.Gdi.HBITMAP},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HBITMAP_UserUnmarshal(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":Windows.Win32.Gdi.HBITMAP},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HBITMAP_UserFree(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":Windows.Win32.Gdi.HBITMAP},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HDC_UserSize(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind":"UInt32"},
    param2: {"kind""Ptr","child":Windows.Win32.Gdi.HDC},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HDC_UserMarshal(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":Windows.Win32.Gdi.HDC},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HDC_UserUnmarshal(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":Windows.Win32.Gdi.HDC},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HDC_UserFree(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":Windows.Win32.Gdi.HDC},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HICON_UserSize(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind":"UInt32"},
    param2: {"kind""Ptr","child":Windows.Win32.Gdi.HICON},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HICON_UserMarshal(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":Windows.Win32.Gdi.HICON},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HICON_UserUnmarshal(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":Windows.Win32.Gdi.HICON},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HICON_UserFree(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":Windows.Win32.Gdi.HICON},

// set_last_errror=False (can and should we use this?)
pub extern "ole32" fn SNB_UserSize(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind":"UInt32"},
    param2: {"kind""Ptr","child":{"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}}},

// set_last_errror=False (can and should we use this?)
pub extern "ole32" fn SNB_UserMarshal(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":{"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}}},

// set_last_errror=False (can and should we use this?)
pub extern "ole32" fn SNB_UserUnmarshal(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":{"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}}},

// set_last_errror=False (can and should we use this?)
pub extern "ole32" fn SNB_UserFree(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CLIPFORMAT_UserSize64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind":"UInt32"},
    param2: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CLIPFORMAT_UserMarshal64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CLIPFORMAT_UserUnmarshal64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CLIPFORMAT_UserFree64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HBITMAP_UserSize64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind":"UInt32"},
    param2: {"kind""Ptr","child":Windows.Win32.Gdi.HBITMAP},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HBITMAP_UserMarshal64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":Windows.Win32.Gdi.HBITMAP},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HBITMAP_UserUnmarshal64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":Windows.Win32.Gdi.HBITMAP},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HBITMAP_UserFree64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":Windows.Win32.Gdi.HBITMAP},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HDC_UserSize64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind":"UInt32"},
    param2: {"kind""Ptr","child":Windows.Win32.Gdi.HDC},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HDC_UserMarshal64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":Windows.Win32.Gdi.HDC},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HDC_UserUnmarshal64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":Windows.Win32.Gdi.HDC},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HDC_UserFree64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":Windows.Win32.Gdi.HDC},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HICON_UserSize64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind":"UInt32"},
    param2: {"kind""Ptr","child":Windows.Win32.Gdi.HICON},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HICON_UserMarshal64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":Windows.Win32.Gdi.HICON},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HICON_UserUnmarshal64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":Windows.Win32.Gdi.HICON},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HICON_UserFree64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":Windows.Win32.Gdi.HICON},

// set_last_errror=False (can and should we use this?)
pub extern "ole32" fn SNB_UserSize64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind":"UInt32"},
    param2: {"kind""Ptr","child":{"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}}},

// set_last_errror=False (can and should we use this?)
pub extern "ole32" fn SNB_UserMarshal64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":{"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}}},

// set_last_errror=False (can and should we use this?)
pub extern "ole32" fn SNB_UserUnmarshal64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":{"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}}},

// set_last_errror=False (can and should we use this?)
pub extern "ole32" fn SNB_UserFree64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HACCEL_UserSize(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind":"UInt32"},
    param2: {"kind""Ptr","child":Windows.Win32.MenusAndResources.HACCEL},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HACCEL_UserMarshal(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":Windows.Win32.MenusAndResources.HACCEL},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HACCEL_UserUnmarshal(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":Windows.Win32.MenusAndResources.HACCEL},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HACCEL_UserFree(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":Windows.Win32.MenusAndResources.HACCEL},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HGLOBAL_UserSize(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind":"UInt32"},
    param2: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HGLOBAL_UserMarshal(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HGLOBAL_UserUnmarshal(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HGLOBAL_UserFree(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HMENU_UserSize(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind":"UInt32"},
    param2: {"kind""Ptr","child":Windows.Win32.MenusAndResources.HMENU},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HMENU_UserMarshal(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":Windows.Win32.MenusAndResources.HMENU},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HMENU_UserUnmarshal(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":Windows.Win32.MenusAndResources.HMENU},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HMENU_UserFree(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":Windows.Win32.MenusAndResources.HMENU},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HACCEL_UserSize64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind":"UInt32"},
    param2: {"kind""Ptr","child":Windows.Win32.MenusAndResources.HACCEL},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HACCEL_UserMarshal64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":Windows.Win32.MenusAndResources.HACCEL},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HACCEL_UserUnmarshal64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":Windows.Win32.MenusAndResources.HACCEL},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HACCEL_UserFree64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":Windows.Win32.MenusAndResources.HACCEL},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HGLOBAL_UserSize64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind":"UInt32"},
    param2: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HGLOBAL_UserMarshal64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HGLOBAL_UserUnmarshal64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HGLOBAL_UserFree64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HMENU_UserSize64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind":"UInt32"},
    param2: {"kind""Ptr","child":Windows.Win32.MenusAndResources.HMENU},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HMENU_UserMarshal64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":Windows.Win32.MenusAndResources.HMENU},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HMENU_UserUnmarshal64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":Windows.Win32.MenusAndResources.HMENU},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HMENU_UserFree64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":Windows.Win32.MenusAndResources.HMENU},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn CreateURLMoniker(
    pMkCtx: Windows.Win32.Com.IMoniker,
    szURL: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppmk: {"kind""Ptr","child":Windows.Win32.Com.IMoniker},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn CreateURLMonikerEx(
    pMkCtx: Windows.Win32.Com.IMoniker,
    szURL: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppmk: {"kind""Ptr","child":Windows.Win32.Com.IMoniker},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn GetClassURL(
    szURL: {"kind""Ptr","child":{"kind":"UInt16"}},
    pClsID: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn CreateAsyncBindCtx(
    reserved: {"kind":"UInt32"},
    pBSCb: Windows.Win32.Com.IBindStatusCallback,
    pEFetc: Windows.Win32.Com.IEnumFORMATETC,
    ppBC: {"kind""Ptr","child":Windows.Win32.Com.IBindCtx},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn CreateURLMonikerEx2(
    pMkCtx: Windows.Win32.Com.IMoniker,
    pUri: Windows.Win32.Com.IUri,
    ppmk: {"kind""Ptr","child":Windows.Win32.Com.IMoniker},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn CreateAsyncBindCtxEx(
    pbc: Windows.Win32.Com.IBindCtx,
    dwOptions: {"kind":"UInt32"},
    pBSCb: Windows.Win32.Com.IBindStatusCallback,
    pEnum: Windows.Win32.Com.IEnumFORMATETC,
    ppBC: {"kind""Ptr","child":Windows.Win32.Com.IBindCtx},
    reserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn MkParseDisplayNameEx(
    pbc: Windows.Win32.Com.IBindCtx,
    szDisplayName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pchEaten: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppmk: {"kind""Ptr","child":Windows.Win32.Com.IMoniker},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn RegisterBindStatusCallback(
    pBC: Windows.Win32.Com.IBindCtx,
    pBSCb: Windows.Win32.Com.IBindStatusCallback,
    ppBSCBPrev: {"kind""Ptr","child":Windows.Win32.Com.IBindStatusCallback},
    dwReserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn RevokeBindStatusCallback(
    pBC: Windows.Win32.Com.IBindCtx,
    pBSCb: Windows.Win32.Com.IBindStatusCallback,

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn GetClassFileOrMime(
    pBC: Windows.Win32.Com.IBindCtx,
    szFilename: {"kind""Ptr","child":{"kind":"UInt16"}},
    pBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    cbSize: {"kind":"UInt32"},
    szMime: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwReserved: {"kind":"UInt32"},
    pclsid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn IsValidURL(
    pBC: Windows.Win32.Com.IBindCtx,
    szURL: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwReserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn CoGetClassObjectFromURL(
    rCLASSID: {"kind""Ptr","child":Guid},
    szCODE: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFileVersionMS: {"kind":"UInt32"},
    dwFileVersionLS: {"kind":"UInt32"},
    szTYPE: {"kind""Ptr","child":{"kind":"UInt16"}},
    pBindCtx: Windows.Win32.Com.IBindCtx,
    dwClsContext: {"kind":"UInt32"},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn IEInstallScope(
    pdwScope: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn FaultInIEFeature(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    pClassSpec: {"kind""Ptr","child":Windows.Win32.SystemServices.uCLSSPEC},
    pQuery: {"kind""Ptr","child":Windows.Win32.Com.QUERYCONTEXT},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn GetComponentIDFromCLSSPEC(
    pClassspec: {"kind""Ptr","child":Windows.Win32.SystemServices.uCLSSPEC},
    ppszComponentID: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn IsAsyncMoniker(
    pmk: Windows.Win32.Com.IMoniker,

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn RegisterMediaTypes(
    ctypes: {"kind":"UInt32"},
    rgszTypes: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},
    rgcfTypes: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn FindMediaType(
    rgszTypes: {"kind""Ptr","child":{"kind":"SByte"}},
    rgcfTypes: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn CreateFormatEnumerator(
    cfmtetc: {"kind":"UInt32"},
    rgfmtetc: {"kind""Ptr","child":Windows.Win32.Com.FORMATETC},
    ppenumfmtetc: {"kind""Ptr","child":Windows.Win32.Com.IEnumFORMATETC},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn RegisterFormatEnumerator(
    pBC: Windows.Win32.Com.IBindCtx,
    pEFetc: Windows.Win32.Com.IEnumFORMATETC,
    reserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn RevokeFormatEnumerator(
    pBC: Windows.Win32.Com.IBindCtx,
    pEFetc: Windows.Win32.Com.IEnumFORMATETC,

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn RegisterMediaTypeClass(
    pBC: Windows.Win32.Com.IBindCtx,
    ctypes: {"kind":"UInt32"},
    rgszTypes: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},
    rgclsID: {"kind""Ptr","child":Guid},
    reserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn FindMediaTypeClass(
    pBC: Windows.Win32.Com.IBindCtx,
    szType: {"kind""Ptr","child":{"kind":"SByte"}},
    pclsID: {"kind""Ptr","child":Guid},
    reserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn UrlMkSetSessionOption(
    dwOption: {"kind":"UInt32"},
    pBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    dwBufferLength: {"kind":"UInt32"},
    dwReserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn UrlMkGetSessionOption(
    dwOption: {"kind":"UInt32"},
    pBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    dwBufferLength: {"kind":"UInt32"},
    pdwBufferLengthOut: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwReserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn FindMimeFromData(
    pBC: Windows.Win32.Com.IBindCtx,
    pwzUrl: {"kind""Ptr","child":{"kind":"UInt16"}},
    pBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    cbSize: {"kind":"UInt32"},
    pwzMimeProposed: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwMimeFlags: {"kind":"UInt32"},
    ppwzMimeOut: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    dwReserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn ObtainUserAgentString(
    dwOption: {"kind":"UInt32"},
    pszUAOut: {"kind""Ptr","child":{"kind":"SByte"}},
    cbSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn CompareSecurityIds(
    pbSecurityId1: {"kind""Ptr","child":{"kind":"Byte"}},
    dwLen1: {"kind":"UInt32"},
    pbSecurityId2: {"kind""Ptr","child":{"kind":"Byte"}},
    dwLen2: {"kind":"UInt32"},
    dwReserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn CompatFlagsFromClsid(
    pclsid: {"kind""Ptr","child":Guid},
    pdwCompatFlags: {"kind""Ptr","child":{"kind":"UInt32"}},
    pdwMiscStatusFlags: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn SetAccessForIEAppContainer(
    hObject: Windows.Win32.SystemServices.HANDLE,
    ieObjectType: Windows.Win32.Com.IEObjectType,
    dwAccessMask: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "URLMON" fn CreateUri(
    pwzURI: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    dwReserved: {"kind":"UIntPtr"},
    ppURI: {"kind""Ptr","child":Windows.Win32.Com.IUri},

// set_last_errror=False (can and should we use this?)
pub extern "URLMON" fn CreateUriWithFragment(
    pwzURI: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwzFragment: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    dwReserved: {"kind":"UIntPtr"},
    ppURI: {"kind""Ptr","child":Windows.Win32.Com.IUri},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn CreateUriFromMultiByteString(
    pszANSIInputUri: {"kind""Ptr","child":{"kind":"SByte"}},
    dwEncodingFlags: {"kind":"UInt32"},
    dwCodePage: {"kind":"UInt32"},
    dwCreateFlags: {"kind":"UInt32"},
    dwReserved: {"kind":"UIntPtr"},
    ppUri: {"kind""Ptr","child":Windows.Win32.Com.IUri},

// set_last_errror=False (can and should we use this?)
pub extern "URLMON" fn CreateIUriBuilder(
    pIUri: Windows.Win32.Com.IUri,
    dwFlags: {"kind":"UInt32"},
    dwReserved: {"kind":"UIntPtr"},
    ppIUriBuilder: {"kind""Ptr","child":Windows.Win32.Com.IUriBuilder},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn HlinkSimpleNavigateToString(
    szTarget: {"kind""Ptr","child":{"kind":"UInt16"}},
    szLocation: {"kind""Ptr","child":{"kind":"UInt16"}},
    szTargetFrameName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pUnk: Windows.Win32.Com.IUnknown,
    pbc: Windows.Win32.Com.IBindCtx,
    param5: Windows.Win32.Com.IBindStatusCallback,
    grfHLNF: {"kind":"UInt32"},
    dwReserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn HlinkSimpleNavigateToMoniker(
    pmkTarget: Windows.Win32.Com.IMoniker,
    szLocation: {"kind""Ptr","child":{"kind":"UInt16"}},
    szTargetFrameName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pUnk: Windows.Win32.Com.IUnknown,
    pbc: Windows.Win32.Com.IBindCtx,
    param5: Windows.Win32.Com.IBindStatusCallback,
    grfHLNF: {"kind":"UInt32"},
    dwReserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn URLOpenStreamA(
    param0: Windows.Win32.Com.IUnknown,
    param1: {"kind""Ptr","child":{"kind":"SByte"}},
    param2: {"kind":"UInt32"},
    param3: Windows.Win32.Com.IBindStatusCallback,

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn URLOpenStreamW(
    param0: Windows.Win32.Com.IUnknown,
    param1: {"kind""Ptr","child":{"kind":"UInt16"}},
    param2: {"kind":"UInt32"},
    param3: Windows.Win32.Com.IBindStatusCallback,

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn URLOpenPullStreamA(
    param0: Windows.Win32.Com.IUnknown,
    param1: {"kind""Ptr","child":{"kind":"SByte"}},
    param2: {"kind":"UInt32"},
    param3: Windows.Win32.Com.IBindStatusCallback,

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn URLOpenPullStreamW(
    param0: Windows.Win32.Com.IUnknown,
    param1: {"kind""Ptr","child":{"kind":"UInt16"}},
    param2: {"kind":"UInt32"},
    param3: Windows.Win32.Com.IBindStatusCallback,

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn URLDownloadToFileA(
    param0: Windows.Win32.Com.IUnknown,
    param1: {"kind""Ptr","child":{"kind":"SByte"}},
    param2: {"kind""Ptr","child":{"kind":"SByte"}},
    param3: {"kind":"UInt32"},
    param4: Windows.Win32.Com.IBindStatusCallback,

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn URLDownloadToFileW(
    param0: Windows.Win32.Com.IUnknown,
    param1: {"kind""Ptr","child":{"kind":"UInt16"}},
    param2: {"kind""Ptr","child":{"kind":"UInt16"}},
    param3: {"kind":"UInt32"},
    param4: Windows.Win32.Com.IBindStatusCallback,

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn URLDownloadToCacheFileA(
    param0: Windows.Win32.Com.IUnknown,
    param1: {"kind""Ptr","child":{"kind":"SByte"}},
    param2: {"kind""Ptr","child":{"kind":"SByte"}},
    cchFileName: {"kind":"UInt32"},
    param4: {"kind":"UInt32"},
    param5: Windows.Win32.Com.IBindStatusCallback,

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn URLDownloadToCacheFileW(
    param0: Windows.Win32.Com.IUnknown,
    param1: {"kind""Ptr","child":{"kind":"UInt16"}},
    param2: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchFileName: {"kind":"UInt32"},
    param4: {"kind":"UInt32"},
    param5: Windows.Win32.Com.IBindStatusCallback,

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn URLOpenBlockingStreamA(
    param0: Windows.Win32.Com.IUnknown,
    param1: {"kind""Ptr","child":{"kind":"SByte"}},
    param2: {"kind""Ptr","child":Windows.Win32.StructuredStorage.IStream},
    param3: {"kind":"UInt32"},
    param4: Windows.Win32.Com.IBindStatusCallback,

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn URLOpenBlockingStreamW(
    param0: Windows.Win32.Com.IUnknown,
    param1: {"kind""Ptr","child":{"kind":"UInt16"}},
    param2: {"kind""Ptr","child":Windows.Win32.StructuredStorage.IStream},
    param3: {"kind":"UInt32"},
    param4: Windows.Win32.Com.IBindStatusCallback,

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn HlinkGoBack(
    pUnk: Windows.Win32.Com.IUnknown,

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn HlinkGoForward(
    pUnk: Windows.Win32.Com.IUnknown,

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn HlinkNavigateString(
    pUnk: Windows.Win32.Com.IUnknown,
    szTarget: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn HlinkNavigateMoniker(
    pUnk: Windows.Win32.Com.IUnknown,
    pmkTarget: Windows.Win32.Com.IMoniker,

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn CoInternetParseUrl(
    pwzUrl: {"kind""Ptr","child":{"kind":"UInt16"}},
    ParseAction: Windows.Win32.Com.PARSEACTION,
    dwFlags: {"kind":"UInt32"},
    pszResult: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchResult: {"kind":"UInt32"},
    pcchResult: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwReserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn CoInternetParseIUri(
    pIUri: Windows.Win32.Com.IUri,
    ParseAction: Windows.Win32.Com.PARSEACTION,
    dwFlags: {"kind":"UInt32"},
    pwzResult: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchResult: {"kind":"UInt32"},
    pcchResult: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwReserved: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn CoInternetCombineUrl(
    pwzBaseUrl: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwzRelativeUrl: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwCombineFlags: {"kind":"UInt32"},
    pszResult: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchResult: {"kind":"UInt32"},
    pcchResult: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwReserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn CoInternetCombineUrlEx(
    pBaseUri: Windows.Win32.Com.IUri,
    pwzRelativeUrl: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwCombineFlags: {"kind":"UInt32"},
    ppCombinedUri: {"kind""Ptr","child":Windows.Win32.Com.IUri},
    dwReserved: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn CoInternetCombineIUri(
    pBaseUri: Windows.Win32.Com.IUri,
    pRelativeUri: Windows.Win32.Com.IUri,
    dwCombineFlags: {"kind":"UInt32"},
    ppCombinedUri: {"kind""Ptr","child":Windows.Win32.Com.IUri},
    dwReserved: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn CoInternetCompareUrl(
    pwzUrl1: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwzUrl2: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn CoInternetGetProtocolFlags(
    pwzUrl: {"kind""Ptr","child":{"kind":"UInt16"}},
    pdwFlags: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwReserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn CoInternetQueryInfo(
    pwzUrl: {"kind""Ptr","child":{"kind":"UInt16"}},
    QueryOptions: Windows.Win32.Com.QUERYOPTION,
    dwQueryFlags: {"kind":"UInt32"},
    pvBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    cbBuffer: {"kind":"UInt32"},
    pcbBuffer: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwReserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn CoInternetGetSession(
    dwSessionMode: {"kind":"UInt32"},
    ppIInternetSession: {"kind""Ptr","child":Windows.Win32.Com.IInternetSession},
    dwReserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn CoInternetGetSecurityUrl(
    pwszUrl: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppwszSecUrl: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    psuAction: Windows.Win32.Com.PSUACTION,
    dwReserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn CoInternetGetSecurityUrlEx(
    pUri: Windows.Win32.Com.IUri,
    ppSecUri: {"kind""Ptr","child":Windows.Win32.Com.IUri},
    psuAction: Windows.Win32.Com.PSUACTION,
    dwReserved: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn CoInternetSetFeatureEnabled(
    FeatureEntry: Windows.Win32.Com.INTERNETFEATURELIST,
    dwFlags: {"kind":"UInt32"},
    fEnable: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn CoInternetIsFeatureEnabled(
    FeatureEntry: Windows.Win32.Com.INTERNETFEATURELIST,
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn CoInternetIsFeatureEnabledForUrl(
    FeatureEntry: Windows.Win32.Com.INTERNETFEATURELIST,
    dwFlags: {"kind":"UInt32"},
    szURL: {"kind""Ptr","child":{"kind":"UInt16"}},
    pSecMgr: Windows.Win32.Com.IInternetSecurityManager,

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn CoInternetIsFeatureEnabledForIUri(
    FeatureEntry: Windows.Win32.Com.INTERNETFEATURELIST,
    dwFlags: {"kind":"UInt32"},
    pIUri: Windows.Win32.Com.IUri,
    pSecMgr: Windows.Win32.Com.IInternetSecurityManagerEx2,

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn CoInternetIsFeatureZoneElevationEnabled(
    szFromURL: {"kind""Ptr","child":{"kind":"UInt16"}},
    szToURL: {"kind""Ptr","child":{"kind":"UInt16"}},
    pSecMgr: Windows.Win32.Com.IInternetSecurityManager,
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn CopyStgMedium(
    pcstgmedSrc: {"kind""Ptr","child":Windows.Win32.Com.STGMEDIUM},
    pstgmedDest: {"kind""Ptr","child":Windows.Win32.Com.STGMEDIUM},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn CopyBindInfo(
    pcbiSrc: {"kind""Ptr","child":Windows.Win32.Com.BINDINFO},
    pbiDest: {"kind""Ptr","child":Windows.Win32.Com.BINDINFO},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn ReleaseBindInfo(
    pbindinfo: {"kind""Ptr","child":Windows.Win32.Com.BINDINFO},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn IEGetUserPrivateNamespaceName(

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn CoInternetCreateSecurityManager(
    pSP: Windows.Win32.SystemServices.IServiceProvider,
    ppSM: {"kind""Ptr","child":Windows.Win32.Com.IInternetSecurityManager},
    dwReserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn CoInternetCreateZoneManager(
    pSP: Windows.Win32.SystemServices.IServiceProvider,
    ppZM: {"kind""Ptr","child":Windows.Win32.Com.IInternetZoneManager},
    dwReserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn GetSoftwareUpdateInfo(
    szDistUnit: {"kind""Ptr","child":{"kind":"UInt16"}},
    psdi: {"kind""Ptr","child":Windows.Win32.Shell.SOFTDISTINFO},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn SetSoftwareUpdateAdvertisementState(
    szDistUnit: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwAdState: {"kind":"UInt32"},
    dwAdvertisedVersionMS: {"kind":"UInt32"},
    dwAdvertisedVersionLS: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn IsLoggingEnabledA(
    pszUrl: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn IsLoggingEnabledW(
    pwszUrl: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "urlmon" fn WriteHitLogging(
    lpLogginginfo: {"kind""Ptr","child":Windows.Win32.Com.HIT_LOGGING_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CreateDataAdviseHolder(
    ppDAHolder: {"kind""Ptr","child":Windows.Win32.Com.IDataAdviseHolder},

// set_last_errror=False (can and should we use this?)
pub extern "ole32" fn OleBuildVersion(

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn OleInitialize(
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn OleUninitialize(

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn OleQueryLinkFromData(
    pSrcDataObject: Windows.Win32.Com.IDataObject,

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn OleQueryCreateFromData(
    pSrcDataObject: Windows.Win32.Com.IDataObject,

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn OleCreate(
    rclsid: {"kind""Ptr","child":Guid},
    riid: {"kind""Ptr","child":Guid},
    renderopt: {"kind":"UInt32"},
    pFormatEtc: {"kind""Ptr","child":Windows.Win32.Com.FORMATETC},
    pClientSite: Windows.Win32.Com.IOleClientSite,
    pStg: Windows.Win32.StructuredStorage.IStorage,
    ppvObj: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "ole32" fn OleCreateEx(
    rclsid: {"kind""Ptr","child":Guid},
    riid: {"kind""Ptr","child":Guid},
    dwFlags: {"kind":"UInt32"},
    renderopt: {"kind":"UInt32"},
    cFormats: {"kind":"UInt32"},
    rgAdvf: {"kind""Ptr","child":{"kind":"UInt32"}},
    rgFormatEtc: {"kind""Ptr","child":Windows.Win32.Com.FORMATETC},
    lpAdviseSink: Windows.Win32.Com.IAdviseSink,
    rgdwConnection: {"kind""Ptr","child":{"kind":"UInt32"}},
    pClientSite: Windows.Win32.Com.IOleClientSite,
    pStg: Windows.Win32.StructuredStorage.IStorage,
    ppvObj: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn OleCreateFromData(
    pSrcDataObj: Windows.Win32.Com.IDataObject,
    riid: {"kind""Ptr","child":Guid},
    renderopt: {"kind":"UInt32"},
    pFormatEtc: {"kind""Ptr","child":Windows.Win32.Com.FORMATETC},
    pClientSite: Windows.Win32.Com.IOleClientSite,
    pStg: Windows.Win32.StructuredStorage.IStorage,
    ppvObj: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "ole32" fn OleCreateFromDataEx(
    pSrcDataObj: Windows.Win32.Com.IDataObject,
    riid: {"kind""Ptr","child":Guid},
    dwFlags: {"kind":"UInt32"},
    renderopt: {"kind":"UInt32"},
    cFormats: {"kind":"UInt32"},
    rgAdvf: {"kind""Ptr","child":{"kind":"UInt32"}},
    rgFormatEtc: {"kind""Ptr","child":Windows.Win32.Com.FORMATETC},
    lpAdviseSink: Windows.Win32.Com.IAdviseSink,
    rgdwConnection: {"kind""Ptr","child":{"kind":"UInt32"}},
    pClientSite: Windows.Win32.Com.IOleClientSite,
    pStg: Windows.Win32.StructuredStorage.IStorage,
    ppvObj: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn OleCreateLinkFromData(
    pSrcDataObj: Windows.Win32.Com.IDataObject,
    riid: {"kind""Ptr","child":Guid},
    renderopt: {"kind":"UInt32"},
    pFormatEtc: {"kind""Ptr","child":Windows.Win32.Com.FORMATETC},
    pClientSite: Windows.Win32.Com.IOleClientSite,
    pStg: Windows.Win32.StructuredStorage.IStorage,
    ppvObj: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "ole32" fn OleCreateLinkFromDataEx(
    pSrcDataObj: Windows.Win32.Com.IDataObject,
    riid: {"kind""Ptr","child":Guid},
    dwFlags: {"kind":"UInt32"},
    renderopt: {"kind":"UInt32"},
    cFormats: {"kind":"UInt32"},
    rgAdvf: {"kind""Ptr","child":{"kind":"UInt32"}},
    rgFormatEtc: {"kind""Ptr","child":Windows.Win32.Com.FORMATETC},
    lpAdviseSink: Windows.Win32.Com.IAdviseSink,
    rgdwConnection: {"kind""Ptr","child":{"kind":"UInt32"}},
    pClientSite: Windows.Win32.Com.IOleClientSite,
    pStg: Windows.Win32.StructuredStorage.IStorage,
    ppvObj: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn OleCreateStaticFromData(
    pSrcDataObj: Windows.Win32.Com.IDataObject,
    iid: {"kind""Ptr","child":Guid},
    renderopt: {"kind":"UInt32"},
    pFormatEtc: {"kind""Ptr","child":Windows.Win32.Com.FORMATETC},
    pClientSite: Windows.Win32.Com.IOleClientSite,
    pStg: Windows.Win32.StructuredStorage.IStorage,
    ppvObj: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "ole32" fn OleCreateLink(
    pmkLinkSrc: Windows.Win32.Com.IMoniker,
    riid: {"kind""Ptr","child":Guid},
    renderopt: {"kind":"UInt32"},
    lpFormatEtc: {"kind""Ptr","child":Windows.Win32.Com.FORMATETC},
    pClientSite: Windows.Win32.Com.IOleClientSite,
    pStg: Windows.Win32.StructuredStorage.IStorage,
    ppvObj: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "ole32" fn OleCreateLinkEx(
    pmkLinkSrc: Windows.Win32.Com.IMoniker,
    riid: {"kind""Ptr","child":Guid},
    dwFlags: {"kind":"UInt32"},
    renderopt: {"kind":"UInt32"},
    cFormats: {"kind":"UInt32"},
    rgAdvf: {"kind""Ptr","child":{"kind":"UInt32"}},
    rgFormatEtc: {"kind""Ptr","child":Windows.Win32.Com.FORMATETC},
    lpAdviseSink: Windows.Win32.Com.IAdviseSink,
    rgdwConnection: {"kind""Ptr","child":{"kind":"UInt32"}},
    pClientSite: Windows.Win32.Com.IOleClientSite,
    pStg: Windows.Win32.StructuredStorage.IStorage,
    ppvObj: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn OleCreateLinkToFile(
    lpszFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    riid: {"kind""Ptr","child":Guid},
    renderopt: {"kind":"UInt32"},
    lpFormatEtc: {"kind""Ptr","child":Windows.Win32.Com.FORMATETC},
    pClientSite: Windows.Win32.Com.IOleClientSite,
    pStg: Windows.Win32.StructuredStorage.IStorage,
    ppvObj: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "ole32" fn OleCreateLinkToFileEx(
    lpszFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    riid: {"kind""Ptr","child":Guid},
    dwFlags: {"kind":"UInt32"},
    renderopt: {"kind":"UInt32"},
    cFormats: {"kind":"UInt32"},
    rgAdvf: {"kind""Ptr","child":{"kind":"UInt32"}},
    rgFormatEtc: {"kind""Ptr","child":Windows.Win32.Com.FORMATETC},
    lpAdviseSink: Windows.Win32.Com.IAdviseSink,
    rgdwConnection: {"kind""Ptr","child":{"kind":"UInt32"}},
    pClientSite: Windows.Win32.Com.IOleClientSite,
    pStg: Windows.Win32.StructuredStorage.IStorage,
    ppvObj: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn OleCreateFromFile(
    rclsid: {"kind""Ptr","child":Guid},
    lpszFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    riid: {"kind""Ptr","child":Guid},
    renderopt: {"kind":"UInt32"},
    lpFormatEtc: {"kind""Ptr","child":Windows.Win32.Com.FORMATETC},
    pClientSite: Windows.Win32.Com.IOleClientSite,
    pStg: Windows.Win32.StructuredStorage.IStorage,
    ppvObj: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "ole32" fn OleCreateFromFileEx(
    rclsid: {"kind""Ptr","child":Guid},
    lpszFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    riid: {"kind""Ptr","child":Guid},
    dwFlags: {"kind":"UInt32"},
    renderopt: {"kind":"UInt32"},
    cFormats: {"kind":"UInt32"},
    rgAdvf: {"kind""Ptr","child":{"kind":"UInt32"}},
    rgFormatEtc: {"kind""Ptr","child":Windows.Win32.Com.FORMATETC},
    lpAdviseSink: Windows.Win32.Com.IAdviseSink,
    rgdwConnection: {"kind""Ptr","child":{"kind":"UInt32"}},
    pClientSite: Windows.Win32.Com.IOleClientSite,
    pStg: Windows.Win32.StructuredStorage.IStorage,
    ppvObj: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn OleLoad(
    pStg: Windows.Win32.StructuredStorage.IStorage,
    riid: {"kind""Ptr","child":Guid},
    pClientSite: Windows.Win32.Com.IOleClientSite,
    ppvObj: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn OleSave(
    pPS: Windows.Win32.Com.IPersistStorage,
    pStg: Windows.Win32.StructuredStorage.IStorage,
    fSameAsLoad: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn OleLoadFromStream(
    pStm: Windows.Win32.StructuredStorage.IStream,
    iidInterface: {"kind""Ptr","child":Guid},
    ppvObj: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn OleSaveToStream(
    pPStm: Windows.Win32.Com.IPersistStream,
    pStm: Windows.Win32.StructuredStorage.IStream,

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn OleSetContainedObject(
    pUnknown: Windows.Win32.Com.IUnknown,
    fContained: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "ole32" fn OleNoteObjectVisible(
    pUnknown: Windows.Win32.Com.IUnknown,
    fVisible: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn RegisterDragDrop(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    pDropTarget: Windows.Win32.Com.IDropTarget,

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn RevokeDragDrop(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn DoDragDrop(
    pDataObj: Windows.Win32.Com.IDataObject,
    pDropSource: Windows.Win32.Com.IDropSource,
    dwOKEffects: {"kind":"UInt32"},
    pdwEffect: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn OleSetClipboard(
    pDataObj: Windows.Win32.Com.IDataObject,

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn OleGetClipboard(
    ppDataObj: {"kind""Ptr","child":Windows.Win32.Com.IDataObject},

// set_last_errror=False (can and should we use this?)
pub extern "ole32" fn OleGetClipboardWithEnterpriseInfo(
    dataObject: {"kind""Ptr","child":Windows.Win32.Com.IDataObject},
    dataEnterpriseId: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    sourceDescription: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    targetDescription: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    dataDescription: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn OleFlushClipboard(

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn OleIsCurrentClipboard(
    pDataObj: Windows.Win32.Com.IDataObject,

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn OleCreateMenuDescriptor(
    hmenuCombined: Windows.Win32.MenusAndResources.HMENU,
    lpMenuWidths: {"kind""Ptr","child":Windows.Win32.Com.OleMenuGroupWidths},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn OleSetMenuDescriptor(
    holemenu: {"kind":"IntPtr"},
    hwndFrame: Windows.Win32.WindowsAndMessaging.HWND,
    hwndActiveObject: Windows.Win32.WindowsAndMessaging.HWND,
    lpFrame: Windows.Win32.Com.IOleInPlaceFrame,
    lpActiveObj: Windows.Win32.Com.IOleInPlaceActiveObject,

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn OleDestroyMenuDescriptor(
    holemenu: {"kind":"IntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn OleTranslateAccelerator(
    lpFrame: Windows.Win32.Com.IOleInPlaceFrame,
    lpFrameInfo: {"kind""Ptr","child":Windows.Win32.Com.OIFI},
    lpmsg: {"kind""Ptr","child":Windows.Win32.WindowsAndMessaging.MSG},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn OleDuplicateData(
    hSrc: Windows.Win32.SystemServices.HANDLE,
    cfFormat: {"kind":"UInt16"},
    uiFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn OleDraw(
    pUnknown: Windows.Win32.Com.IUnknown,
    dwAspect: {"kind":"UInt32"},
    hdcDraw: Windows.Win32.Gdi.HDC,
    lprcBounds: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn OleRun(
    pUnknown: Windows.Win32.Com.IUnknown,

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn OleIsRunning(
    pObject: Windows.Win32.Com.IOleObject,

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn OleLockRunning(
    pUnknown: Windows.Win32.Com.IUnknown,
    fLock: Windows.Win32.SystemServices.BOOL,
    fLastUnlockCloses: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn ReleaseStgMedium(
    param0: {"kind""Ptr","child":Windows.Win32.Com.STGMEDIUM},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CreateOleAdviseHolder(
    ppOAHolder: {"kind""Ptr","child":Windows.Win32.Com.IOleAdviseHolder},

// set_last_errror=False (can and should we use this?)
pub extern "ole32" fn OleCreateDefaultHandler(
    clsid: {"kind""Ptr","child":Guid},
    pUnkOuter: Windows.Win32.Com.IUnknown,
    riid: {"kind""Ptr","child":Guid},
    lplpObj: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn OleCreateEmbeddingHelper(
    clsid: {"kind""Ptr","child":Guid},
    pUnkOuter: Windows.Win32.Com.IUnknown,
    flags: {"kind":"UInt32"},
    pCF: Windows.Win32.Com.IClassFactory,
    riid: {"kind""Ptr","child":Guid},
    lplpObj: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn IsAccelerator(
    hAccel: Windows.Win32.MenusAndResources.HACCEL,
    cAccelEntries: {"kind":"Int32"},
    lpMsg: {"kind""Ptr","child":Windows.Win32.WindowsAndMessaging.MSG},
    lpwCmd: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "ole32" fn OleGetIconOfFile(
    lpszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    fUseFileAsLabel: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn OleGetIconOfClass(
    rclsid: {"kind""Ptr","child":Guid},
    lpszLabel: {"kind""Ptr","child":{"kind":"UInt16"}},
    fUseTypeAsLabel: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "ole32" fn OleMetafilePictFromIconAndLabel(
    hIcon: Windows.Win32.Gdi.HICON,
    lpszLabel: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpszSourceFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    iIconIndex: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn OleRegGetUserType(
    clsid: {"kind""Ptr","child":Guid},
    dwFormOfType: {"kind":"UInt32"},
    pszUserType: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn OleRegGetMiscStatus(
    clsid: {"kind""Ptr","child":Guid},
    dwAspect: {"kind":"UInt32"},
    pdwStatus: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ole32" fn OleRegEnumFormatEtc(
    clsid: {"kind""Ptr","child":Guid},
    dwDirection: {"kind":"UInt32"},
    ppenum: {"kind""Ptr","child":Windows.Win32.Com.IEnumFORMATETC},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn OleRegEnumVerbs(
    clsid: {"kind""Ptr","child":Guid},
    ppenum: {"kind""Ptr","child":Windows.Win32.Com.IEnumOLEVERB},

// set_last_errror=False (can and should we use this?)
pub extern "ole32" fn OleDoAutoConvert(
    pStg: Windows.Win32.StructuredStorage.IStorage,
    pClsidNew: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn OleGetAutoConvert(
    clsidOld: {"kind""Ptr","child":Guid},
    pClsidNew: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "ole32" fn OleSetAutoConvert(
    clsidOld: {"kind""Ptr","child":Guid},
    clsidNew: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HPALETTE_UserSize(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind":"UInt32"},
    param2: {"kind""Ptr","child":Windows.Win32.Gdi.HPALETTE},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HPALETTE_UserMarshal(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":Windows.Win32.Gdi.HPALETTE},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HPALETTE_UserUnmarshal(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":Windows.Win32.Gdi.HPALETTE},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HPALETTE_UserFree(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":Windows.Win32.Gdi.HPALETTE},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HRGN_UserSize(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind":"UInt32"},
    param2: {"kind""Ptr","child":Windows.Win32.Gdi.HRGN},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HRGN_UserMarshal(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":Windows.Win32.Gdi.HRGN},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HRGN_UserUnmarshal(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":Windows.Win32.Gdi.HRGN},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HRGN_UserFree(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":Windows.Win32.Gdi.HRGN},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HPALETTE_UserSize64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind":"UInt32"},
    param2: {"kind""Ptr","child":Windows.Win32.Gdi.HPALETTE},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HPALETTE_UserMarshal64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":Windows.Win32.Gdi.HPALETTE},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HPALETTE_UserUnmarshal64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":Windows.Win32.Gdi.HPALETTE},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HPALETTE_UserFree64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":Windows.Win32.Gdi.HPALETTE},

// set_last_errror=False (can and should we use this?)
pub extern "OLEAUT32" fn OleCreatePropertyFrame(
    hwndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    x: {"kind":"UInt32"},
    y: {"kind":"UInt32"},
    lpszCaption: {"kind""Ptr","child":{"kind":"UInt16"}},
    cObjects: {"kind":"UInt32"},
    ppUnk: {"kind""Ptr","child":Windows.Win32.Com.IUnknown},
    cPages: {"kind":"UInt32"},
    pPageClsID: {"kind""Ptr","child":Guid},
    lcid: {"kind":"UInt32"},
    dwReserved: {"kind":"UInt32"},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLEAUT32" fn OleCreatePropertyFrameIndirect(
    lpParams: {"kind""Ptr","child":Windows.Win32.Com.OCPFIPARAMS},

// set_last_errror=False (can and should we use this?)
pub extern "OLEAUT32" fn OleTranslateColor(
    clr: {"kind":"UInt32"},
    hpal: Windows.Win32.Gdi.HPALETTE,
    lpcolorref: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLEAUT32" fn OleCreateFontIndirect(
    lpFontDesc: {"kind""Ptr","child":Windows.Win32.Com.FONTDESC},
    riid: {"kind""Ptr","child":Guid},
    lplpvObj: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "OLEAUT32" fn OleCreatePictureIndirect(
    lpPictDesc: {"kind""Ptr","child":Windows.Win32.Com.PICTDESC},
    riid: {"kind""Ptr","child":Guid},
    fOwn: Windows.Win32.SystemServices.BOOL,
    lplpvObj: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "OLEAUT32" fn OleLoadPicture(
    lpstream: Windows.Win32.StructuredStorage.IStream,
    lSize: {"kind":"Int32"},
    fRunmode: Windows.Win32.SystemServices.BOOL,
    riid: {"kind""Ptr","child":Guid},
    lplpvObj: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "OLEAUT32" fn OleLoadPictureEx(
    lpstream: Windows.Win32.StructuredStorage.IStream,
    lSize: {"kind":"Int32"},
    fRunmode: Windows.Win32.SystemServices.BOOL,
    riid: {"kind""Ptr","child":Guid},
    xSizeDesired: {"kind":"UInt32"},
    ySizeDesired: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    lplpvObj: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "OLEAUT32" fn OleLoadPicturePath(
    szURLorPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    punkCaller: Windows.Win32.Com.IUnknown,
    dwReserved: {"kind":"UInt32"},
    clrReserved: {"kind":"UInt32"},
    riid: {"kind""Ptr","child":Guid},
    ppvRet: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "OLEAUT32" fn OleIconToCursor(
    hinstExe: Windows.Win32.SystemServices.HINSTANCE,
    hIcon: Windows.Win32.Gdi.HICON,

// set_last_errror=False (can and should we use this?)
pub extern "oledlg" fn OleUIAddVerbMenuW(
    lpOleObj: Windows.Win32.Com.IOleObject,
    lpszShortType: {"kind""Ptr","child":{"kind":"UInt16"}},
    hMenu: Windows.Win32.MenusAndResources.HMENU,
    uPos: {"kind":"UInt32"},
    uIDVerbMin: {"kind":"UInt32"},
    uIDVerbMax: {"kind":"UInt32"},
    bAddConvert: Windows.Win32.SystemServices.BOOL,
    idConvert: {"kind":"UInt32"},
    lphMenu: {"kind""Ptr","child":Windows.Win32.MenusAndResources.HMENU},

// set_last_errror=False (can and should we use this?)
pub extern "oledlg" fn OleUIAddVerbMenuA(
    lpOleObj: Windows.Win32.Com.IOleObject,
    lpszShortType: {"kind""Ptr","child":{"kind":"SByte"}},
    hMenu: Windows.Win32.MenusAndResources.HMENU,
    uPos: {"kind":"UInt32"},
    uIDVerbMin: {"kind":"UInt32"},
    uIDVerbMax: {"kind":"UInt32"},
    bAddConvert: Windows.Win32.SystemServices.BOOL,
    idConvert: {"kind":"UInt32"},
    lphMenu: {"kind""Ptr","child":Windows.Win32.MenusAndResources.HMENU},

// set_last_errror=False (can and should we use this?)
pub extern "oledlg" fn OleUIInsertObjectW(
    param0: {"kind""Ptr","child":Windows.Win32.Com.OLEUIINSERTOBJECTW},

// set_last_errror=False (can and should we use this?)
pub extern "oledlg" fn OleUIInsertObjectA(
    param0: {"kind""Ptr","child":Windows.Win32.Com.OLEUIINSERTOBJECTA},

// set_last_errror=False (can and should we use this?)
pub extern "oledlg" fn OleUIPasteSpecialW(
    param0: {"kind""Ptr","child":Windows.Win32.Com.OLEUIPASTESPECIALW},

// set_last_errror=False (can and should we use this?)
pub extern "oledlg" fn OleUIPasteSpecialA(
    param0: {"kind""Ptr","child":Windows.Win32.Com.OLEUIPASTESPECIALA},

// set_last_errror=False (can and should we use this?)
pub extern "oledlg" fn OleUIEditLinksW(
    param0: {"kind""Ptr","child":Windows.Win32.Com.OLEUIEDITLINKSW},

// set_last_errror=False (can and should we use this?)
pub extern "oledlg" fn OleUIEditLinksA(
    param0: {"kind""Ptr","child":Windows.Win32.Com.OLEUIEDITLINKSA},

// set_last_errror=False (can and should we use this?)
pub extern "oledlg" fn OleUIChangeIconW(
    param0: {"kind""Ptr","child":Windows.Win32.Com.OLEUICHANGEICONW},

// set_last_errror=False (can and should we use this?)
pub extern "oledlg" fn OleUIChangeIconA(
    param0: {"kind""Ptr","child":Windows.Win32.Com.OLEUICHANGEICONA},

// set_last_errror=False (can and should we use this?)
pub extern "oledlg" fn OleUIConvertW(
    param0: {"kind""Ptr","child":Windows.Win32.Com.OLEUICONVERTW},

// set_last_errror=False (can and should we use this?)
pub extern "oledlg" fn OleUIConvertA(
    param0: {"kind""Ptr","child":Windows.Win32.Com.OLEUICONVERTA},

// set_last_errror=False (can and should we use this?)
pub extern "oledlg" fn OleUICanConvertOrActivateAs(
    rClsid: {"kind""Ptr","child":Guid},
    fIsLinkedObject: Windows.Win32.SystemServices.BOOL,
    wFormat: {"kind":"UInt16"},

// set_last_errror=False (can and should we use this?)
pub extern "oledlg" fn OleUIBusyW(
    param0: {"kind""Ptr","child":Windows.Win32.Com.OLEUIBUSYW},

// set_last_errror=False (can and should we use this?)
pub extern "oledlg" fn OleUIBusyA(
    param0: {"kind""Ptr","child":Windows.Win32.Com.OLEUIBUSYA},

// set_last_errror=False (can and should we use this?)
pub extern "oledlg" fn OleUIChangeSourceW(
    param0: {"kind""Ptr","child":Windows.Win32.Com.OLEUICHANGESOURCEW},

// set_last_errror=False (can and should we use this?)
pub extern "oledlg" fn OleUIChangeSourceA(
    param0: {"kind""Ptr","child":Windows.Win32.Com.OLEUICHANGESOURCEA},

// set_last_errror=False (can and should we use this?)
pub extern "oledlg" fn OleUIObjectPropertiesW(
    param0: {"kind""Ptr","child":Windows.Win32.Com.OLEUIOBJECTPROPSW},

// set_last_errror=False (can and should we use this?)
pub extern "oledlg" fn OleUIObjectPropertiesA(
    param0: {"kind""Ptr","child":Windows.Win32.Com.OLEUIOBJECTPROPSA},

// set_last_errror=False (can and should we use this?)
pub extern "oledlg" fn OleUIPromptUserW(
    nTemplate: {"kind":"Int32"},
    hwndParent: Windows.Win32.WindowsAndMessaging.HWND,

// set_last_errror=False (can and should we use this?)
pub extern "oledlg" fn OleUIPromptUserA(
    nTemplate: {"kind":"Int32"},
    hwndParent: Windows.Win32.WindowsAndMessaging.HWND,

// set_last_errror=False (can and should we use this?)
pub extern "oledlg" fn OleUIUpdateLinksW(
    lpOleUILinkCntr: Windows.Win32.Com.IOleUILinkContainerW,
    hwndParent: Windows.Win32.WindowsAndMessaging.HWND,
    lpszTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    cLinks: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "oledlg" fn OleUIUpdateLinksA(
    lpOleUILinkCntr: Windows.Win32.Com.IOleUILinkContainerA,
    hwndParent: Windows.Win32.WindowsAndMessaging.HWND,
    lpszTitle: {"kind""Ptr","child":{"kind":"SByte"}},
    cLinks: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "ole32" fn CoGetInterceptor(
    iidIntercepted: {"kind""Ptr","child":Guid},
    punkOuter: Windows.Win32.Com.IUnknown,
    iid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "ole32" fn CoGetInterceptorFromTypeInfo(
    iidIntercepted: {"kind""Ptr","child":Guid},
    punkOuter: Windows.Win32.Com.IUnknown,
    typeInfo: Windows.Win32.Automation.ITypeInfo,
    iid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "ole32" fn CoSetMessageDispatcher(
    pMessageDispatcher: Windows.Win32.Com.IMessageDispatcher,

// set_last_errror=False (can and should we use this?)
pub extern "ole32" fn CoHandlePriorityEventsFromMessagePump(

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoInitialize(
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoRegisterMallocSpy(
    pMallocSpy: Windows.Win32.Com.IMallocSpy,

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoRevokeMallocSpy(

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoRegisterInitializeSpy(
    pSpy: Windows.Win32.Com.IInitializeSpy,
    puliCookie: {"kind""Ptr","child":Windows.Win32.SystemServices.ULARGE_INTEGER},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoRevokeInitializeSpy(
    uliCookie: Windows.Win32.SystemServices.ULARGE_INTEGER,

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoGetSystemSecurityPermissions(
    comSDType: Windows.Win32.Com.COMSD,
    ppSD: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoLoadLibrary(
    lpszLibName: {"kind""Ptr","child":{"kind":"UInt16"}},
    bAutoFree: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoFreeLibrary(
    hInst: Windows.Win32.SystemServices.HINSTANCE,

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoFreeAllLibraries(

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoGetInstanceFromFile(
    pServerInfo: {"kind""Ptr","child":Windows.Win32.Com.COSERVERINFO},
    pClsid: {"kind""Ptr","child":Guid},
    punkOuter: Windows.Win32.Com.IUnknown,
    dwClsCtx: {"kind":"UInt32"},
    grfMode: {"kind":"UInt32"},
    pwszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwCount: {"kind":"UInt32"},
    pResults: {"kind""Ptr","child":Windows.Win32.Com.MULTI_QI},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoGetInstanceFromIStorage(
    pServerInfo: {"kind""Ptr","child":Windows.Win32.Com.COSERVERINFO},
    pClsid: {"kind""Ptr","child":Guid},
    punkOuter: Windows.Win32.Com.IUnknown,
    dwClsCtx: {"kind":"UInt32"},
    pstg: Windows.Win32.StructuredStorage.IStorage,
    dwCount: {"kind":"UInt32"},
    pResults: {"kind""Ptr","child":Windows.Win32.Com.MULTI_QI},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoAllowSetForegroundWindow(
    pUnk: Windows.Win32.Com.IUnknown,
    lpvReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ole32" fn CoIsOle1Class(
    rclsid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoFileTimeToDosDateTime(
    lpFileTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    lpDosDate: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpDosTime: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoDosDateTimeToFileTime(
    nDosDate: {"kind":"UInt16"},
    nDosTime: {"kind":"UInt16"},
    lpFileTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoRegisterMessageFilter(
    lpMessageFilter: Windows.Win32.Com.IMessageFilter,
    lplpMessageFilter: {"kind""Ptr","child":Windows.Win32.Com.IMessageFilter},

// set_last_errror=False (can and should we use this?)
pub extern "ole32" fn CoRegisterChannelHook(
    ExtensionUuid: {"kind""Ptr","child":Guid},
    pChannelHook: Windows.Win32.Com.IChannelHook,

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoTreatAsClass(
    clsidOld: {"kind""Ptr","child":Guid},
    clsidNew: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CreateDataCache(
    pUnkOuter: Windows.Win32.Com.IUnknown,
    rclsid: {"kind""Ptr","child":Guid},
    iid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn BindMoniker(
    pmk: Windows.Win32.Com.IMoniker,
    grfOpt: {"kind":"UInt32"},
    iidResult: {"kind""Ptr","child":Guid},
    ppvResult: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CoGetObject(
    pszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pBindOptions: {"kind""Ptr","child":Windows.Win32.Com.BIND_OPTS},
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn MkParseDisplayName(
    pbc: Windows.Win32.Com.IBindCtx,
    szUserName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pchEaten: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppmk: {"kind""Ptr","child":Windows.Win32.Com.IMoniker},

// set_last_errror=False (can and should we use this?)
pub extern "ole32" fn MonikerRelativePathTo(
    pmkSrc: Windows.Win32.Com.IMoniker,
    pmkDest: Windows.Win32.Com.IMoniker,
    ppmkRelPath: {"kind""Ptr","child":Windows.Win32.Com.IMoniker},
    dwReserved: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "ole32" fn MonikerCommonPrefixWith(
    pmkThis: Windows.Win32.Com.IMoniker,
    pmkOther: Windows.Win32.Com.IMoniker,
    ppmkCommon: {"kind""Ptr","child":Windows.Win32.Com.IMoniker},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CreateBindCtx(
    reserved: {"kind":"UInt32"},
    ppbc: {"kind""Ptr","child":Windows.Win32.Com.IBindCtx},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CreateGenericComposite(
    pmkFirst: Windows.Win32.Com.IMoniker,
    pmkRest: Windows.Win32.Com.IMoniker,
    ppmkComposite: {"kind""Ptr","child":Windows.Win32.Com.IMoniker},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn GetClassFile(
    szFilename: {"kind""Ptr","child":{"kind":"UInt16"}},
    pclsid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CreateClassMoniker(
    rclsid: {"kind""Ptr","child":Guid},
    ppmk: {"kind""Ptr","child":Windows.Win32.Com.IMoniker},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CreateFileMoniker(
    lpszPathName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppmk: {"kind""Ptr","child":Windows.Win32.Com.IMoniker},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CreateItemMoniker(
    lpszDelim: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpszItem: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppmk: {"kind""Ptr","child":Windows.Win32.Com.IMoniker},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CreateAntiMoniker(
    ppmk: {"kind""Ptr","child":Windows.Win32.Com.IMoniker},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CreatePointerMoniker(
    punk: Windows.Win32.Com.IUnknown,
    ppmk: {"kind""Ptr","child":Windows.Win32.Com.IMoniker},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn CreateObjrefMoniker(
    punk: Windows.Win32.Com.IUnknown,
    ppmk: {"kind""Ptr","child":Windows.Win32.Com.IMoniker},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn GetRunningObjectTable(
    reserved: {"kind":"UInt32"},
    pprot: {"kind""Ptr","child":Windows.Win32.Com.IRunningObjectTable},
],

"unicode_aliases": [
     "OLEUIINSERTOBJECT"
     "OLEUIPASTEENTRY"
     "OLEUIPASTESPECIAL"
     "IOleUILinkContainer"
     "OLEUIEDITLINKS"
     "OLEUICHANGEICON"
     "OLEUICONVERT"
     "OLEUIBUSY"
     "OLEUICHANGESOURCE"
     "IOleUIObjInfo"
     "IOleUILinkInfo"
     "OLEUIGNRLPROPS"
     "OLEUIVIEWPROPS"
     "OLEUILINKPROPS"
     "OLEUIOBJECTPROPS"
     "ACTRL_ACCESS_ENTRY"
     "ACTRL_ACCESS_ENTRY_LIST"
     "ACTRL_PROPERTY_ENTRY"
     "ACTRL_ACCESS"
     "URLOpenStream"
     "URLOpenPullStream"
     "URLDownloadToFile"
     "URLDownloadToCacheFile"
     "URLOpenBlockingStream"
     "IsLoggingEnabled"
     "OleUIAddVerbMenu"
     "OleUIInsertObject"
     "OleUIPasteSpecial"
     "OleUIEditLinks"
     "OleUIChangeIcon"
     "OleUIConvert"
     "OleUIBusy"
     "OleUIChangeSource"
     "OleUIObjectProperties"
     "OleUIPromptUser"
     "OleUIUpdateLinks"
]}
