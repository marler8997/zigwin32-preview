{
"constants": [
     {
         "name": "TRUE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "FALSE"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "RT_CURSOR"
        ,"type": {"kind":"UInt16"}
        ,"value": 1
    }
    ,{
         "name": "RT_BITMAP"
        ,"type": {"kind":"UInt16"}
        ,"value": 2
    }
    ,{
         "name": "RT_ICON"
        ,"type": {"kind":"UInt16"}
        ,"value": 3
    }
    ,{
         "name": "RT_MENU"
        ,"type": {"kind":"UInt16"}
        ,"value": 4
    }
    ,{
         "name": "RT_DIALOG"
        ,"type": {"kind":"UInt16"}
        ,"value": 5
    }
    ,{
         "name": "RT_STRING"
        ,"type": {"kind":"UInt16"}
        ,"value": 6
    }
    ,{
         "name": "RT_FONTDIR"
        ,"type": {"kind":"UInt16"}
        ,"value": 7
    }
    ,{
         "name": "RT_FONT"
        ,"type": {"kind":"UInt16"}
        ,"value": 8
    }
    ,{
         "name": "RT_ACCELERATOR"
        ,"type": {"kind":"UInt16"}
        ,"value": 9
    }
    ,{
         "name": "RT_RCDATA"
        ,"type": {"kind":"UInt16"}
        ,"value": 10
    }
    ,{
         "name": "RT_MESSAGETABLE"
        ,"type": {"kind":"UInt16"}
        ,"value": 11
    }
    ,{
         "name": "DIFFERENCE"
        ,"type": {"kind":"Int32"}
        ,"value": 11
    }
    ,{
         "name": "RT_GROUP_CURSOR"
        ,"type": {"kind":"UInt16"}
        ,"value": 12
    }
    ,{
         "name": "RT_GROUP_ICON"
        ,"type": {"kind":"UInt16"}
        ,"value": 14
    }
    ,{
         "name": "RT_VERSION"
        ,"type": {"kind":"UInt16"}
        ,"value": 16
    }
    ,{
         "name": "RT_DLGINCLUDE"
        ,"type": {"kind":"UInt16"}
        ,"value": 17
    }
    ,{
         "name": "RT_PLUGPLAY"
        ,"type": {"kind":"UInt16"}
        ,"value": 19
    }
    ,{
         "name": "RT_VXD"
        ,"type": {"kind":"UInt16"}
        ,"value": 20
    }
    ,{
         "name": "RT_ANICURSOR"
        ,"type": {"kind":"UInt16"}
        ,"value": 21
    }
    ,{
         "name": "RT_ANIICON"
        ,"type": {"kind":"UInt16"}
        ,"value": 22
    }
    ,{
         "name": "RT_HTML"
        ,"type": {"kind":"UInt16"}
        ,"value": 23
    }
    ,{
         "name": "RT_MANIFEST"
        ,"type": {"kind":"UInt16"}
        ,"value": 24
    }
    ,{
         "name": "CREATEPROCESS_MANIFEST_RESOURCE_ID"
        ,"type": {"kind":"UInt16"}
        ,"value": 1
    }
    ,{
         "name": "ISOLATIONAWARE_MANIFEST_RESOURCE_ID"
        ,"type": {"kind":"UInt16"}
        ,"value": 2
    }
    ,{
         "name": "ISOLATIONAWARE_NOSTATICIMPORT_MANIFEST_RESOURCE_ID"
        ,"type": {"kind":"UInt16"}
        ,"value": 3
    }
    ,{
         "name": "ISOLATIONPOLICY_MANIFEST_RESOURCE_ID"
        ,"type": {"kind":"UInt16"}
        ,"value": 4
    }
    ,{
         "name": "ISOLATIONPOLICY_BROWSER_MANIFEST_RESOURCE_ID"
        ,"type": {"kind":"UInt16"}
        ,"value": 5
    }
    ,{
         "name": "MINIMUM_RESERVED_MANIFEST_RESOURCE_ID"
        ,"type": {"kind":"UInt16"}
        ,"value": 1
    }
    ,{
         "name": "MAXIMUM_RESERVED_MANIFEST_RESOURCE_ID"
        ,"type": {"kind":"UInt16"}
        ,"value": 16
    }
    ,{
         "name": "SETWALLPAPER_DEFAULT"
        ,"type": {"kind":"Int32"}
        ,"value": -1
    }
    ,{
         "name": "SB_HORZ"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "SB_VERT"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "SB_CTL"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "SB_BOTH"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "SB_LINEUP"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "SB_LINELEFT"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "SB_LINEDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "SB_LINERIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "SB_PAGEUP"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "SB_PAGELEFT"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "SB_PAGEDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "SB_PAGERIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "SB_THUMBPOSITION"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "SB_THUMBTRACK"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "SB_TOP"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "SB_LEFT"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "SB_BOTTOM"
        ,"type": {"kind":"Int32"}
        ,"value": 7
    }
    ,{
         "name": "SB_RIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 7
    }
    ,{
         "name": "SB_ENDSCROLL"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "SW_HIDE"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "SW_SHOWNORMAL"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "SW_NORMAL"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "SW_SHOWMINIMIZED"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "SW_SHOWMAXIMIZED"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "SW_MAXIMIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "SW_SHOWNOACTIVATE"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "SW_SHOW"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "SW_MINIMIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "SW_SHOWMINNOACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 7
    }
    ,{
         "name": "SW_SHOWNA"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "SW_RESTORE"
        ,"type": {"kind":"Int32"}
        ,"value": 9
    }
    ,{
         "name": "SW_SHOWDEFAULT"
        ,"type": {"kind":"Int32"}
        ,"value": 10
    }
    ,{
         "name": "SW_FORCEMINIMIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 11
    }
    ,{
         "name": "SW_MAX"
        ,"type": {"kind":"Int32"}
        ,"value": 11
    }
    ,{
         "name": "HIDE_WINDOW"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "SHOW_OPENWINDOW"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "SHOW_ICONWINDOW"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "SHOW_FULLSCREEN"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "SHOW_OPENNOACTIVATE"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "SW_PARENTCLOSING"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "SW_OTHERZOOM"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "SW_PARENTOPENING"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "SW_OTHERUNZOOM"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "AW_HOR_POSITIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "AW_HOR_NEGATIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "AW_VER_POSITIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "AW_VER_NEGATIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "AW_CENTER"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "AW_HIDE"
        ,"type": {"kind":"Int32"}
        ,"value": 65536
    }
    ,{
         "name": "AW_ACTIVATE"
        ,"type": {"kind":"Int32"}
        ,"value": 131072
    }
    ,{
         "name": "AW_SLIDE"
        ,"type": {"kind":"Int32"}
        ,"value": 262144
    }
    ,{
         "name": "AW_BLEND"
        ,"type": {"kind":"Int32"}
        ,"value": 524288
    }
    ,{
         "name": "KF_EXTENDED"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "KF_DLGMODE"
        ,"type": {"kind":"Int32"}
        ,"value": 2048
    }
    ,{
         "name": "KF_MENUMODE"
        ,"type": {"kind":"Int32"}
        ,"value": 4096
    }
    ,{
         "name": "KF_ALTDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 8192
    }
    ,{
         "name": "KF_REPEAT"
        ,"type": {"kind":"Int32"}
        ,"value": 16384
    }
    ,{
         "name": "KF_UP"
        ,"type": {"kind":"Int32"}
        ,"value": 32768
    }
    ,{
         "name": "VK_LBUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "VK_RBUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "VK_CANCEL"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "VK_MBUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "VK_XBUTTON1"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "VK_XBUTTON2"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "VK_BACK"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "VK_TAB"
        ,"type": {"kind":"Int32"}
        ,"value": 9
    }
    ,{
         "name": "VK_CLEAR"
        ,"type": {"kind":"Int32"}
        ,"value": 12
    }
    ,{
         "name": "VK_RETURN"
        ,"type": {"kind":"Int32"}
        ,"value": 13
    }
    ,{
         "name": "VK_SHIFT"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "VK_CONTROL"
        ,"type": {"kind":"Int32"}
        ,"value": 17
    }
    ,{
         "name": "VK_MENU"
        ,"type": {"kind":"Int32"}
        ,"value": 18
    }
    ,{
         "name": "VK_PAUSE"
        ,"type": {"kind":"Int32"}
        ,"value": 19
    }
    ,{
         "name": "VK_CAPITAL"
        ,"type": {"kind":"Int32"}
        ,"value": 20
    }
    ,{
         "name": "VK_KANA"
        ,"type": {"kind":"Int32"}
        ,"value": 21
    }
    ,{
         "name": "VK_HANGEUL"
        ,"type": {"kind":"Int32"}
        ,"value": 21
    }
    ,{
         "name": "VK_HANGUL"
        ,"type": {"kind":"Int32"}
        ,"value": 21
    }
    ,{
         "name": "VK_JUNJA"
        ,"type": {"kind":"Int32"}
        ,"value": 23
    }
    ,{
         "name": "VK_FINAL"
        ,"type": {"kind":"Int32"}
        ,"value": 24
    }
    ,{
         "name": "VK_HANJA"
        ,"type": {"kind":"Int32"}
        ,"value": 25
    }
    ,{
         "name": "VK_KANJI"
        ,"type": {"kind":"Int32"}
        ,"value": 25
    }
    ,{
         "name": "VK_ESCAPE"
        ,"type": {"kind":"Int32"}
        ,"value": 27
    }
    ,{
         "name": "VK_CONVERT"
        ,"type": {"kind":"Int32"}
        ,"value": 28
    }
    ,{
         "name": "VK_NONCONVERT"
        ,"type": {"kind":"Int32"}
        ,"value": 29
    }
    ,{
         "name": "VK_ACCEPT"
        ,"type": {"kind":"Int32"}
        ,"value": 30
    }
    ,{
         "name": "VK_MODECHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 31
    }
    ,{
         "name": "VK_SPACE"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "VK_PRIOR"
        ,"type": {"kind":"Int32"}
        ,"value": 33
    }
    ,{
         "name": "VK_NEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 34
    }
    ,{
         "name": "VK_END"
        ,"type": {"kind":"Int32"}
        ,"value": 35
    }
    ,{
         "name": "VK_HOME"
        ,"type": {"kind":"Int32"}
        ,"value": 36
    }
    ,{
         "name": "VK_LEFT"
        ,"type": {"kind":"Int32"}
        ,"value": 37
    }
    ,{
         "name": "VK_UP"
        ,"type": {"kind":"Int32"}
        ,"value": 38
    }
    ,{
         "name": "VK_RIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 39
    }
    ,{
         "name": "VK_DOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 40
    }
    ,{
         "name": "VK_SELECT"
        ,"type": {"kind":"Int32"}
        ,"value": 41
    }
    ,{
         "name": "VK_PRINT"
        ,"type": {"kind":"Int32"}
        ,"value": 42
    }
    ,{
         "name": "VK_EXECUTE"
        ,"type": {"kind":"Int32"}
        ,"value": 43
    }
    ,{
         "name": "VK_SNAPSHOT"
        ,"type": {"kind":"Int32"}
        ,"value": 44
    }
    ,{
         "name": "VK_INSERT"
        ,"type": {"kind":"Int32"}
        ,"value": 45
    }
    ,{
         "name": "VK_DELETE"
        ,"type": {"kind":"Int32"}
        ,"value": 46
    }
    ,{
         "name": "VK_HELP"
        ,"type": {"kind":"Int32"}
        ,"value": 47
    }
    ,{
         "name": "VK_LWIN"
        ,"type": {"kind":"Int32"}
        ,"value": 91
    }
    ,{
         "name": "VK_RWIN"
        ,"type": {"kind":"Int32"}
        ,"value": 92
    }
    ,{
         "name": "VK_APPS"
        ,"type": {"kind":"Int32"}
        ,"value": 93
    }
    ,{
         "name": "VK_SLEEP"
        ,"type": {"kind":"Int32"}
        ,"value": 95
    }
    ,{
         "name": "VK_NUMPAD0"
        ,"type": {"kind":"Int32"}
        ,"value": 96
    }
    ,{
         "name": "VK_NUMPAD1"
        ,"type": {"kind":"Int32"}
        ,"value": 97
    }
    ,{
         "name": "VK_NUMPAD2"
        ,"type": {"kind":"Int32"}
        ,"value": 98
    }
    ,{
         "name": "VK_NUMPAD3"
        ,"type": {"kind":"Int32"}
        ,"value": 99
    }
    ,{
         "name": "VK_NUMPAD4"
        ,"type": {"kind":"Int32"}
        ,"value": 100
    }
    ,{
         "name": "VK_NUMPAD5"
        ,"type": {"kind":"Int32"}
        ,"value": 101
    }
    ,{
         "name": "VK_NUMPAD6"
        ,"type": {"kind":"Int32"}
        ,"value": 102
    }
    ,{
         "name": "VK_NUMPAD7"
        ,"type": {"kind":"Int32"}
        ,"value": 103
    }
    ,{
         "name": "VK_NUMPAD8"
        ,"type": {"kind":"Int32"}
        ,"value": 104
    }
    ,{
         "name": "VK_NUMPAD9"
        ,"type": {"kind":"Int32"}
        ,"value": 105
    }
    ,{
         "name": "VK_MULTIPLY"
        ,"type": {"kind":"Int32"}
        ,"value": 106
    }
    ,{
         "name": "VK_ADD"
        ,"type": {"kind":"Int32"}
        ,"value": 107
    }
    ,{
         "name": "VK_SEPARATOR"
        ,"type": {"kind":"Int32"}
        ,"value": 108
    }
    ,{
         "name": "VK_SUBTRACT"
        ,"type": {"kind":"Int32"}
        ,"value": 109
    }
    ,{
         "name": "VK_DECIMAL"
        ,"type": {"kind":"Int32"}
        ,"value": 110
    }
    ,{
         "name": "VK_DIVIDE"
        ,"type": {"kind":"Int32"}
        ,"value": 111
    }
    ,{
         "name": "VK_F1"
        ,"type": {"kind":"Int32"}
        ,"value": 112
    }
    ,{
         "name": "VK_F2"
        ,"type": {"kind":"Int32"}
        ,"value": 113
    }
    ,{
         "name": "VK_F3"
        ,"type": {"kind":"Int32"}
        ,"value": 114
    }
    ,{
         "name": "VK_F4"
        ,"type": {"kind":"Int32"}
        ,"value": 115
    }
    ,{
         "name": "VK_F5"
        ,"type": {"kind":"Int32"}
        ,"value": 116
    }
    ,{
         "name": "VK_F6"
        ,"type": {"kind":"Int32"}
        ,"value": 117
    }
    ,{
         "name": "VK_F7"
        ,"type": {"kind":"Int32"}
        ,"value": 118
    }
    ,{
         "name": "VK_F8"
        ,"type": {"kind":"Int32"}
        ,"value": 119
    }
    ,{
         "name": "VK_F9"
        ,"type": {"kind":"Int32"}
        ,"value": 120
    }
    ,{
         "name": "VK_F10"
        ,"type": {"kind":"Int32"}
        ,"value": 121
    }
    ,{
         "name": "VK_F11"
        ,"type": {"kind":"Int32"}
        ,"value": 122
    }
    ,{
         "name": "VK_F12"
        ,"type": {"kind":"Int32"}
        ,"value": 123
    }
    ,{
         "name": "VK_F13"
        ,"type": {"kind":"Int32"}
        ,"value": 124
    }
    ,{
         "name": "VK_F14"
        ,"type": {"kind":"Int32"}
        ,"value": 125
    }
    ,{
         "name": "VK_F15"
        ,"type": {"kind":"Int32"}
        ,"value": 126
    }
    ,{
         "name": "VK_F16"
        ,"type": {"kind":"Int32"}
        ,"value": 127
    }
    ,{
         "name": "VK_F17"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "VK_F18"
        ,"type": {"kind":"Int32"}
        ,"value": 129
    }
    ,{
         "name": "VK_F19"
        ,"type": {"kind":"Int32"}
        ,"value": 130
    }
    ,{
         "name": "VK_F20"
        ,"type": {"kind":"Int32"}
        ,"value": 131
    }
    ,{
         "name": "VK_F21"
        ,"type": {"kind":"Int32"}
        ,"value": 132
    }
    ,{
         "name": "VK_F22"
        ,"type": {"kind":"Int32"}
        ,"value": 133
    }
    ,{
         "name": "VK_F23"
        ,"type": {"kind":"Int32"}
        ,"value": 134
    }
    ,{
         "name": "VK_F24"
        ,"type": {"kind":"Int32"}
        ,"value": 135
    }
    ,{
         "name": "VK_NAVIGATION_VIEW"
        ,"type": {"kind":"Int32"}
        ,"value": 136
    }
    ,{
         "name": "VK_NAVIGATION_MENU"
        ,"type": {"kind":"Int32"}
        ,"value": 137
    }
    ,{
         "name": "VK_NAVIGATION_UP"
        ,"type": {"kind":"Int32"}
        ,"value": 138
    }
    ,{
         "name": "VK_NAVIGATION_DOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 139
    }
    ,{
         "name": "VK_NAVIGATION_LEFT"
        ,"type": {"kind":"Int32"}
        ,"value": 140
    }
    ,{
         "name": "VK_NAVIGATION_RIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 141
    }
    ,{
         "name": "VK_NAVIGATION_ACCEPT"
        ,"type": {"kind":"Int32"}
        ,"value": 142
    }
    ,{
         "name": "VK_NAVIGATION_CANCEL"
        ,"type": {"kind":"Int32"}
        ,"value": 143
    }
    ,{
         "name": "VK_NUMLOCK"
        ,"type": {"kind":"Int32"}
        ,"value": 144
    }
    ,{
         "name": "VK_SCROLL"
        ,"type": {"kind":"Int32"}
        ,"value": 145
    }
    ,{
         "name": "VK_OEM_NEC_EQUAL"
        ,"type": {"kind":"Int32"}
        ,"value": 146
    }
    ,{
         "name": "VK_OEM_FJ_JISHO"
        ,"type": {"kind":"Int32"}
        ,"value": 146
    }
    ,{
         "name": "VK_OEM_FJ_MASSHOU"
        ,"type": {"kind":"Int32"}
        ,"value": 147
    }
    ,{
         "name": "VK_OEM_FJ_TOUROKU"
        ,"type": {"kind":"Int32"}
        ,"value": 148
    }
    ,{
         "name": "VK_OEM_FJ_LOYA"
        ,"type": {"kind":"Int32"}
        ,"value": 149
    }
    ,{
         "name": "VK_OEM_FJ_ROYA"
        ,"type": {"kind":"Int32"}
        ,"value": 150
    }
    ,{
         "name": "VK_LSHIFT"
        ,"type": {"kind":"Int32"}
        ,"value": 160
    }
    ,{
         "name": "VK_RSHIFT"
        ,"type": {"kind":"Int32"}
        ,"value": 161
    }
    ,{
         "name": "VK_LCONTROL"
        ,"type": {"kind":"Int32"}
        ,"value": 162
    }
    ,{
         "name": "VK_RCONTROL"
        ,"type": {"kind":"Int32"}
        ,"value": 163
    }
    ,{
         "name": "VK_LMENU"
        ,"type": {"kind":"Int32"}
        ,"value": 164
    }
    ,{
         "name": "VK_RMENU"
        ,"type": {"kind":"Int32"}
        ,"value": 165
    }
    ,{
         "name": "VK_BROWSER_BACK"
        ,"type": {"kind":"Int32"}
        ,"value": 166
    }
    ,{
         "name": "VK_BROWSER_FORWARD"
        ,"type": {"kind":"Int32"}
        ,"value": 167
    }
    ,{
         "name": "VK_BROWSER_REFRESH"
        ,"type": {"kind":"Int32"}
        ,"value": 168
    }
    ,{
         "name": "VK_BROWSER_STOP"
        ,"type": {"kind":"Int32"}
        ,"value": 169
    }
    ,{
         "name": "VK_BROWSER_SEARCH"
        ,"type": {"kind":"Int32"}
        ,"value": 170
    }
    ,{
         "name": "VK_BROWSER_FAVORITES"
        ,"type": {"kind":"Int32"}
        ,"value": 171
    }
    ,{
         "name": "VK_BROWSER_HOME"
        ,"type": {"kind":"Int32"}
        ,"value": 172
    }
    ,{
         "name": "VK_VOLUME_MUTE"
        ,"type": {"kind":"Int32"}
        ,"value": 173
    }
    ,{
         "name": "VK_VOLUME_DOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 174
    }
    ,{
         "name": "VK_VOLUME_UP"
        ,"type": {"kind":"Int32"}
        ,"value": 175
    }
    ,{
         "name": "VK_MEDIA_NEXT_TRACK"
        ,"type": {"kind":"Int32"}
        ,"value": 176
    }
    ,{
         "name": "VK_MEDIA_PREV_TRACK"
        ,"type": {"kind":"Int32"}
        ,"value": 177
    }
    ,{
         "name": "VK_MEDIA_STOP"
        ,"type": {"kind":"Int32"}
        ,"value": 178
    }
    ,{
         "name": "VK_MEDIA_PLAY_PAUSE"
        ,"type": {"kind":"Int32"}
        ,"value": 179
    }
    ,{
         "name": "VK_LAUNCH_MAIL"
        ,"type": {"kind":"Int32"}
        ,"value": 180
    }
    ,{
         "name": "VK_LAUNCH_MEDIA_SELECT"
        ,"type": {"kind":"Int32"}
        ,"value": 181
    }
    ,{
         "name": "VK_LAUNCH_APP1"
        ,"type": {"kind":"Int32"}
        ,"value": 182
    }
    ,{
         "name": "VK_LAUNCH_APP2"
        ,"type": {"kind":"Int32"}
        ,"value": 183
    }
    ,{
         "name": "VK_OEM_1"
        ,"type": {"kind":"Int32"}
        ,"value": 186
    }
    ,{
         "name": "VK_OEM_PLUS"
        ,"type": {"kind":"Int32"}
        ,"value": 187
    }
    ,{
         "name": "VK_OEM_COMMA"
        ,"type": {"kind":"Int32"}
        ,"value": 188
    }
    ,{
         "name": "VK_OEM_MINUS"
        ,"type": {"kind":"Int32"}
        ,"value": 189
    }
    ,{
         "name": "VK_OEM_PERIOD"
        ,"type": {"kind":"Int32"}
        ,"value": 190
    }
    ,{
         "name": "VK_OEM_2"
        ,"type": {"kind":"Int32"}
        ,"value": 191
    }
    ,{
         "name": "VK_OEM_3"
        ,"type": {"kind":"Int32"}
        ,"value": 192
    }
    ,{
         "name": "VK_GAMEPAD_A"
        ,"type": {"kind":"Int32"}
        ,"value": 195
    }
    ,{
         "name": "VK_GAMEPAD_B"
        ,"type": {"kind":"Int32"}
        ,"value": 196
    }
    ,{
         "name": "VK_GAMEPAD_X"
        ,"type": {"kind":"Int32"}
        ,"value": 197
    }
    ,{
         "name": "VK_GAMEPAD_Y"
        ,"type": {"kind":"Int32"}
        ,"value": 198
    }
    ,{
         "name": "VK_GAMEPAD_RIGHT_SHOULDER"
        ,"type": {"kind":"Int32"}
        ,"value": 199
    }
    ,{
         "name": "VK_GAMEPAD_LEFT_SHOULDER"
        ,"type": {"kind":"Int32"}
        ,"value": 200
    }
    ,{
         "name": "VK_GAMEPAD_LEFT_TRIGGER"
        ,"type": {"kind":"Int32"}
        ,"value": 201
    }
    ,{
         "name": "VK_GAMEPAD_RIGHT_TRIGGER"
        ,"type": {"kind":"Int32"}
        ,"value": 202
    }
    ,{
         "name": "VK_GAMEPAD_DPAD_UP"
        ,"type": {"kind":"Int32"}
        ,"value": 203
    }
    ,{
         "name": "VK_GAMEPAD_DPAD_DOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 204
    }
    ,{
         "name": "VK_GAMEPAD_DPAD_LEFT"
        ,"type": {"kind":"Int32"}
        ,"value": 205
    }
    ,{
         "name": "VK_GAMEPAD_DPAD_RIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 206
    }
    ,{
         "name": "VK_GAMEPAD_MENU"
        ,"type": {"kind":"Int32"}
        ,"value": 207
    }
    ,{
         "name": "VK_GAMEPAD_VIEW"
        ,"type": {"kind":"Int32"}
        ,"value": 208
    }
    ,{
         "name": "VK_GAMEPAD_LEFT_THUMBSTICK_BUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 209
    }
    ,{
         "name": "VK_GAMEPAD_RIGHT_THUMBSTICK_BUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 210
    }
    ,{
         "name": "VK_GAMEPAD_LEFT_THUMBSTICK_UP"
        ,"type": {"kind":"Int32"}
        ,"value": 211
    }
    ,{
         "name": "VK_GAMEPAD_LEFT_THUMBSTICK_DOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 212
    }
    ,{
         "name": "VK_GAMEPAD_LEFT_THUMBSTICK_RIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 213
    }
    ,{
         "name": "VK_GAMEPAD_LEFT_THUMBSTICK_LEFT"
        ,"type": {"kind":"Int32"}
        ,"value": 214
    }
    ,{
         "name": "VK_GAMEPAD_RIGHT_THUMBSTICK_UP"
        ,"type": {"kind":"Int32"}
        ,"value": 215
    }
    ,{
         "name": "VK_GAMEPAD_RIGHT_THUMBSTICK_DOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 216
    }
    ,{
         "name": "VK_GAMEPAD_RIGHT_THUMBSTICK_RIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 217
    }
    ,{
         "name": "VK_GAMEPAD_RIGHT_THUMBSTICK_LEFT"
        ,"type": {"kind":"Int32"}
        ,"value": 218
    }
    ,{
         "name": "VK_OEM_4"
        ,"type": {"kind":"Int32"}
        ,"value": 219
    }
    ,{
         "name": "VK_OEM_5"
        ,"type": {"kind":"Int32"}
        ,"value": 220
    }
    ,{
         "name": "VK_OEM_6"
        ,"type": {"kind":"Int32"}
        ,"value": 221
    }
    ,{
         "name": "VK_OEM_7"
        ,"type": {"kind":"Int32"}
        ,"value": 222
    }
    ,{
         "name": "VK_OEM_8"
        ,"type": {"kind":"Int32"}
        ,"value": 223
    }
    ,{
         "name": "VK_OEM_AX"
        ,"type": {"kind":"Int32"}
        ,"value": 225
    }
    ,{
         "name": "VK_OEM_102"
        ,"type": {"kind":"Int32"}
        ,"value": 226
    }
    ,{
         "name": "VK_ICO_HELP"
        ,"type": {"kind":"Int32"}
        ,"value": 227
    }
    ,{
         "name": "VK_ICO_00"
        ,"type": {"kind":"Int32"}
        ,"value": 228
    }
    ,{
         "name": "VK_PROCESSKEY"
        ,"type": {"kind":"Int32"}
        ,"value": 229
    }
    ,{
         "name": "VK_ICO_CLEAR"
        ,"type": {"kind":"Int32"}
        ,"value": 230
    }
    ,{
         "name": "VK_PACKET"
        ,"type": {"kind":"Int32"}
        ,"value": 231
    }
    ,{
         "name": "VK_OEM_RESET"
        ,"type": {"kind":"Int32"}
        ,"value": 233
    }
    ,{
         "name": "VK_OEM_JUMP"
        ,"type": {"kind":"Int32"}
        ,"value": 234
    }
    ,{
         "name": "VK_OEM_PA1"
        ,"type": {"kind":"Int32"}
        ,"value": 235
    }
    ,{
         "name": "VK_OEM_PA2"
        ,"type": {"kind":"Int32"}
        ,"value": 236
    }
    ,{
         "name": "VK_OEM_PA3"
        ,"type": {"kind":"Int32"}
        ,"value": 237
    }
    ,{
         "name": "VK_OEM_WSCTRL"
        ,"type": {"kind":"Int32"}
        ,"value": 238
    }
    ,{
         "name": "VK_OEM_CUSEL"
        ,"type": {"kind":"Int32"}
        ,"value": 239
    }
    ,{
         "name": "VK_OEM_ATTN"
        ,"type": {"kind":"Int32"}
        ,"value": 240
    }
    ,{
         "name": "VK_OEM_FINISH"
        ,"type": {"kind":"Int32"}
        ,"value": 241
    }
    ,{
         "name": "VK_OEM_COPY"
        ,"type": {"kind":"Int32"}
        ,"value": 242
    }
    ,{
         "name": "VK_OEM_AUTO"
        ,"type": {"kind":"Int32"}
        ,"value": 243
    }
    ,{
         "name": "VK_OEM_ENLW"
        ,"type": {"kind":"Int32"}
        ,"value": 244
    }
    ,{
         "name": "VK_OEM_BACKTAB"
        ,"type": {"kind":"Int32"}
        ,"value": 245
    }
    ,{
         "name": "VK_ATTN"
        ,"type": {"kind":"Int32"}
        ,"value": 246
    }
    ,{
         "name": "VK_CRSEL"
        ,"type": {"kind":"Int32"}
        ,"value": 247
    }
    ,{
         "name": "VK_EXSEL"
        ,"type": {"kind":"Int32"}
        ,"value": 248
    }
    ,{
         "name": "VK_EREOF"
        ,"type": {"kind":"Int32"}
        ,"value": 249
    }
    ,{
         "name": "VK_PLAY"
        ,"type": {"kind":"Int32"}
        ,"value": 250
    }
    ,{
         "name": "VK_ZOOM"
        ,"type": {"kind":"Int32"}
        ,"value": 251
    }
    ,{
         "name": "VK_NONAME"
        ,"type": {"kind":"Int32"}
        ,"value": 252
    }
    ,{
         "name": "VK_PA1"
        ,"type": {"kind":"Int32"}
        ,"value": 253
    }
    ,{
         "name": "VK_OEM_CLEAR"
        ,"type": {"kind":"Int32"}
        ,"value": 254
    }
    ,{
         "name": "WH_MIN"
        ,"type": {"kind":"Int32"}
        ,"value": -1
    }
    ,{
         "name": "WH_MSGFILTER"
        ,"type": {"kind":"Int32"}
        ,"value": -1
    }
    ,{
         "name": "WH_JOURNALRECORD"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "WH_JOURNALPLAYBACK"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "WH_KEYBOARD"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "WH_GETMESSAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "WH_CALLWNDPROC"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "WH_CBT"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "WH_SYSMSGFILTER"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "WH_MOUSE"
        ,"type": {"kind":"Int32"}
        ,"value": 7
    }
    ,{
         "name": "WH_HARDWARE"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "WH_DEBUG"
        ,"type": {"kind":"Int32"}
        ,"value": 9
    }
    ,{
         "name": "WH_SHELL"
        ,"type": {"kind":"Int32"}
        ,"value": 10
    }
    ,{
         "name": "WH_FOREGROUNDIDLE"
        ,"type": {"kind":"Int32"}
        ,"value": 11
    }
    ,{
         "name": "WH_CALLWNDPROCRET"
        ,"type": {"kind":"Int32"}
        ,"value": 12
    }
    ,{
         "name": "WH_KEYBOARD_LL"
        ,"type": {"kind":"Int32"}
        ,"value": 13
    }
    ,{
         "name": "WH_MOUSE_LL"
        ,"type": {"kind":"Int32"}
        ,"value": 14
    }
    ,{
         "name": "WH_MAX"
        ,"type": {"kind":"Int32"}
        ,"value": 14
    }
    ,{
         "name": "WH_MINHOOK"
        ,"type": {"kind":"Int32"}
        ,"value": -1
    }
    ,{
         "name": "WH_MAXHOOK"
        ,"type": {"kind":"Int32"}
        ,"value": 14
    }
    ,{
         "name": "HC_ACTION"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "HC_GETNEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "HC_SKIP"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "HC_NOREMOVE"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "HC_NOREM"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "HC_SYSMODALON"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "HC_SYSMODALOFF"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "HCBT_MOVESIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "HCBT_MINMAX"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "HCBT_QS"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "HCBT_CREATEWND"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "HCBT_DESTROYWND"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "HCBT_ACTIVATE"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "HCBT_CLICKSKIPPED"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "HCBT_KEYSKIPPED"
        ,"type": {"kind":"Int32"}
        ,"value": 7
    }
    ,{
         "name": "HCBT_SYSCOMMAND"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "HCBT_SETFOCUS"
        ,"type": {"kind":"Int32"}
        ,"value": 9
    }
    ,{
         "name": "WTS_CONSOLE_CONNECT"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "WTS_CONSOLE_DISCONNECT"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "WTS_REMOTE_CONNECT"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "WTS_REMOTE_DISCONNECT"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "WTS_SESSION_LOGON"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "WTS_SESSION_LOGOFF"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "WTS_SESSION_LOCK"
        ,"type": {"kind":"Int32"}
        ,"value": 7
    }
    ,{
         "name": "WTS_SESSION_UNLOCK"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "WTS_SESSION_REMOTE_CONTROL"
        ,"type": {"kind":"Int32"}
        ,"value": 9
    }
    ,{
         "name": "WTS_SESSION_CREATE"
        ,"type": {"kind":"Int32"}
        ,"value": 10
    }
    ,{
         "name": "WTS_SESSION_TERMINATE"
        ,"type": {"kind":"Int32"}
        ,"value": 11
    }
    ,{
         "name": "MSGF_DIALOGBOX"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "MSGF_MESSAGEBOX"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "MSGF_MENU"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "MSGF_SCROLLBAR"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "MSGF_NEXTWINDOW"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "MSGF_MAX"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "MSGF_USER"
        ,"type": {"kind":"Int32"}
        ,"value": 4096
    }
    ,{
         "name": "HSHELL_WINDOWCREATED"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "HSHELL_WINDOWDESTROYED"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "HSHELL_ACTIVATESHELLWINDOW"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "HSHELL_WINDOWACTIVATED"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "HSHELL_GETMINRECT"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "HSHELL_REDRAW"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "HSHELL_TASKMAN"
        ,"type": {"kind":"Int32"}
        ,"value": 7
    }
    ,{
         "name": "HSHELL_LANGUAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "HSHELL_SYSMENU"
        ,"type": {"kind":"Int32"}
        ,"value": 9
    }
    ,{
         "name": "HSHELL_ENDTASK"
        ,"type": {"kind":"Int32"}
        ,"value": 10
    }
    ,{
         "name": "HSHELL_ACCESSIBILITYSTATE"
        ,"type": {"kind":"Int32"}
        ,"value": 11
    }
    ,{
         "name": "HSHELL_APPCOMMAND"
        ,"type": {"kind":"Int32"}
        ,"value": 12
    }
    ,{
         "name": "HSHELL_WINDOWREPLACED"
        ,"type": {"kind":"Int32"}
        ,"value": 13
    }
    ,{
         "name": "HSHELL_WINDOWREPLACING"
        ,"type": {"kind":"Int32"}
        ,"value": 14
    }
    ,{
         "name": "HSHELL_MONITORCHANGED"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "HSHELL_HIGHBIT"
        ,"type": {"kind":"Int32"}
        ,"value": 32768
    }
    ,{
         "name": "HSHELL_FLASH"
        ,"type": {"kind":"Int32"}
        ,"value": 32774
    }
    ,{
         "name": "HSHELL_RUDEAPPACTIVATED"
        ,"type": {"kind":"Int32"}
        ,"value": 32772
    }
    ,{
         "name": "APPCOMMAND_BROWSER_BACKWARD"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "APPCOMMAND_BROWSER_FORWARD"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "APPCOMMAND_BROWSER_REFRESH"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "APPCOMMAND_BROWSER_STOP"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "APPCOMMAND_BROWSER_SEARCH"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "APPCOMMAND_BROWSER_FAVORITES"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "APPCOMMAND_BROWSER_HOME"
        ,"type": {"kind":"Int32"}
        ,"value": 7
    }
    ,{
         "name": "APPCOMMAND_VOLUME_MUTE"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "APPCOMMAND_VOLUME_DOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 9
    }
    ,{
         "name": "APPCOMMAND_VOLUME_UP"
        ,"type": {"kind":"Int32"}
        ,"value": 10
    }
    ,{
         "name": "APPCOMMAND_MEDIA_NEXTTRACK"
        ,"type": {"kind":"Int32"}
        ,"value": 11
    }
    ,{
         "name": "APPCOMMAND_MEDIA_PREVIOUSTRACK"
        ,"type": {"kind":"Int32"}
        ,"value": 12
    }
    ,{
         "name": "APPCOMMAND_MEDIA_STOP"
        ,"type": {"kind":"Int32"}
        ,"value": 13
    }
    ,{
         "name": "APPCOMMAND_MEDIA_PLAY_PAUSE"
        ,"type": {"kind":"Int32"}
        ,"value": 14
    }
    ,{
         "name": "APPCOMMAND_LAUNCH_MAIL"
        ,"type": {"kind":"Int32"}
        ,"value": 15
    }
    ,{
         "name": "APPCOMMAND_LAUNCH_MEDIA_SELECT"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "APPCOMMAND_LAUNCH_APP1"
        ,"type": {"kind":"Int32"}
        ,"value": 17
    }
    ,{
         "name": "APPCOMMAND_LAUNCH_APP2"
        ,"type": {"kind":"Int32"}
        ,"value": 18
    }
    ,{
         "name": "APPCOMMAND_BASS_DOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 19
    }
    ,{
         "name": "APPCOMMAND_BASS_BOOST"
        ,"type": {"kind":"Int32"}
        ,"value": 20
    }
    ,{
         "name": "APPCOMMAND_BASS_UP"
        ,"type": {"kind":"Int32"}
        ,"value": 21
    }
    ,{
         "name": "APPCOMMAND_TREBLE_DOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 22
    }
    ,{
         "name": "APPCOMMAND_TREBLE_UP"
        ,"type": {"kind":"Int32"}
        ,"value": 23
    }
    ,{
         "name": "APPCOMMAND_MICROPHONE_VOLUME_MUTE"
        ,"type": {"kind":"Int32"}
        ,"value": 24
    }
    ,{
         "name": "APPCOMMAND_MICROPHONE_VOLUME_DOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 25
    }
    ,{
         "name": "APPCOMMAND_MICROPHONE_VOLUME_UP"
        ,"type": {"kind":"Int32"}
        ,"value": 26
    }
    ,{
         "name": "APPCOMMAND_HELP"
        ,"type": {"kind":"Int32"}
        ,"value": 27
    }
    ,{
         "name": "APPCOMMAND_FIND"
        ,"type": {"kind":"Int32"}
        ,"value": 28
    }
    ,{
         "name": "APPCOMMAND_NEW"
        ,"type": {"kind":"Int32"}
        ,"value": 29
    }
    ,{
         "name": "APPCOMMAND_OPEN"
        ,"type": {"kind":"Int32"}
        ,"value": 30
    }
    ,{
         "name": "APPCOMMAND_CLOSE"
        ,"type": {"kind":"Int32"}
        ,"value": 31
    }
    ,{
         "name": "APPCOMMAND_SAVE"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "APPCOMMAND_PRINT"
        ,"type": {"kind":"Int32"}
        ,"value": 33
    }
    ,{
         "name": "APPCOMMAND_UNDO"
        ,"type": {"kind":"Int32"}
        ,"value": 34
    }
    ,{
         "name": "APPCOMMAND_REDO"
        ,"type": {"kind":"Int32"}
        ,"value": 35
    }
    ,{
         "name": "APPCOMMAND_COPY"
        ,"type": {"kind":"Int32"}
        ,"value": 36
    }
    ,{
         "name": "APPCOMMAND_CUT"
        ,"type": {"kind":"Int32"}
        ,"value": 37
    }
    ,{
         "name": "APPCOMMAND_PASTE"
        ,"type": {"kind":"Int32"}
        ,"value": 38
    }
    ,{
         "name": "APPCOMMAND_REPLY_TO_MAIL"
        ,"type": {"kind":"Int32"}
        ,"value": 39
    }
    ,{
         "name": "APPCOMMAND_FORWARD_MAIL"
        ,"type": {"kind":"Int32"}
        ,"value": 40
    }
    ,{
         "name": "APPCOMMAND_SEND_MAIL"
        ,"type": {"kind":"Int32"}
        ,"value": 41
    }
    ,{
         "name": "APPCOMMAND_SPELL_CHECK"
        ,"type": {"kind":"Int32"}
        ,"value": 42
    }
    ,{
         "name": "APPCOMMAND_DICTATE_OR_COMMAND_CONTROL_TOGGLE"
        ,"type": {"kind":"Int32"}
        ,"value": 43
    }
    ,{
         "name": "APPCOMMAND_MIC_ON_OFF_TOGGLE"
        ,"type": {"kind":"Int32"}
        ,"value": 44
    }
    ,{
         "name": "APPCOMMAND_CORRECTION_LIST"
        ,"type": {"kind":"Int32"}
        ,"value": 45
    }
    ,{
         "name": "APPCOMMAND_MEDIA_PLAY"
        ,"type": {"kind":"Int32"}
        ,"value": 46
    }
    ,{
         "name": "APPCOMMAND_MEDIA_PAUSE"
        ,"type": {"kind":"Int32"}
        ,"value": 47
    }
    ,{
         "name": "APPCOMMAND_MEDIA_RECORD"
        ,"type": {"kind":"Int32"}
        ,"value": 48
    }
    ,{
         "name": "APPCOMMAND_MEDIA_FAST_FORWARD"
        ,"type": {"kind":"Int32"}
        ,"value": 49
    }
    ,{
         "name": "APPCOMMAND_MEDIA_REWIND"
        ,"type": {"kind":"Int32"}
        ,"value": 50
    }
    ,{
         "name": "APPCOMMAND_MEDIA_CHANNEL_UP"
        ,"type": {"kind":"Int32"}
        ,"value": 51
    }
    ,{
         "name": "APPCOMMAND_MEDIA_CHANNEL_DOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 52
    }
    ,{
         "name": "APPCOMMAND_DELETE"
        ,"type": {"kind":"Int32"}
        ,"value": 53
    }
    ,{
         "name": "APPCOMMAND_DWM_FLIP3D"
        ,"type": {"kind":"Int32"}
        ,"value": 54
    }
    ,{
         "name": "FAPPCOMMAND_MOUSE"
        ,"type": {"kind":"Int32"}
        ,"value": 32768
    }
    ,{
         "name": "FAPPCOMMAND_KEY"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "FAPPCOMMAND_OEM"
        ,"type": {"kind":"Int32"}
        ,"value": 4096
    }
    ,{
         "name": "FAPPCOMMAND_MASK"
        ,"type": {"kind":"Int32"}
        ,"value": 61440
    }
    ,{
         "name": "LLKHF_EXTENDED"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "LLKHF_INJECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "LLKHF_ALTDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "LLKHF_UP"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "LLKHF_LOWER_IL_INJECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "LLMHF_INJECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "LLMHF_LOWER_IL_INJECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "HKL_PREV"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "HKL_NEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "KLF_ACTIVATE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "KLF_SUBSTITUTE_OK"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "KLF_REORDER"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "KLF_REPLACELANG"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "KLF_NOTELLSHELL"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "KLF_SETFORPROCESS"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "KLF_SHIFTLOCK"
        ,"type": {"kind":"Int32"}
        ,"value": 65536
    }
    ,{
         "name": "KLF_RESET"
        ,"type": {"kind":"Int32"}
        ,"value": 1073741824
    }
    ,{
         "name": "INPUTLANGCHANGE_SYSCHARSET"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "INPUTLANGCHANGE_FORWARD"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "INPUTLANGCHANGE_BACKWARD"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "KL_NAMELENGTH"
        ,"type": {"kind":"Int32"}
        ,"value": 9
    }
    ,{
         "name": "GMMP_USE_DISPLAY_POINTS"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "GMMP_USE_HIGH_RESOLUTION_POINTS"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "DESKTOP_READOBJECTS"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "DESKTOP_CREATEWINDOW"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "DESKTOP_CREATEMENU"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "DESKTOP_HOOKCONTROL"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "DESKTOP_JOURNALRECORD"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "DESKTOP_JOURNALPLAYBACK"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "DESKTOP_ENUMERATE"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "DESKTOP_WRITEOBJECTS"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "DESKTOP_SWITCHDESKTOP"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "DF_ALLOWOTHERACCOUNTHOOK"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "WINSTA_ENUMDESKTOPS"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "WINSTA_READATTRIBUTES"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "WINSTA_ACCESSCLIPBOARD"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "WINSTA_CREATEDESKTOP"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "WINSTA_WRITEATTRIBUTES"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "WINSTA_ACCESSGLOBALATOMS"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "WINSTA_EXITWINDOWS"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "WINSTA_ENUMERATE"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "WINSTA_READSCREEN"
        ,"type": {"kind":"Int32"}
        ,"value": 512
    }
    ,{
         "name": "WINSTA_ALL_ACCESS"
        ,"type": {"kind":"Int32"}
        ,"value": 895
    }
    ,{
         "name": "CWF_CREATE_ONLY"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "WSF_VISIBLE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "UOI_FLAGS"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "UOI_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "UOI_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "UOI_USER_SID"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "UOI_HEAPSIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "UOI_IO"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "UOI_TIMERPROC_EXCEPTION_SUPPRESSION"
        ,"type": {"kind":"Int32"}
        ,"value": 7
    }
    ,{
         "name": "GWL_WNDPROC"
        ,"type": {"kind":"Int32"}
        ,"value": -4
    }
    ,{
         "name": "GWL_HINSTANCE"
        ,"type": {"kind":"Int32"}
        ,"value": -6
    }
    ,{
         "name": "GWL_HWNDPARENT"
        ,"type": {"kind":"Int32"}
        ,"value": -8
    }
    ,{
         "name": "GWL_STYLE"
        ,"type": {"kind":"Int32"}
        ,"value": -16
    }
    ,{
         "name": "GWL_EXSTYLE"
        ,"type": {"kind":"Int32"}
        ,"value": -20
    }
    ,{
         "name": "GWL_USERDATA"
        ,"type": {"kind":"Int32"}
        ,"value": -21
    }
    ,{
         "name": "GWL_ID"
        ,"type": {"kind":"Int32"}
        ,"value": -12
    }
    ,{
         "name": "GWLP_WNDPROC"
        ,"type": {"kind":"Int32"}
        ,"value": -4
    }
    ,{
         "name": "GWLP_HINSTANCE"
        ,"type": {"kind":"Int32"}
        ,"value": -6
    }
    ,{
         "name": "GWLP_HWNDPARENT"
        ,"type": {"kind":"Int32"}
        ,"value": -8
    }
    ,{
         "name": "GWLP_USERDATA"
        ,"type": {"kind":"Int32"}
        ,"value": -21
    }
    ,{
         "name": "GWLP_ID"
        ,"type": {"kind":"Int32"}
        ,"value": -12
    }
    ,{
         "name": "GCL_MENUNAME"
        ,"type": {"kind":"Int32"}
        ,"value": -8
    }
    ,{
         "name": "GCL_HBRBACKGROUND"
        ,"type": {"kind":"Int32"}
        ,"value": -10
    }
    ,{
         "name": "GCL_HCURSOR"
        ,"type": {"kind":"Int32"}
        ,"value": -12
    }
    ,{
         "name": "GCL_HICON"
        ,"type": {"kind":"Int32"}
        ,"value": -14
    }
    ,{
         "name": "GCL_HMODULE"
        ,"type": {"kind":"Int32"}
        ,"value": -16
    }
    ,{
         "name": "GCL_CBWNDEXTRA"
        ,"type": {"kind":"Int32"}
        ,"value": -18
    }
    ,{
         "name": "GCL_CBCLSEXTRA"
        ,"type": {"kind":"Int32"}
        ,"value": -20
    }
    ,{
         "name": "GCL_WNDPROC"
        ,"type": {"kind":"Int32"}
        ,"value": -24
    }
    ,{
         "name": "GCL_STYLE"
        ,"type": {"kind":"Int32"}
        ,"value": -26
    }
    ,{
         "name": "GCW_ATOM"
        ,"type": {"kind":"Int32"}
        ,"value": -32
    }
    ,{
         "name": "GCL_HICONSM"
        ,"type": {"kind":"Int32"}
        ,"value": -34
    }
    ,{
         "name": "GCLP_MENUNAME"
        ,"type": {"kind":"Int32"}
        ,"value": -8
    }
    ,{
         "name": "GCLP_HBRBACKGROUND"
        ,"type": {"kind":"Int32"}
        ,"value": -10
    }
    ,{
         "name": "GCLP_HCURSOR"
        ,"type": {"kind":"Int32"}
        ,"value": -12
    }
    ,{
         "name": "GCLP_HICON"
        ,"type": {"kind":"Int32"}
        ,"value": -14
    }
    ,{
         "name": "GCLP_HMODULE"
        ,"type": {"kind":"Int32"}
        ,"value": -16
    }
    ,{
         "name": "GCLP_WNDPROC"
        ,"type": {"kind":"Int32"}
        ,"value": -24
    }
    ,{
         "name": "GCLP_HICONSM"
        ,"type": {"kind":"Int32"}
        ,"value": -34
    }
    ,{
         "name": "WM_NULL"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "WM_CREATE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "WM_DESTROY"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "WM_MOVE"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "WM_SIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "WM_ACTIVATE"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "WA_INACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "WA_ACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "WA_CLICKACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "WM_SETFOCUS"
        ,"type": {"kind":"Int32"}
        ,"value": 7
    }
    ,{
         "name": "WM_KILLFOCUS"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "WM_ENABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 10
    }
    ,{
         "name": "WM_SETREDRAW"
        ,"type": {"kind":"Int32"}
        ,"value": 11
    }
    ,{
         "name": "WM_SETTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 12
    }
    ,{
         "name": "WM_GETTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 13
    }
    ,{
         "name": "WM_GETTEXTLENGTH"
        ,"type": {"kind":"Int32"}
        ,"value": 14
    }
    ,{
         "name": "WM_PAINT"
        ,"type": {"kind":"Int32"}
        ,"value": 15
    }
    ,{
         "name": "WM_CLOSE"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "WM_QUERYENDSESSION"
        ,"type": {"kind":"Int32"}
        ,"value": 17
    }
    ,{
         "name": "WM_QUERYOPEN"
        ,"type": {"kind":"Int32"}
        ,"value": 19
    }
    ,{
         "name": "WM_ENDSESSION"
        ,"type": {"kind":"Int32"}
        ,"value": 22
    }
    ,{
         "name": "WM_QUIT"
        ,"type": {"kind":"Int32"}
        ,"value": 18
    }
    ,{
         "name": "WM_ERASEBKGND"
        ,"type": {"kind":"Int32"}
        ,"value": 20
    }
    ,{
         "name": "WM_SYSCOLORCHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 21
    }
    ,{
         "name": "WM_SHOWWINDOW"
        ,"type": {"kind":"Int32"}
        ,"value": 24
    }
    ,{
         "name": "WM_WININICHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 26
    }
    ,{
         "name": "WM_SETTINGCHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 26
    }
    ,{
         "name": "WM_DEVMODECHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 27
    }
    ,{
         "name": "WM_ACTIVATEAPP"
        ,"type": {"kind":"Int32"}
        ,"value": 28
    }
    ,{
         "name": "WM_FONTCHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 29
    }
    ,{
         "name": "WM_TIMECHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 30
    }
    ,{
         "name": "WM_CANCELMODE"
        ,"type": {"kind":"Int32"}
        ,"value": 31
    }
    ,{
         "name": "WM_SETCURSOR"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "WM_MOUSEACTIVATE"
        ,"type": {"kind":"Int32"}
        ,"value": 33
    }
    ,{
         "name": "WM_CHILDACTIVATE"
        ,"type": {"kind":"Int32"}
        ,"value": 34
    }
    ,{
         "name": "WM_QUEUESYNC"
        ,"type": {"kind":"Int32"}
        ,"value": 35
    }
    ,{
         "name": "WM_GETMINMAXINFO"
        ,"type": {"kind":"Int32"}
        ,"value": 36
    }
    ,{
         "name": "WM_PAINTICON"
        ,"type": {"kind":"Int32"}
        ,"value": 38
    }
    ,{
         "name": "WM_ICONERASEBKGND"
        ,"type": {"kind":"Int32"}
        ,"value": 39
    }
    ,{
         "name": "WM_NEXTDLGCTL"
        ,"type": {"kind":"Int32"}
        ,"value": 40
    }
    ,{
         "name": "WM_SPOOLERSTATUS"
        ,"type": {"kind":"Int32"}
        ,"value": 42
    }
    ,{
         "name": "WM_DRAWITEM"
        ,"type": {"kind":"Int32"}
        ,"value": 43
    }
    ,{
         "name": "WM_MEASUREITEM"
        ,"type": {"kind":"Int32"}
        ,"value": 44
    }
    ,{
         "name": "WM_DELETEITEM"
        ,"type": {"kind":"Int32"}
        ,"value": 45
    }
    ,{
         "name": "WM_VKEYTOITEM"
        ,"type": {"kind":"Int32"}
        ,"value": 46
    }
    ,{
         "name": "WM_CHARTOITEM"
        ,"type": {"kind":"Int32"}
        ,"value": 47
    }
    ,{
         "name": "WM_SETFONT"
        ,"type": {"kind":"Int32"}
        ,"value": 48
    }
    ,{
         "name": "WM_GETFONT"
        ,"type": {"kind":"Int32"}
        ,"value": 49
    }
    ,{
         "name": "WM_SETHOTKEY"
        ,"type": {"kind":"Int32"}
        ,"value": 50
    }
    ,{
         "name": "WM_GETHOTKEY"
        ,"type": {"kind":"Int32"}
        ,"value": 51
    }
    ,{
         "name": "WM_QUERYDRAGICON"
        ,"type": {"kind":"Int32"}
        ,"value": 55
    }
    ,{
         "name": "WM_COMPAREITEM"
        ,"type": {"kind":"Int32"}
        ,"value": 57
    }
    ,{
         "name": "WM_GETOBJECT"
        ,"type": {"kind":"Int32"}
        ,"value": 61
    }
    ,{
         "name": "WM_COMPACTING"
        ,"type": {"kind":"Int32"}
        ,"value": 65
    }
    ,{
         "name": "WM_COMMNOTIFY"
        ,"type": {"kind":"Int32"}
        ,"value": 68
    }
    ,{
         "name": "WM_WINDOWPOSCHANGING"
        ,"type": {"kind":"Int32"}
        ,"value": 70
    }
    ,{
         "name": "WM_WINDOWPOSCHANGED"
        ,"type": {"kind":"Int32"}
        ,"value": 71
    }
    ,{
         "name": "WM_POWER"
        ,"type": {"kind":"Int32"}
        ,"value": 72
    }
    ,{
         "name": "PWR_OK"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "PWR_FAIL"
        ,"type": {"kind":"Int32"}
        ,"value": -1
    }
    ,{
         "name": "PWR_SUSPENDREQUEST"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "PWR_SUSPENDRESUME"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "PWR_CRITICALRESUME"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "WM_COPYDATA"
        ,"type": {"kind":"Int32"}
        ,"value": 74
    }
    ,{
         "name": "WM_CANCELJOURNAL"
        ,"type": {"kind":"Int32"}
        ,"value": 75
    }
    ,{
         "name": "WM_NOTIFY"
        ,"type": {"kind":"Int32"}
        ,"value": 78
    }
    ,{
         "name": "WM_INPUTLANGCHANGEREQUEST"
        ,"type": {"kind":"Int32"}
        ,"value": 80
    }
    ,{
         "name": "WM_INPUTLANGCHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 81
    }
    ,{
         "name": "WM_TCARD"
        ,"type": {"kind":"Int32"}
        ,"value": 82
    }
    ,{
         "name": "WM_HELP"
        ,"type": {"kind":"Int32"}
        ,"value": 83
    }
    ,{
         "name": "WM_USERCHANGED"
        ,"type": {"kind":"Int32"}
        ,"value": 84
    }
    ,{
         "name": "WM_NOTIFYFORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": 85
    }
    ,{
         "name": "NFR_ANSI"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "NFR_UNICODE"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "NF_QUERY"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "NF_REQUERY"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "WM_CONTEXTMENU"
        ,"type": {"kind":"Int32"}
        ,"value": 123
    }
    ,{
         "name": "WM_STYLECHANGING"
        ,"type": {"kind":"Int32"}
        ,"value": 124
    }
    ,{
         "name": "WM_STYLECHANGED"
        ,"type": {"kind":"Int32"}
        ,"value": 125
    }
    ,{
         "name": "WM_DISPLAYCHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 126
    }
    ,{
         "name": "WM_GETICON"
        ,"type": {"kind":"Int32"}
        ,"value": 127
    }
    ,{
         "name": "WM_SETICON"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "WM_NCCREATE"
        ,"type": {"kind":"Int32"}
        ,"value": 129
    }
    ,{
         "name": "WM_NCDESTROY"
        ,"type": {"kind":"Int32"}
        ,"value": 130
    }
    ,{
         "name": "WM_NCCALCSIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 131
    }
    ,{
         "name": "WM_NCHITTEST"
        ,"type": {"kind":"Int32"}
        ,"value": 132
    }
    ,{
         "name": "WM_NCPAINT"
        ,"type": {"kind":"Int32"}
        ,"value": 133
    }
    ,{
         "name": "WM_NCACTIVATE"
        ,"type": {"kind":"Int32"}
        ,"value": 134
    }
    ,{
         "name": "WM_GETDLGCODE"
        ,"type": {"kind":"Int32"}
        ,"value": 135
    }
    ,{
         "name": "WM_SYNCPAINT"
        ,"type": {"kind":"Int32"}
        ,"value": 136
    }
    ,{
         "name": "WM_NCMOUSEMOVE"
        ,"type": {"kind":"Int32"}
        ,"value": 160
    }
    ,{
         "name": "WM_NCLBUTTONDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 161
    }
    ,{
         "name": "WM_NCLBUTTONUP"
        ,"type": {"kind":"Int32"}
        ,"value": 162
    }
    ,{
         "name": "WM_NCLBUTTONDBLCLK"
        ,"type": {"kind":"Int32"}
        ,"value": 163
    }
    ,{
         "name": "WM_NCRBUTTONDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 164
    }
    ,{
         "name": "WM_NCRBUTTONUP"
        ,"type": {"kind":"Int32"}
        ,"value": 165
    }
    ,{
         "name": "WM_NCRBUTTONDBLCLK"
        ,"type": {"kind":"Int32"}
        ,"value": 166
    }
    ,{
         "name": "WM_NCMBUTTONDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 167
    }
    ,{
         "name": "WM_NCMBUTTONUP"
        ,"type": {"kind":"Int32"}
        ,"value": 168
    }
    ,{
         "name": "WM_NCMBUTTONDBLCLK"
        ,"type": {"kind":"Int32"}
        ,"value": 169
    }
    ,{
         "name": "WM_NCXBUTTONDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 171
    }
    ,{
         "name": "WM_NCXBUTTONUP"
        ,"type": {"kind":"Int32"}
        ,"value": 172
    }
    ,{
         "name": "WM_NCXBUTTONDBLCLK"
        ,"type": {"kind":"Int32"}
        ,"value": 173
    }
    ,{
         "name": "WM_INPUT_DEVICE_CHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 254
    }
    ,{
         "name": "WM_INPUT"
        ,"type": {"kind":"Int32"}
        ,"value": 255
    }
    ,{
         "name": "WM_KEYFIRST"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "WM_KEYDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "WM_KEYUP"
        ,"type": {"kind":"Int32"}
        ,"value": 257
    }
    ,{
         "name": "WM_CHAR"
        ,"type": {"kind":"Int32"}
        ,"value": 258
    }
    ,{
         "name": "WM_DEADCHAR"
        ,"type": {"kind":"Int32"}
        ,"value": 259
    }
    ,{
         "name": "WM_SYSKEYDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 260
    }
    ,{
         "name": "WM_SYSKEYUP"
        ,"type": {"kind":"Int32"}
        ,"value": 261
    }
    ,{
         "name": "WM_SYSCHAR"
        ,"type": {"kind":"Int32"}
        ,"value": 262
    }
    ,{
         "name": "WM_SYSDEADCHAR"
        ,"type": {"kind":"Int32"}
        ,"value": 263
    }
    ,{
         "name": "WM_UNICHAR"
        ,"type": {"kind":"Int32"}
        ,"value": 265
    }
    ,{
         "name": "WM_KEYLAST"
        ,"type": {"kind":"Int32"}
        ,"value": 265
    }
    ,{
         "name": "UNICODE_NOCHAR"
        ,"type": {"kind":"Int32"}
        ,"value": 65535
    }
    ,{
         "name": "WM_IME_STARTCOMPOSITION"
        ,"type": {"kind":"Int32"}
        ,"value": 269
    }
    ,{
         "name": "WM_IME_ENDCOMPOSITION"
        ,"type": {"kind":"Int32"}
        ,"value": 270
    }
    ,{
         "name": "WM_IME_COMPOSITION"
        ,"type": {"kind":"Int32"}
        ,"value": 271
    }
    ,{
         "name": "WM_IME_KEYLAST"
        ,"type": {"kind":"Int32"}
        ,"value": 271
    }
    ,{
         "name": "WM_INITDIALOG"
        ,"type": {"kind":"Int32"}
        ,"value": 272
    }
    ,{
         "name": "WM_COMMAND"
        ,"type": {"kind":"Int32"}
        ,"value": 273
    }
    ,{
         "name": "WM_SYSCOMMAND"
        ,"type": {"kind":"Int32"}
        ,"value": 274
    }
    ,{
         "name": "WM_TIMER"
        ,"type": {"kind":"Int32"}
        ,"value": 275
    }
    ,{
         "name": "WM_HSCROLL"
        ,"type": {"kind":"Int32"}
        ,"value": 276
    }
    ,{
         "name": "WM_VSCROLL"
        ,"type": {"kind":"Int32"}
        ,"value": 277
    }
    ,{
         "name": "WM_INITMENU"
        ,"type": {"kind":"Int32"}
        ,"value": 278
    }
    ,{
         "name": "WM_INITMENUPOPUP"
        ,"type": {"kind":"Int32"}
        ,"value": 279
    }
    ,{
         "name": "WM_GESTURE"
        ,"type": {"kind":"Int32"}
        ,"value": 281
    }
    ,{
         "name": "WM_GESTURENOTIFY"
        ,"type": {"kind":"Int32"}
        ,"value": 282
    }
    ,{
         "name": "WM_MENUSELECT"
        ,"type": {"kind":"Int32"}
        ,"value": 287
    }
    ,{
         "name": "WM_MENUCHAR"
        ,"type": {"kind":"Int32"}
        ,"value": 288
    }
    ,{
         "name": "WM_ENTERIDLE"
        ,"type": {"kind":"Int32"}
        ,"value": 289
    }
    ,{
         "name": "WM_MENURBUTTONUP"
        ,"type": {"kind":"Int32"}
        ,"value": 290
    }
    ,{
         "name": "WM_MENUDRAG"
        ,"type": {"kind":"Int32"}
        ,"value": 291
    }
    ,{
         "name": "WM_MENUGETOBJECT"
        ,"type": {"kind":"Int32"}
        ,"value": 292
    }
    ,{
         "name": "WM_UNINITMENUPOPUP"
        ,"type": {"kind":"Int32"}
        ,"value": 293
    }
    ,{
         "name": "WM_MENUCOMMAND"
        ,"type": {"kind":"Int32"}
        ,"value": 294
    }
    ,{
         "name": "WM_CHANGEUISTATE"
        ,"type": {"kind":"Int32"}
        ,"value": 295
    }
    ,{
         "name": "WM_UPDATEUISTATE"
        ,"type": {"kind":"Int32"}
        ,"value": 296
    }
    ,{
         "name": "WM_QUERYUISTATE"
        ,"type": {"kind":"Int32"}
        ,"value": 297
    }
    ,{
         "name": "UIS_SET"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "UIS_CLEAR"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "UIS_INITIALIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "UISF_HIDEFOCUS"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "UISF_HIDEACCEL"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "UISF_ACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "WM_CTLCOLORMSGBOX"
        ,"type": {"kind":"Int32"}
        ,"value": 306
    }
    ,{
         "name": "WM_CTLCOLOREDIT"
        ,"type": {"kind":"Int32"}
        ,"value": 307
    }
    ,{
         "name": "WM_CTLCOLORLISTBOX"
        ,"type": {"kind":"Int32"}
        ,"value": 308
    }
    ,{
         "name": "WM_CTLCOLORBTN"
        ,"type": {"kind":"Int32"}
        ,"value": 309
    }
    ,{
         "name": "WM_CTLCOLORDLG"
        ,"type": {"kind":"Int32"}
        ,"value": 310
    }
    ,{
         "name": "WM_CTLCOLORSCROLLBAR"
        ,"type": {"kind":"Int32"}
        ,"value": 311
    }
    ,{
         "name": "WM_CTLCOLORSTATIC"
        ,"type": {"kind":"Int32"}
        ,"value": 312
    }
    ,{
         "name": "MN_GETHMENU"
        ,"type": {"kind":"Int32"}
        ,"value": 481
    }
    ,{
         "name": "WM_MOUSEFIRST"
        ,"type": {"kind":"Int32"}
        ,"value": 512
    }
    ,{
         "name": "WM_MOUSEMOVE"
        ,"type": {"kind":"Int32"}
        ,"value": 512
    }
    ,{
         "name": "WM_LBUTTONDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 513
    }
    ,{
         "name": "WM_LBUTTONUP"
        ,"type": {"kind":"Int32"}
        ,"value": 514
    }
    ,{
         "name": "WM_LBUTTONDBLCLK"
        ,"type": {"kind":"Int32"}
        ,"value": 515
    }
    ,{
         "name": "WM_RBUTTONDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 516
    }
    ,{
         "name": "WM_RBUTTONUP"
        ,"type": {"kind":"Int32"}
        ,"value": 517
    }
    ,{
         "name": "WM_RBUTTONDBLCLK"
        ,"type": {"kind":"Int32"}
        ,"value": 518
    }
    ,{
         "name": "WM_MBUTTONDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 519
    }
    ,{
         "name": "WM_MBUTTONUP"
        ,"type": {"kind":"Int32"}
        ,"value": 520
    }
    ,{
         "name": "WM_MBUTTONDBLCLK"
        ,"type": {"kind":"Int32"}
        ,"value": 521
    }
    ,{
         "name": "WM_MOUSEWHEEL"
        ,"type": {"kind":"Int32"}
        ,"value": 522
    }
    ,{
         "name": "WM_XBUTTONDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 523
    }
    ,{
         "name": "WM_XBUTTONUP"
        ,"type": {"kind":"Int32"}
        ,"value": 524
    }
    ,{
         "name": "WM_XBUTTONDBLCLK"
        ,"type": {"kind":"Int32"}
        ,"value": 525
    }
    ,{
         "name": "WM_MOUSEHWHEEL"
        ,"type": {"kind":"Int32"}
        ,"value": 526
    }
    ,{
         "name": "WM_MOUSELAST"
        ,"type": {"kind":"Int32"}
        ,"value": 526
    }
    ,{
         "name": "WHEEL_DELTA"
        ,"type": {"kind":"Int32"}
        ,"value": 120
    }
    ,{
         "name": "WHEEL_PAGESCROLL"
        ,"type": {"kind":"UInt32"}
        ,"value": 4294967295
    }
    ,{
         "name": "XBUTTON1"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "XBUTTON2"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "WM_PARENTNOTIFY"
        ,"type": {"kind":"Int32"}
        ,"value": 528
    }
    ,{
         "name": "WM_ENTERMENULOOP"
        ,"type": {"kind":"Int32"}
        ,"value": 529
    }
    ,{
         "name": "WM_EXITMENULOOP"
        ,"type": {"kind":"Int32"}
        ,"value": 530
    }
    ,{
         "name": "WM_NEXTMENU"
        ,"type": {"kind":"Int32"}
        ,"value": 531
    }
    ,{
         "name": "WM_SIZING"
        ,"type": {"kind":"Int32"}
        ,"value": 532
    }
    ,{
         "name": "WM_CAPTURECHANGED"
        ,"type": {"kind":"Int32"}
        ,"value": 533
    }
    ,{
         "name": "WM_MOVING"
        ,"type": {"kind":"Int32"}
        ,"value": 534
    }
    ,{
         "name": "WM_POWERBROADCAST"
        ,"type": {"kind":"Int32"}
        ,"value": 536
    }
    ,{
         "name": "PBT_APMQUERYSUSPEND"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "PBT_APMQUERYSTANDBY"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "PBT_APMQUERYSUSPENDFAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "PBT_APMQUERYSTANDBYFAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "PBT_APMSUSPEND"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "PBT_APMSTANDBY"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "PBT_APMRESUMECRITICAL"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "PBT_APMRESUMESUSPEND"
        ,"type": {"kind":"Int32"}
        ,"value": 7
    }
    ,{
         "name": "PBT_APMRESUMESTANDBY"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "PBTF_APMRESUMEFROMFAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "PBT_APMBATTERYLOW"
        ,"type": {"kind":"Int32"}
        ,"value": 9
    }
    ,{
         "name": "PBT_APMPOWERSTATUSCHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 10
    }
    ,{
         "name": "PBT_APMOEMEVENT"
        ,"type": {"kind":"Int32"}
        ,"value": 11
    }
    ,{
         "name": "PBT_APMRESUMEAUTOMATIC"
        ,"type": {"kind":"Int32"}
        ,"value": 18
    }
    ,{
         "name": "PBT_POWERSETTINGCHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 32787
    }
    ,{
         "name": "WM_DEVICECHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 537
    }
    ,{
         "name": "WM_MDICREATE"
        ,"type": {"kind":"Int32"}
        ,"value": 544
    }
    ,{
         "name": "WM_MDIDESTROY"
        ,"type": {"kind":"Int32"}
        ,"value": 545
    }
    ,{
         "name": "WM_MDIACTIVATE"
        ,"type": {"kind":"Int32"}
        ,"value": 546
    }
    ,{
         "name": "WM_MDIRESTORE"
        ,"type": {"kind":"Int32"}
        ,"value": 547
    }
    ,{
         "name": "WM_MDINEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 548
    }
    ,{
         "name": "WM_MDIMAXIMIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 549
    }
    ,{
         "name": "WM_MDITILE"
        ,"type": {"kind":"Int32"}
        ,"value": 550
    }
    ,{
         "name": "WM_MDICASCADE"
        ,"type": {"kind":"Int32"}
        ,"value": 551
    }
    ,{
         "name": "WM_MDIICONARRANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 552
    }
    ,{
         "name": "WM_MDIGETACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 553
    }
    ,{
         "name": "WM_MDISETMENU"
        ,"type": {"kind":"Int32"}
        ,"value": 560
    }
    ,{
         "name": "WM_ENTERSIZEMOVE"
        ,"type": {"kind":"Int32"}
        ,"value": 561
    }
    ,{
         "name": "WM_EXITSIZEMOVE"
        ,"type": {"kind":"Int32"}
        ,"value": 562
    }
    ,{
         "name": "WM_DROPFILES"
        ,"type": {"kind":"Int32"}
        ,"value": 563
    }
    ,{
         "name": "WM_MDIREFRESHMENU"
        ,"type": {"kind":"Int32"}
        ,"value": 564
    }
    ,{
         "name": "WM_POINTERDEVICECHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 568
    }
    ,{
         "name": "WM_POINTERDEVICEINRANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 569
    }
    ,{
         "name": "WM_POINTERDEVICEOUTOFRANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 570
    }
    ,{
         "name": "WM_TOUCH"
        ,"type": {"kind":"Int32"}
        ,"value": 576
    }
    ,{
         "name": "WM_NCPOINTERUPDATE"
        ,"type": {"kind":"Int32"}
        ,"value": 577
    }
    ,{
         "name": "WM_NCPOINTERDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 578
    }
    ,{
         "name": "WM_NCPOINTERUP"
        ,"type": {"kind":"Int32"}
        ,"value": 579
    }
    ,{
         "name": "WM_POINTERUPDATE"
        ,"type": {"kind":"Int32"}
        ,"value": 581
    }
    ,{
         "name": "WM_POINTERDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 582
    }
    ,{
         "name": "WM_POINTERUP"
        ,"type": {"kind":"Int32"}
        ,"value": 583
    }
    ,{
         "name": "WM_POINTERENTER"
        ,"type": {"kind":"Int32"}
        ,"value": 585
    }
    ,{
         "name": "WM_POINTERLEAVE"
        ,"type": {"kind":"Int32"}
        ,"value": 586
    }
    ,{
         "name": "WM_POINTERACTIVATE"
        ,"type": {"kind":"Int32"}
        ,"value": 587
    }
    ,{
         "name": "WM_POINTERCAPTURECHANGED"
        ,"type": {"kind":"Int32"}
        ,"value": 588
    }
    ,{
         "name": "WM_TOUCHHITTESTING"
        ,"type": {"kind":"Int32"}
        ,"value": 589
    }
    ,{
         "name": "WM_POINTERWHEEL"
        ,"type": {"kind":"Int32"}
        ,"value": 590
    }
    ,{
         "name": "WM_POINTERHWHEEL"
        ,"type": {"kind":"Int32"}
        ,"value": 591
    }
    ,{
         "name": "DM_POINTERHITTEST"
        ,"type": {"kind":"Int32"}
        ,"value": 592
    }
    ,{
         "name": "WM_POINTERROUTEDTO"
        ,"type": {"kind":"Int32"}
        ,"value": 593
    }
    ,{
         "name": "WM_POINTERROUTEDAWAY"
        ,"type": {"kind":"Int32"}
        ,"value": 594
    }
    ,{
         "name": "WM_POINTERROUTEDRELEASED"
        ,"type": {"kind":"Int32"}
        ,"value": 595
    }
    ,{
         "name": "WM_IME_SETCONTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 641
    }
    ,{
         "name": "WM_IME_NOTIFY"
        ,"type": {"kind":"Int32"}
        ,"value": 642
    }
    ,{
         "name": "WM_IME_CONTROL"
        ,"type": {"kind":"Int32"}
        ,"value": 643
    }
    ,{
         "name": "WM_IME_COMPOSITIONFULL"
        ,"type": {"kind":"Int32"}
        ,"value": 644
    }
    ,{
         "name": "WM_IME_SELECT"
        ,"type": {"kind":"Int32"}
        ,"value": 645
    }
    ,{
         "name": "WM_IME_CHAR"
        ,"type": {"kind":"Int32"}
        ,"value": 646
    }
    ,{
         "name": "WM_IME_REQUEST"
        ,"type": {"kind":"Int32"}
        ,"value": 648
    }
    ,{
         "name": "WM_IME_KEYDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 656
    }
    ,{
         "name": "WM_IME_KEYUP"
        ,"type": {"kind":"Int32"}
        ,"value": 657
    }
    ,{
         "name": "WM_MOUSEHOVER"
        ,"type": {"kind":"Int32"}
        ,"value": 673
    }
    ,{
         "name": "WM_MOUSELEAVE"
        ,"type": {"kind":"Int32"}
        ,"value": 675
    }
    ,{
         "name": "WM_NCMOUSEHOVER"
        ,"type": {"kind":"Int32"}
        ,"value": 672
    }
    ,{
         "name": "WM_NCMOUSELEAVE"
        ,"type": {"kind":"Int32"}
        ,"value": 674
    }
    ,{
         "name": "WM_WTSSESSION_CHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 689
    }
    ,{
         "name": "WM_TABLET_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": 704
    }
    ,{
         "name": "WM_TABLET_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": 735
    }
    ,{
         "name": "WM_DPICHANGED"
        ,"type": {"kind":"Int32"}
        ,"value": 736
    }
    ,{
         "name": "WM_DPICHANGED_BEFOREPARENT"
        ,"type": {"kind":"Int32"}
        ,"value": 738
    }
    ,{
         "name": "WM_DPICHANGED_AFTERPARENT"
        ,"type": {"kind":"Int32"}
        ,"value": 739
    }
    ,{
         "name": "WM_GETDPISCALEDSIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 740
    }
    ,{
         "name": "WM_CUT"
        ,"type": {"kind":"Int32"}
        ,"value": 768
    }
    ,{
         "name": "WM_COPY"
        ,"type": {"kind":"Int32"}
        ,"value": 769
    }
    ,{
         "name": "WM_PASTE"
        ,"type": {"kind":"Int32"}
        ,"value": 770
    }
    ,{
         "name": "WM_CLEAR"
        ,"type": {"kind":"Int32"}
        ,"value": 771
    }
    ,{
         "name": "WM_UNDO"
        ,"type": {"kind":"Int32"}
        ,"value": 772
    }
    ,{
         "name": "WM_RENDERFORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": 773
    }
    ,{
         "name": "WM_RENDERALLFORMATS"
        ,"type": {"kind":"Int32"}
        ,"value": 774
    }
    ,{
         "name": "WM_DESTROYCLIPBOARD"
        ,"type": {"kind":"Int32"}
        ,"value": 775
    }
    ,{
         "name": "WM_DRAWCLIPBOARD"
        ,"type": {"kind":"Int32"}
        ,"value": 776
    }
    ,{
         "name": "WM_PAINTCLIPBOARD"
        ,"type": {"kind":"Int32"}
        ,"value": 777
    }
    ,{
         "name": "WM_VSCROLLCLIPBOARD"
        ,"type": {"kind":"Int32"}
        ,"value": 778
    }
    ,{
         "name": "WM_SIZECLIPBOARD"
        ,"type": {"kind":"Int32"}
        ,"value": 779
    }
    ,{
         "name": "WM_ASKCBFORMATNAME"
        ,"type": {"kind":"Int32"}
        ,"value": 780
    }
    ,{
         "name": "WM_CHANGECBCHAIN"
        ,"type": {"kind":"Int32"}
        ,"value": 781
    }
    ,{
         "name": "WM_HSCROLLCLIPBOARD"
        ,"type": {"kind":"Int32"}
        ,"value": 782
    }
    ,{
         "name": "WM_QUERYNEWPALETTE"
        ,"type": {"kind":"Int32"}
        ,"value": 783
    }
    ,{
         "name": "WM_PALETTEISCHANGING"
        ,"type": {"kind":"Int32"}
        ,"value": 784
    }
    ,{
         "name": "WM_PALETTECHANGED"
        ,"type": {"kind":"Int32"}
        ,"value": 785
    }
    ,{
         "name": "WM_HOTKEY"
        ,"type": {"kind":"Int32"}
        ,"value": 786
    }
    ,{
         "name": "WM_PRINT"
        ,"type": {"kind":"Int32"}
        ,"value": 791
    }
    ,{
         "name": "WM_PRINTCLIENT"
        ,"type": {"kind":"Int32"}
        ,"value": 792
    }
    ,{
         "name": "WM_APPCOMMAND"
        ,"type": {"kind":"Int32"}
        ,"value": 793
    }
    ,{
         "name": "WM_THEMECHANGED"
        ,"type": {"kind":"Int32"}
        ,"value": 794
    }
    ,{
         "name": "WM_CLIPBOARDUPDATE"
        ,"type": {"kind":"Int32"}
        ,"value": 797
    }
    ,{
         "name": "WM_DWMCOMPOSITIONCHANGED"
        ,"type": {"kind":"Int32"}
        ,"value": 798
    }
    ,{
         "name": "WM_DWMNCRENDERINGCHANGED"
        ,"type": {"kind":"Int32"}
        ,"value": 799
    }
    ,{
         "name": "WM_DWMCOLORIZATIONCOLORCHANGED"
        ,"type": {"kind":"Int32"}
        ,"value": 800
    }
    ,{
         "name": "WM_DWMWINDOWMAXIMIZEDCHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 801
    }
    ,{
         "name": "WM_DWMSENDICONICTHUMBNAIL"
        ,"type": {"kind":"Int32"}
        ,"value": 803
    }
    ,{
         "name": "WM_DWMSENDICONICLIVEPREVIEWBITMAP"
        ,"type": {"kind":"Int32"}
        ,"value": 806
    }
    ,{
         "name": "WM_GETTITLEBARINFOEX"
        ,"type": {"kind":"Int32"}
        ,"value": 831
    }
    ,{
         "name": "WM_HANDHELDFIRST"
        ,"type": {"kind":"Int32"}
        ,"value": 856
    }
    ,{
         "name": "WM_HANDHELDLAST"
        ,"type": {"kind":"Int32"}
        ,"value": 863
    }
    ,{
         "name": "WM_AFXFIRST"
        ,"type": {"kind":"Int32"}
        ,"value": 864
    }
    ,{
         "name": "WM_AFXLAST"
        ,"type": {"kind":"Int32"}
        ,"value": 895
    }
    ,{
         "name": "WM_PENWINFIRST"
        ,"type": {"kind":"Int32"}
        ,"value": 896
    }
    ,{
         "name": "WM_PENWINLAST"
        ,"type": {"kind":"Int32"}
        ,"value": 911
    }
    ,{
         "name": "WM_APP"
        ,"type": {"kind":"Int32"}
        ,"value": 32768
    }
    ,{
         "name": "WM_USER"
        ,"type": {"kind":"Int32"}
        ,"value": 1024
    }
    ,{
         "name": "WMSZ_LEFT"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "WMSZ_RIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "WMSZ_TOP"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "WMSZ_TOPLEFT"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "WMSZ_TOPRIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "WMSZ_BOTTOM"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "WMSZ_BOTTOMLEFT"
        ,"type": {"kind":"Int32"}
        ,"value": 7
    }
    ,{
         "name": "WMSZ_BOTTOMRIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "HTERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2
    }
    ,{
         "name": "HTTRANSPARENT"
        ,"type": {"kind":"Int32"}
        ,"value": -1
    }
    ,{
         "name": "HTNOWHERE"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "HTCLIENT"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "HTCAPTION"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "HTSYSMENU"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "HTGROWBOX"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "HTSIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "HTMENU"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "HTHSCROLL"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "HTVSCROLL"
        ,"type": {"kind":"Int32"}
        ,"value": 7
    }
    ,{
         "name": "HTMINBUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "HTMAXBUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 9
    }
    ,{
         "name": "HTLEFT"
        ,"type": {"kind":"Int32"}
        ,"value": 10
    }
    ,{
         "name": "HTRIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 11
    }
    ,{
         "name": "HTTOP"
        ,"type": {"kind":"Int32"}
        ,"value": 12
    }
    ,{
         "name": "HTTOPLEFT"
        ,"type": {"kind":"Int32"}
        ,"value": 13
    }
    ,{
         "name": "HTTOPRIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 14
    }
    ,{
         "name": "HTBOTTOM"
        ,"type": {"kind":"Int32"}
        ,"value": 15
    }
    ,{
         "name": "HTBOTTOMLEFT"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "HTBOTTOMRIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 17
    }
    ,{
         "name": "HTBORDER"
        ,"type": {"kind":"Int32"}
        ,"value": 18
    }
    ,{
         "name": "HTREDUCE"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "HTZOOM"
        ,"type": {"kind":"Int32"}
        ,"value": 9
    }
    ,{
         "name": "HTSIZEFIRST"
        ,"type": {"kind":"Int32"}
        ,"value": 10
    }
    ,{
         "name": "HTSIZELAST"
        ,"type": {"kind":"Int32"}
        ,"value": 17
    }
    ,{
         "name": "HTOBJECT"
        ,"type": {"kind":"Int32"}
        ,"value": 19
    }
    ,{
         "name": "HTCLOSE"
        ,"type": {"kind":"Int32"}
        ,"value": 20
    }
    ,{
         "name": "HTHELP"
        ,"type": {"kind":"Int32"}
        ,"value": 21
    }
    ,{
         "name": "SMTO_NORMAL"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "SMTO_BLOCK"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "SMTO_ABORTIFHUNG"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "SMTO_NOTIMEOUTIFNOTHUNG"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "SMTO_ERRORONEXIT"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "MA_ACTIVATE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "MA_ACTIVATEANDEAT"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "MA_NOACTIVATE"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "MA_NOACTIVATEANDEAT"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "ICON_SMALL"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "ICON_BIG"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "ICON_SMALL2"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "SIZE_RESTORED"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "SIZE_MINIMIZED"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "SIZE_MAXIMIZED"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "SIZE_MAXSHOW"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "SIZE_MAXHIDE"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "SIZENORMAL"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "SIZEICONIC"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "SIZEFULLSCREEN"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "SIZEZOOMSHOW"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "SIZEZOOMHIDE"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "WVR_ALIGNTOP"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "WVR_ALIGNLEFT"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "WVR_ALIGNBOTTOM"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "WVR_ALIGNRIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "WVR_HREDRAW"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "WVR_VREDRAW"
        ,"type": {"kind":"Int32"}
        ,"value": 512
    }
    ,{
         "name": "WVR_REDRAW"
        ,"type": {"kind":"Int32"}
        ,"value": 768
    }
    ,{
         "name": "WVR_VALIDRECTS"
        ,"type": {"kind":"Int32"}
        ,"value": 1024
    }
    ,{
         "name": "MK_LBUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "MK_RBUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "MK_SHIFT"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "MK_CONTROL"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "MK_MBUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "MK_XBUTTON1"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "MK_XBUTTON2"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "TME_HOVER"
        ,"type": {"kind":"UInt32"}
        ,"value": 1
    }
    ,{
         "name": "TME_LEAVE"
        ,"type": {"kind":"UInt32"}
        ,"value": 2
    }
    ,{
         "name": "TME_NONCLIENT"
        ,"type": {"kind":"UInt32"}
        ,"value": 16
    }
    ,{
         "name": "TME_QUERY"
        ,"type": {"kind":"UInt32"}
        ,"value": 1073741824
    }
    ,{
         "name": "TME_CANCEL"
        ,"type": {"kind":"UInt32"}
        ,"value": 2147483648
    }
    ,{
         "name": "HOVER_DEFAULT"
        ,"type": {"kind":"UInt32"}
        ,"value": 4294967295
    }
    ,{
         "name": "WS_OVERLAPPED"
        ,"type": {"kind":"UInt32"}
        ,"value": 0
    }
    ,{
         "name": "WS_POPUP"
        ,"type": {"kind":"UInt32"}
        ,"value": 2147483648
    }
    ,{
         "name": "WS_CHILD"
        ,"type": {"kind":"UInt32"}
        ,"value": 1073741824
    }
    ,{
         "name": "WS_MINIMIZE"
        ,"type": {"kind":"UInt32"}
        ,"value": 536870912
    }
    ,{
         "name": "WS_VISIBLE"
        ,"type": {"kind":"UInt32"}
        ,"value": 268435456
    }
    ,{
         "name": "WS_DISABLED"
        ,"type": {"kind":"UInt32"}
        ,"value": 134217728
    }
    ,{
         "name": "WS_CLIPSIBLINGS"
        ,"type": {"kind":"UInt32"}
        ,"value": 67108864
    }
    ,{
         "name": "WS_CLIPCHILDREN"
        ,"type": {"kind":"UInt32"}
        ,"value": 33554432
    }
    ,{
         "name": "WS_MAXIMIZE"
        ,"type": {"kind":"UInt32"}
        ,"value": 16777216
    }
    ,{
         "name": "WS_CAPTION"
        ,"type": {"kind":"UInt32"}
        ,"value": 12582912
    }
    ,{
         "name": "WS_BORDER"
        ,"type": {"kind":"UInt32"}
        ,"value": 8388608
    }
    ,{
         "name": "WS_DLGFRAME"
        ,"type": {"kind":"UInt32"}
        ,"value": 4194304
    }
    ,{
         "name": "WS_VSCROLL"
        ,"type": {"kind":"UInt32"}
        ,"value": 2097152
    }
    ,{
         "name": "WS_HSCROLL"
        ,"type": {"kind":"UInt32"}
        ,"value": 1048576
    }
    ,{
         "name": "WS_SYSMENU"
        ,"type": {"kind":"UInt32"}
        ,"value": 524288
    }
    ,{
         "name": "WS_THICKFRAME"
        ,"type": {"kind":"UInt32"}
        ,"value": 262144
    }
    ,{
         "name": "WS_GROUP"
        ,"type": {"kind":"UInt32"}
        ,"value": 131072
    }
    ,{
         "name": "WS_TABSTOP"
        ,"type": {"kind":"UInt32"}
        ,"value": 65536
    }
    ,{
         "name": "WS_MINIMIZEBOX"
        ,"type": {"kind":"UInt32"}
        ,"value": 131072
    }
    ,{
         "name": "WS_MAXIMIZEBOX"
        ,"type": {"kind":"UInt32"}
        ,"value": 65536
    }
    ,{
         "name": "WS_TILED"
        ,"type": {"kind":"UInt32"}
        ,"value": 0
    }
    ,{
         "name": "WS_ICONIC"
        ,"type": {"kind":"UInt32"}
        ,"value": 536870912
    }
    ,{
         "name": "WS_SIZEBOX"
        ,"type": {"kind":"UInt32"}
        ,"value": 262144
    }
    ,{
         "name": "WS_TILEDWINDOW"
        ,"type": {"kind":"UInt32"}
        ,"value": 13565952
    }
    ,{
         "name": "WS_OVERLAPPEDWINDOW"
        ,"type": {"kind":"UInt32"}
        ,"value": 13565952
    }
    ,{
         "name": "WS_POPUPWINDOW"
        ,"type": {"kind":"UInt32"}
        ,"value": 2156396544
    }
    ,{
         "name": "WS_CHILDWINDOW"
        ,"type": {"kind":"UInt32"}
        ,"value": 1073741824
    }
    ,{
         "name": "WS_EX_DLGMODALFRAME"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "WS_EX_NOPARENTNOTIFY"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "WS_EX_TOPMOST"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "WS_EX_ACCEPTFILES"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "WS_EX_TRANSPARENT"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "WS_EX_MDICHILD"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "WS_EX_TOOLWINDOW"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "WS_EX_WINDOWEDGE"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "WS_EX_CLIENTEDGE"
        ,"type": {"kind":"Int32"}
        ,"value": 512
    }
    ,{
         "name": "WS_EX_CONTEXTHELP"
        ,"type": {"kind":"Int32"}
        ,"value": 1024
    }
    ,{
         "name": "WS_EX_RIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 4096
    }
    ,{
         "name": "WS_EX_LEFT"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "WS_EX_RTLREADING"
        ,"type": {"kind":"Int32"}
        ,"value": 8192
    }
    ,{
         "name": "WS_EX_LTRREADING"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "WS_EX_LEFTSCROLLBAR"
        ,"type": {"kind":"Int32"}
        ,"value": 16384
    }
    ,{
         "name": "WS_EX_RIGHTSCROLLBAR"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "WS_EX_CONTROLPARENT"
        ,"type": {"kind":"Int32"}
        ,"value": 65536
    }
    ,{
         "name": "WS_EX_STATICEDGE"
        ,"type": {"kind":"Int32"}
        ,"value": 131072
    }
    ,{
         "name": "WS_EX_APPWINDOW"
        ,"type": {"kind":"Int32"}
        ,"value": 262144
    }
    ,{
         "name": "WS_EX_OVERLAPPEDWINDOW"
        ,"type": {"kind":"Int32"}
        ,"value": 768
    }
    ,{
         "name": "WS_EX_PALETTEWINDOW"
        ,"type": {"kind":"Int32"}
        ,"value": 392
    }
    ,{
         "name": "WS_EX_NOINHERITLAYOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 1048576
    }
    ,{
         "name": "WS_EX_NOREDIRECTIONBITMAP"
        ,"type": {"kind":"Int32"}
        ,"value": 2097152
    }
    ,{
         "name": "WS_EX_LAYOUTRTL"
        ,"type": {"kind":"Int32"}
        ,"value": 4194304
    }
    ,{
         "name": "WS_EX_COMPOSITED"
        ,"type": {"kind":"Int32"}
        ,"value": 33554432
    }
    ,{
         "name": "WS_EX_NOACTIVATE"
        ,"type": {"kind":"Int32"}
        ,"value": 134217728
    }
    ,{
         "name": "CS_VREDRAW"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "CS_HREDRAW"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "CS_DBLCLKS"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "CS_OWNDC"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "CS_CLASSDC"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "CS_PARENTDC"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "CS_NOCLOSE"
        ,"type": {"kind":"Int32"}
        ,"value": 512
    }
    ,{
         "name": "CS_SAVEBITS"
        ,"type": {"kind":"Int32"}
        ,"value": 2048
    }
    ,{
         "name": "CS_BYTEALIGNCLIENT"
        ,"type": {"kind":"Int32"}
        ,"value": 4096
    }
    ,{
         "name": "CS_BYTEALIGNWINDOW"
        ,"type": {"kind":"Int32"}
        ,"value": 8192
    }
    ,{
         "name": "CS_GLOBALCLASS"
        ,"type": {"kind":"Int32"}
        ,"value": 16384
    }
    ,{
         "name": "CS_IME"
        ,"type": {"kind":"Int32"}
        ,"value": 65536
    }
    ,{
         "name": "CS_DROPSHADOW"
        ,"type": {"kind":"Int32"}
        ,"value": 131072
    }
    ,{
         "name": "PRF_CHECKVISIBLE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "PRF_NONCLIENT"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "PRF_CLIENT"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "PRF_ERASEBKGND"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "PRF_CHILDREN"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "PRF_OWNED"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "BDR_RAISEDOUTER"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "BDR_SUNKENOUTER"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "BDR_RAISEDINNER"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "BDR_SUNKENINNER"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "BDR_OUTER"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "BDR_INNER"
        ,"type": {"kind":"Int32"}
        ,"value": 12
    }
    ,{
         "name": "BDR_RAISED"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "BDR_SUNKEN"
        ,"type": {"kind":"Int32"}
        ,"value": 10
    }
    ,{
         "name": "EDGE_RAISED"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "EDGE_SUNKEN"
        ,"type": {"kind":"Int32"}
        ,"value": 10
    }
    ,{
         "name": "EDGE_ETCHED"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "EDGE_BUMP"
        ,"type": {"kind":"Int32"}
        ,"value": 9
    }
    ,{
         "name": "BF_LEFT"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "BF_TOP"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "BF_RIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "BF_BOTTOM"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "BF_TOPLEFT"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "BF_TOPRIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "BF_BOTTOMLEFT"
        ,"type": {"kind":"Int32"}
        ,"value": 9
    }
    ,{
         "name": "BF_BOTTOMRIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 12
    }
    ,{
         "name": "BF_RECT"
        ,"type": {"kind":"Int32"}
        ,"value": 15
    }
    ,{
         "name": "BF_DIAGONAL"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "BF_DIAGONAL_ENDTOPRIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 22
    }
    ,{
         "name": "BF_DIAGONAL_ENDTOPLEFT"
        ,"type": {"kind":"Int32"}
        ,"value": 19
    }
    ,{
         "name": "BF_DIAGONAL_ENDBOTTOMLEFT"
        ,"type": {"kind":"Int32"}
        ,"value": 25
    }
    ,{
         "name": "BF_DIAGONAL_ENDBOTTOMRIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 28
    }
    ,{
         "name": "BF_MIDDLE"
        ,"type": {"kind":"Int32"}
        ,"value": 2048
    }
    ,{
         "name": "BF_SOFT"
        ,"type": {"kind":"Int32"}
        ,"value": 4096
    }
    ,{
         "name": "BF_ADJUST"
        ,"type": {"kind":"Int32"}
        ,"value": 8192
    }
    ,{
         "name": "BF_FLAT"
        ,"type": {"kind":"Int32"}
        ,"value": 16384
    }
    ,{
         "name": "BF_MONO"
        ,"type": {"kind":"Int32"}
        ,"value": 32768
    }
    ,{
         "name": "DFC_CAPTION"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "DFC_MENU"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "DFC_SCROLL"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "DFC_BUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "DFC_POPUPMENU"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "DFCS_CAPTIONCLOSE"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "DFCS_CAPTIONMIN"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "DFCS_CAPTIONMAX"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "DFCS_CAPTIONRESTORE"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "DFCS_CAPTIONHELP"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "DFCS_MENUARROW"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "DFCS_MENUCHECK"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "DFCS_MENUBULLET"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "DFCS_MENUARROWRIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "DFCS_SCROLLUP"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "DFCS_SCROLLDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "DFCS_SCROLLLEFT"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "DFCS_SCROLLRIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "DFCS_SCROLLCOMBOBOX"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "DFCS_SCROLLSIZEGRIP"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "DFCS_SCROLLSIZEGRIPRIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "DFCS_BUTTONCHECK"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "DFCS_BUTTONRADIOIMAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "DFCS_BUTTONRADIOMASK"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "DFCS_BUTTONRADIO"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "DFCS_BUTTON3STATE"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "DFCS_BUTTONPUSH"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "DFCS_INACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "DFCS_PUSHED"
        ,"type": {"kind":"Int32"}
        ,"value": 512
    }
    ,{
         "name": "DFCS_CHECKED"
        ,"type": {"kind":"Int32"}
        ,"value": 1024
    }
    ,{
         "name": "DFCS_TRANSPARENT"
        ,"type": {"kind":"Int32"}
        ,"value": 2048
    }
    ,{
         "name": "DFCS_HOT"
        ,"type": {"kind":"Int32"}
        ,"value": 4096
    }
    ,{
         "name": "DFCS_ADJUSTRECT"
        ,"type": {"kind":"Int32"}
        ,"value": 8192
    }
    ,{
         "name": "DFCS_FLAT"
        ,"type": {"kind":"Int32"}
        ,"value": 16384
    }
    ,{
         "name": "DFCS_MONO"
        ,"type": {"kind":"Int32"}
        ,"value": 32768
    }
    ,{
         "name": "DC_ACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "DC_SMALLCAP"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "DC_ICON"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "DC_TEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "DC_INBUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "DC_GRADIENT"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "DC_BUTTONS"
        ,"type": {"kind":"Int32"}
        ,"value": 4096
    }
    ,{
         "name": "IDANI_OPEN"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "IDANI_CAPTION"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "CF_TEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "CF_BITMAP"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "CF_METAFILEPICT"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "CF_SYLK"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "CF_DIF"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "CF_TIFF"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "CF_OEMTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 7
    }
    ,{
         "name": "CF_DIB"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "CF_PALETTE"
        ,"type": {"kind":"Int32"}
        ,"value": 9
    }
    ,{
         "name": "CF_PENDATA"
        ,"type": {"kind":"Int32"}
        ,"value": 10
    }
    ,{
         "name": "CF_RIFF"
        ,"type": {"kind":"Int32"}
        ,"value": 11
    }
    ,{
         "name": "CF_WAVE"
        ,"type": {"kind":"Int32"}
        ,"value": 12
    }
    ,{
         "name": "CF_UNICODETEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 13
    }
    ,{
         "name": "CF_ENHMETAFILE"
        ,"type": {"kind":"Int32"}
        ,"value": 14
    }
    ,{
         "name": "CF_HDROP"
        ,"type": {"kind":"Int32"}
        ,"value": 15
    }
    ,{
         "name": "CF_LOCALE"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "CF_DIBV5"
        ,"type": {"kind":"Int32"}
        ,"value": 17
    }
    ,{
         "name": "CF_MAX"
        ,"type": {"kind":"Int32"}
        ,"value": 18
    }
    ,{
         "name": "CF_OWNERDISPLAY"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "CF_DSPTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 129
    }
    ,{
         "name": "CF_DSPBITMAP"
        ,"type": {"kind":"Int32"}
        ,"value": 130
    }
    ,{
         "name": "CF_DSPMETAFILEPICT"
        ,"type": {"kind":"Int32"}
        ,"value": 131
    }
    ,{
         "name": "CF_DSPENHMETAFILE"
        ,"type": {"kind":"Int32"}
        ,"value": 142
    }
    ,{
         "name": "CF_PRIVATEFIRST"
        ,"type": {"kind":"Int32"}
        ,"value": 512
    }
    ,{
         "name": "CF_PRIVATELAST"
        ,"type": {"kind":"Int32"}
        ,"value": 767
    }
    ,{
         "name": "CF_GDIOBJFIRST"
        ,"type": {"kind":"Int32"}
        ,"value": 768
    }
    ,{
         "name": "CF_GDIOBJLAST"
        ,"type": {"kind":"Int32"}
        ,"value": 1023
    }
    ,{
         "name": "FVIRTKEY"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "FNOINVERT"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "FSHIFT"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "FCONTROL"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "FALT"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "WPF_SETMINPOSITION"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "WPF_RESTORETOMAXIMIZED"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "WPF_ASYNCWINDOWPLACEMENT"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "ODT_MENU"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "ODT_LISTBOX"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "ODT_COMBOBOX"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "ODT_BUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "ODT_STATIC"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "ODA_DRAWENTIRE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "ODA_SELECT"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "ODA_FOCUS"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "ODS_SELECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "ODS_GRAYED"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "ODS_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "ODS_CHECKED"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "ODS_FOCUS"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "ODS_DEFAULT"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "ODS_COMBOBOXEDIT"
        ,"type": {"kind":"Int32"}
        ,"value": 4096
    }
    ,{
         "name": "ODS_HOTLIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "ODS_INACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "ODS_NOACCEL"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "ODS_NOFOCUSRECT"
        ,"type": {"kind":"Int32"}
        ,"value": 512
    }
    ,{
         "name": "PM_NOREMOVE"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "PM_REMOVE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "PM_NOYIELD"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "PM_QS_INPUT"
        ,"type": {"kind":"Int32"}
        ,"value": 470220800
    }
    ,{
         "name": "PM_QS_POSTMESSAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 9961472
    }
    ,{
         "name": "PM_QS_PAINT"
        ,"type": {"kind":"Int32"}
        ,"value": 2097152
    }
    ,{
         "name": "PM_QS_SENDMESSAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 4194304
    }
    ,{
         "name": "MOD_ALT"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "MOD_CONTROL"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "MOD_SHIFT"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "MOD_WIN"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "MOD_NOREPEAT"
        ,"type": {"kind":"Int32"}
        ,"value": 16384
    }
    ,{
         "name": "IDHOT_SNAPWINDOW"
        ,"type": {"kind":"Int32"}
        ,"value": -1
    }
    ,{
         "name": "IDHOT_SNAPDESKTOP"
        ,"type": {"kind":"Int32"}
        ,"value": -2
    }
    ,{
         "name": "ENDSESSION_CLOSEAPP"
        ,"type": {"kind":"UInt32"}
        ,"value": 1
    }
    ,{
         "name": "ENDSESSION_CRITICAL"
        ,"type": {"kind":"UInt32"}
        ,"value": 1073741824
    }
    ,{
         "name": "ENDSESSION_LOGOFF"
        ,"type": {"kind":"UInt32"}
        ,"value": 2147483648
    }
    ,{
         "name": "EWX_LOGOFF"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "EWX_SHUTDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "EWX_REBOOT"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "EWX_FORCE"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "EWX_POWEROFF"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "EWX_FORCEIFHUNG"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "EWX_QUICKRESOLVE"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "EWX_RESTARTAPPS"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "EWX_HYBRID_SHUTDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 4194304
    }
    ,{
         "name": "EWX_BOOTOPTIONS"
        ,"type": {"kind":"Int32"}
        ,"value": 16777216
    }
    ,{
         "name": "EWX_ARSO"
        ,"type": {"kind":"Int32"}
        ,"value": 67108864
    }
    ,{
         "name": "BSM_ALLCOMPONENTS"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "BSM_VXDS"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "BSM_NETDRIVER"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "BSM_INSTALLABLEDRIVERS"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "BSM_APPLICATIONS"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "BSM_ALLDESKTOPS"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "BSF_QUERY"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "BSF_IGNORECURRENTTASK"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "BSF_FLUSHDISK"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "BSF_NOHANG"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "BSF_POSTMESSAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "BSF_FORCEIFHUNG"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "BSF_NOTIMEOUTIFNOTHUNG"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "BSF_ALLOWSFW"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "BSF_SENDNOTIFYMESSAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "BSF_RETURNHDESK"
        ,"type": {"kind":"Int32"}
        ,"value": 512
    }
    ,{
         "name": "BSF_LUID"
        ,"type": {"kind":"Int32"}
        ,"value": 1024
    }
    ,{
         "name": "BROADCAST_QUERY_DENY"
        ,"type": {"kind":"Int32"}
        ,"value": 1112363332
    }
    ,{
         "name": "DEVICE_NOTIFY_WINDOW_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "DEVICE_NOTIFY_SERVICE_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "DEVICE_NOTIFY_ALL_INTERFACE_CLASSES"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "HWND_BROADCAST"
        ,"type": {"kind":"Int32"}
        ,"value": 65535
    }
    ,{
         "name": "HWND_MESSAGE"
        ,"type": {"kind":"Int32"}
        ,"value": -3
    }
    ,{
         "name": "ISMEX_NOSEND"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "ISMEX_SEND"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "ISMEX_NOTIFY"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "ISMEX_CALLBACK"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "ISMEX_REPLIED"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "CW_USEDEFAULT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147483648
    }
    ,{
         "name": "HWND_DESKTOP"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "PW_CLIENTONLY"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "PW_RENDERFULLCONTENT"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "LWA_COLORKEY"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "LWA_ALPHA"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "ULW_COLORKEY"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "ULW_ALPHA"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "ULW_OPAQUE"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "ULW_EX_NORESIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "FLASHW_STOP"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "FLASHW_CAPTION"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "FLASHW_TRAY"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "FLASHW_ALL"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "FLASHW_TIMER"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "FLASHW_TIMERNOFG"
        ,"type": {"kind":"Int32"}
        ,"value": 12
    }
    ,{
         "name": "WDA_NONE"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "WDA_MONITOR"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "WDA_EXCLUDEFROMCAPTURE"
        ,"type": {"kind":"Int32"}
        ,"value": 17
    }
    ,{
         "name": "SWP_NOSIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "SWP_NOMOVE"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "SWP_NOZORDER"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "SWP_NOREDRAW"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "SWP_NOACTIVATE"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "SWP_FRAMECHANGED"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "SWP_SHOWWINDOW"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "SWP_HIDEWINDOW"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "SWP_NOCOPYBITS"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "SWP_NOOWNERZORDER"
        ,"type": {"kind":"Int32"}
        ,"value": 512
    }
    ,{
         "name": "SWP_NOSENDCHANGING"
        ,"type": {"kind":"Int32"}
        ,"value": 1024
    }
    ,{
         "name": "SWP_DRAWFRAME"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "SWP_NOREPOSITION"
        ,"type": {"kind":"Int32"}
        ,"value": 512
    }
    ,{
         "name": "SWP_DEFERERASE"
        ,"type": {"kind":"Int32"}
        ,"value": 8192
    }
    ,{
         "name": "SWP_ASYNCWINDOWPOS"
        ,"type": {"kind":"Int32"}
        ,"value": 16384
    }
    ,{
         "name": "HWND_TOP"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "HWND_BOTTOM"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "HWND_TOPMOST"
        ,"type": {"kind":"Int32"}
        ,"value": -1
    }
    ,{
         "name": "HWND_NOTOPMOST"
        ,"type": {"kind":"Int32"}
        ,"value": -2
    }
    ,{
         "name": "DLGWINDOWEXTRA"
        ,"type": {"kind":"Int32"}
        ,"value": 30
    }
    ,{
         "name": "KEYEVENTF_EXTENDEDKEY"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "KEYEVENTF_KEYUP"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "KEYEVENTF_UNICODE"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "KEYEVENTF_SCANCODE"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "MOUSEEVENTF_MOVE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "MOUSEEVENTF_LEFTDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "MOUSEEVENTF_LEFTUP"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "MOUSEEVENTF_RIGHTDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "MOUSEEVENTF_RIGHTUP"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "MOUSEEVENTF_MIDDLEDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "MOUSEEVENTF_MIDDLEUP"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "MOUSEEVENTF_XDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "MOUSEEVENTF_XUP"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "MOUSEEVENTF_WHEEL"
        ,"type": {"kind":"Int32"}
        ,"value": 2048
    }
    ,{
         "name": "MOUSEEVENTF_HWHEEL"
        ,"type": {"kind":"Int32"}
        ,"value": 4096
    }
    ,{
         "name": "MOUSEEVENTF_MOVE_NOCOALESCE"
        ,"type": {"kind":"Int32"}
        ,"value": 8192
    }
    ,{
         "name": "MOUSEEVENTF_VIRTUALDESK"
        ,"type": {"kind":"Int32"}
        ,"value": 16384
    }
    ,{
         "name": "MOUSEEVENTF_ABSOLUTE"
        ,"type": {"kind":"Int32"}
        ,"value": 32768
    }
    ,{
         "name": "INPUT_MOUSE"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "INPUT_KEYBOARD"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "INPUT_HARDWARE"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "TOUCHEVENTF_MOVE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "TOUCHEVENTF_DOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "TOUCHEVENTF_UP"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "TOUCHEVENTF_INRANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "TOUCHEVENTF_PRIMARY"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "TOUCHEVENTF_NOCOALESCE"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "TOUCHEVENTF_PEN"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "TOUCHEVENTF_PALM"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "TOUCHINPUTMASKF_TIMEFROMSYSTEM"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "TOUCHINPUTMASKF_EXTRAINFO"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "TOUCHINPUTMASKF_CONTACTAREA"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "TWF_FINETOUCH"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "TWF_WANTPALM"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "POINTER_FLAG_NONE"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "POINTER_FLAG_NEW"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "POINTER_FLAG_INRANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "POINTER_FLAG_INCONTACT"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "POINTER_FLAG_FIRSTBUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "POINTER_FLAG_SECONDBUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "POINTER_FLAG_THIRDBUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "POINTER_FLAG_FOURTHBUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "POINTER_FLAG_FIFTHBUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "POINTER_FLAG_PRIMARY"
        ,"type": {"kind":"Int32"}
        ,"value": 8192
    }
    ,{
         "name": "POINTER_FLAG_CONFIDENCE"
        ,"type": {"kind":"Int32"}
        ,"value": 16384
    }
    ,{
         "name": "POINTER_FLAG_CANCELED"
        ,"type": {"kind":"Int32"}
        ,"value": 32768
    }
    ,{
         "name": "POINTER_FLAG_DOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 65536
    }
    ,{
         "name": "POINTER_FLAG_UPDATE"
        ,"type": {"kind":"Int32"}
        ,"value": 131072
    }
    ,{
         "name": "POINTER_FLAG_UP"
        ,"type": {"kind":"Int32"}
        ,"value": 262144
    }
    ,{
         "name": "POINTER_FLAG_WHEEL"
        ,"type": {"kind":"Int32"}
        ,"value": 524288
    }
    ,{
         "name": "POINTER_FLAG_HWHEEL"
        ,"type": {"kind":"Int32"}
        ,"value": 1048576
    }
    ,{
         "name": "POINTER_FLAG_CAPTURECHANGED"
        ,"type": {"kind":"Int32"}
        ,"value": 2097152
    }
    ,{
         "name": "POINTER_FLAG_HASTRANSFORM"
        ,"type": {"kind":"Int32"}
        ,"value": 4194304
    }
    ,{
         "name": "POINTER_MOD_SHIFT"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "POINTER_MOD_CTRL"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "TOUCH_FLAG_NONE"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "TOUCH_MASK_NONE"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "TOUCH_MASK_CONTACTAREA"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "TOUCH_MASK_ORIENTATION"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "TOUCH_MASK_PRESSURE"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "PEN_FLAG_NONE"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "PEN_FLAG_BARREL"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "PEN_FLAG_INVERTED"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "PEN_FLAG_ERASER"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "PEN_MASK_NONE"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "PEN_MASK_PRESSURE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "PEN_MASK_ROTATION"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "PEN_MASK_TILT_X"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "PEN_MASK_TILT_Y"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "POINTER_MESSAGE_FLAG_NEW"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "POINTER_MESSAGE_FLAG_INRANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "POINTER_MESSAGE_FLAG_INCONTACT"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "POINTER_MESSAGE_FLAG_FIRSTBUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "POINTER_MESSAGE_FLAG_SECONDBUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "POINTER_MESSAGE_FLAG_THIRDBUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "POINTER_MESSAGE_FLAG_FOURTHBUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "POINTER_MESSAGE_FLAG_FIFTHBUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "POINTER_MESSAGE_FLAG_PRIMARY"
        ,"type": {"kind":"Int32"}
        ,"value": 8192
    }
    ,{
         "name": "POINTER_MESSAGE_FLAG_CONFIDENCE"
        ,"type": {"kind":"Int32"}
        ,"value": 16384
    }
    ,{
         "name": "POINTER_MESSAGE_FLAG_CANCELED"
        ,"type": {"kind":"Int32"}
        ,"value": 32768
    }
    ,{
         "name": "PA_ACTIVATE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "PA_NOACTIVATE"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "MAX_TOUCH_COUNT"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "TOUCH_FEEDBACK_DEFAULT"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "TOUCH_FEEDBACK_INDIRECT"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "TOUCH_FEEDBACK_NONE"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "TOUCH_HIT_TESTING_DEFAULT"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "TOUCH_HIT_TESTING_CLIENT"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "TOUCH_HIT_TESTING_NONE"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "TOUCH_HIT_TESTING_PROXIMITY_CLOSEST"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "TOUCH_HIT_TESTING_PROXIMITY_FARTHEST"
        ,"type": {"kind":"Int32"}
        ,"value": 4095
    }
    ,{
         "name": "GWFS_INCLUDE_ANCESTORS"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "MAPVK_VK_TO_VSC"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "MAPVK_VSC_TO_VK"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "MAPVK_VK_TO_CHAR"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "MAPVK_VSC_TO_VK_EX"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "MAPVK_VK_TO_VSC_EX"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "MWMO_WAITALL"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "MWMO_ALERTABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "MWMO_INPUTAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "QS_KEY"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "QS_MOUSEMOVE"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "QS_MOUSEBUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "QS_POSTMESSAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "QS_TIMER"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "QS_PAINT"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "QS_SENDMESSAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "QS_HOTKEY"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "QS_ALLPOSTMESSAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "QS_RAWINPUT"
        ,"type": {"kind":"Int32"}
        ,"value": 1024
    }
    ,{
         "name": "QS_TOUCH"
        ,"type": {"kind":"Int32"}
        ,"value": 2048
    }
    ,{
         "name": "QS_POINTER"
        ,"type": {"kind":"Int32"}
        ,"value": 4096
    }
    ,{
         "name": "QS_MOUSE"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "QS_INPUT"
        ,"type": {"kind":"Int32"}
        ,"value": 7175
    }
    ,{
         "name": "QS_ALLEVENTS"
        ,"type": {"kind":"Int32"}
        ,"value": 7359
    }
    ,{
         "name": "QS_ALLINPUT"
        ,"type": {"kind":"Int32"}
        ,"value": 7423
    }
    ,{
         "name": "USER_TIMER_MAXIMUM"
        ,"type": {"kind":"Int32"}
        ,"value": 2147483647
    }
    ,{
         "name": "USER_TIMER_MINIMUM"
        ,"type": {"kind":"Int32"}
        ,"value": 10
    }
    ,{
         "name": "TIMERV_DEFAULT_COALESCING"
        ,"type": {"kind":"UInt32"}
        ,"value": 0
    }
    ,{
         "name": "TIMERV_NO_COALESCING"
        ,"type": {"kind":"UInt32"}
        ,"value": 4294967295
    }
    ,{
         "name": "TIMERV_COALESCING_MIN"
        ,"type": {"kind":"UInt32"}
        ,"value": 1
    }
    ,{
         "name": "TIMERV_COALESCING_MAX"
        ,"type": {"kind":"UInt32"}
        ,"value": 2147483637
    }
    ,{
         "name": "SM_CXSCREEN"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "SM_CYSCREEN"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "SM_CXVSCROLL"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "SM_CYHSCROLL"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "SM_CYCAPTION"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "SM_CXBORDER"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "SM_CYBORDER"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "SM_CXDLGFRAME"
        ,"type": {"kind":"Int32"}
        ,"value": 7
    }
    ,{
         "name": "SM_CYDLGFRAME"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "SM_CYVTHUMB"
        ,"type": {"kind":"Int32"}
        ,"value": 9
    }
    ,{
         "name": "SM_CXHTHUMB"
        ,"type": {"kind":"Int32"}
        ,"value": 10
    }
    ,{
         "name": "SM_CXICON"
        ,"type": {"kind":"Int32"}
        ,"value": 11
    }
    ,{
         "name": "SM_CYICON"
        ,"type": {"kind":"Int32"}
        ,"value": 12
    }
    ,{
         "name": "SM_CXCURSOR"
        ,"type": {"kind":"Int32"}
        ,"value": 13
    }
    ,{
         "name": "SM_CYCURSOR"
        ,"type": {"kind":"Int32"}
        ,"value": 14
    }
    ,{
         "name": "SM_CYMENU"
        ,"type": {"kind":"Int32"}
        ,"value": 15
    }
    ,{
         "name": "SM_CXFULLSCREEN"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "SM_CYFULLSCREEN"
        ,"type": {"kind":"Int32"}
        ,"value": 17
    }
    ,{
         "name": "SM_CYKANJIWINDOW"
        ,"type": {"kind":"Int32"}
        ,"value": 18
    }
    ,{
         "name": "SM_MOUSEPRESENT"
        ,"type": {"kind":"Int32"}
        ,"value": 19
    }
    ,{
         "name": "SM_CYVSCROLL"
        ,"type": {"kind":"Int32"}
        ,"value": 20
    }
    ,{
         "name": "SM_CXHSCROLL"
        ,"type": {"kind":"Int32"}
        ,"value": 21
    }
    ,{
         "name": "SM_DEBUG"
        ,"type": {"kind":"Int32"}
        ,"value": 22
    }
    ,{
         "name": "SM_SWAPBUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 23
    }
    ,{
         "name": "SM_RESERVED1"
        ,"type": {"kind":"Int32"}
        ,"value": 24
    }
    ,{
         "name": "SM_RESERVED2"
        ,"type": {"kind":"Int32"}
        ,"value": 25
    }
    ,{
         "name": "SM_RESERVED3"
        ,"type": {"kind":"Int32"}
        ,"value": 26
    }
    ,{
         "name": "SM_RESERVED4"
        ,"type": {"kind":"Int32"}
        ,"value": 27
    }
    ,{
         "name": "SM_CXMIN"
        ,"type": {"kind":"Int32"}
        ,"value": 28
    }
    ,{
         "name": "SM_CYMIN"
        ,"type": {"kind":"Int32"}
        ,"value": 29
    }
    ,{
         "name": "SM_CXSIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 30
    }
    ,{
         "name": "SM_CYSIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 31
    }
    ,{
         "name": "SM_CXFRAME"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "SM_CYFRAME"
        ,"type": {"kind":"Int32"}
        ,"value": 33
    }
    ,{
         "name": "SM_CXMINTRACK"
        ,"type": {"kind":"Int32"}
        ,"value": 34
    }
    ,{
         "name": "SM_CYMINTRACK"
        ,"type": {"kind":"Int32"}
        ,"value": 35
    }
    ,{
         "name": "SM_CXDOUBLECLK"
        ,"type": {"kind":"Int32"}
        ,"value": 36
    }
    ,{
         "name": "SM_CYDOUBLECLK"
        ,"type": {"kind":"Int32"}
        ,"value": 37
    }
    ,{
         "name": "SM_CXICONSPACING"
        ,"type": {"kind":"Int32"}
        ,"value": 38
    }
    ,{
         "name": "SM_CYICONSPACING"
        ,"type": {"kind":"Int32"}
        ,"value": 39
    }
    ,{
         "name": "SM_MENUDROPALIGNMENT"
        ,"type": {"kind":"Int32"}
        ,"value": 40
    }
    ,{
         "name": "SM_PENWINDOWS"
        ,"type": {"kind":"Int32"}
        ,"value": 41
    }
    ,{
         "name": "SM_DBCSENABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 42
    }
    ,{
         "name": "SM_CMOUSEBUTTONS"
        ,"type": {"kind":"Int32"}
        ,"value": 43
    }
    ,{
         "name": "SM_CXFIXEDFRAME"
        ,"type": {"kind":"Int32"}
        ,"value": 7
    }
    ,{
         "name": "SM_CYFIXEDFRAME"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "SM_CXSIZEFRAME"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "SM_CYSIZEFRAME"
        ,"type": {"kind":"Int32"}
        ,"value": 33
    }
    ,{
         "name": "SM_SECURE"
        ,"type": {"kind":"Int32"}
        ,"value": 44
    }
    ,{
         "name": "SM_CXEDGE"
        ,"type": {"kind":"Int32"}
        ,"value": 45
    }
    ,{
         "name": "SM_CYEDGE"
        ,"type": {"kind":"Int32"}
        ,"value": 46
    }
    ,{
         "name": "SM_CXMINSPACING"
        ,"type": {"kind":"Int32"}
        ,"value": 47
    }
    ,{
         "name": "SM_CYMINSPACING"
        ,"type": {"kind":"Int32"}
        ,"value": 48
    }
    ,{
         "name": "SM_CXSMICON"
        ,"type": {"kind":"Int32"}
        ,"value": 49
    }
    ,{
         "name": "SM_CYSMICON"
        ,"type": {"kind":"Int32"}
        ,"value": 50
    }
    ,{
         "name": "SM_CYSMCAPTION"
        ,"type": {"kind":"Int32"}
        ,"value": 51
    }
    ,{
         "name": "SM_CXSMSIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 52
    }
    ,{
         "name": "SM_CYSMSIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 53
    }
    ,{
         "name": "SM_CXMENUSIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 54
    }
    ,{
         "name": "SM_CYMENUSIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 55
    }
    ,{
         "name": "SM_ARRANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 56
    }
    ,{
         "name": "SM_CXMINIMIZED"
        ,"type": {"kind":"Int32"}
        ,"value": 57
    }
    ,{
         "name": "SM_CYMINIMIZED"
        ,"type": {"kind":"Int32"}
        ,"value": 58
    }
    ,{
         "name": "SM_CXMAXTRACK"
        ,"type": {"kind":"Int32"}
        ,"value": 59
    }
    ,{
         "name": "SM_CYMAXTRACK"
        ,"type": {"kind":"Int32"}
        ,"value": 60
    }
    ,{
         "name": "SM_CXMAXIMIZED"
        ,"type": {"kind":"Int32"}
        ,"value": 61
    }
    ,{
         "name": "SM_CYMAXIMIZED"
        ,"type": {"kind":"Int32"}
        ,"value": 62
    }
    ,{
         "name": "SM_NETWORK"
        ,"type": {"kind":"Int32"}
        ,"value": 63
    }
    ,{
         "name": "SM_CLEANBOOT"
        ,"type": {"kind":"Int32"}
        ,"value": 67
    }
    ,{
         "name": "SM_CXDRAG"
        ,"type": {"kind":"Int32"}
        ,"value": 68
    }
    ,{
         "name": "SM_CYDRAG"
        ,"type": {"kind":"Int32"}
        ,"value": 69
    }
    ,{
         "name": "SM_SHOWSOUNDS"
        ,"type": {"kind":"Int32"}
        ,"value": 70
    }
    ,{
         "name": "SM_CXMENUCHECK"
        ,"type": {"kind":"Int32"}
        ,"value": 71
    }
    ,{
         "name": "SM_CYMENUCHECK"
        ,"type": {"kind":"Int32"}
        ,"value": 72
    }
    ,{
         "name": "SM_SLOWMACHINE"
        ,"type": {"kind":"Int32"}
        ,"value": 73
    }
    ,{
         "name": "SM_MIDEASTENABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 74
    }
    ,{
         "name": "SM_MOUSEWHEELPRESENT"
        ,"type": {"kind":"Int32"}
        ,"value": 75
    }
    ,{
         "name": "SM_XVIRTUALSCREEN"
        ,"type": {"kind":"Int32"}
        ,"value": 76
    }
    ,{
         "name": "SM_YVIRTUALSCREEN"
        ,"type": {"kind":"Int32"}
        ,"value": 77
    }
    ,{
         "name": "SM_CXVIRTUALSCREEN"
        ,"type": {"kind":"Int32"}
        ,"value": 78
    }
    ,{
         "name": "SM_CYVIRTUALSCREEN"
        ,"type": {"kind":"Int32"}
        ,"value": 79
    }
    ,{
         "name": "SM_CMONITORS"
        ,"type": {"kind":"Int32"}
        ,"value": 80
    }
    ,{
         "name": "SM_SAMEDISPLAYFORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": 81
    }
    ,{
         "name": "SM_IMMENABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 82
    }
    ,{
         "name": "SM_CXFOCUSBORDER"
        ,"type": {"kind":"Int32"}
        ,"value": 83
    }
    ,{
         "name": "SM_CYFOCUSBORDER"
        ,"type": {"kind":"Int32"}
        ,"value": 84
    }
    ,{
         "name": "SM_TABLETPC"
        ,"type": {"kind":"Int32"}
        ,"value": 86
    }
    ,{
         "name": "SM_MEDIACENTER"
        ,"type": {"kind":"Int32"}
        ,"value": 87
    }
    ,{
         "name": "SM_STARTER"
        ,"type": {"kind":"Int32"}
        ,"value": 88
    }
    ,{
         "name": "SM_SERVERR2"
        ,"type": {"kind":"Int32"}
        ,"value": 89
    }
    ,{
         "name": "SM_MOUSEHORIZONTALWHEELPRESENT"
        ,"type": {"kind":"Int32"}
        ,"value": 91
    }
    ,{
         "name": "SM_CXPADDEDBORDER"
        ,"type": {"kind":"Int32"}
        ,"value": 92
    }
    ,{
         "name": "SM_DIGITIZER"
        ,"type": {"kind":"Int32"}
        ,"value": 94
    }
    ,{
         "name": "SM_MAXIMUMTOUCHES"
        ,"type": {"kind":"Int32"}
        ,"value": 95
    }
    ,{
         "name": "SM_CMETRICS"
        ,"type": {"kind":"Int32"}
        ,"value": 97
    }
    ,{
         "name": "SM_REMOTESESSION"
        ,"type": {"kind":"Int32"}
        ,"value": 4096
    }
    ,{
         "name": "SM_SHUTTINGDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 8192
    }
    ,{
         "name": "SM_REMOTECONTROL"
        ,"type": {"kind":"Int32"}
        ,"value": 8193
    }
    ,{
         "name": "SM_CARETBLINKINGENABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 8194
    }
    ,{
         "name": "SM_CONVERTIBLESLATEMODE"
        ,"type": {"kind":"Int32"}
        ,"value": 8195
    }
    ,{
         "name": "SM_SYSTEMDOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": 8196
    }
    ,{
         "name": "PMB_ACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "MNC_IGNORE"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "MNC_CLOSE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "MNC_EXECUTE"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "MNC_SELECT"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "MNS_NOCHECK"
        ,"type": {"kind":"UInt32"}
        ,"value": 2147483648
    }
    ,{
         "name": "MNS_MODELESS"
        ,"type": {"kind":"UInt32"}
        ,"value": 1073741824
    }
    ,{
         "name": "MNS_DRAGDROP"
        ,"type": {"kind":"UInt32"}
        ,"value": 536870912
    }
    ,{
         "name": "MNS_AUTODISMISS"
        ,"type": {"kind":"UInt32"}
        ,"value": 268435456
    }
    ,{
         "name": "MNS_NOTIFYBYPOS"
        ,"type": {"kind":"UInt32"}
        ,"value": 134217728
    }
    ,{
         "name": "MNS_CHECKORBMP"
        ,"type": {"kind":"UInt32"}
        ,"value": 67108864
    }
    ,{
         "name": "MIM_MAXHEIGHT"
        ,"type": {"kind":"UInt32"}
        ,"value": 1
    }
    ,{
         "name": "MIM_BACKGROUND"
        ,"type": {"kind":"UInt32"}
        ,"value": 2
    }
    ,{
         "name": "MIM_HELPID"
        ,"type": {"kind":"UInt32"}
        ,"value": 4
    }
    ,{
         "name": "MIM_MENUDATA"
        ,"type": {"kind":"UInt32"}
        ,"value": 8
    }
    ,{
         "name": "MIM_STYLE"
        ,"type": {"kind":"UInt32"}
        ,"value": 16
    }
    ,{
         "name": "MIM_APPLYTOSUBMENUS"
        ,"type": {"kind":"UInt32"}
        ,"value": 2147483648
    }
    ,{
         "name": "MND_CONTINUE"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "MND_ENDMENU"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "MNGOF_TOPGAP"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "MNGOF_BOTTOMGAP"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "MNGO_NOINTERFACE"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "MNGO_NOERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "MIIM_STATE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "MIIM_ID"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "MIIM_SUBMENU"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "MIIM_CHECKMARKS"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "MIIM_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "MIIM_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "MIIM_STRING"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "MIIM_BITMAP"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "MIIM_FTYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "HBMMENU_CALLBACK"
        ,"type": {"kind":"Int32"}
        ,"value": -1
    }
    ,{
         "name": "HBMMENU_SYSTEM"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "HBMMENU_MBAR_RESTORE"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "HBMMENU_MBAR_MINIMIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "HBMMENU_MBAR_CLOSE"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "HBMMENU_MBAR_CLOSE_D"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "HBMMENU_MBAR_MINIMIZE_D"
        ,"type": {"kind":"Int32"}
        ,"value": 7
    }
    ,{
         "name": "HBMMENU_POPUP_CLOSE"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "HBMMENU_POPUP_RESTORE"
        ,"type": {"kind":"Int32"}
        ,"value": 9
    }
    ,{
         "name": "HBMMENU_POPUP_MAXIMIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 10
    }
    ,{
         "name": "HBMMENU_POPUP_MINIMIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 11
    }
    ,{
         "name": "TPM_LEFTBUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "TPM_RIGHTBUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "TPM_LEFTALIGN"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "TPM_CENTERALIGN"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "TPM_RIGHTALIGN"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "TPM_TOPALIGN"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "TPM_VCENTERALIGN"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "TPM_BOTTOMALIGN"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "TPM_HORIZONTAL"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "TPM_VERTICAL"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "TPM_NONOTIFY"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "TPM_RETURNCMD"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "TPM_RECURSE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "TPM_HORPOSANIMATION"
        ,"type": {"kind":"Int32"}
        ,"value": 1024
    }
    ,{
         "name": "TPM_HORNEGANIMATION"
        ,"type": {"kind":"Int32"}
        ,"value": 2048
    }
    ,{
         "name": "TPM_VERPOSANIMATION"
        ,"type": {"kind":"Int32"}
        ,"value": 4096
    }
    ,{
         "name": "TPM_VERNEGANIMATION"
        ,"type": {"kind":"Int32"}
        ,"value": 8192
    }
    ,{
         "name": "TPM_NOANIMATION"
        ,"type": {"kind":"Int32"}
        ,"value": 16384
    }
    ,{
         "name": "TPM_LAYOUTRTL"
        ,"type": {"kind":"Int32"}
        ,"value": 32768
    }
    ,{
         "name": "TPM_WORKAREA"
        ,"type": {"kind":"Int32"}
        ,"value": 65536
    }
    ,{
         "name": "DOF_EXECUTABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 32769
    }
    ,{
         "name": "DOF_DOCUMENT"
        ,"type": {"kind":"Int32"}
        ,"value": 32770
    }
    ,{
         "name": "DOF_DIRECTORY"
        ,"type": {"kind":"Int32"}
        ,"value": 32771
    }
    ,{
         "name": "DOF_MULTIPLE"
        ,"type": {"kind":"Int32"}
        ,"value": 32772
    }
    ,{
         "name": "DOF_PROGMAN"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "DOF_SHELLDATA"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "DO_DROPFILE"
        ,"type": {"kind":"Int32"}
        ,"value": 1162627398
    }
    ,{
         "name": "DO_PRINTFILE"
        ,"type": {"kind":"Int32"}
        ,"value": 1414419024
    }
    ,{
         "name": "DT_TOP"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "DT_LEFT"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "DT_CENTER"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "DT_RIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "DT_VCENTER"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "DT_BOTTOM"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "DT_WORDBREAK"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "DT_SINGLELINE"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "DT_EXPANDTABS"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "DT_TABSTOP"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "DT_NOCLIP"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "DT_EXTERNALLEADING"
        ,"type": {"kind":"Int32"}
        ,"value": 512
    }
    ,{
         "name": "DT_CALCRECT"
        ,"type": {"kind":"Int32"}
        ,"value": 1024
    }
    ,{
         "name": "DT_NOPREFIX"
        ,"type": {"kind":"Int32"}
        ,"value": 2048
    }
    ,{
         "name": "DT_INTERNAL"
        ,"type": {"kind":"Int32"}
        ,"value": 4096
    }
    ,{
         "name": "DT_EDITCONTROL"
        ,"type": {"kind":"Int32"}
        ,"value": 8192
    }
    ,{
         "name": "DT_PATH_ELLIPSIS"
        ,"type": {"kind":"Int32"}
        ,"value": 16384
    }
    ,{
         "name": "DT_END_ELLIPSIS"
        ,"type": {"kind":"Int32"}
        ,"value": 32768
    }
    ,{
         "name": "DT_MODIFYSTRING"
        ,"type": {"kind":"Int32"}
        ,"value": 65536
    }
    ,{
         "name": "DT_RTLREADING"
        ,"type": {"kind":"Int32"}
        ,"value": 131072
    }
    ,{
         "name": "DT_WORD_ELLIPSIS"
        ,"type": {"kind":"Int32"}
        ,"value": 262144
    }
    ,{
         "name": "DT_NOFULLWIDTHCHARBREAK"
        ,"type": {"kind":"Int32"}
        ,"value": 524288
    }
    ,{
         "name": "DT_HIDEPREFIX"
        ,"type": {"kind":"Int32"}
        ,"value": 1048576
    }
    ,{
         "name": "DT_PREFIXONLY"
        ,"type": {"kind":"Int32"}
        ,"value": 2097152
    }
    ,{
         "name": "DST_COMPLEX"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "DST_TEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "DST_PREFIXTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "DST_ICON"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "DST_BITMAP"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "DSS_NORMAL"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "DSS_UNION"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "DSS_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "DSS_MONO"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "DSS_HIDEPREFIX"
        ,"type": {"kind":"Int32"}
        ,"value": 512
    }
    ,{
         "name": "DSS_PREFIXONLY"
        ,"type": {"kind":"Int32"}
        ,"value": 1024
    }
    ,{
         "name": "DSS_RIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 32768
    }
    ,{
         "name": "ASFW_ANY"
        ,"type": {"kind":"UInt32"}
        ,"value": 4294967295
    }
    ,{
         "name": "LSFW_LOCK"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "LSFW_UNLOCK"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "DCX_WINDOW"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "DCX_CACHE"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "DCX_NORESETATTRS"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "DCX_CLIPCHILDREN"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "DCX_CLIPSIBLINGS"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "DCX_PARENTCLIP"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "DCX_EXCLUDERGN"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "DCX_INTERSECTRGN"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "DCX_EXCLUDEUPDATE"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "DCX_INTERSECTUPDATE"
        ,"type": {"kind":"Int32"}
        ,"value": 512
    }
    ,{
         "name": "DCX_LOCKWINDOWUPDATE"
        ,"type": {"kind":"Int32"}
        ,"value": 1024
    }
    ,{
         "name": "DCX_VALIDATE"
        ,"type": {"kind":"Int32"}
        ,"value": 2097152
    }
    ,{
         "name": "RDW_INVALIDATE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "RDW_INTERNALPAINT"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "RDW_ERASE"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "RDW_VALIDATE"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "RDW_NOINTERNALPAINT"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "RDW_NOERASE"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "RDW_NOCHILDREN"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "RDW_ALLCHILDREN"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "RDW_UPDATENOW"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "RDW_ERASENOW"
        ,"type": {"kind":"Int32"}
        ,"value": 512
    }
    ,{
         "name": "RDW_FRAME"
        ,"type": {"kind":"Int32"}
        ,"value": 1024
    }
    ,{
         "name": "RDW_NOFRAME"
        ,"type": {"kind":"Int32"}
        ,"value": 2048
    }
    ,{
         "name": "SW_SCROLLCHILDREN"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "SW_INVALIDATE"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "SW_ERASE"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "SW_SMOOTHSCROLL"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "ESB_ENABLE_BOTH"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "ESB_DISABLE_BOTH"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "ESB_DISABLE_LEFT"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "ESB_DISABLE_RIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "ESB_DISABLE_UP"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "ESB_DISABLE_DOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "ESB_DISABLE_LTUP"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "ESB_DISABLE_RTDN"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "HELPINFO_WINDOW"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "HELPINFO_MENUITEM"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "MB_OK"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "MB_OKCANCEL"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "MB_ABORTRETRYIGNORE"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "MB_YESNOCANCEL"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "MB_YESNO"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "MB_RETRYCANCEL"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "MB_CANCELTRYCONTINUE"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "MB_ICONHAND"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "MB_ICONQUESTION"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "MB_ICONEXCLAMATION"
        ,"type": {"kind":"Int32"}
        ,"value": 48
    }
    ,{
         "name": "MB_ICONASTERISK"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "MB_USERICON"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "MB_ICONWARNING"
        ,"type": {"kind":"Int32"}
        ,"value": 48
    }
    ,{
         "name": "MB_ICONERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "MB_ICONINFORMATION"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "MB_ICONSTOP"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "MB_DEFBUTTON1"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "MB_DEFBUTTON2"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "MB_DEFBUTTON3"
        ,"type": {"kind":"Int32"}
        ,"value": 512
    }
    ,{
         "name": "MB_DEFBUTTON4"
        ,"type": {"kind":"Int32"}
        ,"value": 768
    }
    ,{
         "name": "MB_APPLMODAL"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "MB_SYSTEMMODAL"
        ,"type": {"kind":"Int32"}
        ,"value": 4096
    }
    ,{
         "name": "MB_TASKMODAL"
        ,"type": {"kind":"Int32"}
        ,"value": 8192
    }
    ,{
         "name": "MB_HELP"
        ,"type": {"kind":"Int32"}
        ,"value": 16384
    }
    ,{
         "name": "MB_NOFOCUS"
        ,"type": {"kind":"Int32"}
        ,"value": 32768
    }
    ,{
         "name": "MB_SETFOREGROUND"
        ,"type": {"kind":"Int32"}
        ,"value": 65536
    }
    ,{
         "name": "MB_DEFAULT_DESKTOP_ONLY"
        ,"type": {"kind":"Int32"}
        ,"value": 131072
    }
    ,{
         "name": "MB_TOPMOST"
        ,"type": {"kind":"Int32"}
        ,"value": 262144
    }
    ,{
         "name": "MB_RIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 524288
    }
    ,{
         "name": "MB_RTLREADING"
        ,"type": {"kind":"Int32"}
        ,"value": 1048576
    }
    ,{
         "name": "MB_SERVICE_NOTIFICATION"
        ,"type": {"kind":"Int32"}
        ,"value": 2097152
    }
    ,{
         "name": "MB_SERVICE_NOTIFICATION_NT3X"
        ,"type": {"kind":"Int32"}
        ,"value": 262144
    }
    ,{
         "name": "MB_TYPEMASK"
        ,"type": {"kind":"Int32"}
        ,"value": 15
    }
    ,{
         "name": "MB_ICONMASK"
        ,"type": {"kind":"Int32"}
        ,"value": 240
    }
    ,{
         "name": "MB_DEFMASK"
        ,"type": {"kind":"Int32"}
        ,"value": 3840
    }
    ,{
         "name": "MB_MODEMASK"
        ,"type": {"kind":"Int32"}
        ,"value": 12288
    }
    ,{
         "name": "MB_MISCMASK"
        ,"type": {"kind":"Int32"}
        ,"value": 49152
    }
    ,{
         "name": "CWP_ALL"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "CWP_SKIPINVISIBLE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "CWP_SKIPDISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "CWP_SKIPTRANSPARENT"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "CTLCOLOR_MSGBOX"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "CTLCOLOR_EDIT"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "CTLCOLOR_LISTBOX"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "CTLCOLOR_BTN"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "CTLCOLOR_DLG"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "CTLCOLOR_SCROLLBAR"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "CTLCOLOR_STATIC"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "CTLCOLOR_MAX"
        ,"type": {"kind":"Int32"}
        ,"value": 7
    }
    ,{
         "name": "COLOR_SCROLLBAR"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "COLOR_BACKGROUND"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "COLOR_ACTIVECAPTION"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "COLOR_INACTIVECAPTION"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "COLOR_MENU"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "COLOR_WINDOW"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "COLOR_WINDOWFRAME"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "COLOR_MENUTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 7
    }
    ,{
         "name": "COLOR_WINDOWTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "COLOR_CAPTIONTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 9
    }
    ,{
         "name": "COLOR_ACTIVEBORDER"
        ,"type": {"kind":"Int32"}
        ,"value": 10
    }
    ,{
         "name": "COLOR_INACTIVEBORDER"
        ,"type": {"kind":"Int32"}
        ,"value": 11
    }
    ,{
         "name": "COLOR_APPWORKSPACE"
        ,"type": {"kind":"Int32"}
        ,"value": 12
    }
    ,{
         "name": "COLOR_HIGHLIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 13
    }
    ,{
         "name": "COLOR_HIGHLIGHTTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 14
    }
    ,{
         "name": "COLOR_BTNFACE"
        ,"type": {"kind":"Int32"}
        ,"value": 15
    }
    ,{
         "name": "COLOR_BTNSHADOW"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "COLOR_GRAYTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 17
    }
    ,{
         "name": "COLOR_BTNTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 18
    }
    ,{
         "name": "COLOR_INACTIVECAPTIONTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 19
    }
    ,{
         "name": "COLOR_BTNHIGHLIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 20
    }
    ,{
         "name": "COLOR_3DDKSHADOW"
        ,"type": {"kind":"Int32"}
        ,"value": 21
    }
    ,{
         "name": "COLOR_3DLIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 22
    }
    ,{
         "name": "COLOR_INFOTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 23
    }
    ,{
         "name": "COLOR_INFOBK"
        ,"type": {"kind":"Int32"}
        ,"value": 24
    }
    ,{
         "name": "COLOR_HOTLIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 26
    }
    ,{
         "name": "COLOR_GRADIENTACTIVECAPTION"
        ,"type": {"kind":"Int32"}
        ,"value": 27
    }
    ,{
         "name": "COLOR_GRADIENTINACTIVECAPTION"
        ,"type": {"kind":"Int32"}
        ,"value": 28
    }
    ,{
         "name": "COLOR_MENUHILIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 29
    }
    ,{
         "name": "COLOR_MENUBAR"
        ,"type": {"kind":"Int32"}
        ,"value": 30
    }
    ,{
         "name": "COLOR_DESKTOP"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "COLOR_3DFACE"
        ,"type": {"kind":"Int32"}
        ,"value": 15
    }
    ,{
         "name": "COLOR_3DSHADOW"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "COLOR_3DHIGHLIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 20
    }
    ,{
         "name": "COLOR_3DHILIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 20
    }
    ,{
         "name": "COLOR_BTNHILIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 20
    }
    ,{
         "name": "GW_HWNDFIRST"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "GW_HWNDLAST"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "GW_HWNDNEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "GW_HWNDPREV"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "GW_OWNER"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "GW_CHILD"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "GW_ENABLEDPOPUP"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "GW_MAX"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "MF_INSERT"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "MF_CHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "MF_APPEND"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "MF_DELETE"
        ,"type": {"kind":"Int32"}
        ,"value": 512
    }
    ,{
         "name": "MF_REMOVE"
        ,"type": {"kind":"Int32"}
        ,"value": 4096
    }
    ,{
         "name": "MF_BYCOMMAND"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "MF_BYPOSITION"
        ,"type": {"kind":"Int32"}
        ,"value": 1024
    }
    ,{
         "name": "MF_SEPARATOR"
        ,"type": {"kind":"Int32"}
        ,"value": 2048
    }
    ,{
         "name": "MF_ENABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "MF_GRAYED"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "MF_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "MF_UNCHECKED"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "MF_CHECKED"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "MF_USECHECKBITMAPS"
        ,"type": {"kind":"Int32"}
        ,"value": 512
    }
    ,{
         "name": "MF_STRING"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "MF_BITMAP"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "MF_OWNERDRAW"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "MF_POPUP"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "MF_MENUBARBREAK"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "MF_MENUBREAK"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "MF_UNHILITE"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "MF_HILITE"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "MF_DEFAULT"
        ,"type": {"kind":"Int32"}
        ,"value": 4096
    }
    ,{
         "name": "MF_SYSMENU"
        ,"type": {"kind":"Int32"}
        ,"value": 8192
    }
    ,{
         "name": "MF_HELP"
        ,"type": {"kind":"Int32"}
        ,"value": 16384
    }
    ,{
         "name": "MF_RIGHTJUSTIFY"
        ,"type": {"kind":"Int32"}
        ,"value": 16384
    }
    ,{
         "name": "MF_MOUSESELECT"
        ,"type": {"kind":"Int32"}
        ,"value": 32768
    }
    ,{
         "name": "MF_END"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "MFT_STRING"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "MFT_BITMAP"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "MFT_MENUBARBREAK"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "MFT_MENUBREAK"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "MFT_OWNERDRAW"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "MFT_RADIOCHECK"
        ,"type": {"kind":"Int32"}
        ,"value": 512
    }
    ,{
         "name": "MFT_SEPARATOR"
        ,"type": {"kind":"Int32"}
        ,"value": 2048
    }
    ,{
         "name": "MFT_RIGHTORDER"
        ,"type": {"kind":"Int32"}
        ,"value": 8192
    }
    ,{
         "name": "MFT_RIGHTJUSTIFY"
        ,"type": {"kind":"Int32"}
        ,"value": 16384
    }
    ,{
         "name": "MFS_GRAYED"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "MFS_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "MFS_CHECKED"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "MFS_HILITE"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "MFS_ENABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "MFS_UNCHECKED"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "MFS_UNHILITE"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "MFS_DEFAULT"
        ,"type": {"kind":"Int32"}
        ,"value": 4096
    }
    ,{
         "name": "SC_SIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 61440
    }
    ,{
         "name": "SC_MOVE"
        ,"type": {"kind":"Int32"}
        ,"value": 61456
    }
    ,{
         "name": "SC_MINIMIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 61472
    }
    ,{
         "name": "SC_MAXIMIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 61488
    }
    ,{
         "name": "SC_NEXTWINDOW"
        ,"type": {"kind":"Int32"}
        ,"value": 61504
    }
    ,{
         "name": "SC_PREVWINDOW"
        ,"type": {"kind":"Int32"}
        ,"value": 61520
    }
    ,{
         "name": "SC_CLOSE"
        ,"type": {"kind":"Int32"}
        ,"value": 61536
    }
    ,{
         "name": "SC_VSCROLL"
        ,"type": {"kind":"Int32"}
        ,"value": 61552
    }
    ,{
         "name": "SC_HSCROLL"
        ,"type": {"kind":"Int32"}
        ,"value": 61568
    }
    ,{
         "name": "SC_MOUSEMENU"
        ,"type": {"kind":"Int32"}
        ,"value": 61584
    }
    ,{
         "name": "SC_KEYMENU"
        ,"type": {"kind":"Int32"}
        ,"value": 61696
    }
    ,{
         "name": "SC_ARRANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 61712
    }
    ,{
         "name": "SC_RESTORE"
        ,"type": {"kind":"Int32"}
        ,"value": 61728
    }
    ,{
         "name": "SC_TASKLIST"
        ,"type": {"kind":"Int32"}
        ,"value": 61744
    }
    ,{
         "name": "SC_SCREENSAVE"
        ,"type": {"kind":"Int32"}
        ,"value": 61760
    }
    ,{
         "name": "SC_HOTKEY"
        ,"type": {"kind":"Int32"}
        ,"value": 61776
    }
    ,{
         "name": "SC_DEFAULT"
        ,"type": {"kind":"Int32"}
        ,"value": 61792
    }
    ,{
         "name": "SC_MONITORPOWER"
        ,"type": {"kind":"Int32"}
        ,"value": 61808
    }
    ,{
         "name": "SC_CONTEXTHELP"
        ,"type": {"kind":"Int32"}
        ,"value": 61824
    }
    ,{
         "name": "SC_SEPARATOR"
        ,"type": {"kind":"Int32"}
        ,"value": 61455
    }
    ,{
         "name": "SCF_ISSECURE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "SC_ICON"
        ,"type": {"kind":"Int32"}
        ,"value": 61472
    }
    ,{
         "name": "SC_ZOOM"
        ,"type": {"kind":"Int32"}
        ,"value": 61488
    }
    ,{
         "name": "IDC_ARROW"
        ,"type": {"kind":"UInt16"}
        ,"value": 32512
    }
    ,{
         "name": "IDC_IBEAM"
        ,"type": {"kind":"UInt16"}
        ,"value": 32513
    }
    ,{
         "name": "IDC_WAIT"
        ,"type": {"kind":"UInt16"}
        ,"value": 32514
    }
    ,{
         "name": "IDC_CROSS"
        ,"type": {"kind":"UInt16"}
        ,"value": 32515
    }
    ,{
         "name": "IDC_UPARROW"
        ,"type": {"kind":"UInt16"}
        ,"value": 32516
    }
    ,{
        // [Obselete("use IDC_SIZEALL")] (TODO: can Zig do something with this?)
         "name": "IDC_SIZE"
        ,"type": {"kind":"UInt16"}
        ,"value": 32640
    }
    ,{
        // [Obselete("use IDC_ARROW")] (TODO: can Zig do something with this?)
         "name": "IDC_ICON"
        ,"type": {"kind":"UInt16"}
        ,"value": 32641
    }
    ,{
         "name": "IDC_SIZENWSE"
        ,"type": {"kind":"UInt16"}
        ,"value": 32642
    }
    ,{
         "name": "IDC_SIZENESW"
        ,"type": {"kind":"UInt16"}
        ,"value": 32643
    }
    ,{
         "name": "IDC_SIZEWE"
        ,"type": {"kind":"UInt16"}
        ,"value": 32644
    }
    ,{
         "name": "IDC_SIZENS"
        ,"type": {"kind":"UInt16"}
        ,"value": 32645
    }
    ,{
         "name": "IDC_SIZEALL"
        ,"type": {"kind":"UInt16"}
        ,"value": 32646
    }
    ,{
         "name": "IDC_NO"
        ,"type": {"kind":"UInt16"}
        ,"value": 32648
    }
    ,{
         "name": "IDC_HAND"
        ,"type": {"kind":"UInt16"}
        ,"value": 32649
    }
    ,{
         "name": "IDC_APPSTARTING"
        ,"type": {"kind":"Int32"}
        ,"value": 32650
    }
    ,{
         "name": "IDC_HELP"
        ,"type": {"kind":"Int32"}
        ,"value": 32651
    }
    ,{
         "name": "IDC_PIN"
        ,"type": {"kind":"Int32"}
        ,"value": 32671
    }
    ,{
         "name": "IDC_PERSON"
        ,"type": {"kind":"Int32"}
        ,"value": 32672
    }
    ,{
         "name": "IMAGE_BITMAP"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "IMAGE_ICON"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "IMAGE_CURSOR"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "IMAGE_ENHMETAFILE"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "LR_DEFAULTCOLOR"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "LR_MONOCHROME"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "LR_COLOR"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "LR_COPYRETURNORG"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "LR_COPYDELETEORG"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "LR_LOADFROMFILE"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "LR_LOADTRANSPARENT"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "LR_DEFAULTSIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "LR_VGACOLOR"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "LR_LOADMAP3DCOLORS"
        ,"type": {"kind":"Int32"}
        ,"value": 4096
    }
    ,{
         "name": "LR_CREATEDIBSECTION"
        ,"type": {"kind":"Int32"}
        ,"value": 8192
    }
    ,{
         "name": "LR_COPYFROMRESOURCE"
        ,"type": {"kind":"Int32"}
        ,"value": 16384
    }
    ,{
         "name": "LR_SHARED"
        ,"type": {"kind":"Int32"}
        ,"value": 32768
    }
    ,{
         "name": "DI_MASK"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "DI_IMAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "DI_NORMAL"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "DI_COMPAT"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "DI_DEFAULTSIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "DI_NOMIRROR"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "RES_ICON"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "RES_CURSOR"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "OBM_CLOSE"
        ,"type": {"kind":"Int32"}
        ,"value": 32754
    }
    ,{
         "name": "OBM_UPARROW"
        ,"type": {"kind":"Int32"}
        ,"value": 32753
    }
    ,{
         "name": "OBM_DNARROW"
        ,"type": {"kind":"Int32"}
        ,"value": 32752
    }
    ,{
         "name": "OBM_RGARROW"
        ,"type": {"kind":"Int32"}
        ,"value": 32751
    }
    ,{
         "name": "OBM_LFARROW"
        ,"type": {"kind":"Int32"}
        ,"value": 32750
    }
    ,{
         "name": "OBM_REDUCE"
        ,"type": {"kind":"Int32"}
        ,"value": 32749
    }
    ,{
         "name": "OBM_ZOOM"
        ,"type": {"kind":"Int32"}
        ,"value": 32748
    }
    ,{
         "name": "OBM_RESTORE"
        ,"type": {"kind":"Int32"}
        ,"value": 32747
    }
    ,{
         "name": "OBM_REDUCED"
        ,"type": {"kind":"Int32"}
        ,"value": 32746
    }
    ,{
         "name": "OBM_ZOOMD"
        ,"type": {"kind":"Int32"}
        ,"value": 32745
    }
    ,{
         "name": "OBM_RESTORED"
        ,"type": {"kind":"Int32"}
        ,"value": 32744
    }
    ,{
         "name": "OBM_UPARROWD"
        ,"type": {"kind":"Int32"}
        ,"value": 32743
    }
    ,{
         "name": "OBM_DNARROWD"
        ,"type": {"kind":"Int32"}
        ,"value": 32742
    }
    ,{
         "name": "OBM_RGARROWD"
        ,"type": {"kind":"Int32"}
        ,"value": 32741
    }
    ,{
         "name": "OBM_LFARROWD"
        ,"type": {"kind":"Int32"}
        ,"value": 32740
    }
    ,{
         "name": "OBM_MNARROW"
        ,"type": {"kind":"Int32"}
        ,"value": 32739
    }
    ,{
         "name": "OBM_COMBO"
        ,"type": {"kind":"Int32"}
        ,"value": 32738
    }
    ,{
         "name": "OBM_UPARROWI"
        ,"type": {"kind":"Int32"}
        ,"value": 32737
    }
    ,{
         "name": "OBM_DNARROWI"
        ,"type": {"kind":"Int32"}
        ,"value": 32736
    }
    ,{
         "name": "OBM_RGARROWI"
        ,"type": {"kind":"Int32"}
        ,"value": 32735
    }
    ,{
         "name": "OBM_LFARROWI"
        ,"type": {"kind":"Int32"}
        ,"value": 32734
    }
    ,{
         "name": "OBM_OLD_CLOSE"
        ,"type": {"kind":"Int32"}
        ,"value": 32767
    }
    ,{
         "name": "OBM_SIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 32766
    }
    ,{
         "name": "OBM_OLD_UPARROW"
        ,"type": {"kind":"Int32"}
        ,"value": 32765
    }
    ,{
         "name": "OBM_OLD_DNARROW"
        ,"type": {"kind":"Int32"}
        ,"value": 32764
    }
    ,{
         "name": "OBM_OLD_RGARROW"
        ,"type": {"kind":"Int32"}
        ,"value": 32763
    }
    ,{
         "name": "OBM_OLD_LFARROW"
        ,"type": {"kind":"Int32"}
        ,"value": 32762
    }
    ,{
         "name": "OBM_BTSIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 32761
    }
    ,{
         "name": "OBM_CHECK"
        ,"type": {"kind":"Int32"}
        ,"value": 32760
    }
    ,{
         "name": "OBM_CHECKBOXES"
        ,"type": {"kind":"Int32"}
        ,"value": 32759
    }
    ,{
         "name": "OBM_BTNCORNERS"
        ,"type": {"kind":"Int32"}
        ,"value": 32758
    }
    ,{
         "name": "OBM_OLD_REDUCE"
        ,"type": {"kind":"Int32"}
        ,"value": 32757
    }
    ,{
         "name": "OBM_OLD_ZOOM"
        ,"type": {"kind":"Int32"}
        ,"value": 32756
    }
    ,{
         "name": "OBM_OLD_RESTORE"
        ,"type": {"kind":"Int32"}
        ,"value": 32755
    }
    ,{
         "name": "OCR_NORMAL"
        ,"type": {"kind":"Int32"}
        ,"value": 32512
    }
    ,{
         "name": "OCR_IBEAM"
        ,"type": {"kind":"Int32"}
        ,"value": 32513
    }
    ,{
         "name": "OCR_WAIT"
        ,"type": {"kind":"Int32"}
        ,"value": 32514
    }
    ,{
         "name": "OCR_CROSS"
        ,"type": {"kind":"Int32"}
        ,"value": 32515
    }
    ,{
         "name": "OCR_UP"
        ,"type": {"kind":"Int32"}
        ,"value": 32516
    }
    ,{
        // [Obselete("use OCR_SIZEALL")] (TODO: can Zig do something with this?)
         "name": "OCR_SIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 32640
    }
    ,{
        // [Obselete("use OCR_NORMAL")] (TODO: can Zig do something with this?)
         "name": "OCR_ICON"
        ,"type": {"kind":"Int32"}
        ,"value": 32641
    }
    ,{
         "name": "OCR_SIZENWSE"
        ,"type": {"kind":"Int32"}
        ,"value": 32642
    }
    ,{
         "name": "OCR_SIZENESW"
        ,"type": {"kind":"Int32"}
        ,"value": 32643
    }
    ,{
         "name": "OCR_SIZEWE"
        ,"type": {"kind":"Int32"}
        ,"value": 32644
    }
    ,{
         "name": "OCR_SIZENS"
        ,"type": {"kind":"Int32"}
        ,"value": 32645
    }
    ,{
         "name": "OCR_SIZEALL"
        ,"type": {"kind":"Int32"}
        ,"value": 32646
    }
    ,{
        // [Obselete("use OIC_WINLOGO")] (TODO: can Zig do something with this?)
         "name": "OCR_ICOCUR"
        ,"type": {"kind":"Int32"}
        ,"value": 32647
    }
    ,{
         "name": "OCR_NO"
        ,"type": {"kind":"Int32"}
        ,"value": 32648
    }
    ,{
         "name": "OCR_HAND"
        ,"type": {"kind":"Int32"}
        ,"value": 32649
    }
    ,{
         "name": "OCR_APPSTARTING"
        ,"type": {"kind":"Int32"}
        ,"value": 32650
    }
    ,{
         "name": "OIC_SAMPLE"
        ,"type": {"kind":"Int32"}
        ,"value": 32512
    }
    ,{
         "name": "OIC_HAND"
        ,"type": {"kind":"Int32"}
        ,"value": 32513
    }
    ,{
         "name": "OIC_QUES"
        ,"type": {"kind":"Int32"}
        ,"value": 32514
    }
    ,{
         "name": "OIC_BANG"
        ,"type": {"kind":"Int32"}
        ,"value": 32515
    }
    ,{
         "name": "OIC_NOTE"
        ,"type": {"kind":"Int32"}
        ,"value": 32516
    }
    ,{
         "name": "OIC_WINLOGO"
        ,"type": {"kind":"Int32"}
        ,"value": 32517
    }
    ,{
         "name": "OIC_WARNING"
        ,"type": {"kind":"Int32"}
        ,"value": 32515
    }
    ,{
         "name": "OIC_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 32513
    }
    ,{
         "name": "OIC_INFORMATION"
        ,"type": {"kind":"Int32"}
        ,"value": 32516
    }
    ,{
         "name": "OIC_SHIELD"
        ,"type": {"kind":"Int32"}
        ,"value": 32518
    }
    ,{
         "name": "ORD_LANGDRIVER"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "IDI_APPLICATION"
        ,"type": {"kind":"UInt16"}
        ,"value": 32512
    }
    ,{
         "name": "IDI_HAND"
        ,"type": {"kind":"UInt16"}
        ,"value": 32513
    }
    ,{
         "name": "IDI_QUESTION"
        ,"type": {"kind":"UInt16"}
        ,"value": 32514
    }
    ,{
         "name": "IDI_EXCLAMATION"
        ,"type": {"kind":"UInt16"}
        ,"value": 32515
    }
    ,{
         "name": "IDI_ASTERISK"
        ,"type": {"kind":"UInt16"}
        ,"value": 32516
    }
    ,{
         "name": "IDI_WINLOGO"
        ,"type": {"kind":"UInt16"}
        ,"value": 32517
    }
    ,{
         "name": "IDI_SHIELD"
        ,"type": {"kind":"UInt16"}
        ,"value": 32518
    }
    ,{
         "name": "IDI_WARNING"
        ,"type": {"kind":"UInt16"}
        ,"value": 32515
    }
    ,{
         "name": "IDI_ERROR"
        ,"type": {"kind":"UInt16"}
        ,"value": 32513
    }
    ,{
         "name": "IDI_INFORMATION"
        ,"type": {"kind":"UInt16"}
        ,"value": 32516
    }
    ,{
         "name": "IDOK"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "IDCANCEL"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "IDABORT"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "IDRETRY"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "IDIGNORE"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "IDYES"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "IDNO"
        ,"type": {"kind":"Int32"}
        ,"value": 7
    }
    ,{
         "name": "IDCLOSE"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "IDHELP"
        ,"type": {"kind":"Int32"}
        ,"value": 9
    }
    ,{
         "name": "IDTRYAGAIN"
        ,"type": {"kind":"Int32"}
        ,"value": 10
    }
    ,{
         "name": "IDCONTINUE"
        ,"type": {"kind":"Int32"}
        ,"value": 11
    }
    ,{
         "name": "IDTIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 32000
    }
    ,{
         "name": "ES_LEFT"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "ES_CENTER"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "ES_RIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "ES_MULTILINE"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "ES_UPPERCASE"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "ES_LOWERCASE"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "ES_PASSWORD"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "ES_AUTOVSCROLL"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "ES_AUTOHSCROLL"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "ES_NOHIDESEL"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "ES_OEMCONVERT"
        ,"type": {"kind":"Int32"}
        ,"value": 1024
    }
    ,{
         "name": "ES_READONLY"
        ,"type": {"kind":"Int32"}
        ,"value": 2048
    }
    ,{
         "name": "ES_WANTRETURN"
        ,"type": {"kind":"Int32"}
        ,"value": 4096
    }
    ,{
         "name": "ES_NUMBER"
        ,"type": {"kind":"Int32"}
        ,"value": 8192
    }
    ,{
         "name": "EN_SETFOCUS"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "EN_KILLFOCUS"
        ,"type": {"kind":"Int32"}
        ,"value": 512
    }
    ,{
         "name": "EN_CHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 768
    }
    ,{
         "name": "EN_UPDATE"
        ,"type": {"kind":"Int32"}
        ,"value": 1024
    }
    ,{
         "name": "EN_ERRSPACE"
        ,"type": {"kind":"Int32"}
        ,"value": 1280
    }
    ,{
         "name": "EN_MAXTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 1281
    }
    ,{
         "name": "EN_HSCROLL"
        ,"type": {"kind":"Int32"}
        ,"value": 1537
    }
    ,{
         "name": "EN_VSCROLL"
        ,"type": {"kind":"Int32"}
        ,"value": 1538
    }
    ,{
         "name": "EN_ALIGN_LTR_EC"
        ,"type": {"kind":"Int32"}
        ,"value": 1792
    }
    ,{
         "name": "EN_ALIGN_RTL_EC"
        ,"type": {"kind":"Int32"}
        ,"value": 1793
    }
    ,{
         "name": "EN_BEFORE_PASTE"
        ,"type": {"kind":"Int32"}
        ,"value": 2048
    }
    ,{
         "name": "EN_AFTER_PASTE"
        ,"type": {"kind":"Int32"}
        ,"value": 2049
    }
    ,{
         "name": "EC_LEFTMARGIN"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "EC_RIGHTMARGIN"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "EC_USEFONTINFO"
        ,"type": {"kind":"Int32"}
        ,"value": 65535
    }
    ,{
         "name": "EMSIS_COMPOSITIONSTRING"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "EIMES_GETCOMPSTRATONCE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "EIMES_CANCELCOMPSTRINFOCUS"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "EIMES_COMPLETECOMPSTRKILLFOCUS"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "EM_GETSEL"
        ,"type": {"kind":"Int32"}
        ,"value": 176
    }
    ,{
         "name": "EM_SETSEL"
        ,"type": {"kind":"Int32"}
        ,"value": 177
    }
    ,{
         "name": "EM_GETRECT"
        ,"type": {"kind":"Int32"}
        ,"value": 178
    }
    ,{
         "name": "EM_SETRECT"
        ,"type": {"kind":"Int32"}
        ,"value": 179
    }
    ,{
         "name": "EM_SETRECTNP"
        ,"type": {"kind":"Int32"}
        ,"value": 180
    }
    ,{
         "name": "EM_SCROLL"
        ,"type": {"kind":"Int32"}
        ,"value": 181
    }
    ,{
         "name": "EM_LINESCROLL"
        ,"type": {"kind":"Int32"}
        ,"value": 182
    }
    ,{
         "name": "EM_SCROLLCARET"
        ,"type": {"kind":"Int32"}
        ,"value": 183
    }
    ,{
         "name": "EM_GETMODIFY"
        ,"type": {"kind":"Int32"}
        ,"value": 184
    }
    ,{
         "name": "EM_SETMODIFY"
        ,"type": {"kind":"Int32"}
        ,"value": 185
    }
    ,{
         "name": "EM_GETLINECOUNT"
        ,"type": {"kind":"Int32"}
        ,"value": 186
    }
    ,{
         "name": "EM_LINEINDEX"
        ,"type": {"kind":"Int32"}
        ,"value": 187
    }
    ,{
         "name": "EM_SETHANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": 188
    }
    ,{
         "name": "EM_GETHANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": 189
    }
    ,{
         "name": "EM_GETTHUMB"
        ,"type": {"kind":"Int32"}
        ,"value": 190
    }
    ,{
         "name": "EM_LINELENGTH"
        ,"type": {"kind":"Int32"}
        ,"value": 193
    }
    ,{
         "name": "EM_REPLACESEL"
        ,"type": {"kind":"Int32"}
        ,"value": 194
    }
    ,{
         "name": "EM_GETLINE"
        ,"type": {"kind":"Int32"}
        ,"value": 196
    }
    ,{
         "name": "EM_LIMITTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 197
    }
    ,{
         "name": "EM_CANUNDO"
        ,"type": {"kind":"Int32"}
        ,"value": 198
    }
    ,{
         "name": "EM_UNDO"
        ,"type": {"kind":"Int32"}
        ,"value": 199
    }
    ,{
         "name": "EM_FMTLINES"
        ,"type": {"kind":"Int32"}
        ,"value": 200
    }
    ,{
         "name": "EM_LINEFROMCHAR"
        ,"type": {"kind":"Int32"}
        ,"value": 201
    }
    ,{
         "name": "EM_SETTABSTOPS"
        ,"type": {"kind":"Int32"}
        ,"value": 203
    }
    ,{
         "name": "EM_SETPASSWORDCHAR"
        ,"type": {"kind":"Int32"}
        ,"value": 204
    }
    ,{
         "name": "EM_EMPTYUNDOBUFFER"
        ,"type": {"kind":"Int32"}
        ,"value": 205
    }
    ,{
         "name": "EM_GETFIRSTVISIBLELINE"
        ,"type": {"kind":"Int32"}
        ,"value": 206
    }
    ,{
         "name": "EM_SETREADONLY"
        ,"type": {"kind":"Int32"}
        ,"value": 207
    }
    ,{
         "name": "EM_SETWORDBREAKPROC"
        ,"type": {"kind":"Int32"}
        ,"value": 208
    }
    ,{
         "name": "EM_GETWORDBREAKPROC"
        ,"type": {"kind":"Int32"}
        ,"value": 209
    }
    ,{
         "name": "EM_GETPASSWORDCHAR"
        ,"type": {"kind":"Int32"}
        ,"value": 210
    }
    ,{
         "name": "EM_SETMARGINS"
        ,"type": {"kind":"Int32"}
        ,"value": 211
    }
    ,{
         "name": "EM_GETMARGINS"
        ,"type": {"kind":"Int32"}
        ,"value": 212
    }
    ,{
         "name": "EM_SETLIMITTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 197
    }
    ,{
         "name": "EM_GETLIMITTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 213
    }
    ,{
         "name": "EM_POSFROMCHAR"
        ,"type": {"kind":"Int32"}
        ,"value": 214
    }
    ,{
         "name": "EM_CHARFROMPOS"
        ,"type": {"kind":"Int32"}
        ,"value": 215
    }
    ,{
         "name": "EM_SETIMESTATUS"
        ,"type": {"kind":"Int32"}
        ,"value": 216
    }
    ,{
         "name": "EM_GETIMESTATUS"
        ,"type": {"kind":"Int32"}
        ,"value": 217
    }
    ,{
         "name": "EM_ENABLEFEATURE"
        ,"type": {"kind":"Int32"}
        ,"value": 218
    }
    ,{
         "name": "WB_LEFT"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "WB_RIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "WB_ISDELIMITER"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "BS_PUSHBUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "BS_DEFPUSHBUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "BS_CHECKBOX"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "BS_AUTOCHECKBOX"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "BS_RADIOBUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "BS_3STATE"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "BS_AUTO3STATE"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "BS_GROUPBOX"
        ,"type": {"kind":"Int32"}
        ,"value": 7
    }
    ,{
         "name": "BS_USERBUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "BS_AUTORADIOBUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 9
    }
    ,{
         "name": "BS_PUSHBOX"
        ,"type": {"kind":"Int32"}
        ,"value": 10
    }
    ,{
         "name": "BS_OWNERDRAW"
        ,"type": {"kind":"Int32"}
        ,"value": 11
    }
    ,{
         "name": "BS_TYPEMASK"
        ,"type": {"kind":"Int32"}
        ,"value": 15
    }
    ,{
         "name": "BS_LEFTTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "BS_TEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "BS_ICON"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "BS_BITMAP"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "BS_LEFT"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "BS_RIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 512
    }
    ,{
         "name": "BS_CENTER"
        ,"type": {"kind":"Int32"}
        ,"value": 768
    }
    ,{
         "name": "BS_TOP"
        ,"type": {"kind":"Int32"}
        ,"value": 1024
    }
    ,{
         "name": "BS_BOTTOM"
        ,"type": {"kind":"Int32"}
        ,"value": 2048
    }
    ,{
         "name": "BS_VCENTER"
        ,"type": {"kind":"Int32"}
        ,"value": 3072
    }
    ,{
         "name": "BS_PUSHLIKE"
        ,"type": {"kind":"Int32"}
        ,"value": 4096
    }
    ,{
         "name": "BS_MULTILINE"
        ,"type": {"kind":"Int32"}
        ,"value": 8192
    }
    ,{
         "name": "BS_NOTIFY"
        ,"type": {"kind":"Int32"}
        ,"value": 16384
    }
    ,{
         "name": "BS_FLAT"
        ,"type": {"kind":"Int32"}
        ,"value": 32768
    }
    ,{
         "name": "BS_RIGHTBUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "BN_CLICKED"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "BN_PAINT"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "BN_HILITE"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "BN_UNHILITE"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "BN_DISABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "BN_DOUBLECLICKED"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "BN_PUSHED"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "BN_UNPUSHED"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "BN_DBLCLK"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "BN_SETFOCUS"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "BN_KILLFOCUS"
        ,"type": {"kind":"Int32"}
        ,"value": 7
    }
    ,{
         "name": "BM_GETCHECK"
        ,"type": {"kind":"Int32"}
        ,"value": 240
    }
    ,{
         "name": "BM_SETCHECK"
        ,"type": {"kind":"Int32"}
        ,"value": 241
    }
    ,{
         "name": "BM_GETSTATE"
        ,"type": {"kind":"Int32"}
        ,"value": 242
    }
    ,{
         "name": "BM_SETSTATE"
        ,"type": {"kind":"Int32"}
        ,"value": 243
    }
    ,{
         "name": "BM_SETSTYLE"
        ,"type": {"kind":"Int32"}
        ,"value": 244
    }
    ,{
         "name": "BM_CLICK"
        ,"type": {"kind":"Int32"}
        ,"value": 245
    }
    ,{
         "name": "BM_GETIMAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 246
    }
    ,{
         "name": "BM_SETIMAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 247
    }
    ,{
         "name": "BM_SETDONTCLICK"
        ,"type": {"kind":"Int32"}
        ,"value": 248
    }
    ,{
         "name": "BST_UNCHECKED"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "BST_CHECKED"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "BST_INDETERMINATE"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "BST_PUSHED"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "BST_FOCUS"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "SS_LEFT"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "SS_CENTER"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "SS_RIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "SS_ICON"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "SS_BLACKRECT"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "SS_GRAYRECT"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "SS_WHITERECT"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "SS_BLACKFRAME"
        ,"type": {"kind":"Int32"}
        ,"value": 7
    }
    ,{
         "name": "SS_GRAYFRAME"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "SS_WHITEFRAME"
        ,"type": {"kind":"Int32"}
        ,"value": 9
    }
    ,{
         "name": "SS_USERITEM"
        ,"type": {"kind":"Int32"}
        ,"value": 10
    }
    ,{
         "name": "SS_SIMPLE"
        ,"type": {"kind":"Int32"}
        ,"value": 11
    }
    ,{
         "name": "SS_LEFTNOWORDWRAP"
        ,"type": {"kind":"Int32"}
        ,"value": 12
    }
    ,{
         "name": "SS_OWNERDRAW"
        ,"type": {"kind":"Int32"}
        ,"value": 13
    }
    ,{
         "name": "SS_BITMAP"
        ,"type": {"kind":"Int32"}
        ,"value": 14
    }
    ,{
         "name": "SS_ENHMETAFILE"
        ,"type": {"kind":"Int32"}
        ,"value": 15
    }
    ,{
         "name": "SS_ETCHEDHORZ"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "SS_ETCHEDVERT"
        ,"type": {"kind":"Int32"}
        ,"value": 17
    }
    ,{
         "name": "SS_ETCHEDFRAME"
        ,"type": {"kind":"Int32"}
        ,"value": 18
    }
    ,{
         "name": "SS_TYPEMASK"
        ,"type": {"kind":"Int32"}
        ,"value": 31
    }
    ,{
         "name": "SS_REALSIZECONTROL"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "SS_NOPREFIX"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "SS_NOTIFY"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "SS_CENTERIMAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 512
    }
    ,{
         "name": "SS_RIGHTJUST"
        ,"type": {"kind":"Int32"}
        ,"value": 1024
    }
    ,{
         "name": "SS_REALSIZEIMAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 2048
    }
    ,{
         "name": "SS_SUNKEN"
        ,"type": {"kind":"Int32"}
        ,"value": 4096
    }
    ,{
         "name": "SS_EDITCONTROL"
        ,"type": {"kind":"Int32"}
        ,"value": 8192
    }
    ,{
         "name": "SS_ENDELLIPSIS"
        ,"type": {"kind":"Int32"}
        ,"value": 16384
    }
    ,{
         "name": "SS_PATHELLIPSIS"
        ,"type": {"kind":"Int32"}
        ,"value": 32768
    }
    ,{
         "name": "SS_WORDELLIPSIS"
        ,"type": {"kind":"Int32"}
        ,"value": 49152
    }
    ,{
         "name": "SS_ELLIPSISMASK"
        ,"type": {"kind":"Int32"}
        ,"value": 49152
    }
    ,{
         "name": "STM_SETICON"
        ,"type": {"kind":"Int32"}
        ,"value": 368
    }
    ,{
         "name": "STM_GETICON"
        ,"type": {"kind":"Int32"}
        ,"value": 369
    }
    ,{
         "name": "STM_SETIMAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 370
    }
    ,{
         "name": "STM_GETIMAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 371
    }
    ,{
         "name": "STN_CLICKED"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "STN_DBLCLK"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "STN_ENABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "STN_DISABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "STM_MSGMAX"
        ,"type": {"kind":"Int32"}
        ,"value": 372
    }
    ,{
         "name": "WC_DIALOG"
        ,"type": {"kind":"UInt16"}
        ,"value": 32770
    }
    ,{
         "name": "DWL_MSGRESULT"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "DWL_DLGPROC"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "DWL_USER"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "DWLP_MSGRESULT"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "DDL_READWRITE"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "DDL_READONLY"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "DDL_HIDDEN"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "DDL_SYSTEM"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "DDL_DIRECTORY"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "DDL_ARCHIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "DDL_POSTMSGS"
        ,"type": {"kind":"Int32"}
        ,"value": 8192
    }
    ,{
         "name": "DDL_DRIVES"
        ,"type": {"kind":"Int32"}
        ,"value": 16384
    }
    ,{
         "name": "DDL_EXCLUSIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 32768
    }
    ,{
         "name": "DS_ABSALIGN"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "DS_SYSMODAL"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "DS_LOCALEDIT"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "DS_SETFONT"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "DS_MODALFRAME"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "DS_NOIDLEMSG"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "DS_SETFOREGROUND"
        ,"type": {"kind":"Int32"}
        ,"value": 512
    }
    ,{
         "name": "DS_3DLOOK"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "DS_FIXEDSYS"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "DS_NOFAILCREATE"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "DS_CONTROL"
        ,"type": {"kind":"Int32"}
        ,"value": 1024
    }
    ,{
         "name": "DS_CENTER"
        ,"type": {"kind":"Int32"}
        ,"value": 2048
    }
    ,{
         "name": "DS_CENTERMOUSE"
        ,"type": {"kind":"Int32"}
        ,"value": 4096
    }
    ,{
         "name": "DS_CONTEXTHELP"
        ,"type": {"kind":"Int32"}
        ,"value": 8192
    }
    ,{
         "name": "DS_SHELLFONT"
        ,"type": {"kind":"Int32"}
        ,"value": 72
    }
    ,{
         "name": "DS_USEPIXELS"
        ,"type": {"kind":"Int32"}
        ,"value": 32768
    }
    ,{
         "name": "DM_GETDEFID"
        ,"type": {"kind":"Int32"}
        ,"value": 1024
    }
    ,{
         "name": "DM_SETDEFID"
        ,"type": {"kind":"Int32"}
        ,"value": 1025
    }
    ,{
         "name": "DM_REPOSITION"
        ,"type": {"kind":"Int32"}
        ,"value": 1026
    }
    ,{
         "name": "DC_HASDEFID"
        ,"type": {"kind":"Int32"}
        ,"value": 21323
    }
    ,{
         "name": "DLGC_WANTARROWS"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "DLGC_WANTTAB"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "DLGC_WANTALLKEYS"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "DLGC_WANTMESSAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "DLGC_HASSETSEL"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "DLGC_DEFPUSHBUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "DLGC_UNDEFPUSHBUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "DLGC_RADIOBUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "DLGC_WANTCHARS"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "DLGC_STATIC"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "DLGC_BUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 8192
    }
    ,{
         "name": "LB_CTLCODE"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "LB_OKAY"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "LB_ERR"
        ,"type": {"kind":"Int32"}
        ,"value": -1
    }
    ,{
         "name": "LB_ERRSPACE"
        ,"type": {"kind":"Int32"}
        ,"value": -2
    }
    ,{
         "name": "LBN_ERRSPACE"
        ,"type": {"kind":"Int32"}
        ,"value": -2
    }
    ,{
         "name": "LBN_SELCHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "LBN_DBLCLK"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "LBN_SELCANCEL"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "LBN_SETFOCUS"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "LBN_KILLFOCUS"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "LB_ADDSTRING"
        ,"type": {"kind":"Int32"}
        ,"value": 384
    }
    ,{
         "name": "LB_INSERTSTRING"
        ,"type": {"kind":"Int32"}
        ,"value": 385
    }
    ,{
         "name": "LB_DELETESTRING"
        ,"type": {"kind":"Int32"}
        ,"value": 386
    }
    ,{
         "name": "LB_SELITEMRANGEEX"
        ,"type": {"kind":"Int32"}
        ,"value": 387
    }
    ,{
         "name": "LB_RESETCONTENT"
        ,"type": {"kind":"Int32"}
        ,"value": 388
    }
    ,{
         "name": "LB_SETSEL"
        ,"type": {"kind":"Int32"}
        ,"value": 389
    }
    ,{
         "name": "LB_SETCURSEL"
        ,"type": {"kind":"Int32"}
        ,"value": 390
    }
    ,{
         "name": "LB_GETSEL"
        ,"type": {"kind":"Int32"}
        ,"value": 391
    }
    ,{
         "name": "LB_GETCURSEL"
        ,"type": {"kind":"Int32"}
        ,"value": 392
    }
    ,{
         "name": "LB_GETTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 393
    }
    ,{
         "name": "LB_GETTEXTLEN"
        ,"type": {"kind":"Int32"}
        ,"value": 394
    }
    ,{
         "name": "LB_GETCOUNT"
        ,"type": {"kind":"Int32"}
        ,"value": 395
    }
    ,{
         "name": "LB_SELECTSTRING"
        ,"type": {"kind":"Int32"}
        ,"value": 396
    }
    ,{
         "name": "LB_DIR"
        ,"type": {"kind":"Int32"}
        ,"value": 397
    }
    ,{
         "name": "LB_GETTOPINDEX"
        ,"type": {"kind":"Int32"}
        ,"value": 398
    }
    ,{
         "name": "LB_FINDSTRING"
        ,"type": {"kind":"Int32"}
        ,"value": 399
    }
    ,{
         "name": "LB_GETSELCOUNT"
        ,"type": {"kind":"Int32"}
        ,"value": 400
    }
    ,{
         "name": "LB_GETSELITEMS"
        ,"type": {"kind":"Int32"}
        ,"value": 401
    }
    ,{
         "name": "LB_SETTABSTOPS"
        ,"type": {"kind":"Int32"}
        ,"value": 402
    }
    ,{
         "name": "LB_GETHORIZONTALEXTENT"
        ,"type": {"kind":"Int32"}
        ,"value": 403
    }
    ,{
         "name": "LB_SETHORIZONTALEXTENT"
        ,"type": {"kind":"Int32"}
        ,"value": 404
    }
    ,{
         "name": "LB_SETCOLUMNWIDTH"
        ,"type": {"kind":"Int32"}
        ,"value": 405
    }
    ,{
         "name": "LB_ADDFILE"
        ,"type": {"kind":"Int32"}
        ,"value": 406
    }
    ,{
         "name": "LB_SETTOPINDEX"
        ,"type": {"kind":"Int32"}
        ,"value": 407
    }
    ,{
         "name": "LB_GETITEMRECT"
        ,"type": {"kind":"Int32"}
        ,"value": 408
    }
    ,{
         "name": "LB_GETITEMDATA"
        ,"type": {"kind":"Int32"}
        ,"value": 409
    }
    ,{
         "name": "LB_SETITEMDATA"
        ,"type": {"kind":"Int32"}
        ,"value": 410
    }
    ,{
         "name": "LB_SELITEMRANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 411
    }
    ,{
         "name": "LB_SETANCHORINDEX"
        ,"type": {"kind":"Int32"}
        ,"value": 412
    }
    ,{
         "name": "LB_GETANCHORINDEX"
        ,"type": {"kind":"Int32"}
        ,"value": 413
    }
    ,{
         "name": "LB_SETCARETINDEX"
        ,"type": {"kind":"Int32"}
        ,"value": 414
    }
    ,{
         "name": "LB_GETCARETINDEX"
        ,"type": {"kind":"Int32"}
        ,"value": 415
    }
    ,{
         "name": "LB_SETITEMHEIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 416
    }
    ,{
         "name": "LB_GETITEMHEIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 417
    }
    ,{
         "name": "LB_FINDSTRINGEXACT"
        ,"type": {"kind":"Int32"}
        ,"value": 418
    }
    ,{
         "name": "LB_SETLOCALE"
        ,"type": {"kind":"Int32"}
        ,"value": 421
    }
    ,{
         "name": "LB_GETLOCALE"
        ,"type": {"kind":"Int32"}
        ,"value": 422
    }
    ,{
         "name": "LB_SETCOUNT"
        ,"type": {"kind":"Int32"}
        ,"value": 423
    }
    ,{
         "name": "LB_INITSTORAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 424
    }
    ,{
         "name": "LB_ITEMFROMPOINT"
        ,"type": {"kind":"Int32"}
        ,"value": 425
    }
    ,{
         "name": "LB_MULTIPLEADDSTRING"
        ,"type": {"kind":"Int32"}
        ,"value": 433
    }
    ,{
         "name": "LB_GETLISTBOXINFO"
        ,"type": {"kind":"Int32"}
        ,"value": 434
    }
    ,{
         "name": "LB_MSGMAX"
        ,"type": {"kind":"Int32"}
        ,"value": 435
    }
    ,{
         "name": "LBS_NOTIFY"
        ,"type": {"kind":"UInt32"}
        ,"value": 1
    }
    ,{
         "name": "LBS_SORT"
        ,"type": {"kind":"UInt32"}
        ,"value": 2
    }
    ,{
         "name": "LBS_NOREDRAW"
        ,"type": {"kind":"UInt32"}
        ,"value": 4
    }
    ,{
         "name": "LBS_MULTIPLESEL"
        ,"type": {"kind":"UInt32"}
        ,"value": 8
    }
    ,{
         "name": "LBS_OWNERDRAWFIXED"
        ,"type": {"kind":"UInt32"}
        ,"value": 16
    }
    ,{
         "name": "LBS_OWNERDRAWVARIABLE"
        ,"type": {"kind":"UInt32"}
        ,"value": 32
    }
    ,{
         "name": "LBS_HASSTRINGS"
        ,"type": {"kind":"UInt32"}
        ,"value": 64
    }
    ,{
         "name": "LBS_USETABSTOPS"
        ,"type": {"kind":"UInt32"}
        ,"value": 128
    }
    ,{
         "name": "LBS_NOINTEGRALHEIGHT"
        ,"type": {"kind":"UInt32"}
        ,"value": 256
    }
    ,{
         "name": "LBS_MULTICOLUMN"
        ,"type": {"kind":"UInt32"}
        ,"value": 512
    }
    ,{
         "name": "LBS_WANTKEYBOARDINPUT"
        ,"type": {"kind":"UInt32"}
        ,"value": 1024
    }
    ,{
         "name": "LBS_EXTENDEDSEL"
        ,"type": {"kind":"UInt32"}
        ,"value": 2048
    }
    ,{
         "name": "LBS_DISABLENOSCROLL"
        ,"type": {"kind":"UInt32"}
        ,"value": 4096
    }
    ,{
         "name": "LBS_NODATA"
        ,"type": {"kind":"UInt32"}
        ,"value": 8192
    }
    ,{
         "name": "LBS_NOSEL"
        ,"type": {"kind":"UInt32"}
        ,"value": 16384
    }
    ,{
         "name": "LBS_COMBOBOX"
        ,"type": {"kind":"UInt32"}
        ,"value": 32768
    }
    ,{
         "name": "LBS_STANDARD"
        ,"type": {"kind":"UInt32"}
        ,"value": 10485763
    }
    ,{
         "name": "CB_OKAY"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "CB_ERR"
        ,"type": {"kind":"Int32"}
        ,"value": -1
    }
    ,{
         "name": "CB_ERRSPACE"
        ,"type": {"kind":"Int32"}
        ,"value": -2
    }
    ,{
         "name": "CBN_ERRSPACE"
        ,"type": {"kind":"Int32"}
        ,"value": -1
    }
    ,{
         "name": "CBN_SELCHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "CBN_DBLCLK"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "CBN_SETFOCUS"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "CBN_KILLFOCUS"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "CBN_EDITCHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "CBN_EDITUPDATE"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "CBN_DROPDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 7
    }
    ,{
         "name": "CBN_CLOSEUP"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "CBN_SELENDOK"
        ,"type": {"kind":"Int32"}
        ,"value": 9
    }
    ,{
         "name": "CBN_SELENDCANCEL"
        ,"type": {"kind":"Int32"}
        ,"value": 10
    }
    ,{
         "name": "CBS_SIMPLE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "CBS_DROPDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "CBS_DROPDOWNLIST"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "CBS_OWNERDRAWFIXED"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "CBS_OWNERDRAWVARIABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "CBS_AUTOHSCROLL"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "CBS_OEMCONVERT"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "CBS_SORT"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "CBS_HASSTRINGS"
        ,"type": {"kind":"Int32"}
        ,"value": 512
    }
    ,{
         "name": "CBS_NOINTEGRALHEIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 1024
    }
    ,{
         "name": "CBS_DISABLENOSCROLL"
        ,"type": {"kind":"Int32"}
        ,"value": 2048
    }
    ,{
         "name": "CBS_UPPERCASE"
        ,"type": {"kind":"Int32"}
        ,"value": 8192
    }
    ,{
         "name": "CBS_LOWERCASE"
        ,"type": {"kind":"Int32"}
        ,"value": 16384
    }
    ,{
         "name": "CB_GETEDITSEL"
        ,"type": {"kind":"Int32"}
        ,"value": 320
    }
    ,{
         "name": "CB_LIMITTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 321
    }
    ,{
         "name": "CB_SETEDITSEL"
        ,"type": {"kind":"Int32"}
        ,"value": 322
    }
    ,{
         "name": "CB_ADDSTRING"
        ,"type": {"kind":"Int32"}
        ,"value": 323
    }
    ,{
         "name": "CB_DELETESTRING"
        ,"type": {"kind":"Int32"}
        ,"value": 324
    }
    ,{
         "name": "CB_DIR"
        ,"type": {"kind":"Int32"}
        ,"value": 325
    }
    ,{
         "name": "CB_GETCOUNT"
        ,"type": {"kind":"Int32"}
        ,"value": 326
    }
    ,{
         "name": "CB_GETCURSEL"
        ,"type": {"kind":"Int32"}
        ,"value": 327
    }
    ,{
         "name": "CB_GETLBTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 328
    }
    ,{
         "name": "CB_GETLBTEXTLEN"
        ,"type": {"kind":"Int32"}
        ,"value": 329
    }
    ,{
         "name": "CB_INSERTSTRING"
        ,"type": {"kind":"Int32"}
        ,"value": 330
    }
    ,{
         "name": "CB_RESETCONTENT"
        ,"type": {"kind":"Int32"}
        ,"value": 331
    }
    ,{
         "name": "CB_FINDSTRING"
        ,"type": {"kind":"Int32"}
        ,"value": 332
    }
    ,{
         "name": "CB_SELECTSTRING"
        ,"type": {"kind":"Int32"}
        ,"value": 333
    }
    ,{
         "name": "CB_SETCURSEL"
        ,"type": {"kind":"Int32"}
        ,"value": 334
    }
    ,{
         "name": "CB_SHOWDROPDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 335
    }
    ,{
         "name": "CB_GETITEMDATA"
        ,"type": {"kind":"Int32"}
        ,"value": 336
    }
    ,{
         "name": "CB_SETITEMDATA"
        ,"type": {"kind":"Int32"}
        ,"value": 337
    }
    ,{
         "name": "CB_GETDROPPEDCONTROLRECT"
        ,"type": {"kind":"Int32"}
        ,"value": 338
    }
    ,{
         "name": "CB_SETITEMHEIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 339
    }
    ,{
         "name": "CB_GETITEMHEIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 340
    }
    ,{
         "name": "CB_SETEXTENDEDUI"
        ,"type": {"kind":"Int32"}
        ,"value": 341
    }
    ,{
         "name": "CB_GETEXTENDEDUI"
        ,"type": {"kind":"Int32"}
        ,"value": 342
    }
    ,{
         "name": "CB_GETDROPPEDSTATE"
        ,"type": {"kind":"Int32"}
        ,"value": 343
    }
    ,{
         "name": "CB_FINDSTRINGEXACT"
        ,"type": {"kind":"Int32"}
        ,"value": 344
    }
    ,{
         "name": "CB_SETLOCALE"
        ,"type": {"kind":"Int32"}
        ,"value": 345
    }
    ,{
         "name": "CB_GETLOCALE"
        ,"type": {"kind":"Int32"}
        ,"value": 346
    }
    ,{
         "name": "CB_GETTOPINDEX"
        ,"type": {"kind":"Int32"}
        ,"value": 347
    }
    ,{
         "name": "CB_SETTOPINDEX"
        ,"type": {"kind":"Int32"}
        ,"value": 348
    }
    ,{
         "name": "CB_GETHORIZONTALEXTENT"
        ,"type": {"kind":"Int32"}
        ,"value": 349
    }
    ,{
         "name": "CB_SETHORIZONTALEXTENT"
        ,"type": {"kind":"Int32"}
        ,"value": 350
    }
    ,{
         "name": "CB_GETDROPPEDWIDTH"
        ,"type": {"kind":"Int32"}
        ,"value": 351
    }
    ,{
         "name": "CB_SETDROPPEDWIDTH"
        ,"type": {"kind":"Int32"}
        ,"value": 352
    }
    ,{
         "name": "CB_INITSTORAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 353
    }
    ,{
         "name": "CB_MULTIPLEADDSTRING"
        ,"type": {"kind":"Int32"}
        ,"value": 355
    }
    ,{
         "name": "CB_GETCOMBOBOXINFO"
        ,"type": {"kind":"Int32"}
        ,"value": 356
    }
    ,{
         "name": "CB_MSGMAX"
        ,"type": {"kind":"Int32"}
        ,"value": 357
    }
    ,{
         "name": "SBS_HORZ"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "SBS_VERT"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "SBS_TOPALIGN"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "SBS_LEFTALIGN"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "SBS_BOTTOMALIGN"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "SBS_RIGHTALIGN"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "SBS_SIZEBOXTOPLEFTALIGN"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "SBS_SIZEBOXBOTTOMRIGHTALIGN"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "SBS_SIZEBOX"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "SBS_SIZEGRIP"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "SBM_SETPOS"
        ,"type": {"kind":"Int32"}
        ,"value": 224
    }
    ,{
         "name": "SBM_GETPOS"
        ,"type": {"kind":"Int32"}
        ,"value": 225
    }
    ,{
         "name": "SBM_SETRANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 226
    }
    ,{
         "name": "SBM_SETRANGEREDRAW"
        ,"type": {"kind":"Int32"}
        ,"value": 230
    }
    ,{
         "name": "SBM_GETRANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 227
    }
    ,{
         "name": "SBM_ENABLE_ARROWS"
        ,"type": {"kind":"Int32"}
        ,"value": 228
    }
    ,{
         "name": "SBM_SETSCROLLINFO"
        ,"type": {"kind":"Int32"}
        ,"value": 233
    }
    ,{
         "name": "SBM_GETSCROLLINFO"
        ,"type": {"kind":"Int32"}
        ,"value": 234
    }
    ,{
         "name": "SBM_GETSCROLLBARINFO"
        ,"type": {"kind":"Int32"}
        ,"value": 235
    }
    ,{
         "name": "SIF_RANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "SIF_PAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "SIF_POS"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "SIF_DISABLENOSCROLL"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "SIF_TRACKPOS"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "SIF_ALL"
        ,"type": {"kind":"Int32"}
        ,"value": 23
    }
    ,{
         "name": "MDIS_ALLCHILDSTYLES"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "MDITILE_VERTICAL"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "MDITILE_HORIZONTAL"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "MDITILE_SKIPDISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "MDITILE_ZORDER"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "HELP_CONTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "HELP_QUIT"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "HELP_INDEX"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "HELP_CONTENTS"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "HELP_HELPONHELP"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "HELP_SETINDEX"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "HELP_SETCONTENTS"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "HELP_CONTEXTPOPUP"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "HELP_FORCEFILE"
        ,"type": {"kind":"Int32"}
        ,"value": 9
    }
    ,{
         "name": "HELP_KEY"
        ,"type": {"kind":"Int32"}
        ,"value": 257
    }
    ,{
         "name": "HELP_COMMAND"
        ,"type": {"kind":"Int32"}
        ,"value": 258
    }
    ,{
         "name": "HELP_PARTIALKEY"
        ,"type": {"kind":"Int32"}
        ,"value": 261
    }
    ,{
         "name": "HELP_MULTIKEY"
        ,"type": {"kind":"Int32"}
        ,"value": 513
    }
    ,{
         "name": "HELP_SETWINPOS"
        ,"type": {"kind":"Int32"}
        ,"value": 515
    }
    ,{
         "name": "HELP_CONTEXTMENU"
        ,"type": {"kind":"Int32"}
        ,"value": 10
    }
    ,{
         "name": "HELP_FINDER"
        ,"type": {"kind":"Int32"}
        ,"value": 11
    }
    ,{
         "name": "HELP_WM_HELP"
        ,"type": {"kind":"Int32"}
        ,"value": 12
    }
    ,{
         "name": "HELP_SETPOPUP_POS"
        ,"type": {"kind":"Int32"}
        ,"value": 13
    }
    ,{
         "name": "HELP_TCARD"
        ,"type": {"kind":"Int32"}
        ,"value": 32768
    }
    ,{
         "name": "HELP_TCARD_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "HELP_TCARD_OTHER_CALLER"
        ,"type": {"kind":"Int32"}
        ,"value": 17
    }
    ,{
         "name": "IDH_NO_HELP"
        ,"type": {"kind":"Int32"}
        ,"value": 28440
    }
    ,{
         "name": "IDH_MISSING_CONTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 28441
    }
    ,{
         "name": "IDH_GENERIC_HELP_BUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 28442
    }
    ,{
         "name": "IDH_OK"
        ,"type": {"kind":"Int32"}
        ,"value": 28443
    }
    ,{
         "name": "IDH_CANCEL"
        ,"type": {"kind":"Int32"}
        ,"value": 28444
    }
    ,{
         "name": "IDH_HELP"
        ,"type": {"kind":"Int32"}
        ,"value": 28445
    }
    ,{
         "name": "GR_GDIOBJECTS"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "GR_USEROBJECTS"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "GR_GDIOBJECTS_PEAK"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "GR_USEROBJECTS_PEAK"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "GR_GLOBAL"
        ,"type": {"kind":"Int32"}
        ,"value": -2
    }
    ,{
         "name": "SPI_GETBEEP"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "SPI_SETBEEP"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "SPI_GETMOUSE"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "SPI_SETMOUSE"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "SPI_GETBORDER"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "SPI_SETBORDER"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "SPI_GETKEYBOARDSPEED"
        ,"type": {"kind":"Int32"}
        ,"value": 10
    }
    ,{
         "name": "SPI_SETKEYBOARDSPEED"
        ,"type": {"kind":"Int32"}
        ,"value": 11
    }
    ,{
         "name": "SPI_LANGDRIVER"
        ,"type": {"kind":"Int32"}
        ,"value": 12
    }
    ,{
         "name": "SPI_ICONHORIZONTALSPACING"
        ,"type": {"kind":"Int32"}
        ,"value": 13
    }
    ,{
         "name": "SPI_GETSCREENSAVETIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 14
    }
    ,{
         "name": "SPI_SETSCREENSAVETIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 15
    }
    ,{
         "name": "SPI_GETSCREENSAVEACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "SPI_SETSCREENSAVEACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 17
    }
    ,{
         "name": "SPI_GETGRIDGRANULARITY"
        ,"type": {"kind":"Int32"}
        ,"value": 18
    }
    ,{
         "name": "SPI_SETGRIDGRANULARITY"
        ,"type": {"kind":"Int32"}
        ,"value": 19
    }
    ,{
         "name": "SPI_SETDESKWALLPAPER"
        ,"type": {"kind":"Int32"}
        ,"value": 20
    }
    ,{
         "name": "SPI_SETDESKPATTERN"
        ,"type": {"kind":"Int32"}
        ,"value": 21
    }
    ,{
         "name": "SPI_GETKEYBOARDDELAY"
        ,"type": {"kind":"Int32"}
        ,"value": 22
    }
    ,{
         "name": "SPI_SETKEYBOARDDELAY"
        ,"type": {"kind":"Int32"}
        ,"value": 23
    }
    ,{
         "name": "SPI_ICONVERTICALSPACING"
        ,"type": {"kind":"Int32"}
        ,"value": 24
    }
    ,{
         "name": "SPI_GETICONTITLEWRAP"
        ,"type": {"kind":"Int32"}
        ,"value": 25
    }
    ,{
         "name": "SPI_SETICONTITLEWRAP"
        ,"type": {"kind":"Int32"}
        ,"value": 26
    }
    ,{
         "name": "SPI_GETMENUDROPALIGNMENT"
        ,"type": {"kind":"Int32"}
        ,"value": 27
    }
    ,{
         "name": "SPI_SETMENUDROPALIGNMENT"
        ,"type": {"kind":"Int32"}
        ,"value": 28
    }
    ,{
         "name": "SPI_SETDOUBLECLKWIDTH"
        ,"type": {"kind":"Int32"}
        ,"value": 29
    }
    ,{
         "name": "SPI_SETDOUBLECLKHEIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 30
    }
    ,{
         "name": "SPI_GETICONTITLELOGFONT"
        ,"type": {"kind":"Int32"}
        ,"value": 31
    }
    ,{
         "name": "SPI_SETDOUBLECLICKTIME"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "SPI_SETMOUSEBUTTONSWAP"
        ,"type": {"kind":"Int32"}
        ,"value": 33
    }
    ,{
         "name": "SPI_SETICONTITLELOGFONT"
        ,"type": {"kind":"Int32"}
        ,"value": 34
    }
    ,{
         "name": "SPI_GETFASTTASKSWITCH"
        ,"type": {"kind":"Int32"}
        ,"value": 35
    }
    ,{
         "name": "SPI_SETFASTTASKSWITCH"
        ,"type": {"kind":"Int32"}
        ,"value": 36
    }
    ,{
         "name": "SPI_SETDRAGFULLWINDOWS"
        ,"type": {"kind":"Int32"}
        ,"value": 37
    }
    ,{
         "name": "SPI_GETDRAGFULLWINDOWS"
        ,"type": {"kind":"Int32"}
        ,"value": 38
    }
    ,{
         "name": "SPI_GETNONCLIENTMETRICS"
        ,"type": {"kind":"Int32"}
        ,"value": 41
    }
    ,{
         "name": "SPI_SETNONCLIENTMETRICS"
        ,"type": {"kind":"Int32"}
        ,"value": 42
    }
    ,{
         "name": "SPI_GETMINIMIZEDMETRICS"
        ,"type": {"kind":"Int32"}
        ,"value": 43
    }
    ,{
         "name": "SPI_SETMINIMIZEDMETRICS"
        ,"type": {"kind":"Int32"}
        ,"value": 44
    }
    ,{
         "name": "SPI_GETICONMETRICS"
        ,"type": {"kind":"Int32"}
        ,"value": 45
    }
    ,{
         "name": "SPI_SETICONMETRICS"
        ,"type": {"kind":"Int32"}
        ,"value": 46
    }
    ,{
         "name": "SPI_SETWORKAREA"
        ,"type": {"kind":"Int32"}
        ,"value": 47
    }
    ,{
         "name": "SPI_GETWORKAREA"
        ,"type": {"kind":"Int32"}
        ,"value": 48
    }
    ,{
         "name": "SPI_SETPENWINDOWS"
        ,"type": {"kind":"Int32"}
        ,"value": 49
    }
    ,{
         "name": "SPI_GETHIGHCONTRAST"
        ,"type": {"kind":"Int32"}
        ,"value": 66
    }
    ,{
         "name": "SPI_SETHIGHCONTRAST"
        ,"type": {"kind":"Int32"}
        ,"value": 67
    }
    ,{
         "name": "SPI_GETKEYBOARDPREF"
        ,"type": {"kind":"Int32"}
        ,"value": 68
    }
    ,{
         "name": "SPI_SETKEYBOARDPREF"
        ,"type": {"kind":"Int32"}
        ,"value": 69
    }
    ,{
         "name": "SPI_GETSCREENREADER"
        ,"type": {"kind":"Int32"}
        ,"value": 70
    }
    ,{
         "name": "SPI_SETSCREENREADER"
        ,"type": {"kind":"Int32"}
        ,"value": 71
    }
    ,{
         "name": "SPI_GETANIMATION"
        ,"type": {"kind":"Int32"}
        ,"value": 72
    }
    ,{
         "name": "SPI_SETANIMATION"
        ,"type": {"kind":"Int32"}
        ,"value": 73
    }
    ,{
         "name": "SPI_GETFONTSMOOTHING"
        ,"type": {"kind":"Int32"}
        ,"value": 74
    }
    ,{
         "name": "SPI_SETFONTSMOOTHING"
        ,"type": {"kind":"Int32"}
        ,"value": 75
    }
    ,{
         "name": "SPI_SETDRAGWIDTH"
        ,"type": {"kind":"Int32"}
        ,"value": 76
    }
    ,{
         "name": "SPI_SETDRAGHEIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 77
    }
    ,{
         "name": "SPI_SETHANDHELD"
        ,"type": {"kind":"Int32"}
        ,"value": 78
    }
    ,{
         "name": "SPI_GETLOWPOWERTIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 79
    }
    ,{
         "name": "SPI_GETPOWEROFFTIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 80
    }
    ,{
         "name": "SPI_SETLOWPOWERTIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 81
    }
    ,{
         "name": "SPI_SETPOWEROFFTIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 82
    }
    ,{
         "name": "SPI_GETLOWPOWERACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 83
    }
    ,{
         "name": "SPI_GETPOWEROFFACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 84
    }
    ,{
         "name": "SPI_SETLOWPOWERACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 85
    }
    ,{
         "name": "SPI_SETPOWEROFFACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 86
    }
    ,{
         "name": "SPI_SETCURSORS"
        ,"type": {"kind":"Int32"}
        ,"value": 87
    }
    ,{
         "name": "SPI_SETICONS"
        ,"type": {"kind":"Int32"}
        ,"value": 88
    }
    ,{
         "name": "SPI_GETDEFAULTINPUTLANG"
        ,"type": {"kind":"Int32"}
        ,"value": 89
    }
    ,{
         "name": "SPI_SETDEFAULTINPUTLANG"
        ,"type": {"kind":"Int32"}
        ,"value": 90
    }
    ,{
         "name": "SPI_SETLANGTOGGLE"
        ,"type": {"kind":"Int32"}
        ,"value": 91
    }
    ,{
         "name": "SPI_GETWINDOWSEXTENSION"
        ,"type": {"kind":"Int32"}
        ,"value": 92
    }
    ,{
         "name": "SPI_SETMOUSETRAILS"
        ,"type": {"kind":"Int32"}
        ,"value": 93
    }
    ,{
         "name": "SPI_GETMOUSETRAILS"
        ,"type": {"kind":"Int32"}
        ,"value": 94
    }
    ,{
         "name": "SPI_SETSCREENSAVERRUNNING"
        ,"type": {"kind":"Int32"}
        ,"value": 97
    }
    ,{
         "name": "SPI_SCREENSAVERRUNNING"
        ,"type": {"kind":"Int32"}
        ,"value": 97
    }
    ,{
         "name": "SPI_GETFILTERKEYS"
        ,"type": {"kind":"Int32"}
        ,"value": 50
    }
    ,{
         "name": "SPI_SETFILTERKEYS"
        ,"type": {"kind":"Int32"}
        ,"value": 51
    }
    ,{
         "name": "SPI_GETTOGGLEKEYS"
        ,"type": {"kind":"Int32"}
        ,"value": 52
    }
    ,{
         "name": "SPI_SETTOGGLEKEYS"
        ,"type": {"kind":"Int32"}
        ,"value": 53
    }
    ,{
         "name": "SPI_GETMOUSEKEYS"
        ,"type": {"kind":"Int32"}
        ,"value": 54
    }
    ,{
         "name": "SPI_SETMOUSEKEYS"
        ,"type": {"kind":"Int32"}
        ,"value": 55
    }
    ,{
         "name": "SPI_GETSHOWSOUNDS"
        ,"type": {"kind":"Int32"}
        ,"value": 56
    }
    ,{
         "name": "SPI_SETSHOWSOUNDS"
        ,"type": {"kind":"Int32"}
        ,"value": 57
    }
    ,{
         "name": "SPI_GETSTICKYKEYS"
        ,"type": {"kind":"Int32"}
        ,"value": 58
    }
    ,{
         "name": "SPI_SETSTICKYKEYS"
        ,"type": {"kind":"Int32"}
        ,"value": 59
    }
    ,{
         "name": "SPI_GETACCESSTIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 60
    }
    ,{
         "name": "SPI_SETACCESSTIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 61
    }
    ,{
         "name": "SPI_GETSERIALKEYS"
        ,"type": {"kind":"Int32"}
        ,"value": 62
    }
    ,{
         "name": "SPI_SETSERIALKEYS"
        ,"type": {"kind":"Int32"}
        ,"value": 63
    }
    ,{
         "name": "SPI_GETSOUNDSENTRY"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "SPI_SETSOUNDSENTRY"
        ,"type": {"kind":"Int32"}
        ,"value": 65
    }
    ,{
         "name": "SPI_GETSNAPTODEFBUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 95
    }
    ,{
         "name": "SPI_SETSNAPTODEFBUTTON"
        ,"type": {"kind":"Int32"}
        ,"value": 96
    }
    ,{
         "name": "SPI_GETMOUSEHOVERWIDTH"
        ,"type": {"kind":"Int32"}
        ,"value": 98
    }
    ,{
         "name": "SPI_SETMOUSEHOVERWIDTH"
        ,"type": {"kind":"Int32"}
        ,"value": 99
    }
    ,{
         "name": "SPI_GETMOUSEHOVERHEIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 100
    }
    ,{
         "name": "SPI_SETMOUSEHOVERHEIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 101
    }
    ,{
         "name": "SPI_GETMOUSEHOVERTIME"
        ,"type": {"kind":"Int32"}
        ,"value": 102
    }
    ,{
         "name": "SPI_SETMOUSEHOVERTIME"
        ,"type": {"kind":"Int32"}
        ,"value": 103
    }
    ,{
         "name": "SPI_GETWHEELSCROLLLINES"
        ,"type": {"kind":"Int32"}
        ,"value": 104
    }
    ,{
         "name": "SPI_SETWHEELSCROLLLINES"
        ,"type": {"kind":"Int32"}
        ,"value": 105
    }
    ,{
         "name": "SPI_GETMENUSHOWDELAY"
        ,"type": {"kind":"Int32"}
        ,"value": 106
    }
    ,{
         "name": "SPI_SETMENUSHOWDELAY"
        ,"type": {"kind":"Int32"}
        ,"value": 107
    }
    ,{
         "name": "SPI_GETWHEELSCROLLCHARS"
        ,"type": {"kind":"Int32"}
        ,"value": 108
    }
    ,{
         "name": "SPI_SETWHEELSCROLLCHARS"
        ,"type": {"kind":"Int32"}
        ,"value": 109
    }
    ,{
         "name": "SPI_GETSHOWIMEUI"
        ,"type": {"kind":"Int32"}
        ,"value": 110
    }
    ,{
         "name": "SPI_SETSHOWIMEUI"
        ,"type": {"kind":"Int32"}
        ,"value": 111
    }
    ,{
         "name": "SPI_GETMOUSESPEED"
        ,"type": {"kind":"Int32"}
        ,"value": 112
    }
    ,{
         "name": "SPI_SETMOUSESPEED"
        ,"type": {"kind":"Int32"}
        ,"value": 113
    }
    ,{
         "name": "SPI_GETSCREENSAVERRUNNING"
        ,"type": {"kind":"Int32"}
        ,"value": 114
    }
    ,{
         "name": "SPI_GETDESKWALLPAPER"
        ,"type": {"kind":"Int32"}
        ,"value": 115
    }
    ,{
         "name": "SPI_GETAUDIODESCRIPTION"
        ,"type": {"kind":"Int32"}
        ,"value": 116
    }
    ,{
         "name": "SPI_SETAUDIODESCRIPTION"
        ,"type": {"kind":"Int32"}
        ,"value": 117
    }
    ,{
         "name": "SPI_GETSCREENSAVESECURE"
        ,"type": {"kind":"Int32"}
        ,"value": 118
    }
    ,{
         "name": "SPI_SETSCREENSAVESECURE"
        ,"type": {"kind":"Int32"}
        ,"value": 119
    }
    ,{
         "name": "SPI_GETHUNGAPPTIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 120
    }
    ,{
         "name": "SPI_SETHUNGAPPTIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 121
    }
    ,{
         "name": "SPI_GETWAITTOKILLTIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 122
    }
    ,{
         "name": "SPI_SETWAITTOKILLTIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 123
    }
    ,{
         "name": "SPI_GETWAITTOKILLSERVICETIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 124
    }
    ,{
         "name": "SPI_SETWAITTOKILLSERVICETIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 125
    }
    ,{
         "name": "SPI_GETMOUSEDOCKTHRESHOLD"
        ,"type": {"kind":"Int32"}
        ,"value": 126
    }
    ,{
         "name": "SPI_SETMOUSEDOCKTHRESHOLD"
        ,"type": {"kind":"Int32"}
        ,"value": 127
    }
    ,{
         "name": "SPI_GETPENDOCKTHRESHOLD"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "SPI_SETPENDOCKTHRESHOLD"
        ,"type": {"kind":"Int32"}
        ,"value": 129
    }
    ,{
         "name": "SPI_GETWINARRANGING"
        ,"type": {"kind":"Int32"}
        ,"value": 130
    }
    ,{
         "name": "SPI_SETWINARRANGING"
        ,"type": {"kind":"Int32"}
        ,"value": 131
    }
    ,{
         "name": "SPI_GETMOUSEDRAGOUTTHRESHOLD"
        ,"type": {"kind":"Int32"}
        ,"value": 132
    }
    ,{
         "name": "SPI_SETMOUSEDRAGOUTTHRESHOLD"
        ,"type": {"kind":"Int32"}
        ,"value": 133
    }
    ,{
         "name": "SPI_GETPENDRAGOUTTHRESHOLD"
        ,"type": {"kind":"Int32"}
        ,"value": 134
    }
    ,{
         "name": "SPI_SETPENDRAGOUTTHRESHOLD"
        ,"type": {"kind":"Int32"}
        ,"value": 135
    }
    ,{
         "name": "SPI_GETMOUSESIDEMOVETHRESHOLD"
        ,"type": {"kind":"Int32"}
        ,"value": 136
    }
    ,{
         "name": "SPI_SETMOUSESIDEMOVETHRESHOLD"
        ,"type": {"kind":"Int32"}
        ,"value": 137
    }
    ,{
         "name": "SPI_GETPENSIDEMOVETHRESHOLD"
        ,"type": {"kind":"Int32"}
        ,"value": 138
    }
    ,{
         "name": "SPI_SETPENSIDEMOVETHRESHOLD"
        ,"type": {"kind":"Int32"}
        ,"value": 139
    }
    ,{
         "name": "SPI_GETDRAGFROMMAXIMIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 140
    }
    ,{
         "name": "SPI_SETDRAGFROMMAXIMIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 141
    }
    ,{
         "name": "SPI_GETSNAPSIZING"
        ,"type": {"kind":"Int32"}
        ,"value": 142
    }
    ,{
         "name": "SPI_SETSNAPSIZING"
        ,"type": {"kind":"Int32"}
        ,"value": 143
    }
    ,{
         "name": "SPI_GETDOCKMOVING"
        ,"type": {"kind":"Int32"}
        ,"value": 144
    }
    ,{
         "name": "SPI_SETDOCKMOVING"
        ,"type": {"kind":"Int32"}
        ,"value": 145
    }
    ,{
         "name": "MAX_TOUCH_PREDICTION_FILTER_TAPS"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "TOUCHPREDICTIONPARAMETERS_DEFAULT_LATENCY"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "TOUCHPREDICTIONPARAMETERS_DEFAULT_SAMPLETIME"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "TOUCHPREDICTIONPARAMETERS_DEFAULT_USE_HW_TIMESTAMP"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_DELTA"
        ,"type": {"kind":"Single"}
        ,"value": 0.001
    }
    ,{
         "name": "TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_MIN"
        ,"type": {"kind":"Single"}
        ,"value": 0.9
    }
    ,{
         "name": "TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_MAX"
        ,"type": {"kind":"Single"}
        ,"value": 0.999
    }
    ,{
         "name": "TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_LEARNING_RATE"
        ,"type": {"kind":"Single"}
        ,"value": 0.001
    }
    ,{
         "name": "TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_EXPO_SMOOTH_ALPHA"
        ,"type": {"kind":"Single"}
        ,"value": 0.99
    }
    ,{
         "name": "SPI_GETTOUCHPREDICTIONPARAMETERS"
        ,"type": {"kind":"Int32"}
        ,"value": 156
    }
    ,{
         "name": "SPI_SETTOUCHPREDICTIONPARAMETERS"
        ,"type": {"kind":"Int32"}
        ,"value": 157
    }
    ,{
         "name": "MAX_LOGICALDPIOVERRIDE"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "MIN_LOGICALDPIOVERRIDE"
        ,"type": {"kind":"Int32"}
        ,"value": -2
    }
    ,{
         "name": "SPI_GETLOGICALDPIOVERRIDE"
        ,"type": {"kind":"Int32"}
        ,"value": 158
    }
    ,{
         "name": "SPI_SETLOGICALDPIOVERRIDE"
        ,"type": {"kind":"Int32"}
        ,"value": 159
    }
    ,{
         "name": "SPI_GETMENURECT"
        ,"type": {"kind":"Int32"}
        ,"value": 162
    }
    ,{
         "name": "SPI_SETMENURECT"
        ,"type": {"kind":"Int32"}
        ,"value": 163
    }
    ,{
         "name": "SPI_GETACTIVEWINDOWTRACKING"
        ,"type": {"kind":"Int32"}
        ,"value": 4096
    }
    ,{
         "name": "SPI_SETACTIVEWINDOWTRACKING"
        ,"type": {"kind":"Int32"}
        ,"value": 4097
    }
    ,{
         "name": "SPI_GETMENUANIMATION"
        ,"type": {"kind":"Int32"}
        ,"value": 4098
    }
    ,{
         "name": "SPI_SETMENUANIMATION"
        ,"type": {"kind":"Int32"}
        ,"value": 4099
    }
    ,{
         "name": "SPI_GETCOMBOBOXANIMATION"
        ,"type": {"kind":"Int32"}
        ,"value": 4100
    }
    ,{
         "name": "SPI_SETCOMBOBOXANIMATION"
        ,"type": {"kind":"Int32"}
        ,"value": 4101
    }
    ,{
         "name": "SPI_GETLISTBOXSMOOTHSCROLLING"
        ,"type": {"kind":"Int32"}
        ,"value": 4102
    }
    ,{
         "name": "SPI_SETLISTBOXSMOOTHSCROLLING"
        ,"type": {"kind":"Int32"}
        ,"value": 4103
    }
    ,{
         "name": "SPI_GETGRADIENTCAPTIONS"
        ,"type": {"kind":"Int32"}
        ,"value": 4104
    }
    ,{
         "name": "SPI_SETGRADIENTCAPTIONS"
        ,"type": {"kind":"Int32"}
        ,"value": 4105
    }
    ,{
         "name": "SPI_GETKEYBOARDCUES"
        ,"type": {"kind":"Int32"}
        ,"value": 4106
    }
    ,{
         "name": "SPI_SETKEYBOARDCUES"
        ,"type": {"kind":"Int32"}
        ,"value": 4107
    }
    ,{
         "name": "SPI_GETMENUUNDERLINES"
        ,"type": {"kind":"Int32"}
        ,"value": 4106
    }
    ,{
         "name": "SPI_SETMENUUNDERLINES"
        ,"type": {"kind":"Int32"}
        ,"value": 4107
    }
    ,{
         "name": "SPI_GETACTIVEWNDTRKZORDER"
        ,"type": {"kind":"Int32"}
        ,"value": 4108
    }
    ,{
         "name": "SPI_SETACTIVEWNDTRKZORDER"
        ,"type": {"kind":"Int32"}
        ,"value": 4109
    }
    ,{
         "name": "SPI_GETHOTTRACKING"
        ,"type": {"kind":"Int32"}
        ,"value": 4110
    }
    ,{
         "name": "SPI_SETHOTTRACKING"
        ,"type": {"kind":"Int32"}
        ,"value": 4111
    }
    ,{
         "name": "SPI_GETMENUFADE"
        ,"type": {"kind":"Int32"}
        ,"value": 4114
    }
    ,{
         "name": "SPI_SETMENUFADE"
        ,"type": {"kind":"Int32"}
        ,"value": 4115
    }
    ,{
         "name": "SPI_GETSELECTIONFADE"
        ,"type": {"kind":"Int32"}
        ,"value": 4116
    }
    ,{
         "name": "SPI_SETSELECTIONFADE"
        ,"type": {"kind":"Int32"}
        ,"value": 4117
    }
    ,{
         "name": "SPI_GETTOOLTIPANIMATION"
        ,"type": {"kind":"Int32"}
        ,"value": 4118
    }
    ,{
         "name": "SPI_SETTOOLTIPANIMATION"
        ,"type": {"kind":"Int32"}
        ,"value": 4119
    }
    ,{
         "name": "SPI_GETTOOLTIPFADE"
        ,"type": {"kind":"Int32"}
        ,"value": 4120
    }
    ,{
         "name": "SPI_SETTOOLTIPFADE"
        ,"type": {"kind":"Int32"}
        ,"value": 4121
    }
    ,{
         "name": "SPI_GETCURSORSHADOW"
        ,"type": {"kind":"Int32"}
        ,"value": 4122
    }
    ,{
         "name": "SPI_SETCURSORSHADOW"
        ,"type": {"kind":"Int32"}
        ,"value": 4123
    }
    ,{
         "name": "SPI_GETMOUSESONAR"
        ,"type": {"kind":"Int32"}
        ,"value": 4124
    }
    ,{
         "name": "SPI_SETMOUSESONAR"
        ,"type": {"kind":"Int32"}
        ,"value": 4125
    }
    ,{
         "name": "SPI_GETMOUSECLICKLOCK"
        ,"type": {"kind":"Int32"}
        ,"value": 4126
    }
    ,{
         "name": "SPI_SETMOUSECLICKLOCK"
        ,"type": {"kind":"Int32"}
        ,"value": 4127
    }
    ,{
         "name": "SPI_GETMOUSEVANISH"
        ,"type": {"kind":"Int32"}
        ,"value": 4128
    }
    ,{
         "name": "SPI_SETMOUSEVANISH"
        ,"type": {"kind":"Int32"}
        ,"value": 4129
    }
    ,{
         "name": "SPI_GETFLATMENU"
        ,"type": {"kind":"Int32"}
        ,"value": 4130
    }
    ,{
         "name": "SPI_SETFLATMENU"
        ,"type": {"kind":"Int32"}
        ,"value": 4131
    }
    ,{
         "name": "SPI_GETDROPSHADOW"
        ,"type": {"kind":"Int32"}
        ,"value": 4132
    }
    ,{
         "name": "SPI_SETDROPSHADOW"
        ,"type": {"kind":"Int32"}
        ,"value": 4133
    }
    ,{
         "name": "SPI_GETBLOCKSENDINPUTRESETS"
        ,"type": {"kind":"Int32"}
        ,"value": 4134
    }
    ,{
         "name": "SPI_SETBLOCKSENDINPUTRESETS"
        ,"type": {"kind":"Int32"}
        ,"value": 4135
    }
    ,{
         "name": "SPI_GETUIEFFECTS"
        ,"type": {"kind":"Int32"}
        ,"value": 4158
    }
    ,{
         "name": "SPI_SETUIEFFECTS"
        ,"type": {"kind":"Int32"}
        ,"value": 4159
    }
    ,{
         "name": "SPI_GETDISABLEOVERLAPPEDCONTENT"
        ,"type": {"kind":"Int32"}
        ,"value": 4160
    }
    ,{
         "name": "SPI_SETDISABLEOVERLAPPEDCONTENT"
        ,"type": {"kind":"Int32"}
        ,"value": 4161
    }
    ,{
         "name": "SPI_GETCLIENTAREAANIMATION"
        ,"type": {"kind":"Int32"}
        ,"value": 4162
    }
    ,{
         "name": "SPI_SETCLIENTAREAANIMATION"
        ,"type": {"kind":"Int32"}
        ,"value": 4163
    }
    ,{
         "name": "SPI_GETCLEARTYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 4168
    }
    ,{
         "name": "SPI_SETCLEARTYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 4169
    }
    ,{
         "name": "SPI_GETSPEECHRECOGNITION"
        ,"type": {"kind":"Int32"}
        ,"value": 4170
    }
    ,{
         "name": "SPI_SETSPEECHRECOGNITION"
        ,"type": {"kind":"Int32"}
        ,"value": 4171
    }
    ,{
         "name": "SPI_GETCARETBROWSING"
        ,"type": {"kind":"Int32"}
        ,"value": 4172
    }
    ,{
         "name": "SPI_SETCARETBROWSING"
        ,"type": {"kind":"Int32"}
        ,"value": 4173
    }
    ,{
         "name": "SPI_GETTHREADLOCALINPUTSETTINGS"
        ,"type": {"kind":"Int32"}
        ,"value": 4174
    }
    ,{
         "name": "SPI_SETTHREADLOCALINPUTSETTINGS"
        ,"type": {"kind":"Int32"}
        ,"value": 4175
    }
    ,{
         "name": "SPI_GETSYSTEMLANGUAGEBAR"
        ,"type": {"kind":"Int32"}
        ,"value": 4176
    }
    ,{
         "name": "SPI_SETSYSTEMLANGUAGEBAR"
        ,"type": {"kind":"Int32"}
        ,"value": 4177
    }
    ,{
         "name": "SPI_GETFOREGROUNDLOCKTIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 8192
    }
    ,{
         "name": "SPI_SETFOREGROUNDLOCKTIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 8193
    }
    ,{
         "name": "SPI_GETACTIVEWNDTRKTIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 8194
    }
    ,{
         "name": "SPI_SETACTIVEWNDTRKTIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 8195
    }
    ,{
         "name": "SPI_GETFOREGROUNDFLASHCOUNT"
        ,"type": {"kind":"Int32"}
        ,"value": 8196
    }
    ,{
         "name": "SPI_SETFOREGROUNDFLASHCOUNT"
        ,"type": {"kind":"Int32"}
        ,"value": 8197
    }
    ,{
         "name": "SPI_GETCARETWIDTH"
        ,"type": {"kind":"Int32"}
        ,"value": 8198
    }
    ,{
         "name": "SPI_SETCARETWIDTH"
        ,"type": {"kind":"Int32"}
        ,"value": 8199
    }
    ,{
         "name": "SPI_GETMOUSECLICKLOCKTIME"
        ,"type": {"kind":"Int32"}
        ,"value": 8200
    }
    ,{
         "name": "SPI_SETMOUSECLICKLOCKTIME"
        ,"type": {"kind":"Int32"}
        ,"value": 8201
    }
    ,{
         "name": "SPI_GETFONTSMOOTHINGTYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 8202
    }
    ,{
         "name": "SPI_SETFONTSMOOTHINGTYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 8203
    }
    ,{
         "name": "FE_FONTSMOOTHINGSTANDARD"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "FE_FONTSMOOTHINGCLEARTYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "SPI_GETFONTSMOOTHINGCONTRAST"
        ,"type": {"kind":"Int32"}
        ,"value": 8204
    }
    ,{
         "name": "SPI_SETFONTSMOOTHINGCONTRAST"
        ,"type": {"kind":"Int32"}
        ,"value": 8205
    }
    ,{
         "name": "SPI_GETFOCUSBORDERWIDTH"
        ,"type": {"kind":"Int32"}
        ,"value": 8206
    }
    ,{
         "name": "SPI_SETFOCUSBORDERWIDTH"
        ,"type": {"kind":"Int32"}
        ,"value": 8207
    }
    ,{
         "name": "SPI_GETFOCUSBORDERHEIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 8208
    }
    ,{
         "name": "SPI_SETFOCUSBORDERHEIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 8209
    }
    ,{
         "name": "SPI_GETFONTSMOOTHINGORIENTATION"
        ,"type": {"kind":"Int32"}
        ,"value": 8210
    }
    ,{
         "name": "SPI_SETFONTSMOOTHINGORIENTATION"
        ,"type": {"kind":"Int32"}
        ,"value": 8211
    }
    ,{
         "name": "FE_FONTSMOOTHINGORIENTATIONBGR"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "FE_FONTSMOOTHINGORIENTATIONRGB"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "SPI_GETMINIMUMHITRADIUS"
        ,"type": {"kind":"Int32"}
        ,"value": 8212
    }
    ,{
         "name": "SPI_SETMINIMUMHITRADIUS"
        ,"type": {"kind":"Int32"}
        ,"value": 8213
    }
    ,{
         "name": "SPI_GETMESSAGEDURATION"
        ,"type": {"kind":"Int32"}
        ,"value": 8214
    }
    ,{
         "name": "SPI_SETMESSAGEDURATION"
        ,"type": {"kind":"Int32"}
        ,"value": 8215
    }
    ,{
         "name": "SPI_GETCONTACTVISUALIZATION"
        ,"type": {"kind":"Int32"}
        ,"value": 8216
    }
    ,{
         "name": "SPI_SETCONTACTVISUALIZATION"
        ,"type": {"kind":"Int32"}
        ,"value": 8217
    }
    ,{
         "name": "CONTACTVISUALIZATION_OFF"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "CONTACTVISUALIZATION_ON"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "CONTACTVISUALIZATION_PRESENTATIONMODE"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "SPI_GETGESTUREVISUALIZATION"
        ,"type": {"kind":"Int32"}
        ,"value": 8218
    }
    ,{
         "name": "SPI_SETGESTUREVISUALIZATION"
        ,"type": {"kind":"Int32"}
        ,"value": 8219
    }
    ,{
         "name": "GESTUREVISUALIZATION_OFF"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "GESTUREVISUALIZATION_ON"
        ,"type": {"kind":"Int32"}
        ,"value": 31
    }
    ,{
         "name": "GESTUREVISUALIZATION_TAP"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "GESTUREVISUALIZATION_DOUBLETAP"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "GESTUREVISUALIZATION_PRESSANDTAP"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "GESTUREVISUALIZATION_PRESSANDHOLD"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "GESTUREVISUALIZATION_RIGHTTAP"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "SPI_GETMOUSEWHEELROUTING"
        ,"type": {"kind":"Int32"}
        ,"value": 8220
    }
    ,{
         "name": "SPI_SETMOUSEWHEELROUTING"
        ,"type": {"kind":"Int32"}
        ,"value": 8221
    }
    ,{
         "name": "MOUSEWHEEL_ROUTING_FOCUS"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "MOUSEWHEEL_ROUTING_HYBRID"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "MOUSEWHEEL_ROUTING_MOUSE_POS"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "SPI_GETPENVISUALIZATION"
        ,"type": {"kind":"Int32"}
        ,"value": 8222
    }
    ,{
         "name": "SPI_SETPENVISUALIZATION"
        ,"type": {"kind":"Int32"}
        ,"value": 8223
    }
    ,{
         "name": "PENVISUALIZATION_ON"
        ,"type": {"kind":"Int32"}
        ,"value": 35
    }
    ,{
         "name": "PENVISUALIZATION_OFF"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "PENVISUALIZATION_TAP"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "PENVISUALIZATION_DOUBLETAP"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "PENVISUALIZATION_CURSOR"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "SPI_GETPENARBITRATIONTYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 8224
    }
    ,{
         "name": "SPI_SETPENARBITRATIONTYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 8225
    }
    ,{
         "name": "PENARBITRATIONTYPE_NONE"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "PENARBITRATIONTYPE_WIN8"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "PENARBITRATIONTYPE_FIS"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "PENARBITRATIONTYPE_SPT"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "PENARBITRATIONTYPE_MAX"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "SPI_GETCARETTIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 8226
    }
    ,{
         "name": "SPI_SETCARETTIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 8227
    }
    ,{
         "name": "SPI_GETHANDEDNESS"
        ,"type": {"kind":"Int32"}
        ,"value": 8228
    }
    ,{
         "name": "SPI_SETHANDEDNESS"
        ,"type": {"kind":"Int32"}
        ,"value": 8229
    }
    ,{
         "name": "SPIF_UPDATEINIFILE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "SPIF_SENDWININICHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "SPIF_SENDCHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "METRICS_USEDEFAULT"
        ,"type": {"kind":"Int32"}
        ,"value": -1
    }
    ,{
         "name": "ARW_BOTTOMLEFT"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "ARW_BOTTOMRIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "ARW_TOPLEFT"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "ARW_TOPRIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "ARW_STARTMASK"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "ARW_STARTRIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "ARW_STARTTOP"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "ARW_LEFT"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "ARW_RIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "ARW_UP"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "ARW_DOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "ARW_HIDE"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "SERKF_SERIALKEYSON"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "SERKF_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "SERKF_INDICATOR"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "HCF_HIGHCONTRASTON"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "HCF_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "HCF_HOTKEYACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "HCF_CONFIRMHOTKEY"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "HCF_HOTKEYSOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "HCF_INDICATOR"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "HCF_HOTKEYAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "HCF_LOGONDESKTOP"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "HCF_DEFAULTDESKTOP"
        ,"type": {"kind":"Int32"}
        ,"value": 512
    }
    ,{
         "name": "HCF_OPTION_NOTHEMECHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 4096
    }
    ,{
         "name": "CDS_UPDATEREGISTRY"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "CDS_TEST"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "CDS_FULLSCREEN"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "CDS_GLOBAL"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "CDS_SET_PRIMARY"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "CDS_VIDEOPARAMETERS"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "CDS_ENABLE_UNSAFE_MODES"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "CDS_DISABLE_UNSAFE_MODES"
        ,"type": {"kind":"Int32"}
        ,"value": 512
    }
    ,{
         "name": "CDS_RESET"
        ,"type": {"kind":"Int32"}
        ,"value": 1073741824
    }
    ,{
         "name": "CDS_RESET_EX"
        ,"type": {"kind":"Int32"}
        ,"value": 536870912
    }
    ,{
         "name": "CDS_NORESET"
        ,"type": {"kind":"Int32"}
        ,"value": 268435456
    }
    ,{
         "name": "DISP_CHANGE_SUCCESSFUL"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "DISP_CHANGE_RESTART"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "DISP_CHANGE_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -1
    }
    ,{
         "name": "DISP_CHANGE_BADMODE"
        ,"type": {"kind":"Int32"}
        ,"value": -2
    }
    ,{
         "name": "DISP_CHANGE_NOTUPDATED"
        ,"type": {"kind":"Int32"}
        ,"value": -3
    }
    ,{
         "name": "DISP_CHANGE_BADFLAGS"
        ,"type": {"kind":"Int32"}
        ,"value": -4
    }
    ,{
         "name": "DISP_CHANGE_BADPARAM"
        ,"type": {"kind":"Int32"}
        ,"value": -5
    }
    ,{
         "name": "DISP_CHANGE_BADDUALVIEW"
        ,"type": {"kind":"Int32"}
        ,"value": -6
    }
    ,{
         "name": "ENUM_CURRENT_SETTINGS"
        ,"type": {"kind":"UInt32"}
        ,"value": 4294967295
    }
    ,{
         "name": "ENUM_REGISTRY_SETTINGS"
        ,"type": {"kind":"UInt32"}
        ,"value": 4294967294
    }
    ,{
         "name": "EDS_RAWMODE"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "EDS_ROTATEDMODE"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "EDD_GET_DEVICE_INTERFACE_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "FKF_FILTERKEYSON"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "FKF_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "FKF_HOTKEYACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "FKF_CONFIRMHOTKEY"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "FKF_HOTKEYSOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "FKF_INDICATOR"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "FKF_CLICKON"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "SKF_STICKYKEYSON"
        ,"type": {"kind":"UInt32"}
        ,"value": 1
    }
    ,{
         "name": "SKF_AVAILABLE"
        ,"type": {"kind":"UInt32"}
        ,"value": 2
    }
    ,{
         "name": "SKF_HOTKEYACTIVE"
        ,"type": {"kind":"UInt32"}
        ,"value": 4
    }
    ,{
         "name": "SKF_CONFIRMHOTKEY"
        ,"type": {"kind":"UInt32"}
        ,"value": 8
    }
    ,{
         "name": "SKF_HOTKEYSOUND"
        ,"type": {"kind":"UInt32"}
        ,"value": 16
    }
    ,{
         "name": "SKF_INDICATOR"
        ,"type": {"kind":"UInt32"}
        ,"value": 32
    }
    ,{
         "name": "SKF_AUDIBLEFEEDBACK"
        ,"type": {"kind":"UInt32"}
        ,"value": 64
    }
    ,{
         "name": "SKF_TRISTATE"
        ,"type": {"kind":"UInt32"}
        ,"value": 128
    }
    ,{
         "name": "SKF_TWOKEYSOFF"
        ,"type": {"kind":"UInt32"}
        ,"value": 256
    }
    ,{
         "name": "SKF_LALTLATCHED"
        ,"type": {"kind":"UInt32"}
        ,"value": 268435456
    }
    ,{
         "name": "SKF_LCTLLATCHED"
        ,"type": {"kind":"UInt32"}
        ,"value": 67108864
    }
    ,{
         "name": "SKF_LSHIFTLATCHED"
        ,"type": {"kind":"UInt32"}
        ,"value": 16777216
    }
    ,{
         "name": "SKF_RALTLATCHED"
        ,"type": {"kind":"UInt32"}
        ,"value": 536870912
    }
    ,{
         "name": "SKF_RCTLLATCHED"
        ,"type": {"kind":"UInt32"}
        ,"value": 134217728
    }
    ,{
         "name": "SKF_RSHIFTLATCHED"
        ,"type": {"kind":"UInt32"}
        ,"value": 33554432
    }
    ,{
         "name": "SKF_LWINLATCHED"
        ,"type": {"kind":"UInt32"}
        ,"value": 1073741824
    }
    ,{
         "name": "SKF_RWINLATCHED"
        ,"type": {"kind":"UInt32"}
        ,"value": 2147483648
    }
    ,{
         "name": "SKF_LALTLOCKED"
        ,"type": {"kind":"UInt32"}
        ,"value": 1048576
    }
    ,{
         "name": "SKF_LCTLLOCKED"
        ,"type": {"kind":"UInt32"}
        ,"value": 262144
    }
    ,{
         "name": "SKF_LSHIFTLOCKED"
        ,"type": {"kind":"UInt32"}
        ,"value": 65536
    }
    ,{
         "name": "SKF_RALTLOCKED"
        ,"type": {"kind":"UInt32"}
        ,"value": 2097152
    }
    ,{
         "name": "SKF_RCTLLOCKED"
        ,"type": {"kind":"UInt32"}
        ,"value": 524288
    }
    ,{
         "name": "SKF_RSHIFTLOCKED"
        ,"type": {"kind":"UInt32"}
        ,"value": 131072
    }
    ,{
         "name": "SKF_LWINLOCKED"
        ,"type": {"kind":"UInt32"}
        ,"value": 4194304
    }
    ,{
         "name": "SKF_RWINLOCKED"
        ,"type": {"kind":"UInt32"}
        ,"value": 8388608
    }
    ,{
         "name": "MKF_MOUSEKEYSON"
        ,"type": {"kind":"UInt32"}
        ,"value": 1
    }
    ,{
         "name": "MKF_AVAILABLE"
        ,"type": {"kind":"UInt32"}
        ,"value": 2
    }
    ,{
         "name": "MKF_HOTKEYACTIVE"
        ,"type": {"kind":"UInt32"}
        ,"value": 4
    }
    ,{
         "name": "MKF_CONFIRMHOTKEY"
        ,"type": {"kind":"UInt32"}
        ,"value": 8
    }
    ,{
         "name": "MKF_HOTKEYSOUND"
        ,"type": {"kind":"UInt32"}
        ,"value": 16
    }
    ,{
         "name": "MKF_INDICATOR"
        ,"type": {"kind":"UInt32"}
        ,"value": 32
    }
    ,{
         "name": "MKF_MODIFIERS"
        ,"type": {"kind":"UInt32"}
        ,"value": 64
    }
    ,{
         "name": "MKF_REPLACENUMBERS"
        ,"type": {"kind":"UInt32"}
        ,"value": 128
    }
    ,{
         "name": "MKF_LEFTBUTTONSEL"
        ,"type": {"kind":"UInt32"}
        ,"value": 268435456
    }
    ,{
         "name": "MKF_RIGHTBUTTONSEL"
        ,"type": {"kind":"UInt32"}
        ,"value": 536870912
    }
    ,{
         "name": "MKF_LEFTBUTTONDOWN"
        ,"type": {"kind":"UInt32"}
        ,"value": 16777216
    }
    ,{
         "name": "MKF_RIGHTBUTTONDOWN"
        ,"type": {"kind":"UInt32"}
        ,"value": 33554432
    }
    ,{
         "name": "MKF_MOUSEMODE"
        ,"type": {"kind":"UInt32"}
        ,"value": 2147483648
    }
    ,{
         "name": "ATF_TIMEOUTON"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "ATF_ONOFFFEEDBACK"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "SSGF_NONE"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "SSGF_DISPLAY"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "SSTF_NONE"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "SSTF_CHARS"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "SSTF_BORDER"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "SSTF_DISPLAY"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "SSWF_NONE"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "SSWF_TITLE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "SSWF_WINDOW"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "SSWF_DISPLAY"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "SSWF_CUSTOM"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "SSF_SOUNDSENTRYON"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "SSF_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "SSF_INDICATOR"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "TKF_TOGGLEKEYSON"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "TKF_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "TKF_HOTKEYACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "TKF_CONFIRMHOTKEY"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "TKF_HOTKEYSOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "TKF_INDICATOR"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "SLE_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "SLE_MINORERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "SLE_WARNING"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "MONITOR_DEFAULTTONULL"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "MONITOR_DEFAULTTOPRIMARY"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "MONITOR_DEFAULTTONEAREST"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "MONITORINFOF_PRIMARY"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "CCHDEVICENAME"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "WINEVENT_OUTOFCONTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "WINEVENT_SKIPOWNTHREAD"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "WINEVENT_SKIPOWNPROCESS"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "WINEVENT_INCONTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "CHILDID_SELF"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "INDEXID_OBJECT"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "INDEXID_CONTAINER"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "OBJID_WINDOW"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "OBJID_SYSMENU"
        ,"type": {"kind":"Int32"}
        ,"value": -1
    }
    ,{
         "name": "OBJID_TITLEBAR"
        ,"type": {"kind":"Int32"}
        ,"value": -2
    }
    ,{
         "name": "OBJID_MENU"
        ,"type": {"kind":"Int32"}
        ,"value": -3
    }
    ,{
         "name": "OBJID_CLIENT"
        ,"type": {"kind":"Int32"}
        ,"value": -4
    }
    ,{
         "name": "OBJID_VSCROLL"
        ,"type": {"kind":"Int32"}
        ,"value": -5
    }
    ,{
         "name": "OBJID_HSCROLL"
        ,"type": {"kind":"Int32"}
        ,"value": -6
    }
    ,{
         "name": "OBJID_SIZEGRIP"
        ,"type": {"kind":"Int32"}
        ,"value": -7
    }
    ,{
         "name": "OBJID_CARET"
        ,"type": {"kind":"Int32"}
        ,"value": -8
    }
    ,{
         "name": "OBJID_CURSOR"
        ,"type": {"kind":"Int32"}
        ,"value": -9
    }
    ,{
         "name": "OBJID_ALERT"
        ,"type": {"kind":"Int32"}
        ,"value": -10
    }
    ,{
         "name": "OBJID_SOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -11
    }
    ,{
         "name": "OBJID_QUERYCLASSNAMEIDX"
        ,"type": {"kind":"Int32"}
        ,"value": -12
    }
    ,{
         "name": "OBJID_NATIVEOM"
        ,"type": {"kind":"Int32"}
        ,"value": -16
    }
    ,{
         "name": "EVENT_MIN"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "EVENT_MAX"
        ,"type": {"kind":"Int32"}
        ,"value": 2147483647
    }
    ,{
         "name": "EVENT_SYSTEM_SOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "EVENT_SYSTEM_ALERT"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "EVENT_SYSTEM_FOREGROUND"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "EVENT_SYSTEM_MENUSTART"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "EVENT_SYSTEM_MENUEND"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "EVENT_SYSTEM_MENUPOPUPSTART"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "EVENT_SYSTEM_MENUPOPUPEND"
        ,"type": {"kind":"Int32"}
        ,"value": 7
    }
    ,{
         "name": "EVENT_SYSTEM_CAPTURESTART"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "EVENT_SYSTEM_CAPTUREEND"
        ,"type": {"kind":"Int32"}
        ,"value": 9
    }
    ,{
         "name": "EVENT_SYSTEM_MOVESIZESTART"
        ,"type": {"kind":"Int32"}
        ,"value": 10
    }
    ,{
         "name": "EVENT_SYSTEM_MOVESIZEEND"
        ,"type": {"kind":"Int32"}
        ,"value": 11
    }
    ,{
         "name": "EVENT_SYSTEM_CONTEXTHELPSTART"
        ,"type": {"kind":"Int32"}
        ,"value": 12
    }
    ,{
         "name": "EVENT_SYSTEM_CONTEXTHELPEND"
        ,"type": {"kind":"Int32"}
        ,"value": 13
    }
    ,{
         "name": "EVENT_SYSTEM_DRAGDROPSTART"
        ,"type": {"kind":"Int32"}
        ,"value": 14
    }
    ,{
         "name": "EVENT_SYSTEM_DRAGDROPEND"
        ,"type": {"kind":"Int32"}
        ,"value": 15
    }
    ,{
         "name": "EVENT_SYSTEM_DIALOGSTART"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "EVENT_SYSTEM_DIALOGEND"
        ,"type": {"kind":"Int32"}
        ,"value": 17
    }
    ,{
         "name": "EVENT_SYSTEM_SCROLLINGSTART"
        ,"type": {"kind":"Int32"}
        ,"value": 18
    }
    ,{
         "name": "EVENT_SYSTEM_SCROLLINGEND"
        ,"type": {"kind":"Int32"}
        ,"value": 19
    }
    ,{
         "name": "EVENT_SYSTEM_SWITCHSTART"
        ,"type": {"kind":"Int32"}
        ,"value": 20
    }
    ,{
         "name": "EVENT_SYSTEM_SWITCHEND"
        ,"type": {"kind":"Int32"}
        ,"value": 21
    }
    ,{
         "name": "EVENT_SYSTEM_MINIMIZESTART"
        ,"type": {"kind":"Int32"}
        ,"value": 22
    }
    ,{
         "name": "EVENT_SYSTEM_MINIMIZEEND"
        ,"type": {"kind":"Int32"}
        ,"value": 23
    }
    ,{
         "name": "EVENT_SYSTEM_DESKTOPSWITCH"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "EVENT_SYSTEM_SWITCHER_APPGRABBED"
        ,"type": {"kind":"Int32"}
        ,"value": 36
    }
    ,{
         "name": "EVENT_SYSTEM_SWITCHER_APPOVERTARGET"
        ,"type": {"kind":"Int32"}
        ,"value": 37
    }
    ,{
         "name": "EVENT_SYSTEM_SWITCHER_APPDROPPED"
        ,"type": {"kind":"Int32"}
        ,"value": 38
    }
    ,{
         "name": "EVENT_SYSTEM_SWITCHER_CANCELLED"
        ,"type": {"kind":"Int32"}
        ,"value": 39
    }
    ,{
         "name": "EVENT_SYSTEM_IME_KEY_NOTIFICATION"
        ,"type": {"kind":"Int32"}
        ,"value": 41
    }
    ,{
         "name": "EVENT_SYSTEM_END"
        ,"type": {"kind":"Int32"}
        ,"value": 255
    }
    ,{
         "name": "EVENT_OEM_DEFINED_START"
        ,"type": {"kind":"Int32"}
        ,"value": 257
    }
    ,{
         "name": "EVENT_OEM_DEFINED_END"
        ,"type": {"kind":"Int32"}
        ,"value": 511
    }
    ,{
         "name": "EVENT_UIA_EVENTID_START"
        ,"type": {"kind":"Int32"}
        ,"value": 19968
    }
    ,{
         "name": "EVENT_UIA_EVENTID_END"
        ,"type": {"kind":"Int32"}
        ,"value": 20223
    }
    ,{
         "name": "EVENT_UIA_PROPID_START"
        ,"type": {"kind":"Int32"}
        ,"value": 29952
    }
    ,{
         "name": "EVENT_UIA_PROPID_END"
        ,"type": {"kind":"Int32"}
        ,"value": 30207
    }
    ,{
         "name": "EVENT_CONSOLE_CARET"
        ,"type": {"kind":"Int32"}
        ,"value": 16385
    }
    ,{
         "name": "EVENT_CONSOLE_UPDATE_REGION"
        ,"type": {"kind":"Int32"}
        ,"value": 16386
    }
    ,{
         "name": "EVENT_CONSOLE_UPDATE_SIMPLE"
        ,"type": {"kind":"Int32"}
        ,"value": 16387
    }
    ,{
         "name": "EVENT_CONSOLE_UPDATE_SCROLL"
        ,"type": {"kind":"Int32"}
        ,"value": 16388
    }
    ,{
         "name": "EVENT_CONSOLE_LAYOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 16389
    }
    ,{
         "name": "EVENT_CONSOLE_START_APPLICATION"
        ,"type": {"kind":"Int32"}
        ,"value": 16390
    }
    ,{
         "name": "EVENT_CONSOLE_END_APPLICATION"
        ,"type": {"kind":"Int32"}
        ,"value": 16391
    }
    ,{
         "name": "CONSOLE_APPLICATION_16BIT"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "CONSOLE_CARET_SELECTION"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "CONSOLE_CARET_VISIBLE"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "EVENT_CONSOLE_END"
        ,"type": {"kind":"Int32"}
        ,"value": 16639
    }
    ,{
         "name": "EVENT_OBJECT_CREATE"
        ,"type": {"kind":"Int32"}
        ,"value": 32768
    }
    ,{
         "name": "EVENT_OBJECT_DESTROY"
        ,"type": {"kind":"Int32"}
        ,"value": 32769
    }
    ,{
         "name": "EVENT_OBJECT_SHOW"
        ,"type": {"kind":"Int32"}
        ,"value": 32770
    }
    ,{
         "name": "EVENT_OBJECT_HIDE"
        ,"type": {"kind":"Int32"}
        ,"value": 32771
    }
    ,{
         "name": "EVENT_OBJECT_REORDER"
        ,"type": {"kind":"Int32"}
        ,"value": 32772
    }
    ,{
         "name": "EVENT_OBJECT_FOCUS"
        ,"type": {"kind":"Int32"}
        ,"value": 32773
    }
    ,{
         "name": "EVENT_OBJECT_SELECTION"
        ,"type": {"kind":"Int32"}
        ,"value": 32774
    }
    ,{
         "name": "EVENT_OBJECT_SELECTIONADD"
        ,"type": {"kind":"Int32"}
        ,"value": 32775
    }
    ,{
         "name": "EVENT_OBJECT_SELECTIONREMOVE"
        ,"type": {"kind":"Int32"}
        ,"value": 32776
    }
    ,{
         "name": "EVENT_OBJECT_SELECTIONWITHIN"
        ,"type": {"kind":"Int32"}
        ,"value": 32777
    }
    ,{
         "name": "EVENT_OBJECT_STATECHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 32778
    }
    ,{
         "name": "EVENT_OBJECT_LOCATIONCHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 32779
    }
    ,{
         "name": "EVENT_OBJECT_NAMECHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 32780
    }
    ,{
         "name": "EVENT_OBJECT_DESCRIPTIONCHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 32781
    }
    ,{
         "name": "EVENT_OBJECT_VALUECHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 32782
    }
    ,{
         "name": "EVENT_OBJECT_PARENTCHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 32783
    }
    ,{
         "name": "EVENT_OBJECT_HELPCHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 32784
    }
    ,{
         "name": "EVENT_OBJECT_DEFACTIONCHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 32785
    }
    ,{
         "name": "EVENT_OBJECT_ACCELERATORCHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 32786
    }
    ,{
         "name": "EVENT_OBJECT_INVOKED"
        ,"type": {"kind":"Int32"}
        ,"value": 32787
    }
    ,{
         "name": "EVENT_OBJECT_TEXTSELECTIONCHANGED"
        ,"type": {"kind":"Int32"}
        ,"value": 32788
    }
    ,{
         "name": "EVENT_OBJECT_CONTENTSCROLLED"
        ,"type": {"kind":"Int32"}
        ,"value": 32789
    }
    ,{
         "name": "EVENT_SYSTEM_ARRANGMENTPREVIEW"
        ,"type": {"kind":"Int32"}
        ,"value": 32790
    }
    ,{
         "name": "EVENT_OBJECT_CLOAKED"
        ,"type": {"kind":"Int32"}
        ,"value": 32791
    }
    ,{
         "name": "EVENT_OBJECT_UNCLOAKED"
        ,"type": {"kind":"Int32"}
        ,"value": 32792
    }
    ,{
         "name": "EVENT_OBJECT_LIVEREGIONCHANGED"
        ,"type": {"kind":"Int32"}
        ,"value": 32793
    }
    ,{
         "name": "EVENT_OBJECT_HOSTEDOBJECTSINVALIDATED"
        ,"type": {"kind":"Int32"}
        ,"value": 32800
    }
    ,{
         "name": "EVENT_OBJECT_DRAGSTART"
        ,"type": {"kind":"Int32"}
        ,"value": 32801
    }
    ,{
         "name": "EVENT_OBJECT_DRAGCANCEL"
        ,"type": {"kind":"Int32"}
        ,"value": 32802
    }
    ,{
         "name": "EVENT_OBJECT_DRAGCOMPLETE"
        ,"type": {"kind":"Int32"}
        ,"value": 32803
    }
    ,{
         "name": "EVENT_OBJECT_DRAGENTER"
        ,"type": {"kind":"Int32"}
        ,"value": 32804
    }
    ,{
         "name": "EVENT_OBJECT_DRAGLEAVE"
        ,"type": {"kind":"Int32"}
        ,"value": 32805
    }
    ,{
         "name": "EVENT_OBJECT_DRAGDROPPED"
        ,"type": {"kind":"Int32"}
        ,"value": 32806
    }
    ,{
         "name": "EVENT_OBJECT_IME_SHOW"
        ,"type": {"kind":"Int32"}
        ,"value": 32807
    }
    ,{
         "name": "EVENT_OBJECT_IME_HIDE"
        ,"type": {"kind":"Int32"}
        ,"value": 32808
    }
    ,{
         "name": "EVENT_OBJECT_IME_CHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 32809
    }
    ,{
         "name": "EVENT_OBJECT_TEXTEDIT_CONVERSIONTARGETCHANGED"
        ,"type": {"kind":"Int32"}
        ,"value": 32816
    }
    ,{
         "name": "EVENT_OBJECT_END"
        ,"type": {"kind":"Int32"}
        ,"value": 33023
    }
    ,{
         "name": "EVENT_AIA_START"
        ,"type": {"kind":"Int32"}
        ,"value": 40960
    }
    ,{
         "name": "EVENT_AIA_END"
        ,"type": {"kind":"Int32"}
        ,"value": 45055
    }
    ,{
         "name": "SOUND_SYSTEM_STARTUP"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "SOUND_SYSTEM_SHUTDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "SOUND_SYSTEM_BEEP"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "SOUND_SYSTEM_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "SOUND_SYSTEM_QUESTION"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "SOUND_SYSTEM_WARNING"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "SOUND_SYSTEM_INFORMATION"
        ,"type": {"kind":"Int32"}
        ,"value": 7
    }
    ,{
         "name": "SOUND_SYSTEM_MAXIMIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "SOUND_SYSTEM_MINIMIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 9
    }
    ,{
         "name": "SOUND_SYSTEM_RESTOREUP"
        ,"type": {"kind":"Int32"}
        ,"value": 10
    }
    ,{
         "name": "SOUND_SYSTEM_RESTOREDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 11
    }
    ,{
         "name": "SOUND_SYSTEM_APPSTART"
        ,"type": {"kind":"Int32"}
        ,"value": 12
    }
    ,{
         "name": "SOUND_SYSTEM_FAULT"
        ,"type": {"kind":"Int32"}
        ,"value": 13
    }
    ,{
         "name": "SOUND_SYSTEM_APPEND"
        ,"type": {"kind":"Int32"}
        ,"value": 14
    }
    ,{
         "name": "SOUND_SYSTEM_MENUCOMMAND"
        ,"type": {"kind":"Int32"}
        ,"value": 15
    }
    ,{
         "name": "SOUND_SYSTEM_MENUPOPUP"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "CSOUND_SYSTEM"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "ALERT_SYSTEM_INFORMATIONAL"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "ALERT_SYSTEM_WARNING"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "ALERT_SYSTEM_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "ALERT_SYSTEM_QUERY"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "ALERT_SYSTEM_CRITICAL"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "CALERT_SYSTEM"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "GUI_CARETBLINKING"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "GUI_INMOVESIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "GUI_INMENUMODE"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "GUI_SYSTEMMENUMODE"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "GUI_POPUPMENUMODE"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "GUI_16BITTASK"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "USER_DEFAULT_SCREEN_DPI"
        ,"type": {"kind":"Int32"}
        ,"value": 96
    }
    ,{
         "name": "STATE_SYSTEM_UNAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "STATE_SYSTEM_SELECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "STATE_SYSTEM_FOCUSED"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "STATE_SYSTEM_PRESSED"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "STATE_SYSTEM_CHECKED"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "STATE_SYSTEM_MIXED"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "STATE_SYSTEM_INDETERMINATE"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "STATE_SYSTEM_READONLY"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "STATE_SYSTEM_HOTTRACKED"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "STATE_SYSTEM_DEFAULT"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "STATE_SYSTEM_EXPANDED"
        ,"type": {"kind":"Int32"}
        ,"value": 512
    }
    ,{
         "name": "STATE_SYSTEM_COLLAPSED"
        ,"type": {"kind":"Int32"}
        ,"value": 1024
    }
    ,{
         "name": "STATE_SYSTEM_BUSY"
        ,"type": {"kind":"Int32"}
        ,"value": 2048
    }
    ,{
         "name": "STATE_SYSTEM_FLOATING"
        ,"type": {"kind":"Int32"}
        ,"value": 4096
    }
    ,{
         "name": "STATE_SYSTEM_MARQUEED"
        ,"type": {"kind":"Int32"}
        ,"value": 8192
    }
    ,{
         "name": "STATE_SYSTEM_ANIMATED"
        ,"type": {"kind":"Int32"}
        ,"value": 16384
    }
    ,{
         "name": "STATE_SYSTEM_INVISIBLE"
        ,"type": {"kind":"Int32"}
        ,"value": 32768
    }
    ,{
         "name": "STATE_SYSTEM_OFFSCREEN"
        ,"type": {"kind":"Int32"}
        ,"value": 65536
    }
    ,{
         "name": "STATE_SYSTEM_SIZEABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 131072
    }
    ,{
         "name": "STATE_SYSTEM_MOVEABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 262144
    }
    ,{
         "name": "STATE_SYSTEM_SELFVOICING"
        ,"type": {"kind":"Int32"}
        ,"value": 524288
    }
    ,{
         "name": "STATE_SYSTEM_FOCUSABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 1048576
    }
    ,{
         "name": "STATE_SYSTEM_SELECTABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 2097152
    }
    ,{
         "name": "STATE_SYSTEM_LINKED"
        ,"type": {"kind":"Int32"}
        ,"value": 4194304
    }
    ,{
         "name": "STATE_SYSTEM_TRAVERSED"
        ,"type": {"kind":"Int32"}
        ,"value": 8388608
    }
    ,{
         "name": "STATE_SYSTEM_MULTISELECTABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 16777216
    }
    ,{
         "name": "STATE_SYSTEM_EXTSELECTABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 33554432
    }
    ,{
         "name": "STATE_SYSTEM_ALERT_LOW"
        ,"type": {"kind":"Int32"}
        ,"value": 67108864
    }
    ,{
         "name": "STATE_SYSTEM_ALERT_MEDIUM"
        ,"type": {"kind":"Int32"}
        ,"value": 134217728
    }
    ,{
         "name": "STATE_SYSTEM_ALERT_HIGH"
        ,"type": {"kind":"Int32"}
        ,"value": 268435456
    }
    ,{
         "name": "STATE_SYSTEM_PROTECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 536870912
    }
    ,{
         "name": "STATE_SYSTEM_VALID"
        ,"type": {"kind":"Int32"}
        ,"value": 1073741823
    }
    ,{
         "name": "CCHILDREN_TITLEBAR"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "CCHILDREN_SCROLLBAR"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "CURSOR_SHOWING"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "CURSOR_SUPPRESSED"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "WS_ACTIVECAPTION"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "GA_PARENT"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "GA_ROOT"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "GA_ROOTOWNER"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "RIM_INPUT"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "RIM_INPUTSINK"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "RIM_TYPEMOUSE"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "RIM_TYPEKEYBOARD"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "RIM_TYPEHID"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "RIM_TYPEMAX"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "RI_MOUSE_LEFT_BUTTON_DOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "RI_MOUSE_LEFT_BUTTON_UP"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "RI_MOUSE_RIGHT_BUTTON_DOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "RI_MOUSE_RIGHT_BUTTON_UP"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "RI_MOUSE_MIDDLE_BUTTON_DOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "RI_MOUSE_MIDDLE_BUTTON_UP"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "RI_MOUSE_BUTTON_1_DOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "RI_MOUSE_BUTTON_1_UP"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "RI_MOUSE_BUTTON_2_DOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "RI_MOUSE_BUTTON_2_UP"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "RI_MOUSE_BUTTON_3_DOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "RI_MOUSE_BUTTON_3_UP"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "RI_MOUSE_BUTTON_4_DOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "RI_MOUSE_BUTTON_4_UP"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "RI_MOUSE_BUTTON_5_DOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "RI_MOUSE_BUTTON_5_UP"
        ,"type": {"kind":"Int32"}
        ,"value": 512
    }
    ,{
         "name": "RI_MOUSE_WHEEL"
        ,"type": {"kind":"Int32"}
        ,"value": 1024
    }
    ,{
         "name": "RI_MOUSE_HWHEEL"
        ,"type": {"kind":"Int32"}
        ,"value": 2048
    }
    ,{
         "name": "MOUSE_MOVE_RELATIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "MOUSE_MOVE_ABSOLUTE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "MOUSE_VIRTUAL_DESKTOP"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "MOUSE_ATTRIBUTES_CHANGED"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "MOUSE_MOVE_NOCOALESCE"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "KEYBOARD_OVERRUN_MAKE_CODE"
        ,"type": {"kind":"Int32"}
        ,"value": 255
    }
    ,{
         "name": "RI_KEY_MAKE"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "RI_KEY_BREAK"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "RI_KEY_E0"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "RI_KEY_E1"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "RI_KEY_TERMSRV_SET_LED"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "RI_KEY_TERMSRV_SHADOW"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "RID_INPUT"
        ,"type": {"kind":"Int32"}
        ,"value": 268435459
    }
    ,{
         "name": "RID_HEADER"
        ,"type": {"kind":"Int32"}
        ,"value": 268435461
    }
    ,{
         "name": "RIDI_PREPARSEDDATA"
        ,"type": {"kind":"Int32"}
        ,"value": 536870917
    }
    ,{
         "name": "RIDI_DEVICENAME"
        ,"type": {"kind":"Int32"}
        ,"value": 536870919
    }
    ,{
         "name": "RIDI_DEVICEINFO"
        ,"type": {"kind":"Int32"}
        ,"value": 536870923
    }
    ,{
         "name": "RIDEV_REMOVE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "RIDEV_EXCLUDE"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "RIDEV_PAGEONLY"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "RIDEV_NOLEGACY"
        ,"type": {"kind":"Int32"}
        ,"value": 48
    }
    ,{
         "name": "RIDEV_INPUTSINK"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "RIDEV_CAPTUREMOUSE"
        ,"type": {"kind":"Int32"}
        ,"value": 512
    }
    ,{
         "name": "RIDEV_NOHOTKEYS"
        ,"type": {"kind":"Int32"}
        ,"value": 512
    }
    ,{
         "name": "RIDEV_APPKEYS"
        ,"type": {"kind":"Int32"}
        ,"value": 1024
    }
    ,{
         "name": "RIDEV_EXINPUTSINK"
        ,"type": {"kind":"Int32"}
        ,"value": 4096
    }
    ,{
         "name": "RIDEV_DEVNOTIFY"
        ,"type": {"kind":"Int32"}
        ,"value": 8192
    }
    ,{
         "name": "RIDEV_EXMODEMASK"
        ,"type": {"kind":"Int32"}
        ,"value": 240
    }
    ,{
         "name": "GIDC_ARRIVAL"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "GIDC_REMOVAL"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "POINTER_DEVICE_PRODUCT_STRING_MAX"
        ,"type": {"kind":"Int32"}
        ,"value": 520
    }
    ,{
         "name": "PDC_ARRIVAL"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "PDC_REMOVAL"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "PDC_ORIENTATION_0"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "PDC_ORIENTATION_90"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "PDC_ORIENTATION_180"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "PDC_ORIENTATION_270"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "PDC_MODE_DEFAULT"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "PDC_MODE_CENTERED"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "PDC_MAPPING_CHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "PDC_RESOLUTION"
        ,"type": {"kind":"Int32"}
        ,"value": 512
    }
    ,{
         "name": "PDC_ORIGIN"
        ,"type": {"kind":"Int32"}
        ,"value": 1024
    }
    ,{
         "name": "PDC_MODE_ASPECTRATIOPRESERVED"
        ,"type": {"kind":"Int32"}
        ,"value": 2048
    }
    ,{
         "name": "MSGFLT_ADD"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "MSGFLT_REMOVE"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "MSGFLTINFO_NONE"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "MSGFLTINFO_ALREADYALLOWED_FORWND"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "MSGFLTINFO_ALREADYDISALLOWED_FORWND"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "MSGFLTINFO_ALLOWED_HIGHER"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "MSGFLT_RESET"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "MSGFLT_ALLOW"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "MSGFLT_DISALLOW"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "GF_BEGIN"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "GF_INERTIA"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "GF_END"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "GID_BEGIN"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "GID_END"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "GID_ZOOM"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "GID_PAN"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "GID_ROTATE"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "GID_TWOFINGERTAP"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "GID_PRESSANDTAP"
        ,"type": {"kind":"Int32"}
        ,"value": 7
    }
    ,{
         "name": "GID_ROLLOVER"
        ,"type": {"kind":"Int32"}
        ,"value": 7
    }
    ,{
         "name": "GC_ALLGESTURES"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "GC_ZOOM"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "GC_PAN"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "GC_PAN_WITH_SINGLE_FINGER_VERTICALLY"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "GC_PAN_WITH_SINGLE_FINGER_HORIZONTALLY"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "GC_PAN_WITH_GUTTER"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "GC_PAN_WITH_INERTIA"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "GC_ROTATE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "GC_TWOFINGERTAP"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "GC_PRESSANDTAP"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "GC_ROLLOVER"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "GESTURECONFIGMAXCOUNT"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "NID_INTEGRATED_TOUCH"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "NID_EXTERNAL_TOUCH"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "NID_INTEGRATED_PEN"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "NID_EXTERNAL_PEN"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "NID_MULTI_INPUT"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "NID_READY"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "MAX_STR_BLOCKREASON"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "DXGI_CREATE_FACTORY_DEBUG"
        ,"type": {"kind":"UInt32"}
        ,"value": 1
    }
    ,{
         "name": "INFINITE"
        ,"type": {"kind":"UInt32"}
        ,"value": 4294967295
    }
    ,{
         "name": "FACILITY_NULL"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "FACILITY_RPC"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "FACILITY_DISPATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "FACILITY_STORAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "FACILITY_ITF"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "FACILITY_WIN32"
        ,"type": {"kind":"Int32"}
        ,"value": 7
    }
    ,{
         "name": "FACILITY_WINDOWS"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "FACILITY_SSPI"
        ,"type": {"kind":"Int32"}
        ,"value": 9
    }
    ,{
         "name": "FACILITY_SECURITY"
        ,"type": {"kind":"Int32"}
        ,"value": 9
    }
    ,{
         "name": "FACILITY_CONTROL"
        ,"type": {"kind":"Int32"}
        ,"value": 10
    }
    ,{
         "name": "FACILITY_CERT"
        ,"type": {"kind":"Int32"}
        ,"value": 11
    }
    ,{
         "name": "FACILITY_INTERNET"
        ,"type": {"kind":"Int32"}
        ,"value": 12
    }
    ,{
         "name": "FACILITY_MEDIASERVER"
        ,"type": {"kind":"Int32"}
        ,"value": 13
    }
    ,{
         "name": "FACILITY_MSMQ"
        ,"type": {"kind":"Int32"}
        ,"value": 14
    }
    ,{
         "name": "FACILITY_SETUPAPI"
        ,"type": {"kind":"Int32"}
        ,"value": 15
    }
    ,{
         "name": "FACILITY_SCARD"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "FACILITY_COMPLUS"
        ,"type": {"kind":"Int32"}
        ,"value": 17
    }
    ,{
         "name": "FACILITY_AAF"
        ,"type": {"kind":"Int32"}
        ,"value": 18
    }
    ,{
         "name": "FACILITY_URT"
        ,"type": {"kind":"Int32"}
        ,"value": 19
    }
    ,{
         "name": "FACILITY_ACS"
        ,"type": {"kind":"Int32"}
        ,"value": 20
    }
    ,{
         "name": "FACILITY_DPLAY"
        ,"type": {"kind":"Int32"}
        ,"value": 21
    }
    ,{
         "name": "FACILITY_UMI"
        ,"type": {"kind":"Int32"}
        ,"value": 22
    }
    ,{
         "name": "FACILITY_SXS"
        ,"type": {"kind":"Int32"}
        ,"value": 23
    }
    ,{
         "name": "FACILITY_WINDOWS_CE"
        ,"type": {"kind":"Int32"}
        ,"value": 24
    }
    ,{
         "name": "FACILITY_HTTP"
        ,"type": {"kind":"Int32"}
        ,"value": 25
    }
    ,{
         "name": "FACILITY_USERMODE_COMMONLOG"
        ,"type": {"kind":"Int32"}
        ,"value": 26
    }
    ,{
         "name": "FACILITY_WER"
        ,"type": {"kind":"Int32"}
        ,"value": 27
    }
    ,{
         "name": "FACILITY_USERMODE_FILTER_MANAGER"
        ,"type": {"kind":"Int32"}
        ,"value": 31
    }
    ,{
         "name": "FACILITY_BACKGROUNDCOPY"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "FACILITY_CONFIGURATION"
        ,"type": {"kind":"Int32"}
        ,"value": 33
    }
    ,{
         "name": "FACILITY_WIA"
        ,"type": {"kind":"Int32"}
        ,"value": 33
    }
    ,{
         "name": "FACILITY_STATE_MANAGEMENT"
        ,"type": {"kind":"Int32"}
        ,"value": 34
    }
    ,{
         "name": "FACILITY_METADIRECTORY"
        ,"type": {"kind":"Int32"}
        ,"value": 35
    }
    ,{
         "name": "FACILITY_WINDOWSUPDATE"
        ,"type": {"kind":"Int32"}
        ,"value": 36
    }
    ,{
         "name": "FACILITY_DIRECTORYSERVICE"
        ,"type": {"kind":"Int32"}
        ,"value": 37
    }
    ,{
         "name": "FACILITY_GRAPHICS"
        ,"type": {"kind":"Int32"}
        ,"value": 38
    }
    ,{
         "name": "FACILITY_SHELL"
        ,"type": {"kind":"Int32"}
        ,"value": 39
    }
    ,{
         "name": "FACILITY_NAP"
        ,"type": {"kind":"Int32"}
        ,"value": 39
    }
    ,{
         "name": "FACILITY_TPM_SERVICES"
        ,"type": {"kind":"Int32"}
        ,"value": 40
    }
    ,{
         "name": "FACILITY_TPM_SOFTWARE"
        ,"type": {"kind":"Int32"}
        ,"value": 41
    }
    ,{
         "name": "FACILITY_UI"
        ,"type": {"kind":"Int32"}
        ,"value": 42
    }
    ,{
         "name": "FACILITY_XAML"
        ,"type": {"kind":"Int32"}
        ,"value": 43
    }
    ,{
         "name": "FACILITY_ACTION_QUEUE"
        ,"type": {"kind":"Int32"}
        ,"value": 44
    }
    ,{
         "name": "FACILITY_PLA"
        ,"type": {"kind":"Int32"}
        ,"value": 48
    }
    ,{
         "name": "FACILITY_WINDOWS_SETUP"
        ,"type": {"kind":"Int32"}
        ,"value": 48
    }
    ,{
         "name": "FACILITY_FVE"
        ,"type": {"kind":"Int32"}
        ,"value": 49
    }
    ,{
         "name": "FACILITY_FWP"
        ,"type": {"kind":"Int32"}
        ,"value": 50
    }
    ,{
         "name": "FACILITY_WINRM"
        ,"type": {"kind":"Int32"}
        ,"value": 51
    }
    ,{
         "name": "FACILITY_NDIS"
        ,"type": {"kind":"Int32"}
        ,"value": 52
    }
    ,{
         "name": "FACILITY_USERMODE_HYPERVISOR"
        ,"type": {"kind":"Int32"}
        ,"value": 53
    }
    ,{
         "name": "FACILITY_CMI"
        ,"type": {"kind":"Int32"}
        ,"value": 54
    }
    ,{
         "name": "FACILITY_USERMODE_VIRTUALIZATION"
        ,"type": {"kind":"Int32"}
        ,"value": 55
    }
    ,{
         "name": "FACILITY_USERMODE_VOLMGR"
        ,"type": {"kind":"Int32"}
        ,"value": 56
    }
    ,{
         "name": "FACILITY_BCD"
        ,"type": {"kind":"Int32"}
        ,"value": 57
    }
    ,{
         "name": "FACILITY_USERMODE_VHD"
        ,"type": {"kind":"Int32"}
        ,"value": 58
    }
    ,{
         "name": "FACILITY_USERMODE_HNS"
        ,"type": {"kind":"Int32"}
        ,"value": 59
    }
    ,{
         "name": "FACILITY_SDIAG"
        ,"type": {"kind":"Int32"}
        ,"value": 60
    }
    ,{
         "name": "FACILITY_WEBSERVICES"
        ,"type": {"kind":"Int32"}
        ,"value": 61
    }
    ,{
         "name": "FACILITY_WINPE"
        ,"type": {"kind":"Int32"}
        ,"value": 61
    }
    ,{
         "name": "FACILITY_WPN"
        ,"type": {"kind":"Int32"}
        ,"value": 62
    }
    ,{
         "name": "FACILITY_WINDOWS_STORE"
        ,"type": {"kind":"Int32"}
        ,"value": 63
    }
    ,{
         "name": "FACILITY_INPUT"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "FACILITY_QUIC"
        ,"type": {"kind":"Int32"}
        ,"value": 65
    }
    ,{
         "name": "FACILITY_EAP"
        ,"type": {"kind":"Int32"}
        ,"value": 66
    }
    ,{
         "name": "FACILITY_WINDOWS_DEFENDER"
        ,"type": {"kind":"Int32"}
        ,"value": 80
    }
    ,{
         "name": "FACILITY_OPC"
        ,"type": {"kind":"Int32"}
        ,"value": 81
    }
    ,{
         "name": "FACILITY_XPS"
        ,"type": {"kind":"Int32"}
        ,"value": 82
    }
    ,{
         "name": "FACILITY_MBN"
        ,"type": {"kind":"Int32"}
        ,"value": 84
    }
    ,{
         "name": "FACILITY_POWERSHELL"
        ,"type": {"kind":"Int32"}
        ,"value": 84
    }
    ,{
         "name": "FACILITY_RAS"
        ,"type": {"kind":"Int32"}
        ,"value": 83
    }
    ,{
         "name": "FACILITY_P2P_INT"
        ,"type": {"kind":"Int32"}
        ,"value": 98
    }
    ,{
         "name": "FACILITY_P2P"
        ,"type": {"kind":"Int32"}
        ,"value": 99
    }
    ,{
         "name": "FACILITY_DAF"
        ,"type": {"kind":"Int32"}
        ,"value": 100
    }
    ,{
         "name": "FACILITY_BLUETOOTH_ATT"
        ,"type": {"kind":"Int32"}
        ,"value": 101
    }
    ,{
         "name": "FACILITY_AUDIO"
        ,"type": {"kind":"Int32"}
        ,"value": 102
    }
    ,{
         "name": "FACILITY_STATEREPOSITORY"
        ,"type": {"kind":"Int32"}
        ,"value": 103
    }
    ,{
         "name": "FACILITY_VISUALCPP"
        ,"type": {"kind":"Int32"}
        ,"value": 109
    }
    ,{
         "name": "FACILITY_SCRIPT"
        ,"type": {"kind":"Int32"}
        ,"value": 112
    }
    ,{
         "name": "FACILITY_PARSE"
        ,"type": {"kind":"Int32"}
        ,"value": 113
    }
    ,{
         "name": "FACILITY_BLB"
        ,"type": {"kind":"Int32"}
        ,"value": 120
    }
    ,{
         "name": "FACILITY_BLB_CLI"
        ,"type": {"kind":"Int32"}
        ,"value": 121
    }
    ,{
         "name": "FACILITY_WSBAPP"
        ,"type": {"kind":"Int32"}
        ,"value": 122
    }
    ,{
         "name": "FACILITY_BLBUI"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "FACILITY_USN"
        ,"type": {"kind":"Int32"}
        ,"value": 129
    }
    ,{
         "name": "FACILITY_USERMODE_VOLSNAP"
        ,"type": {"kind":"Int32"}
        ,"value": 130
    }
    ,{
         "name": "FACILITY_TIERING"
        ,"type": {"kind":"Int32"}
        ,"value": 131
    }
    ,{
         "name": "FACILITY_WSB_ONLINE"
        ,"type": {"kind":"Int32"}
        ,"value": 133
    }
    ,{
         "name": "FACILITY_ONLINE_ID"
        ,"type": {"kind":"Int32"}
        ,"value": 134
    }
    ,{
         "name": "FACILITY_DEVICE_UPDATE_AGENT"
        ,"type": {"kind":"Int32"}
        ,"value": 135
    }
    ,{
         "name": "FACILITY_DRVSERVICING"
        ,"type": {"kind":"Int32"}
        ,"value": 136
    }
    ,{
         "name": "FACILITY_DLS"
        ,"type": {"kind":"Int32"}
        ,"value": 153
    }
    ,{
         "name": "FACILITY_DELIVERY_OPTIMIZATION"
        ,"type": {"kind":"Int32"}
        ,"value": 208
    }
    ,{
         "name": "FACILITY_USERMODE_SPACES"
        ,"type": {"kind":"Int32"}
        ,"value": 231
    }
    ,{
         "name": "FACILITY_USER_MODE_SECURITY_CORE"
        ,"type": {"kind":"Int32"}
        ,"value": 232
    }
    ,{
         "name": "FACILITY_USERMODE_LICENSING"
        ,"type": {"kind":"Int32"}
        ,"value": 234
    }
    ,{
         "name": "FACILITY_SOS"
        ,"type": {"kind":"Int32"}
        ,"value": 160
    }
    ,{
         "name": "FACILITY_DEBUGGERS"
        ,"type": {"kind":"Int32"}
        ,"value": 176
    }
    ,{
         "name": "FACILITY_SPP"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "FACILITY_RESTORE"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "FACILITY_DMSERVER"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "FACILITY_DEPLOYMENT_SERVICES_SERVER"
        ,"type": {"kind":"Int32"}
        ,"value": 257
    }
    ,{
         "name": "FACILITY_DEPLOYMENT_SERVICES_IMAGING"
        ,"type": {"kind":"Int32"}
        ,"value": 258
    }
    ,{
         "name": "FACILITY_DEPLOYMENT_SERVICES_MANAGEMENT"
        ,"type": {"kind":"Int32"}
        ,"value": 259
    }
    ,{
         "name": "FACILITY_DEPLOYMENT_SERVICES_UTIL"
        ,"type": {"kind":"Int32"}
        ,"value": 260
    }
    ,{
         "name": "FACILITY_DEPLOYMENT_SERVICES_BINLSVC"
        ,"type": {"kind":"Int32"}
        ,"value": 261
    }
    ,{
         "name": "FACILITY_DEPLOYMENT_SERVICES_PXE"
        ,"type": {"kind":"Int32"}
        ,"value": 263
    }
    ,{
         "name": "FACILITY_DEPLOYMENT_SERVICES_TFTP"
        ,"type": {"kind":"Int32"}
        ,"value": 264
    }
    ,{
         "name": "FACILITY_DEPLOYMENT_SERVICES_TRANSPORT_MANAGEMENT"
        ,"type": {"kind":"Int32"}
        ,"value": 272
    }
    ,{
         "name": "FACILITY_DEPLOYMENT_SERVICES_DRIVER_PROVISIONING"
        ,"type": {"kind":"Int32"}
        ,"value": 278
    }
    ,{
         "name": "FACILITY_DEPLOYMENT_SERVICES_MULTICAST_SERVER"
        ,"type": {"kind":"Int32"}
        ,"value": 289
    }
    ,{
         "name": "FACILITY_DEPLOYMENT_SERVICES_MULTICAST_CLIENT"
        ,"type": {"kind":"Int32"}
        ,"value": 290
    }
    ,{
         "name": "FACILITY_DEPLOYMENT_SERVICES_CONTENT_PROVIDER"
        ,"type": {"kind":"Int32"}
        ,"value": 293
    }
    ,{
         "name": "FACILITY_LINGUISTIC_SERVICES"
        ,"type": {"kind":"Int32"}
        ,"value": 305
    }
    ,{
         "name": "FACILITY_AUDIOSTREAMING"
        ,"type": {"kind":"Int32"}
        ,"value": 1094
    }
    ,{
         "name": "FACILITY_TTD"
        ,"type": {"kind":"Int32"}
        ,"value": 1490
    }
    ,{
         "name": "FACILITY_ACCELERATOR"
        ,"type": {"kind":"Int32"}
        ,"value": 1536
    }
    ,{
         "name": "FACILITY_WMAAECMA"
        ,"type": {"kind":"Int32"}
        ,"value": 1996
    }
    ,{
         "name": "FACILITY_DIRECTMUSIC"
        ,"type": {"kind":"Int32"}
        ,"value": 2168
    }
    ,{
         "name": "FACILITY_DIRECT3D10"
        ,"type": {"kind":"Int32"}
        ,"value": 2169
    }
    ,{
         "name": "FACILITY_DXGI"
        ,"type": {"kind":"Int32"}
        ,"value": 2170
    }
    ,{
         "name": "FACILITY_DXGI_DDI"
        ,"type": {"kind":"Int32"}
        ,"value": 2171
    }
    ,{
         "name": "FACILITY_DIRECT3D11"
        ,"type": {"kind":"Int32"}
        ,"value": 2172
    }
    ,{
         "name": "FACILITY_DIRECT3D11_DEBUG"
        ,"type": {"kind":"Int32"}
        ,"value": 2173
    }
    ,{
         "name": "FACILITY_DIRECT3D12"
        ,"type": {"kind":"Int32"}
        ,"value": 2174
    }
    ,{
         "name": "FACILITY_DIRECT3D12_DEBUG"
        ,"type": {"kind":"Int32"}
        ,"value": 2175
    }
    ,{
         "name": "FACILITY_DXCORE"
        ,"type": {"kind":"Int32"}
        ,"value": 2176
    }
    ,{
         "name": "FACILITY_LEAP"
        ,"type": {"kind":"Int32"}
        ,"value": 2184
    }
    ,{
         "name": "FACILITY_AUDCLNT"
        ,"type": {"kind":"Int32"}
        ,"value": 2185
    }
    ,{
         "name": "FACILITY_WINCODEC_DWRITE_DWM"
        ,"type": {"kind":"Int32"}
        ,"value": 2200
    }
    ,{
         "name": "FACILITY_WINML"
        ,"type": {"kind":"Int32"}
        ,"value": 2192
    }
    ,{
         "name": "FACILITY_DIRECT2D"
        ,"type": {"kind":"Int32"}
        ,"value": 2201
    }
    ,{
         "name": "FACILITY_DEFRAG"
        ,"type": {"kind":"Int32"}
        ,"value": 2304
    }
    ,{
         "name": "FACILITY_USERMODE_SDBUS"
        ,"type": {"kind":"Int32"}
        ,"value": 2305
    }
    ,{
         "name": "FACILITY_JSCRIPT"
        ,"type": {"kind":"Int32"}
        ,"value": 2306
    }
    ,{
         "name": "FACILITY_PIDGENX"
        ,"type": {"kind":"Int32"}
        ,"value": 2561
    }
    ,{
         "name": "FACILITY_EAS"
        ,"type": {"kind":"Int32"}
        ,"value": 85
    }
    ,{
         "name": "FACILITY_WEB"
        ,"type": {"kind":"Int32"}
        ,"value": 885
    }
    ,{
         "name": "FACILITY_WEB_SOCKET"
        ,"type": {"kind":"Int32"}
        ,"value": 886
    }
    ,{
         "name": "FACILITY_MOBILE"
        ,"type": {"kind":"Int32"}
        ,"value": 1793
    }
    ,{
         "name": "FACILITY_SQLITE"
        ,"type": {"kind":"Int32"}
        ,"value": 1967
    }
    ,{
         "name": "FACILITY_UTC"
        ,"type": {"kind":"Int32"}
        ,"value": 1989
    }
    ,{
         "name": "FACILITY_WEP"
        ,"type": {"kind":"Int32"}
        ,"value": 2049
    }
    ,{
         "name": "FACILITY_SYNCENGINE"
        ,"type": {"kind":"Int32"}
        ,"value": 2050
    }
    ,{
         "name": "FACILITY_XBOX"
        ,"type": {"kind":"Int32"}
        ,"value": 2339
    }
    ,{
         "name": "FACILITY_GAME"
        ,"type": {"kind":"Int32"}
        ,"value": 2340
    }
    ,{
         "name": "FACILITY_PIX"
        ,"type": {"kind":"Int32"}
        ,"value": 2748
    }
    ,{
         "name": "ERROR_SUCCESS"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "NO_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "SEC_E_OK"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "ERROR_INVALID_FUNCTION"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "ERROR_FILE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "ERROR_PATH_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "ERROR_TOO_MANY_OPEN_FILES"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "ERROR_ACCESS_DENIED"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "ERROR_INVALID_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": 6
    }
    ,{
         "name": "ERROR_ARENA_TRASHED"
        ,"type": {"kind":"Int32"}
        ,"value": 7
    }
    ,{
         "name": "ERROR_NOT_ENOUGH_MEMORY"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "ERROR_INVALID_BLOCK"
        ,"type": {"kind":"Int32"}
        ,"value": 9
    }
    ,{
         "name": "ERROR_BAD_ENVIRONMENT"
        ,"type": {"kind":"Int32"}
        ,"value": 10
    }
    ,{
         "name": "ERROR_BAD_FORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": 11
    }
    ,{
         "name": "ERROR_INVALID_ACCESS"
        ,"type": {"kind":"Int32"}
        ,"value": 12
    }
    ,{
         "name": "ERROR_INVALID_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": 13
    }
    ,{
         "name": "ERROR_OUTOFMEMORY"
        ,"type": {"kind":"Int32"}
        ,"value": 14
    }
    ,{
         "name": "ERROR_INVALID_DRIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 15
    }
    ,{
         "name": "ERROR_CURRENT_DIRECTORY"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "ERROR_NOT_SAME_DEVICE"
        ,"type": {"kind":"Int32"}
        ,"value": 17
    }
    ,{
         "name": "ERROR_NO_MORE_FILES"
        ,"type": {"kind":"Int32"}
        ,"value": 18
    }
    ,{
         "name": "ERROR_WRITE_PROTECT"
        ,"type": {"kind":"Int32"}
        ,"value": 19
    }
    ,{
         "name": "ERROR_BAD_UNIT"
        ,"type": {"kind":"Int32"}
        ,"value": 20
    }
    ,{
         "name": "ERROR_NOT_READY"
        ,"type": {"kind":"Int32"}
        ,"value": 21
    }
    ,{
         "name": "ERROR_BAD_COMMAND"
        ,"type": {"kind":"Int32"}
        ,"value": 22
    }
    ,{
         "name": "ERROR_CRC"
        ,"type": {"kind":"Int32"}
        ,"value": 23
    }
    ,{
         "name": "ERROR_BAD_LENGTH"
        ,"type": {"kind":"Int32"}
        ,"value": 24
    }
    ,{
         "name": "ERROR_SEEK"
        ,"type": {"kind":"Int32"}
        ,"value": 25
    }
    ,{
         "name": "ERROR_NOT_DOS_DISK"
        ,"type": {"kind":"Int32"}
        ,"value": 26
    }
    ,{
         "name": "ERROR_SECTOR_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 27
    }
    ,{
         "name": "ERROR_OUT_OF_PAPER"
        ,"type": {"kind":"Int32"}
        ,"value": 28
    }
    ,{
         "name": "ERROR_WRITE_FAULT"
        ,"type": {"kind":"Int32"}
        ,"value": 29
    }
    ,{
         "name": "ERROR_READ_FAULT"
        ,"type": {"kind":"Int32"}
        ,"value": 30
    }
    ,{
         "name": "ERROR_GEN_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 31
    }
    ,{
         "name": "ERROR_SHARING_VIOLATION"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "ERROR_LOCK_VIOLATION"
        ,"type": {"kind":"Int32"}
        ,"value": 33
    }
    ,{
         "name": "ERROR_WRONG_DISK"
        ,"type": {"kind":"Int32"}
        ,"value": 34
    }
    ,{
         "name": "ERROR_SHARING_BUFFER_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 36
    }
    ,{
         "name": "ERROR_HANDLE_EOF"
        ,"type": {"kind":"Int32"}
        ,"value": 38
    }
    ,{
         "name": "ERROR_HANDLE_DISK_FULL"
        ,"type": {"kind":"Int32"}
        ,"value": 39
    }
    ,{
         "name": "ERROR_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 50
    }
    ,{
         "name": "ERROR_REM_NOT_LIST"
        ,"type": {"kind":"Int32"}
        ,"value": 51
    }
    ,{
         "name": "ERROR_DUP_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 52
    }
    ,{
         "name": "ERROR_BAD_NETPATH"
        ,"type": {"kind":"Int32"}
        ,"value": 53
    }
    ,{
         "name": "ERROR_NETWORK_BUSY"
        ,"type": {"kind":"Int32"}
        ,"value": 54
    }
    ,{
         "name": "ERROR_DEV_NOT_EXIST"
        ,"type": {"kind":"Int32"}
        ,"value": 55
    }
    ,{
         "name": "ERROR_TOO_MANY_CMDS"
        ,"type": {"kind":"Int32"}
        ,"value": 56
    }
    ,{
         "name": "ERROR_ADAP_HDW_ERR"
        ,"type": {"kind":"Int32"}
        ,"value": 57
    }
    ,{
         "name": "ERROR_BAD_NET_RESP"
        ,"type": {"kind":"Int32"}
        ,"value": 58
    }
    ,{
         "name": "ERROR_UNEXP_NET_ERR"
        ,"type": {"kind":"Int32"}
        ,"value": 59
    }
    ,{
         "name": "ERROR_BAD_REM_ADAP"
        ,"type": {"kind":"Int32"}
        ,"value": 60
    }
    ,{
         "name": "ERROR_PRINTQ_FULL"
        ,"type": {"kind":"Int32"}
        ,"value": 61
    }
    ,{
         "name": "ERROR_NO_SPOOL_SPACE"
        ,"type": {"kind":"Int32"}
        ,"value": 62
    }
    ,{
         "name": "ERROR_PRINT_CANCELLED"
        ,"type": {"kind":"Int32"}
        ,"value": 63
    }
    ,{
         "name": "ERROR_NETNAME_DELETED"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "ERROR_NETWORK_ACCESS_DENIED"
        ,"type": {"kind":"Int32"}
        ,"value": 65
    }
    ,{
         "name": "ERROR_BAD_DEV_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 66
    }
    ,{
         "name": "ERROR_BAD_NET_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 67
    }
    ,{
         "name": "ERROR_TOO_MANY_NAMES"
        ,"type": {"kind":"Int32"}
        ,"value": 68
    }
    ,{
         "name": "ERROR_TOO_MANY_SESS"
        ,"type": {"kind":"Int32"}
        ,"value": 69
    }
    ,{
         "name": "ERROR_SHARING_PAUSED"
        ,"type": {"kind":"Int32"}
        ,"value": 70
    }
    ,{
         "name": "ERROR_REQ_NOT_ACCEP"
        ,"type": {"kind":"Int32"}
        ,"value": 71
    }
    ,{
         "name": "ERROR_REDIR_PAUSED"
        ,"type": {"kind":"Int32"}
        ,"value": 72
    }
    ,{
         "name": "ERROR_FILE_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 80
    }
    ,{
         "name": "ERROR_CANNOT_MAKE"
        ,"type": {"kind":"Int32"}
        ,"value": 82
    }
    ,{
         "name": "ERROR_FAIL_I24"
        ,"type": {"kind":"Int32"}
        ,"value": 83
    }
    ,{
         "name": "ERROR_OUT_OF_STRUCTURES"
        ,"type": {"kind":"Int32"}
        ,"value": 84
    }
    ,{
         "name": "ERROR_ALREADY_ASSIGNED"
        ,"type": {"kind":"Int32"}
        ,"value": 85
    }
    ,{
         "name": "ERROR_INVALID_PASSWORD"
        ,"type": {"kind":"Int32"}
        ,"value": 86
    }
    ,{
         "name": "ERROR_INVALID_PARAMETER"
        ,"type": {"kind":"Int32"}
        ,"value": 87
    }
    ,{
         "name": "ERROR_NET_WRITE_FAULT"
        ,"type": {"kind":"Int32"}
        ,"value": 88
    }
    ,{
         "name": "ERROR_NO_PROC_SLOTS"
        ,"type": {"kind":"Int32"}
        ,"value": 89
    }
    ,{
         "name": "ERROR_TOO_MANY_SEMAPHORES"
        ,"type": {"kind":"Int32"}
        ,"value": 100
    }
    ,{
         "name": "ERROR_EXCL_SEM_ALREADY_OWNED"
        ,"type": {"kind":"Int32"}
        ,"value": 101
    }
    ,{
         "name": "ERROR_SEM_IS_SET"
        ,"type": {"kind":"Int32"}
        ,"value": 102
    }
    ,{
         "name": "ERROR_TOO_MANY_SEM_REQUESTS"
        ,"type": {"kind":"Int32"}
        ,"value": 103
    }
    ,{
         "name": "ERROR_INVALID_AT_INTERRUPT_TIME"
        ,"type": {"kind":"Int32"}
        ,"value": 104
    }
    ,{
         "name": "ERROR_SEM_OWNER_DIED"
        ,"type": {"kind":"Int32"}
        ,"value": 105
    }
    ,{
         "name": "ERROR_SEM_USER_LIMIT"
        ,"type": {"kind":"Int32"}
        ,"value": 106
    }
    ,{
         "name": "ERROR_DISK_CHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 107
    }
    ,{
         "name": "ERROR_DRIVE_LOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": 108
    }
    ,{
         "name": "ERROR_BROKEN_PIPE"
        ,"type": {"kind":"Int32"}
        ,"value": 109
    }
    ,{
         "name": "ERROR_OPEN_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 110
    }
    ,{
         "name": "ERROR_BUFFER_OVERFLOW"
        ,"type": {"kind":"Int32"}
        ,"value": 111
    }
    ,{
         "name": "ERROR_DISK_FULL"
        ,"type": {"kind":"Int32"}
        ,"value": 112
    }
    ,{
         "name": "ERROR_NO_MORE_SEARCH_HANDLES"
        ,"type": {"kind":"Int32"}
        ,"value": 113
    }
    ,{
         "name": "ERROR_INVALID_TARGET_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": 114
    }
    ,{
         "name": "ERROR_INVALID_CATEGORY"
        ,"type": {"kind":"Int32"}
        ,"value": 117
    }
    ,{
         "name": "ERROR_INVALID_VERIFY_SWITCH"
        ,"type": {"kind":"Int32"}
        ,"value": 118
    }
    ,{
         "name": "ERROR_BAD_DRIVER_LEVEL"
        ,"type": {"kind":"Int32"}
        ,"value": 119
    }
    ,{
         "name": "ERROR_CALL_NOT_IMPLEMENTED"
        ,"type": {"kind":"Int32"}
        ,"value": 120
    }
    ,{
         "name": "ERROR_SEM_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 121
    }
    ,{
         "name": "ERROR_INSUFFICIENT_BUFFER"
        ,"type": {"kind":"Int32"}
        ,"value": 122
    }
    ,{
         "name": "ERROR_INVALID_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 123
    }
    ,{
         "name": "ERROR_INVALID_LEVEL"
        ,"type": {"kind":"Int32"}
        ,"value": 124
    }
    ,{
         "name": "ERROR_NO_VOLUME_LABEL"
        ,"type": {"kind":"Int32"}
        ,"value": 125
    }
    ,{
         "name": "ERROR_MOD_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 126
    }
    ,{
         "name": "ERROR_PROC_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 127
    }
    ,{
         "name": "ERROR_WAIT_NO_CHILDREN"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "ERROR_CHILD_NOT_COMPLETE"
        ,"type": {"kind":"Int32"}
        ,"value": 129
    }
    ,{
         "name": "ERROR_DIRECT_ACCESS_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": 130
    }
    ,{
         "name": "ERROR_NEGATIVE_SEEK"
        ,"type": {"kind":"Int32"}
        ,"value": 131
    }
    ,{
         "name": "ERROR_SEEK_ON_DEVICE"
        ,"type": {"kind":"Int32"}
        ,"value": 132
    }
    ,{
         "name": "ERROR_IS_JOIN_TARGET"
        ,"type": {"kind":"Int32"}
        ,"value": 133
    }
    ,{
         "name": "ERROR_IS_JOINED"
        ,"type": {"kind":"Int32"}
        ,"value": 134
    }
    ,{
         "name": "ERROR_IS_SUBSTED"
        ,"type": {"kind":"Int32"}
        ,"value": 135
    }
    ,{
         "name": "ERROR_NOT_JOINED"
        ,"type": {"kind":"Int32"}
        ,"value": 136
    }
    ,{
         "name": "ERROR_NOT_SUBSTED"
        ,"type": {"kind":"Int32"}
        ,"value": 137
    }
    ,{
         "name": "ERROR_JOIN_TO_JOIN"
        ,"type": {"kind":"Int32"}
        ,"value": 138
    }
    ,{
         "name": "ERROR_SUBST_TO_SUBST"
        ,"type": {"kind":"Int32"}
        ,"value": 139
    }
    ,{
         "name": "ERROR_JOIN_TO_SUBST"
        ,"type": {"kind":"Int32"}
        ,"value": 140
    }
    ,{
         "name": "ERROR_SUBST_TO_JOIN"
        ,"type": {"kind":"Int32"}
        ,"value": 141
    }
    ,{
         "name": "ERROR_BUSY_DRIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 142
    }
    ,{
         "name": "ERROR_SAME_DRIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 143
    }
    ,{
         "name": "ERROR_DIR_NOT_ROOT"
        ,"type": {"kind":"Int32"}
        ,"value": 144
    }
    ,{
         "name": "ERROR_DIR_NOT_EMPTY"
        ,"type": {"kind":"Int32"}
        ,"value": 145
    }
    ,{
         "name": "ERROR_IS_SUBST_PATH"
        ,"type": {"kind":"Int32"}
        ,"value": 146
    }
    ,{
         "name": "ERROR_IS_JOIN_PATH"
        ,"type": {"kind":"Int32"}
        ,"value": 147
    }
    ,{
         "name": "ERROR_PATH_BUSY"
        ,"type": {"kind":"Int32"}
        ,"value": 148
    }
    ,{
         "name": "ERROR_IS_SUBST_TARGET"
        ,"type": {"kind":"Int32"}
        ,"value": 149
    }
    ,{
         "name": "ERROR_SYSTEM_TRACE"
        ,"type": {"kind":"Int32"}
        ,"value": 150
    }
    ,{
         "name": "ERROR_INVALID_EVENT_COUNT"
        ,"type": {"kind":"Int32"}
        ,"value": 151
    }
    ,{
         "name": "ERROR_TOO_MANY_MUXWAITERS"
        ,"type": {"kind":"Int32"}
        ,"value": 152
    }
    ,{
         "name": "ERROR_INVALID_LIST_FORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": 153
    }
    ,{
         "name": "ERROR_LABEL_TOO_LONG"
        ,"type": {"kind":"Int32"}
        ,"value": 154
    }
    ,{
         "name": "ERROR_TOO_MANY_TCBS"
        ,"type": {"kind":"Int32"}
        ,"value": 155
    }
    ,{
         "name": "ERROR_SIGNAL_REFUSED"
        ,"type": {"kind":"Int32"}
        ,"value": 156
    }
    ,{
         "name": "ERROR_DISCARDED"
        ,"type": {"kind":"Int32"}
        ,"value": 157
    }
    ,{
         "name": "ERROR_NOT_LOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": 158
    }
    ,{
         "name": "ERROR_BAD_THREADID_ADDR"
        ,"type": {"kind":"Int32"}
        ,"value": 159
    }
    ,{
         "name": "ERROR_BAD_ARGUMENTS"
        ,"type": {"kind":"Int32"}
        ,"value": 160
    }
    ,{
         "name": "ERROR_BAD_PATHNAME"
        ,"type": {"kind":"Int32"}
        ,"value": 161
    }
    ,{
         "name": "ERROR_SIGNAL_PENDING"
        ,"type": {"kind":"Int32"}
        ,"value": 162
    }
    ,{
         "name": "ERROR_MAX_THRDS_REACHED"
        ,"type": {"kind":"Int32"}
        ,"value": 164
    }
    ,{
         "name": "ERROR_LOCK_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 167
    }
    ,{
         "name": "ERROR_BUSY"
        ,"type": {"kind":"Int32"}
        ,"value": 170
    }
    ,{
         "name": "ERROR_DEVICE_SUPPORT_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 171
    }
    ,{
         "name": "ERROR_CANCEL_VIOLATION"
        ,"type": {"kind":"Int32"}
        ,"value": 173
    }
    ,{
         "name": "ERROR_ATOMIC_LOCKS_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 174
    }
    ,{
         "name": "ERROR_INVALID_SEGMENT_NUMBER"
        ,"type": {"kind":"Int32"}
        ,"value": 180
    }
    ,{
         "name": "ERROR_INVALID_ORDINAL"
        ,"type": {"kind":"Int32"}
        ,"value": 182
    }
    ,{
         "name": "ERROR_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 183
    }
    ,{
         "name": "ERROR_INVALID_FLAG_NUMBER"
        ,"type": {"kind":"Int32"}
        ,"value": 186
    }
    ,{
         "name": "ERROR_SEM_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 187
    }
    ,{
         "name": "ERROR_INVALID_STARTING_CODESEG"
        ,"type": {"kind":"Int32"}
        ,"value": 188
    }
    ,{
         "name": "ERROR_INVALID_STACKSEG"
        ,"type": {"kind":"Int32"}
        ,"value": 189
    }
    ,{
         "name": "ERROR_INVALID_MODULETYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 190
    }
    ,{
         "name": "ERROR_INVALID_EXE_SIGNATURE"
        ,"type": {"kind":"Int32"}
        ,"value": 191
    }
    ,{
         "name": "ERROR_EXE_MARKED_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": 192
    }
    ,{
         "name": "ERROR_BAD_EXE_FORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": 193
    }
    ,{
         "name": "ERROR_ITERATED_DATA_EXCEEDS_64k"
        ,"type": {"kind":"Int32"}
        ,"value": 194
    }
    ,{
         "name": "ERROR_INVALID_MINALLOCSIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 195
    }
    ,{
         "name": "ERROR_DYNLINK_FROM_INVALID_RING"
        ,"type": {"kind":"Int32"}
        ,"value": 196
    }
    ,{
         "name": "ERROR_IOPL_NOT_ENABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 197
    }
    ,{
         "name": "ERROR_INVALID_SEGDPL"
        ,"type": {"kind":"Int32"}
        ,"value": 198
    }
    ,{
         "name": "ERROR_AUTODATASEG_EXCEEDS_64k"
        ,"type": {"kind":"Int32"}
        ,"value": 199
    }
    ,{
         "name": "ERROR_RING2SEG_MUST_BE_MOVABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 200
    }
    ,{
         "name": "ERROR_RELOC_CHAIN_XEEDS_SEGLIM"
        ,"type": {"kind":"Int32"}
        ,"value": 201
    }
    ,{
         "name": "ERROR_INFLOOP_IN_RELOC_CHAIN"
        ,"type": {"kind":"Int32"}
        ,"value": 202
    }
    ,{
         "name": "ERROR_ENVVAR_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 203
    }
    ,{
         "name": "ERROR_NO_SIGNAL_SENT"
        ,"type": {"kind":"Int32"}
        ,"value": 205
    }
    ,{
         "name": "ERROR_FILENAME_EXCED_RANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 206
    }
    ,{
         "name": "ERROR_RING2_STACK_IN_USE"
        ,"type": {"kind":"Int32"}
        ,"value": 207
    }
    ,{
         "name": "ERROR_META_EXPANSION_TOO_LONG"
        ,"type": {"kind":"Int32"}
        ,"value": 208
    }
    ,{
         "name": "ERROR_INVALID_SIGNAL_NUMBER"
        ,"type": {"kind":"Int32"}
        ,"value": 209
    }
    ,{
         "name": "ERROR_THREAD_1_INACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 210
    }
    ,{
         "name": "ERROR_LOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": 212
    }
    ,{
         "name": "ERROR_TOO_MANY_MODULES"
        ,"type": {"kind":"Int32"}
        ,"value": 214
    }
    ,{
         "name": "ERROR_NESTING_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": 215
    }
    ,{
         "name": "ERROR_EXE_MACHINE_TYPE_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 216
    }
    ,{
         "name": "ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY"
        ,"type": {"kind":"Int32"}
        ,"value": 217
    }
    ,{
         "name": "ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY"
        ,"type": {"kind":"Int32"}
        ,"value": 218
    }
    ,{
         "name": "ERROR_FILE_CHECKED_OUT"
        ,"type": {"kind":"Int32"}
        ,"value": 220
    }
    ,{
         "name": "ERROR_CHECKOUT_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 221
    }
    ,{
         "name": "ERROR_BAD_FILE_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 222
    }
    ,{
         "name": "ERROR_FILE_TOO_LARGE"
        ,"type": {"kind":"Int32"}
        ,"value": 223
    }
    ,{
         "name": "ERROR_FORMS_AUTH_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 224
    }
    ,{
         "name": "ERROR_VIRUS_INFECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 225
    }
    ,{
         "name": "ERROR_VIRUS_DELETED"
        ,"type": {"kind":"Int32"}
        ,"value": 226
    }
    ,{
         "name": "ERROR_PIPE_LOCAL"
        ,"type": {"kind":"Int32"}
        ,"value": 229
    }
    ,{
         "name": "ERROR_BAD_PIPE"
        ,"type": {"kind":"Int32"}
        ,"value": 230
    }
    ,{
         "name": "ERROR_PIPE_BUSY"
        ,"type": {"kind":"Int32"}
        ,"value": 231
    }
    ,{
         "name": "ERROR_NO_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": 232
    }
    ,{
         "name": "ERROR_PIPE_NOT_CONNECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 233
    }
    ,{
         "name": "ERROR_MORE_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": 234
    }
    ,{
         "name": "ERROR_NO_WORK_DONE"
        ,"type": {"kind":"Int32"}
        ,"value": 235
    }
    ,{
         "name": "ERROR_VC_DISCONNECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 240
    }
    ,{
         "name": "ERROR_INVALID_EA_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 254
    }
    ,{
         "name": "ERROR_EA_LIST_INCONSISTENT"
        ,"type": {"kind":"Int32"}
        ,"value": 255
    }
    ,{
         "name": "WAIT_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 258
    }
    ,{
         "name": "ERROR_NO_MORE_ITEMS"
        ,"type": {"kind":"Int32"}
        ,"value": 259
    }
    ,{
         "name": "ERROR_CANNOT_COPY"
        ,"type": {"kind":"Int32"}
        ,"value": 266
    }
    ,{
         "name": "ERROR_DIRECTORY"
        ,"type": {"kind":"Int32"}
        ,"value": 267
    }
    ,{
         "name": "ERROR_EAS_DIDNT_FIT"
        ,"type": {"kind":"Int32"}
        ,"value": 275
    }
    ,{
         "name": "ERROR_EA_FILE_CORRUPT"
        ,"type": {"kind":"Int32"}
        ,"value": 276
    }
    ,{
         "name": "ERROR_EA_TABLE_FULL"
        ,"type": {"kind":"Int32"}
        ,"value": 277
    }
    ,{
         "name": "ERROR_INVALID_EA_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": 278
    }
    ,{
         "name": "ERROR_EAS_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 282
    }
    ,{
         "name": "ERROR_NOT_OWNER"
        ,"type": {"kind":"Int32"}
        ,"value": 288
    }
    ,{
         "name": "ERROR_TOO_MANY_POSTS"
        ,"type": {"kind":"Int32"}
        ,"value": 298
    }
    ,{
         "name": "ERROR_PARTIAL_COPY"
        ,"type": {"kind":"Int32"}
        ,"value": 299
    }
    ,{
         "name": "ERROR_OPLOCK_NOT_GRANTED"
        ,"type": {"kind":"Int32"}
        ,"value": 300
    }
    ,{
         "name": "ERROR_INVALID_OPLOCK_PROTOCOL"
        ,"type": {"kind":"Int32"}
        ,"value": 301
    }
    ,{
         "name": "ERROR_DISK_TOO_FRAGMENTED"
        ,"type": {"kind":"Int32"}
        ,"value": 302
    }
    ,{
         "name": "ERROR_DELETE_PENDING"
        ,"type": {"kind":"Int32"}
        ,"value": 303
    }
    ,{
         "name": "ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING"
        ,"type": {"kind":"Int32"}
        ,"value": 304
    }
    ,{
         "name": "ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME"
        ,"type": {"kind":"Int32"}
        ,"value": 305
    }
    ,{
         "name": "ERROR_SECURITY_STREAM_IS_INCONSISTENT"
        ,"type": {"kind":"Int32"}
        ,"value": 306
    }
    ,{
         "name": "ERROR_INVALID_LOCK_RANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 307
    }
    ,{
         "name": "ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT"
        ,"type": {"kind":"Int32"}
        ,"value": 308
    }
    ,{
         "name": "ERROR_NOTIFICATION_GUID_ALREADY_DEFINED"
        ,"type": {"kind":"Int32"}
        ,"value": 309
    }
    ,{
         "name": "ERROR_INVALID_EXCEPTION_HANDLER"
        ,"type": {"kind":"Int32"}
        ,"value": 310
    }
    ,{
         "name": "ERROR_DUPLICATE_PRIVILEGES"
        ,"type": {"kind":"Int32"}
        ,"value": 311
    }
    ,{
         "name": "ERROR_NO_RANGES_PROCESSED"
        ,"type": {"kind":"Int32"}
        ,"value": 312
    }
    ,{
         "name": "ERROR_NOT_ALLOWED_ON_SYSTEM_FILE"
        ,"type": {"kind":"Int32"}
        ,"value": 313
    }
    ,{
         "name": "ERROR_DISK_RESOURCES_EXHAUSTED"
        ,"type": {"kind":"Int32"}
        ,"value": 314
    }
    ,{
         "name": "ERROR_INVALID_TOKEN"
        ,"type": {"kind":"Int32"}
        ,"value": 315
    }
    ,{
         "name": "ERROR_DEVICE_FEATURE_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 316
    }
    ,{
         "name": "ERROR_MR_MID_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 317
    }
    ,{
         "name": "ERROR_SCOPE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 318
    }
    ,{
         "name": "ERROR_UNDEFINED_SCOPE"
        ,"type": {"kind":"Int32"}
        ,"value": 319
    }
    ,{
         "name": "ERROR_INVALID_CAP"
        ,"type": {"kind":"Int32"}
        ,"value": 320
    }
    ,{
         "name": "ERROR_DEVICE_UNREACHABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 321
    }
    ,{
         "name": "ERROR_DEVICE_NO_RESOURCES"
        ,"type": {"kind":"Int32"}
        ,"value": 322
    }
    ,{
         "name": "ERROR_DATA_CHECKSUM_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 323
    }
    ,{
         "name": "ERROR_INTERMIXED_KERNEL_EA_OPERATION"
        ,"type": {"kind":"Int32"}
        ,"value": 324
    }
    ,{
         "name": "ERROR_FILE_LEVEL_TRIM_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 326
    }
    ,{
         "name": "ERROR_OFFSET_ALIGNMENT_VIOLATION"
        ,"type": {"kind":"Int32"}
        ,"value": 327
    }
    ,{
         "name": "ERROR_INVALID_FIELD_IN_PARAMETER_LIST"
        ,"type": {"kind":"Int32"}
        ,"value": 328
    }
    ,{
         "name": "ERROR_OPERATION_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 329
    }
    ,{
         "name": "ERROR_BAD_DEVICE_PATH"
        ,"type": {"kind":"Int32"}
        ,"value": 330
    }
    ,{
         "name": "ERROR_TOO_MANY_DESCRIPTORS"
        ,"type": {"kind":"Int32"}
        ,"value": 331
    }
    ,{
         "name": "ERROR_SCRUB_DATA_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 332
    }
    ,{
         "name": "ERROR_NOT_REDUNDANT_STORAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 333
    }
    ,{
         "name": "ERROR_RESIDENT_FILE_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 334
    }
    ,{
         "name": "ERROR_COMPRESSED_FILE_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 335
    }
    ,{
         "name": "ERROR_DIRECTORY_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 336
    }
    ,{
         "name": "ERROR_NOT_READ_FROM_COPY"
        ,"type": {"kind":"Int32"}
        ,"value": 337
    }
    ,{
         "name": "ERROR_FT_WRITE_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 338
    }
    ,{
         "name": "ERROR_FT_DI_SCAN_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 339
    }
    ,{
         "name": "ERROR_INVALID_KERNEL_INFO_VERSION"
        ,"type": {"kind":"Int32"}
        ,"value": 340
    }
    ,{
         "name": "ERROR_INVALID_PEP_INFO_VERSION"
        ,"type": {"kind":"Int32"}
        ,"value": 341
    }
    ,{
         "name": "ERROR_OBJECT_NOT_EXTERNALLY_BACKED"
        ,"type": {"kind":"Int32"}
        ,"value": 342
    }
    ,{
         "name": "ERROR_EXTERNAL_BACKING_PROVIDER_UNKNOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 343
    }
    ,{
         "name": "ERROR_COMPRESSION_NOT_BENEFICIAL"
        ,"type": {"kind":"Int32"}
        ,"value": 344
    }
    ,{
         "name": "ERROR_STORAGE_TOPOLOGY_ID_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 345
    }
    ,{
         "name": "ERROR_BLOCKED_BY_PARENTAL_CONTROLS"
        ,"type": {"kind":"Int32"}
        ,"value": 346
    }
    ,{
         "name": "ERROR_BLOCK_TOO_MANY_REFERENCES"
        ,"type": {"kind":"Int32"}
        ,"value": 347
    }
    ,{
         "name": "ERROR_MARKED_TO_DISALLOW_WRITES"
        ,"type": {"kind":"Int32"}
        ,"value": 348
    }
    ,{
         "name": "ERROR_ENCLAVE_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 349
    }
    ,{
         "name": "ERROR_FAIL_NOACTION_REBOOT"
        ,"type": {"kind":"Int32"}
        ,"value": 350
    }
    ,{
         "name": "ERROR_FAIL_SHUTDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 351
    }
    ,{
         "name": "ERROR_FAIL_RESTART"
        ,"type": {"kind":"Int32"}
        ,"value": 352
    }
    ,{
         "name": "ERROR_MAX_SESSIONS_REACHED"
        ,"type": {"kind":"Int32"}
        ,"value": 353
    }
    ,{
         "name": "ERROR_NETWORK_ACCESS_DENIED_EDP"
        ,"type": {"kind":"Int32"}
        ,"value": 354
    }
    ,{
         "name": "ERROR_DEVICE_HINT_NAME_BUFFER_TOO_SMALL"
        ,"type": {"kind":"Int32"}
        ,"value": 355
    }
    ,{
         "name": "ERROR_EDP_POLICY_DENIES_OPERATION"
        ,"type": {"kind":"Int32"}
        ,"value": 356
    }
    ,{
         "name": "ERROR_EDP_DPL_POLICY_CANT_BE_SATISFIED"
        ,"type": {"kind":"Int32"}
        ,"value": 357
    }
    ,{
         "name": "ERROR_CLOUD_FILE_SYNC_ROOT_METADATA_CORRUPT"
        ,"type": {"kind":"Int32"}
        ,"value": 358
    }
    ,{
         "name": "ERROR_DEVICE_IN_MAINTENANCE"
        ,"type": {"kind":"Int32"}
        ,"value": 359
    }
    ,{
         "name": "ERROR_NOT_SUPPORTED_ON_DAX"
        ,"type": {"kind":"Int32"}
        ,"value": 360
    }
    ,{
         "name": "ERROR_DAX_MAPPING_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 361
    }
    ,{
         "name": "ERROR_CLOUD_FILE_PROVIDER_NOT_RUNNING"
        ,"type": {"kind":"Int32"}
        ,"value": 362
    }
    ,{
         "name": "ERROR_CLOUD_FILE_METADATA_CORRUPT"
        ,"type": {"kind":"Int32"}
        ,"value": 363
    }
    ,{
         "name": "ERROR_CLOUD_FILE_METADATA_TOO_LARGE"
        ,"type": {"kind":"Int32"}
        ,"value": 364
    }
    ,{
         "name": "ERROR_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE"
        ,"type": {"kind":"Int32"}
        ,"value": 365
    }
    ,{
         "name": "ERROR_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 366
    }
    ,{
         "name": "ERROR_CHILD_PROCESS_BLOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": 367
    }
    ,{
         "name": "ERROR_STORAGE_LOST_DATA_PERSISTENCE"
        ,"type": {"kind":"Int32"}
        ,"value": 368
    }
    ,{
         "name": "ERROR_FILE_SYSTEM_VIRTUALIZATION_UNAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 369
    }
    ,{
         "name": "ERROR_FILE_SYSTEM_VIRTUALIZATION_METADATA_CORRUPT"
        ,"type": {"kind":"Int32"}
        ,"value": 370
    }
    ,{
         "name": "ERROR_FILE_SYSTEM_VIRTUALIZATION_BUSY"
        ,"type": {"kind":"Int32"}
        ,"value": 371
    }
    ,{
         "name": "ERROR_FILE_SYSTEM_VIRTUALIZATION_PROVIDER_UNKNOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 372
    }
    ,{
         "name": "ERROR_GDI_HANDLE_LEAK"
        ,"type": {"kind":"Int32"}
        ,"value": 373
    }
    ,{
         "name": "ERROR_CLOUD_FILE_TOO_MANY_PROPERTY_BLOBS"
        ,"type": {"kind":"Int32"}
        ,"value": 374
    }
    ,{
         "name": "ERROR_CLOUD_FILE_PROPERTY_VERSION_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 375
    }
    ,{
         "name": "ERROR_NOT_A_CLOUD_FILE"
        ,"type": {"kind":"Int32"}
        ,"value": 376
    }
    ,{
         "name": "ERROR_CLOUD_FILE_NOT_IN_SYNC"
        ,"type": {"kind":"Int32"}
        ,"value": 377
    }
    ,{
         "name": "ERROR_CLOUD_FILE_ALREADY_CONNECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 378
    }
    ,{
         "name": "ERROR_CLOUD_FILE_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 379
    }
    ,{
         "name": "ERROR_CLOUD_FILE_INVALID_REQUEST"
        ,"type": {"kind":"Int32"}
        ,"value": 380
    }
    ,{
         "name": "ERROR_CLOUD_FILE_READ_ONLY_VOLUME"
        ,"type": {"kind":"Int32"}
        ,"value": 381
    }
    ,{
         "name": "ERROR_CLOUD_FILE_CONNECTED_PROVIDER_ONLY"
        ,"type": {"kind":"Int32"}
        ,"value": 382
    }
    ,{
         "name": "ERROR_CLOUD_FILE_VALIDATION_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 383
    }
    ,{
         "name": "ERROR_SMB1_NOT_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 384
    }
    ,{
         "name": "ERROR_FILE_SYSTEM_VIRTUALIZATION_INVALID_OPERATION"
        ,"type": {"kind":"Int32"}
        ,"value": 385
    }
    ,{
         "name": "ERROR_CLOUD_FILE_AUTHENTICATION_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 386
    }
    ,{
         "name": "ERROR_CLOUD_FILE_INSUFFICIENT_RESOURCES"
        ,"type": {"kind":"Int32"}
        ,"value": 387
    }
    ,{
         "name": "ERROR_CLOUD_FILE_NETWORK_UNAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 388
    }
    ,{
         "name": "ERROR_CLOUD_FILE_UNSUCCESSFUL"
        ,"type": {"kind":"Int32"}
        ,"value": 389
    }
    ,{
         "name": "ERROR_CLOUD_FILE_NOT_UNDER_SYNC_ROOT"
        ,"type": {"kind":"Int32"}
        ,"value": 390
    }
    ,{
         "name": "ERROR_CLOUD_FILE_IN_USE"
        ,"type": {"kind":"Int32"}
        ,"value": 391
    }
    ,{
         "name": "ERROR_CLOUD_FILE_PINNED"
        ,"type": {"kind":"Int32"}
        ,"value": 392
    }
    ,{
         "name": "ERROR_CLOUD_FILE_REQUEST_ABORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 393
    }
    ,{
         "name": "ERROR_CLOUD_FILE_PROPERTY_CORRUPT"
        ,"type": {"kind":"Int32"}
        ,"value": 394
    }
    ,{
         "name": "ERROR_CLOUD_FILE_ACCESS_DENIED"
        ,"type": {"kind":"Int32"}
        ,"value": 395
    }
    ,{
         "name": "ERROR_CLOUD_FILE_INCOMPATIBLE_HARDLINKS"
        ,"type": {"kind":"Int32"}
        ,"value": 396
    }
    ,{
         "name": "ERROR_CLOUD_FILE_PROPERTY_LOCK_CONFLICT"
        ,"type": {"kind":"Int32"}
        ,"value": 397
    }
    ,{
         "name": "ERROR_CLOUD_FILE_REQUEST_CANCELED"
        ,"type": {"kind":"Int32"}
        ,"value": 398
    }
    ,{
         "name": "ERROR_EXTERNAL_SYSKEY_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 399
    }
    ,{
         "name": "ERROR_THREAD_MODE_ALREADY_BACKGROUND"
        ,"type": {"kind":"Int32"}
        ,"value": 400
    }
    ,{
         "name": "ERROR_THREAD_MODE_NOT_BACKGROUND"
        ,"type": {"kind":"Int32"}
        ,"value": 401
    }
    ,{
         "name": "ERROR_PROCESS_MODE_ALREADY_BACKGROUND"
        ,"type": {"kind":"Int32"}
        ,"value": 402
    }
    ,{
         "name": "ERROR_PROCESS_MODE_NOT_BACKGROUND"
        ,"type": {"kind":"Int32"}
        ,"value": 403
    }
    ,{
         "name": "ERROR_CLOUD_FILE_PROVIDER_TERMINATED"
        ,"type": {"kind":"Int32"}
        ,"value": 404
    }
    ,{
         "name": "ERROR_NOT_A_CLOUD_SYNC_ROOT"
        ,"type": {"kind":"Int32"}
        ,"value": 405
    }
    ,{
         "name": "ERROR_FILE_PROTECTED_UNDER_DPL"
        ,"type": {"kind":"Int32"}
        ,"value": 406
    }
    ,{
         "name": "ERROR_VOLUME_NOT_CLUSTER_ALIGNED"
        ,"type": {"kind":"Int32"}
        ,"value": 407
    }
    ,{
         "name": "ERROR_NO_PHYSICALLY_ALIGNED_FREE_SPACE_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 408
    }
    ,{
         "name": "ERROR_APPX_FILE_NOT_ENCRYPTED"
        ,"type": {"kind":"Int32"}
        ,"value": 409
    }
    ,{
         "name": "ERROR_RWRAW_ENCRYPTED_FILE_NOT_ENCRYPTED"
        ,"type": {"kind":"Int32"}
        ,"value": 410
    }
    ,{
         "name": "ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILEOFFSET"
        ,"type": {"kind":"Int32"}
        ,"value": 411
    }
    ,{
         "name": "ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILERANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 412
    }
    ,{
         "name": "ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_PARAMETER"
        ,"type": {"kind":"Int32"}
        ,"value": 413
    }
    ,{
         "name": "ERROR_LINUX_SUBSYSTEM_NOT_PRESENT"
        ,"type": {"kind":"Int32"}
        ,"value": 414
    }
    ,{
         "name": "ERROR_FT_READ_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 415
    }
    ,{
         "name": "ERROR_STORAGE_RESERVE_ID_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": 416
    }
    ,{
         "name": "ERROR_STORAGE_RESERVE_DOES_NOT_EXIST"
        ,"type": {"kind":"Int32"}
        ,"value": 417
    }
    ,{
         "name": "ERROR_STORAGE_RESERVE_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 418
    }
    ,{
         "name": "ERROR_STORAGE_RESERVE_NOT_EMPTY"
        ,"type": {"kind":"Int32"}
        ,"value": 419
    }
    ,{
         "name": "ERROR_NOT_A_DAX_VOLUME"
        ,"type": {"kind":"Int32"}
        ,"value": 420
    }
    ,{
         "name": "ERROR_NOT_DAX_MAPPABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 421
    }
    ,{
         "name": "ERROR_TIME_SENSITIVE_THREAD"
        ,"type": {"kind":"Int32"}
        ,"value": 422
    }
    ,{
         "name": "ERROR_DPL_NOT_SUPPORTED_FOR_USER"
        ,"type": {"kind":"Int32"}
        ,"value": 423
    }
    ,{
         "name": "ERROR_CASE_DIFFERING_NAMES_IN_DIR"
        ,"type": {"kind":"Int32"}
        ,"value": 424
    }
    ,{
         "name": "ERROR_FILE_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 425
    }
    ,{
         "name": "ERROR_CLOUD_FILE_REQUEST_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 426
    }
    ,{
         "name": "ERROR_NO_TASK_QUEUE"
        ,"type": {"kind":"Int32"}
        ,"value": 427
    }
    ,{
         "name": "ERROR_SRC_SRV_DLL_LOAD_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 428
    }
    ,{
         "name": "ERROR_NOT_SUPPORTED_WITH_BTT"
        ,"type": {"kind":"Int32"}
        ,"value": 429
    }
    ,{
         "name": "ERROR_ENCRYPTION_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 430
    }
    ,{
         "name": "ERROR_ENCRYPTING_METADATA_DISALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": 431
    }
    ,{
         "name": "ERROR_CANT_CLEAR_ENCRYPTION_FLAG"
        ,"type": {"kind":"Int32"}
        ,"value": 432
    }
    ,{
         "name": "ERROR_NO_SUCH_DEVICE"
        ,"type": {"kind":"Int32"}
        ,"value": 433
    }
    ,{
         "name": "ERROR_CLOUD_FILE_DEHYDRATION_DISALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": 434
    }
    ,{
         "name": "ERROR_FILE_SNAP_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 435
    }
    ,{
         "name": "ERROR_FILE_SNAP_USER_SECTION_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 436
    }
    ,{
         "name": "ERROR_FILE_SNAP_MODIFY_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 437
    }
    ,{
         "name": "ERROR_FILE_SNAP_IO_NOT_COORDINATED"
        ,"type": {"kind":"Int32"}
        ,"value": 438
    }
    ,{
         "name": "ERROR_FILE_SNAP_UNEXPECTED_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 439
    }
    ,{
         "name": "ERROR_FILE_SNAP_INVALID_PARAMETER"
        ,"type": {"kind":"Int32"}
        ,"value": 440
    }
    ,{
         "name": "ERROR_UNSATISFIED_DEPENDENCIES"
        ,"type": {"kind":"Int32"}
        ,"value": 441
    }
    ,{
         "name": "ERROR_CASE_SENSITIVE_PATH"
        ,"type": {"kind":"Int32"}
        ,"value": 442
    }
    ,{
         "name": "ERROR_UNEXPECTED_NTCACHEMANAGER_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 443
    }
    ,{
         "name": "ERROR_CAPAUTHZ_NOT_DEVUNLOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": 450
    }
    ,{
         "name": "ERROR_CAPAUTHZ_CHANGE_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 451
    }
    ,{
         "name": "ERROR_CAPAUTHZ_NOT_PROVISIONED"
        ,"type": {"kind":"Int32"}
        ,"value": 452
    }
    ,{
         "name": "ERROR_CAPAUTHZ_NOT_AUTHORIZED"
        ,"type": {"kind":"Int32"}
        ,"value": 453
    }
    ,{
         "name": "ERROR_CAPAUTHZ_NO_POLICY"
        ,"type": {"kind":"Int32"}
        ,"value": 454
    }
    ,{
         "name": "ERROR_CAPAUTHZ_DB_CORRUPTED"
        ,"type": {"kind":"Int32"}
        ,"value": 455
    }
    ,{
         "name": "ERROR_CAPAUTHZ_SCCD_INVALID_CATALOG"
        ,"type": {"kind":"Int32"}
        ,"value": 456
    }
    ,{
         "name": "ERROR_CAPAUTHZ_SCCD_NO_AUTH_ENTITY"
        ,"type": {"kind":"Int32"}
        ,"value": 457
    }
    ,{
         "name": "ERROR_CAPAUTHZ_SCCD_PARSE_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 458
    }
    ,{
         "name": "ERROR_CAPAUTHZ_SCCD_DEV_MODE_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 459
    }
    ,{
         "name": "ERROR_CAPAUTHZ_SCCD_NO_CAPABILITY_MATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 460
    }
    ,{
         "name": "ERROR_PNP_QUERY_REMOVE_DEVICE_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 480
    }
    ,{
         "name": "ERROR_PNP_QUERY_REMOVE_RELATED_DEVICE_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 481
    }
    ,{
         "name": "ERROR_PNP_QUERY_REMOVE_UNRELATED_DEVICE_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 482
    }
    ,{
         "name": "ERROR_DEVICE_HARDWARE_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 483
    }
    ,{
         "name": "ERROR_INVALID_ADDRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 487
    }
    ,{
         "name": "ERROR_VRF_CFG_AND_IO_ENABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 1183
    }
    ,{
         "name": "ERROR_PARTITION_TERMINATING"
        ,"type": {"kind":"Int32"}
        ,"value": 1184
    }
    ,{
         "name": "ERROR_USER_PROFILE_LOAD"
        ,"type": {"kind":"Int32"}
        ,"value": 500
    }
    ,{
         "name": "ERROR_ARITHMETIC_OVERFLOW"
        ,"type": {"kind":"Int32"}
        ,"value": 534
    }
    ,{
         "name": "ERROR_PIPE_CONNECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 535
    }
    ,{
         "name": "ERROR_PIPE_LISTENING"
        ,"type": {"kind":"Int32"}
        ,"value": 536
    }
    ,{
         "name": "ERROR_VERIFIER_STOP"
        ,"type": {"kind":"Int32"}
        ,"value": 537
    }
    ,{
         "name": "ERROR_ABIOS_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 538
    }
    ,{
         "name": "ERROR_WX86_WARNING"
        ,"type": {"kind":"Int32"}
        ,"value": 539
    }
    ,{
         "name": "ERROR_WX86_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 540
    }
    ,{
         "name": "ERROR_TIMER_NOT_CANCELED"
        ,"type": {"kind":"Int32"}
        ,"value": 541
    }
    ,{
         "name": "ERROR_UNWIND"
        ,"type": {"kind":"Int32"}
        ,"value": 542
    }
    ,{
         "name": "ERROR_BAD_STACK"
        ,"type": {"kind":"Int32"}
        ,"value": 543
    }
    ,{
         "name": "ERROR_INVALID_UNWIND_TARGET"
        ,"type": {"kind":"Int32"}
        ,"value": 544
    }
    ,{
         "name": "ERROR_INVALID_PORT_ATTRIBUTES"
        ,"type": {"kind":"Int32"}
        ,"value": 545
    }
    ,{
         "name": "ERROR_PORT_MESSAGE_TOO_LONG"
        ,"type": {"kind":"Int32"}
        ,"value": 546
    }
    ,{
         "name": "ERROR_INVALID_QUOTA_LOWER"
        ,"type": {"kind":"Int32"}
        ,"value": 547
    }
    ,{
         "name": "ERROR_DEVICE_ALREADY_ATTACHED"
        ,"type": {"kind":"Int32"}
        ,"value": 548
    }
    ,{
         "name": "ERROR_INSTRUCTION_MISALIGNMENT"
        ,"type": {"kind":"Int32"}
        ,"value": 549
    }
    ,{
         "name": "ERROR_PROFILING_NOT_STARTED"
        ,"type": {"kind":"Int32"}
        ,"value": 550
    }
    ,{
         "name": "ERROR_PROFILING_NOT_STOPPED"
        ,"type": {"kind":"Int32"}
        ,"value": 551
    }
    ,{
         "name": "ERROR_COULD_NOT_INTERPRET"
        ,"type": {"kind":"Int32"}
        ,"value": 552
    }
    ,{
         "name": "ERROR_PROFILING_AT_LIMIT"
        ,"type": {"kind":"Int32"}
        ,"value": 553
    }
    ,{
         "name": "ERROR_CANT_WAIT"
        ,"type": {"kind":"Int32"}
        ,"value": 554
    }
    ,{
         "name": "ERROR_CANT_TERMINATE_SELF"
        ,"type": {"kind":"Int32"}
        ,"value": 555
    }
    ,{
         "name": "ERROR_UNEXPECTED_MM_CREATE_ERR"
        ,"type": {"kind":"Int32"}
        ,"value": 556
    }
    ,{
         "name": "ERROR_UNEXPECTED_MM_MAP_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 557
    }
    ,{
         "name": "ERROR_UNEXPECTED_MM_EXTEND_ERR"
        ,"type": {"kind":"Int32"}
        ,"value": 558
    }
    ,{
         "name": "ERROR_BAD_FUNCTION_TABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 559
    }
    ,{
         "name": "ERROR_NO_GUID_TRANSLATION"
        ,"type": {"kind":"Int32"}
        ,"value": 560
    }
    ,{
         "name": "ERROR_INVALID_LDT_SIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 561
    }
    ,{
         "name": "ERROR_INVALID_LDT_OFFSET"
        ,"type": {"kind":"Int32"}
        ,"value": 563
    }
    ,{
         "name": "ERROR_INVALID_LDT_DESCRIPTOR"
        ,"type": {"kind":"Int32"}
        ,"value": 564
    }
    ,{
         "name": "ERROR_TOO_MANY_THREADS"
        ,"type": {"kind":"Int32"}
        ,"value": 565
    }
    ,{
         "name": "ERROR_THREAD_NOT_IN_PROCESS"
        ,"type": {"kind":"Int32"}
        ,"value": 566
    }
    ,{
         "name": "ERROR_PAGEFILE_QUOTA_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 567
    }
    ,{
         "name": "ERROR_LOGON_SERVER_CONFLICT"
        ,"type": {"kind":"Int32"}
        ,"value": 568
    }
    ,{
         "name": "ERROR_SYNCHRONIZATION_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 569
    }
    ,{
         "name": "ERROR_NET_OPEN_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 570
    }
    ,{
         "name": "ERROR_IO_PRIVILEGE_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 571
    }
    ,{
         "name": "ERROR_CONTROL_C_EXIT"
        ,"type": {"kind":"Int32"}
        ,"value": 572
    }
    ,{
         "name": "ERROR_MISSING_SYSTEMFILE"
        ,"type": {"kind":"Int32"}
        ,"value": 573
    }
    ,{
         "name": "ERROR_UNHANDLED_EXCEPTION"
        ,"type": {"kind":"Int32"}
        ,"value": 574
    }
    ,{
         "name": "ERROR_APP_INIT_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 575
    }
    ,{
         "name": "ERROR_PAGEFILE_CREATE_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 576
    }
    ,{
         "name": "ERROR_INVALID_IMAGE_HASH"
        ,"type": {"kind":"Int32"}
        ,"value": 577
    }
    ,{
         "name": "ERROR_NO_PAGEFILE"
        ,"type": {"kind":"Int32"}
        ,"value": 578
    }
    ,{
         "name": "ERROR_ILLEGAL_FLOAT_CONTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 579
    }
    ,{
         "name": "ERROR_NO_EVENT_PAIR"
        ,"type": {"kind":"Int32"}
        ,"value": 580
    }
    ,{
         "name": "ERROR_DOMAIN_CTRLR_CONFIG_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 581
    }
    ,{
         "name": "ERROR_ILLEGAL_CHARACTER"
        ,"type": {"kind":"Int32"}
        ,"value": 582
    }
    ,{
         "name": "ERROR_UNDEFINED_CHARACTER"
        ,"type": {"kind":"Int32"}
        ,"value": 583
    }
    ,{
         "name": "ERROR_FLOPPY_VOLUME"
        ,"type": {"kind":"Int32"}
        ,"value": 584
    }
    ,{
         "name": "ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT"
        ,"type": {"kind":"Int32"}
        ,"value": 585
    }
    ,{
         "name": "ERROR_BACKUP_CONTROLLER"
        ,"type": {"kind":"Int32"}
        ,"value": 586
    }
    ,{
         "name": "ERROR_MUTANT_LIMIT_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 587
    }
    ,{
         "name": "ERROR_FS_DRIVER_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 588
    }
    ,{
         "name": "ERROR_CANNOT_LOAD_REGISTRY_FILE"
        ,"type": {"kind":"Int32"}
        ,"value": 589
    }
    ,{
         "name": "ERROR_DEBUG_ATTACH_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 590
    }
    ,{
         "name": "ERROR_SYSTEM_PROCESS_TERMINATED"
        ,"type": {"kind":"Int32"}
        ,"value": 591
    }
    ,{
         "name": "ERROR_DATA_NOT_ACCEPTED"
        ,"type": {"kind":"Int32"}
        ,"value": 592
    }
    ,{
         "name": "ERROR_VDM_HARD_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 593
    }
    ,{
         "name": "ERROR_DRIVER_CANCEL_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 594
    }
    ,{
         "name": "ERROR_REPLY_MESSAGE_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 595
    }
    ,{
         "name": "ERROR_LOST_WRITEBEHIND_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": 596
    }
    ,{
         "name": "ERROR_CLIENT_SERVER_PARAMETERS_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": 597
    }
    ,{
         "name": "ERROR_NOT_TINY_STREAM"
        ,"type": {"kind":"Int32"}
        ,"value": 598
    }
    ,{
         "name": "ERROR_STACK_OVERFLOW_READ"
        ,"type": {"kind":"Int32"}
        ,"value": 599
    }
    ,{
         "name": "ERROR_CONVERT_TO_LARGE"
        ,"type": {"kind":"Int32"}
        ,"value": 600
    }
    ,{
         "name": "ERROR_FOUND_OUT_OF_SCOPE"
        ,"type": {"kind":"Int32"}
        ,"value": 601
    }
    ,{
         "name": "ERROR_ALLOCATE_BUCKET"
        ,"type": {"kind":"Int32"}
        ,"value": 602
    }
    ,{
         "name": "ERROR_MARSHALL_OVERFLOW"
        ,"type": {"kind":"Int32"}
        ,"value": 603
    }
    ,{
         "name": "ERROR_INVALID_VARIANT"
        ,"type": {"kind":"Int32"}
        ,"value": 604
    }
    ,{
         "name": "ERROR_BAD_COMPRESSION_BUFFER"
        ,"type": {"kind":"Int32"}
        ,"value": 605
    }
    ,{
         "name": "ERROR_AUDIT_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 606
    }
    ,{
         "name": "ERROR_TIMER_RESOLUTION_NOT_SET"
        ,"type": {"kind":"Int32"}
        ,"value": 607
    }
    ,{
         "name": "ERROR_INSUFFICIENT_LOGON_INFO"
        ,"type": {"kind":"Int32"}
        ,"value": 608
    }
    ,{
         "name": "ERROR_BAD_DLL_ENTRYPOINT"
        ,"type": {"kind":"Int32"}
        ,"value": 609
    }
    ,{
         "name": "ERROR_BAD_SERVICE_ENTRYPOINT"
        ,"type": {"kind":"Int32"}
        ,"value": 610
    }
    ,{
         "name": "ERROR_IP_ADDRESS_CONFLICT1"
        ,"type": {"kind":"Int32"}
        ,"value": 611
    }
    ,{
         "name": "ERROR_IP_ADDRESS_CONFLICT2"
        ,"type": {"kind":"Int32"}
        ,"value": 612
    }
    ,{
         "name": "ERROR_REGISTRY_QUOTA_LIMIT"
        ,"type": {"kind":"Int32"}
        ,"value": 613
    }
    ,{
         "name": "ERROR_NO_CALLBACK_ACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 614
    }
    ,{
         "name": "ERROR_PWD_TOO_SHORT"
        ,"type": {"kind":"Int32"}
        ,"value": 615
    }
    ,{
         "name": "ERROR_PWD_TOO_RECENT"
        ,"type": {"kind":"Int32"}
        ,"value": 616
    }
    ,{
         "name": "ERROR_PWD_HISTORY_CONFLICT"
        ,"type": {"kind":"Int32"}
        ,"value": 617
    }
    ,{
         "name": "ERROR_UNSUPPORTED_COMPRESSION"
        ,"type": {"kind":"Int32"}
        ,"value": 618
    }
    ,{
         "name": "ERROR_INVALID_HW_PROFILE"
        ,"type": {"kind":"Int32"}
        ,"value": 619
    }
    ,{
         "name": "ERROR_INVALID_PLUGPLAY_DEVICE_PATH"
        ,"type": {"kind":"Int32"}
        ,"value": 620
    }
    ,{
         "name": "ERROR_QUOTA_LIST_INCONSISTENT"
        ,"type": {"kind":"Int32"}
        ,"value": 621
    }
    ,{
         "name": "ERROR_EVALUATION_EXPIRATION"
        ,"type": {"kind":"Int32"}
        ,"value": 622
    }
    ,{
         "name": "ERROR_ILLEGAL_DLL_RELOCATION"
        ,"type": {"kind":"Int32"}
        ,"value": 623
    }
    ,{
         "name": "ERROR_DLL_INIT_FAILED_LOGOFF"
        ,"type": {"kind":"Int32"}
        ,"value": 624
    }
    ,{
         "name": "ERROR_VALIDATE_CONTINUE"
        ,"type": {"kind":"Int32"}
        ,"value": 625
    }
    ,{
         "name": "ERROR_NO_MORE_MATCHES"
        ,"type": {"kind":"Int32"}
        ,"value": 626
    }
    ,{
         "name": "ERROR_RANGE_LIST_CONFLICT"
        ,"type": {"kind":"Int32"}
        ,"value": 627
    }
    ,{
         "name": "ERROR_SERVER_SID_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 628
    }
    ,{
         "name": "ERROR_CANT_ENABLE_DENY_ONLY"
        ,"type": {"kind":"Int32"}
        ,"value": 629
    }
    ,{
         "name": "ERROR_FLOAT_MULTIPLE_FAULTS"
        ,"type": {"kind":"Int32"}
        ,"value": 630
    }
    ,{
         "name": "ERROR_FLOAT_MULTIPLE_TRAPS"
        ,"type": {"kind":"Int32"}
        ,"value": 631
    }
    ,{
         "name": "ERROR_NOINTERFACE"
        ,"type": {"kind":"Int32"}
        ,"value": 632
    }
    ,{
         "name": "ERROR_DRIVER_FAILED_SLEEP"
        ,"type": {"kind":"Int32"}
        ,"value": 633
    }
    ,{
         "name": "ERROR_CORRUPT_SYSTEM_FILE"
        ,"type": {"kind":"Int32"}
        ,"value": 634
    }
    ,{
         "name": "ERROR_COMMITMENT_MINIMUM"
        ,"type": {"kind":"Int32"}
        ,"value": 635
    }
    ,{
         "name": "ERROR_PNP_RESTART_ENUMERATION"
        ,"type": {"kind":"Int32"}
        ,"value": 636
    }
    ,{
         "name": "ERROR_SYSTEM_IMAGE_BAD_SIGNATURE"
        ,"type": {"kind":"Int32"}
        ,"value": 637
    }
    ,{
         "name": "ERROR_PNP_REBOOT_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 638
    }
    ,{
         "name": "ERROR_INSUFFICIENT_POWER"
        ,"type": {"kind":"Int32"}
        ,"value": 639
    }
    ,{
         "name": "ERROR_MULTIPLE_FAULT_VIOLATION"
        ,"type": {"kind":"Int32"}
        ,"value": 640
    }
    ,{
         "name": "ERROR_SYSTEM_SHUTDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 641
    }
    ,{
         "name": "ERROR_PORT_NOT_SET"
        ,"type": {"kind":"Int32"}
        ,"value": 642
    }
    ,{
         "name": "ERROR_DS_VERSION_CHECK_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 643
    }
    ,{
         "name": "ERROR_RANGE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 644
    }
    ,{
         "name": "ERROR_NOT_SAFE_MODE_DRIVER"
        ,"type": {"kind":"Int32"}
        ,"value": 646
    }
    ,{
         "name": "ERROR_FAILED_DRIVER_ENTRY"
        ,"type": {"kind":"Int32"}
        ,"value": 647
    }
    ,{
         "name": "ERROR_DEVICE_ENUMERATION_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 648
    }
    ,{
         "name": "ERROR_MOUNT_POINT_NOT_RESOLVED"
        ,"type": {"kind":"Int32"}
        ,"value": 649
    }
    ,{
         "name": "ERROR_INVALID_DEVICE_OBJECT_PARAMETER"
        ,"type": {"kind":"Int32"}
        ,"value": 650
    }
    ,{
         "name": "ERROR_MCA_OCCURED"
        ,"type": {"kind":"Int32"}
        ,"value": 651
    }
    ,{
         "name": "ERROR_DRIVER_DATABASE_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 652
    }
    ,{
         "name": "ERROR_SYSTEM_HIVE_TOO_LARGE"
        ,"type": {"kind":"Int32"}
        ,"value": 653
    }
    ,{
         "name": "ERROR_DRIVER_FAILED_PRIOR_UNLOAD"
        ,"type": {"kind":"Int32"}
        ,"value": 654
    }
    ,{
         "name": "ERROR_VOLSNAP_PREPARE_HIBERNATE"
        ,"type": {"kind":"Int32"}
        ,"value": 655
    }
    ,{
         "name": "ERROR_HIBERNATION_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 656
    }
    ,{
         "name": "ERROR_PWD_TOO_LONG"
        ,"type": {"kind":"Int32"}
        ,"value": 657
    }
    ,{
         "name": "ERROR_FILE_SYSTEM_LIMITATION"
        ,"type": {"kind":"Int32"}
        ,"value": 665
    }
    ,{
         "name": "ERROR_ASSERTION_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 668
    }
    ,{
         "name": "ERROR_ACPI_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 669
    }
    ,{
         "name": "ERROR_WOW_ASSERTION"
        ,"type": {"kind":"Int32"}
        ,"value": 670
    }
    ,{
         "name": "ERROR_PNP_BAD_MPS_TABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 671
    }
    ,{
         "name": "ERROR_PNP_TRANSLATION_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 672
    }
    ,{
         "name": "ERROR_PNP_IRQ_TRANSLATION_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 673
    }
    ,{
         "name": "ERROR_PNP_INVALID_ID"
        ,"type": {"kind":"Int32"}
        ,"value": 674
    }
    ,{
         "name": "ERROR_WAKE_SYSTEM_DEBUGGER"
        ,"type": {"kind":"Int32"}
        ,"value": 675
    }
    ,{
         "name": "ERROR_HANDLES_CLOSED"
        ,"type": {"kind":"Int32"}
        ,"value": 676
    }
    ,{
         "name": "ERROR_EXTRANEOUS_INFORMATION"
        ,"type": {"kind":"Int32"}
        ,"value": 677
    }
    ,{
         "name": "ERROR_RXACT_COMMIT_NECESSARY"
        ,"type": {"kind":"Int32"}
        ,"value": 678
    }
    ,{
         "name": "ERROR_MEDIA_CHECK"
        ,"type": {"kind":"Int32"}
        ,"value": 679
    }
    ,{
         "name": "ERROR_GUID_SUBSTITUTION_MADE"
        ,"type": {"kind":"Int32"}
        ,"value": 680
    }
    ,{
         "name": "ERROR_STOPPED_ON_SYMLINK"
        ,"type": {"kind":"Int32"}
        ,"value": 681
    }
    ,{
         "name": "ERROR_LONGJUMP"
        ,"type": {"kind":"Int32"}
        ,"value": 682
    }
    ,{
         "name": "ERROR_PLUGPLAY_QUERY_VETOED"
        ,"type": {"kind":"Int32"}
        ,"value": 683
    }
    ,{
         "name": "ERROR_UNWIND_CONSOLIDATE"
        ,"type": {"kind":"Int32"}
        ,"value": 684
    }
    ,{
         "name": "ERROR_REGISTRY_HIVE_RECOVERED"
        ,"type": {"kind":"Int32"}
        ,"value": 685
    }
    ,{
         "name": "ERROR_DLL_MIGHT_BE_INSECURE"
        ,"type": {"kind":"Int32"}
        ,"value": 686
    }
    ,{
         "name": "ERROR_DLL_MIGHT_BE_INCOMPATIBLE"
        ,"type": {"kind":"Int32"}
        ,"value": 687
    }
    ,{
         "name": "ERROR_DBG_EXCEPTION_NOT_HANDLED"
        ,"type": {"kind":"Int32"}
        ,"value": 688
    }
    ,{
         "name": "ERROR_DBG_REPLY_LATER"
        ,"type": {"kind":"Int32"}
        ,"value": 689
    }
    ,{
         "name": "ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": 690
    }
    ,{
         "name": "ERROR_DBG_TERMINATE_THREAD"
        ,"type": {"kind":"Int32"}
        ,"value": 691
    }
    ,{
         "name": "ERROR_DBG_TERMINATE_PROCESS"
        ,"type": {"kind":"Int32"}
        ,"value": 692
    }
    ,{
         "name": "ERROR_DBG_CONTROL_C"
        ,"type": {"kind":"Int32"}
        ,"value": 693
    }
    ,{
         "name": "ERROR_DBG_PRINTEXCEPTION_C"
        ,"type": {"kind":"Int32"}
        ,"value": 694
    }
    ,{
         "name": "ERROR_DBG_RIPEXCEPTION"
        ,"type": {"kind":"Int32"}
        ,"value": 695
    }
    ,{
         "name": "ERROR_DBG_CONTROL_BREAK"
        ,"type": {"kind":"Int32"}
        ,"value": 696
    }
    ,{
         "name": "ERROR_DBG_COMMAND_EXCEPTION"
        ,"type": {"kind":"Int32"}
        ,"value": 697
    }
    ,{
         "name": "ERROR_OBJECT_NAME_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 698
    }
    ,{
         "name": "ERROR_THREAD_WAS_SUSPENDED"
        ,"type": {"kind":"Int32"}
        ,"value": 699
    }
    ,{
         "name": "ERROR_IMAGE_NOT_AT_BASE"
        ,"type": {"kind":"Int32"}
        ,"value": 700
    }
    ,{
         "name": "ERROR_RXACT_STATE_CREATED"
        ,"type": {"kind":"Int32"}
        ,"value": 701
    }
    ,{
         "name": "ERROR_SEGMENT_NOTIFICATION"
        ,"type": {"kind":"Int32"}
        ,"value": 702
    }
    ,{
         "name": "ERROR_BAD_CURRENT_DIRECTORY"
        ,"type": {"kind":"Int32"}
        ,"value": 703
    }
    ,{
         "name": "ERROR_FT_READ_RECOVERY_FROM_BACKUP"
        ,"type": {"kind":"Int32"}
        ,"value": 704
    }
    ,{
         "name": "ERROR_FT_WRITE_RECOVERY"
        ,"type": {"kind":"Int32"}
        ,"value": 705
    }
    ,{
         "name": "ERROR_IMAGE_MACHINE_TYPE_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 706
    }
    ,{
         "name": "ERROR_RECEIVE_PARTIAL"
        ,"type": {"kind":"Int32"}
        ,"value": 707
    }
    ,{
         "name": "ERROR_RECEIVE_EXPEDITED"
        ,"type": {"kind":"Int32"}
        ,"value": 708
    }
    ,{
         "name": "ERROR_RECEIVE_PARTIAL_EXPEDITED"
        ,"type": {"kind":"Int32"}
        ,"value": 709
    }
    ,{
         "name": "ERROR_EVENT_DONE"
        ,"type": {"kind":"Int32"}
        ,"value": 710
    }
    ,{
         "name": "ERROR_EVENT_PENDING"
        ,"type": {"kind":"Int32"}
        ,"value": 711
    }
    ,{
         "name": "ERROR_CHECKING_FILE_SYSTEM"
        ,"type": {"kind":"Int32"}
        ,"value": 712
    }
    ,{
         "name": "ERROR_FATAL_APP_EXIT"
        ,"type": {"kind":"Int32"}
        ,"value": 713
    }
    ,{
         "name": "ERROR_PREDEFINED_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": 714
    }
    ,{
         "name": "ERROR_WAS_UNLOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": 715
    }
    ,{
         "name": "ERROR_SERVICE_NOTIFICATION"
        ,"type": {"kind":"Int32"}
        ,"value": 716
    }
    ,{
         "name": "ERROR_WAS_LOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": 717
    }
    ,{
         "name": "ERROR_LOG_HARD_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 718
    }
    ,{
         "name": "ERROR_ALREADY_WIN32"
        ,"type": {"kind":"Int32"}
        ,"value": 719
    }
    ,{
         "name": "ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE"
        ,"type": {"kind":"Int32"}
        ,"value": 720
    }
    ,{
         "name": "ERROR_NO_YIELD_PERFORMED"
        ,"type": {"kind":"Int32"}
        ,"value": 721
    }
    ,{
         "name": "ERROR_TIMER_RESUME_IGNORED"
        ,"type": {"kind":"Int32"}
        ,"value": 722
    }
    ,{
         "name": "ERROR_ARBITRATION_UNHANDLED"
        ,"type": {"kind":"Int32"}
        ,"value": 723
    }
    ,{
         "name": "ERROR_CARDBUS_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 724
    }
    ,{
         "name": "ERROR_MP_PROCESSOR_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 725
    }
    ,{
         "name": "ERROR_HIBERNATED"
        ,"type": {"kind":"Int32"}
        ,"value": 726
    }
    ,{
         "name": "ERROR_RESUME_HIBERNATION"
        ,"type": {"kind":"Int32"}
        ,"value": 727
    }
    ,{
         "name": "ERROR_FIRMWARE_UPDATED"
        ,"type": {"kind":"Int32"}
        ,"value": 728
    }
    ,{
         "name": "ERROR_DRIVERS_LEAKING_LOCKED_PAGES"
        ,"type": {"kind":"Int32"}
        ,"value": 729
    }
    ,{
         "name": "ERROR_WAKE_SYSTEM"
        ,"type": {"kind":"Int32"}
        ,"value": 730
    }
    ,{
         "name": "ERROR_WAIT_1"
        ,"type": {"kind":"Int32"}
        ,"value": 731
    }
    ,{
         "name": "ERROR_WAIT_2"
        ,"type": {"kind":"Int32"}
        ,"value": 732
    }
    ,{
         "name": "ERROR_WAIT_3"
        ,"type": {"kind":"Int32"}
        ,"value": 733
    }
    ,{
         "name": "ERROR_WAIT_63"
        ,"type": {"kind":"Int32"}
        ,"value": 734
    }
    ,{
         "name": "ERROR_ABANDONED_WAIT_0"
        ,"type": {"kind":"Int32"}
        ,"value": 735
    }
    ,{
         "name": "ERROR_ABANDONED_WAIT_63"
        ,"type": {"kind":"Int32"}
        ,"value": 736
    }
    ,{
         "name": "ERROR_USER_APC"
        ,"type": {"kind":"Int32"}
        ,"value": 737
    }
    ,{
         "name": "ERROR_KERNEL_APC"
        ,"type": {"kind":"Int32"}
        ,"value": 738
    }
    ,{
         "name": "ERROR_ALERTED"
        ,"type": {"kind":"Int32"}
        ,"value": 739
    }
    ,{
         "name": "ERROR_ELEVATION_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 740
    }
    ,{
         "name": "ERROR_REPARSE"
        ,"type": {"kind":"Int32"}
        ,"value": 741
    }
    ,{
         "name": "ERROR_OPLOCK_BREAK_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 742
    }
    ,{
         "name": "ERROR_VOLUME_MOUNTED"
        ,"type": {"kind":"Int32"}
        ,"value": 743
    }
    ,{
         "name": "ERROR_RXACT_COMMITTED"
        ,"type": {"kind":"Int32"}
        ,"value": 744
    }
    ,{
         "name": "ERROR_NOTIFY_CLEANUP"
        ,"type": {"kind":"Int32"}
        ,"value": 745
    }
    ,{
         "name": "ERROR_PRIMARY_TRANSPORT_CONNECT_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 746
    }
    ,{
         "name": "ERROR_PAGE_FAULT_TRANSITION"
        ,"type": {"kind":"Int32"}
        ,"value": 747
    }
    ,{
         "name": "ERROR_PAGE_FAULT_DEMAND_ZERO"
        ,"type": {"kind":"Int32"}
        ,"value": 748
    }
    ,{
         "name": "ERROR_PAGE_FAULT_COPY_ON_WRITE"
        ,"type": {"kind":"Int32"}
        ,"value": 749
    }
    ,{
         "name": "ERROR_PAGE_FAULT_GUARD_PAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 750
    }
    ,{
         "name": "ERROR_PAGE_FAULT_PAGING_FILE"
        ,"type": {"kind":"Int32"}
        ,"value": 751
    }
    ,{
         "name": "ERROR_CACHE_PAGE_LOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": 752
    }
    ,{
         "name": "ERROR_CRASH_DUMP"
        ,"type": {"kind":"Int32"}
        ,"value": 753
    }
    ,{
         "name": "ERROR_BUFFER_ALL_ZEROS"
        ,"type": {"kind":"Int32"}
        ,"value": 754
    }
    ,{
         "name": "ERROR_REPARSE_OBJECT"
        ,"type": {"kind":"Int32"}
        ,"value": 755
    }
    ,{
         "name": "ERROR_RESOURCE_REQUIREMENTS_CHANGED"
        ,"type": {"kind":"Int32"}
        ,"value": 756
    }
    ,{
         "name": "ERROR_TRANSLATION_COMPLETE"
        ,"type": {"kind":"Int32"}
        ,"value": 757
    }
    ,{
         "name": "ERROR_NOTHING_TO_TERMINATE"
        ,"type": {"kind":"Int32"}
        ,"value": 758
    }
    ,{
         "name": "ERROR_PROCESS_NOT_IN_JOB"
        ,"type": {"kind":"Int32"}
        ,"value": 759
    }
    ,{
         "name": "ERROR_PROCESS_IN_JOB"
        ,"type": {"kind":"Int32"}
        ,"value": 760
    }
    ,{
         "name": "ERROR_VOLSNAP_HIBERNATE_READY"
        ,"type": {"kind":"Int32"}
        ,"value": 761
    }
    ,{
         "name": "ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY"
        ,"type": {"kind":"Int32"}
        ,"value": 762
    }
    ,{
         "name": "ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 763
    }
    ,{
         "name": "ERROR_INTERRUPT_STILL_CONNECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 764
    }
    ,{
         "name": "ERROR_WAIT_FOR_OPLOCK"
        ,"type": {"kind":"Int32"}
        ,"value": 765
    }
    ,{
         "name": "ERROR_DBG_EXCEPTION_HANDLED"
        ,"type": {"kind":"Int32"}
        ,"value": 766
    }
    ,{
         "name": "ERROR_DBG_CONTINUE"
        ,"type": {"kind":"Int32"}
        ,"value": 767
    }
    ,{
         "name": "ERROR_CALLBACK_POP_STACK"
        ,"type": {"kind":"Int32"}
        ,"value": 768
    }
    ,{
         "name": "ERROR_COMPRESSION_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 769
    }
    ,{
         "name": "ERROR_CANTFETCHBACKWARDS"
        ,"type": {"kind":"Int32"}
        ,"value": 770
    }
    ,{
         "name": "ERROR_CANTSCROLLBACKWARDS"
        ,"type": {"kind":"Int32"}
        ,"value": 771
    }
    ,{
         "name": "ERROR_ROWSNOTRELEASED"
        ,"type": {"kind":"Int32"}
        ,"value": 772
    }
    ,{
         "name": "ERROR_BAD_ACCESSOR_FLAGS"
        ,"type": {"kind":"Int32"}
        ,"value": 773
    }
    ,{
         "name": "ERROR_ERRORS_ENCOUNTERED"
        ,"type": {"kind":"Int32"}
        ,"value": 774
    }
    ,{
         "name": "ERROR_NOT_CAPABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 775
    }
    ,{
         "name": "ERROR_REQUEST_OUT_OF_SEQUENCE"
        ,"type": {"kind":"Int32"}
        ,"value": 776
    }
    ,{
         "name": "ERROR_VERSION_PARSE_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 777
    }
    ,{
         "name": "ERROR_BADSTARTPOSITION"
        ,"type": {"kind":"Int32"}
        ,"value": 778
    }
    ,{
         "name": "ERROR_MEMORY_HARDWARE"
        ,"type": {"kind":"Int32"}
        ,"value": 779
    }
    ,{
         "name": "ERROR_DISK_REPAIR_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 780
    }
    ,{
         "name": "ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 781
    }
    ,{
         "name": "ERROR_SYSTEM_POWERSTATE_TRANSITION"
        ,"type": {"kind":"Int32"}
        ,"value": 782
    }
    ,{
         "name": "ERROR_SYSTEM_POWERSTATE_COMPLEX_TRANSITION"
        ,"type": {"kind":"Int32"}
        ,"value": 783
    }
    ,{
         "name": "ERROR_MCA_EXCEPTION"
        ,"type": {"kind":"Int32"}
        ,"value": 784
    }
    ,{
         "name": "ERROR_ACCESS_AUDIT_BY_POLICY"
        ,"type": {"kind":"Int32"}
        ,"value": 785
    }
    ,{
         "name": "ERROR_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY"
        ,"type": {"kind":"Int32"}
        ,"value": 786
    }
    ,{
         "name": "ERROR_ABANDON_HIBERFILE"
        ,"type": {"kind":"Int32"}
        ,"value": 787
    }
    ,{
         "name": "ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 788
    }
    ,{
         "name": "ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 789
    }
    ,{
         "name": "ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 790
    }
    ,{
         "name": "ERROR_BAD_MCFG_TABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 791
    }
    ,{
         "name": "ERROR_DISK_REPAIR_REDIRECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 792
    }
    ,{
         "name": "ERROR_DISK_REPAIR_UNSUCCESSFUL"
        ,"type": {"kind":"Int32"}
        ,"value": 793
    }
    ,{
         "name": "ERROR_CORRUPT_LOG_OVERFULL"
        ,"type": {"kind":"Int32"}
        ,"value": 794
    }
    ,{
         "name": "ERROR_CORRUPT_LOG_CORRUPTED"
        ,"type": {"kind":"Int32"}
        ,"value": 795
    }
    ,{
         "name": "ERROR_CORRUPT_LOG_UNAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 796
    }
    ,{
         "name": "ERROR_CORRUPT_LOG_DELETED_FULL"
        ,"type": {"kind":"Int32"}
        ,"value": 797
    }
    ,{
         "name": "ERROR_CORRUPT_LOG_CLEARED"
        ,"type": {"kind":"Int32"}
        ,"value": 798
    }
    ,{
         "name": "ERROR_ORPHAN_NAME_EXHAUSTED"
        ,"type": {"kind":"Int32"}
        ,"value": 799
    }
    ,{
         "name": "ERROR_OPLOCK_SWITCHED_TO_NEW_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": 800
    }
    ,{
         "name": "ERROR_CANNOT_GRANT_REQUESTED_OPLOCK"
        ,"type": {"kind":"Int32"}
        ,"value": 801
    }
    ,{
         "name": "ERROR_CANNOT_BREAK_OPLOCK"
        ,"type": {"kind":"Int32"}
        ,"value": 802
    }
    ,{
         "name": "ERROR_OPLOCK_HANDLE_CLOSED"
        ,"type": {"kind":"Int32"}
        ,"value": 803
    }
    ,{
         "name": "ERROR_NO_ACE_CONDITION"
        ,"type": {"kind":"Int32"}
        ,"value": 804
    }
    ,{
         "name": "ERROR_INVALID_ACE_CONDITION"
        ,"type": {"kind":"Int32"}
        ,"value": 805
    }
    ,{
         "name": "ERROR_FILE_HANDLE_REVOKED"
        ,"type": {"kind":"Int32"}
        ,"value": 806
    }
    ,{
         "name": "ERROR_IMAGE_AT_DIFFERENT_BASE"
        ,"type": {"kind":"Int32"}
        ,"value": 807
    }
    ,{
         "name": "ERROR_ENCRYPTED_IO_NOT_POSSIBLE"
        ,"type": {"kind":"Int32"}
        ,"value": 808
    }
    ,{
         "name": "ERROR_FILE_METADATA_OPTIMIZATION_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 809
    }
    ,{
         "name": "ERROR_QUOTA_ACTIVITY"
        ,"type": {"kind":"Int32"}
        ,"value": 810
    }
    ,{
         "name": "ERROR_HANDLE_REVOKED"
        ,"type": {"kind":"Int32"}
        ,"value": 811
    }
    ,{
         "name": "ERROR_CALLBACK_INVOKE_INLINE"
        ,"type": {"kind":"Int32"}
        ,"value": 812
    }
    ,{
         "name": "ERROR_CPU_SET_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": 813
    }
    ,{
         "name": "ERROR_ENCLAVE_NOT_TERMINATED"
        ,"type": {"kind":"Int32"}
        ,"value": 814
    }
    ,{
         "name": "ERROR_ENCLAVE_VIOLATION"
        ,"type": {"kind":"Int32"}
        ,"value": 815
    }
    ,{
         "name": "ERROR_EA_ACCESS_DENIED"
        ,"type": {"kind":"Int32"}
        ,"value": 994
    }
    ,{
         "name": "ERROR_OPERATION_ABORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 995
    }
    ,{
         "name": "ERROR_IO_INCOMPLETE"
        ,"type": {"kind":"Int32"}
        ,"value": 996
    }
    ,{
         "name": "ERROR_IO_PENDING"
        ,"type": {"kind":"Int32"}
        ,"value": 997
    }
    ,{
         "name": "ERROR_NOACCESS"
        ,"type": {"kind":"Int32"}
        ,"value": 998
    }
    ,{
         "name": "ERROR_SWAPERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 999
    }
    ,{
         "name": "ERROR_STACK_OVERFLOW"
        ,"type": {"kind":"Int32"}
        ,"value": 1001
    }
    ,{
         "name": "ERROR_INVALID_MESSAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 1002
    }
    ,{
         "name": "ERROR_CAN_NOT_COMPLETE"
        ,"type": {"kind":"Int32"}
        ,"value": 1003
    }
    ,{
         "name": "ERROR_INVALID_FLAGS"
        ,"type": {"kind":"Int32"}
        ,"value": 1004
    }
    ,{
         "name": "ERROR_UNRECOGNIZED_VOLUME"
        ,"type": {"kind":"Int32"}
        ,"value": 1005
    }
    ,{
         "name": "ERROR_FILE_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": 1006
    }
    ,{
         "name": "ERROR_FULLSCREEN_MODE"
        ,"type": {"kind":"Int32"}
        ,"value": 1007
    }
    ,{
         "name": "ERROR_NO_TOKEN"
        ,"type": {"kind":"Int32"}
        ,"value": 1008
    }
    ,{
         "name": "ERROR_BADDB"
        ,"type": {"kind":"Int32"}
        ,"value": 1009
    }
    ,{
         "name": "ERROR_BADKEY"
        ,"type": {"kind":"Int32"}
        ,"value": 1010
    }
    ,{
         "name": "ERROR_CANTOPEN"
        ,"type": {"kind":"Int32"}
        ,"value": 1011
    }
    ,{
         "name": "ERROR_CANTREAD"
        ,"type": {"kind":"Int32"}
        ,"value": 1012
    }
    ,{
         "name": "ERROR_CANTWRITE"
        ,"type": {"kind":"Int32"}
        ,"value": 1013
    }
    ,{
         "name": "ERROR_REGISTRY_RECOVERED"
        ,"type": {"kind":"Int32"}
        ,"value": 1014
    }
    ,{
         "name": "ERROR_REGISTRY_CORRUPT"
        ,"type": {"kind":"Int32"}
        ,"value": 1015
    }
    ,{
         "name": "ERROR_REGISTRY_IO_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 1016
    }
    ,{
         "name": "ERROR_NOT_REGISTRY_FILE"
        ,"type": {"kind":"Int32"}
        ,"value": 1017
    }
    ,{
         "name": "ERROR_KEY_DELETED"
        ,"type": {"kind":"Int32"}
        ,"value": 1018
    }
    ,{
         "name": "ERROR_NO_LOG_SPACE"
        ,"type": {"kind":"Int32"}
        ,"value": 1019
    }
    ,{
         "name": "ERROR_KEY_HAS_CHILDREN"
        ,"type": {"kind":"Int32"}
        ,"value": 1020
    }
    ,{
         "name": "ERROR_CHILD_MUST_BE_VOLATILE"
        ,"type": {"kind":"Int32"}
        ,"value": 1021
    }
    ,{
         "name": "ERROR_NOTIFY_ENUM_DIR"
        ,"type": {"kind":"Int32"}
        ,"value": 1022
    }
    ,{
         "name": "ERROR_DEPENDENT_SERVICES_RUNNING"
        ,"type": {"kind":"Int32"}
        ,"value": 1051
    }
    ,{
         "name": "ERROR_INVALID_SERVICE_CONTROL"
        ,"type": {"kind":"Int32"}
        ,"value": 1052
    }
    ,{
         "name": "ERROR_SERVICE_REQUEST_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 1053
    }
    ,{
         "name": "ERROR_SERVICE_NO_THREAD"
        ,"type": {"kind":"Int32"}
        ,"value": 1054
    }
    ,{
         "name": "ERROR_SERVICE_DATABASE_LOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": 1055
    }
    ,{
         "name": "ERROR_SERVICE_ALREADY_RUNNING"
        ,"type": {"kind":"Int32"}
        ,"value": 1056
    }
    ,{
         "name": "ERROR_INVALID_SERVICE_ACCOUNT"
        ,"type": {"kind":"Int32"}
        ,"value": 1057
    }
    ,{
         "name": "ERROR_SERVICE_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 1058
    }
    ,{
         "name": "ERROR_CIRCULAR_DEPENDENCY"
        ,"type": {"kind":"Int32"}
        ,"value": 1059
    }
    ,{
         "name": "ERROR_SERVICE_DOES_NOT_EXIST"
        ,"type": {"kind":"Int32"}
        ,"value": 1060
    }
    ,{
         "name": "ERROR_SERVICE_CANNOT_ACCEPT_CTRL"
        ,"type": {"kind":"Int32"}
        ,"value": 1061
    }
    ,{
         "name": "ERROR_SERVICE_NOT_ACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 1062
    }
    ,{
         "name": "ERROR_FAILED_SERVICE_CONTROLLER_CONNECT"
        ,"type": {"kind":"Int32"}
        ,"value": 1063
    }
    ,{
         "name": "ERROR_EXCEPTION_IN_SERVICE"
        ,"type": {"kind":"Int32"}
        ,"value": 1064
    }
    ,{
         "name": "ERROR_DATABASE_DOES_NOT_EXIST"
        ,"type": {"kind":"Int32"}
        ,"value": 1065
    }
    ,{
         "name": "ERROR_SERVICE_SPECIFIC_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 1066
    }
    ,{
         "name": "ERROR_PROCESS_ABORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 1067
    }
    ,{
         "name": "ERROR_SERVICE_DEPENDENCY_FAIL"
        ,"type": {"kind":"Int32"}
        ,"value": 1068
    }
    ,{
         "name": "ERROR_SERVICE_LOGON_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 1069
    }
    ,{
         "name": "ERROR_SERVICE_START_HANG"
        ,"type": {"kind":"Int32"}
        ,"value": 1070
    }
    ,{
         "name": "ERROR_INVALID_SERVICE_LOCK"
        ,"type": {"kind":"Int32"}
        ,"value": 1071
    }
    ,{
         "name": "ERROR_SERVICE_MARKED_FOR_DELETE"
        ,"type": {"kind":"Int32"}
        ,"value": 1072
    }
    ,{
         "name": "ERROR_SERVICE_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 1073
    }
    ,{
         "name": "ERROR_ALREADY_RUNNING_LKG"
        ,"type": {"kind":"Int32"}
        ,"value": 1074
    }
    ,{
         "name": "ERROR_SERVICE_DEPENDENCY_DELETED"
        ,"type": {"kind":"Int32"}
        ,"value": 1075
    }
    ,{
         "name": "ERROR_BOOT_ALREADY_ACCEPTED"
        ,"type": {"kind":"Int32"}
        ,"value": 1076
    }
    ,{
         "name": "ERROR_SERVICE_NEVER_STARTED"
        ,"type": {"kind":"Int32"}
        ,"value": 1077
    }
    ,{
         "name": "ERROR_DUPLICATE_SERVICE_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 1078
    }
    ,{
         "name": "ERROR_DIFFERENT_SERVICE_ACCOUNT"
        ,"type": {"kind":"Int32"}
        ,"value": 1079
    }
    ,{
         "name": "ERROR_CANNOT_DETECT_DRIVER_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 1080
    }
    ,{
         "name": "ERROR_CANNOT_DETECT_PROCESS_ABORT"
        ,"type": {"kind":"Int32"}
        ,"value": 1081
    }
    ,{
         "name": "ERROR_NO_RECOVERY_PROGRAM"
        ,"type": {"kind":"Int32"}
        ,"value": 1082
    }
    ,{
         "name": "ERROR_SERVICE_NOT_IN_EXE"
        ,"type": {"kind":"Int32"}
        ,"value": 1083
    }
    ,{
         "name": "ERROR_NOT_SAFEBOOT_SERVICE"
        ,"type": {"kind":"Int32"}
        ,"value": 1084
    }
    ,{
         "name": "ERROR_END_OF_MEDIA"
        ,"type": {"kind":"Int32"}
        ,"value": 1100
    }
    ,{
         "name": "ERROR_FILEMARK_DETECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 1101
    }
    ,{
         "name": "ERROR_BEGINNING_OF_MEDIA"
        ,"type": {"kind":"Int32"}
        ,"value": 1102
    }
    ,{
         "name": "ERROR_SETMARK_DETECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 1103
    }
    ,{
         "name": "ERROR_NO_DATA_DETECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 1104
    }
    ,{
         "name": "ERROR_PARTITION_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 1105
    }
    ,{
         "name": "ERROR_INVALID_BLOCK_LENGTH"
        ,"type": {"kind":"Int32"}
        ,"value": 1106
    }
    ,{
         "name": "ERROR_DEVICE_NOT_PARTITIONED"
        ,"type": {"kind":"Int32"}
        ,"value": 1107
    }
    ,{
         "name": "ERROR_UNABLE_TO_LOCK_MEDIA"
        ,"type": {"kind":"Int32"}
        ,"value": 1108
    }
    ,{
         "name": "ERROR_UNABLE_TO_UNLOAD_MEDIA"
        ,"type": {"kind":"Int32"}
        ,"value": 1109
    }
    ,{
         "name": "ERROR_MEDIA_CHANGED"
        ,"type": {"kind":"Int32"}
        ,"value": 1110
    }
    ,{
         "name": "ERROR_BUS_RESET"
        ,"type": {"kind":"Int32"}
        ,"value": 1111
    }
    ,{
         "name": "ERROR_NO_MEDIA_IN_DRIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 1112
    }
    ,{
         "name": "ERROR_NO_UNICODE_TRANSLATION"
        ,"type": {"kind":"Int32"}
        ,"value": 1113
    }
    ,{
         "name": "ERROR_DLL_INIT_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 1114
    }
    ,{
         "name": "ERROR_SHUTDOWN_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 1115
    }
    ,{
         "name": "ERROR_NO_SHUTDOWN_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 1116
    }
    ,{
         "name": "ERROR_IO_DEVICE"
        ,"type": {"kind":"Int32"}
        ,"value": 1117
    }
    ,{
         "name": "ERROR_SERIAL_NO_DEVICE"
        ,"type": {"kind":"Int32"}
        ,"value": 1118
    }
    ,{
         "name": "ERROR_IRQ_BUSY"
        ,"type": {"kind":"Int32"}
        ,"value": 1119
    }
    ,{
         "name": "ERROR_MORE_WRITES"
        ,"type": {"kind":"Int32"}
        ,"value": 1120
    }
    ,{
         "name": "ERROR_COUNTER_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 1121
    }
    ,{
         "name": "ERROR_FLOPPY_ID_MARK_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 1122
    }
    ,{
         "name": "ERROR_FLOPPY_WRONG_CYLINDER"
        ,"type": {"kind":"Int32"}
        ,"value": 1123
    }
    ,{
         "name": "ERROR_FLOPPY_UNKNOWN_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 1124
    }
    ,{
         "name": "ERROR_FLOPPY_BAD_REGISTERS"
        ,"type": {"kind":"Int32"}
        ,"value": 1125
    }
    ,{
         "name": "ERROR_DISK_RECALIBRATE_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 1126
    }
    ,{
         "name": "ERROR_DISK_OPERATION_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 1127
    }
    ,{
         "name": "ERROR_DISK_RESET_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 1128
    }
    ,{
         "name": "ERROR_EOM_OVERFLOW"
        ,"type": {"kind":"Int32"}
        ,"value": 1129
    }
    ,{
         "name": "ERROR_NOT_ENOUGH_SERVER_MEMORY"
        ,"type": {"kind":"Int32"}
        ,"value": 1130
    }
    ,{
         "name": "ERROR_POSSIBLE_DEADLOCK"
        ,"type": {"kind":"Int32"}
        ,"value": 1131
    }
    ,{
         "name": "ERROR_MAPPED_ALIGNMENT"
        ,"type": {"kind":"Int32"}
        ,"value": 1132
    }
    ,{
         "name": "ERROR_SET_POWER_STATE_VETOED"
        ,"type": {"kind":"Int32"}
        ,"value": 1140
    }
    ,{
         "name": "ERROR_SET_POWER_STATE_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 1141
    }
    ,{
         "name": "ERROR_TOO_MANY_LINKS"
        ,"type": {"kind":"Int32"}
        ,"value": 1142
    }
    ,{
         "name": "ERROR_OLD_WIN_VERSION"
        ,"type": {"kind":"Int32"}
        ,"value": 1150
    }
    ,{
         "name": "ERROR_APP_WRONG_OS"
        ,"type": {"kind":"Int32"}
        ,"value": 1151
    }
    ,{
         "name": "ERROR_SINGLE_INSTANCE_APP"
        ,"type": {"kind":"Int32"}
        ,"value": 1152
    }
    ,{
         "name": "ERROR_RMODE_APP"
        ,"type": {"kind":"Int32"}
        ,"value": 1153
    }
    ,{
         "name": "ERROR_INVALID_DLL"
        ,"type": {"kind":"Int32"}
        ,"value": 1154
    }
    ,{
         "name": "ERROR_NO_ASSOCIATION"
        ,"type": {"kind":"Int32"}
        ,"value": 1155
    }
    ,{
         "name": "ERROR_DDE_FAIL"
        ,"type": {"kind":"Int32"}
        ,"value": 1156
    }
    ,{
         "name": "ERROR_DLL_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 1157
    }
    ,{
         "name": "ERROR_NO_MORE_USER_HANDLES"
        ,"type": {"kind":"Int32"}
        ,"value": 1158
    }
    ,{
         "name": "ERROR_MESSAGE_SYNC_ONLY"
        ,"type": {"kind":"Int32"}
        ,"value": 1159
    }
    ,{
         "name": "ERROR_SOURCE_ELEMENT_EMPTY"
        ,"type": {"kind":"Int32"}
        ,"value": 1160
    }
    ,{
         "name": "ERROR_DESTINATION_ELEMENT_FULL"
        ,"type": {"kind":"Int32"}
        ,"value": 1161
    }
    ,{
         "name": "ERROR_ILLEGAL_ELEMENT_ADDRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 1162
    }
    ,{
         "name": "ERROR_MAGAZINE_NOT_PRESENT"
        ,"type": {"kind":"Int32"}
        ,"value": 1163
    }
    ,{
         "name": "ERROR_DEVICE_REINITIALIZATION_NEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 1164
    }
    ,{
         "name": "ERROR_DEVICE_REQUIRES_CLEANING"
        ,"type": {"kind":"Int32"}
        ,"value": 1165
    }
    ,{
         "name": "ERROR_DEVICE_DOOR_OPEN"
        ,"type": {"kind":"Int32"}
        ,"value": 1166
    }
    ,{
         "name": "ERROR_DEVICE_NOT_CONNECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 1167
    }
    ,{
         "name": "ERROR_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 1168
    }
    ,{
         "name": "ERROR_NO_MATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 1169
    }
    ,{
         "name": "ERROR_SET_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 1170
    }
    ,{
         "name": "ERROR_POINT_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 1171
    }
    ,{
         "name": "ERROR_NO_TRACKING_SERVICE"
        ,"type": {"kind":"Int32"}
        ,"value": 1172
    }
    ,{
         "name": "ERROR_NO_VOLUME_ID"
        ,"type": {"kind":"Int32"}
        ,"value": 1173
    }
    ,{
         "name": "ERROR_UNABLE_TO_REMOVE_REPLACED"
        ,"type": {"kind":"Int32"}
        ,"value": 1175
    }
    ,{
         "name": "ERROR_UNABLE_TO_MOVE_REPLACEMENT"
        ,"type": {"kind":"Int32"}
        ,"value": 1176
    }
    ,{
         "name": "ERROR_UNABLE_TO_MOVE_REPLACEMENT_2"
        ,"type": {"kind":"Int32"}
        ,"value": 1177
    }
    ,{
         "name": "ERROR_JOURNAL_DELETE_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 1178
    }
    ,{
         "name": "ERROR_JOURNAL_NOT_ACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 1179
    }
    ,{
         "name": "ERROR_POTENTIAL_FILE_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 1180
    }
    ,{
         "name": "ERROR_JOURNAL_ENTRY_DELETED"
        ,"type": {"kind":"Int32"}
        ,"value": 1181
    }
    ,{
         "name": "ERROR_SHUTDOWN_IS_SCHEDULED"
        ,"type": {"kind":"Int32"}
        ,"value": 1190
    }
    ,{
         "name": "ERROR_SHUTDOWN_USERS_LOGGED_ON"
        ,"type": {"kind":"Int32"}
        ,"value": 1191
    }
    ,{
         "name": "ERROR_BAD_DEVICE"
        ,"type": {"kind":"Int32"}
        ,"value": 1200
    }
    ,{
         "name": "ERROR_CONNECTION_UNAVAIL"
        ,"type": {"kind":"Int32"}
        ,"value": 1201
    }
    ,{
         "name": "ERROR_DEVICE_ALREADY_REMEMBERED"
        ,"type": {"kind":"Int32"}
        ,"value": 1202
    }
    ,{
         "name": "ERROR_NO_NET_OR_BAD_PATH"
        ,"type": {"kind":"Int32"}
        ,"value": 1203
    }
    ,{
         "name": "ERROR_BAD_PROVIDER"
        ,"type": {"kind":"Int32"}
        ,"value": 1204
    }
    ,{
         "name": "ERROR_CANNOT_OPEN_PROFILE"
        ,"type": {"kind":"Int32"}
        ,"value": 1205
    }
    ,{
         "name": "ERROR_BAD_PROFILE"
        ,"type": {"kind":"Int32"}
        ,"value": 1206
    }
    ,{
         "name": "ERROR_NOT_CONTAINER"
        ,"type": {"kind":"Int32"}
        ,"value": 1207
    }
    ,{
         "name": "ERROR_EXTENDED_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 1208
    }
    ,{
         "name": "ERROR_INVALID_GROUPNAME"
        ,"type": {"kind":"Int32"}
        ,"value": 1209
    }
    ,{
         "name": "ERROR_INVALID_COMPUTERNAME"
        ,"type": {"kind":"Int32"}
        ,"value": 1210
    }
    ,{
         "name": "ERROR_INVALID_EVENTNAME"
        ,"type": {"kind":"Int32"}
        ,"value": 1211
    }
    ,{
         "name": "ERROR_INVALID_DOMAINNAME"
        ,"type": {"kind":"Int32"}
        ,"value": 1212
    }
    ,{
         "name": "ERROR_INVALID_SERVICENAME"
        ,"type": {"kind":"Int32"}
        ,"value": 1213
    }
    ,{
         "name": "ERROR_INVALID_NETNAME"
        ,"type": {"kind":"Int32"}
        ,"value": 1214
    }
    ,{
         "name": "ERROR_INVALID_SHARENAME"
        ,"type": {"kind":"Int32"}
        ,"value": 1215
    }
    ,{
         "name": "ERROR_INVALID_PASSWORDNAME"
        ,"type": {"kind":"Int32"}
        ,"value": 1216
    }
    ,{
         "name": "ERROR_INVALID_MESSAGENAME"
        ,"type": {"kind":"Int32"}
        ,"value": 1217
    }
    ,{
         "name": "ERROR_INVALID_MESSAGEDEST"
        ,"type": {"kind":"Int32"}
        ,"value": 1218
    }
    ,{
         "name": "ERROR_SESSION_CREDENTIAL_CONFLICT"
        ,"type": {"kind":"Int32"}
        ,"value": 1219
    }
    ,{
         "name": "ERROR_REMOTE_SESSION_LIMIT_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 1220
    }
    ,{
         "name": "ERROR_DUP_DOMAINNAME"
        ,"type": {"kind":"Int32"}
        ,"value": 1221
    }
    ,{
         "name": "ERROR_NO_NETWORK"
        ,"type": {"kind":"Int32"}
        ,"value": 1222
    }
    ,{
         "name": "ERROR_CANCELLED"
        ,"type": {"kind":"Int32"}
        ,"value": 1223
    }
    ,{
         "name": "ERROR_USER_MAPPED_FILE"
        ,"type": {"kind":"Int32"}
        ,"value": 1224
    }
    ,{
         "name": "ERROR_CONNECTION_REFUSED"
        ,"type": {"kind":"Int32"}
        ,"value": 1225
    }
    ,{
         "name": "ERROR_GRACEFUL_DISCONNECT"
        ,"type": {"kind":"Int32"}
        ,"value": 1226
    }
    ,{
         "name": "ERROR_ADDRESS_ALREADY_ASSOCIATED"
        ,"type": {"kind":"Int32"}
        ,"value": 1227
    }
    ,{
         "name": "ERROR_ADDRESS_NOT_ASSOCIATED"
        ,"type": {"kind":"Int32"}
        ,"value": 1228
    }
    ,{
         "name": "ERROR_CONNECTION_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": 1229
    }
    ,{
         "name": "ERROR_CONNECTION_ACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 1230
    }
    ,{
         "name": "ERROR_NETWORK_UNREACHABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 1231
    }
    ,{
         "name": "ERROR_HOST_UNREACHABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 1232
    }
    ,{
         "name": "ERROR_PROTOCOL_UNREACHABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 1233
    }
    ,{
         "name": "ERROR_PORT_UNREACHABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 1234
    }
    ,{
         "name": "ERROR_REQUEST_ABORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 1235
    }
    ,{
         "name": "ERROR_CONNECTION_ABORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 1236
    }
    ,{
         "name": "ERROR_RETRY"
        ,"type": {"kind":"Int32"}
        ,"value": 1237
    }
    ,{
         "name": "ERROR_CONNECTION_COUNT_LIMIT"
        ,"type": {"kind":"Int32"}
        ,"value": 1238
    }
    ,{
         "name": "ERROR_LOGIN_TIME_RESTRICTION"
        ,"type": {"kind":"Int32"}
        ,"value": 1239
    }
    ,{
         "name": "ERROR_LOGIN_WKSTA_RESTRICTION"
        ,"type": {"kind":"Int32"}
        ,"value": 1240
    }
    ,{
         "name": "ERROR_INCORRECT_ADDRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 1241
    }
    ,{
         "name": "ERROR_ALREADY_REGISTERED"
        ,"type": {"kind":"Int32"}
        ,"value": 1242
    }
    ,{
         "name": "ERROR_SERVICE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 1243
    }
    ,{
         "name": "ERROR_NOT_AUTHENTICATED"
        ,"type": {"kind":"Int32"}
        ,"value": 1244
    }
    ,{
         "name": "ERROR_NOT_LOGGED_ON"
        ,"type": {"kind":"Int32"}
        ,"value": 1245
    }
    ,{
         "name": "ERROR_CONTINUE"
        ,"type": {"kind":"Int32"}
        ,"value": 1246
    }
    ,{
         "name": "ERROR_ALREADY_INITIALIZED"
        ,"type": {"kind":"Int32"}
        ,"value": 1247
    }
    ,{
         "name": "ERROR_NO_MORE_DEVICES"
        ,"type": {"kind":"Int32"}
        ,"value": 1248
    }
    ,{
         "name": "ERROR_NO_SUCH_SITE"
        ,"type": {"kind":"Int32"}
        ,"value": 1249
    }
    ,{
         "name": "ERROR_DOMAIN_CONTROLLER_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 1250
    }
    ,{
         "name": "ERROR_ONLY_IF_CONNECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 1251
    }
    ,{
         "name": "ERROR_OVERRIDE_NOCHANGES"
        ,"type": {"kind":"Int32"}
        ,"value": 1252
    }
    ,{
         "name": "ERROR_BAD_USER_PROFILE"
        ,"type": {"kind":"Int32"}
        ,"value": 1253
    }
    ,{
         "name": "ERROR_NOT_SUPPORTED_ON_SBS"
        ,"type": {"kind":"Int32"}
        ,"value": 1254
    }
    ,{
         "name": "ERROR_SERVER_SHUTDOWN_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 1255
    }
    ,{
         "name": "ERROR_HOST_DOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 1256
    }
    ,{
         "name": "ERROR_NON_ACCOUNT_SID"
        ,"type": {"kind":"Int32"}
        ,"value": 1257
    }
    ,{
         "name": "ERROR_NON_DOMAIN_SID"
        ,"type": {"kind":"Int32"}
        ,"value": 1258
    }
    ,{
         "name": "ERROR_APPHELP_BLOCK"
        ,"type": {"kind":"Int32"}
        ,"value": 1259
    }
    ,{
         "name": "ERROR_ACCESS_DISABLED_BY_POLICY"
        ,"type": {"kind":"Int32"}
        ,"value": 1260
    }
    ,{
         "name": "ERROR_REG_NAT_CONSUMPTION"
        ,"type": {"kind":"Int32"}
        ,"value": 1261
    }
    ,{
         "name": "ERROR_CSCSHARE_OFFLINE"
        ,"type": {"kind":"Int32"}
        ,"value": 1262
    }
    ,{
         "name": "ERROR_PKINIT_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 1263
    }
    ,{
         "name": "ERROR_SMARTCARD_SUBSYSTEM_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 1264
    }
    ,{
         "name": "ERROR_DOWNGRADE_DETECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 1265
    }
    ,{
         "name": "ERROR_MACHINE_LOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": 1271
    }
    ,{
         "name": "ERROR_SMB_GUEST_LOGON_BLOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": 1272
    }
    ,{
         "name": "ERROR_CALLBACK_SUPPLIED_INVALID_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": 1273
    }
    ,{
         "name": "ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 1274
    }
    ,{
         "name": "ERROR_DRIVER_BLOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": 1275
    }
    ,{
         "name": "ERROR_INVALID_IMPORT_OF_NON_DLL"
        ,"type": {"kind":"Int32"}
        ,"value": 1276
    }
    ,{
         "name": "ERROR_ACCESS_DISABLED_WEBBLADE"
        ,"type": {"kind":"Int32"}
        ,"value": 1277
    }
    ,{
         "name": "ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER"
        ,"type": {"kind":"Int32"}
        ,"value": 1278
    }
    ,{
         "name": "ERROR_RECOVERY_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 1279
    }
    ,{
         "name": "ERROR_ALREADY_FIBER"
        ,"type": {"kind":"Int32"}
        ,"value": 1280
    }
    ,{
         "name": "ERROR_ALREADY_THREAD"
        ,"type": {"kind":"Int32"}
        ,"value": 1281
    }
    ,{
         "name": "ERROR_STACK_BUFFER_OVERRUN"
        ,"type": {"kind":"Int32"}
        ,"value": 1282
    }
    ,{
         "name": "ERROR_PARAMETER_QUOTA_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 1283
    }
    ,{
         "name": "ERROR_DEBUGGER_INACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 1284
    }
    ,{
         "name": "ERROR_DELAY_LOAD_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 1285
    }
    ,{
         "name": "ERROR_VDM_DISALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": 1286
    }
    ,{
         "name": "ERROR_UNIDENTIFIED_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 1287
    }
    ,{
         "name": "ERROR_INVALID_CRUNTIME_PARAMETER"
        ,"type": {"kind":"Int32"}
        ,"value": 1288
    }
    ,{
         "name": "ERROR_BEYOND_VDL"
        ,"type": {"kind":"Int32"}
        ,"value": 1289
    }
    ,{
         "name": "ERROR_INCOMPATIBLE_SERVICE_SID_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 1290
    }
    ,{
         "name": "ERROR_DRIVER_PROCESS_TERMINATED"
        ,"type": {"kind":"Int32"}
        ,"value": 1291
    }
    ,{
         "name": "ERROR_IMPLEMENTATION_LIMIT"
        ,"type": {"kind":"Int32"}
        ,"value": 1292
    }
    ,{
         "name": "ERROR_PROCESS_IS_PROTECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 1293
    }
    ,{
         "name": "ERROR_SERVICE_NOTIFY_CLIENT_LAGGING"
        ,"type": {"kind":"Int32"}
        ,"value": 1294
    }
    ,{
         "name": "ERROR_DISK_QUOTA_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 1295
    }
    ,{
         "name": "ERROR_CONTENT_BLOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": 1296
    }
    ,{
         "name": "ERROR_INCOMPATIBLE_SERVICE_PRIVILEGE"
        ,"type": {"kind":"Int32"}
        ,"value": 1297
    }
    ,{
         "name": "ERROR_APP_HANG"
        ,"type": {"kind":"Int32"}
        ,"value": 1298
    }
    ,{
         "name": "ERROR_INVALID_LABEL"
        ,"type": {"kind":"Int32"}
        ,"value": 1299
    }
    ,{
         "name": "ERROR_NOT_ALL_ASSIGNED"
        ,"type": {"kind":"Int32"}
        ,"value": 1300
    }
    ,{
         "name": "ERROR_SOME_NOT_MAPPED"
        ,"type": {"kind":"Int32"}
        ,"value": 1301
    }
    ,{
         "name": "ERROR_NO_QUOTAS_FOR_ACCOUNT"
        ,"type": {"kind":"Int32"}
        ,"value": 1302
    }
    ,{
         "name": "ERROR_LOCAL_USER_SESSION_KEY"
        ,"type": {"kind":"Int32"}
        ,"value": 1303
    }
    ,{
         "name": "ERROR_NULL_LM_PASSWORD"
        ,"type": {"kind":"Int32"}
        ,"value": 1304
    }
    ,{
         "name": "ERROR_UNKNOWN_REVISION"
        ,"type": {"kind":"Int32"}
        ,"value": 1305
    }
    ,{
         "name": "ERROR_REVISION_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 1306
    }
    ,{
         "name": "ERROR_INVALID_OWNER"
        ,"type": {"kind":"Int32"}
        ,"value": 1307
    }
    ,{
         "name": "ERROR_INVALID_PRIMARY_GROUP"
        ,"type": {"kind":"Int32"}
        ,"value": 1308
    }
    ,{
         "name": "ERROR_NO_IMPERSONATION_TOKEN"
        ,"type": {"kind":"Int32"}
        ,"value": 1309
    }
    ,{
         "name": "ERROR_CANT_DISABLE_MANDATORY"
        ,"type": {"kind":"Int32"}
        ,"value": 1310
    }
    ,{
         "name": "ERROR_NO_LOGON_SERVERS"
        ,"type": {"kind":"Int32"}
        ,"value": 1311
    }
    ,{
         "name": "ERROR_NO_SUCH_LOGON_SESSION"
        ,"type": {"kind":"Int32"}
        ,"value": 1312
    }
    ,{
         "name": "ERROR_NO_SUCH_PRIVILEGE"
        ,"type": {"kind":"Int32"}
        ,"value": 1313
    }
    ,{
         "name": "ERROR_PRIVILEGE_NOT_HELD"
        ,"type": {"kind":"Int32"}
        ,"value": 1314
    }
    ,{
         "name": "ERROR_INVALID_ACCOUNT_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 1315
    }
    ,{
         "name": "ERROR_USER_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 1316
    }
    ,{
         "name": "ERROR_NO_SUCH_USER"
        ,"type": {"kind":"Int32"}
        ,"value": 1317
    }
    ,{
         "name": "ERROR_GROUP_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 1318
    }
    ,{
         "name": "ERROR_NO_SUCH_GROUP"
        ,"type": {"kind":"Int32"}
        ,"value": 1319
    }
    ,{
         "name": "ERROR_MEMBER_IN_GROUP"
        ,"type": {"kind":"Int32"}
        ,"value": 1320
    }
    ,{
         "name": "ERROR_MEMBER_NOT_IN_GROUP"
        ,"type": {"kind":"Int32"}
        ,"value": 1321
    }
    ,{
         "name": "ERROR_LAST_ADMIN"
        ,"type": {"kind":"Int32"}
        ,"value": 1322
    }
    ,{
         "name": "ERROR_WRONG_PASSWORD"
        ,"type": {"kind":"Int32"}
        ,"value": 1323
    }
    ,{
         "name": "ERROR_ILL_FORMED_PASSWORD"
        ,"type": {"kind":"Int32"}
        ,"value": 1324
    }
    ,{
         "name": "ERROR_PASSWORD_RESTRICTION"
        ,"type": {"kind":"Int32"}
        ,"value": 1325
    }
    ,{
         "name": "ERROR_LOGON_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 1326
    }
    ,{
         "name": "ERROR_ACCOUNT_RESTRICTION"
        ,"type": {"kind":"Int32"}
        ,"value": 1327
    }
    ,{
         "name": "ERROR_INVALID_LOGON_HOURS"
        ,"type": {"kind":"Int32"}
        ,"value": 1328
    }
    ,{
         "name": "ERROR_INVALID_WORKSTATION"
        ,"type": {"kind":"Int32"}
        ,"value": 1329
    }
    ,{
         "name": "ERROR_PASSWORD_EXPIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 1330
    }
    ,{
         "name": "ERROR_ACCOUNT_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 1331
    }
    ,{
         "name": "ERROR_NONE_MAPPED"
        ,"type": {"kind":"Int32"}
        ,"value": 1332
    }
    ,{
         "name": "ERROR_TOO_MANY_LUIDS_REQUESTED"
        ,"type": {"kind":"Int32"}
        ,"value": 1333
    }
    ,{
         "name": "ERROR_LUIDS_EXHAUSTED"
        ,"type": {"kind":"Int32"}
        ,"value": 1334
    }
    ,{
         "name": "ERROR_INVALID_SUB_AUTHORITY"
        ,"type": {"kind":"Int32"}
        ,"value": 1335
    }
    ,{
         "name": "ERROR_INVALID_ACL"
        ,"type": {"kind":"Int32"}
        ,"value": 1336
    }
    ,{
         "name": "ERROR_INVALID_SID"
        ,"type": {"kind":"Int32"}
        ,"value": 1337
    }
    ,{
         "name": "ERROR_INVALID_SECURITY_DESCR"
        ,"type": {"kind":"Int32"}
        ,"value": 1338
    }
    ,{
         "name": "ERROR_BAD_INHERITANCE_ACL"
        ,"type": {"kind":"Int32"}
        ,"value": 1340
    }
    ,{
         "name": "ERROR_SERVER_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 1341
    }
    ,{
         "name": "ERROR_SERVER_NOT_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 1342
    }
    ,{
         "name": "ERROR_INVALID_ID_AUTHORITY"
        ,"type": {"kind":"Int32"}
        ,"value": 1343
    }
    ,{
         "name": "ERROR_ALLOTTED_SPACE_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 1344
    }
    ,{
         "name": "ERROR_INVALID_GROUP_ATTRIBUTES"
        ,"type": {"kind":"Int32"}
        ,"value": 1345
    }
    ,{
         "name": "ERROR_BAD_IMPERSONATION_LEVEL"
        ,"type": {"kind":"Int32"}
        ,"value": 1346
    }
    ,{
         "name": "ERROR_CANT_OPEN_ANONYMOUS"
        ,"type": {"kind":"Int32"}
        ,"value": 1347
    }
    ,{
         "name": "ERROR_BAD_VALIDATION_CLASS"
        ,"type": {"kind":"Int32"}
        ,"value": 1348
    }
    ,{
         "name": "ERROR_BAD_TOKEN_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 1349
    }
    ,{
         "name": "ERROR_NO_SECURITY_ON_OBJECT"
        ,"type": {"kind":"Int32"}
        ,"value": 1350
    }
    ,{
         "name": "ERROR_CANT_ACCESS_DOMAIN_INFO"
        ,"type": {"kind":"Int32"}
        ,"value": 1351
    }
    ,{
         "name": "ERROR_INVALID_SERVER_STATE"
        ,"type": {"kind":"Int32"}
        ,"value": 1352
    }
    ,{
         "name": "ERROR_INVALID_DOMAIN_STATE"
        ,"type": {"kind":"Int32"}
        ,"value": 1353
    }
    ,{
         "name": "ERROR_INVALID_DOMAIN_ROLE"
        ,"type": {"kind":"Int32"}
        ,"value": 1354
    }
    ,{
         "name": "ERROR_NO_SUCH_DOMAIN"
        ,"type": {"kind":"Int32"}
        ,"value": 1355
    }
    ,{
         "name": "ERROR_DOMAIN_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 1356
    }
    ,{
         "name": "ERROR_DOMAIN_LIMIT_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 1357
    }
    ,{
         "name": "ERROR_INTERNAL_DB_CORRUPTION"
        ,"type": {"kind":"Int32"}
        ,"value": 1358
    }
    ,{
         "name": "ERROR_INTERNAL_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 1359
    }
    ,{
         "name": "ERROR_GENERIC_NOT_MAPPED"
        ,"type": {"kind":"Int32"}
        ,"value": 1360
    }
    ,{
         "name": "ERROR_BAD_DESCRIPTOR_FORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": 1361
    }
    ,{
         "name": "ERROR_NOT_LOGON_PROCESS"
        ,"type": {"kind":"Int32"}
        ,"value": 1362
    }
    ,{
         "name": "ERROR_LOGON_SESSION_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 1363
    }
    ,{
         "name": "ERROR_NO_SUCH_PACKAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 1364
    }
    ,{
         "name": "ERROR_BAD_LOGON_SESSION_STATE"
        ,"type": {"kind":"Int32"}
        ,"value": 1365
    }
    ,{
         "name": "ERROR_LOGON_SESSION_COLLISION"
        ,"type": {"kind":"Int32"}
        ,"value": 1366
    }
    ,{
         "name": "ERROR_INVALID_LOGON_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 1367
    }
    ,{
         "name": "ERROR_CANNOT_IMPERSONATE"
        ,"type": {"kind":"Int32"}
        ,"value": 1368
    }
    ,{
         "name": "ERROR_RXACT_INVALID_STATE"
        ,"type": {"kind":"Int32"}
        ,"value": 1369
    }
    ,{
         "name": "ERROR_RXACT_COMMIT_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 1370
    }
    ,{
         "name": "ERROR_SPECIAL_ACCOUNT"
        ,"type": {"kind":"Int32"}
        ,"value": 1371
    }
    ,{
         "name": "ERROR_SPECIAL_GROUP"
        ,"type": {"kind":"Int32"}
        ,"value": 1372
    }
    ,{
         "name": "ERROR_SPECIAL_USER"
        ,"type": {"kind":"Int32"}
        ,"value": 1373
    }
    ,{
         "name": "ERROR_MEMBERS_PRIMARY_GROUP"
        ,"type": {"kind":"Int32"}
        ,"value": 1374
    }
    ,{
         "name": "ERROR_TOKEN_ALREADY_IN_USE"
        ,"type": {"kind":"Int32"}
        ,"value": 1375
    }
    ,{
         "name": "ERROR_NO_SUCH_ALIAS"
        ,"type": {"kind":"Int32"}
        ,"value": 1376
    }
    ,{
         "name": "ERROR_MEMBER_NOT_IN_ALIAS"
        ,"type": {"kind":"Int32"}
        ,"value": 1377
    }
    ,{
         "name": "ERROR_MEMBER_IN_ALIAS"
        ,"type": {"kind":"Int32"}
        ,"value": 1378
    }
    ,{
         "name": "ERROR_ALIAS_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 1379
    }
    ,{
         "name": "ERROR_LOGON_NOT_GRANTED"
        ,"type": {"kind":"Int32"}
        ,"value": 1380
    }
    ,{
         "name": "ERROR_TOO_MANY_SECRETS"
        ,"type": {"kind":"Int32"}
        ,"value": 1381
    }
    ,{
         "name": "ERROR_SECRET_TOO_LONG"
        ,"type": {"kind":"Int32"}
        ,"value": 1382
    }
    ,{
         "name": "ERROR_INTERNAL_DB_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 1383
    }
    ,{
         "name": "ERROR_TOO_MANY_CONTEXT_IDS"
        ,"type": {"kind":"Int32"}
        ,"value": 1384
    }
    ,{
         "name": "ERROR_LOGON_TYPE_NOT_GRANTED"
        ,"type": {"kind":"Int32"}
        ,"value": 1385
    }
    ,{
         "name": "ERROR_NT_CROSS_ENCRYPTION_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 1386
    }
    ,{
         "name": "ERROR_NO_SUCH_MEMBER"
        ,"type": {"kind":"Int32"}
        ,"value": 1387
    }
    ,{
         "name": "ERROR_INVALID_MEMBER"
        ,"type": {"kind":"Int32"}
        ,"value": 1388
    }
    ,{
         "name": "ERROR_TOO_MANY_SIDS"
        ,"type": {"kind":"Int32"}
        ,"value": 1389
    }
    ,{
         "name": "ERROR_LM_CROSS_ENCRYPTION_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 1390
    }
    ,{
         "name": "ERROR_NO_INHERITANCE"
        ,"type": {"kind":"Int32"}
        ,"value": 1391
    }
    ,{
         "name": "ERROR_FILE_CORRUPT"
        ,"type": {"kind":"Int32"}
        ,"value": 1392
    }
    ,{
         "name": "ERROR_DISK_CORRUPT"
        ,"type": {"kind":"Int32"}
        ,"value": 1393
    }
    ,{
         "name": "ERROR_NO_USER_SESSION_KEY"
        ,"type": {"kind":"Int32"}
        ,"value": 1394
    }
    ,{
         "name": "ERROR_LICENSE_QUOTA_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 1395
    }
    ,{
         "name": "ERROR_WRONG_TARGET_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 1396
    }
    ,{
         "name": "ERROR_MUTUAL_AUTH_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 1397
    }
    ,{
         "name": "ERROR_TIME_SKEW"
        ,"type": {"kind":"Int32"}
        ,"value": 1398
    }
    ,{
         "name": "ERROR_CURRENT_DOMAIN_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": 1399
    }
    ,{
         "name": "ERROR_INVALID_WINDOW_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": 1400
    }
    ,{
         "name": "ERROR_INVALID_MENU_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": 1401
    }
    ,{
         "name": "ERROR_INVALID_CURSOR_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": 1402
    }
    ,{
         "name": "ERROR_INVALID_ACCEL_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": 1403
    }
    ,{
         "name": "ERROR_INVALID_HOOK_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": 1404
    }
    ,{
         "name": "ERROR_INVALID_DWP_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": 1405
    }
    ,{
         "name": "ERROR_TLW_WITH_WSCHILD"
        ,"type": {"kind":"Int32"}
        ,"value": 1406
    }
    ,{
         "name": "ERROR_CANNOT_FIND_WND_CLASS"
        ,"type": {"kind":"Int32"}
        ,"value": 1407
    }
    ,{
         "name": "ERROR_WINDOW_OF_OTHER_THREAD"
        ,"type": {"kind":"Int32"}
        ,"value": 1408
    }
    ,{
         "name": "ERROR_HOTKEY_ALREADY_REGISTERED"
        ,"type": {"kind":"Int32"}
        ,"value": 1409
    }
    ,{
         "name": "ERROR_CLASS_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 1410
    }
    ,{
         "name": "ERROR_CLASS_DOES_NOT_EXIST"
        ,"type": {"kind":"Int32"}
        ,"value": 1411
    }
    ,{
         "name": "ERROR_CLASS_HAS_WINDOWS"
        ,"type": {"kind":"Int32"}
        ,"value": 1412
    }
    ,{
         "name": "ERROR_INVALID_INDEX"
        ,"type": {"kind":"Int32"}
        ,"value": 1413
    }
    ,{
         "name": "ERROR_INVALID_ICON_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": 1414
    }
    ,{
         "name": "ERROR_PRIVATE_DIALOG_INDEX"
        ,"type": {"kind":"Int32"}
        ,"value": 1415
    }
    ,{
         "name": "ERROR_LISTBOX_ID_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 1416
    }
    ,{
         "name": "ERROR_NO_WILDCARD_CHARACTERS"
        ,"type": {"kind":"Int32"}
        ,"value": 1417
    }
    ,{
         "name": "ERROR_CLIPBOARD_NOT_OPEN"
        ,"type": {"kind":"Int32"}
        ,"value": 1418
    }
    ,{
         "name": "ERROR_HOTKEY_NOT_REGISTERED"
        ,"type": {"kind":"Int32"}
        ,"value": 1419
    }
    ,{
         "name": "ERROR_WINDOW_NOT_DIALOG"
        ,"type": {"kind":"Int32"}
        ,"value": 1420
    }
    ,{
         "name": "ERROR_CONTROL_ID_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 1421
    }
    ,{
         "name": "ERROR_INVALID_COMBOBOX_MESSAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 1422
    }
    ,{
         "name": "ERROR_WINDOW_NOT_COMBOBOX"
        ,"type": {"kind":"Int32"}
        ,"value": 1423
    }
    ,{
         "name": "ERROR_INVALID_EDIT_HEIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 1424
    }
    ,{
         "name": "ERROR_DC_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 1425
    }
    ,{
         "name": "ERROR_INVALID_HOOK_FILTER"
        ,"type": {"kind":"Int32"}
        ,"value": 1426
    }
    ,{
         "name": "ERROR_INVALID_FILTER_PROC"
        ,"type": {"kind":"Int32"}
        ,"value": 1427
    }
    ,{
         "name": "ERROR_HOOK_NEEDS_HMOD"
        ,"type": {"kind":"Int32"}
        ,"value": 1428
    }
    ,{
         "name": "ERROR_GLOBAL_ONLY_HOOK"
        ,"type": {"kind":"Int32"}
        ,"value": 1429
    }
    ,{
         "name": "ERROR_JOURNAL_HOOK_SET"
        ,"type": {"kind":"Int32"}
        ,"value": 1430
    }
    ,{
         "name": "ERROR_HOOK_NOT_INSTALLED"
        ,"type": {"kind":"Int32"}
        ,"value": 1431
    }
    ,{
         "name": "ERROR_INVALID_LB_MESSAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 1432
    }
    ,{
         "name": "ERROR_SETCOUNT_ON_BAD_LB"
        ,"type": {"kind":"Int32"}
        ,"value": 1433
    }
    ,{
         "name": "ERROR_LB_WITHOUT_TABSTOPS"
        ,"type": {"kind":"Int32"}
        ,"value": 1434
    }
    ,{
         "name": "ERROR_DESTROY_OBJECT_OF_OTHER_THREAD"
        ,"type": {"kind":"Int32"}
        ,"value": 1435
    }
    ,{
         "name": "ERROR_CHILD_WINDOW_MENU"
        ,"type": {"kind":"Int32"}
        ,"value": 1436
    }
    ,{
         "name": "ERROR_NO_SYSTEM_MENU"
        ,"type": {"kind":"Int32"}
        ,"value": 1437
    }
    ,{
         "name": "ERROR_INVALID_MSGBOX_STYLE"
        ,"type": {"kind":"Int32"}
        ,"value": 1438
    }
    ,{
         "name": "ERROR_INVALID_SPI_VALUE"
        ,"type": {"kind":"Int32"}
        ,"value": 1439
    }
    ,{
         "name": "ERROR_SCREEN_ALREADY_LOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": 1440
    }
    ,{
         "name": "ERROR_HWNDS_HAVE_DIFF_PARENT"
        ,"type": {"kind":"Int32"}
        ,"value": 1441
    }
    ,{
         "name": "ERROR_NOT_CHILD_WINDOW"
        ,"type": {"kind":"Int32"}
        ,"value": 1442
    }
    ,{
         "name": "ERROR_INVALID_GW_COMMAND"
        ,"type": {"kind":"Int32"}
        ,"value": 1443
    }
    ,{
         "name": "ERROR_INVALID_THREAD_ID"
        ,"type": {"kind":"Int32"}
        ,"value": 1444
    }
    ,{
         "name": "ERROR_NON_MDICHILD_WINDOW"
        ,"type": {"kind":"Int32"}
        ,"value": 1445
    }
    ,{
         "name": "ERROR_POPUP_ALREADY_ACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 1446
    }
    ,{
         "name": "ERROR_NO_SCROLLBARS"
        ,"type": {"kind":"Int32"}
        ,"value": 1447
    }
    ,{
         "name": "ERROR_INVALID_SCROLLBAR_RANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 1448
    }
    ,{
         "name": "ERROR_INVALID_SHOWWIN_COMMAND"
        ,"type": {"kind":"Int32"}
        ,"value": 1449
    }
    ,{
         "name": "ERROR_NO_SYSTEM_RESOURCES"
        ,"type": {"kind":"Int32"}
        ,"value": 1450
    }
    ,{
         "name": "ERROR_NONPAGED_SYSTEM_RESOURCES"
        ,"type": {"kind":"Int32"}
        ,"value": 1451
    }
    ,{
         "name": "ERROR_PAGED_SYSTEM_RESOURCES"
        ,"type": {"kind":"Int32"}
        ,"value": 1452
    }
    ,{
         "name": "ERROR_WORKING_SET_QUOTA"
        ,"type": {"kind":"Int32"}
        ,"value": 1453
    }
    ,{
         "name": "ERROR_PAGEFILE_QUOTA"
        ,"type": {"kind":"Int32"}
        ,"value": 1454
    }
    ,{
         "name": "ERROR_COMMITMENT_LIMIT"
        ,"type": {"kind":"Int32"}
        ,"value": 1455
    }
    ,{
         "name": "ERROR_MENU_ITEM_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 1456
    }
    ,{
         "name": "ERROR_INVALID_KEYBOARD_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": 1457
    }
    ,{
         "name": "ERROR_HOOK_TYPE_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": 1458
    }
    ,{
         "name": "ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION"
        ,"type": {"kind":"Int32"}
        ,"value": 1459
    }
    ,{
         "name": "ERROR_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 1460
    }
    ,{
         "name": "ERROR_INVALID_MONITOR_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": 1461
    }
    ,{
         "name": "ERROR_INCORRECT_SIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 1462
    }
    ,{
         "name": "ERROR_SYMLINK_CLASS_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 1463
    }
    ,{
         "name": "ERROR_SYMLINK_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 1464
    }
    ,{
         "name": "ERROR_XML_PARSE_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 1465
    }
    ,{
         "name": "ERROR_XMLDSIG_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 1466
    }
    ,{
         "name": "ERROR_RESTART_APPLICATION"
        ,"type": {"kind":"Int32"}
        ,"value": 1467
    }
    ,{
         "name": "ERROR_WRONG_COMPARTMENT"
        ,"type": {"kind":"Int32"}
        ,"value": 1468
    }
    ,{
         "name": "ERROR_AUTHIP_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 1469
    }
    ,{
         "name": "ERROR_NO_NVRAM_RESOURCES"
        ,"type": {"kind":"Int32"}
        ,"value": 1470
    }
    ,{
         "name": "ERROR_NOT_GUI_PROCESS"
        ,"type": {"kind":"Int32"}
        ,"value": 1471
    }
    ,{
         "name": "ERROR_EVENTLOG_FILE_CORRUPT"
        ,"type": {"kind":"Int32"}
        ,"value": 1500
    }
    ,{
         "name": "ERROR_EVENTLOG_CANT_START"
        ,"type": {"kind":"Int32"}
        ,"value": 1501
    }
    ,{
         "name": "ERROR_LOG_FILE_FULL"
        ,"type": {"kind":"Int32"}
        ,"value": 1502
    }
    ,{
         "name": "ERROR_EVENTLOG_FILE_CHANGED"
        ,"type": {"kind":"Int32"}
        ,"value": 1503
    }
    ,{
         "name": "ERROR_CONTAINER_ASSIGNED"
        ,"type": {"kind":"Int32"}
        ,"value": 1504
    }
    ,{
         "name": "ERROR_JOB_NO_CONTAINER"
        ,"type": {"kind":"Int32"}
        ,"value": 1505
    }
    ,{
         "name": "ERROR_INVALID_TASK_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 1550
    }
    ,{
         "name": "ERROR_INVALID_TASK_INDEX"
        ,"type": {"kind":"Int32"}
        ,"value": 1551
    }
    ,{
         "name": "ERROR_THREAD_ALREADY_IN_TASK"
        ,"type": {"kind":"Int32"}
        ,"value": 1552
    }
    ,{
         "name": "ERROR_INSTALL_SERVICE_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 1601
    }
    ,{
         "name": "ERROR_INSTALL_USEREXIT"
        ,"type": {"kind":"Int32"}
        ,"value": 1602
    }
    ,{
         "name": "ERROR_INSTALL_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 1603
    }
    ,{
         "name": "ERROR_INSTALL_SUSPEND"
        ,"type": {"kind":"Int32"}
        ,"value": 1604
    }
    ,{
         "name": "ERROR_UNKNOWN_PRODUCT"
        ,"type": {"kind":"Int32"}
        ,"value": 1605
    }
    ,{
         "name": "ERROR_UNKNOWN_FEATURE"
        ,"type": {"kind":"Int32"}
        ,"value": 1606
    }
    ,{
         "name": "ERROR_UNKNOWN_COMPONENT"
        ,"type": {"kind":"Int32"}
        ,"value": 1607
    }
    ,{
         "name": "ERROR_UNKNOWN_PROPERTY"
        ,"type": {"kind":"Int32"}
        ,"value": 1608
    }
    ,{
         "name": "ERROR_INVALID_HANDLE_STATE"
        ,"type": {"kind":"Int32"}
        ,"value": 1609
    }
    ,{
         "name": "ERROR_BAD_CONFIGURATION"
        ,"type": {"kind":"Int32"}
        ,"value": 1610
    }
    ,{
         "name": "ERROR_INDEX_ABSENT"
        ,"type": {"kind":"Int32"}
        ,"value": 1611
    }
    ,{
         "name": "ERROR_INSTALL_SOURCE_ABSENT"
        ,"type": {"kind":"Int32"}
        ,"value": 1612
    }
    ,{
         "name": "ERROR_INSTALL_PACKAGE_VERSION"
        ,"type": {"kind":"Int32"}
        ,"value": 1613
    }
    ,{
         "name": "ERROR_PRODUCT_UNINSTALLED"
        ,"type": {"kind":"Int32"}
        ,"value": 1614
    }
    ,{
         "name": "ERROR_BAD_QUERY_SYNTAX"
        ,"type": {"kind":"Int32"}
        ,"value": 1615
    }
    ,{
         "name": "ERROR_INVALID_FIELD"
        ,"type": {"kind":"Int32"}
        ,"value": 1616
    }
    ,{
         "name": "ERROR_DEVICE_REMOVED"
        ,"type": {"kind":"Int32"}
        ,"value": 1617
    }
    ,{
         "name": "ERROR_INSTALL_ALREADY_RUNNING"
        ,"type": {"kind":"Int32"}
        ,"value": 1618
    }
    ,{
         "name": "ERROR_INSTALL_PACKAGE_OPEN_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 1619
    }
    ,{
         "name": "ERROR_INSTALL_PACKAGE_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": 1620
    }
    ,{
         "name": "ERROR_INSTALL_UI_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 1621
    }
    ,{
         "name": "ERROR_INSTALL_LOG_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 1622
    }
    ,{
         "name": "ERROR_INSTALL_LANGUAGE_UNSUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 1623
    }
    ,{
         "name": "ERROR_INSTALL_TRANSFORM_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 1624
    }
    ,{
         "name": "ERROR_INSTALL_PACKAGE_REJECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 1625
    }
    ,{
         "name": "ERROR_FUNCTION_NOT_CALLED"
        ,"type": {"kind":"Int32"}
        ,"value": 1626
    }
    ,{
         "name": "ERROR_FUNCTION_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 1627
    }
    ,{
         "name": "ERROR_INVALID_TABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 1628
    }
    ,{
         "name": "ERROR_DATATYPE_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 1629
    }
    ,{
         "name": "ERROR_UNSUPPORTED_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 1630
    }
    ,{
         "name": "ERROR_CREATE_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 1631
    }
    ,{
         "name": "ERROR_INSTALL_TEMP_UNWRITABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 1632
    }
    ,{
         "name": "ERROR_INSTALL_PLATFORM_UNSUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 1633
    }
    ,{
         "name": "ERROR_INSTALL_NOTUSED"
        ,"type": {"kind":"Int32"}
        ,"value": 1634
    }
    ,{
         "name": "ERROR_PATCH_PACKAGE_OPEN_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 1635
    }
    ,{
         "name": "ERROR_PATCH_PACKAGE_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": 1636
    }
    ,{
         "name": "ERROR_PATCH_PACKAGE_UNSUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 1637
    }
    ,{
         "name": "ERROR_PRODUCT_VERSION"
        ,"type": {"kind":"Int32"}
        ,"value": 1638
    }
    ,{
         "name": "ERROR_INVALID_COMMAND_LINE"
        ,"type": {"kind":"Int32"}
        ,"value": 1639
    }
    ,{
         "name": "ERROR_INSTALL_REMOTE_DISALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": 1640
    }
    ,{
         "name": "ERROR_SUCCESS_REBOOT_INITIATED"
        ,"type": {"kind":"Int32"}
        ,"value": 1641
    }
    ,{
         "name": "ERROR_PATCH_TARGET_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 1642
    }
    ,{
         "name": "ERROR_PATCH_PACKAGE_REJECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 1643
    }
    ,{
         "name": "ERROR_INSTALL_TRANSFORM_REJECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 1644
    }
    ,{
         "name": "ERROR_INSTALL_REMOTE_PROHIBITED"
        ,"type": {"kind":"Int32"}
        ,"value": 1645
    }
    ,{
         "name": "ERROR_PATCH_REMOVAL_UNSUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 1646
    }
    ,{
         "name": "ERROR_UNKNOWN_PATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 1647
    }
    ,{
         "name": "ERROR_PATCH_NO_SEQUENCE"
        ,"type": {"kind":"Int32"}
        ,"value": 1648
    }
    ,{
         "name": "ERROR_PATCH_REMOVAL_DISALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": 1649
    }
    ,{
         "name": "ERROR_INVALID_PATCH_XML"
        ,"type": {"kind":"Int32"}
        ,"value": 1650
    }
    ,{
         "name": "ERROR_PATCH_MANAGED_ADVERTISED_PRODUCT"
        ,"type": {"kind":"Int32"}
        ,"value": 1651
    }
    ,{
         "name": "ERROR_INSTALL_SERVICE_SAFEBOOT"
        ,"type": {"kind":"Int32"}
        ,"value": 1652
    }
    ,{
         "name": "ERROR_FAIL_FAST_EXCEPTION"
        ,"type": {"kind":"Int32"}
        ,"value": 1653
    }
    ,{
         "name": "ERROR_INSTALL_REJECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 1654
    }
    ,{
         "name": "ERROR_DYNAMIC_CODE_BLOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": 1655
    }
    ,{
         "name": "ERROR_NOT_SAME_OBJECT"
        ,"type": {"kind":"Int32"}
        ,"value": 1656
    }
    ,{
         "name": "ERROR_STRICT_CFG_VIOLATION"
        ,"type": {"kind":"Int32"}
        ,"value": 1657
    }
    ,{
         "name": "ERROR_SET_CONTEXT_DENIED"
        ,"type": {"kind":"Int32"}
        ,"value": 1660
    }
    ,{
         "name": "ERROR_CROSS_PARTITION_VIOLATION"
        ,"type": {"kind":"Int32"}
        ,"value": 1661
    }
    ,{
         "name": "ERROR_RETURN_ADDRESS_HIJACK_ATTEMPT"
        ,"type": {"kind":"Int32"}
        ,"value": 1662
    }
    ,{
         "name": "RPC_S_INVALID_STRING_BINDING"
        ,"type": {"kind":"Int32"}
        ,"value": 1700
    }
    ,{
         "name": "RPC_S_WRONG_KIND_OF_BINDING"
        ,"type": {"kind":"Int32"}
        ,"value": 1701
    }
    ,{
         "name": "RPC_S_INVALID_BINDING"
        ,"type": {"kind":"Int32"}
        ,"value": 1702
    }
    ,{
         "name": "RPC_S_PROTSEQ_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 1703
    }
    ,{
         "name": "RPC_S_INVALID_RPC_PROTSEQ"
        ,"type": {"kind":"Int32"}
        ,"value": 1704
    }
    ,{
         "name": "RPC_S_INVALID_STRING_UUID"
        ,"type": {"kind":"Int32"}
        ,"value": 1705
    }
    ,{
         "name": "RPC_S_INVALID_ENDPOINT_FORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": 1706
    }
    ,{
         "name": "RPC_S_INVALID_NET_ADDR"
        ,"type": {"kind":"Int32"}
        ,"value": 1707
    }
    ,{
         "name": "RPC_S_NO_ENDPOINT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 1708
    }
    ,{
         "name": "RPC_S_INVALID_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 1709
    }
    ,{
         "name": "RPC_S_OBJECT_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 1710
    }
    ,{
         "name": "RPC_S_ALREADY_REGISTERED"
        ,"type": {"kind":"Int32"}
        ,"value": 1711
    }
    ,{
         "name": "RPC_S_TYPE_ALREADY_REGISTERED"
        ,"type": {"kind":"Int32"}
        ,"value": 1712
    }
    ,{
         "name": "RPC_S_ALREADY_LISTENING"
        ,"type": {"kind":"Int32"}
        ,"value": 1713
    }
    ,{
         "name": "RPC_S_NO_PROTSEQS_REGISTERED"
        ,"type": {"kind":"Int32"}
        ,"value": 1714
    }
    ,{
         "name": "RPC_S_NOT_LISTENING"
        ,"type": {"kind":"Int32"}
        ,"value": 1715
    }
    ,{
         "name": "RPC_S_UNKNOWN_MGR_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 1716
    }
    ,{
         "name": "RPC_S_UNKNOWN_IF"
        ,"type": {"kind":"Int32"}
        ,"value": 1717
    }
    ,{
         "name": "RPC_S_NO_BINDINGS"
        ,"type": {"kind":"Int32"}
        ,"value": 1718
    }
    ,{
         "name": "RPC_S_NO_PROTSEQS"
        ,"type": {"kind":"Int32"}
        ,"value": 1719
    }
    ,{
         "name": "RPC_S_CANT_CREATE_ENDPOINT"
        ,"type": {"kind":"Int32"}
        ,"value": 1720
    }
    ,{
         "name": "RPC_S_OUT_OF_RESOURCES"
        ,"type": {"kind":"Int32"}
        ,"value": 1721
    }
    ,{
         "name": "RPC_S_SERVER_UNAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 1722
    }
    ,{
         "name": "RPC_S_SERVER_TOO_BUSY"
        ,"type": {"kind":"Int32"}
        ,"value": 1723
    }
    ,{
         "name": "RPC_S_INVALID_NETWORK_OPTIONS"
        ,"type": {"kind":"Int32"}
        ,"value": 1724
    }
    ,{
         "name": "RPC_S_NO_CALL_ACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 1725
    }
    ,{
         "name": "RPC_S_CALL_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 1726
    }
    ,{
         "name": "RPC_S_CALL_FAILED_DNE"
        ,"type": {"kind":"Int32"}
        ,"value": 1727
    }
    ,{
         "name": "RPC_S_PROTOCOL_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 1728
    }
    ,{
         "name": "RPC_S_PROXY_ACCESS_DENIED"
        ,"type": {"kind":"Int32"}
        ,"value": 1729
    }
    ,{
         "name": "RPC_S_UNSUPPORTED_TRANS_SYN"
        ,"type": {"kind":"Int32"}
        ,"value": 1730
    }
    ,{
         "name": "RPC_S_UNSUPPORTED_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 1732
    }
    ,{
         "name": "RPC_S_INVALID_TAG"
        ,"type": {"kind":"Int32"}
        ,"value": 1733
    }
    ,{
         "name": "RPC_S_INVALID_BOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 1734
    }
    ,{
         "name": "RPC_S_NO_ENTRY_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 1735
    }
    ,{
         "name": "RPC_S_INVALID_NAME_SYNTAX"
        ,"type": {"kind":"Int32"}
        ,"value": 1736
    }
    ,{
         "name": "RPC_S_UNSUPPORTED_NAME_SYNTAX"
        ,"type": {"kind":"Int32"}
        ,"value": 1737
    }
    ,{
         "name": "RPC_S_UUID_NO_ADDRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 1739
    }
    ,{
         "name": "RPC_S_DUPLICATE_ENDPOINT"
        ,"type": {"kind":"Int32"}
        ,"value": 1740
    }
    ,{
         "name": "RPC_S_UNKNOWN_AUTHN_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 1741
    }
    ,{
         "name": "RPC_S_MAX_CALLS_TOO_SMALL"
        ,"type": {"kind":"Int32"}
        ,"value": 1742
    }
    ,{
         "name": "RPC_S_STRING_TOO_LONG"
        ,"type": {"kind":"Int32"}
        ,"value": 1743
    }
    ,{
         "name": "RPC_S_PROTSEQ_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 1744
    }
    ,{
         "name": "RPC_S_PROCNUM_OUT_OF_RANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 1745
    }
    ,{
         "name": "RPC_S_BINDING_HAS_NO_AUTH"
        ,"type": {"kind":"Int32"}
        ,"value": 1746
    }
    ,{
         "name": "RPC_S_UNKNOWN_AUTHN_SERVICE"
        ,"type": {"kind":"Int32"}
        ,"value": 1747
    }
    ,{
         "name": "RPC_S_UNKNOWN_AUTHN_LEVEL"
        ,"type": {"kind":"Int32"}
        ,"value": 1748
    }
    ,{
         "name": "RPC_S_INVALID_AUTH_IDENTITY"
        ,"type": {"kind":"Int32"}
        ,"value": 1749
    }
    ,{
         "name": "RPC_S_UNKNOWN_AUTHZ_SERVICE"
        ,"type": {"kind":"Int32"}
        ,"value": 1750
    }
    ,{
         "name": "EPT_S_INVALID_ENTRY"
        ,"type": {"kind":"Int32"}
        ,"value": 1751
    }
    ,{
         "name": "EPT_S_CANT_PERFORM_OP"
        ,"type": {"kind":"Int32"}
        ,"value": 1752
    }
    ,{
         "name": "EPT_S_NOT_REGISTERED"
        ,"type": {"kind":"Int32"}
        ,"value": 1753
    }
    ,{
         "name": "RPC_S_NOTHING_TO_EXPORT"
        ,"type": {"kind":"Int32"}
        ,"value": 1754
    }
    ,{
         "name": "RPC_S_INCOMPLETE_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 1755
    }
    ,{
         "name": "RPC_S_INVALID_VERS_OPTION"
        ,"type": {"kind":"Int32"}
        ,"value": 1756
    }
    ,{
         "name": "RPC_S_NO_MORE_MEMBERS"
        ,"type": {"kind":"Int32"}
        ,"value": 1757
    }
    ,{
         "name": "RPC_S_NOT_ALL_OBJS_UNEXPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 1758
    }
    ,{
         "name": "RPC_S_INTERFACE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 1759
    }
    ,{
         "name": "RPC_S_ENTRY_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 1760
    }
    ,{
         "name": "RPC_S_ENTRY_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 1761
    }
    ,{
         "name": "RPC_S_NAME_SERVICE_UNAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 1762
    }
    ,{
         "name": "RPC_S_INVALID_NAF_ID"
        ,"type": {"kind":"Int32"}
        ,"value": 1763
    }
    ,{
         "name": "RPC_S_CANNOT_SUPPORT"
        ,"type": {"kind":"Int32"}
        ,"value": 1764
    }
    ,{
         "name": "RPC_S_NO_CONTEXT_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 1765
    }
    ,{
         "name": "RPC_S_INTERNAL_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 1766
    }
    ,{
         "name": "RPC_S_ZERO_DIVIDE"
        ,"type": {"kind":"Int32"}
        ,"value": 1767
    }
    ,{
         "name": "RPC_S_ADDRESS_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 1768
    }
    ,{
         "name": "RPC_S_FP_DIV_ZERO"
        ,"type": {"kind":"Int32"}
        ,"value": 1769
    }
    ,{
         "name": "RPC_S_FP_UNDERFLOW"
        ,"type": {"kind":"Int32"}
        ,"value": 1770
    }
    ,{
         "name": "RPC_S_FP_OVERFLOW"
        ,"type": {"kind":"Int32"}
        ,"value": 1771
    }
    ,{
         "name": "RPC_X_NO_MORE_ENTRIES"
        ,"type": {"kind":"Int32"}
        ,"value": 1772
    }
    ,{
         "name": "RPC_X_SS_CHAR_TRANS_OPEN_FAIL"
        ,"type": {"kind":"Int32"}
        ,"value": 1773
    }
    ,{
         "name": "RPC_X_SS_CHAR_TRANS_SHORT_FILE"
        ,"type": {"kind":"Int32"}
        ,"value": 1774
    }
    ,{
         "name": "RPC_X_SS_IN_NULL_CONTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 1775
    }
    ,{
         "name": "RPC_X_SS_CONTEXT_DAMAGED"
        ,"type": {"kind":"Int32"}
        ,"value": 1777
    }
    ,{
         "name": "RPC_X_SS_HANDLES_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 1778
    }
    ,{
         "name": "RPC_X_SS_CANNOT_GET_CALL_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": 1779
    }
    ,{
         "name": "RPC_X_NULL_REF_POINTER"
        ,"type": {"kind":"Int32"}
        ,"value": 1780
    }
    ,{
         "name": "RPC_X_ENUM_VALUE_OUT_OF_RANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 1781
    }
    ,{
         "name": "RPC_X_BYTE_COUNT_TOO_SMALL"
        ,"type": {"kind":"Int32"}
        ,"value": 1782
    }
    ,{
         "name": "RPC_X_BAD_STUB_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": 1783
    }
    ,{
         "name": "ERROR_INVALID_USER_BUFFER"
        ,"type": {"kind":"Int32"}
        ,"value": 1784
    }
    ,{
         "name": "ERROR_UNRECOGNIZED_MEDIA"
        ,"type": {"kind":"Int32"}
        ,"value": 1785
    }
    ,{
         "name": "ERROR_NO_TRUST_LSA_SECRET"
        ,"type": {"kind":"Int32"}
        ,"value": 1786
    }
    ,{
         "name": "ERROR_NO_TRUST_SAM_ACCOUNT"
        ,"type": {"kind":"Int32"}
        ,"value": 1787
    }
    ,{
         "name": "ERROR_TRUSTED_DOMAIN_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 1788
    }
    ,{
         "name": "ERROR_TRUSTED_RELATIONSHIP_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 1789
    }
    ,{
         "name": "ERROR_TRUST_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 1790
    }
    ,{
         "name": "RPC_S_CALL_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 1791
    }
    ,{
         "name": "ERROR_NETLOGON_NOT_STARTED"
        ,"type": {"kind":"Int32"}
        ,"value": 1792
    }
    ,{
         "name": "ERROR_ACCOUNT_EXPIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 1793
    }
    ,{
         "name": "ERROR_REDIRECTOR_HAS_OPEN_HANDLES"
        ,"type": {"kind":"Int32"}
        ,"value": 1794
    }
    ,{
         "name": "ERROR_PRINTER_DRIVER_ALREADY_INSTALLED"
        ,"type": {"kind":"Int32"}
        ,"value": 1795
    }
    ,{
         "name": "ERROR_UNKNOWN_PORT"
        ,"type": {"kind":"Int32"}
        ,"value": 1796
    }
    ,{
         "name": "ERROR_UNKNOWN_PRINTER_DRIVER"
        ,"type": {"kind":"Int32"}
        ,"value": 1797
    }
    ,{
         "name": "ERROR_UNKNOWN_PRINTPROCESSOR"
        ,"type": {"kind":"Int32"}
        ,"value": 1798
    }
    ,{
         "name": "ERROR_INVALID_SEPARATOR_FILE"
        ,"type": {"kind":"Int32"}
        ,"value": 1799
    }
    ,{
         "name": "ERROR_INVALID_PRIORITY"
        ,"type": {"kind":"Int32"}
        ,"value": 1800
    }
    ,{
         "name": "ERROR_INVALID_PRINTER_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 1801
    }
    ,{
         "name": "ERROR_PRINTER_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 1802
    }
    ,{
         "name": "ERROR_INVALID_PRINTER_COMMAND"
        ,"type": {"kind":"Int32"}
        ,"value": 1803
    }
    ,{
         "name": "ERROR_INVALID_DATATYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 1804
    }
    ,{
         "name": "ERROR_INVALID_ENVIRONMENT"
        ,"type": {"kind":"Int32"}
        ,"value": 1805
    }
    ,{
         "name": "RPC_S_NO_MORE_BINDINGS"
        ,"type": {"kind":"Int32"}
        ,"value": 1806
    }
    ,{
         "name": "ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT"
        ,"type": {"kind":"Int32"}
        ,"value": 1807
    }
    ,{
         "name": "ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT"
        ,"type": {"kind":"Int32"}
        ,"value": 1808
    }
    ,{
         "name": "ERROR_NOLOGON_SERVER_TRUST_ACCOUNT"
        ,"type": {"kind":"Int32"}
        ,"value": 1809
    }
    ,{
         "name": "ERROR_DOMAIN_TRUST_INCONSISTENT"
        ,"type": {"kind":"Int32"}
        ,"value": 1810
    }
    ,{
         "name": "ERROR_SERVER_HAS_OPEN_HANDLES"
        ,"type": {"kind":"Int32"}
        ,"value": 1811
    }
    ,{
         "name": "ERROR_RESOURCE_DATA_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 1812
    }
    ,{
         "name": "ERROR_RESOURCE_TYPE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 1813
    }
    ,{
         "name": "ERROR_RESOURCE_NAME_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 1814
    }
    ,{
         "name": "ERROR_RESOURCE_LANG_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 1815
    }
    ,{
         "name": "ERROR_NOT_ENOUGH_QUOTA"
        ,"type": {"kind":"Int32"}
        ,"value": 1816
    }
    ,{
         "name": "RPC_S_NO_INTERFACES"
        ,"type": {"kind":"Int32"}
        ,"value": 1817
    }
    ,{
         "name": "RPC_S_CALL_CANCELLED"
        ,"type": {"kind":"Int32"}
        ,"value": 1818
    }
    ,{
         "name": "RPC_S_BINDING_INCOMPLETE"
        ,"type": {"kind":"Int32"}
        ,"value": 1819
    }
    ,{
         "name": "RPC_S_COMM_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 1820
    }
    ,{
         "name": "RPC_S_UNSUPPORTED_AUTHN_LEVEL"
        ,"type": {"kind":"Int32"}
        ,"value": 1821
    }
    ,{
         "name": "RPC_S_NO_PRINC_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 1822
    }
    ,{
         "name": "RPC_S_NOT_RPC_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 1823
    }
    ,{
         "name": "RPC_S_UUID_LOCAL_ONLY"
        ,"type": {"kind":"Int32"}
        ,"value": 1824
    }
    ,{
         "name": "RPC_S_SEC_PKG_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 1825
    }
    ,{
         "name": "RPC_S_NOT_CANCELLED"
        ,"type": {"kind":"Int32"}
        ,"value": 1826
    }
    ,{
         "name": "RPC_X_INVALID_ES_ACTION"
        ,"type": {"kind":"Int32"}
        ,"value": 1827
    }
    ,{
         "name": "RPC_X_WRONG_ES_VERSION"
        ,"type": {"kind":"Int32"}
        ,"value": 1828
    }
    ,{
         "name": "RPC_X_WRONG_STUB_VERSION"
        ,"type": {"kind":"Int32"}
        ,"value": 1829
    }
    ,{
         "name": "RPC_X_INVALID_PIPE_OBJECT"
        ,"type": {"kind":"Int32"}
        ,"value": 1830
    }
    ,{
         "name": "RPC_X_WRONG_PIPE_ORDER"
        ,"type": {"kind":"Int32"}
        ,"value": 1831
    }
    ,{
         "name": "RPC_X_WRONG_PIPE_VERSION"
        ,"type": {"kind":"Int32"}
        ,"value": 1832
    }
    ,{
         "name": "RPC_S_COOKIE_AUTH_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 1833
    }
    ,{
         "name": "RPC_S_DO_NOT_DISTURB"
        ,"type": {"kind":"Int32"}
        ,"value": 1834
    }
    ,{
         "name": "RPC_S_SYSTEM_HANDLE_COUNT_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 1835
    }
    ,{
         "name": "RPC_S_SYSTEM_HANDLE_TYPE_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 1836
    }
    ,{
         "name": "RPC_S_GROUP_MEMBER_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 1898
    }
    ,{
         "name": "EPT_S_CANT_CREATE"
        ,"type": {"kind":"Int32"}
        ,"value": 1899
    }
    ,{
         "name": "RPC_S_INVALID_OBJECT"
        ,"type": {"kind":"Int32"}
        ,"value": 1900
    }
    ,{
         "name": "ERROR_INVALID_TIME"
        ,"type": {"kind":"Int32"}
        ,"value": 1901
    }
    ,{
         "name": "ERROR_INVALID_FORM_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 1902
    }
    ,{
         "name": "ERROR_INVALID_FORM_SIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 1903
    }
    ,{
         "name": "ERROR_ALREADY_WAITING"
        ,"type": {"kind":"Int32"}
        ,"value": 1904
    }
    ,{
         "name": "ERROR_PRINTER_DELETED"
        ,"type": {"kind":"Int32"}
        ,"value": 1905
    }
    ,{
         "name": "ERROR_INVALID_PRINTER_STATE"
        ,"type": {"kind":"Int32"}
        ,"value": 1906
    }
    ,{
         "name": "ERROR_PASSWORD_MUST_CHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 1907
    }
    ,{
         "name": "ERROR_DOMAIN_CONTROLLER_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 1908
    }
    ,{
         "name": "ERROR_ACCOUNT_LOCKED_OUT"
        ,"type": {"kind":"Int32"}
        ,"value": 1909
    }
    ,{
         "name": "OR_INVALID_OXID"
        ,"type": {"kind":"Int32"}
        ,"value": 1910
    }
    ,{
         "name": "OR_INVALID_OID"
        ,"type": {"kind":"Int32"}
        ,"value": 1911
    }
    ,{
         "name": "OR_INVALID_SET"
        ,"type": {"kind":"Int32"}
        ,"value": 1912
    }
    ,{
         "name": "RPC_S_SEND_INCOMPLETE"
        ,"type": {"kind":"Int32"}
        ,"value": 1913
    }
    ,{
         "name": "RPC_S_INVALID_ASYNC_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": 1914
    }
    ,{
         "name": "RPC_S_INVALID_ASYNC_CALL"
        ,"type": {"kind":"Int32"}
        ,"value": 1915
    }
    ,{
         "name": "RPC_X_PIPE_CLOSED"
        ,"type": {"kind":"Int32"}
        ,"value": 1916
    }
    ,{
         "name": "RPC_X_PIPE_DISCIPLINE_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 1917
    }
    ,{
         "name": "RPC_X_PIPE_EMPTY"
        ,"type": {"kind":"Int32"}
        ,"value": 1918
    }
    ,{
         "name": "ERROR_NO_SITENAME"
        ,"type": {"kind":"Int32"}
        ,"value": 1919
    }
    ,{
         "name": "ERROR_CANT_ACCESS_FILE"
        ,"type": {"kind":"Int32"}
        ,"value": 1920
    }
    ,{
         "name": "ERROR_CANT_RESOLVE_FILENAME"
        ,"type": {"kind":"Int32"}
        ,"value": 1921
    }
    ,{
         "name": "RPC_S_ENTRY_TYPE_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 1922
    }
    ,{
         "name": "RPC_S_NOT_ALL_OBJS_EXPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 1923
    }
    ,{
         "name": "RPC_S_INTERFACE_NOT_EXPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 1924
    }
    ,{
         "name": "RPC_S_PROFILE_NOT_ADDED"
        ,"type": {"kind":"Int32"}
        ,"value": 1925
    }
    ,{
         "name": "RPC_S_PRF_ELT_NOT_ADDED"
        ,"type": {"kind":"Int32"}
        ,"value": 1926
    }
    ,{
         "name": "RPC_S_PRF_ELT_NOT_REMOVED"
        ,"type": {"kind":"Int32"}
        ,"value": 1927
    }
    ,{
         "name": "RPC_S_GRP_ELT_NOT_ADDED"
        ,"type": {"kind":"Int32"}
        ,"value": 1928
    }
    ,{
         "name": "RPC_S_GRP_ELT_NOT_REMOVED"
        ,"type": {"kind":"Int32"}
        ,"value": 1929
    }
    ,{
         "name": "ERROR_KM_DRIVER_BLOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": 1930
    }
    ,{
         "name": "ERROR_CONTEXT_EXPIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 1931
    }
    ,{
         "name": "ERROR_PER_USER_TRUST_QUOTA_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 1932
    }
    ,{
         "name": "ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 1933
    }
    ,{
         "name": "ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 1934
    }
    ,{
         "name": "ERROR_AUTHENTICATION_FIREWALL_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 1935
    }
    ,{
         "name": "ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": 1936
    }
    ,{
         "name": "ERROR_NTLM_BLOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": 1937
    }
    ,{
         "name": "ERROR_PASSWORD_CHANGE_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 1938
    }
    ,{
         "name": "ERROR_LOST_MODE_LOGON_RESTRICTION"
        ,"type": {"kind":"Int32"}
        ,"value": 1939
    }
    ,{
         "name": "ERROR_INVALID_PIXEL_FORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": 2000
    }
    ,{
         "name": "ERROR_BAD_DRIVER"
        ,"type": {"kind":"Int32"}
        ,"value": 2001
    }
    ,{
         "name": "ERROR_INVALID_WINDOW_STYLE"
        ,"type": {"kind":"Int32"}
        ,"value": 2002
    }
    ,{
         "name": "ERROR_METAFILE_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 2003
    }
    ,{
         "name": "ERROR_TRANSFORM_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 2004
    }
    ,{
         "name": "ERROR_CLIPPING_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 2005
    }
    ,{
         "name": "ERROR_INVALID_CMM"
        ,"type": {"kind":"Int32"}
        ,"value": 2010
    }
    ,{
         "name": "ERROR_INVALID_PROFILE"
        ,"type": {"kind":"Int32"}
        ,"value": 2011
    }
    ,{
         "name": "ERROR_TAG_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 2012
    }
    ,{
         "name": "ERROR_TAG_NOT_PRESENT"
        ,"type": {"kind":"Int32"}
        ,"value": 2013
    }
    ,{
         "name": "ERROR_DUPLICATE_TAG"
        ,"type": {"kind":"Int32"}
        ,"value": 2014
    }
    ,{
         "name": "ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE"
        ,"type": {"kind":"Int32"}
        ,"value": 2015
    }
    ,{
         "name": "ERROR_PROFILE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 2016
    }
    ,{
         "name": "ERROR_INVALID_COLORSPACE"
        ,"type": {"kind":"Int32"}
        ,"value": 2017
    }
    ,{
         "name": "ERROR_ICM_NOT_ENABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 2018
    }
    ,{
         "name": "ERROR_DELETING_ICM_XFORM"
        ,"type": {"kind":"Int32"}
        ,"value": 2019
    }
    ,{
         "name": "ERROR_INVALID_TRANSFORM"
        ,"type": {"kind":"Int32"}
        ,"value": 2020
    }
    ,{
         "name": "ERROR_COLORSPACE_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 2021
    }
    ,{
         "name": "ERROR_INVALID_COLORINDEX"
        ,"type": {"kind":"Int32"}
        ,"value": 2022
    }
    ,{
         "name": "ERROR_PROFILE_DOES_NOT_MATCH_DEVICE"
        ,"type": {"kind":"Int32"}
        ,"value": 2023
    }
    ,{
         "name": "ERROR_CONNECTED_OTHER_PASSWORD"
        ,"type": {"kind":"Int32"}
        ,"value": 2108
    }
    ,{
         "name": "ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT"
        ,"type": {"kind":"Int32"}
        ,"value": 2109
    }
    ,{
         "name": "ERROR_BAD_USERNAME"
        ,"type": {"kind":"Int32"}
        ,"value": 2202
    }
    ,{
         "name": "ERROR_NOT_CONNECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 2250
    }
    ,{
         "name": "ERROR_OPEN_FILES"
        ,"type": {"kind":"Int32"}
        ,"value": 2401
    }
    ,{
         "name": "ERROR_ACTIVE_CONNECTIONS"
        ,"type": {"kind":"Int32"}
        ,"value": 2402
    }
    ,{
         "name": "ERROR_DEVICE_IN_USE"
        ,"type": {"kind":"Int32"}
        ,"value": 2404
    }
    ,{
         "name": "ERROR_UNKNOWN_PRINT_MONITOR"
        ,"type": {"kind":"Int32"}
        ,"value": 3000
    }
    ,{
         "name": "ERROR_PRINTER_DRIVER_IN_USE"
        ,"type": {"kind":"Int32"}
        ,"value": 3001
    }
    ,{
         "name": "ERROR_SPOOL_FILE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 3002
    }
    ,{
         "name": "ERROR_SPL_NO_STARTDOC"
        ,"type": {"kind":"Int32"}
        ,"value": 3003
    }
    ,{
         "name": "ERROR_SPL_NO_ADDJOB"
        ,"type": {"kind":"Int32"}
        ,"value": 3004
    }
    ,{
         "name": "ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED"
        ,"type": {"kind":"Int32"}
        ,"value": 3005
    }
    ,{
         "name": "ERROR_PRINT_MONITOR_ALREADY_INSTALLED"
        ,"type": {"kind":"Int32"}
        ,"value": 3006
    }
    ,{
         "name": "ERROR_INVALID_PRINT_MONITOR"
        ,"type": {"kind":"Int32"}
        ,"value": 3007
    }
    ,{
         "name": "ERROR_PRINT_MONITOR_IN_USE"
        ,"type": {"kind":"Int32"}
        ,"value": 3008
    }
    ,{
         "name": "ERROR_PRINTER_HAS_JOBS_QUEUED"
        ,"type": {"kind":"Int32"}
        ,"value": 3009
    }
    ,{
         "name": "ERROR_SUCCESS_REBOOT_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 3010
    }
    ,{
         "name": "ERROR_SUCCESS_RESTART_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 3011
    }
    ,{
         "name": "ERROR_PRINTER_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 3012
    }
    ,{
         "name": "ERROR_PRINTER_DRIVER_WARNED"
        ,"type": {"kind":"Int32"}
        ,"value": 3013
    }
    ,{
         "name": "ERROR_PRINTER_DRIVER_BLOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": 3014
    }
    ,{
         "name": "ERROR_PRINTER_DRIVER_PACKAGE_IN_USE"
        ,"type": {"kind":"Int32"}
        ,"value": 3015
    }
    ,{
         "name": "ERROR_CORE_DRIVER_PACKAGE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 3016
    }
    ,{
         "name": "ERROR_FAIL_REBOOT_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 3017
    }
    ,{
         "name": "ERROR_FAIL_REBOOT_INITIATED"
        ,"type": {"kind":"Int32"}
        ,"value": 3018
    }
    ,{
         "name": "ERROR_PRINTER_DRIVER_DOWNLOAD_NEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 3019
    }
    ,{
         "name": "ERROR_PRINT_JOB_RESTART_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 3020
    }
    ,{
         "name": "ERROR_INVALID_PRINTER_DRIVER_MANIFEST"
        ,"type": {"kind":"Int32"}
        ,"value": 3021
    }
    ,{
         "name": "ERROR_PRINTER_NOT_SHAREABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 3022
    }
    ,{
         "name": "ERROR_REQUEST_PAUSED"
        ,"type": {"kind":"Int32"}
        ,"value": 3050
    }
    ,{
         "name": "ERROR_APPEXEC_CONDITION_NOT_SATISFIED"
        ,"type": {"kind":"Int32"}
        ,"value": 3060
    }
    ,{
         "name": "ERROR_APPEXEC_HANDLE_INVALIDATED"
        ,"type": {"kind":"Int32"}
        ,"value": 3061
    }
    ,{
         "name": "ERROR_APPEXEC_INVALID_HOST_GENERATION"
        ,"type": {"kind":"Int32"}
        ,"value": 3062
    }
    ,{
         "name": "ERROR_APPEXEC_UNEXPECTED_PROCESS_REGISTRATION"
        ,"type": {"kind":"Int32"}
        ,"value": 3063
    }
    ,{
         "name": "ERROR_APPEXEC_INVALID_HOST_STATE"
        ,"type": {"kind":"Int32"}
        ,"value": 3064
    }
    ,{
         "name": "ERROR_APPEXEC_NO_DONOR"
        ,"type": {"kind":"Int32"}
        ,"value": 3065
    }
    ,{
         "name": "ERROR_APPEXEC_HOST_ID_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 3066
    }
    ,{
         "name": "ERROR_APPEXEC_UNKNOWN_USER"
        ,"type": {"kind":"Int32"}
        ,"value": 3067
    }
    ,{
         "name": "ERROR_IO_REISSUE_AS_CACHED"
        ,"type": {"kind":"Int32"}
        ,"value": 3950
    }
    ,{
         "name": "ERROR_WINS_INTERNAL"
        ,"type": {"kind":"Int32"}
        ,"value": 4000
    }
    ,{
         "name": "ERROR_CAN_NOT_DEL_LOCAL_WINS"
        ,"type": {"kind":"Int32"}
        ,"value": 4001
    }
    ,{
         "name": "ERROR_STATIC_INIT"
        ,"type": {"kind":"Int32"}
        ,"value": 4002
    }
    ,{
         "name": "ERROR_INC_BACKUP"
        ,"type": {"kind":"Int32"}
        ,"value": 4003
    }
    ,{
         "name": "ERROR_FULL_BACKUP"
        ,"type": {"kind":"Int32"}
        ,"value": 4004
    }
    ,{
         "name": "ERROR_REC_NON_EXISTENT"
        ,"type": {"kind":"Int32"}
        ,"value": 4005
    }
    ,{
         "name": "ERROR_RPL_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": 4006
    }
    ,{
         "name": "PEERDIST_ERROR_CONTENTINFO_VERSION_UNSUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 4050
    }
    ,{
         "name": "PEERDIST_ERROR_CANNOT_PARSE_CONTENTINFO"
        ,"type": {"kind":"Int32"}
        ,"value": 4051
    }
    ,{
         "name": "PEERDIST_ERROR_MISSING_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": 4052
    }
    ,{
         "name": "PEERDIST_ERROR_NO_MORE"
        ,"type": {"kind":"Int32"}
        ,"value": 4053
    }
    ,{
         "name": "PEERDIST_ERROR_NOT_INITIALIZED"
        ,"type": {"kind":"Int32"}
        ,"value": 4054
    }
    ,{
         "name": "PEERDIST_ERROR_ALREADY_INITIALIZED"
        ,"type": {"kind":"Int32"}
        ,"value": 4055
    }
    ,{
         "name": "PEERDIST_ERROR_SHUTDOWN_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 4056
    }
    ,{
         "name": "PEERDIST_ERROR_INVALIDATED"
        ,"type": {"kind":"Int32"}
        ,"value": 4057
    }
    ,{
         "name": "PEERDIST_ERROR_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 4058
    }
    ,{
         "name": "PEERDIST_ERROR_OPERATION_NOTFOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 4059
    }
    ,{
         "name": "PEERDIST_ERROR_ALREADY_COMPLETED"
        ,"type": {"kind":"Int32"}
        ,"value": 4060
    }
    ,{
         "name": "PEERDIST_ERROR_OUT_OF_BOUNDS"
        ,"type": {"kind":"Int32"}
        ,"value": 4061
    }
    ,{
         "name": "PEERDIST_ERROR_VERSION_UNSUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 4062
    }
    ,{
         "name": "PEERDIST_ERROR_INVALID_CONFIGURATION"
        ,"type": {"kind":"Int32"}
        ,"value": 4063
    }
    ,{
         "name": "PEERDIST_ERROR_NOT_LICENSED"
        ,"type": {"kind":"Int32"}
        ,"value": 4064
    }
    ,{
         "name": "PEERDIST_ERROR_SERVICE_UNAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 4065
    }
    ,{
         "name": "PEERDIST_ERROR_TRUST_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 4066
    }
    ,{
         "name": "ERROR_DHCP_ADDRESS_CONFLICT"
        ,"type": {"kind":"Int32"}
        ,"value": 4100
    }
    ,{
         "name": "ERROR_WMI_GUID_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 4200
    }
    ,{
         "name": "ERROR_WMI_INSTANCE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 4201
    }
    ,{
         "name": "ERROR_WMI_ITEMID_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 4202
    }
    ,{
         "name": "ERROR_WMI_TRY_AGAIN"
        ,"type": {"kind":"Int32"}
        ,"value": 4203
    }
    ,{
         "name": "ERROR_WMI_DP_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 4204
    }
    ,{
         "name": "ERROR_WMI_UNRESOLVED_INSTANCE_REF"
        ,"type": {"kind":"Int32"}
        ,"value": 4205
    }
    ,{
         "name": "ERROR_WMI_ALREADY_ENABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 4206
    }
    ,{
         "name": "ERROR_WMI_GUID_DISCONNECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 4207
    }
    ,{
         "name": "ERROR_WMI_SERVER_UNAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 4208
    }
    ,{
         "name": "ERROR_WMI_DP_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 4209
    }
    ,{
         "name": "ERROR_WMI_INVALID_MOF"
        ,"type": {"kind":"Int32"}
        ,"value": 4210
    }
    ,{
         "name": "ERROR_WMI_INVALID_REGINFO"
        ,"type": {"kind":"Int32"}
        ,"value": 4211
    }
    ,{
         "name": "ERROR_WMI_ALREADY_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 4212
    }
    ,{
         "name": "ERROR_WMI_READ_ONLY"
        ,"type": {"kind":"Int32"}
        ,"value": 4213
    }
    ,{
         "name": "ERROR_WMI_SET_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 4214
    }
    ,{
         "name": "ERROR_NOT_APPCONTAINER"
        ,"type": {"kind":"Int32"}
        ,"value": 4250
    }
    ,{
         "name": "ERROR_APPCONTAINER_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 4251
    }
    ,{
         "name": "ERROR_NOT_SUPPORTED_IN_APPCONTAINER"
        ,"type": {"kind":"Int32"}
        ,"value": 4252
    }
    ,{
         "name": "ERROR_INVALID_PACKAGE_SID_LENGTH"
        ,"type": {"kind":"Int32"}
        ,"value": 4253
    }
    ,{
         "name": "ERROR_INVALID_MEDIA"
        ,"type": {"kind":"Int32"}
        ,"value": 4300
    }
    ,{
         "name": "ERROR_INVALID_LIBRARY"
        ,"type": {"kind":"Int32"}
        ,"value": 4301
    }
    ,{
         "name": "ERROR_INVALID_MEDIA_POOL"
        ,"type": {"kind":"Int32"}
        ,"value": 4302
    }
    ,{
         "name": "ERROR_DRIVE_MEDIA_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 4303
    }
    ,{
         "name": "ERROR_MEDIA_OFFLINE"
        ,"type": {"kind":"Int32"}
        ,"value": 4304
    }
    ,{
         "name": "ERROR_LIBRARY_OFFLINE"
        ,"type": {"kind":"Int32"}
        ,"value": 4305
    }
    ,{
         "name": "ERROR_EMPTY"
        ,"type": {"kind":"Int32"}
        ,"value": 4306
    }
    ,{
         "name": "ERROR_NOT_EMPTY"
        ,"type": {"kind":"Int32"}
        ,"value": 4307
    }
    ,{
         "name": "ERROR_MEDIA_UNAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 4308
    }
    ,{
         "name": "ERROR_RESOURCE_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 4309
    }
    ,{
         "name": "ERROR_INVALID_CLEANER"
        ,"type": {"kind":"Int32"}
        ,"value": 4310
    }
    ,{
         "name": "ERROR_UNABLE_TO_CLEAN"
        ,"type": {"kind":"Int32"}
        ,"value": 4311
    }
    ,{
         "name": "ERROR_OBJECT_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 4312
    }
    ,{
         "name": "ERROR_DATABASE_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 4313
    }
    ,{
         "name": "ERROR_DATABASE_FULL"
        ,"type": {"kind":"Int32"}
        ,"value": 4314
    }
    ,{
         "name": "ERROR_MEDIA_INCOMPATIBLE"
        ,"type": {"kind":"Int32"}
        ,"value": 4315
    }
    ,{
         "name": "ERROR_RESOURCE_NOT_PRESENT"
        ,"type": {"kind":"Int32"}
        ,"value": 4316
    }
    ,{
         "name": "ERROR_INVALID_OPERATION"
        ,"type": {"kind":"Int32"}
        ,"value": 4317
    }
    ,{
         "name": "ERROR_MEDIA_NOT_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 4318
    }
    ,{
         "name": "ERROR_DEVICE_NOT_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 4319
    }
    ,{
         "name": "ERROR_REQUEST_REFUSED"
        ,"type": {"kind":"Int32"}
        ,"value": 4320
    }
    ,{
         "name": "ERROR_INVALID_DRIVE_OBJECT"
        ,"type": {"kind":"Int32"}
        ,"value": 4321
    }
    ,{
         "name": "ERROR_LIBRARY_FULL"
        ,"type": {"kind":"Int32"}
        ,"value": 4322
    }
    ,{
         "name": "ERROR_MEDIUM_NOT_ACCESSIBLE"
        ,"type": {"kind":"Int32"}
        ,"value": 4323
    }
    ,{
         "name": "ERROR_UNABLE_TO_LOAD_MEDIUM"
        ,"type": {"kind":"Int32"}
        ,"value": 4324
    }
    ,{
         "name": "ERROR_UNABLE_TO_INVENTORY_DRIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 4325
    }
    ,{
         "name": "ERROR_UNABLE_TO_INVENTORY_SLOT"
        ,"type": {"kind":"Int32"}
        ,"value": 4326
    }
    ,{
         "name": "ERROR_UNABLE_TO_INVENTORY_TRANSPORT"
        ,"type": {"kind":"Int32"}
        ,"value": 4327
    }
    ,{
         "name": "ERROR_TRANSPORT_FULL"
        ,"type": {"kind":"Int32"}
        ,"value": 4328
    }
    ,{
         "name": "ERROR_CONTROLLING_IEPORT"
        ,"type": {"kind":"Int32"}
        ,"value": 4329
    }
    ,{
         "name": "ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA"
        ,"type": {"kind":"Int32"}
        ,"value": 4330
    }
    ,{
         "name": "ERROR_CLEANER_SLOT_SET"
        ,"type": {"kind":"Int32"}
        ,"value": 4331
    }
    ,{
         "name": "ERROR_CLEANER_SLOT_NOT_SET"
        ,"type": {"kind":"Int32"}
        ,"value": 4332
    }
    ,{
         "name": "ERROR_CLEANER_CARTRIDGE_SPENT"
        ,"type": {"kind":"Int32"}
        ,"value": 4333
    }
    ,{
         "name": "ERROR_UNEXPECTED_OMID"
        ,"type": {"kind":"Int32"}
        ,"value": 4334
    }
    ,{
         "name": "ERROR_CANT_DELETE_LAST_ITEM"
        ,"type": {"kind":"Int32"}
        ,"value": 4335
    }
    ,{
         "name": "ERROR_MESSAGE_EXCEEDS_MAX_SIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 4336
    }
    ,{
         "name": "ERROR_VOLUME_CONTAINS_SYS_FILES"
        ,"type": {"kind":"Int32"}
        ,"value": 4337
    }
    ,{
         "name": "ERROR_INDIGENOUS_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 4338
    }
    ,{
         "name": "ERROR_NO_SUPPORTING_DRIVES"
        ,"type": {"kind":"Int32"}
        ,"value": 4339
    }
    ,{
         "name": "ERROR_CLEANER_CARTRIDGE_INSTALLED"
        ,"type": {"kind":"Int32"}
        ,"value": 4340
    }
    ,{
         "name": "ERROR_IEPORT_FULL"
        ,"type": {"kind":"Int32"}
        ,"value": 4341
    }
    ,{
         "name": "ERROR_FILE_OFFLINE"
        ,"type": {"kind":"Int32"}
        ,"value": 4350
    }
    ,{
         "name": "ERROR_REMOTE_STORAGE_NOT_ACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 4351
    }
    ,{
         "name": "ERROR_REMOTE_STORAGE_MEDIA_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 4352
    }
    ,{
         "name": "ERROR_NOT_A_REPARSE_POINT"
        ,"type": {"kind":"Int32"}
        ,"value": 4390
    }
    ,{
         "name": "ERROR_REPARSE_ATTRIBUTE_CONFLICT"
        ,"type": {"kind":"Int32"}
        ,"value": 4391
    }
    ,{
         "name": "ERROR_INVALID_REPARSE_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": 4392
    }
    ,{
         "name": "ERROR_REPARSE_TAG_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": 4393
    }
    ,{
         "name": "ERROR_REPARSE_TAG_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 4394
    }
    ,{
         "name": "ERROR_REPARSE_POINT_ENCOUNTERED"
        ,"type": {"kind":"Int32"}
        ,"value": 4395
    }
    ,{
         "name": "ERROR_APP_DATA_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 4400
    }
    ,{
         "name": "ERROR_APP_DATA_EXPIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 4401
    }
    ,{
         "name": "ERROR_APP_DATA_CORRUPT"
        ,"type": {"kind":"Int32"}
        ,"value": 4402
    }
    ,{
         "name": "ERROR_APP_DATA_LIMIT_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 4403
    }
    ,{
         "name": "ERROR_APP_DATA_REBOOT_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 4404
    }
    ,{
         "name": "ERROR_SECUREBOOT_ROLLBACK_DETECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 4420
    }
    ,{
         "name": "ERROR_SECUREBOOT_POLICY_VIOLATION"
        ,"type": {"kind":"Int32"}
        ,"value": 4421
    }
    ,{
         "name": "ERROR_SECUREBOOT_INVALID_POLICY"
        ,"type": {"kind":"Int32"}
        ,"value": 4422
    }
    ,{
         "name": "ERROR_SECUREBOOT_POLICY_PUBLISHER_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 4423
    }
    ,{
         "name": "ERROR_SECUREBOOT_POLICY_NOT_SIGNED"
        ,"type": {"kind":"Int32"}
        ,"value": 4424
    }
    ,{
         "name": "ERROR_SECUREBOOT_NOT_ENABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 4425
    }
    ,{
         "name": "ERROR_SECUREBOOT_FILE_REPLACED"
        ,"type": {"kind":"Int32"}
        ,"value": 4426
    }
    ,{
         "name": "ERROR_SECUREBOOT_POLICY_NOT_AUTHORIZED"
        ,"type": {"kind":"Int32"}
        ,"value": 4427
    }
    ,{
         "name": "ERROR_SECUREBOOT_POLICY_UNKNOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 4428
    }
    ,{
         "name": "ERROR_SECUREBOOT_POLICY_MISSING_ANTIROLLBACKVERSION"
        ,"type": {"kind":"Int32"}
        ,"value": 4429
    }
    ,{
         "name": "ERROR_SECUREBOOT_PLATFORM_ID_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 4430
    }
    ,{
         "name": "ERROR_SECUREBOOT_POLICY_ROLLBACK_DETECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 4431
    }
    ,{
         "name": "ERROR_SECUREBOOT_POLICY_UPGRADE_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 4432
    }
    ,{
         "name": "ERROR_SECUREBOOT_REQUIRED_POLICY_FILE_MISSING"
        ,"type": {"kind":"Int32"}
        ,"value": 4433
    }
    ,{
         "name": "ERROR_SECUREBOOT_NOT_BASE_POLICY"
        ,"type": {"kind":"Int32"}
        ,"value": 4434
    }
    ,{
         "name": "ERROR_SECUREBOOT_NOT_SUPPLEMENTAL_POLICY"
        ,"type": {"kind":"Int32"}
        ,"value": 4435
    }
    ,{
         "name": "ERROR_OFFLOAD_READ_FLT_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 4440
    }
    ,{
         "name": "ERROR_OFFLOAD_WRITE_FLT_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 4441
    }
    ,{
         "name": "ERROR_OFFLOAD_READ_FILE_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 4442
    }
    ,{
         "name": "ERROR_OFFLOAD_WRITE_FILE_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 4443
    }
    ,{
         "name": "ERROR_ALREADY_HAS_STREAM_ID"
        ,"type": {"kind":"Int32"}
        ,"value": 4444
    }
    ,{
         "name": "ERROR_SMR_GARBAGE_COLLECTION_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 4445
    }
    ,{
         "name": "ERROR_WOF_WIM_HEADER_CORRUPT"
        ,"type": {"kind":"Int32"}
        ,"value": 4446
    }
    ,{
         "name": "ERROR_WOF_WIM_RESOURCE_TABLE_CORRUPT"
        ,"type": {"kind":"Int32"}
        ,"value": 4447
    }
    ,{
         "name": "ERROR_WOF_FILE_RESOURCE_TABLE_CORRUPT"
        ,"type": {"kind":"Int32"}
        ,"value": 4448
    }
    ,{
         "name": "ERROR_VOLUME_NOT_SIS_ENABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 4500
    }
    ,{
         "name": "ERROR_SYSTEM_INTEGRITY_ROLLBACK_DETECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 4550
    }
    ,{
         "name": "ERROR_SYSTEM_INTEGRITY_POLICY_VIOLATION"
        ,"type": {"kind":"Int32"}
        ,"value": 4551
    }
    ,{
         "name": "ERROR_SYSTEM_INTEGRITY_INVALID_POLICY"
        ,"type": {"kind":"Int32"}
        ,"value": 4552
    }
    ,{
         "name": "ERROR_SYSTEM_INTEGRITY_POLICY_NOT_SIGNED"
        ,"type": {"kind":"Int32"}
        ,"value": 4553
    }
    ,{
         "name": "ERROR_SYSTEM_INTEGRITY_TOO_MANY_POLICIES"
        ,"type": {"kind":"Int32"}
        ,"value": 4554
    }
    ,{
         "name": "ERROR_SYSTEM_INTEGRITY_SUPPLEMENTAL_POLICY_NOT_AUTHORIZED"
        ,"type": {"kind":"Int32"}
        ,"value": 4555
    }
    ,{
         "name": "ERROR_VSM_NOT_INITIALIZED"
        ,"type": {"kind":"Int32"}
        ,"value": 4560
    }
    ,{
         "name": "ERROR_VSM_DMA_PROTECTION_NOT_IN_USE"
        ,"type": {"kind":"Int32"}
        ,"value": 4561
    }
    ,{
         "name": "ERROR_PLATFORM_MANIFEST_NOT_AUTHORIZED"
        ,"type": {"kind":"Int32"}
        ,"value": 4570
    }
    ,{
         "name": "ERROR_PLATFORM_MANIFEST_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": 4571
    }
    ,{
         "name": "ERROR_PLATFORM_MANIFEST_FILE_NOT_AUTHORIZED"
        ,"type": {"kind":"Int32"}
        ,"value": 4572
    }
    ,{
         "name": "ERROR_PLATFORM_MANIFEST_CATALOG_NOT_AUTHORIZED"
        ,"type": {"kind":"Int32"}
        ,"value": 4573
    }
    ,{
         "name": "ERROR_PLATFORM_MANIFEST_BINARY_ID_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 4574
    }
    ,{
         "name": "ERROR_PLATFORM_MANIFEST_NOT_ACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 4575
    }
    ,{
         "name": "ERROR_PLATFORM_MANIFEST_NOT_SIGNED"
        ,"type": {"kind":"Int32"}
        ,"value": 4576
    }
    ,{
         "name": "ERROR_DEPENDENT_RESOURCE_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 5001
    }
    ,{
         "name": "ERROR_DEPENDENCY_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 5002
    }
    ,{
         "name": "ERROR_DEPENDENCY_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 5003
    }
    ,{
         "name": "ERROR_RESOURCE_NOT_ONLINE"
        ,"type": {"kind":"Int32"}
        ,"value": 5004
    }
    ,{
         "name": "ERROR_HOST_NODE_NOT_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 5005
    }
    ,{
         "name": "ERROR_RESOURCE_NOT_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 5006
    }
    ,{
         "name": "ERROR_RESOURCE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 5007
    }
    ,{
         "name": "ERROR_SHUTDOWN_CLUSTER"
        ,"type": {"kind":"Int32"}
        ,"value": 5008
    }
    ,{
         "name": "ERROR_CANT_EVICT_ACTIVE_NODE"
        ,"type": {"kind":"Int32"}
        ,"value": 5009
    }
    ,{
         "name": "ERROR_OBJECT_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 5010
    }
    ,{
         "name": "ERROR_OBJECT_IN_LIST"
        ,"type": {"kind":"Int32"}
        ,"value": 5011
    }
    ,{
         "name": "ERROR_GROUP_NOT_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 5012
    }
    ,{
         "name": "ERROR_GROUP_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 5013
    }
    ,{
         "name": "ERROR_GROUP_NOT_ONLINE"
        ,"type": {"kind":"Int32"}
        ,"value": 5014
    }
    ,{
         "name": "ERROR_HOST_NODE_NOT_RESOURCE_OWNER"
        ,"type": {"kind":"Int32"}
        ,"value": 5015
    }
    ,{
         "name": "ERROR_HOST_NODE_NOT_GROUP_OWNER"
        ,"type": {"kind":"Int32"}
        ,"value": 5016
    }
    ,{
         "name": "ERROR_RESMON_CREATE_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 5017
    }
    ,{
         "name": "ERROR_RESMON_ONLINE_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 5018
    }
    ,{
         "name": "ERROR_RESOURCE_ONLINE"
        ,"type": {"kind":"Int32"}
        ,"value": 5019
    }
    ,{
         "name": "ERROR_QUORUM_RESOURCE"
        ,"type": {"kind":"Int32"}
        ,"value": 5020
    }
    ,{
         "name": "ERROR_NOT_QUORUM_CAPABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 5021
    }
    ,{
         "name": "ERROR_CLUSTER_SHUTTING_DOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 5022
    }
    ,{
         "name": "ERROR_INVALID_STATE"
        ,"type": {"kind":"Int32"}
        ,"value": 5023
    }
    ,{
         "name": "ERROR_RESOURCE_PROPERTIES_STORED"
        ,"type": {"kind":"Int32"}
        ,"value": 5024
    }
    ,{
         "name": "ERROR_NOT_QUORUM_CLASS"
        ,"type": {"kind":"Int32"}
        ,"value": 5025
    }
    ,{
         "name": "ERROR_CORE_RESOURCE"
        ,"type": {"kind":"Int32"}
        ,"value": 5026
    }
    ,{
         "name": "ERROR_QUORUM_RESOURCE_ONLINE_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 5027
    }
    ,{
         "name": "ERROR_QUORUMLOG_OPEN_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 5028
    }
    ,{
         "name": "ERROR_CLUSTERLOG_CORRUPT"
        ,"type": {"kind":"Int32"}
        ,"value": 5029
    }
    ,{
         "name": "ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 5030
    }
    ,{
         "name": "ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 5031
    }
    ,{
         "name": "ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 5032
    }
    ,{
         "name": "ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE"
        ,"type": {"kind":"Int32"}
        ,"value": 5033
    }
    ,{
         "name": "ERROR_QUORUM_OWNER_ALIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 5034
    }
    ,{
         "name": "ERROR_NETWORK_NOT_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 5035
    }
    ,{
         "name": "ERROR_NODE_NOT_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 5036
    }
    ,{
         "name": "ERROR_ALL_NODES_NOT_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 5037
    }
    ,{
         "name": "ERROR_RESOURCE_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 5038
    }
    ,{
         "name": "ERROR_CLUSTER_INVALID_NODE"
        ,"type": {"kind":"Int32"}
        ,"value": 5039
    }
    ,{
         "name": "ERROR_CLUSTER_NODE_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 5040
    }
    ,{
         "name": "ERROR_CLUSTER_JOIN_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 5041
    }
    ,{
         "name": "ERROR_CLUSTER_NODE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 5042
    }
    ,{
         "name": "ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 5043
    }
    ,{
         "name": "ERROR_CLUSTER_NETWORK_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 5044
    }
    ,{
         "name": "ERROR_CLUSTER_NETWORK_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 5045
    }
    ,{
         "name": "ERROR_CLUSTER_NETINTERFACE_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 5046
    }
    ,{
         "name": "ERROR_CLUSTER_NETINTERFACE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 5047
    }
    ,{
         "name": "ERROR_CLUSTER_INVALID_REQUEST"
        ,"type": {"kind":"Int32"}
        ,"value": 5048
    }
    ,{
         "name": "ERROR_CLUSTER_INVALID_NETWORK_PROVIDER"
        ,"type": {"kind":"Int32"}
        ,"value": 5049
    }
    ,{
         "name": "ERROR_CLUSTER_NODE_DOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 5050
    }
    ,{
         "name": "ERROR_CLUSTER_NODE_UNREACHABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 5051
    }
    ,{
         "name": "ERROR_CLUSTER_NODE_NOT_MEMBER"
        ,"type": {"kind":"Int32"}
        ,"value": 5052
    }
    ,{
         "name": "ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 5053
    }
    ,{
         "name": "ERROR_CLUSTER_INVALID_NETWORK"
        ,"type": {"kind":"Int32"}
        ,"value": 5054
    }
    ,{
         "name": "ERROR_CLUSTER_NODE_UP"
        ,"type": {"kind":"Int32"}
        ,"value": 5056
    }
    ,{
         "name": "ERROR_CLUSTER_IPADDR_IN_USE"
        ,"type": {"kind":"Int32"}
        ,"value": 5057
    }
    ,{
         "name": "ERROR_CLUSTER_NODE_NOT_PAUSED"
        ,"type": {"kind":"Int32"}
        ,"value": 5058
    }
    ,{
         "name": "ERROR_CLUSTER_NO_SECURITY_CONTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 5059
    }
    ,{
         "name": "ERROR_CLUSTER_NETWORK_NOT_INTERNAL"
        ,"type": {"kind":"Int32"}
        ,"value": 5060
    }
    ,{
         "name": "ERROR_CLUSTER_NODE_ALREADY_UP"
        ,"type": {"kind":"Int32"}
        ,"value": 5061
    }
    ,{
         "name": "ERROR_CLUSTER_NODE_ALREADY_DOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 5062
    }
    ,{
         "name": "ERROR_CLUSTER_NETWORK_ALREADY_ONLINE"
        ,"type": {"kind":"Int32"}
        ,"value": 5063
    }
    ,{
         "name": "ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE"
        ,"type": {"kind":"Int32"}
        ,"value": 5064
    }
    ,{
         "name": "ERROR_CLUSTER_NODE_ALREADY_MEMBER"
        ,"type": {"kind":"Int32"}
        ,"value": 5065
    }
    ,{
         "name": "ERROR_CLUSTER_LAST_INTERNAL_NETWORK"
        ,"type": {"kind":"Int32"}
        ,"value": 5066
    }
    ,{
         "name": "ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS"
        ,"type": {"kind":"Int32"}
        ,"value": 5067
    }
    ,{
         "name": "ERROR_INVALID_OPERATION_ON_QUORUM"
        ,"type": {"kind":"Int32"}
        ,"value": 5068
    }
    ,{
         "name": "ERROR_DEPENDENCY_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": 5069
    }
    ,{
         "name": "ERROR_CLUSTER_NODE_PAUSED"
        ,"type": {"kind":"Int32"}
        ,"value": 5070
    }
    ,{
         "name": "ERROR_NODE_CANT_HOST_RESOURCE"
        ,"type": {"kind":"Int32"}
        ,"value": 5071
    }
    ,{
         "name": "ERROR_CLUSTER_NODE_NOT_READY"
        ,"type": {"kind":"Int32"}
        ,"value": 5072
    }
    ,{
         "name": "ERROR_CLUSTER_NODE_SHUTTING_DOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 5073
    }
    ,{
         "name": "ERROR_CLUSTER_JOIN_ABORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 5074
    }
    ,{
         "name": "ERROR_CLUSTER_INCOMPATIBLE_VERSIONS"
        ,"type": {"kind":"Int32"}
        ,"value": 5075
    }
    ,{
         "name": "ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 5076
    }
    ,{
         "name": "ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED"
        ,"type": {"kind":"Int32"}
        ,"value": 5077
    }
    ,{
         "name": "ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 5078
    }
    ,{
         "name": "ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 5079
    }
    ,{
         "name": "ERROR_CLUSTER_RESNAME_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 5080
    }
    ,{
         "name": "ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED"
        ,"type": {"kind":"Int32"}
        ,"value": 5081
    }
    ,{
         "name": "ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST"
        ,"type": {"kind":"Int32"}
        ,"value": 5082
    }
    ,{
         "name": "ERROR_CLUSTER_DATABASE_SEQMISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 5083
    }
    ,{
         "name": "ERROR_RESMON_INVALID_STATE"
        ,"type": {"kind":"Int32"}
        ,"value": 5084
    }
    ,{
         "name": "ERROR_CLUSTER_GUM_NOT_LOCKER"
        ,"type": {"kind":"Int32"}
        ,"value": 5085
    }
    ,{
         "name": "ERROR_QUORUM_DISK_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 5086
    }
    ,{
         "name": "ERROR_DATABASE_BACKUP_CORRUPT"
        ,"type": {"kind":"Int32"}
        ,"value": 5087
    }
    ,{
         "name": "ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT"
        ,"type": {"kind":"Int32"}
        ,"value": 5088
    }
    ,{
         "name": "ERROR_RESOURCE_PROPERTY_UNCHANGEABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 5089
    }
    ,{
         "name": "ERROR_NO_ADMIN_ACCESS_POINT"
        ,"type": {"kind":"Int32"}
        ,"value": 5090
    }
    ,{
         "name": "ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE"
        ,"type": {"kind":"Int32"}
        ,"value": 5890
    }
    ,{
         "name": "ERROR_CLUSTER_QUORUMLOG_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 5891
    }
    ,{
         "name": "ERROR_CLUSTER_MEMBERSHIP_HALT"
        ,"type": {"kind":"Int32"}
        ,"value": 5892
    }
    ,{
         "name": "ERROR_CLUSTER_INSTANCE_ID_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 5893
    }
    ,{
         "name": "ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP"
        ,"type": {"kind":"Int32"}
        ,"value": 5894
    }
    ,{
         "name": "ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 5895
    }
    ,{
         "name": "ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP"
        ,"type": {"kind":"Int32"}
        ,"value": 5896
    }
    ,{
         "name": "ERROR_CLUSTER_PARAMETER_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 5897
    }
    ,{
         "name": "ERROR_NODE_CANNOT_BE_CLUSTERED"
        ,"type": {"kind":"Int32"}
        ,"value": 5898
    }
    ,{
         "name": "ERROR_CLUSTER_WRONG_OS_VERSION"
        ,"type": {"kind":"Int32"}
        ,"value": 5899
    }
    ,{
         "name": "ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 5900
    }
    ,{
         "name": "ERROR_CLUSCFG_ALREADY_COMMITTED"
        ,"type": {"kind":"Int32"}
        ,"value": 5901
    }
    ,{
         "name": "ERROR_CLUSCFG_ROLLBACK_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 5902
    }
    ,{
         "name": "ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT"
        ,"type": {"kind":"Int32"}
        ,"value": 5903
    }
    ,{
         "name": "ERROR_CLUSTER_OLD_VERSION"
        ,"type": {"kind":"Int32"}
        ,"value": 5904
    }
    ,{
         "name": "ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 5905
    }
    ,{
         "name": "ERROR_CLUSTER_NO_NET_ADAPTERS"
        ,"type": {"kind":"Int32"}
        ,"value": 5906
    }
    ,{
         "name": "ERROR_CLUSTER_POISONED"
        ,"type": {"kind":"Int32"}
        ,"value": 5907
    }
    ,{
         "name": "ERROR_CLUSTER_GROUP_MOVING"
        ,"type": {"kind":"Int32"}
        ,"value": 5908
    }
    ,{
         "name": "ERROR_CLUSTER_RESOURCE_TYPE_BUSY"
        ,"type": {"kind":"Int32"}
        ,"value": 5909
    }
    ,{
         "name": "ERROR_RESOURCE_CALL_TIMED_OUT"
        ,"type": {"kind":"Int32"}
        ,"value": 5910
    }
    ,{
         "name": "ERROR_INVALID_CLUSTER_IPV6_ADDRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 5911
    }
    ,{
         "name": "ERROR_CLUSTER_INTERNAL_INVALID_FUNCTION"
        ,"type": {"kind":"Int32"}
        ,"value": 5912
    }
    ,{
         "name": "ERROR_CLUSTER_PARAMETER_OUT_OF_BOUNDS"
        ,"type": {"kind":"Int32"}
        ,"value": 5913
    }
    ,{
         "name": "ERROR_CLUSTER_PARTIAL_SEND"
        ,"type": {"kind":"Int32"}
        ,"value": 5914
    }
    ,{
         "name": "ERROR_CLUSTER_REGISTRY_INVALID_FUNCTION"
        ,"type": {"kind":"Int32"}
        ,"value": 5915
    }
    ,{
         "name": "ERROR_CLUSTER_INVALID_STRING_TERMINATION"
        ,"type": {"kind":"Int32"}
        ,"value": 5916
    }
    ,{
         "name": "ERROR_CLUSTER_INVALID_STRING_FORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": 5917
    }
    ,{
         "name": "ERROR_CLUSTER_DATABASE_TRANSACTION_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 5918
    }
    ,{
         "name": "ERROR_CLUSTER_DATABASE_TRANSACTION_NOT_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 5919
    }
    ,{
         "name": "ERROR_CLUSTER_NULL_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": 5920
    }
    ,{
         "name": "ERROR_CLUSTER_PARTIAL_READ"
        ,"type": {"kind":"Int32"}
        ,"value": 5921
    }
    ,{
         "name": "ERROR_CLUSTER_PARTIAL_WRITE"
        ,"type": {"kind":"Int32"}
        ,"value": 5922
    }
    ,{
         "name": "ERROR_CLUSTER_CANT_DESERIALIZE_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": 5923
    }
    ,{
         "name": "ERROR_DEPENDENT_RESOURCE_PROPERTY_CONFLICT"
        ,"type": {"kind":"Int32"}
        ,"value": 5924
    }
    ,{
         "name": "ERROR_CLUSTER_NO_QUORUM"
        ,"type": {"kind":"Int32"}
        ,"value": 5925
    }
    ,{
         "name": "ERROR_CLUSTER_INVALID_IPV6_NETWORK"
        ,"type": {"kind":"Int32"}
        ,"value": 5926
    }
    ,{
         "name": "ERROR_CLUSTER_INVALID_IPV6_TUNNEL_NETWORK"
        ,"type": {"kind":"Int32"}
        ,"value": 5927
    }
    ,{
         "name": "ERROR_QUORUM_NOT_ALLOWED_IN_THIS_GROUP"
        ,"type": {"kind":"Int32"}
        ,"value": 5928
    }
    ,{
         "name": "ERROR_DEPENDENCY_TREE_TOO_COMPLEX"
        ,"type": {"kind":"Int32"}
        ,"value": 5929
    }
    ,{
         "name": "ERROR_EXCEPTION_IN_RESOURCE_CALL"
        ,"type": {"kind":"Int32"}
        ,"value": 5930
    }
    ,{
         "name": "ERROR_CLUSTER_RHS_FAILED_INITIALIZATION"
        ,"type": {"kind":"Int32"}
        ,"value": 5931
    }
    ,{
         "name": "ERROR_CLUSTER_NOT_INSTALLED"
        ,"type": {"kind":"Int32"}
        ,"value": 5932
    }
    ,{
         "name": "ERROR_CLUSTER_RESOURCES_MUST_BE_ONLINE_ON_THE_SAME_NODE"
        ,"type": {"kind":"Int32"}
        ,"value": 5933
    }
    ,{
         "name": "ERROR_CLUSTER_MAX_NODES_IN_CLUSTER"
        ,"type": {"kind":"Int32"}
        ,"value": 5934
    }
    ,{
         "name": "ERROR_CLUSTER_TOO_MANY_NODES"
        ,"type": {"kind":"Int32"}
        ,"value": 5935
    }
    ,{
         "name": "ERROR_CLUSTER_OBJECT_ALREADY_USED"
        ,"type": {"kind":"Int32"}
        ,"value": 5936
    }
    ,{
         "name": "ERROR_NONCORE_GROUPS_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 5937
    }
    ,{
         "name": "ERROR_FILE_SHARE_RESOURCE_CONFLICT"
        ,"type": {"kind":"Int32"}
        ,"value": 5938
    }
    ,{
         "name": "ERROR_CLUSTER_EVICT_INVALID_REQUEST"
        ,"type": {"kind":"Int32"}
        ,"value": 5939
    }
    ,{
         "name": "ERROR_CLUSTER_SINGLETON_RESOURCE"
        ,"type": {"kind":"Int32"}
        ,"value": 5940
    }
    ,{
         "name": "ERROR_CLUSTER_GROUP_SINGLETON_RESOURCE"
        ,"type": {"kind":"Int32"}
        ,"value": 5941
    }
    ,{
         "name": "ERROR_CLUSTER_RESOURCE_PROVIDER_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 5942
    }
    ,{
         "name": "ERROR_CLUSTER_RESOURCE_CONFIGURATION_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 5943
    }
    ,{
         "name": "ERROR_CLUSTER_GROUP_BUSY"
        ,"type": {"kind":"Int32"}
        ,"value": 5944
    }
    ,{
         "name": "ERROR_CLUSTER_NOT_SHARED_VOLUME"
        ,"type": {"kind":"Int32"}
        ,"value": 5945
    }
    ,{
         "name": "ERROR_CLUSTER_INVALID_SECURITY_DESCRIPTOR"
        ,"type": {"kind":"Int32"}
        ,"value": 5946
    }
    ,{
         "name": "ERROR_CLUSTER_SHARED_VOLUMES_IN_USE"
        ,"type": {"kind":"Int32"}
        ,"value": 5947
    }
    ,{
         "name": "ERROR_CLUSTER_USE_SHARED_VOLUMES_API"
        ,"type": {"kind":"Int32"}
        ,"value": 5948
    }
    ,{
         "name": "ERROR_CLUSTER_BACKUP_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 5949
    }
    ,{
         "name": "ERROR_NON_CSV_PATH"
        ,"type": {"kind":"Int32"}
        ,"value": 5950
    }
    ,{
         "name": "ERROR_CSV_VOLUME_NOT_LOCAL"
        ,"type": {"kind":"Int32"}
        ,"value": 5951
    }
    ,{
         "name": "ERROR_CLUSTER_WATCHDOG_TERMINATING"
        ,"type": {"kind":"Int32"}
        ,"value": 5952
    }
    ,{
         "name": "ERROR_CLUSTER_RESOURCE_VETOED_MOVE_INCOMPATIBLE_NODES"
        ,"type": {"kind":"Int32"}
        ,"value": 5953
    }
    ,{
         "name": "ERROR_CLUSTER_INVALID_NODE_WEIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 5954
    }
    ,{
         "name": "ERROR_CLUSTER_RESOURCE_VETOED_CALL"
        ,"type": {"kind":"Int32"}
        ,"value": 5955
    }
    ,{
         "name": "ERROR_RESMON_SYSTEM_RESOURCES_LACKING"
        ,"type": {"kind":"Int32"}
        ,"value": 5956
    }
    ,{
         "name": "ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_DESTINATION"
        ,"type": {"kind":"Int32"}
        ,"value": 5957
    }
    ,{
         "name": "ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_SOURCE"
        ,"type": {"kind":"Int32"}
        ,"value": 5958
    }
    ,{
         "name": "ERROR_CLUSTER_GROUP_QUEUED"
        ,"type": {"kind":"Int32"}
        ,"value": 5959
    }
    ,{
         "name": "ERROR_CLUSTER_RESOURCE_LOCKED_STATUS"
        ,"type": {"kind":"Int32"}
        ,"value": 5960
    }
    ,{
         "name": "ERROR_CLUSTER_SHARED_VOLUME_FAILOVER_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": 5961
    }
    ,{
         "name": "ERROR_CLUSTER_NODE_DRAIN_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 5962
    }
    ,{
         "name": "ERROR_CLUSTER_DISK_NOT_CONNECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 5963
    }
    ,{
         "name": "ERROR_DISK_NOT_CSV_CAPABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 5964
    }
    ,{
         "name": "ERROR_RESOURCE_NOT_IN_AVAILABLE_STORAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 5965
    }
    ,{
         "name": "ERROR_CLUSTER_SHARED_VOLUME_REDIRECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 5966
    }
    ,{
         "name": "ERROR_CLUSTER_SHARED_VOLUME_NOT_REDIRECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 5967
    }
    ,{
         "name": "ERROR_CLUSTER_CANNOT_RETURN_PROPERTIES"
        ,"type": {"kind":"Int32"}
        ,"value": 5968
    }
    ,{
         "name": "ERROR_CLUSTER_RESOURCE_CONTAINS_UNSUPPORTED_DIFF_AREA_FOR_SHARED_VOLUMES"
        ,"type": {"kind":"Int32"}
        ,"value": 5969
    }
    ,{
         "name": "ERROR_CLUSTER_RESOURCE_IS_IN_MAINTENANCE_MODE"
        ,"type": {"kind":"Int32"}
        ,"value": 5970
    }
    ,{
         "name": "ERROR_CLUSTER_AFFINITY_CONFLICT"
        ,"type": {"kind":"Int32"}
        ,"value": 5971
    }
    ,{
         "name": "ERROR_CLUSTER_RESOURCE_IS_REPLICA_VIRTUAL_MACHINE"
        ,"type": {"kind":"Int32"}
        ,"value": 5972
    }
    ,{
         "name": "ERROR_CLUSTER_UPGRADE_INCOMPATIBLE_VERSIONS"
        ,"type": {"kind":"Int32"}
        ,"value": 5973
    }
    ,{
         "name": "ERROR_CLUSTER_UPGRADE_FIX_QUORUM_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 5974
    }
    ,{
         "name": "ERROR_CLUSTER_UPGRADE_RESTART_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 5975
    }
    ,{
         "name": "ERROR_CLUSTER_UPGRADE_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 5976
    }
    ,{
         "name": "ERROR_CLUSTER_UPGRADE_INCOMPLETE"
        ,"type": {"kind":"Int32"}
        ,"value": 5977
    }
    ,{
         "name": "ERROR_CLUSTER_NODE_IN_GRACE_PERIOD"
        ,"type": {"kind":"Int32"}
        ,"value": 5978
    }
    ,{
         "name": "ERROR_CLUSTER_CSV_IO_PAUSE_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 5979
    }
    ,{
         "name": "ERROR_NODE_NOT_ACTIVE_CLUSTER_MEMBER"
        ,"type": {"kind":"Int32"}
        ,"value": 5980
    }
    ,{
         "name": "ERROR_CLUSTER_RESOURCE_NOT_MONITORED"
        ,"type": {"kind":"Int32"}
        ,"value": 5981
    }
    ,{
         "name": "ERROR_CLUSTER_RESOURCE_DOES_NOT_SUPPORT_UNMONITORED"
        ,"type": {"kind":"Int32"}
        ,"value": 5982
    }
    ,{
         "name": "ERROR_CLUSTER_RESOURCE_IS_REPLICATED"
        ,"type": {"kind":"Int32"}
        ,"value": 5983
    }
    ,{
         "name": "ERROR_CLUSTER_NODE_ISOLATED"
        ,"type": {"kind":"Int32"}
        ,"value": 5984
    }
    ,{
         "name": "ERROR_CLUSTER_NODE_QUARANTINED"
        ,"type": {"kind":"Int32"}
        ,"value": 5985
    }
    ,{
         "name": "ERROR_CLUSTER_DATABASE_UPDATE_CONDITION_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 5986
    }
    ,{
         "name": "ERROR_CLUSTER_SPACE_DEGRADED"
        ,"type": {"kind":"Int32"}
        ,"value": 5987
    }
    ,{
         "name": "ERROR_CLUSTER_TOKEN_DELEGATION_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 5988
    }
    ,{
         "name": "ERROR_CLUSTER_CSV_INVALID_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": 5989
    }
    ,{
         "name": "ERROR_CLUSTER_CSV_SUPPORTED_ONLY_ON_COORDINATOR"
        ,"type": {"kind":"Int32"}
        ,"value": 5990
    }
    ,{
         "name": "ERROR_GROUPSET_NOT_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 5991
    }
    ,{
         "name": "ERROR_GROUPSET_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 5992
    }
    ,{
         "name": "ERROR_GROUPSET_CANT_PROVIDE"
        ,"type": {"kind":"Int32"}
        ,"value": 5993
    }
    ,{
         "name": "ERROR_CLUSTER_FAULT_DOMAIN_PARENT_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 5994
    }
    ,{
         "name": "ERROR_CLUSTER_FAULT_DOMAIN_INVALID_HIERARCHY"
        ,"type": {"kind":"Int32"}
        ,"value": 5995
    }
    ,{
         "name": "ERROR_CLUSTER_FAULT_DOMAIN_FAILED_S2D_VALIDATION"
        ,"type": {"kind":"Int32"}
        ,"value": 5996
    }
    ,{
         "name": "ERROR_CLUSTER_FAULT_DOMAIN_S2D_CONNECTIVITY_LOSS"
        ,"type": {"kind":"Int32"}
        ,"value": 5997
    }
    ,{
         "name": "ERROR_CLUSTER_INVALID_INFRASTRUCTURE_FILESERVER_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 5998
    }
    ,{
         "name": "ERROR_CLUSTERSET_MANAGEMENT_CLUSTER_UNREACHABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 5999
    }
    ,{
         "name": "ERROR_ENCRYPTION_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 6000
    }
    ,{
         "name": "ERROR_DECRYPTION_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 6001
    }
    ,{
         "name": "ERROR_FILE_ENCRYPTED"
        ,"type": {"kind":"Int32"}
        ,"value": 6002
    }
    ,{
         "name": "ERROR_NO_RECOVERY_POLICY"
        ,"type": {"kind":"Int32"}
        ,"value": 6003
    }
    ,{
         "name": "ERROR_NO_EFS"
        ,"type": {"kind":"Int32"}
        ,"value": 6004
    }
    ,{
         "name": "ERROR_WRONG_EFS"
        ,"type": {"kind":"Int32"}
        ,"value": 6005
    }
    ,{
         "name": "ERROR_NO_USER_KEYS"
        ,"type": {"kind":"Int32"}
        ,"value": 6006
    }
    ,{
         "name": "ERROR_FILE_NOT_ENCRYPTED"
        ,"type": {"kind":"Int32"}
        ,"value": 6007
    }
    ,{
         "name": "ERROR_NOT_EXPORT_FORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": 6008
    }
    ,{
         "name": "ERROR_FILE_READ_ONLY"
        ,"type": {"kind":"Int32"}
        ,"value": 6009
    }
    ,{
         "name": "ERROR_DIR_EFS_DISALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": 6010
    }
    ,{
         "name": "ERROR_EFS_SERVER_NOT_TRUSTED"
        ,"type": {"kind":"Int32"}
        ,"value": 6011
    }
    ,{
         "name": "ERROR_BAD_RECOVERY_POLICY"
        ,"type": {"kind":"Int32"}
        ,"value": 6012
    }
    ,{
         "name": "ERROR_EFS_ALG_BLOB_TOO_BIG"
        ,"type": {"kind":"Int32"}
        ,"value": 6013
    }
    ,{
         "name": "ERROR_VOLUME_NOT_SUPPORT_EFS"
        ,"type": {"kind":"Int32"}
        ,"value": 6014
    }
    ,{
         "name": "ERROR_EFS_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 6015
    }
    ,{
         "name": "ERROR_EFS_VERSION_NOT_SUPPORT"
        ,"type": {"kind":"Int32"}
        ,"value": 6016
    }
    ,{
         "name": "ERROR_CS_ENCRYPTION_INVALID_SERVER_RESPONSE"
        ,"type": {"kind":"Int32"}
        ,"value": 6017
    }
    ,{
         "name": "ERROR_CS_ENCRYPTION_UNSUPPORTED_SERVER"
        ,"type": {"kind":"Int32"}
        ,"value": 6018
    }
    ,{
         "name": "ERROR_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE"
        ,"type": {"kind":"Int32"}
        ,"value": 6019
    }
    ,{
         "name": "ERROR_CS_ENCRYPTION_NEW_ENCRYPTED_FILE"
        ,"type": {"kind":"Int32"}
        ,"value": 6020
    }
    ,{
         "name": "ERROR_CS_ENCRYPTION_FILE_NOT_CSE"
        ,"type": {"kind":"Int32"}
        ,"value": 6021
    }
    ,{
         "name": "ERROR_ENCRYPTION_POLICY_DENIES_OPERATION"
        ,"type": {"kind":"Int32"}
        ,"value": 6022
    }
    ,{
         "name": "ERROR_WIP_ENCRYPTION_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 6023
    }
    ,{
         "name": "ERROR_NO_BROWSER_SERVERS_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 6118
    }
    ,{
         "name": "SCHED_E_SERVICE_NOT_LOCALSYSTEM"
        ,"type": {"kind":"Int32"}
        ,"value": 6200
    }
    ,{
         "name": "ERROR_CLUSTER_OBJECT_IS_CLUSTER_SET_VM"
        ,"type": {"kind":"Int32"}
        ,"value": 6250
    }
    ,{
         "name": "ERROR_LOG_SECTOR_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": 6600
    }
    ,{
         "name": "ERROR_LOG_SECTOR_PARITY_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": 6601
    }
    ,{
         "name": "ERROR_LOG_SECTOR_REMAPPED"
        ,"type": {"kind":"Int32"}
        ,"value": 6602
    }
    ,{
         "name": "ERROR_LOG_BLOCK_INCOMPLETE"
        ,"type": {"kind":"Int32"}
        ,"value": 6603
    }
    ,{
         "name": "ERROR_LOG_INVALID_RANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 6604
    }
    ,{
         "name": "ERROR_LOG_BLOCKS_EXHAUSTED"
        ,"type": {"kind":"Int32"}
        ,"value": 6605
    }
    ,{
         "name": "ERROR_LOG_READ_CONTEXT_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": 6606
    }
    ,{
         "name": "ERROR_LOG_RESTART_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": 6607
    }
    ,{
         "name": "ERROR_LOG_BLOCK_VERSION"
        ,"type": {"kind":"Int32"}
        ,"value": 6608
    }
    ,{
         "name": "ERROR_LOG_BLOCK_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": 6609
    }
    ,{
         "name": "ERROR_LOG_READ_MODE_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": 6610
    }
    ,{
         "name": "ERROR_LOG_NO_RESTART"
        ,"type": {"kind":"Int32"}
        ,"value": 6611
    }
    ,{
         "name": "ERROR_LOG_METADATA_CORRUPT"
        ,"type": {"kind":"Int32"}
        ,"value": 6612
    }
    ,{
         "name": "ERROR_LOG_METADATA_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": 6613
    }
    ,{
         "name": "ERROR_LOG_METADATA_INCONSISTENT"
        ,"type": {"kind":"Int32"}
        ,"value": 6614
    }
    ,{
         "name": "ERROR_LOG_RESERVATION_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": 6615
    }
    ,{
         "name": "ERROR_LOG_CANT_DELETE"
        ,"type": {"kind":"Int32"}
        ,"value": 6616
    }
    ,{
         "name": "ERROR_LOG_CONTAINER_LIMIT_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 6617
    }
    ,{
         "name": "ERROR_LOG_START_OF_LOG"
        ,"type": {"kind":"Int32"}
        ,"value": 6618
    }
    ,{
         "name": "ERROR_LOG_POLICY_ALREADY_INSTALLED"
        ,"type": {"kind":"Int32"}
        ,"value": 6619
    }
    ,{
         "name": "ERROR_LOG_POLICY_NOT_INSTALLED"
        ,"type": {"kind":"Int32"}
        ,"value": 6620
    }
    ,{
         "name": "ERROR_LOG_POLICY_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": 6621
    }
    ,{
         "name": "ERROR_LOG_POLICY_CONFLICT"
        ,"type": {"kind":"Int32"}
        ,"value": 6622
    }
    ,{
         "name": "ERROR_LOG_PINNED_ARCHIVE_TAIL"
        ,"type": {"kind":"Int32"}
        ,"value": 6623
    }
    ,{
         "name": "ERROR_LOG_RECORD_NONEXISTENT"
        ,"type": {"kind":"Int32"}
        ,"value": 6624
    }
    ,{
         "name": "ERROR_LOG_RECORDS_RESERVED_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": 6625
    }
    ,{
         "name": "ERROR_LOG_SPACE_RESERVED_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": 6626
    }
    ,{
         "name": "ERROR_LOG_TAIL_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": 6627
    }
    ,{
         "name": "ERROR_LOG_FULL"
        ,"type": {"kind":"Int32"}
        ,"value": 6628
    }
    ,{
         "name": "ERROR_COULD_NOT_RESIZE_LOG"
        ,"type": {"kind":"Int32"}
        ,"value": 6629
    }
    ,{
         "name": "ERROR_LOG_MULTIPLEXED"
        ,"type": {"kind":"Int32"}
        ,"value": 6630
    }
    ,{
         "name": "ERROR_LOG_DEDICATED"
        ,"type": {"kind":"Int32"}
        ,"value": 6631
    }
    ,{
         "name": "ERROR_LOG_ARCHIVE_NOT_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 6632
    }
    ,{
         "name": "ERROR_LOG_ARCHIVE_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 6633
    }
    ,{
         "name": "ERROR_LOG_EPHEMERAL"
        ,"type": {"kind":"Int32"}
        ,"value": 6634
    }
    ,{
         "name": "ERROR_LOG_NOT_ENOUGH_CONTAINERS"
        ,"type": {"kind":"Int32"}
        ,"value": 6635
    }
    ,{
         "name": "ERROR_LOG_CLIENT_ALREADY_REGISTERED"
        ,"type": {"kind":"Int32"}
        ,"value": 6636
    }
    ,{
         "name": "ERROR_LOG_CLIENT_NOT_REGISTERED"
        ,"type": {"kind":"Int32"}
        ,"value": 6637
    }
    ,{
         "name": "ERROR_LOG_FULL_HANDLER_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 6638
    }
    ,{
         "name": "ERROR_LOG_CONTAINER_READ_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 6639
    }
    ,{
         "name": "ERROR_LOG_CONTAINER_WRITE_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 6640
    }
    ,{
         "name": "ERROR_LOG_CONTAINER_OPEN_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 6641
    }
    ,{
         "name": "ERROR_LOG_CONTAINER_STATE_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": 6642
    }
    ,{
         "name": "ERROR_LOG_STATE_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": 6643
    }
    ,{
         "name": "ERROR_LOG_PINNED"
        ,"type": {"kind":"Int32"}
        ,"value": 6644
    }
    ,{
         "name": "ERROR_LOG_METADATA_FLUSH_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 6645
    }
    ,{
         "name": "ERROR_LOG_INCONSISTENT_SECURITY"
        ,"type": {"kind":"Int32"}
        ,"value": 6646
    }
    ,{
         "name": "ERROR_LOG_APPENDED_FLUSH_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 6647
    }
    ,{
         "name": "ERROR_LOG_PINNED_RESERVATION"
        ,"type": {"kind":"Int32"}
        ,"value": 6648
    }
    ,{
         "name": "ERROR_INVALID_TRANSACTION"
        ,"type": {"kind":"Int32"}
        ,"value": 6700
    }
    ,{
         "name": "ERROR_TRANSACTION_NOT_ACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 6701
    }
    ,{
         "name": "ERROR_TRANSACTION_REQUEST_NOT_VALID"
        ,"type": {"kind":"Int32"}
        ,"value": 6702
    }
    ,{
         "name": "ERROR_TRANSACTION_NOT_REQUESTED"
        ,"type": {"kind":"Int32"}
        ,"value": 6703
    }
    ,{
         "name": "ERROR_TRANSACTION_ALREADY_ABORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 6704
    }
    ,{
         "name": "ERROR_TRANSACTION_ALREADY_COMMITTED"
        ,"type": {"kind":"Int32"}
        ,"value": 6705
    }
    ,{
         "name": "ERROR_TM_INITIALIZATION_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 6706
    }
    ,{
         "name": "ERROR_RESOURCEMANAGER_READ_ONLY"
        ,"type": {"kind":"Int32"}
        ,"value": 6707
    }
    ,{
         "name": "ERROR_TRANSACTION_NOT_JOINED"
        ,"type": {"kind":"Int32"}
        ,"value": 6708
    }
    ,{
         "name": "ERROR_TRANSACTION_SUPERIOR_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 6709
    }
    ,{
         "name": "ERROR_CRM_PROTOCOL_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 6710
    }
    ,{
         "name": "ERROR_TRANSACTION_PROPAGATION_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 6711
    }
    ,{
         "name": "ERROR_CRM_PROTOCOL_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 6712
    }
    ,{
         "name": "ERROR_TRANSACTION_INVALID_MARSHALL_BUFFER"
        ,"type": {"kind":"Int32"}
        ,"value": 6713
    }
    ,{
         "name": "ERROR_CURRENT_TRANSACTION_NOT_VALID"
        ,"type": {"kind":"Int32"}
        ,"value": 6714
    }
    ,{
         "name": "ERROR_TRANSACTION_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 6715
    }
    ,{
         "name": "ERROR_RESOURCEMANAGER_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 6716
    }
    ,{
         "name": "ERROR_ENLISTMENT_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 6717
    }
    ,{
         "name": "ERROR_TRANSACTIONMANAGER_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 6718
    }
    ,{
         "name": "ERROR_TRANSACTIONMANAGER_NOT_ONLINE"
        ,"type": {"kind":"Int32"}
        ,"value": 6719
    }
    ,{
         "name": "ERROR_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION"
        ,"type": {"kind":"Int32"}
        ,"value": 6720
    }
    ,{
         "name": "ERROR_TRANSACTION_NOT_ROOT"
        ,"type": {"kind":"Int32"}
        ,"value": 6721
    }
    ,{
         "name": "ERROR_TRANSACTION_OBJECT_EXPIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 6722
    }
    ,{
         "name": "ERROR_TRANSACTION_RESPONSE_NOT_ENLISTED"
        ,"type": {"kind":"Int32"}
        ,"value": 6723
    }
    ,{
         "name": "ERROR_TRANSACTION_RECORD_TOO_LONG"
        ,"type": {"kind":"Int32"}
        ,"value": 6724
    }
    ,{
         "name": "ERROR_IMPLICIT_TRANSACTION_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 6725
    }
    ,{
         "name": "ERROR_TRANSACTION_INTEGRITY_VIOLATED"
        ,"type": {"kind":"Int32"}
        ,"value": 6726
    }
    ,{
         "name": "ERROR_TRANSACTIONMANAGER_IDENTITY_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 6727
    }
    ,{
         "name": "ERROR_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT"
        ,"type": {"kind":"Int32"}
        ,"value": 6728
    }
    ,{
         "name": "ERROR_TRANSACTION_MUST_WRITETHROUGH"
        ,"type": {"kind":"Int32"}
        ,"value": 6729
    }
    ,{
         "name": "ERROR_TRANSACTION_NO_SUPERIOR"
        ,"type": {"kind":"Int32"}
        ,"value": 6730
    }
    ,{
         "name": "ERROR_HEURISTIC_DAMAGE_POSSIBLE"
        ,"type": {"kind":"Int32"}
        ,"value": 6731
    }
    ,{
         "name": "ERROR_TRANSACTIONAL_CONFLICT"
        ,"type": {"kind":"Int32"}
        ,"value": 6800
    }
    ,{
         "name": "ERROR_RM_NOT_ACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 6801
    }
    ,{
         "name": "ERROR_RM_METADATA_CORRUPT"
        ,"type": {"kind":"Int32"}
        ,"value": 6802
    }
    ,{
         "name": "ERROR_DIRECTORY_NOT_RM"
        ,"type": {"kind":"Int32"}
        ,"value": 6803
    }
    ,{
         "name": "ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE"
        ,"type": {"kind":"Int32"}
        ,"value": 6805
    }
    ,{
         "name": "ERROR_LOG_RESIZE_INVALID_SIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 6806
    }
    ,{
         "name": "ERROR_OBJECT_NO_LONGER_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 6807
    }
    ,{
         "name": "ERROR_STREAM_MINIVERSION_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 6808
    }
    ,{
         "name": "ERROR_STREAM_MINIVERSION_NOT_VALID"
        ,"type": {"kind":"Int32"}
        ,"value": 6809
    }
    ,{
         "name": "ERROR_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION"
        ,"type": {"kind":"Int32"}
        ,"value": 6810
    }
    ,{
         "name": "ERROR_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT"
        ,"type": {"kind":"Int32"}
        ,"value": 6811
    }
    ,{
         "name": "ERROR_CANT_CREATE_MORE_STREAM_MINIVERSIONS"
        ,"type": {"kind":"Int32"}
        ,"value": 6812
    }
    ,{
         "name": "ERROR_REMOTE_FILE_VERSION_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 6814
    }
    ,{
         "name": "ERROR_HANDLE_NO_LONGER_VALID"
        ,"type": {"kind":"Int32"}
        ,"value": 6815
    }
    ,{
         "name": "ERROR_NO_TXF_METADATA"
        ,"type": {"kind":"Int32"}
        ,"value": 6816
    }
    ,{
         "name": "ERROR_LOG_CORRUPTION_DETECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 6817
    }
    ,{
         "name": "ERROR_CANT_RECOVER_WITH_HANDLE_OPEN"
        ,"type": {"kind":"Int32"}
        ,"value": 6818
    }
    ,{
         "name": "ERROR_RM_DISCONNECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 6819
    }
    ,{
         "name": "ERROR_ENLISTMENT_NOT_SUPERIOR"
        ,"type": {"kind":"Int32"}
        ,"value": 6820
    }
    ,{
         "name": "ERROR_RECOVERY_NOT_NEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 6821
    }
    ,{
         "name": "ERROR_RM_ALREADY_STARTED"
        ,"type": {"kind":"Int32"}
        ,"value": 6822
    }
    ,{
         "name": "ERROR_FILE_IDENTITY_NOT_PERSISTENT"
        ,"type": {"kind":"Int32"}
        ,"value": 6823
    }
    ,{
         "name": "ERROR_CANT_BREAK_TRANSACTIONAL_DEPENDENCY"
        ,"type": {"kind":"Int32"}
        ,"value": 6824
    }
    ,{
         "name": "ERROR_CANT_CROSS_RM_BOUNDARY"
        ,"type": {"kind":"Int32"}
        ,"value": 6825
    }
    ,{
         "name": "ERROR_TXF_DIR_NOT_EMPTY"
        ,"type": {"kind":"Int32"}
        ,"value": 6826
    }
    ,{
         "name": "ERROR_INDOUBT_TRANSACTIONS_EXIST"
        ,"type": {"kind":"Int32"}
        ,"value": 6827
    }
    ,{
         "name": "ERROR_TM_VOLATILE"
        ,"type": {"kind":"Int32"}
        ,"value": 6828
    }
    ,{
         "name": "ERROR_ROLLBACK_TIMER_EXPIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 6829
    }
    ,{
         "name": "ERROR_TXF_ATTRIBUTE_CORRUPT"
        ,"type": {"kind":"Int32"}
        ,"value": 6830
    }
    ,{
         "name": "ERROR_EFS_NOT_ALLOWED_IN_TRANSACTION"
        ,"type": {"kind":"Int32"}
        ,"value": 6831
    }
    ,{
         "name": "ERROR_TRANSACTIONAL_OPEN_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": 6832
    }
    ,{
         "name": "ERROR_LOG_GROWTH_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 6833
    }
    ,{
         "name": "ERROR_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE"
        ,"type": {"kind":"Int32"}
        ,"value": 6834
    }
    ,{
         "name": "ERROR_TXF_METADATA_ALREADY_PRESENT"
        ,"type": {"kind":"Int32"}
        ,"value": 6835
    }
    ,{
         "name": "ERROR_TRANSACTION_SCOPE_CALLBACKS_NOT_SET"
        ,"type": {"kind":"Int32"}
        ,"value": 6836
    }
    ,{
         "name": "ERROR_TRANSACTION_REQUIRED_PROMOTION"
        ,"type": {"kind":"Int32"}
        ,"value": 6837
    }
    ,{
         "name": "ERROR_CANNOT_EXECUTE_FILE_IN_TRANSACTION"
        ,"type": {"kind":"Int32"}
        ,"value": 6838
    }
    ,{
         "name": "ERROR_TRANSACTIONS_NOT_FROZEN"
        ,"type": {"kind":"Int32"}
        ,"value": 6839
    }
    ,{
         "name": "ERROR_TRANSACTION_FREEZE_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 6840
    }
    ,{
         "name": "ERROR_NOT_SNAPSHOT_VOLUME"
        ,"type": {"kind":"Int32"}
        ,"value": 6841
    }
    ,{
         "name": "ERROR_NO_SAVEPOINT_WITH_OPEN_FILES"
        ,"type": {"kind":"Int32"}
        ,"value": 6842
    }
    ,{
         "name": "ERROR_DATA_LOST_REPAIR"
        ,"type": {"kind":"Int32"}
        ,"value": 6843
    }
    ,{
         "name": "ERROR_SPARSE_NOT_ALLOWED_IN_TRANSACTION"
        ,"type": {"kind":"Int32"}
        ,"value": 6844
    }
    ,{
         "name": "ERROR_TM_IDENTITY_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 6845
    }
    ,{
         "name": "ERROR_FLOATED_SECTION"
        ,"type": {"kind":"Int32"}
        ,"value": 6846
    }
    ,{
         "name": "ERROR_CANNOT_ACCEPT_TRANSACTED_WORK"
        ,"type": {"kind":"Int32"}
        ,"value": 6847
    }
    ,{
         "name": "ERROR_CANNOT_ABORT_TRANSACTIONS"
        ,"type": {"kind":"Int32"}
        ,"value": 6848
    }
    ,{
         "name": "ERROR_BAD_CLUSTERS"
        ,"type": {"kind":"Int32"}
        ,"value": 6849
    }
    ,{
         "name": "ERROR_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION"
        ,"type": {"kind":"Int32"}
        ,"value": 6850
    }
    ,{
         "name": "ERROR_VOLUME_DIRTY"
        ,"type": {"kind":"Int32"}
        ,"value": 6851
    }
    ,{
         "name": "ERROR_NO_LINK_TRACKING_IN_TRANSACTION"
        ,"type": {"kind":"Int32"}
        ,"value": 6852
    }
    ,{
         "name": "ERROR_OPERATION_NOT_SUPPORTED_IN_TRANSACTION"
        ,"type": {"kind":"Int32"}
        ,"value": 6853
    }
    ,{
         "name": "ERROR_EXPIRED_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": 6854
    }
    ,{
         "name": "ERROR_TRANSACTION_NOT_ENLISTED"
        ,"type": {"kind":"Int32"}
        ,"value": 6855
    }
    ,{
         "name": "ERROR_CTX_WINSTATION_NAME_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": 7001
    }
    ,{
         "name": "ERROR_CTX_INVALID_PD"
        ,"type": {"kind":"Int32"}
        ,"value": 7002
    }
    ,{
         "name": "ERROR_CTX_PD_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 7003
    }
    ,{
         "name": "ERROR_CTX_WD_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 7004
    }
    ,{
         "name": "ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY"
        ,"type": {"kind":"Int32"}
        ,"value": 7005
    }
    ,{
         "name": "ERROR_CTX_SERVICE_NAME_COLLISION"
        ,"type": {"kind":"Int32"}
        ,"value": 7006
    }
    ,{
         "name": "ERROR_CTX_CLOSE_PENDING"
        ,"type": {"kind":"Int32"}
        ,"value": 7007
    }
    ,{
         "name": "ERROR_CTX_NO_OUTBUF"
        ,"type": {"kind":"Int32"}
        ,"value": 7008
    }
    ,{
         "name": "ERROR_CTX_MODEM_INF_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 7009
    }
    ,{
         "name": "ERROR_CTX_INVALID_MODEMNAME"
        ,"type": {"kind":"Int32"}
        ,"value": 7010
    }
    ,{
         "name": "ERROR_CTX_MODEM_RESPONSE_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 7011
    }
    ,{
         "name": "ERROR_CTX_MODEM_RESPONSE_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 7012
    }
    ,{
         "name": "ERROR_CTX_MODEM_RESPONSE_NO_CARRIER"
        ,"type": {"kind":"Int32"}
        ,"value": 7013
    }
    ,{
         "name": "ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE"
        ,"type": {"kind":"Int32"}
        ,"value": 7014
    }
    ,{
         "name": "ERROR_CTX_MODEM_RESPONSE_BUSY"
        ,"type": {"kind":"Int32"}
        ,"value": 7015
    }
    ,{
         "name": "ERROR_CTX_MODEM_RESPONSE_VOICE"
        ,"type": {"kind":"Int32"}
        ,"value": 7016
    }
    ,{
         "name": "ERROR_CTX_TD_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 7017
    }
    ,{
         "name": "ERROR_CTX_WINSTATION_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 7022
    }
    ,{
         "name": "ERROR_CTX_WINSTATION_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 7023
    }
    ,{
         "name": "ERROR_CTX_WINSTATION_BUSY"
        ,"type": {"kind":"Int32"}
        ,"value": 7024
    }
    ,{
         "name": "ERROR_CTX_BAD_VIDEO_MODE"
        ,"type": {"kind":"Int32"}
        ,"value": 7025
    }
    ,{
         "name": "ERROR_CTX_GRAPHICS_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": 7035
    }
    ,{
         "name": "ERROR_CTX_LOGON_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 7037
    }
    ,{
         "name": "ERROR_CTX_NOT_CONSOLE"
        ,"type": {"kind":"Int32"}
        ,"value": 7038
    }
    ,{
         "name": "ERROR_CTX_CLIENT_QUERY_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 7040
    }
    ,{
         "name": "ERROR_CTX_CONSOLE_DISCONNECT"
        ,"type": {"kind":"Int32"}
        ,"value": 7041
    }
    ,{
         "name": "ERROR_CTX_CONSOLE_CONNECT"
        ,"type": {"kind":"Int32"}
        ,"value": 7042
    }
    ,{
         "name": "ERROR_CTX_SHADOW_DENIED"
        ,"type": {"kind":"Int32"}
        ,"value": 7044
    }
    ,{
         "name": "ERROR_CTX_WINSTATION_ACCESS_DENIED"
        ,"type": {"kind":"Int32"}
        ,"value": 7045
    }
    ,{
         "name": "ERROR_CTX_INVALID_WD"
        ,"type": {"kind":"Int32"}
        ,"value": 7049
    }
    ,{
         "name": "ERROR_CTX_SHADOW_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": 7050
    }
    ,{
         "name": "ERROR_CTX_SHADOW_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 7051
    }
    ,{
         "name": "ERROR_CTX_CLIENT_LICENSE_IN_USE"
        ,"type": {"kind":"Int32"}
        ,"value": 7052
    }
    ,{
         "name": "ERROR_CTX_CLIENT_LICENSE_NOT_SET"
        ,"type": {"kind":"Int32"}
        ,"value": 7053
    }
    ,{
         "name": "ERROR_CTX_LICENSE_NOT_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 7054
    }
    ,{
         "name": "ERROR_CTX_LICENSE_CLIENT_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": 7055
    }
    ,{
         "name": "ERROR_CTX_LICENSE_EXPIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 7056
    }
    ,{
         "name": "ERROR_CTX_SHADOW_NOT_RUNNING"
        ,"type": {"kind":"Int32"}
        ,"value": 7057
    }
    ,{
         "name": "ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 7058
    }
    ,{
         "name": "ERROR_ACTIVATION_COUNT_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 7059
    }
    ,{
         "name": "ERROR_CTX_WINSTATIONS_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 7060
    }
    ,{
         "name": "ERROR_CTX_ENCRYPTION_LEVEL_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 7061
    }
    ,{
         "name": "ERROR_CTX_SESSION_IN_USE"
        ,"type": {"kind":"Int32"}
        ,"value": 7062
    }
    ,{
         "name": "ERROR_CTX_NO_FORCE_LOGOFF"
        ,"type": {"kind":"Int32"}
        ,"value": 7063
    }
    ,{
         "name": "ERROR_CTX_ACCOUNT_RESTRICTION"
        ,"type": {"kind":"Int32"}
        ,"value": 7064
    }
    ,{
         "name": "ERROR_RDP_PROTOCOL_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 7065
    }
    ,{
         "name": "ERROR_CTX_CDM_CONNECT"
        ,"type": {"kind":"Int32"}
        ,"value": 7066
    }
    ,{
         "name": "ERROR_CTX_CDM_DISCONNECT"
        ,"type": {"kind":"Int32"}
        ,"value": 7067
    }
    ,{
         "name": "ERROR_CTX_SECURITY_LAYER_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 7068
    }
    ,{
         "name": "ERROR_TS_INCOMPATIBLE_SESSIONS"
        ,"type": {"kind":"Int32"}
        ,"value": 7069
    }
    ,{
         "name": "ERROR_TS_VIDEO_SUBSYSTEM_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 7070
    }
    ,{
         "name": "FRS_ERR_INVALID_API_SEQUENCE"
        ,"type": {"kind":"Int32"}
        ,"value": 8001
    }
    ,{
         "name": "FRS_ERR_STARTING_SERVICE"
        ,"type": {"kind":"Int32"}
        ,"value": 8002
    }
    ,{
         "name": "FRS_ERR_STOPPING_SERVICE"
        ,"type": {"kind":"Int32"}
        ,"value": 8003
    }
    ,{
         "name": "FRS_ERR_INTERNAL_API"
        ,"type": {"kind":"Int32"}
        ,"value": 8004
    }
    ,{
         "name": "FRS_ERR_INTERNAL"
        ,"type": {"kind":"Int32"}
        ,"value": 8005
    }
    ,{
         "name": "FRS_ERR_SERVICE_COMM"
        ,"type": {"kind":"Int32"}
        ,"value": 8006
    }
    ,{
         "name": "FRS_ERR_INSUFFICIENT_PRIV"
        ,"type": {"kind":"Int32"}
        ,"value": 8007
    }
    ,{
         "name": "FRS_ERR_AUTHENTICATION"
        ,"type": {"kind":"Int32"}
        ,"value": 8008
    }
    ,{
         "name": "FRS_ERR_PARENT_INSUFFICIENT_PRIV"
        ,"type": {"kind":"Int32"}
        ,"value": 8009
    }
    ,{
         "name": "FRS_ERR_PARENT_AUTHENTICATION"
        ,"type": {"kind":"Int32"}
        ,"value": 8010
    }
    ,{
         "name": "FRS_ERR_CHILD_TO_PARENT_COMM"
        ,"type": {"kind":"Int32"}
        ,"value": 8011
    }
    ,{
         "name": "FRS_ERR_PARENT_TO_CHILD_COMM"
        ,"type": {"kind":"Int32"}
        ,"value": 8012
    }
    ,{
         "name": "FRS_ERR_SYSVOL_POPULATE"
        ,"type": {"kind":"Int32"}
        ,"value": 8013
    }
    ,{
         "name": "FRS_ERR_SYSVOL_POPULATE_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 8014
    }
    ,{
         "name": "FRS_ERR_SYSVOL_IS_BUSY"
        ,"type": {"kind":"Int32"}
        ,"value": 8015
    }
    ,{
         "name": "FRS_ERR_SYSVOL_DEMOTE"
        ,"type": {"kind":"Int32"}
        ,"value": 8016
    }
    ,{
         "name": "FRS_ERR_INVALID_SERVICE_PARAMETER"
        ,"type": {"kind":"Int32"}
        ,"value": 8017
    }
    ,{
         "name": "ERROR_DS_NOT_INSTALLED"
        ,"type": {"kind":"Int32"}
        ,"value": 8200
    }
    ,{
         "name": "ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY"
        ,"type": {"kind":"Int32"}
        ,"value": 8201
    }
    ,{
         "name": "ERROR_DS_NO_ATTRIBUTE_OR_VALUE"
        ,"type": {"kind":"Int32"}
        ,"value": 8202
    }
    ,{
         "name": "ERROR_DS_INVALID_ATTRIBUTE_SYNTAX"
        ,"type": {"kind":"Int32"}
        ,"value": 8203
    }
    ,{
         "name": "ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED"
        ,"type": {"kind":"Int32"}
        ,"value": 8204
    }
    ,{
         "name": "ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 8205
    }
    ,{
         "name": "ERROR_DS_BUSY"
        ,"type": {"kind":"Int32"}
        ,"value": 8206
    }
    ,{
         "name": "ERROR_DS_UNAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 8207
    }
    ,{
         "name": "ERROR_DS_NO_RIDS_ALLOCATED"
        ,"type": {"kind":"Int32"}
        ,"value": 8208
    }
    ,{
         "name": "ERROR_DS_NO_MORE_RIDS"
        ,"type": {"kind":"Int32"}
        ,"value": 8209
    }
    ,{
         "name": "ERROR_DS_INCORRECT_ROLE_OWNER"
        ,"type": {"kind":"Int32"}
        ,"value": 8210
    }
    ,{
         "name": "ERROR_DS_RIDMGR_INIT_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 8211
    }
    ,{
         "name": "ERROR_DS_OBJ_CLASS_VIOLATION"
        ,"type": {"kind":"Int32"}
        ,"value": 8212
    }
    ,{
         "name": "ERROR_DS_CANT_ON_NON_LEAF"
        ,"type": {"kind":"Int32"}
        ,"value": 8213
    }
    ,{
         "name": "ERROR_DS_CANT_ON_RDN"
        ,"type": {"kind":"Int32"}
        ,"value": 8214
    }
    ,{
         "name": "ERROR_DS_CANT_MOD_OBJ_CLASS"
        ,"type": {"kind":"Int32"}
        ,"value": 8215
    }
    ,{
         "name": "ERROR_DS_CROSS_DOM_MOVE_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 8216
    }
    ,{
         "name": "ERROR_DS_GC_NOT_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 8217
    }
    ,{
         "name": "ERROR_SHARED_POLICY"
        ,"type": {"kind":"Int32"}
        ,"value": 8218
    }
    ,{
         "name": "ERROR_POLICY_OBJECT_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 8219
    }
    ,{
         "name": "ERROR_POLICY_ONLY_IN_DS"
        ,"type": {"kind":"Int32"}
        ,"value": 8220
    }
    ,{
         "name": "ERROR_PROMOTION_ACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 8221
    }
    ,{
         "name": "ERROR_NO_PROMOTION_ACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 8222
    }
    ,{
         "name": "ERROR_DS_OPERATIONS_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 8224
    }
    ,{
         "name": "ERROR_DS_PROTOCOL_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 8225
    }
    ,{
         "name": "ERROR_DS_TIMELIMIT_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 8226
    }
    ,{
         "name": "ERROR_DS_SIZELIMIT_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 8227
    }
    ,{
         "name": "ERROR_DS_ADMIN_LIMIT_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 8228
    }
    ,{
         "name": "ERROR_DS_COMPARE_FALSE"
        ,"type": {"kind":"Int32"}
        ,"value": 8229
    }
    ,{
         "name": "ERROR_DS_COMPARE_TRUE"
        ,"type": {"kind":"Int32"}
        ,"value": 8230
    }
    ,{
         "name": "ERROR_DS_AUTH_METHOD_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 8231
    }
    ,{
         "name": "ERROR_DS_STRONG_AUTH_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 8232
    }
    ,{
         "name": "ERROR_DS_INAPPROPRIATE_AUTH"
        ,"type": {"kind":"Int32"}
        ,"value": 8233
    }
    ,{
         "name": "ERROR_DS_AUTH_UNKNOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 8234
    }
    ,{
         "name": "ERROR_DS_REFERRAL"
        ,"type": {"kind":"Int32"}
        ,"value": 8235
    }
    ,{
         "name": "ERROR_DS_UNAVAILABLE_CRIT_EXTENSION"
        ,"type": {"kind":"Int32"}
        ,"value": 8236
    }
    ,{
         "name": "ERROR_DS_CONFIDENTIALITY_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 8237
    }
    ,{
         "name": "ERROR_DS_INAPPROPRIATE_MATCHING"
        ,"type": {"kind":"Int32"}
        ,"value": 8238
    }
    ,{
         "name": "ERROR_DS_CONSTRAINT_VIOLATION"
        ,"type": {"kind":"Int32"}
        ,"value": 8239
    }
    ,{
         "name": "ERROR_DS_NO_SUCH_OBJECT"
        ,"type": {"kind":"Int32"}
        ,"value": 8240
    }
    ,{
         "name": "ERROR_DS_ALIAS_PROBLEM"
        ,"type": {"kind":"Int32"}
        ,"value": 8241
    }
    ,{
         "name": "ERROR_DS_INVALID_DN_SYNTAX"
        ,"type": {"kind":"Int32"}
        ,"value": 8242
    }
    ,{
         "name": "ERROR_DS_IS_LEAF"
        ,"type": {"kind":"Int32"}
        ,"value": 8243
    }
    ,{
         "name": "ERROR_DS_ALIAS_DEREF_PROBLEM"
        ,"type": {"kind":"Int32"}
        ,"value": 8244
    }
    ,{
         "name": "ERROR_DS_UNWILLING_TO_PERFORM"
        ,"type": {"kind":"Int32"}
        ,"value": 8245
    }
    ,{
         "name": "ERROR_DS_LOOP_DETECT"
        ,"type": {"kind":"Int32"}
        ,"value": 8246
    }
    ,{
         "name": "ERROR_DS_NAMING_VIOLATION"
        ,"type": {"kind":"Int32"}
        ,"value": 8247
    }
    ,{
         "name": "ERROR_DS_OBJECT_RESULTS_TOO_LARGE"
        ,"type": {"kind":"Int32"}
        ,"value": 8248
    }
    ,{
         "name": "ERROR_DS_AFFECTS_MULTIPLE_DSAS"
        ,"type": {"kind":"Int32"}
        ,"value": 8249
    }
    ,{
         "name": "ERROR_DS_SERVER_DOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 8250
    }
    ,{
         "name": "ERROR_DS_LOCAL_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 8251
    }
    ,{
         "name": "ERROR_DS_ENCODING_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 8252
    }
    ,{
         "name": "ERROR_DS_DECODING_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 8253
    }
    ,{
         "name": "ERROR_DS_FILTER_UNKNOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 8254
    }
    ,{
         "name": "ERROR_DS_PARAM_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 8255
    }
    ,{
         "name": "ERROR_DS_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 8256
    }
    ,{
         "name": "ERROR_DS_NO_RESULTS_RETURNED"
        ,"type": {"kind":"Int32"}
        ,"value": 8257
    }
    ,{
         "name": "ERROR_DS_CONTROL_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 8258
    }
    ,{
         "name": "ERROR_DS_CLIENT_LOOP"
        ,"type": {"kind":"Int32"}
        ,"value": 8259
    }
    ,{
         "name": "ERROR_DS_REFERRAL_LIMIT_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 8260
    }
    ,{
         "name": "ERROR_DS_SORT_CONTROL_MISSING"
        ,"type": {"kind":"Int32"}
        ,"value": 8261
    }
    ,{
         "name": "ERROR_DS_OFFSET_RANGE_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 8262
    }
    ,{
         "name": "ERROR_DS_RIDMGR_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 8263
    }
    ,{
         "name": "ERROR_DS_ROOT_MUST_BE_NC"
        ,"type": {"kind":"Int32"}
        ,"value": 8301
    }
    ,{
         "name": "ERROR_DS_ADD_REPLICA_INHIBITED"
        ,"type": {"kind":"Int32"}
        ,"value": 8302
    }
    ,{
         "name": "ERROR_DS_ATT_NOT_DEF_IN_SCHEMA"
        ,"type": {"kind":"Int32"}
        ,"value": 8303
    }
    ,{
         "name": "ERROR_DS_MAX_OBJ_SIZE_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 8304
    }
    ,{
         "name": "ERROR_DS_OBJ_STRING_NAME_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 8305
    }
    ,{
         "name": "ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA"
        ,"type": {"kind":"Int32"}
        ,"value": 8306
    }
    ,{
         "name": "ERROR_DS_RDN_DOESNT_MATCH_SCHEMA"
        ,"type": {"kind":"Int32"}
        ,"value": 8307
    }
    ,{
         "name": "ERROR_DS_NO_REQUESTED_ATTS_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 8308
    }
    ,{
         "name": "ERROR_DS_USER_BUFFER_TO_SMALL"
        ,"type": {"kind":"Int32"}
        ,"value": 8309
    }
    ,{
         "name": "ERROR_DS_ATT_IS_NOT_ON_OBJ"
        ,"type": {"kind":"Int32"}
        ,"value": 8310
    }
    ,{
         "name": "ERROR_DS_ILLEGAL_MOD_OPERATION"
        ,"type": {"kind":"Int32"}
        ,"value": 8311
    }
    ,{
         "name": "ERROR_DS_OBJ_TOO_LARGE"
        ,"type": {"kind":"Int32"}
        ,"value": 8312
    }
    ,{
         "name": "ERROR_DS_BAD_INSTANCE_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 8313
    }
    ,{
         "name": "ERROR_DS_MASTERDSA_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 8314
    }
    ,{
         "name": "ERROR_DS_OBJECT_CLASS_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 8315
    }
    ,{
         "name": "ERROR_DS_MISSING_REQUIRED_ATT"
        ,"type": {"kind":"Int32"}
        ,"value": 8316
    }
    ,{
         "name": "ERROR_DS_ATT_NOT_DEF_FOR_CLASS"
        ,"type": {"kind":"Int32"}
        ,"value": 8317
    }
    ,{
         "name": "ERROR_DS_ATT_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 8318
    }
    ,{
         "name": "ERROR_DS_CANT_ADD_ATT_VALUES"
        ,"type": {"kind":"Int32"}
        ,"value": 8320
    }
    ,{
         "name": "ERROR_DS_SINGLE_VALUE_CONSTRAINT"
        ,"type": {"kind":"Int32"}
        ,"value": 8321
    }
    ,{
         "name": "ERROR_DS_RANGE_CONSTRAINT"
        ,"type": {"kind":"Int32"}
        ,"value": 8322
    }
    ,{
         "name": "ERROR_DS_ATT_VAL_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 8323
    }
    ,{
         "name": "ERROR_DS_CANT_REM_MISSING_ATT"
        ,"type": {"kind":"Int32"}
        ,"value": 8324
    }
    ,{
         "name": "ERROR_DS_CANT_REM_MISSING_ATT_VAL"
        ,"type": {"kind":"Int32"}
        ,"value": 8325
    }
    ,{
         "name": "ERROR_DS_ROOT_CANT_BE_SUBREF"
        ,"type": {"kind":"Int32"}
        ,"value": 8326
    }
    ,{
         "name": "ERROR_DS_NO_CHAINING"
        ,"type": {"kind":"Int32"}
        ,"value": 8327
    }
    ,{
         "name": "ERROR_DS_NO_CHAINED_EVAL"
        ,"type": {"kind":"Int32"}
        ,"value": 8328
    }
    ,{
         "name": "ERROR_DS_NO_PARENT_OBJECT"
        ,"type": {"kind":"Int32"}
        ,"value": 8329
    }
    ,{
         "name": "ERROR_DS_PARENT_IS_AN_ALIAS"
        ,"type": {"kind":"Int32"}
        ,"value": 8330
    }
    ,{
         "name": "ERROR_DS_CANT_MIX_MASTER_AND_REPS"
        ,"type": {"kind":"Int32"}
        ,"value": 8331
    }
    ,{
         "name": "ERROR_DS_CHILDREN_EXIST"
        ,"type": {"kind":"Int32"}
        ,"value": 8332
    }
    ,{
         "name": "ERROR_DS_OBJ_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 8333
    }
    ,{
         "name": "ERROR_DS_ALIASED_OBJ_MISSING"
        ,"type": {"kind":"Int32"}
        ,"value": 8334
    }
    ,{
         "name": "ERROR_DS_BAD_NAME_SYNTAX"
        ,"type": {"kind":"Int32"}
        ,"value": 8335
    }
    ,{
         "name": "ERROR_DS_ALIAS_POINTS_TO_ALIAS"
        ,"type": {"kind":"Int32"}
        ,"value": 8336
    }
    ,{
         "name": "ERROR_DS_CANT_DEREF_ALIAS"
        ,"type": {"kind":"Int32"}
        ,"value": 8337
    }
    ,{
         "name": "ERROR_DS_OUT_OF_SCOPE"
        ,"type": {"kind":"Int32"}
        ,"value": 8338
    }
    ,{
         "name": "ERROR_DS_OBJECT_BEING_REMOVED"
        ,"type": {"kind":"Int32"}
        ,"value": 8339
    }
    ,{
         "name": "ERROR_DS_CANT_DELETE_DSA_OBJ"
        ,"type": {"kind":"Int32"}
        ,"value": 8340
    }
    ,{
         "name": "ERROR_DS_GENERIC_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 8341
    }
    ,{
         "name": "ERROR_DS_DSA_MUST_BE_INT_MASTER"
        ,"type": {"kind":"Int32"}
        ,"value": 8342
    }
    ,{
         "name": "ERROR_DS_CLASS_NOT_DSA"
        ,"type": {"kind":"Int32"}
        ,"value": 8343
    }
    ,{
         "name": "ERROR_DS_INSUFF_ACCESS_RIGHTS"
        ,"type": {"kind":"Int32"}
        ,"value": 8344
    }
    ,{
         "name": "ERROR_DS_ILLEGAL_SUPERIOR"
        ,"type": {"kind":"Int32"}
        ,"value": 8345
    }
    ,{
         "name": "ERROR_DS_ATTRIBUTE_OWNED_BY_SAM"
        ,"type": {"kind":"Int32"}
        ,"value": 8346
    }
    ,{
         "name": "ERROR_DS_NAME_TOO_MANY_PARTS"
        ,"type": {"kind":"Int32"}
        ,"value": 8347
    }
    ,{
         "name": "ERROR_DS_NAME_TOO_LONG"
        ,"type": {"kind":"Int32"}
        ,"value": 8348
    }
    ,{
         "name": "ERROR_DS_NAME_VALUE_TOO_LONG"
        ,"type": {"kind":"Int32"}
        ,"value": 8349
    }
    ,{
         "name": "ERROR_DS_NAME_UNPARSEABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 8350
    }
    ,{
         "name": "ERROR_DS_NAME_TYPE_UNKNOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 8351
    }
    ,{
         "name": "ERROR_DS_NOT_AN_OBJECT"
        ,"type": {"kind":"Int32"}
        ,"value": 8352
    }
    ,{
         "name": "ERROR_DS_SEC_DESC_TOO_SHORT"
        ,"type": {"kind":"Int32"}
        ,"value": 8353
    }
    ,{
         "name": "ERROR_DS_SEC_DESC_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": 8354
    }
    ,{
         "name": "ERROR_DS_NO_DELETED_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 8355
    }
    ,{
         "name": "ERROR_DS_SUBREF_MUST_HAVE_PARENT"
        ,"type": {"kind":"Int32"}
        ,"value": 8356
    }
    ,{
         "name": "ERROR_DS_NCNAME_MUST_BE_NC"
        ,"type": {"kind":"Int32"}
        ,"value": 8357
    }
    ,{
         "name": "ERROR_DS_CANT_ADD_SYSTEM_ONLY"
        ,"type": {"kind":"Int32"}
        ,"value": 8358
    }
    ,{
         "name": "ERROR_DS_CLASS_MUST_BE_CONCRETE"
        ,"type": {"kind":"Int32"}
        ,"value": 8359
    }
    ,{
         "name": "ERROR_DS_INVALID_DMD"
        ,"type": {"kind":"Int32"}
        ,"value": 8360
    }
    ,{
         "name": "ERROR_DS_OBJ_GUID_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 8361
    }
    ,{
         "name": "ERROR_DS_NOT_ON_BACKLINK"
        ,"type": {"kind":"Int32"}
        ,"value": 8362
    }
    ,{
         "name": "ERROR_DS_NO_CROSSREF_FOR_NC"
        ,"type": {"kind":"Int32"}
        ,"value": 8363
    }
    ,{
         "name": "ERROR_DS_SHUTTING_DOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 8364
    }
    ,{
         "name": "ERROR_DS_UNKNOWN_OPERATION"
        ,"type": {"kind":"Int32"}
        ,"value": 8365
    }
    ,{
         "name": "ERROR_DS_INVALID_ROLE_OWNER"
        ,"type": {"kind":"Int32"}
        ,"value": 8366
    }
    ,{
         "name": "ERROR_DS_COULDNT_CONTACT_FSMO"
        ,"type": {"kind":"Int32"}
        ,"value": 8367
    }
    ,{
         "name": "ERROR_DS_CROSS_NC_DN_RENAME"
        ,"type": {"kind":"Int32"}
        ,"value": 8368
    }
    ,{
         "name": "ERROR_DS_CANT_MOD_SYSTEM_ONLY"
        ,"type": {"kind":"Int32"}
        ,"value": 8369
    }
    ,{
         "name": "ERROR_DS_REPLICATOR_ONLY"
        ,"type": {"kind":"Int32"}
        ,"value": 8370
    }
    ,{
         "name": "ERROR_DS_OBJ_CLASS_NOT_DEFINED"
        ,"type": {"kind":"Int32"}
        ,"value": 8371
    }
    ,{
         "name": "ERROR_DS_OBJ_CLASS_NOT_SUBCLASS"
        ,"type": {"kind":"Int32"}
        ,"value": 8372
    }
    ,{
         "name": "ERROR_DS_NAME_REFERENCE_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": 8373
    }
    ,{
         "name": "ERROR_DS_CROSS_REF_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 8374
    }
    ,{
         "name": "ERROR_DS_CANT_DEL_MASTER_CROSSREF"
        ,"type": {"kind":"Int32"}
        ,"value": 8375
    }
    ,{
         "name": "ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD"
        ,"type": {"kind":"Int32"}
        ,"value": 8376
    }
    ,{
         "name": "ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX"
        ,"type": {"kind":"Int32"}
        ,"value": 8377
    }
    ,{
         "name": "ERROR_DS_DUP_RDN"
        ,"type": {"kind":"Int32"}
        ,"value": 8378
    }
    ,{
         "name": "ERROR_DS_DUP_OID"
        ,"type": {"kind":"Int32"}
        ,"value": 8379
    }
    ,{
         "name": "ERROR_DS_DUP_MAPI_ID"
        ,"type": {"kind":"Int32"}
        ,"value": 8380
    }
    ,{
         "name": "ERROR_DS_DUP_SCHEMA_ID_GUID"
        ,"type": {"kind":"Int32"}
        ,"value": 8381
    }
    ,{
         "name": "ERROR_DS_DUP_LDAP_DISPLAY_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 8382
    }
    ,{
         "name": "ERROR_DS_SEMANTIC_ATT_TEST"
        ,"type": {"kind":"Int32"}
        ,"value": 8383
    }
    ,{
         "name": "ERROR_DS_SYNTAX_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 8384
    }
    ,{
         "name": "ERROR_DS_EXISTS_IN_MUST_HAVE"
        ,"type": {"kind":"Int32"}
        ,"value": 8385
    }
    ,{
         "name": "ERROR_DS_EXISTS_IN_MAY_HAVE"
        ,"type": {"kind":"Int32"}
        ,"value": 8386
    }
    ,{
         "name": "ERROR_DS_NONEXISTENT_MAY_HAVE"
        ,"type": {"kind":"Int32"}
        ,"value": 8387
    }
    ,{
         "name": "ERROR_DS_NONEXISTENT_MUST_HAVE"
        ,"type": {"kind":"Int32"}
        ,"value": 8388
    }
    ,{
         "name": "ERROR_DS_AUX_CLS_TEST_FAIL"
        ,"type": {"kind":"Int32"}
        ,"value": 8389
    }
    ,{
         "name": "ERROR_DS_NONEXISTENT_POSS_SUP"
        ,"type": {"kind":"Int32"}
        ,"value": 8390
    }
    ,{
         "name": "ERROR_DS_SUB_CLS_TEST_FAIL"
        ,"type": {"kind":"Int32"}
        ,"value": 8391
    }
    ,{
         "name": "ERROR_DS_BAD_RDN_ATT_ID_SYNTAX"
        ,"type": {"kind":"Int32"}
        ,"value": 8392
    }
    ,{
         "name": "ERROR_DS_EXISTS_IN_AUX_CLS"
        ,"type": {"kind":"Int32"}
        ,"value": 8393
    }
    ,{
         "name": "ERROR_DS_EXISTS_IN_SUB_CLS"
        ,"type": {"kind":"Int32"}
        ,"value": 8394
    }
    ,{
         "name": "ERROR_DS_EXISTS_IN_POSS_SUP"
        ,"type": {"kind":"Int32"}
        ,"value": 8395
    }
    ,{
         "name": "ERROR_DS_RECALCSCHEMA_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 8396
    }
    ,{
         "name": "ERROR_DS_TREE_DELETE_NOT_FINISHED"
        ,"type": {"kind":"Int32"}
        ,"value": 8397
    }
    ,{
         "name": "ERROR_DS_CANT_DELETE"
        ,"type": {"kind":"Int32"}
        ,"value": 8398
    }
    ,{
         "name": "ERROR_DS_ATT_SCHEMA_REQ_ID"
        ,"type": {"kind":"Int32"}
        ,"value": 8399
    }
    ,{
         "name": "ERROR_DS_BAD_ATT_SCHEMA_SYNTAX"
        ,"type": {"kind":"Int32"}
        ,"value": 8400
    }
    ,{
         "name": "ERROR_DS_CANT_CACHE_ATT"
        ,"type": {"kind":"Int32"}
        ,"value": 8401
    }
    ,{
         "name": "ERROR_DS_CANT_CACHE_CLASS"
        ,"type": {"kind":"Int32"}
        ,"value": 8402
    }
    ,{
         "name": "ERROR_DS_CANT_REMOVE_ATT_CACHE"
        ,"type": {"kind":"Int32"}
        ,"value": 8403
    }
    ,{
         "name": "ERROR_DS_CANT_REMOVE_CLASS_CACHE"
        ,"type": {"kind":"Int32"}
        ,"value": 8404
    }
    ,{
         "name": "ERROR_DS_CANT_RETRIEVE_DN"
        ,"type": {"kind":"Int32"}
        ,"value": 8405
    }
    ,{
         "name": "ERROR_DS_MISSING_SUPREF"
        ,"type": {"kind":"Int32"}
        ,"value": 8406
    }
    ,{
         "name": "ERROR_DS_CANT_RETRIEVE_INSTANCE"
        ,"type": {"kind":"Int32"}
        ,"value": 8407
    }
    ,{
         "name": "ERROR_DS_CODE_INCONSISTENCY"
        ,"type": {"kind":"Int32"}
        ,"value": 8408
    }
    ,{
         "name": "ERROR_DS_DATABASE_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 8409
    }
    ,{
         "name": "ERROR_DS_GOVERNSID_MISSING"
        ,"type": {"kind":"Int32"}
        ,"value": 8410
    }
    ,{
         "name": "ERROR_DS_MISSING_EXPECTED_ATT"
        ,"type": {"kind":"Int32"}
        ,"value": 8411
    }
    ,{
         "name": "ERROR_DS_NCNAME_MISSING_CR_REF"
        ,"type": {"kind":"Int32"}
        ,"value": 8412
    }
    ,{
         "name": "ERROR_DS_SECURITY_CHECKING_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 8413
    }
    ,{
         "name": "ERROR_DS_SCHEMA_NOT_LOADED"
        ,"type": {"kind":"Int32"}
        ,"value": 8414
    }
    ,{
         "name": "ERROR_DS_SCHEMA_ALLOC_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 8415
    }
    ,{
         "name": "ERROR_DS_ATT_SCHEMA_REQ_SYNTAX"
        ,"type": {"kind":"Int32"}
        ,"value": 8416
    }
    ,{
         "name": "ERROR_DS_GCVERIFY_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 8417
    }
    ,{
         "name": "ERROR_DS_DRA_SCHEMA_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 8418
    }
    ,{
         "name": "ERROR_DS_CANT_FIND_DSA_OBJ"
        ,"type": {"kind":"Int32"}
        ,"value": 8419
    }
    ,{
         "name": "ERROR_DS_CANT_FIND_EXPECTED_NC"
        ,"type": {"kind":"Int32"}
        ,"value": 8420
    }
    ,{
         "name": "ERROR_DS_CANT_FIND_NC_IN_CACHE"
        ,"type": {"kind":"Int32"}
        ,"value": 8421
    }
    ,{
         "name": "ERROR_DS_CANT_RETRIEVE_CHILD"
        ,"type": {"kind":"Int32"}
        ,"value": 8422
    }
    ,{
         "name": "ERROR_DS_SECURITY_ILLEGAL_MODIFY"
        ,"type": {"kind":"Int32"}
        ,"value": 8423
    }
    ,{
         "name": "ERROR_DS_CANT_REPLACE_HIDDEN_REC"
        ,"type": {"kind":"Int32"}
        ,"value": 8424
    }
    ,{
         "name": "ERROR_DS_BAD_HIERARCHY_FILE"
        ,"type": {"kind":"Int32"}
        ,"value": 8425
    }
    ,{
         "name": "ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 8426
    }
    ,{
         "name": "ERROR_DS_CONFIG_PARAM_MISSING"
        ,"type": {"kind":"Int32"}
        ,"value": 8427
    }
    ,{
         "name": "ERROR_DS_COUNTING_AB_INDICES_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 8428
    }
    ,{
         "name": "ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 8429
    }
    ,{
         "name": "ERROR_DS_INTERNAL_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 8430
    }
    ,{
         "name": "ERROR_DS_UNKNOWN_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 8431
    }
    ,{
         "name": "ERROR_DS_ROOT_REQUIRES_CLASS_TOP"
        ,"type": {"kind":"Int32"}
        ,"value": 8432
    }
    ,{
         "name": "ERROR_DS_REFUSING_FSMO_ROLES"
        ,"type": {"kind":"Int32"}
        ,"value": 8433
    }
    ,{
         "name": "ERROR_DS_MISSING_FSMO_SETTINGS"
        ,"type": {"kind":"Int32"}
        ,"value": 8434
    }
    ,{
         "name": "ERROR_DS_UNABLE_TO_SURRENDER_ROLES"
        ,"type": {"kind":"Int32"}
        ,"value": 8435
    }
    ,{
         "name": "ERROR_DS_DRA_GENERIC"
        ,"type": {"kind":"Int32"}
        ,"value": 8436
    }
    ,{
         "name": "ERROR_DS_DRA_INVALID_PARAMETER"
        ,"type": {"kind":"Int32"}
        ,"value": 8437
    }
    ,{
         "name": "ERROR_DS_DRA_BUSY"
        ,"type": {"kind":"Int32"}
        ,"value": 8438
    }
    ,{
         "name": "ERROR_DS_DRA_BAD_DN"
        ,"type": {"kind":"Int32"}
        ,"value": 8439
    }
    ,{
         "name": "ERROR_DS_DRA_BAD_NC"
        ,"type": {"kind":"Int32"}
        ,"value": 8440
    }
    ,{
         "name": "ERROR_DS_DRA_DN_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 8441
    }
    ,{
         "name": "ERROR_DS_DRA_INTERNAL_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 8442
    }
    ,{
         "name": "ERROR_DS_DRA_INCONSISTENT_DIT"
        ,"type": {"kind":"Int32"}
        ,"value": 8443
    }
    ,{
         "name": "ERROR_DS_DRA_CONNECTION_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 8444
    }
    ,{
         "name": "ERROR_DS_DRA_BAD_INSTANCE_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 8445
    }
    ,{
         "name": "ERROR_DS_DRA_OUT_OF_MEM"
        ,"type": {"kind":"Int32"}
        ,"value": 8446
    }
    ,{
         "name": "ERROR_DS_DRA_MAIL_PROBLEM"
        ,"type": {"kind":"Int32"}
        ,"value": 8447
    }
    ,{
         "name": "ERROR_DS_DRA_REF_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 8448
    }
    ,{
         "name": "ERROR_DS_DRA_REF_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 8449
    }
    ,{
         "name": "ERROR_DS_DRA_OBJ_IS_REP_SOURCE"
        ,"type": {"kind":"Int32"}
        ,"value": 8450
    }
    ,{
         "name": "ERROR_DS_DRA_DB_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 8451
    }
    ,{
         "name": "ERROR_DS_DRA_NO_REPLICA"
        ,"type": {"kind":"Int32"}
        ,"value": 8452
    }
    ,{
         "name": "ERROR_DS_DRA_ACCESS_DENIED"
        ,"type": {"kind":"Int32"}
        ,"value": 8453
    }
    ,{
         "name": "ERROR_DS_DRA_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 8454
    }
    ,{
         "name": "ERROR_DS_DRA_RPC_CANCELLED"
        ,"type": {"kind":"Int32"}
        ,"value": 8455
    }
    ,{
         "name": "ERROR_DS_DRA_SOURCE_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 8456
    }
    ,{
         "name": "ERROR_DS_DRA_SINK_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 8457
    }
    ,{
         "name": "ERROR_DS_DRA_NAME_COLLISION"
        ,"type": {"kind":"Int32"}
        ,"value": 8458
    }
    ,{
         "name": "ERROR_DS_DRA_SOURCE_REINSTALLED"
        ,"type": {"kind":"Int32"}
        ,"value": 8459
    }
    ,{
         "name": "ERROR_DS_DRA_MISSING_PARENT"
        ,"type": {"kind":"Int32"}
        ,"value": 8460
    }
    ,{
         "name": "ERROR_DS_DRA_PREEMPTED"
        ,"type": {"kind":"Int32"}
        ,"value": 8461
    }
    ,{
         "name": "ERROR_DS_DRA_ABANDON_SYNC"
        ,"type": {"kind":"Int32"}
        ,"value": 8462
    }
    ,{
         "name": "ERROR_DS_DRA_SHUTDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 8463
    }
    ,{
         "name": "ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET"
        ,"type": {"kind":"Int32"}
        ,"value": 8464
    }
    ,{
         "name": "ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA"
        ,"type": {"kind":"Int32"}
        ,"value": 8465
    }
    ,{
         "name": "ERROR_DS_DRA_EXTN_CONNECTION_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 8466
    }
    ,{
         "name": "ERROR_DS_INSTALL_SCHEMA_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 8467
    }
    ,{
         "name": "ERROR_DS_DUP_LINK_ID"
        ,"type": {"kind":"Int32"}
        ,"value": 8468
    }
    ,{
         "name": "ERROR_DS_NAME_ERROR_RESOLVING"
        ,"type": {"kind":"Int32"}
        ,"value": 8469
    }
    ,{
         "name": "ERROR_DS_NAME_ERROR_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 8470
    }
    ,{
         "name": "ERROR_DS_NAME_ERROR_NOT_UNIQUE"
        ,"type": {"kind":"Int32"}
        ,"value": 8471
    }
    ,{
         "name": "ERROR_DS_NAME_ERROR_NO_MAPPING"
        ,"type": {"kind":"Int32"}
        ,"value": 8472
    }
    ,{
         "name": "ERROR_DS_NAME_ERROR_DOMAIN_ONLY"
        ,"type": {"kind":"Int32"}
        ,"value": 8473
    }
    ,{
         "name": "ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING"
        ,"type": {"kind":"Int32"}
        ,"value": 8474
    }
    ,{
         "name": "ERROR_DS_CONSTRUCTED_ATT_MOD"
        ,"type": {"kind":"Int32"}
        ,"value": 8475
    }
    ,{
         "name": "ERROR_DS_WRONG_OM_OBJ_CLASS"
        ,"type": {"kind":"Int32"}
        ,"value": 8476
    }
    ,{
         "name": "ERROR_DS_DRA_REPL_PENDING"
        ,"type": {"kind":"Int32"}
        ,"value": 8477
    }
    ,{
         "name": "ERROR_DS_DS_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 8478
    }
    ,{
         "name": "ERROR_DS_INVALID_LDAP_DISPLAY_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 8479
    }
    ,{
         "name": "ERROR_DS_NON_BASE_SEARCH"
        ,"type": {"kind":"Int32"}
        ,"value": 8480
    }
    ,{
         "name": "ERROR_DS_CANT_RETRIEVE_ATTS"
        ,"type": {"kind":"Int32"}
        ,"value": 8481
    }
    ,{
         "name": "ERROR_DS_BACKLINK_WITHOUT_LINK"
        ,"type": {"kind":"Int32"}
        ,"value": 8482
    }
    ,{
         "name": "ERROR_DS_EPOCH_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 8483
    }
    ,{
         "name": "ERROR_DS_SRC_NAME_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 8484
    }
    ,{
         "name": "ERROR_DS_SRC_AND_DST_NC_IDENTICAL"
        ,"type": {"kind":"Int32"}
        ,"value": 8485
    }
    ,{
         "name": "ERROR_DS_DST_NC_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 8486
    }
    ,{
         "name": "ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC"
        ,"type": {"kind":"Int32"}
        ,"value": 8487
    }
    ,{
         "name": "ERROR_DS_SRC_GUID_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 8488
    }
    ,{
         "name": "ERROR_DS_CANT_MOVE_DELETED_OBJECT"
        ,"type": {"kind":"Int32"}
        ,"value": 8489
    }
    ,{
         "name": "ERROR_DS_PDC_OPERATION_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 8490
    }
    ,{
         "name": "ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD"
        ,"type": {"kind":"Int32"}
        ,"value": 8491
    }
    ,{
         "name": "ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION"
        ,"type": {"kind":"Int32"}
        ,"value": 8492
    }
    ,{
         "name": "ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS"
        ,"type": {"kind":"Int32"}
        ,"value": 8493
    }
    ,{
         "name": "ERROR_DS_NC_MUST_HAVE_NC_PARENT"
        ,"type": {"kind":"Int32"}
        ,"value": 8494
    }
    ,{
         "name": "ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE"
        ,"type": {"kind":"Int32"}
        ,"value": 8495
    }
    ,{
         "name": "ERROR_DS_DST_DOMAIN_NOT_NATIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 8496
    }
    ,{
         "name": "ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER"
        ,"type": {"kind":"Int32"}
        ,"value": 8497
    }
    ,{
         "name": "ERROR_DS_CANT_MOVE_ACCOUNT_GROUP"
        ,"type": {"kind":"Int32"}
        ,"value": 8498
    }
    ,{
         "name": "ERROR_DS_CANT_MOVE_RESOURCE_GROUP"
        ,"type": {"kind":"Int32"}
        ,"value": 8499
    }
    ,{
         "name": "ERROR_DS_INVALID_SEARCH_FLAG"
        ,"type": {"kind":"Int32"}
        ,"value": 8500
    }
    ,{
         "name": "ERROR_DS_NO_TREE_DELETE_ABOVE_NC"
        ,"type": {"kind":"Int32"}
        ,"value": 8501
    }
    ,{
         "name": "ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE"
        ,"type": {"kind":"Int32"}
        ,"value": 8502
    }
    ,{
         "name": "ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE"
        ,"type": {"kind":"Int32"}
        ,"value": 8503
    }
    ,{
         "name": "ERROR_DS_SAM_INIT_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 8504
    }
    ,{
         "name": "ERROR_DS_SENSITIVE_GROUP_VIOLATION"
        ,"type": {"kind":"Int32"}
        ,"value": 8505
    }
    ,{
         "name": "ERROR_DS_CANT_MOD_PRIMARYGROUPID"
        ,"type": {"kind":"Int32"}
        ,"value": 8506
    }
    ,{
         "name": "ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD"
        ,"type": {"kind":"Int32"}
        ,"value": 8507
    }
    ,{
         "name": "ERROR_DS_NONSAFE_SCHEMA_CHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 8508
    }
    ,{
         "name": "ERROR_DS_SCHEMA_UPDATE_DISALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": 8509
    }
    ,{
         "name": "ERROR_DS_CANT_CREATE_UNDER_SCHEMA"
        ,"type": {"kind":"Int32"}
        ,"value": 8510
    }
    ,{
         "name": "ERROR_DS_INSTALL_NO_SRC_SCH_VERSION"
        ,"type": {"kind":"Int32"}
        ,"value": 8511
    }
    ,{
         "name": "ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE"
        ,"type": {"kind":"Int32"}
        ,"value": 8512
    }
    ,{
         "name": "ERROR_DS_INVALID_GROUP_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 8513
    }
    ,{
         "name": "ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN"
        ,"type": {"kind":"Int32"}
        ,"value": 8514
    }
    ,{
         "name": "ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN"
        ,"type": {"kind":"Int32"}
        ,"value": 8515
    }
    ,{
         "name": "ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER"
        ,"type": {"kind":"Int32"}
        ,"value": 8516
    }
    ,{
         "name": "ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER"
        ,"type": {"kind":"Int32"}
        ,"value": 8517
    }
    ,{
         "name": "ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER"
        ,"type": {"kind":"Int32"}
        ,"value": 8518
    }
    ,{
         "name": "ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER"
        ,"type": {"kind":"Int32"}
        ,"value": 8519
    }
    ,{
         "name": "ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER"
        ,"type": {"kind":"Int32"}
        ,"value": 8520
    }
    ,{
         "name": "ERROR_DS_HAVE_PRIMARY_MEMBERS"
        ,"type": {"kind":"Int32"}
        ,"value": 8521
    }
    ,{
         "name": "ERROR_DS_STRING_SD_CONVERSION_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 8522
    }
    ,{
         "name": "ERROR_DS_NAMING_MASTER_GC"
        ,"type": {"kind":"Int32"}
        ,"value": 8523
    }
    ,{
         "name": "ERROR_DS_DNS_LOOKUP_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 8524
    }
    ,{
         "name": "ERROR_DS_COULDNT_UPDATE_SPNS"
        ,"type": {"kind":"Int32"}
        ,"value": 8525
    }
    ,{
         "name": "ERROR_DS_CANT_RETRIEVE_SD"
        ,"type": {"kind":"Int32"}
        ,"value": 8526
    }
    ,{
         "name": "ERROR_DS_KEY_NOT_UNIQUE"
        ,"type": {"kind":"Int32"}
        ,"value": 8527
    }
    ,{
         "name": "ERROR_DS_WRONG_LINKED_ATT_SYNTAX"
        ,"type": {"kind":"Int32"}
        ,"value": 8528
    }
    ,{
         "name": "ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD"
        ,"type": {"kind":"Int32"}
        ,"value": 8529
    }
    ,{
         "name": "ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY"
        ,"type": {"kind":"Int32"}
        ,"value": 8530
    }
    ,{
         "name": "ERROR_DS_CANT_START"
        ,"type": {"kind":"Int32"}
        ,"value": 8531
    }
    ,{
         "name": "ERROR_DS_INIT_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 8532
    }
    ,{
         "name": "ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION"
        ,"type": {"kind":"Int32"}
        ,"value": 8533
    }
    ,{
         "name": "ERROR_DS_SOURCE_DOMAIN_IN_FOREST"
        ,"type": {"kind":"Int32"}
        ,"value": 8534
    }
    ,{
         "name": "ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST"
        ,"type": {"kind":"Int32"}
        ,"value": 8535
    }
    ,{
         "name": "ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 8536
    }
    ,{
         "name": "ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN"
        ,"type": {"kind":"Int32"}
        ,"value": 8537
    }
    ,{
         "name": "ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER"
        ,"type": {"kind":"Int32"}
        ,"value": 8538
    }
    ,{
         "name": "ERROR_DS_SRC_SID_EXISTS_IN_FOREST"
        ,"type": {"kind":"Int32"}
        ,"value": 8539
    }
    ,{
         "name": "ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 8540
    }
    ,{
         "name": "ERROR_SAM_INIT_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 8541
    }
    ,{
         "name": "ERROR_DS_DRA_SCHEMA_INFO_SHIP"
        ,"type": {"kind":"Int32"}
        ,"value": 8542
    }
    ,{
         "name": "ERROR_DS_DRA_SCHEMA_CONFLICT"
        ,"type": {"kind":"Int32"}
        ,"value": 8543
    }
    ,{
         "name": "ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT"
        ,"type": {"kind":"Int32"}
        ,"value": 8544
    }
    ,{
         "name": "ERROR_DS_DRA_OBJ_NC_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 8545
    }
    ,{
         "name": "ERROR_DS_NC_STILL_HAS_DSAS"
        ,"type": {"kind":"Int32"}
        ,"value": 8546
    }
    ,{
         "name": "ERROR_DS_GC_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 8547
    }
    ,{
         "name": "ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY"
        ,"type": {"kind":"Int32"}
        ,"value": 8548
    }
    ,{
         "name": "ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS"
        ,"type": {"kind":"Int32"}
        ,"value": 8549
    }
    ,{
         "name": "ERROR_DS_CANT_ADD_TO_GC"
        ,"type": {"kind":"Int32"}
        ,"value": 8550
    }
    ,{
         "name": "ERROR_DS_NO_CHECKPOINT_WITH_PDC"
        ,"type": {"kind":"Int32"}
        ,"value": 8551
    }
    ,{
         "name": "ERROR_DS_SOURCE_AUDITING_NOT_ENABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 8552
    }
    ,{
         "name": "ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC"
        ,"type": {"kind":"Int32"}
        ,"value": 8553
    }
    ,{
         "name": "ERROR_DS_INVALID_NAME_FOR_SPN"
        ,"type": {"kind":"Int32"}
        ,"value": 8554
    }
    ,{
         "name": "ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS"
        ,"type": {"kind":"Int32"}
        ,"value": 8555
    }
    ,{
         "name": "ERROR_DS_UNICODEPWD_NOT_IN_QUOTES"
        ,"type": {"kind":"Int32"}
        ,"value": 8556
    }
    ,{
         "name": "ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 8557
    }
    ,{
         "name": "ERROR_DS_MUST_BE_RUN_ON_DST_DC"
        ,"type": {"kind":"Int32"}
        ,"value": 8558
    }
    ,{
         "name": "ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER"
        ,"type": {"kind":"Int32"}
        ,"value": 8559
    }
    ,{
         "name": "ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ"
        ,"type": {"kind":"Int32"}
        ,"value": 8560
    }
    ,{
         "name": "ERROR_DS_INIT_FAILURE_CONSOLE"
        ,"type": {"kind":"Int32"}
        ,"value": 8561
    }
    ,{
         "name": "ERROR_DS_SAM_INIT_FAILURE_CONSOLE"
        ,"type": {"kind":"Int32"}
        ,"value": 8562
    }
    ,{
         "name": "ERROR_DS_FOREST_VERSION_TOO_HIGH"
        ,"type": {"kind":"Int32"}
        ,"value": 8563
    }
    ,{
         "name": "ERROR_DS_DOMAIN_VERSION_TOO_HIGH"
        ,"type": {"kind":"Int32"}
        ,"value": 8564
    }
    ,{
         "name": "ERROR_DS_FOREST_VERSION_TOO_LOW"
        ,"type": {"kind":"Int32"}
        ,"value": 8565
    }
    ,{
         "name": "ERROR_DS_DOMAIN_VERSION_TOO_LOW"
        ,"type": {"kind":"Int32"}
        ,"value": 8566
    }
    ,{
         "name": "ERROR_DS_INCOMPATIBLE_VERSION"
        ,"type": {"kind":"Int32"}
        ,"value": 8567
    }
    ,{
         "name": "ERROR_DS_LOW_DSA_VERSION"
        ,"type": {"kind":"Int32"}
        ,"value": 8568
    }
    ,{
         "name": "ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN"
        ,"type": {"kind":"Int32"}
        ,"value": 8569
    }
    ,{
         "name": "ERROR_DS_NOT_SUPPORTED_SORT_ORDER"
        ,"type": {"kind":"Int32"}
        ,"value": 8570
    }
    ,{
         "name": "ERROR_DS_NAME_NOT_UNIQUE"
        ,"type": {"kind":"Int32"}
        ,"value": 8571
    }
    ,{
         "name": "ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4"
        ,"type": {"kind":"Int32"}
        ,"value": 8572
    }
    ,{
         "name": "ERROR_DS_OUT_OF_VERSION_STORE"
        ,"type": {"kind":"Int32"}
        ,"value": 8573
    }
    ,{
         "name": "ERROR_DS_INCOMPATIBLE_CONTROLS_USED"
        ,"type": {"kind":"Int32"}
        ,"value": 8574
    }
    ,{
         "name": "ERROR_DS_NO_REF_DOMAIN"
        ,"type": {"kind":"Int32"}
        ,"value": 8575
    }
    ,{
         "name": "ERROR_DS_RESERVED_LINK_ID"
        ,"type": {"kind":"Int32"}
        ,"value": 8576
    }
    ,{
         "name": "ERROR_DS_LINK_ID_NOT_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 8577
    }
    ,{
         "name": "ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER"
        ,"type": {"kind":"Int32"}
        ,"value": 8578
    }
    ,{
         "name": "ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 8579
    }
    ,{
         "name": "ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC"
        ,"type": {"kind":"Int32"}
        ,"value": 8580
    }
    ,{
         "name": "ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG"
        ,"type": {"kind":"Int32"}
        ,"value": 8581
    }
    ,{
         "name": "ERROR_DS_MODIFYDN_WRONG_GRANDPARENT"
        ,"type": {"kind":"Int32"}
        ,"value": 8582
    }
    ,{
         "name": "ERROR_DS_NAME_ERROR_TRUST_REFERRAL"
        ,"type": {"kind":"Int32"}
        ,"value": 8583
    }
    ,{
         "name": "ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER"
        ,"type": {"kind":"Int32"}
        ,"value": 8584
    }
    ,{
         "name": "ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD"
        ,"type": {"kind":"Int32"}
        ,"value": 8585
    }
    ,{
         "name": "ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2"
        ,"type": {"kind":"Int32"}
        ,"value": 8586
    }
    ,{
         "name": "ERROR_DS_THREAD_LIMIT_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 8587
    }
    ,{
         "name": "ERROR_DS_NOT_CLOSEST"
        ,"type": {"kind":"Int32"}
        ,"value": 8588
    }
    ,{
         "name": "ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF"
        ,"type": {"kind":"Int32"}
        ,"value": 8589
    }
    ,{
         "name": "ERROR_DS_SINGLE_USER_MODE_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 8590
    }
    ,{
         "name": "ERROR_DS_NTDSCRIPT_SYNTAX_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 8591
    }
    ,{
         "name": "ERROR_DS_NTDSCRIPT_PROCESS_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 8592
    }
    ,{
         "name": "ERROR_DS_DIFFERENT_REPL_EPOCHS"
        ,"type": {"kind":"Int32"}
        ,"value": 8593
    }
    ,{
         "name": "ERROR_DS_DRS_EXTENSIONS_CHANGED"
        ,"type": {"kind":"Int32"}
        ,"value": 8594
    }
    ,{
         "name": "ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR"
        ,"type": {"kind":"Int32"}
        ,"value": 8595
    }
    ,{
         "name": "ERROR_DS_NO_MSDS_INTID"
        ,"type": {"kind":"Int32"}
        ,"value": 8596
    }
    ,{
         "name": "ERROR_DS_DUP_MSDS_INTID"
        ,"type": {"kind":"Int32"}
        ,"value": 8597
    }
    ,{
         "name": "ERROR_DS_EXISTS_IN_RDNATTID"
        ,"type": {"kind":"Int32"}
        ,"value": 8598
    }
    ,{
         "name": "ERROR_DS_AUTHORIZATION_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 8599
    }
    ,{
         "name": "ERROR_DS_INVALID_SCRIPT"
        ,"type": {"kind":"Int32"}
        ,"value": 8600
    }
    ,{
         "name": "ERROR_DS_REMOTE_CROSSREF_OP_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 8601
    }
    ,{
         "name": "ERROR_DS_CROSS_REF_BUSY"
        ,"type": {"kind":"Int32"}
        ,"value": 8602
    }
    ,{
         "name": "ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN"
        ,"type": {"kind":"Int32"}
        ,"value": 8603
    }
    ,{
         "name": "ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC"
        ,"type": {"kind":"Int32"}
        ,"value": 8604
    }
    ,{
         "name": "ERROR_DS_DUPLICATE_ID_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 8605
    }
    ,{
         "name": "ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT"
        ,"type": {"kind":"Int32"}
        ,"value": 8606
    }
    ,{
         "name": "ERROR_DS_GROUP_CONVERSION_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 8607
    }
    ,{
         "name": "ERROR_DS_CANT_MOVE_APP_BASIC_GROUP"
        ,"type": {"kind":"Int32"}
        ,"value": 8608
    }
    ,{
         "name": "ERROR_DS_CANT_MOVE_APP_QUERY_GROUP"
        ,"type": {"kind":"Int32"}
        ,"value": 8609
    }
    ,{
         "name": "ERROR_DS_ROLE_NOT_VERIFIED"
        ,"type": {"kind":"Int32"}
        ,"value": 8610
    }
    ,{
         "name": "ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL"
        ,"type": {"kind":"Int32"}
        ,"value": 8611
    }
    ,{
         "name": "ERROR_DS_DOMAIN_RENAME_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 8612
    }
    ,{
         "name": "ERROR_DS_EXISTING_AD_CHILD_NC"
        ,"type": {"kind":"Int32"}
        ,"value": 8613
    }
    ,{
         "name": "ERROR_DS_REPL_LIFETIME_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 8614
    }
    ,{
         "name": "ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER"
        ,"type": {"kind":"Int32"}
        ,"value": 8615
    }
    ,{
         "name": "ERROR_DS_LDAP_SEND_QUEUE_FULL"
        ,"type": {"kind":"Int32"}
        ,"value": 8616
    }
    ,{
         "name": "ERROR_DS_DRA_OUT_SCHEDULE_WINDOW"
        ,"type": {"kind":"Int32"}
        ,"value": 8617
    }
    ,{
         "name": "ERROR_DS_POLICY_NOT_KNOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 8618
    }
    ,{
         "name": "ERROR_NO_SITE_SETTINGS_OBJECT"
        ,"type": {"kind":"Int32"}
        ,"value": 8619
    }
    ,{
         "name": "ERROR_NO_SECRETS"
        ,"type": {"kind":"Int32"}
        ,"value": 8620
    }
    ,{
         "name": "ERROR_NO_WRITABLE_DC_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 8621
    }
    ,{
         "name": "ERROR_DS_NO_SERVER_OBJECT"
        ,"type": {"kind":"Int32"}
        ,"value": 8622
    }
    ,{
         "name": "ERROR_DS_NO_NTDSA_OBJECT"
        ,"type": {"kind":"Int32"}
        ,"value": 8623
    }
    ,{
         "name": "ERROR_DS_NON_ASQ_SEARCH"
        ,"type": {"kind":"Int32"}
        ,"value": 8624
    }
    ,{
         "name": "ERROR_DS_AUDIT_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 8625
    }
    ,{
         "name": "ERROR_DS_INVALID_SEARCH_FLAG_SUBTREE"
        ,"type": {"kind":"Int32"}
        ,"value": 8626
    }
    ,{
         "name": "ERROR_DS_INVALID_SEARCH_FLAG_TUPLE"
        ,"type": {"kind":"Int32"}
        ,"value": 8627
    }
    ,{
         "name": "ERROR_DS_HIERARCHY_TABLE_TOO_DEEP"
        ,"type": {"kind":"Int32"}
        ,"value": 8628
    }
    ,{
         "name": "ERROR_DS_DRA_CORRUPT_UTD_VECTOR"
        ,"type": {"kind":"Int32"}
        ,"value": 8629
    }
    ,{
         "name": "ERROR_DS_DRA_SECRETS_DENIED"
        ,"type": {"kind":"Int32"}
        ,"value": 8630
    }
    ,{
         "name": "ERROR_DS_RESERVED_MAPI_ID"
        ,"type": {"kind":"Int32"}
        ,"value": 8631
    }
    ,{
         "name": "ERROR_DS_MAPI_ID_NOT_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 8632
    }
    ,{
         "name": "ERROR_DS_DRA_MISSING_KRBTGT_SECRET"
        ,"type": {"kind":"Int32"}
        ,"value": 8633
    }
    ,{
         "name": "ERROR_DS_DOMAIN_NAME_EXISTS_IN_FOREST"
        ,"type": {"kind":"Int32"}
        ,"value": 8634
    }
    ,{
         "name": "ERROR_DS_FLAT_NAME_EXISTS_IN_FOREST"
        ,"type": {"kind":"Int32"}
        ,"value": 8635
    }
    ,{
         "name": "ERROR_INVALID_USER_PRINCIPAL_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 8636
    }
    ,{
         "name": "ERROR_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS"
        ,"type": {"kind":"Int32"}
        ,"value": 8637
    }
    ,{
         "name": "ERROR_DS_OID_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 8638
    }
    ,{
         "name": "ERROR_DS_DRA_RECYCLED_TARGET"
        ,"type": {"kind":"Int32"}
        ,"value": 8639
    }
    ,{
         "name": "ERROR_DS_DISALLOWED_NC_REDIRECT"
        ,"type": {"kind":"Int32"}
        ,"value": 8640
    }
    ,{
         "name": "ERROR_DS_HIGH_ADLDS_FFL"
        ,"type": {"kind":"Int32"}
        ,"value": 8641
    }
    ,{
         "name": "ERROR_DS_HIGH_DSA_VERSION"
        ,"type": {"kind":"Int32"}
        ,"value": 8642
    }
    ,{
         "name": "ERROR_DS_LOW_ADLDS_FFL"
        ,"type": {"kind":"Int32"}
        ,"value": 8643
    }
    ,{
         "name": "ERROR_DOMAIN_SID_SAME_AS_LOCAL_WORKSTATION"
        ,"type": {"kind":"Int32"}
        ,"value": 8644
    }
    ,{
         "name": "ERROR_DS_UNDELETE_SAM_VALIDATION_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 8645
    }
    ,{
         "name": "ERROR_INCORRECT_ACCOUNT_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 8646
    }
    ,{
         "name": "ERROR_DS_SPN_VALUE_NOT_UNIQUE_IN_FOREST"
        ,"type": {"kind":"Int32"}
        ,"value": 8647
    }
    ,{
         "name": "ERROR_DS_UPN_VALUE_NOT_UNIQUE_IN_FOREST"
        ,"type": {"kind":"Int32"}
        ,"value": 8648
    }
    ,{
         "name": "ERROR_DS_MISSING_FOREST_TRUST"
        ,"type": {"kind":"Int32"}
        ,"value": 8649
    }
    ,{
         "name": "ERROR_DS_VALUE_KEY_NOT_UNIQUE"
        ,"type": {"kind":"Int32"}
        ,"value": 8650
    }
    ,{
         "name": "DNS_ERROR_RESPONSE_CODES_BASE"
        ,"type": {"kind":"Int32"}
        ,"value": 9000
    }
    ,{
         "name": "DNS_ERROR_MASK"
        ,"type": {"kind":"Int32"}
        ,"value": 9000
    }
    ,{
         "name": "DNS_ERROR_RCODE_FORMAT_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 9001
    }
    ,{
         "name": "DNS_ERROR_RCODE_SERVER_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 9002
    }
    ,{
         "name": "DNS_ERROR_RCODE_NAME_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 9003
    }
    ,{
         "name": "DNS_ERROR_RCODE_NOT_IMPLEMENTED"
        ,"type": {"kind":"Int32"}
        ,"value": 9004
    }
    ,{
         "name": "DNS_ERROR_RCODE_REFUSED"
        ,"type": {"kind":"Int32"}
        ,"value": 9005
    }
    ,{
         "name": "DNS_ERROR_RCODE_YXDOMAIN"
        ,"type": {"kind":"Int32"}
        ,"value": 9006
    }
    ,{
         "name": "DNS_ERROR_RCODE_YXRRSET"
        ,"type": {"kind":"Int32"}
        ,"value": 9007
    }
    ,{
         "name": "DNS_ERROR_RCODE_NXRRSET"
        ,"type": {"kind":"Int32"}
        ,"value": 9008
    }
    ,{
         "name": "DNS_ERROR_RCODE_NOTAUTH"
        ,"type": {"kind":"Int32"}
        ,"value": 9009
    }
    ,{
         "name": "DNS_ERROR_RCODE_NOTZONE"
        ,"type": {"kind":"Int32"}
        ,"value": 9010
    }
    ,{
         "name": "DNS_ERROR_RCODE_BADSIG"
        ,"type": {"kind":"Int32"}
        ,"value": 9016
    }
    ,{
         "name": "DNS_ERROR_RCODE_BADKEY"
        ,"type": {"kind":"Int32"}
        ,"value": 9017
    }
    ,{
         "name": "DNS_ERROR_RCODE_BADTIME"
        ,"type": {"kind":"Int32"}
        ,"value": 9018
    }
    ,{
         "name": "DNS_ERROR_DNSSEC_BASE"
        ,"type": {"kind":"Int32"}
        ,"value": 9100
    }
    ,{
         "name": "DNS_ERROR_KEYMASTER_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 9101
    }
    ,{
         "name": "DNS_ERROR_NOT_ALLOWED_ON_SIGNED_ZONE"
        ,"type": {"kind":"Int32"}
        ,"value": 9102
    }
    ,{
         "name": "DNS_ERROR_NSEC3_INCOMPATIBLE_WITH_RSA_SHA1"
        ,"type": {"kind":"Int32"}
        ,"value": 9103
    }
    ,{
         "name": "DNS_ERROR_NOT_ENOUGH_SIGNING_KEY_DESCRIPTORS"
        ,"type": {"kind":"Int32"}
        ,"value": 9104
    }
    ,{
         "name": "DNS_ERROR_UNSUPPORTED_ALGORITHM"
        ,"type": {"kind":"Int32"}
        ,"value": 9105
    }
    ,{
         "name": "DNS_ERROR_INVALID_KEY_SIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 9106
    }
    ,{
         "name": "DNS_ERROR_SIGNING_KEY_NOT_ACCESSIBLE"
        ,"type": {"kind":"Int32"}
        ,"value": 9107
    }
    ,{
         "name": "DNS_ERROR_KSP_DOES_NOT_SUPPORT_PROTECTION"
        ,"type": {"kind":"Int32"}
        ,"value": 9108
    }
    ,{
         "name": "DNS_ERROR_UNEXPECTED_DATA_PROTECTION_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 9109
    }
    ,{
         "name": "DNS_ERROR_UNEXPECTED_CNG_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 9110
    }
    ,{
         "name": "DNS_ERROR_UNKNOWN_SIGNING_PARAMETER_VERSION"
        ,"type": {"kind":"Int32"}
        ,"value": 9111
    }
    ,{
         "name": "DNS_ERROR_KSP_NOT_ACCESSIBLE"
        ,"type": {"kind":"Int32"}
        ,"value": 9112
    }
    ,{
         "name": "DNS_ERROR_TOO_MANY_SKDS"
        ,"type": {"kind":"Int32"}
        ,"value": 9113
    }
    ,{
         "name": "DNS_ERROR_INVALID_ROLLOVER_PERIOD"
        ,"type": {"kind":"Int32"}
        ,"value": 9114
    }
    ,{
         "name": "DNS_ERROR_INVALID_INITIAL_ROLLOVER_OFFSET"
        ,"type": {"kind":"Int32"}
        ,"value": 9115
    }
    ,{
         "name": "DNS_ERROR_ROLLOVER_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 9116
    }
    ,{
         "name": "DNS_ERROR_STANDBY_KEY_NOT_PRESENT"
        ,"type": {"kind":"Int32"}
        ,"value": 9117
    }
    ,{
         "name": "DNS_ERROR_NOT_ALLOWED_ON_ZSK"
        ,"type": {"kind":"Int32"}
        ,"value": 9118
    }
    ,{
         "name": "DNS_ERROR_NOT_ALLOWED_ON_ACTIVE_SKD"
        ,"type": {"kind":"Int32"}
        ,"value": 9119
    }
    ,{
         "name": "DNS_ERROR_ROLLOVER_ALREADY_QUEUED"
        ,"type": {"kind":"Int32"}
        ,"value": 9120
    }
    ,{
         "name": "DNS_ERROR_NOT_ALLOWED_ON_UNSIGNED_ZONE"
        ,"type": {"kind":"Int32"}
        ,"value": 9121
    }
    ,{
         "name": "DNS_ERROR_BAD_KEYMASTER"
        ,"type": {"kind":"Int32"}
        ,"value": 9122
    }
    ,{
         "name": "DNS_ERROR_INVALID_SIGNATURE_VALIDITY_PERIOD"
        ,"type": {"kind":"Int32"}
        ,"value": 9123
    }
    ,{
         "name": "DNS_ERROR_INVALID_NSEC3_ITERATION_COUNT"
        ,"type": {"kind":"Int32"}
        ,"value": 9124
    }
    ,{
         "name": "DNS_ERROR_DNSSEC_IS_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 9125
    }
    ,{
         "name": "DNS_ERROR_INVALID_XML"
        ,"type": {"kind":"Int32"}
        ,"value": 9126
    }
    ,{
         "name": "DNS_ERROR_NO_VALID_TRUST_ANCHORS"
        ,"type": {"kind":"Int32"}
        ,"value": 9127
    }
    ,{
         "name": "DNS_ERROR_ROLLOVER_NOT_POKEABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 9128
    }
    ,{
         "name": "DNS_ERROR_NSEC3_NAME_COLLISION"
        ,"type": {"kind":"Int32"}
        ,"value": 9129
    }
    ,{
         "name": "DNS_ERROR_NSEC_INCOMPATIBLE_WITH_NSEC3_RSA_SHA1"
        ,"type": {"kind":"Int32"}
        ,"value": 9130
    }
    ,{
         "name": "DNS_ERROR_PACKET_FMT_BASE"
        ,"type": {"kind":"Int32"}
        ,"value": 9500
    }
    ,{
         "name": "DNS_INFO_NO_RECORDS"
        ,"type": {"kind":"Int32"}
        ,"value": 9501
    }
    ,{
         "name": "DNS_ERROR_BAD_PACKET"
        ,"type": {"kind":"Int32"}
        ,"value": 9502
    }
    ,{
         "name": "DNS_ERROR_NO_PACKET"
        ,"type": {"kind":"Int32"}
        ,"value": 9503
    }
    ,{
         "name": "DNS_ERROR_RCODE"
        ,"type": {"kind":"Int32"}
        ,"value": 9504
    }
    ,{
         "name": "DNS_ERROR_UNSECURE_PACKET"
        ,"type": {"kind":"Int32"}
        ,"value": 9505
    }
    ,{
         "name": "DNS_REQUEST_PENDING"
        ,"type": {"kind":"Int32"}
        ,"value": 9506
    }
    ,{
         "name": "DNS_ERROR_GENERAL_API_BASE"
        ,"type": {"kind":"Int32"}
        ,"value": 9550
    }
    ,{
         "name": "DNS_ERROR_INVALID_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 9551
    }
    ,{
         "name": "DNS_ERROR_INVALID_IP_ADDRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 9552
    }
    ,{
         "name": "DNS_ERROR_INVALID_PROPERTY"
        ,"type": {"kind":"Int32"}
        ,"value": 9553
    }
    ,{
         "name": "DNS_ERROR_TRY_AGAIN_LATER"
        ,"type": {"kind":"Int32"}
        ,"value": 9554
    }
    ,{
         "name": "DNS_ERROR_NOT_UNIQUE"
        ,"type": {"kind":"Int32"}
        ,"value": 9555
    }
    ,{
         "name": "DNS_ERROR_NON_RFC_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 9556
    }
    ,{
         "name": "DNS_STATUS_FQDN"
        ,"type": {"kind":"Int32"}
        ,"value": 9557
    }
    ,{
         "name": "DNS_STATUS_DOTTED_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 9558
    }
    ,{
         "name": "DNS_STATUS_SINGLE_PART_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 9559
    }
    ,{
         "name": "DNS_ERROR_INVALID_NAME_CHAR"
        ,"type": {"kind":"Int32"}
        ,"value": 9560
    }
    ,{
         "name": "DNS_ERROR_NUMERIC_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 9561
    }
    ,{
         "name": "DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER"
        ,"type": {"kind":"Int32"}
        ,"value": 9562
    }
    ,{
         "name": "DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION"
        ,"type": {"kind":"Int32"}
        ,"value": 9563
    }
    ,{
         "name": "DNS_ERROR_CANNOT_FIND_ROOT_HINTS"
        ,"type": {"kind":"Int32"}
        ,"value": 9564
    }
    ,{
         "name": "DNS_ERROR_INCONSISTENT_ROOT_HINTS"
        ,"type": {"kind":"Int32"}
        ,"value": 9565
    }
    ,{
         "name": "DNS_ERROR_DWORD_VALUE_TOO_SMALL"
        ,"type": {"kind":"Int32"}
        ,"value": 9566
    }
    ,{
         "name": "DNS_ERROR_DWORD_VALUE_TOO_LARGE"
        ,"type": {"kind":"Int32"}
        ,"value": 9567
    }
    ,{
         "name": "DNS_ERROR_BACKGROUND_LOADING"
        ,"type": {"kind":"Int32"}
        ,"value": 9568
    }
    ,{
         "name": "DNS_ERROR_NOT_ALLOWED_ON_RODC"
        ,"type": {"kind":"Int32"}
        ,"value": 9569
    }
    ,{
         "name": "DNS_ERROR_NOT_ALLOWED_UNDER_DNAME"
        ,"type": {"kind":"Int32"}
        ,"value": 9570
    }
    ,{
         "name": "DNS_ERROR_DELEGATION_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 9571
    }
    ,{
         "name": "DNS_ERROR_INVALID_POLICY_TABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 9572
    }
    ,{
         "name": "DNS_ERROR_ADDRESS_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 9573
    }
    ,{
         "name": "DNS_ERROR_ZONE_BASE"
        ,"type": {"kind":"Int32"}
        ,"value": 9600
    }
    ,{
         "name": "DNS_ERROR_ZONE_DOES_NOT_EXIST"
        ,"type": {"kind":"Int32"}
        ,"value": 9601
    }
    ,{
         "name": "DNS_ERROR_NO_ZONE_INFO"
        ,"type": {"kind":"Int32"}
        ,"value": 9602
    }
    ,{
         "name": "DNS_ERROR_INVALID_ZONE_OPERATION"
        ,"type": {"kind":"Int32"}
        ,"value": 9603
    }
    ,{
         "name": "DNS_ERROR_ZONE_CONFIGURATION_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 9604
    }
    ,{
         "name": "DNS_ERROR_ZONE_HAS_NO_SOA_RECORD"
        ,"type": {"kind":"Int32"}
        ,"value": 9605
    }
    ,{
         "name": "DNS_ERROR_ZONE_HAS_NO_NS_RECORDS"
        ,"type": {"kind":"Int32"}
        ,"value": 9606
    }
    ,{
         "name": "DNS_ERROR_ZONE_LOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": 9607
    }
    ,{
         "name": "DNS_ERROR_ZONE_CREATION_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 9608
    }
    ,{
         "name": "DNS_ERROR_ZONE_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 9609
    }
    ,{
         "name": "DNS_ERROR_AUTOZONE_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 9610
    }
    ,{
         "name": "DNS_ERROR_INVALID_ZONE_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 9611
    }
    ,{
         "name": "DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP"
        ,"type": {"kind":"Int32"}
        ,"value": 9612
    }
    ,{
         "name": "DNS_ERROR_ZONE_NOT_SECONDARY"
        ,"type": {"kind":"Int32"}
        ,"value": 9613
    }
    ,{
         "name": "DNS_ERROR_NEED_SECONDARY_ADDRESSES"
        ,"type": {"kind":"Int32"}
        ,"value": 9614
    }
    ,{
         "name": "DNS_ERROR_WINS_INIT_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 9615
    }
    ,{
         "name": "DNS_ERROR_NEED_WINS_SERVERS"
        ,"type": {"kind":"Int32"}
        ,"value": 9616
    }
    ,{
         "name": "DNS_ERROR_NBSTAT_INIT_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 9617
    }
    ,{
         "name": "DNS_ERROR_SOA_DELETE_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": 9618
    }
    ,{
         "name": "DNS_ERROR_FORWARDER_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 9619
    }
    ,{
         "name": "DNS_ERROR_ZONE_REQUIRES_MASTER_IP"
        ,"type": {"kind":"Int32"}
        ,"value": 9620
    }
    ,{
         "name": "DNS_ERROR_ZONE_IS_SHUTDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 9621
    }
    ,{
         "name": "DNS_ERROR_ZONE_LOCKED_FOR_SIGNING"
        ,"type": {"kind":"Int32"}
        ,"value": 9622
    }
    ,{
         "name": "DNS_ERROR_DATAFILE_BASE"
        ,"type": {"kind":"Int32"}
        ,"value": 9650
    }
    ,{
         "name": "DNS_ERROR_PRIMARY_REQUIRES_DATAFILE"
        ,"type": {"kind":"Int32"}
        ,"value": 9651
    }
    ,{
         "name": "DNS_ERROR_INVALID_DATAFILE_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 9652
    }
    ,{
         "name": "DNS_ERROR_DATAFILE_OPEN_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 9653
    }
    ,{
         "name": "DNS_ERROR_FILE_WRITEBACK_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 9654
    }
    ,{
         "name": "DNS_ERROR_DATAFILE_PARSING"
        ,"type": {"kind":"Int32"}
        ,"value": 9655
    }
    ,{
         "name": "DNS_ERROR_DATABASE_BASE"
        ,"type": {"kind":"Int32"}
        ,"value": 9700
    }
    ,{
         "name": "DNS_ERROR_RECORD_DOES_NOT_EXIST"
        ,"type": {"kind":"Int32"}
        ,"value": 9701
    }
    ,{
         "name": "DNS_ERROR_RECORD_FORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": 9702
    }
    ,{
         "name": "DNS_ERROR_NODE_CREATION_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 9703
    }
    ,{
         "name": "DNS_ERROR_UNKNOWN_RECORD_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 9704
    }
    ,{
         "name": "DNS_ERROR_RECORD_TIMED_OUT"
        ,"type": {"kind":"Int32"}
        ,"value": 9705
    }
    ,{
         "name": "DNS_ERROR_NAME_NOT_IN_ZONE"
        ,"type": {"kind":"Int32"}
        ,"value": 9706
    }
    ,{
         "name": "DNS_ERROR_CNAME_LOOP"
        ,"type": {"kind":"Int32"}
        ,"value": 9707
    }
    ,{
         "name": "DNS_ERROR_NODE_IS_CNAME"
        ,"type": {"kind":"Int32"}
        ,"value": 9708
    }
    ,{
         "name": "DNS_ERROR_CNAME_COLLISION"
        ,"type": {"kind":"Int32"}
        ,"value": 9709
    }
    ,{
         "name": "DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT"
        ,"type": {"kind":"Int32"}
        ,"value": 9710
    }
    ,{
         "name": "DNS_ERROR_RECORD_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 9711
    }
    ,{
         "name": "DNS_ERROR_SECONDARY_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": 9712
    }
    ,{
         "name": "DNS_ERROR_NO_CREATE_CACHE_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": 9713
    }
    ,{
         "name": "DNS_ERROR_NAME_DOES_NOT_EXIST"
        ,"type": {"kind":"Int32"}
        ,"value": 9714
    }
    ,{
         "name": "DNS_WARNING_PTR_CREATE_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 9715
    }
    ,{
         "name": "DNS_WARNING_DOMAIN_UNDELETED"
        ,"type": {"kind":"Int32"}
        ,"value": 9716
    }
    ,{
         "name": "DNS_ERROR_DS_UNAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 9717
    }
    ,{
         "name": "DNS_ERROR_DS_ZONE_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 9718
    }
    ,{
         "name": "DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE"
        ,"type": {"kind":"Int32"}
        ,"value": 9719
    }
    ,{
         "name": "DNS_ERROR_NODE_IS_DNAME"
        ,"type": {"kind":"Int32"}
        ,"value": 9720
    }
    ,{
         "name": "DNS_ERROR_DNAME_COLLISION"
        ,"type": {"kind":"Int32"}
        ,"value": 9721
    }
    ,{
         "name": "DNS_ERROR_ALIAS_LOOP"
        ,"type": {"kind":"Int32"}
        ,"value": 9722
    }
    ,{
         "name": "DNS_ERROR_OPERATION_BASE"
        ,"type": {"kind":"Int32"}
        ,"value": 9750
    }
    ,{
         "name": "DNS_INFO_AXFR_COMPLETE"
        ,"type": {"kind":"Int32"}
        ,"value": 9751
    }
    ,{
         "name": "DNS_ERROR_AXFR"
        ,"type": {"kind":"Int32"}
        ,"value": 9752
    }
    ,{
         "name": "DNS_INFO_ADDED_LOCAL_WINS"
        ,"type": {"kind":"Int32"}
        ,"value": 9753
    }
    ,{
         "name": "DNS_ERROR_SECURE_BASE"
        ,"type": {"kind":"Int32"}
        ,"value": 9800
    }
    ,{
         "name": "DNS_STATUS_CONTINUE_NEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 9801
    }
    ,{
         "name": "DNS_ERROR_SETUP_BASE"
        ,"type": {"kind":"Int32"}
        ,"value": 9850
    }
    ,{
         "name": "DNS_ERROR_NO_TCPIP"
        ,"type": {"kind":"Int32"}
        ,"value": 9851
    }
    ,{
         "name": "DNS_ERROR_NO_DNS_SERVERS"
        ,"type": {"kind":"Int32"}
        ,"value": 9852
    }
    ,{
         "name": "DNS_ERROR_DP_BASE"
        ,"type": {"kind":"Int32"}
        ,"value": 9900
    }
    ,{
         "name": "DNS_ERROR_DP_DOES_NOT_EXIST"
        ,"type": {"kind":"Int32"}
        ,"value": 9901
    }
    ,{
         "name": "DNS_ERROR_DP_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 9902
    }
    ,{
         "name": "DNS_ERROR_DP_NOT_ENLISTED"
        ,"type": {"kind":"Int32"}
        ,"value": 9903
    }
    ,{
         "name": "DNS_ERROR_DP_ALREADY_ENLISTED"
        ,"type": {"kind":"Int32"}
        ,"value": 9904
    }
    ,{
         "name": "DNS_ERROR_DP_NOT_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 9905
    }
    ,{
         "name": "DNS_ERROR_DP_FSMO_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 9906
    }
    ,{
         "name": "DNS_ERROR_RRL_NOT_ENABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 9911
    }
    ,{
         "name": "DNS_ERROR_RRL_INVALID_WINDOW_SIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 9912
    }
    ,{
         "name": "DNS_ERROR_RRL_INVALID_IPV4_PREFIX"
        ,"type": {"kind":"Int32"}
        ,"value": 9913
    }
    ,{
         "name": "DNS_ERROR_RRL_INVALID_IPV6_PREFIX"
        ,"type": {"kind":"Int32"}
        ,"value": 9914
    }
    ,{
         "name": "DNS_ERROR_RRL_INVALID_TC_RATE"
        ,"type": {"kind":"Int32"}
        ,"value": 9915
    }
    ,{
         "name": "DNS_ERROR_RRL_INVALID_LEAK_RATE"
        ,"type": {"kind":"Int32"}
        ,"value": 9916
    }
    ,{
         "name": "DNS_ERROR_RRL_LEAK_RATE_LESSTHAN_TC_RATE"
        ,"type": {"kind":"Int32"}
        ,"value": 9917
    }
    ,{
         "name": "DNS_ERROR_VIRTUALIZATION_INSTANCE_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 9921
    }
    ,{
         "name": "DNS_ERROR_VIRTUALIZATION_INSTANCE_DOES_NOT_EXIST"
        ,"type": {"kind":"Int32"}
        ,"value": 9922
    }
    ,{
         "name": "DNS_ERROR_VIRTUALIZATION_TREE_LOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": 9923
    }
    ,{
         "name": "DNS_ERROR_INVAILD_VIRTUALIZATION_INSTANCE_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 9924
    }
    ,{
         "name": "DNS_ERROR_DEFAULT_VIRTUALIZATION_INSTANCE"
        ,"type": {"kind":"Int32"}
        ,"value": 9925
    }
    ,{
         "name": "DNS_ERROR_ZONESCOPE_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 9951
    }
    ,{
         "name": "DNS_ERROR_ZONESCOPE_DOES_NOT_EXIST"
        ,"type": {"kind":"Int32"}
        ,"value": 9952
    }
    ,{
         "name": "DNS_ERROR_DEFAULT_ZONESCOPE"
        ,"type": {"kind":"Int32"}
        ,"value": 9953
    }
    ,{
         "name": "DNS_ERROR_INVALID_ZONESCOPE_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 9954
    }
    ,{
         "name": "DNS_ERROR_NOT_ALLOWED_WITH_ZONESCOPES"
        ,"type": {"kind":"Int32"}
        ,"value": 9955
    }
    ,{
         "name": "DNS_ERROR_LOAD_ZONESCOPE_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 9956
    }
    ,{
         "name": "DNS_ERROR_ZONESCOPE_FILE_WRITEBACK_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 9957
    }
    ,{
         "name": "DNS_ERROR_INVALID_SCOPE_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 9958
    }
    ,{
         "name": "DNS_ERROR_SCOPE_DOES_NOT_EXIST"
        ,"type": {"kind":"Int32"}
        ,"value": 9959
    }
    ,{
         "name": "DNS_ERROR_DEFAULT_SCOPE"
        ,"type": {"kind":"Int32"}
        ,"value": 9960
    }
    ,{
         "name": "DNS_ERROR_INVALID_SCOPE_OPERATION"
        ,"type": {"kind":"Int32"}
        ,"value": 9961
    }
    ,{
         "name": "DNS_ERROR_SCOPE_LOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": 9962
    }
    ,{
         "name": "DNS_ERROR_SCOPE_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 9963
    }
    ,{
         "name": "DNS_ERROR_POLICY_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 9971
    }
    ,{
         "name": "DNS_ERROR_POLICY_DOES_NOT_EXIST"
        ,"type": {"kind":"Int32"}
        ,"value": 9972
    }
    ,{
         "name": "DNS_ERROR_POLICY_INVALID_CRITERIA"
        ,"type": {"kind":"Int32"}
        ,"value": 9973
    }
    ,{
         "name": "DNS_ERROR_POLICY_INVALID_SETTINGS"
        ,"type": {"kind":"Int32"}
        ,"value": 9974
    }
    ,{
         "name": "DNS_ERROR_CLIENT_SUBNET_IS_ACCESSED"
        ,"type": {"kind":"Int32"}
        ,"value": 9975
    }
    ,{
         "name": "DNS_ERROR_CLIENT_SUBNET_DOES_NOT_EXIST"
        ,"type": {"kind":"Int32"}
        ,"value": 9976
    }
    ,{
         "name": "DNS_ERROR_CLIENT_SUBNET_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 9977
    }
    ,{
         "name": "DNS_ERROR_SUBNET_DOES_NOT_EXIST"
        ,"type": {"kind":"Int32"}
        ,"value": 9978
    }
    ,{
         "name": "DNS_ERROR_SUBNET_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 9979
    }
    ,{
         "name": "DNS_ERROR_POLICY_LOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": 9980
    }
    ,{
         "name": "DNS_ERROR_POLICY_INVALID_WEIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": 9981
    }
    ,{
         "name": "DNS_ERROR_POLICY_INVALID_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 9982
    }
    ,{
         "name": "DNS_ERROR_POLICY_MISSING_CRITERIA"
        ,"type": {"kind":"Int32"}
        ,"value": 9983
    }
    ,{
         "name": "DNS_ERROR_INVALID_CLIENT_SUBNET_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 9984
    }
    ,{
         "name": "DNS_ERROR_POLICY_PROCESSING_ORDER_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": 9985
    }
    ,{
         "name": "DNS_ERROR_POLICY_SCOPE_MISSING"
        ,"type": {"kind":"Int32"}
        ,"value": 9986
    }
    ,{
         "name": "DNS_ERROR_POLICY_SCOPE_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": 9987
    }
    ,{
         "name": "DNS_ERROR_SERVERSCOPE_IS_REFERENCED"
        ,"type": {"kind":"Int32"}
        ,"value": 9988
    }
    ,{
         "name": "DNS_ERROR_ZONESCOPE_IS_REFERENCED"
        ,"type": {"kind":"Int32"}
        ,"value": 9989
    }
    ,{
         "name": "DNS_ERROR_POLICY_INVALID_CRITERIA_CLIENT_SUBNET"
        ,"type": {"kind":"Int32"}
        ,"value": 9990
    }
    ,{
         "name": "DNS_ERROR_POLICY_INVALID_CRITERIA_TRANSPORT_PROTOCOL"
        ,"type": {"kind":"Int32"}
        ,"value": 9991
    }
    ,{
         "name": "DNS_ERROR_POLICY_INVALID_CRITERIA_NETWORK_PROTOCOL"
        ,"type": {"kind":"Int32"}
        ,"value": 9992
    }
    ,{
         "name": "DNS_ERROR_POLICY_INVALID_CRITERIA_INTERFACE"
        ,"type": {"kind":"Int32"}
        ,"value": 9993
    }
    ,{
         "name": "DNS_ERROR_POLICY_INVALID_CRITERIA_FQDN"
        ,"type": {"kind":"Int32"}
        ,"value": 9994
    }
    ,{
         "name": "DNS_ERROR_POLICY_INVALID_CRITERIA_QUERY_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 9995
    }
    ,{
         "name": "DNS_ERROR_POLICY_INVALID_CRITERIA_TIME_OF_DAY"
        ,"type": {"kind":"Int32"}
        ,"value": 9996
    }
    ,{
         "name": "WSABASEERR"
        ,"type": {"kind":"Int32"}
        ,"value": 10000
    }
    ,{
         "name": "WSAEINTR"
        ,"type": {"kind":"Int32"}
        ,"value": 10004
    }
    ,{
         "name": "WSAEBADF"
        ,"type": {"kind":"Int32"}
        ,"value": 10009
    }
    ,{
         "name": "WSAEACCES"
        ,"type": {"kind":"Int32"}
        ,"value": 10013
    }
    ,{
         "name": "WSAEFAULT"
        ,"type": {"kind":"Int32"}
        ,"value": 10014
    }
    ,{
         "name": "WSAEINVAL"
        ,"type": {"kind":"Int32"}
        ,"value": 10022
    }
    ,{
         "name": "WSAEMFILE"
        ,"type": {"kind":"Int32"}
        ,"value": 10024
    }
    ,{
         "name": "WSAEWOULDBLOCK"
        ,"type": {"kind":"Int32"}
        ,"value": 10035
    }
    ,{
         "name": "WSAEINPROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 10036
    }
    ,{
         "name": "WSAEALREADY"
        ,"type": {"kind":"Int32"}
        ,"value": 10037
    }
    ,{
         "name": "WSAENOTSOCK"
        ,"type": {"kind":"Int32"}
        ,"value": 10038
    }
    ,{
         "name": "WSAEDESTADDRREQ"
        ,"type": {"kind":"Int32"}
        ,"value": 10039
    }
    ,{
         "name": "WSAEMSGSIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 10040
    }
    ,{
         "name": "WSAEPROTOTYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 10041
    }
    ,{
         "name": "WSAENOPROTOOPT"
        ,"type": {"kind":"Int32"}
        ,"value": 10042
    }
    ,{
         "name": "WSAEPROTONOSUPPORT"
        ,"type": {"kind":"Int32"}
        ,"value": 10043
    }
    ,{
         "name": "WSAESOCKTNOSUPPORT"
        ,"type": {"kind":"Int32"}
        ,"value": 10044
    }
    ,{
         "name": "WSAEOPNOTSUPP"
        ,"type": {"kind":"Int32"}
        ,"value": 10045
    }
    ,{
         "name": "WSAEPFNOSUPPORT"
        ,"type": {"kind":"Int32"}
        ,"value": 10046
    }
    ,{
         "name": "WSAEAFNOSUPPORT"
        ,"type": {"kind":"Int32"}
        ,"value": 10047
    }
    ,{
         "name": "WSAEADDRINUSE"
        ,"type": {"kind":"Int32"}
        ,"value": 10048
    }
    ,{
         "name": "WSAEADDRNOTAVAIL"
        ,"type": {"kind":"Int32"}
        ,"value": 10049
    }
    ,{
         "name": "WSAENETDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 10050
    }
    ,{
         "name": "WSAENETUNREACH"
        ,"type": {"kind":"Int32"}
        ,"value": 10051
    }
    ,{
         "name": "WSAENETRESET"
        ,"type": {"kind":"Int32"}
        ,"value": 10052
    }
    ,{
         "name": "WSAECONNABORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 10053
    }
    ,{
         "name": "WSAECONNRESET"
        ,"type": {"kind":"Int32"}
        ,"value": 10054
    }
    ,{
         "name": "WSAENOBUFS"
        ,"type": {"kind":"Int32"}
        ,"value": 10055
    }
    ,{
         "name": "WSAEISCONN"
        ,"type": {"kind":"Int32"}
        ,"value": 10056
    }
    ,{
         "name": "WSAENOTCONN"
        ,"type": {"kind":"Int32"}
        ,"value": 10057
    }
    ,{
         "name": "WSAESHUTDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 10058
    }
    ,{
         "name": "WSAETOOMANYREFS"
        ,"type": {"kind":"Int32"}
        ,"value": 10059
    }
    ,{
         "name": "WSAETIMEDOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 10060
    }
    ,{
         "name": "WSAECONNREFUSED"
        ,"type": {"kind":"Int32"}
        ,"value": 10061
    }
    ,{
         "name": "WSAELOOP"
        ,"type": {"kind":"Int32"}
        ,"value": 10062
    }
    ,{
         "name": "WSAENAMETOOLONG"
        ,"type": {"kind":"Int32"}
        ,"value": 10063
    }
    ,{
         "name": "WSAEHOSTDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 10064
    }
    ,{
         "name": "WSAEHOSTUNREACH"
        ,"type": {"kind":"Int32"}
        ,"value": 10065
    }
    ,{
         "name": "WSAENOTEMPTY"
        ,"type": {"kind":"Int32"}
        ,"value": 10066
    }
    ,{
         "name": "WSAEPROCLIM"
        ,"type": {"kind":"Int32"}
        ,"value": 10067
    }
    ,{
         "name": "WSAEUSERS"
        ,"type": {"kind":"Int32"}
        ,"value": 10068
    }
    ,{
         "name": "WSAEDQUOT"
        ,"type": {"kind":"Int32"}
        ,"value": 10069
    }
    ,{
         "name": "WSAESTALE"
        ,"type": {"kind":"Int32"}
        ,"value": 10070
    }
    ,{
         "name": "WSAEREMOTE"
        ,"type": {"kind":"Int32"}
        ,"value": 10071
    }
    ,{
         "name": "WSASYSNOTREADY"
        ,"type": {"kind":"Int32"}
        ,"value": 10091
    }
    ,{
         "name": "WSAVERNOTSUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 10092
    }
    ,{
         "name": "WSANOTINITIALISED"
        ,"type": {"kind":"Int32"}
        ,"value": 10093
    }
    ,{
         "name": "WSAEDISCON"
        ,"type": {"kind":"Int32"}
        ,"value": 10101
    }
    ,{
         "name": "WSAENOMORE"
        ,"type": {"kind":"Int32"}
        ,"value": 10102
    }
    ,{
         "name": "WSAECANCELLED"
        ,"type": {"kind":"Int32"}
        ,"value": 10103
    }
    ,{
         "name": "WSAEINVALIDPROCTABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 10104
    }
    ,{
         "name": "WSAEINVALIDPROVIDER"
        ,"type": {"kind":"Int32"}
        ,"value": 10105
    }
    ,{
         "name": "WSAEPROVIDERFAILEDINIT"
        ,"type": {"kind":"Int32"}
        ,"value": 10106
    }
    ,{
         "name": "WSASYSCALLFAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 10107
    }
    ,{
         "name": "WSASERVICE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 10108
    }
    ,{
         "name": "WSATYPE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 10109
    }
    ,{
         "name": "WSA_E_NO_MORE"
        ,"type": {"kind":"Int32"}
        ,"value": 10110
    }
    ,{
         "name": "WSA_E_CANCELLED"
        ,"type": {"kind":"Int32"}
        ,"value": 10111
    }
    ,{
         "name": "WSAEREFUSED"
        ,"type": {"kind":"Int32"}
        ,"value": 10112
    }
    ,{
         "name": "WSAHOST_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 11001
    }
    ,{
         "name": "WSATRY_AGAIN"
        ,"type": {"kind":"Int32"}
        ,"value": 11002
    }
    ,{
         "name": "WSANO_RECOVERY"
        ,"type": {"kind":"Int32"}
        ,"value": 11003
    }
    ,{
         "name": "WSANO_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": 11004
    }
    ,{
         "name": "WSA_QOS_RECEIVERS"
        ,"type": {"kind":"Int32"}
        ,"value": 11005
    }
    ,{
         "name": "WSA_QOS_SENDERS"
        ,"type": {"kind":"Int32"}
        ,"value": 11006
    }
    ,{
         "name": "WSA_QOS_NO_SENDERS"
        ,"type": {"kind":"Int32"}
        ,"value": 11007
    }
    ,{
         "name": "WSA_QOS_NO_RECEIVERS"
        ,"type": {"kind":"Int32"}
        ,"value": 11008
    }
    ,{
         "name": "WSA_QOS_REQUEST_CONFIRMED"
        ,"type": {"kind":"Int32"}
        ,"value": 11009
    }
    ,{
         "name": "WSA_QOS_ADMISSION_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 11010
    }
    ,{
         "name": "WSA_QOS_POLICY_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 11011
    }
    ,{
         "name": "WSA_QOS_BAD_STYLE"
        ,"type": {"kind":"Int32"}
        ,"value": 11012
    }
    ,{
         "name": "WSA_QOS_BAD_OBJECT"
        ,"type": {"kind":"Int32"}
        ,"value": 11013
    }
    ,{
         "name": "WSA_QOS_TRAFFIC_CTRL_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 11014
    }
    ,{
         "name": "WSA_QOS_GENERIC_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 11015
    }
    ,{
         "name": "WSA_QOS_ESERVICETYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 11016
    }
    ,{
         "name": "WSA_QOS_EFLOWSPEC"
        ,"type": {"kind":"Int32"}
        ,"value": 11017
    }
    ,{
         "name": "WSA_QOS_EPROVSPECBUF"
        ,"type": {"kind":"Int32"}
        ,"value": 11018
    }
    ,{
         "name": "WSA_QOS_EFILTERSTYLE"
        ,"type": {"kind":"Int32"}
        ,"value": 11019
    }
    ,{
         "name": "WSA_QOS_EFILTERTYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 11020
    }
    ,{
         "name": "WSA_QOS_EFILTERCOUNT"
        ,"type": {"kind":"Int32"}
        ,"value": 11021
    }
    ,{
         "name": "WSA_QOS_EOBJLENGTH"
        ,"type": {"kind":"Int32"}
        ,"value": 11022
    }
    ,{
         "name": "WSA_QOS_EFLOWCOUNT"
        ,"type": {"kind":"Int32"}
        ,"value": 11023
    }
    ,{
         "name": "WSA_QOS_EUNKOWNPSOBJ"
        ,"type": {"kind":"Int32"}
        ,"value": 11024
    }
    ,{
         "name": "WSA_QOS_EPOLICYOBJ"
        ,"type": {"kind":"Int32"}
        ,"value": 11025
    }
    ,{
         "name": "WSA_QOS_EFLOWDESC"
        ,"type": {"kind":"Int32"}
        ,"value": 11026
    }
    ,{
         "name": "WSA_QOS_EPSFLOWSPEC"
        ,"type": {"kind":"Int32"}
        ,"value": 11027
    }
    ,{
         "name": "WSA_QOS_EPSFILTERSPEC"
        ,"type": {"kind":"Int32"}
        ,"value": 11028
    }
    ,{
         "name": "WSA_QOS_ESDMODEOBJ"
        ,"type": {"kind":"Int32"}
        ,"value": 11029
    }
    ,{
         "name": "WSA_QOS_ESHAPERATEOBJ"
        ,"type": {"kind":"Int32"}
        ,"value": 11030
    }
    ,{
         "name": "WSA_QOS_RESERVED_PETYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 11031
    }
    ,{
         "name": "WSA_SECURE_HOST_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 11032
    }
    ,{
         "name": "WSA_IPSEC_NAME_POLICY_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 11033
    }
    ,{
         "name": "ERROR_IPSEC_QM_POLICY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 13000
    }
    ,{
         "name": "ERROR_IPSEC_QM_POLICY_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 13001
    }
    ,{
         "name": "ERROR_IPSEC_QM_POLICY_IN_USE"
        ,"type": {"kind":"Int32"}
        ,"value": 13002
    }
    ,{
         "name": "ERROR_IPSEC_MM_POLICY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 13003
    }
    ,{
         "name": "ERROR_IPSEC_MM_POLICY_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 13004
    }
    ,{
         "name": "ERROR_IPSEC_MM_POLICY_IN_USE"
        ,"type": {"kind":"Int32"}
        ,"value": 13005
    }
    ,{
         "name": "ERROR_IPSEC_MM_FILTER_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 13006
    }
    ,{
         "name": "ERROR_IPSEC_MM_FILTER_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 13007
    }
    ,{
         "name": "ERROR_IPSEC_TRANSPORT_FILTER_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 13008
    }
    ,{
         "name": "ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 13009
    }
    ,{
         "name": "ERROR_IPSEC_MM_AUTH_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 13010
    }
    ,{
         "name": "ERROR_IPSEC_MM_AUTH_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 13011
    }
    ,{
         "name": "ERROR_IPSEC_MM_AUTH_IN_USE"
        ,"type": {"kind":"Int32"}
        ,"value": 13012
    }
    ,{
         "name": "ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 13013
    }
    ,{
         "name": "ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 13014
    }
    ,{
         "name": "ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 13015
    }
    ,{
         "name": "ERROR_IPSEC_TUNNEL_FILTER_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 13016
    }
    ,{
         "name": "ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 13017
    }
    ,{
         "name": "ERROR_IPSEC_MM_FILTER_PENDING_DELETION"
        ,"type": {"kind":"Int32"}
        ,"value": 13018
    }
    ,{
         "name": "ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION"
        ,"type": {"kind":"Int32"}
        ,"value": 13019
    }
    ,{
         "name": "ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION"
        ,"type": {"kind":"Int32"}
        ,"value": 13020
    }
    ,{
         "name": "ERROR_IPSEC_MM_POLICY_PENDING_DELETION"
        ,"type": {"kind":"Int32"}
        ,"value": 13021
    }
    ,{
         "name": "ERROR_IPSEC_MM_AUTH_PENDING_DELETION"
        ,"type": {"kind":"Int32"}
        ,"value": 13022
    }
    ,{
         "name": "ERROR_IPSEC_QM_POLICY_PENDING_DELETION"
        ,"type": {"kind":"Int32"}
        ,"value": 13023
    }
    ,{
         "name": "WARNING_IPSEC_MM_POLICY_PRUNED"
        ,"type": {"kind":"Int32"}
        ,"value": 13024
    }
    ,{
         "name": "WARNING_IPSEC_QM_POLICY_PRUNED"
        ,"type": {"kind":"Int32"}
        ,"value": 13025
    }
    ,{
         "name": "ERROR_IPSEC_IKE_NEG_STATUS_BEGIN"
        ,"type": {"kind":"Int32"}
        ,"value": 13800
    }
    ,{
         "name": "ERROR_IPSEC_IKE_AUTH_FAIL"
        ,"type": {"kind":"Int32"}
        ,"value": 13801
    }
    ,{
         "name": "ERROR_IPSEC_IKE_ATTRIB_FAIL"
        ,"type": {"kind":"Int32"}
        ,"value": 13802
    }
    ,{
         "name": "ERROR_IPSEC_IKE_NEGOTIATION_PENDING"
        ,"type": {"kind":"Int32"}
        ,"value": 13803
    }
    ,{
         "name": "ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 13804
    }
    ,{
         "name": "ERROR_IPSEC_IKE_TIMED_OUT"
        ,"type": {"kind":"Int32"}
        ,"value": 13805
    }
    ,{
         "name": "ERROR_IPSEC_IKE_NO_CERT"
        ,"type": {"kind":"Int32"}
        ,"value": 13806
    }
    ,{
         "name": "ERROR_IPSEC_IKE_SA_DELETED"
        ,"type": {"kind":"Int32"}
        ,"value": 13807
    }
    ,{
         "name": "ERROR_IPSEC_IKE_SA_REAPED"
        ,"type": {"kind":"Int32"}
        ,"value": 13808
    }
    ,{
         "name": "ERROR_IPSEC_IKE_MM_ACQUIRE_DROP"
        ,"type": {"kind":"Int32"}
        ,"value": 13809
    }
    ,{
         "name": "ERROR_IPSEC_IKE_QM_ACQUIRE_DROP"
        ,"type": {"kind":"Int32"}
        ,"value": 13810
    }
    ,{
         "name": "ERROR_IPSEC_IKE_QUEUE_DROP_MM"
        ,"type": {"kind":"Int32"}
        ,"value": 13811
    }
    ,{
         "name": "ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM"
        ,"type": {"kind":"Int32"}
        ,"value": 13812
    }
    ,{
         "name": "ERROR_IPSEC_IKE_DROP_NO_RESPONSE"
        ,"type": {"kind":"Int32"}
        ,"value": 13813
    }
    ,{
         "name": "ERROR_IPSEC_IKE_MM_DELAY_DROP"
        ,"type": {"kind":"Int32"}
        ,"value": 13814
    }
    ,{
         "name": "ERROR_IPSEC_IKE_QM_DELAY_DROP"
        ,"type": {"kind":"Int32"}
        ,"value": 13815
    }
    ,{
         "name": "ERROR_IPSEC_IKE_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 13816
    }
    ,{
         "name": "ERROR_IPSEC_IKE_CRL_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 13817
    }
    ,{
         "name": "ERROR_IPSEC_IKE_INVALID_KEY_USAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 13818
    }
    ,{
         "name": "ERROR_IPSEC_IKE_INVALID_CERT_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 13819
    }
    ,{
         "name": "ERROR_IPSEC_IKE_NO_PRIVATE_KEY"
        ,"type": {"kind":"Int32"}
        ,"value": 13820
    }
    ,{
         "name": "ERROR_IPSEC_IKE_SIMULTANEOUS_REKEY"
        ,"type": {"kind":"Int32"}
        ,"value": 13821
    }
    ,{
         "name": "ERROR_IPSEC_IKE_DH_FAIL"
        ,"type": {"kind":"Int32"}
        ,"value": 13822
    }
    ,{
         "name": "ERROR_IPSEC_IKE_CRITICAL_PAYLOAD_NOT_RECOGNIZED"
        ,"type": {"kind":"Int32"}
        ,"value": 13823
    }
    ,{
         "name": "ERROR_IPSEC_IKE_INVALID_HEADER"
        ,"type": {"kind":"Int32"}
        ,"value": 13824
    }
    ,{
         "name": "ERROR_IPSEC_IKE_NO_POLICY"
        ,"type": {"kind":"Int32"}
        ,"value": 13825
    }
    ,{
         "name": "ERROR_IPSEC_IKE_INVALID_SIGNATURE"
        ,"type": {"kind":"Int32"}
        ,"value": 13826
    }
    ,{
         "name": "ERROR_IPSEC_IKE_KERBEROS_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 13827
    }
    ,{
         "name": "ERROR_IPSEC_IKE_NO_PUBLIC_KEY"
        ,"type": {"kind":"Int32"}
        ,"value": 13828
    }
    ,{
         "name": "ERROR_IPSEC_IKE_PROCESS_ERR"
        ,"type": {"kind":"Int32"}
        ,"value": 13829
    }
    ,{
         "name": "ERROR_IPSEC_IKE_PROCESS_ERR_SA"
        ,"type": {"kind":"Int32"}
        ,"value": 13830
    }
    ,{
         "name": "ERROR_IPSEC_IKE_PROCESS_ERR_PROP"
        ,"type": {"kind":"Int32"}
        ,"value": 13831
    }
    ,{
         "name": "ERROR_IPSEC_IKE_PROCESS_ERR_TRANS"
        ,"type": {"kind":"Int32"}
        ,"value": 13832
    }
    ,{
         "name": "ERROR_IPSEC_IKE_PROCESS_ERR_KE"
        ,"type": {"kind":"Int32"}
        ,"value": 13833
    }
    ,{
         "name": "ERROR_IPSEC_IKE_PROCESS_ERR_ID"
        ,"type": {"kind":"Int32"}
        ,"value": 13834
    }
    ,{
         "name": "ERROR_IPSEC_IKE_PROCESS_ERR_CERT"
        ,"type": {"kind":"Int32"}
        ,"value": 13835
    }
    ,{
         "name": "ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ"
        ,"type": {"kind":"Int32"}
        ,"value": 13836
    }
    ,{
         "name": "ERROR_IPSEC_IKE_PROCESS_ERR_HASH"
        ,"type": {"kind":"Int32"}
        ,"value": 13837
    }
    ,{
         "name": "ERROR_IPSEC_IKE_PROCESS_ERR_SIG"
        ,"type": {"kind":"Int32"}
        ,"value": 13838
    }
    ,{
         "name": "ERROR_IPSEC_IKE_PROCESS_ERR_NONCE"
        ,"type": {"kind":"Int32"}
        ,"value": 13839
    }
    ,{
         "name": "ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY"
        ,"type": {"kind":"Int32"}
        ,"value": 13840
    }
    ,{
         "name": "ERROR_IPSEC_IKE_PROCESS_ERR_DELETE"
        ,"type": {"kind":"Int32"}
        ,"value": 13841
    }
    ,{
         "name": "ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR"
        ,"type": {"kind":"Int32"}
        ,"value": 13842
    }
    ,{
         "name": "ERROR_IPSEC_IKE_INVALID_PAYLOAD"
        ,"type": {"kind":"Int32"}
        ,"value": 13843
    }
    ,{
         "name": "ERROR_IPSEC_IKE_LOAD_SOFT_SA"
        ,"type": {"kind":"Int32"}
        ,"value": 13844
    }
    ,{
         "name": "ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 13845
    }
    ,{
         "name": "ERROR_IPSEC_IKE_INVALID_COOKIE"
        ,"type": {"kind":"Int32"}
        ,"value": 13846
    }
    ,{
         "name": "ERROR_IPSEC_IKE_NO_PEER_CERT"
        ,"type": {"kind":"Int32"}
        ,"value": 13847
    }
    ,{
         "name": "ERROR_IPSEC_IKE_PEER_CRL_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 13848
    }
    ,{
         "name": "ERROR_IPSEC_IKE_POLICY_CHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 13849
    }
    ,{
         "name": "ERROR_IPSEC_IKE_NO_MM_POLICY"
        ,"type": {"kind":"Int32"}
        ,"value": 13850
    }
    ,{
         "name": "ERROR_IPSEC_IKE_NOTCBPRIV"
        ,"type": {"kind":"Int32"}
        ,"value": 13851
    }
    ,{
         "name": "ERROR_IPSEC_IKE_SECLOADFAIL"
        ,"type": {"kind":"Int32"}
        ,"value": 13852
    }
    ,{
         "name": "ERROR_IPSEC_IKE_FAILSSPINIT"
        ,"type": {"kind":"Int32"}
        ,"value": 13853
    }
    ,{
         "name": "ERROR_IPSEC_IKE_FAILQUERYSSP"
        ,"type": {"kind":"Int32"}
        ,"value": 13854
    }
    ,{
         "name": "ERROR_IPSEC_IKE_SRVACQFAIL"
        ,"type": {"kind":"Int32"}
        ,"value": 13855
    }
    ,{
         "name": "ERROR_IPSEC_IKE_SRVQUERYCRED"
        ,"type": {"kind":"Int32"}
        ,"value": 13856
    }
    ,{
         "name": "ERROR_IPSEC_IKE_GETSPIFAIL"
        ,"type": {"kind":"Int32"}
        ,"value": 13857
    }
    ,{
         "name": "ERROR_IPSEC_IKE_INVALID_FILTER"
        ,"type": {"kind":"Int32"}
        ,"value": 13858
    }
    ,{
         "name": "ERROR_IPSEC_IKE_OUT_OF_MEMORY"
        ,"type": {"kind":"Int32"}
        ,"value": 13859
    }
    ,{
         "name": "ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 13860
    }
    ,{
         "name": "ERROR_IPSEC_IKE_INVALID_POLICY"
        ,"type": {"kind":"Int32"}
        ,"value": 13861
    }
    ,{
         "name": "ERROR_IPSEC_IKE_UNKNOWN_DOI"
        ,"type": {"kind":"Int32"}
        ,"value": 13862
    }
    ,{
         "name": "ERROR_IPSEC_IKE_INVALID_SITUATION"
        ,"type": {"kind":"Int32"}
        ,"value": 13863
    }
    ,{
         "name": "ERROR_IPSEC_IKE_DH_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 13864
    }
    ,{
         "name": "ERROR_IPSEC_IKE_INVALID_GROUP"
        ,"type": {"kind":"Int32"}
        ,"value": 13865
    }
    ,{
         "name": "ERROR_IPSEC_IKE_ENCRYPT"
        ,"type": {"kind":"Int32"}
        ,"value": 13866
    }
    ,{
         "name": "ERROR_IPSEC_IKE_DECRYPT"
        ,"type": {"kind":"Int32"}
        ,"value": 13867
    }
    ,{
         "name": "ERROR_IPSEC_IKE_POLICY_MATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 13868
    }
    ,{
         "name": "ERROR_IPSEC_IKE_UNSUPPORTED_ID"
        ,"type": {"kind":"Int32"}
        ,"value": 13869
    }
    ,{
         "name": "ERROR_IPSEC_IKE_INVALID_HASH"
        ,"type": {"kind":"Int32"}
        ,"value": 13870
    }
    ,{
         "name": "ERROR_IPSEC_IKE_INVALID_HASH_ALG"
        ,"type": {"kind":"Int32"}
        ,"value": 13871
    }
    ,{
         "name": "ERROR_IPSEC_IKE_INVALID_HASH_SIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 13872
    }
    ,{
         "name": "ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG"
        ,"type": {"kind":"Int32"}
        ,"value": 13873
    }
    ,{
         "name": "ERROR_IPSEC_IKE_INVALID_AUTH_ALG"
        ,"type": {"kind":"Int32"}
        ,"value": 13874
    }
    ,{
         "name": "ERROR_IPSEC_IKE_INVALID_SIG"
        ,"type": {"kind":"Int32"}
        ,"value": 13875
    }
    ,{
         "name": "ERROR_IPSEC_IKE_LOAD_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 13876
    }
    ,{
         "name": "ERROR_IPSEC_IKE_RPC_DELETE"
        ,"type": {"kind":"Int32"}
        ,"value": 13877
    }
    ,{
         "name": "ERROR_IPSEC_IKE_BENIGN_REINIT"
        ,"type": {"kind":"Int32"}
        ,"value": 13878
    }
    ,{
         "name": "ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY"
        ,"type": {"kind":"Int32"}
        ,"value": 13879
    }
    ,{
         "name": "ERROR_IPSEC_IKE_INVALID_MAJOR_VERSION"
        ,"type": {"kind":"Int32"}
        ,"value": 13880
    }
    ,{
         "name": "ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN"
        ,"type": {"kind":"Int32"}
        ,"value": 13881
    }
    ,{
         "name": "ERROR_IPSEC_IKE_MM_LIMIT"
        ,"type": {"kind":"Int32"}
        ,"value": 13882
    }
    ,{
         "name": "ERROR_IPSEC_IKE_NEGOTIATION_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 13883
    }
    ,{
         "name": "ERROR_IPSEC_IKE_QM_LIMIT"
        ,"type": {"kind":"Int32"}
        ,"value": 13884
    }
    ,{
         "name": "ERROR_IPSEC_IKE_MM_EXPIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 13885
    }
    ,{
         "name": "ERROR_IPSEC_IKE_PEER_MM_ASSUMED_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": 13886
    }
    ,{
         "name": "ERROR_IPSEC_IKE_CERT_CHAIN_POLICY_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 13887
    }
    ,{
         "name": "ERROR_IPSEC_IKE_UNEXPECTED_MESSAGE_ID"
        ,"type": {"kind":"Int32"}
        ,"value": 13888
    }
    ,{
         "name": "ERROR_IPSEC_IKE_INVALID_AUTH_PAYLOAD"
        ,"type": {"kind":"Int32"}
        ,"value": 13889
    }
    ,{
         "name": "ERROR_IPSEC_IKE_DOS_COOKIE_SENT"
        ,"type": {"kind":"Int32"}
        ,"value": 13890
    }
    ,{
         "name": "ERROR_IPSEC_IKE_SHUTTING_DOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 13891
    }
    ,{
         "name": "ERROR_IPSEC_IKE_CGA_AUTH_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 13892
    }
    ,{
         "name": "ERROR_IPSEC_IKE_PROCESS_ERR_NATOA"
        ,"type": {"kind":"Int32"}
        ,"value": 13893
    }
    ,{
         "name": "ERROR_IPSEC_IKE_INVALID_MM_FOR_QM"
        ,"type": {"kind":"Int32"}
        ,"value": 13894
    }
    ,{
         "name": "ERROR_IPSEC_IKE_QM_EXPIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 13895
    }
    ,{
         "name": "ERROR_IPSEC_IKE_TOO_MANY_FILTERS"
        ,"type": {"kind":"Int32"}
        ,"value": 13896
    }
    ,{
         "name": "ERROR_IPSEC_IKE_NEG_STATUS_END"
        ,"type": {"kind":"Int32"}
        ,"value": 13897
    }
    ,{
         "name": "ERROR_IPSEC_IKE_KILL_DUMMY_NAP_TUNNEL"
        ,"type": {"kind":"Int32"}
        ,"value": 13898
    }
    ,{
         "name": "ERROR_IPSEC_IKE_INNER_IP_ASSIGNMENT_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 13899
    }
    ,{
         "name": "ERROR_IPSEC_IKE_REQUIRE_CP_PAYLOAD_MISSING"
        ,"type": {"kind":"Int32"}
        ,"value": 13900
    }
    ,{
         "name": "ERROR_IPSEC_KEY_MODULE_IMPERSONATION_NEGOTIATION_PENDING"
        ,"type": {"kind":"Int32"}
        ,"value": 13901
    }
    ,{
         "name": "ERROR_IPSEC_IKE_COEXISTENCE_SUPPRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 13902
    }
    ,{
         "name": "ERROR_IPSEC_IKE_RATELIMIT_DROP"
        ,"type": {"kind":"Int32"}
        ,"value": 13903
    }
    ,{
         "name": "ERROR_IPSEC_IKE_PEER_DOESNT_SUPPORT_MOBIKE"
        ,"type": {"kind":"Int32"}
        ,"value": 13904
    }
    ,{
         "name": "ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 13905
    }
    ,{
         "name": "ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 13906
    }
    ,{
         "name": "ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE_WITH_OPTIONAL_RETRY"
        ,"type": {"kind":"Int32"}
        ,"value": 13907
    }
    ,{
         "name": "ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_AND_CERTMAP_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 13908
    }
    ,{
         "name": "ERROR_IPSEC_IKE_NEG_STATUS_EXTENDED_END"
        ,"type": {"kind":"Int32"}
        ,"value": 13909
    }
    ,{
         "name": "ERROR_IPSEC_BAD_SPI"
        ,"type": {"kind":"Int32"}
        ,"value": 13910
    }
    ,{
         "name": "ERROR_IPSEC_SA_LIFETIME_EXPIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 13911
    }
    ,{
         "name": "ERROR_IPSEC_WRONG_SA"
        ,"type": {"kind":"Int32"}
        ,"value": 13912
    }
    ,{
         "name": "ERROR_IPSEC_REPLAY_CHECK_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 13913
    }
    ,{
         "name": "ERROR_IPSEC_INVALID_PACKET"
        ,"type": {"kind":"Int32"}
        ,"value": 13914
    }
    ,{
         "name": "ERROR_IPSEC_INTEGRITY_CHECK_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 13915
    }
    ,{
         "name": "ERROR_IPSEC_CLEAR_TEXT_DROP"
        ,"type": {"kind":"Int32"}
        ,"value": 13916
    }
    ,{
         "name": "ERROR_IPSEC_AUTH_FIREWALL_DROP"
        ,"type": {"kind":"Int32"}
        ,"value": 13917
    }
    ,{
         "name": "ERROR_IPSEC_THROTTLE_DROP"
        ,"type": {"kind":"Int32"}
        ,"value": 13918
    }
    ,{
         "name": "ERROR_IPSEC_DOSP_BLOCK"
        ,"type": {"kind":"Int32"}
        ,"value": 13925
    }
    ,{
         "name": "ERROR_IPSEC_DOSP_RECEIVED_MULTICAST"
        ,"type": {"kind":"Int32"}
        ,"value": 13926
    }
    ,{
         "name": "ERROR_IPSEC_DOSP_INVALID_PACKET"
        ,"type": {"kind":"Int32"}
        ,"value": 13927
    }
    ,{
         "name": "ERROR_IPSEC_DOSP_STATE_LOOKUP_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 13928
    }
    ,{
         "name": "ERROR_IPSEC_DOSP_MAX_ENTRIES"
        ,"type": {"kind":"Int32"}
        ,"value": 13929
    }
    ,{
         "name": "ERROR_IPSEC_DOSP_KEYMOD_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": 13930
    }
    ,{
         "name": "ERROR_IPSEC_DOSP_NOT_INSTALLED"
        ,"type": {"kind":"Int32"}
        ,"value": 13931
    }
    ,{
         "name": "ERROR_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES"
        ,"type": {"kind":"Int32"}
        ,"value": 13932
    }
    ,{
         "name": "ERROR_SXS_SECTION_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 14000
    }
    ,{
         "name": "ERROR_SXS_CANT_GEN_ACTCTX"
        ,"type": {"kind":"Int32"}
        ,"value": 14001
    }
    ,{
         "name": "ERROR_SXS_INVALID_ACTCTXDATA_FORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": 14002
    }
    ,{
         "name": "ERROR_SXS_ASSEMBLY_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 14003
    }
    ,{
         "name": "ERROR_SXS_MANIFEST_FORMAT_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 14004
    }
    ,{
         "name": "ERROR_SXS_MANIFEST_PARSE_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 14005
    }
    ,{
         "name": "ERROR_SXS_ACTIVATION_CONTEXT_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 14006
    }
    ,{
         "name": "ERROR_SXS_KEY_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 14007
    }
    ,{
         "name": "ERROR_SXS_VERSION_CONFLICT"
        ,"type": {"kind":"Int32"}
        ,"value": 14008
    }
    ,{
         "name": "ERROR_SXS_WRONG_SECTION_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 14009
    }
    ,{
         "name": "ERROR_SXS_THREAD_QUERIES_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 14010
    }
    ,{
         "name": "ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET"
        ,"type": {"kind":"Int32"}
        ,"value": 14011
    }
    ,{
         "name": "ERROR_SXS_UNKNOWN_ENCODING_GROUP"
        ,"type": {"kind":"Int32"}
        ,"value": 14012
    }
    ,{
         "name": "ERROR_SXS_UNKNOWN_ENCODING"
        ,"type": {"kind":"Int32"}
        ,"value": 14013
    }
    ,{
         "name": "ERROR_SXS_INVALID_XML_NAMESPACE_URI"
        ,"type": {"kind":"Int32"}
        ,"value": 14014
    }
    ,{
         "name": "ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED"
        ,"type": {"kind":"Int32"}
        ,"value": 14015
    }
    ,{
         "name": "ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED"
        ,"type": {"kind":"Int32"}
        ,"value": 14016
    }
    ,{
         "name": "ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE"
        ,"type": {"kind":"Int32"}
        ,"value": 14017
    }
    ,{
         "name": "ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE"
        ,"type": {"kind":"Int32"}
        ,"value": 14018
    }
    ,{
         "name": "ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE"
        ,"type": {"kind":"Int32"}
        ,"value": 14019
    }
    ,{
         "name": "ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT"
        ,"type": {"kind":"Int32"}
        ,"value": 14020
    }
    ,{
         "name": "ERROR_SXS_DUPLICATE_DLL_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 14021
    }
    ,{
         "name": "ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 14022
    }
    ,{
         "name": "ERROR_SXS_DUPLICATE_CLSID"
        ,"type": {"kind":"Int32"}
        ,"value": 14023
    }
    ,{
         "name": "ERROR_SXS_DUPLICATE_IID"
        ,"type": {"kind":"Int32"}
        ,"value": 14024
    }
    ,{
         "name": "ERROR_SXS_DUPLICATE_TLBID"
        ,"type": {"kind":"Int32"}
        ,"value": 14025
    }
    ,{
         "name": "ERROR_SXS_DUPLICATE_PROGID"
        ,"type": {"kind":"Int32"}
        ,"value": 14026
    }
    ,{
         "name": "ERROR_SXS_DUPLICATE_ASSEMBLY_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 14027
    }
    ,{
         "name": "ERROR_SXS_FILE_HASH_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 14028
    }
    ,{
         "name": "ERROR_SXS_POLICY_PARSE_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 14029
    }
    ,{
         "name": "ERROR_SXS_XML_E_MISSINGQUOTE"
        ,"type": {"kind":"Int32"}
        ,"value": 14030
    }
    ,{
         "name": "ERROR_SXS_XML_E_COMMENTSYNTAX"
        ,"type": {"kind":"Int32"}
        ,"value": 14031
    }
    ,{
         "name": "ERROR_SXS_XML_E_BADSTARTNAMECHAR"
        ,"type": {"kind":"Int32"}
        ,"value": 14032
    }
    ,{
         "name": "ERROR_SXS_XML_E_BADNAMECHAR"
        ,"type": {"kind":"Int32"}
        ,"value": 14033
    }
    ,{
         "name": "ERROR_SXS_XML_E_BADCHARINSTRING"
        ,"type": {"kind":"Int32"}
        ,"value": 14034
    }
    ,{
         "name": "ERROR_SXS_XML_E_XMLDECLSYNTAX"
        ,"type": {"kind":"Int32"}
        ,"value": 14035
    }
    ,{
         "name": "ERROR_SXS_XML_E_BADCHARDATA"
        ,"type": {"kind":"Int32"}
        ,"value": 14036
    }
    ,{
         "name": "ERROR_SXS_XML_E_MISSINGWHITESPACE"
        ,"type": {"kind":"Int32"}
        ,"value": 14037
    }
    ,{
         "name": "ERROR_SXS_XML_E_EXPECTINGTAGEND"
        ,"type": {"kind":"Int32"}
        ,"value": 14038
    }
    ,{
         "name": "ERROR_SXS_XML_E_MISSINGSEMICOLON"
        ,"type": {"kind":"Int32"}
        ,"value": 14039
    }
    ,{
         "name": "ERROR_SXS_XML_E_UNBALANCEDPAREN"
        ,"type": {"kind":"Int32"}
        ,"value": 14040
    }
    ,{
         "name": "ERROR_SXS_XML_E_INTERNALERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 14041
    }
    ,{
         "name": "ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE"
        ,"type": {"kind":"Int32"}
        ,"value": 14042
    }
    ,{
         "name": "ERROR_SXS_XML_E_INCOMPLETE_ENCODING"
        ,"type": {"kind":"Int32"}
        ,"value": 14043
    }
    ,{
         "name": "ERROR_SXS_XML_E_MISSING_PAREN"
        ,"type": {"kind":"Int32"}
        ,"value": 14044
    }
    ,{
         "name": "ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE"
        ,"type": {"kind":"Int32"}
        ,"value": 14045
    }
    ,{
         "name": "ERROR_SXS_XML_E_MULTIPLE_COLONS"
        ,"type": {"kind":"Int32"}
        ,"value": 14046
    }
    ,{
         "name": "ERROR_SXS_XML_E_INVALID_DECIMAL"
        ,"type": {"kind":"Int32"}
        ,"value": 14047
    }
    ,{
         "name": "ERROR_SXS_XML_E_INVALID_HEXIDECIMAL"
        ,"type": {"kind":"Int32"}
        ,"value": 14048
    }
    ,{
         "name": "ERROR_SXS_XML_E_INVALID_UNICODE"
        ,"type": {"kind":"Int32"}
        ,"value": 14049
    }
    ,{
         "name": "ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK"
        ,"type": {"kind":"Int32"}
        ,"value": 14050
    }
    ,{
         "name": "ERROR_SXS_XML_E_UNEXPECTEDENDTAG"
        ,"type": {"kind":"Int32"}
        ,"value": 14051
    }
    ,{
         "name": "ERROR_SXS_XML_E_UNCLOSEDTAG"
        ,"type": {"kind":"Int32"}
        ,"value": 14052
    }
    ,{
         "name": "ERROR_SXS_XML_E_DUPLICATEATTRIBUTE"
        ,"type": {"kind":"Int32"}
        ,"value": 14053
    }
    ,{
         "name": "ERROR_SXS_XML_E_MULTIPLEROOTS"
        ,"type": {"kind":"Int32"}
        ,"value": 14054
    }
    ,{
         "name": "ERROR_SXS_XML_E_INVALIDATROOTLEVEL"
        ,"type": {"kind":"Int32"}
        ,"value": 14055
    }
    ,{
         "name": "ERROR_SXS_XML_E_BADXMLDECL"
        ,"type": {"kind":"Int32"}
        ,"value": 14056
    }
    ,{
         "name": "ERROR_SXS_XML_E_MISSINGROOT"
        ,"type": {"kind":"Int32"}
        ,"value": 14057
    }
    ,{
         "name": "ERROR_SXS_XML_E_UNEXPECTEDEOF"
        ,"type": {"kind":"Int32"}
        ,"value": 14058
    }
    ,{
         "name": "ERROR_SXS_XML_E_BADPEREFINSUBSET"
        ,"type": {"kind":"Int32"}
        ,"value": 14059
    }
    ,{
         "name": "ERROR_SXS_XML_E_UNCLOSEDSTARTTAG"
        ,"type": {"kind":"Int32"}
        ,"value": 14060
    }
    ,{
         "name": "ERROR_SXS_XML_E_UNCLOSEDENDTAG"
        ,"type": {"kind":"Int32"}
        ,"value": 14061
    }
    ,{
         "name": "ERROR_SXS_XML_E_UNCLOSEDSTRING"
        ,"type": {"kind":"Int32"}
        ,"value": 14062
    }
    ,{
         "name": "ERROR_SXS_XML_E_UNCLOSEDCOMMENT"
        ,"type": {"kind":"Int32"}
        ,"value": 14063
    }
    ,{
         "name": "ERROR_SXS_XML_E_UNCLOSEDDECL"
        ,"type": {"kind":"Int32"}
        ,"value": 14064
    }
    ,{
         "name": "ERROR_SXS_XML_E_UNCLOSEDCDATA"
        ,"type": {"kind":"Int32"}
        ,"value": 14065
    }
    ,{
         "name": "ERROR_SXS_XML_E_RESERVEDNAMESPACE"
        ,"type": {"kind":"Int32"}
        ,"value": 14066
    }
    ,{
         "name": "ERROR_SXS_XML_E_INVALIDENCODING"
        ,"type": {"kind":"Int32"}
        ,"value": 14067
    }
    ,{
         "name": "ERROR_SXS_XML_E_INVALIDSWITCH"
        ,"type": {"kind":"Int32"}
        ,"value": 14068
    }
    ,{
         "name": "ERROR_SXS_XML_E_BADXMLCASE"
        ,"type": {"kind":"Int32"}
        ,"value": 14069
    }
    ,{
         "name": "ERROR_SXS_XML_E_INVALID_STANDALONE"
        ,"type": {"kind":"Int32"}
        ,"value": 14070
    }
    ,{
         "name": "ERROR_SXS_XML_E_UNEXPECTED_STANDALONE"
        ,"type": {"kind":"Int32"}
        ,"value": 14071
    }
    ,{
         "name": "ERROR_SXS_XML_E_INVALID_VERSION"
        ,"type": {"kind":"Int32"}
        ,"value": 14072
    }
    ,{
         "name": "ERROR_SXS_XML_E_MISSINGEQUALS"
        ,"type": {"kind":"Int32"}
        ,"value": 14073
    }
    ,{
         "name": "ERROR_SXS_PROTECTION_RECOVERY_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 14074
    }
    ,{
         "name": "ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT"
        ,"type": {"kind":"Int32"}
        ,"value": 14075
    }
    ,{
         "name": "ERROR_SXS_PROTECTION_CATALOG_NOT_VALID"
        ,"type": {"kind":"Int32"}
        ,"value": 14076
    }
    ,{
         "name": "ERROR_SXS_UNTRANSLATABLE_HRESULT"
        ,"type": {"kind":"Int32"}
        ,"value": 14077
    }
    ,{
         "name": "ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING"
        ,"type": {"kind":"Int32"}
        ,"value": 14078
    }
    ,{
         "name": "ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE"
        ,"type": {"kind":"Int32"}
        ,"value": 14079
    }
    ,{
         "name": "ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 14080
    }
    ,{
         "name": "ERROR_SXS_ASSEMBLY_MISSING"
        ,"type": {"kind":"Int32"}
        ,"value": 14081
    }
    ,{
         "name": "ERROR_SXS_CORRUPT_ACTIVATION_STACK"
        ,"type": {"kind":"Int32"}
        ,"value": 14082
    }
    ,{
         "name": "ERROR_SXS_CORRUPTION"
        ,"type": {"kind":"Int32"}
        ,"value": 14083
    }
    ,{
         "name": "ERROR_SXS_EARLY_DEACTIVATION"
        ,"type": {"kind":"Int32"}
        ,"value": 14084
    }
    ,{
         "name": "ERROR_SXS_INVALID_DEACTIVATION"
        ,"type": {"kind":"Int32"}
        ,"value": 14085
    }
    ,{
         "name": "ERROR_SXS_MULTIPLE_DEACTIVATION"
        ,"type": {"kind":"Int32"}
        ,"value": 14086
    }
    ,{
         "name": "ERROR_SXS_PROCESS_TERMINATION_REQUESTED"
        ,"type": {"kind":"Int32"}
        ,"value": 14087
    }
    ,{
         "name": "ERROR_SXS_RELEASE_ACTIVATION_CONTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 14088
    }
    ,{
         "name": "ERROR_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY"
        ,"type": {"kind":"Int32"}
        ,"value": 14089
    }
    ,{
         "name": "ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE"
        ,"type": {"kind":"Int32"}
        ,"value": 14090
    }
    ,{
         "name": "ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 14091
    }
    ,{
         "name": "ERROR_SXS_IDENTITY_DUPLICATE_ATTRIBUTE"
        ,"type": {"kind":"Int32"}
        ,"value": 14092
    }
    ,{
         "name": "ERROR_SXS_IDENTITY_PARSE_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 14093
    }
    ,{
         "name": "ERROR_MALFORMED_SUBSTITUTION_STRING"
        ,"type": {"kind":"Int32"}
        ,"value": 14094
    }
    ,{
         "name": "ERROR_SXS_INCORRECT_PUBLIC_KEY_TOKEN"
        ,"type": {"kind":"Int32"}
        ,"value": 14095
    }
    ,{
         "name": "ERROR_UNMAPPED_SUBSTITUTION_STRING"
        ,"type": {"kind":"Int32"}
        ,"value": 14096
    }
    ,{
         "name": "ERROR_SXS_ASSEMBLY_NOT_LOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": 14097
    }
    ,{
         "name": "ERROR_SXS_COMPONENT_STORE_CORRUPT"
        ,"type": {"kind":"Int32"}
        ,"value": 14098
    }
    ,{
         "name": "ERROR_ADVANCED_INSTALLER_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 14099
    }
    ,{
         "name": "ERROR_XML_ENCODING_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 14100
    }
    ,{
         "name": "ERROR_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT"
        ,"type": {"kind":"Int32"}
        ,"value": 14101
    }
    ,{
         "name": "ERROR_SXS_IDENTITIES_DIFFERENT"
        ,"type": {"kind":"Int32"}
        ,"value": 14102
    }
    ,{
         "name": "ERROR_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT"
        ,"type": {"kind":"Int32"}
        ,"value": 14103
    }
    ,{
         "name": "ERROR_SXS_FILE_NOT_PART_OF_ASSEMBLY"
        ,"type": {"kind":"Int32"}
        ,"value": 14104
    }
    ,{
         "name": "ERROR_SXS_MANIFEST_TOO_BIG"
        ,"type": {"kind":"Int32"}
        ,"value": 14105
    }
    ,{
         "name": "ERROR_SXS_SETTING_NOT_REGISTERED"
        ,"type": {"kind":"Int32"}
        ,"value": 14106
    }
    ,{
         "name": "ERROR_SXS_TRANSACTION_CLOSURE_INCOMPLETE"
        ,"type": {"kind":"Int32"}
        ,"value": 14107
    }
    ,{
         "name": "ERROR_SMI_PRIMITIVE_INSTALLER_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 14108
    }
    ,{
         "name": "ERROR_GENERIC_COMMAND_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 14109
    }
    ,{
         "name": "ERROR_SXS_FILE_HASH_MISSING"
        ,"type": {"kind":"Int32"}
        ,"value": 14110
    }
    ,{
         "name": "ERROR_SXS_DUPLICATE_ACTIVATABLE_CLASS"
        ,"type": {"kind":"Int32"}
        ,"value": 14111
    }
    ,{
         "name": "ERROR_EVT_INVALID_CHANNEL_PATH"
        ,"type": {"kind":"Int32"}
        ,"value": 15000
    }
    ,{
         "name": "ERROR_EVT_INVALID_QUERY"
        ,"type": {"kind":"Int32"}
        ,"value": 15001
    }
    ,{
         "name": "ERROR_EVT_PUBLISHER_METADATA_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 15002
    }
    ,{
         "name": "ERROR_EVT_EVENT_TEMPLATE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 15003
    }
    ,{
         "name": "ERROR_EVT_INVALID_PUBLISHER_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 15004
    }
    ,{
         "name": "ERROR_EVT_INVALID_EVENT_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": 15005
    }
    ,{
         "name": "ERROR_EVT_CHANNEL_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 15007
    }
    ,{
         "name": "ERROR_EVT_MALFORMED_XML_TEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 15008
    }
    ,{
         "name": "ERROR_EVT_SUBSCRIPTION_TO_DIRECT_CHANNEL"
        ,"type": {"kind":"Int32"}
        ,"value": 15009
    }
    ,{
         "name": "ERROR_EVT_CONFIGURATION_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 15010
    }
    ,{
         "name": "ERROR_EVT_QUERY_RESULT_STALE"
        ,"type": {"kind":"Int32"}
        ,"value": 15011
    }
    ,{
         "name": "ERROR_EVT_QUERY_RESULT_INVALID_POSITION"
        ,"type": {"kind":"Int32"}
        ,"value": 15012
    }
    ,{
         "name": "ERROR_EVT_NON_VALIDATING_MSXML"
        ,"type": {"kind":"Int32"}
        ,"value": 15013
    }
    ,{
         "name": "ERROR_EVT_FILTER_ALREADYSCOPED"
        ,"type": {"kind":"Int32"}
        ,"value": 15014
    }
    ,{
         "name": "ERROR_EVT_FILTER_NOTELTSET"
        ,"type": {"kind":"Int32"}
        ,"value": 15015
    }
    ,{
         "name": "ERROR_EVT_FILTER_INVARG"
        ,"type": {"kind":"Int32"}
        ,"value": 15016
    }
    ,{
         "name": "ERROR_EVT_FILTER_INVTEST"
        ,"type": {"kind":"Int32"}
        ,"value": 15017
    }
    ,{
         "name": "ERROR_EVT_FILTER_INVTYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 15018
    }
    ,{
         "name": "ERROR_EVT_FILTER_PARSEERR"
        ,"type": {"kind":"Int32"}
        ,"value": 15019
    }
    ,{
         "name": "ERROR_EVT_FILTER_UNSUPPORTEDOP"
        ,"type": {"kind":"Int32"}
        ,"value": 15020
    }
    ,{
         "name": "ERROR_EVT_FILTER_UNEXPECTEDTOKEN"
        ,"type": {"kind":"Int32"}
        ,"value": 15021
    }
    ,{
         "name": "ERROR_EVT_INVALID_OPERATION_OVER_ENABLED_DIRECT_CHANNEL"
        ,"type": {"kind":"Int32"}
        ,"value": 15022
    }
    ,{
         "name": "ERROR_EVT_INVALID_CHANNEL_PROPERTY_VALUE"
        ,"type": {"kind":"Int32"}
        ,"value": 15023
    }
    ,{
         "name": "ERROR_EVT_INVALID_PUBLISHER_PROPERTY_VALUE"
        ,"type": {"kind":"Int32"}
        ,"value": 15024
    }
    ,{
         "name": "ERROR_EVT_CHANNEL_CANNOT_ACTIVATE"
        ,"type": {"kind":"Int32"}
        ,"value": 15025
    }
    ,{
         "name": "ERROR_EVT_FILTER_TOO_COMPLEX"
        ,"type": {"kind":"Int32"}
        ,"value": 15026
    }
    ,{
         "name": "ERROR_EVT_MESSAGE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 15027
    }
    ,{
         "name": "ERROR_EVT_MESSAGE_ID_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 15028
    }
    ,{
         "name": "ERROR_EVT_UNRESOLVED_VALUE_INSERT"
        ,"type": {"kind":"Int32"}
        ,"value": 15029
    }
    ,{
         "name": "ERROR_EVT_UNRESOLVED_PARAMETER_INSERT"
        ,"type": {"kind":"Int32"}
        ,"value": 15030
    }
    ,{
         "name": "ERROR_EVT_MAX_INSERTS_REACHED"
        ,"type": {"kind":"Int32"}
        ,"value": 15031
    }
    ,{
         "name": "ERROR_EVT_EVENT_DEFINITION_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 15032
    }
    ,{
         "name": "ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 15033
    }
    ,{
         "name": "ERROR_EVT_VERSION_TOO_OLD"
        ,"type": {"kind":"Int32"}
        ,"value": 15034
    }
    ,{
         "name": "ERROR_EVT_VERSION_TOO_NEW"
        ,"type": {"kind":"Int32"}
        ,"value": 15035
    }
    ,{
         "name": "ERROR_EVT_CANNOT_OPEN_CHANNEL_OF_QUERY"
        ,"type": {"kind":"Int32"}
        ,"value": 15036
    }
    ,{
         "name": "ERROR_EVT_PUBLISHER_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 15037
    }
    ,{
         "name": "ERROR_EVT_FILTER_OUT_OF_RANGE"
        ,"type": {"kind":"Int32"}
        ,"value": 15038
    }
    ,{
         "name": "ERROR_EC_SUBSCRIPTION_CANNOT_ACTIVATE"
        ,"type": {"kind":"Int32"}
        ,"value": 15080
    }
    ,{
         "name": "ERROR_EC_LOG_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 15081
    }
    ,{
         "name": "ERROR_EC_CIRCULAR_FORWARDING"
        ,"type": {"kind":"Int32"}
        ,"value": 15082
    }
    ,{
         "name": "ERROR_EC_CREDSTORE_FULL"
        ,"type": {"kind":"Int32"}
        ,"value": 15083
    }
    ,{
         "name": "ERROR_EC_CRED_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 15084
    }
    ,{
         "name": "ERROR_EC_NO_ACTIVE_CHANNEL"
        ,"type": {"kind":"Int32"}
        ,"value": 15085
    }
    ,{
         "name": "ERROR_MUI_FILE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 15100
    }
    ,{
         "name": "ERROR_MUI_INVALID_FILE"
        ,"type": {"kind":"Int32"}
        ,"value": 15101
    }
    ,{
         "name": "ERROR_MUI_INVALID_RC_CONFIG"
        ,"type": {"kind":"Int32"}
        ,"value": 15102
    }
    ,{
         "name": "ERROR_MUI_INVALID_LOCALE_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 15103
    }
    ,{
         "name": "ERROR_MUI_INVALID_ULTIMATEFALLBACK_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 15104
    }
    ,{
         "name": "ERROR_MUI_FILE_NOT_LOADED"
        ,"type": {"kind":"Int32"}
        ,"value": 15105
    }
    ,{
         "name": "ERROR_RESOURCE_ENUM_USER_STOP"
        ,"type": {"kind":"Int32"}
        ,"value": 15106
    }
    ,{
         "name": "ERROR_MUI_INTLSETTINGS_UILANG_NOT_INSTALLED"
        ,"type": {"kind":"Int32"}
        ,"value": 15107
    }
    ,{
         "name": "ERROR_MUI_INTLSETTINGS_INVALID_LOCALE_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 15108
    }
    ,{
         "name": "ERROR_MRM_RUNTIME_NO_DEFAULT_OR_NEUTRAL_RESOURCE"
        ,"type": {"kind":"Int32"}
        ,"value": 15110
    }
    ,{
         "name": "ERROR_MRM_INVALID_PRICONFIG"
        ,"type": {"kind":"Int32"}
        ,"value": 15111
    }
    ,{
         "name": "ERROR_MRM_INVALID_FILE_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 15112
    }
    ,{
         "name": "ERROR_MRM_UNKNOWN_QUALIFIER"
        ,"type": {"kind":"Int32"}
        ,"value": 15113
    }
    ,{
         "name": "ERROR_MRM_INVALID_QUALIFIER_VALUE"
        ,"type": {"kind":"Int32"}
        ,"value": 15114
    }
    ,{
         "name": "ERROR_MRM_NO_CANDIDATE"
        ,"type": {"kind":"Int32"}
        ,"value": 15115
    }
    ,{
         "name": "ERROR_MRM_NO_MATCH_OR_DEFAULT_CANDIDATE"
        ,"type": {"kind":"Int32"}
        ,"value": 15116
    }
    ,{
         "name": "ERROR_MRM_RESOURCE_TYPE_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 15117
    }
    ,{
         "name": "ERROR_MRM_DUPLICATE_MAP_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 15118
    }
    ,{
         "name": "ERROR_MRM_DUPLICATE_ENTRY"
        ,"type": {"kind":"Int32"}
        ,"value": 15119
    }
    ,{
         "name": "ERROR_MRM_INVALID_RESOURCE_IDENTIFIER"
        ,"type": {"kind":"Int32"}
        ,"value": 15120
    }
    ,{
         "name": "ERROR_MRM_FILEPATH_TOO_LONG"
        ,"type": {"kind":"Int32"}
        ,"value": 15121
    }
    ,{
         "name": "ERROR_MRM_UNSUPPORTED_DIRECTORY_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 15122
    }
    ,{
         "name": "ERROR_MRM_INVALID_PRI_FILE"
        ,"type": {"kind":"Int32"}
        ,"value": 15126
    }
    ,{
         "name": "ERROR_MRM_NAMED_RESOURCE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 15127
    }
    ,{
         "name": "ERROR_MRM_MAP_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 15135
    }
    ,{
         "name": "ERROR_MRM_UNSUPPORTED_PROFILE_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": 15136
    }
    ,{
         "name": "ERROR_MRM_INVALID_QUALIFIER_OPERATOR"
        ,"type": {"kind":"Int32"}
        ,"value": 15137
    }
    ,{
         "name": "ERROR_MRM_INDETERMINATE_QUALIFIER_VALUE"
        ,"type": {"kind":"Int32"}
        ,"value": 15138
    }
    ,{
         "name": "ERROR_MRM_AUTOMERGE_ENABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 15139
    }
    ,{
         "name": "ERROR_MRM_TOO_MANY_RESOURCES"
        ,"type": {"kind":"Int32"}
        ,"value": 15140
    }
    ,{
         "name": "ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_MERGE"
        ,"type": {"kind":"Int32"}
        ,"value": 15141
    }
    ,{
         "name": "ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_LOAD_UNLOAD_PRI_FILE"
        ,"type": {"kind":"Int32"}
        ,"value": 15142
    }
    ,{
         "name": "ERROR_MRM_NO_CURRENT_VIEW_ON_THREAD"
        ,"type": {"kind":"Int32"}
        ,"value": 15143
    }
    ,{
         "name": "ERROR_DIFFERENT_PROFILE_RESOURCE_MANAGER_EXIST"
        ,"type": {"kind":"Int32"}
        ,"value": 15144
    }
    ,{
         "name": "ERROR_OPERATION_NOT_ALLOWED_FROM_SYSTEM_COMPONENT"
        ,"type": {"kind":"Int32"}
        ,"value": 15145
    }
    ,{
         "name": "ERROR_MRM_DIRECT_REF_TO_NON_DEFAULT_RESOURCE"
        ,"type": {"kind":"Int32"}
        ,"value": 15146
    }
    ,{
         "name": "ERROR_MRM_GENERATION_COUNT_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 15147
    }
    ,{
         "name": "ERROR_PRI_MERGE_VERSION_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 15148
    }
    ,{
         "name": "ERROR_PRI_MERGE_MISSING_SCHEMA"
        ,"type": {"kind":"Int32"}
        ,"value": 15149
    }
    ,{
         "name": "ERROR_PRI_MERGE_LOAD_FILE_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 15150
    }
    ,{
         "name": "ERROR_PRI_MERGE_ADD_FILE_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 15151
    }
    ,{
         "name": "ERROR_PRI_MERGE_WRITE_FILE_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 15152
    }
    ,{
         "name": "ERROR_PRI_MERGE_MULTIPLE_PACKAGE_FAMILIES_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": 15153
    }
    ,{
         "name": "ERROR_PRI_MERGE_MULTIPLE_MAIN_PACKAGES_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": 15154
    }
    ,{
         "name": "ERROR_PRI_MERGE_BUNDLE_PACKAGES_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": 15155
    }
    ,{
         "name": "ERROR_PRI_MERGE_MAIN_PACKAGE_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 15156
    }
    ,{
         "name": "ERROR_PRI_MERGE_RESOURCE_PACKAGE_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 15157
    }
    ,{
         "name": "ERROR_PRI_MERGE_INVALID_FILE_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 15158
    }
    ,{
         "name": "ERROR_MRM_PACKAGE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 15159
    }
    ,{
         "name": "ERROR_MRM_MISSING_DEFAULT_LANGUAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 15160
    }
    ,{
         "name": "ERROR_MCA_INVALID_CAPABILITIES_STRING"
        ,"type": {"kind":"Int32"}
        ,"value": 15200
    }
    ,{
         "name": "ERROR_MCA_INVALID_VCP_VERSION"
        ,"type": {"kind":"Int32"}
        ,"value": 15201
    }
    ,{
         "name": "ERROR_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION"
        ,"type": {"kind":"Int32"}
        ,"value": 15202
    }
    ,{
         "name": "ERROR_MCA_MCCS_VERSION_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": 15203
    }
    ,{
         "name": "ERROR_MCA_UNSUPPORTED_MCCS_VERSION"
        ,"type": {"kind":"Int32"}
        ,"value": 15204
    }
    ,{
         "name": "ERROR_MCA_INTERNAL_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 15205
    }
    ,{
         "name": "ERROR_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED"
        ,"type": {"kind":"Int32"}
        ,"value": 15206
    }
    ,{
         "name": "ERROR_MCA_UNSUPPORTED_COLOR_TEMPERATURE"
        ,"type": {"kind":"Int32"}
        ,"value": 15207
    }
    ,{
         "name": "ERROR_AMBIGUOUS_SYSTEM_DEVICE"
        ,"type": {"kind":"Int32"}
        ,"value": 15250
    }
    ,{
         "name": "ERROR_SYSTEM_DEVICE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 15299
    }
    ,{
         "name": "ERROR_HASH_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 15300
    }
    ,{
         "name": "ERROR_HASH_NOT_PRESENT"
        ,"type": {"kind":"Int32"}
        ,"value": 15301
    }
    ,{
         "name": "ERROR_SECONDARY_IC_PROVIDER_NOT_REGISTERED"
        ,"type": {"kind":"Int32"}
        ,"value": 15321
    }
    ,{
         "name": "ERROR_GPIO_CLIENT_INFORMATION_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": 15322
    }
    ,{
         "name": "ERROR_GPIO_VERSION_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 15323
    }
    ,{
         "name": "ERROR_GPIO_INVALID_REGISTRATION_PACKET"
        ,"type": {"kind":"Int32"}
        ,"value": 15324
    }
    ,{
         "name": "ERROR_GPIO_OPERATION_DENIED"
        ,"type": {"kind":"Int32"}
        ,"value": 15325
    }
    ,{
         "name": "ERROR_GPIO_INCOMPATIBLE_CONNECT_MODE"
        ,"type": {"kind":"Int32"}
        ,"value": 15326
    }
    ,{
         "name": "ERROR_GPIO_INTERRUPT_ALREADY_UNMASKED"
        ,"type": {"kind":"Int32"}
        ,"value": 15327
    }
    ,{
         "name": "ERROR_CANNOT_SWITCH_RUNLEVEL"
        ,"type": {"kind":"Int32"}
        ,"value": 15400
    }
    ,{
         "name": "ERROR_INVALID_RUNLEVEL_SETTING"
        ,"type": {"kind":"Int32"}
        ,"value": 15401
    }
    ,{
         "name": "ERROR_RUNLEVEL_SWITCH_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 15402
    }
    ,{
         "name": "ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 15403
    }
    ,{
         "name": "ERROR_RUNLEVEL_SWITCH_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 15404
    }
    ,{
         "name": "ERROR_SERVICES_FAILED_AUTOSTART"
        ,"type": {"kind":"Int32"}
        ,"value": 15405
    }
    ,{
         "name": "ERROR_COM_TASK_STOP_PENDING"
        ,"type": {"kind":"Int32"}
        ,"value": 15501
    }
    ,{
         "name": "ERROR_INSTALL_OPEN_PACKAGE_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 15600
    }
    ,{
         "name": "ERROR_INSTALL_PACKAGE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 15601
    }
    ,{
         "name": "ERROR_INSTALL_INVALID_PACKAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 15602
    }
    ,{
         "name": "ERROR_INSTALL_RESOLVE_DEPENDENCY_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 15603
    }
    ,{
         "name": "ERROR_INSTALL_OUT_OF_DISK_SPACE"
        ,"type": {"kind":"Int32"}
        ,"value": 15604
    }
    ,{
         "name": "ERROR_INSTALL_NETWORK_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 15605
    }
    ,{
         "name": "ERROR_INSTALL_REGISTRATION_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 15606
    }
    ,{
         "name": "ERROR_INSTALL_DEREGISTRATION_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 15607
    }
    ,{
         "name": "ERROR_INSTALL_CANCEL"
        ,"type": {"kind":"Int32"}
        ,"value": 15608
    }
    ,{
         "name": "ERROR_INSTALL_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 15609
    }
    ,{
         "name": "ERROR_REMOVE_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 15610
    }
    ,{
         "name": "ERROR_PACKAGE_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 15611
    }
    ,{
         "name": "ERROR_NEEDS_REMEDIATION"
        ,"type": {"kind":"Int32"}
        ,"value": 15612
    }
    ,{
         "name": "ERROR_INSTALL_PREREQUISITE_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 15613
    }
    ,{
         "name": "ERROR_PACKAGE_REPOSITORY_CORRUPTED"
        ,"type": {"kind":"Int32"}
        ,"value": 15614
    }
    ,{
         "name": "ERROR_INSTALL_POLICY_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": 15615
    }
    ,{
         "name": "ERROR_PACKAGE_UPDATING"
        ,"type": {"kind":"Int32"}
        ,"value": 15616
    }
    ,{
         "name": "ERROR_DEPLOYMENT_BLOCKED_BY_POLICY"
        ,"type": {"kind":"Int32"}
        ,"value": 15617
    }
    ,{
         "name": "ERROR_PACKAGES_IN_USE"
        ,"type": {"kind":"Int32"}
        ,"value": 15618
    }
    ,{
         "name": "ERROR_RECOVERY_FILE_CORRUPT"
        ,"type": {"kind":"Int32"}
        ,"value": 15619
    }
    ,{
         "name": "ERROR_INVALID_STAGED_SIGNATURE"
        ,"type": {"kind":"Int32"}
        ,"value": 15620
    }
    ,{
         "name": "ERROR_DELETING_EXISTING_APPLICATIONDATA_STORE_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 15621
    }
    ,{
         "name": "ERROR_INSTALL_PACKAGE_DOWNGRADE"
        ,"type": {"kind":"Int32"}
        ,"value": 15622
    }
    ,{
         "name": "ERROR_SYSTEM_NEEDS_REMEDIATION"
        ,"type": {"kind":"Int32"}
        ,"value": 15623
    }
    ,{
         "name": "ERROR_APPX_INTEGRITY_FAILURE_CLR_NGEN"
        ,"type": {"kind":"Int32"}
        ,"value": 15624
    }
    ,{
         "name": "ERROR_RESILIENCY_FILE_CORRUPT"
        ,"type": {"kind":"Int32"}
        ,"value": 15625
    }
    ,{
         "name": "ERROR_INSTALL_FIREWALL_SERVICE_NOT_RUNNING"
        ,"type": {"kind":"Int32"}
        ,"value": 15626
    }
    ,{
         "name": "ERROR_PACKAGE_MOVE_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 15627
    }
    ,{
         "name": "ERROR_INSTALL_VOLUME_NOT_EMPTY"
        ,"type": {"kind":"Int32"}
        ,"value": 15628
    }
    ,{
         "name": "ERROR_INSTALL_VOLUME_OFFLINE"
        ,"type": {"kind":"Int32"}
        ,"value": 15629
    }
    ,{
         "name": "ERROR_INSTALL_VOLUME_CORRUPT"
        ,"type": {"kind":"Int32"}
        ,"value": 15630
    }
    ,{
         "name": "ERROR_NEEDS_REGISTRATION"
        ,"type": {"kind":"Int32"}
        ,"value": 15631
    }
    ,{
         "name": "ERROR_INSTALL_WRONG_PROCESSOR_ARCHITECTURE"
        ,"type": {"kind":"Int32"}
        ,"value": 15632
    }
    ,{
         "name": "ERROR_DEV_SIDELOAD_LIMIT_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 15633
    }
    ,{
         "name": "ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 15634
    }
    ,{
         "name": "ERROR_PACKAGE_NOT_SUPPORTED_ON_FILESYSTEM"
        ,"type": {"kind":"Int32"}
        ,"value": 15635
    }
    ,{
         "name": "ERROR_PACKAGE_MOVE_BLOCKED_BY_STREAMING"
        ,"type": {"kind":"Int32"}
        ,"value": 15636
    }
    ,{
         "name": "ERROR_INSTALL_OPTIONAL_PACKAGE_APPLICATIONID_NOT_UNIQUE"
        ,"type": {"kind":"Int32"}
        ,"value": 15637
    }
    ,{
         "name": "ERROR_PACKAGE_STAGING_ONHOLD"
        ,"type": {"kind":"Int32"}
        ,"value": 15638
    }
    ,{
         "name": "ERROR_INSTALL_INVALID_RELATED_SET_UPDATE"
        ,"type": {"kind":"Int32"}
        ,"value": 15639
    }
    ,{
         "name": "ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY"
        ,"type": {"kind":"Int32"}
        ,"value": 15640
    }
    ,{
         "name": "ERROR_DEPLOYMENT_BLOCKED_BY_USER_LOG_OFF"
        ,"type": {"kind":"Int32"}
        ,"value": 15641
    }
    ,{
         "name": "ERROR_PROVISION_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_PROVISIONED"
        ,"type": {"kind":"Int32"}
        ,"value": 15642
    }
    ,{
         "name": "ERROR_PACKAGES_REPUTATION_CHECK_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 15643
    }
    ,{
         "name": "ERROR_PACKAGES_REPUTATION_CHECK_TIMEDOUT"
        ,"type": {"kind":"Int32"}
        ,"value": 15644
    }
    ,{
         "name": "ERROR_DEPLOYMENT_OPTION_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 15645
    }
    ,{
         "name": "ERROR_APPINSTALLER_ACTIVATION_BLOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": 15646
    }
    ,{
         "name": "ERROR_REGISTRATION_FROM_REMOTE_DRIVE_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 15647
    }
    ,{
         "name": "ERROR_APPX_RAW_DATA_WRITE_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 15648
    }
    ,{
         "name": "ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_PACKAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 15649
    }
    ,{
         "name": "ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_MACHINE"
        ,"type": {"kind":"Int32"}
        ,"value": 15650
    }
    ,{
         "name": "ERROR_DEPLOYMENT_BLOCKED_BY_PROFILE_POLICY"
        ,"type": {"kind":"Int32"}
        ,"value": 15651
    }
    ,{
         "name": "ERROR_DEPLOYMENT_FAILED_CONFLICTING_MUTABLE_PACKAGE_DIRECTORY"
        ,"type": {"kind":"Int32"}
        ,"value": 15652
    }
    ,{
         "name": "ERROR_SINGLETON_RESOURCE_INSTALLED_IN_ACTIVE_USER"
        ,"type": {"kind":"Int32"}
        ,"value": 15653
    }
    ,{
         "name": "ERROR_DIFFERENT_VERSION_OF_PACKAGED_SERVICE_INSTALLED"
        ,"type": {"kind":"Int32"}
        ,"value": 15654
    }
    ,{
         "name": "ERROR_SERVICE_EXISTS_AS_NON_PACKAGED_SERVICE"
        ,"type": {"kind":"Int32"}
        ,"value": 15655
    }
    ,{
         "name": "ERROR_PACKAGED_SERVICE_REQUIRES_ADMIN_PRIVILEGES"
        ,"type": {"kind":"Int32"}
        ,"value": 15656
    }
    ,{
         "name": "ERROR_REDIRECTION_TO_DEFAULT_ACCOUNT_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": 15657
    }
    ,{
         "name": "ERROR_PACKAGE_LACKS_CAPABILITY_TO_DEPLOY_ON_HOST"
        ,"type": {"kind":"Int32"}
        ,"value": 15658
    }
    ,{
         "name": "ERROR_UNSIGNED_PACKAGE_INVALID_CONTENT"
        ,"type": {"kind":"Int32"}
        ,"value": 15659
    }
    ,{
         "name": "ERROR_UNSIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE"
        ,"type": {"kind":"Int32"}
        ,"value": 15660
    }
    ,{
         "name": "ERROR_SIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE"
        ,"type": {"kind":"Int32"}
        ,"value": 15661
    }
    ,{
         "name": "ERROR_PACKAGE_EXTERNAL_LOCATION_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": 15662
    }
    ,{
         "name": "ERROR_INSTALL_FULLTRUST_HOSTRUNTIME_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY"
        ,"type": {"kind":"Int32"}
        ,"value": 15663
    }
    ,{
         "name": "APPMODEL_ERROR_NO_PACKAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 15700
    }
    ,{
         "name": "APPMODEL_ERROR_PACKAGE_RUNTIME_CORRUPT"
        ,"type": {"kind":"Int32"}
        ,"value": 15701
    }
    ,{
         "name": "APPMODEL_ERROR_PACKAGE_IDENTITY_CORRUPT"
        ,"type": {"kind":"Int32"}
        ,"value": 15702
    }
    ,{
         "name": "APPMODEL_ERROR_NO_APPLICATION"
        ,"type": {"kind":"Int32"}
        ,"value": 15703
    }
    ,{
         "name": "APPMODEL_ERROR_DYNAMIC_PROPERTY_READ_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 15704
    }
    ,{
         "name": "APPMODEL_ERROR_DYNAMIC_PROPERTY_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": 15705
    }
    ,{
         "name": "APPMODEL_ERROR_PACKAGE_NOT_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 15706
    }
    ,{
         "name": "APPMODEL_ERROR_NO_MUTABLE_DIRECTORY"
        ,"type": {"kind":"Int32"}
        ,"value": 15707
    }
    ,{
         "name": "ERROR_STATE_LOAD_STORE_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 15800
    }
    ,{
         "name": "ERROR_STATE_GET_VERSION_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 15801
    }
    ,{
         "name": "ERROR_STATE_SET_VERSION_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 15802
    }
    ,{
         "name": "ERROR_STATE_STRUCTURED_RESET_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 15803
    }
    ,{
         "name": "ERROR_STATE_OPEN_CONTAINER_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 15804
    }
    ,{
         "name": "ERROR_STATE_CREATE_CONTAINER_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 15805
    }
    ,{
         "name": "ERROR_STATE_DELETE_CONTAINER_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 15806
    }
    ,{
         "name": "ERROR_STATE_READ_SETTING_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 15807
    }
    ,{
         "name": "ERROR_STATE_WRITE_SETTING_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 15808
    }
    ,{
         "name": "ERROR_STATE_DELETE_SETTING_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 15809
    }
    ,{
         "name": "ERROR_STATE_QUERY_SETTING_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 15810
    }
    ,{
         "name": "ERROR_STATE_READ_COMPOSITE_SETTING_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 15811
    }
    ,{
         "name": "ERROR_STATE_WRITE_COMPOSITE_SETTING_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 15812
    }
    ,{
         "name": "ERROR_STATE_ENUMERATE_CONTAINER_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 15813
    }
    ,{
         "name": "ERROR_STATE_ENUMERATE_SETTINGS_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 15814
    }
    ,{
         "name": "ERROR_STATE_COMPOSITE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 15815
    }
    ,{
         "name": "ERROR_STATE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 15816
    }
    ,{
         "name": "ERROR_STATE_SETTING_NAME_SIZE_LIMIT_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 15817
    }
    ,{
         "name": "ERROR_STATE_CONTAINER_NAME_SIZE_LIMIT_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 15818
    }
    ,{
         "name": "ERROR_API_UNAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 15841
    }
    ,{
         "name": "STORE_ERROR_UNLICENSED"
        ,"type": {"kind":"Int32"}
        ,"value": 15861
    }
    ,{
         "name": "STORE_ERROR_UNLICENSED_USER"
        ,"type": {"kind":"Int32"}
        ,"value": 15862
    }
    ,{
         "name": "STORE_ERROR_PENDING_COM_TRANSACTION"
        ,"type": {"kind":"Int32"}
        ,"value": 15863
    }
    ,{
         "name": "STORE_ERROR_LICENSE_REVOKED"
        ,"type": {"kind":"Int32"}
        ,"value": 15864
    }
    ,{
         "name": "SEVERITY_SUCCESS"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "SEVERITY_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "FACILITY_NT_BIT"
        ,"type": {"kind":"Int32"}
        ,"value": 268435456
    }
    ,{
         "name": "NOERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "E_UNEXPECTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147418113
    }
    ,{
         "name": "E_NOTIMPL"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467263
    }
    ,{
         "name": "E_OUTOFMEMORY"
        ,"type": {"kind":"Int32"}
        ,"value": -2147024882
    }
    ,{
         "name": "E_INVALIDARG"
        ,"type": {"kind":"Int32"}
        ,"value": -2147024809
    }
    ,{
         "name": "E_NOINTERFACE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467262
    }
    ,{
         "name": "E_POINTER"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467261
    }
    ,{
         "name": "E_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147024890
    }
    ,{
         "name": "E_ABORT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467260
    }
    ,{
         "name": "E_FAIL"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467259
    }
    ,{
         "name": "E_ACCESSDENIED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147024891
    }
    ,{
         "name": "E_PENDING"
        ,"type": {"kind":"Int32"}
        ,"value": -2147483638
    }
    ,{
         "name": "E_BOUNDS"
        ,"type": {"kind":"Int32"}
        ,"value": -2147483637
    }
    ,{
         "name": "E_CHANGED_STATE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147483636
    }
    ,{
         "name": "E_ILLEGAL_STATE_CHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147483635
    }
    ,{
         "name": "E_ILLEGAL_METHOD_CALL"
        ,"type": {"kind":"Int32"}
        ,"value": -2147483634
    }
    ,{
         "name": "RO_E_METADATA_NAME_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2147483633
    }
    ,{
         "name": "RO_E_METADATA_NAME_IS_NAMESPACE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147483632
    }
    ,{
         "name": "RO_E_METADATA_INVALID_TYPE_FORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147483631
    }
    ,{
         "name": "RO_E_INVALID_METADATA_FILE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147483630
    }
    ,{
         "name": "RO_E_CLOSED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147483629
    }
    ,{
         "name": "RO_E_EXCLUSIVE_WRITE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147483628
    }
    ,{
         "name": "RO_E_CHANGE_NOTIFICATION_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": -2147483627
    }
    ,{
         "name": "RO_E_ERROR_STRING_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2147483626
    }
    ,{
         "name": "E_STRING_NOT_NULL_TERMINATED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147483625
    }
    ,{
         "name": "E_ILLEGAL_DELEGATE_ASSIGNMENT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147483624
    }
    ,{
         "name": "E_ASYNC_OPERATION_NOT_STARTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147483623
    }
    ,{
         "name": "E_APPLICATION_EXITING"
        ,"type": {"kind":"Int32"}
        ,"value": -2147483622
    }
    ,{
         "name": "E_APPLICATION_VIEW_EXITING"
        ,"type": {"kind":"Int32"}
        ,"value": -2147483621
    }
    ,{
         "name": "RO_E_MUST_BE_AGILE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147483620
    }
    ,{
         "name": "RO_E_UNSUPPORTED_FROM_MTA"
        ,"type": {"kind":"Int32"}
        ,"value": -2147483619
    }
    ,{
         "name": "RO_E_COMMITTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147483618
    }
    ,{
         "name": "RO_E_BLOCKED_CROSS_ASTA_CALL"
        ,"type": {"kind":"Int32"}
        ,"value": -2147483617
    }
    ,{
         "name": "RO_E_CANNOT_ACTIVATE_FULL_TRUST_SERVER"
        ,"type": {"kind":"Int32"}
        ,"value": -2147483616
    }
    ,{
         "name": "RO_E_CANNOT_ACTIVATE_UNIVERSAL_APPLICATION_SERVER"
        ,"type": {"kind":"Int32"}
        ,"value": -2147483615
    }
    ,{
         "name": "CO_E_INIT_TLS"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467258
    }
    ,{
         "name": "CO_E_INIT_SHARED_ALLOCATOR"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467257
    }
    ,{
         "name": "CO_E_INIT_MEMORY_ALLOCATOR"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467256
    }
    ,{
         "name": "CO_E_INIT_CLASS_CACHE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467255
    }
    ,{
         "name": "CO_E_INIT_RPC_CHANNEL"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467254
    }
    ,{
         "name": "CO_E_INIT_TLS_SET_CHANNEL_CONTROL"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467253
    }
    ,{
         "name": "CO_E_INIT_TLS_CHANNEL_CONTROL"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467252
    }
    ,{
         "name": "CO_E_INIT_UNACCEPTED_USER_ALLOCATOR"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467251
    }
    ,{
         "name": "CO_E_INIT_SCM_MUTEX_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467250
    }
    ,{
         "name": "CO_E_INIT_SCM_FILE_MAPPING_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467249
    }
    ,{
         "name": "CO_E_INIT_SCM_MAP_VIEW_OF_FILE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467248
    }
    ,{
         "name": "CO_E_INIT_SCM_EXEC_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467247
    }
    ,{
         "name": "CO_E_INIT_ONLY_SINGLE_THREADED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467246
    }
    ,{
         "name": "CO_E_CANT_REMOTE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467245
    }
    ,{
         "name": "CO_E_BAD_SERVER_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467244
    }
    ,{
         "name": "CO_E_WRONG_SERVER_IDENTITY"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467243
    }
    ,{
         "name": "CO_E_OLE1DDE_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467242
    }
    ,{
         "name": "CO_E_RUNAS_SYNTAX"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467241
    }
    ,{
         "name": "CO_E_CREATEPROCESS_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467240
    }
    ,{
         "name": "CO_E_RUNAS_CREATEPROCESS_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467239
    }
    ,{
         "name": "CO_E_RUNAS_LOGON_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467238
    }
    ,{
         "name": "CO_E_LAUNCH_PERMSSION_DENIED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467237
    }
    ,{
         "name": "CO_E_START_SERVICE_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467236
    }
    ,{
         "name": "CO_E_REMOTE_COMMUNICATION_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467235
    }
    ,{
         "name": "CO_E_SERVER_START_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467234
    }
    ,{
         "name": "CO_E_CLSREG_INCONSISTENT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467233
    }
    ,{
         "name": "CO_E_IIDREG_INCONSISTENT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467232
    }
    ,{
         "name": "CO_E_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467231
    }
    ,{
         "name": "CO_E_RELOAD_DLL"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467230
    }
    ,{
         "name": "CO_E_MSI_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467229
    }
    ,{
         "name": "CO_E_ATTEMPT_TO_CREATE_OUTSIDE_CLIENT_CONTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467228
    }
    ,{
         "name": "CO_E_SERVER_PAUSED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467227
    }
    ,{
         "name": "CO_E_SERVER_NOT_PAUSED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467226
    }
    ,{
         "name": "CO_E_CLASS_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467225
    }
    ,{
         "name": "CO_E_CLRNOTAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467224
    }
    ,{
         "name": "CO_E_ASYNC_WORK_REJECTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467223
    }
    ,{
         "name": "CO_E_SERVER_INIT_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467222
    }
    ,{
         "name": "CO_E_NO_SECCTX_IN_ACTIVATE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467221
    }
    ,{
         "name": "CO_E_TRACKER_CONFIG"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467216
    }
    ,{
         "name": "CO_E_THREADPOOL_CONFIG"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467215
    }
    ,{
         "name": "CO_E_SXS_CONFIG"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467214
    }
    ,{
         "name": "CO_E_MALFORMED_SPN"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467213
    }
    ,{
         "name": "CO_E_UNREVOKED_REGISTRATION_ON_APARTMENT_SHUTDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467212
    }
    ,{
         "name": "CO_E_PREMATURE_STUB_RUNDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": -2147467211
    }
    ,{
         "name": "S_OK"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "S_FALSE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "OLE_E_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221504
    }
    ,{
         "name": "OLE_E_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221249
    }
    ,{
         "name": "OLE_S_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": 262144
    }
    ,{
         "name": "OLE_S_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": 262399
    }
    ,{
         "name": "OLE_E_OLEVERB"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221504
    }
    ,{
         "name": "OLE_E_ADVF"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221503
    }
    ,{
         "name": "OLE_E_ENUM_NOMORE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221502
    }
    ,{
         "name": "OLE_E_ADVISENOTSUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221501
    }
    ,{
         "name": "OLE_E_NOCONNECTION"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221500
    }
    ,{
         "name": "OLE_E_NOTRUNNING"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221499
    }
    ,{
         "name": "OLE_E_NOCACHE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221498
    }
    ,{
         "name": "OLE_E_BLANK"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221497
    }
    ,{
         "name": "OLE_E_CLASSDIFF"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221496
    }
    ,{
         "name": "OLE_E_CANT_GETMONIKER"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221495
    }
    ,{
         "name": "OLE_E_CANT_BINDTOSOURCE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221494
    }
    ,{
         "name": "OLE_E_STATIC"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221493
    }
    ,{
         "name": "OLE_E_PROMPTSAVECANCELLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221492
    }
    ,{
         "name": "OLE_E_INVALIDRECT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221491
    }
    ,{
         "name": "OLE_E_WRONGCOMPOBJ"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221490
    }
    ,{
         "name": "OLE_E_INVALIDHWND"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221489
    }
    ,{
         "name": "OLE_E_NOT_INPLACEACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221488
    }
    ,{
         "name": "OLE_E_CANTCONVERT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221487
    }
    ,{
         "name": "OLE_E_NOSTORAGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221486
    }
    ,{
         "name": "DV_E_FORMATETC"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221404
    }
    ,{
         "name": "DV_E_DVTARGETDEVICE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221403
    }
    ,{
         "name": "DV_E_STGMEDIUM"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221402
    }
    ,{
         "name": "DV_E_STATDATA"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221401
    }
    ,{
         "name": "DV_E_LINDEX"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221400
    }
    ,{
         "name": "DV_E_TYMED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221399
    }
    ,{
         "name": "DV_E_CLIPFORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221398
    }
    ,{
         "name": "DV_E_DVASPECT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221397
    }
    ,{
         "name": "DV_E_DVTARGETDEVICE_SIZE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221396
    }
    ,{
         "name": "DV_E_NOIVIEWOBJECT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221395
    }
    ,{
         "name": "DRAGDROP_E_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221248
    }
    ,{
         "name": "DRAGDROP_E_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221233
    }
    ,{
         "name": "DRAGDROP_S_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": 262400
    }
    ,{
         "name": "DRAGDROP_S_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": 262415
    }
    ,{
         "name": "DRAGDROP_E_NOTREGISTERED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221248
    }
    ,{
         "name": "DRAGDROP_E_ALREADYREGISTERED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221247
    }
    ,{
         "name": "DRAGDROP_E_INVALIDHWND"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221246
    }
    ,{
         "name": "DRAGDROP_E_CONCURRENT_DRAG_ATTEMPTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221245
    }
    ,{
         "name": "CLASSFACTORY_E_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221232
    }
    ,{
         "name": "CLASSFACTORY_E_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221217
    }
    ,{
         "name": "CLASSFACTORY_S_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": 262416
    }
    ,{
         "name": "CLASSFACTORY_S_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": 262431
    }
    ,{
         "name": "CLASS_E_NOAGGREGATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221232
    }
    ,{
         "name": "CLASS_E_CLASSNOTAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221231
    }
    ,{
         "name": "CLASS_E_NOTLICENSED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221230
    }
    ,{
         "name": "MARSHAL_E_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221216
    }
    ,{
         "name": "MARSHAL_E_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221201
    }
    ,{
         "name": "MARSHAL_S_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": 262432
    }
    ,{
         "name": "MARSHAL_S_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": 262447
    }
    ,{
         "name": "DATA_E_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221200
    }
    ,{
         "name": "DATA_E_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221185
    }
    ,{
         "name": "DATA_S_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": 262448
    }
    ,{
         "name": "DATA_S_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": 262463
    }
    ,{
         "name": "VIEW_E_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221184
    }
    ,{
         "name": "VIEW_E_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221169
    }
    ,{
         "name": "VIEW_S_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": 262464
    }
    ,{
         "name": "VIEW_S_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": 262479
    }
    ,{
         "name": "VIEW_E_DRAW"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221184
    }
    ,{
         "name": "REGDB_E_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221168
    }
    ,{
         "name": "REGDB_E_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221153
    }
    ,{
         "name": "REGDB_S_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": 262480
    }
    ,{
         "name": "REGDB_S_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": 262495
    }
    ,{
         "name": "REGDB_E_READREGDB"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221168
    }
    ,{
         "name": "REGDB_E_WRITEREGDB"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221167
    }
    ,{
         "name": "REGDB_E_KEYMISSING"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221166
    }
    ,{
         "name": "REGDB_E_INVALIDVALUE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221165
    }
    ,{
         "name": "REGDB_E_CLASSNOTREG"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221164
    }
    ,{
         "name": "REGDB_E_IIDNOTREG"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221163
    }
    ,{
         "name": "REGDB_E_BADTHREADINGMODEL"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221162
    }
    ,{
         "name": "REGDB_E_PACKAGEPOLICYVIOLATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221161
    }
    ,{
         "name": "CAT_E_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221152
    }
    ,{
         "name": "CAT_E_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221151
    }
    ,{
         "name": "CAT_E_CATIDNOEXIST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221152
    }
    ,{
         "name": "CAT_E_NODESCRIPTION"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221151
    }
    ,{
         "name": "CS_E_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221148
    }
    ,{
         "name": "CS_E_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221137
    }
    ,{
         "name": "CS_E_PACKAGE_NOTFOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221148
    }
    ,{
         "name": "CS_E_NOT_DELETABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221147
    }
    ,{
         "name": "CS_E_CLASS_NOTFOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221146
    }
    ,{
         "name": "CS_E_INVALID_VERSION"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221145
    }
    ,{
         "name": "CS_E_NO_CLASSSTORE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221144
    }
    ,{
         "name": "CS_E_OBJECT_NOTFOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221143
    }
    ,{
         "name": "CS_E_OBJECT_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221142
    }
    ,{
         "name": "CS_E_INVALID_PATH"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221141
    }
    ,{
         "name": "CS_E_NETWORK_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221140
    }
    ,{
         "name": "CS_E_ADMIN_LIMIT_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221139
    }
    ,{
         "name": "CS_E_SCHEMA_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221138
    }
    ,{
         "name": "CS_E_INTERNAL_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221137
    }
    ,{
         "name": "CACHE_E_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221136
    }
    ,{
         "name": "CACHE_E_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221121
    }
    ,{
         "name": "CACHE_S_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": 262512
    }
    ,{
         "name": "CACHE_S_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": 262527
    }
    ,{
         "name": "CACHE_E_NOCACHE_UPDATED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221136
    }
    ,{
         "name": "OLEOBJ_E_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221120
    }
    ,{
         "name": "OLEOBJ_E_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221105
    }
    ,{
         "name": "OLEOBJ_S_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": 262528
    }
    ,{
         "name": "OLEOBJ_S_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": 262543
    }
    ,{
         "name": "OLEOBJ_E_NOVERBS"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221120
    }
    ,{
         "name": "OLEOBJ_E_INVALIDVERB"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221119
    }
    ,{
         "name": "CLIENTSITE_E_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221104
    }
    ,{
         "name": "CLIENTSITE_E_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221089
    }
    ,{
         "name": "CLIENTSITE_S_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": 262544
    }
    ,{
         "name": "CLIENTSITE_S_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": 262559
    }
    ,{
         "name": "INPLACE_E_NOTUNDOABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221088
    }
    ,{
         "name": "INPLACE_E_NOTOOLSPACE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221087
    }
    ,{
         "name": "INPLACE_E_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221088
    }
    ,{
         "name": "INPLACE_E_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221073
    }
    ,{
         "name": "INPLACE_S_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": 262560
    }
    ,{
         "name": "INPLACE_S_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": 262575
    }
    ,{
         "name": "ENUM_E_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221072
    }
    ,{
         "name": "ENUM_E_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221057
    }
    ,{
         "name": "ENUM_S_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": 262576
    }
    ,{
         "name": "ENUM_S_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": 262591
    }
    ,{
         "name": "CONVERT10_E_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221056
    }
    ,{
         "name": "CONVERT10_E_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221041
    }
    ,{
         "name": "CONVERT10_S_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": 262592
    }
    ,{
         "name": "CONVERT10_S_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": 262607
    }
    ,{
         "name": "CONVERT10_E_OLESTREAM_GET"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221056
    }
    ,{
         "name": "CONVERT10_E_OLESTREAM_PUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221055
    }
    ,{
         "name": "CONVERT10_E_OLESTREAM_FMT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221054
    }
    ,{
         "name": "CONVERT10_E_OLESTREAM_BITMAP_TO_DIB"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221053
    }
    ,{
         "name": "CONVERT10_E_STG_FMT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221052
    }
    ,{
         "name": "CONVERT10_E_STG_NO_STD_STREAM"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221051
    }
    ,{
         "name": "CONVERT10_E_STG_DIB_TO_BITMAP"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221050
    }
    ,{
         "name": "CLIPBRD_E_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221040
    }
    ,{
         "name": "CLIPBRD_E_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221025
    }
    ,{
         "name": "CLIPBRD_S_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": 262608
    }
    ,{
         "name": "CLIPBRD_S_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": 262623
    }
    ,{
         "name": "CLIPBRD_E_CANT_OPEN"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221040
    }
    ,{
         "name": "CLIPBRD_E_CANT_EMPTY"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221039
    }
    ,{
         "name": "CLIPBRD_E_CANT_SET"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221038
    }
    ,{
         "name": "CLIPBRD_E_BAD_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221037
    }
    ,{
         "name": "CLIPBRD_E_CANT_CLOSE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221036
    }
    ,{
         "name": "MK_E_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221024
    }
    ,{
         "name": "MK_E_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221009
    }
    ,{
         "name": "MK_S_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": 262624
    }
    ,{
         "name": "MK_S_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": 262639
    }
    ,{
         "name": "MK_E_CONNECTMANUALLY"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221024
    }
    ,{
         "name": "MK_E_EXCEEDEDDEADLINE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221023
    }
    ,{
         "name": "MK_E_NEEDGENERIC"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221022
    }
    ,{
         "name": "MK_E_UNAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221021
    }
    ,{
         "name": "MK_E_SYNTAX"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221020
    }
    ,{
         "name": "MK_E_NOOBJECT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221019
    }
    ,{
         "name": "MK_E_INVALIDEXTENSION"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221018
    }
    ,{
         "name": "MK_E_INTERMEDIATEINTERFACENOTSUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221017
    }
    ,{
         "name": "MK_E_NOTBINDABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221016
    }
    ,{
         "name": "MK_E_NOTBOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221015
    }
    ,{
         "name": "MK_E_CANTOPENFILE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221014
    }
    ,{
         "name": "MK_E_MUSTBOTHERUSER"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221013
    }
    ,{
         "name": "MK_E_NOINVERSE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221012
    }
    ,{
         "name": "MK_E_NOSTORAGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221011
    }
    ,{
         "name": "MK_E_NOPREFIX"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221010
    }
    ,{
         "name": "MK_E_ENUMERATION_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221009
    }
    ,{
         "name": "CO_E_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221008
    }
    ,{
         "name": "CO_E_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220993
    }
    ,{
         "name": "CO_S_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": 262640
    }
    ,{
         "name": "CO_S_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": 262655
    }
    ,{
         "name": "CO_E_NOTINITIALIZED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221008
    }
    ,{
         "name": "CO_E_ALREADYINITIALIZED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221007
    }
    ,{
         "name": "CO_E_CANTDETERMINECLASS"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221006
    }
    ,{
         "name": "CO_E_CLASSSTRING"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221005
    }
    ,{
         "name": "CO_E_IIDSTRING"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221004
    }
    ,{
         "name": "CO_E_APPNOTFOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221003
    }
    ,{
         "name": "CO_E_APPSINGLEUSE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221002
    }
    ,{
         "name": "CO_E_ERRORINAPP"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221001
    }
    ,{
         "name": "CO_E_DLLNOTFOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2147221000
    }
    ,{
         "name": "CO_E_ERRORINDLL"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220999
    }
    ,{
         "name": "CO_E_WRONGOSFORAPP"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220998
    }
    ,{
         "name": "CO_E_OBJNOTREG"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220997
    }
    ,{
         "name": "CO_E_OBJISREG"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220996
    }
    ,{
         "name": "CO_E_OBJNOTCONNECTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220995
    }
    ,{
         "name": "CO_E_APPDIDNTREG"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220994
    }
    ,{
         "name": "CO_E_RELEASED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220993
    }
    ,{
         "name": "EVENT_E_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220992
    }
    ,{
         "name": "EVENT_E_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220961
    }
    ,{
         "name": "EVENT_S_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": 262656
    }
    ,{
         "name": "EVENT_S_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": 262687
    }
    ,{
         "name": "EVENT_S_SOME_SUBSCRIBERS_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 262656
    }
    ,{
         "name": "EVENT_E_ALL_SUBSCRIBERS_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220991
    }
    ,{
         "name": "EVENT_S_NOSUBSCRIBERS"
        ,"type": {"kind":"Int32"}
        ,"value": 262658
    }
    ,{
         "name": "EVENT_E_QUERYSYNTAX"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220989
    }
    ,{
         "name": "EVENT_E_QUERYFIELD"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220988
    }
    ,{
         "name": "EVENT_E_INTERNALEXCEPTION"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220987
    }
    ,{
         "name": "EVENT_E_INTERNALERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220986
    }
    ,{
         "name": "EVENT_E_INVALID_PER_USER_SID"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220985
    }
    ,{
         "name": "EVENT_E_USER_EXCEPTION"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220984
    }
    ,{
         "name": "EVENT_E_TOO_MANY_METHODS"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220983
    }
    ,{
         "name": "EVENT_E_MISSING_EVENTCLASS"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220982
    }
    ,{
         "name": "EVENT_E_NOT_ALL_REMOVED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220981
    }
    ,{
         "name": "EVENT_E_COMPLUS_NOT_INSTALLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220980
    }
    ,{
         "name": "EVENT_E_CANT_MODIFY_OR_DELETE_UNCONFIGURED_OBJECT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220979
    }
    ,{
         "name": "EVENT_E_CANT_MODIFY_OR_DELETE_CONFIGURED_OBJECT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220978
    }
    ,{
         "name": "EVENT_E_INVALID_EVENT_CLASS_PARTITION"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220977
    }
    ,{
         "name": "EVENT_E_PER_USER_SID_NOT_LOGGED_ON"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220976
    }
    ,{
         "name": "TPC_E_INVALID_PROPERTY"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220927
    }
    ,{
         "name": "TPC_E_NO_DEFAULT_TABLET"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220974
    }
    ,{
         "name": "TPC_E_UNKNOWN_PROPERTY"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220965
    }
    ,{
         "name": "TPC_E_INVALID_INPUT_RECT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220967
    }
    ,{
         "name": "TPC_E_INVALID_STROKE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220958
    }
    ,{
         "name": "TPC_E_INITIALIZE_FAIL"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220957
    }
    ,{
         "name": "TPC_E_NOT_RELEVANT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220942
    }
    ,{
         "name": "TPC_E_INVALID_PACKET_DESCRIPTION"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220941
    }
    ,{
         "name": "TPC_E_RECOGNIZER_NOT_REGISTERED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220939
    }
    ,{
         "name": "TPC_E_INVALID_RIGHTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220938
    }
    ,{
         "name": "TPC_E_OUT_OF_ORDER_CALL"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220937
    }
    ,{
         "name": "TPC_E_QUEUE_FULL"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220936
    }
    ,{
         "name": "TPC_E_INVALID_CONFIGURATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220935
    }
    ,{
         "name": "TPC_E_INVALID_DATA_FROM_RECOGNIZER"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220934
    }
    ,{
         "name": "TPC_S_TRUNCATED"
        ,"type": {"kind":"Int32"}
        ,"value": 262738
    }
    ,{
         "name": "TPC_S_INTERRUPTED"
        ,"type": {"kind":"Int32"}
        ,"value": 262739
    }
    ,{
         "name": "TPC_S_NO_DATA_TO_PROCESS"
        ,"type": {"kind":"Int32"}
        ,"value": 262740
    }
    ,{
         "name": "XACT_E_FIRST"
        ,"type": {"kind":"UInt32"}
        ,"value": 2147799040
    }
    ,{
         "name": "XACT_E_LAST"
        ,"type": {"kind":"UInt32"}
        ,"value": 2147799083
    }
    ,{
         "name": "XACT_S_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": 315392
    }
    ,{
         "name": "XACT_S_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": 315408
    }
    ,{
         "name": "XACT_E_ALREADYOTHERSINGLEPHASE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168256
    }
    ,{
         "name": "XACT_E_CANTRETAIN"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168255
    }
    ,{
         "name": "XACT_E_COMMITFAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168254
    }
    ,{
         "name": "XACT_E_COMMITPREVENTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168253
    }
    ,{
         "name": "XACT_E_HEURISTICABORT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168252
    }
    ,{
         "name": "XACT_E_HEURISTICCOMMIT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168251
    }
    ,{
         "name": "XACT_E_HEURISTICDAMAGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168250
    }
    ,{
         "name": "XACT_E_HEURISTICDANGER"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168249
    }
    ,{
         "name": "XACT_E_ISOLATIONLEVEL"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168248
    }
    ,{
         "name": "XACT_E_NOASYNC"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168247
    }
    ,{
         "name": "XACT_E_NOENLIST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168246
    }
    ,{
         "name": "XACT_E_NOISORETAIN"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168245
    }
    ,{
         "name": "XACT_E_NORESOURCE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168244
    }
    ,{
         "name": "XACT_E_NOTCURRENT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168243
    }
    ,{
         "name": "XACT_E_NOTRANSACTION"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168242
    }
    ,{
         "name": "XACT_E_NOTSUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168241
    }
    ,{
         "name": "XACT_E_UNKNOWNRMGRID"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168240
    }
    ,{
         "name": "XACT_E_WRONGSTATE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168239
    }
    ,{
         "name": "XACT_E_WRONGUOW"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168238
    }
    ,{
         "name": "XACT_E_XTIONEXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168237
    }
    ,{
         "name": "XACT_E_NOIMPORTOBJECT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168236
    }
    ,{
         "name": "XACT_E_INVALIDCOOKIE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168235
    }
    ,{
         "name": "XACT_E_INDOUBT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168234
    }
    ,{
         "name": "XACT_E_NOTIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168233
    }
    ,{
         "name": "XACT_E_ALREADYINPROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168232
    }
    ,{
         "name": "XACT_E_ABORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168231
    }
    ,{
         "name": "XACT_E_LOGFULL"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168230
    }
    ,{
         "name": "XACT_E_TMNOTAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168229
    }
    ,{
         "name": "XACT_E_CONNECTION_DOWN"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168228
    }
    ,{
         "name": "XACT_E_CONNECTION_DENIED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168227
    }
    ,{
         "name": "XACT_E_REENLISTTIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168226
    }
    ,{
         "name": "XACT_E_TIP_CONNECT_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168225
    }
    ,{
         "name": "XACT_E_TIP_PROTOCOL_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168224
    }
    ,{
         "name": "XACT_E_TIP_PULL_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168223
    }
    ,{
         "name": "XACT_E_DEST_TMNOTAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168222
    }
    ,{
         "name": "XACT_E_TIP_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168221
    }
    ,{
         "name": "XACT_E_NETWORK_TX_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168220
    }
    ,{
         "name": "XACT_E_PARTNER_NETWORK_TX_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168219
    }
    ,{
         "name": "XACT_E_XA_TX_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168218
    }
    ,{
         "name": "XACT_E_UNABLE_TO_READ_DTC_CONFIG"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168217
    }
    ,{
         "name": "XACT_E_UNABLE_TO_LOAD_DTC_PROXY"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168216
    }
    ,{
         "name": "XACT_E_ABORTING"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168215
    }
    ,{
         "name": "XACT_E_PUSH_COMM_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168214
    }
    ,{
         "name": "XACT_E_PULL_COMM_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168213
    }
    ,{
         "name": "XACT_E_LU_TX_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168212
    }
    ,{
         "name": "XACT_E_CLERKNOTFOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168128
    }
    ,{
         "name": "XACT_E_CLERKEXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168127
    }
    ,{
         "name": "XACT_E_RECOVERYINPROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168126
    }
    ,{
         "name": "XACT_E_TRANSACTIONCLOSED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168125
    }
    ,{
         "name": "XACT_E_INVALIDLSN"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168124
    }
    ,{
         "name": "XACT_E_REPLAYREQUEST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147168123
    }
    ,{
         "name": "XACT_S_ASYNC"
        ,"type": {"kind":"Int32"}
        ,"value": 315392
    }
    ,{
         "name": "XACT_S_DEFECT"
        ,"type": {"kind":"Int32"}
        ,"value": 315393
    }
    ,{
         "name": "XACT_S_READONLY"
        ,"type": {"kind":"Int32"}
        ,"value": 315394
    }
    ,{
         "name": "XACT_S_SOMENORETAIN"
        ,"type": {"kind":"Int32"}
        ,"value": 315395
    }
    ,{
         "name": "XACT_S_OKINFORM"
        ,"type": {"kind":"Int32"}
        ,"value": 315396
    }
    ,{
         "name": "XACT_S_MADECHANGESCONTENT"
        ,"type": {"kind":"Int32"}
        ,"value": 315397
    }
    ,{
         "name": "XACT_S_MADECHANGESINFORM"
        ,"type": {"kind":"Int32"}
        ,"value": 315398
    }
    ,{
         "name": "XACT_S_ALLNORETAIN"
        ,"type": {"kind":"Int32"}
        ,"value": 315399
    }
    ,{
         "name": "XACT_S_ABORTING"
        ,"type": {"kind":"Int32"}
        ,"value": 315400
    }
    ,{
         "name": "XACT_S_SINGLEPHASE"
        ,"type": {"kind":"Int32"}
        ,"value": 315401
    }
    ,{
         "name": "XACT_S_LOCALLY_OK"
        ,"type": {"kind":"Int32"}
        ,"value": 315402
    }
    ,{
         "name": "XACT_S_LASTRESOURCEMANAGER"
        ,"type": {"kind":"Int32"}
        ,"value": 315408
    }
    ,{
         "name": "CONTEXT_E_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147164160
    }
    ,{
         "name": "CONTEXT_E_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147164113
    }
    ,{
         "name": "CONTEXT_S_FIRST"
        ,"type": {"kind":"Int32"}
        ,"value": 319488
    }
    ,{
         "name": "CONTEXT_S_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": 319535
    }
    ,{
         "name": "CONTEXT_E_ABORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147164158
    }
    ,{
         "name": "CONTEXT_E_ABORTING"
        ,"type": {"kind":"Int32"}
        ,"value": -2147164157
    }
    ,{
         "name": "CONTEXT_E_NOCONTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147164156
    }
    ,{
         "name": "CONTEXT_E_WOULD_DEADLOCK"
        ,"type": {"kind":"Int32"}
        ,"value": -2147164155
    }
    ,{
         "name": "CONTEXT_E_SYNCH_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147164154
    }
    ,{
         "name": "CONTEXT_E_OLDREF"
        ,"type": {"kind":"Int32"}
        ,"value": -2147164153
    }
    ,{
         "name": "CONTEXT_E_ROLENOTFOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2147164148
    }
    ,{
         "name": "CONTEXT_E_TMNOTAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147164145
    }
    ,{
         "name": "CO_E_ACTIVATIONFAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147164127
    }
    ,{
         "name": "CO_E_ACTIVATIONFAILED_EVENTLOGGED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147164126
    }
    ,{
         "name": "CO_E_ACTIVATIONFAILED_CATALOGERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2147164125
    }
    ,{
         "name": "CO_E_ACTIVATIONFAILED_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147164124
    }
    ,{
         "name": "CO_E_INITIALIZATIONFAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147164123
    }
    ,{
         "name": "CONTEXT_E_NOJIT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147164122
    }
    ,{
         "name": "CONTEXT_E_NOTRANSACTION"
        ,"type": {"kind":"Int32"}
        ,"value": -2147164121
    }
    ,{
         "name": "CO_E_THREADINGMODEL_CHANGED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147164120
    }
    ,{
         "name": "CO_E_NOIISINTRINSICS"
        ,"type": {"kind":"Int32"}
        ,"value": -2147164119
    }
    ,{
         "name": "CO_E_NOCOOKIES"
        ,"type": {"kind":"Int32"}
        ,"value": -2147164118
    }
    ,{
         "name": "CO_E_DBERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2147164117
    }
    ,{
         "name": "CO_E_NOTPOOLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147164116
    }
    ,{
         "name": "CO_E_NOTCONSTRUCTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147164115
    }
    ,{
         "name": "CO_E_NOSYNCHRONIZATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2147164114
    }
    ,{
         "name": "CO_E_ISOLEVELMISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2147164113
    }
    ,{
         "name": "CO_E_CALL_OUT_OF_TX_SCOPE_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147164112
    }
    ,{
         "name": "CO_E_EXIT_TRANSACTION_SCOPE_NOT_CALLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147164111
    }
    ,{
         "name": "OLE_S_USEREG"
        ,"type": {"kind":"Int32"}
        ,"value": 262144
    }
    ,{
         "name": "OLE_S_STATIC"
        ,"type": {"kind":"Int32"}
        ,"value": 262145
    }
    ,{
         "name": "OLE_S_MAC_CLIPFORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": 262146
    }
    ,{
         "name": "DRAGDROP_S_DROP"
        ,"type": {"kind":"Int32"}
        ,"value": 262400
    }
    ,{
         "name": "DRAGDROP_S_CANCEL"
        ,"type": {"kind":"Int32"}
        ,"value": 262401
    }
    ,{
         "name": "DRAGDROP_S_USEDEFAULTCURSORS"
        ,"type": {"kind":"Int32"}
        ,"value": 262402
    }
    ,{
         "name": "DATA_S_SAMEFORMATETC"
        ,"type": {"kind":"Int32"}
        ,"value": 262448
    }
    ,{
         "name": "VIEW_S_ALREADY_FROZEN"
        ,"type": {"kind":"Int32"}
        ,"value": 262464
    }
    ,{
         "name": "CACHE_S_FORMATETC_NOTSUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": 262512
    }
    ,{
         "name": "CACHE_S_SAMECACHE"
        ,"type": {"kind":"Int32"}
        ,"value": 262513
    }
    ,{
         "name": "CACHE_S_SOMECACHES_NOTUPDATED"
        ,"type": {"kind":"Int32"}
        ,"value": 262514
    }
    ,{
         "name": "OLEOBJ_S_INVALIDVERB"
        ,"type": {"kind":"Int32"}
        ,"value": 262528
    }
    ,{
         "name": "OLEOBJ_S_CANNOT_DOVERB_NOW"
        ,"type": {"kind":"Int32"}
        ,"value": 262529
    }
    ,{
         "name": "OLEOBJ_S_INVALIDHWND"
        ,"type": {"kind":"Int32"}
        ,"value": 262530
    }
    ,{
         "name": "INPLACE_S_TRUNCATED"
        ,"type": {"kind":"Int32"}
        ,"value": 262560
    }
    ,{
         "name": "CONVERT10_S_NO_PRESENTATION"
        ,"type": {"kind":"Int32"}
        ,"value": 262592
    }
    ,{
         "name": "MK_S_REDUCED_TO_SELF"
        ,"type": {"kind":"Int32"}
        ,"value": 262626
    }
    ,{
         "name": "MK_S_ME"
        ,"type": {"kind":"Int32"}
        ,"value": 262628
    }
    ,{
         "name": "MK_S_HIM"
        ,"type": {"kind":"Int32"}
        ,"value": 262629
    }
    ,{
         "name": "MK_S_US"
        ,"type": {"kind":"Int32"}
        ,"value": 262630
    }
    ,{
         "name": "MK_S_MONIKERALREADYREGISTERED"
        ,"type": {"kind":"Int32"}
        ,"value": 262631
    }
    ,{
         "name": "SCHED_S_TASK_READY"
        ,"type": {"kind":"Int32"}
        ,"value": 267008
    }
    ,{
         "name": "SCHED_S_TASK_RUNNING"
        ,"type": {"kind":"Int32"}
        ,"value": 267009
    }
    ,{
         "name": "SCHED_S_TASK_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 267010
    }
    ,{
         "name": "SCHED_S_TASK_HAS_NOT_RUN"
        ,"type": {"kind":"Int32"}
        ,"value": 267011
    }
    ,{
         "name": "SCHED_S_TASK_NO_MORE_RUNS"
        ,"type": {"kind":"Int32"}
        ,"value": 267012
    }
    ,{
         "name": "SCHED_S_TASK_NOT_SCHEDULED"
        ,"type": {"kind":"Int32"}
        ,"value": 267013
    }
    ,{
         "name": "SCHED_S_TASK_TERMINATED"
        ,"type": {"kind":"Int32"}
        ,"value": 267014
    }
    ,{
         "name": "SCHED_S_TASK_NO_VALID_TRIGGERS"
        ,"type": {"kind":"Int32"}
        ,"value": 267015
    }
    ,{
         "name": "SCHED_S_EVENT_TRIGGER"
        ,"type": {"kind":"Int32"}
        ,"value": 267016
    }
    ,{
         "name": "SCHED_E_TRIGGER_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2147216631
    }
    ,{
         "name": "SCHED_E_TASK_NOT_READY"
        ,"type": {"kind":"Int32"}
        ,"value": -2147216630
    }
    ,{
         "name": "SCHED_E_TASK_NOT_RUNNING"
        ,"type": {"kind":"Int32"}
        ,"value": -2147216629
    }
    ,{
         "name": "SCHED_E_SERVICE_NOT_INSTALLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147216628
    }
    ,{
         "name": "SCHED_E_CANNOT_OPEN_TASK"
        ,"type": {"kind":"Int32"}
        ,"value": -2147216627
    }
    ,{
         "name": "SCHED_E_INVALID_TASK"
        ,"type": {"kind":"Int32"}
        ,"value": -2147216626
    }
    ,{
         "name": "SCHED_E_ACCOUNT_INFORMATION_NOT_SET"
        ,"type": {"kind":"Int32"}
        ,"value": -2147216625
    }
    ,{
         "name": "SCHED_E_ACCOUNT_NAME_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2147216624
    }
    ,{
         "name": "SCHED_E_ACCOUNT_DBASE_CORRUPT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147216623
    }
    ,{
         "name": "SCHED_E_NO_SECURITY_SERVICES"
        ,"type": {"kind":"Int32"}
        ,"value": -2147216622
    }
    ,{
         "name": "SCHED_E_UNKNOWN_OBJECT_VERSION"
        ,"type": {"kind":"Int32"}
        ,"value": -2147216621
    }
    ,{
         "name": "SCHED_E_UNSUPPORTED_ACCOUNT_OPTION"
        ,"type": {"kind":"Int32"}
        ,"value": -2147216620
    }
    ,{
         "name": "SCHED_E_SERVICE_NOT_RUNNING"
        ,"type": {"kind":"Int32"}
        ,"value": -2147216619
    }
    ,{
         "name": "SCHED_E_UNEXPECTEDNODE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147216618
    }
    ,{
         "name": "SCHED_E_NAMESPACE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147216617
    }
    ,{
         "name": "SCHED_E_INVALIDVALUE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147216616
    }
    ,{
         "name": "SCHED_E_MISSINGNODE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147216615
    }
    ,{
         "name": "SCHED_E_MALFORMEDXML"
        ,"type": {"kind":"Int32"}
        ,"value": -2147216614
    }
    ,{
         "name": "SCHED_S_SOME_TRIGGERS_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 267035
    }
    ,{
         "name": "SCHED_S_BATCH_LOGON_PROBLEM"
        ,"type": {"kind":"Int32"}
        ,"value": 267036
    }
    ,{
         "name": "SCHED_E_TOO_MANY_NODES"
        ,"type": {"kind":"Int32"}
        ,"value": -2147216611
    }
    ,{
         "name": "SCHED_E_PAST_END_BOUNDARY"
        ,"type": {"kind":"Int32"}
        ,"value": -2147216610
    }
    ,{
         "name": "SCHED_E_ALREADY_RUNNING"
        ,"type": {"kind":"Int32"}
        ,"value": -2147216609
    }
    ,{
         "name": "SCHED_E_USER_NOT_LOGGED_ON"
        ,"type": {"kind":"Int32"}
        ,"value": -2147216608
    }
    ,{
         "name": "SCHED_E_INVALID_TASK_HASH"
        ,"type": {"kind":"Int32"}
        ,"value": -2147216607
    }
    ,{
         "name": "SCHED_E_SERVICE_NOT_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147216606
    }
    ,{
         "name": "SCHED_E_SERVICE_TOO_BUSY"
        ,"type": {"kind":"Int32"}
        ,"value": -2147216605
    }
    ,{
         "name": "SCHED_E_TASK_ATTEMPTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147216604
    }
    ,{
         "name": "SCHED_S_TASK_QUEUED"
        ,"type": {"kind":"Int32"}
        ,"value": 267045
    }
    ,{
         "name": "SCHED_E_TASK_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147216602
    }
    ,{
         "name": "SCHED_E_TASK_NOT_V1_COMPAT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147216601
    }
    ,{
         "name": "SCHED_E_START_ON_DEMAND"
        ,"type": {"kind":"Int32"}
        ,"value": -2147216600
    }
    ,{
         "name": "SCHED_E_TASK_NOT_UBPM_COMPAT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147216599
    }
    ,{
         "name": "SCHED_E_DEPRECATED_FEATURE_USED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147216592
    }
    ,{
         "name": "CO_E_CLASS_CREATE_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146959359
    }
    ,{
         "name": "CO_E_SCM_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2146959358
    }
    ,{
         "name": "CO_E_SCM_RPC_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146959357
    }
    ,{
         "name": "CO_E_BAD_PATH"
        ,"type": {"kind":"Int32"}
        ,"value": -2146959356
    }
    ,{
         "name": "CO_E_SERVER_EXEC_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146959355
    }
    ,{
         "name": "CO_E_OBJSRV_RPC_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146959354
    }
    ,{
         "name": "MK_E_NO_NORMALIZED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146959353
    }
    ,{
         "name": "CO_E_SERVER_STOPPING"
        ,"type": {"kind":"Int32"}
        ,"value": -2146959352
    }
    ,{
         "name": "MEM_E_INVALID_ROOT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146959351
    }
    ,{
         "name": "MEM_E_INVALID_LINK"
        ,"type": {"kind":"Int32"}
        ,"value": -2146959344
    }
    ,{
         "name": "MEM_E_INVALID_SIZE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146959343
    }
    ,{
         "name": "CO_S_NOTALLINTERFACES"
        ,"type": {"kind":"Int32"}
        ,"value": 524306
    }
    ,{
         "name": "CO_S_MACHINENAMENOTFOUND"
        ,"type": {"kind":"Int32"}
        ,"value": 524307
    }
    ,{
         "name": "CO_E_MISSING_DISPLAYNAME"
        ,"type": {"kind":"Int32"}
        ,"value": -2146959339
    }
    ,{
         "name": "CO_E_RUNAS_VALUE_MUST_BE_AAA"
        ,"type": {"kind":"Int32"}
        ,"value": -2146959338
    }
    ,{
         "name": "CO_E_ELEVATION_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146959337
    }
    ,{
         "name": "APPX_E_PACKAGING_INTERNAL"
        ,"type": {"kind":"Int32"}
        ,"value": -2146958848
    }
    ,{
         "name": "APPX_E_INTERLEAVING_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146958847
    }
    ,{
         "name": "APPX_E_RELATIONSHIPS_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146958846
    }
    ,{
         "name": "APPX_E_MISSING_REQUIRED_FILE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146958845
    }
    ,{
         "name": "APPX_E_INVALID_MANIFEST"
        ,"type": {"kind":"Int32"}
        ,"value": -2146958844
    }
    ,{
         "name": "APPX_E_INVALID_BLOCKMAP"
        ,"type": {"kind":"Int32"}
        ,"value": -2146958843
    }
    ,{
         "name": "APPX_E_CORRUPT_CONTENT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146958842
    }
    ,{
         "name": "APPX_E_BLOCK_HASH_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2146958841
    }
    ,{
         "name": "APPX_E_REQUESTED_RANGE_TOO_LARGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146958840
    }
    ,{
         "name": "APPX_E_INVALID_SIP_CLIENT_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": -2146958839
    }
    ,{
         "name": "APPX_E_INVALID_KEY_INFO"
        ,"type": {"kind":"Int32"}
        ,"value": -2146958838
    }
    ,{
         "name": "APPX_E_INVALID_CONTENTGROUPMAP"
        ,"type": {"kind":"Int32"}
        ,"value": -2146958837
    }
    ,{
         "name": "APPX_E_INVALID_APPINSTALLER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146958836
    }
    ,{
         "name": "APPX_E_DELTA_BASELINE_VERSION_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2146958835
    }
    ,{
         "name": "APPX_E_DELTA_PACKAGE_MISSING_FILE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146958834
    }
    ,{
         "name": "APPX_E_INVALID_DELTA_PACKAGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146958833
    }
    ,{
         "name": "APPX_E_DELTA_APPENDED_PACKAGE_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146958832
    }
    ,{
         "name": "APPX_E_INVALID_PACKAGING_LAYOUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146958831
    }
    ,{
         "name": "APPX_E_INVALID_PACKAGESIGNCONFIG"
        ,"type": {"kind":"Int32"}
        ,"value": -2146958830
    }
    ,{
         "name": "APPX_E_RESOURCESPRI_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146958829
    }
    ,{
         "name": "APPX_E_FILE_COMPRESSION_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2146958828
    }
    ,{
         "name": "APPX_E_INVALID_PAYLOAD_PACKAGE_EXTENSION"
        ,"type": {"kind":"Int32"}
        ,"value": -2146958827
    }
    ,{
         "name": "APPX_E_INVALID_ENCRYPTION_EXCLUSION_FILE_LIST"
        ,"type": {"kind":"Int32"}
        ,"value": -2146958826
    }
    ,{
         "name": "BT_E_SPURIOUS_ACTIVATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2146958592
    }
    ,{
         "name": "DISP_E_UNKNOWNINTERFACE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147352575
    }
    ,{
         "name": "DISP_E_MEMBERNOTFOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2147352573
    }
    ,{
         "name": "DISP_E_PARAMNOTFOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2147352572
    }
    ,{
         "name": "DISP_E_TYPEMISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2147352571
    }
    ,{
         "name": "DISP_E_UNKNOWNNAME"
        ,"type": {"kind":"Int32"}
        ,"value": -2147352570
    }
    ,{
         "name": "DISP_E_NONAMEDARGS"
        ,"type": {"kind":"Int32"}
        ,"value": -2147352569
    }
    ,{
         "name": "DISP_E_BADVARTYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147352568
    }
    ,{
         "name": "DISP_E_EXCEPTION"
        ,"type": {"kind":"Int32"}
        ,"value": -2147352567
    }
    ,{
         "name": "DISP_E_OVERFLOW"
        ,"type": {"kind":"Int32"}
        ,"value": -2147352566
    }
    ,{
         "name": "DISP_E_BADINDEX"
        ,"type": {"kind":"Int32"}
        ,"value": -2147352565
    }
    ,{
         "name": "DISP_E_UNKNOWNLCID"
        ,"type": {"kind":"Int32"}
        ,"value": -2147352564
    }
    ,{
         "name": "DISP_E_ARRAYISLOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147352563
    }
    ,{
         "name": "DISP_E_BADPARAMCOUNT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147352562
    }
    ,{
         "name": "DISP_E_PARAMNOTOPTIONAL"
        ,"type": {"kind":"Int32"}
        ,"value": -2147352561
    }
    ,{
         "name": "DISP_E_BADCALLEE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147352560
    }
    ,{
         "name": "DISP_E_NOTACOLLECTION"
        ,"type": {"kind":"Int32"}
        ,"value": -2147352559
    }
    ,{
         "name": "DISP_E_DIVBYZERO"
        ,"type": {"kind":"Int32"}
        ,"value": -2147352558
    }
    ,{
         "name": "DISP_E_BUFFERTOOSMALL"
        ,"type": {"kind":"Int32"}
        ,"value": -2147352557
    }
    ,{
         "name": "TYPE_E_BUFFERTOOSMALL"
        ,"type": {"kind":"Int32"}
        ,"value": -2147319786
    }
    ,{
         "name": "TYPE_E_FIELDNOTFOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2147319785
    }
    ,{
         "name": "TYPE_E_INVDATAREAD"
        ,"type": {"kind":"Int32"}
        ,"value": -2147319784
    }
    ,{
         "name": "TYPE_E_UNSUPFORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147319783
    }
    ,{
         "name": "TYPE_E_REGISTRYACCESS"
        ,"type": {"kind":"Int32"}
        ,"value": -2147319780
    }
    ,{
         "name": "TYPE_E_LIBNOTREGISTERED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147319779
    }
    ,{
         "name": "TYPE_E_UNDEFINEDTYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147319769
    }
    ,{
         "name": "TYPE_E_QUALIFIEDNAMEDISALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147319768
    }
    ,{
         "name": "TYPE_E_INVALIDSTATE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147319767
    }
    ,{
         "name": "TYPE_E_WRONGTYPEKIND"
        ,"type": {"kind":"Int32"}
        ,"value": -2147319766
    }
    ,{
         "name": "TYPE_E_ELEMENTNOTFOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2147319765
    }
    ,{
         "name": "TYPE_E_AMBIGUOUSNAME"
        ,"type": {"kind":"Int32"}
        ,"value": -2147319764
    }
    ,{
         "name": "TYPE_E_NAMECONFLICT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147319763
    }
    ,{
         "name": "TYPE_E_UNKNOWNLCID"
        ,"type": {"kind":"Int32"}
        ,"value": -2147319762
    }
    ,{
         "name": "TYPE_E_DLLFUNCTIONNOTFOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2147319761
    }
    ,{
         "name": "TYPE_E_BADMODULEKIND"
        ,"type": {"kind":"Int32"}
        ,"value": -2147317571
    }
    ,{
         "name": "TYPE_E_SIZETOOBIG"
        ,"type": {"kind":"Int32"}
        ,"value": -2147317563
    }
    ,{
         "name": "TYPE_E_DUPLICATEID"
        ,"type": {"kind":"Int32"}
        ,"value": -2147317562
    }
    ,{
         "name": "TYPE_E_INVALIDID"
        ,"type": {"kind":"Int32"}
        ,"value": -2147317553
    }
    ,{
         "name": "TYPE_E_TYPEMISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2147316576
    }
    ,{
         "name": "TYPE_E_OUTOFBOUNDS"
        ,"type": {"kind":"Int32"}
        ,"value": -2147316575
    }
    ,{
         "name": "TYPE_E_IOERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2147316574
    }
    ,{
         "name": "TYPE_E_CANTCREATETMPFILE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147316573
    }
    ,{
         "name": "TYPE_E_CANTLOADLIBRARY"
        ,"type": {"kind":"Int32"}
        ,"value": -2147312566
    }
    ,{
         "name": "TYPE_E_INCONSISTENTPROPFUNCS"
        ,"type": {"kind":"Int32"}
        ,"value": -2147312509
    }
    ,{
         "name": "TYPE_E_CIRCULARTYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147312508
    }
    ,{
         "name": "STG_E_INVALIDFUNCTION"
        ,"type": {"kind":"Int32"}
        ,"value": -2147287039
    }
    ,{
         "name": "STG_E_FILENOTFOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2147287038
    }
    ,{
         "name": "STG_E_PATHNOTFOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2147287037
    }
    ,{
         "name": "STG_E_TOOMANYOPENFILES"
        ,"type": {"kind":"Int32"}
        ,"value": -2147287036
    }
    ,{
         "name": "STG_E_ACCESSDENIED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147287035
    }
    ,{
         "name": "STG_E_INVALIDHANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147287034
    }
    ,{
         "name": "STG_E_INSUFFICIENTMEMORY"
        ,"type": {"kind":"Int32"}
        ,"value": -2147287032
    }
    ,{
         "name": "STG_E_INVALIDPOINTER"
        ,"type": {"kind":"Int32"}
        ,"value": -2147287031
    }
    ,{
         "name": "STG_E_NOMOREFILES"
        ,"type": {"kind":"Int32"}
        ,"value": -2147287022
    }
    ,{
         "name": "STG_E_DISKISWRITEPROTECTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147287021
    }
    ,{
         "name": "STG_E_SEEKERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2147287015
    }
    ,{
         "name": "STG_E_WRITEFAULT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147287011
    }
    ,{
         "name": "STG_E_READFAULT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147287010
    }
    ,{
         "name": "STG_E_SHAREVIOLATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2147287008
    }
    ,{
         "name": "STG_E_LOCKVIOLATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2147287007
    }
    ,{
         "name": "STG_E_FILEALREADYEXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2147286960
    }
    ,{
         "name": "STG_E_INVALIDPARAMETER"
        ,"type": {"kind":"Int32"}
        ,"value": -2147286953
    }
    ,{
         "name": "STG_E_MEDIUMFULL"
        ,"type": {"kind":"Int32"}
        ,"value": -2147286928
    }
    ,{
         "name": "STG_E_PROPSETMISMATCHED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147286800
    }
    ,{
         "name": "STG_E_ABNORMALAPIEXIT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147286790
    }
    ,{
         "name": "STG_E_INVALIDHEADER"
        ,"type": {"kind":"Int32"}
        ,"value": -2147286789
    }
    ,{
         "name": "STG_E_INVALIDNAME"
        ,"type": {"kind":"Int32"}
        ,"value": -2147286788
    }
    ,{
         "name": "STG_E_UNKNOWN"
        ,"type": {"kind":"Int32"}
        ,"value": -2147286787
    }
    ,{
         "name": "STG_E_UNIMPLEMENTEDFUNCTION"
        ,"type": {"kind":"Int32"}
        ,"value": -2147286786
    }
    ,{
         "name": "STG_E_INVALIDFLAG"
        ,"type": {"kind":"Int32"}
        ,"value": -2147286785
    }
    ,{
         "name": "STG_E_INUSE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147286784
    }
    ,{
         "name": "STG_E_NOTCURRENT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147286783
    }
    ,{
         "name": "STG_E_REVERTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147286782
    }
    ,{
         "name": "STG_E_CANTSAVE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147286781
    }
    ,{
         "name": "STG_E_OLDFORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147286780
    }
    ,{
         "name": "STG_E_OLDDLL"
        ,"type": {"kind":"Int32"}
        ,"value": -2147286779
    }
    ,{
         "name": "STG_E_SHAREREQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147286778
    }
    ,{
         "name": "STG_E_NOTFILEBASEDSTORAGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147286777
    }
    ,{
         "name": "STG_E_EXTANTMARSHALLINGS"
        ,"type": {"kind":"Int32"}
        ,"value": -2147286776
    }
    ,{
         "name": "STG_E_DOCFILECORRUPT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147286775
    }
    ,{
         "name": "STG_E_BADBASEADDRESS"
        ,"type": {"kind":"Int32"}
        ,"value": -2147286768
    }
    ,{
         "name": "STG_E_DOCFILETOOLARGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147286767
    }
    ,{
         "name": "STG_E_NOTSIMPLEFORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147286766
    }
    ,{
         "name": "STG_E_INCOMPLETE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147286527
    }
    ,{
         "name": "STG_E_TERMINATED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147286526
    }
    ,{
         "name": "STG_S_CONVERTED"
        ,"type": {"kind":"Int32"}
        ,"value": 197120
    }
    ,{
         "name": "STG_S_BLOCK"
        ,"type": {"kind":"Int32"}
        ,"value": 197121
    }
    ,{
         "name": "STG_S_RETRYNOW"
        ,"type": {"kind":"Int32"}
        ,"value": 197122
    }
    ,{
         "name": "STG_S_MONITORING"
        ,"type": {"kind":"Int32"}
        ,"value": 197123
    }
    ,{
         "name": "STG_S_MULTIPLEOPENS"
        ,"type": {"kind":"Int32"}
        ,"value": 197124
    }
    ,{
         "name": "STG_S_CONSOLIDATIONFAILED"
        ,"type": {"kind":"Int32"}
        ,"value": 197125
    }
    ,{
         "name": "STG_S_CANNOTCONSOLIDATE"
        ,"type": {"kind":"Int32"}
        ,"value": 197126
    }
    ,{
         "name": "STG_S_POWER_CYCLE_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 197127
    }
    ,{
         "name": "STG_E_FIRMWARE_SLOT_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2147286520
    }
    ,{
         "name": "STG_E_FIRMWARE_IMAGE_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2147286519
    }
    ,{
         "name": "STG_E_DEVICE_UNRESPONSIVE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147286518
    }
    ,{
         "name": "STG_E_STATUS_COPY_PROTECTION_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147286267
    }
    ,{
         "name": "STG_E_CSS_AUTHENTICATION_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147286266
    }
    ,{
         "name": "STG_E_CSS_KEY_NOT_PRESENT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147286265
    }
    ,{
         "name": "STG_E_CSS_KEY_NOT_ESTABLISHED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147286264
    }
    ,{
         "name": "STG_E_CSS_SCRAMBLED_SECTOR"
        ,"type": {"kind":"Int32"}
        ,"value": -2147286263
    }
    ,{
         "name": "STG_E_CSS_REGION_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2147286262
    }
    ,{
         "name": "STG_E_RESETS_EXHAUSTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147286261
    }
    ,{
         "name": "RPC_E_CALL_REJECTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147418111
    }
    ,{
         "name": "RPC_E_CALL_CANCELED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147418110
    }
    ,{
         "name": "RPC_E_CANTPOST_INSENDCALL"
        ,"type": {"kind":"Int32"}
        ,"value": -2147418109
    }
    ,{
         "name": "RPC_E_CANTCALLOUT_INASYNCCALL"
        ,"type": {"kind":"Int32"}
        ,"value": -2147418108
    }
    ,{
         "name": "RPC_E_CANTCALLOUT_INEXTERNALCALL"
        ,"type": {"kind":"Int32"}
        ,"value": -2147418107
    }
    ,{
         "name": "RPC_E_CONNECTION_TERMINATED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147418106
    }
    ,{
         "name": "RPC_E_SERVER_DIED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147418105
    }
    ,{
         "name": "RPC_E_CLIENT_DIED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147418104
    }
    ,{
         "name": "RPC_E_INVALID_DATAPACKET"
        ,"type": {"kind":"Int32"}
        ,"value": -2147418103
    }
    ,{
         "name": "RPC_E_CANTTRANSMIT_CALL"
        ,"type": {"kind":"Int32"}
        ,"value": -2147418102
    }
    ,{
         "name": "RPC_E_CLIENT_CANTMARSHAL_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": -2147418101
    }
    ,{
         "name": "RPC_E_CLIENT_CANTUNMARSHAL_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": -2147418100
    }
    ,{
         "name": "RPC_E_SERVER_CANTMARSHAL_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": -2147418099
    }
    ,{
         "name": "RPC_E_SERVER_CANTUNMARSHAL_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": -2147418098
    }
    ,{
         "name": "RPC_E_INVALID_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": -2147418097
    }
    ,{
         "name": "RPC_E_INVALID_PARAMETER"
        ,"type": {"kind":"Int32"}
        ,"value": -2147418096
    }
    ,{
         "name": "RPC_E_CANTCALLOUT_AGAIN"
        ,"type": {"kind":"Int32"}
        ,"value": -2147418095
    }
    ,{
         "name": "RPC_E_SERVER_DIED_DNE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147418094
    }
    ,{
         "name": "RPC_E_SYS_CALL_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417856
    }
    ,{
         "name": "RPC_E_OUT_OF_RESOURCES"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417855
    }
    ,{
         "name": "RPC_E_ATTEMPTED_MULTITHREAD"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417854
    }
    ,{
         "name": "RPC_E_NOT_REGISTERED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417853
    }
    ,{
         "name": "RPC_E_FAULT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417852
    }
    ,{
         "name": "RPC_E_SERVERFAULT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417851
    }
    ,{
         "name": "RPC_E_CHANGED_MODE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417850
    }
    ,{
         "name": "RPC_E_INVALIDMETHOD"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417849
    }
    ,{
         "name": "RPC_E_DISCONNECTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417848
    }
    ,{
         "name": "RPC_E_RETRY"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417847
    }
    ,{
         "name": "RPC_E_SERVERCALL_RETRYLATER"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417846
    }
    ,{
         "name": "RPC_E_SERVERCALL_REJECTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417845
    }
    ,{
         "name": "RPC_E_INVALID_CALLDATA"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417844
    }
    ,{
         "name": "RPC_E_CANTCALLOUT_ININPUTSYNCCALL"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417843
    }
    ,{
         "name": "RPC_E_WRONG_THREAD"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417842
    }
    ,{
         "name": "RPC_E_THREAD_NOT_INIT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417841
    }
    ,{
         "name": "RPC_E_VERSION_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417840
    }
    ,{
         "name": "RPC_E_INVALID_HEADER"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417839
    }
    ,{
         "name": "RPC_E_INVALID_EXTENSION"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417838
    }
    ,{
         "name": "RPC_E_INVALID_IPID"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417837
    }
    ,{
         "name": "RPC_E_INVALID_OBJECT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417836
    }
    ,{
         "name": "RPC_S_CALLPENDING"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417835
    }
    ,{
         "name": "RPC_S_WAITONTIMER"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417834
    }
    ,{
         "name": "RPC_E_CALL_COMPLETE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417833
    }
    ,{
         "name": "RPC_E_UNSECURE_CALL"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417832
    }
    ,{
         "name": "RPC_E_TOO_LATE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417831
    }
    ,{
         "name": "RPC_E_NO_GOOD_SECURITY_PACKAGES"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417830
    }
    ,{
         "name": "RPC_E_ACCESS_DENIED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417829
    }
    ,{
         "name": "RPC_E_REMOTE_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417828
    }
    ,{
         "name": "RPC_E_INVALID_OBJREF"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417827
    }
    ,{
         "name": "RPC_E_NO_CONTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417826
    }
    ,{
         "name": "RPC_E_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417825
    }
    ,{
         "name": "RPC_E_NO_SYNC"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417824
    }
    ,{
         "name": "RPC_E_FULLSIC_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417823
    }
    ,{
         "name": "RPC_E_INVALID_STD_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417822
    }
    ,{
         "name": "CO_E_FAILEDTOIMPERSONATE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417821
    }
    ,{
         "name": "CO_E_FAILEDTOGETSECCTX"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417820
    }
    ,{
         "name": "CO_E_FAILEDTOOPENTHREADTOKEN"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417819
    }
    ,{
         "name": "CO_E_FAILEDTOGETTOKENINFO"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417818
    }
    ,{
         "name": "CO_E_TRUSTEEDOESNTMATCHCLIENT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417817
    }
    ,{
         "name": "CO_E_FAILEDTOQUERYCLIENTBLANKET"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417816
    }
    ,{
         "name": "CO_E_FAILEDTOSETDACL"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417815
    }
    ,{
         "name": "CO_E_ACCESSCHECKFAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417814
    }
    ,{
         "name": "CO_E_NETACCESSAPIFAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417813
    }
    ,{
         "name": "CO_E_WRONGTRUSTEENAMESYNTAX"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417812
    }
    ,{
         "name": "CO_E_INVALIDSID"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417811
    }
    ,{
         "name": "CO_E_CONVERSIONFAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417810
    }
    ,{
         "name": "CO_E_NOMATCHINGSIDFOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417809
    }
    ,{
         "name": "CO_E_LOOKUPACCSIDFAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417808
    }
    ,{
         "name": "CO_E_NOMATCHINGNAMEFOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417807
    }
    ,{
         "name": "CO_E_LOOKUPACCNAMEFAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417806
    }
    ,{
         "name": "CO_E_SETSERLHNDLFAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417805
    }
    ,{
         "name": "CO_E_FAILEDTOGETWINDIR"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417804
    }
    ,{
         "name": "CO_E_PATHTOOLONG"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417803
    }
    ,{
         "name": "CO_E_FAILEDTOGENUUID"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417802
    }
    ,{
         "name": "CO_E_FAILEDTOCREATEFILE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417801
    }
    ,{
         "name": "CO_E_FAILEDTOCLOSEHANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417800
    }
    ,{
         "name": "CO_E_EXCEEDSYSACLLIMIT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417799
    }
    ,{
         "name": "CO_E_ACESINWRONGORDER"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417798
    }
    ,{
         "name": "CO_E_INCOMPATIBLESTREAMVERSION"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417797
    }
    ,{
         "name": "CO_E_FAILEDTOOPENPROCESSTOKEN"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417796
    }
    ,{
         "name": "CO_E_DECODEFAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417795
    }
    ,{
         "name": "CO_E_ACNOTINITIALIZED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417793
    }
    ,{
         "name": "CO_E_CANCEL_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147417792
    }
    ,{
         "name": "RPC_E_UNEXPECTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147352577
    }
    ,{
         "name": "ERROR_AUDITING_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -1073151999
    }
    ,{
         "name": "ERROR_ALL_SIDS_FILTERED"
        ,"type": {"kind":"Int32"}
        ,"value": -1073151998
    }
    ,{
         "name": "ERROR_BIZRULES_NOT_ENABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -1073151997
    }
    ,{
         "name": "NTE_BAD_UID"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893823
    }
    ,{
         "name": "NTE_BAD_HASH"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893822
    }
    ,{
         "name": "NTE_BAD_KEY"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893821
    }
    ,{
         "name": "NTE_BAD_LEN"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893820
    }
    ,{
         "name": "NTE_BAD_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893819
    }
    ,{
         "name": "NTE_BAD_SIGNATURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893818
    }
    ,{
         "name": "NTE_BAD_VER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893817
    }
    ,{
         "name": "NTE_BAD_ALGID"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893816
    }
    ,{
         "name": "NTE_BAD_FLAGS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893815
    }
    ,{
         "name": "NTE_BAD_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893814
    }
    ,{
         "name": "NTE_BAD_KEY_STATE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893813
    }
    ,{
         "name": "NTE_BAD_HASH_STATE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893812
    }
    ,{
         "name": "NTE_NO_KEY"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893811
    }
    ,{
         "name": "NTE_NO_MEMORY"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893810
    }
    ,{
         "name": "NTE_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893809
    }
    ,{
         "name": "NTE_PERM"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893808
    }
    ,{
         "name": "NTE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893807
    }
    ,{
         "name": "NTE_DOUBLE_ENCRYPT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893806
    }
    ,{
         "name": "NTE_BAD_PROVIDER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893805
    }
    ,{
         "name": "NTE_BAD_PROV_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893804
    }
    ,{
         "name": "NTE_BAD_PUBLIC_KEY"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893803
    }
    ,{
         "name": "NTE_BAD_KEYSET"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893802
    }
    ,{
         "name": "NTE_PROV_TYPE_NOT_DEF"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893801
    }
    ,{
         "name": "NTE_PROV_TYPE_ENTRY_BAD"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893800
    }
    ,{
         "name": "NTE_KEYSET_NOT_DEF"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893799
    }
    ,{
         "name": "NTE_KEYSET_ENTRY_BAD"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893798
    }
    ,{
         "name": "NTE_PROV_TYPE_NO_MATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893797
    }
    ,{
         "name": "NTE_SIGNATURE_FILE_BAD"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893796
    }
    ,{
         "name": "NTE_PROVIDER_DLL_FAIL"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893795
    }
    ,{
         "name": "NTE_PROV_DLL_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893794
    }
    ,{
         "name": "NTE_BAD_KEYSET_PARAM"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893793
    }
    ,{
         "name": "NTE_FAIL"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893792
    }
    ,{
         "name": "NTE_SYS_ERR"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893791
    }
    ,{
         "name": "NTE_SILENT_CONTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893790
    }
    ,{
         "name": "NTE_TOKEN_KEYSET_STORAGE_FULL"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893789
    }
    ,{
         "name": "NTE_TEMPORARY_PROFILE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893788
    }
    ,{
         "name": "NTE_FIXEDPARAMETER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893787
    }
    ,{
         "name": "NTE_INVALID_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893786
    }
    ,{
         "name": "NTE_INVALID_PARAMETER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893785
    }
    ,{
         "name": "NTE_BUFFER_TOO_SMALL"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893784
    }
    ,{
         "name": "NTE_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893783
    }
    ,{
         "name": "NTE_NO_MORE_ITEMS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893782
    }
    ,{
         "name": "NTE_BUFFERS_OVERLAP"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893781
    }
    ,{
         "name": "NTE_DECRYPTION_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893780
    }
    ,{
         "name": "NTE_INTERNAL_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893779
    }
    ,{
         "name": "NTE_UI_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893778
    }
    ,{
         "name": "NTE_HMAC_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893777
    }
    ,{
         "name": "NTE_DEVICE_NOT_READY"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893776
    }
    ,{
         "name": "NTE_AUTHENTICATION_IGNORED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893775
    }
    ,{
         "name": "NTE_VALIDATION_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893774
    }
    ,{
         "name": "NTE_INCORRECT_PASSWORD"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893773
    }
    ,{
         "name": "NTE_ENCRYPTION_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893772
    }
    ,{
         "name": "NTE_DEVICE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893771
    }
    ,{
         "name": "NTE_USER_CANCELLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893770
    }
    ,{
         "name": "NTE_PASSWORD_CHANGE_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893769
    }
    ,{
         "name": "NTE_NOT_ACTIVE_CONSOLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893768
    }
    ,{
         "name": "SEC_E_INSUFFICIENT_MEMORY"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893056
    }
    ,{
         "name": "SEC_E_INVALID_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893055
    }
    ,{
         "name": "SEC_E_UNSUPPORTED_FUNCTION"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893054
    }
    ,{
         "name": "SEC_E_TARGET_UNKNOWN"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893053
    }
    ,{
         "name": "SEC_E_INTERNAL_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893052
    }
    ,{
         "name": "SEC_E_SECPKG_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893051
    }
    ,{
         "name": "SEC_E_NOT_OWNER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893050
    }
    ,{
         "name": "SEC_E_CANNOT_INSTALL"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893049
    }
    ,{
         "name": "SEC_E_INVALID_TOKEN"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893048
    }
    ,{
         "name": "SEC_E_CANNOT_PACK"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893047
    }
    ,{
         "name": "SEC_E_QOP_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893046
    }
    ,{
         "name": "SEC_E_NO_IMPERSONATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893045
    }
    ,{
         "name": "SEC_E_LOGON_DENIED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893044
    }
    ,{
         "name": "SEC_E_UNKNOWN_CREDENTIALS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893043
    }
    ,{
         "name": "SEC_E_NO_CREDENTIALS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893042
    }
    ,{
         "name": "SEC_E_MESSAGE_ALTERED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893041
    }
    ,{
         "name": "SEC_E_OUT_OF_SEQUENCE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893040
    }
    ,{
         "name": "SEC_E_NO_AUTHENTICATING_AUTHORITY"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893039
    }
    ,{
         "name": "SEC_I_CONTINUE_NEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 590610
    }
    ,{
         "name": "SEC_I_COMPLETE_NEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 590611
    }
    ,{
         "name": "SEC_I_COMPLETE_AND_CONTINUE"
        ,"type": {"kind":"Int32"}
        ,"value": 590612
    }
    ,{
         "name": "SEC_I_LOCAL_LOGON"
        ,"type": {"kind":"Int32"}
        ,"value": 590613
    }
    ,{
         "name": "SEC_I_GENERIC_EXTENSION_RECEIVED"
        ,"type": {"kind":"Int32"}
        ,"value": 590614
    }
    ,{
         "name": "SEC_E_BAD_PKGID"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893034
    }
    ,{
         "name": "SEC_E_CONTEXT_EXPIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893033
    }
    ,{
         "name": "SEC_I_CONTEXT_EXPIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 590615
    }
    ,{
         "name": "SEC_E_INCOMPLETE_MESSAGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893032
    }
    ,{
         "name": "SEC_E_INCOMPLETE_CREDENTIALS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893024
    }
    ,{
         "name": "SEC_E_BUFFER_TOO_SMALL"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893023
    }
    ,{
         "name": "SEC_I_INCOMPLETE_CREDENTIALS"
        ,"type": {"kind":"Int32"}
        ,"value": 590624
    }
    ,{
         "name": "SEC_I_RENEGOTIATE"
        ,"type": {"kind":"Int32"}
        ,"value": 590625
    }
    ,{
         "name": "SEC_E_WRONG_PRINCIPAL"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893022
    }
    ,{
         "name": "SEC_I_NO_LSA_CONTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 590627
    }
    ,{
         "name": "SEC_E_TIME_SKEW"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893020
    }
    ,{
         "name": "SEC_E_UNTRUSTED_ROOT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893019
    }
    ,{
         "name": "SEC_E_ILLEGAL_MESSAGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893018
    }
    ,{
         "name": "SEC_E_CERT_UNKNOWN"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893017
    }
    ,{
         "name": "SEC_E_CERT_EXPIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893016
    }
    ,{
         "name": "SEC_E_ENCRYPT_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893015
    }
    ,{
         "name": "SEC_E_DECRYPT_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893008
    }
    ,{
         "name": "SEC_E_ALGORITHM_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893007
    }
    ,{
         "name": "SEC_E_SECURITY_QOS_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893006
    }
    ,{
         "name": "SEC_E_UNFINISHED_CONTEXT_DELETED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893005
    }
    ,{
         "name": "SEC_E_NO_TGT_REPLY"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893004
    }
    ,{
         "name": "SEC_E_NO_IP_ADDRESSES"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893003
    }
    ,{
         "name": "SEC_E_WRONG_CREDENTIAL_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893002
    }
    ,{
         "name": "SEC_E_CRYPTO_SYSTEM_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893001
    }
    ,{
         "name": "SEC_E_MAX_REFERRALS_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893000
    }
    ,{
         "name": "SEC_E_MUST_BE_KDC"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892999
    }
    ,{
         "name": "SEC_E_STRONG_CRYPTO_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892998
    }
    ,{
         "name": "SEC_E_TOO_MANY_PRINCIPALS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892997
    }
    ,{
         "name": "SEC_E_NO_PA_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892996
    }
    ,{
         "name": "SEC_E_PKINIT_NAME_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892995
    }
    ,{
         "name": "SEC_E_SMARTCARD_LOGON_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892994
    }
    ,{
         "name": "SEC_E_SHUTDOWN_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892993
    }
    ,{
         "name": "SEC_E_KDC_INVALID_REQUEST"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892992
    }
    ,{
         "name": "SEC_E_KDC_UNABLE_TO_REFER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892991
    }
    ,{
         "name": "SEC_E_KDC_UNKNOWN_ETYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892990
    }
    ,{
         "name": "SEC_E_UNSUPPORTED_PREAUTH"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892989
    }
    ,{
         "name": "SEC_E_DELEGATION_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892987
    }
    ,{
         "name": "SEC_E_BAD_BINDINGS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892986
    }
    ,{
         "name": "SEC_E_MULTIPLE_ACCOUNTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892985
    }
    ,{
         "name": "SEC_E_NO_KERB_KEY"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892984
    }
    ,{
         "name": "SEC_E_CERT_WRONG_USAGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892983
    }
    ,{
         "name": "SEC_E_DOWNGRADE_DETECTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892976
    }
    ,{
         "name": "SEC_E_SMARTCARD_CERT_REVOKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892975
    }
    ,{
         "name": "SEC_E_ISSUING_CA_UNTRUSTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892974
    }
    ,{
         "name": "SEC_E_REVOCATION_OFFLINE_C"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892973
    }
    ,{
         "name": "SEC_E_PKINIT_CLIENT_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892972
    }
    ,{
         "name": "SEC_E_SMARTCARD_CERT_EXPIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892971
    }
    ,{
         "name": "SEC_E_NO_S4U_PROT_SUPPORT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892970
    }
    ,{
         "name": "SEC_E_CROSSREALM_DELEGATION_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892969
    }
    ,{
         "name": "SEC_E_REVOCATION_OFFLINE_KDC"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892968
    }
    ,{
         "name": "SEC_E_ISSUING_CA_UNTRUSTED_KDC"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892967
    }
    ,{
         "name": "SEC_E_KDC_CERT_EXPIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892966
    }
    ,{
         "name": "SEC_E_KDC_CERT_REVOKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892965
    }
    ,{
         "name": "SEC_I_SIGNATURE_NEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": 590684
    }
    ,{
         "name": "SEC_E_INVALID_PARAMETER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892963
    }
    ,{
         "name": "SEC_E_DELEGATION_POLICY"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892962
    }
    ,{
         "name": "SEC_E_POLICY_NLTM_ONLY"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892961
    }
    ,{
         "name": "SEC_I_NO_RENEGOTIATION"
        ,"type": {"kind":"Int32"}
        ,"value": 590688
    }
    ,{
         "name": "SEC_E_NO_CONTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892959
    }
    ,{
         "name": "SEC_E_PKU2U_CERT_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892958
    }
    ,{
         "name": "SEC_E_MUTUAL_AUTH_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892957
    }
    ,{
         "name": "SEC_I_MESSAGE_FRAGMENT"
        ,"type": {"kind":"Int32"}
        ,"value": 590692
    }
    ,{
         "name": "SEC_E_ONLY_HTTPS_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892955
    }
    ,{
         "name": "SEC_I_CONTINUE_NEEDED_MESSAGE_OK"
        ,"type": {"kind":"Int32"}
        ,"value": 590694
    }
    ,{
         "name": "SEC_E_APPLICATION_PROTOCOL_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892953
    }
    ,{
         "name": "SEC_I_ASYNC_CALL_PENDING"
        ,"type": {"kind":"Int32"}
        ,"value": 590696
    }
    ,{
         "name": "SEC_E_INVALID_UPN_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892951
    }
    ,{
         "name": "SEC_E_EXT_BUFFER_TOO_SMALL"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892950
    }
    ,{
         "name": "SEC_E_INSUFFICIENT_BUFFERS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146892949
    }
    ,{
         "name": "CRYPT_E_MSG_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2146889727
    }
    ,{
         "name": "CRYPT_E_UNKNOWN_ALGO"
        ,"type": {"kind":"Int32"}
        ,"value": -2146889726
    }
    ,{
         "name": "CRYPT_E_OID_FORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146889725
    }
    ,{
         "name": "CRYPT_E_INVALID_MSG_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146889724
    }
    ,{
         "name": "CRYPT_E_UNEXPECTED_ENCODING"
        ,"type": {"kind":"Int32"}
        ,"value": -2146889723
    }
    ,{
         "name": "CRYPT_E_AUTH_ATTR_MISSING"
        ,"type": {"kind":"Int32"}
        ,"value": -2146889722
    }
    ,{
         "name": "CRYPT_E_HASH_VALUE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146889721
    }
    ,{
         "name": "CRYPT_E_INVALID_INDEX"
        ,"type": {"kind":"Int32"}
        ,"value": -2146889720
    }
    ,{
         "name": "CRYPT_E_ALREADY_DECRYPTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146889719
    }
    ,{
         "name": "CRYPT_E_NOT_DECRYPTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146889718
    }
    ,{
         "name": "CRYPT_E_RECIPIENT_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2146889717
    }
    ,{
         "name": "CRYPT_E_CONTROL_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146889716
    }
    ,{
         "name": "CRYPT_E_ISSUER_SERIALNUMBER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146889715
    }
    ,{
         "name": "CRYPT_E_SIGNER_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2146889714
    }
    ,{
         "name": "CRYPT_E_ATTRIBUTES_MISSING"
        ,"type": {"kind":"Int32"}
        ,"value": -2146889713
    }
    ,{
         "name": "CRYPT_E_STREAM_MSG_NOT_READY"
        ,"type": {"kind":"Int32"}
        ,"value": -2146889712
    }
    ,{
         "name": "CRYPT_E_STREAM_INSUFFICIENT_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": -2146889711
    }
    ,{
         "name": "CRYPT_I_NEW_PROTECTION_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 593938
    }
    ,{
         "name": "CRYPT_E_BAD_LEN"
        ,"type": {"kind":"Int32"}
        ,"value": -2146885631
    }
    ,{
         "name": "CRYPT_E_BAD_ENCODE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146885630
    }
    ,{
         "name": "CRYPT_E_FILE_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2146885629
    }
    ,{
         "name": "CRYPT_E_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2146885628
    }
    ,{
         "name": "CRYPT_E_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146885627
    }
    ,{
         "name": "CRYPT_E_NO_PROVIDER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146885626
    }
    ,{
         "name": "CRYPT_E_SELF_SIGNED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146885625
    }
    ,{
         "name": "CRYPT_E_DELETED_PREV"
        ,"type": {"kind":"Int32"}
        ,"value": -2146885624
    }
    ,{
         "name": "CRYPT_E_NO_MATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2146885623
    }
    ,{
         "name": "CRYPT_E_UNEXPECTED_MSG_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146885622
    }
    ,{
         "name": "CRYPT_E_NO_KEY_PROPERTY"
        ,"type": {"kind":"Int32"}
        ,"value": -2146885621
    }
    ,{
         "name": "CRYPT_E_NO_DECRYPT_CERT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146885620
    }
    ,{
         "name": "CRYPT_E_BAD_MSG"
        ,"type": {"kind":"Int32"}
        ,"value": -2146885619
    }
    ,{
         "name": "CRYPT_E_NO_SIGNER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146885618
    }
    ,{
         "name": "CRYPT_E_PENDING_CLOSE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146885617
    }
    ,{
         "name": "CRYPT_E_REVOKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146885616
    }
    ,{
         "name": "CRYPT_E_NO_REVOCATION_DLL"
        ,"type": {"kind":"Int32"}
        ,"value": -2146885615
    }
    ,{
         "name": "CRYPT_E_NO_REVOCATION_CHECK"
        ,"type": {"kind":"Int32"}
        ,"value": -2146885614
    }
    ,{
         "name": "CRYPT_E_REVOCATION_OFFLINE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146885613
    }
    ,{
         "name": "CRYPT_E_NOT_IN_REVOCATION_DATABASE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146885612
    }
    ,{
         "name": "CRYPT_E_INVALID_NUMERIC_STRING"
        ,"type": {"kind":"Int32"}
        ,"value": -2146885600
    }
    ,{
         "name": "CRYPT_E_INVALID_PRINTABLE_STRING"
        ,"type": {"kind":"Int32"}
        ,"value": -2146885599
    }
    ,{
         "name": "CRYPT_E_INVALID_IA5_STRING"
        ,"type": {"kind":"Int32"}
        ,"value": -2146885598
    }
    ,{
         "name": "CRYPT_E_INVALID_X500_STRING"
        ,"type": {"kind":"Int32"}
        ,"value": -2146885597
    }
    ,{
         "name": "CRYPT_E_NOT_CHAR_STRING"
        ,"type": {"kind":"Int32"}
        ,"value": -2146885596
    }
    ,{
         "name": "CRYPT_E_FILERESIZED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146885595
    }
    ,{
         "name": "CRYPT_E_SECURITY_SETTINGS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146885594
    }
    ,{
         "name": "CRYPT_E_NO_VERIFY_USAGE_DLL"
        ,"type": {"kind":"Int32"}
        ,"value": -2146885593
    }
    ,{
         "name": "CRYPT_E_NO_VERIFY_USAGE_CHECK"
        ,"type": {"kind":"Int32"}
        ,"value": -2146885592
    }
    ,{
         "name": "CRYPT_E_VERIFY_USAGE_OFFLINE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146885591
    }
    ,{
         "name": "CRYPT_E_NOT_IN_CTL"
        ,"type": {"kind":"Int32"}
        ,"value": -2146885590
    }
    ,{
         "name": "CRYPT_E_NO_TRUSTED_SIGNER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146885589
    }
    ,{
         "name": "CRYPT_E_MISSING_PUBKEY_PARA"
        ,"type": {"kind":"Int32"}
        ,"value": -2146885588
    }
    ,{
         "name": "CRYPT_E_OBJECT_LOCATOR_OBJECT_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2146885587
    }
    ,{
         "name": "CRYPT_E_OSS_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881536
    }
    ,{
         "name": "OSS_MORE_BUF"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881535
    }
    ,{
         "name": "OSS_NEGATIVE_UINTEGER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881534
    }
    ,{
         "name": "OSS_PDU_RANGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881533
    }
    ,{
         "name": "OSS_MORE_INPUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881532
    }
    ,{
         "name": "OSS_DATA_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881531
    }
    ,{
         "name": "OSS_BAD_ARG"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881530
    }
    ,{
         "name": "OSS_BAD_VERSION"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881529
    }
    ,{
         "name": "OSS_OUT_MEMORY"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881528
    }
    ,{
         "name": "OSS_PDU_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881527
    }
    ,{
         "name": "OSS_LIMITED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881526
    }
    ,{
         "name": "OSS_BAD_PTR"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881525
    }
    ,{
         "name": "OSS_BAD_TIME"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881524
    }
    ,{
         "name": "OSS_INDEFINITE_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881523
    }
    ,{
         "name": "OSS_MEM_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881522
    }
    ,{
         "name": "OSS_BAD_TABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881521
    }
    ,{
         "name": "OSS_TOO_LONG"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881520
    }
    ,{
         "name": "OSS_CONSTRAINT_VIOLATED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881519
    }
    ,{
         "name": "OSS_FATAL_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881518
    }
    ,{
         "name": "OSS_ACCESS_SERIALIZATION_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881517
    }
    ,{
         "name": "OSS_NULL_TBL"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881516
    }
    ,{
         "name": "OSS_NULL_FCN"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881515
    }
    ,{
         "name": "OSS_BAD_ENCRULES"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881514
    }
    ,{
         "name": "OSS_UNAVAIL_ENCRULES"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881513
    }
    ,{
         "name": "OSS_CANT_OPEN_TRACE_WINDOW"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881512
    }
    ,{
         "name": "OSS_UNIMPLEMENTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881511
    }
    ,{
         "name": "OSS_OID_DLL_NOT_LINKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881510
    }
    ,{
         "name": "OSS_CANT_OPEN_TRACE_FILE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881509
    }
    ,{
         "name": "OSS_TRACE_FILE_ALREADY_OPEN"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881508
    }
    ,{
         "name": "OSS_TABLE_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881507
    }
    ,{
         "name": "OSS_TYPE_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881506
    }
    ,{
         "name": "OSS_REAL_DLL_NOT_LINKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881505
    }
    ,{
         "name": "OSS_REAL_CODE_NOT_LINKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881504
    }
    ,{
         "name": "OSS_OUT_OF_RANGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881503
    }
    ,{
         "name": "OSS_COPIER_DLL_NOT_LINKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881502
    }
    ,{
         "name": "OSS_CONSTRAINT_DLL_NOT_LINKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881501
    }
    ,{
         "name": "OSS_COMPARATOR_DLL_NOT_LINKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881500
    }
    ,{
         "name": "OSS_COMPARATOR_CODE_NOT_LINKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881499
    }
    ,{
         "name": "OSS_MEM_MGR_DLL_NOT_LINKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881498
    }
    ,{
         "name": "OSS_PDV_DLL_NOT_LINKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881497
    }
    ,{
         "name": "OSS_PDV_CODE_NOT_LINKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881496
    }
    ,{
         "name": "OSS_API_DLL_NOT_LINKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881495
    }
    ,{
         "name": "OSS_BERDER_DLL_NOT_LINKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881494
    }
    ,{
         "name": "OSS_PER_DLL_NOT_LINKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881493
    }
    ,{
         "name": "OSS_OPEN_TYPE_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881492
    }
    ,{
         "name": "OSS_MUTEX_NOT_CREATED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881491
    }
    ,{
         "name": "OSS_CANT_CLOSE_TRACE_FILE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881490
    }
    ,{
         "name": "CRYPT_E_ASN1_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881280
    }
    ,{
         "name": "CRYPT_E_ASN1_INTERNAL"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881279
    }
    ,{
         "name": "CRYPT_E_ASN1_EOD"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881278
    }
    ,{
         "name": "CRYPT_E_ASN1_CORRUPT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881277
    }
    ,{
         "name": "CRYPT_E_ASN1_LARGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881276
    }
    ,{
         "name": "CRYPT_E_ASN1_CONSTRAINT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881275
    }
    ,{
         "name": "CRYPT_E_ASN1_MEMORY"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881274
    }
    ,{
         "name": "CRYPT_E_ASN1_OVERFLOW"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881273
    }
    ,{
         "name": "CRYPT_E_ASN1_BADPDU"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881272
    }
    ,{
         "name": "CRYPT_E_ASN1_BADARGS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881271
    }
    ,{
         "name": "CRYPT_E_ASN1_BADREAL"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881270
    }
    ,{
         "name": "CRYPT_E_ASN1_BADTAG"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881269
    }
    ,{
         "name": "CRYPT_E_ASN1_CHOICE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881268
    }
    ,{
         "name": "CRYPT_E_ASN1_RULE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881267
    }
    ,{
         "name": "CRYPT_E_ASN1_UTF8"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881266
    }
    ,{
         "name": "CRYPT_E_ASN1_PDU_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881229
    }
    ,{
         "name": "CRYPT_E_ASN1_NYI"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881228
    }
    ,{
         "name": "CRYPT_E_ASN1_EXTENDED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881023
    }
    ,{
         "name": "CRYPT_E_ASN1_NOEOD"
        ,"type": {"kind":"Int32"}
        ,"value": -2146881022
    }
    ,{
         "name": "CERTSRV_E_BAD_REQUESTSUBJECT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146877439
    }
    ,{
         "name": "CERTSRV_E_NO_REQUEST"
        ,"type": {"kind":"Int32"}
        ,"value": -2146877438
    }
    ,{
         "name": "CERTSRV_E_BAD_REQUESTSTATUS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146877437
    }
    ,{
         "name": "CERTSRV_E_PROPERTY_EMPTY"
        ,"type": {"kind":"Int32"}
        ,"value": -2146877436
    }
    ,{
         "name": "CERTSRV_E_INVALID_CA_CERTIFICATE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146877435
    }
    ,{
         "name": "CERTSRV_E_SERVER_SUSPENDED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146877434
    }
    ,{
         "name": "CERTSRV_E_ENCODING_LENGTH"
        ,"type": {"kind":"Int32"}
        ,"value": -2146877433
    }
    ,{
         "name": "CERTSRV_E_ROLECONFLICT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146877432
    }
    ,{
         "name": "CERTSRV_E_RESTRICTEDOFFICER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146877431
    }
    ,{
         "name": "CERTSRV_E_KEY_ARCHIVAL_NOT_CONFIGURED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146877430
    }
    ,{
         "name": "CERTSRV_E_NO_VALID_KRA"
        ,"type": {"kind":"Int32"}
        ,"value": -2146877429
    }
    ,{
         "name": "CERTSRV_E_BAD_REQUEST_KEY_ARCHIVAL"
        ,"type": {"kind":"Int32"}
        ,"value": -2146877428
    }
    ,{
         "name": "CERTSRV_E_NO_CAADMIN_DEFINED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146877427
    }
    ,{
         "name": "CERTSRV_E_BAD_RENEWAL_CERT_ATTRIBUTE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146877426
    }
    ,{
         "name": "CERTSRV_E_NO_DB_SESSIONS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146877425
    }
    ,{
         "name": "CERTSRV_E_ALIGNMENT_FAULT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146877424
    }
    ,{
         "name": "CERTSRV_E_ENROLL_DENIED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146877423
    }
    ,{
         "name": "CERTSRV_E_TEMPLATE_DENIED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146877422
    }
    ,{
         "name": "CERTSRV_E_DOWNLEVEL_DC_SSL_OR_UPGRADE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146877421
    }
    ,{
         "name": "CERTSRV_E_ADMIN_DENIED_REQUEST"
        ,"type": {"kind":"Int32"}
        ,"value": -2146877420
    }
    ,{
         "name": "CERTSRV_E_NO_POLICY_SERVER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146877419
    }
    ,{
         "name": "CERTSRV_E_WEAK_SIGNATURE_OR_KEY"
        ,"type": {"kind":"Int32"}
        ,"value": -2146877418
    }
    ,{
         "name": "CERTSRV_E_KEY_ATTESTATION_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146877417
    }
    ,{
         "name": "CERTSRV_E_ENCRYPTION_CERT_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146877416
    }
    ,{
         "name": "CERTSRV_E_UNSUPPORTED_CERT_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146875392
    }
    ,{
         "name": "CERTSRV_E_NO_CERT_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146875391
    }
    ,{
         "name": "CERTSRV_E_TEMPLATE_CONFLICT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146875390
    }
    ,{
         "name": "CERTSRV_E_SUBJECT_ALT_NAME_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146875389
    }
    ,{
         "name": "CERTSRV_E_ARCHIVED_KEY_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146875388
    }
    ,{
         "name": "CERTSRV_E_SMIME_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146875387
    }
    ,{
         "name": "CERTSRV_E_BAD_RENEWAL_SUBJECT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146875386
    }
    ,{
         "name": "CERTSRV_E_BAD_TEMPLATE_VERSION"
        ,"type": {"kind":"Int32"}
        ,"value": -2146875385
    }
    ,{
         "name": "CERTSRV_E_TEMPLATE_POLICY_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146875384
    }
    ,{
         "name": "CERTSRV_E_SIGNATURE_POLICY_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146875383
    }
    ,{
         "name": "CERTSRV_E_SIGNATURE_COUNT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146875382
    }
    ,{
         "name": "CERTSRV_E_SIGNATURE_REJECTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146875381
    }
    ,{
         "name": "CERTSRV_E_ISSUANCE_POLICY_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146875380
    }
    ,{
         "name": "CERTSRV_E_SUBJECT_UPN_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146875379
    }
    ,{
         "name": "CERTSRV_E_SUBJECT_DIRECTORY_GUID_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146875378
    }
    ,{
         "name": "CERTSRV_E_SUBJECT_DNS_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146875377
    }
    ,{
         "name": "CERTSRV_E_ARCHIVED_KEY_UNEXPECTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146875376
    }
    ,{
         "name": "CERTSRV_E_KEY_LENGTH"
        ,"type": {"kind":"Int32"}
        ,"value": -2146875375
    }
    ,{
         "name": "CERTSRV_E_SUBJECT_EMAIL_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146875374
    }
    ,{
         "name": "CERTSRV_E_UNKNOWN_CERT_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146875373
    }
    ,{
         "name": "CERTSRV_E_CERT_TYPE_OVERLAP"
        ,"type": {"kind":"Int32"}
        ,"value": -2146875372
    }
    ,{
         "name": "CERTSRV_E_TOO_MANY_SIGNATURES"
        ,"type": {"kind":"Int32"}
        ,"value": -2146875371
    }
    ,{
         "name": "CERTSRV_E_RENEWAL_BAD_PUBLIC_KEY"
        ,"type": {"kind":"Int32"}
        ,"value": -2146875370
    }
    ,{
         "name": "CERTSRV_E_INVALID_EK"
        ,"type": {"kind":"Int32"}
        ,"value": -2146875369
    }
    ,{
         "name": "CERTSRV_E_INVALID_IDBINDING"
        ,"type": {"kind":"Int32"}
        ,"value": -2146875368
    }
    ,{
         "name": "CERTSRV_E_INVALID_ATTESTATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2146875367
    }
    ,{
         "name": "CERTSRV_E_KEY_ATTESTATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2146875366
    }
    ,{
         "name": "CERTSRV_E_CORRUPT_KEY_ATTESTATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2146875365
    }
    ,{
         "name": "CERTSRV_E_EXPIRED_CHALLENGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146875364
    }
    ,{
         "name": "CERTSRV_E_INVALID_RESPONSE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146875363
    }
    ,{
         "name": "CERTSRV_E_INVALID_REQUESTID"
        ,"type": {"kind":"Int32"}
        ,"value": -2146875362
    }
    ,{
         "name": "CERTSRV_E_REQUEST_PRECERTIFICATE_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2146875361
    }
    ,{
         "name": "CERTSRV_E_PENDING_CLIENT_RESPONSE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146875360
    }
    ,{
         "name": "XENROLL_E_KEY_NOT_EXPORTABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146873344
    }
    ,{
         "name": "XENROLL_E_CANNOT_ADD_ROOT_CERT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146873343
    }
    ,{
         "name": "XENROLL_E_RESPONSE_KA_HASH_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2146873342
    }
    ,{
         "name": "XENROLL_E_RESPONSE_UNEXPECTED_KA_HASH"
        ,"type": {"kind":"Int32"}
        ,"value": -2146873341
    }
    ,{
         "name": "XENROLL_E_RESPONSE_KA_HASH_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2146873340
    }
    ,{
         "name": "XENROLL_E_KEYSPEC_SMIME_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2146873339
    }
    ,{
         "name": "TRUST_E_SYSTEM_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2146869247
    }
    ,{
         "name": "TRUST_E_NO_SIGNER_CERT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146869246
    }
    ,{
         "name": "TRUST_E_COUNTER_SIGNER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146869245
    }
    ,{
         "name": "TRUST_E_CERT_SIGNATURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146869244
    }
    ,{
         "name": "TRUST_E_TIME_STAMP"
        ,"type": {"kind":"Int32"}
        ,"value": -2146869243
    }
    ,{
         "name": "TRUST_E_BAD_DIGEST"
        ,"type": {"kind":"Int32"}
        ,"value": -2146869232
    }
    ,{
         "name": "TRUST_E_MALFORMED_SIGNATURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146869231
    }
    ,{
         "name": "TRUST_E_BASIC_CONSTRAINTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146869223
    }
    ,{
         "name": "TRUST_E_FINANCIAL_CRITERIA"
        ,"type": {"kind":"Int32"}
        ,"value": -2146869218
    }
    ,{
         "name": "MSSIPOTF_E_OUTOFMEMRANGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146865151
    }
    ,{
         "name": "MSSIPOTF_E_CANTGETOBJECT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146865150
    }
    ,{
         "name": "MSSIPOTF_E_NOHEADTABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146865149
    }
    ,{
         "name": "MSSIPOTF_E_BAD_MAGICNUMBER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146865148
    }
    ,{
         "name": "MSSIPOTF_E_BAD_OFFSET_TABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146865147
    }
    ,{
         "name": "MSSIPOTF_E_TABLE_TAGORDER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146865146
    }
    ,{
         "name": "MSSIPOTF_E_TABLE_LONGWORD"
        ,"type": {"kind":"Int32"}
        ,"value": -2146865145
    }
    ,{
         "name": "MSSIPOTF_E_BAD_FIRST_TABLE_PLACEMENT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146865144
    }
    ,{
         "name": "MSSIPOTF_E_TABLES_OVERLAP"
        ,"type": {"kind":"Int32"}
        ,"value": -2146865143
    }
    ,{
         "name": "MSSIPOTF_E_TABLE_PADBYTES"
        ,"type": {"kind":"Int32"}
        ,"value": -2146865142
    }
    ,{
         "name": "MSSIPOTF_E_FILETOOSMALL"
        ,"type": {"kind":"Int32"}
        ,"value": -2146865141
    }
    ,{
         "name": "MSSIPOTF_E_TABLE_CHECKSUM"
        ,"type": {"kind":"Int32"}
        ,"value": -2146865140
    }
    ,{
         "name": "MSSIPOTF_E_FILE_CHECKSUM"
        ,"type": {"kind":"Int32"}
        ,"value": -2146865139
    }
    ,{
         "name": "MSSIPOTF_E_FAILED_POLICY"
        ,"type": {"kind":"Int32"}
        ,"value": -2146865136
    }
    ,{
         "name": "MSSIPOTF_E_FAILED_HINTS_CHECK"
        ,"type": {"kind":"Int32"}
        ,"value": -2146865135
    }
    ,{
         "name": "MSSIPOTF_E_NOT_OPENTYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146865134
    }
    ,{
         "name": "MSSIPOTF_E_FILE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146865133
    }
    ,{
         "name": "MSSIPOTF_E_CRYPT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146865132
    }
    ,{
         "name": "MSSIPOTF_E_BADVERSION"
        ,"type": {"kind":"Int32"}
        ,"value": -2146865131
    }
    ,{
         "name": "MSSIPOTF_E_DSIG_STRUCTURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146865130
    }
    ,{
         "name": "MSSIPOTF_E_PCONST_CHECK"
        ,"type": {"kind":"Int32"}
        ,"value": -2146865129
    }
    ,{
         "name": "MSSIPOTF_E_STRUCTURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146865128
    }
    ,{
         "name": "ERROR_CRED_REQUIRES_CONFIRMATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2146865127
    }
    ,{
         "name": "NTE_OP_OK"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "TRUST_E_PROVIDER_UNKNOWN"
        ,"type": {"kind":"Int32"}
        ,"value": -2146762751
    }
    ,{
         "name": "TRUST_E_ACTION_UNKNOWN"
        ,"type": {"kind":"Int32"}
        ,"value": -2146762750
    }
    ,{
         "name": "TRUST_E_SUBJECT_FORM_UNKNOWN"
        ,"type": {"kind":"Int32"}
        ,"value": -2146762749
    }
    ,{
         "name": "TRUST_E_SUBJECT_NOT_TRUSTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146762748
    }
    ,{
         "name": "DIGSIG_E_ENCODE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146762747
    }
    ,{
         "name": "DIGSIG_E_DECODE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146762746
    }
    ,{
         "name": "DIGSIG_E_EXTENSIBILITY"
        ,"type": {"kind":"Int32"}
        ,"value": -2146762745
    }
    ,{
         "name": "DIGSIG_E_CRYPTO"
        ,"type": {"kind":"Int32"}
        ,"value": -2146762744
    }
    ,{
         "name": "PERSIST_E_SIZEDEFINITE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146762743
    }
    ,{
         "name": "PERSIST_E_SIZEINDEFINITE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146762742
    }
    ,{
         "name": "PERSIST_E_NOTSELFSIZING"
        ,"type": {"kind":"Int32"}
        ,"value": -2146762741
    }
    ,{
         "name": "TRUST_E_NOSIGNATURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146762496
    }
    ,{
         "name": "CERT_E_EXPIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146762495
    }
    ,{
         "name": "CERT_E_VALIDITYPERIODNESTING"
        ,"type": {"kind":"Int32"}
        ,"value": -2146762494
    }
    ,{
         "name": "CERT_E_ROLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146762493
    }
    ,{
         "name": "CERT_E_PATHLENCONST"
        ,"type": {"kind":"Int32"}
        ,"value": -2146762492
    }
    ,{
         "name": "CERT_E_CRITICAL"
        ,"type": {"kind":"Int32"}
        ,"value": -2146762491
    }
    ,{
         "name": "CERT_E_PURPOSE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146762490
    }
    ,{
         "name": "CERT_E_ISSUERCHAINING"
        ,"type": {"kind":"Int32"}
        ,"value": -2146762489
    }
    ,{
         "name": "CERT_E_MALFORMED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146762488
    }
    ,{
         "name": "CERT_E_UNTRUSTEDROOT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146762487
    }
    ,{
         "name": "CERT_E_CHAINING"
        ,"type": {"kind":"Int32"}
        ,"value": -2146762486
    }
    ,{
         "name": "TRUST_E_FAIL"
        ,"type": {"kind":"Int32"}
        ,"value": -2146762485
    }
    ,{
         "name": "CERT_E_REVOKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146762484
    }
    ,{
         "name": "CERT_E_UNTRUSTEDTESTROOT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146762483
    }
    ,{
         "name": "CERT_E_REVOCATION_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146762482
    }
    ,{
         "name": "CERT_E_CN_NO_MATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2146762481
    }
    ,{
         "name": "CERT_E_WRONG_USAGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146762480
    }
    ,{
         "name": "TRUST_E_EXPLICIT_DISTRUST"
        ,"type": {"kind":"Int32"}
        ,"value": -2146762479
    }
    ,{
         "name": "CERT_E_UNTRUSTEDCA"
        ,"type": {"kind":"Int32"}
        ,"value": -2146762478
    }
    ,{
         "name": "CERT_E_INVALID_POLICY"
        ,"type": {"kind":"Int32"}
        ,"value": -2146762477
    }
    ,{
         "name": "CERT_E_INVALID_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": -2146762476
    }
    ,{
         "name": "SPAPI_E_EXPECTED_SECTION_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500608
    }
    ,{
         "name": "SPAPI_E_BAD_SECTION_NAME_LINE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500607
    }
    ,{
         "name": "SPAPI_E_SECTION_NAME_TOO_LONG"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500606
    }
    ,{
         "name": "SPAPI_E_GENERAL_SYNTAX"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500605
    }
    ,{
         "name": "SPAPI_E_WRONG_INF_STYLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500352
    }
    ,{
         "name": "SPAPI_E_SECTION_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500351
    }
    ,{
         "name": "SPAPI_E_LINE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500350
    }
    ,{
         "name": "SPAPI_E_NO_BACKUP"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500349
    }
    ,{
         "name": "SPAPI_E_NO_ASSOCIATED_CLASS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500096
    }
    ,{
         "name": "SPAPI_E_CLASS_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500095
    }
    ,{
         "name": "SPAPI_E_DUPLICATE_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500094
    }
    ,{
         "name": "SPAPI_E_NO_DRIVER_SELECTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500093
    }
    ,{
         "name": "SPAPI_E_KEY_DOES_NOT_EXIST"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500092
    }
    ,{
         "name": "SPAPI_E_INVALID_DEVINST_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500091
    }
    ,{
         "name": "SPAPI_E_INVALID_CLASS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500090
    }
    ,{
         "name": "SPAPI_E_DEVINST_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500089
    }
    ,{
         "name": "SPAPI_E_DEVINFO_NOT_REGISTERED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500088
    }
    ,{
         "name": "SPAPI_E_INVALID_REG_PROPERTY"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500087
    }
    ,{
         "name": "SPAPI_E_NO_INF"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500086
    }
    ,{
         "name": "SPAPI_E_NO_SUCH_DEVINST"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500085
    }
    ,{
         "name": "SPAPI_E_CANT_LOAD_CLASS_ICON"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500084
    }
    ,{
         "name": "SPAPI_E_INVALID_CLASS_INSTALLER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500083
    }
    ,{
         "name": "SPAPI_E_DI_DO_DEFAULT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500082
    }
    ,{
         "name": "SPAPI_E_DI_NOFILECOPY"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500081
    }
    ,{
         "name": "SPAPI_E_INVALID_HWPROFILE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500080
    }
    ,{
         "name": "SPAPI_E_NO_DEVICE_SELECTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500079
    }
    ,{
         "name": "SPAPI_E_DEVINFO_LIST_LOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500078
    }
    ,{
         "name": "SPAPI_E_DEVINFO_DATA_LOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500077
    }
    ,{
         "name": "SPAPI_E_DI_BAD_PATH"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500076
    }
    ,{
         "name": "SPAPI_E_NO_CLASSINSTALL_PARAMS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500075
    }
    ,{
         "name": "SPAPI_E_FILEQUEUE_LOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500074
    }
    ,{
         "name": "SPAPI_E_BAD_SERVICE_INSTALLSECT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500073
    }
    ,{
         "name": "SPAPI_E_NO_CLASS_DRIVER_LIST"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500072
    }
    ,{
         "name": "SPAPI_E_NO_ASSOCIATED_SERVICE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500071
    }
    ,{
         "name": "SPAPI_E_NO_DEFAULT_DEVICE_INTERFACE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500070
    }
    ,{
         "name": "SPAPI_E_DEVICE_INTERFACE_ACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500069
    }
    ,{
         "name": "SPAPI_E_DEVICE_INTERFACE_REMOVED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500068
    }
    ,{
         "name": "SPAPI_E_BAD_INTERFACE_INSTALLSECT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500067
    }
    ,{
         "name": "SPAPI_E_NO_SUCH_INTERFACE_CLASS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500066
    }
    ,{
         "name": "SPAPI_E_INVALID_REFERENCE_STRING"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500065
    }
    ,{
         "name": "SPAPI_E_INVALID_MACHINENAME"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500064
    }
    ,{
         "name": "SPAPI_E_REMOTE_COMM_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500063
    }
    ,{
         "name": "SPAPI_E_MACHINE_UNAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500062
    }
    ,{
         "name": "SPAPI_E_NO_CONFIGMGR_SERVICES"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500061
    }
    ,{
         "name": "SPAPI_E_INVALID_PROPPAGE_PROVIDER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500060
    }
    ,{
         "name": "SPAPI_E_NO_SUCH_DEVICE_INTERFACE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500059
    }
    ,{
         "name": "SPAPI_E_DI_POSTPROCESSING_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500058
    }
    ,{
         "name": "SPAPI_E_INVALID_COINSTALLER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500057
    }
    ,{
         "name": "SPAPI_E_NO_COMPAT_DRIVERS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500056
    }
    ,{
         "name": "SPAPI_E_NO_DEVICE_ICON"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500055
    }
    ,{
         "name": "SPAPI_E_INVALID_INF_LOGCONFIG"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500054
    }
    ,{
         "name": "SPAPI_E_DI_DONT_INSTALL"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500053
    }
    ,{
         "name": "SPAPI_E_INVALID_FILTER_DRIVER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500052
    }
    ,{
         "name": "SPAPI_E_NON_WINDOWS_NT_DRIVER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500051
    }
    ,{
         "name": "SPAPI_E_NON_WINDOWS_DRIVER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500050
    }
    ,{
         "name": "SPAPI_E_NO_CATALOG_FOR_OEM_INF"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500049
    }
    ,{
         "name": "SPAPI_E_DEVINSTALL_QUEUE_NONNATIVE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500048
    }
    ,{
         "name": "SPAPI_E_NOT_DISABLEABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500047
    }
    ,{
         "name": "SPAPI_E_CANT_REMOVE_DEVINST"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500046
    }
    ,{
         "name": "SPAPI_E_INVALID_TARGET"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500045
    }
    ,{
         "name": "SPAPI_E_DRIVER_NONNATIVE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500044
    }
    ,{
         "name": "SPAPI_E_IN_WOW64"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500043
    }
    ,{
         "name": "SPAPI_E_SET_SYSTEM_RESTORE_POINT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500042
    }
    ,{
         "name": "SPAPI_E_INCORRECTLY_COPIED_INF"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500041
    }
    ,{
         "name": "SPAPI_E_SCE_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500040
    }
    ,{
         "name": "SPAPI_E_UNKNOWN_EXCEPTION"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500039
    }
    ,{
         "name": "SPAPI_E_PNP_REGISTRY_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500038
    }
    ,{
         "name": "SPAPI_E_REMOTE_REQUEST_UNSUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500037
    }
    ,{
         "name": "SPAPI_E_NOT_AN_INSTALLED_OEM_INF"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500036
    }
    ,{
         "name": "SPAPI_E_INF_IN_USE_BY_DEVICES"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500035
    }
    ,{
         "name": "SPAPI_E_DI_FUNCTION_OBSOLETE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500034
    }
    ,{
         "name": "SPAPI_E_NO_AUTHENTICODE_CATALOG"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500033
    }
    ,{
         "name": "SPAPI_E_AUTHENTICODE_DISALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500032
    }
    ,{
         "name": "SPAPI_E_AUTHENTICODE_TRUSTED_PUBLISHER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500031
    }
    ,{
         "name": "SPAPI_E_AUTHENTICODE_TRUST_NOT_ESTABLISHED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500030
    }
    ,{
         "name": "SPAPI_E_AUTHENTICODE_PUBLISHER_NOT_TRUSTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500029
    }
    ,{
         "name": "SPAPI_E_SIGNATURE_OSATTRIBUTE_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500028
    }
    ,{
         "name": "SPAPI_E_ONLY_VALIDATE_VIA_AUTHENTICODE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500027
    }
    ,{
         "name": "SPAPI_E_DEVICE_INSTALLER_NOT_READY"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500026
    }
    ,{
         "name": "SPAPI_E_DRIVER_STORE_ADD_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500025
    }
    ,{
         "name": "SPAPI_E_DEVICE_INSTALL_BLOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500024
    }
    ,{
         "name": "SPAPI_E_DRIVER_INSTALL_BLOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500023
    }
    ,{
         "name": "SPAPI_E_WRONG_INF_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500022
    }
    ,{
         "name": "SPAPI_E_FILE_HASH_NOT_IN_CATALOG"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500021
    }
    ,{
         "name": "SPAPI_E_DRIVER_STORE_DELETE_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146500020
    }
    ,{
         "name": "SPAPI_E_UNRECOVERABLE_STACK_OVERFLOW"
        ,"type": {"kind":"Int32"}
        ,"value": -2146499840
    }
    ,{
         "name": "SPAPI_E_ERROR_NOT_INSTALLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146496512
    }
    ,{
         "name": "SCARD_F_INTERNAL_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435071
    }
    ,{
         "name": "SCARD_E_CANCELLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435070
    }
    ,{
         "name": "SCARD_E_INVALID_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435069
    }
    ,{
         "name": "SCARD_E_INVALID_PARAMETER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435068
    }
    ,{
         "name": "SCARD_E_INVALID_TARGET"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435067
    }
    ,{
         "name": "SCARD_E_NO_MEMORY"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435066
    }
    ,{
         "name": "SCARD_F_WAITED_TOO_LONG"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435065
    }
    ,{
         "name": "SCARD_E_INSUFFICIENT_BUFFER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435064
    }
    ,{
         "name": "SCARD_E_UNKNOWN_READER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435063
    }
    ,{
         "name": "SCARD_E_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435062
    }
    ,{
         "name": "SCARD_E_SHARING_VIOLATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435061
    }
    ,{
         "name": "SCARD_E_NO_SMARTCARD"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435060
    }
    ,{
         "name": "SCARD_E_UNKNOWN_CARD"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435059
    }
    ,{
         "name": "SCARD_E_CANT_DISPOSE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435058
    }
    ,{
         "name": "SCARD_E_PROTO_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435057
    }
    ,{
         "name": "SCARD_E_NOT_READY"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435056
    }
    ,{
         "name": "SCARD_E_INVALID_VALUE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435055
    }
    ,{
         "name": "SCARD_E_SYSTEM_CANCELLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435054
    }
    ,{
         "name": "SCARD_F_COMM_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435053
    }
    ,{
         "name": "SCARD_F_UNKNOWN_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435052
    }
    ,{
         "name": "SCARD_E_INVALID_ATR"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435051
    }
    ,{
         "name": "SCARD_E_NOT_TRANSACTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435050
    }
    ,{
         "name": "SCARD_E_READER_UNAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435049
    }
    ,{
         "name": "SCARD_P_SHUTDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435048
    }
    ,{
         "name": "SCARD_E_PCI_TOO_SMALL"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435047
    }
    ,{
         "name": "SCARD_E_READER_UNSUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435046
    }
    ,{
         "name": "SCARD_E_DUPLICATE_READER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435045
    }
    ,{
         "name": "SCARD_E_CARD_UNSUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435044
    }
    ,{
         "name": "SCARD_E_NO_SERVICE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435043
    }
    ,{
         "name": "SCARD_E_SERVICE_STOPPED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435042
    }
    ,{
         "name": "SCARD_E_UNEXPECTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435041
    }
    ,{
         "name": "SCARD_E_ICC_INSTALLATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435040
    }
    ,{
         "name": "SCARD_E_ICC_CREATEORDER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435039
    }
    ,{
         "name": "SCARD_E_UNSUPPORTED_FEATURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435038
    }
    ,{
         "name": "SCARD_E_DIR_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435037
    }
    ,{
         "name": "SCARD_E_FILE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435036
    }
    ,{
         "name": "SCARD_E_NO_DIR"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435035
    }
    ,{
         "name": "SCARD_E_NO_FILE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435034
    }
    ,{
         "name": "SCARD_E_NO_ACCESS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435033
    }
    ,{
         "name": "SCARD_E_WRITE_TOO_MANY"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435032
    }
    ,{
         "name": "SCARD_E_BAD_SEEK"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435031
    }
    ,{
         "name": "SCARD_E_INVALID_CHV"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435030
    }
    ,{
         "name": "SCARD_E_UNKNOWN_RES_MNG"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435029
    }
    ,{
         "name": "SCARD_E_NO_SUCH_CERTIFICATE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435028
    }
    ,{
         "name": "SCARD_E_CERTIFICATE_UNAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435027
    }
    ,{
         "name": "SCARD_E_NO_READERS_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435026
    }
    ,{
         "name": "SCARD_E_COMM_DATA_LOST"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435025
    }
    ,{
         "name": "SCARD_E_NO_KEY_CONTAINER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435024
    }
    ,{
         "name": "SCARD_E_SERVER_TOO_BUSY"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435023
    }
    ,{
         "name": "SCARD_E_PIN_CACHE_EXPIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435022
    }
    ,{
         "name": "SCARD_E_NO_PIN_CACHE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435021
    }
    ,{
         "name": "SCARD_E_READ_ONLY_CARD"
        ,"type": {"kind":"Int32"}
        ,"value": -2146435020
    }
    ,{
         "name": "SCARD_W_UNSUPPORTED_CARD"
        ,"type": {"kind":"Int32"}
        ,"value": -2146434971
    }
    ,{
         "name": "SCARD_W_UNRESPONSIVE_CARD"
        ,"type": {"kind":"Int32"}
        ,"value": -2146434970
    }
    ,{
         "name": "SCARD_W_UNPOWERED_CARD"
        ,"type": {"kind":"Int32"}
        ,"value": -2146434969
    }
    ,{
         "name": "SCARD_W_RESET_CARD"
        ,"type": {"kind":"Int32"}
        ,"value": -2146434968
    }
    ,{
         "name": "SCARD_W_REMOVED_CARD"
        ,"type": {"kind":"Int32"}
        ,"value": -2146434967
    }
    ,{
         "name": "SCARD_W_SECURITY_VIOLATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2146434966
    }
    ,{
         "name": "SCARD_W_WRONG_CHV"
        ,"type": {"kind":"Int32"}
        ,"value": -2146434965
    }
    ,{
         "name": "SCARD_W_CHV_BLOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146434964
    }
    ,{
         "name": "SCARD_W_EOF"
        ,"type": {"kind":"Int32"}
        ,"value": -2146434963
    }
    ,{
         "name": "SCARD_W_CANCELLED_BY_USER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146434962
    }
    ,{
         "name": "SCARD_W_CARD_NOT_AUTHENTICATED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146434961
    }
    ,{
         "name": "SCARD_W_CACHE_ITEM_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2146434960
    }
    ,{
         "name": "SCARD_W_CACHE_ITEM_STALE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146434959
    }
    ,{
         "name": "SCARD_W_CACHE_ITEM_TOO_BIG"
        ,"type": {"kind":"Int32"}
        ,"value": -2146434958
    }
    ,{
         "name": "COMADMIN_E_OBJECTERRORS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368511
    }
    ,{
         "name": "COMADMIN_E_OBJECTINVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368510
    }
    ,{
         "name": "COMADMIN_E_KEYMISSING"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368509
    }
    ,{
         "name": "COMADMIN_E_ALREADYINSTALLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368508
    }
    ,{
         "name": "COMADMIN_E_APP_FILE_WRITEFAIL"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368505
    }
    ,{
         "name": "COMADMIN_E_APP_FILE_READFAIL"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368504
    }
    ,{
         "name": "COMADMIN_E_APP_FILE_VERSION"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368503
    }
    ,{
         "name": "COMADMIN_E_BADPATH"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368502
    }
    ,{
         "name": "COMADMIN_E_APPLICATIONEXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368501
    }
    ,{
         "name": "COMADMIN_E_ROLEEXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368500
    }
    ,{
         "name": "COMADMIN_E_CANTCOPYFILE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368499
    }
    ,{
         "name": "COMADMIN_E_NOUSER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368497
    }
    ,{
         "name": "COMADMIN_E_INVALIDUSERIDS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368496
    }
    ,{
         "name": "COMADMIN_E_NOREGISTRYCLSID"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368495
    }
    ,{
         "name": "COMADMIN_E_BADREGISTRYPROGID"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368494
    }
    ,{
         "name": "COMADMIN_E_AUTHENTICATIONLEVEL"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368493
    }
    ,{
         "name": "COMADMIN_E_USERPASSWDNOTVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368492
    }
    ,{
         "name": "COMADMIN_E_CLSIDORIIDMISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368488
    }
    ,{
         "name": "COMADMIN_E_REMOTEINTERFACE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368487
    }
    ,{
         "name": "COMADMIN_E_DLLREGISTERSERVER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368486
    }
    ,{
         "name": "COMADMIN_E_NOSERVERSHARE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368485
    }
    ,{
         "name": "COMADMIN_E_DLLLOADFAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368483
    }
    ,{
         "name": "COMADMIN_E_BADREGISTRYLIBID"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368482
    }
    ,{
         "name": "COMADMIN_E_APPDIRNOTFOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368481
    }
    ,{
         "name": "COMADMIN_E_REGISTRARFAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368477
    }
    ,{
         "name": "COMADMIN_E_COMPFILE_DOESNOTEXIST"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368476
    }
    ,{
         "name": "COMADMIN_E_COMPFILE_LOADDLLFAIL"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368475
    }
    ,{
         "name": "COMADMIN_E_COMPFILE_GETCLASSOBJ"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368474
    }
    ,{
         "name": "COMADMIN_E_COMPFILE_CLASSNOTAVAIL"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368473
    }
    ,{
         "name": "COMADMIN_E_COMPFILE_BADTLB"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368472
    }
    ,{
         "name": "COMADMIN_E_COMPFILE_NOTINSTALLABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368471
    }
    ,{
         "name": "COMADMIN_E_NOTCHANGEABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368470
    }
    ,{
         "name": "COMADMIN_E_NOTDELETEABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368469
    }
    ,{
         "name": "COMADMIN_E_SESSION"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368468
    }
    ,{
         "name": "COMADMIN_E_COMP_MOVE_LOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368467
    }
    ,{
         "name": "COMADMIN_E_COMP_MOVE_BAD_DEST"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368466
    }
    ,{
         "name": "COMADMIN_E_REGISTERTLB"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368464
    }
    ,{
         "name": "COMADMIN_E_SYSTEMAPP"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368461
    }
    ,{
         "name": "COMADMIN_E_COMPFILE_NOREGISTRAR"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368460
    }
    ,{
         "name": "COMADMIN_E_COREQCOMPINSTALLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368459
    }
    ,{
         "name": "COMADMIN_E_SERVICENOTINSTALLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368458
    }
    ,{
         "name": "COMADMIN_E_PROPERTYSAVEFAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368457
    }
    ,{
         "name": "COMADMIN_E_OBJECTEXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368456
    }
    ,{
         "name": "COMADMIN_E_COMPONENTEXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368455
    }
    ,{
         "name": "COMADMIN_E_REGFILE_CORRUPT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368453
    }
    ,{
         "name": "COMADMIN_E_PROPERTY_OVERFLOW"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368452
    }
    ,{
         "name": "COMADMIN_E_NOTINREGISTRY"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368450
    }
    ,{
         "name": "COMADMIN_E_OBJECTNOTPOOLABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368449
    }
    ,{
         "name": "COMADMIN_E_APPLID_MATCHES_CLSID"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368442
    }
    ,{
         "name": "COMADMIN_E_ROLE_DOES_NOT_EXIST"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368441
    }
    ,{
         "name": "COMADMIN_E_START_APP_NEEDS_COMPONENTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368440
    }
    ,{
         "name": "COMADMIN_E_REQUIRES_DIFFERENT_PLATFORM"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368439
    }
    ,{
         "name": "COMADMIN_E_CAN_NOT_EXPORT_APP_PROXY"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368438
    }
    ,{
         "name": "COMADMIN_E_CAN_NOT_START_APP"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368437
    }
    ,{
         "name": "COMADMIN_E_CAN_NOT_EXPORT_SYS_APP"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368436
    }
    ,{
         "name": "COMADMIN_E_CANT_SUBSCRIBE_TO_COMPONENT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368435
    }
    ,{
         "name": "COMADMIN_E_EVENTCLASS_CANT_BE_SUBSCRIBER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368434
    }
    ,{
         "name": "COMADMIN_E_LIB_APP_PROXY_INCOMPATIBLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368433
    }
    ,{
         "name": "COMADMIN_E_BASE_PARTITION_ONLY"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368432
    }
    ,{
         "name": "COMADMIN_E_START_APP_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368431
    }
    ,{
         "name": "COMADMIN_E_CAT_DUPLICATE_PARTITION_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368425
    }
    ,{
         "name": "COMADMIN_E_CAT_INVALID_PARTITION_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368424
    }
    ,{
         "name": "COMADMIN_E_CAT_PARTITION_IN_USE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368423
    }
    ,{
         "name": "COMADMIN_E_FILE_PARTITION_DUPLICATE_FILES"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368422
    }
    ,{
         "name": "COMADMIN_E_CAT_IMPORTED_COMPONENTS_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368421
    }
    ,{
         "name": "COMADMIN_E_AMBIGUOUS_APPLICATION_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368420
    }
    ,{
         "name": "COMADMIN_E_AMBIGUOUS_PARTITION_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368419
    }
    ,{
         "name": "COMADMIN_E_REGDB_NOTINITIALIZED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368398
    }
    ,{
         "name": "COMADMIN_E_REGDB_NOTOPEN"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368397
    }
    ,{
         "name": "COMADMIN_E_REGDB_SYSTEMERR"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368396
    }
    ,{
         "name": "COMADMIN_E_REGDB_ALREADYRUNNING"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368395
    }
    ,{
         "name": "COMADMIN_E_MIG_VERSIONNOTSUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368384
    }
    ,{
         "name": "COMADMIN_E_MIG_SCHEMANOTFOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368383
    }
    ,{
         "name": "COMADMIN_E_CAT_BITNESSMISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368382
    }
    ,{
         "name": "COMADMIN_E_CAT_UNACCEPTABLEBITNESS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368381
    }
    ,{
         "name": "COMADMIN_E_CAT_WRONGAPPBITNESS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368380
    }
    ,{
         "name": "COMADMIN_E_CAT_PAUSE_RESUME_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368379
    }
    ,{
         "name": "COMADMIN_E_CAT_SERVERFAULT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368378
    }
    ,{
         "name": "COMQC_E_APPLICATION_NOT_QUEUED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146368000
    }
    ,{
         "name": "COMQC_E_NO_QUEUEABLE_INTERFACES"
        ,"type": {"kind":"Int32"}
        ,"value": -2146367999
    }
    ,{
         "name": "COMQC_E_QUEUING_SERVICE_NOT_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146367998
    }
    ,{
         "name": "COMQC_E_NO_IPERSISTSTREAM"
        ,"type": {"kind":"Int32"}
        ,"value": -2146367997
    }
    ,{
         "name": "COMQC_E_BAD_MESSAGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146367996
    }
    ,{
         "name": "COMQC_E_UNAUTHENTICATED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146367995
    }
    ,{
         "name": "COMQC_E_UNTRUSTED_ENQUEUER"
        ,"type": {"kind":"Int32"}
        ,"value": -2146367994
    }
    ,{
         "name": "MSDTC_E_DUPLICATE_RESOURCE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146367743
    }
    ,{
         "name": "COMADMIN_E_OBJECT_PARENT_MISSING"
        ,"type": {"kind":"Int32"}
        ,"value": -2146367480
    }
    ,{
         "name": "COMADMIN_E_OBJECT_DOES_NOT_EXIST"
        ,"type": {"kind":"Int32"}
        ,"value": -2146367479
    }
    ,{
         "name": "COMADMIN_E_APP_NOT_RUNNING"
        ,"type": {"kind":"Int32"}
        ,"value": -2146367478
    }
    ,{
         "name": "COMADMIN_E_INVALID_PARTITION"
        ,"type": {"kind":"Int32"}
        ,"value": -2146367477
    }
    ,{
         "name": "COMADMIN_E_SVCAPP_NOT_POOLABLE_OR_RECYCLABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146367475
    }
    ,{
         "name": "COMADMIN_E_USER_IN_SET"
        ,"type": {"kind":"Int32"}
        ,"value": -2146367474
    }
    ,{
         "name": "COMADMIN_E_CANTRECYCLELIBRARYAPPS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146367473
    }
    ,{
         "name": "COMADMIN_E_CANTRECYCLESERVICEAPPS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146367471
    }
    ,{
         "name": "COMADMIN_E_PROCESSALREADYRECYCLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146367470
    }
    ,{
         "name": "COMADMIN_E_PAUSEDPROCESSMAYNOTBERECYCLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146367469
    }
    ,{
         "name": "COMADMIN_E_CANTMAKEINPROCSERVICE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146367468
    }
    ,{
         "name": "COMADMIN_E_PROGIDINUSEBYCLSID"
        ,"type": {"kind":"Int32"}
        ,"value": -2146367467
    }
    ,{
         "name": "COMADMIN_E_DEFAULT_PARTITION_NOT_IN_SET"
        ,"type": {"kind":"Int32"}
        ,"value": -2146367466
    }
    ,{
         "name": "COMADMIN_E_RECYCLEDPROCESSMAYNOTBEPAUSED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146367465
    }
    ,{
         "name": "COMADMIN_E_PARTITION_ACCESSDENIED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146367464
    }
    ,{
         "name": "COMADMIN_E_PARTITION_MSI_ONLY"
        ,"type": {"kind":"Int32"}
        ,"value": -2146367463
    }
    ,{
         "name": "COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_1_0_FORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146367462
    }
    ,{
         "name": "COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_NONBASE_PARTITIONS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146367461
    }
    ,{
         "name": "COMADMIN_E_COMP_MOVE_SOURCE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146367460
    }
    ,{
         "name": "COMADMIN_E_COMP_MOVE_DEST"
        ,"type": {"kind":"Int32"}
        ,"value": -2146367459
    }
    ,{
         "name": "COMADMIN_E_COMP_MOVE_PRIVATE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146367458
    }
    ,{
         "name": "COMADMIN_E_BASEPARTITION_REQUIRED_IN_SET"
        ,"type": {"kind":"Int32"}
        ,"value": -2146367457
    }
    ,{
         "name": "COMADMIN_E_CANNOT_ALIAS_EVENTCLASS"
        ,"type": {"kind":"Int32"}
        ,"value": -2146367456
    }
    ,{
         "name": "COMADMIN_E_PRIVATE_ACCESSDENIED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146367455
    }
    ,{
         "name": "COMADMIN_E_SAFERINVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2146367454
    }
    ,{
         "name": "COMADMIN_E_REGISTRY_ACCESSDENIED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146367453
    }
    ,{
         "name": "COMADMIN_E_PARTITIONS_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146367452
    }
    ,{
         "name": "WER_S_REPORT_DEBUG"
        ,"type": {"kind":"Int32"}
        ,"value": 1769472
    }
    ,{
         "name": "WER_S_REPORT_UPLOADED"
        ,"type": {"kind":"Int32"}
        ,"value": 1769473
    }
    ,{
         "name": "WER_S_REPORT_QUEUED"
        ,"type": {"kind":"Int32"}
        ,"value": 1769474
    }
    ,{
         "name": "WER_S_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": 1769475
    }
    ,{
         "name": "WER_S_SUSPENDED_UPLOAD"
        ,"type": {"kind":"Int32"}
        ,"value": 1769476
    }
    ,{
         "name": "WER_S_DISABLED_QUEUE"
        ,"type": {"kind":"Int32"}
        ,"value": 1769477
    }
    ,{
         "name": "WER_S_DISABLED_ARCHIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 1769478
    }
    ,{
         "name": "WER_S_REPORT_ASYNC"
        ,"type": {"kind":"Int32"}
        ,"value": 1769479
    }
    ,{
         "name": "WER_S_IGNORE_ASSERT_INSTANCE"
        ,"type": {"kind":"Int32"}
        ,"value": 1769480
    }
    ,{
         "name": "WER_S_IGNORE_ALL_ASSERTS"
        ,"type": {"kind":"Int32"}
        ,"value": 1769481
    }
    ,{
         "name": "WER_S_ASSERT_CONTINUE"
        ,"type": {"kind":"Int32"}
        ,"value": 1769482
    }
    ,{
         "name": "WER_S_THROTTLED"
        ,"type": {"kind":"Int32"}
        ,"value": 1769483
    }
    ,{
         "name": "WER_S_REPORT_UPLOADED_CAB"
        ,"type": {"kind":"Int32"}
        ,"value": 1769484
    }
    ,{
         "name": "WER_E_CRASH_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2145681408
    }
    ,{
         "name": "WER_E_CANCELED"
        ,"type": {"kind":"Int32"}
        ,"value": -2145681407
    }
    ,{
         "name": "WER_E_NETWORK_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2145681406
    }
    ,{
         "name": "WER_E_NOT_INITIALIZED"
        ,"type": {"kind":"Int32"}
        ,"value": -2145681405
    }
    ,{
         "name": "WER_E_ALREADY_REPORTING"
        ,"type": {"kind":"Int32"}
        ,"value": -2145681404
    }
    ,{
         "name": "WER_E_DUMP_THROTTLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2145681403
    }
    ,{
         "name": "WER_E_INSUFFICIENT_CONSENT"
        ,"type": {"kind":"Int32"}
        ,"value": -2145681402
    }
    ,{
         "name": "WER_E_TOO_HEAVY"
        ,"type": {"kind":"Int32"}
        ,"value": -2145681401
    }
    ,{
         "name": "ERROR_FLT_IO_COMPLETE"
        ,"type": {"kind":"Int32"}
        ,"value": 2031617
    }
    ,{
         "name": "ERROR_FLT_NO_HANDLER_DEFINED"
        ,"type": {"kind":"Int32"}
        ,"value": -2145452031
    }
    ,{
         "name": "ERROR_FLT_CONTEXT_ALREADY_DEFINED"
        ,"type": {"kind":"Int32"}
        ,"value": -2145452030
    }
    ,{
         "name": "ERROR_FLT_INVALID_ASYNCHRONOUS_REQUEST"
        ,"type": {"kind":"Int32"}
        ,"value": -2145452029
    }
    ,{
         "name": "ERROR_FLT_DISALLOW_FAST_IO"
        ,"type": {"kind":"Int32"}
        ,"value": -2145452028
    }
    ,{
         "name": "ERROR_FLT_INVALID_NAME_REQUEST"
        ,"type": {"kind":"Int32"}
        ,"value": -2145452027
    }
    ,{
         "name": "ERROR_FLT_NOT_SAFE_TO_POST_OPERATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2145452026
    }
    ,{
         "name": "ERROR_FLT_NOT_INITIALIZED"
        ,"type": {"kind":"Int32"}
        ,"value": -2145452025
    }
    ,{
         "name": "ERROR_FLT_FILTER_NOT_READY"
        ,"type": {"kind":"Int32"}
        ,"value": -2145452024
    }
    ,{
         "name": "ERROR_FLT_POST_OPERATION_CLEANUP"
        ,"type": {"kind":"Int32"}
        ,"value": -2145452023
    }
    ,{
         "name": "ERROR_FLT_INTERNAL_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2145452022
    }
    ,{
         "name": "ERROR_FLT_DELETING_OBJECT"
        ,"type": {"kind":"Int32"}
        ,"value": -2145452021
    }
    ,{
         "name": "ERROR_FLT_MUST_BE_NONPAGED_POOL"
        ,"type": {"kind":"Int32"}
        ,"value": -2145452020
    }
    ,{
         "name": "ERROR_FLT_DUPLICATE_ENTRY"
        ,"type": {"kind":"Int32"}
        ,"value": -2145452019
    }
    ,{
         "name": "ERROR_FLT_CBDQ_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2145452018
    }
    ,{
         "name": "ERROR_FLT_DO_NOT_ATTACH"
        ,"type": {"kind":"Int32"}
        ,"value": -2145452017
    }
    ,{
         "name": "ERROR_FLT_DO_NOT_DETACH"
        ,"type": {"kind":"Int32"}
        ,"value": -2145452016
    }
    ,{
         "name": "ERROR_FLT_INSTANCE_ALTITUDE_COLLISION"
        ,"type": {"kind":"Int32"}
        ,"value": -2145452015
    }
    ,{
         "name": "ERROR_FLT_INSTANCE_NAME_COLLISION"
        ,"type": {"kind":"Int32"}
        ,"value": -2145452014
    }
    ,{
         "name": "ERROR_FLT_FILTER_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2145452013
    }
    ,{
         "name": "ERROR_FLT_VOLUME_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2145452012
    }
    ,{
         "name": "ERROR_FLT_INSTANCE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2145452011
    }
    ,{
         "name": "ERROR_FLT_CONTEXT_ALLOCATION_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2145452010
    }
    ,{
         "name": "ERROR_FLT_INVALID_CONTEXT_REGISTRATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2145452009
    }
    ,{
         "name": "ERROR_FLT_NAME_CACHE_MISS"
        ,"type": {"kind":"Int32"}
        ,"value": -2145452008
    }
    ,{
         "name": "ERROR_FLT_NO_DEVICE_OBJECT"
        ,"type": {"kind":"Int32"}
        ,"value": -2145452007
    }
    ,{
         "name": "ERROR_FLT_VOLUME_ALREADY_MOUNTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2145452006
    }
    ,{
         "name": "ERROR_FLT_ALREADY_ENLISTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2145452005
    }
    ,{
         "name": "ERROR_FLT_CONTEXT_ALREADY_LINKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2145452004
    }
    ,{
         "name": "ERROR_FLT_NO_WAITER_FOR_REPLY"
        ,"type": {"kind":"Int32"}
        ,"value": -2145452000
    }
    ,{
         "name": "ERROR_FLT_REGISTRATION_BUSY"
        ,"type": {"kind":"Int32"}
        ,"value": -2145451997
    }
    ,{
         "name": "ERROR_HUNG_DISPLAY_DRIVER_THREAD"
        ,"type": {"kind":"Int32"}
        ,"value": -2144993279
    }
    ,{
         "name": "DWM_E_COMPOSITIONDISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144980991
    }
    ,{
         "name": "DWM_E_REMOTING_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144980990
    }
    ,{
         "name": "DWM_E_NO_REDIRECTION_SURFACE_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144980989
    }
    ,{
         "name": "DWM_E_NOT_QUEUING_PRESENTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144980988
    }
    ,{
         "name": "DWM_E_ADAPTER_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2144980987
    }
    ,{
         "name": "DWM_S_GDI_REDIRECTION_SURFACE"
        ,"type": {"kind":"Int32"}
        ,"value": 2502661
    }
    ,{
         "name": "DWM_E_TEXTURE_TOO_LARGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144980985
    }
    ,{
         "name": "DWM_S_GDI_REDIRECTION_SURFACE_BLT_VIA_GDI"
        ,"type": {"kind":"Int32"}
        ,"value": 2502664
    }
    ,{
         "name": "ERROR_MONITOR_NO_DESCRIPTOR"
        ,"type": {"kind":"Int32"}
        ,"value": 2494465
    }
    ,{
         "name": "ERROR_MONITOR_UNKNOWN_DESCRIPTOR_FORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": 2494466
    }
    ,{
         "name": "ERROR_MONITOR_INVALID_DESCRIPTOR_CHECKSUM"
        ,"type": {"kind":"Int32"}
        ,"value": -1071247357
    }
    ,{
         "name": "ERROR_MONITOR_INVALID_STANDARD_TIMING_BLOCK"
        ,"type": {"kind":"Int32"}
        ,"value": -1071247356
    }
    ,{
         "name": "ERROR_MONITOR_WMI_DATABLOCK_REGISTRATION_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071247355
    }
    ,{
         "name": "ERROR_MONITOR_INVALID_SERIAL_NUMBER_MONDSC_BLOCK"
        ,"type": {"kind":"Int32"}
        ,"value": -1071247354
    }
    ,{
         "name": "ERROR_MONITOR_INVALID_USER_FRIENDLY_MONDSC_BLOCK"
        ,"type": {"kind":"Int32"}
        ,"value": -1071247353
    }
    ,{
         "name": "ERROR_MONITOR_NO_MORE_DESCRIPTOR_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": -1071247352
    }
    ,{
         "name": "ERROR_MONITOR_INVALID_DETAILED_TIMING_BLOCK"
        ,"type": {"kind":"Int32"}
        ,"value": -1071247351
    }
    ,{
         "name": "ERROR_MONITOR_INVALID_MANUFACTURE_DATE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071247350
    }
    ,{
         "name": "ERROR_GRAPHICS_NOT_EXCLUSIVE_MODE_OWNER"
        ,"type": {"kind":"Int32"}
        ,"value": -1071243264
    }
    ,{
         "name": "ERROR_GRAPHICS_INSUFFICIENT_DMA_BUFFER"
        ,"type": {"kind":"Int32"}
        ,"value": -1071243263
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_DISPLAY_ADAPTER"
        ,"type": {"kind":"Int32"}
        ,"value": -1071243262
    }
    ,{
         "name": "ERROR_GRAPHICS_ADAPTER_WAS_RESET"
        ,"type": {"kind":"Int32"}
        ,"value": -1071243261
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_DRIVER_MODEL"
        ,"type": {"kind":"Int32"}
        ,"value": -1071243260
    }
    ,{
         "name": "ERROR_GRAPHICS_PRESENT_MODE_CHANGED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071243259
    }
    ,{
         "name": "ERROR_GRAPHICS_PRESENT_OCCLUDED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071243258
    }
    ,{
         "name": "ERROR_GRAPHICS_PRESENT_DENIED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071243257
    }
    ,{
         "name": "ERROR_GRAPHICS_CANNOTCOLORCONVERT"
        ,"type": {"kind":"Int32"}
        ,"value": -1071243256
    }
    ,{
         "name": "ERROR_GRAPHICS_DRIVER_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -1071243255
    }
    ,{
         "name": "ERROR_GRAPHICS_PARTIAL_DATA_POPULATED"
        ,"type": {"kind":"Int32"}
        ,"value": 1076240394
    }
    ,{
         "name": "ERROR_GRAPHICS_PRESENT_REDIRECTION_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071243253
    }
    ,{
         "name": "ERROR_GRAPHICS_PRESENT_UNOCCLUDED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071243252
    }
    ,{
         "name": "ERROR_GRAPHICS_WINDOWDC_NOT_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071243251
    }
    ,{
         "name": "ERROR_GRAPHICS_WINDOWLESS_PRESENT_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071243250
    }
    ,{
         "name": "ERROR_GRAPHICS_PRESENT_INVALID_WINDOW"
        ,"type": {"kind":"Int32"}
        ,"value": -1071243249
    }
    ,{
         "name": "ERROR_GRAPHICS_PRESENT_BUFFER_NOT_BOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -1071243248
    }
    ,{
         "name": "ERROR_GRAPHICS_VAIL_STATE_CHANGED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071243247
    }
    ,{
         "name": "ERROR_GRAPHICS_INDIRECT_DISPLAY_ABANDON_SWAPCHAIN"
        ,"type": {"kind":"Int32"}
        ,"value": -1071243246
    }
    ,{
         "name": "ERROR_GRAPHICS_INDIRECT_DISPLAY_DEVICE_STOPPED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071243245
    }
    ,{
         "name": "ERROR_GRAPHICS_VAIL_FAILED_TO_SEND_CREATE_SUPERWETINK_MESSAGE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071243244
    }
    ,{
         "name": "ERROR_GRAPHICS_VAIL_FAILED_TO_SEND_DESTROY_SUPERWETINK_MESSAGE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071243243
    }
    ,{
         "name": "ERROR_GRAPHICS_NO_VIDEO_MEMORY"
        ,"type": {"kind":"Int32"}
        ,"value": -1071243008
    }
    ,{
         "name": "ERROR_GRAPHICS_CANT_LOCK_MEMORY"
        ,"type": {"kind":"Int32"}
        ,"value": -1071243007
    }
    ,{
         "name": "ERROR_GRAPHICS_ALLOCATION_BUSY"
        ,"type": {"kind":"Int32"}
        ,"value": -1071243006
    }
    ,{
         "name": "ERROR_GRAPHICS_TOO_MANY_REFERENCES"
        ,"type": {"kind":"Int32"}
        ,"value": -1071243005
    }
    ,{
         "name": "ERROR_GRAPHICS_TRY_AGAIN_LATER"
        ,"type": {"kind":"Int32"}
        ,"value": -1071243004
    }
    ,{
         "name": "ERROR_GRAPHICS_TRY_AGAIN_NOW"
        ,"type": {"kind":"Int32"}
        ,"value": -1071243003
    }
    ,{
         "name": "ERROR_GRAPHICS_ALLOCATION_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -1071243002
    }
    ,{
         "name": "ERROR_GRAPHICS_UNSWIZZLING_APERTURE_UNAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071243001
    }
    ,{
         "name": "ERROR_GRAPHICS_UNSWIZZLING_APERTURE_UNSUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071243000
    }
    ,{
         "name": "ERROR_GRAPHICS_CANT_EVICT_PINNED_ALLOCATION"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242999
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_ALLOCATION_USAGE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242992
    }
    ,{
         "name": "ERROR_GRAPHICS_CANT_RENDER_LOCKED_ALLOCATION"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242991
    }
    ,{
         "name": "ERROR_GRAPHICS_ALLOCATION_CLOSED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242990
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_ALLOCATION_INSTANCE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242989
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_ALLOCATION_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242988
    }
    ,{
         "name": "ERROR_GRAPHICS_WRONG_ALLOCATION_DEVICE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242987
    }
    ,{
         "name": "ERROR_GRAPHICS_ALLOCATION_CONTENT_LOST"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242986
    }
    ,{
         "name": "ERROR_GRAPHICS_GPU_EXCEPTION_ON_DEVICE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242752
    }
    ,{
         "name": "ERROR_GRAPHICS_SKIP_ALLOCATION_PREPARATION"
        ,"type": {"kind":"Int32"}
        ,"value": 1076240897
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_VIDPN_TOPOLOGY"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242496
    }
    ,{
         "name": "ERROR_GRAPHICS_VIDPN_TOPOLOGY_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242495
    }
    ,{
         "name": "ERROR_GRAPHICS_VIDPN_TOPOLOGY_CURRENTLY_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242494
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_VIDPN"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242493
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242492
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242491
    }
    ,{
         "name": "ERROR_GRAPHICS_VIDPN_MODALITY_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242490
    }
    ,{
         "name": "ERROR_GRAPHICS_MODE_NOT_PINNED"
        ,"type": {"kind":"Int32"}
        ,"value": 2499335
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_VIDPN_SOURCEMODESET"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242488
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_VIDPN_TARGETMODESET"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242487
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_FREQUENCY"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242486
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_ACTIVE_REGION"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242485
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_TOTAL_REGION"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242484
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE_MODE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242480
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET_MODE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242479
    }
    ,{
         "name": "ERROR_GRAPHICS_PINNED_MODE_MUST_REMAIN_IN_SET"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242478
    }
    ,{
         "name": "ERROR_GRAPHICS_PATH_ALREADY_IN_TOPOLOGY"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242477
    }
    ,{
         "name": "ERROR_GRAPHICS_MODE_ALREADY_IN_MODESET"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242476
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_VIDEOPRESENTSOURCESET"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242475
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_VIDEOPRESENTTARGETSET"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242474
    }
    ,{
         "name": "ERROR_GRAPHICS_SOURCE_ALREADY_IN_SET"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242473
    }
    ,{
         "name": "ERROR_GRAPHICS_TARGET_ALREADY_IN_SET"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242472
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_VIDPN_PRESENT_PATH"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242471
    }
    ,{
         "name": "ERROR_GRAPHICS_NO_RECOMMENDED_VIDPN_TOPOLOGY"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242470
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGESET"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242469
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242468
    }
    ,{
         "name": "ERROR_GRAPHICS_FREQUENCYRANGE_NOT_IN_SET"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242467
    }
    ,{
         "name": "ERROR_GRAPHICS_NO_PREFERRED_MODE"
        ,"type": {"kind":"Int32"}
        ,"value": 2499358
    }
    ,{
         "name": "ERROR_GRAPHICS_FREQUENCYRANGE_ALREADY_IN_SET"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242465
    }
    ,{
         "name": "ERROR_GRAPHICS_STALE_MODESET"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242464
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_MONITOR_SOURCEMODESET"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242463
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_MONITOR_SOURCE_MODE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242462
    }
    ,{
         "name": "ERROR_GRAPHICS_NO_RECOMMENDED_FUNCTIONAL_VIDPN"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242461
    }
    ,{
         "name": "ERROR_GRAPHICS_MODE_ID_MUST_BE_UNIQUE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242460
    }
    ,{
         "name": "ERROR_GRAPHICS_EMPTY_ADAPTER_MONITOR_MODE_SUPPORT_INTERSECTION"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242459
    }
    ,{
         "name": "ERROR_GRAPHICS_VIDEO_PRESENT_TARGETS_LESS_THAN_SOURCES"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242458
    }
    ,{
         "name": "ERROR_GRAPHICS_PATH_NOT_IN_TOPOLOGY"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242457
    }
    ,{
         "name": "ERROR_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_SOURCE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242456
    }
    ,{
         "name": "ERROR_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_TARGET"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242455
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_MONITORDESCRIPTORSET"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242454
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_MONITORDESCRIPTOR"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242453
    }
    ,{
         "name": "ERROR_GRAPHICS_MONITORDESCRIPTOR_NOT_IN_SET"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242452
    }
    ,{
         "name": "ERROR_GRAPHICS_MONITORDESCRIPTOR_ALREADY_IN_SET"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242451
    }
    ,{
         "name": "ERROR_GRAPHICS_MONITORDESCRIPTOR_ID_MUST_BE_UNIQUE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242450
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_VIDPN_TARGET_SUBSET_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242449
    }
    ,{
         "name": "ERROR_GRAPHICS_RESOURCES_NOT_RELATED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242448
    }
    ,{
         "name": "ERROR_GRAPHICS_SOURCE_ID_MUST_BE_UNIQUE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242447
    }
    ,{
         "name": "ERROR_GRAPHICS_TARGET_ID_MUST_BE_UNIQUE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242446
    }
    ,{
         "name": "ERROR_GRAPHICS_NO_AVAILABLE_VIDPN_TARGET"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242445
    }
    ,{
         "name": "ERROR_GRAPHICS_MONITOR_COULD_NOT_BE_ASSOCIATED_WITH_ADAPTER"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242444
    }
    ,{
         "name": "ERROR_GRAPHICS_NO_VIDPNMGR"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242443
    }
    ,{
         "name": "ERROR_GRAPHICS_NO_ACTIVE_VIDPN"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242442
    }
    ,{
         "name": "ERROR_GRAPHICS_STALE_VIDPN_TOPOLOGY"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242441
    }
    ,{
         "name": "ERROR_GRAPHICS_MONITOR_NOT_CONNECTED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242440
    }
    ,{
         "name": "ERROR_GRAPHICS_SOURCE_NOT_IN_TOPOLOGY"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242439
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_PRIMARYSURFACE_SIZE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242438
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_VISIBLEREGION_SIZE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242437
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_STRIDE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242436
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_PIXELFORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242435
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_COLORBASIS"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242434
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_PIXELVALUEACCESSMODE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242433
    }
    ,{
         "name": "ERROR_GRAPHICS_TARGET_NOT_IN_TOPOLOGY"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242432
    }
    ,{
         "name": "ERROR_GRAPHICS_NO_DISPLAY_MODE_MANAGEMENT_SUPPORT"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242431
    }
    ,{
         "name": "ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242430
    }
    ,{
         "name": "ERROR_GRAPHICS_CANT_ACCESS_ACTIVE_VIDPN"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242429
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_PATH_IMPORTANCE_ORDINAL"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242428
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_PATH_CONTENT_GEOMETRY_TRANSFORMATION"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242427
    }
    ,{
         "name": "ERROR_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242426
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_GAMMA_RAMP"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242425
    }
    ,{
         "name": "ERROR_GRAPHICS_GAMMA_RAMP_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242424
    }
    ,{
         "name": "ERROR_GRAPHICS_MULTISAMPLING_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242423
    }
    ,{
         "name": "ERROR_GRAPHICS_MODE_NOT_IN_MODESET"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242422
    }
    ,{
         "name": "ERROR_GRAPHICS_DATASET_IS_EMPTY"
        ,"type": {"kind":"Int32"}
        ,"value": 2499403
    }
    ,{
         "name": "ERROR_GRAPHICS_NO_MORE_ELEMENTS_IN_DATASET"
        ,"type": {"kind":"Int32"}
        ,"value": 2499404
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_VIDPN_TOPOLOGY_RECOMMENDATION_REASON"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242419
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_PATH_CONTENT_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242418
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_COPYPROTECTION_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242417
    }
    ,{
         "name": "ERROR_GRAPHICS_UNASSIGNED_MODESET_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242416
    }
    ,{
         "name": "ERROR_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_PINNED"
        ,"type": {"kind":"Int32"}
        ,"value": 2499409
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_SCANLINE_ORDERING"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242414
    }
    ,{
         "name": "ERROR_GRAPHICS_TOPOLOGY_CHANGES_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242413
    }
    ,{
         "name": "ERROR_GRAPHICS_NO_AVAILABLE_IMPORTANCE_ORDINALS"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242412
    }
    ,{
         "name": "ERROR_GRAPHICS_INCOMPATIBLE_PRIVATE_FORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242411
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_MODE_PRUNING_ALGORITHM"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242410
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_MONITOR_CAPABILITY_ORIGIN"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242409
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE_CONSTRAINT"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242408
    }
    ,{
         "name": "ERROR_GRAPHICS_MAX_NUM_PATHS_REACHED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242407
    }
    ,{
         "name": "ERROR_GRAPHICS_CANCEL_VIDPN_TOPOLOGY_AUGMENTATION"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242406
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_CLIENT_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242405
    }
    ,{
         "name": "ERROR_GRAPHICS_CLIENTVIDPN_NOT_SET"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242404
    }
    ,{
         "name": "ERROR_GRAPHICS_SPECIFIED_CHILD_ALREADY_CONNECTED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242240
    }
    ,{
         "name": "ERROR_GRAPHICS_CHILD_DESCRIPTOR_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242239
    }
    ,{
         "name": "ERROR_GRAPHICS_UNKNOWN_CHILD_STATUS"
        ,"type": {"kind":"Int32"}
        ,"value": 1076241455
    }
    ,{
         "name": "ERROR_GRAPHICS_NOT_A_LINKED_ADAPTER"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242192
    }
    ,{
         "name": "ERROR_GRAPHICS_LEADLINK_NOT_ENUMERATED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242191
    }
    ,{
         "name": "ERROR_GRAPHICS_CHAINLINKS_NOT_ENUMERATED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242190
    }
    ,{
         "name": "ERROR_GRAPHICS_ADAPTER_CHAIN_NOT_READY"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242189
    }
    ,{
         "name": "ERROR_GRAPHICS_CHAINLINKS_NOT_STARTED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242188
    }
    ,{
         "name": "ERROR_GRAPHICS_CHAINLINKS_NOT_POWERED_ON"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242187
    }
    ,{
         "name": "ERROR_GRAPHICS_INCONSISTENT_DEVICE_LINK_STATE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242186
    }
    ,{
         "name": "ERROR_GRAPHICS_LEADLINK_START_DEFERRED"
        ,"type": {"kind":"Int32"}
        ,"value": 1076241463
    }
    ,{
         "name": "ERROR_GRAPHICS_NOT_POST_DEVICE_DRIVER"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242184
    }
    ,{
         "name": "ERROR_GRAPHICS_POLLING_TOO_FREQUENTLY"
        ,"type": {"kind":"Int32"}
        ,"value": 1076241465
    }
    ,{
         "name": "ERROR_GRAPHICS_START_DEFERRED"
        ,"type": {"kind":"Int32"}
        ,"value": 1076241466
    }
    ,{
         "name": "ERROR_GRAPHICS_ADAPTER_ACCESS_NOT_EXCLUDED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071242181
    }
    ,{
         "name": "ERROR_GRAPHICS_DEPENDABLE_CHILD_STATUS"
        ,"type": {"kind":"Int32"}
        ,"value": 1076241468
    }
    ,{
         "name": "ERROR_GRAPHICS_OPM_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241984
    }
    ,{
         "name": "ERROR_GRAPHICS_COPP_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241983
    }
    ,{
         "name": "ERROR_GRAPHICS_UAB_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241982
    }
    ,{
         "name": "ERROR_GRAPHICS_OPM_INVALID_ENCRYPTED_PARAMETERS"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241981
    }
    ,{
         "name": "ERROR_GRAPHICS_OPM_NO_VIDEO_OUTPUTS_EXIST"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241979
    }
    ,{
         "name": "ERROR_GRAPHICS_OPM_INTERNAL_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241973
    }
    ,{
         "name": "ERROR_GRAPHICS_OPM_INVALID_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241972
    }
    ,{
         "name": "ERROR_GRAPHICS_PVP_INVALID_CERTIFICATE_LENGTH"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241970
    }
    ,{
         "name": "ERROR_GRAPHICS_OPM_SPANNING_MODE_ENABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241969
    }
    ,{
         "name": "ERROR_GRAPHICS_OPM_THEATER_MODE_ENABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241968
    }
    ,{
         "name": "ERROR_GRAPHICS_PVP_HFS_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241967
    }
    ,{
         "name": "ERROR_GRAPHICS_OPM_INVALID_SRM"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241966
    }
    ,{
         "name": "ERROR_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_HDCP"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241965
    }
    ,{
         "name": "ERROR_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_ACP"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241964
    }
    ,{
         "name": "ERROR_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_CGMSA"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241963
    }
    ,{
         "name": "ERROR_GRAPHICS_OPM_HDCP_SRM_NEVER_SET"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241962
    }
    ,{
         "name": "ERROR_GRAPHICS_OPM_RESOLUTION_TOO_HIGH"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241961
    }
    ,{
         "name": "ERROR_GRAPHICS_OPM_ALL_HDCP_HARDWARE_ALREADY_IN_USE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241960
    }
    ,{
         "name": "ERROR_GRAPHICS_OPM_VIDEO_OUTPUT_NO_LONGER_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241958
    }
    ,{
         "name": "ERROR_GRAPHICS_OPM_SESSION_TYPE_CHANGE_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241957
    }
    ,{
         "name": "ERROR_GRAPHICS_OPM_VIDEO_OUTPUT_DOES_NOT_HAVE_COPP_SEMANTICS"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241956
    }
    ,{
         "name": "ERROR_GRAPHICS_OPM_INVALID_INFORMATION_REQUEST"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241955
    }
    ,{
         "name": "ERROR_GRAPHICS_OPM_DRIVER_INTERNAL_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241954
    }
    ,{
         "name": "ERROR_GRAPHICS_OPM_VIDEO_OUTPUT_DOES_NOT_HAVE_OPM_SEMANTICS"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241953
    }
    ,{
         "name": "ERROR_GRAPHICS_OPM_SIGNALING_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241952
    }
    ,{
         "name": "ERROR_GRAPHICS_OPM_INVALID_CONFIGURATION_REQUEST"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241951
    }
    ,{
         "name": "ERROR_GRAPHICS_I2C_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241856
    }
    ,{
         "name": "ERROR_GRAPHICS_I2C_DEVICE_DOES_NOT_EXIST"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241855
    }
    ,{
         "name": "ERROR_GRAPHICS_I2C_ERROR_TRANSMITTING_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241854
    }
    ,{
         "name": "ERROR_GRAPHICS_I2C_ERROR_RECEIVING_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241853
    }
    ,{
         "name": "ERROR_GRAPHICS_DDCCI_VCP_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241852
    }
    ,{
         "name": "ERROR_GRAPHICS_DDCCI_INVALID_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241851
    }
    ,{
         "name": "ERROR_GRAPHICS_DDCCI_MONITOR_RETURNED_INVALID_TIMING_STATUS_BYTE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241850
    }
    ,{
         "name": "ERROR_GRAPHICS_MCA_INVALID_CAPABILITIES_STRING"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241849
    }
    ,{
         "name": "ERROR_GRAPHICS_MCA_INTERNAL_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241848
    }
    ,{
         "name": "ERROR_GRAPHICS_DDCCI_INVALID_MESSAGE_COMMAND"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241847
    }
    ,{
         "name": "ERROR_GRAPHICS_DDCCI_INVALID_MESSAGE_LENGTH"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241846
    }
    ,{
         "name": "ERROR_GRAPHICS_DDCCI_INVALID_MESSAGE_CHECKSUM"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241845
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_PHYSICAL_MONITOR_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241844
    }
    ,{
         "name": "ERROR_GRAPHICS_MONITOR_NO_LONGER_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241843
    }
    ,{
         "name": "ERROR_GRAPHICS_DDCCI_CURRENT_CURRENT_VALUE_GREATER_THAN_MAXIMUM_VALUE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241768
    }
    ,{
         "name": "ERROR_GRAPHICS_MCA_INVALID_VCP_VERSION"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241767
    }
    ,{
         "name": "ERROR_GRAPHICS_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241766
    }
    ,{
         "name": "ERROR_GRAPHICS_MCA_MCCS_VERSION_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241765
    }
    ,{
         "name": "ERROR_GRAPHICS_MCA_UNSUPPORTED_MCCS_VERSION"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241764
    }
    ,{
         "name": "ERROR_GRAPHICS_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241762
    }
    ,{
         "name": "ERROR_GRAPHICS_MCA_UNSUPPORTED_COLOR_TEMPERATURE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241761
    }
    ,{
         "name": "ERROR_GRAPHICS_ONLY_CONSOLE_SESSION_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241760
    }
    ,{
         "name": "ERROR_GRAPHICS_NO_DISPLAY_DEVICE_CORRESPONDS_TO_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241759
    }
    ,{
         "name": "ERROR_GRAPHICS_DISPLAY_DEVICE_NOT_ATTACHED_TO_DESKTOP"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241758
    }
    ,{
         "name": "ERROR_GRAPHICS_MIRRORING_DEVICES_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241757
    }
    ,{
         "name": "ERROR_GRAPHICS_INVALID_POINTER"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241756
    }
    ,{
         "name": "ERROR_GRAPHICS_NO_MONITORS_CORRESPOND_TO_DISPLAY_DEVICE"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241755
    }
    ,{
         "name": "ERROR_GRAPHICS_PARAMETER_ARRAY_TOO_SMALL"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241754
    }
    ,{
         "name": "ERROR_GRAPHICS_INTERNAL_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -1071241753
    }
    ,{
         "name": "ERROR_GRAPHICS_SESSION_TYPE_CHANGE_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": -1071249944
    }
    ,{
         "name": "NAP_E_INVALID_PACKET"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927743
    }
    ,{
         "name": "NAP_E_MISSING_SOH"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927742
    }
    ,{
         "name": "NAP_E_CONFLICTING_ID"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927741
    }
    ,{
         "name": "NAP_E_NO_CACHED_SOH"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927740
    }
    ,{
         "name": "NAP_E_STILL_BOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927739
    }
    ,{
         "name": "NAP_E_NOT_REGISTERED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927738
    }
    ,{
         "name": "NAP_E_NOT_INITIALIZED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927737
    }
    ,{
         "name": "NAP_E_MISMATCHED_ID"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927736
    }
    ,{
         "name": "NAP_E_NOT_PENDING"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927735
    }
    ,{
         "name": "NAP_E_ID_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927734
    }
    ,{
         "name": "NAP_E_MAXSIZE_TOO_SMALL"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927733
    }
    ,{
         "name": "NAP_E_SERVICE_NOT_RUNNING"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927732
    }
    ,{
         "name": "NAP_S_CERT_ALREADY_PRESENT"
        ,"type": {"kind":"Int32"}
        ,"value": 2555917
    }
    ,{
         "name": "NAP_E_ENTITY_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927730
    }
    ,{
         "name": "NAP_E_NETSH_GROUPPOLICY_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927729
    }
    ,{
         "name": "NAP_E_TOO_MANY_CALLS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927728
    }
    ,{
         "name": "NAP_E_SHV_CONFIG_EXISTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927727
    }
    ,{
         "name": "NAP_E_SHV_CONFIG_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927726
    }
    ,{
         "name": "NAP_E_SHV_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927725
    }
    ,{
         "name": "TPM_E_ERROR_MASK"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862208
    }
    ,{
         "name": "TPM_E_AUTHFAIL"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862207
    }
    ,{
         "name": "TPM_E_BADINDEX"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862206
    }
    ,{
         "name": "TPM_E_BAD_PARAMETER"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862205
    }
    ,{
         "name": "TPM_E_AUDITFAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862204
    }
    ,{
         "name": "TPM_E_CLEAR_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862203
    }
    ,{
         "name": "TPM_E_DEACTIVATED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862202
    }
    ,{
         "name": "TPM_E_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862201
    }
    ,{
         "name": "TPM_E_DISABLED_CMD"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862200
    }
    ,{
         "name": "TPM_E_FAIL"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862199
    }
    ,{
         "name": "TPM_E_BAD_ORDINAL"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862198
    }
    ,{
         "name": "TPM_E_INSTALL_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862197
    }
    ,{
         "name": "TPM_E_INVALID_KEYHANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862196
    }
    ,{
         "name": "TPM_E_KEYNOTFOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862195
    }
    ,{
         "name": "TPM_E_INAPPROPRIATE_ENC"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862194
    }
    ,{
         "name": "TPM_E_MIGRATEFAIL"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862193
    }
    ,{
         "name": "TPM_E_INVALID_PCR_INFO"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862192
    }
    ,{
         "name": "TPM_E_NOSPACE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862191
    }
    ,{
         "name": "TPM_E_NOSRK"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862190
    }
    ,{
         "name": "TPM_E_NOTSEALED_BLOB"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862189
    }
    ,{
         "name": "TPM_E_OWNER_SET"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862188
    }
    ,{
         "name": "TPM_E_RESOURCES"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862187
    }
    ,{
         "name": "TPM_E_SHORTRANDOM"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862186
    }
    ,{
         "name": "TPM_E_SIZE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862185
    }
    ,{
         "name": "TPM_E_WRONGPCRVAL"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862184
    }
    ,{
         "name": "TPM_E_BAD_PARAM_SIZE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862183
    }
    ,{
         "name": "TPM_E_SHA_THREAD"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862182
    }
    ,{
         "name": "TPM_E_SHA_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862181
    }
    ,{
         "name": "TPM_E_FAILEDSELFTEST"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862180
    }
    ,{
         "name": "TPM_E_AUTH2FAIL"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862179
    }
    ,{
         "name": "TPM_E_BADTAG"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862178
    }
    ,{
         "name": "TPM_E_IOERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862177
    }
    ,{
         "name": "TPM_E_ENCRYPT_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862176
    }
    ,{
         "name": "TPM_E_DECRYPT_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862175
    }
    ,{
         "name": "TPM_E_INVALID_AUTHHANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862174
    }
    ,{
         "name": "TPM_E_NO_ENDORSEMENT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862173
    }
    ,{
         "name": "TPM_E_INVALID_KEYUSAGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862172
    }
    ,{
         "name": "TPM_E_WRONG_ENTITYTYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862171
    }
    ,{
         "name": "TPM_E_INVALID_POSTINIT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862170
    }
    ,{
         "name": "TPM_E_INAPPROPRIATE_SIG"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862169
    }
    ,{
         "name": "TPM_E_BAD_KEY_PROPERTY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862168
    }
    ,{
         "name": "TPM_E_BAD_MIGRATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862167
    }
    ,{
         "name": "TPM_E_BAD_SCHEME"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862166
    }
    ,{
         "name": "TPM_E_BAD_DATASIZE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862165
    }
    ,{
         "name": "TPM_E_BAD_MODE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862164
    }
    ,{
         "name": "TPM_E_BAD_PRESENCE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862163
    }
    ,{
         "name": "TPM_E_BAD_VERSION"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862162
    }
    ,{
         "name": "TPM_E_NO_WRAP_TRANSPORT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862161
    }
    ,{
         "name": "TPM_E_AUDITFAIL_UNSUCCESSFUL"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862160
    }
    ,{
         "name": "TPM_E_AUDITFAIL_SUCCESSFUL"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862159
    }
    ,{
         "name": "TPM_E_NOTRESETABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862158
    }
    ,{
         "name": "TPM_E_NOTLOCAL"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862157
    }
    ,{
         "name": "TPM_E_BAD_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862156
    }
    ,{
         "name": "TPM_E_INVALID_RESOURCE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862155
    }
    ,{
         "name": "TPM_E_NOTFIPS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862154
    }
    ,{
         "name": "TPM_E_INVALID_FAMILY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862153
    }
    ,{
         "name": "TPM_E_NO_NV_PERMISSION"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862152
    }
    ,{
         "name": "TPM_E_REQUIRES_SIGN"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862151
    }
    ,{
         "name": "TPM_E_KEY_NOTSUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862150
    }
    ,{
         "name": "TPM_E_AUTH_CONFLICT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862149
    }
    ,{
         "name": "TPM_E_AREA_LOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862148
    }
    ,{
         "name": "TPM_E_BAD_LOCALITY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862147
    }
    ,{
         "name": "TPM_E_READ_ONLY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862146
    }
    ,{
         "name": "TPM_E_PER_NOWRITE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862145
    }
    ,{
         "name": "TPM_E_FAMILYCOUNT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862144
    }
    ,{
         "name": "TPM_E_WRITE_LOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862143
    }
    ,{
         "name": "TPM_E_BAD_ATTRIBUTES"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862142
    }
    ,{
         "name": "TPM_E_INVALID_STRUCTURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862141
    }
    ,{
         "name": "TPM_E_KEY_OWNER_CONTROL"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862140
    }
    ,{
         "name": "TPM_E_BAD_COUNTER"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862139
    }
    ,{
         "name": "TPM_E_NOT_FULLWRITE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862138
    }
    ,{
         "name": "TPM_E_CONTEXT_GAP"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862137
    }
    ,{
         "name": "TPM_E_MAXNVWRITES"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862136
    }
    ,{
         "name": "TPM_E_NOOPERATOR"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862135
    }
    ,{
         "name": "TPM_E_RESOURCEMISSING"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862134
    }
    ,{
         "name": "TPM_E_DELEGATE_LOCK"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862133
    }
    ,{
         "name": "TPM_E_DELEGATE_FAMILY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862132
    }
    ,{
         "name": "TPM_E_DELEGATE_ADMIN"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862131
    }
    ,{
         "name": "TPM_E_TRANSPORT_NOTEXCLUSIVE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862130
    }
    ,{
         "name": "TPM_E_OWNER_CONTROL"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862129
    }
    ,{
         "name": "TPM_E_DAA_RESOURCES"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862128
    }
    ,{
         "name": "TPM_E_DAA_INPUT_DATA0"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862127
    }
    ,{
         "name": "TPM_E_DAA_INPUT_DATA1"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862126
    }
    ,{
         "name": "TPM_E_DAA_ISSUER_SETTINGS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862125
    }
    ,{
         "name": "TPM_E_DAA_TPM_SETTINGS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862124
    }
    ,{
         "name": "TPM_E_DAA_STAGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862123
    }
    ,{
         "name": "TPM_E_DAA_ISSUER_VALIDITY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862122
    }
    ,{
         "name": "TPM_E_DAA_WRONG_W"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862121
    }
    ,{
         "name": "TPM_E_BAD_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862120
    }
    ,{
         "name": "TPM_E_BAD_DELEGATE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862119
    }
    ,{
         "name": "TPM_E_BADCONTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862118
    }
    ,{
         "name": "TPM_E_TOOMANYCONTEXTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862117
    }
    ,{
         "name": "TPM_E_MA_TICKET_SIGNATURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862116
    }
    ,{
         "name": "TPM_E_MA_DESTINATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862115
    }
    ,{
         "name": "TPM_E_MA_SOURCE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862114
    }
    ,{
         "name": "TPM_E_MA_AUTHORITY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862113
    }
    ,{
         "name": "TPM_E_PERMANENTEK"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862111
    }
    ,{
         "name": "TPM_E_BAD_SIGNATURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862110
    }
    ,{
         "name": "TPM_E_NOCONTEXTSPACE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862109
    }
    ,{
         "name": "TPM_20_E_ASYMMETRIC"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862079
    }
    ,{
         "name": "TPM_20_E_ATTRIBUTES"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862078
    }
    ,{
         "name": "TPM_20_E_HASH"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862077
    }
    ,{
         "name": "TPM_20_E_VALUE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862076
    }
    ,{
         "name": "TPM_20_E_HIERARCHY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862075
    }
    ,{
         "name": "TPM_20_E_KEY_SIZE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862073
    }
    ,{
         "name": "TPM_20_E_MGF"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862072
    }
    ,{
         "name": "TPM_20_E_MODE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862071
    }
    ,{
         "name": "TPM_20_E_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862070
    }
    ,{
         "name": "TPM_20_E_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862069
    }
    ,{
         "name": "TPM_20_E_KDF"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862068
    }
    ,{
         "name": "TPM_20_E_RANGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862067
    }
    ,{
         "name": "TPM_20_E_AUTH_FAIL"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862066
    }
    ,{
         "name": "TPM_20_E_NONCE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862065
    }
    ,{
         "name": "TPM_20_E_PP"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862064
    }
    ,{
         "name": "TPM_20_E_SCHEME"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862062
    }
    ,{
         "name": "TPM_20_E_SIZE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862059
    }
    ,{
         "name": "TPM_20_E_SYMMETRIC"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862058
    }
    ,{
         "name": "TPM_20_E_TAG"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862057
    }
    ,{
         "name": "TPM_20_E_SELECTOR"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862056
    }
    ,{
         "name": "TPM_20_E_INSUFFICIENT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862054
    }
    ,{
         "name": "TPM_20_E_SIGNATURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862053
    }
    ,{
         "name": "TPM_20_E_KEY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862052
    }
    ,{
         "name": "TPM_20_E_POLICY_FAIL"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862051
    }
    ,{
         "name": "TPM_20_E_INTEGRITY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862049
    }
    ,{
         "name": "TPM_20_E_TICKET"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862048
    }
    ,{
         "name": "TPM_20_E_RESERVED_BITS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862047
    }
    ,{
         "name": "TPM_20_E_BAD_AUTH"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862046
    }
    ,{
         "name": "TPM_20_E_EXPIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862045
    }
    ,{
         "name": "TPM_20_E_POLICY_CC"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862044
    }
    ,{
         "name": "TPM_20_E_BINDING"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862043
    }
    ,{
         "name": "TPM_20_E_CURVE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862042
    }
    ,{
         "name": "TPM_20_E_ECC_POINT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144862041
    }
    ,{
         "name": "TPM_20_E_INITIALIZE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861952
    }
    ,{
         "name": "TPM_20_E_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861951
    }
    ,{
         "name": "TPM_20_E_SEQUENCE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861949
    }
    ,{
         "name": "TPM_20_E_PRIVATE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861941
    }
    ,{
         "name": "TPM_20_E_HMAC"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861927
    }
    ,{
         "name": "TPM_20_E_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861920
    }
    ,{
         "name": "TPM_20_E_EXCLUSIVE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861919
    }
    ,{
         "name": "TPM_20_E_ECC_CURVE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861917
    }
    ,{
         "name": "TPM_20_E_AUTH_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861916
    }
    ,{
         "name": "TPM_20_E_AUTH_MISSING"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861915
    }
    ,{
         "name": "TPM_20_E_POLICY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861914
    }
    ,{
         "name": "TPM_20_E_PCR"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861913
    }
    ,{
         "name": "TPM_20_E_PCR_CHANGED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861912
    }
    ,{
         "name": "TPM_20_E_UPGRADE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861907
    }
    ,{
         "name": "TPM_20_E_TOO_MANY_CONTEXTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861906
    }
    ,{
         "name": "TPM_20_E_AUTH_UNAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861905
    }
    ,{
         "name": "TPM_20_E_REBOOT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861904
    }
    ,{
         "name": "TPM_20_E_UNBALANCED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861903
    }
    ,{
         "name": "TPM_20_E_COMMAND_SIZE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861886
    }
    ,{
         "name": "TPM_20_E_COMMAND_CODE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861885
    }
    ,{
         "name": "TPM_20_E_AUTHSIZE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861884
    }
    ,{
         "name": "TPM_20_E_AUTH_CONTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861883
    }
    ,{
         "name": "TPM_20_E_NV_RANGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861882
    }
    ,{
         "name": "TPM_20_E_NV_SIZE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861881
    }
    ,{
         "name": "TPM_20_E_NV_LOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861880
    }
    ,{
         "name": "TPM_20_E_NV_AUTHORIZATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861879
    }
    ,{
         "name": "TPM_20_E_NV_UNINITIALIZED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861878
    }
    ,{
         "name": "TPM_20_E_NV_SPACE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861877
    }
    ,{
         "name": "TPM_20_E_NV_DEFINED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861876
    }
    ,{
         "name": "TPM_20_E_BAD_CONTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861872
    }
    ,{
         "name": "TPM_20_E_CPHASH"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861871
    }
    ,{
         "name": "TPM_20_E_PARENT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861870
    }
    ,{
         "name": "TPM_20_E_NEEDS_TEST"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861869
    }
    ,{
         "name": "TPM_20_E_NO_RESULT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861868
    }
    ,{
         "name": "TPM_20_E_SENSITIVE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861867
    }
    ,{
         "name": "TPM_E_COMMAND_BLOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861184
    }
    ,{
         "name": "TPM_E_INVALID_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861183
    }
    ,{
         "name": "TPM_E_DUPLICATE_VHANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861182
    }
    ,{
         "name": "TPM_E_EMBEDDED_COMMAND_BLOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861181
    }
    ,{
         "name": "TPM_E_EMBEDDED_COMMAND_UNSUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144861180
    }
    ,{
         "name": "TPM_E_RETRY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144860160
    }
    ,{
         "name": "TPM_E_NEEDS_SELFTEST"
        ,"type": {"kind":"Int32"}
        ,"value": -2144860159
    }
    ,{
         "name": "TPM_E_DOING_SELFTEST"
        ,"type": {"kind":"Int32"}
        ,"value": -2144860158
    }
    ,{
         "name": "TPM_E_DEFEND_LOCK_RUNNING"
        ,"type": {"kind":"Int32"}
        ,"value": -2144860157
    }
    ,{
         "name": "TPM_20_E_CONTEXT_GAP"
        ,"type": {"kind":"Int32"}
        ,"value": -2144859903
    }
    ,{
         "name": "TPM_20_E_OBJECT_MEMORY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144859902
    }
    ,{
         "name": "TPM_20_E_SESSION_MEMORY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144859901
    }
    ,{
         "name": "TPM_20_E_MEMORY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144859900
    }
    ,{
         "name": "TPM_20_E_SESSION_HANDLES"
        ,"type": {"kind":"Int32"}
        ,"value": -2144859899
    }
    ,{
         "name": "TPM_20_E_OBJECT_HANDLES"
        ,"type": {"kind":"Int32"}
        ,"value": -2144859898
    }
    ,{
         "name": "TPM_20_E_LOCALITY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144859897
    }
    ,{
         "name": "TPM_20_E_YIELDED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144859896
    }
    ,{
         "name": "TPM_20_E_CANCELED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144859895
    }
    ,{
         "name": "TPM_20_E_TESTING"
        ,"type": {"kind":"Int32"}
        ,"value": -2144859894
    }
    ,{
         "name": "TPM_20_E_NV_RATE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144859872
    }
    ,{
         "name": "TPM_20_E_LOCKOUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144859871
    }
    ,{
         "name": "TPM_20_E_RETRY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144859870
    }
    ,{
         "name": "TPM_20_E_NV_UNAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144859869
    }
    ,{
         "name": "TBS_E_INTERNAL_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2144845823
    }
    ,{
         "name": "TBS_E_BAD_PARAMETER"
        ,"type": {"kind":"Int32"}
        ,"value": -2144845822
    }
    ,{
         "name": "TBS_E_INVALID_OUTPUT_POINTER"
        ,"type": {"kind":"Int32"}
        ,"value": -2144845821
    }
    ,{
         "name": "TBS_E_INVALID_CONTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144845820
    }
    ,{
         "name": "TBS_E_INSUFFICIENT_BUFFER"
        ,"type": {"kind":"Int32"}
        ,"value": -2144845819
    }
    ,{
         "name": "TBS_E_IOERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2144845818
    }
    ,{
         "name": "TBS_E_INVALID_CONTEXT_PARAM"
        ,"type": {"kind":"Int32"}
        ,"value": -2144845817
    }
    ,{
         "name": "TBS_E_SERVICE_NOT_RUNNING"
        ,"type": {"kind":"Int32"}
        ,"value": -2144845816
    }
    ,{
         "name": "TBS_E_TOO_MANY_TBS_CONTEXTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144845815
    }
    ,{
         "name": "TBS_E_TOO_MANY_RESOURCES"
        ,"type": {"kind":"Int32"}
        ,"value": -2144845814
    }
    ,{
         "name": "TBS_E_SERVICE_START_PENDING"
        ,"type": {"kind":"Int32"}
        ,"value": -2144845813
    }
    ,{
         "name": "TBS_E_PPI_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144845812
    }
    ,{
         "name": "TBS_E_COMMAND_CANCELED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144845811
    }
    ,{
         "name": "TBS_E_BUFFER_TOO_LARGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144845810
    }
    ,{
         "name": "TBS_E_TPM_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2144845809
    }
    ,{
         "name": "TBS_E_SERVICE_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144845808
    }
    ,{
         "name": "TBS_E_NO_EVENT_LOG"
        ,"type": {"kind":"Int32"}
        ,"value": -2144845807
    }
    ,{
         "name": "TBS_E_ACCESS_DENIED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144845806
    }
    ,{
         "name": "TBS_E_PROVISIONING_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144845805
    }
    ,{
         "name": "TBS_E_PPI_FUNCTION_UNSUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144845804
    }
    ,{
         "name": "TBS_E_OWNERAUTH_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2144845803
    }
    ,{
         "name": "TBS_E_PROVISIONING_INCOMPLETE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144845802
    }
    ,{
         "name": "TPMAPI_E_INVALID_STATE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796416
    }
    ,{
         "name": "TPMAPI_E_NOT_ENOUGH_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796415
    }
    ,{
         "name": "TPMAPI_E_TOO_MUCH_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796414
    }
    ,{
         "name": "TPMAPI_E_INVALID_OUTPUT_POINTER"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796413
    }
    ,{
         "name": "TPMAPI_E_INVALID_PARAMETER"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796412
    }
    ,{
         "name": "TPMAPI_E_OUT_OF_MEMORY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796411
    }
    ,{
         "name": "TPMAPI_E_BUFFER_TOO_SMALL"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796410
    }
    ,{
         "name": "TPMAPI_E_INTERNAL_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796409
    }
    ,{
         "name": "TPMAPI_E_ACCESS_DENIED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796408
    }
    ,{
         "name": "TPMAPI_E_AUTHORIZATION_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796407
    }
    ,{
         "name": "TPMAPI_E_INVALID_CONTEXT_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796406
    }
    ,{
         "name": "TPMAPI_E_TBS_COMMUNICATION_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796405
    }
    ,{
         "name": "TPMAPI_E_TPM_COMMAND_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796404
    }
    ,{
         "name": "TPMAPI_E_MESSAGE_TOO_LARGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796403
    }
    ,{
         "name": "TPMAPI_E_INVALID_ENCODING"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796402
    }
    ,{
         "name": "TPMAPI_E_INVALID_KEY_SIZE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796401
    }
    ,{
         "name": "TPMAPI_E_ENCRYPTION_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796400
    }
    ,{
         "name": "TPMAPI_E_INVALID_KEY_PARAMS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796399
    }
    ,{
         "name": "TPMAPI_E_INVALID_MIGRATION_AUTHORIZATION_BLOB"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796398
    }
    ,{
         "name": "TPMAPI_E_INVALID_PCR_INDEX"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796397
    }
    ,{
         "name": "TPMAPI_E_INVALID_DELEGATE_BLOB"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796396
    }
    ,{
         "name": "TPMAPI_E_INVALID_CONTEXT_PARAMS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796395
    }
    ,{
         "name": "TPMAPI_E_INVALID_KEY_BLOB"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796394
    }
    ,{
         "name": "TPMAPI_E_INVALID_PCR_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796393
    }
    ,{
         "name": "TPMAPI_E_INVALID_OWNER_AUTH"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796392
    }
    ,{
         "name": "TPMAPI_E_FIPS_RNG_CHECK_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796391
    }
    ,{
         "name": "TPMAPI_E_EMPTY_TCG_LOG"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796390
    }
    ,{
         "name": "TPMAPI_E_INVALID_TCG_LOG_ENTRY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796389
    }
    ,{
         "name": "TPMAPI_E_TCG_SEPARATOR_ABSENT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796388
    }
    ,{
         "name": "TPMAPI_E_TCG_INVALID_DIGEST_ENTRY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796387
    }
    ,{
         "name": "TPMAPI_E_POLICY_DENIES_OPERATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796386
    }
    ,{
         "name": "TPMAPI_E_NV_BITS_NOT_DEFINED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796385
    }
    ,{
         "name": "TPMAPI_E_NV_BITS_NOT_READY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796384
    }
    ,{
         "name": "TPMAPI_E_SEALING_KEY_NOT_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796383
    }
    ,{
         "name": "TPMAPI_E_NO_AUTHORIZATION_CHAIN_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796382
    }
    ,{
         "name": "TPMAPI_E_SVN_COUNTER_NOT_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796381
    }
    ,{
         "name": "TPMAPI_E_OWNER_AUTH_NOT_NULL"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796380
    }
    ,{
         "name": "TPMAPI_E_ENDORSEMENT_AUTH_NOT_NULL"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796379
    }
    ,{
         "name": "TPMAPI_E_AUTHORIZATION_REVOKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796378
    }
    ,{
         "name": "TPMAPI_E_MALFORMED_AUTHORIZATION_KEY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796377
    }
    ,{
         "name": "TPMAPI_E_AUTHORIZING_KEY_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796376
    }
    ,{
         "name": "TPMAPI_E_INVALID_AUTHORIZATION_SIGNATURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796375
    }
    ,{
         "name": "TPMAPI_E_MALFORMED_AUTHORIZATION_POLICY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796374
    }
    ,{
         "name": "TPMAPI_E_MALFORMED_AUTHORIZATION_OTHER"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796373
    }
    ,{
         "name": "TPMAPI_E_SEALING_KEY_CHANGED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796372
    }
    ,{
         "name": "TPMAPI_E_INVALID_TPM_VERSION"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796371
    }
    ,{
         "name": "TPMAPI_E_INVALID_POLICYAUTH_BLOB_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796370
    }
    ,{
         "name": "TBSIMP_E_BUFFER_TOO_SMALL"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796160
    }
    ,{
         "name": "TBSIMP_E_CLEANUP_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796159
    }
    ,{
         "name": "TBSIMP_E_INVALID_CONTEXT_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796158
    }
    ,{
         "name": "TBSIMP_E_INVALID_CONTEXT_PARAM"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796157
    }
    ,{
         "name": "TBSIMP_E_TPM_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796156
    }
    ,{
         "name": "TBSIMP_E_HASH_BAD_KEY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796155
    }
    ,{
         "name": "TBSIMP_E_DUPLICATE_VHANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796154
    }
    ,{
         "name": "TBSIMP_E_INVALID_OUTPUT_POINTER"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796153
    }
    ,{
         "name": "TBSIMP_E_INVALID_PARAMETER"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796152
    }
    ,{
         "name": "TBSIMP_E_RPC_INIT_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796151
    }
    ,{
         "name": "TBSIMP_E_SCHEDULER_NOT_RUNNING"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796150
    }
    ,{
         "name": "TBSIMP_E_COMMAND_CANCELED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796149
    }
    ,{
         "name": "TBSIMP_E_OUT_OF_MEMORY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796148
    }
    ,{
         "name": "TBSIMP_E_LIST_NO_MORE_ITEMS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796147
    }
    ,{
         "name": "TBSIMP_E_LIST_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796146
    }
    ,{
         "name": "TBSIMP_E_NOT_ENOUGH_SPACE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796145
    }
    ,{
         "name": "TBSIMP_E_NOT_ENOUGH_TPM_CONTEXTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796144
    }
    ,{
         "name": "TBSIMP_E_COMMAND_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796143
    }
    ,{
         "name": "TBSIMP_E_UNKNOWN_ORDINAL"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796142
    }
    ,{
         "name": "TBSIMP_E_RESOURCE_EXPIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796141
    }
    ,{
         "name": "TBSIMP_E_INVALID_RESOURCE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796140
    }
    ,{
         "name": "TBSIMP_E_NOTHING_TO_UNLOAD"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796139
    }
    ,{
         "name": "TBSIMP_E_HASH_TABLE_FULL"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796138
    }
    ,{
         "name": "TBSIMP_E_TOO_MANY_TBS_CONTEXTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796137
    }
    ,{
         "name": "TBSIMP_E_TOO_MANY_RESOURCES"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796136
    }
    ,{
         "name": "TBSIMP_E_PPI_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796135
    }
    ,{
         "name": "TBSIMP_E_TPM_INCOMPATIBLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796134
    }
    ,{
         "name": "TBSIMP_E_NO_EVENT_LOG"
        ,"type": {"kind":"Int32"}
        ,"value": -2144796133
    }
    ,{
         "name": "TPM_E_PPI_ACPI_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795904
    }
    ,{
         "name": "TPM_E_PPI_USER_ABORT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795903
    }
    ,{
         "name": "TPM_E_PPI_BIOS_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795902
    }
    ,{
         "name": "TPM_E_PPI_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795901
    }
    ,{
         "name": "TPM_E_PPI_BLOCKED_IN_BIOS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795900
    }
    ,{
         "name": "TPM_E_PCP_ERROR_MASK"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795648
    }
    ,{
         "name": "TPM_E_PCP_DEVICE_NOT_READY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795647
    }
    ,{
         "name": "TPM_E_PCP_INVALID_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795646
    }
    ,{
         "name": "TPM_E_PCP_INVALID_PARAMETER"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795645
    }
    ,{
         "name": "TPM_E_PCP_FLAG_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795644
    }
    ,{
         "name": "TPM_E_PCP_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795643
    }
    ,{
         "name": "TPM_E_PCP_BUFFER_TOO_SMALL"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795642
    }
    ,{
         "name": "TPM_E_PCP_INTERNAL_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795641
    }
    ,{
         "name": "TPM_E_PCP_AUTHENTICATION_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795640
    }
    ,{
         "name": "TPM_E_PCP_AUTHENTICATION_IGNORED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795639
    }
    ,{
         "name": "TPM_E_PCP_POLICY_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795638
    }
    ,{
         "name": "TPM_E_PCP_PROFILE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795637
    }
    ,{
         "name": "TPM_E_PCP_VALIDATION_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795636
    }
    ,{
         "name": "TPM_E_PCP_WRONG_PARENT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795634
    }
    ,{
         "name": "TPM_E_KEY_NOT_LOADED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795633
    }
    ,{
         "name": "TPM_E_NO_KEY_CERTIFICATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795632
    }
    ,{
         "name": "TPM_E_KEY_NOT_FINALIZED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795631
    }
    ,{
         "name": "TPM_E_ATTESTATION_CHALLENGE_NOT_SET"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795630
    }
    ,{
         "name": "TPM_E_NOT_PCR_BOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795629
    }
    ,{
         "name": "TPM_E_KEY_ALREADY_FINALIZED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795628
    }
    ,{
         "name": "TPM_E_KEY_USAGE_POLICY_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795627
    }
    ,{
         "name": "TPM_E_KEY_USAGE_POLICY_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795626
    }
    ,{
         "name": "TPM_E_SOFT_KEY_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795625
    }
    ,{
         "name": "TPM_E_KEY_NOT_AUTHENTICATED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795624
    }
    ,{
         "name": "TPM_E_PCP_KEY_NOT_AIK"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795623
    }
    ,{
         "name": "TPM_E_KEY_NOT_SIGNING_KEY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795622
    }
    ,{
         "name": "TPM_E_LOCKED_OUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795621
    }
    ,{
         "name": "TPM_E_CLAIM_TYPE_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795620
    }
    ,{
         "name": "TPM_E_VERSION_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795619
    }
    ,{
         "name": "TPM_E_BUFFER_LENGTH_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795618
    }
    ,{
         "name": "TPM_E_PCP_IFX_RSA_KEY_CREATION_BLOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795617
    }
    ,{
         "name": "TPM_E_PCP_TICKET_MISSING"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795616
    }
    ,{
         "name": "TPM_E_PCP_RAW_POLICY_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795615
    }
    ,{
         "name": "TPM_E_PCP_KEY_HANDLE_INVALIDATED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795614
    }
    ,{
         "name": "TPM_E_PCP_UNSUPPORTED_PSS_SALT"
        ,"type": {"kind":"Int32"}
        ,"value": 1076429859
    }
    ,{
         "name": "TPM_E_PCP_PLATFORM_CLAIM_MAY_BE_OUTDATED"
        ,"type": {"kind":"Int32"}
        ,"value": 1076429860
    }
    ,{
         "name": "TPM_E_PCP_PLATFORM_CLAIM_OUTDATED"
        ,"type": {"kind":"Int32"}
        ,"value": 1076429861
    }
    ,{
         "name": "TPM_E_PCP_PLATFORM_CLAIM_REBOOT"
        ,"type": {"kind":"Int32"}
        ,"value": 1076429862
    }
    ,{
         "name": "TPM_E_ZERO_EXHAUST_ENABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795392
    }
    ,{
         "name": "TPM_E_PROVISIONING_INCOMPLETE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795136
    }
    ,{
         "name": "TPM_E_INVALID_OWNER_AUTH"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795135
    }
    ,{
         "name": "TPM_E_TOO_MUCH_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": -2144795134
    }
    ,{
         "name": "PLA_E_DCS_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2144337918
    }
    ,{
         "name": "PLA_E_DCS_IN_USE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144337750
    }
    ,{
         "name": "PLA_E_TOO_MANY_FOLDERS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144337851
    }
    ,{
         "name": "PLA_E_NO_MIN_DISK"
        ,"type": {"kind":"Int32"}
        ,"value": -2144337808
    }
    ,{
         "name": "PLA_E_DCS_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144337737
    }
    ,{
         "name": "PLA_S_PROPERTY_IGNORED"
        ,"type": {"kind":"Int32"}
        ,"value": 3145984
    }
    ,{
         "name": "PLA_E_PROPERTY_CONFLICT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144337663
    }
    ,{
         "name": "PLA_E_DCS_SINGLETON_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144337662
    }
    ,{
         "name": "PLA_E_CREDENTIALS_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144337661
    }
    ,{
         "name": "PLA_E_DCS_NOT_RUNNING"
        ,"type": {"kind":"Int32"}
        ,"value": -2144337660
    }
    ,{
         "name": "PLA_E_CONFLICT_INCL_EXCL_API"
        ,"type": {"kind":"Int32"}
        ,"value": -2144337659
    }
    ,{
         "name": "PLA_E_NETWORK_EXE_NOT_VALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2144337658
    }
    ,{
         "name": "PLA_E_EXE_ALREADY_CONFIGURED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144337657
    }
    ,{
         "name": "PLA_E_EXE_PATH_NOT_VALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2144337656
    }
    ,{
         "name": "PLA_E_DC_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144337655
    }
    ,{
         "name": "PLA_E_DCS_START_WAIT_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144337654
    }
    ,{
         "name": "PLA_E_DC_START_WAIT_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144337653
    }
    ,{
         "name": "PLA_E_REPORT_WAIT_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144337652
    }
    ,{
         "name": "PLA_E_NO_DUPLICATES"
        ,"type": {"kind":"Int32"}
        ,"value": -2144337651
    }
    ,{
         "name": "PLA_E_EXE_FULL_PATH_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144337650
    }
    ,{
         "name": "PLA_E_INVALID_SESSION_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": -2144337649
    }
    ,{
         "name": "PLA_E_PLA_CHANNEL_NOT_ENABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144337648
    }
    ,{
         "name": "PLA_E_TASKSCHED_CHANNEL_NOT_ENABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144337647
    }
    ,{
         "name": "PLA_E_RULES_MANAGER_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144337646
    }
    ,{
         "name": "PLA_E_CABAPI_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144337645
    }
    ,{
         "name": "FVE_E_LOCKED_VOLUME"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272384
    }
    ,{
         "name": "FVE_E_NOT_ENCRYPTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272383
    }
    ,{
         "name": "FVE_E_NO_TPM_BIOS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272382
    }
    ,{
         "name": "FVE_E_NO_MBR_METRIC"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272381
    }
    ,{
         "name": "FVE_E_NO_BOOTSECTOR_METRIC"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272380
    }
    ,{
         "name": "FVE_E_NO_BOOTMGR_METRIC"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272379
    }
    ,{
         "name": "FVE_E_WRONG_BOOTMGR"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272378
    }
    ,{
         "name": "FVE_E_SECURE_KEY_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272377
    }
    ,{
         "name": "FVE_E_NOT_ACTIVATED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272376
    }
    ,{
         "name": "FVE_E_ACTION_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272375
    }
    ,{
         "name": "FVE_E_AD_SCHEMA_NOT_INSTALLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272374
    }
    ,{
         "name": "FVE_E_AD_INVALID_DATATYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272373
    }
    ,{
         "name": "FVE_E_AD_INVALID_DATASIZE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272372
    }
    ,{
         "name": "FVE_E_AD_NO_VALUES"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272371
    }
    ,{
         "name": "FVE_E_AD_ATTR_NOT_SET"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272370
    }
    ,{
         "name": "FVE_E_AD_GUID_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272369
    }
    ,{
         "name": "FVE_E_BAD_INFORMATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272368
    }
    ,{
         "name": "FVE_E_TOO_SMALL"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272367
    }
    ,{
         "name": "FVE_E_SYSTEM_VOLUME"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272366
    }
    ,{
         "name": "FVE_E_FAILED_WRONG_FS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272365
    }
    ,{
         "name": "FVE_E_BAD_PARTITION_SIZE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272364
    }
    ,{
         "name": "FVE_E_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272363
    }
    ,{
         "name": "FVE_E_BAD_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272362
    }
    ,{
         "name": "FVE_E_VOLUME_NOT_BOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272361
    }
    ,{
         "name": "FVE_E_TPM_NOT_OWNED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272360
    }
    ,{
         "name": "FVE_E_NOT_DATA_VOLUME"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272359
    }
    ,{
         "name": "FVE_E_AD_INSUFFICIENT_BUFFER"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272358
    }
    ,{
         "name": "FVE_E_CONV_READ"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272357
    }
    ,{
         "name": "FVE_E_CONV_WRITE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272356
    }
    ,{
         "name": "FVE_E_KEY_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272355
    }
    ,{
         "name": "FVE_E_CLUSTERING_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272354
    }
    ,{
         "name": "FVE_E_VOLUME_BOUND_ALREADY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272353
    }
    ,{
         "name": "FVE_E_OS_NOT_PROTECTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272352
    }
    ,{
         "name": "FVE_E_PROTECTION_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272351
    }
    ,{
         "name": "FVE_E_RECOVERY_KEY_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272350
    }
    ,{
         "name": "FVE_E_FOREIGN_VOLUME"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272349
    }
    ,{
         "name": "FVE_E_OVERLAPPED_UPDATE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272348
    }
    ,{
         "name": "FVE_E_TPM_SRK_AUTH_NOT_ZERO"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272347
    }
    ,{
         "name": "FVE_E_FAILED_SECTOR_SIZE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272346
    }
    ,{
         "name": "FVE_E_FAILED_AUTHENTICATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272345
    }
    ,{
         "name": "FVE_E_NOT_OS_VOLUME"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272344
    }
    ,{
         "name": "FVE_E_AUTOUNLOCK_ENABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272343
    }
    ,{
         "name": "FVE_E_WRONG_BOOTSECTOR"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272342
    }
    ,{
         "name": "FVE_E_WRONG_SYSTEM_FS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272341
    }
    ,{
         "name": "FVE_E_POLICY_PASSWORD_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272340
    }
    ,{
         "name": "FVE_E_CANNOT_SET_FVEK_ENCRYPTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272339
    }
    ,{
         "name": "FVE_E_CANNOT_ENCRYPT_NO_KEY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272338
    }
    ,{
         "name": "FVE_E_BOOTABLE_CDDVD"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272336
    }
    ,{
         "name": "FVE_E_PROTECTOR_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272335
    }
    ,{
         "name": "FVE_E_RELATIVE_PATH"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272334
    }
    ,{
         "name": "FVE_E_PROTECTOR_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272333
    }
    ,{
         "name": "FVE_E_INVALID_KEY_FORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272332
    }
    ,{
         "name": "FVE_E_INVALID_PASSWORD_FORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272331
    }
    ,{
         "name": "FVE_E_FIPS_RNG_CHECK_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272330
    }
    ,{
         "name": "FVE_E_FIPS_PREVENTS_RECOVERY_PASSWORD"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272329
    }
    ,{
         "name": "FVE_E_FIPS_PREVENTS_EXTERNAL_KEY_EXPORT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272328
    }
    ,{
         "name": "FVE_E_NOT_DECRYPTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272327
    }
    ,{
         "name": "FVE_E_INVALID_PROTECTOR_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272326
    }
    ,{
         "name": "FVE_E_NO_PROTECTORS_TO_TEST"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272325
    }
    ,{
         "name": "FVE_E_KEYFILE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272324
    }
    ,{
         "name": "FVE_E_KEYFILE_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272323
    }
    ,{
         "name": "FVE_E_KEYFILE_NO_VMK"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272322
    }
    ,{
         "name": "FVE_E_TPM_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272321
    }
    ,{
         "name": "FVE_E_NOT_ALLOWED_IN_SAFE_MODE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272320
    }
    ,{
         "name": "FVE_E_TPM_INVALID_PCR"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272319
    }
    ,{
         "name": "FVE_E_TPM_NO_VMK"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272318
    }
    ,{
         "name": "FVE_E_PIN_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272317
    }
    ,{
         "name": "FVE_E_AUTH_INVALID_APPLICATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272316
    }
    ,{
         "name": "FVE_E_AUTH_INVALID_CONFIG"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272315
    }
    ,{
         "name": "FVE_E_FIPS_DISABLE_PROTECTION_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272314
    }
    ,{
         "name": "FVE_E_FS_NOT_EXTENDED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272313
    }
    ,{
         "name": "FVE_E_FIRMWARE_TYPE_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272312
    }
    ,{
         "name": "FVE_E_NO_LICENSE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272311
    }
    ,{
         "name": "FVE_E_NOT_ON_STACK"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272310
    }
    ,{
         "name": "FVE_E_FS_MOUNTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272309
    }
    ,{
         "name": "FVE_E_TOKEN_NOT_IMPERSONATED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272308
    }
    ,{
         "name": "FVE_E_DRY_RUN_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272307
    }
    ,{
         "name": "FVE_E_REBOOT_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272306
    }
    ,{
         "name": "FVE_E_DEBUGGER_ENABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272305
    }
    ,{
         "name": "FVE_E_RAW_ACCESS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272304
    }
    ,{
         "name": "FVE_E_RAW_BLOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272303
    }
    ,{
         "name": "FVE_E_BCD_APPLICATIONS_PATH_INCORRECT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272302
    }
    ,{
         "name": "FVE_E_NOT_ALLOWED_IN_VERSION"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272301
    }
    ,{
         "name": "FVE_E_NO_AUTOUNLOCK_MASTER_KEY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272300
    }
    ,{
         "name": "FVE_E_MOR_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272299
    }
    ,{
         "name": "FVE_E_HIDDEN_VOLUME"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272298
    }
    ,{
         "name": "FVE_E_TRANSIENT_STATE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272297
    }
    ,{
         "name": "FVE_E_PUBKEY_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272296
    }
    ,{
         "name": "FVE_E_VOLUME_HANDLE_OPEN"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272295
    }
    ,{
         "name": "FVE_E_NO_FEATURE_LICENSE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272294
    }
    ,{
         "name": "FVE_E_INVALID_STARTUP_OPTIONS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272293
    }
    ,{
         "name": "FVE_E_POLICY_RECOVERY_PASSWORD_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272292
    }
    ,{
         "name": "FVE_E_POLICY_RECOVERY_PASSWORD_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272291
    }
    ,{
         "name": "FVE_E_POLICY_RECOVERY_KEY_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272290
    }
    ,{
         "name": "FVE_E_POLICY_RECOVERY_KEY_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272289
    }
    ,{
         "name": "FVE_E_POLICY_STARTUP_PIN_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272288
    }
    ,{
         "name": "FVE_E_POLICY_STARTUP_PIN_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272287
    }
    ,{
         "name": "FVE_E_POLICY_STARTUP_KEY_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272286
    }
    ,{
         "name": "FVE_E_POLICY_STARTUP_KEY_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272285
    }
    ,{
         "name": "FVE_E_POLICY_STARTUP_PIN_KEY_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272284
    }
    ,{
         "name": "FVE_E_POLICY_STARTUP_PIN_KEY_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272283
    }
    ,{
         "name": "FVE_E_POLICY_STARTUP_TPM_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272282
    }
    ,{
         "name": "FVE_E_POLICY_STARTUP_TPM_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272281
    }
    ,{
         "name": "FVE_E_POLICY_INVALID_PIN_LENGTH"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272280
    }
    ,{
         "name": "FVE_E_KEY_PROTECTOR_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272279
    }
    ,{
         "name": "FVE_E_POLICY_PASSPHRASE_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272278
    }
    ,{
         "name": "FVE_E_POLICY_PASSPHRASE_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272277
    }
    ,{
         "name": "FVE_E_FIPS_PREVENTS_PASSPHRASE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272276
    }
    ,{
         "name": "FVE_E_OS_VOLUME_PASSPHRASE_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272275
    }
    ,{
         "name": "FVE_E_INVALID_BITLOCKER_OID"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272274
    }
    ,{
         "name": "FVE_E_VOLUME_TOO_SMALL"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272273
    }
    ,{
         "name": "FVE_E_DV_NOT_SUPPORTED_ON_FS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272272
    }
    ,{
         "name": "FVE_E_DV_NOT_ALLOWED_BY_GP"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272271
    }
    ,{
         "name": "FVE_E_POLICY_USER_CERTIFICATE_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272270
    }
    ,{
         "name": "FVE_E_POLICY_USER_CERTIFICATE_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272269
    }
    ,{
         "name": "FVE_E_POLICY_USER_CERT_MUST_BE_HW"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272268
    }
    ,{
         "name": "FVE_E_POLICY_USER_CONFIGURE_FDV_AUTOUNLOCK_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272267
    }
    ,{
         "name": "FVE_E_POLICY_USER_CONFIGURE_RDV_AUTOUNLOCK_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272266
    }
    ,{
         "name": "FVE_E_POLICY_USER_CONFIGURE_RDV_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272265
    }
    ,{
         "name": "FVE_E_POLICY_USER_ENABLE_RDV_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272264
    }
    ,{
         "name": "FVE_E_POLICY_USER_DISABLE_RDV_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272263
    }
    ,{
         "name": "FVE_E_POLICY_INVALID_PASSPHRASE_LENGTH"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272256
    }
    ,{
         "name": "FVE_E_POLICY_PASSPHRASE_TOO_SIMPLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272255
    }
    ,{
         "name": "FVE_E_RECOVERY_PARTITION"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272254
    }
    ,{
         "name": "FVE_E_POLICY_CONFLICT_FDV_RK_OFF_AUK_ON"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272253
    }
    ,{
         "name": "FVE_E_POLICY_CONFLICT_RDV_RK_OFF_AUK_ON"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272252
    }
    ,{
         "name": "FVE_E_NON_BITLOCKER_OID"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272251
    }
    ,{
         "name": "FVE_E_POLICY_PROHIBITS_SELFSIGNED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272250
    }
    ,{
         "name": "FVE_E_POLICY_CONFLICT_RO_AND_STARTUP_KEY_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272249
    }
    ,{
         "name": "FVE_E_CONV_RECOVERY_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272248
    }
    ,{
         "name": "FVE_E_VIRTUALIZED_SPACE_TOO_BIG"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272247
    }
    ,{
         "name": "FVE_E_POLICY_CONFLICT_OSV_RP_OFF_ADB_ON"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272240
    }
    ,{
         "name": "FVE_E_POLICY_CONFLICT_FDV_RP_OFF_ADB_ON"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272239
    }
    ,{
         "name": "FVE_E_POLICY_CONFLICT_RDV_RP_OFF_ADB_ON"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272238
    }
    ,{
         "name": "FVE_E_NON_BITLOCKER_KU"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272237
    }
    ,{
         "name": "FVE_E_PRIVATEKEY_AUTH_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272236
    }
    ,{
         "name": "FVE_E_REMOVAL_OF_DRA_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272235
    }
    ,{
         "name": "FVE_E_OPERATION_NOT_SUPPORTED_ON_VISTA_VOLUME"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272234
    }
    ,{
         "name": "FVE_E_CANT_LOCK_AUTOUNLOCK_ENABLED_VOLUME"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272233
    }
    ,{
         "name": "FVE_E_FIPS_HASH_KDF_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272232
    }
    ,{
         "name": "FVE_E_ENH_PIN_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272231
    }
    ,{
         "name": "FVE_E_INVALID_PIN_CHARS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272230
    }
    ,{
         "name": "FVE_E_INVALID_DATUM_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272229
    }
    ,{
         "name": "FVE_E_EFI_ONLY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272228
    }
    ,{
         "name": "FVE_E_MULTIPLE_NKP_CERTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272227
    }
    ,{
         "name": "FVE_E_REMOVAL_OF_NKP_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272226
    }
    ,{
         "name": "FVE_E_INVALID_NKP_CERT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272225
    }
    ,{
         "name": "FVE_E_NO_EXISTING_PIN"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272224
    }
    ,{
         "name": "FVE_E_PROTECTOR_CHANGE_PIN_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272223
    }
    ,{
         "name": "FVE_E_PIN_PROTECTOR_CHANGE_BY_STD_USER_DISALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272222
    }
    ,{
         "name": "FVE_E_PROTECTOR_CHANGE_MAX_PIN_CHANGE_ATTEMPTS_REACHED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272221
    }
    ,{
         "name": "FVE_E_POLICY_PASSPHRASE_REQUIRES_ASCII"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272220
    }
    ,{
         "name": "FVE_E_FULL_ENCRYPTION_NOT_ALLOWED_ON_TP_STORAGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272219
    }
    ,{
         "name": "FVE_E_WIPE_NOT_ALLOWED_ON_TP_STORAGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272218
    }
    ,{
         "name": "FVE_E_KEY_LENGTH_NOT_SUPPORTED_BY_EDRIVE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272217
    }
    ,{
         "name": "FVE_E_NO_EXISTING_PASSPHRASE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272216
    }
    ,{
         "name": "FVE_E_PROTECTOR_CHANGE_PASSPHRASE_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272215
    }
    ,{
         "name": "FVE_E_PASSPHRASE_TOO_LONG"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272214
    }
    ,{
         "name": "FVE_E_NO_PASSPHRASE_WITH_TPM"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272213
    }
    ,{
         "name": "FVE_E_NO_TPM_WITH_PASSPHRASE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272212
    }
    ,{
         "name": "FVE_E_NOT_ALLOWED_ON_CSV_STACK"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272211
    }
    ,{
         "name": "FVE_E_NOT_ALLOWED_ON_CLUSTER"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272210
    }
    ,{
         "name": "FVE_E_EDRIVE_NO_FAILOVER_TO_SW"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272209
    }
    ,{
         "name": "FVE_E_EDRIVE_BAND_IN_USE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272208
    }
    ,{
         "name": "FVE_E_EDRIVE_DISALLOWED_BY_GP"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272207
    }
    ,{
         "name": "FVE_E_EDRIVE_INCOMPATIBLE_VOLUME"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272206
    }
    ,{
         "name": "FVE_E_NOT_ALLOWED_TO_UPGRADE_WHILE_CONVERTING"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272205
    }
    ,{
         "name": "FVE_E_EDRIVE_DV_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272204
    }
    ,{
         "name": "FVE_E_NO_PREBOOT_KEYBOARD_DETECTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272203
    }
    ,{
         "name": "FVE_E_NO_PREBOOT_KEYBOARD_OR_WINRE_DETECTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272202
    }
    ,{
         "name": "FVE_E_POLICY_REQUIRES_STARTUP_PIN_ON_TOUCH_DEVICE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272201
    }
    ,{
         "name": "FVE_E_POLICY_REQUIRES_RECOVERY_PASSWORD_ON_TOUCH_DEVICE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272200
    }
    ,{
         "name": "FVE_E_WIPE_CANCEL_NOT_APPLICABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272199
    }
    ,{
         "name": "FVE_E_SECUREBOOT_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272198
    }
    ,{
         "name": "FVE_E_SECUREBOOT_CONFIGURATION_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272197
    }
    ,{
         "name": "FVE_E_EDRIVE_DRY_RUN_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272196
    }
    ,{
         "name": "FVE_E_SHADOW_COPY_PRESENT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272195
    }
    ,{
         "name": "FVE_E_POLICY_INVALID_ENHANCED_BCD_SETTINGS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272194
    }
    ,{
         "name": "FVE_E_EDRIVE_INCOMPATIBLE_FIRMWARE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272193
    }
    ,{
         "name": "FVE_E_PROTECTOR_CHANGE_MAX_PASSPHRASE_CHANGE_ATTEMPTS_REACHED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272192
    }
    ,{
         "name": "FVE_E_PASSPHRASE_PROTECTOR_CHANGE_BY_STD_USER_DISALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272191
    }
    ,{
         "name": "FVE_E_LIVEID_ACCOUNT_SUSPENDED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272190
    }
    ,{
         "name": "FVE_E_LIVEID_ACCOUNT_BLOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272189
    }
    ,{
         "name": "FVE_E_NOT_PROVISIONED_ON_ALL_VOLUMES"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272188
    }
    ,{
         "name": "FVE_E_DE_FIXED_DATA_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272187
    }
    ,{
         "name": "FVE_E_DE_HARDWARE_NOT_COMPLIANT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272186
    }
    ,{
         "name": "FVE_E_DE_WINRE_NOT_CONFIGURED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272185
    }
    ,{
         "name": "FVE_E_DE_PROTECTION_SUSPENDED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272184
    }
    ,{
         "name": "FVE_E_DE_OS_VOLUME_NOT_PROTECTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272183
    }
    ,{
         "name": "FVE_E_DE_DEVICE_LOCKEDOUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272182
    }
    ,{
         "name": "FVE_E_DE_PROTECTION_NOT_YET_ENABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272181
    }
    ,{
         "name": "FVE_E_INVALID_PIN_CHARS_DETAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272180
    }
    ,{
         "name": "FVE_E_DEVICE_LOCKOUT_COUNTER_UNAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272179
    }
    ,{
         "name": "FVE_E_DEVICELOCKOUT_COUNTER_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272178
    }
    ,{
         "name": "FVE_E_BUFFER_TOO_LARGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272177
    }
    ,{
         "name": "FVE_E_NO_SUCH_CAPABILITY_ON_TARGET"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272176
    }
    ,{
         "name": "FVE_E_DE_PREVENTED_FOR_OS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272175
    }
    ,{
         "name": "FVE_E_DE_VOLUME_OPTED_OUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272174
    }
    ,{
         "name": "FVE_E_DE_VOLUME_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272173
    }
    ,{
         "name": "FVE_E_EOW_NOT_SUPPORTED_IN_VERSION"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272172
    }
    ,{
         "name": "FVE_E_ADBACKUP_NOT_ENABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272171
    }
    ,{
         "name": "FVE_E_VOLUME_EXTEND_PREVENTS_EOW_DECRYPT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272170
    }
    ,{
         "name": "FVE_E_NOT_DE_VOLUME"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272169
    }
    ,{
         "name": "FVE_E_PROTECTION_CANNOT_BE_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272168
    }
    ,{
         "name": "FVE_E_OSV_KSR_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272167
    }
    ,{
         "name": "FVE_E_AD_BACKUP_REQUIRED_POLICY_NOT_SET_OS_DRIVE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272166
    }
    ,{
         "name": "FVE_E_AD_BACKUP_REQUIRED_POLICY_NOT_SET_FIXED_DRIVE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272165
    }
    ,{
         "name": "FVE_E_AD_BACKUP_REQUIRED_POLICY_NOT_SET_REMOVABLE_DRIVE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272164
    }
    ,{
         "name": "FVE_E_KEY_ROTATION_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272163
    }
    ,{
         "name": "FVE_E_EXECUTE_REQUEST_SENT_TOO_SOON"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272162
    }
    ,{
         "name": "FVE_E_KEY_ROTATION_NOT_ENABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272161
    }
    ,{
         "name": "FVE_E_DEVICE_NOT_JOINED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272160
    }
    ,{
         "name": "FVE_E_AAD_ENDPOINT_BUSY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144272159
    }
    ,{
         "name": "FWP_E_CALLOUT_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206847
    }
    ,{
         "name": "FWP_E_CONDITION_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206846
    }
    ,{
         "name": "FWP_E_FILTER_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206845
    }
    ,{
         "name": "FWP_E_LAYER_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206844
    }
    ,{
         "name": "FWP_E_PROVIDER_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206843
    }
    ,{
         "name": "FWP_E_PROVIDER_CONTEXT_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206842
    }
    ,{
         "name": "FWP_E_SUBLAYER_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206841
    }
    ,{
         "name": "FWP_E_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206840
    }
    ,{
         "name": "FWP_E_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206839
    }
    ,{
         "name": "FWP_E_IN_USE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206838
    }
    ,{
         "name": "FWP_E_DYNAMIC_SESSION_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206837
    }
    ,{
         "name": "FWP_E_WRONG_SESSION"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206836
    }
    ,{
         "name": "FWP_E_NO_TXN_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206835
    }
    ,{
         "name": "FWP_E_TXN_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206834
    }
    ,{
         "name": "FWP_E_TXN_ABORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206833
    }
    ,{
         "name": "FWP_E_SESSION_ABORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206832
    }
    ,{
         "name": "FWP_E_INCOMPATIBLE_TXN"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206831
    }
    ,{
         "name": "FWP_E_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206830
    }
    ,{
         "name": "FWP_E_NET_EVENTS_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206829
    }
    ,{
         "name": "FWP_E_INCOMPATIBLE_LAYER"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206828
    }
    ,{
         "name": "FWP_E_KM_CLIENTS_ONLY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206827
    }
    ,{
         "name": "FWP_E_LIFETIME_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206826
    }
    ,{
         "name": "FWP_E_BUILTIN_OBJECT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206825
    }
    ,{
         "name": "FWP_E_TOO_MANY_CALLOUTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206824
    }
    ,{
         "name": "FWP_E_NOTIFICATION_DROPPED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206823
    }
    ,{
         "name": "FWP_E_TRAFFIC_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206822
    }
    ,{
         "name": "FWP_E_INCOMPATIBLE_SA_STATE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206821
    }
    ,{
         "name": "FWP_E_NULL_POINTER"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206820
    }
    ,{
         "name": "FWP_E_INVALID_ENUMERATOR"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206819
    }
    ,{
         "name": "FWP_E_INVALID_FLAGS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206818
    }
    ,{
         "name": "FWP_E_INVALID_NET_MASK"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206817
    }
    ,{
         "name": "FWP_E_INVALID_RANGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206816
    }
    ,{
         "name": "FWP_E_INVALID_INTERVAL"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206815
    }
    ,{
         "name": "FWP_E_ZERO_LENGTH_ARRAY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206814
    }
    ,{
         "name": "FWP_E_NULL_DISPLAY_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206813
    }
    ,{
         "name": "FWP_E_INVALID_ACTION_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206812
    }
    ,{
         "name": "FWP_E_INVALID_WEIGHT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206811
    }
    ,{
         "name": "FWP_E_MATCH_TYPE_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206810
    }
    ,{
         "name": "FWP_E_TYPE_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206809
    }
    ,{
         "name": "FWP_E_OUT_OF_BOUNDS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206808
    }
    ,{
         "name": "FWP_E_RESERVED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206807
    }
    ,{
         "name": "FWP_E_DUPLICATE_CONDITION"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206806
    }
    ,{
         "name": "FWP_E_DUPLICATE_KEYMOD"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206805
    }
    ,{
         "name": "FWP_E_ACTION_INCOMPATIBLE_WITH_LAYER"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206804
    }
    ,{
         "name": "FWP_E_ACTION_INCOMPATIBLE_WITH_SUBLAYER"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206803
    }
    ,{
         "name": "FWP_E_CONTEXT_INCOMPATIBLE_WITH_LAYER"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206802
    }
    ,{
         "name": "FWP_E_CONTEXT_INCOMPATIBLE_WITH_CALLOUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206801
    }
    ,{
         "name": "FWP_E_INCOMPATIBLE_AUTH_METHOD"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206800
    }
    ,{
         "name": "FWP_E_INCOMPATIBLE_DH_GROUP"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206799
    }
    ,{
         "name": "FWP_E_EM_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206798
    }
    ,{
         "name": "FWP_E_NEVER_MATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206797
    }
    ,{
         "name": "FWP_E_PROVIDER_CONTEXT_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206796
    }
    ,{
         "name": "FWP_E_INVALID_PARAMETER"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206795
    }
    ,{
         "name": "FWP_E_TOO_MANY_SUBLAYERS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206794
    }
    ,{
         "name": "FWP_E_CALLOUT_NOTIFICATION_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206793
    }
    ,{
         "name": "FWP_E_INVALID_AUTH_TRANSFORM"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206792
    }
    ,{
         "name": "FWP_E_INVALID_CIPHER_TRANSFORM"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206791
    }
    ,{
         "name": "FWP_E_INCOMPATIBLE_CIPHER_TRANSFORM"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206790
    }
    ,{
         "name": "FWP_E_INVALID_TRANSFORM_COMBINATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206789
    }
    ,{
         "name": "FWP_E_DUPLICATE_AUTH_METHOD"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206788
    }
    ,{
         "name": "FWP_E_INVALID_TUNNEL_ENDPOINT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206787
    }
    ,{
         "name": "FWP_E_L2_DRIVER_NOT_READY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206786
    }
    ,{
         "name": "FWP_E_KEY_DICTATOR_ALREADY_REGISTERED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206785
    }
    ,{
         "name": "FWP_E_KEY_DICTATION_INVALID_KEYING_MATERIAL"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206784
    }
    ,{
         "name": "FWP_E_CONNECTIONS_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206783
    }
    ,{
         "name": "FWP_E_INVALID_DNS_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206782
    }
    ,{
         "name": "FWP_E_STILL_ON"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206781
    }
    ,{
         "name": "FWP_E_IKEEXT_NOT_RUNNING"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206780
    }
    ,{
         "name": "FWP_E_DROP_NOICMP"
        ,"type": {"kind":"Int32"}
        ,"value": -2144206588
    }
    ,{
         "name": "WS_S_ASYNC"
        ,"type": {"kind":"Int32"}
        ,"value": 3997696
    }
    ,{
         "name": "WS_S_END"
        ,"type": {"kind":"Int32"}
        ,"value": 3997697
    }
    ,{
         "name": "WS_E_INVALID_FORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485952
    }
    ,{
         "name": "WS_E_OBJECT_FAULTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485951
    }
    ,{
         "name": "WS_E_NUMERIC_OVERFLOW"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485950
    }
    ,{
         "name": "WS_E_INVALID_OPERATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485949
    }
    ,{
         "name": "WS_E_OPERATION_ABORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485948
    }
    ,{
         "name": "WS_E_ENDPOINT_ACCESS_DENIED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485947
    }
    ,{
         "name": "WS_E_OPERATION_TIMED_OUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485946
    }
    ,{
         "name": "WS_E_OPERATION_ABANDONED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485945
    }
    ,{
         "name": "WS_E_QUOTA_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485944
    }
    ,{
         "name": "WS_E_NO_TRANSLATION_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485943
    }
    ,{
         "name": "WS_E_SECURITY_VERIFICATION_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485942
    }
    ,{
         "name": "WS_E_ADDRESS_IN_USE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485941
    }
    ,{
         "name": "WS_E_ADDRESS_NOT_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485940
    }
    ,{
         "name": "WS_E_ENDPOINT_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485939
    }
    ,{
         "name": "WS_E_ENDPOINT_NOT_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485938
    }
    ,{
         "name": "WS_E_ENDPOINT_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485937
    }
    ,{
         "name": "WS_E_ENDPOINT_UNREACHABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485936
    }
    ,{
         "name": "WS_E_ENDPOINT_ACTION_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485935
    }
    ,{
         "name": "WS_E_ENDPOINT_TOO_BUSY"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485934
    }
    ,{
         "name": "WS_E_ENDPOINT_FAULT_RECEIVED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485933
    }
    ,{
         "name": "WS_E_ENDPOINT_DISCONNECTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485932
    }
    ,{
         "name": "WS_E_PROXY_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485931
    }
    ,{
         "name": "WS_E_PROXY_ACCESS_DENIED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485930
    }
    ,{
         "name": "WS_E_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485929
    }
    ,{
         "name": "WS_E_PROXY_REQUIRES_BASIC_AUTH"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485928
    }
    ,{
         "name": "WS_E_PROXY_REQUIRES_DIGEST_AUTH"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485927
    }
    ,{
         "name": "WS_E_PROXY_REQUIRES_NTLM_AUTH"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485926
    }
    ,{
         "name": "WS_E_PROXY_REQUIRES_NEGOTIATE_AUTH"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485925
    }
    ,{
         "name": "WS_E_SERVER_REQUIRES_BASIC_AUTH"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485924
    }
    ,{
         "name": "WS_E_SERVER_REQUIRES_DIGEST_AUTH"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485923
    }
    ,{
         "name": "WS_E_SERVER_REQUIRES_NTLM_AUTH"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485922
    }
    ,{
         "name": "WS_E_SERVER_REQUIRES_NEGOTIATE_AUTH"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485921
    }
    ,{
         "name": "WS_E_INVALID_ENDPOINT_URL"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485920
    }
    ,{
         "name": "WS_E_OTHER"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485919
    }
    ,{
         "name": "WS_E_SECURITY_TOKEN_EXPIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485918
    }
    ,{
         "name": "WS_E_SECURITY_SYSTEM_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143485917
    }
    ,{
         "name": "ERROR_NDIS_INTERFACE_CLOSING"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891522
    }
    ,{
         "name": "ERROR_NDIS_BAD_VERSION"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891524
    }
    ,{
         "name": "ERROR_NDIS_BAD_CHARACTERISTICS"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891525
    }
    ,{
         "name": "ERROR_NDIS_ADAPTER_NOT_FOUND"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891526
    }
    ,{
         "name": "ERROR_NDIS_OPEN_FAILED"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891527
    }
    ,{
         "name": "ERROR_NDIS_DEVICE_FAILED"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891528
    }
    ,{
         "name": "ERROR_NDIS_MULTICAST_FULL"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891529
    }
    ,{
         "name": "ERROR_NDIS_MULTICAST_EXISTS"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891530
    }
    ,{
         "name": "ERROR_NDIS_MULTICAST_NOT_FOUND"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891531
    }
    ,{
         "name": "ERROR_NDIS_REQUEST_ABORTED"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891532
    }
    ,{
         "name": "ERROR_NDIS_RESET_IN_PROGRESS"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891533
    }
    ,{
         "name": "ERROR_NDIS_NOT_SUPPORTED"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891707
    }
    ,{
         "name": "ERROR_NDIS_INVALID_PACKET"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891535
    }
    ,{
         "name": "ERROR_NDIS_ADAPTER_NOT_READY"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891537
    }
    ,{
         "name": "ERROR_NDIS_INVALID_LENGTH"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891540
    }
    ,{
         "name": "ERROR_NDIS_INVALID_DATA"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891541
    }
    ,{
         "name": "ERROR_NDIS_BUFFER_TOO_SHORT"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891542
    }
    ,{
         "name": "ERROR_NDIS_INVALID_OID"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891543
    }
    ,{
         "name": "ERROR_NDIS_ADAPTER_REMOVED"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891544
    }
    ,{
         "name": "ERROR_NDIS_UNSUPPORTED_MEDIA"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891545
    }
    ,{
         "name": "ERROR_NDIS_GROUP_ADDRESS_IN_USE"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891546
    }
    ,{
         "name": "ERROR_NDIS_FILE_NOT_FOUND"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891547
    }
    ,{
         "name": "ERROR_NDIS_ERROR_READING_FILE"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891548
    }
    ,{
         "name": "ERROR_NDIS_ALREADY_MAPPED"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891549
    }
    ,{
         "name": "ERROR_NDIS_RESOURCE_CONFLICT"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891550
    }
    ,{
         "name": "ERROR_NDIS_MEDIA_DISCONNECTED"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891551
    }
    ,{
         "name": "ERROR_NDIS_INVALID_ADDRESS"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891554
    }
    ,{
         "name": "ERROR_NDIS_INVALID_DEVICE_REQUEST"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891536
    }
    ,{
         "name": "ERROR_NDIS_PAUSED"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891562
    }
    ,{
         "name": "ERROR_NDIS_INTERFACE_NOT_FOUND"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891563
    }
    ,{
         "name": "ERROR_NDIS_UNSUPPORTED_REVISION"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891564
    }
    ,{
         "name": "ERROR_NDIS_INVALID_PORT"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891565
    }
    ,{
         "name": "ERROR_NDIS_INVALID_PORT_STATE"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891566
    }
    ,{
         "name": "ERROR_NDIS_LOW_POWER_STATE"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891567
    }
    ,{
         "name": "ERROR_NDIS_REINIT_REQUIRED"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891568
    }
    ,{
         "name": "ERROR_NDIS_NO_QUEUES"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150891569
    }
    ,{
         "name": "ERROR_NDIS_DOT11_AUTO_CONFIG_ENABLED"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150899712
    }
    ,{
         "name": "ERROR_NDIS_DOT11_MEDIA_IN_USE"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150899713
    }
    ,{
         "name": "ERROR_NDIS_DOT11_POWER_STATE_INVALID"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150899714
    }
    ,{
         "name": "ERROR_NDIS_PM_WOL_PATTERN_LIST_FULL"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150899715
    }
    ,{
         "name": "ERROR_NDIS_PM_PROTOCOL_OFFLOAD_LIST_FULL"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150899716
    }
    ,{
         "name": "ERROR_NDIS_DOT11_AP_CHANNEL_CURRENTLY_NOT_AVAILABLE"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150899717
    }
    ,{
         "name": "ERROR_NDIS_DOT11_AP_BAND_CURRENTLY_NOT_AVAILABLE"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150899718
    }
    ,{
         "name": "ERROR_NDIS_DOT11_AP_CHANNEL_NOT_ALLOWED"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150899719
    }
    ,{
         "name": "ERROR_NDIS_DOT11_AP_BAND_NOT_ALLOWED"
        ,"type": {"kind":"UInt32"}
        ,"value": 2150899720
    }
    ,{
         "name": "ERROR_NDIS_INDICATION_REQUIRED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3407873
    }
    ,{
         "name": "ERROR_NDIS_OFFLOAD_POLICY"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224637455
    }
    ,{
         "name": "ERROR_NDIS_OFFLOAD_CONNECTION_REJECTED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224637458
    }
    ,{
         "name": "ERROR_NDIS_OFFLOAD_PATH_REJECTED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224637459
    }
    ,{
         "name": "ERROR_HV_INVALID_HYPERCALL_CODE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698882
    }
    ,{
         "name": "ERROR_HV_INVALID_HYPERCALL_INPUT"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698883
    }
    ,{
         "name": "ERROR_HV_INVALID_ALIGNMENT"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698884
    }
    ,{
         "name": "ERROR_HV_INVALID_PARAMETER"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698885
    }
    ,{
         "name": "ERROR_HV_ACCESS_DENIED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698886
    }
    ,{
         "name": "ERROR_HV_INVALID_PARTITION_STATE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698887
    }
    ,{
         "name": "ERROR_HV_OPERATION_DENIED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698888
    }
    ,{
         "name": "ERROR_HV_UNKNOWN_PROPERTY"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698889
    }
    ,{
         "name": "ERROR_HV_PROPERTY_VALUE_OUT_OF_RANGE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698890
    }
    ,{
         "name": "ERROR_HV_INSUFFICIENT_MEMORY"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698891
    }
    ,{
         "name": "ERROR_HV_PARTITION_TOO_DEEP"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698892
    }
    ,{
         "name": "ERROR_HV_INVALID_PARTITION_ID"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698893
    }
    ,{
         "name": "ERROR_HV_INVALID_VP_INDEX"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698894
    }
    ,{
         "name": "ERROR_HV_INVALID_PORT_ID"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698897
    }
    ,{
         "name": "ERROR_HV_INVALID_CONNECTION_ID"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698898
    }
    ,{
         "name": "ERROR_HV_INSUFFICIENT_BUFFERS"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698899
    }
    ,{
         "name": "ERROR_HV_NOT_ACKNOWLEDGED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698900
    }
    ,{
         "name": "ERROR_HV_INVALID_VP_STATE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698901
    }
    ,{
         "name": "ERROR_HV_ACKNOWLEDGED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698902
    }
    ,{
         "name": "ERROR_HV_INVALID_SAVE_RESTORE_STATE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698903
    }
    ,{
         "name": "ERROR_HV_INVALID_SYNIC_STATE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698904
    }
    ,{
         "name": "ERROR_HV_OBJECT_IN_USE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698905
    }
    ,{
         "name": "ERROR_HV_INVALID_PROXIMITY_DOMAIN_INFO"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698906
    }
    ,{
         "name": "ERROR_HV_NO_DATA"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698907
    }
    ,{
         "name": "ERROR_HV_INACTIVE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698908
    }
    ,{
         "name": "ERROR_HV_NO_RESOURCES"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698909
    }
    ,{
         "name": "ERROR_HV_FEATURE_UNAVAILABLE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698910
    }
    ,{
         "name": "ERROR_HV_INSUFFICIENT_BUFFER"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698931
    }
    ,{
         "name": "ERROR_HV_INSUFFICIENT_DEVICE_DOMAINS"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698936
    }
    ,{
         "name": "ERROR_HV_CPUID_FEATURE_VALIDATION"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698940
    }
    ,{
         "name": "ERROR_HV_CPUID_XSAVE_FEATURE_VALIDATION"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698941
    }
    ,{
         "name": "ERROR_HV_PROCESSOR_STARTUP_TIMEOUT"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698942
    }
    ,{
         "name": "ERROR_HV_SMX_ENABLED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698943
    }
    ,{
         "name": "ERROR_HV_INVALID_LP_INDEX"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698945
    }
    ,{
         "name": "ERROR_HV_INVALID_REGISTER_VALUE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698960
    }
    ,{
         "name": "ERROR_HV_INVALID_VTL_STATE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698961
    }
    ,{
         "name": "ERROR_HV_NX_NOT_DETECTED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698965
    }
    ,{
         "name": "ERROR_HV_INVALID_DEVICE_ID"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698967
    }
    ,{
         "name": "ERROR_HV_INVALID_DEVICE_STATE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698968
    }
    ,{
         "name": "ERROR_HV_PENDING_PAGE_REQUESTS"
        ,"type": {"kind":"UInt32"}
        ,"value": 3473497
    }
    ,{
         "name": "ERROR_HV_PAGE_REQUEST_INVALID"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698976
    }
    ,{
         "name": "ERROR_HV_INVALID_CPU_GROUP_ID"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698991
    }
    ,{
         "name": "ERROR_HV_INVALID_CPU_GROUP_STATE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698992
    }
    ,{
         "name": "ERROR_HV_OPERATION_FAILED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698993
    }
    ,{
         "name": "ERROR_HV_NOT_ALLOWED_WITH_NESTED_VIRT_ACTIVE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698994
    }
    ,{
         "name": "ERROR_HV_INSUFFICIENT_ROOT_MEMORY"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698995
    }
    ,{
         "name": "ERROR_HV_EVENT_BUFFER_ALREADY_FREED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698996
    }
    ,{
         "name": "ERROR_HV_INSUFFICIENT_CONTIGUOUS_MEMORY"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224698997
    }
    ,{
         "name": "ERROR_HV_NOT_PRESENT"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224702976
    }
    ,{
         "name": "ERROR_VID_DUPLICATE_HANDLER"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829953
    }
    ,{
         "name": "ERROR_VID_TOO_MANY_HANDLERS"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829954
    }
    ,{
         "name": "ERROR_VID_QUEUE_FULL"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829955
    }
    ,{
         "name": "ERROR_VID_HANDLER_NOT_PRESENT"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829956
    }
    ,{
         "name": "ERROR_VID_INVALID_OBJECT_NAME"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829957
    }
    ,{
         "name": "ERROR_VID_PARTITION_NAME_TOO_LONG"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829958
    }
    ,{
         "name": "ERROR_VID_MESSAGE_QUEUE_NAME_TOO_LONG"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829959
    }
    ,{
         "name": "ERROR_VID_PARTITION_ALREADY_EXISTS"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829960
    }
    ,{
         "name": "ERROR_VID_PARTITION_DOES_NOT_EXIST"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829961
    }
    ,{
         "name": "ERROR_VID_PARTITION_NAME_NOT_FOUND"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829962
    }
    ,{
         "name": "ERROR_VID_MESSAGE_QUEUE_ALREADY_EXISTS"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829963
    }
    ,{
         "name": "ERROR_VID_EXCEEDED_MBP_ENTRY_MAP_LIMIT"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829964
    }
    ,{
         "name": "ERROR_VID_MB_STILL_REFERENCED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829965
    }
    ,{
         "name": "ERROR_VID_CHILD_GPA_PAGE_SET_CORRUPTED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829966
    }
    ,{
         "name": "ERROR_VID_INVALID_NUMA_SETTINGS"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829967
    }
    ,{
         "name": "ERROR_VID_INVALID_NUMA_NODE_INDEX"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829968
    }
    ,{
         "name": "ERROR_VID_NOTIFICATION_QUEUE_ALREADY_ASSOCIATED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829969
    }
    ,{
         "name": "ERROR_VID_INVALID_MEMORY_BLOCK_HANDLE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829970
    }
    ,{
         "name": "ERROR_VID_PAGE_RANGE_OVERFLOW"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829971
    }
    ,{
         "name": "ERROR_VID_INVALID_MESSAGE_QUEUE_HANDLE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829972
    }
    ,{
         "name": "ERROR_VID_INVALID_GPA_RANGE_HANDLE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829973
    }
    ,{
         "name": "ERROR_VID_NO_MEMORY_BLOCK_NOTIFICATION_QUEUE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829974
    }
    ,{
         "name": "ERROR_VID_MEMORY_BLOCK_LOCK_COUNT_EXCEEDED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829975
    }
    ,{
         "name": "ERROR_VID_INVALID_PPM_HANDLE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829976
    }
    ,{
         "name": "ERROR_VID_MBPS_ARE_LOCKED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829977
    }
    ,{
         "name": "ERROR_VID_MESSAGE_QUEUE_CLOSED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829978
    }
    ,{
         "name": "ERROR_VID_VIRTUAL_PROCESSOR_LIMIT_EXCEEDED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829979
    }
    ,{
         "name": "ERROR_VID_STOP_PENDING"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829980
    }
    ,{
         "name": "ERROR_VID_INVALID_PROCESSOR_STATE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829981
    }
    ,{
         "name": "ERROR_VID_EXCEEDED_KM_CONTEXT_COUNT_LIMIT"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829982
    }
    ,{
         "name": "ERROR_VID_KM_INTERFACE_ALREADY_INITIALIZED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829983
    }
    ,{
         "name": "ERROR_VID_MB_PROPERTY_ALREADY_SET_RESET"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829984
    }
    ,{
         "name": "ERROR_VID_MMIO_RANGE_DESTROYED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829985
    }
    ,{
         "name": "ERROR_VID_INVALID_CHILD_GPA_PAGE_SET"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829986
    }
    ,{
         "name": "ERROR_VID_RESERVE_PAGE_SET_IS_BEING_USED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829987
    }
    ,{
         "name": "ERROR_VID_RESERVE_PAGE_SET_TOO_SMALL"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829988
    }
    ,{
         "name": "ERROR_VID_MBP_ALREADY_LOCKED_USING_RESERVED_PAGE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829989
    }
    ,{
         "name": "ERROR_VID_MBP_COUNT_EXCEEDED_LIMIT"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829990
    }
    ,{
         "name": "ERROR_VID_SAVED_STATE_CORRUPT"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829991
    }
    ,{
         "name": "ERROR_VID_SAVED_STATE_UNRECOGNIZED_ITEM"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829992
    }
    ,{
         "name": "ERROR_VID_SAVED_STATE_INCOMPATIBLE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829993
    }
    ,{
         "name": "ERROR_VID_VTL_ACCESS_DENIED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224829994
    }
    ,{
         "name": "ERROR_VMCOMPUTE_TERMINATED_DURING_START"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224830208
    }
    ,{
         "name": "ERROR_VMCOMPUTE_IMAGE_MISMATCH"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224830209
    }
    ,{
         "name": "ERROR_VMCOMPUTE_HYPERV_NOT_INSTALLED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224830210
    }
    ,{
         "name": "ERROR_VMCOMPUTE_OPERATION_PENDING"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224830211
    }
    ,{
         "name": "ERROR_VMCOMPUTE_TOO_MANY_NOTIFICATIONS"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224830212
    }
    ,{
         "name": "ERROR_VMCOMPUTE_INVALID_STATE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224830213
    }
    ,{
         "name": "ERROR_VMCOMPUTE_UNEXPECTED_EXIT"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224830214
    }
    ,{
         "name": "ERROR_VMCOMPUTE_TERMINATED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224830215
    }
    ,{
         "name": "ERROR_VMCOMPUTE_CONNECT_FAILED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224830216
    }
    ,{
         "name": "ERROR_VMCOMPUTE_TIMEOUT"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224830217
    }
    ,{
         "name": "ERROR_VMCOMPUTE_CONNECTION_CLOSED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224830218
    }
    ,{
         "name": "ERROR_VMCOMPUTE_UNKNOWN_MESSAGE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224830219
    }
    ,{
         "name": "ERROR_VMCOMPUTE_UNSUPPORTED_PROTOCOL_VERSION"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224830220
    }
    ,{
         "name": "ERROR_VMCOMPUTE_INVALID_JSON"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224830221
    }
    ,{
         "name": "ERROR_VMCOMPUTE_SYSTEM_NOT_FOUND"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224830222
    }
    ,{
         "name": "ERROR_VMCOMPUTE_SYSTEM_ALREADY_EXISTS"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224830223
    }
    ,{
         "name": "ERROR_VMCOMPUTE_SYSTEM_ALREADY_STOPPED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224830224
    }
    ,{
         "name": "ERROR_VMCOMPUTE_PROTOCOL_ERROR"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224830225
    }
    ,{
         "name": "ERROR_VMCOMPUTE_INVALID_LAYER"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224830226
    }
    ,{
         "name": "ERROR_VMCOMPUTE_WINDOWS_INSIDER_REQUIRED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224830227
    }
    ,{
         "name": "HCS_E_TERMINATED_DURING_START"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878912
    }
    ,{
         "name": "HCS_E_IMAGE_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878911
    }
    ,{
         "name": "HCS_E_HYPERV_NOT_INSTALLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878910
    }
    ,{
         "name": "HCS_E_INVALID_STATE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878907
    }
    ,{
         "name": "HCS_E_UNEXPECTED_EXIT"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878906
    }
    ,{
         "name": "HCS_E_TERMINATED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878905
    }
    ,{
         "name": "HCS_E_CONNECT_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878904
    }
    ,{
         "name": "HCS_E_CONNECTION_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878903
    }
    ,{
         "name": "HCS_E_CONNECTION_CLOSED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878902
    }
    ,{
         "name": "HCS_E_UNKNOWN_MESSAGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878901
    }
    ,{
         "name": "HCS_E_UNSUPPORTED_PROTOCOL_VERSION"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878900
    }
    ,{
         "name": "HCS_E_INVALID_JSON"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878899
    }
    ,{
         "name": "HCS_E_SYSTEM_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878898
    }
    ,{
         "name": "HCS_E_SYSTEM_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878897
    }
    ,{
         "name": "HCS_E_SYSTEM_ALREADY_STOPPED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878896
    }
    ,{
         "name": "HCS_E_PROTOCOL_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878895
    }
    ,{
         "name": "HCS_E_INVALID_LAYER"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878894
    }
    ,{
         "name": "HCS_E_WINDOWS_INSIDER_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878893
    }
    ,{
         "name": "HCS_E_SERVICE_NOT_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878892
    }
    ,{
         "name": "HCS_E_OPERATION_NOT_STARTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878891
    }
    ,{
         "name": "HCS_E_OPERATION_ALREADY_STARTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878890
    }
    ,{
         "name": "HCS_E_OPERATION_PENDING"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878889
    }
    ,{
         "name": "HCS_E_OPERATION_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878888
    }
    ,{
         "name": "HCS_E_OPERATION_SYSTEM_CALLBACK_ALREADY_SET"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878887
    }
    ,{
         "name": "HCS_E_OPERATION_RESULT_ALLOCATION_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878886
    }
    ,{
         "name": "HCS_E_ACCESS_DENIED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878885
    }
    ,{
         "name": "HCS_E_GUEST_CRITICAL_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878884
    }
    ,{
         "name": "HCS_E_PROCESS_INFO_NOT_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878883
    }
    ,{
         "name": "HCS_E_SERVICE_DISCONNECT"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878882
    }
    ,{
         "name": "HCS_E_PROCESS_ALREADY_STOPPED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878881
    }
    ,{
         "name": "ERROR_VNET_VIRTUAL_SWITCH_NAME_NOT_FOUND"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224830464
    }
    ,{
         "name": "ERROR_VID_REMOTE_NODE_PARENT_GPA_PAGES_USED"
        ,"type": {"kind":"UInt32"}
        ,"value": 2151088129
    }
    ,{
         "name": "WHV_E_UNKNOWN_CAPABILITY"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878400
    }
    ,{
         "name": "WHV_E_INSUFFICIENT_BUFFER"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878399
    }
    ,{
         "name": "WHV_E_UNKNOWN_PROPERTY"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878398
    }
    ,{
         "name": "WHV_E_UNSUPPORTED_HYPERVISOR_CONFIG"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878397
    }
    ,{
         "name": "WHV_E_INVALID_PARTITION_CONFIG"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878396
    }
    ,{
         "name": "WHV_E_GPA_RANGE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878395
    }
    ,{
         "name": "WHV_E_VP_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878394
    }
    ,{
         "name": "WHV_E_VP_DOES_NOT_EXIST"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878393
    }
    ,{
         "name": "WHV_E_INVALID_VP_STATE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878392
    }
    ,{
         "name": "WHV_E_INVALID_VP_REGISTER_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878391
    }
    ,{
         "name": "WHV_E_UNSUPPORTED_PROCESSOR_CONFIG"
        ,"type": {"kind":"Int32"}
        ,"value": -2143878384
    }
    ,{
         "name": "ERROR_VSMB_SAVED_STATE_FILE_NOT_FOUND"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224830976
    }
    ,{
         "name": "ERROR_VSMB_SAVED_STATE_CORRUPT"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224830977
    }
    ,{
         "name": "VM_SAVED_STATE_DUMP_E_PARTITION_STATE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -1070136064
    }
    ,{
         "name": "VM_SAVED_STATE_DUMP_E_GUEST_MEMORY_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -1070136063
    }
    ,{
         "name": "VM_SAVED_STATE_DUMP_E_NO_VP_FOUND_IN_PARTITION_STATE"
        ,"type": {"kind":"Int32"}
        ,"value": -1070136062
    }
    ,{
         "name": "VM_SAVED_STATE_DUMP_E_NESTED_VIRTUALIZATION_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -1070136061
    }
    ,{
         "name": "VM_SAVED_STATE_DUMP_E_WINDOWS_KERNEL_IMAGE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -1070136060
    }
    ,{
         "name": "VM_SAVED_STATE_DUMP_E_PXE_NOT_PRESENT"
        ,"type": {"kind":"Int32"}
        ,"value": -1070136059
    }
    ,{
         "name": "VM_SAVED_STATE_DUMP_E_PDPTE_NOT_PRESENT"
        ,"type": {"kind":"Int32"}
        ,"value": -1070136058
    }
    ,{
         "name": "VM_SAVED_STATE_DUMP_E_PDE_NOT_PRESENT"
        ,"type": {"kind":"Int32"}
        ,"value": -1070136057
    }
    ,{
         "name": "VM_SAVED_STATE_DUMP_E_PTE_NOT_PRESENT"
        ,"type": {"kind":"Int32"}
        ,"value": -1070136056
    }
    ,{
         "name": "ERROR_VOLMGR_INCOMPLETE_REGENERATION"
        ,"type": {"kind":"UInt32"}
        ,"value": 2151153665
    }
    ,{
         "name": "ERROR_VOLMGR_INCOMPLETE_DISK_MIGRATION"
        ,"type": {"kind":"UInt32"}
        ,"value": 2151153666
    }
    ,{
         "name": "ERROR_VOLMGR_DATABASE_FULL"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895489
    }
    ,{
         "name": "ERROR_VOLMGR_DISK_CONFIGURATION_CORRUPTED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895490
    }
    ,{
         "name": "ERROR_VOLMGR_DISK_CONFIGURATION_NOT_IN_SYNC"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895491
    }
    ,{
         "name": "ERROR_VOLMGR_PACK_CONFIG_UPDATE_FAILED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895492
    }
    ,{
         "name": "ERROR_VOLMGR_DISK_CONTAINS_NON_SIMPLE_VOLUME"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895493
    }
    ,{
         "name": "ERROR_VOLMGR_DISK_DUPLICATE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895494
    }
    ,{
         "name": "ERROR_VOLMGR_DISK_DYNAMIC"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895495
    }
    ,{
         "name": "ERROR_VOLMGR_DISK_ID_INVALID"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895496
    }
    ,{
         "name": "ERROR_VOLMGR_DISK_INVALID"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895497
    }
    ,{
         "name": "ERROR_VOLMGR_DISK_LAST_VOTER"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895498
    }
    ,{
         "name": "ERROR_VOLMGR_DISK_LAYOUT_INVALID"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895499
    }
    ,{
         "name": "ERROR_VOLMGR_DISK_LAYOUT_NON_BASIC_BETWEEN_BASIC_PARTITIONS"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895500
    }
    ,{
         "name": "ERROR_VOLMGR_DISK_LAYOUT_NOT_CYLINDER_ALIGNED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895501
    }
    ,{
         "name": "ERROR_VOLMGR_DISK_LAYOUT_PARTITIONS_TOO_SMALL"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895502
    }
    ,{
         "name": "ERROR_VOLMGR_DISK_LAYOUT_PRIMARY_BETWEEN_LOGICAL_PARTITIONS"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895503
    }
    ,{
         "name": "ERROR_VOLMGR_DISK_LAYOUT_TOO_MANY_PARTITIONS"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895504
    }
    ,{
         "name": "ERROR_VOLMGR_DISK_MISSING"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895505
    }
    ,{
         "name": "ERROR_VOLMGR_DISK_NOT_EMPTY"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895506
    }
    ,{
         "name": "ERROR_VOLMGR_DISK_NOT_ENOUGH_SPACE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895507
    }
    ,{
         "name": "ERROR_VOLMGR_DISK_REVECTORING_FAILED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895508
    }
    ,{
         "name": "ERROR_VOLMGR_DISK_SECTOR_SIZE_INVALID"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895509
    }
    ,{
         "name": "ERROR_VOLMGR_DISK_SET_NOT_CONTAINED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895510
    }
    ,{
         "name": "ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_MEMBERS"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895511
    }
    ,{
         "name": "ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_PLEXES"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895512
    }
    ,{
         "name": "ERROR_VOLMGR_DYNAMIC_DISK_NOT_SUPPORTED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895513
    }
    ,{
         "name": "ERROR_VOLMGR_EXTENT_ALREADY_USED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895514
    }
    ,{
         "name": "ERROR_VOLMGR_EXTENT_NOT_CONTIGUOUS"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895515
    }
    ,{
         "name": "ERROR_VOLMGR_EXTENT_NOT_IN_PUBLIC_REGION"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895516
    }
    ,{
         "name": "ERROR_VOLMGR_EXTENT_NOT_SECTOR_ALIGNED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895517
    }
    ,{
         "name": "ERROR_VOLMGR_EXTENT_OVERLAPS_EBR_PARTITION"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895518
    }
    ,{
         "name": "ERROR_VOLMGR_EXTENT_VOLUME_LENGTHS_DO_NOT_MATCH"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895519
    }
    ,{
         "name": "ERROR_VOLMGR_FAULT_TOLERANT_NOT_SUPPORTED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895520
    }
    ,{
         "name": "ERROR_VOLMGR_INTERLEAVE_LENGTH_INVALID"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895521
    }
    ,{
         "name": "ERROR_VOLMGR_MAXIMUM_REGISTERED_USERS"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895522
    }
    ,{
         "name": "ERROR_VOLMGR_MEMBER_IN_SYNC"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895523
    }
    ,{
         "name": "ERROR_VOLMGR_MEMBER_INDEX_DUPLICATE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895524
    }
    ,{
         "name": "ERROR_VOLMGR_MEMBER_INDEX_INVALID"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895525
    }
    ,{
         "name": "ERROR_VOLMGR_MEMBER_MISSING"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895526
    }
    ,{
         "name": "ERROR_VOLMGR_MEMBER_NOT_DETACHED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895527
    }
    ,{
         "name": "ERROR_VOLMGR_MEMBER_REGENERATING"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895528
    }
    ,{
         "name": "ERROR_VOLMGR_ALL_DISKS_FAILED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895529
    }
    ,{
         "name": "ERROR_VOLMGR_NO_REGISTERED_USERS"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895530
    }
    ,{
         "name": "ERROR_VOLMGR_NO_SUCH_USER"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895531
    }
    ,{
         "name": "ERROR_VOLMGR_NOTIFICATION_RESET"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895532
    }
    ,{
         "name": "ERROR_VOLMGR_NUMBER_OF_MEMBERS_INVALID"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895533
    }
    ,{
         "name": "ERROR_VOLMGR_NUMBER_OF_PLEXES_INVALID"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895534
    }
    ,{
         "name": "ERROR_VOLMGR_PACK_DUPLICATE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895535
    }
    ,{
         "name": "ERROR_VOLMGR_PACK_ID_INVALID"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895536
    }
    ,{
         "name": "ERROR_VOLMGR_PACK_INVALID"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895537
    }
    ,{
         "name": "ERROR_VOLMGR_PACK_NAME_INVALID"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895538
    }
    ,{
         "name": "ERROR_VOLMGR_PACK_OFFLINE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895539
    }
    ,{
         "name": "ERROR_VOLMGR_PACK_HAS_QUORUM"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895540
    }
    ,{
         "name": "ERROR_VOLMGR_PACK_WITHOUT_QUORUM"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895541
    }
    ,{
         "name": "ERROR_VOLMGR_PARTITION_STYLE_INVALID"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895542
    }
    ,{
         "name": "ERROR_VOLMGR_PARTITION_UPDATE_FAILED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895543
    }
    ,{
         "name": "ERROR_VOLMGR_PLEX_IN_SYNC"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895544
    }
    ,{
         "name": "ERROR_VOLMGR_PLEX_INDEX_DUPLICATE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895545
    }
    ,{
         "name": "ERROR_VOLMGR_PLEX_INDEX_INVALID"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895546
    }
    ,{
         "name": "ERROR_VOLMGR_PLEX_LAST_ACTIVE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895547
    }
    ,{
         "name": "ERROR_VOLMGR_PLEX_MISSING"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895548
    }
    ,{
         "name": "ERROR_VOLMGR_PLEX_REGENERATING"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895549
    }
    ,{
         "name": "ERROR_VOLMGR_PLEX_TYPE_INVALID"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895550
    }
    ,{
         "name": "ERROR_VOLMGR_PLEX_NOT_RAID5"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895551
    }
    ,{
         "name": "ERROR_VOLMGR_PLEX_NOT_SIMPLE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895552
    }
    ,{
         "name": "ERROR_VOLMGR_STRUCTURE_SIZE_INVALID"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895553
    }
    ,{
         "name": "ERROR_VOLMGR_TOO_MANY_NOTIFICATION_REQUESTS"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895554
    }
    ,{
         "name": "ERROR_VOLMGR_TRANSACTION_IN_PROGRESS"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895555
    }
    ,{
         "name": "ERROR_VOLMGR_UNEXPECTED_DISK_LAYOUT_CHANGE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895556
    }
    ,{
         "name": "ERROR_VOLMGR_VOLUME_CONTAINS_MISSING_DISK"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895557
    }
    ,{
         "name": "ERROR_VOLMGR_VOLUME_ID_INVALID"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895558
    }
    ,{
         "name": "ERROR_VOLMGR_VOLUME_LENGTH_INVALID"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895559
    }
    ,{
         "name": "ERROR_VOLMGR_VOLUME_LENGTH_NOT_SECTOR_SIZE_MULTIPLE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895560
    }
    ,{
         "name": "ERROR_VOLMGR_VOLUME_NOT_MIRRORED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895561
    }
    ,{
         "name": "ERROR_VOLMGR_VOLUME_NOT_RETAINED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895562
    }
    ,{
         "name": "ERROR_VOLMGR_VOLUME_OFFLINE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895563
    }
    ,{
         "name": "ERROR_VOLMGR_VOLUME_RETAINED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895564
    }
    ,{
         "name": "ERROR_VOLMGR_NUMBER_OF_EXTENTS_INVALID"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895565
    }
    ,{
         "name": "ERROR_VOLMGR_DIFFERENT_SECTOR_SIZE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895566
    }
    ,{
         "name": "ERROR_VOLMGR_BAD_BOOT_DISK"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895567
    }
    ,{
         "name": "ERROR_VOLMGR_PACK_CONFIG_OFFLINE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895568
    }
    ,{
         "name": "ERROR_VOLMGR_PACK_CONFIG_ONLINE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895569
    }
    ,{
         "name": "ERROR_VOLMGR_NOT_PRIMARY_PACK"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895570
    }
    ,{
         "name": "ERROR_VOLMGR_PACK_LOG_UPDATE_FAILED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895571
    }
    ,{
         "name": "ERROR_VOLMGR_NUMBER_OF_DISKS_IN_PLEX_INVALID"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895572
    }
    ,{
         "name": "ERROR_VOLMGR_NUMBER_OF_DISKS_IN_MEMBER_INVALID"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895573
    }
    ,{
         "name": "ERROR_VOLMGR_VOLUME_MIRRORED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895574
    }
    ,{
         "name": "ERROR_VOLMGR_PLEX_NOT_SIMPLE_SPANNED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895575
    }
    ,{
         "name": "ERROR_VOLMGR_NO_VALID_LOG_COPIES"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895576
    }
    ,{
         "name": "ERROR_VOLMGR_PRIMARY_PACK_PRESENT"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895577
    }
    ,{
         "name": "ERROR_VOLMGR_NUMBER_OF_DISKS_INVALID"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895578
    }
    ,{
         "name": "ERROR_VOLMGR_MIRROR_NOT_SUPPORTED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895579
    }
    ,{
         "name": "ERROR_VOLMGR_RAID5_NOT_SUPPORTED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224895580
    }
    ,{
         "name": "ERROR_BCD_NOT_ALL_ENTRIES_IMPORTED"
        ,"type": {"kind":"UInt32"}
        ,"value": 2151219201
    }
    ,{
         "name": "ERROR_BCD_TOO_MANY_ELEMENTS"
        ,"type": {"kind":"UInt32"}
        ,"value": 3224961026
    }
    ,{
         "name": "ERROR_BCD_NOT_ALL_ENTRIES_SYNCHRONIZED"
        ,"type": {"kind":"UInt32"}
        ,"value": 2151219203
    }
    ,{
         "name": "ERROR_VHD_DRIVE_FOOTER_MISSING"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026561
    }
    ,{
         "name": "ERROR_VHD_DRIVE_FOOTER_CHECKSUM_MISMATCH"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026562
    }
    ,{
         "name": "ERROR_VHD_DRIVE_FOOTER_CORRUPT"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026563
    }
    ,{
         "name": "ERROR_VHD_FORMAT_UNKNOWN"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026564
    }
    ,{
         "name": "ERROR_VHD_FORMAT_UNSUPPORTED_VERSION"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026565
    }
    ,{
         "name": "ERROR_VHD_SPARSE_HEADER_CHECKSUM_MISMATCH"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026566
    }
    ,{
         "name": "ERROR_VHD_SPARSE_HEADER_UNSUPPORTED_VERSION"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026567
    }
    ,{
         "name": "ERROR_VHD_SPARSE_HEADER_CORRUPT"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026568
    }
    ,{
         "name": "ERROR_VHD_BLOCK_ALLOCATION_FAILURE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026569
    }
    ,{
         "name": "ERROR_VHD_BLOCK_ALLOCATION_TABLE_CORRUPT"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026570
    }
    ,{
         "name": "ERROR_VHD_INVALID_BLOCK_SIZE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026571
    }
    ,{
         "name": "ERROR_VHD_BITMAP_MISMATCH"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026572
    }
    ,{
         "name": "ERROR_VHD_PARENT_VHD_NOT_FOUND"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026573
    }
    ,{
         "name": "ERROR_VHD_CHILD_PARENT_ID_MISMATCH"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026574
    }
    ,{
         "name": "ERROR_VHD_CHILD_PARENT_TIMESTAMP_MISMATCH"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026575
    }
    ,{
         "name": "ERROR_VHD_METADATA_READ_FAILURE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026576
    }
    ,{
         "name": "ERROR_VHD_METADATA_WRITE_FAILURE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026577
    }
    ,{
         "name": "ERROR_VHD_INVALID_SIZE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026578
    }
    ,{
         "name": "ERROR_VHD_INVALID_FILE_SIZE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026579
    }
    ,{
         "name": "ERROR_VIRTDISK_PROVIDER_NOT_FOUND"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026580
    }
    ,{
         "name": "ERROR_VIRTDISK_NOT_VIRTUAL_DISK"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026581
    }
    ,{
         "name": "ERROR_VHD_PARENT_VHD_ACCESS_DENIED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026582
    }
    ,{
         "name": "ERROR_VHD_CHILD_PARENT_SIZE_MISMATCH"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026583
    }
    ,{
         "name": "ERROR_VHD_DIFFERENCING_CHAIN_CYCLE_DETECTED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026584
    }
    ,{
         "name": "ERROR_VHD_DIFFERENCING_CHAIN_ERROR_IN_PARENT"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026585
    }
    ,{
         "name": "ERROR_VIRTUAL_DISK_LIMITATION"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026586
    }
    ,{
         "name": "ERROR_VHD_INVALID_TYPE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026587
    }
    ,{
         "name": "ERROR_VHD_INVALID_STATE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026588
    }
    ,{
         "name": "ERROR_VIRTDISK_UNSUPPORTED_DISK_SECTOR_SIZE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026589
    }
    ,{
         "name": "ERROR_VIRTDISK_DISK_ALREADY_OWNED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026590
    }
    ,{
         "name": "ERROR_VIRTDISK_DISK_ONLINE_AND_WRITABLE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026591
    }
    ,{
         "name": "ERROR_CTLOG_TRACKING_NOT_INITIALIZED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026592
    }
    ,{
         "name": "ERROR_CTLOG_LOGFILE_SIZE_EXCEEDED_MAXSIZE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026593
    }
    ,{
         "name": "ERROR_CTLOG_VHD_CHANGED_OFFLINE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026594
    }
    ,{
         "name": "ERROR_CTLOG_INVALID_TRACKING_STATE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026595
    }
    ,{
         "name": "ERROR_CTLOG_INCONSISTENT_TRACKING_FILE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026596
    }
    ,{
         "name": "ERROR_VHD_RESIZE_WOULD_TRUNCATE_DATA"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026597
    }
    ,{
         "name": "ERROR_VHD_COULD_NOT_COMPUTE_MINIMUM_VIRTUAL_SIZE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026598
    }
    ,{
         "name": "ERROR_VHD_ALREADY_AT_OR_BELOW_MINIMUM_VIRTUAL_SIZE"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026599
    }
    ,{
         "name": "ERROR_VHD_METADATA_FULL"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026600
    }
    ,{
         "name": "ERROR_VHD_INVALID_CHANGE_TRACKING_ID"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026601
    }
    ,{
         "name": "ERROR_VHD_CHANGE_TRACKING_DISABLED"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026602
    }
    ,{
         "name": "ERROR_VHD_MISSING_CHANGE_TRACKING_INFORMATION"
        ,"type": {"kind":"UInt32"}
        ,"value": 3225026608
    }
    ,{
         "name": "ERROR_QUERY_STORAGE_ERROR"
        ,"type": {"kind":"UInt32"}
        ,"value": 2151284737
    }
    ,{
         "name": "HCN_E_NETWORK_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2143617023
    }
    ,{
         "name": "HCN_E_ENDPOINT_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2143617022
    }
    ,{
         "name": "HCN_E_LAYER_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2143617021
    }
    ,{
         "name": "HCN_E_SWITCH_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2143617020
    }
    ,{
         "name": "HCN_E_SUBNET_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2143617019
    }
    ,{
         "name": "HCN_E_ADAPTER_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2143617018
    }
    ,{
         "name": "HCN_E_PORT_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2143617017
    }
    ,{
         "name": "HCN_E_POLICY_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2143617016
    }
    ,{
         "name": "HCN_E_VFP_PORTSETTING_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2143617015
    }
    ,{
         "name": "HCN_E_INVALID_NETWORK"
        ,"type": {"kind":"Int32"}
        ,"value": -2143617014
    }
    ,{
         "name": "HCN_E_INVALID_NETWORK_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143617013
    }
    ,{
         "name": "HCN_E_INVALID_ENDPOINT"
        ,"type": {"kind":"Int32"}
        ,"value": -2143617012
    }
    ,{
         "name": "HCN_E_INVALID_POLICY"
        ,"type": {"kind":"Int32"}
        ,"value": -2143617011
    }
    ,{
         "name": "HCN_E_INVALID_POLICY_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143617010
    }
    ,{
         "name": "HCN_E_INVALID_REMOTE_ENDPOINT_OPERATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2143617009
    }
    ,{
         "name": "HCN_E_NETWORK_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2143617008
    }
    ,{
         "name": "HCN_E_LAYER_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2143617007
    }
    ,{
         "name": "HCN_E_POLICY_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2143617006
    }
    ,{
         "name": "HCN_E_PORT_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2143617005
    }
    ,{
         "name": "HCN_E_ENDPOINT_ALREADY_ATTACHED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143617004
    }
    ,{
         "name": "HCN_E_REQUEST_UNSUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143617003
    }
    ,{
         "name": "HCN_E_MAPPING_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143617002
    }
    ,{
         "name": "HCN_E_DEGRADED_OPERATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2143617001
    }
    ,{
         "name": "HCN_E_SHARED_SWITCH_MODIFICATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2143617000
    }
    ,{
         "name": "HCN_E_GUID_CONVERSION_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143616999
    }
    ,{
         "name": "HCN_E_REGKEY_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143616998
    }
    ,{
         "name": "HCN_E_INVALID_JSON"
        ,"type": {"kind":"Int32"}
        ,"value": -2143616997
    }
    ,{
         "name": "HCN_E_INVALID_JSON_REFERENCE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143616996
    }
    ,{
         "name": "HCN_E_ENDPOINT_SHARING_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143616995
    }
    ,{
         "name": "HCN_E_INVALID_IP"
        ,"type": {"kind":"Int32"}
        ,"value": -2143616994
    }
    ,{
         "name": "HCN_E_SWITCH_EXTENSION_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2143616993
    }
    ,{
         "name": "HCN_E_MANAGER_STOPPED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143616992
    }
    ,{
         "name": "GCN_E_MODULE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2143616991
    }
    ,{
         "name": "GCN_E_NO_REQUEST_HANDLERS"
        ,"type": {"kind":"Int32"}
        ,"value": -2143616990
    }
    ,{
         "name": "GCN_E_REQUEST_UNSUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143616989
    }
    ,{
         "name": "GCN_E_RUNTIMEKEYS_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143616988
    }
    ,{
         "name": "GCN_E_NETADAPTER_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2143616987
    }
    ,{
         "name": "GCN_E_NETADAPTER_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2143616986
    }
    ,{
         "name": "GCN_E_NETCOMPARTMENT_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2143616985
    }
    ,{
         "name": "GCN_E_NETINTERFACE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2143616984
    }
    ,{
         "name": "GCN_E_DEFAULTNAMESPACE_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2143616983
    }
    ,{
         "name": "HCN_E_ICS_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143616982
    }
    ,{
         "name": "HCN_E_ENDPOINT_NAMESPACE_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2143616981
    }
    ,{
         "name": "HCN_E_ENTITY_HAS_REFERENCES"
        ,"type": {"kind":"Int32"}
        ,"value": -2143616980
    }
    ,{
         "name": "HCN_E_INVALID_INTERNAL_PORT"
        ,"type": {"kind":"Int32"}
        ,"value": -2143616979
    }
    ,{
         "name": "HCN_E_NAMESPACE_ATTACH_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143616978
    }
    ,{
         "name": "HCN_E_ADDR_INVALID_OR_RESERVED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143616977
    }
    ,{
         "name": "HCN_E_INVALID_PREFIX"
        ,"type": {"kind":"Int32"}
        ,"value": -2143616976
    }
    ,{
         "name": "HCN_E_OBJECT_USED_AFTER_UNLOAD"
        ,"type": {"kind":"Int32"}
        ,"value": -2143616975
    }
    ,{
         "name": "HCN_E_INVALID_SUBNET"
        ,"type": {"kind":"Int32"}
        ,"value": -2143616974
    }
    ,{
         "name": "HCN_E_INVALID_IP_SUBNET"
        ,"type": {"kind":"Int32"}
        ,"value": -2143616973
    }
    ,{
         "name": "HCN_E_ENDPOINT_NOT_ATTACHED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143616972
    }
    ,{
         "name": "HCN_E_ENDPOINT_NOT_LOCAL"
        ,"type": {"kind":"Int32"}
        ,"value": -2143616971
    }
    ,{
         "name": "HCN_INTERFACEPARAMETERS_ALREADY_APPLIED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143616970
    }
    ,{
         "name": "SDIAG_E_CANCELLED"
        ,"type": {"kind":"UInt32"}
        ,"value": 2151416064
    }
    ,{
         "name": "SDIAG_E_SCRIPT"
        ,"type": {"kind":"UInt32"}
        ,"value": 2151416065
    }
    ,{
         "name": "SDIAG_E_POWERSHELL"
        ,"type": {"kind":"UInt32"}
        ,"value": 2151416066
    }
    ,{
         "name": "SDIAG_E_MANAGEDHOST"
        ,"type": {"kind":"UInt32"}
        ,"value": 2151416067
    }
    ,{
         "name": "SDIAG_E_NOVERIFIER"
        ,"type": {"kind":"UInt32"}
        ,"value": 2151416068
    }
    ,{
         "name": "SDIAG_S_CANNOTRUN"
        ,"type": {"kind":"UInt32"}
        ,"value": 3932421
    }
    ,{
         "name": "SDIAG_E_DISABLED"
        ,"type": {"kind":"UInt32"}
        ,"value": 2151416070
    }
    ,{
         "name": "SDIAG_E_TRUST"
        ,"type": {"kind":"UInt32"}
        ,"value": 2151416071
    }
    ,{
         "name": "SDIAG_E_CANNOTRUN"
        ,"type": {"kind":"UInt32"}
        ,"value": 2151416072
    }
    ,{
         "name": "SDIAG_E_VERSION"
        ,"type": {"kind":"UInt32"}
        ,"value": 2151416073
    }
    ,{
         "name": "SDIAG_E_RESOURCE"
        ,"type": {"kind":"UInt32"}
        ,"value": 2151416074
    }
    ,{
         "name": "SDIAG_E_ROOTCAUSE"
        ,"type": {"kind":"UInt32"}
        ,"value": 2151416075
    }
    ,{
         "name": "WPN_E_CHANNEL_CLOSED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143420160
    }
    ,{
         "name": "WPN_E_CHANNEL_REQUEST_NOT_COMPLETE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143420159
    }
    ,{
         "name": "WPN_E_INVALID_APP"
        ,"type": {"kind":"Int32"}
        ,"value": -2143420158
    }
    ,{
         "name": "WPN_E_OUTSTANDING_CHANNEL_REQUEST"
        ,"type": {"kind":"Int32"}
        ,"value": -2143420157
    }
    ,{
         "name": "WPN_E_DUPLICATE_CHANNEL"
        ,"type": {"kind":"Int32"}
        ,"value": -2143420156
    }
    ,{
         "name": "WPN_E_PLATFORM_UNAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143420155
    }
    ,{
         "name": "WPN_E_NOTIFICATION_POSTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143420154
    }
    ,{
         "name": "WPN_E_NOTIFICATION_HIDDEN"
        ,"type": {"kind":"Int32"}
        ,"value": -2143420153
    }
    ,{
         "name": "WPN_E_NOTIFICATION_NOT_POSTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143420152
    }
    ,{
         "name": "WPN_E_CLOUD_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143420151
    }
    ,{
         "name": "WPN_E_CLOUD_INCAPABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143420144
    }
    ,{
         "name": "WPN_E_CLOUD_AUTH_UNAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143420134
    }
    ,{
         "name": "WPN_E_CLOUD_SERVICE_UNAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143420133
    }
    ,{
         "name": "WPN_E_FAILED_LOCK_SCREEN_UPDATE_INTIALIZATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2143420132
    }
    ,{
         "name": "WPN_E_NOTIFICATION_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143420143
    }
    ,{
         "name": "WPN_E_NOTIFICATION_INCAPABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143420142
    }
    ,{
         "name": "WPN_E_INTERNET_INCAPABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143420141
    }
    ,{
         "name": "WPN_E_NOTIFICATION_TYPE_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143420140
    }
    ,{
         "name": "WPN_E_NOTIFICATION_SIZE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143420139
    }
    ,{
         "name": "WPN_E_TAG_SIZE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143420138
    }
    ,{
         "name": "WPN_E_ACCESS_DENIED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143420137
    }
    ,{
         "name": "WPN_E_DUPLICATE_REGISTRATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2143420136
    }
    ,{
         "name": "WPN_E_PUSH_NOTIFICATION_INCAPABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143420135
    }
    ,{
         "name": "WPN_E_DEV_ID_SIZE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143420128
    }
    ,{
         "name": "WPN_E_TAG_ALPHANUMERIC"
        ,"type": {"kind":"Int32"}
        ,"value": -2143420118
    }
    ,{
         "name": "WPN_E_INVALID_HTTP_STATUS_CODE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143420117
    }
    ,{
         "name": "WPN_E_OUT_OF_SESSION"
        ,"type": {"kind":"Int32"}
        ,"value": -2143419904
    }
    ,{
         "name": "WPN_E_POWER_SAVE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143419903
    }
    ,{
         "name": "WPN_E_IMAGE_NOT_FOUND_IN_CACHE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143419902
    }
    ,{
         "name": "WPN_E_ALL_URL_NOT_COMPLETED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143419901
    }
    ,{
         "name": "WPN_E_INVALID_CLOUD_IMAGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143419900
    }
    ,{
         "name": "WPN_E_NOTIFICATION_ID_MATCHED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143419899
    }
    ,{
         "name": "WPN_E_CALLBACK_ALREADY_REGISTERED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143419898
    }
    ,{
         "name": "WPN_E_TOAST_NOTIFICATION_DROPPED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143419897
    }
    ,{
         "name": "WPN_E_STORAGE_LOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2143419896
    }
    ,{
         "name": "WPN_E_GROUP_SIZE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143419895
    }
    ,{
         "name": "WPN_E_GROUP_ALPHANUMERIC"
        ,"type": {"kind":"Int32"}
        ,"value": -2143419894
    }
    ,{
         "name": "WPN_E_CLOUD_DISABLED_FOR_APP"
        ,"type": {"kind":"Int32"}
        ,"value": -2143419893
    }
    ,{
         "name": "E_MBN_CONTEXT_NOT_ACTIVATED"
        ,"type": {"kind":"Int32"}
        ,"value": -2141945343
    }
    ,{
         "name": "E_MBN_BAD_SIM"
        ,"type": {"kind":"Int32"}
        ,"value": -2141945342
    }
    ,{
         "name": "E_MBN_DATA_CLASS_NOT_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2141945341
    }
    ,{
         "name": "E_MBN_INVALID_ACCESS_STRING"
        ,"type": {"kind":"Int32"}
        ,"value": -2141945340
    }
    ,{
         "name": "E_MBN_MAX_ACTIVATED_CONTEXTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2141945339
    }
    ,{
         "name": "E_MBN_PACKET_SVC_DETACHED"
        ,"type": {"kind":"Int32"}
        ,"value": -2141945338
    }
    ,{
         "name": "E_MBN_PROVIDER_NOT_VISIBLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2141945337
    }
    ,{
         "name": "E_MBN_RADIO_POWER_OFF"
        ,"type": {"kind":"Int32"}
        ,"value": -2141945336
    }
    ,{
         "name": "E_MBN_SERVICE_NOT_ACTIVATED"
        ,"type": {"kind":"Int32"}
        ,"value": -2141945335
    }
    ,{
         "name": "E_MBN_SIM_NOT_INSERTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2141945334
    }
    ,{
         "name": "E_MBN_VOICE_CALL_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": -2141945333
    }
    ,{
         "name": "E_MBN_INVALID_CACHE"
        ,"type": {"kind":"Int32"}
        ,"value": -2141945332
    }
    ,{
         "name": "E_MBN_NOT_REGISTERED"
        ,"type": {"kind":"Int32"}
        ,"value": -2141945331
    }
    ,{
         "name": "E_MBN_PROVIDERS_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2141945330
    }
    ,{
         "name": "E_MBN_PIN_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2141945329
    }
    ,{
         "name": "E_MBN_PIN_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2141945328
    }
    ,{
         "name": "E_MBN_PIN_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2141945327
    }
    ,{
         "name": "E_MBN_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2141945326
    }
    ,{
         "name": "E_MBN_INVALID_PROFILE"
        ,"type": {"kind":"Int32"}
        ,"value": -2141945320
    }
    ,{
         "name": "E_MBN_DEFAULT_PROFILE_EXIST"
        ,"type": {"kind":"Int32"}
        ,"value": -2141945319
    }
    ,{
         "name": "E_MBN_SMS_ENCODING_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2141945312
    }
    ,{
         "name": "E_MBN_SMS_FILTER_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2141945311
    }
    ,{
         "name": "E_MBN_SMS_INVALID_MEMORY_INDEX"
        ,"type": {"kind":"Int32"}
        ,"value": -2141945310
    }
    ,{
         "name": "E_MBN_SMS_LANG_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2141945309
    }
    ,{
         "name": "E_MBN_SMS_MEMORY_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2141945308
    }
    ,{
         "name": "E_MBN_SMS_NETWORK_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2141945307
    }
    ,{
         "name": "E_MBN_SMS_UNKNOWN_SMSC_ADDRESS"
        ,"type": {"kind":"Int32"}
        ,"value": -2141945306
    }
    ,{
         "name": "E_MBN_SMS_FORMAT_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2141945305
    }
    ,{
         "name": "E_MBN_SMS_OPERATION_NOT_ALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": -2141945304
    }
    ,{
         "name": "E_MBN_SMS_MEMORY_FULL"
        ,"type": {"kind":"Int32"}
        ,"value": -2141945303
    }
    ,{
         "name": "PEER_E_IPV6_NOT_INSTALLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2140995583
    }
    ,{
         "name": "PEER_E_NOT_INITIALIZED"
        ,"type": {"kind":"Int32"}
        ,"value": -2140995582
    }
    ,{
         "name": "PEER_E_CANNOT_START_SERVICE"
        ,"type": {"kind":"Int32"}
        ,"value": -2140995581
    }
    ,{
         "name": "PEER_E_NOT_LICENSED"
        ,"type": {"kind":"Int32"}
        ,"value": -2140995580
    }
    ,{
         "name": "PEER_E_INVALID_GRAPH"
        ,"type": {"kind":"Int32"}
        ,"value": -2140995568
    }
    ,{
         "name": "PEER_E_DBNAME_CHANGED"
        ,"type": {"kind":"Int32"}
        ,"value": -2140995567
    }
    ,{
         "name": "PEER_E_DUPLICATE_GRAPH"
        ,"type": {"kind":"Int32"}
        ,"value": -2140995566
    }
    ,{
         "name": "PEER_E_GRAPH_NOT_READY"
        ,"type": {"kind":"Int32"}
        ,"value": -2140995565
    }
    ,{
         "name": "PEER_E_GRAPH_SHUTTING_DOWN"
        ,"type": {"kind":"Int32"}
        ,"value": -2140995564
    }
    ,{
         "name": "PEER_E_GRAPH_IN_USE"
        ,"type": {"kind":"Int32"}
        ,"value": -2140995563
    }
    ,{
         "name": "PEER_E_INVALID_DATABASE"
        ,"type": {"kind":"Int32"}
        ,"value": -2140995562
    }
    ,{
         "name": "PEER_E_TOO_MANY_ATTRIBUTES"
        ,"type": {"kind":"Int32"}
        ,"value": -2140995561
    }
    ,{
         "name": "PEER_E_CONNECTION_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2140995325
    }
    ,{
         "name": "PEER_E_CONNECT_SELF"
        ,"type": {"kind":"Int32"}
        ,"value": -2140995322
    }
    ,{
         "name": "PEER_E_ALREADY_LISTENING"
        ,"type": {"kind":"Int32"}
        ,"value": -2140995321
    }
    ,{
         "name": "PEER_E_NODE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2140995320
    }
    ,{
         "name": "PEER_E_CONNECTION_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2140995319
    }
    ,{
         "name": "PEER_E_CONNECTION_NOT_AUTHENTICATED"
        ,"type": {"kind":"Int32"}
        ,"value": -2140995318
    }
    ,{
         "name": "PEER_E_CONNECTION_REFUSED"
        ,"type": {"kind":"Int32"}
        ,"value": -2140995317
    }
    ,{
         "name": "PEER_E_CLASSIFIER_TOO_LONG"
        ,"type": {"kind":"Int32"}
        ,"value": -2140995071
    }
    ,{
         "name": "PEER_E_TOO_MANY_IDENTITIES"
        ,"type": {"kind":"Int32"}
        ,"value": -2140995070
    }
    ,{
         "name": "PEER_E_NO_KEY_ACCESS"
        ,"type": {"kind":"Int32"}
        ,"value": -2140995069
    }
    ,{
         "name": "PEER_E_GROUPS_EXIST"
        ,"type": {"kind":"Int32"}
        ,"value": -2140995068
    }
    ,{
         "name": "PEER_E_RECORD_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2140994815
    }
    ,{
         "name": "PEER_E_DATABASE_ACCESSDENIED"
        ,"type": {"kind":"Int32"}
        ,"value": -2140994814
    }
    ,{
         "name": "PEER_E_DBINITIALIZATION_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2140994813
    }
    ,{
         "name": "PEER_E_MAX_RECORD_SIZE_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": -2140994812
    }
    ,{
         "name": "PEER_E_DATABASE_ALREADY_PRESENT"
        ,"type": {"kind":"Int32"}
        ,"value": -2140994811
    }
    ,{
         "name": "PEER_E_DATABASE_NOT_PRESENT"
        ,"type": {"kind":"Int32"}
        ,"value": -2140994810
    }
    ,{
         "name": "PEER_E_IDENTITY_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2140994559
    }
    ,{
         "name": "PEER_E_EVENT_HANDLE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2140994303
    }
    ,{
         "name": "PEER_E_INVALID_SEARCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2140994047
    }
    ,{
         "name": "PEER_E_INVALID_ATTRIBUTES"
        ,"type": {"kind":"Int32"}
        ,"value": -2140994046
    }
    ,{
         "name": "PEER_E_INVITATION_NOT_TRUSTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2140993791
    }
    ,{
         "name": "PEER_E_CHAIN_TOO_LONG"
        ,"type": {"kind":"Int32"}
        ,"value": -2140993789
    }
    ,{
         "name": "PEER_E_INVALID_TIME_PERIOD"
        ,"type": {"kind":"Int32"}
        ,"value": -2140993787
    }
    ,{
         "name": "PEER_E_CIRCULAR_CHAIN_DETECTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2140993786
    }
    ,{
         "name": "PEER_E_CERT_STORE_CORRUPTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2140993535
    }
    ,{
         "name": "PEER_E_NO_CLOUD"
        ,"type": {"kind":"Int32"}
        ,"value": -2140991487
    }
    ,{
         "name": "PEER_E_CLOUD_NAME_AMBIGUOUS"
        ,"type": {"kind":"Int32"}
        ,"value": -2140991483
    }
    ,{
         "name": "PEER_E_INVALID_RECORD"
        ,"type": {"kind":"Int32"}
        ,"value": -2140987376
    }
    ,{
         "name": "PEER_E_NOT_AUTHORIZED"
        ,"type": {"kind":"Int32"}
        ,"value": -2140987360
    }
    ,{
         "name": "PEER_E_PASSWORD_DOES_NOT_MEET_POLICY"
        ,"type": {"kind":"Int32"}
        ,"value": -2140987359
    }
    ,{
         "name": "PEER_E_DEFERRED_VALIDATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2140987344
    }
    ,{
         "name": "PEER_E_INVALID_GROUP_PROPERTIES"
        ,"type": {"kind":"Int32"}
        ,"value": -2140987328
    }
    ,{
         "name": "PEER_E_INVALID_PEER_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": -2140987312
    }
    ,{
         "name": "PEER_E_INVALID_CLASSIFIER"
        ,"type": {"kind":"Int32"}
        ,"value": -2140987296
    }
    ,{
         "name": "PEER_E_INVALID_FRIENDLY_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": -2140987280
    }
    ,{
         "name": "PEER_E_INVALID_ROLE_PROPERTY"
        ,"type": {"kind":"Int32"}
        ,"value": -2140987279
    }
    ,{
         "name": "PEER_E_INVALID_CLASSIFIER_PROPERTY"
        ,"type": {"kind":"Int32"}
        ,"value": -2140987278
    }
    ,{
         "name": "PEER_E_INVALID_RECORD_EXPIRATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2140987264
    }
    ,{
         "name": "PEER_E_INVALID_CREDENTIAL_INFO"
        ,"type": {"kind":"Int32"}
        ,"value": -2140987263
    }
    ,{
         "name": "PEER_E_INVALID_CREDENTIAL"
        ,"type": {"kind":"Int32"}
        ,"value": -2140987262
    }
    ,{
         "name": "PEER_E_INVALID_RECORD_SIZE"
        ,"type": {"kind":"Int32"}
        ,"value": -2140987261
    }
    ,{
         "name": "PEER_E_UNSUPPORTED_VERSION"
        ,"type": {"kind":"Int32"}
        ,"value": -2140987248
    }
    ,{
         "name": "PEER_E_GROUP_NOT_READY"
        ,"type": {"kind":"Int32"}
        ,"value": -2140987247
    }
    ,{
         "name": "PEER_E_GROUP_IN_USE"
        ,"type": {"kind":"Int32"}
        ,"value": -2140987246
    }
    ,{
         "name": "PEER_E_INVALID_GROUP"
        ,"type": {"kind":"Int32"}
        ,"value": -2140987245
    }
    ,{
         "name": "PEER_E_NO_MEMBERS_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2140987244
    }
    ,{
         "name": "PEER_E_NO_MEMBER_CONNECTIONS"
        ,"type": {"kind":"Int32"}
        ,"value": -2140987243
    }
    ,{
         "name": "PEER_E_UNABLE_TO_LISTEN"
        ,"type": {"kind":"Int32"}
        ,"value": -2140987242
    }
    ,{
         "name": "PEER_E_IDENTITY_DELETED"
        ,"type": {"kind":"Int32"}
        ,"value": -2140987232
    }
    ,{
         "name": "PEER_E_SERVICE_NOT_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2140987231
    }
    ,{
         "name": "PEER_E_CONTACT_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2140971007
    }
    ,{
         "name": "PEER_S_GRAPH_DATA_CREATED"
        ,"type": {"kind":"Int32"}
        ,"value": 6488065
    }
    ,{
         "name": "PEER_S_NO_EVENT_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": 6488066
    }
    ,{
         "name": "PEER_S_ALREADY_CONNECTED"
        ,"type": {"kind":"Int32"}
        ,"value": 6496256
    }
    ,{
         "name": "PEER_S_SUBSCRIPTION_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": 6512640
    }
    ,{
         "name": "PEER_S_NO_CONNECTIVITY"
        ,"type": {"kind":"Int32"}
        ,"value": 6488069
    }
    ,{
         "name": "PEER_S_ALREADY_A_MEMBER"
        ,"type": {"kind":"Int32"}
        ,"value": 6488070
    }
    ,{
         "name": "PEER_E_CANNOT_CONVERT_PEER_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": -2140979199
    }
    ,{
         "name": "PEER_E_INVALID_PEER_HOST_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": -2140979198
    }
    ,{
         "name": "PEER_E_NO_MORE"
        ,"type": {"kind":"Int32"}
        ,"value": -2140979197
    }
    ,{
         "name": "PEER_E_PNRP_DUPLICATE_PEER_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": -2140979195
    }
    ,{
         "name": "PEER_E_INVITE_CANCELLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2140966912
    }
    ,{
         "name": "PEER_E_INVITE_RESPONSE_NOT_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2140966911
    }
    ,{
         "name": "PEER_E_NOT_SIGNED_IN"
        ,"type": {"kind":"Int32"}
        ,"value": -2140966909
    }
    ,{
         "name": "PEER_E_PRIVACY_DECLINED"
        ,"type": {"kind":"Int32"}
        ,"value": -2140966908
    }
    ,{
         "name": "PEER_E_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2140966907
    }
    ,{
         "name": "PEER_E_INVALID_ADDRESS"
        ,"type": {"kind":"Int32"}
        ,"value": -2140966905
    }
    ,{
         "name": "PEER_E_FW_EXCEPTION_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2140966904
    }
    ,{
         "name": "PEER_E_FW_BLOCKED_BY_POLICY"
        ,"type": {"kind":"Int32"}
        ,"value": -2140966903
    }
    ,{
         "name": "PEER_E_FW_BLOCKED_BY_SHIELDS_UP"
        ,"type": {"kind":"Int32"}
        ,"value": -2140966902
    }
    ,{
         "name": "PEER_E_FW_DECLINED"
        ,"type": {"kind":"Int32"}
        ,"value": -2140966901
    }
    ,{
         "name": "UI_E_CREATE_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144731135
    }
    ,{
         "name": "UI_E_SHUTDOWN_CALLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144731134
    }
    ,{
         "name": "UI_E_ILLEGAL_REENTRANCY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144731133
    }
    ,{
         "name": "UI_E_OBJECT_SEALED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144731132
    }
    ,{
         "name": "UI_E_VALUE_NOT_SET"
        ,"type": {"kind":"Int32"}
        ,"value": -2144731131
    }
    ,{
         "name": "UI_E_VALUE_NOT_DETERMINED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144731130
    }
    ,{
         "name": "UI_E_INVALID_OUTPUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144731129
    }
    ,{
         "name": "UI_E_BOOLEAN_EXPECTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144731128
    }
    ,{
         "name": "UI_E_DIFFERENT_OWNER"
        ,"type": {"kind":"Int32"}
        ,"value": -2144731127
    }
    ,{
         "name": "UI_E_AMBIGUOUS_MATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2144731126
    }
    ,{
         "name": "UI_E_FP_OVERFLOW"
        ,"type": {"kind":"Int32"}
        ,"value": -2144731125
    }
    ,{
         "name": "UI_E_WRONG_THREAD"
        ,"type": {"kind":"Int32"}
        ,"value": -2144731124
    }
    ,{
         "name": "UI_E_STORYBOARD_ACTIVE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144730879
    }
    ,{
         "name": "UI_E_STORYBOARD_NOT_PLAYING"
        ,"type": {"kind":"Int32"}
        ,"value": -2144730878
    }
    ,{
         "name": "UI_E_START_KEYFRAME_AFTER_END"
        ,"type": {"kind":"Int32"}
        ,"value": -2144730877
    }
    ,{
         "name": "UI_E_END_KEYFRAME_NOT_DETERMINED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144730876
    }
    ,{
         "name": "UI_E_LOOPS_OVERLAP"
        ,"type": {"kind":"Int32"}
        ,"value": -2144730875
    }
    ,{
         "name": "UI_E_TRANSITION_ALREADY_USED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144730874
    }
    ,{
         "name": "UI_E_TRANSITION_NOT_IN_STORYBOARD"
        ,"type": {"kind":"Int32"}
        ,"value": -2144730873
    }
    ,{
         "name": "UI_E_TRANSITION_ECLIPSED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144730872
    }
    ,{
         "name": "UI_E_TIME_BEFORE_LAST_UPDATE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144730871
    }
    ,{
         "name": "UI_E_TIMER_CLIENT_ALREADY_CONNECTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144730870
    }
    ,{
         "name": "UI_E_INVALID_DIMENSION"
        ,"type": {"kind":"Int32"}
        ,"value": -2144730869
    }
    ,{
         "name": "UI_E_PRIMITIVE_OUT_OF_BOUNDS"
        ,"type": {"kind":"Int32"}
        ,"value": -2144730868
    }
    ,{
         "name": "UI_E_WINDOW_CLOSED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144730623
    }
    ,{
         "name": "E_BLUETOOTH_ATT_INVALID_HANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2140864511
    }
    ,{
         "name": "E_BLUETOOTH_ATT_READ_NOT_PERMITTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2140864510
    }
    ,{
         "name": "E_BLUETOOTH_ATT_WRITE_NOT_PERMITTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2140864509
    }
    ,{
         "name": "E_BLUETOOTH_ATT_INVALID_PDU"
        ,"type": {"kind":"Int32"}
        ,"value": -2140864508
    }
    ,{
         "name": "E_BLUETOOTH_ATT_INSUFFICIENT_AUTHENTICATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2140864507
    }
    ,{
         "name": "E_BLUETOOTH_ATT_REQUEST_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2140864506
    }
    ,{
         "name": "E_BLUETOOTH_ATT_INVALID_OFFSET"
        ,"type": {"kind":"Int32"}
        ,"value": -2140864505
    }
    ,{
         "name": "E_BLUETOOTH_ATT_INSUFFICIENT_AUTHORIZATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2140864504
    }
    ,{
         "name": "E_BLUETOOTH_ATT_PREPARE_QUEUE_FULL"
        ,"type": {"kind":"Int32"}
        ,"value": -2140864503
    }
    ,{
         "name": "E_BLUETOOTH_ATT_ATTRIBUTE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2140864502
    }
    ,{
         "name": "E_BLUETOOTH_ATT_ATTRIBUTE_NOT_LONG"
        ,"type": {"kind":"Int32"}
        ,"value": -2140864501
    }
    ,{
         "name": "E_BLUETOOTH_ATT_INSUFFICIENT_ENCRYPTION_KEY_SIZE"
        ,"type": {"kind":"Int32"}
        ,"value": -2140864500
    }
    ,{
         "name": "E_BLUETOOTH_ATT_INVALID_ATTRIBUTE_VALUE_LENGTH"
        ,"type": {"kind":"Int32"}
        ,"value": -2140864499
    }
    ,{
         "name": "E_BLUETOOTH_ATT_UNLIKELY"
        ,"type": {"kind":"Int32"}
        ,"value": -2140864498
    }
    ,{
         "name": "E_BLUETOOTH_ATT_INSUFFICIENT_ENCRYPTION"
        ,"type": {"kind":"Int32"}
        ,"value": -2140864497
    }
    ,{
         "name": "E_BLUETOOTH_ATT_UNSUPPORTED_GROUP_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2140864496
    }
    ,{
         "name": "E_BLUETOOTH_ATT_INSUFFICIENT_RESOURCES"
        ,"type": {"kind":"Int32"}
        ,"value": -2140864495
    }
    ,{
         "name": "E_BLUETOOTH_ATT_UNKNOWN_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2140860416
    }
    ,{
         "name": "E_AUDIO_ENGINE_NODE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2140798975
    }
    ,{
         "name": "E_HDAUDIO_EMPTY_CONNECTION_LIST"
        ,"type": {"kind":"Int32"}
        ,"value": -2140798974
    }
    ,{
         "name": "E_HDAUDIO_CONNECTION_LIST_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2140798973
    }
    ,{
         "name": "E_HDAUDIO_NO_LOGICAL_DEVICES_CREATED"
        ,"type": {"kind":"Int32"}
        ,"value": -2140798972
    }
    ,{
         "name": "E_HDAUDIO_NULL_LINKED_LIST_ENTRY"
        ,"type": {"kind":"Int32"}
        ,"value": -2140798971
    }
    ,{
         "name": "STATEREPOSITORY_E_CONCURRENCY_LOCKING_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2140733439
    }
    ,{
         "name": "STATEREPOSITORY_E_STATEMENT_INPROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": -2140733438
    }
    ,{
         "name": "STATEREPOSITORY_E_CONFIGURATION_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2140733437
    }
    ,{
         "name": "STATEREPOSITORY_E_UNKNOWN_SCHEMA_VERSION"
        ,"type": {"kind":"Int32"}
        ,"value": -2140733436
    }
    ,{
         "name": "STATEREPOSITORY_ERROR_DICTIONARY_CORRUPTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2140733435
    }
    ,{
         "name": "STATEREPOSITORY_E_BLOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2140733434
    }
    ,{
         "name": "STATEREPOSITORY_E_BUSY_RETRY"
        ,"type": {"kind":"Int32"}
        ,"value": -2140733433
    }
    ,{
         "name": "STATEREPOSITORY_E_BUSY_RECOVERY_RETRY"
        ,"type": {"kind":"Int32"}
        ,"value": -2140733432
    }
    ,{
         "name": "STATEREPOSITORY_E_LOCKED_RETRY"
        ,"type": {"kind":"Int32"}
        ,"value": -2140733431
    }
    ,{
         "name": "STATEREPOSITORY_E_LOCKED_SHAREDCACHE_RETRY"
        ,"type": {"kind":"Int32"}
        ,"value": -2140733430
    }
    ,{
         "name": "STATEREPOSITORY_E_TRANSACTION_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2140733429
    }
    ,{
         "name": "STATEREPOSITORY_E_BUSY_TIMEOUT_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": -2140733428
    }
    ,{
         "name": "STATEREPOSITORY_E_BUSY_RECOVERY_TIMEOUT_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": -2140733427
    }
    ,{
         "name": "STATEREPOSITORY_E_LOCKED_TIMEOUT_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": -2140733426
    }
    ,{
         "name": "STATEREPOSITORY_E_LOCKED_SHAREDCACHE_TIMEOUT_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": -2140733425
    }
    ,{
         "name": "STATEREPOSITORY_E_SERVICE_STOP_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": -2140733424
    }
    ,{
         "name": "STATEREPOSTORY_E_NESTED_TRANSACTION_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2140733423
    }
    ,{
         "name": "STATEREPOSITORY_ERROR_CACHE_CORRUPTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2140733422
    }
    ,{
         "name": "STATEREPOSITORY_TRANSACTION_CALLER_ID_CHANGED"
        ,"type": {"kind":"Int32"}
        ,"value": 6750227
    }
    ,{
         "name": "STATEREPOSITORY_TRANSACTION_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 6750228
    }
    ,{
         "name": "ERROR_SPACES_POOL_WAS_DELETED"
        ,"type": {"kind":"Int32"}
        ,"value": 15138817
    }
    ,{
         "name": "ERROR_SPACES_FAULT_DOMAIN_TYPE_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2132344831
    }
    ,{
         "name": "ERROR_SPACES_INTERNAL_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2132344830
    }
    ,{
         "name": "ERROR_SPACES_RESILIENCY_TYPE_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2132344829
    }
    ,{
         "name": "ERROR_SPACES_DRIVE_SECTOR_SIZE_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2132344828
    }
    ,{
         "name": "ERROR_SPACES_DRIVE_REDUNDANCY_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2132344826
    }
    ,{
         "name": "ERROR_SPACES_NUMBER_OF_DATA_COPIES_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2132344825
    }
    ,{
         "name": "ERROR_SPACES_PARITY_LAYOUT_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2132344824
    }
    ,{
         "name": "ERROR_SPACES_INTERLEAVE_LENGTH_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2132344823
    }
    ,{
         "name": "ERROR_SPACES_NUMBER_OF_COLUMNS_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2132344822
    }
    ,{
         "name": "ERROR_SPACES_NOT_ENOUGH_DRIVES"
        ,"type": {"kind":"Int32"}
        ,"value": -2132344821
    }
    ,{
         "name": "ERROR_SPACES_EXTENDED_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2132344820
    }
    ,{
         "name": "ERROR_SPACES_PROVISIONING_TYPE_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2132344819
    }
    ,{
         "name": "ERROR_SPACES_ALLOCATION_SIZE_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2132344818
    }
    ,{
         "name": "ERROR_SPACES_ENCLOSURE_AWARE_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2132344817
    }
    ,{
         "name": "ERROR_SPACES_WRITE_CACHE_SIZE_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2132344816
    }
    ,{
         "name": "ERROR_SPACES_NUMBER_OF_GROUPS_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2132344815
    }
    ,{
         "name": "ERROR_SPACES_DRIVE_OPERATIONAL_STATE_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2132344814
    }
    ,{
         "name": "ERROR_SPACES_ENTRY_INCOMPLETE"
        ,"type": {"kind":"Int32"}
        ,"value": -2132344813
    }
    ,{
         "name": "ERROR_SPACES_ENTRY_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2132344812
    }
    ,{
         "name": "ERROR_VOLSNAP_BOOTFILE_NOT_VALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2138963967
    }
    ,{
         "name": "ERROR_VOLSNAP_ACTIVATION_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2138963966
    }
    ,{
         "name": "ERROR_TIERING_NOT_SUPPORTED_ON_VOLUME"
        ,"type": {"kind":"Int32"}
        ,"value": -2138898431
    }
    ,{
         "name": "ERROR_TIERING_VOLUME_DISMOUNT_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": -2138898430
    }
    ,{
         "name": "ERROR_TIERING_STORAGE_TIER_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2138898429
    }
    ,{
         "name": "ERROR_TIERING_INVALID_FILE_ID"
        ,"type": {"kind":"Int32"}
        ,"value": -2138898428
    }
    ,{
         "name": "ERROR_TIERING_WRONG_CLUSTER_NODE"
        ,"type": {"kind":"Int32"}
        ,"value": -2138898427
    }
    ,{
         "name": "ERROR_TIERING_ALREADY_PROCESSING"
        ,"type": {"kind":"Int32"}
        ,"value": -2138898426
    }
    ,{
         "name": "ERROR_TIERING_CANNOT_PIN_OBJECT"
        ,"type": {"kind":"Int32"}
        ,"value": -2138898425
    }
    ,{
         "name": "ERROR_TIERING_FILE_IS_NOT_PINNED"
        ,"type": {"kind":"Int32"}
        ,"value": -2138898424
    }
    ,{
         "name": "ERROR_NOT_A_TIERED_VOLUME"
        ,"type": {"kind":"Int32"}
        ,"value": -2138898423
    }
    ,{
         "name": "ERROR_ATTRIBUTE_NOT_PRESENT"
        ,"type": {"kind":"Int32"}
        ,"value": -2138898422
    }
    ,{
         "name": "ERROR_SECCORE_INVALID_COMMAND"
        ,"type": {"kind":"Int32"}
        ,"value": -1058537472
    }
    ,{
         "name": "ERROR_NO_APPLICABLE_APP_LICENSES_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -1058406399
    }
    ,{
         "name": "ERROR_CLIP_LICENSE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -1058406398
    }
    ,{
         "name": "ERROR_CLIP_DEVICE_LICENSE_MISSING"
        ,"type": {"kind":"Int32"}
        ,"value": -1058406397
    }
    ,{
         "name": "ERROR_CLIP_LICENSE_INVALID_SIGNATURE"
        ,"type": {"kind":"Int32"}
        ,"value": -1058406396
    }
    ,{
         "name": "ERROR_CLIP_KEYHOLDER_LICENSE_MISSING_OR_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -1058406395
    }
    ,{
         "name": "ERROR_CLIP_LICENSE_EXPIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -1058406394
    }
    ,{
         "name": "ERROR_CLIP_LICENSE_SIGNED_BY_UNKNOWN_SOURCE"
        ,"type": {"kind":"Int32"}
        ,"value": -1058406393
    }
    ,{
         "name": "ERROR_CLIP_LICENSE_NOT_SIGNED"
        ,"type": {"kind":"Int32"}
        ,"value": -1058406392
    }
    ,{
         "name": "ERROR_CLIP_LICENSE_HARDWARE_ID_OUT_OF_TOLERANCE"
        ,"type": {"kind":"Int32"}
        ,"value": -1058406391
    }
    ,{
         "name": "ERROR_CLIP_LICENSE_DEVICE_ID_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -1058406390
    }
    ,{
         "name": "DXGI_STATUS_OCCLUDED"
        ,"type": {"kind":"Int32"}
        ,"value": 142213121
    }
    ,{
         "name": "DXGI_STATUS_CLIPPED"
        ,"type": {"kind":"Int32"}
        ,"value": 142213122
    }
    ,{
         "name": "DXGI_STATUS_NO_REDIRECTION"
        ,"type": {"kind":"Int32"}
        ,"value": 142213124
    }
    ,{
         "name": "DXGI_STATUS_NO_DESKTOP_ACCESS"
        ,"type": {"kind":"Int32"}
        ,"value": 142213125
    }
    ,{
         "name": "DXGI_STATUS_GRAPHICS_VIDPN_SOURCE_IN_USE"
        ,"type": {"kind":"Int32"}
        ,"value": 142213126
    }
    ,{
         "name": "DXGI_STATUS_MODE_CHANGED"
        ,"type": {"kind":"Int32"}
        ,"value": 142213127
    }
    ,{
         "name": "DXGI_STATUS_MODE_CHANGE_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": 142213128
    }
    ,{
         "name": "DXGI_ERROR_INVALID_CALL"
        ,"type": {"kind":"Int32"}
        ,"value": -2005270527
    }
    ,{
         "name": "DXGI_ERROR_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2005270526
    }
    ,{
         "name": "DXGI_ERROR_MORE_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": -2005270525
    }
    ,{
         "name": "DXGI_ERROR_UNSUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2005270524
    }
    ,{
         "name": "DXGI_ERROR_DEVICE_REMOVED"
        ,"type": {"kind":"Int32"}
        ,"value": -2005270523
    }
    ,{
         "name": "DXGI_ERROR_DEVICE_HUNG"
        ,"type": {"kind":"Int32"}
        ,"value": -2005270522
    }
    ,{
         "name": "DXGI_ERROR_DEVICE_RESET"
        ,"type": {"kind":"Int32"}
        ,"value": -2005270521
    }
    ,{
         "name": "DXGI_ERROR_WAS_STILL_DRAWING"
        ,"type": {"kind":"Int32"}
        ,"value": -2005270518
    }
    ,{
         "name": "DXGI_ERROR_FRAME_STATISTICS_DISJOINT"
        ,"type": {"kind":"Int32"}
        ,"value": -2005270517
    }
    ,{
         "name": "DXGI_ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE"
        ,"type": {"kind":"Int32"}
        ,"value": -2005270516
    }
    ,{
         "name": "DXGI_ERROR_DRIVER_INTERNAL_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2005270496
    }
    ,{
         "name": "DXGI_ERROR_NONEXCLUSIVE"
        ,"type": {"kind":"Int32"}
        ,"value": -2005270495
    }
    ,{
         "name": "DXGI_ERROR_NOT_CURRENTLY_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2005270494
    }
    ,{
         "name": "DXGI_ERROR_REMOTE_CLIENT_DISCONNECTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2005270493
    }
    ,{
         "name": "DXGI_ERROR_REMOTE_OUTOFMEMORY"
        ,"type": {"kind":"Int32"}
        ,"value": -2005270492
    }
    ,{
         "name": "DXGI_ERROR_ACCESS_LOST"
        ,"type": {"kind":"Int32"}
        ,"value": -2005270490
    }
    ,{
         "name": "DXGI_ERROR_WAIT_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2005270489
    }
    ,{
         "name": "DXGI_ERROR_SESSION_DISCONNECTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2005270488
    }
    ,{
         "name": "DXGI_ERROR_RESTRICT_TO_OUTPUT_STALE"
        ,"type": {"kind":"Int32"}
        ,"value": -2005270487
    }
    ,{
         "name": "DXGI_ERROR_CANNOT_PROTECT_CONTENT"
        ,"type": {"kind":"Int32"}
        ,"value": -2005270486
    }
    ,{
         "name": "DXGI_ERROR_ACCESS_DENIED"
        ,"type": {"kind":"Int32"}
        ,"value": -2005270485
    }
    ,{
         "name": "DXGI_ERROR_NAME_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2005270484
    }
    ,{
         "name": "DXGI_ERROR_SDK_COMPONENT_MISSING"
        ,"type": {"kind":"Int32"}
        ,"value": -2005270483
    }
    ,{
         "name": "DXGI_ERROR_NOT_CURRENT"
        ,"type": {"kind":"Int32"}
        ,"value": -2005270482
    }
    ,{
         "name": "DXGI_ERROR_HW_PROTECTION_OUTOFMEMORY"
        ,"type": {"kind":"Int32"}
        ,"value": -2005270480
    }
    ,{
         "name": "DXGI_ERROR_DYNAMIC_CODE_POLICY_VIOLATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2005270479
    }
    ,{
         "name": "DXGI_ERROR_NON_COMPOSITED_UI"
        ,"type": {"kind":"Int32"}
        ,"value": -2005270478
    }
    ,{
         "name": "DXCORE_ERROR_EVENT_NOT_UNREGISTERED"
        ,"type": {"kind":"Int32"}
        ,"value": -2004877311
    }
    ,{
         "name": "DXGI_STATUS_UNOCCLUDED"
        ,"type": {"kind":"Int32"}
        ,"value": 142213129
    }
    ,{
         "name": "DXGI_STATUS_DDA_WAS_STILL_DRAWING"
        ,"type": {"kind":"Int32"}
        ,"value": 142213130
    }
    ,{
         "name": "DXGI_ERROR_MODE_CHANGE_IN_PROGRESS"
        ,"type": {"kind":"Int32"}
        ,"value": -2005270491
    }
    ,{
         "name": "DXGI_STATUS_PRESENT_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": 142213167
    }
    ,{
         "name": "DXGI_ERROR_CACHE_CORRUPT"
        ,"type": {"kind":"Int32"}
        ,"value": -2005270477
    }
    ,{
         "name": "DXGI_ERROR_CACHE_FULL"
        ,"type": {"kind":"Int32"}
        ,"value": -2005270476
    }
    ,{
         "name": "DXGI_ERROR_CACHE_HASH_COLLISION"
        ,"type": {"kind":"Int32"}
        ,"value": -2005270475
    }
    ,{
         "name": "DXGI_ERROR_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2005270474
    }
    ,{
         "name": "DXGI_DDI_ERR_WASSTILLDRAWING"
        ,"type": {"kind":"Int32"}
        ,"value": -2005204991
    }
    ,{
         "name": "DXGI_DDI_ERR_UNSUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2005204990
    }
    ,{
         "name": "DXGI_DDI_ERR_NONEXCLUSIVE"
        ,"type": {"kind":"Int32"}
        ,"value": -2005204989
    }
    ,{
         "name": "D3D10_ERROR_TOO_MANY_UNIQUE_STATE_OBJECTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2005336063
    }
    ,{
         "name": "D3D10_ERROR_FILE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2005336062
    }
    ,{
         "name": "D3D11_ERROR_TOO_MANY_UNIQUE_STATE_OBJECTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2005139455
    }
    ,{
         "name": "D3D11_ERROR_FILE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2005139454
    }
    ,{
         "name": "D3D11_ERROR_TOO_MANY_UNIQUE_VIEW_OBJECTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2005139453
    }
    ,{
         "name": "D3D11_ERROR_DEFERRED_CONTEXT_MAP_WITHOUT_INITIAL_DISCARD"
        ,"type": {"kind":"Int32"}
        ,"value": -2005139452
    }
    ,{
         "name": "D3D12_ERROR_ADAPTER_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2005008383
    }
    ,{
         "name": "D3D12_ERROR_DRIVER_VERSION_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2005008382
    }
    ,{
         "name": "D2DERR_WRONG_STATE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238911
    }
    ,{
         "name": "D2DERR_NOT_INITIALIZED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238910
    }
    ,{
         "name": "D2DERR_UNSUPPORTED_OPERATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238909
    }
    ,{
         "name": "D2DERR_SCANNER_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238908
    }
    ,{
         "name": "D2DERR_SCREEN_ACCESS_DENIED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238907
    }
    ,{
         "name": "D2DERR_DISPLAY_STATE_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238906
    }
    ,{
         "name": "D2DERR_ZERO_VECTOR"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238905
    }
    ,{
         "name": "D2DERR_INTERNAL_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238904
    }
    ,{
         "name": "D2DERR_DISPLAY_FORMAT_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238903
    }
    ,{
         "name": "D2DERR_INVALID_CALL"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238902
    }
    ,{
         "name": "D2DERR_NO_HARDWARE_DEVICE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238901
    }
    ,{
         "name": "D2DERR_RECREATE_TARGET"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238900
    }
    ,{
         "name": "D2DERR_TOO_MANY_SHADER_ELEMENTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238899
    }
    ,{
         "name": "D2DERR_SHADER_COMPILE_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238898
    }
    ,{
         "name": "D2DERR_MAX_TEXTURE_SIZE_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238897
    }
    ,{
         "name": "D2DERR_UNSUPPORTED_VERSION"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238896
    }
    ,{
         "name": "D2DERR_BAD_NUMBER"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238895
    }
    ,{
         "name": "D2DERR_WRONG_FACTORY"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238894
    }
    ,{
         "name": "D2DERR_LAYER_ALREADY_IN_USE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238893
    }
    ,{
         "name": "D2DERR_POP_CALL_DID_NOT_MATCH_PUSH"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238892
    }
    ,{
         "name": "D2DERR_WRONG_RESOURCE_DOMAIN"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238891
    }
    ,{
         "name": "D2DERR_PUSH_POP_UNBALANCED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238890
    }
    ,{
         "name": "D2DERR_RENDER_TARGET_HAS_LAYER_OR_CLIPRECT"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238889
    }
    ,{
         "name": "D2DERR_INCOMPATIBLE_BRUSH_TYPES"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238888
    }
    ,{
         "name": "D2DERR_WIN32_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238887
    }
    ,{
         "name": "D2DERR_TARGET_NOT_GDI_COMPATIBLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238886
    }
    ,{
         "name": "D2DERR_TEXT_EFFECT_IS_WRONG_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238885
    }
    ,{
         "name": "D2DERR_TEXT_RENDERER_NOT_RELEASED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238884
    }
    ,{
         "name": "D2DERR_EXCEEDS_MAX_BITMAP_SIZE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238883
    }
    ,{
         "name": "D2DERR_INVALID_GRAPH_CONFIGURATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238882
    }
    ,{
         "name": "D2DERR_INVALID_INTERNAL_GRAPH_CONFIGURATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238881
    }
    ,{
         "name": "D2DERR_CYCLIC_GRAPH"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238880
    }
    ,{
         "name": "D2DERR_BITMAP_CANNOT_DRAW"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238879
    }
    ,{
         "name": "D2DERR_OUTSTANDING_BITMAP_REFERENCES"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238878
    }
    ,{
         "name": "D2DERR_ORIGINAL_TARGET_NOT_BOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238877
    }
    ,{
         "name": "D2DERR_INVALID_TARGET"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238876
    }
    ,{
         "name": "D2DERR_BITMAP_BOUND_AS_TARGET"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238875
    }
    ,{
         "name": "D2DERR_INSUFFICIENT_DEVICE_CAPABILITIES"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238874
    }
    ,{
         "name": "D2DERR_INTERMEDIATE_TOO_LARGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238873
    }
    ,{
         "name": "D2DERR_EFFECT_IS_NOT_REGISTERED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238872
    }
    ,{
         "name": "D2DERR_INVALID_PROPERTY"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238871
    }
    ,{
         "name": "D2DERR_NO_SUBPROPERTIES"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238870
    }
    ,{
         "name": "D2DERR_PRINT_JOB_CLOSED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238869
    }
    ,{
         "name": "D2DERR_PRINT_FORMAT_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238868
    }
    ,{
         "name": "D2DERR_TOO_MANY_TRANSFORM_INPUTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238867
    }
    ,{
         "name": "D2DERR_INVALID_GLYPH_IMAGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003238866
    }
    ,{
         "name": "DWRITE_E_FILEFORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": -2003283968
    }
    ,{
         "name": "DWRITE_E_UNEXPECTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003283967
    }
    ,{
         "name": "DWRITE_E_NOFONT"
        ,"type": {"kind":"Int32"}
        ,"value": -2003283966
    }
    ,{
         "name": "DWRITE_E_FILENOTFOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2003283965
    }
    ,{
         "name": "DWRITE_E_FILEACCESS"
        ,"type": {"kind":"Int32"}
        ,"value": -2003283964
    }
    ,{
         "name": "DWRITE_E_FONTCOLLECTIONOBSOLETE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003283963
    }
    ,{
         "name": "DWRITE_E_ALREADYREGISTERED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003283962
    }
    ,{
         "name": "DWRITE_E_CACHEFORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": -2003283961
    }
    ,{
         "name": "DWRITE_E_CACHEVERSION"
        ,"type": {"kind":"Int32"}
        ,"value": -2003283960
    }
    ,{
         "name": "DWRITE_E_UNSUPPORTEDOPERATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2003283959
    }
    ,{
         "name": "DWRITE_E_TEXTRENDERERINCOMPATIBLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003283958
    }
    ,{
         "name": "DWRITE_E_FLOWDIRECTIONCONFLICTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2003283957
    }
    ,{
         "name": "DWRITE_E_NOCOLOR"
        ,"type": {"kind":"Int32"}
        ,"value": -2003283956
    }
    ,{
         "name": "DWRITE_E_REMOTEFONT"
        ,"type": {"kind":"Int32"}
        ,"value": -2003283955
    }
    ,{
         "name": "DWRITE_E_DOWNLOADCANCELLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003283954
    }
    ,{
         "name": "DWRITE_E_DOWNLOADFAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003283953
    }
    ,{
         "name": "DWRITE_E_TOOMANYDOWNLOADS"
        ,"type": {"kind":"Int32"}
        ,"value": -2003283952
    }
    ,{
         "name": "WINCODEC_ERR_WRONGSTATE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292412
    }
    ,{
         "name": "WINCODEC_ERR_VALUEOUTOFRANGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292411
    }
    ,{
         "name": "WINCODEC_ERR_UNKNOWNIMAGEFORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292409
    }
    ,{
         "name": "WINCODEC_ERR_UNSUPPORTEDVERSION"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292405
    }
    ,{
         "name": "WINCODEC_ERR_NOTINITIALIZED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292404
    }
    ,{
         "name": "WINCODEC_ERR_ALREADYLOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292403
    }
    ,{
         "name": "WINCODEC_ERR_PROPERTYNOTFOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292352
    }
    ,{
         "name": "WINCODEC_ERR_PROPERTYNOTSUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292351
    }
    ,{
         "name": "WINCODEC_ERR_PROPERTYSIZE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292350
    }
    ,{
         "name": "WINCODEC_ERR_CODECPRESENT"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292349
    }
    ,{
         "name": "WINCODEC_ERR_CODECNOTHUMBNAIL"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292348
    }
    ,{
         "name": "WINCODEC_ERR_PALETTEUNAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292347
    }
    ,{
         "name": "WINCODEC_ERR_CODECTOOMANYSCANLINES"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292346
    }
    ,{
         "name": "WINCODEC_ERR_INTERNALERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292344
    }
    ,{
         "name": "WINCODEC_ERR_SOURCERECTDOESNOTMATCHDIMENSIONS"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292343
    }
    ,{
         "name": "WINCODEC_ERR_COMPONENTNOTFOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292336
    }
    ,{
         "name": "WINCODEC_ERR_IMAGESIZEOUTOFRANGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292335
    }
    ,{
         "name": "WINCODEC_ERR_TOOMUCHMETADATA"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292334
    }
    ,{
         "name": "WINCODEC_ERR_BADIMAGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292320
    }
    ,{
         "name": "WINCODEC_ERR_BADHEADER"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292319
    }
    ,{
         "name": "WINCODEC_ERR_FRAMEMISSING"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292318
    }
    ,{
         "name": "WINCODEC_ERR_BADMETADATAHEADER"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292317
    }
    ,{
         "name": "WINCODEC_ERR_BADSTREAMDATA"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292304
    }
    ,{
         "name": "WINCODEC_ERR_STREAMWRITE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292303
    }
    ,{
         "name": "WINCODEC_ERR_STREAMREAD"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292302
    }
    ,{
         "name": "WINCODEC_ERR_STREAMNOTAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292301
    }
    ,{
         "name": "WINCODEC_ERR_UNSUPPORTEDPIXELFORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292288
    }
    ,{
         "name": "WINCODEC_ERR_UNSUPPORTEDOPERATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292287
    }
    ,{
         "name": "WINCODEC_ERR_INVALIDREGISTRATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292278
    }
    ,{
         "name": "WINCODEC_ERR_COMPONENTINITIALIZEFAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292277
    }
    ,{
         "name": "WINCODEC_ERR_INSUFFICIENTBUFFER"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292276
    }
    ,{
         "name": "WINCODEC_ERR_DUPLICATEMETADATAPRESENT"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292275
    }
    ,{
         "name": "WINCODEC_ERR_PROPERTYUNEXPECTEDTYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292274
    }
    ,{
         "name": "WINCODEC_ERR_UNEXPECTEDSIZE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292273
    }
    ,{
         "name": "WINCODEC_ERR_INVALIDQUERYREQUEST"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292272
    }
    ,{
         "name": "WINCODEC_ERR_UNEXPECTEDMETADATATYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292271
    }
    ,{
         "name": "WINCODEC_ERR_REQUESTONLYVALIDATMETADATAROOT"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292270
    }
    ,{
         "name": "WINCODEC_ERR_INVALIDQUERYCHARACTER"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292269
    }
    ,{
         "name": "WINCODEC_ERR_WIN32ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292268
    }
    ,{
         "name": "WINCODEC_ERR_INVALIDPROGRESSIVELEVEL"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292267
    }
    ,{
         "name": "WINCODEC_ERR_INVALIDJPEGSCANINDEX"
        ,"type": {"kind":"Int32"}
        ,"value": -2003292266
    }
    ,{
         "name": "MILERR_OBJECTBUSY"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304447
    }
    ,{
         "name": "MILERR_INSUFFICIENTBUFFER"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304446
    }
    ,{
         "name": "MILERR_WIN32ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304445
    }
    ,{
         "name": "MILERR_SCANNER_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304444
    }
    ,{
         "name": "MILERR_SCREENACCESSDENIED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304443
    }
    ,{
         "name": "MILERR_DISPLAYSTATEINVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304442
    }
    ,{
         "name": "MILERR_NONINVERTIBLEMATRIX"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304441
    }
    ,{
         "name": "MILERR_ZEROVECTOR"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304440
    }
    ,{
         "name": "MILERR_TERMINATED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304439
    }
    ,{
         "name": "MILERR_BADNUMBER"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304438
    }
    ,{
         "name": "MILERR_INTERNALERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304320
    }
    ,{
         "name": "MILERR_DISPLAYFORMATNOTSUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304316
    }
    ,{
         "name": "MILERR_INVALIDCALL"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304315
    }
    ,{
         "name": "MILERR_ALREADYLOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304314
    }
    ,{
         "name": "MILERR_NOTLOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304313
    }
    ,{
         "name": "MILERR_DEVICECANNOTRENDERTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304312
    }
    ,{
         "name": "MILERR_GLYPHBITMAPMISSED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304311
    }
    ,{
         "name": "MILERR_MALFORMEDGLYPHCACHE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304310
    }
    ,{
         "name": "MILERR_GENERIC_IGNORE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304309
    }
    ,{
         "name": "MILERR_MALFORMED_GUIDELINE_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304308
    }
    ,{
         "name": "MILERR_NO_HARDWARE_DEVICE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304307
    }
    ,{
         "name": "MILERR_NEED_RECREATE_AND_PRESENT"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304306
    }
    ,{
         "name": "MILERR_ALREADY_INITIALIZED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304305
    }
    ,{
         "name": "MILERR_MISMATCHED_SIZE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304304
    }
    ,{
         "name": "MILERR_NO_REDIRECTION_SURFACE_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304303
    }
    ,{
         "name": "MILERR_REMOTING_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304302
    }
    ,{
         "name": "MILERR_QUEUED_PRESENT_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304301
    }
    ,{
         "name": "MILERR_NOT_QUEUING_PRESENTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304300
    }
    ,{
         "name": "MILERR_NO_REDIRECTION_SURFACE_RETRY_LATER"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304299
    }
    ,{
         "name": "MILERR_TOOMANYSHADERELEMNTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304298
    }
    ,{
         "name": "MILERR_MROW_READLOCK_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304297
    }
    ,{
         "name": "MILERR_MROW_UPDATE_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304296
    }
    ,{
         "name": "MILERR_SHADER_COMPILE_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304295
    }
    ,{
         "name": "MILERR_MAX_TEXTURE_SIZE_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304294
    }
    ,{
         "name": "MILERR_QPC_TIME_WENT_BACKWARD"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304293
    }
    ,{
         "name": "MILERR_DXGI_ENUMERATION_OUT_OF_SYNC"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304291
    }
    ,{
         "name": "MILERR_ADAPTER_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304290
    }
    ,{
         "name": "MILERR_COLORSPACE_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304289
    }
    ,{
         "name": "MILERR_PREFILTER_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304288
    }
    ,{
         "name": "MILERR_DISPLAYID_ACCESS_DENIED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003304287
    }
    ,{
         "name": "UCEERR_INVALIDPACKETHEADER"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303424
    }
    ,{
         "name": "UCEERR_UNKNOWNPACKET"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303423
    }
    ,{
         "name": "UCEERR_ILLEGALPACKET"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303422
    }
    ,{
         "name": "UCEERR_MALFORMEDPACKET"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303421
    }
    ,{
         "name": "UCEERR_ILLEGALHANDLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303420
    }
    ,{
         "name": "UCEERR_HANDLELOOKUPFAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303419
    }
    ,{
         "name": "UCEERR_RENDERTHREADFAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303418
    }
    ,{
         "name": "UCEERR_CTXSTACKFRSTTARGETNULL"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303417
    }
    ,{
         "name": "UCEERR_CONNECTIONIDLOOKUPFAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303416
    }
    ,{
         "name": "UCEERR_BLOCKSFULL"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303415
    }
    ,{
         "name": "UCEERR_MEMORYFAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303414
    }
    ,{
         "name": "UCEERR_PACKETRECORDOUTOFRANGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303413
    }
    ,{
         "name": "UCEERR_ILLEGALRECORDTYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303412
    }
    ,{
         "name": "UCEERR_OUTOFHANDLES"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303411
    }
    ,{
         "name": "UCEERR_UNCHANGABLE_UPDATE_ATTEMPTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303410
    }
    ,{
         "name": "UCEERR_NO_MULTIPLE_WORKER_THREADS"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303409
    }
    ,{
         "name": "UCEERR_REMOTINGNOTSUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303408
    }
    ,{
         "name": "UCEERR_MISSINGENDCOMMAND"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303407
    }
    ,{
         "name": "UCEERR_MISSINGBEGINCOMMAND"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303406
    }
    ,{
         "name": "UCEERR_CHANNELSYNCTIMEDOUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303405
    }
    ,{
         "name": "UCEERR_CHANNELSYNCABANDONED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303404
    }
    ,{
         "name": "UCEERR_UNSUPPORTEDTRANSPORTVERSION"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303403
    }
    ,{
         "name": "UCEERR_TRANSPORTUNAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303402
    }
    ,{
         "name": "UCEERR_FEEDBACK_UNSUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303401
    }
    ,{
         "name": "UCEERR_COMMANDTRANSPORTDENIED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303400
    }
    ,{
         "name": "UCEERR_GRAPHICSSTREAMUNAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303399
    }
    ,{
         "name": "UCEERR_GRAPHICSSTREAMALREADYOPEN"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303392
    }
    ,{
         "name": "UCEERR_TRANSPORTDISCONNECTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303391
    }
    ,{
         "name": "UCEERR_TRANSPORTOVERLOADED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303390
    }
    ,{
         "name": "UCEERR_PARTITION_ZOMBIED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303389
    }
    ,{
         "name": "MILAVERR_NOCLOCK"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303168
    }
    ,{
         "name": "MILAVERR_NOMEDIATYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303167
    }
    ,{
         "name": "MILAVERR_NOVIDEOMIXER"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303166
    }
    ,{
         "name": "MILAVERR_NOVIDEOPRESENTER"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303165
    }
    ,{
         "name": "MILAVERR_NOREADYFRAMES"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303164
    }
    ,{
         "name": "MILAVERR_MODULENOTLOADED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303163
    }
    ,{
         "name": "MILAVERR_WMPFACTORYNOTREGISTERED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303162
    }
    ,{
         "name": "MILAVERR_INVALIDWMPVERSION"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303161
    }
    ,{
         "name": "MILAVERR_INSUFFICIENTVIDEORESOURCES"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303160
    }
    ,{
         "name": "MILAVERR_VIDEOACCELERATIONNOTAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303159
    }
    ,{
         "name": "MILAVERR_REQUESTEDTEXTURETOOBIG"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303158
    }
    ,{
         "name": "MILAVERR_SEEKFAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303157
    }
    ,{
         "name": "MILAVERR_UNEXPECTEDWMPFAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303156
    }
    ,{
         "name": "MILAVERR_MEDIAPLAYERCLOSED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303155
    }
    ,{
         "name": "MILAVERR_UNKNOWNHARDWAREERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2003303154
    }
    ,{
         "name": "MILEFFECTSERR_UNKNOWNPROPERTY"
        ,"type": {"kind":"Int32"}
        ,"value": -2003302898
    }
    ,{
         "name": "MILEFFECTSERR_EFFECTNOTPARTOFGROUP"
        ,"type": {"kind":"Int32"}
        ,"value": -2003302897
    }
    ,{
         "name": "MILEFFECTSERR_NOINPUTSOURCEATTACHED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003302896
    }
    ,{
         "name": "MILEFFECTSERR_CONNECTORNOTCONNECTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003302895
    }
    ,{
         "name": "MILEFFECTSERR_CONNECTORNOTASSOCIATEDWITHEFFECT"
        ,"type": {"kind":"Int32"}
        ,"value": -2003302894
    }
    ,{
         "name": "MILEFFECTSERR_RESERVED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003302893
    }
    ,{
         "name": "MILEFFECTSERR_CYCLEDETECTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003302892
    }
    ,{
         "name": "MILEFFECTSERR_EFFECTINMORETHANONEGRAPH"
        ,"type": {"kind":"Int32"}
        ,"value": -2003302891
    }
    ,{
         "name": "MILEFFECTSERR_EFFECTALREADYINAGRAPH"
        ,"type": {"kind":"Int32"}
        ,"value": -2003302890
    }
    ,{
         "name": "MILEFFECTSERR_EFFECTHASNOCHILDREN"
        ,"type": {"kind":"Int32"}
        ,"value": -2003302889
    }
    ,{
         "name": "MILEFFECTSERR_ALREADYATTACHEDTOLISTENER"
        ,"type": {"kind":"Int32"}
        ,"value": -2003302888
    }
    ,{
         "name": "MILEFFECTSERR_NOTAFFINETRANSFORM"
        ,"type": {"kind":"Int32"}
        ,"value": -2003302887
    }
    ,{
         "name": "MILEFFECTSERR_EMPTYBOUNDS"
        ,"type": {"kind":"Int32"}
        ,"value": -2003302886
    }
    ,{
         "name": "MILEFFECTSERR_OUTPUTSIZETOOLARGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003302885
    }
    ,{
         "name": "DWMERR_STATE_TRANSITION_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003302656
    }
    ,{
         "name": "DWMERR_THEME_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003302655
    }
    ,{
         "name": "DWMERR_CATASTROPHIC_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003302654
    }
    ,{
         "name": "DCOMPOSITION_ERROR_WINDOW_ALREADY_COMPOSED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003302400
    }
    ,{
         "name": "DCOMPOSITION_ERROR_SURFACE_BEING_RENDERED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003302399
    }
    ,{
         "name": "DCOMPOSITION_ERROR_SURFACE_NOT_BEING_RENDERED"
        ,"type": {"kind":"Int32"}
        ,"value": -2003302398
    }
    ,{
         "name": "ONL_E_INVALID_AUTHENTICATION_TARGET"
        ,"type": {"kind":"Int32"}
        ,"value": -2138701823
    }
    ,{
         "name": "ONL_E_ACCESS_DENIED_BY_TOU"
        ,"type": {"kind":"Int32"}
        ,"value": -2138701822
    }
    ,{
         "name": "ONL_E_INVALID_APPLICATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2138701821
    }
    ,{
         "name": "ONL_E_PASSWORD_UPDATE_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2138701820
    }
    ,{
         "name": "ONL_E_ACCOUNT_UPDATE_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2138701819
    }
    ,{
         "name": "ONL_E_FORCESIGNIN"
        ,"type": {"kind":"Int32"}
        ,"value": -2138701818
    }
    ,{
         "name": "ONL_E_ACCOUNT_LOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2138701817
    }
    ,{
         "name": "ONL_E_PARENTAL_CONSENT_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2138701816
    }
    ,{
         "name": "ONL_E_EMAIL_VERIFICATION_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2138701815
    }
    ,{
         "name": "ONL_E_ACCOUNT_SUSPENDED_COMPROIMISE"
        ,"type": {"kind":"Int32"}
        ,"value": -2138701814
    }
    ,{
         "name": "ONL_E_ACCOUNT_SUSPENDED_ABUSE"
        ,"type": {"kind":"Int32"}
        ,"value": -2138701813
    }
    ,{
         "name": "ONL_E_ACTION_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2138701812
    }
    ,{
         "name": "ONL_CONNECTION_COUNT_LIMIT"
        ,"type": {"kind":"Int32"}
        ,"value": -2138701811
    }
    ,{
         "name": "ONL_E_CONNECTED_ACCOUNT_CAN_NOT_SIGNOUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2138701810
    }
    ,{
         "name": "ONL_E_USER_AUTHENTICATION_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2138701809
    }
    ,{
         "name": "ONL_E_REQUEST_THROTTLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2138701808
    }
    ,{
         "name": "FA_E_MAX_PERSISTED_ITEMS_REACHED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927200
    }
    ,{
         "name": "FA_E_HOMEGROUP_NOT_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927198
    }
    ,{
         "name": "E_MONITOR_RESOLUTION_TOO_LOW"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927152
    }
    ,{
         "name": "E_ELEVATED_ACTIVATION_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927151
    }
    ,{
         "name": "E_UAC_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927150
    }
    ,{
         "name": "E_FULL_ADMIN_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927149
    }
    ,{
         "name": "E_APPLICATION_NOT_REGISTERED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927148
    }
    ,{
         "name": "E_MULTIPLE_EXTENSIONS_FOR_APPLICATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927147
    }
    ,{
         "name": "E_MULTIPLE_PACKAGES_FOR_FAMILY"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927146
    }
    ,{
         "name": "E_APPLICATION_MANAGER_NOT_RUNNING"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927145
    }
    ,{
         "name": "S_STORE_LAUNCHED_FOR_REMEDIATION"
        ,"type": {"kind":"Int32"}
        ,"value": 2556504
    }
    ,{
         "name": "S_APPLICATION_ACTIVATION_ERROR_HANDLED_BY_DIALOG"
        ,"type": {"kind":"Int32"}
        ,"value": 2556505
    }
    ,{
         "name": "E_APPLICATION_ACTIVATION_TIMED_OUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927142
    }
    ,{
         "name": "E_APPLICATION_ACTIVATION_EXEC_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927141
    }
    ,{
         "name": "E_APPLICATION_TEMPORARY_LICENSE_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927140
    }
    ,{
         "name": "E_APPLICATION_TRIAL_LICENSE_EXPIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927139
    }
    ,{
         "name": "E_SKYDRIVE_ROOT_TARGET_FILE_SYSTEM_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927136
    }
    ,{
         "name": "E_SKYDRIVE_ROOT_TARGET_OVERLAP"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927135
    }
    ,{
         "name": "E_SKYDRIVE_ROOT_TARGET_CANNOT_INDEX"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927134
    }
    ,{
         "name": "E_SKYDRIVE_FILE_NOT_UPLOADED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927133
    }
    ,{
         "name": "E_SKYDRIVE_UPDATE_AVAILABILITY_FAIL"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927132
    }
    ,{
         "name": "E_SKYDRIVE_ROOT_TARGET_VOLUME_ROOT_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2144927131
    }
    ,{
         "name": "E_SYNCENGINE_FILE_SIZE_OVER_LIMIT"
        ,"type": {"kind":"Int32"}
        ,"value": -2013089791
    }
    ,{
         "name": "E_SYNCENGINE_FILE_SIZE_EXCEEDS_REMAINING_QUOTA"
        ,"type": {"kind":"Int32"}
        ,"value": -2013089790
    }
    ,{
         "name": "E_SYNCENGINE_UNSUPPORTED_FILE_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": -2013089789
    }
    ,{
         "name": "E_SYNCENGINE_FOLDER_ITEM_COUNT_LIMIT_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": -2013089788
    }
    ,{
         "name": "E_SYNCENGINE_FILE_SYNC_PARTNER_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2013089787
    }
    ,{
         "name": "E_SYNCENGINE_SYNC_PAUSED_BY_SERVICE"
        ,"type": {"kind":"Int32"}
        ,"value": -2013089786
    }
    ,{
         "name": "E_SYNCENGINE_FILE_IDENTIFIER_UNKNOWN"
        ,"type": {"kind":"Int32"}
        ,"value": -2013085694
    }
    ,{
         "name": "E_SYNCENGINE_SERVICE_AUTHENTICATION_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2013085693
    }
    ,{
         "name": "E_SYNCENGINE_UNKNOWN_SERVICE_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2013085692
    }
    ,{
         "name": "E_SYNCENGINE_SERVICE_RETURNED_UNEXPECTED_SIZE"
        ,"type": {"kind":"Int32"}
        ,"value": -2013085691
    }
    ,{
         "name": "E_SYNCENGINE_REQUEST_BLOCKED_BY_SERVICE"
        ,"type": {"kind":"Int32"}
        ,"value": -2013085690
    }
    ,{
         "name": "E_SYNCENGINE_REQUEST_BLOCKED_DUE_TO_CLIENT_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2013085689
    }
    ,{
         "name": "E_SYNCENGINE_FOLDER_INACCESSIBLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2013081599
    }
    ,{
         "name": "E_SYNCENGINE_UNSUPPORTED_FOLDER_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": -2013081598
    }
    ,{
         "name": "E_SYNCENGINE_UNSUPPORTED_MARKET"
        ,"type": {"kind":"Int32"}
        ,"value": -2013081597
    }
    ,{
         "name": "E_SYNCENGINE_PATH_LENGTH_LIMIT_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": -2013081596
    }
    ,{
         "name": "E_SYNCENGINE_REMOTE_PATH_LENGTH_LIMIT_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": -2013081595
    }
    ,{
         "name": "E_SYNCENGINE_CLIENT_UPDATE_NEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": -2013081594
    }
    ,{
         "name": "E_SYNCENGINE_PROXY_AUTHENTICATION_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2013081593
    }
    ,{
         "name": "E_SYNCENGINE_STORAGE_SERVICE_PROVISIONING_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2013081592
    }
    ,{
         "name": "E_SYNCENGINE_UNSUPPORTED_REPARSE_POINT"
        ,"type": {"kind":"Int32"}
        ,"value": -2013081591
    }
    ,{
         "name": "E_SYNCENGINE_STORAGE_SERVICE_BLOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2013081590
    }
    ,{
         "name": "E_SYNCENGINE_FOLDER_IN_REDIRECTION"
        ,"type": {"kind":"Int32"}
        ,"value": -2013081589
    }
    ,{
         "name": "EAS_E_POLICY_NOT_MANAGED_BY_OS"
        ,"type": {"kind":"Int32"}
        ,"value": -2141913087
    }
    ,{
         "name": "EAS_E_POLICY_COMPLIANT_WITH_ACTIONS"
        ,"type": {"kind":"Int32"}
        ,"value": -2141913086
    }
    ,{
         "name": "EAS_E_REQUESTED_POLICY_NOT_ENFORCEABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2141913085
    }
    ,{
         "name": "EAS_E_CURRENT_USER_HAS_BLANK_PASSWORD"
        ,"type": {"kind":"Int32"}
        ,"value": -2141913084
    }
    ,{
         "name": "EAS_E_REQUESTED_POLICY_PASSWORD_EXPIRATION_INCOMPATIBLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2141913083
    }
    ,{
         "name": "EAS_E_USER_CANNOT_CHANGE_PASSWORD"
        ,"type": {"kind":"Int32"}
        ,"value": -2141913082
    }
    ,{
         "name": "EAS_E_ADMINS_HAVE_BLANK_PASSWORD"
        ,"type": {"kind":"Int32"}
        ,"value": -2141913081
    }
    ,{
         "name": "EAS_E_ADMINS_CANNOT_CHANGE_PASSWORD"
        ,"type": {"kind":"Int32"}
        ,"value": -2141913080
    }
    ,{
         "name": "EAS_E_LOCAL_CONTROLLED_USERS_CANNOT_CHANGE_PASSWORD"
        ,"type": {"kind":"Int32"}
        ,"value": -2141913079
    }
    ,{
         "name": "EAS_E_PASSWORD_POLICY_NOT_ENFORCEABLE_FOR_CONNECTED_ADMINS"
        ,"type": {"kind":"Int32"}
        ,"value": -2141913078
    }
    ,{
         "name": "EAS_E_CONNECTED_ADMINS_NEED_TO_CHANGE_PASSWORD"
        ,"type": {"kind":"Int32"}
        ,"value": -2141913077
    }
    ,{
         "name": "EAS_E_PASSWORD_POLICY_NOT_ENFORCEABLE_FOR_CURRENT_CONNECTED_USER"
        ,"type": {"kind":"Int32"}
        ,"value": -2141913076
    }
    ,{
         "name": "EAS_E_CURRENT_CONNECTED_USER_NEED_TO_CHANGE_PASSWORD"
        ,"type": {"kind":"Int32"}
        ,"value": -2141913075
    }
    ,{
         "name": "WEB_E_UNSUPPORTED_FORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": -2089484287
    }
    ,{
         "name": "WEB_E_INVALID_XML"
        ,"type": {"kind":"Int32"}
        ,"value": -2089484286
    }
    ,{
         "name": "WEB_E_MISSING_REQUIRED_ELEMENT"
        ,"type": {"kind":"Int32"}
        ,"value": -2089484285
    }
    ,{
         "name": "WEB_E_MISSING_REQUIRED_ATTRIBUTE"
        ,"type": {"kind":"Int32"}
        ,"value": -2089484284
    }
    ,{
         "name": "WEB_E_UNEXPECTED_CONTENT"
        ,"type": {"kind":"Int32"}
        ,"value": -2089484283
    }
    ,{
         "name": "WEB_E_RESOURCE_TOO_LARGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2089484282
    }
    ,{
         "name": "WEB_E_INVALID_JSON_STRING"
        ,"type": {"kind":"Int32"}
        ,"value": -2089484281
    }
    ,{
         "name": "WEB_E_INVALID_JSON_NUMBER"
        ,"type": {"kind":"Int32"}
        ,"value": -2089484280
    }
    ,{
         "name": "WEB_E_JSON_VALUE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2089484279
    }
    ,{
         "name": "HTTP_E_STATUS_UNEXPECTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2145845247
    }
    ,{
         "name": "HTTP_E_STATUS_UNEXPECTED_REDIRECTION"
        ,"type": {"kind":"Int32"}
        ,"value": -2145845245
    }
    ,{
         "name": "HTTP_E_STATUS_UNEXPECTED_CLIENT_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2145845244
    }
    ,{
         "name": "HTTP_E_STATUS_UNEXPECTED_SERVER_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2145845243
    }
    ,{
         "name": "HTTP_E_STATUS_AMBIGUOUS"
        ,"type": {"kind":"Int32"}
        ,"value": -2145844948
    }
    ,{
         "name": "HTTP_E_STATUS_MOVED"
        ,"type": {"kind":"Int32"}
        ,"value": -2145844947
    }
    ,{
         "name": "HTTP_E_STATUS_REDIRECT"
        ,"type": {"kind":"Int32"}
        ,"value": -2145844946
    }
    ,{
         "name": "HTTP_E_STATUS_REDIRECT_METHOD"
        ,"type": {"kind":"Int32"}
        ,"value": -2145844945
    }
    ,{
         "name": "HTTP_E_STATUS_NOT_MODIFIED"
        ,"type": {"kind":"Int32"}
        ,"value": -2145844944
    }
    ,{
         "name": "HTTP_E_STATUS_USE_PROXY"
        ,"type": {"kind":"Int32"}
        ,"value": -2145844943
    }
    ,{
         "name": "HTTP_E_STATUS_REDIRECT_KEEP_VERB"
        ,"type": {"kind":"Int32"}
        ,"value": -2145844941
    }
    ,{
         "name": "HTTP_E_STATUS_BAD_REQUEST"
        ,"type": {"kind":"Int32"}
        ,"value": -2145844848
    }
    ,{
         "name": "HTTP_E_STATUS_DENIED"
        ,"type": {"kind":"Int32"}
        ,"value": -2145844847
    }
    ,{
         "name": "HTTP_E_STATUS_PAYMENT_REQ"
        ,"type": {"kind":"Int32"}
        ,"value": -2145844846
    }
    ,{
         "name": "HTTP_E_STATUS_FORBIDDEN"
        ,"type": {"kind":"Int32"}
        ,"value": -2145844845
    }
    ,{
         "name": "HTTP_E_STATUS_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2145844844
    }
    ,{
         "name": "HTTP_E_STATUS_BAD_METHOD"
        ,"type": {"kind":"Int32"}
        ,"value": -2145844843
    }
    ,{
         "name": "HTTP_E_STATUS_NONE_ACCEPTABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2145844842
    }
    ,{
         "name": "HTTP_E_STATUS_PROXY_AUTH_REQ"
        ,"type": {"kind":"Int32"}
        ,"value": -2145844841
    }
    ,{
         "name": "HTTP_E_STATUS_REQUEST_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2145844840
    }
    ,{
         "name": "HTTP_E_STATUS_CONFLICT"
        ,"type": {"kind":"Int32"}
        ,"value": -2145844839
    }
    ,{
         "name": "HTTP_E_STATUS_GONE"
        ,"type": {"kind":"Int32"}
        ,"value": -2145844838
    }
    ,{
         "name": "HTTP_E_STATUS_LENGTH_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2145844837
    }
    ,{
         "name": "HTTP_E_STATUS_PRECOND_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2145844836
    }
    ,{
         "name": "HTTP_E_STATUS_REQUEST_TOO_LARGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2145844835
    }
    ,{
         "name": "HTTP_E_STATUS_URI_TOO_LONG"
        ,"type": {"kind":"Int32"}
        ,"value": -2145844834
    }
    ,{
         "name": "HTTP_E_STATUS_UNSUPPORTED_MEDIA"
        ,"type": {"kind":"Int32"}
        ,"value": -2145844833
    }
    ,{
         "name": "HTTP_E_STATUS_RANGE_NOT_SATISFIABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2145844832
    }
    ,{
         "name": "HTTP_E_STATUS_EXPECTATION_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2145844831
    }
    ,{
         "name": "HTTP_E_STATUS_SERVER_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2145844748
    }
    ,{
         "name": "HTTP_E_STATUS_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2145844747
    }
    ,{
         "name": "HTTP_E_STATUS_BAD_GATEWAY"
        ,"type": {"kind":"Int32"}
        ,"value": -2145844746
    }
    ,{
         "name": "HTTP_E_STATUS_SERVICE_UNAVAIL"
        ,"type": {"kind":"Int32"}
        ,"value": -2145844745
    }
    ,{
         "name": "HTTP_E_STATUS_GATEWAY_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2145844744
    }
    ,{
         "name": "HTTP_E_STATUS_VERSION_NOT_SUP"
        ,"type": {"kind":"Int32"}
        ,"value": -2145844743
    }
    ,{
         "name": "E_INVALID_PROTOCOL_OPERATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2089418751
    }
    ,{
         "name": "E_INVALID_PROTOCOL_FORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": -2089418750
    }
    ,{
         "name": "E_PROTOCOL_EXTENSIONS_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2089418749
    }
    ,{
         "name": "E_SUBPROTOCOL_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2089418748
    }
    ,{
         "name": "E_PROTOCOL_VERSION_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2089418747
    }
    ,{
         "name": "INPUT_E_OUT_OF_ORDER"
        ,"type": {"kind":"Int32"}
        ,"value": -2143289344
    }
    ,{
         "name": "INPUT_E_REENTRANCY"
        ,"type": {"kind":"Int32"}
        ,"value": -2143289343
    }
    ,{
         "name": "INPUT_E_MULTIMODAL"
        ,"type": {"kind":"Int32"}
        ,"value": -2143289342
    }
    ,{
         "name": "INPUT_E_PACKET"
        ,"type": {"kind":"Int32"}
        ,"value": -2143289341
    }
    ,{
         "name": "INPUT_E_FRAME"
        ,"type": {"kind":"Int32"}
        ,"value": -2143289340
    }
    ,{
         "name": "INPUT_E_HISTORY"
        ,"type": {"kind":"Int32"}
        ,"value": -2143289339
    }
    ,{
         "name": "INPUT_E_DEVICE_INFO"
        ,"type": {"kind":"Int32"}
        ,"value": -2143289338
    }
    ,{
         "name": "INPUT_E_TRANSFORM"
        ,"type": {"kind":"Int32"}
        ,"value": -2143289337
    }
    ,{
         "name": "INPUT_E_DEVICE_PROPERTY"
        ,"type": {"kind":"Int32"}
        ,"value": -2143289336
    }
    ,{
         "name": "INET_E_INVALID_URL"
        ,"type": {"kind":"Int32"}
        ,"value": -2146697214
    }
    ,{
         "name": "INET_E_NO_SESSION"
        ,"type": {"kind":"Int32"}
        ,"value": -2146697213
    }
    ,{
         "name": "INET_E_CANNOT_CONNECT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146697212
    }
    ,{
         "name": "INET_E_RESOURCE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2146697211
    }
    ,{
         "name": "INET_E_OBJECT_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2146697210
    }
    ,{
         "name": "INET_E_DATA_NOT_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146697209
    }
    ,{
         "name": "INET_E_DOWNLOAD_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146697208
    }
    ,{
         "name": "INET_E_AUTHENTICATION_REQUIRED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146697207
    }
    ,{
         "name": "INET_E_NO_VALID_MEDIA"
        ,"type": {"kind":"Int32"}
        ,"value": -2146697206
    }
    ,{
         "name": "INET_E_CONNECTION_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146697205
    }
    ,{
         "name": "INET_E_INVALID_REQUEST"
        ,"type": {"kind":"Int32"}
        ,"value": -2146697204
    }
    ,{
         "name": "INET_E_UNKNOWN_PROTOCOL"
        ,"type": {"kind":"Int32"}
        ,"value": -2146697203
    }
    ,{
         "name": "INET_E_SECURITY_PROBLEM"
        ,"type": {"kind":"Int32"}
        ,"value": -2146697202
    }
    ,{
         "name": "INET_E_CANNOT_LOAD_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": -2146697201
    }
    ,{
         "name": "INET_E_CANNOT_INSTANTIATE_OBJECT"
        ,"type": {"kind":"Int32"}
        ,"value": -2146697200
    }
    ,{
         "name": "INET_E_INVALID_CERTIFICATE"
        ,"type": {"kind":"Int32"}
        ,"value": -2146697191
    }
    ,{
         "name": "INET_E_REDIRECT_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146697196
    }
    ,{
         "name": "INET_E_REDIRECT_TO_DIR"
        ,"type": {"kind":"Int32"}
        ,"value": -2146697195
    }
    ,{
         "name": "ERROR_DBG_CREATE_PROCESS_FAILURE_LOCKDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": -2135949311
    }
    ,{
         "name": "ERROR_DBG_ATTACH_PROCESS_FAILURE_LOCKDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": -2135949310
    }
    ,{
         "name": "ERROR_DBG_CONNECT_SERVER_FAILURE_LOCKDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": -2135949309
    }
    ,{
         "name": "ERROR_DBG_START_SERVER_FAILURE_LOCKDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": -2135949308
    }
    ,{
         "name": "ERROR_IO_PREEMPTED"
        ,"type": {"kind":"Int32"}
        ,"value": -1996423167
    }
    ,{
         "name": "JSCRIPT_E_CANTEXECUTE"
        ,"type": {"kind":"Int32"}
        ,"value": -1996357631
    }
    ,{
         "name": "WEP_E_NOT_PROVISIONED_ON_ALL_VOLUMES"
        ,"type": {"kind":"Int32"}
        ,"value": -2013200383
    }
    ,{
         "name": "WEP_E_FIXED_DATA_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2013200382
    }
    ,{
         "name": "WEP_E_HARDWARE_NOT_COMPLIANT"
        ,"type": {"kind":"Int32"}
        ,"value": -2013200381
    }
    ,{
         "name": "WEP_E_LOCK_NOT_CONFIGURED"
        ,"type": {"kind":"Int32"}
        ,"value": -2013200380
    }
    ,{
         "name": "WEP_E_PROTECTION_SUSPENDED"
        ,"type": {"kind":"Int32"}
        ,"value": -2013200379
    }
    ,{
         "name": "WEP_E_NO_LICENSE"
        ,"type": {"kind":"Int32"}
        ,"value": -2013200378
    }
    ,{
         "name": "WEP_E_OS_NOT_PROTECTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2013200377
    }
    ,{
         "name": "WEP_E_UNEXPECTED_FAIL"
        ,"type": {"kind":"Int32"}
        ,"value": -2013200376
    }
    ,{
         "name": "WEP_E_BUFFER_TOO_LARGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2013200375
    }
    ,{
         "name": "ERROR_SVHDX_ERROR_STORED"
        ,"type": {"kind":"Int32"}
        ,"value": -1067712512
    }
    ,{
         "name": "ERROR_SVHDX_ERROR_NOT_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -1067647232
    }
    ,{
         "name": "ERROR_SVHDX_UNIT_ATTENTION_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -1067647231
    }
    ,{
         "name": "ERROR_SVHDX_UNIT_ATTENTION_CAPACITY_DATA_CHANGED"
        ,"type": {"kind":"Int32"}
        ,"value": -1067647230
    }
    ,{
         "name": "ERROR_SVHDX_UNIT_ATTENTION_RESERVATIONS_PREEMPTED"
        ,"type": {"kind":"Int32"}
        ,"value": -1067647229
    }
    ,{
         "name": "ERROR_SVHDX_UNIT_ATTENTION_RESERVATIONS_RELEASED"
        ,"type": {"kind":"Int32"}
        ,"value": -1067647228
    }
    ,{
         "name": "ERROR_SVHDX_UNIT_ATTENTION_REGISTRATIONS_PREEMPTED"
        ,"type": {"kind":"Int32"}
        ,"value": -1067647227
    }
    ,{
         "name": "ERROR_SVHDX_UNIT_ATTENTION_OPERATING_DEFINITION_CHANGED"
        ,"type": {"kind":"Int32"}
        ,"value": -1067647226
    }
    ,{
         "name": "ERROR_SVHDX_RESERVATION_CONFLICT"
        ,"type": {"kind":"Int32"}
        ,"value": -1067647225
    }
    ,{
         "name": "ERROR_SVHDX_WRONG_FILE_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -1067647224
    }
    ,{
         "name": "ERROR_SVHDX_VERSION_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -1067647223
    }
    ,{
         "name": "ERROR_VHD_SHARED"
        ,"type": {"kind":"Int32"}
        ,"value": -1067647222
    }
    ,{
         "name": "ERROR_SVHDX_NO_INITIATOR"
        ,"type": {"kind":"Int32"}
        ,"value": -1067647221
    }
    ,{
         "name": "ERROR_VHDSET_BACKING_STORAGE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -1067647220
    }
    ,{
         "name": "ERROR_SMB_NO_PREAUTH_INTEGRITY_HASH_OVERLAP"
        ,"type": {"kind":"Int32"}
        ,"value": -1067646976
    }
    ,{
         "name": "ERROR_SMB_BAD_CLUSTER_DIALECT"
        ,"type": {"kind":"Int32"}
        ,"value": -1067646975
    }
    ,{
         "name": "WININET_E_OUT_OF_HANDLES"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012895
    }
    ,{
         "name": "WININET_E_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012894
    }
    ,{
         "name": "WININET_E_EXTENDED_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012893
    }
    ,{
         "name": "WININET_E_INTERNAL_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012892
    }
    ,{
         "name": "WININET_E_INVALID_URL"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012891
    }
    ,{
         "name": "WININET_E_UNRECOGNIZED_SCHEME"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012890
    }
    ,{
         "name": "WININET_E_NAME_NOT_RESOLVED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012889
    }
    ,{
         "name": "WININET_E_PROTOCOL_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012888
    }
    ,{
         "name": "WININET_E_INVALID_OPTION"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012887
    }
    ,{
         "name": "WININET_E_BAD_OPTION_LENGTH"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012886
    }
    ,{
         "name": "WININET_E_OPTION_NOT_SETTABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012885
    }
    ,{
         "name": "WININET_E_SHUTDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012884
    }
    ,{
         "name": "WININET_E_INCORRECT_USER_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012883
    }
    ,{
         "name": "WININET_E_INCORRECT_PASSWORD"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012882
    }
    ,{
         "name": "WININET_E_LOGIN_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012881
    }
    ,{
         "name": "WININET_E_INVALID_OPERATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012880
    }
    ,{
         "name": "WININET_E_OPERATION_CANCELLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012879
    }
    ,{
         "name": "WININET_E_INCORRECT_HANDLE_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012878
    }
    ,{
         "name": "WININET_E_INCORRECT_HANDLE_STATE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012877
    }
    ,{
         "name": "WININET_E_NOT_PROXY_REQUEST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012876
    }
    ,{
         "name": "WININET_E_REGISTRY_VALUE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012875
    }
    ,{
         "name": "WININET_E_BAD_REGISTRY_PARAMETER"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012874
    }
    ,{
         "name": "WININET_E_NO_DIRECT_ACCESS"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012873
    }
    ,{
         "name": "WININET_E_NO_CONTEXT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012872
    }
    ,{
         "name": "WININET_E_NO_CALLBACK"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012871
    }
    ,{
         "name": "WININET_E_REQUEST_PENDING"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012870
    }
    ,{
         "name": "WININET_E_INCORRECT_FORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012869
    }
    ,{
         "name": "WININET_E_ITEM_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012868
    }
    ,{
         "name": "WININET_E_CANNOT_CONNECT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012867
    }
    ,{
         "name": "WININET_E_CONNECTION_ABORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012866
    }
    ,{
         "name": "WININET_E_CONNECTION_RESET"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012865
    }
    ,{
         "name": "WININET_E_FORCE_RETRY"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012864
    }
    ,{
         "name": "WININET_E_INVALID_PROXY_REQUEST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012863
    }
    ,{
         "name": "WININET_E_NEED_UI"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012862
    }
    ,{
         "name": "WININET_E_HANDLE_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012860
    }
    ,{
         "name": "WININET_E_SEC_CERT_DATE_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012859
    }
    ,{
         "name": "WININET_E_SEC_CERT_CN_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012858
    }
    ,{
         "name": "WININET_E_HTTP_TO_HTTPS_ON_REDIR"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012857
    }
    ,{
         "name": "WININET_E_HTTPS_TO_HTTP_ON_REDIR"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012856
    }
    ,{
         "name": "WININET_E_MIXED_SECURITY"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012855
    }
    ,{
         "name": "WININET_E_CHG_POST_IS_NON_SECURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012854
    }
    ,{
         "name": "WININET_E_POST_IS_NON_SECURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012853
    }
    ,{
         "name": "WININET_E_CLIENT_AUTH_CERT_NEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012852
    }
    ,{
         "name": "WININET_E_INVALID_CA"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012851
    }
    ,{
         "name": "WININET_E_CLIENT_AUTH_NOT_SETUP"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012850
    }
    ,{
         "name": "WININET_E_ASYNC_THREAD_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012849
    }
    ,{
         "name": "WININET_E_REDIRECT_SCHEME_CHANGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012848
    }
    ,{
         "name": "WININET_E_DIALOG_PENDING"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012847
    }
    ,{
         "name": "WININET_E_RETRY_DIALOG"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012846
    }
    ,{
         "name": "WININET_E_NO_NEW_CONTAINERS"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012845
    }
    ,{
         "name": "WININET_E_HTTPS_HTTP_SUBMIT_REDIR"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012844
    }
    ,{
         "name": "WININET_E_SEC_CERT_ERRORS"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012841
    }
    ,{
         "name": "WININET_E_SEC_CERT_REV_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012839
    }
    ,{
         "name": "WININET_E_HEADER_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012746
    }
    ,{
         "name": "WININET_E_DOWNLEVEL_SERVER"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012745
    }
    ,{
         "name": "WININET_E_INVALID_SERVER_RESPONSE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012744
    }
    ,{
         "name": "WININET_E_INVALID_HEADER"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012743
    }
    ,{
         "name": "WININET_E_INVALID_QUERY_REQUEST"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012742
    }
    ,{
         "name": "WININET_E_HEADER_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012741
    }
    ,{
         "name": "WININET_E_REDIRECT_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012740
    }
    ,{
         "name": "WININET_E_SECURITY_CHANNEL_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012739
    }
    ,{
         "name": "WININET_E_UNABLE_TO_CACHE_FILE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012738
    }
    ,{
         "name": "WININET_E_TCPIP_NOT_INSTALLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012737
    }
    ,{
         "name": "WININET_E_DISCONNECTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012733
    }
    ,{
         "name": "WININET_E_SERVER_UNREACHABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012732
    }
    ,{
         "name": "WININET_E_PROXY_SERVER_UNREACHABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012731
    }
    ,{
         "name": "WININET_E_BAD_AUTO_PROXY_SCRIPT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012730
    }
    ,{
         "name": "WININET_E_UNABLE_TO_DOWNLOAD_SCRIPT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012729
    }
    ,{
         "name": "WININET_E_SEC_INVALID_CERT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012727
    }
    ,{
         "name": "WININET_E_SEC_CERT_REVOKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012726
    }
    ,{
         "name": "WININET_E_FAILED_DUETOSECURITYCHECK"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012725
    }
    ,{
         "name": "WININET_E_NOT_INITIALIZED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012724
    }
    ,{
         "name": "WININET_E_LOGIN_FAILURE_DISPLAY_ENTITY_BODY"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012722
    }
    ,{
         "name": "WININET_E_DECODING_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012721
    }
    ,{
         "name": "WININET_E_NOT_REDIRECTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012736
    }
    ,{
         "name": "WININET_E_COOKIE_NEEDS_CONFIRMATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012735
    }
    ,{
         "name": "WININET_E_COOKIE_DECLINED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012734
    }
    ,{
         "name": "WININET_E_REDIRECT_NEEDS_CONFIRMATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2147012728
    }
    ,{
         "name": "SQLITE_E_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574335
    }
    ,{
         "name": "SQLITE_E_INTERNAL"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574334
    }
    ,{
         "name": "SQLITE_E_PERM"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574333
    }
    ,{
         "name": "SQLITE_E_ABORT"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574332
    }
    ,{
         "name": "SQLITE_E_BUSY"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574331
    }
    ,{
         "name": "SQLITE_E_LOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574330
    }
    ,{
         "name": "SQLITE_E_NOMEM"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574329
    }
    ,{
         "name": "SQLITE_E_READONLY"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574328
    }
    ,{
         "name": "SQLITE_E_INTERRUPT"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574327
    }
    ,{
         "name": "SQLITE_E_IOERR"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574326
    }
    ,{
         "name": "SQLITE_E_CORRUPT"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574325
    }
    ,{
         "name": "SQLITE_E_NOTFOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574324
    }
    ,{
         "name": "SQLITE_E_FULL"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574323
    }
    ,{
         "name": "SQLITE_E_CANTOPEN"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574322
    }
    ,{
         "name": "SQLITE_E_PROTOCOL"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574321
    }
    ,{
         "name": "SQLITE_E_EMPTY"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574320
    }
    ,{
         "name": "SQLITE_E_SCHEMA"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574319
    }
    ,{
         "name": "SQLITE_E_TOOBIG"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574318
    }
    ,{
         "name": "SQLITE_E_CONSTRAINT"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574317
    }
    ,{
         "name": "SQLITE_E_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574316
    }
    ,{
         "name": "SQLITE_E_MISUSE"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574315
    }
    ,{
         "name": "SQLITE_E_NOLFS"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574314
    }
    ,{
         "name": "SQLITE_E_AUTH"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574313
    }
    ,{
         "name": "SQLITE_E_FORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574312
    }
    ,{
         "name": "SQLITE_E_RANGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574311
    }
    ,{
         "name": "SQLITE_E_NOTADB"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574310
    }
    ,{
         "name": "SQLITE_E_NOTICE"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574309
    }
    ,{
         "name": "SQLITE_E_WARNING"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574308
    }
    ,{
         "name": "SQLITE_E_ROW"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574236
    }
    ,{
         "name": "SQLITE_E_DONE"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574235
    }
    ,{
         "name": "SQLITE_E_IOERR_READ"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574070
    }
    ,{
         "name": "SQLITE_E_IOERR_SHORT_READ"
        ,"type": {"kind":"Int32"}
        ,"value": -2018573814
    }
    ,{
         "name": "SQLITE_E_IOERR_WRITE"
        ,"type": {"kind":"Int32"}
        ,"value": -2018573558
    }
    ,{
         "name": "SQLITE_E_IOERR_FSYNC"
        ,"type": {"kind":"Int32"}
        ,"value": -2018573302
    }
    ,{
         "name": "SQLITE_E_IOERR_DIR_FSYNC"
        ,"type": {"kind":"Int32"}
        ,"value": -2018573046
    }
    ,{
         "name": "SQLITE_E_IOERR_TRUNCATE"
        ,"type": {"kind":"Int32"}
        ,"value": -2018572790
    }
    ,{
         "name": "SQLITE_E_IOERR_FSTAT"
        ,"type": {"kind":"Int32"}
        ,"value": -2018572534
    }
    ,{
         "name": "SQLITE_E_IOERR_UNLOCK"
        ,"type": {"kind":"Int32"}
        ,"value": -2018572278
    }
    ,{
         "name": "SQLITE_E_IOERR_RDLOCK"
        ,"type": {"kind":"Int32"}
        ,"value": -2018572022
    }
    ,{
         "name": "SQLITE_E_IOERR_DELETE"
        ,"type": {"kind":"Int32"}
        ,"value": -2018571766
    }
    ,{
         "name": "SQLITE_E_IOERR_BLOCKED"
        ,"type": {"kind":"Int32"}
        ,"value": -2018571510
    }
    ,{
         "name": "SQLITE_E_IOERR_NOMEM"
        ,"type": {"kind":"Int32"}
        ,"value": -2018571254
    }
    ,{
         "name": "SQLITE_E_IOERR_ACCESS"
        ,"type": {"kind":"Int32"}
        ,"value": -2018570998
    }
    ,{
         "name": "SQLITE_E_IOERR_CHECKRESERVEDLOCK"
        ,"type": {"kind":"Int32"}
        ,"value": -2018570742
    }
    ,{
         "name": "SQLITE_E_IOERR_LOCK"
        ,"type": {"kind":"Int32"}
        ,"value": -2018570486
    }
    ,{
         "name": "SQLITE_E_IOERR_CLOSE"
        ,"type": {"kind":"Int32"}
        ,"value": -2018570230
    }
    ,{
         "name": "SQLITE_E_IOERR_DIR_CLOSE"
        ,"type": {"kind":"Int32"}
        ,"value": -2018569974
    }
    ,{
         "name": "SQLITE_E_IOERR_SHMOPEN"
        ,"type": {"kind":"Int32"}
        ,"value": -2018569718
    }
    ,{
         "name": "SQLITE_E_IOERR_SHMSIZE"
        ,"type": {"kind":"Int32"}
        ,"value": -2018569462
    }
    ,{
         "name": "SQLITE_E_IOERR_SHMLOCK"
        ,"type": {"kind":"Int32"}
        ,"value": -2018569206
    }
    ,{
         "name": "SQLITE_E_IOERR_SHMMAP"
        ,"type": {"kind":"Int32"}
        ,"value": -2018568950
    }
    ,{
         "name": "SQLITE_E_IOERR_SEEK"
        ,"type": {"kind":"Int32"}
        ,"value": -2018568694
    }
    ,{
         "name": "SQLITE_E_IOERR_DELETE_NOENT"
        ,"type": {"kind":"Int32"}
        ,"value": -2018568438
    }
    ,{
         "name": "SQLITE_E_IOERR_MMAP"
        ,"type": {"kind":"Int32"}
        ,"value": -2018568182
    }
    ,{
         "name": "SQLITE_E_IOERR_GETTEMPPATH"
        ,"type": {"kind":"Int32"}
        ,"value": -2018567926
    }
    ,{
         "name": "SQLITE_E_IOERR_CONVPATH"
        ,"type": {"kind":"Int32"}
        ,"value": -2018567670
    }
    ,{
         "name": "SQLITE_E_IOERR_VNODE"
        ,"type": {"kind":"Int32"}
        ,"value": -2018567678
    }
    ,{
         "name": "SQLITE_E_IOERR_AUTH"
        ,"type": {"kind":"Int32"}
        ,"value": -2018567677
    }
    ,{
         "name": "SQLITE_E_LOCKED_SHAREDCACHE"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574074
    }
    ,{
         "name": "SQLITE_E_BUSY_RECOVERY"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574075
    }
    ,{
         "name": "SQLITE_E_BUSY_SNAPSHOT"
        ,"type": {"kind":"Int32"}
        ,"value": -2018573819
    }
    ,{
         "name": "SQLITE_E_CANTOPEN_NOTEMPDIR"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574066
    }
    ,{
         "name": "SQLITE_E_CANTOPEN_ISDIR"
        ,"type": {"kind":"Int32"}
        ,"value": -2018573810
    }
    ,{
         "name": "SQLITE_E_CANTOPEN_FULLPATH"
        ,"type": {"kind":"Int32"}
        ,"value": -2018573554
    }
    ,{
         "name": "SQLITE_E_CANTOPEN_CONVPATH"
        ,"type": {"kind":"Int32"}
        ,"value": -2018573298
    }
    ,{
         "name": "SQLITE_E_CORRUPT_VTAB"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574069
    }
    ,{
         "name": "SQLITE_E_READONLY_RECOVERY"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574072
    }
    ,{
         "name": "SQLITE_E_READONLY_CANTLOCK"
        ,"type": {"kind":"Int32"}
        ,"value": -2018573816
    }
    ,{
         "name": "SQLITE_E_READONLY_ROLLBACK"
        ,"type": {"kind":"Int32"}
        ,"value": -2018573560
    }
    ,{
         "name": "SQLITE_E_READONLY_DBMOVED"
        ,"type": {"kind":"Int32"}
        ,"value": -2018573304
    }
    ,{
         "name": "SQLITE_E_ABORT_ROLLBACK"
        ,"type": {"kind":"Int32"}
        ,"value": -2018573820
    }
    ,{
         "name": "SQLITE_E_CONSTRAINT_CHECK"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574061
    }
    ,{
         "name": "SQLITE_E_CONSTRAINT_COMMITHOOK"
        ,"type": {"kind":"Int32"}
        ,"value": -2018573805
    }
    ,{
         "name": "SQLITE_E_CONSTRAINT_FOREIGNKEY"
        ,"type": {"kind":"Int32"}
        ,"value": -2018573549
    }
    ,{
         "name": "SQLITE_E_CONSTRAINT_FUNCTION"
        ,"type": {"kind":"Int32"}
        ,"value": -2018573293
    }
    ,{
         "name": "SQLITE_E_CONSTRAINT_NOTNULL"
        ,"type": {"kind":"Int32"}
        ,"value": -2018573037
    }
    ,{
         "name": "SQLITE_E_CONSTRAINT_PRIMARYKEY"
        ,"type": {"kind":"Int32"}
        ,"value": -2018572781
    }
    ,{
         "name": "SQLITE_E_CONSTRAINT_TRIGGER"
        ,"type": {"kind":"Int32"}
        ,"value": -2018572525
    }
    ,{
         "name": "SQLITE_E_CONSTRAINT_UNIQUE"
        ,"type": {"kind":"Int32"}
        ,"value": -2018572269
    }
    ,{
         "name": "SQLITE_E_CONSTRAINT_VTAB"
        ,"type": {"kind":"Int32"}
        ,"value": -2018572013
    }
    ,{
         "name": "SQLITE_E_CONSTRAINT_ROWID"
        ,"type": {"kind":"Int32"}
        ,"value": -2018571757
    }
    ,{
         "name": "SQLITE_E_NOTICE_RECOVER_WAL"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574053
    }
    ,{
         "name": "SQLITE_E_NOTICE_RECOVER_ROLLBACK"
        ,"type": {"kind":"Int32"}
        ,"value": -2018573797
    }
    ,{
         "name": "SQLITE_E_WARNING_AUTOINDEX"
        ,"type": {"kind":"Int32"}
        ,"value": -2018574052
    }
    ,{
         "name": "UTC_E_TOGGLE_TRACE_STARTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128447
    }
    ,{
         "name": "UTC_E_ALTERNATIVE_TRACE_CANNOT_PREEMPT"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128446
    }
    ,{
         "name": "UTC_E_AOT_NOT_RUNNING"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128445
    }
    ,{
         "name": "UTC_E_SCRIPT_TYPE_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128444
    }
    ,{
         "name": "UTC_E_SCENARIODEF_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128443
    }
    ,{
         "name": "UTC_E_TRACEPROFILE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128442
    }
    ,{
         "name": "UTC_E_FORWARDER_ALREADY_ENABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128441
    }
    ,{
         "name": "UTC_E_FORWARDER_ALREADY_DISABLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128440
    }
    ,{
         "name": "UTC_E_EVENTLOG_ENTRY_MALFORMED"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128439
    }
    ,{
         "name": "UTC_E_DIAGRULES_SCHEMAVERSION_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128438
    }
    ,{
         "name": "UTC_E_SCRIPT_TERMINATED"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128437
    }
    ,{
         "name": "UTC_E_INVALID_CUSTOM_FILTER"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128436
    }
    ,{
         "name": "UTC_E_TRACE_NOT_RUNNING"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128435
    }
    ,{
         "name": "UTC_E_REESCALATED_TOO_QUICKLY"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128434
    }
    ,{
         "name": "UTC_E_ESCALATION_ALREADY_RUNNING"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128433
    }
    ,{
         "name": "UTC_E_PERFTRACK_ALREADY_TRACING"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128432
    }
    ,{
         "name": "UTC_E_REACHED_MAX_ESCALATIONS"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128431
    }
    ,{
         "name": "UTC_E_FORWARDER_PRODUCER_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128430
    }
    ,{
         "name": "UTC_E_INTENTIONAL_SCRIPT_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128429
    }
    ,{
         "name": "UTC_E_SQM_INIT_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128428
    }
    ,{
         "name": "UTC_E_NO_WER_LOGGER_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128427
    }
    ,{
         "name": "UTC_E_TRACERS_DONT_EXIST"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128426
    }
    ,{
         "name": "UTC_E_WINRT_INIT_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128425
    }
    ,{
         "name": "UTC_E_SCENARIODEF_SCHEMAVERSION_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128424
    }
    ,{
         "name": "UTC_E_INVALID_FILTER"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128423
    }
    ,{
         "name": "UTC_E_EXE_TERMINATED"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128422
    }
    ,{
         "name": "UTC_E_ESCALATION_NOT_AUTHORIZED"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128421
    }
    ,{
         "name": "UTC_E_SETUP_NOT_AUTHORIZED"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128420
    }
    ,{
         "name": "UTC_E_CHILD_PROCESS_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128419
    }
    ,{
         "name": "UTC_E_COMMAND_LINE_NOT_AUTHORIZED"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128418
    }
    ,{
         "name": "UTC_E_CANNOT_LOAD_SCENARIO_EDITOR_XML"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128417
    }
    ,{
         "name": "UTC_E_ESCALATION_TIMED_OUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128416
    }
    ,{
         "name": "UTC_E_SETUP_TIMED_OUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128415
    }
    ,{
         "name": "UTC_E_TRIGGER_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128414
    }
    ,{
         "name": "UTC_E_TRIGGER_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128413
    }
    ,{
         "name": "UTC_E_SIF_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128412
    }
    ,{
         "name": "UTC_E_DELAY_TERMINATED"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128411
    }
    ,{
         "name": "UTC_E_DEVICE_TICKET_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128410
    }
    ,{
         "name": "UTC_E_TRACE_BUFFER_LIMIT_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128409
    }
    ,{
         "name": "UTC_E_API_RESULT_UNAVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128408
    }
    ,{
         "name": "UTC_E_RPC_TIMEOUT"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128407
    }
    ,{
         "name": "UTC_E_RPC_WAIT_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128406
    }
    ,{
         "name": "UTC_E_API_BUSY"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128405
    }
    ,{
         "name": "UTC_E_TRACE_MIN_DURATION_REQUIREMENT_NOT_MET"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128404
    }
    ,{
         "name": "UTC_E_EXCLUSIVITY_NOT_AVAILABLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128403
    }
    ,{
         "name": "UTC_E_GETFILE_FILE_PATH_NOT_APPROVED"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128402
    }
    ,{
         "name": "UTC_E_ESCALATION_DIRECTORY_ALREADY_EXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128401
    }
    ,{
         "name": "UTC_E_TIME_TRIGGER_ON_START_INVALID"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128400
    }
    ,{
         "name": "UTC_E_TIME_TRIGGER_ONLY_VALID_ON_SINGLE_TRANSITION"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128399
    }
    ,{
         "name": "UTC_E_TIME_TRIGGER_INVALID_TIME_RANGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128398
    }
    ,{
         "name": "UTC_E_MULTIPLE_TIME_TRIGGER_ON_SINGLE_STATE"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128397
    }
    ,{
         "name": "UTC_E_BINARY_MISSING"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128396
    }
    ,{
         "name": "UTC_E_FAILED_TO_RESOLVE_CONTAINER_ID"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128394
    }
    ,{
         "name": "UTC_E_UNABLE_TO_RESOLVE_SESSION"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128393
    }
    ,{
         "name": "UTC_E_THROTTLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128392
    }
    ,{
         "name": "UTC_E_UNAPPROVED_SCRIPT"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128391
    }
    ,{
         "name": "UTC_E_SCRIPT_MISSING"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128390
    }
    ,{
         "name": "UTC_E_SCENARIO_THROTTLED"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128389
    }
    ,{
         "name": "UTC_E_API_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128388
    }
    ,{
         "name": "UTC_E_GETFILE_EXTERNAL_PATH_NOT_APPROVED"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128387
    }
    ,{
         "name": "UTC_E_TRY_GET_SCENARIO_TIMEOUT_EXCEEDED"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128386
    }
    ,{
         "name": "UTC_E_CERT_REV_FAILED"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128385
    }
    ,{
         "name": "UTC_E_FAILED_TO_START_NDISCAP"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128384
    }
    ,{
         "name": "UTC_E_KERNELDUMP_LIMIT_REACHED"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128383
    }
    ,{
         "name": "UTC_E_MISSING_AGGREGATE_EVENT_TAG"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128382
    }
    ,{
         "name": "UTC_E_INVALID_AGGREGATION_STRUCT"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128381
    }
    ,{
         "name": "UTC_E_ACTION_NOT_SUPPORTED_IN_DESTINATION"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128380
    }
    ,{
         "name": "UTC_E_FILTER_MISSING_ATTRIBUTE"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128379
    }
    ,{
         "name": "UTC_E_FILTER_INVALID_TYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128378
    }
    ,{
         "name": "UTC_E_FILTER_VARIABLE_NOT_FOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128377
    }
    ,{
         "name": "UTC_E_FILTER_FUNCTION_RESTRICTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128376
    }
    ,{
         "name": "UTC_E_FILTER_VERSION_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128375
    }
    ,{
         "name": "UTC_E_FILTER_INVALID_FUNCTION"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128368
    }
    ,{
         "name": "UTC_E_FILTER_INVALID_FUNCTION_PARAMS"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128367
    }
    ,{
         "name": "UTC_E_FILTER_INVALID_COMMAND"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128366
    }
    ,{
         "name": "UTC_E_FILTER_ILLEGAL_EVAL"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128365
    }
    ,{
         "name": "UTC_E_TTTRACER_RETURNED_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128364
    }
    ,{
         "name": "UTC_E_AGENT_DIAGNOSTICS_TOO_LARGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128363
    }
    ,{
         "name": "UTC_E_FAILED_TO_RECEIVE_AGENT_DIAGNOSTICS"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128362
    }
    ,{
         "name": "UTC_E_SCENARIO_HAS_NO_ACTIONS"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128361
    }
    ,{
         "name": "UTC_E_TTTRACER_STORAGE_FULL"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128360
    }
    ,{
         "name": "UTC_E_INSUFFICIENT_SPACE_TO_START_TRACE"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128359
    }
    ,{
         "name": "UTC_E_ESCALATION_CANCELLED_AT_SHUTDOWN"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128358
    }
    ,{
         "name": "UTC_E_GETFILEINFOACTION_FILE_NOT_APPROVED"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128357
    }
    ,{
         "name": "UTC_E_SETREGKEYACTION_TYPE_NOT_APPROVED"
        ,"type": {"kind":"Int32"}
        ,"value": -2017128356
    }
    ,{
         "name": "WINML_ERR_INVALID_DEVICE"
        ,"type": {"kind":"Int32"}
        ,"value": -2003828735
    }
    ,{
         "name": "WINML_ERR_INVALID_BINDING"
        ,"type": {"kind":"Int32"}
        ,"value": -2003828734
    }
    ,{
         "name": "WINML_ERR_VALUE_NOTFOUND"
        ,"type": {"kind":"Int32"}
        ,"value": -2003828733
    }
    ,{
         "name": "WINML_ERR_SIZE_MISMATCH"
        ,"type": {"kind":"Int32"}
        ,"value": -2003828732
    }
    ,{
         "name": "ERROR_QUIC_HANDSHAKE_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143223808
    }
    ,{
         "name": "ERROR_QUIC_VER_NEG_FAILURE"
        ,"type": {"kind":"Int32"}
        ,"value": -2143223807
    }
    ,{
         "name": "DS_S_SUCCESS"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "DNS_ERROR_RCODE_NO_ERROR"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "DNS_ERROR_RCODE_LAST"
        ,"type": {"kind":"Int32"}
        ,"value": 9018
    }
    ,{
         "name": "DNS_STATUS_PACKET_UNSECURE"
        ,"type": {"kind":"Int32"}
        ,"value": 9505
    }
    ,{
         "name": "DNS_ERROR_NO_MEMORY"
        ,"type": {"kind":"Int32"}
        ,"value": 14
    }
    ,{
         "name": "DNS_ERROR_INVALID_NAME"
        ,"type": {"kind":"Int32"}
        ,"value": 123
    }
    ,{
         "name": "DNS_ERROR_INVALID_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": 13
    }
    ,{
         "name": "SEC_E_NO_SPM"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893052
    }
    ,{
         "name": "SEC_E_NOT_SUPPORTED"
        ,"type": {"kind":"Int32"}
        ,"value": -2146893054
    }
    ,{
         "name": "SCARD_S_SUCCESS"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "PWM_IOCTL_ID_CONTROLLER_GET_INFO"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "PWM_IOCTL_ID_CONTROLLER_GET_ACTUAL_PERIOD"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "PWM_IOCTL_ID_CONTROLLER_SET_DESIRED_PERIOD"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "PWM_IOCTL_ID_PIN_GET_ACTIVE_DUTY_CYCLE_PERCENTAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 100
    }
    ,{
         "name": "PWM_IOCTL_ID_PIN_SET_ACTIVE_DUTY_CYCLE_PERCENTAGE"
        ,"type": {"kind":"Int32"}
        ,"value": 101
    }
    ,{
         "name": "PWM_IOCTL_ID_PIN_GET_POLARITY"
        ,"type": {"kind":"Int32"}
        ,"value": 102
    }
    ,{
         "name": "PWM_IOCTL_ID_PIN_SET_POLARITY"
        ,"type": {"kind":"Int32"}
        ,"value": 103
    }
    ,{
         "name": "PWM_IOCTL_ID_PIN_START"
        ,"type": {"kind":"Int32"}
        ,"value": 104
    }
    ,{
         "name": "PWM_IOCTL_ID_PIN_STOP"
        ,"type": {"kind":"Int32"}
        ,"value": 105
    }
    ,{
         "name": "PWM_IOCTL_ID_PIN_IS_STARTED"
        ,"type": {"kind":"Int32"}
        ,"value": 106
    }
],

"types_definitions": [
// --------------------------------------------------------
// Type: POWERBROADCAST_SETTING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POWERBROADCAST_SETTING = extern struct {
    PowerSetting: Guid,
    DataLength: {"kind":"UInt32"},
    Data: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: AR_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AR_STATE = *opaque{
};
// --------------------------------------------------------
// Type: ORIENTATION_PREFERENCE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ORIENTATION_PREFERENCE = *opaque{
};
// --------------------------------------------------------
// Type: BOOL
// TypeLayoutAttr: sequential
pub const BOOL = {"kind":"Int32"};
// --------------------------------------------------------
// Type: BoundaryDescriptorHandle
// TypeLayoutAttr: sequential
// RAIIFree 'DeleteBoundaryDescriptor' (TODO: can we use this information?)
pub const BoundaryDescriptorHandle = {"kind":"IntPtr"};
// --------------------------------------------------------
// Type: HANDLE
// TypeLayoutAttr: sequential
// RAIIFree 'CloseHandle' (TODO: can we use this information?)
pub const HANDLE = {"kind":"IntPtr"};
// --------------------------------------------------------
// Type: HINSTANCE
// TypeLayoutAttr: sequential
// RAIIFree 'FreeLibrary' (TODO: can we use this information?)
pub const HINSTANCE = {"kind":"IntPtr"};
// --------------------------------------------------------
// Type: LRESULT
// TypeLayoutAttr: sequential
pub const LRESULT = {"kind":"Int32"};
// --------------------------------------------------------
// Type: LSTATUS
// TypeLayoutAttr: sequential
pub const LSTATUS = {"kind":"Int32"};
// --------------------------------------------------------
// Type: NamespaceHandle
// TypeLayoutAttr: sequential
// RAIIFree 'ClosePrivateNamespace' (TODO: can we use this information?)
pub const NamespaceHandle = {"kind":"IntPtr"};
// --------------------------------------------------------
// Type: NTSTATUS
// TypeLayoutAttr: sequential
pub const NTSTATUS = {"kind":"Int32"};
// --------------------------------------------------------
// Type: PTP_POOL
// TypeLayoutAttr: sequential
// RAIIFree 'CloseThreadpool' (TODO: can we use this information?)
pub const PTP_POOL = {"kind":"IntPtr"};
// --------------------------------------------------------
// Type: TimerQueueHandle
// TypeLayoutAttr: sequential
// RAIIFree 'DeleteTimerQueueEx' (TODO: can we use this information?)
pub const TimerQueueHandle = {"kind":"IntPtr"};
// --------------------------------------------------------
// Type: FLOAT128
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FLOAT128 = extern struct {
    LowPart: {"kind":"Int64"},
    HighPart: {"kind":"Int64"},
};
// --------------------------------------------------------
// Type: LARGE_INTEGER
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const LARGE_INTEGER = *opaque{
    // --------------------------------------------------------
    // Type: _u_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _u_e__Struct = extern struct {
        LowPart: {"kind":"UInt32"},
        HighPart: {"kind":"Int32"},
    };
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Anonymous_e__Struct = extern struct {
        LowPart: {"kind":"UInt32"},
        HighPart: {"kind":"Int32"},
    };
};
// --------------------------------------------------------
// Type: ULARGE_INTEGER
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const ULARGE_INTEGER = *opaque{
    // --------------------------------------------------------
    // Type: _u_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _u_e__Struct = extern struct {
        LowPart: {"kind":"UInt32"},
        HighPart: {"kind":"UInt32"},
    };
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Anonymous_e__Struct = extern struct {
        LowPart: {"kind":"UInt32"},
        HighPart: {"kind":"UInt32"},
    };
};
// --------------------------------------------------------
// Type: M128A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const M128A = extern struct {
    Low: {"kind":"UInt64"},
    High: {"kind":"Int64"},
};
// --------------------------------------------------------
// Type: XSAVE_FORMAT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const XSAVE_FORMAT = extern struct {
    ControlWord: {"kind":"UInt16"},
    StatusWord: {"kind":"UInt16"},
    TagWord: {"kind":"Byte"},
    Reserved1: {"kind":"Byte"},
    ErrorOpcode: {"kind":"UInt16"},
    ErrorOffset: {"kind":"UInt32"},
    ErrorSelector: {"kind":"UInt16"},
    Reserved2: {"kind":"UInt16"},
    DataOffset: {"kind":"UInt32"},
    DataSelector: {"kind":"UInt16"},
    Reserved3: {"kind":"UInt16"},
    MxCsr: {"kind":"UInt32"},
    MxCsr_Mask: {"kind":"UInt32"},
    FloatRegisters: {"kind":"Array","child": Windows.Win32.SystemServices.M128A},
    XmmRegisters: {"kind":"Array","child": Windows.Win32.SystemServices.M128A},
    Reserved4: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: XSAVE_CET_U_FORMAT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const XSAVE_CET_U_FORMAT = extern struct {
    Ia32CetUMsr: {"kind":"UInt64"},
    Ia32Pl3SspMsr: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: XSAVE_AREA_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const XSAVE_AREA_HEADER = extern struct {
    Mask: {"kind":"UInt64"},
    CompactionMask: {"kind":"UInt64"},
    Reserved2: {"kind":"Array","child": {"kind":"UInt64"}},
};
// --------------------------------------------------------
// Type: XSAVE_AREA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const XSAVE_AREA = extern struct {
    LegacyState: Windows.Win32.SystemServices.XSAVE_FORMAT,
    Header: Windows.Win32.SystemServices.XSAVE_AREA_HEADER,
};
// --------------------------------------------------------
// Type: XSTATE_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const XSTATE_CONTEXT = extern struct {
    Mask: {"kind":"UInt64"},
    Length: {"kind":"UInt32"},
    Reserved1: {"kind":"UInt32"},
    Area: {"kind""Ptr","child":Windows.Win32.SystemServices.XSAVE_AREA},
    Reserved2: {"kind":"UInt32"},
    Buffer: {"kind""Ptr","child":{"kind":"Void"}},
    Reserved3: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SCOPE_TABLE_AMD64
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCOPE_TABLE_AMD64 = extern struct {
    Count: {"kind":"UInt32"},
    ScopeRecord: {"kind":"Array","child": Windows.Win32.SystemServices.SCOPE_TABLE_AMD64+_Anonymous_e__Struct},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Anonymous_e__Struct = extern struct {
        BeginAddress: {"kind":"UInt32"},
        EndAddress: {"kind":"UInt32"},
        HandlerAddress: {"kind":"UInt32"},
        JumpTarget: {"kind":"UInt32"},
    };
};
// --------------------------------------------------------
// Type: SCOPE_TABLE_ARM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCOPE_TABLE_ARM = extern struct {
    Count: {"kind":"UInt32"},
    ScopeRecord: {"kind":"Array","child": Windows.Win32.SystemServices.SCOPE_TABLE_ARM+_Anonymous_e__Struct},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Anonymous_e__Struct = extern struct {
        BeginAddress: {"kind":"UInt32"},
        EndAddress: {"kind":"UInt32"},
        HandlerAddress: {"kind":"UInt32"},
        JumpTarget: {"kind":"UInt32"},
    };
};
// --------------------------------------------------------
// Type: SCOPE_TABLE_ARM64
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCOPE_TABLE_ARM64 = extern struct {
    Count: {"kind":"UInt32"},
    ScopeRecord: {"kind":"Array","child": Windows.Win32.SystemServices.SCOPE_TABLE_ARM64+_Anonymous_e__Struct},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Anonymous_e__Struct = extern struct {
        BeginAddress: {"kind":"UInt32"},
        EndAddress: {"kind":"UInt32"},
        HandlerAddress: {"kind":"UInt32"},
        JumpTarget: {"kind":"UInt32"},
    };
};
// --------------------------------------------------------
// Type: KNONVOLATILE_CONTEXT_POINTERS_ARM64
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KNONVOLATILE_CONTEXT_POINTERS_ARM64 = extern struct {
    X19: {"kind""Ptr","child":{"kind":"UInt64"}},
    X20: {"kind""Ptr","child":{"kind":"UInt64"}},
    X21: {"kind""Ptr","child":{"kind":"UInt64"}},
    X22: {"kind""Ptr","child":{"kind":"UInt64"}},
    X23: {"kind""Ptr","child":{"kind":"UInt64"}},
    X24: {"kind""Ptr","child":{"kind":"UInt64"}},
    X25: {"kind""Ptr","child":{"kind":"UInt64"}},
    X26: {"kind""Ptr","child":{"kind":"UInt64"}},
    X27: {"kind""Ptr","child":{"kind":"UInt64"}},
    X28: {"kind""Ptr","child":{"kind":"UInt64"}},
    Fp: {"kind""Ptr","child":{"kind":"UInt64"}},
    Lr: {"kind""Ptr","child":{"kind":"UInt64"}},
    D8: {"kind""Ptr","child":{"kind":"UInt64"}},
    D9: {"kind""Ptr","child":{"kind":"UInt64"}},
    D10: {"kind""Ptr","child":{"kind":"UInt64"}},
    D11: {"kind""Ptr","child":{"kind":"UInt64"}},
    D12: {"kind""Ptr","child":{"kind":"UInt64"}},
    D13: {"kind""Ptr","child":{"kind":"UInt64"}},
    D14: {"kind""Ptr","child":{"kind":"UInt64"}},
    D15: {"kind""Ptr","child":{"kind":"UInt64"}},
};
// --------------------------------------------------------
// Type: FLOATING_SAVE_AREA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FLOATING_SAVE_AREA = extern struct {
    ControlWord: {"kind":"UInt32"},
    StatusWord: {"kind":"UInt32"},
    TagWord: {"kind":"UInt32"},
    ErrorOffset: {"kind":"UInt32"},
    ErrorSelector: {"kind":"UInt32"},
    DataOffset: {"kind":"UInt32"},
    DataSelector: {"kind":"UInt32"},
    RegisterArea: {"kind":"Array","child": {"kind":"Byte"}},
    Spare0: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: KNONVOLATILE_CONTEXT_POINTERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KNONVOLATILE_CONTEXT_POINTERS = extern struct {
    Dummy: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: WOW64_DESCRIPTOR_TABLE_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WOW64_DESCRIPTOR_TABLE_ENTRY = extern struct {
    Selector: {"kind":"UInt32"},
    Descriptor: Windows.Win32.Debug.WOW64_LDT_ENTRY,
};
// --------------------------------------------------------
// Type: EXCEPTION_RECORD32
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EXCEPTION_RECORD32 = extern struct {
    ExceptionCode: {"kind":"UInt32"},
    ExceptionFlags: {"kind":"UInt32"},
    ExceptionRecord: {"kind":"UInt32"},
    ExceptionAddress: {"kind":"UInt32"},
    NumberParameters: {"kind":"UInt32"},
    ExceptionInformation: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: SE_SID
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const SE_SID = *opaque{
};
// --------------------------------------------------------
// Type: SYSTEM_PROCESS_TRUST_LABEL_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_PROCESS_TRUST_LABEL_ACE = extern struct {
    Header: Windows.Win32.Security.ACE_HEADER,
    Mask: {"kind":"UInt32"},
    SidStart: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SYSTEM_ACCESS_FILTER_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_ACCESS_FILTER_ACE = extern struct {
    Header: Windows.Win32.Security.ACE_HEADER,
    Mask: {"kind":"UInt32"},
    SidStart: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SECURITY_DESCRIPTOR_RELATIVE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECURITY_DESCRIPTOR_RELATIVE = extern struct {
    Revision: {"kind":"Byte"},
    Sbz1: {"kind":"Byte"},
    Control: {"kind":"UInt16"},
    Owner: {"kind":"UInt32"},
    Group: {"kind":"UInt32"},
    Sacl: {"kind":"UInt32"},
    Dacl: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SECURITY_OBJECT_AI_PARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECURITY_OBJECT_AI_PARAMS = extern struct {
    Size: {"kind":"UInt32"},
    ConstraintMask: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: ACCESS_REASON_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ACCESS_REASON_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: ACCESS_REASONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACCESS_REASONS = extern struct {
    Data: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: SE_SECURITY_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SE_SECURITY_DESCRIPTOR = extern struct {
    Size: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: SE_ACCESS_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SE_ACCESS_REQUEST = extern struct {
    Size: {"kind":"UInt32"},
    SeSecurityDescriptor: {"kind""Ptr","child":Windows.Win32.SystemServices.SE_SECURITY_DESCRIPTOR},
    DesiredAccess: {"kind":"UInt32"},
    PreviouslyGrantedAccess: {"kind":"UInt32"},
    PrincipalSelfSid: {"kind""Ptr","child":{"kind":"Void"}},
    GenericMapping: {"kind""Ptr","child":Windows.Win32.Security.GENERIC_MAPPING},
    ObjectTypeListCount: {"kind":"UInt32"},
    ObjectTypeList: {"kind""Ptr","child":Windows.Win32.Security.OBJECT_TYPE_LIST},
};
// --------------------------------------------------------
// Type: SE_ACCESS_REPLY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SE_ACCESS_REPLY = extern struct {
    Size: {"kind":"UInt32"},
    ResultListCount: {"kind":"UInt32"},
    GrantedAccess: {"kind""Ptr","child":{"kind":"UInt32"}},
    AccessStatus: {"kind""Ptr","child":{"kind":"UInt32"}},
    AccessReason: {"kind""Ptr","child":Windows.Win32.SystemServices.ACCESS_REASONS},
    Privileges: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Security.PRIVILEGE_SET}},
};
// --------------------------------------------------------
// Type: SE_TOKEN_USER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SE_TOKEN_USER = extern struct {
    Anonymous1: Windows.Win32.SystemServices.SE_TOKEN_USER+_Anonymous1_e__Union,
    Anonymous2: Windows.Win32.SystemServices.SE_TOKEN_USER+_Anonymous2_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: TOKEN_SID_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_SID_INFORMATION = extern struct {
    Sid: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: TOKEN_BNO_ISOLATION_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_BNO_ISOLATION_INFORMATION = extern struct {
    IsolationPrefix: {"kind""Ptr","child":{"kind":"UInt16"}},
    IsolationEnabled: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: SE_IMPERSONATION_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SE_IMPERSONATION_STATE = extern struct {
    Token: {"kind""Ptr","child":{"kind":"Void"}},
    CopyOnOpen: {"kind":"Byte"},
    EffectiveOnly: {"kind":"Byte"},
    Level: Windows.Win32.Security.SECURITY_IMPERSONATION_LEVEL,
};
// --------------------------------------------------------
// Type: SE_IMAGE_SIGNATURE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SE_IMAGE_SIGNATURE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: SE_LEARNING_MODE_DATA_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SE_LEARNING_MODE_DATA_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: JOB_SET_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const JOB_SET_ARRAY = extern struct {
    JobHandle: Windows.Win32.SystemServices.HANDLE,
    MemberLevel: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: EXCEPTION_REGISTRATION_RECORD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EXCEPTION_REGISTRATION_RECORD = extern struct {
    Next: {"kind""Ptr","child":Windows.Win32.SystemServices.EXCEPTION_REGISTRATION_RECORD},
    Handler: Windows.Win32.Kernel.EXCEPTION_ROUTINE,
};
// --------------------------------------------------------
// Type: NT_TIB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NT_TIB = extern struct {
    ExceptionList: {"kind""Ptr","child":Windows.Win32.SystemServices.EXCEPTION_REGISTRATION_RECORD},
    StackBase: {"kind""Ptr","child":{"kind":"Void"}},
    StackLimit: {"kind""Ptr","child":{"kind":"Void"}},
    SubSystemTib: {"kind""Ptr","child":{"kind":"Void"}},
    Anonymous: Windows.Win32.SystemServices.NT_TIB+_Anonymous_e__Union,
    ArbitraryUserPointer: {"kind""Ptr","child":{"kind":"Void"}},
    Self: {"kind""Ptr","child":Windows.Win32.SystemServices.NT_TIB},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: NT_TIB32
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NT_TIB32 = extern struct {
    ExceptionList: {"kind":"UInt32"},
    StackBase: {"kind":"UInt32"},
    StackLimit: {"kind":"UInt32"},
    SubSystemTib: {"kind":"UInt32"},
    Anonymous: Windows.Win32.SystemServices.NT_TIB32+_Anonymous_e__Union,
    ArbitraryUserPointer: {"kind":"UInt32"},
    Self: {"kind":"UInt32"},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: NT_TIB64
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NT_TIB64 = extern struct {
    ExceptionList: {"kind":"UInt64"},
    StackBase: {"kind":"UInt64"},
    StackLimit: {"kind":"UInt64"},
    SubSystemTib: {"kind":"UInt64"},
    Anonymous: Windows.Win32.SystemServices.NT_TIB64+_Anonymous_e__Union,
    ArbitraryUserPointer: {"kind":"UInt64"},
    Self: {"kind":"UInt64"},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: UMS_CREATE_THREAD_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UMS_CREATE_THREAD_ATTRIBUTES = extern struct {
    UmsVersion: {"kind":"UInt32"},
    UmsContext: {"kind""Ptr","child":{"kind":"Void"}},
    UmsCompletionList: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: WOW64_ARCHITECTURE_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WOW64_ARCHITECTURE_INFORMATION = extern struct {
    _bitfield: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PROCESS_DYNAMIC_EH_CONTINUATION_TARGET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESS_DYNAMIC_EH_CONTINUATION_TARGET = extern struct {
    TargetAddress: {"kind":"UIntPtr"},
    Flags: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION = extern struct {
    NumberOfTargets: {"kind":"UInt16"},
    Reserved: {"kind":"UInt16"},
    Reserved2: {"kind":"UInt32"},
    Targets: {"kind""Ptr","child":Windows.Win32.SystemServices.PROCESS_DYNAMIC_EH_CONTINUATION_TARGET},
};
// --------------------------------------------------------
// Type: RATE_QUOTA_LIMIT
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const RATE_QUOTA_LIMIT = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Anonymous_e__Struct = extern struct {
        _bitfield: {"kind":"UInt32"},
    };
};
// --------------------------------------------------------
// Type: QUOTA_LIMITS_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QUOTA_LIMITS_EX = extern struct {
    PagedPoolLimit: {"kind":"UIntPtr"},
    NonPagedPoolLimit: {"kind":"UIntPtr"},
    MinimumWorkingSetSize: {"kind":"UIntPtr"},
    MaximumWorkingSetSize: {"kind":"UIntPtr"},
    PagefileLimit: {"kind":"UIntPtr"},
    TimeLimit: Windows.Win32.SystemServices.LARGE_INTEGER,
    WorkingSetLimit: {"kind":"UIntPtr"},
    Reserved2: {"kind":"UIntPtr"},
    Reserved3: {"kind":"UIntPtr"},
    Reserved4: {"kind":"UIntPtr"},
    Flags: {"kind":"UInt32"},
    CpuRateLimit: Windows.Win32.SystemServices.RATE_QUOTA_LIMIT,
};
// --------------------------------------------------------
// Type: IO_COUNTERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IO_COUNTERS = extern struct {
    ReadOperationCount: {"kind":"UInt64"},
    WriteOperationCount: {"kind":"UInt64"},
    OtherOperationCount: {"kind":"UInt64"},
    ReadTransferCount: {"kind":"UInt64"},
    WriteTransferCount: {"kind":"UInt64"},
    OtherTransferCount: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: PROCESS_MITIGATION_POLICY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROCESS_MITIGATION_POLICY = *opaque{
};
// --------------------------------------------------------
// Type: PROCESS_MITIGATION_ASLR_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESS_MITIGATION_ASLR_POLICY = extern struct {
    Anonymous: Windows.Win32.SystemServices.PROCESS_MITIGATION_ASLR_POLICY+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: PROCESS_MITIGATION_DEP_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESS_MITIGATION_DEP_POLICY = extern struct {
    Anonymous: Windows.Win32.SystemServices.PROCESS_MITIGATION_DEP_POLICY+_Anonymous_e__Union,
    Permanent: {"kind":"Byte"},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY = extern struct {
    Anonymous: Windows.Win32.SystemServices.PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY = extern struct {
    Anonymous: Windows.Win32.SystemServices.PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY = extern struct {
    Anonymous: Windows.Win32.SystemServices.PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: PROCESS_MITIGATION_DYNAMIC_CODE_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESS_MITIGATION_DYNAMIC_CODE_POLICY = extern struct {
    Anonymous: Windows.Win32.SystemServices.PROCESS_MITIGATION_DYNAMIC_CODE_POLICY+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY = extern struct {
    Anonymous: Windows.Win32.SystemServices.PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY = extern struct {
    Anonymous: Windows.Win32.SystemServices.PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: PROCESS_MITIGATION_FONT_DISABLE_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESS_MITIGATION_FONT_DISABLE_POLICY = extern struct {
    Anonymous: Windows.Win32.SystemServices.PROCESS_MITIGATION_FONT_DISABLE_POLICY+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: PROCESS_MITIGATION_IMAGE_LOAD_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESS_MITIGATION_IMAGE_LOAD_POLICY = extern struct {
    Anonymous: Windows.Win32.SystemServices.PROCESS_MITIGATION_IMAGE_LOAD_POLICY+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY = extern struct {
    Anonymous: Windows.Win32.SystemServices.PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY = extern struct {
    Anonymous: Windows.Win32.SystemServices.PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: PROCESS_MITIGATION_CHILD_PROCESS_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESS_MITIGATION_CHILD_PROCESS_POLICY = extern struct {
    Anonymous: Windows.Win32.SystemServices.PROCESS_MITIGATION_CHILD_PROCESS_POLICY+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY = extern struct {
    Anonymous: Windows.Win32.SystemServices.PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY = extern struct {
    Anonymous: Windows.Win32.SystemServices.PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: JOBOBJECT_BASIC_ACCOUNTING_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const JOBOBJECT_BASIC_ACCOUNTING_INFORMATION = extern struct {
    TotalUserTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    TotalKernelTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    ThisPeriodTotalUserTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    ThisPeriodTotalKernelTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    TotalPageFaultCount: {"kind":"UInt32"},
    TotalProcesses: {"kind":"UInt32"},
    ActiveProcesses: {"kind":"UInt32"},
    TotalTerminatedProcesses: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: JOBOBJECT_BASIC_LIMIT_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const JOBOBJECT_BASIC_LIMIT_INFORMATION = extern struct {
    PerProcessUserTimeLimit: Windows.Win32.SystemServices.LARGE_INTEGER,
    PerJobUserTimeLimit: Windows.Win32.SystemServices.LARGE_INTEGER,
    LimitFlags: {"kind":"UInt32"},
    MinimumWorkingSetSize: {"kind":"UIntPtr"},
    MaximumWorkingSetSize: {"kind":"UIntPtr"},
    ActiveProcessLimit: {"kind":"UInt32"},
    Affinity: {"kind":"UIntPtr"},
    PriorityClass: {"kind":"UInt32"},
    SchedulingClass: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: JOBOBJECT_EXTENDED_LIMIT_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const JOBOBJECT_EXTENDED_LIMIT_INFORMATION = extern struct {
    BasicLimitInformation: Windows.Win32.SystemServices.JOBOBJECT_BASIC_LIMIT_INFORMATION,
    IoInfo: Windows.Win32.SystemServices.IO_COUNTERS,
    ProcessMemoryLimit: {"kind":"UIntPtr"},
    JobMemoryLimit: {"kind":"UIntPtr"},
    PeakProcessMemoryUsed: {"kind":"UIntPtr"},
    PeakJobMemoryUsed: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: JOBOBJECT_BASIC_PROCESS_ID_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const JOBOBJECT_BASIC_PROCESS_ID_LIST = extern struct {
    NumberOfAssignedProcesses: {"kind":"UInt32"},
    NumberOfProcessIdsInList: {"kind":"UInt32"},
    ProcessIdList: {"kind":"Array","child": {"kind":"UIntPtr"}},
};
// --------------------------------------------------------
// Type: JOBOBJECT_BASIC_UI_RESTRICTIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const JOBOBJECT_BASIC_UI_RESTRICTIONS = extern struct {
    UIRestrictionsClass: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: JOBOBJECT_SECURITY_LIMIT_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const JOBOBJECT_SECURITY_LIMIT_INFORMATION = extern struct {
    SecurityLimitFlags: {"kind":"UInt32"},
    JobToken: Windows.Win32.SystemServices.HANDLE,
    SidsToDisable: {"kind""Ptr","child":Windows.Win32.Security.TOKEN_GROUPS},
    PrivilegesToDelete: {"kind""Ptr","child":Windows.Win32.Security.TOKEN_PRIVILEGES},
    RestrictedSids: {"kind""Ptr","child":Windows.Win32.Security.TOKEN_GROUPS},
};
// --------------------------------------------------------
// Type: JOBOBJECT_END_OF_JOB_TIME_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const JOBOBJECT_END_OF_JOB_TIME_INFORMATION = extern struct {
    EndOfJobTimeAction: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: JOBOBJECT_ASSOCIATE_COMPLETION_PORT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const JOBOBJECT_ASSOCIATE_COMPLETION_PORT = extern struct {
    CompletionKey: {"kind""Ptr","child":{"kind":"Void"}},
    CompletionPort: Windows.Win32.SystemServices.HANDLE,
};
// --------------------------------------------------------
// Type: JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION = extern struct {
    BasicInfo: Windows.Win32.SystemServices.JOBOBJECT_BASIC_ACCOUNTING_INFORMATION,
    IoInfo: Windows.Win32.SystemServices.IO_COUNTERS,
};
// --------------------------------------------------------
// Type: JOBOBJECT_JOBSET_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const JOBOBJECT_JOBSET_INFORMATION = extern struct {
    MemberLevel: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: JOBOBJECT_RATE_CONTROL_TOLERANCE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const JOBOBJECT_RATE_CONTROL_TOLERANCE = *opaque{
};
// --------------------------------------------------------
// Type: JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL = *opaque{
};
// --------------------------------------------------------
// Type: JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION = extern struct {
    IoReadBytesLimit: {"kind":"UInt64"},
    IoWriteBytesLimit: {"kind":"UInt64"},
    PerJobUserTimeLimit: Windows.Win32.SystemServices.LARGE_INTEGER,
    JobMemoryLimit: {"kind":"UInt64"},
    RateControlTolerance: Windows.Win32.SystemServices.JOBOBJECT_RATE_CONTROL_TOLERANCE,
    RateControlToleranceInterval: Windows.Win32.SystemServices.JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL,
    LimitFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2 = extern struct {
    IoReadBytesLimit: {"kind":"UInt64"},
    IoWriteBytesLimit: {"kind":"UInt64"},
    PerJobUserTimeLimit: Windows.Win32.SystemServices.LARGE_INTEGER,
    Anonymous1: Windows.Win32.SystemServices.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2+_Anonymous1_e__Union,
    Anonymous2: Windows.Win32.SystemServices.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2+_Anonymous2_e__Union,
    Anonymous3: Windows.Win32.SystemServices.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2+_Anonymous3_e__Union,
    LimitFlags: {"kind":"UInt32"},
    IoRateControlTolerance: Windows.Win32.SystemServices.JOBOBJECT_RATE_CONTROL_TOLERANCE,
    JobLowMemoryLimit: {"kind":"UInt64"},
    IoRateControlToleranceInterval: Windows.Win32.SystemServices.JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL,
    NetRateControlTolerance: Windows.Win32.SystemServices.JOBOBJECT_RATE_CONTROL_TOLERANCE,
    NetRateControlToleranceInterval: Windows.Win32.SystemServices.JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL,
    // --------------------------------------------------------
    // Type: _Anonymous3_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous3_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: JOBOBJECT_LIMIT_VIOLATION_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const JOBOBJECT_LIMIT_VIOLATION_INFORMATION = extern struct {
    LimitFlags: {"kind":"UInt32"},
    ViolationLimitFlags: {"kind":"UInt32"},
    IoReadBytes: {"kind":"UInt64"},
    IoReadBytesLimit: {"kind":"UInt64"},
    IoWriteBytes: {"kind":"UInt64"},
    IoWriteBytesLimit: {"kind":"UInt64"},
    PerJobUserTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    PerJobUserTimeLimit: Windows.Win32.SystemServices.LARGE_INTEGER,
    JobMemory: {"kind":"UInt64"},
    JobMemoryLimit: {"kind":"UInt64"},
    RateControlTolerance: Windows.Win32.SystemServices.JOBOBJECT_RATE_CONTROL_TOLERANCE,
    RateControlToleranceLimit: Windows.Win32.SystemServices.JOBOBJECT_RATE_CONTROL_TOLERANCE,
};
// --------------------------------------------------------
// Type: JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2 = extern struct {
    LimitFlags: {"kind":"UInt32"},
    ViolationLimitFlags: {"kind":"UInt32"},
    IoReadBytes: {"kind":"UInt64"},
    IoReadBytesLimit: {"kind":"UInt64"},
    IoWriteBytes: {"kind":"UInt64"},
    IoWriteBytesLimit: {"kind":"UInt64"},
    PerJobUserTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    PerJobUserTimeLimit: Windows.Win32.SystemServices.LARGE_INTEGER,
    JobMemory: {"kind":"UInt64"},
    Anonymous1: Windows.Win32.SystemServices.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2+_Anonymous1_e__Union,
    Anonymous2: Windows.Win32.SystemServices.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2+_Anonymous2_e__Union,
    Anonymous3: Windows.Win32.SystemServices.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2+_Anonymous3_e__Union,
    JobLowMemoryLimit: {"kind":"UInt64"},
    IoRateControlTolerance: Windows.Win32.SystemServices.JOBOBJECT_RATE_CONTROL_TOLERANCE,
    IoRateControlToleranceLimit: Windows.Win32.SystemServices.JOBOBJECT_RATE_CONTROL_TOLERANCE,
    NetRateControlTolerance: Windows.Win32.SystemServices.JOBOBJECT_RATE_CONTROL_TOLERANCE,
    NetRateControlToleranceLimit: Windows.Win32.SystemServices.JOBOBJECT_RATE_CONTROL_TOLERANCE,
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous3_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous3_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: JOBOBJECT_CPU_RATE_CONTROL_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const JOBOBJECT_CPU_RATE_CONTROL_INFORMATION = extern struct {
    ControlFlags: {"kind":"UInt32"},
    Anonymous: Windows.Win32.SystemServices.JOBOBJECT_CPU_RATE_CONTROL_INFORMATION+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            MinRate: {"kind":"UInt16"},
            MaxRate: {"kind":"UInt16"},
        };
    };
};
// --------------------------------------------------------
// Type: JOB_OBJECT_NET_RATE_CONTROL_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const JOB_OBJECT_NET_RATE_CONTROL_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: JOBOBJECT_NET_RATE_CONTROL_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const JOBOBJECT_NET_RATE_CONTROL_INFORMATION = extern struct {
    MaxBandwidth: {"kind":"UInt64"},
    ControlFlags: Windows.Win32.SystemServices.JOB_OBJECT_NET_RATE_CONTROL_FLAGS,
    DscpTag: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: JOB_OBJECT_IO_RATE_CONTROL_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const JOB_OBJECT_IO_RATE_CONTROL_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE = extern struct {
    MaxIops: {"kind":"Int64"},
    MaxBandwidth: {"kind":"Int64"},
    ReservationIops: {"kind":"Int64"},
    VolumeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    BaseIoSize: {"kind":"UInt32"},
    ControlFlags: Windows.Win32.SystemServices.JOB_OBJECT_IO_RATE_CONTROL_FLAGS,
    VolumeNameLength: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2 = extern struct {
    MaxIops: {"kind":"Int64"},
    MaxBandwidth: {"kind":"Int64"},
    ReservationIops: {"kind":"Int64"},
    VolumeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    BaseIoSize: {"kind":"UInt32"},
    ControlFlags: Windows.Win32.SystemServices.JOB_OBJECT_IO_RATE_CONTROL_FLAGS,
    VolumeNameLength: {"kind":"UInt16"},
    CriticalReservationIops: {"kind":"Int64"},
    ReservationBandwidth: {"kind":"Int64"},
    CriticalReservationBandwidth: {"kind":"Int64"},
    MaxTimePercent: {"kind":"Int64"},
    ReservationTimePercent: {"kind":"Int64"},
    CriticalReservationTimePercent: {"kind":"Int64"},
};
// --------------------------------------------------------
// Type: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3 = extern struct {
    MaxIops: {"kind":"Int64"},
    MaxBandwidth: {"kind":"Int64"},
    ReservationIops: {"kind":"Int64"},
    VolumeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    BaseIoSize: {"kind":"UInt32"},
    ControlFlags: Windows.Win32.SystemServices.JOB_OBJECT_IO_RATE_CONTROL_FLAGS,
    VolumeNameLength: {"kind":"UInt16"},
    CriticalReservationIops: {"kind":"Int64"},
    ReservationBandwidth: {"kind":"Int64"},
    CriticalReservationBandwidth: {"kind":"Int64"},
    MaxTimePercent: {"kind":"Int64"},
    ReservationTimePercent: {"kind":"Int64"},
    CriticalReservationTimePercent: {"kind":"Int64"},
    SoftMaxIops: {"kind":"Int64"},
    SoftMaxBandwidth: {"kind":"Int64"},
    SoftMaxTimePercent: {"kind":"Int64"},
    LimitExcessNotifyIops: {"kind":"Int64"},
    LimitExcessNotifyBandwidth: {"kind":"Int64"},
    LimitExcessNotifyTimePercent: {"kind":"Int64"},
};
// --------------------------------------------------------
// Type: JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: JOBOBJECT_IO_ATTRIBUTION_STATS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const JOBOBJECT_IO_ATTRIBUTION_STATS = extern struct {
    IoCount: {"kind":"UIntPtr"},
    TotalNonOverlappedQueueTime: {"kind":"UInt64"},
    TotalNonOverlappedServiceTime: {"kind":"UInt64"},
    TotalSize: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: JOBOBJECT_IO_ATTRIBUTION_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const JOBOBJECT_IO_ATTRIBUTION_INFORMATION = extern struct {
    ControlFlags: {"kind":"UInt32"},
    ReadStats: Windows.Win32.SystemServices.JOBOBJECT_IO_ATTRIBUTION_STATS,
    WriteStats: Windows.Win32.SystemServices.JOBOBJECT_IO_ATTRIBUTION_STATS,
};
// --------------------------------------------------------
// Type: JOBOBJECTINFOCLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const JOBOBJECTINFOCLASS = *opaque{
};
// --------------------------------------------------------
// Type: SILOOBJECT_BASIC_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SILOOBJECT_BASIC_INFORMATION = extern struct {
    SiloId: {"kind":"UInt32"},
    SiloParentId: {"kind":"UInt32"},
    NumberOfProcesses: {"kind":"UInt32"},
    IsInServerSilo: {"kind":"Byte"},
    Reserved: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SERVERSILO_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SERVERSILO_STATE = *opaque{
};
// --------------------------------------------------------
// Type: SERVERSILO_BASIC_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVERSILO_BASIC_INFORMATION = extern struct {
    ServiceSessionId: {"kind":"UInt32"},
    State: Windows.Win32.SystemServices.SERVERSILO_STATE,
    ExitStatus: {"kind":"UInt32"},
    IsDownlevelContainer: {"kind":"Byte"},
    ApiSetSchema: {"kind""Ptr","child":{"kind":"Void"}},
    HostApiSetSchema: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: LOGICAL_PROCESSOR_RELATIONSHIP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LOGICAL_PROCESSOR_RELATIONSHIP = *opaque{
};
// --------------------------------------------------------
// Type: PROCESSOR_CACHE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROCESSOR_CACHE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: CACHE_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CACHE_DESCRIPTOR = extern struct {
    Level: {"kind":"Byte"},
    Associativity: {"kind":"Byte"},
    LineSize: {"kind":"UInt16"},
    Size: {"kind":"UInt32"},
    Type: Windows.Win32.SystemServices.PROCESSOR_CACHE_TYPE,
};
// --------------------------------------------------------
// Type: SYSTEM_LOGICAL_PROCESSOR_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_LOGICAL_PROCESSOR_INFORMATION = extern struct {
    ProcessorMask: {"kind":"UIntPtr"},
    Relationship: Windows.Win32.SystemServices.LOGICAL_PROCESSOR_RELATIONSHIP,
    Anonymous: Windows.Win32.SystemServices.SYSTEM_LOGICAL_PROCESSOR_INFORMATION+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _NumaNode_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _NumaNode_e__Struct = extern struct {
            NodeNumber: {"kind":"UInt32"},
        };
        // --------------------------------------------------------
        // Type: _ProcessorCore_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _ProcessorCore_e__Struct = extern struct {
            Flags: {"kind":"Byte"},
        };
    };
};
// --------------------------------------------------------
// Type: PROCESSOR_RELATIONSHIP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESSOR_RELATIONSHIP = extern struct {
    Flags: {"kind":"Byte"},
    EfficiencyClass: {"kind":"Byte"},
    Reserved: {"kind":"Array","child": {"kind":"Byte"}},
    GroupCount: {"kind":"UInt16"},
    GroupMask: {"kind":"Array","child": Windows.Win32.SystemServices.GROUP_AFFINITY},
};
// --------------------------------------------------------
// Type: NUMA_NODE_RELATIONSHIP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NUMA_NODE_RELATIONSHIP = extern struct {
    NodeNumber: {"kind":"UInt32"},
    Reserved: {"kind":"Array","child": {"kind":"Byte"}},
    GroupMask: Windows.Win32.SystemServices.GROUP_AFFINITY,
};
// --------------------------------------------------------
// Type: CACHE_RELATIONSHIP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CACHE_RELATIONSHIP = extern struct {
    Level: {"kind":"Byte"},
    Associativity: {"kind":"Byte"},
    LineSize: {"kind":"UInt16"},
    CacheSize: {"kind":"UInt32"},
    Type: Windows.Win32.SystemServices.PROCESSOR_CACHE_TYPE,
    Reserved: {"kind":"Array","child": {"kind":"Byte"}},
    GroupMask: Windows.Win32.SystemServices.GROUP_AFFINITY,
};
// --------------------------------------------------------
// Type: PROCESSOR_GROUP_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESSOR_GROUP_INFO = extern struct {
    MaximumProcessorCount: {"kind":"Byte"},
    ActiveProcessorCount: {"kind":"Byte"},
    Reserved: {"kind":"Array","child": {"kind":"Byte"}},
    ActiveProcessorMask: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: GROUP_RELATIONSHIP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GROUP_RELATIONSHIP = extern struct {
    MaximumGroupCount: {"kind":"UInt16"},
    ActiveGroupCount: {"kind":"UInt16"},
    Reserved: {"kind":"Array","child": {"kind":"Byte"}},
    GroupInfo: {"kind":"Array","child": Windows.Win32.SystemServices.PROCESSOR_GROUP_INFO},
};
// --------------------------------------------------------
// Type: SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX = extern struct {
    Relationship: Windows.Win32.SystemServices.LOGICAL_PROCESSOR_RELATIONSHIP,
    Size: {"kind":"UInt32"},
    Anonymous: Windows.Win32.SystemServices.SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CPU_SET_INFORMATION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CPU_SET_INFORMATION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: SYSTEM_CPU_SET_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_CPU_SET_INFORMATION = extern struct {
    Size: {"kind":"UInt32"},
    Type: Windows.Win32.SystemServices.CPU_SET_INFORMATION_TYPE,
    Anonymous: Windows.Win32.SystemServices.SYSTEM_CPU_SET_INFORMATION+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _CpuSet_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _CpuSet_e__Struct = extern struct {
            Id: {"kind":"UInt32"},
            Group: {"kind":"UInt16"},
            LogicalProcessorIndex: {"kind":"Byte"},
            CoreIndex: {"kind":"Byte"},
            LastLevelCacheIndex: {"kind":"Byte"},
            NumaNodeIndex: {"kind":"Byte"},
            EfficiencyClass: {"kind":"Byte"},
            Anonymous1: Windows.Win32.SystemServices.SYSTEM_CPU_SET_INFORMATION+_Anonymous_e__Union+_CpuSet_e__Struct+_Anonymous1_e__Union,
            Anonymous2: Windows.Win32.SystemServices.SYSTEM_CPU_SET_INFORMATION+_Anonymous_e__Union+_CpuSet_e__Struct+_Anonymous2_e__Union,
            AllocationTag: {"kind":"UInt64"},
            // --------------------------------------------------------
            // Type: _Anonymous1_e__Union
            // TypeLayoutAttr: explicit
            // not generating the actual code for this type because it has an explicit layout
            pub const _Anonymous1_e__Union = *opaque{
                // --------------------------------------------------------
                // Type: _Anonymous_e__Struct
                // TypeLayoutAttr: sequential
                // TODO: I think this is a struct, but not sure at this point, assuming it is for now
                pub const _Anonymous_e__Struct = extern struct {
                    _bitfield: {"kind":"Byte"},
                };
            };
            // --------------------------------------------------------
            // Type: _Anonymous2_e__Union
            // TypeLayoutAttr: explicit
            // not generating the actual code for this type because it has an explicit layout
            pub const _Anonymous2_e__Union = *opaque{
            };
        };
    };
};
// --------------------------------------------------------
// Type: SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION = extern struct {
    CycleTime: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: XSTATE_FEATURE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const XSTATE_FEATURE = extern struct {
    Offset: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: XSTATE_CONFIGURATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const XSTATE_CONFIGURATION = extern struct {
    EnabledFeatures: {"kind":"UInt64"},
    EnabledVolatileFeatures: {"kind":"UInt64"},
    Size: {"kind":"UInt32"},
    Anonymous: Windows.Win32.SystemServices.XSTATE_CONFIGURATION+_Anonymous_e__Union,
    Features: {"kind":"Array","child": Windows.Win32.SystemServices.XSTATE_FEATURE},
    EnabledSupervisorFeatures: {"kind":"UInt64"},
    AlignedFeatures: {"kind":"UInt64"},
    AllFeatureSize: {"kind":"UInt32"},
    AllFeatures: {"kind":"Array","child": {"kind":"UInt32"}},
    EnabledUserVisibleSupervisorFeatures: {"kind":"UInt64"},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: MEMORY_BASIC_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MEMORY_BASIC_INFORMATION = extern struct {
    BaseAddress: {"kind""Ptr","child":{"kind":"Void"}},
    AllocationBase: {"kind""Ptr","child":{"kind":"Void"}},
    AllocationProtect: {"kind":"UInt32"},
    RegionSize: {"kind":"UIntPtr"},
    State: {"kind":"UInt32"},
    Protect: {"kind":"UInt32"},
    Type: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MEMORY_BASIC_INFORMATION32
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MEMORY_BASIC_INFORMATION32 = extern struct {
    BaseAddress: {"kind":"UInt32"},
    AllocationBase: {"kind":"UInt32"},
    AllocationProtect: {"kind":"UInt32"},
    RegionSize: {"kind":"UInt32"},
    State: {"kind":"UInt32"},
    Protect: {"kind":"UInt32"},
    Type: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MEMORY_BASIC_INFORMATION64
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MEMORY_BASIC_INFORMATION64 = extern struct {
    BaseAddress: {"kind":"UInt64"},
    AllocationBase: {"kind":"UInt64"},
    AllocationProtect: {"kind":"UInt32"},
    __alignment1: {"kind":"UInt32"},
    RegionSize: {"kind":"UInt64"},
    State: {"kind":"UInt32"},
    Protect: {"kind":"UInt32"},
    Type: {"kind":"UInt32"},
    __alignment2: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CFG_CALL_TARGET_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CFG_CALL_TARGET_INFO = extern struct {
    Offset: {"kind":"UIntPtr"},
    Flags: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: MEM_ADDRESS_REQUIREMENTS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MEM_ADDRESS_REQUIREMENTS = extern struct {
    LowestStartingAddress: {"kind""Ptr","child":{"kind":"Void"}},
    HighestEndingAddress: {"kind""Ptr","child":{"kind":"Void"}},
    Alignment: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: MEM_EXTENDED_PARAMETER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MEM_EXTENDED_PARAMETER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: MEM_EXTENDED_PARAMETER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MEM_EXTENDED_PARAMETER = extern struct {
    Anonymous1: Windows.Win32.SystemServices.MEM_EXTENDED_PARAMETER+_Anonymous1_e__Struct,
    Anonymous2: Windows.Win32.SystemServices.MEM_EXTENDED_PARAMETER+_Anonymous2_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Anonymous1_e__Struct = extern struct {
        _bitfield: {"kind":"UInt64"},
    };
};
// --------------------------------------------------------
// Type: MEM_SECTION_EXTENDED_PARAMETER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MEM_SECTION_EXTENDED_PARAMETER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: ENCLAVE_CREATE_INFO_SGX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENCLAVE_CREATE_INFO_SGX = extern struct {
    Secs: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: ENCLAVE_INIT_INFO_SGX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENCLAVE_INIT_INFO_SGX = extern struct {
    SigStruct: {"kind":"Array","child": {"kind":"Byte"}},
    Reserved1: {"kind":"Array","child": {"kind":"Byte"}},
    EInitToken: {"kind":"Array","child": {"kind":"Byte"}},
    Reserved2: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: ENCLAVE_CREATE_INFO_VBS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENCLAVE_CREATE_INFO_VBS = extern struct {
    Flags: {"kind":"UInt32"},
    OwnerID: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: ENCLAVE_CREATE_INFO_VBS_BASIC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENCLAVE_CREATE_INFO_VBS_BASIC = extern struct {
    Flags: {"kind":"UInt32"},
    OwnerID: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: ENCLAVE_LOAD_DATA_VBS_BASIC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENCLAVE_LOAD_DATA_VBS_BASIC = extern struct {
    PageType: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: ENCLAVE_INIT_INFO_VBS_BASIC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENCLAVE_INIT_INFO_VBS_BASIC = extern struct {
    FamilyId: {"kind":"Array","child": {"kind":"Byte"}},
    ImageId: {"kind":"Array","child": {"kind":"Byte"}},
    EnclaveSize: {"kind":"UInt64"},
    EnclaveSvn: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
    Anonymous: Windows.Win32.SystemServices.ENCLAVE_INIT_INFO_VBS_BASIC+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: ENCLAVE_INIT_INFO_VBS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENCLAVE_INIT_INFO_VBS = extern struct {
    Length: {"kind":"UInt32"},
    ThreadCount: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: ENCLAVE_TARGET_FUNCTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ENCLAVE_TARGET_FUNCTION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PENCLAVE_TARGET_FUNCTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PENCLAVE_TARGET_FUNCTION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPENCLAVE_TARGET_FUNCTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPENCLAVE_TARGET_FUNCTION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FILE_SEGMENT_ELEMENT
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const FILE_SEGMENT_ELEMENT = *opaque{
};
// --------------------------------------------------------
// Type: SCRUB_DATA_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCRUB_DATA_INPUT = extern struct {
    Size: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    MaximumIos: {"kind":"UInt32"},
    ObjectId: {"kind":"Array","child": {"kind":"UInt32"}},
    Reserved: {"kind":"Array","child": {"kind":"UInt32"}},
    ResumeContext: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SCRUB_PARITY_EXTENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCRUB_PARITY_EXTENT = extern struct {
    Offset: {"kind":"Int64"},
    Length: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: SCRUB_PARITY_EXTENT_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCRUB_PARITY_EXTENT_DATA = extern struct {
    Size: {"kind":"UInt16"},
    Flags: {"kind":"UInt16"},
    NumberOfParityExtents: {"kind":"UInt16"},
    MaximumNumberOfParityExtents: {"kind":"UInt16"},
    ParityExtents: {"kind":"Array","child": Windows.Win32.SystemServices.SCRUB_PARITY_EXTENT},
};
// --------------------------------------------------------
// Type: SCRUB_DATA_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCRUB_DATA_OUTPUT = extern struct {
    Size: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    Status: {"kind":"UInt32"},
    ErrorFileOffset: {"kind":"UInt64"},
    ErrorLength: {"kind":"UInt64"},
    NumberOfBytesRepaired: {"kind":"UInt64"},
    NumberOfBytesFailed: {"kind":"UInt64"},
    InternalFileReference: {"kind":"UInt64"},
    ResumeContextLength: {"kind":"UInt16"},
    ParityExtentDataOffset: {"kind":"UInt16"},
    Reserved: {"kind":"Array","child": {"kind":"UInt32"}},
    NumberOfMetadataBytesProcessed: {"kind":"UInt64"},
    NumberOfDataBytesProcessed: {"kind":"UInt64"},
    TotalNumberOfMetadataBytesInUse: {"kind":"UInt64"},
    TotalNumberOfDataBytesInUse: {"kind":"UInt64"},
    ResumeContext: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SharedVirtualDiskSupportType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SharedVirtualDiskSupportType = *opaque{
};
// --------------------------------------------------------
// Type: SharedVirtualDiskHandleState
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SharedVirtualDiskHandleState = *opaque{
};
// --------------------------------------------------------
// Type: SHARED_VIRTUAL_DISK_SUPPORT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SHARED_VIRTUAL_DISK_SUPPORT = extern struct {
    SharedVirtualDiskSupport: Windows.Win32.SystemServices.SharedVirtualDiskSupportType,
    HandleState: Windows.Win32.SystemServices.SharedVirtualDiskHandleState,
};
// --------------------------------------------------------
// Type: REARRANGE_FILE_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const REARRANGE_FILE_DATA = extern struct {
    SourceStartingOffset: {"kind":"UInt64"},
    TargetOffset: {"kind":"UInt64"},
    SourceFileHandle: Windows.Win32.SystemServices.HANDLE,
    Length: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SHUFFLE_FILE_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SHUFFLE_FILE_DATA = extern struct {
    StartingOffset: {"kind":"Int64"},
    Length: {"kind":"Int64"},
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NETWORK_APP_INSTANCE_EA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NETWORK_APP_INSTANCE_EA = extern struct {
    AppInstanceID: Guid,
    CsvFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SYSTEM_POWER_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SYSTEM_POWER_STATE = *opaque{
};
// --------------------------------------------------------
// Type: POWER_ACTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const POWER_ACTION = *opaque{
};
// --------------------------------------------------------
// Type: DEVICE_POWER_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DEVICE_POWER_STATE = *opaque{
};
// --------------------------------------------------------
// Type: MONITOR_DISPLAY_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MONITOR_DISPLAY_STATE = *opaque{
};
// --------------------------------------------------------
// Type: USER_ACTIVITY_PRESENCE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const USER_ACTIVITY_PRESENCE = *opaque{
};
// --------------------------------------------------------
// Type: LATENCY_TIME
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LATENCY_TIME = *opaque{
};
// --------------------------------------------------------
// Type: POWER_REQUEST_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const POWER_REQUEST_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: CM_Power_Data_s
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CM_Power_Data_s = extern struct {
    PD_Size: {"kind":"UInt32"},
    PD_MostRecentPowerState: Windows.Win32.SystemServices.DEVICE_POWER_STATE,
    PD_Capabilities: {"kind":"UInt32"},
    PD_D1Latency: {"kind":"UInt32"},
    PD_D2Latency: {"kind":"UInt32"},
    PD_D3Latency: {"kind":"UInt32"},
    PD_PowerStateMapping: {"kind":"Array","child": Windows.Win32.SystemServices.DEVICE_POWER_STATE},
    PD_DeepestSystemWake: Windows.Win32.SystemServices.SYSTEM_POWER_STATE,
};
// --------------------------------------------------------
// Type: POWER_INFORMATION_LEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const POWER_INFORMATION_LEVEL = *opaque{
};
// --------------------------------------------------------
// Type: POWER_USER_PRESENCE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const POWER_USER_PRESENCE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: POWER_USER_PRESENCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POWER_USER_PRESENCE = extern struct {
    UserPresence: Windows.Win32.SystemServices.POWER_USER_PRESENCE_TYPE,
};
// --------------------------------------------------------
// Type: POWER_SESSION_CONNECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POWER_SESSION_CONNECT = extern struct {
    Connected: {"kind":"Byte"},
    Console: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: POWER_SESSION_TIMEOUTS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POWER_SESSION_TIMEOUTS = extern struct {
    InputTimeout: {"kind":"UInt32"},
    DisplayTimeout: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: POWER_SESSION_RIT_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POWER_SESSION_RIT_STATE = extern struct {
    Active: {"kind":"Byte"},
    LastInputTime: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: POWER_SESSION_WINLOGON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POWER_SESSION_WINLOGON = extern struct {
    SessionId: {"kind":"UInt32"},
    Console: {"kind":"Byte"},
    Locked: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES = extern struct {
    IsAllowed: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: POWER_IDLE_RESILIENCY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POWER_IDLE_RESILIENCY = extern struct {
    CoalescingTimeout: {"kind":"UInt32"},
    IdleResiliencyPeriod: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: POWER_MONITOR_REQUEST_REASON
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const POWER_MONITOR_REQUEST_REASON = *opaque{
};
// --------------------------------------------------------
// Type: POWER_MONITOR_REQUEST_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const POWER_MONITOR_REQUEST_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: POWER_MONITOR_INVOCATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POWER_MONITOR_INVOCATION = extern struct {
    Console: {"kind":"Byte"},
    RequestReason: Windows.Win32.SystemServices.POWER_MONITOR_REQUEST_REASON,
};
// --------------------------------------------------------
// Type: RESUME_PERFORMANCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RESUME_PERFORMANCE = extern struct {
    PostTimeMs: {"kind":"UInt32"},
    TotalResumeTimeMs: {"kind":"UInt64"},
    ResumeCompleteTimestamp: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: SYSTEM_POWER_CONDITION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SYSTEM_POWER_CONDITION = *opaque{
};
// --------------------------------------------------------
// Type: SET_POWER_SETTING_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SET_POWER_SETTING_VALUE = extern struct {
    Version: {"kind":"UInt32"},
    Guid: Guid,
    PowerCondition: Windows.Win32.SystemServices.SYSTEM_POWER_CONDITION,
    DataLength: {"kind":"UInt32"},
    Data: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: NOTIFY_USER_POWER_SETTING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NOTIFY_USER_POWER_SETTING = extern struct {
    Guid: Guid,
};
// --------------------------------------------------------
// Type: APPLICATIONLAUNCH_SETTING_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const APPLICATIONLAUNCH_SETTING_VALUE = extern struct {
    ActivationTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    Flags: {"kind":"UInt32"},
    ButtonInstanceID: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: POWER_PLATFORM_ROLE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const POWER_PLATFORM_ROLE = *opaque{
};
// --------------------------------------------------------
// Type: POWER_PLATFORM_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POWER_PLATFORM_INFORMATION = extern struct {
    AoAc: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: BATTERY_REPORTING_SCALE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BATTERY_REPORTING_SCALE = extern struct {
    Granularity: {"kind":"UInt32"},
    Capacity: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PPM_WMI_LEGACY_PERFSTATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PPM_WMI_LEGACY_PERFSTATE = extern struct {
    Frequency: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    PercentFrequency: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PPM_WMI_IDLE_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PPM_WMI_IDLE_STATE = extern struct {
    Latency: {"kind":"UInt32"},
    Power: {"kind":"UInt32"},
    TimeCheck: {"kind":"UInt32"},
    PromotePercent: {"kind":"Byte"},
    DemotePercent: {"kind":"Byte"},
    StateType: {"kind":"Byte"},
    Reserved: {"kind":"Byte"},
    StateFlags: {"kind":"UInt32"},
    Context: {"kind":"UInt32"},
    IdleHandler: {"kind":"UInt32"},
    Reserved1: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PPM_WMI_IDLE_STATES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PPM_WMI_IDLE_STATES = extern struct {
    Type: {"kind":"UInt32"},
    Count: {"kind":"UInt32"},
    TargetState: {"kind":"UInt32"},
    OldState: {"kind":"UInt32"},
    TargetProcessors: {"kind":"UInt64"},
    State: {"kind":"Array","child": Windows.Win32.SystemServices.PPM_WMI_IDLE_STATE},
};
// --------------------------------------------------------
// Type: PPM_WMI_IDLE_STATES_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PPM_WMI_IDLE_STATES_EX = extern struct {
    Type: {"kind":"UInt32"},
    Count: {"kind":"UInt32"},
    TargetState: {"kind":"UInt32"},
    OldState: {"kind":"UInt32"},
    TargetProcessors: {"kind""Ptr","child":{"kind":"Void"}},
    State: {"kind":"Array","child": Windows.Win32.SystemServices.PPM_WMI_IDLE_STATE},
};
// --------------------------------------------------------
// Type: PPM_WMI_PERF_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PPM_WMI_PERF_STATE = extern struct {
    Frequency: {"kind":"UInt32"},
    Power: {"kind":"UInt32"},
    PercentFrequency: {"kind":"Byte"},
    IncreaseLevel: {"kind":"Byte"},
    DecreaseLevel: {"kind":"Byte"},
    Type: {"kind":"Byte"},
    IncreaseTime: {"kind":"UInt32"},
    DecreaseTime: {"kind":"UInt32"},
    Control: {"kind":"UInt64"},
    Status: {"kind":"UInt64"},
    HitCount: {"kind":"UInt32"},
    Reserved1: {"kind":"UInt32"},
    Reserved2: {"kind":"UInt64"},
    Reserved3: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: PPM_WMI_PERF_STATES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PPM_WMI_PERF_STATES = extern struct {
    Count: {"kind":"UInt32"},
    MaxFrequency: {"kind":"UInt32"},
    CurrentState: {"kind":"UInt32"},
    MaxPerfState: {"kind":"UInt32"},
    MinPerfState: {"kind":"UInt32"},
    LowestPerfState: {"kind":"UInt32"},
    ThermalConstraint: {"kind":"UInt32"},
    BusyAdjThreshold: {"kind":"Byte"},
    PolicyType: {"kind":"Byte"},
    Type: {"kind":"Byte"},
    Reserved: {"kind":"Byte"},
    TimerInterval: {"kind":"UInt32"},
    TargetProcessors: {"kind":"UInt64"},
    PStateHandler: {"kind":"UInt32"},
    PStateContext: {"kind":"UInt32"},
    TStateHandler: {"kind":"UInt32"},
    TStateContext: {"kind":"UInt32"},
    FeedbackHandler: {"kind":"UInt32"},
    Reserved1: {"kind":"UInt32"},
    Reserved2: {"kind":"UInt64"},
    State: {"kind":"Array","child": Windows.Win32.SystemServices.PPM_WMI_PERF_STATE},
};
// --------------------------------------------------------
// Type: PPM_WMI_PERF_STATES_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PPM_WMI_PERF_STATES_EX = extern struct {
    Count: {"kind":"UInt32"},
    MaxFrequency: {"kind":"UInt32"},
    CurrentState: {"kind":"UInt32"},
    MaxPerfState: {"kind":"UInt32"},
    MinPerfState: {"kind":"UInt32"},
    LowestPerfState: {"kind":"UInt32"},
    ThermalConstraint: {"kind":"UInt32"},
    BusyAdjThreshold: {"kind":"Byte"},
    PolicyType: {"kind":"Byte"},
    Type: {"kind":"Byte"},
    Reserved: {"kind":"Byte"},
    TimerInterval: {"kind":"UInt32"},
    TargetProcessors: {"kind""Ptr","child":{"kind":"Void"}},
    PStateHandler: {"kind":"UInt32"},
    PStateContext: {"kind":"UInt32"},
    TStateHandler: {"kind":"UInt32"},
    TStateContext: {"kind":"UInt32"},
    FeedbackHandler: {"kind":"UInt32"},
    Reserved1: {"kind":"UInt32"},
    Reserved2: {"kind":"UInt64"},
    State: {"kind":"Array","child": Windows.Win32.SystemServices.PPM_WMI_PERF_STATE},
};
// --------------------------------------------------------
// Type: PPM_IDLE_STATE_ACCOUNTING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PPM_IDLE_STATE_ACCOUNTING = extern struct {
    IdleTransitions: {"kind":"UInt32"},
    FailedTransitions: {"kind":"UInt32"},
    InvalidBucketIndex: {"kind":"UInt32"},
    TotalTime: {"kind":"UInt64"},
    IdleTimeBuckets: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: PPM_IDLE_ACCOUNTING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PPM_IDLE_ACCOUNTING = extern struct {
    StateCount: {"kind":"UInt32"},
    TotalTransitions: {"kind":"UInt32"},
    ResetCount: {"kind":"UInt32"},
    StartTime: {"kind":"UInt64"},
    State: {"kind":"Array","child": Windows.Win32.SystemServices.PPM_IDLE_STATE_ACCOUNTING},
};
// --------------------------------------------------------
// Type: PPM_IDLE_STATE_BUCKET_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PPM_IDLE_STATE_BUCKET_EX = extern struct {
    TotalTimeUs: {"kind":"UInt64"},
    MinTimeUs: {"kind":"UInt32"},
    MaxTimeUs: {"kind":"UInt32"},
    Count: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PPM_IDLE_STATE_ACCOUNTING_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PPM_IDLE_STATE_ACCOUNTING_EX = extern struct {
    TotalTime: {"kind":"UInt64"},
    IdleTransitions: {"kind":"UInt32"},
    FailedTransitions: {"kind":"UInt32"},
    InvalidBucketIndex: {"kind":"UInt32"},
    MinTimeUs: {"kind":"UInt32"},
    MaxTimeUs: {"kind":"UInt32"},
    CancelledTransitions: {"kind":"UInt32"},
    IdleTimeBuckets: {"kind":"Array","child": Windows.Win32.SystemServices.PPM_IDLE_STATE_BUCKET_EX},
};
// --------------------------------------------------------
// Type: PPM_IDLE_ACCOUNTING_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PPM_IDLE_ACCOUNTING_EX = extern struct {
    StateCount: {"kind":"UInt32"},
    TotalTransitions: {"kind":"UInt32"},
    ResetCount: {"kind":"UInt32"},
    AbortCount: {"kind":"UInt32"},
    StartTime: {"kind":"UInt64"},
    State: {"kind":"Array","child": Windows.Win32.SystemServices.PPM_IDLE_STATE_ACCOUNTING_EX},
};
// --------------------------------------------------------
// Type: PPM_PERFSTATE_EVENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PPM_PERFSTATE_EVENT = extern struct {
    State: {"kind":"UInt32"},
    Status: {"kind":"UInt32"},
    Latency: {"kind":"UInt32"},
    Speed: {"kind":"UInt32"},
    Processor: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PPM_PERFSTATE_DOMAIN_EVENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PPM_PERFSTATE_DOMAIN_EVENT = extern struct {
    State: {"kind":"UInt32"},
    Latency: {"kind":"UInt32"},
    Speed: {"kind":"UInt32"},
    Processors: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: PPM_IDLESTATE_EVENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PPM_IDLESTATE_EVENT = extern struct {
    NewState: {"kind":"UInt32"},
    OldState: {"kind":"UInt32"},
    Processors: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: PPM_THERMALCHANGE_EVENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PPM_THERMALCHANGE_EVENT = extern struct {
    ThermalConstraint: {"kind":"UInt32"},
    Processors: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: PPM_THERMAL_POLICY_EVENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PPM_THERMAL_POLICY_EVENT = extern struct {
    Mode: {"kind":"Byte"},
    Processors: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: POWER_ACTION_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POWER_ACTION_POLICY = extern struct {
    Action: Windows.Win32.SystemServices.POWER_ACTION,
    Flags: {"kind":"UInt32"},
    EventCode: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SYSTEM_POWER_LEVEL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_POWER_LEVEL = extern struct {
    Enable: {"kind":"Byte"},
    Spare: {"kind":"Array","child": {"kind":"Byte"}},
    BatteryLevel: {"kind":"UInt32"},
    PowerPolicy: Windows.Win32.SystemServices.POWER_ACTION_POLICY,
    MinSystemState: Windows.Win32.SystemServices.SYSTEM_POWER_STATE,
};
// --------------------------------------------------------
// Type: SYSTEM_POWER_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_POWER_POLICY = extern struct {
    Revision: {"kind":"UInt32"},
    PowerButton: Windows.Win32.SystemServices.POWER_ACTION_POLICY,
    SleepButton: Windows.Win32.SystemServices.POWER_ACTION_POLICY,
    LidClose: Windows.Win32.SystemServices.POWER_ACTION_POLICY,
    LidOpenWake: Windows.Win32.SystemServices.SYSTEM_POWER_STATE,
    Reserved: {"kind":"UInt32"},
    Idle: Windows.Win32.SystemServices.POWER_ACTION_POLICY,
    IdleTimeout: {"kind":"UInt32"},
    IdleSensitivity: {"kind":"Byte"},
    DynamicThrottle: {"kind":"Byte"},
    Spare2: {"kind":"Array","child": {"kind":"Byte"}},
    MinSleep: Windows.Win32.SystemServices.SYSTEM_POWER_STATE,
    MaxSleep: Windows.Win32.SystemServices.SYSTEM_POWER_STATE,
    ReducedLatencySleep: Windows.Win32.SystemServices.SYSTEM_POWER_STATE,
    WinLogonFlags: {"kind":"UInt32"},
    Spare3: {"kind":"UInt32"},
    DozeS4Timeout: {"kind":"UInt32"},
    BroadcastCapacityResolution: {"kind":"UInt32"},
    DischargePolicy: {"kind":"Array","child": Windows.Win32.SystemServices.SYSTEM_POWER_LEVEL},
    VideoTimeout: {"kind":"UInt32"},
    VideoDimDisplay: {"kind":"Byte"},
    VideoReserved: {"kind":"Array","child": {"kind":"UInt32"}},
    SpindownTimeout: {"kind":"UInt32"},
    OptimizeForPower: {"kind":"Byte"},
    FanThrottleTolerance: {"kind":"Byte"},
    ForcedThrottle: {"kind":"Byte"},
    MinThrottle: {"kind":"Byte"},
    OverThrottled: Windows.Win32.SystemServices.POWER_ACTION_POLICY,
};
// --------------------------------------------------------
// Type: PROCESSOR_IDLESTATE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESSOR_IDLESTATE_INFO = extern struct {
    TimeCheck: {"kind":"UInt32"},
    DemotePercent: {"kind":"Byte"},
    PromotePercent: {"kind":"Byte"},
    Spare: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: PROCESSOR_IDLESTATE_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESSOR_IDLESTATE_POLICY = extern struct {
    Revision: {"kind":"UInt16"},
    Flags: Windows.Win32.SystemServices.PROCESSOR_IDLESTATE_POLICY+_Flags_e__Union,
    PolicyCount: {"kind":"UInt32"},
    Policy: {"kind":"Array","child": Windows.Win32.SystemServices.PROCESSOR_IDLESTATE_INFO},
    // --------------------------------------------------------
    // Type: _Flags_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Flags_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"UInt16"},
        };
    };
};
// --------------------------------------------------------
// Type: PROCESSOR_POWER_POLICY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESSOR_POWER_POLICY_INFO = extern struct {
    TimeCheck: {"kind":"UInt32"},
    DemoteLimit: {"kind":"UInt32"},
    PromoteLimit: {"kind":"UInt32"},
    DemotePercent: {"kind":"Byte"},
    PromotePercent: {"kind":"Byte"},
    Spare: {"kind":"Array","child": {"kind":"Byte"}},
    _bitfield: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PROCESSOR_POWER_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESSOR_POWER_POLICY = extern struct {
    Revision: {"kind":"UInt32"},
    DynamicThrottle: {"kind":"Byte"},
    Spare: {"kind":"Array","child": {"kind":"Byte"}},
    _bitfield: {"kind":"UInt32"},
    PolicyCount: {"kind":"UInt32"},
    Policy: {"kind":"Array","child": Windows.Win32.SystemServices.PROCESSOR_POWER_POLICY_INFO},
};
// --------------------------------------------------------
// Type: PROCESSOR_PERFSTATE_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESSOR_PERFSTATE_POLICY = extern struct {
    Revision: {"kind":"UInt32"},
    MaxThrottle: {"kind":"Byte"},
    MinThrottle: {"kind":"Byte"},
    BusyAdjThreshold: {"kind":"Byte"},
    Anonymous: Windows.Win32.SystemServices.PROCESSOR_PERFSTATE_POLICY+_Anonymous_e__Union,
    TimeCheck: {"kind":"UInt32"},
    IncreaseTime: {"kind":"UInt32"},
    DecreaseTime: {"kind":"UInt32"},
    IncreasePercent: {"kind":"UInt32"},
    DecreasePercent: {"kind":"UInt32"},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Flags_e__Union
        // TypeLayoutAttr: explicit
        // not generating the actual code for this type because it has an explicit layout
        pub const _Flags_e__Union = *opaque{
            // --------------------------------------------------------
            // Type: _Anonymous_e__Struct
            // TypeLayoutAttr: sequential
            // TODO: I think this is a struct, but not sure at this point, assuming it is for now
            pub const _Anonymous_e__Struct = extern struct {
                _bitfield: {"kind":"Byte"},
            };
        };
    };
};
// --------------------------------------------------------
// Type: ADMINISTRATOR_POWER_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ADMINISTRATOR_POWER_POLICY = extern struct {
    MinSleep: Windows.Win32.SystemServices.SYSTEM_POWER_STATE,
    MaxSleep: Windows.Win32.SystemServices.SYSTEM_POWER_STATE,
    MinVideoTimeout: {"kind":"UInt32"},
    MaxVideoTimeout: {"kind":"UInt32"},
    MinSpindownTimeout: {"kind":"UInt32"},
    MaxSpindownTimeout: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: HIBERFILE_BUCKET_SIZE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HIBERFILE_BUCKET_SIZE = *opaque{
};
// --------------------------------------------------------
// Type: HIBERFILE_BUCKET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HIBERFILE_BUCKET = extern struct {
    MaxPhysicalMemory: {"kind":"UInt64"},
    PhysicalMemoryPercent: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: SYSTEM_POWER_CAPABILITIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_POWER_CAPABILITIES = extern struct {
    PowerButtonPresent: {"kind":"Byte"},
    SleepButtonPresent: {"kind":"Byte"},
    LidPresent: {"kind":"Byte"},
    SystemS1: {"kind":"Byte"},
    SystemS2: {"kind":"Byte"},
    SystemS3: {"kind":"Byte"},
    SystemS4: {"kind":"Byte"},
    SystemS5: {"kind":"Byte"},
    HiberFilePresent: {"kind":"Byte"},
    FullWake: {"kind":"Byte"},
    VideoDimPresent: {"kind":"Byte"},
    ApmPresent: {"kind":"Byte"},
    UpsPresent: {"kind":"Byte"},
    ThermalControl: {"kind":"Byte"},
    ProcessorThrottle: {"kind":"Byte"},
    ProcessorMinThrottle: {"kind":"Byte"},
    ProcessorMaxThrottle: {"kind":"Byte"},
    FastSystemS4: {"kind":"Byte"},
    Hiberboot: {"kind":"Byte"},
    WakeAlarmPresent: {"kind":"Byte"},
    AoAc: {"kind":"Byte"},
    DiskSpinDown: {"kind":"Byte"},
    HiberFileType: {"kind":"Byte"},
    AoAcConnectivitySupported: {"kind":"Byte"},
    spare3: {"kind":"Array","child": {"kind":"Byte"}},
    SystemBatteriesPresent: {"kind":"Byte"},
    BatteriesAreShortTerm: {"kind":"Byte"},
    BatteryScale: {"kind":"Array","child": Windows.Win32.SystemServices.BATTERY_REPORTING_SCALE},
    AcOnLineWake: Windows.Win32.SystemServices.SYSTEM_POWER_STATE,
    SoftLidWake: Windows.Win32.SystemServices.SYSTEM_POWER_STATE,
    RtcWake: Windows.Win32.SystemServices.SYSTEM_POWER_STATE,
    MinDeviceWakeState: Windows.Win32.SystemServices.SYSTEM_POWER_STATE,
    DefaultLowLatencyWake: Windows.Win32.SystemServices.SYSTEM_POWER_STATE,
};
// --------------------------------------------------------
// Type: SYSTEM_BATTERY_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_BATTERY_STATE = extern struct {
    AcOnLine: {"kind":"Byte"},
    BatteryPresent: {"kind":"Byte"},
    Charging: {"kind":"Byte"},
    Discharging: {"kind":"Byte"},
    Spare1: {"kind":"Array","child": {"kind":"Byte"}},
    Tag: {"kind":"Byte"},
    MaxCapacity: {"kind":"UInt32"},
    RemainingCapacity: {"kind":"UInt32"},
    Rate: {"kind":"UInt32"},
    EstimatedTime: {"kind":"UInt32"},
    DefaultAlert1: {"kind":"UInt32"},
    DefaultAlert2: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IMAGE_DOS_HEADER
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=2 Size=0
pub const IMAGE_DOS_HEADER = *opaque{
};
// --------------------------------------------------------
// Type: IMAGE_OS2_HEADER
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=2 Size=0
pub const IMAGE_OS2_HEADER = *opaque{
};
// --------------------------------------------------------
// Type: IMAGE_VXD_HEADER
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=2 Size=0
pub const IMAGE_VXD_HEADER = *opaque{
};
// --------------------------------------------------------
// Type: IMAGE_OPTIONAL_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_OPTIONAL_HEADER = extern struct {
    Magic: {"kind":"UInt16"},
    MajorLinkerVersion: {"kind":"Byte"},
    MinorLinkerVersion: {"kind":"Byte"},
    SizeOfCode: {"kind":"UInt32"},
    SizeOfInitializedData: {"kind":"UInt32"},
    SizeOfUninitializedData: {"kind":"UInt32"},
    AddressOfEntryPoint: {"kind":"UInt32"},
    BaseOfCode: {"kind":"UInt32"},
    BaseOfData: {"kind":"UInt32"},
    ImageBase: {"kind":"UInt32"},
    SectionAlignment: {"kind":"UInt32"},
    FileAlignment: {"kind":"UInt32"},
    MajorOperatingSystemVersion: {"kind":"UInt16"},
    MinorOperatingSystemVersion: {"kind":"UInt16"},
    MajorImageVersion: {"kind":"UInt16"},
    MinorImageVersion: {"kind":"UInt16"},
    MajorSubsystemVersion: {"kind":"UInt16"},
    MinorSubsystemVersion: {"kind":"UInt16"},
    Win32VersionValue: {"kind":"UInt32"},
    SizeOfImage: {"kind":"UInt32"},
    SizeOfHeaders: {"kind":"UInt32"},
    CheckSum: {"kind":"UInt32"},
    Subsystem: {"kind":"UInt16"},
    DllCharacteristics: {"kind":"UInt16"},
    SizeOfStackReserve: {"kind":"UInt32"},
    SizeOfStackCommit: {"kind":"UInt32"},
    SizeOfHeapReserve: {"kind":"UInt32"},
    SizeOfHeapCommit: {"kind":"UInt32"},
    LoaderFlags: {"kind":"UInt32"},
    NumberOfRvaAndSizes: {"kind":"UInt32"},
    DataDirectory: {"kind":"Array","child": Windows.Win32.Debug.IMAGE_DATA_DIRECTORY},
};
// --------------------------------------------------------
// Type: IMAGE_ROM_OPTIONAL_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_ROM_OPTIONAL_HEADER = extern struct {
    Magic: {"kind":"UInt16"},
    MajorLinkerVersion: {"kind":"Byte"},
    MinorLinkerVersion: {"kind":"Byte"},
    SizeOfCode: {"kind":"UInt32"},
    SizeOfInitializedData: {"kind":"UInt32"},
    SizeOfUninitializedData: {"kind":"UInt32"},
    AddressOfEntryPoint: {"kind":"UInt32"},
    BaseOfCode: {"kind":"UInt32"},
    BaseOfData: {"kind":"UInt32"},
    BaseOfBss: {"kind":"UInt32"},
    GprMask: {"kind":"UInt32"},
    CprMask: {"kind":"Array","child": {"kind":"UInt32"}},
    GpValue: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IMAGE_NT_HEADERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_NT_HEADERS = extern struct {
    Signature: {"kind":"UInt32"},
    FileHeader: Windows.Win32.Debug.IMAGE_FILE_HEADER,
    OptionalHeader: Windows.Win32.SystemServices.IMAGE_OPTIONAL_HEADER,
};
// --------------------------------------------------------
// Type: IMAGE_ROM_HEADERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_ROM_HEADERS = extern struct {
    FileHeader: Windows.Win32.Debug.IMAGE_FILE_HEADER,
    OptionalHeader: Windows.Win32.SystemServices.IMAGE_ROM_OPTIONAL_HEADER,
};
// --------------------------------------------------------
// Type: ANON_OBJECT_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ANON_OBJECT_HEADER = extern struct {
    Sig1: {"kind":"UInt16"},
    Sig2: {"kind":"UInt16"},
    Version: {"kind":"UInt16"},
    Machine: {"kind":"UInt16"},
    TimeDateStamp: {"kind":"UInt32"},
    ClassID: Guid,
    SizeOfData: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: ANON_OBJECT_HEADER_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ANON_OBJECT_HEADER_V2 = extern struct {
    Sig1: {"kind":"UInt16"},
    Sig2: {"kind":"UInt16"},
    Version: {"kind":"UInt16"},
    Machine: {"kind":"UInt16"},
    TimeDateStamp: {"kind":"UInt32"},
    ClassID: Guid,
    SizeOfData: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    MetaDataSize: {"kind":"UInt32"},
    MetaDataOffset: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: ANON_OBJECT_HEADER_BIGOBJ
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ANON_OBJECT_HEADER_BIGOBJ = extern struct {
    Sig1: {"kind":"UInt16"},
    Sig2: {"kind":"UInt16"},
    Version: {"kind":"UInt16"},
    Machine: {"kind":"UInt16"},
    TimeDateStamp: {"kind":"UInt32"},
    ClassID: Guid,
    SizeOfData: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    MetaDataSize: {"kind":"UInt32"},
    MetaDataOffset: {"kind":"UInt32"},
    NumberOfSections: {"kind":"UInt32"},
    PointerToSymbolTable: {"kind":"UInt32"},
    NumberOfSymbols: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IMAGE_SYMBOL
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=2 Size=0
pub const IMAGE_SYMBOL = *opaque{
    // --------------------------------------------------------
    // Type: _N_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _N_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Name_e__Struct
        // TypeLayoutAttr: sequential
        // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=2 Size=0
        pub const _Name_e__Struct = *opaque{
        };
    };
};
// --------------------------------------------------------
// Type: IMAGE_SYMBOL_EX
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=2 Size=0
pub const IMAGE_SYMBOL_EX = *opaque{
    // --------------------------------------------------------
    // Type: _N_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _N_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Name_e__Struct
        // TypeLayoutAttr: sequential
        // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=2 Size=0
        pub const _Name_e__Struct = *opaque{
        };
    };
};
// --------------------------------------------------------
// Type: IMAGE_AUX_SYMBOL_TOKEN_DEF
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=2 Size=0
pub const IMAGE_AUX_SYMBOL_TOKEN_DEF = *opaque{
};
// --------------------------------------------------------
// Type: IMAGE_AUX_SYMBOL
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const IMAGE_AUX_SYMBOL = *opaque{
    // --------------------------------------------------------
    // Type: _CRC_e__Struct
    // TypeLayoutAttr: sequential
    // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=2 Size=0
    pub const _CRC_e__Struct = *opaque{
    };
    // --------------------------------------------------------
    // Type: _File_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _File_e__Struct = extern struct {
        Name: {"kind":"Array","child": {"kind":"Byte"}},
    };
    // --------------------------------------------------------
    // Type: _Sym_e__Struct
    // TypeLayoutAttr: sequential
    // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=2 Size=0
    pub const _Sym_e__Struct = *opaque{
        // --------------------------------------------------------
        // Type: _FcnAry_e__Union
        // TypeLayoutAttr: explicit
        // not generating the actual code for this type because it has an explicit layout
        pub const _FcnAry_e__Union = *opaque{
            // --------------------------------------------------------
            // Type: _Array_e__Struct
            // TypeLayoutAttr: sequential
            // TODO: I think this is a struct, but not sure at this point, assuming it is for now
            pub const _Array_e__Struct = extern struct {
                Dimension: {"kind":"Array","child": {"kind":"UInt16"}},
            };
            // --------------------------------------------------------
            // Type: _Function_e__Struct
            // TypeLayoutAttr: sequential
            // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=2 Size=0
            pub const _Function_e__Struct = *opaque{
            };
        };
        // --------------------------------------------------------
        // Type: _Misc_e__Union
        // TypeLayoutAttr: explicit
        // not generating the actual code for this type because it has an explicit layout
        pub const _Misc_e__Union = *opaque{
            // --------------------------------------------------------
            // Type: _LnSz_e__Struct
            // TypeLayoutAttr: sequential
            // TODO: I think this is a struct, but not sure at this point, assuming it is for now
            pub const _LnSz_e__Struct = extern struct {
                Linenumber: {"kind":"UInt16"},
                Size: {"kind":"UInt16"},
            };
        };
    };
    // --------------------------------------------------------
    // Type: _Section_e__Struct
    // TypeLayoutAttr: sequential
    // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=2 Size=0
    pub const _Section_e__Struct = *opaque{
    };
};
// --------------------------------------------------------
// Type: IMAGE_AUX_SYMBOL_EX
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const IMAGE_AUX_SYMBOL_EX = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Anonymous_e__Struct = extern struct {
        TokenDef: Windows.Win32.SystemServices.IMAGE_AUX_SYMBOL_TOKEN_DEF,
        rgbReserved: {"kind":"Array","child": {"kind":"Byte"}},
    };
    // --------------------------------------------------------
    // Type: _File_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _File_e__Struct = extern struct {
        Name: {"kind":"Array","child": {"kind":"Byte"}},
    };
    // --------------------------------------------------------
    // Type: _CRC_e__Struct
    // TypeLayoutAttr: sequential
    // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=2 Size=0
    pub const _CRC_e__Struct = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Sym_e__Struct
    // TypeLayoutAttr: sequential
    // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=2 Size=0
    pub const _Sym_e__Struct = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Section_e__Struct
    // TypeLayoutAttr: sequential
    // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=2 Size=0
    pub const _Section_e__Struct = *opaque{
    };
};
// --------------------------------------------------------
// Type: IMAGE_AUX_SYMBOL_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IMAGE_AUX_SYMBOL_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IMAGE_RELOCATION
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=2 Size=0
pub const IMAGE_RELOCATION = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IMAGE_LINENUMBER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_LINENUMBER = extern struct {
    Type: Windows.Win32.SystemServices.IMAGE_LINENUMBER+_Type_e__Union,
    Linenumber: {"kind":"UInt16"},
    // --------------------------------------------------------
    // Type: _Type_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Type_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IMAGE_BASE_RELOCATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_BASE_RELOCATION = extern struct {
    VirtualAddress: {"kind":"UInt32"},
    SizeOfBlock: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IMAGE_ARCHIVE_MEMBER_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_ARCHIVE_MEMBER_HEADER = extern struct {
    Name: {"kind":"Array","child": {"kind":"Byte"}},
    Date: {"kind":"Array","child": {"kind":"Byte"}},
    UserID: {"kind":"Array","child": {"kind":"Byte"}},
    GroupID: {"kind":"Array","child": {"kind":"Byte"}},
    Mode: {"kind":"Array","child": {"kind":"Byte"}},
    Size: {"kind":"Array","child": {"kind":"Byte"}},
    EndHeader: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: IMAGE_EXPORT_DIRECTORY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_EXPORT_DIRECTORY = extern struct {
    Characteristics: {"kind":"UInt32"},
    TimeDateStamp: {"kind":"UInt32"},
    MajorVersion: {"kind":"UInt16"},
    MinorVersion: {"kind":"UInt16"},
    Name: {"kind":"UInt32"},
    Base: {"kind":"UInt32"},
    NumberOfFunctions: {"kind":"UInt32"},
    NumberOfNames: {"kind":"UInt32"},
    AddressOfFunctions: {"kind":"UInt32"},
    AddressOfNames: {"kind":"UInt32"},
    AddressOfNameOrdinals: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IMAGE_IMPORT_BY_NAME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_IMPORT_BY_NAME = extern struct {
    Hint: {"kind":"UInt16"},
    Name: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: IMAGE_THUNK_DATA64
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_THUNK_DATA64 = extern struct {
    u1: Windows.Win32.SystemServices.IMAGE_THUNK_DATA64+_u1_e__Union,
    // --------------------------------------------------------
    // Type: _u1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u1_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IMAGE_THUNK_DATA32
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_THUNK_DATA32 = extern struct {
    u1: Windows.Win32.SystemServices.IMAGE_THUNK_DATA32+_u1_e__Union,
    // --------------------------------------------------------
    // Type: _u1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u1_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PIMAGE_TLS_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PIMAGE_TLS_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: IMAGE_TLS_DIRECTORY64
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const IMAGE_TLS_DIRECTORY64 = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: IMAGE_TLS_DIRECTORY32
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_TLS_DIRECTORY32 = extern struct {
    StartAddressOfRawData: {"kind":"UInt32"},
    EndAddressOfRawData: {"kind":"UInt32"},
    AddressOfIndex: {"kind":"UInt32"},
    AddressOfCallBacks: {"kind":"UInt32"},
    SizeOfZeroFill: {"kind":"UInt32"},
    Anonymous: Windows.Win32.SystemServices.IMAGE_TLS_DIRECTORY32+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: IMAGE_IMPORT_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_IMPORT_DESCRIPTOR = extern struct {
    Anonymous: Windows.Win32.SystemServices.IMAGE_IMPORT_DESCRIPTOR+_Anonymous_e__Union,
    TimeDateStamp: {"kind":"UInt32"},
    ForwarderChain: {"kind":"UInt32"},
    Name: {"kind":"UInt32"},
    FirstThunk: {"kind":"UInt32"},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IMAGE_BOUND_IMPORT_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_BOUND_IMPORT_DESCRIPTOR = extern struct {
    TimeDateStamp: {"kind":"UInt32"},
    OffsetModuleName: {"kind":"UInt16"},
    NumberOfModuleForwarderRefs: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: IMAGE_BOUND_FORWARDER_REF
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_BOUND_FORWARDER_REF = extern struct {
    TimeDateStamp: {"kind":"UInt32"},
    OffsetModuleName: {"kind":"UInt16"},
    Reserved: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: IMAGE_DELAYLOAD_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_DELAYLOAD_DESCRIPTOR = extern struct {
    Attributes: Windows.Win32.SystemServices.IMAGE_DELAYLOAD_DESCRIPTOR+_Attributes_e__Union,
    DllNameRVA: {"kind":"UInt32"},
    ModuleHandleRVA: {"kind":"UInt32"},
    ImportAddressTableRVA: {"kind":"UInt32"},
    ImportNameTableRVA: {"kind":"UInt32"},
    BoundImportAddressTableRVA: {"kind":"UInt32"},
    UnloadInformationTableRVA: {"kind":"UInt32"},
    TimeDateStamp: {"kind":"UInt32"},
    // --------------------------------------------------------
    // Type: _Attributes_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Attributes_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: IMAGE_RESOURCE_DIRECTORY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_RESOURCE_DIRECTORY = extern struct {
    Characteristics: {"kind":"UInt32"},
    TimeDateStamp: {"kind":"UInt32"},
    MajorVersion: {"kind":"UInt16"},
    MinorVersion: {"kind":"UInt16"},
    NumberOfNamedEntries: {"kind":"UInt16"},
    NumberOfIdEntries: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: IMAGE_RESOURCE_DIRECTORY_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_RESOURCE_DIRECTORY_ENTRY = extern struct {
    Anonymous1: Windows.Win32.SystemServices.IMAGE_RESOURCE_DIRECTORY_ENTRY+_Anonymous1_e__Union,
    Anonymous2: Windows.Win32.SystemServices.IMAGE_RESOURCE_DIRECTORY_ENTRY+_Anonymous2_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: IMAGE_RESOURCE_DIRECTORY_STRING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_RESOURCE_DIRECTORY_STRING = extern struct {
    Length: {"kind":"UInt16"},
    NameString: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: IMAGE_RESOURCE_DIR_STRING_U
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_RESOURCE_DIR_STRING_U = extern struct {
    Length: {"kind":"UInt16"},
    NameString: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: IMAGE_RESOURCE_DATA_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_RESOURCE_DATA_ENTRY = extern struct {
    OffsetToData: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    CodePage: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IMAGE_LOAD_CONFIG_CODE_INTEGRITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_LOAD_CONFIG_CODE_INTEGRITY = extern struct {
    Flags: {"kind":"UInt16"},
    Catalog: {"kind":"UInt16"},
    CatalogOffset: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IMAGE_DYNAMIC_RELOCATION_TABLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_DYNAMIC_RELOCATION_TABLE = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IMAGE_DYNAMIC_RELOCATION32
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const IMAGE_DYNAMIC_RELOCATION32 = *opaque{
};
// --------------------------------------------------------
// Type: IMAGE_DYNAMIC_RELOCATION64
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const IMAGE_DYNAMIC_RELOCATION64 = *opaque{
};
// --------------------------------------------------------
// Type: IMAGE_DYNAMIC_RELOCATION32_V2
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const IMAGE_DYNAMIC_RELOCATION32_V2 = *opaque{
};
// --------------------------------------------------------
// Type: IMAGE_DYNAMIC_RELOCATION64_V2
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const IMAGE_DYNAMIC_RELOCATION64_V2 = *opaque{
};
// --------------------------------------------------------
// Type: IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER = extern struct {
    PrologueByteCount: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER = *opaque{
};
// --------------------------------------------------------
// Type: IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION = *opaque{
};
// --------------------------------------------------------
// Type: IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION = *opaque{
};
// --------------------------------------------------------
// Type: IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION = *opaque{
};
// --------------------------------------------------------
// Type: IMAGE_HOT_PATCH_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_HOT_PATCH_INFO = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    SequenceNumber: {"kind":"UInt32"},
    BaseImageList: {"kind":"UInt32"},
    BaseImageCount: {"kind":"UInt32"},
    BufferOffset: {"kind":"UInt32"},
    ExtraPatchSize: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IMAGE_HOT_PATCH_BASE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_HOT_PATCH_BASE = extern struct {
    SequenceNumber: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    OriginalTimeDateStamp: {"kind":"UInt32"},
    OriginalCheckSum: {"kind":"UInt32"},
    CodeIntegrityInfo: {"kind":"UInt32"},
    CodeIntegritySize: {"kind":"UInt32"},
    PatchTable: {"kind":"UInt32"},
    BufferOffset: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IMAGE_HOT_PATCH_HASHES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_HOT_PATCH_HASHES = extern struct {
    SHA256: {"kind":"Array","child": {"kind":"Byte"}},
    SHA1: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: IMAGE_CE_RUNTIME_FUNCTION_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_CE_RUNTIME_FUNCTION_ENTRY = extern struct {
    FuncStart: {"kind":"UInt32"},
    _bitfield: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IMAGE_ARM_RUNTIME_FUNCTION_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_ARM_RUNTIME_FUNCTION_ENTRY = extern struct {
    BeginAddress: {"kind":"UInt32"},
    Anonymous: Windows.Win32.SystemServices.IMAGE_ARM_RUNTIME_FUNCTION_ENTRY+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: ARM64_FNPDATA_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ARM64_FNPDATA_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: ARM64_FNPDATA_CR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ARM64_FNPDATA_CR = *opaque{
};
// --------------------------------------------------------
// Type: IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY = extern struct {
    BeginAddress: {"kind":"UInt32"},
    Anonymous: Windows.Win32.SystemServices.IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Anonymous_e__Struct = extern struct {
        _bitfield: {"kind":"UInt32"},
    };
};
// --------------------------------------------------------
// Type: IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY = *opaque{
};
// --------------------------------------------------------
// Type: IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY = extern struct {
    BeginAddress: {"kind":"UInt32"},
    EndAddress: {"kind":"UInt32"},
    ExceptionHandler: {"kind":"UInt32"},
    HandlerData: {"kind":"UInt32"},
    PrologEndAddress: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IMAGE_RUNTIME_FUNCTION_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_RUNTIME_FUNCTION_ENTRY = extern struct {
    BeginAddress: {"kind":"UInt32"},
    EndAddress: {"kind":"UInt32"},
    Anonymous: Windows.Win32.SystemServices.IMAGE_RUNTIME_FUNCTION_ENTRY+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IMAGE_ENCLAVE_CONFIG32
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_ENCLAVE_CONFIG32 = extern struct {
    Size: {"kind":"UInt32"},
    MinimumRequiredConfigSize: {"kind":"UInt32"},
    PolicyFlags: {"kind":"UInt32"},
    NumberOfImports: {"kind":"UInt32"},
    ImportList: {"kind":"UInt32"},
    ImportEntrySize: {"kind":"UInt32"},
    FamilyID: {"kind":"Array","child": {"kind":"Byte"}},
    ImageID: {"kind":"Array","child": {"kind":"Byte"}},
    ImageVersion: {"kind":"UInt32"},
    SecurityVersion: {"kind":"UInt32"},
    EnclaveSize: {"kind":"UInt32"},
    NumberOfThreads: {"kind":"UInt32"},
    EnclaveFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IMAGE_ENCLAVE_CONFIG64
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const IMAGE_ENCLAVE_CONFIG64 = *opaque{
};
// --------------------------------------------------------
// Type: IMAGE_ENCLAVE_IMPORT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_ENCLAVE_IMPORT = extern struct {
    MatchType: {"kind":"UInt32"},
    MinimumSecurityVersion: {"kind":"UInt32"},
    UniqueOrAuthorID: {"kind":"Array","child": {"kind":"Byte"}},
    FamilyID: {"kind":"Array","child": {"kind":"Byte"}},
    ImageID: {"kind":"Array","child": {"kind":"Byte"}},
    ImportName: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IMAGE_DEBUG_MISC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_DEBUG_MISC = extern struct {
    DataType: {"kind":"UInt32"},
    Length: {"kind":"UInt32"},
    Unicode: {"kind":"Byte"},
    Reserved: {"kind":"Array","child": {"kind":"Byte"}},
    Data: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: IMAGE_SEPARATE_DEBUG_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_SEPARATE_DEBUG_HEADER = extern struct {
    Signature: {"kind":"UInt16"},
    Flags: {"kind":"UInt16"},
    Machine: {"kind":"UInt16"},
    Characteristics: {"kind":"UInt16"},
    TimeDateStamp: {"kind":"UInt32"},
    CheckSum: {"kind":"UInt32"},
    ImageBase: {"kind":"UInt32"},
    SizeOfImage: {"kind":"UInt32"},
    NumberOfSections: {"kind":"UInt32"},
    ExportedNamesSize: {"kind":"UInt32"},
    DebugDirectorySize: {"kind":"UInt32"},
    SectionAlignment: {"kind":"UInt32"},
    Reserved: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: NON_PAGED_DEBUG_INFO
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const NON_PAGED_DEBUG_INFO = *opaque{
};
// --------------------------------------------------------
// Type: IMAGE_ARCHITECTURE_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_ARCHITECTURE_HEADER = extern struct {
    _bitfield: {"kind":"UInt32"},
    FirstEntryRVA: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IMAGE_ARCHITECTURE_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_ARCHITECTURE_ENTRY = extern struct {
    FixupInstRVA: {"kind":"UInt32"},
    NewInst: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IMPORT_OBJECT_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMPORT_OBJECT_HEADER = extern struct {
    Sig1: {"kind":"UInt16"},
    Sig2: {"kind":"UInt16"},
    Version: {"kind":"UInt16"},
    Machine: {"kind":"UInt16"},
    TimeDateStamp: {"kind":"UInt32"},
    SizeOfData: {"kind":"UInt32"},
    Anonymous: Windows.Win32.SystemServices.IMPORT_OBJECT_HEADER+_Anonymous_e__Union,
    _bitfield: {"kind":"UInt16"},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IMPORT_OBJECT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IMPORT_OBJECT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IMPORT_OBJECT_NAME_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IMPORT_OBJECT_NAME_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: ReplacesCorHdrNumericDefines
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ReplacesCorHdrNumericDefines = *opaque{
};
// --------------------------------------------------------
// Type: IMAGE_COR20_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_COR20_HEADER = extern struct {
    cb: {"kind":"UInt32"},
    MajorRuntimeVersion: {"kind":"UInt16"},
    MinorRuntimeVersion: {"kind":"UInt16"},
    MetaData: Windows.Win32.Debug.IMAGE_DATA_DIRECTORY,
    Flags: {"kind":"UInt32"},
    Anonymous: Windows.Win32.SystemServices.IMAGE_COR20_HEADER+_Anonymous_e__Union,
    Resources: Windows.Win32.Debug.IMAGE_DATA_DIRECTORY,
    StrongNameSignature: Windows.Win32.Debug.IMAGE_DATA_DIRECTORY,
    CodeManagerTable: Windows.Win32.Debug.IMAGE_DATA_DIRECTORY,
    VTableFixups: Windows.Win32.Debug.IMAGE_DATA_DIRECTORY,
    ExportAddressTableJumps: Windows.Win32.Debug.IMAGE_DATA_DIRECTORY,
    ManagedNativeHeader: Windows.Win32.Debug.IMAGE_DATA_DIRECTORY,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: SLIST_HEADER
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const SLIST_HEADER = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Anonymous_e__Struct = extern struct {
        Next: Windows.Win32.Kernel.SINGLE_LIST_ENTRY,
        Depth: {"kind":"UInt16"},
        CpuId: {"kind":"UInt16"},
    };
};
// --------------------------------------------------------
// Type: RTL_RUN_ONCE
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const RTL_RUN_ONCE = *opaque{
};
// --------------------------------------------------------
// Type: RTL_BARRIER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RTL_BARRIER = extern struct {
    Reserved1: {"kind":"UInt32"},
    Reserved2: {"kind":"UInt32"},
    Reserved3: {"kind":"Array","child": {"kind":"UIntPtr"}},
    Reserved4: {"kind":"UInt32"},
    Reserved5: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: RTL_UMS_THREAD_INFO_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RTL_UMS_THREAD_INFO_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: RTL_UMS_SCHEDULER_REASON
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RTL_UMS_SCHEDULER_REASON = *opaque{
};
// --------------------------------------------------------
// Type: RTL_UMS_SCHEDULER_ENTRY_POINT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RTL_UMS_SCHEDULER_ENTRY_POINT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PRTL_UMS_SCHEDULER_ENTRY_POINT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PRTL_UMS_SCHEDULER_ENTRY_POINT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: OS_DEPLOYEMENT_STATE_VALUES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OS_DEPLOYEMENT_STATE_VALUES = *opaque{
};
// --------------------------------------------------------
// Type: NV_MEMORY_RANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NV_MEMORY_RANGE = extern struct {
    BaseAddress: {"kind""Ptr","child":{"kind":"Void"}},
    Length: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: CORRELATION_VECTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CORRELATION_VECTOR = extern struct {
    Version: {"kind":"SByte"},
    Vector: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG = extern struct {
    Size: {"kind":"UInt32"},
    TriggerId: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: IMAGE_POLICY_ENTRY_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IMAGE_POLICY_ENTRY_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IMAGE_POLICY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IMAGE_POLICY_ID = *opaque{
};
// --------------------------------------------------------
// Type: IMAGE_POLICY_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_POLICY_ENTRY = extern struct {
    Type: Windows.Win32.SystemServices.IMAGE_POLICY_ENTRY_TYPE,
    PolicyId: Windows.Win32.SystemServices.IMAGE_POLICY_ID,
    u: Windows.Win32.SystemServices.IMAGE_POLICY_ENTRY+_u_e__Union,
    // --------------------------------------------------------
    // Type: _u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IMAGE_POLICY_METADATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_POLICY_METADATA = extern struct {
    Version: {"kind":"Byte"},
    Reserved0: {"kind":"Array","child": {"kind":"Byte"}},
    ApplicationId: {"kind":"UInt64"},
    Policies: Windows.Win32.SystemServices.IMAGE_POLICY_ENTRY,
};
// --------------------------------------------------------
// Type: RTL_CRITICAL_SECTION_DEBUG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RTL_CRITICAL_SECTION_DEBUG = extern struct {
    Type: {"kind":"UInt16"},
    CreatorBackTraceIndex: {"kind":"UInt16"},
    CriticalSection: {"kind""Ptr","child":Windows.Win32.SystemServices.RTL_CRITICAL_SECTION},
    ProcessLocksList: Windows.Win32.Kernel.LIST_ENTRY,
    EntryCount: {"kind":"UInt32"},
    ContentionCount: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    CreatorBackTraceIndexHigh: {"kind":"UInt16"},
    SpareWORD: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: RTL_CRITICAL_SECTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RTL_CRITICAL_SECTION = extern struct {
    DebugInfo: {"kind""Ptr","child":Windows.Win32.SystemServices.RTL_CRITICAL_SECTION_DEBUG},
    LockCount: {"kind":"Int32"},
    RecursionCount: {"kind":"Int32"},
    OwningThread: Windows.Win32.SystemServices.HANDLE,
    LockSemaphore: Windows.Win32.SystemServices.HANDLE,
    SpinCount: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: RTL_SRWLOCK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RTL_SRWLOCK = extern struct {
    Ptr: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: RTL_CONDITION_VARIABLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RTL_CONDITION_VARIABLE = extern struct {
    Ptr: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: PAPCFUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PAPCFUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: HEAP_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HEAP_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: HEAP_OPTIMIZE_RESOURCES_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HEAP_OPTIMIZE_RESOURCES_INFORMATION = extern struct {
    Version: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: WAITORTIMERCALLBACKFUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WAITORTIMERCALLBACKFUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WORKERCALLBACKFUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WORKERCALLBACKFUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: APC_CALLBACK_FUNCTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const APC_CALLBACK_FUNCTION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WAITORTIMERCALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WAITORTIMERCALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFLS_CALLBACK_FUNCTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFLS_CALLBACK_FUNCTION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PSECURE_MEMORY_CACHE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PSECURE_MEMORY_CACHE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ACTIVATION_CONTEXT_INFO_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ACTIVATION_CONTEXT_INFO_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: SUPPORTED_OS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SUPPORTED_OS_INFO = extern struct {
    MajorVersion: {"kind":"UInt16"},
    MinorVersion: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: MAXVERSIONTESTED_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MAXVERSIONTESTED_INFO = extern struct {
    MaxVersionTested: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: EVENTLOGRECORD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EVENTLOGRECORD = extern struct {
    Length: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
    RecordNumber: {"kind":"UInt32"},
    TimeGenerated: {"kind":"UInt32"},
    TimeWritten: {"kind":"UInt32"},
    EventID: {"kind":"UInt32"},
    EventType: {"kind":"UInt16"},
    NumStrings: {"kind":"UInt16"},
    EventCategory: {"kind":"UInt16"},
    ReservedFlags: {"kind":"UInt16"},
    ClosingRecordNumber: {"kind":"UInt32"},
    StringOffset: {"kind":"UInt32"},
    UserSidLength: {"kind":"UInt32"},
    UserSidOffset: {"kind":"UInt32"},
    DataLength: {"kind":"UInt32"},
    DataOffset: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: EVENTSFORLOGFILE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EVENTSFORLOGFILE = extern struct {
    ulSize: {"kind":"UInt32"},
    szLogicalLogFile: {"kind":"Array","child": {"kind":"UInt16"}},
    ulNumRecords: {"kind":"UInt32"},
    pEventLogRecords: Windows.Win32.SystemServices.EVENTLOGRECORD,
};
// --------------------------------------------------------
// Type: PACKEDEVENTINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PACKEDEVENTINFO = extern struct {
    ulSize: {"kind":"UInt32"},
    ulNumEventsForLogFile: {"kind":"UInt32"},
    ulOffsets: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CM_SERVICE_NODE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CM_SERVICE_NODE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: CM_SERVICE_LOAD_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CM_SERVICE_LOAD_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: CM_ERROR_CONTROL_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CM_ERROR_CONTROL_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: TAPE_ERASE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TAPE_ERASE = extern struct {
    Type: {"kind":"UInt32"},
    Immediate: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: TAPE_PREPARE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TAPE_PREPARE = extern struct {
    Operation: {"kind":"UInt32"},
    Immediate: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: TAPE_WRITE_MARKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TAPE_WRITE_MARKS = extern struct {
    Type: {"kind":"UInt32"},
    Count: {"kind":"UInt32"},
    Immediate: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: TAPE_GET_POSITION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TAPE_GET_POSITION = extern struct {
    Type: {"kind":"UInt32"},
    Partition: {"kind":"UInt32"},
    Offset: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: TAPE_SET_POSITION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TAPE_SET_POSITION = extern struct {
    Method: {"kind":"UInt32"},
    Partition: {"kind":"UInt32"},
    Offset: Windows.Win32.SystemServices.LARGE_INTEGER,
    Immediate: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: TAPE_GET_DRIVE_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TAPE_GET_DRIVE_PARAMETERS = extern struct {
    ECC: {"kind":"Byte"},
    Compression: {"kind":"Byte"},
    DataPadding: {"kind":"Byte"},
    ReportSetmarks: {"kind":"Byte"},
    DefaultBlockSize: {"kind":"UInt32"},
    MaximumBlockSize: {"kind":"UInt32"},
    MinimumBlockSize: {"kind":"UInt32"},
    MaximumPartitionCount: {"kind":"UInt32"},
    FeaturesLow: {"kind":"UInt32"},
    FeaturesHigh: {"kind":"UInt32"},
    EOTWarningZoneSize: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: TAPE_SET_DRIVE_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TAPE_SET_DRIVE_PARAMETERS = extern struct {
    ECC: {"kind":"Byte"},
    Compression: {"kind":"Byte"},
    DataPadding: {"kind":"Byte"},
    ReportSetmarks: {"kind":"Byte"},
    EOTWarningZoneSize: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: TAPE_GET_MEDIA_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TAPE_GET_MEDIA_PARAMETERS = extern struct {
    Capacity: Windows.Win32.SystemServices.LARGE_INTEGER,
    Remaining: Windows.Win32.SystemServices.LARGE_INTEGER,
    BlockSize: {"kind":"UInt32"},
    PartitionCount: {"kind":"UInt32"},
    WriteProtected: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: TAPE_SET_MEDIA_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TAPE_SET_MEDIA_PARAMETERS = extern struct {
    BlockSize: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: TAPE_CREATE_PARTITION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TAPE_CREATE_PARTITION = extern struct {
    Method: {"kind":"UInt32"},
    Count: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: TAPE_WMI_OPERATIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TAPE_WMI_OPERATIONS = extern struct {
    Method: {"kind":"UInt32"},
    DataBufferSize: {"kind":"UInt32"},
    DataBuffer: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: TAPE_DRIVE_PROBLEM_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TAPE_DRIVE_PROBLEM_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: TRANSACTION_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TRANSACTION_STATE = *opaque{
};
// --------------------------------------------------------
// Type: TRANSACTION_BASIC_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRANSACTION_BASIC_INFORMATION = extern struct {
    TransactionId: Guid,
    State: {"kind":"UInt32"},
    Outcome: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: TRANSACTIONMANAGER_BASIC_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRANSACTIONMANAGER_BASIC_INFORMATION = extern struct {
    TmIdentity: Guid,
    VirtualClock: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: TRANSACTIONMANAGER_LOG_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRANSACTIONMANAGER_LOG_INFORMATION = extern struct {
    LogIdentity: Guid,
};
// --------------------------------------------------------
// Type: TRANSACTIONMANAGER_LOGPATH_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRANSACTIONMANAGER_LOGPATH_INFORMATION = extern struct {
    LogPathLength: {"kind":"UInt32"},
    LogPath: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: TRANSACTIONMANAGER_RECOVERY_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRANSACTIONMANAGER_RECOVERY_INFORMATION = extern struct {
    LastRecoveredLsn: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: TRANSACTIONMANAGER_OLDEST_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRANSACTIONMANAGER_OLDEST_INFORMATION = extern struct {
    OldestTransactionGuid: Guid,
};
// --------------------------------------------------------
// Type: TRANSACTION_PROPERTIES_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRANSACTION_PROPERTIES_INFORMATION = extern struct {
    IsolationLevel: {"kind":"UInt32"},
    IsolationFlags: {"kind":"UInt32"},
    Timeout: Windows.Win32.SystemServices.LARGE_INTEGER,
    Outcome: {"kind":"UInt32"},
    DescriptionLength: {"kind":"UInt32"},
    Description: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: TRANSACTION_BIND_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRANSACTION_BIND_INFORMATION = extern struct {
    TmHandle: Windows.Win32.SystemServices.HANDLE,
};
// --------------------------------------------------------
// Type: TRANSACTION_ENLISTMENT_PAIR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRANSACTION_ENLISTMENT_PAIR = extern struct {
    EnlistmentId: Guid,
    ResourceManagerId: Guid,
};
// --------------------------------------------------------
// Type: TRANSACTION_ENLISTMENTS_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRANSACTION_ENLISTMENTS_INFORMATION = extern struct {
    NumberOfEnlistments: {"kind":"UInt32"},
    EnlistmentPair: {"kind":"Array","child": Windows.Win32.SystemServices.TRANSACTION_ENLISTMENT_PAIR},
};
// --------------------------------------------------------
// Type: TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION = extern struct {
    SuperiorEnlistmentPair: Windows.Win32.SystemServices.TRANSACTION_ENLISTMENT_PAIR,
};
// --------------------------------------------------------
// Type: RESOURCEMANAGER_BASIC_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RESOURCEMANAGER_BASIC_INFORMATION = extern struct {
    ResourceManagerId: Guid,
    DescriptionLength: {"kind":"UInt32"},
    Description: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: RESOURCEMANAGER_COMPLETION_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RESOURCEMANAGER_COMPLETION_INFORMATION = extern struct {
    IoCompletionPortHandle: Windows.Win32.SystemServices.HANDLE,
    CompletionKey: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: TRANSACTION_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TRANSACTION_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: TRANSACTIONMANAGER_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TRANSACTIONMANAGER_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: RESOURCEMANAGER_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RESOURCEMANAGER_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: ENLISTMENT_BASIC_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENLISTMENT_BASIC_INFORMATION = extern struct {
    EnlistmentId: Guid,
    TransactionId: Guid,
    ResourceManagerId: Guid,
};
// --------------------------------------------------------
// Type: ENLISTMENT_CRM_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENLISTMENT_CRM_INFORMATION = extern struct {
    CrmTransactionManagerId: Guid,
    CrmResourceManagerId: Guid,
    CrmEnlistmentId: Guid,
};
// --------------------------------------------------------
// Type: ENLISTMENT_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ENLISTMENT_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: TRANSACTION_LIST_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRANSACTION_LIST_ENTRY = extern struct {
    UOW: Guid,
};
// --------------------------------------------------------
// Type: TRANSACTION_LIST_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRANSACTION_LIST_INFORMATION = extern struct {
    NumberOfTransactions: {"kind":"UInt32"},
    TransactionInformation: {"kind":"Array","child": Windows.Win32.SystemServices.TRANSACTION_LIST_ENTRY},
};
// --------------------------------------------------------
// Type: KTMOBJECT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KTMOBJECT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: KTMOBJECT_CURSOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KTMOBJECT_CURSOR = extern struct {
    LastQuery: Guid,
    ObjectIdCount: {"kind":"UInt32"},
    ObjectIds: {"kind":"Array","child": Guid},
};
// --------------------------------------------------------
// Type: TP_CALLBACK_INSTANCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const TP_CALLBACK_INSTANCE = opaque {
};
// --------------------------------------------------------
// Type: PTP_SIMPLE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PTP_SIMPLE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: TP_POOL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const TP_POOL = opaque {
};
// --------------------------------------------------------
// Type: TP_CALLBACK_PRIORITY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TP_CALLBACK_PRIORITY = *opaque{
};
// --------------------------------------------------------
// Type: TP_POOL_STACK_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TP_POOL_STACK_INFORMATION = extern struct {
    StackReserve: {"kind":"UIntPtr"},
    StackCommit: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: TP_CLEANUP_GROUP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const TP_CLEANUP_GROUP = opaque {
};
// --------------------------------------------------------
// Type: PTP_CLEANUP_GROUP_CANCEL_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PTP_CLEANUP_GROUP_CANCEL_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: TP_CALLBACK_ENVIRON_V3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TP_CALLBACK_ENVIRON_V3 = extern struct {
    Version: {"kind":"UInt32"},
    Pool: Windows.Win32.SystemServices.PTP_POOL,
    CleanupGroup: {"kind":"IntPtr"},
    CleanupGroupCancelCallback: Windows.Win32.SystemServices.PTP_CLEANUP_GROUP_CANCEL_CALLBACK,
    RaceDll: {"kind""Ptr","child":{"kind":"Void"}},
    ActivationContext: {"kind":"IntPtr"},
    FinalizationCallback: Windows.Win32.SystemServices.PTP_SIMPLE_CALLBACK,
    u: Windows.Win32.SystemServices.TP_CALLBACK_ENVIRON_V3+_u_e__Union,
    CallbackPriority: Windows.Win32.SystemServices.TP_CALLBACK_PRIORITY,
    Size: {"kind":"UInt32"},
    // --------------------------------------------------------
    // Type: _u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _s_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _s_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
    // --------------------------------------------------------
    // Type: _ACTIVATION_CONTEXT
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    // a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
    pub const _ACTIVATION_CONTEXT = opaque {
    };
};
// --------------------------------------------------------
// Type: TP_WORK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const TP_WORK = opaque {
};
// --------------------------------------------------------
// Type: PTP_WORK_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PTP_WORK_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: TP_TIMER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const TP_TIMER = opaque {
};
// --------------------------------------------------------
// Type: PTP_TIMER_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PTP_TIMER_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: TP_WAIT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const TP_WAIT = opaque {
};
// --------------------------------------------------------
// Type: PTP_WAIT_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PTP_WAIT_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: TP_IO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const TP_IO = opaque {
};
// --------------------------------------------------------
// Type: TEB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const TEB = opaque {
};
// --------------------------------------------------------
// Type: FARPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FARPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: NEARPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NEARPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: HKEY__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HKEY__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HMETAFILE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HMETAFILE__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HINSTANCE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HINSTANCE__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HRGN__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HRGN__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HRSRC__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HRSRC__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HSPRITE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HSPRITE__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HLSURF__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HLSURF__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HSTR__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HSTR__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HTASK__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HTASK__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HWINSTA__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HWINSTA__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HKL__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HKL__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HWND__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HWND__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HHOOK__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HHOOK__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HACCEL__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HACCEL__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HBITMAP__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HBITMAP__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HBRUSH__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HBRUSH__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HCOLORSPACE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HCOLORSPACE__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HDC__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HDC__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HGLRC__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HGLRC__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HDESK__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HDESK__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HENHMETAFILE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HENHMETAFILE__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HFONT__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HFONT__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HICON__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HICON__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HMENU__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HMENU__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HPALETTE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HPALETTE__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HPEN__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HPEN__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HWINEVENTHOOK__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HWINEVENTHOOK__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HMONITOR__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HMONITOR__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HUMPD__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HUMPD__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: APP_LOCAL_DEVICE_ID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const APP_LOCAL_DEVICE_ID = extern struct {
    value: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: DPI_AWARENESS_CONTEXT__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DPI_AWARENESS_CONTEXT__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: PINIT_ONCE_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PINIT_ONCE_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PTIMERAPCROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PTIMERAPCROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PTP_WIN32_IO_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PTP_WIN32_IO_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: JOBOBJECT_IO_RATE_CONTROL_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const JOBOBJECT_IO_RATE_CONTROL_INFORMATION = extern struct {
    MaxIops: {"kind":"Int64"},
    MaxBandwidth: {"kind":"Int64"},
    ReservationIops: {"kind":"Int64"},
    VolumeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    BaseIoSize: {"kind":"UInt32"},
    ControlFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SECURITY_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECURITY_ATTRIBUTES = extern struct {
    nLength: {"kind":"UInt32"},
    lpSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    bInheritHandle: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: OVERLAPPED
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OVERLAPPED = extern struct {
    Internal: {"kind":"UIntPtr"},
    InternalHigh: {"kind":"UIntPtr"},
    Anonymous: Windows.Win32.SystemServices.OVERLAPPED+_Anonymous_e__Union,
    hEvent: Windows.Win32.SystemServices.HANDLE,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            Offset: {"kind":"UInt32"},
            OffsetHigh: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: PROCESS_HEAP_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESS_HEAP_ENTRY = extern struct {
    lpData: {"kind""Ptr","child":{"kind":"Void"}},
    cbData: {"kind":"UInt32"},
    cbOverhead: {"kind":"Byte"},
    iRegionIndex: {"kind":"Byte"},
    wFlags: {"kind":"UInt16"},
    Anonymous: Windows.Win32.SystemServices.PROCESS_HEAP_ENTRY+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Region_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Region_e__Struct = extern struct {
            dwCommittedSize: {"kind":"UInt32"},
            dwUnCommittedSize: {"kind":"UInt32"},
            lpFirstBlock: {"kind""Ptr","child":{"kind":"Void"}},
            lpLastBlock: {"kind""Ptr","child":{"kind":"Void"}},
        };
        // --------------------------------------------------------
        // Type: _Block_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Block_e__Struct = extern struct {
            hMem: Windows.Win32.SystemServices.HANDLE,
            dwReserved: {"kind":"Array","child": {"kind":"UInt32"}},
        };
    };
};
// --------------------------------------------------------
// Type: REASON_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const REASON_CONTEXT = extern struct {
    Version: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    Reason: Windows.Win32.SystemServices.REASON_CONTEXT+_Reason_e__Union,
    // --------------------------------------------------------
    // Type: _Reason_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Reason_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Detailed_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Detailed_e__Struct = extern struct {
            LocalizedReasonModule: {"kind":"IntPtr"},
            LocalizedReasonId: {"kind":"UInt32"},
            ReasonStringCount: {"kind":"UInt32"},
            ReasonStrings: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
        };
    };
};
// --------------------------------------------------------
// Type: PTHREAD_START_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PTHREAD_START_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPTHREAD_START_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPTHREAD_START_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PENCLAVE_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PENCLAVE_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPENCLAVE_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPENCLAVE_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: HEAP_SUMMARY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HEAP_SUMMARY = extern struct {
    cb: {"kind":"UInt32"},
    cbAllocated: {"kind":"UIntPtr"},
    cbCommitted: {"kind":"UIntPtr"},
    cbReserved: {"kind":"UIntPtr"},
    cbMaxReserve: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: MEMORY_RESOURCE_NOTIFICATION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MEMORY_RESOURCE_NOTIFICATION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WIN32_MEMORY_RANGE_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WIN32_MEMORY_RANGE_ENTRY = extern struct {
    VirtualAddress: {"kind""Ptr","child":{"kind":"Void"}},
    NumberOfBytes: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: BAD_MEMORY_CALLBACK_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BAD_MEMORY_CALLBACK_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PBAD_MEMORY_CALLBACK_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PBAD_MEMORY_CALLBACK_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: OFFER_PRIORITY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OFFER_PRIORITY = *opaque{
};
// --------------------------------------------------------
// Type: WIN32_MEMORY_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WIN32_MEMORY_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: WIN32_MEMORY_REGION_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WIN32_MEMORY_REGION_INFORMATION = extern struct {
    AllocationBase: {"kind""Ptr","child":{"kind":"Void"}},
    AllocationProtect: {"kind":"UInt32"},
    Anonymous: Windows.Win32.SystemServices.WIN32_MEMORY_REGION_INFORMATION+_Anonymous_e__Union,
    RegionSize: {"kind":"UIntPtr"},
    CommitSize: {"kind":"UIntPtr"},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: ENUMUILANG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENUMUILANG = extern struct {
    NumOfEnumUILang: {"kind":"UInt32"},
    SizeOfEnumUIBuffer: {"kind":"UInt32"},
    pEnumUIBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: ENUMRESLANGPROCA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ENUMRESLANGPROCA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ENUMRESLANGPROCW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ENUMRESLANGPROCW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PGET_MODULE_HANDLE_EXA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PGET_MODULE_HANDLE_EXA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PGET_MODULE_HANDLE_EXW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PGET_MODULE_HANDLE_EXW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: REDIRECTION_FUNCTION_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const REDIRECTION_FUNCTION_DESCRIPTOR = extern struct {
    DllName: {"kind""Ptr","child":{"kind":"SByte"}},
    FunctionName: {"kind""Ptr","child":{"kind":"SByte"}},
    RedirectionTarget: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: REDIRECTION_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const REDIRECTION_DESCRIPTOR = extern struct {
    Version: {"kind":"UInt32"},
    FunctionCount: {"kind":"UInt32"},
    Redirections: {"kind""Ptr","child":Windows.Win32.SystemServices.REDIRECTION_FUNCTION_DESCRIPTOR},
};
// --------------------------------------------------------
// Type: COORD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COORD = extern struct {
    X: {"kind":"Int16"},
    Y: {"kind":"Int16"},
};
// --------------------------------------------------------
// Type: SMALL_RECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SMALL_RECT = extern struct {
    Left: {"kind":"Int16"},
    Top: {"kind":"Int16"},
    Right: {"kind":"Int16"},
    Bottom: {"kind":"Int16"},
};
// --------------------------------------------------------
// Type: KEY_EVENT_RECORD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KEY_EVENT_RECORD = extern struct {
    bKeyDown: Windows.Win32.SystemServices.BOOL,
    wRepeatCount: {"kind":"UInt16"},
    wVirtualKeyCode: {"kind":"UInt16"},
    wVirtualScanCode: {"kind":"UInt16"},
    uChar: Windows.Win32.SystemServices.KEY_EVENT_RECORD+_uChar_e__Union,
    dwControlKeyState: {"kind":"UInt32"},
    // --------------------------------------------------------
    // Type: _uChar_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _uChar_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: MOUSE_EVENT_RECORD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MOUSE_EVENT_RECORD = extern struct {
    dwMousePosition: Windows.Win32.SystemServices.COORD,
    dwButtonState: {"kind":"UInt32"},
    dwControlKeyState: {"kind":"UInt32"},
    dwEventFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: WINDOW_BUFFER_SIZE_RECORD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WINDOW_BUFFER_SIZE_RECORD = extern struct {
    dwSize: Windows.Win32.SystemServices.COORD,
};
// --------------------------------------------------------
// Type: MENU_EVENT_RECORD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MENU_EVENT_RECORD = extern struct {
    dwCommandId: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: FOCUS_EVENT_RECORD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FOCUS_EVENT_RECORD = extern struct {
    bSetFocus: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: INPUT_RECORD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INPUT_RECORD = extern struct {
    EventType: {"kind":"UInt16"},
    Event: Windows.Win32.SystemServices.INPUT_RECORD+_Event_e__Union,
    // --------------------------------------------------------
    // Type: _Event_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Event_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CHAR_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CHAR_INFO = extern struct {
    Char: Windows.Win32.SystemServices.CHAR_INFO+_Char_e__Union,
    Attributes: {"kind":"UInt16"},
    // --------------------------------------------------------
    // Type: _Char_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Char_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CONSOLE_FONT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CONSOLE_FONT_INFO = extern struct {
    nFont: {"kind":"UInt32"},
    dwFontSize: Windows.Win32.SystemServices.COORD,
};
// --------------------------------------------------------
// Type: CONSOLE_READCONSOLE_CONTROL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CONSOLE_READCONSOLE_CONTROL = extern struct {
    nLength: {"kind":"UInt32"},
    nInitialChars: {"kind":"UInt32"},
    dwCtrlWakeupMask: {"kind":"UInt32"},
    dwControlKeyState: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PHANDLER_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PHANDLER_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CONSOLE_CURSOR_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CONSOLE_CURSOR_INFO = extern struct {
    dwSize: {"kind":"UInt32"},
    bVisible: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: CONSOLE_SCREEN_BUFFER_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CONSOLE_SCREEN_BUFFER_INFO = extern struct {
    dwSize: Windows.Win32.SystemServices.COORD,
    dwCursorPosition: Windows.Win32.SystemServices.COORD,
    wAttributes: {"kind":"UInt16"},
    srWindow: Windows.Win32.SystemServices.SMALL_RECT,
    dwMaximumWindowSize: Windows.Win32.SystemServices.COORD,
};
// --------------------------------------------------------
// Type: CONSOLE_SCREEN_BUFFER_INFOEX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CONSOLE_SCREEN_BUFFER_INFOEX = extern struct {
    cbSize: {"kind":"UInt32"},
    dwSize: Windows.Win32.SystemServices.COORD,
    dwCursorPosition: Windows.Win32.SystemServices.COORD,
    wAttributes: {"kind":"UInt16"},
    srWindow: Windows.Win32.SystemServices.SMALL_RECT,
    dwMaximumWindowSize: Windows.Win32.SystemServices.COORD,
    wPopupAttributes: {"kind":"UInt16"},
    bFullscreenSupported: Windows.Win32.SystemServices.BOOL,
    ColorTable: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: CONSOLE_FONT_INFOEX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CONSOLE_FONT_INFOEX = extern struct {
    cbSize: {"kind":"UInt32"},
    nFont: {"kind":"UInt32"},
    dwFontSize: Windows.Win32.SystemServices.COORD,
    FontFamily: {"kind":"UInt32"},
    FontWeight: {"kind":"UInt32"},
    FaceName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: CONSOLE_SELECTION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CONSOLE_SELECTION_INFO = extern struct {
    dwFlags: {"kind":"UInt32"},
    dwSelectionAnchor: Windows.Win32.SystemServices.COORD,
    srSelection: Windows.Win32.SystemServices.SMALL_RECT,
};
// --------------------------------------------------------
// Type: CONSOLE_HISTORY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CONSOLE_HISTORY_INFO = extern struct {
    cbSize: {"kind":"UInt32"},
    HistoryBufferSize: {"kind":"UInt32"},
    NumberOfHistoryBuffers: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: TIMECALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TIMECALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPTIMECALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPTIMECALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PM_OPEN_PROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PM_OPEN_PROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PM_QUERY_PROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PM_QUERY_PROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RPC_IMPORT_CONTEXT_P
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_IMPORT_CONTEXT_P = extern struct {
    LookupContext: {"kind""Ptr","child":{"kind":"Void"}},
    ProposedHandle: {"kind""Ptr","child":{"kind":"Void"}},
    Bindings: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_BINDING_VECTOR},
};
// --------------------------------------------------------
// Type: RemHGLOBAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RemHGLOBAL = extern struct {
    fNullHGlobal: {"kind":"Int32"},
    cbData: {"kind":"UInt32"},
    data: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: RemHMETAFILEPICT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RemHMETAFILEPICT = extern struct {
    mm: {"kind":"Int32"},
    xExt: {"kind":"Int32"},
    yExt: {"kind":"Int32"},
    cbData: {"kind":"UInt32"},
    data: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: RemHENHMETAFILE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RemHENHMETAFILE = extern struct {
    cbData: {"kind":"UInt32"},
    data: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: RemHBITMAP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RemHBITMAP = extern struct {
    cbData: {"kind":"UInt32"},
    data: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: RemHPALETTE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RemHPALETTE = extern struct {
    cbData: {"kind":"UInt32"},
    data: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: RemBRUSH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RemBRUSH = extern struct {
    cbData: {"kind":"UInt32"},
    data: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: userCLIPFORMAT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const userCLIPFORMAT = extern struct {
    fContext: {"kind":"Int32"},
    u: Windows.Win32.SystemServices.userCLIPFORMAT+_u_e__Struct,
    // --------------------------------------------------------
    // Type: _u_e__Struct
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Struct = *opaque{
    };
};
// --------------------------------------------------------
// Type: GDI_NONREMOTE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GDI_NONREMOTE = extern struct {
    fContext: {"kind":"Int32"},
    u: Windows.Win32.SystemServices.GDI_NONREMOTE+_u_e__Struct,
    // --------------------------------------------------------
    // Type: _u_e__Struct
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Struct = *opaque{
    };
};
// --------------------------------------------------------
// Type: userHGLOBAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const userHGLOBAL = extern struct {
    fContext: {"kind":"Int32"},
    u: Windows.Win32.SystemServices.userHGLOBAL+_u_e__Struct,
    // --------------------------------------------------------
    // Type: _u_e__Struct
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Struct = *opaque{
    };
};
// --------------------------------------------------------
// Type: userHMETAFILE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const userHMETAFILE = extern struct {
    fContext: {"kind":"Int32"},
    u: Windows.Win32.SystemServices.userHMETAFILE+_u_e__Struct,
    // --------------------------------------------------------
    // Type: _u_e__Struct
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Struct = *opaque{
    };
};
// --------------------------------------------------------
// Type: remoteMETAFILEPICT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const remoteMETAFILEPICT = extern struct {
    mm: {"kind":"Int32"},
    xExt: {"kind":"Int32"},
    yExt: {"kind":"Int32"},
    hMF: {"kind""Ptr","child":Windows.Win32.SystemServices.userHMETAFILE},
};
// --------------------------------------------------------
// Type: userHMETAFILEPICT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const userHMETAFILEPICT = extern struct {
    fContext: {"kind":"Int32"},
    u: Windows.Win32.SystemServices.userHMETAFILEPICT+_u_e__Struct,
    // --------------------------------------------------------
    // Type: _u_e__Struct
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Struct = *opaque{
    };
};
// --------------------------------------------------------
// Type: userHENHMETAFILE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const userHENHMETAFILE = extern struct {
    fContext: {"kind":"Int32"},
    u: Windows.Win32.SystemServices.userHENHMETAFILE+_u_e__Struct,
    // --------------------------------------------------------
    // Type: _u_e__Struct
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Struct = *opaque{
    };
};
// --------------------------------------------------------
// Type: userBITMAP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const userBITMAP = extern struct {
    bmType: {"kind":"Int32"},
    bmWidth: {"kind":"Int32"},
    bmHeight: {"kind":"Int32"},
    bmWidthBytes: {"kind":"Int32"},
    bmPlanes: {"kind":"UInt16"},
    bmBitsPixel: {"kind":"UInt16"},
    cbSize: {"kind":"UInt32"},
    pBuffer: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: userHBITMAP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const userHBITMAP = extern struct {
    fContext: {"kind":"Int32"},
    u: Windows.Win32.SystemServices.userHBITMAP+_u_e__Struct,
    // --------------------------------------------------------
    // Type: _u_e__Struct
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Struct = *opaque{
    };
};
// --------------------------------------------------------
// Type: userHPALETTE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const userHPALETTE = extern struct {
    fContext: {"kind":"Int32"},
    u: Windows.Win32.SystemServices.userHPALETTE+_u_e__Struct,
    // --------------------------------------------------------
    // Type: _u_e__Struct
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Struct = *opaque{
    };
};
// --------------------------------------------------------
// Type: RemotableHandle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RemotableHandle = extern struct {
    fContext: {"kind":"Int32"},
    u: Windows.Win32.SystemServices.RemotableHandle+_u_e__Struct,
    // --------------------------------------------------------
    // Type: _u_e__Struct
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Struct = *opaque{
    };
};
// --------------------------------------------------------
// Type: CY
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const CY = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Anonymous_e__Struct = extern struct {
        Lo: {"kind":"UInt32"},
        Hi: {"kind":"Int32"},
    };
};
// --------------------------------------------------------
// Type: DECIMAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DECIMAL = extern struct {
    wReserved: {"kind":"UInt16"},
    Anonymous1: Windows.Win32.SystemServices.DECIMAL+_Anonymous1_e__Union,
    Hi32: {"kind":"UInt32"},
    Anonymous2: Windows.Win32.SystemServices.DECIMAL+_Anonymous2_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            Lo32: {"kind":"UInt32"},
            Mid32: {"kind":"UInt32"},
        };
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            scale: {"kind":"Byte"},
            sign: {"kind":"Byte"},
        };
    };
};
// --------------------------------------------------------
// Type: BSTRBLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BSTRBLOB = extern struct {
    cbSize: {"kind":"UInt32"},
    pData: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: CLIPDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLIPDATA = extern struct {
    cbSize: {"kind":"UInt32"},
    ulClipFmt: {"kind":"Int32"},
    pClipData: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: uCLSSPEC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const uCLSSPEC = extern struct {
    tyspec: {"kind":"UInt32"},
    tagged_union: Windows.Win32.SystemServices.uCLSSPEC+_tagged_union_e__Struct,
    // --------------------------------------------------------
    // Type: _tagged_union_e__Struct
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _tagged_union_e__Struct = *opaque{
        // --------------------------------------------------------
        // Type: _ByName_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _ByName_e__Struct = extern struct {
            pPackageName: {"kind""Ptr","child":{"kind":"UInt16"}},
            PolicyId: Guid,
        };
        // --------------------------------------------------------
        // Type: _ByObjectId_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _ByObjectId_e__Struct = extern struct {
            ObjectId: Guid,
            PolicyId: Guid,
        };
    };
};
// --------------------------------------------------------
// Type: STORAGE_HOTPLUG_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_HOTPLUG_INFO = extern struct {
    Size: {"kind":"UInt32"},
    MediaRemovable: {"kind":"Byte"},
    MediaHotplug: {"kind":"Byte"},
    DeviceHotplug: {"kind":"Byte"},
    WriteCacheEnableOverride: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: STORAGE_DEVICE_NUMBER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_DEVICE_NUMBER = extern struct {
    DeviceType: {"kind":"UInt32"},
    DeviceNumber: {"kind":"UInt32"},
    PartitionNumber: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: STORAGE_DEVICE_NUMBERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_DEVICE_NUMBERS = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    NumberOfDevices: {"kind":"UInt32"},
    Devices: {"kind":"Array","child": Windows.Win32.SystemServices.STORAGE_DEVICE_NUMBER},
};
// --------------------------------------------------------
// Type: STORAGE_DEVICE_NUMBER_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_DEVICE_NUMBER_EX = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    DeviceType: {"kind":"UInt32"},
    DeviceNumber: {"kind":"UInt32"},
    DeviceGuid: Guid,
    PartitionNumber: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: STORAGE_BUS_RESET_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_BUS_RESET_REQUEST = extern struct {
    PathId: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: STORAGE_BREAK_RESERVATION_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_BREAK_RESERVATION_REQUEST = extern struct {
    Length: {"kind":"UInt32"},
    _unused: {"kind":"Byte"},
    PathId: {"kind":"Byte"},
    TargetId: {"kind":"Byte"},
    Lun: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: PREVENT_MEDIA_REMOVAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PREVENT_MEDIA_REMOVAL = extern struct {
    PreventMediaRemoval: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: CLASS_MEDIA_CHANGE_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLASS_MEDIA_CHANGE_CONTEXT = extern struct {
    MediaChangeCount: {"kind":"UInt32"},
    NewState: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: TAPE_STATISTICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TAPE_STATISTICS = extern struct {
    Version: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    RecoveredWrites: Windows.Win32.SystemServices.LARGE_INTEGER,
    UnrecoveredWrites: Windows.Win32.SystemServices.LARGE_INTEGER,
    RecoveredReads: Windows.Win32.SystemServices.LARGE_INTEGER,
    UnrecoveredReads: Windows.Win32.SystemServices.LARGE_INTEGER,
    CompressionRatioReads: {"kind":"Byte"},
    CompressionRatioWrites: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: TAPE_GET_STATISTICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TAPE_GET_STATISTICS = extern struct {
    Operation: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: STORAGE_MEDIA_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_MEDIA_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_BUS_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_BUS_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DEVICE_MEDIA_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_MEDIA_INFO = extern struct {
    DeviceSpecific: Windows.Win32.SystemServices.DEVICE_MEDIA_INFO+_DeviceSpecific_e__Union,
    // --------------------------------------------------------
    // Type: _DeviceSpecific_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _DeviceSpecific_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _TapeInfo_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _TapeInfo_e__Struct = extern struct {
            MediaType: Windows.Win32.SystemServices.STORAGE_MEDIA_TYPE,
            MediaCharacteristics: {"kind":"UInt32"},
            CurrentBlockSize: {"kind":"UInt32"},
            BusType: Windows.Win32.SystemServices.STORAGE_BUS_TYPE,
            BusSpecificData: Windows.Win32.SystemServices.DEVICE_MEDIA_INFO+_DeviceSpecific_e__Union+_TapeInfo_e__Struct+_BusSpecificData_e__Union,
            // --------------------------------------------------------
            // Type: _BusSpecificData_e__Union
            // TypeLayoutAttr: explicit
            // not generating the actual code for this type because it has an explicit layout
            pub const _BusSpecificData_e__Union = *opaque{
                // --------------------------------------------------------
                // Type: _ScsiInformation_e__Struct
                // TypeLayoutAttr: sequential
                // TODO: I think this is a struct, but not sure at this point, assuming it is for now
                pub const _ScsiInformation_e__Struct = extern struct {
                    MediumType: {"kind":"Byte"},
                    DensityCode: {"kind":"Byte"},
                };
            };
        };
        // --------------------------------------------------------
        // Type: _DiskInfo_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _DiskInfo_e__Struct = extern struct {
            Cylinders: Windows.Win32.SystemServices.LARGE_INTEGER,
            MediaType: Windows.Win32.SystemServices.STORAGE_MEDIA_TYPE,
            TracksPerCylinder: {"kind":"UInt32"},
            SectorsPerTrack: {"kind":"UInt32"},
            BytesPerSector: {"kind":"UInt32"},
            NumberMediaSides: {"kind":"UInt32"},
            MediaCharacteristics: {"kind":"UInt32"},
        };
        // --------------------------------------------------------
        // Type: _RemovableDiskInfo_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _RemovableDiskInfo_e__Struct = extern struct {
            Cylinders: Windows.Win32.SystemServices.LARGE_INTEGER,
            MediaType: Windows.Win32.SystemServices.STORAGE_MEDIA_TYPE,
            TracksPerCylinder: {"kind":"UInt32"},
            SectorsPerTrack: {"kind":"UInt32"},
            BytesPerSector: {"kind":"UInt32"},
            NumberMediaSides: {"kind":"UInt32"},
            MediaCharacteristics: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: GET_MEDIA_TYPES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GET_MEDIA_TYPES = extern struct {
    DeviceType: {"kind":"UInt32"},
    MediaInfoCount: {"kind":"UInt32"},
    MediaInfo: {"kind":"Array","child": Windows.Win32.SystemServices.DEVICE_MEDIA_INFO},
};
// --------------------------------------------------------
// Type: STORAGE_PREDICT_FAILURE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_PREDICT_FAILURE = extern struct {
    PredictFailure: {"kind":"UInt32"},
    VendorSpecific: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: STORAGE_FAILURE_PREDICTION_CONFIG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_FAILURE_PREDICTION_CONFIG = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Set: {"kind":"Byte"},
    Enabled: {"kind":"Byte"},
    Reserved: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: STORAGE_SET_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_SET_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_PROPERTY_SET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_PROPERTY_SET = extern struct {
    PropertyId: Windows.Win32.FileSystem.STORAGE_PROPERTY_ID,
    SetType: Windows.Win32.SystemServices.STORAGE_SET_TYPE,
    AdditionalParameters: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: STORAGE_IDENTIFIER_CODE_SET
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_IDENTIFIER_CODE_SET = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_IDENTIFIER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_IDENTIFIER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_ID_NAA_FORMAT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_ID_NAA_FORMAT = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_ASSOCIATION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_ASSOCIATION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_IDENTIFIER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_IDENTIFIER = extern struct {
    CodeSet: Windows.Win32.SystemServices.STORAGE_IDENTIFIER_CODE_SET,
    Type: Windows.Win32.SystemServices.STORAGE_IDENTIFIER_TYPE,
    IdentifierSize: {"kind":"UInt16"},
    NextOffset: {"kind":"UInt16"},
    Association: Windows.Win32.SystemServices.STORAGE_ASSOCIATION_TYPE,
    Identifier: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: STORAGE_LB_PROVISIONING_MAP_RESOURCES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_LB_PROVISIONING_MAP_RESOURCES = extern struct {
    Size: {"kind":"UInt32"},
    Version: {"kind":"UInt32"},
    _bitfield1: {"kind":"Byte"},
    Reserved1: {"kind":"Array","child": {"kind":"Byte"}},
    _bitfield2: {"kind":"Byte"},
    Reserved3: {"kind":"Array","child": {"kind":"Byte"}},
    AvailableMappingResources: {"kind":"UInt64"},
    UsedMappingResources: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: STORAGE_RPMB_FRAME_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_RPMB_FRAME_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_RPMB_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_RPMB_DESCRIPTOR = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    SizeInBytes: {"kind":"UInt32"},
    MaxReliableWriteSizeInBytes: {"kind":"UInt32"},
    FrameFormat: Windows.Win32.SystemServices.STORAGE_RPMB_FRAME_TYPE,
};
// --------------------------------------------------------
// Type: STORAGE_CRYPTO_ALGORITHM_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_CRYPTO_ALGORITHM_ID = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_CRYPTO_KEY_SIZE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_CRYPTO_KEY_SIZE = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_CRYPTO_CAPABILITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_CRYPTO_CAPABILITY = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    CryptoCapabilityIndex: {"kind":"UInt32"},
    AlgorithmId: Windows.Win32.SystemServices.STORAGE_CRYPTO_ALGORITHM_ID,
    KeySize: Windows.Win32.SystemServices.STORAGE_CRYPTO_KEY_SIZE,
    DataUnitSizeBitmask: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: STORAGE_CRYPTO_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_CRYPTO_DESCRIPTOR = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    NumKeysSupported: {"kind":"UInt32"},
    NumCryptoCapabilities: {"kind":"UInt32"},
    CryptoCapabilities: {"kind":"Array","child": Windows.Win32.SystemServices.STORAGE_CRYPTO_CAPABILITY},
};
// --------------------------------------------------------
// Type: STORAGE_TIER_MEDIA_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_TIER_MEDIA_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_TIER_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_TIER_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_TIER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_TIER = extern struct {
    Id: Guid,
    Name: {"kind":"Array","child": {"kind":"UInt16"}},
    Description: {"kind":"Array","child": {"kind":"UInt16"}},
    Flags: {"kind":"UInt64"},
    ProvisionedCapacity: {"kind":"UInt64"},
    MediaType: Windows.Win32.SystemServices.STORAGE_TIER_MEDIA_TYPE,
    Class: Windows.Win32.SystemServices.STORAGE_TIER_CLASS,
};
// --------------------------------------------------------
// Type: STORAGE_DEVICE_TIERING_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_DEVICE_TIERING_DESCRIPTOR = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    TotalNumberOfTiers: {"kind":"UInt32"},
    NumberOfTiersReturned: {"kind":"UInt32"},
    Tiers: {"kind":"Array","child": Windows.Win32.SystemServices.STORAGE_TIER},
};
// --------------------------------------------------------
// Type: STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    NumberOfFaultDomains: {"kind":"UInt32"},
    FaultDomainIds: {"kind":"Array","child": Guid},
};
// --------------------------------------------------------
// Type: STORAGE_PROTOCOL_UFS_DATA_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_PROTOCOL_UFS_DATA_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_PROTOCOL_SPECIFIC_DATA_EXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_PROTOCOL_SPECIFIC_DATA_EXT = extern struct {
    ProtocolType: Windows.Win32.FileSystem.STORAGE_PROTOCOL_TYPE,
    DataType: {"kind":"UInt32"},
    ProtocolDataValue: {"kind":"UInt32"},
    ProtocolDataSubValue: {"kind":"UInt32"},
    ProtocolDataOffset: {"kind":"UInt32"},
    ProtocolDataLength: {"kind":"UInt32"},
    FixedProtocolReturnData: {"kind":"UInt32"},
    ProtocolDataSubValue2: {"kind":"UInt32"},
    ProtocolDataSubValue3: {"kind":"UInt32"},
    ProtocolDataSubValue4: {"kind":"UInt32"},
    ProtocolDataSubValue5: {"kind":"UInt32"},
    Reserved: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: STORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    ProtocolSpecificData: Windows.Win32.SystemServices.STORAGE_PROTOCOL_SPECIFIC_DATA_EXT,
};
// --------------------------------------------------------
// Type: STORAGE_DISK_HEALTH_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_DISK_HEALTH_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_DISK_OPERATIONAL_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_DISK_OPERATIONAL_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_OPERATIONAL_STATUS_REASON
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_OPERATIONAL_STATUS_REASON = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_OPERATIONAL_REASON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_OPERATIONAL_REASON = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Reason: Windows.Win32.SystemServices.STORAGE_OPERATIONAL_STATUS_REASON,
    RawBytes: Windows.Win32.SystemServices.STORAGE_OPERATIONAL_REASON+_RawBytes_e__Union,
    // --------------------------------------------------------
    // Type: _RawBytes_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _RawBytes_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _NVDIMM_N_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _NVDIMM_N_e__Struct = extern struct {
            CriticalHealth: {"kind":"Byte"},
            ModuleHealth: {"kind":"Array","child": {"kind":"Byte"}},
            ErrorThresholdStatus: {"kind":"Byte"},
        };
        // --------------------------------------------------------
        // Type: _ScsiSenseKey_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _ScsiSenseKey_e__Struct = extern struct {
            SenseKey: {"kind":"Byte"},
            ASC: {"kind":"Byte"},
            ASCQ: {"kind":"Byte"},
            Reserved: {"kind":"Byte"},
        };
    };
};
// --------------------------------------------------------
// Type: STORAGE_DEVICE_MANAGEMENT_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_DEVICE_MANAGEMENT_STATUS = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Health: Windows.Win32.SystemServices.STORAGE_DISK_HEALTH_STATUS,
    NumberOfOperationalStatus: {"kind":"UInt32"},
    NumberOfAdditionalReasons: {"kind":"UInt32"},
    OperationalStatus: {"kind":"Array","child": Windows.Win32.SystemServices.STORAGE_DISK_OPERATIONAL_STATUS},
    AdditionalReasons: {"kind":"Array","child": Windows.Win32.SystemServices.STORAGE_OPERATIONAL_REASON},
};
// --------------------------------------------------------
// Type: STORAGE_ZONED_DEVICE_TYPES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_ZONED_DEVICE_TYPES = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_ZONE_TYPES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_ZONE_TYPES = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_ZONE_GROUP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_ZONE_GROUP = extern struct {
    ZoneCount: {"kind":"UInt32"},
    ZoneType: Windows.Win32.SystemServices.STORAGE_ZONE_TYPES,
    ZoneSize: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: STORAGE_ZONED_DEVICE_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_ZONED_DEVICE_DESCRIPTOR = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    DeviceType: Windows.Win32.SystemServices.STORAGE_ZONED_DEVICE_TYPES,
    ZoneCount: {"kind":"UInt32"},
    ZoneAttributes: Windows.Win32.SystemServices.STORAGE_ZONED_DEVICE_DESCRIPTOR+_ZoneAttributes_e__Union,
    ZoneGroupCount: {"kind":"UInt32"},
    ZoneGroup: {"kind":"Array","child": Windows.Win32.SystemServices.STORAGE_ZONE_GROUP},
    // --------------------------------------------------------
    // Type: _ZoneAttributes_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _ZoneAttributes_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _SequentialPreferredZone_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _SequentialPreferredZone_e__Struct = extern struct {
            OptimalOpenZoneCount: {"kind":"UInt32"},
            Reserved: {"kind":"UInt32"},
        };
        // --------------------------------------------------------
        // Type: _SequentialRequiredZone_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _SequentialRequiredZone_e__Struct = extern struct {
            MaxOpenZoneCount: {"kind":"UInt32"},
            UnrestrictedRead: {"kind":"Byte"},
            Reserved: {"kind":"Array","child": {"kind":"Byte"}},
        };
    };
};
// --------------------------------------------------------
// Type: DEVICE_LOCATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_LOCATION = extern struct {
    Socket: {"kind":"UInt32"},
    Slot: {"kind":"UInt32"},
    Adapter: {"kind":"UInt32"},
    Port: {"kind":"UInt32"},
    Anonymous: Windows.Win32.SystemServices.DEVICE_LOCATION+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous2_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous2_e__Struct = extern struct {
            Target: {"kind":"UInt32"},
            Lun: {"kind":"UInt32"},
        };
        // --------------------------------------------------------
        // Type: _Anonymous1_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous1_e__Struct = extern struct {
            Channel: {"kind":"UInt32"},
            Device: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: STORAGE_DEVICE_LOCATION_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_DEVICE_LOCATION_DESCRIPTOR = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Location: Windows.Win32.SystemServices.DEVICE_LOCATION,
    StringOffset: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: STORAGE_DEVICE_NUMA_PROPERTY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_DEVICE_NUMA_PROPERTY = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    NumaNode: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    UnsafeShutdownCount: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: STORAGE_HW_ENDURANCE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_HW_ENDURANCE_INFO = extern struct {
    ValidFields: {"kind":"UInt32"},
    GroupId: {"kind":"UInt32"},
    Flags: Windows.Win32.SystemServices.STORAGE_HW_ENDURANCE_INFO+_Flags_e__Struct,
    LifePercentage: {"kind":"UInt32"},
    BytesReadCount: {"kind":"Array","child": {"kind":"Byte"}},
    ByteWriteCount: {"kind":"Array","child": {"kind":"Byte"}},
    // --------------------------------------------------------
    // Type: _Flags_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Flags_e__Struct = extern struct {
        _bitfield: {"kind":"UInt32"},
    };
};
// --------------------------------------------------------
// Type: STORAGE_HW_ENDURANCE_DATA_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_HW_ENDURANCE_DATA_DESCRIPTOR = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    EnduranceInfo: Windows.Win32.SystemServices.STORAGE_HW_ENDURANCE_INFO,
};
// --------------------------------------------------------
// Type: DEVICE_DATA_SET_RANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_DATA_SET_RANGE = extern struct {
    StartingOffset: {"kind":"Int64"},
    LengthInBytes: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: DEVICE_MANAGE_DATA_SET_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_MANAGE_DATA_SET_ATTRIBUTES = extern struct {
    Size: {"kind":"UInt32"},
    Action: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    ParameterBlockOffset: {"kind":"UInt32"},
    ParameterBlockLength: {"kind":"UInt32"},
    DataSetRangesOffset: {"kind":"UInt32"},
    DataSetRangesLength: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT = extern struct {
    Size: {"kind":"UInt32"},
    Action: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    OperationStatus: {"kind":"UInt32"},
    ExtendedError: {"kind":"UInt32"},
    TargetDetailedError: {"kind":"UInt32"},
    ReservedStatus: {"kind":"UInt32"},
    OutputBlockOffset: {"kind":"UInt32"},
    OutputBlockLength: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DEVICE_DSM_DEFINITION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_DSM_DEFINITION = extern struct {
    Action: {"kind":"UInt32"},
    SingleRange: {"kind":"Byte"},
    ParameterBlockAlignment: {"kind":"UInt32"},
    ParameterBlockLength: {"kind":"UInt32"},
    HasOutput: {"kind":"Byte"},
    OutputBlockAlignment: {"kind":"UInt32"},
    OutputBlockLength: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DEVICE_DSM_NOTIFICATION_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_DSM_NOTIFICATION_PARAMETERS = extern struct {
    Size: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    NumFileTypeIDs: {"kind":"UInt32"},
    FileTypeID: {"kind":"Array","child": Guid},
};
// --------------------------------------------------------
// Type: STORAGE_OFFLOAD_TOKEN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_OFFLOAD_TOKEN = extern struct {
    TokenType: {"kind":"Array","child": {"kind":"Byte"}},
    Reserved: {"kind":"Array","child": {"kind":"Byte"}},
    TokenIdLength: {"kind":"Array","child": {"kind":"Byte"}},
    Anonymous: Windows.Win32.SystemServices.STORAGE_OFFLOAD_TOKEN+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _StorageOffloadZeroDataToken_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _StorageOffloadZeroDataToken_e__Struct = extern struct {
            Reserved2: {"kind":"Array","child": {"kind":"Byte"}},
        };
    };
};
// --------------------------------------------------------
// Type: DEVICE_DSM_OFFLOAD_READ_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_DSM_OFFLOAD_READ_PARAMETERS = extern struct {
    Flags: {"kind":"UInt32"},
    TimeToLive: {"kind":"UInt32"},
    Reserved: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: STORAGE_OFFLOAD_READ_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_OFFLOAD_READ_OUTPUT = extern struct {
    OffloadReadFlags: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
    LengthProtected: {"kind":"UInt64"},
    TokenLength: {"kind":"UInt32"},
    Token: Windows.Win32.SystemServices.STORAGE_OFFLOAD_TOKEN,
};
// --------------------------------------------------------
// Type: DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS = extern struct {
    Flags: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
    TokenOffset: {"kind":"UInt64"},
    Token: Windows.Win32.SystemServices.STORAGE_OFFLOAD_TOKEN,
};
// --------------------------------------------------------
// Type: STORAGE_OFFLOAD_WRITE_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_OFFLOAD_WRITE_OUTPUT = extern struct {
    OffloadWriteFlags: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
    LengthCopied: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: DEVICE_DATA_SET_LBP_STATE_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_DATA_SET_LBP_STATE_PARAMETERS = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    OutputVersion: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DEVICE_DATA_SET_LB_PROVISIONING_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_DATA_SET_LB_PROVISIONING_STATE = extern struct {
    Size: {"kind":"UInt32"},
    Version: {"kind":"UInt32"},
    SlabSizeInBytes: {"kind":"UInt64"},
    SlabOffsetDeltaInBytes: {"kind":"UInt32"},
    SlabAllocationBitMapBitCount: {"kind":"UInt32"},
    SlabAllocationBitMapLength: {"kind":"UInt32"},
    SlabAllocationBitMap: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2 = extern struct {
    Size: {"kind":"UInt32"},
    Version: {"kind":"UInt32"},
    SlabSizeInBytes: {"kind":"UInt64"},
    SlabOffsetDeltaInBytes: {"kind":"UInt64"},
    SlabAllocationBitMapBitCount: {"kind":"UInt32"},
    SlabAllocationBitMapLength: {"kind":"UInt32"},
    SlabAllocationBitMap: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: DEVICE_DATA_SET_REPAIR_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_DATA_SET_REPAIR_PARAMETERS = extern struct {
    NumberOfRepairCopies: {"kind":"UInt32"},
    SourceCopy: {"kind":"UInt32"},
    RepairCopies: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: DEVICE_DATA_SET_REPAIR_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_DATA_SET_REPAIR_OUTPUT = extern struct {
    ParityExtent: Windows.Win32.SystemServices.DEVICE_DATA_SET_RANGE,
};
// --------------------------------------------------------
// Type: DEVICE_DATA_SET_SCRUB_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_DATA_SET_SCRUB_OUTPUT = extern struct {
    BytesProcessed: {"kind":"UInt64"},
    BytesRepaired: {"kind":"UInt64"},
    BytesFailed: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: DEVICE_DATA_SET_SCRUB_EX_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_DATA_SET_SCRUB_EX_OUTPUT = extern struct {
    BytesProcessed: {"kind":"UInt64"},
    BytesRepaired: {"kind":"UInt64"},
    BytesFailed: {"kind":"UInt64"},
    ParityExtent: Windows.Win32.SystemServices.DEVICE_DATA_SET_RANGE,
};
// --------------------------------------------------------
// Type: DEVICE_DSM_TIERING_QUERY_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_DSM_TIERING_QUERY_INPUT = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    NumberOfTierIds: {"kind":"UInt32"},
    TierIds: {"kind":"Array","child": Guid},
};
// --------------------------------------------------------
// Type: STORAGE_TIER_REGION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_TIER_REGION = extern struct {
    TierId: Guid,
    Offset: {"kind":"UInt64"},
    Length: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: DEVICE_DSM_TIERING_QUERY_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_DSM_TIERING_QUERY_OUTPUT = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
    Alignment: {"kind":"UInt64"},
    TotalNumberOfRegions: {"kind":"UInt32"},
    NumberOfRegionsReturned: {"kind":"UInt32"},
    Regions: {"kind":"Array","child": Windows.Win32.SystemServices.STORAGE_TIER_REGION},
};
// --------------------------------------------------------
// Type: DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS = extern struct {
    Size: {"kind":"UInt32"},
    TargetPriority: {"kind":"Byte"},
    Reserved: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT = extern struct {
    TopologyRangeBytes: {"kind":"UInt64"},
    TopologyId: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: DEVICE_STORAGE_ADDRESS_RANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_STORAGE_ADDRESS_RANGE = extern struct {
    StartAddress: {"kind":"Int64"},
    LengthInBytes: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT = extern struct {
    Version: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    TotalNumberOfRanges: {"kind":"UInt32"},
    NumberOfRangesReturned: {"kind":"UInt32"},
    Ranges: {"kind":"Array","child": Windows.Win32.SystemServices.DEVICE_STORAGE_ADDRESS_RANGE},
};
// --------------------------------------------------------
// Type: DEVICE_DSM_REPORT_ZONES_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_DSM_REPORT_ZONES_PARAMETERS = extern struct {
    Size: {"kind":"UInt32"},
    ReportOption: {"kind":"Byte"},
    Partial: {"kind":"Byte"},
    Reserved: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: STORAGE_ZONES_ATTRIBUTES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_ZONES_ATTRIBUTES = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_ZONE_CONDITION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_ZONE_CONDITION = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_ZONE_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_ZONE_DESCRIPTOR = extern struct {
    Size: {"kind":"UInt32"},
    ZoneType: Windows.Win32.SystemServices.STORAGE_ZONE_TYPES,
    ZoneCondition: Windows.Win32.SystemServices.STORAGE_ZONE_CONDITION,
    ResetWritePointerRecommend: {"kind":"Byte"},
    Reserved0: {"kind":"Array","child": {"kind":"Byte"}},
    ZoneSize: {"kind":"UInt64"},
    WritePointerOffset: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: DEVICE_DSM_REPORT_ZONES_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_DSM_REPORT_ZONES_DATA = extern struct {
    Size: {"kind":"UInt32"},
    ZoneCount: {"kind":"UInt32"},
    Attributes: Windows.Win32.SystemServices.STORAGE_ZONES_ATTRIBUTES,
    Reserved0: {"kind":"UInt32"},
    ZoneDescriptors: {"kind":"Array","child": Windows.Win32.SystemServices.STORAGE_ZONE_DESCRIPTOR},
};
// --------------------------------------------------------
// Type: DEVICE_STORAGE_RANGE_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_STORAGE_RANGE_ATTRIBUTES = extern struct {
    LengthInBytes: {"kind":"UInt64"},
    Anonymous: Windows.Win32.SystemServices.DEVICE_STORAGE_RANGE_ATTRIBUTES+_Anonymous_e__Union,
    Reserved: {"kind":"UInt32"},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: DEVICE_DSM_RANGE_ERROR_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_DSM_RANGE_ERROR_INFO = extern struct {
    Version: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    TotalNumberOfRanges: {"kind":"UInt32"},
    NumberOfRangesReturned: {"kind":"UInt32"},
    Ranges: {"kind":"Array","child": Windows.Win32.SystemServices.DEVICE_STORAGE_RANGE_ATTRIBUTES},
};
// --------------------------------------------------------
// Type: DEVICE_DSM_LOST_QUERY_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_DSM_LOST_QUERY_PARAMETERS = extern struct {
    Version: {"kind":"UInt32"},
    Granularity: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: DEVICE_DSM_LOST_QUERY_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_DSM_LOST_QUERY_OUTPUT = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Alignment: {"kind":"UInt64"},
    NumberOfBits: {"kind":"UInt32"},
    BitMap: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: DEVICE_DSM_FREE_SPACE_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_DSM_FREE_SPACE_OUTPUT = extern struct {
    Version: {"kind":"UInt32"},
    FreeSpace: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: DEVICE_DSM_CONVERSION_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_DSM_CONVERSION_OUTPUT = extern struct {
    Version: {"kind":"UInt32"},
    Source: Guid,
};
// --------------------------------------------------------
// Type: STORAGE_GET_BC_PROPERTIES_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_GET_BC_PROPERTIES_OUTPUT = extern struct {
    MaximumRequestsPerPeriod: {"kind":"UInt32"},
    MinimumPeriod: {"kind":"UInt32"},
    MaximumRequestSize: {"kind":"UInt64"},
    EstimatedTimePerRequest: {"kind":"UInt32"},
    NumOutStandingRequests: {"kind":"UInt32"},
    RequestSize: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: STORAGE_ALLOCATE_BC_STREAM_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_ALLOCATE_BC_STREAM_INPUT = extern struct {
    Version: {"kind":"UInt32"},
    RequestsPerPeriod: {"kind":"UInt32"},
    Period: {"kind":"UInt32"},
    RetryFailures: {"kind":"Byte"},
    Discardable: {"kind":"Byte"},
    Reserved1: {"kind":"Array","child": {"kind":"Byte"}},
    AccessType: {"kind":"UInt32"},
    AccessMode: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: STORAGE_ALLOCATE_BC_STREAM_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_ALLOCATE_BC_STREAM_OUTPUT = extern struct {
    RequestSize: {"kind":"UInt64"},
    NumOutStandingRequests: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: STORAGE_PRIORITY_HINT_SUPPORT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_PRIORITY_HINT_SUPPORT = extern struct {
    SupportFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: STORAGE_DIAGNOSTIC_LEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_DIAGNOSTIC_LEVEL = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_DIAGNOSTIC_TARGET_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_DIAGNOSTIC_TARGET_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_DIAGNOSTIC_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_DIAGNOSTIC_REQUEST = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
    TargetType: Windows.Win32.SystemServices.STORAGE_DIAGNOSTIC_TARGET_TYPE,
    Level: Windows.Win32.SystemServices.STORAGE_DIAGNOSTIC_LEVEL,
};
// --------------------------------------------------------
// Type: STORAGE_DIAGNOSTIC_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_DIAGNOSTIC_DATA = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    ProviderId: Guid,
    BufferSize: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
    DiagnosticDataBuffer: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: PHYSICAL_ELEMENT_STATUS_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PHYSICAL_ELEMENT_STATUS_REQUEST = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    StartingElement: {"kind":"UInt32"},
    Filter: {"kind":"Byte"},
    ReportType: {"kind":"Byte"},
    Reserved: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: PHYSICAL_ELEMENT_STATUS_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PHYSICAL_ELEMENT_STATUS_DESCRIPTOR = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    ElementIdentifier: {"kind":"UInt32"},
    PhysicalElementType: {"kind":"Byte"},
    PhysicalElementHealth: {"kind":"Byte"},
    Reserved1: {"kind":"Array","child": {"kind":"Byte"}},
    AssociatedCapacity: {"kind":"UInt64"},
    Reserved2: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: PHYSICAL_ELEMENT_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PHYSICAL_ELEMENT_STATUS = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    DescriptorCount: {"kind":"UInt32"},
    ReturnedDescriptorCount: {"kind":"UInt32"},
    ElementIdentifierBeingDepoped: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
    Descriptors: {"kind":"Array","child": Windows.Win32.SystemServices.PHYSICAL_ELEMENT_STATUS_DESCRIPTOR},
};
// --------------------------------------------------------
// Type: REMOVE_ELEMENT_AND_TRUNCATE_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const REMOVE_ELEMENT_AND_TRUNCATE_REQUEST = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    RequestCapacity: {"kind":"UInt64"},
    ElementIdentifier: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DEVICE_INTERNAL_STATUS_DATA_SET
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DEVICE_INTERNAL_STATUS_DATA_SET = *opaque{
};
// --------------------------------------------------------
// Type: GET_DEVICE_INTERNAL_STATUS_DATA_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GET_DEVICE_INTERNAL_STATUS_DATA_REQUEST = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    RequestDataType: Windows.Win32.SystemServices.DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE,
    RequestDataSet: Windows.Win32.SystemServices.DEVICE_INTERNAL_STATUS_DATA_SET,
};
// --------------------------------------------------------
// Type: DEVICE_INTERNAL_STATUS_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_INTERNAL_STATUS_DATA = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    T10VendorId: {"kind":"UInt64"},
    DataSet1Length: {"kind":"UInt32"},
    DataSet2Length: {"kind":"UInt32"},
    DataSet3Length: {"kind":"UInt32"},
    DataSet4Length: {"kind":"UInt32"},
    StatusDataVersion: {"kind":"Byte"},
    Reserved: {"kind":"Array","child": {"kind":"Byte"}},
    ReasonIdentifier: {"kind":"Array","child": {"kind":"Byte"}},
    StatusDataLength: {"kind":"UInt32"},
    StatusData: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: STORAGE_MEDIA_SERIAL_NUMBER_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_MEDIA_SERIAL_NUMBER_DATA = extern struct {
    Reserved: {"kind":"UInt16"},
    SerialNumberLength: {"kind":"UInt16"},
    SerialNumber: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: STORAGE_READ_CAPACITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_READ_CAPACITY = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    BlockLength: {"kind":"UInt32"},
    NumberOfBlocks: Windows.Win32.SystemServices.LARGE_INTEGER,
    DiskLength: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: PERSISTENT_RESERVE_COMMAND
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PERSISTENT_RESERVE_COMMAND = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Anonymous: Windows.Win32.SystemServices.PERSISTENT_RESERVE_COMMAND+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _PR_IN_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _PR_IN_e__Struct = extern struct {
            _bitfield: {"kind":"Byte"},
            AllocationLength: {"kind":"UInt16"},
        };
        // --------------------------------------------------------
        // Type: _PR_OUT_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _PR_OUT_e__Struct = extern struct {
            _bitfield1: {"kind":"Byte"},
            _bitfield2: {"kind":"Byte"},
            ParameterList: {"kind":"Array","child": {"kind":"Byte"}},
        };
    };
};
// --------------------------------------------------------
// Type: _DEVICEDUMP_COLLECTION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _DEVICEDUMP_COLLECTION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DEVICEDUMP_SUBSECTION_POINTER
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const DEVICEDUMP_SUBSECTION_POINTER = *opaque{
};
// --------------------------------------------------------
// Type: DEVICEDUMP_STRUCTURE_VERSION
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const DEVICEDUMP_STRUCTURE_VERSION = *opaque{
};
// --------------------------------------------------------
// Type: DEVICEDUMP_SECTION_HEADER
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const DEVICEDUMP_SECTION_HEADER = *opaque{
};
// --------------------------------------------------------
// Type: GP_LOG_PAGE_DESCRIPTOR
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const GP_LOG_PAGE_DESCRIPTOR = *opaque{
};
// --------------------------------------------------------
// Type: DEVICEDUMP_PUBLIC_SUBSECTION
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const DEVICEDUMP_PUBLIC_SUBSECTION = *opaque{
};
// --------------------------------------------------------
// Type: DEVICEDUMP_RESTRICTED_SUBSECTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICEDUMP_RESTRICTED_SUBSECTION = extern struct {
    bData: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: DEVICEDUMP_PRIVATE_SUBSECTION
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const DEVICEDUMP_PRIVATE_SUBSECTION = *opaque{
};
// --------------------------------------------------------
// Type: DEVICEDUMP_STORAGEDEVICE_DATA
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const DEVICEDUMP_STORAGEDEVICE_DATA = *opaque{
};
// --------------------------------------------------------
// Type: DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD = *opaque{
    // --------------------------------------------------------
    // Type: _StackSpecific_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _StackSpecific_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _StorPort_e__Struct
        // TypeLayoutAttr: sequential
        // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
        pub const _StorPort_e__Struct = *opaque{
        };
        // --------------------------------------------------------
        // Type: _ExternalStack_e__Struct
        // TypeLayoutAttr: sequential
        // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
        pub const _ExternalStack_e__Struct = *opaque{
        };
        // --------------------------------------------------------
        // Type: _AtaPort_e__Struct
        // TypeLayoutAttr: sequential
        // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
        pub const _AtaPort_e__Struct = *opaque{
        };
    };
};
// --------------------------------------------------------
// Type: DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_IDLE_POWER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_IDLE_POWER = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    _bitfield: {"kind":"UInt32"},
    D3IdleTimeout: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: STORAGE_POWERUP_REASON_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_POWERUP_REASON_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_IDLE_POWERUP_REASON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_IDLE_POWERUP_REASON = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    PowerupReason: Windows.Win32.SystemServices.STORAGE_POWERUP_REASON_TYPE,
};
// --------------------------------------------------------
// Type: STORAGE_RPMB_DATA_FRAME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_RPMB_DATA_FRAME = extern struct {
    Stuff: {"kind":"Array","child": {"kind":"Byte"}},
    KeyOrMAC: {"kind":"Array","child": {"kind":"Byte"}},
    Data: {"kind":"Array","child": {"kind":"Byte"}},
    Nonce: {"kind":"Array","child": {"kind":"Byte"}},
    WriteCounter: {"kind":"Array","child": {"kind":"Byte"}},
    Address: {"kind":"Array","child": {"kind":"Byte"}},
    BlockCount: {"kind":"Array","child": {"kind":"Byte"}},
    OperationResult: {"kind":"Array","child": {"kind":"Byte"}},
    RequestOrResponseType: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: STORAGE_RPMB_COMMAND_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_RPMB_COMMAND_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_EVENT_NOTIFICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_EVENT_NOTIFICATION = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Events: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: STORAGE_COUNTER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_COUNTER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_COUNTER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_COUNTER = extern struct {
    Type: Windows.Win32.SystemServices.STORAGE_COUNTER_TYPE,
    Value: Windows.Win32.SystemServices.STORAGE_COUNTER+_Value_e__Union,
    // --------------------------------------------------------
    // Type: _Value_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Value_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _ManufactureDate_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _ManufactureDate_e__Struct = extern struct {
            Week: {"kind":"UInt32"},
            Year: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: STORAGE_COUNTERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_COUNTERS = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    NumberOfCounters: {"kind":"UInt32"},
    Counters: {"kind":"Array","child": Windows.Win32.SystemServices.STORAGE_COUNTER},
};
// --------------------------------------------------------
// Type: STORAGE_HW_FIRMWARE_INFO_QUERY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_HW_FIRMWARE_INFO_QUERY = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: STORAGE_HW_FIRMWARE_SLOT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_HW_FIRMWARE_SLOT_INFO = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    SlotNumber: {"kind":"Byte"},
    _bitfield: {"kind":"Byte"},
    Reserved1: {"kind":"Array","child": {"kind":"Byte"}},
    Revision: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: STORAGE_HW_FIRMWARE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_HW_FIRMWARE_INFO = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    _bitfield: {"kind":"Byte"},
    SlotCount: {"kind":"Byte"},
    ActiveSlot: {"kind":"Byte"},
    PendingActivateSlot: {"kind":"Byte"},
    FirmwareShared: {"kind":"Byte"},
    Reserved: {"kind":"Array","child": {"kind":"Byte"}},
    ImagePayloadAlignment: {"kind":"UInt32"},
    ImagePayloadMaxSize: {"kind":"UInt32"},
    Slot: {"kind":"Array","child": Windows.Win32.SystemServices.STORAGE_HW_FIRMWARE_SLOT_INFO},
};
// --------------------------------------------------------
// Type: STORAGE_HW_FIRMWARE_DOWNLOAD_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_HW_FIRMWARE_DOWNLOAD_V2 = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    Slot: {"kind":"Byte"},
    Reserved: {"kind":"Array","child": {"kind":"Byte"}},
    Offset: {"kind":"UInt64"},
    BufferSize: {"kind":"UInt64"},
    ImageSize: {"kind":"UInt32"},
    Reserved2: {"kind":"UInt32"},
    ImageBuffer: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: STORAGE_ATTRIBUTE_MGMT_ACTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_ATTRIBUTE_MGMT_ACTION = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_ATTRIBUTE_MGMT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_ATTRIBUTE_MGMT = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Action: Windows.Win32.SystemServices.STORAGE_ATTRIBUTE_MGMT_ACTION,
    Attribute: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SCM_PD_HEALTH_NOTIFICATION_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCM_PD_HEALTH_NOTIFICATION_DATA = extern struct {
    DeviceGuid: Guid,
};
// --------------------------------------------------------
// Type: SCM_LOGICAL_DEVICE_INSTANCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCM_LOGICAL_DEVICE_INSTANCE = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    DeviceGuid: Guid,
    SymbolicLink: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SCM_LOGICAL_DEVICES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCM_LOGICAL_DEVICES = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    DeviceCount: {"kind":"UInt32"},
    Devices: {"kind":"Array","child": Windows.Win32.SystemServices.SCM_LOGICAL_DEVICE_INSTANCE},
};
// --------------------------------------------------------
// Type: SCM_PHYSICAL_DEVICE_INSTANCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCM_PHYSICAL_DEVICE_INSTANCE = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    NfitHandle: {"kind":"UInt32"},
    SymbolicLink: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SCM_PHYSICAL_DEVICES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCM_PHYSICAL_DEVICES = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    DeviceCount: {"kind":"UInt32"},
    Devices: {"kind":"Array","child": Windows.Win32.SystemServices.SCM_PHYSICAL_DEVICE_INSTANCE},
};
// --------------------------------------------------------
// Type: SCM_REGION_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SCM_REGION_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: SCM_REGION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCM_REGION = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    NfitHandle: {"kind":"UInt32"},
    LogicalDeviceGuid: Guid,
    AddressRangeType: Guid,
    AssociatedId: {"kind":"UInt32"},
    Length: {"kind":"UInt64"},
    StartingDPA: {"kind":"UInt64"},
    BaseSPA: {"kind":"UInt64"},
    SPAOffset: {"kind":"UInt64"},
    RegionOffset: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: SCM_REGIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCM_REGIONS = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    RegionCount: {"kind":"UInt32"},
    Regions: {"kind":"Array","child": Windows.Win32.SystemServices.SCM_REGION},
};
// --------------------------------------------------------
// Type: SCM_INTERLEAVED_PD_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCM_INTERLEAVED_PD_INFO = extern struct {
    DeviceHandle: {"kind":"UInt32"},
    DeviceGuid: Guid,
};
// --------------------------------------------------------
// Type: SCM_LD_INTERLEAVE_SET_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCM_LD_INTERLEAVE_SET_INFO = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    InterleaveSetSize: {"kind":"UInt32"},
    InterleaveSet: {"kind":"Array","child": Windows.Win32.SystemServices.SCM_INTERLEAVED_PD_INFO},
};
// --------------------------------------------------------
// Type: SCM_PD_QUERY_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SCM_PD_QUERY_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: SCM_PD_PROPERTY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SCM_PD_PROPERTY_ID = *opaque{
};
// --------------------------------------------------------
// Type: SCM_PD_PROPERTY_QUERY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCM_PD_PROPERTY_QUERY = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    PropertyId: Windows.Win32.SystemServices.SCM_PD_PROPERTY_ID,
    QueryType: Windows.Win32.SystemServices.SCM_PD_QUERY_TYPE,
    AdditionalParameters: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SCM_PD_DESCRIPTOR_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCM_PD_DESCRIPTOR_HEADER = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SCM_PD_DEVICE_HANDLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCM_PD_DEVICE_HANDLE = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    DeviceGuid: Guid,
    DeviceHandle: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SCM_PD_DEVICE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCM_PD_DEVICE_INFO = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    DeviceGuid: Guid,
    UnsafeShutdownCount: {"kind":"UInt32"},
    PersistentMemorySizeInBytes: {"kind":"UInt64"},
    VolatileMemorySizeInBytes: {"kind":"UInt64"},
    TotalMemorySizeInBytes: {"kind":"UInt64"},
    SlotNumber: {"kind":"UInt32"},
    DeviceHandle: {"kind":"UInt32"},
    PhysicalId: {"kind":"UInt16"},
    NumberOfFormatInterfaceCodes: {"kind":"Byte"},
    FormatInterfaceCodes: {"kind":"Array","child": {"kind":"UInt16"}},
    VendorId: {"kind":"UInt32"},
    ProductId: {"kind":"UInt32"},
    SubsystemDeviceId: {"kind":"UInt32"},
    SubsystemVendorId: {"kind":"UInt32"},
    ManufacturingLocation: {"kind":"Byte"},
    ManufacturingWeek: {"kind":"Byte"},
    ManufacturingYear: {"kind":"Byte"},
    SerialNumber4Byte: {"kind":"UInt32"},
    SerialNumberLengthInChars: {"kind":"UInt32"},
    SerialNumber: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: SCM_PD_DEVICE_SPECIFIC_PROPERTY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCM_PD_DEVICE_SPECIFIC_PROPERTY = extern struct {
    Name: {"kind":"Array","child": {"kind":"UInt16"}},
    Value: {"kind":"Int64"},
};
// --------------------------------------------------------
// Type: SCM_PD_DEVICE_SPECIFIC_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCM_PD_DEVICE_SPECIFIC_INFO = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    NumberOfProperties: {"kind":"UInt32"},
    DeviceSpecificProperties: {"kind":"Array","child": Windows.Win32.SystemServices.SCM_PD_DEVICE_SPECIFIC_PROPERTY},
};
// --------------------------------------------------------
// Type: SCM_PD_FIRMWARE_SLOT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCM_PD_FIRMWARE_SLOT_INFO = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    SlotNumber: {"kind":"Byte"},
    _bitfield: {"kind":"Byte"},
    Reserved1: {"kind":"Array","child": {"kind":"Byte"}},
    Revision: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SCM_PD_FIRMWARE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCM_PD_FIRMWARE_INFO = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    ActiveSlot: {"kind":"Byte"},
    NextActiveSlot: {"kind":"Byte"},
    SlotCount: {"kind":"Byte"},
    Slots: {"kind":"Array","child": Windows.Win32.SystemServices.SCM_PD_FIRMWARE_SLOT_INFO},
};
// --------------------------------------------------------
// Type: SCM_PD_HEALTH_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SCM_PD_HEALTH_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: SCM_PD_OPERATIONAL_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SCM_PD_OPERATIONAL_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: SCM_PD_OPERATIONAL_STATUS_REASON
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SCM_PD_OPERATIONAL_STATUS_REASON = *opaque{
};
// --------------------------------------------------------
// Type: SCM_PD_MANAGEMENT_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCM_PD_MANAGEMENT_STATUS = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Health: Windows.Win32.SystemServices.SCM_PD_HEALTH_STATUS,
    NumberOfOperationalStatus: {"kind":"UInt32"},
    NumberOfAdditionalReasons: {"kind":"UInt32"},
    OperationalStatus: {"kind":"Array","child": Windows.Win32.SystemServices.SCM_PD_OPERATIONAL_STATUS},
    AdditionalReasons: {"kind":"Array","child": Windows.Win32.SystemServices.SCM_PD_OPERATIONAL_STATUS_REASON},
};
// --------------------------------------------------------
// Type: SCM_PD_LOCATION_STRING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCM_PD_LOCATION_STRING = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Location: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SCM_PD_FIRMWARE_DOWNLOAD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCM_PD_FIRMWARE_DOWNLOAD = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    Slot: {"kind":"Byte"},
    Reserved: {"kind":"Array","child": {"kind":"Byte"}},
    Offset: {"kind":"UInt64"},
    FirmwareImageSizeInBytes: {"kind":"UInt32"},
    FirmwareImage: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SCM_PD_FIRMWARE_ACTIVATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCM_PD_FIRMWARE_ACTIVATE = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    Slot: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: SCM_PD_PASSTHROUGH_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCM_PD_PASSTHROUGH_INPUT = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    ProtocolGuid: Guid,
    DataSize: {"kind":"UInt32"},
    Data: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SCM_PD_PASSTHROUGH_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCM_PD_PASSTHROUGH_OUTPUT = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    ProtocolGuid: Guid,
    DataSize: {"kind":"UInt32"},
    Data: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SCM_PD_PASSTHROUGH_INVDIMM_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCM_PD_PASSTHROUGH_INVDIMM_INPUT = extern struct {
    Opcode: {"kind":"UInt32"},
    OpcodeParametersLength: {"kind":"UInt32"},
    OpcodeParameters: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT = extern struct {
    GeneralStatus: {"kind":"UInt16"},
    ExtendedStatus: {"kind":"UInt16"},
    OutputDataLength: {"kind":"UInt32"},
    OutputData: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SCM_PD_REINITIALIZE_MEDIA_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCM_PD_REINITIALIZE_MEDIA_INPUT = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Options: Windows.Win32.SystemServices.SCM_PD_REINITIALIZE_MEDIA_INPUT+_Options_e__Struct,
    // --------------------------------------------------------
    // Type: _Options_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Options_e__Struct = extern struct {
        _bitfield: {"kind":"UInt32"},
    };
};
// --------------------------------------------------------
// Type: SCM_PD_MEDIA_REINITIALIZATION_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SCM_PD_MEDIA_REINITIALIZATION_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: SCM_PD_REINITIALIZE_MEDIA_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCM_PD_REINITIALIZE_MEDIA_OUTPUT = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Status: Windows.Win32.SystemServices.SCM_PD_MEDIA_REINITIALIZATION_STATUS,
};
// --------------------------------------------------------
// Type: SET_PARTITION_INFORMATION_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SET_PARTITION_INFORMATION_EX = extern struct {
    PartitionStyle: Windows.Win32.FileSystem.PARTITION_STYLE,
    Anonymous: Windows.Win32.SystemServices.SET_PARTITION_INFORMATION_EX+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: DETECTION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DETECTION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DISK_CONTROLLER_NUMBER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISK_CONTROLLER_NUMBER = extern struct {
    ControllerNumber: {"kind":"UInt32"},
    DiskNumber: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DISK_CACHE_RETENTION_PRIORITY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DISK_CACHE_RETENTION_PRIORITY = *opaque{
};
// --------------------------------------------------------
// Type: HISTOGRAM_BUCKET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HISTOGRAM_BUCKET = extern struct {
    Reads: {"kind":"UInt32"},
    Writes: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DISK_HISTOGRAM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISK_HISTOGRAM = extern struct {
    DiskSize: Windows.Win32.SystemServices.LARGE_INTEGER,
    Start: Windows.Win32.SystemServices.LARGE_INTEGER,
    End: Windows.Win32.SystemServices.LARGE_INTEGER,
    Average: Windows.Win32.SystemServices.LARGE_INTEGER,
    AverageRead: Windows.Win32.SystemServices.LARGE_INTEGER,
    AverageWrite: Windows.Win32.SystemServices.LARGE_INTEGER,
    Granularity: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    ReadCount: {"kind":"UInt32"},
    WriteCount: {"kind":"UInt32"},
    Histogram: {"kind""Ptr","child":Windows.Win32.SystemServices.HISTOGRAM_BUCKET},
};
// --------------------------------------------------------
// Type: DISK_RECORD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISK_RECORD = extern struct {
    ByteOffset: Windows.Win32.SystemServices.LARGE_INTEGER,
    StartTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    EndTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    VirtualAddress: {"kind""Ptr","child":{"kind":"Void"}},
    NumberOfBytes: {"kind":"UInt32"},
    DeviceNumber: {"kind":"Byte"},
    ReadRequest: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: DISK_LOGGING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISK_LOGGING = extern struct {
    Function: {"kind":"Byte"},
    BufferAddress: {"kind""Ptr","child":{"kind":"Void"}},
    BufferSize: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: BIN_TYPES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BIN_TYPES = *opaque{
};
// --------------------------------------------------------
// Type: BIN_RANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BIN_RANGE = extern struct {
    StartValue: Windows.Win32.SystemServices.LARGE_INTEGER,
    Length: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: PERF_BIN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PERF_BIN = extern struct {
    NumberOfBins: {"kind":"UInt32"},
    TypeOfBin: {"kind":"UInt32"},
    BinsRanges: {"kind":"Array","child": Windows.Win32.SystemServices.BIN_RANGE},
};
// --------------------------------------------------------
// Type: BIN_COUNT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BIN_COUNT = extern struct {
    BinRange: Windows.Win32.SystemServices.BIN_RANGE,
    BinCount: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: BIN_RESULTS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BIN_RESULTS = extern struct {
    NumberOfBins: {"kind":"UInt32"},
    BinCounts: {"kind":"Array","child": Windows.Win32.SystemServices.BIN_COUNT},
};
// --------------------------------------------------------
// Type: GETVERSIONINPARAMS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const GETVERSIONINPARAMS = *opaque{
};
// --------------------------------------------------------
// Type: IDEREGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IDEREGS = extern struct {
    bFeaturesReg: {"kind":"Byte"},
    bSectorCountReg: {"kind":"Byte"},
    bSectorNumberReg: {"kind":"Byte"},
    bCylLowReg: {"kind":"Byte"},
    bCylHighReg: {"kind":"Byte"},
    bDriveHeadReg: {"kind":"Byte"},
    bCommandReg: {"kind":"Byte"},
    bReserved: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: SENDCMDINPARAMS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SENDCMDINPARAMS = *opaque{
};
// --------------------------------------------------------
// Type: DRIVERSTATUS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const DRIVERSTATUS = *opaque{
};
// --------------------------------------------------------
// Type: SENDCMDOUTPARAMS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SENDCMDOUTPARAMS = *opaque{
};
// --------------------------------------------------------
// Type: ELEMENT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ELEMENT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: CHANGER_ELEMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CHANGER_ELEMENT = extern struct {
    ElementType: Windows.Win32.SystemServices.ELEMENT_TYPE,
    ElementAddress: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CHANGER_ELEMENT_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CHANGER_ELEMENT_LIST = extern struct {
    Element: Windows.Win32.SystemServices.CHANGER_ELEMENT,
    NumberOfElements: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: GET_CHANGER_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GET_CHANGER_PARAMETERS = extern struct {
    Size: {"kind":"UInt32"},
    NumberTransportElements: {"kind":"UInt16"},
    NumberStorageElements: {"kind":"UInt16"},
    NumberCleanerSlots: {"kind":"UInt16"},
    NumberIEElements: {"kind":"UInt16"},
    NumberDataTransferElements: {"kind":"UInt16"},
    NumberOfDoors: {"kind":"UInt16"},
    FirstSlotNumber: {"kind":"UInt16"},
    FirstDriveNumber: {"kind":"UInt16"},
    FirstTransportNumber: {"kind":"UInt16"},
    FirstIEPortNumber: {"kind":"UInt16"},
    FirstCleanerSlotAddress: {"kind":"UInt16"},
    MagazineSize: {"kind":"UInt16"},
    DriveCleanTimeout: {"kind":"UInt32"},
    Features0: {"kind":"UInt32"},
    Features1: {"kind":"UInt32"},
    MoveFromTransport: {"kind":"Byte"},
    MoveFromSlot: {"kind":"Byte"},
    MoveFromIePort: {"kind":"Byte"},
    MoveFromDrive: {"kind":"Byte"},
    ExchangeFromTransport: {"kind":"Byte"},
    ExchangeFromSlot: {"kind":"Byte"},
    ExchangeFromIePort: {"kind":"Byte"},
    ExchangeFromDrive: {"kind":"Byte"},
    LockUnlockCapabilities: {"kind":"Byte"},
    PositionCapabilities: {"kind":"Byte"},
    Reserved1: {"kind":"Array","child": {"kind":"Byte"}},
    Reserved2: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: CHANGER_PRODUCT_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CHANGER_PRODUCT_DATA = extern struct {
    VendorId: {"kind":"Array","child": {"kind":"Byte"}},
    ProductId: {"kind":"Array","child": {"kind":"Byte"}},
    Revision: {"kind":"Array","child": {"kind":"Byte"}},
    SerialNumber: {"kind":"Array","child": {"kind":"Byte"}},
    DeviceType: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: CHANGER_SET_ACCESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CHANGER_SET_ACCESS = extern struct {
    Element: Windows.Win32.SystemServices.CHANGER_ELEMENT,
    Control: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CHANGER_READ_ELEMENT_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CHANGER_READ_ELEMENT_STATUS = extern struct {
    ElementList: Windows.Win32.SystemServices.CHANGER_ELEMENT_LIST,
    VolumeTagInfo: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: CHANGER_ELEMENT_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CHANGER_ELEMENT_STATUS = extern struct {
    Element: Windows.Win32.SystemServices.CHANGER_ELEMENT,
    SrcElementAddress: Windows.Win32.SystemServices.CHANGER_ELEMENT,
    Flags: {"kind":"UInt32"},
    ExceptionCode: {"kind":"UInt32"},
    TargetId: {"kind":"Byte"},
    Lun: {"kind":"Byte"},
    Reserved: {"kind":"UInt16"},
    PrimaryVolumeID: {"kind":"Array","child": {"kind":"Byte"}},
    AlternateVolumeID: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: CHANGER_ELEMENT_STATUS_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CHANGER_ELEMENT_STATUS_EX = extern struct {
    Element: Windows.Win32.SystemServices.CHANGER_ELEMENT,
    SrcElementAddress: Windows.Win32.SystemServices.CHANGER_ELEMENT,
    Flags: {"kind":"UInt32"},
    ExceptionCode: {"kind":"UInt32"},
    TargetId: {"kind":"Byte"},
    Lun: {"kind":"Byte"},
    Reserved: {"kind":"UInt16"},
    PrimaryVolumeID: {"kind":"Array","child": {"kind":"Byte"}},
    AlternateVolumeID: {"kind":"Array","child": {"kind":"Byte"}},
    VendorIdentification: {"kind":"Array","child": {"kind":"Byte"}},
    ProductIdentification: {"kind":"Array","child": {"kind":"Byte"}},
    SerialNumber: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: CHANGER_INITIALIZE_ELEMENT_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CHANGER_INITIALIZE_ELEMENT_STATUS = extern struct {
    ElementList: Windows.Win32.SystemServices.CHANGER_ELEMENT_LIST,
    BarCodeScan: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: CHANGER_SET_POSITION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CHANGER_SET_POSITION = extern struct {
    Transport: Windows.Win32.SystemServices.CHANGER_ELEMENT,
    Destination: Windows.Win32.SystemServices.CHANGER_ELEMENT,
    Flip: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: CHANGER_EXCHANGE_MEDIUM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CHANGER_EXCHANGE_MEDIUM = extern struct {
    Transport: Windows.Win32.SystemServices.CHANGER_ELEMENT,
    Source: Windows.Win32.SystemServices.CHANGER_ELEMENT,
    Destination1: Windows.Win32.SystemServices.CHANGER_ELEMENT,
    Destination2: Windows.Win32.SystemServices.CHANGER_ELEMENT,
    Flip1: {"kind":"Byte"},
    Flip2: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: CHANGER_MOVE_MEDIUM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CHANGER_MOVE_MEDIUM = extern struct {
    Transport: Windows.Win32.SystemServices.CHANGER_ELEMENT,
    Source: Windows.Win32.SystemServices.CHANGER_ELEMENT,
    Destination: Windows.Win32.SystemServices.CHANGER_ELEMENT,
    Flip: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: CHANGER_SEND_VOLUME_TAG_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CHANGER_SEND_VOLUME_TAG_INFORMATION = extern struct {
    StartingElement: Windows.Win32.SystemServices.CHANGER_ELEMENT,
    ActionCode: {"kind":"UInt32"},
    VolumeIDTemplate: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: READ_ELEMENT_ADDRESS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const READ_ELEMENT_ADDRESS_INFO = extern struct {
    NumberOfElements: {"kind":"UInt32"},
    ElementStatus: {"kind":"Array","child": Windows.Win32.SystemServices.CHANGER_ELEMENT_STATUS},
};
// --------------------------------------------------------
// Type: CHANGER_DEVICE_PROBLEM_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CHANGER_DEVICE_PROBLEM_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: PATHNAME_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PATHNAME_BUFFER = extern struct {
    PathNameLength: {"kind":"UInt32"},
    Name: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: FSCTL_QUERY_FAT_BPB_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FSCTL_QUERY_FAT_BPB_BUFFER = extern struct {
    First0x24BytesOfBootSector: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: REFS_VOLUME_DATA_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const REFS_VOLUME_DATA_BUFFER = extern struct {
    ByteCount: {"kind":"UInt32"},
    MajorVersion: {"kind":"UInt32"},
    MinorVersion: {"kind":"UInt32"},
    BytesPerPhysicalSector: {"kind":"UInt32"},
    VolumeSerialNumber: Windows.Win32.SystemServices.LARGE_INTEGER,
    NumberSectors: Windows.Win32.SystemServices.LARGE_INTEGER,
    TotalClusters: Windows.Win32.SystemServices.LARGE_INTEGER,
    FreeClusters: Windows.Win32.SystemServices.LARGE_INTEGER,
    TotalReserved: Windows.Win32.SystemServices.LARGE_INTEGER,
    BytesPerSector: {"kind":"UInt32"},
    BytesPerCluster: {"kind":"UInt32"},
    MaximumSizeOfResidentFile: Windows.Win32.SystemServices.LARGE_INTEGER,
    FastTierDataFillRatio: {"kind":"UInt16"},
    SlowTierDataFillRatio: {"kind":"UInt16"},
    DestagesFastTierToSlowTierRate: {"kind":"UInt32"},
    Reserved: {"kind":"Array","child": Windows.Win32.SystemServices.LARGE_INTEGER},
};
// --------------------------------------------------------
// Type: STARTING_LCN_INPUT_BUFFER_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STARTING_LCN_INPUT_BUFFER_EX = extern struct {
    StartingLcn: Windows.Win32.SystemServices.LARGE_INTEGER,
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER = extern struct {
    ExtentCount: {"kind":"UInt32"},
    StartingVcn: Windows.Win32.SystemServices.LARGE_INTEGER,
    Extents: {"kind":"Array","child": Windows.Win32.SystemServices.RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER+_Anonymous_e__Struct},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Anonymous_e__Struct = extern struct {
        NextVcn: Windows.Win32.SystemServices.LARGE_INTEGER,
        Lcn: Windows.Win32.SystemServices.LARGE_INTEGER,
        ReferenceCount: {"kind":"UInt32"},
    };
};
// --------------------------------------------------------
// Type: RETRIEVAL_POINTER_COUNT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RETRIEVAL_POINTER_COUNT = extern struct {
    ExtentCount: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MOVE_FILE_RECORD_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MOVE_FILE_RECORD_DATA = extern struct {
    FileHandle: Windows.Win32.SystemServices.HANDLE,
    SourceFileRecord: Windows.Win32.SystemServices.LARGE_INTEGER,
    TargetFileRecord: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: USN_RECORD_UNION
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const USN_RECORD_UNION = *opaque{
};
// --------------------------------------------------------
// Type: BULK_SECURITY_TEST_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BULK_SECURITY_TEST_DATA = extern struct {
    DesiredAccess: {"kind":"UInt32"},
    SecurityIds: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: FILE_PREFETCH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_PREFETCH = extern struct {
    Type: {"kind":"UInt32"},
    Count: {"kind":"UInt32"},
    Prefetch: {"kind":"Array","child": {"kind":"UInt64"}},
};
// --------------------------------------------------------
// Type: FILE_PREFETCH_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_PREFETCH_EX = extern struct {
    Type: {"kind":"UInt32"},
    Count: {"kind":"UInt32"},
    Context: {"kind""Ptr","child":{"kind":"Void"}},
    Prefetch: {"kind":"Array","child": {"kind":"UInt64"}},
};
// --------------------------------------------------------
// Type: FILE_ZERO_DATA_INFORMATION_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_ZERO_DATA_INFORMATION_EX = extern struct {
    FileOffset: Windows.Win32.SystemServices.LARGE_INTEGER,
    BeyondFinalZero: Windows.Win32.SystemServices.LARGE_INTEGER,
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: ENCRYPTION_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENCRYPTION_BUFFER = extern struct {
    EncryptionOperation: {"kind":"UInt32"},
    Private: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: DECRYPTION_STATUS_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DECRYPTION_STATUS_BUFFER = extern struct {
    NoEncryptedStreams: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: REQUEST_RAW_ENCRYPTED_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const REQUEST_RAW_ENCRYPTED_DATA = extern struct {
    FileOffset: {"kind":"Int64"},
    Length: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: ENCRYPTED_DATA_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENCRYPTED_DATA_INFO = extern struct {
    StartingFileOffset: {"kind":"UInt64"},
    OutputBufferOffset: {"kind":"UInt32"},
    BytesWithinFileSize: {"kind":"UInt32"},
    BytesWithinValidDataLength: {"kind":"UInt32"},
    CompressionFormat: {"kind":"UInt16"},
    DataUnitShift: {"kind":"Byte"},
    ChunkShift: {"kind":"Byte"},
    ClusterShift: {"kind":"Byte"},
    EncryptionFormat: {"kind":"Byte"},
    NumberOfDataBlocks: {"kind":"UInt16"},
    DataBlockSize: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: EXTENDED_ENCRYPTED_DATA_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EXTENDED_ENCRYPTED_DATA_INFO = extern struct {
    ExtendedCode: {"kind":"UInt32"},
    Length: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SI_COPYFILE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SI_COPYFILE = extern struct {
    SourceFileNameLength: {"kind":"UInt32"},
    DestinationFileNameLength: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    FileNameBuffer: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: FILE_INITIATE_REPAIR_OUTPUT_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_INITIATE_REPAIR_OUTPUT_BUFFER = extern struct {
    Hint1: {"kind":"UInt64"},
    Hint2: {"kind":"UInt64"},
    Clsn: {"kind":"UInt64"},
    Status: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SHRINK_VOLUME_REQUEST_TYPES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SHRINK_VOLUME_REQUEST_TYPES = *opaque{
};
// --------------------------------------------------------
// Type: TXFS_ROLLFORWARD_REDO_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TXFS_ROLLFORWARD_REDO_INFORMATION = extern struct {
    LastVirtualClock: Windows.Win32.SystemServices.LARGE_INTEGER,
    LastRedoLsn: {"kind":"UInt64"},
    HighestRecoveryLsn: {"kind":"UInt64"},
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: TXFS_START_RM_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TXFS_START_RM_INFORMATION = extern struct {
    Flags: {"kind":"UInt32"},
    LogContainerSize: {"kind":"UInt64"},
    LogContainerCountMin: {"kind":"UInt32"},
    LogContainerCountMax: {"kind":"UInt32"},
    LogGrowthIncrement: {"kind":"UInt32"},
    LogAutoShrinkPercentage: {"kind":"UInt32"},
    TmLogPathOffset: {"kind":"UInt32"},
    TmLogPathLength: {"kind":"UInt16"},
    LoggingMode: {"kind":"UInt16"},
    LogPathLength: {"kind":"UInt16"},
    Reserved: {"kind":"UInt16"},
    LogPath: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: FILE_FS_PERSISTENT_VOLUME_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_FS_PERSISTENT_VOLUME_INFORMATION = extern struct {
    VolumeFlags: {"kind":"UInt32"},
    FlagMask: {"kind":"UInt32"},
    Version: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST = extern struct {
    RequestLevel: {"kind":"UInt32"},
    RequestFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY = extern struct {
    EntryLength: {"kind":"UInt32"},
    DependencyTypeFlags: {"kind":"UInt32"},
    ProviderSpecificFlags: {"kind":"UInt32"},
    VirtualStorageType: Windows.Win32.VirtualStorage.VIRTUAL_STORAGE_TYPE,
};
// --------------------------------------------------------
// Type: STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY = extern struct {
    EntryLength: {"kind":"UInt32"},
    DependencyTypeFlags: {"kind":"UInt32"},
    ProviderSpecificFlags: {"kind":"UInt32"},
    VirtualStorageType: Windows.Win32.VirtualStorage.VIRTUAL_STORAGE_TYPE,
    AncestorLevel: {"kind":"UInt32"},
    HostVolumeNameOffset: {"kind":"UInt32"},
    HostVolumeNameSize: {"kind":"UInt32"},
    DependentVolumeNameOffset: {"kind":"UInt32"},
    DependentVolumeNameSize: {"kind":"UInt32"},
    RelativePathOffset: {"kind":"UInt32"},
    RelativePathSize: {"kind":"UInt32"},
    DependentDeviceNameOffset: {"kind":"UInt32"},
    DependentDeviceNameSize: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE = extern struct {
    ResponseLevel: {"kind":"UInt32"},
    NumberEntries: {"kind":"UInt32"},
    Anonymous: Windows.Win32.SystemServices.STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: SD_CHANGE_MACHINE_SID_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SD_CHANGE_MACHINE_SID_INPUT = extern struct {
    CurrentMachineSIDOffset: {"kind":"UInt16"},
    CurrentMachineSIDLength: {"kind":"UInt16"},
    NewMachineSIDOffset: {"kind":"UInt16"},
    NewMachineSIDLength: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: SD_CHANGE_MACHINE_SID_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SD_CHANGE_MACHINE_SID_OUTPUT = extern struct {
    NumSDChangedSuccess: {"kind":"UInt64"},
    NumSDChangedFail: {"kind":"UInt64"},
    NumSDUnused: {"kind":"UInt64"},
    NumSDTotal: {"kind":"UInt64"},
    NumMftSDChangedSuccess: {"kind":"UInt64"},
    NumMftSDChangedFail: {"kind":"UInt64"},
    NumMftSDTotal: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: SD_QUERY_STATS_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SD_QUERY_STATS_INPUT = extern struct {
    Reserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SD_QUERY_STATS_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SD_QUERY_STATS_OUTPUT = extern struct {
    SdsStreamSize: {"kind":"UInt64"},
    SdsAllocationSize: {"kind":"UInt64"},
    SiiStreamSize: {"kind":"UInt64"},
    SiiAllocationSize: {"kind":"UInt64"},
    SdhStreamSize: {"kind":"UInt64"},
    SdhAllocationSize: {"kind":"UInt64"},
    NumSDTotal: {"kind":"UInt64"},
    NumSDUnused: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: SD_ENUM_SDS_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SD_ENUM_SDS_INPUT = extern struct {
    StartingOffset: {"kind":"UInt64"},
    MaxSDEntriesToReturn: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: SD_ENUM_SDS_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SD_ENUM_SDS_ENTRY = extern struct {
    Hash: {"kind":"UInt32"},
    SecurityId: {"kind":"UInt32"},
    Offset: {"kind":"UInt64"},
    Length: {"kind":"UInt32"},
    Descriptor: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: SD_ENUM_SDS_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SD_ENUM_SDS_OUTPUT = extern struct {
    NextOffset: {"kind":"UInt64"},
    NumSDEntriesReturned: {"kind":"UInt64"},
    NumSDBytesReturned: {"kind":"UInt64"},
    SDEntry: {"kind":"Array","child": Windows.Win32.SystemServices.SD_ENUM_SDS_ENTRY},
};
// --------------------------------------------------------
// Type: SD_GLOBAL_CHANGE_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SD_GLOBAL_CHANGE_INPUT = extern struct {
    Flags: {"kind":"UInt32"},
    ChangeType: {"kind":"UInt32"},
    Anonymous: Windows.Win32.SystemServices.SD_GLOBAL_CHANGE_INPUT+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: SD_GLOBAL_CHANGE_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SD_GLOBAL_CHANGE_OUTPUT = extern struct {
    Flags: {"kind":"UInt32"},
    ChangeType: {"kind":"UInt32"},
    Anonymous: Windows.Win32.SystemServices.SD_GLOBAL_CHANGE_OUTPUT+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: FILE_TYPE_NOTIFICATION_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_TYPE_NOTIFICATION_INPUT = extern struct {
    Flags: {"kind":"UInt32"},
    NumFileTypeIDs: {"kind":"UInt32"},
    FileTypeID: {"kind":"Array","child": Guid},
};
// --------------------------------------------------------
// Type: CSV_MGMT_LOCK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CSV_MGMT_LOCK = extern struct {
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CSV_QUERY_FILE_REVISION_FILE_ID_128
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CSV_QUERY_FILE_REVISION_FILE_ID_128 = extern struct {
    FileId: Windows.Win32.FileSystem.FILE_ID_128,
    FileRevision: {"kind":"Array","child": {"kind":"Int64"}},
};
// --------------------------------------------------------
// Type: CSVFS_DISK_CONNECTIVITY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CSVFS_DISK_CONNECTIVITY = *opaque{
};
// --------------------------------------------------------
// Type: CSV_QUERY_VOLUME_REDIRECT_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CSV_QUERY_VOLUME_REDIRECT_STATE = extern struct {
    MdsNodeId: {"kind":"UInt32"},
    DsNodeId: {"kind":"UInt32"},
    IsDiskConnected: {"kind":"Byte"},
    ClusterEnableDirectIo: {"kind":"Byte"},
    DiskConnectivity: Windows.Win32.SystemServices.CSVFS_DISK_CONNECTIVITY,
};
// --------------------------------------------------------
// Type: CSV_QUERY_MDS_PATH_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CSV_QUERY_MDS_PATH_V2 = extern struct {
    Version: {"kind":"Int64"},
    RequiredSize: {"kind":"UInt32"},
    MdsNodeId: {"kind":"UInt32"},
    DsNodeId: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    DiskConnectivity: Windows.Win32.SystemServices.CSVFS_DISK_CONNECTIVITY,
    VolumeId: Guid,
    IpAddressOffset: {"kind":"UInt32"},
    IpAddressLength: {"kind":"UInt32"},
    PathOffset: {"kind":"UInt32"},
    PathLength: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: STORAGE_RESERVE_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_RESERVE_ID = *opaque{
};
// --------------------------------------------------------
// Type: QUERY_FILE_LAYOUT_FILTER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QUERY_FILE_LAYOUT_FILTER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: CLUSTER_RANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLUSTER_RANGE = extern struct {
    StartingCluster: Windows.Win32.SystemServices.LARGE_INTEGER,
    ClusterCount: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: FILE_REFERENCE_RANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_REFERENCE_RANGE = extern struct {
    StartingFileReferenceNumber: {"kind":"UInt64"},
    EndingFileReferenceNumber: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: QUERY_FILE_LAYOUT_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QUERY_FILE_LAYOUT_INPUT = extern struct {
    Anonymous: Windows.Win32.SystemServices.QUERY_FILE_LAYOUT_INPUT+_Anonymous_e__Union,
    Flags: {"kind":"UInt32"},
    FilterType: Windows.Win32.SystemServices.QUERY_FILE_LAYOUT_FILTER_TYPE,
    Reserved: {"kind":"UInt32"},
    Filter: Windows.Win32.SystemServices.QUERY_FILE_LAYOUT_INPUT+_Filter_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Filter_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Filter_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: QUERY_FILE_LAYOUT_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QUERY_FILE_LAYOUT_OUTPUT = extern struct {
    FileEntryCount: {"kind":"UInt32"},
    FirstFileOffset: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: FILE_LAYOUT_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_LAYOUT_ENTRY = extern struct {
    Version: {"kind":"UInt32"},
    NextFileOffset: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    FileAttributes: {"kind":"UInt32"},
    FileReferenceNumber: {"kind":"UInt64"},
    FirstNameOffset: {"kind":"UInt32"},
    FirstStreamOffset: {"kind":"UInt32"},
    ExtraInfoOffset: {"kind":"UInt32"},
    ExtraInfoLength: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: FILE_LAYOUT_NAME_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_LAYOUT_NAME_ENTRY = extern struct {
    NextNameOffset: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    ParentFileReferenceNumber: {"kind":"UInt64"},
    FileNameLength: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
    FileName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: FILE_LAYOUT_INFO_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_LAYOUT_INFO_ENTRY = extern struct {
    BasicInformation: Windows.Win32.SystemServices.FILE_LAYOUT_INFO_ENTRY+_BasicInformation_e__Struct,
    OwnerId: {"kind":"UInt32"},
    SecurityId: {"kind":"UInt32"},
    Usn: {"kind":"Int64"},
    StorageReserveId: Windows.Win32.SystemServices.STORAGE_RESERVE_ID,
    // --------------------------------------------------------
    // Type: _BasicInformation_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _BasicInformation_e__Struct = extern struct {
        CreationTime: Windows.Win32.SystemServices.LARGE_INTEGER,
        LastAccessTime: Windows.Win32.SystemServices.LARGE_INTEGER,
        LastWriteTime: Windows.Win32.SystemServices.LARGE_INTEGER,
        ChangeTime: Windows.Win32.SystemServices.LARGE_INTEGER,
        FileAttributes: {"kind":"UInt32"},
    };
};
// --------------------------------------------------------
// Type: STREAM_LAYOUT_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STREAM_LAYOUT_ENTRY = extern struct {
    Version: {"kind":"UInt32"},
    NextStreamOffset: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    ExtentInformationOffset: {"kind":"UInt32"},
    AllocationSize: Windows.Win32.SystemServices.LARGE_INTEGER,
    EndOfFile: Windows.Win32.SystemServices.LARGE_INTEGER,
    StreamInformationOffset: {"kind":"UInt32"},
    AttributeTypeCode: {"kind":"UInt32"},
    AttributeFlags: {"kind":"UInt32"},
    StreamIdentifierLength: {"kind":"UInt32"},
    StreamIdentifier: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: STREAM_EXTENT_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STREAM_EXTENT_ENTRY = extern struct {
    Flags: {"kind":"UInt32"},
    ExtentInformation: Windows.Win32.SystemServices.STREAM_EXTENT_ENTRY+_ExtentInformation_e__Union,
    // --------------------------------------------------------
    // Type: _ExtentInformation_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _ExtentInformation_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX = extern struct {
    EnableIntegrity: {"kind":"Byte"},
    KeepIntegrityStateUnchanged: {"kind":"Byte"},
    Reserved: {"kind":"UInt16"},
    Flags: {"kind":"UInt32"},
    Version: {"kind":"Byte"},
    Reserved2: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: FSCTL_OFFLOAD_READ_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FSCTL_OFFLOAD_READ_INPUT = extern struct {
    Size: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    TokenTimeToLive: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
    FileOffset: {"kind":"UInt64"},
    CopyLength: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: FSCTL_OFFLOAD_READ_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FSCTL_OFFLOAD_READ_OUTPUT = extern struct {
    Size: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    TransferLength: {"kind":"UInt64"},
    Token: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: FSCTL_OFFLOAD_WRITE_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FSCTL_OFFLOAD_WRITE_INPUT = extern struct {
    Size: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    FileOffset: {"kind":"UInt64"},
    CopyLength: {"kind":"UInt64"},
    TransferOffset: {"kind":"UInt64"},
    Token: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: FSCTL_OFFLOAD_WRITE_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FSCTL_OFFLOAD_WRITE_OUTPUT = extern struct {
    Size: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    LengthWritten: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: SET_PURGE_FAILURE_MODE_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SET_PURGE_FAILURE_MODE_INPUT = extern struct {
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: FILE_REGION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_REGION_INFO = extern struct {
    FileOffset: {"kind":"Int64"},
    Length: {"kind":"Int64"},
    Usage: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: FILE_REGION_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_REGION_OUTPUT = extern struct {
    Flags: {"kind":"UInt32"},
    TotalRegionEntryCount: {"kind":"UInt32"},
    RegionEntryCount: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
    Region: {"kind":"Array","child": Windows.Win32.SystemServices.FILE_REGION_INFO},
};
// --------------------------------------------------------
// Type: FILE_REGION_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_REGION_INPUT = extern struct {
    FileOffset: {"kind":"Int64"},
    Length: {"kind":"Int64"},
    DesiredUsage: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: WRITE_USN_REASON_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WRITE_USN_REASON_INPUT = extern struct {
    Flags: {"kind":"UInt32"},
    UsnReasonToWrite: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: FILE_STORAGE_TIER_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FILE_STORAGE_TIER_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: STREAM_INFORMATION_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STREAM_INFORMATION_ENTRY = extern struct {
    Version: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    StreamInformation: Windows.Win32.SystemServices.STREAM_INFORMATION_ENTRY+_StreamInformation,
    // --------------------------------------------------------
    // Type: _StreamInformation
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _StreamInformation = *opaque{
        // --------------------------------------------------------
        // Type: _Ea
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Ea = extern struct {
            Length: {"kind":"UInt16"},
            Flags: {"kind":"UInt16"},
            EaSize: {"kind":"UInt32"},
            EaInformationOffset: {"kind":"UInt32"},
        };
        // --------------------------------------------------------
        // Type: _DataStream
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _DataStream = extern struct {
            Length: {"kind":"UInt16"},
            Flags: {"kind":"UInt16"},
            Reserved: {"kind":"UInt32"},
            Vdl: {"kind":"UInt64"},
        };
        // --------------------------------------------------------
        // Type: _Reparse
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Reparse = extern struct {
            Length: {"kind":"UInt16"},
            Flags: {"kind":"UInt16"},
            ReparseDataSize: {"kind":"UInt32"},
            ReparseDataOffset: {"kind":"UInt32"},
        };
        // --------------------------------------------------------
        // Type: _DesiredStorageClass
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _DesiredStorageClass = extern struct {
            Class: Windows.Win32.SystemServices.FILE_STORAGE_TIER_CLASS,
            Flags: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: FILE_DESIRED_STORAGE_CLASS_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_DESIRED_STORAGE_CLASS_INFORMATION = extern struct {
    Class: Windows.Win32.SystemServices.FILE_STORAGE_TIER_CLASS,
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DUPLICATE_EXTENTS_DATA_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DUPLICATE_EXTENTS_DATA_EX = extern struct {
    Size: {"kind":"UIntPtr"},
    FileHandle: Windows.Win32.SystemServices.HANDLE,
    SourceFileOffset: Windows.Win32.SystemServices.LARGE_INTEGER,
    TargetFileOffset: Windows.Win32.SystemServices.LARGE_INTEGER,
    ByteCount: Windows.Win32.SystemServices.LARGE_INTEGER,
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: REFS_SMR_VOLUME_GC_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const REFS_SMR_VOLUME_GC_STATE = *opaque{
};
// --------------------------------------------------------
// Type: REFS_SMR_VOLUME_INFO_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const REFS_SMR_VOLUME_INFO_OUTPUT = extern struct {
    Version: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    SizeOfRandomlyWritableTier: Windows.Win32.SystemServices.LARGE_INTEGER,
    FreeSpaceInRandomlyWritableTier: Windows.Win32.SystemServices.LARGE_INTEGER,
    SizeofSMRTier: Windows.Win32.SystemServices.LARGE_INTEGER,
    FreeSpaceInSMRTier: Windows.Win32.SystemServices.LARGE_INTEGER,
    UsableFreeSpaceInSMRTier: Windows.Win32.SystemServices.LARGE_INTEGER,
    VolumeGcState: Windows.Win32.SystemServices.REFS_SMR_VOLUME_GC_STATE,
    VolumeGcLastStatus: {"kind":"UInt32"},
    Unused: {"kind":"Array","child": {"kind":"UInt64"}},
};
// --------------------------------------------------------
// Type: REFS_SMR_VOLUME_GC_ACTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const REFS_SMR_VOLUME_GC_ACTION = *opaque{
};
// --------------------------------------------------------
// Type: REFS_SMR_VOLUME_GC_METHOD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const REFS_SMR_VOLUME_GC_METHOD = *opaque{
};
// --------------------------------------------------------
// Type: REFS_SMR_VOLUME_GC_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const REFS_SMR_VOLUME_GC_PARAMETERS = extern struct {
    Version: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    Action: Windows.Win32.SystemServices.REFS_SMR_VOLUME_GC_ACTION,
    Method: Windows.Win32.SystemServices.REFS_SMR_VOLUME_GC_METHOD,
    IoGranularity: {"kind":"UInt32"},
    CompressionFormat: {"kind":"UInt32"},
    Unused: {"kind":"Array","child": {"kind":"UInt64"}},
};
// --------------------------------------------------------
// Type: STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER = extern struct {
    OptimalWriteSize: {"kind":"UInt32"},
    StreamGranularitySize: {"kind":"UInt32"},
    StreamIdMin: {"kind":"UInt32"},
    StreamIdMax: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: STREAMS_ASSOCIATE_ID_INPUT_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STREAMS_ASSOCIATE_ID_INPUT_BUFFER = extern struct {
    Flags: {"kind":"UInt32"},
    StreamId: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: STREAMS_QUERY_ID_OUTPUT_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STREAMS_QUERY_ID_OUTPUT_BUFFER = extern struct {
    StreamId: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: QUERY_BAD_RANGES_INPUT_RANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QUERY_BAD_RANGES_INPUT_RANGE = extern struct {
    StartOffset: {"kind":"UInt64"},
    LengthInBytes: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: QUERY_BAD_RANGES_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QUERY_BAD_RANGES_INPUT = extern struct {
    Flags: {"kind":"UInt32"},
    NumRanges: {"kind":"UInt32"},
    Ranges: {"kind":"Array","child": Windows.Win32.SystemServices.QUERY_BAD_RANGES_INPUT_RANGE},
};
// --------------------------------------------------------
// Type: QUERY_BAD_RANGES_OUTPUT_RANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QUERY_BAD_RANGES_OUTPUT_RANGE = extern struct {
    Flags: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
    StartOffset: {"kind":"UInt64"},
    LengthInBytes: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: QUERY_BAD_RANGES_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QUERY_BAD_RANGES_OUTPUT = extern struct {
    Flags: {"kind":"UInt32"},
    NumBadRanges: {"kind":"UInt32"},
    NextOffsetToLookUp: {"kind":"UInt64"},
    BadRanges: {"kind":"Array","child": Windows.Win32.SystemServices.QUERY_BAD_RANGES_OUTPUT_RANGE},
};
// --------------------------------------------------------
// Type: SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT = extern struct {
    Flags: {"kind":"UInt32"},
    AlignmentShift: {"kind":"UInt32"},
    FileOffsetToAlign: {"kind":"UInt64"},
    FallbackAlignmentShift: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: VIRTUAL_STORAGE_BEHAVIOR_CODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VIRTUAL_STORAGE_BEHAVIOR_CODE = *opaque{
};
// --------------------------------------------------------
// Type: VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT = extern struct {
    Size: {"kind":"UInt32"},
    BehaviorCode: Windows.Win32.SystemServices.VIRTUAL_STORAGE_BEHAVIOR_CODE,
};
// --------------------------------------------------------
// Type: ENCRYPTION_KEY_CTRL_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENCRYPTION_KEY_CTRL_INPUT = extern struct {
    HeaderSize: {"kind":"UInt32"},
    StructureSize: {"kind":"UInt32"},
    KeyOffset: {"kind":"UInt16"},
    KeySize: {"kind":"UInt16"},
    DplLock: {"kind":"UInt32"},
    DplUserId: {"kind":"UInt64"},
    DplCredentialId: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: WOF_EXTERNAL_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WOF_EXTERNAL_INFO = extern struct {
    Version: {"kind":"UInt32"},
    Provider: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: WOF_EXTERNAL_FILE_ID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WOF_EXTERNAL_FILE_ID = extern struct {
    FileId: Windows.Win32.FileSystem.FILE_ID_128,
};
// --------------------------------------------------------
// Type: WOF_VERSION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WOF_VERSION_INFO = extern struct {
    WofVersion: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: WIM_PROVIDER_EXTERNAL_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WIM_PROVIDER_EXTERNAL_INFO = extern struct {
    Version: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    DataSourceId: Windows.Win32.SystemServices.LARGE_INTEGER,
    ResourceHash: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: WIM_PROVIDER_ADD_OVERLAY_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WIM_PROVIDER_ADD_OVERLAY_INPUT = extern struct {
    WimType: {"kind":"UInt32"},
    WimIndex: {"kind":"UInt32"},
    WimFileNameOffset: {"kind":"UInt32"},
    WimFileNameLength: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: WIM_PROVIDER_UPDATE_OVERLAY_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WIM_PROVIDER_UPDATE_OVERLAY_INPUT = extern struct {
    DataSourceId: Windows.Win32.SystemServices.LARGE_INTEGER,
    WimFileNameOffset: {"kind":"UInt32"},
    WimFileNameLength: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: WIM_PROVIDER_REMOVE_OVERLAY_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WIM_PROVIDER_REMOVE_OVERLAY_INPUT = extern struct {
    DataSourceId: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: WIM_PROVIDER_SUSPEND_OVERLAY_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WIM_PROVIDER_SUSPEND_OVERLAY_INPUT = extern struct {
    DataSourceId: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: WIM_PROVIDER_OVERLAY_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WIM_PROVIDER_OVERLAY_ENTRY = extern struct {
    NextEntryOffset: {"kind":"UInt32"},
    DataSourceId: Windows.Win32.SystemServices.LARGE_INTEGER,
    WimGuid: Guid,
    WimFileNameOffset: {"kind":"UInt32"},
    WimType: {"kind":"UInt32"},
    WimIndex: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: FILE_PROVIDER_EXTERNAL_INFO_V0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_PROVIDER_EXTERNAL_INFO_V0 = extern struct {
    Version: {"kind":"UInt32"},
    Algorithm: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: FILE_PROVIDER_EXTERNAL_INFO_V1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_PROVIDER_EXTERNAL_INFO_V1 = extern struct {
    Version: {"kind":"UInt32"},
    Algorithm: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CONTAINER_VOLUME_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CONTAINER_VOLUME_STATE = extern struct {
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CONTAINER_ROOT_INFO_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CONTAINER_ROOT_INFO_INPUT = extern struct {
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CONTAINER_ROOT_INFO_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CONTAINER_ROOT_INFO_OUTPUT = extern struct {
    ContainerRootIdLength: {"kind":"UInt16"},
    ContainerRootId: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: VIRTUALIZATION_INSTANCE_INFO_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIRTUALIZATION_INSTANCE_INFO_INPUT = extern struct {
    NumberOfWorkerThreads: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: VIRTUALIZATION_INSTANCE_INFO_INPUT_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIRTUALIZATION_INSTANCE_INFO_INPUT_EX = extern struct {
    HeaderSize: {"kind":"UInt16"},
    Flags: {"kind":"UInt32"},
    NotificationInfoSize: {"kind":"UInt32"},
    NotificationInfoOffset: {"kind":"UInt16"},
    ProviderMajorVersion: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: VIRTUALIZATION_INSTANCE_INFO_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIRTUALIZATION_INSTANCE_INFO_OUTPUT = extern struct {
    VirtualizationInstanceID: Guid,
};
// --------------------------------------------------------
// Type: GET_FILTER_FILE_IDENTIFIER_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GET_FILTER_FILE_IDENTIFIER_INPUT = extern struct {
    AltitudeLength: {"kind":"UInt16"},
    Altitude: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: GET_FILTER_FILE_IDENTIFIER_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GET_FILTER_FILE_IDENTIFIER_OUTPUT = extern struct {
    FilterFileIdentifierLength: {"kind":"UInt16"},
    FilterFileIdentifier: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: IO_IRP_EXT_TRACK_OFFSET_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IO_IRP_EXT_TRACK_OFFSET_HEADER = extern struct {
    Validation: {"kind":"UInt16"},
    Flags: {"kind":"UInt16"},
    TrackedOffsetCallback: Windows.Win32.SystemServices.PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK,
};
// --------------------------------------------------------
// Type: SCARD_IO_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCARD_IO_REQUEST = extern struct {
    dwProtocol: {"kind":"UInt32"},
    cbPciLength: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SCARD_T0_COMMAND
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCARD_T0_COMMAND = extern struct {
    bCla: {"kind":"Byte"},
    bIns: {"kind":"Byte"},
    bP1: {"kind":"Byte"},
    bP2: {"kind":"Byte"},
    bP3: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: SCARD_T0_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCARD_T0_REQUEST = extern struct {
    ioRequest: Windows.Win32.SystemServices.SCARD_IO_REQUEST,
    bSw1: {"kind":"Byte"},
    bSw2: {"kind":"Byte"},
    Anonymous: Windows.Win32.SystemServices.SCARD_T0_REQUEST+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: SCARD_T1_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCARD_T1_REQUEST = extern struct {
    ioRequest: Windows.Win32.SystemServices.SCARD_IO_REQUEST,
};
// --------------------------------------------------------
// Type: PRINTER_INFO_1A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRINTER_INFO_1A = extern struct {
    Flags: {"kind":"UInt32"},
    pDescription: {"kind""Ptr","child":{"kind":"SByte"}},
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
    pComment: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: PRINTER_INFO_1W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRINTER_INFO_1W = extern struct {
    Flags: {"kind":"UInt32"},
    pDescription: {"kind""Ptr","child":{"kind":"UInt16"}},
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pComment: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: PRINTER_INFO_2A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRINTER_INFO_2A = extern struct {
    pServerName: {"kind""Ptr","child":{"kind":"SByte"}},
    pPrinterName: {"kind""Ptr","child":{"kind":"SByte"}},
    pShareName: {"kind""Ptr","child":{"kind":"SByte"}},
    pPortName: {"kind""Ptr","child":{"kind":"SByte"}},
    pDriverName: {"kind""Ptr","child":{"kind":"SByte"}},
    pComment: {"kind""Ptr","child":{"kind":"SByte"}},
    pLocation: {"kind""Ptr","child":{"kind":"SByte"}},
    pDevMode: {"kind""Ptr","child":Windows.Win32.Xps.DEVMODEA},
    pSepFile: {"kind""Ptr","child":{"kind":"SByte"}},
    pPrintProcessor: {"kind""Ptr","child":{"kind":"SByte"}},
    pDatatype: {"kind""Ptr","child":{"kind":"SByte"}},
    pParameters: {"kind""Ptr","child":{"kind":"SByte"}},
    pSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    Attributes: {"kind":"UInt32"},
    Priority: {"kind":"UInt32"},
    DefaultPriority: {"kind":"UInt32"},
    StartTime: {"kind":"UInt32"},
    UntilTime: {"kind":"UInt32"},
    Status: {"kind":"UInt32"},
    cJobs: {"kind":"UInt32"},
    AveragePPM: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PRINTER_INFO_2W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRINTER_INFO_2W = extern struct {
    pServerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pPrinterName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pShareName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pPortName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDriverName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pComment: {"kind""Ptr","child":{"kind":"UInt16"}},
    pLocation: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDevMode: {"kind""Ptr","child":Windows.Win32.DisplayDevices.DEVMODEW},
    pSepFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    pPrintProcessor: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDatatype: {"kind""Ptr","child":{"kind":"UInt16"}},
    pParameters: {"kind""Ptr","child":{"kind":"UInt16"}},
    pSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    Attributes: {"kind":"UInt32"},
    Priority: {"kind":"UInt32"},
    DefaultPriority: {"kind":"UInt32"},
    StartTime: {"kind":"UInt32"},
    UntilTime: {"kind":"UInt32"},
    Status: {"kind":"UInt32"},
    cJobs: {"kind":"UInt32"},
    AveragePPM: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PRINTER_INFO_3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRINTER_INFO_3 = extern struct {
    pSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: PRINTER_INFO_4A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRINTER_INFO_4A = extern struct {
    pPrinterName: {"kind""Ptr","child":{"kind":"SByte"}},
    pServerName: {"kind""Ptr","child":{"kind":"SByte"}},
    Attributes: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PRINTER_INFO_4W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRINTER_INFO_4W = extern struct {
    pPrinterName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pServerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Attributes: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PRINTER_INFO_5A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRINTER_INFO_5A = extern struct {
    pPrinterName: {"kind""Ptr","child":{"kind":"SByte"}},
    pPortName: {"kind""Ptr","child":{"kind":"SByte"}},
    Attributes: {"kind":"UInt32"},
    DeviceNotSelectedTimeout: {"kind":"UInt32"},
    TransmissionRetryTimeout: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PRINTER_INFO_5W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRINTER_INFO_5W = extern struct {
    pPrinterName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pPortName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Attributes: {"kind":"UInt32"},
    DeviceNotSelectedTimeout: {"kind":"UInt32"},
    TransmissionRetryTimeout: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PRINTER_INFO_6
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRINTER_INFO_6 = extern struct {
    dwStatus: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PRINTER_INFO_7A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRINTER_INFO_7A = extern struct {
    pszObjectGUID: {"kind""Ptr","child":{"kind":"SByte"}},
    dwAction: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PRINTER_INFO_7W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRINTER_INFO_7W = extern struct {
    pszObjectGUID: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwAction: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PRINTER_INFO_8A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRINTER_INFO_8A = extern struct {
    pDevMode: {"kind""Ptr","child":Windows.Win32.Xps.DEVMODEA},
};
// --------------------------------------------------------
// Type: PRINTER_INFO_8W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRINTER_INFO_8W = extern struct {
    pDevMode: {"kind""Ptr","child":Windows.Win32.DisplayDevices.DEVMODEW},
};
// --------------------------------------------------------
// Type: PRINTER_INFO_9A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRINTER_INFO_9A = extern struct {
    pDevMode: {"kind""Ptr","child":Windows.Win32.Xps.DEVMODEA},
};
// --------------------------------------------------------
// Type: PRINTER_INFO_9W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRINTER_INFO_9W = extern struct {
    pDevMode: {"kind""Ptr","child":Windows.Win32.DisplayDevices.DEVMODEW},
};
// --------------------------------------------------------
// Type: JOB_INFO_1A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const JOB_INFO_1A = extern struct {
    JobId: {"kind":"UInt32"},
    pPrinterName: {"kind""Ptr","child":{"kind":"SByte"}},
    pMachineName: {"kind""Ptr","child":{"kind":"SByte"}},
    pUserName: {"kind""Ptr","child":{"kind":"SByte"}},
    pDocument: {"kind""Ptr","child":{"kind":"SByte"}},
    pDatatype: {"kind""Ptr","child":{"kind":"SByte"}},
    pStatus: {"kind""Ptr","child":{"kind":"SByte"}},
    Status: {"kind":"UInt32"},
    Priority: {"kind":"UInt32"},
    Position: {"kind":"UInt32"},
    TotalPages: {"kind":"UInt32"},
    PagesPrinted: {"kind":"UInt32"},
    Submitted: Windows.Win32.WindowsProgramming.SYSTEMTIME,
};
// --------------------------------------------------------
// Type: JOB_INFO_1W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const JOB_INFO_1W = extern struct {
    JobId: {"kind":"UInt32"},
    pPrinterName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pMachineName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pUserName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDocument: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDatatype: {"kind""Ptr","child":{"kind":"UInt16"}},
    pStatus: {"kind""Ptr","child":{"kind":"UInt16"}},
    Status: {"kind":"UInt32"},
    Priority: {"kind":"UInt32"},
    Position: {"kind":"UInt32"},
    TotalPages: {"kind":"UInt32"},
    PagesPrinted: {"kind":"UInt32"},
    Submitted: Windows.Win32.WindowsProgramming.SYSTEMTIME,
};
// --------------------------------------------------------
// Type: JOB_INFO_2A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const JOB_INFO_2A = extern struct {
    JobId: {"kind":"UInt32"},
    pPrinterName: {"kind""Ptr","child":{"kind":"SByte"}},
    pMachineName: {"kind""Ptr","child":{"kind":"SByte"}},
    pUserName: {"kind""Ptr","child":{"kind":"SByte"}},
    pDocument: {"kind""Ptr","child":{"kind":"SByte"}},
    pNotifyName: {"kind""Ptr","child":{"kind":"SByte"}},
    pDatatype: {"kind""Ptr","child":{"kind":"SByte"}},
    pPrintProcessor: {"kind""Ptr","child":{"kind":"SByte"}},
    pParameters: {"kind""Ptr","child":{"kind":"SByte"}},
    pDriverName: {"kind""Ptr","child":{"kind":"SByte"}},
    pDevMode: {"kind""Ptr","child":Windows.Win32.Xps.DEVMODEA},
    pStatus: {"kind""Ptr","child":{"kind":"SByte"}},
    pSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    Status: {"kind":"UInt32"},
    Priority: {"kind":"UInt32"},
    Position: {"kind":"UInt32"},
    StartTime: {"kind":"UInt32"},
    UntilTime: {"kind":"UInt32"},
    TotalPages: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Submitted: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    Time: {"kind":"UInt32"},
    PagesPrinted: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: JOB_INFO_2W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const JOB_INFO_2W = extern struct {
    JobId: {"kind":"UInt32"},
    pPrinterName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pMachineName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pUserName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDocument: {"kind""Ptr","child":{"kind":"UInt16"}},
    pNotifyName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDatatype: {"kind""Ptr","child":{"kind":"UInt16"}},
    pPrintProcessor: {"kind""Ptr","child":{"kind":"UInt16"}},
    pParameters: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDriverName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDevMode: {"kind""Ptr","child":Windows.Win32.DisplayDevices.DEVMODEW},
    pStatus: {"kind""Ptr","child":{"kind":"UInt16"}},
    pSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    Status: {"kind":"UInt32"},
    Priority: {"kind":"UInt32"},
    Position: {"kind":"UInt32"},
    StartTime: {"kind":"UInt32"},
    UntilTime: {"kind":"UInt32"},
    TotalPages: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Submitted: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    Time: {"kind":"UInt32"},
    PagesPrinted: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: JOB_INFO_3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const JOB_INFO_3 = extern struct {
    JobId: {"kind":"UInt32"},
    NextJobId: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: JOB_INFO_4A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const JOB_INFO_4A = extern struct {
    JobId: {"kind":"UInt32"},
    pPrinterName: {"kind""Ptr","child":{"kind":"SByte"}},
    pMachineName: {"kind""Ptr","child":{"kind":"SByte"}},
    pUserName: {"kind""Ptr","child":{"kind":"SByte"}},
    pDocument: {"kind""Ptr","child":{"kind":"SByte"}},
    pNotifyName: {"kind""Ptr","child":{"kind":"SByte"}},
    pDatatype: {"kind""Ptr","child":{"kind":"SByte"}},
    pPrintProcessor: {"kind""Ptr","child":{"kind":"SByte"}},
    pParameters: {"kind""Ptr","child":{"kind":"SByte"}},
    pDriverName: {"kind""Ptr","child":{"kind":"SByte"}},
    pDevMode: {"kind""Ptr","child":Windows.Win32.Xps.DEVMODEA},
    pStatus: {"kind""Ptr","child":{"kind":"SByte"}},
    pSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    Status: {"kind":"UInt32"},
    Priority: {"kind":"UInt32"},
    Position: {"kind":"UInt32"},
    StartTime: {"kind":"UInt32"},
    UntilTime: {"kind":"UInt32"},
    TotalPages: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Submitted: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    Time: {"kind":"UInt32"},
    PagesPrinted: {"kind":"UInt32"},
    SizeHigh: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: JOB_INFO_4W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const JOB_INFO_4W = extern struct {
    JobId: {"kind":"UInt32"},
    pPrinterName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pMachineName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pUserName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDocument: {"kind""Ptr","child":{"kind":"UInt16"}},
    pNotifyName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDatatype: {"kind""Ptr","child":{"kind":"UInt16"}},
    pPrintProcessor: {"kind""Ptr","child":{"kind":"UInt16"}},
    pParameters: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDriverName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDevMode: {"kind""Ptr","child":Windows.Win32.DisplayDevices.DEVMODEW},
    pStatus: {"kind""Ptr","child":{"kind":"UInt16"}},
    pSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    Status: {"kind":"UInt32"},
    Priority: {"kind":"UInt32"},
    Position: {"kind":"UInt32"},
    StartTime: {"kind":"UInt32"},
    UntilTime: {"kind":"UInt32"},
    TotalPages: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Submitted: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    Time: {"kind":"UInt32"},
    PagesPrinted: {"kind":"UInt32"},
    SizeHigh: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: ADDJOB_INFO_1A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ADDJOB_INFO_1A = extern struct {
    Path: {"kind""Ptr","child":{"kind":"SByte"}},
    JobId: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: ADDJOB_INFO_1W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ADDJOB_INFO_1W = extern struct {
    Path: {"kind""Ptr","child":{"kind":"UInt16"}},
    JobId: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DRIVER_INFO_1A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DRIVER_INFO_1A = extern struct {
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: DRIVER_INFO_1W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DRIVER_INFO_1W = extern struct {
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: DRIVER_INFO_2A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DRIVER_INFO_2A = extern struct {
    cVersion: {"kind":"UInt32"},
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"SByte"}},
    pDriverPath: {"kind""Ptr","child":{"kind":"SByte"}},
    pDataFile: {"kind""Ptr","child":{"kind":"SByte"}},
    pConfigFile: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: DRIVER_INFO_2W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DRIVER_INFO_2W = extern struct {
    cVersion: {"kind":"UInt32"},
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDriverPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDataFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    pConfigFile: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: DRIVER_INFO_3A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DRIVER_INFO_3A = extern struct {
    cVersion: {"kind":"UInt32"},
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"SByte"}},
    pDriverPath: {"kind""Ptr","child":{"kind":"SByte"}},
    pDataFile: {"kind""Ptr","child":{"kind":"SByte"}},
    pConfigFile: {"kind""Ptr","child":{"kind":"SByte"}},
    pHelpFile: {"kind""Ptr","child":{"kind":"SByte"}},
    pDependentFiles: {"kind""Ptr","child":{"kind":"SByte"}},
    pMonitorName: {"kind""Ptr","child":{"kind":"SByte"}},
    pDefaultDataType: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: DRIVER_INFO_3W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DRIVER_INFO_3W = extern struct {
    cVersion: {"kind":"UInt32"},
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDriverPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDataFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    pConfigFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    pHelpFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDependentFiles: {"kind""Ptr","child":{"kind":"UInt16"}},
    pMonitorName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDefaultDataType: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: DRIVER_INFO_4A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DRIVER_INFO_4A = extern struct {
    cVersion: {"kind":"UInt32"},
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"SByte"}},
    pDriverPath: {"kind""Ptr","child":{"kind":"SByte"}},
    pDataFile: {"kind""Ptr","child":{"kind":"SByte"}},
    pConfigFile: {"kind""Ptr","child":{"kind":"SByte"}},
    pHelpFile: {"kind""Ptr","child":{"kind":"SByte"}},
    pDependentFiles: {"kind""Ptr","child":{"kind":"SByte"}},
    pMonitorName: {"kind""Ptr","child":{"kind":"SByte"}},
    pDefaultDataType: {"kind""Ptr","child":{"kind":"SByte"}},
    pszzPreviousNames: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: DRIVER_INFO_4W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DRIVER_INFO_4W = extern struct {
    cVersion: {"kind":"UInt32"},
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDriverPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDataFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    pConfigFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    pHelpFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDependentFiles: {"kind""Ptr","child":{"kind":"UInt16"}},
    pMonitorName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDefaultDataType: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszzPreviousNames: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: DRIVER_INFO_5A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DRIVER_INFO_5A = extern struct {
    cVersion: {"kind":"UInt32"},
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"SByte"}},
    pDriverPath: {"kind""Ptr","child":{"kind":"SByte"}},
    pDataFile: {"kind""Ptr","child":{"kind":"SByte"}},
    pConfigFile: {"kind""Ptr","child":{"kind":"SByte"}},
    dwDriverAttributes: {"kind":"UInt32"},
    dwConfigVersion: {"kind":"UInt32"},
    dwDriverVersion: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DRIVER_INFO_5W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DRIVER_INFO_5W = extern struct {
    cVersion: {"kind":"UInt32"},
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDriverPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDataFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    pConfigFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwDriverAttributes: {"kind":"UInt32"},
    dwConfigVersion: {"kind":"UInt32"},
    dwDriverVersion: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DRIVER_INFO_6A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DRIVER_INFO_6A = extern struct {
    cVersion: {"kind":"UInt32"},
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"SByte"}},
    pDriverPath: {"kind""Ptr","child":{"kind":"SByte"}},
    pDataFile: {"kind""Ptr","child":{"kind":"SByte"}},
    pConfigFile: {"kind""Ptr","child":{"kind":"SByte"}},
    pHelpFile: {"kind""Ptr","child":{"kind":"SByte"}},
    pDependentFiles: {"kind""Ptr","child":{"kind":"SByte"}},
    pMonitorName: {"kind""Ptr","child":{"kind":"SByte"}},
    pDefaultDataType: {"kind""Ptr","child":{"kind":"SByte"}},
    pszzPreviousNames: {"kind""Ptr","child":{"kind":"SByte"}},
    ftDriverDate: Windows.Win32.WindowsProgramming.FILETIME,
    dwlDriverVersion: {"kind":"UInt64"},
    pszMfgName: {"kind""Ptr","child":{"kind":"SByte"}},
    pszOEMUrl: {"kind""Ptr","child":{"kind":"SByte"}},
    pszHardwareID: {"kind""Ptr","child":{"kind":"SByte"}},
    pszProvider: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: DRIVER_INFO_6W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DRIVER_INFO_6W = extern struct {
    cVersion: {"kind":"UInt32"},
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDriverPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDataFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    pConfigFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    pHelpFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDependentFiles: {"kind""Ptr","child":{"kind":"UInt16"}},
    pMonitorName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDefaultDataType: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszzPreviousNames: {"kind""Ptr","child":{"kind":"UInt16"}},
    ftDriverDate: Windows.Win32.WindowsProgramming.FILETIME,
    dwlDriverVersion: {"kind":"UInt64"},
    pszMfgName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszOEMUrl: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszHardwareID: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszProvider: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: DRIVER_INFO_8A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DRIVER_INFO_8A = extern struct {
    cVersion: {"kind":"UInt32"},
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"SByte"}},
    pDriverPath: {"kind""Ptr","child":{"kind":"SByte"}},
    pDataFile: {"kind""Ptr","child":{"kind":"SByte"}},
    pConfigFile: {"kind""Ptr","child":{"kind":"SByte"}},
    pHelpFile: {"kind""Ptr","child":{"kind":"SByte"}},
    pDependentFiles: {"kind""Ptr","child":{"kind":"SByte"}},
    pMonitorName: {"kind""Ptr","child":{"kind":"SByte"}},
    pDefaultDataType: {"kind""Ptr","child":{"kind":"SByte"}},
    pszzPreviousNames: {"kind""Ptr","child":{"kind":"SByte"}},
    ftDriverDate: Windows.Win32.WindowsProgramming.FILETIME,
    dwlDriverVersion: {"kind":"UInt64"},
    pszMfgName: {"kind""Ptr","child":{"kind":"SByte"}},
    pszOEMUrl: {"kind""Ptr","child":{"kind":"SByte"}},
    pszHardwareID: {"kind""Ptr","child":{"kind":"SByte"}},
    pszProvider: {"kind""Ptr","child":{"kind":"SByte"}},
    pszPrintProcessor: {"kind""Ptr","child":{"kind":"SByte"}},
    pszVendorSetup: {"kind""Ptr","child":{"kind":"SByte"}},
    pszzColorProfiles: {"kind""Ptr","child":{"kind":"SByte"}},
    pszInfPath: {"kind""Ptr","child":{"kind":"SByte"}},
    dwPrinterDriverAttributes: {"kind":"UInt32"},
    pszzCoreDriverDependencies: {"kind""Ptr","child":{"kind":"SByte"}},
    ftMinInboxDriverVerDate: Windows.Win32.WindowsProgramming.FILETIME,
    dwlMinInboxDriverVerVersion: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: DRIVER_INFO_8W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DRIVER_INFO_8W = extern struct {
    cVersion: {"kind":"UInt32"},
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDriverPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDataFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    pConfigFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    pHelpFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDependentFiles: {"kind""Ptr","child":{"kind":"UInt16"}},
    pMonitorName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDefaultDataType: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszzPreviousNames: {"kind""Ptr","child":{"kind":"UInt16"}},
    ftDriverDate: Windows.Win32.WindowsProgramming.FILETIME,
    dwlDriverVersion: {"kind":"UInt64"},
    pszMfgName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszOEMUrl: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszHardwareID: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszProvider: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszPrintProcessor: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszVendorSetup: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszzColorProfiles: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszInfPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwPrinterDriverAttributes: {"kind":"UInt32"},
    pszzCoreDriverDependencies: {"kind""Ptr","child":{"kind":"UInt16"}},
    ftMinInboxDriverVerDate: Windows.Win32.WindowsProgramming.FILETIME,
    dwlMinInboxDriverVerVersion: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: DOC_INFO_1A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOC_INFO_1A = extern struct {
    pDocName: {"kind""Ptr","child":{"kind":"SByte"}},
    pOutputFile: {"kind""Ptr","child":{"kind":"SByte"}},
    pDatatype: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: DOC_INFO_1W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOC_INFO_1W = extern struct {
    pDocName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pOutputFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDatatype: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: FORM_INFO_1A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FORM_INFO_1A = extern struct {
    Flags: {"kind":"UInt32"},
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
    Size: Windows.Win32.DisplayDevices.SIZE,
    ImageableArea: Windows.Win32.DisplayDevices.RECTL,
};
// --------------------------------------------------------
// Type: FORM_INFO_1W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FORM_INFO_1W = extern struct {
    Flags: {"kind":"UInt32"},
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Size: Windows.Win32.DisplayDevices.SIZE,
    ImageableArea: Windows.Win32.DisplayDevices.RECTL,
};
// --------------------------------------------------------
// Type: FORM_INFO_2A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FORM_INFO_2A = extern struct {
    Flags: {"kind":"UInt32"},
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
    Size: Windows.Win32.DisplayDevices.SIZE,
    ImageableArea: Windows.Win32.DisplayDevices.RECTL,
    pKeyword: {"kind""Ptr","child":{"kind":"SByte"}},
    StringType: {"kind":"UInt32"},
    pMuiDll: {"kind""Ptr","child":{"kind":"SByte"}},
    dwResourceId: {"kind":"UInt32"},
    pDisplayName: {"kind""Ptr","child":{"kind":"SByte"}},
    wLangId: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: FORM_INFO_2W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FORM_INFO_2W = extern struct {
    Flags: {"kind":"UInt32"},
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Size: Windows.Win32.DisplayDevices.SIZE,
    ImageableArea: Windows.Win32.DisplayDevices.RECTL,
    pKeyword: {"kind""Ptr","child":{"kind":"SByte"}},
    StringType: {"kind":"UInt32"},
    pMuiDll: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwResourceId: {"kind":"UInt32"},
    pDisplayName: {"kind""Ptr","child":{"kind":"UInt16"}},
    wLangId: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: DOC_INFO_2A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOC_INFO_2A = extern struct {
    pDocName: {"kind""Ptr","child":{"kind":"SByte"}},
    pOutputFile: {"kind""Ptr","child":{"kind":"SByte"}},
    pDatatype: {"kind""Ptr","child":{"kind":"SByte"}},
    dwMode: {"kind":"UInt32"},
    JobId: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DOC_INFO_2W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOC_INFO_2W = extern struct {
    pDocName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pOutputFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDatatype: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwMode: {"kind":"UInt32"},
    JobId: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DOC_INFO_3A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOC_INFO_3A = extern struct {
    pDocName: {"kind""Ptr","child":{"kind":"SByte"}},
    pOutputFile: {"kind""Ptr","child":{"kind":"SByte"}},
    pDatatype: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DOC_INFO_3W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOC_INFO_3W = extern struct {
    pDocName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pOutputFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDatatype: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PRINTPROCESSOR_INFO_1A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRINTPROCESSOR_INFO_1A = extern struct {
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: PRINTPROCESSOR_INFO_1W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRINTPROCESSOR_INFO_1W = extern struct {
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: PRINTPROCESSOR_CAPS_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRINTPROCESSOR_CAPS_1 = extern struct {
    dwLevel: {"kind":"UInt32"},
    dwNupOptions: {"kind":"UInt32"},
    dwPageOrderFlags: {"kind":"UInt32"},
    dwNumberOfCopies: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PRINTPROCESSOR_CAPS_2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRINTPROCESSOR_CAPS_2 = extern struct {
    dwLevel: {"kind":"UInt32"},
    dwNupOptions: {"kind":"UInt32"},
    dwPageOrderFlags: {"kind":"UInt32"},
    dwNumberOfCopies: {"kind":"UInt32"},
    dwDuplexHandlingCaps: {"kind":"UInt32"},
    dwNupDirectionCaps: {"kind":"UInt32"},
    dwNupBorderCaps: {"kind":"UInt32"},
    dwBookletHandlingCaps: {"kind":"UInt32"},
    dwScalingCaps: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PORT_INFO_1A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PORT_INFO_1A = extern struct {
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: PORT_INFO_1W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PORT_INFO_1W = extern struct {
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: PORT_INFO_2A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PORT_INFO_2A = extern struct {
    pPortName: {"kind""Ptr","child":{"kind":"SByte"}},
    pMonitorName: {"kind""Ptr","child":{"kind":"SByte"}},
    pDescription: {"kind""Ptr","child":{"kind":"SByte"}},
    fPortType: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PORT_INFO_2W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PORT_INFO_2W = extern struct {
    pPortName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pMonitorName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDescription: {"kind""Ptr","child":{"kind":"UInt16"}},
    fPortType: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PORT_INFO_3A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PORT_INFO_3A = extern struct {
    dwStatus: {"kind":"UInt32"},
    pszStatus: {"kind""Ptr","child":{"kind":"SByte"}},
    dwSeverity: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PORT_INFO_3W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PORT_INFO_3W = extern struct {
    dwStatus: {"kind":"UInt32"},
    pszStatus: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwSeverity: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MONITOR_INFO_1A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MONITOR_INFO_1A = extern struct {
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: MONITOR_INFO_1W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MONITOR_INFO_1W = extern struct {
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: MONITOR_INFO_2A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MONITOR_INFO_2A = extern struct {
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"SByte"}},
    pDLLName: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: MONITOR_INFO_2W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MONITOR_INFO_2W = extern struct {
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDLLName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: DATATYPES_INFO_1A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DATATYPES_INFO_1A = extern struct {
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: DATATYPES_INFO_1W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DATATYPES_INFO_1W = extern struct {
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: PRINTER_DEFAULTSA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRINTER_DEFAULTSA = extern struct {
    pDatatype: {"kind""Ptr","child":{"kind":"SByte"}},
    pDevMode: {"kind""Ptr","child":Windows.Win32.Xps.DEVMODEA},
    DesiredAccess: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PRINTER_DEFAULTSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRINTER_DEFAULTSW = extern struct {
    pDatatype: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDevMode: {"kind""Ptr","child":Windows.Win32.DisplayDevices.DEVMODEW},
    DesiredAccess: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PRINTER_ENUM_VALUESA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRINTER_ENUM_VALUESA = extern struct {
    pValueName: {"kind""Ptr","child":{"kind":"SByte"}},
    cbValueName: {"kind":"UInt32"},
    dwType: {"kind":"UInt32"},
    pData: {"kind""Ptr","child":{"kind":"Byte"}},
    cbData: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PRINTER_ENUM_VALUESW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRINTER_ENUM_VALUESW = extern struct {
    pValueName: {"kind""Ptr","child":{"kind":"UInt16"}},
    cbValueName: {"kind":"UInt32"},
    dwType: {"kind":"UInt32"},
    pData: {"kind""Ptr","child":{"kind":"Byte"}},
    cbData: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PRINTER_NOTIFY_OPTIONS_TYPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRINTER_NOTIFY_OPTIONS_TYPE = extern struct {
    Type: {"kind":"UInt16"},
    Reserved0: {"kind":"UInt16"},
    Reserved1: {"kind":"UInt32"},
    Reserved2: {"kind":"UInt32"},
    Count: {"kind":"UInt32"},
    pFields: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: PRINTER_NOTIFY_OPTIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRINTER_NOTIFY_OPTIONS = extern struct {
    Version: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    Count: {"kind":"UInt32"},
    pTypes: {"kind""Ptr","child":Windows.Win32.SystemServices.PRINTER_NOTIFY_OPTIONS_TYPE},
};
// --------------------------------------------------------
// Type: PRINTER_NOTIFY_INFO_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRINTER_NOTIFY_INFO_DATA = extern struct {
    Type: {"kind":"UInt16"},
    Field: {"kind":"UInt16"},
    Reserved: {"kind":"UInt32"},
    Id: {"kind":"UInt32"},
    NotifyData: Windows.Win32.SystemServices.PRINTER_NOTIFY_INFO_DATA+_NotifyData_e__Union,
    // --------------------------------------------------------
    // Type: _NotifyData_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _NotifyData_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Data_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Data_e__Struct = extern struct {
            cbBuf: {"kind":"UInt32"},
            pBuf: {"kind""Ptr","child":{"kind":"Void"}},
        };
    };
};
// --------------------------------------------------------
// Type: PRINTER_NOTIFY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRINTER_NOTIFY_INFO = extern struct {
    Version: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    Count: {"kind":"UInt32"},
    aData: {"kind":"Array","child": Windows.Win32.SystemServices.PRINTER_NOTIFY_INFO_DATA},
};
// --------------------------------------------------------
// Type: BINARY_CONTAINER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BINARY_CONTAINER = extern struct {
    cbBuf: {"kind":"UInt32"},
    pData: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: BIDI_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BIDI_DATA = extern struct {
    dwBidiType: {"kind":"UInt32"},
    u: Windows.Win32.SystemServices.BIDI_DATA+_u_e__Union,
    // --------------------------------------------------------
    // Type: _u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: BIDI_REQUEST_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BIDI_REQUEST_DATA = extern struct {
    dwReqNumber: {"kind":"UInt32"},
    pSchema: {"kind""Ptr","child":{"kind":"UInt16"}},
    data: Windows.Win32.SystemServices.BIDI_DATA,
};
// --------------------------------------------------------
// Type: BIDI_REQUEST_CONTAINER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BIDI_REQUEST_CONTAINER = extern struct {
    Version: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    Count: {"kind":"UInt32"},
    aData: {"kind":"Array","child": Windows.Win32.SystemServices.BIDI_REQUEST_DATA},
};
// --------------------------------------------------------
// Type: BIDI_RESPONSE_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BIDI_RESPONSE_DATA = extern struct {
    dwResult: {"kind":"UInt32"},
    dwReqNumber: {"kind":"UInt32"},
    pSchema: {"kind""Ptr","child":{"kind":"UInt16"}},
    data: Windows.Win32.SystemServices.BIDI_DATA,
};
// --------------------------------------------------------
// Type: BIDI_RESPONSE_CONTAINER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BIDI_RESPONSE_CONTAINER = extern struct {
    Version: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    Count: {"kind":"UInt32"},
    aData: {"kind":"Array","child": Windows.Win32.SystemServices.BIDI_RESPONSE_DATA},
};
// --------------------------------------------------------
// Type: BIDI_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BIDI_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: PROVIDOR_INFO_1A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROVIDOR_INFO_1A = extern struct {
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"SByte"}},
    pDLLName: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: PROVIDOR_INFO_1W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROVIDOR_INFO_1W = extern struct {
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDLLName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: PROVIDOR_INFO_2A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROVIDOR_INFO_2A = extern struct {
    pOrder: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: PROVIDOR_INFO_2W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROVIDOR_INFO_2W = extern struct {
    pOrder: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: PRINTER_OPTION_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PRINTER_OPTION_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: PRINTER_OPTIONSA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRINTER_OPTIONSA = extern struct {
    cbSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PRINTER_OPTIONSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRINTER_OPTIONSW = extern struct {
    cbSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PRINTER_CONNECTION_INFO_1A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRINTER_CONNECTION_INFO_1A = extern struct {
    dwFlags: {"kind":"UInt32"},
    pszDriverName: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: PRINTER_CONNECTION_INFO_1W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRINTER_CONNECTION_INFO_1W = extern struct {
    dwFlags: {"kind":"UInt32"},
    pszDriverName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: CORE_PRINTER_DRIVERA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CORE_PRINTER_DRIVERA = extern struct {
    CoreDriverGUID: Guid,
    ftDriverDate: Windows.Win32.WindowsProgramming.FILETIME,
    dwlDriverVersion: {"kind":"UInt64"},
    szPackageID: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: CORE_PRINTER_DRIVERW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CORE_PRINTER_DRIVERW = extern struct {
    CoreDriverGUID: Guid,
    ftDriverDate: Windows.Win32.WindowsProgramming.FILETIME,
    dwlDriverVersion: {"kind":"UInt64"},
    szPackageID: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: EPrintPropertyType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EPrintPropertyType = *opaque{
};
// --------------------------------------------------------
// Type: EPrintXPSJobProgress
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EPrintXPSJobProgress = *opaque{
};
// --------------------------------------------------------
// Type: EPrintXPSJobOperation
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EPrintXPSJobOperation = *opaque{
};
// --------------------------------------------------------
// Type: PrintPropertyValue
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PrintPropertyValue = extern struct {
    ePropertyType: Windows.Win32.SystemServices.EPrintPropertyType,
    value: Windows.Win32.SystemServices.PrintPropertyValue+_value_e__Union,
    // --------------------------------------------------------
    // Type: _value_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _value_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _propertyBlob_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _propertyBlob_e__Struct = extern struct {
            cbBuf: {"kind":"UInt32"},
            pBuf: {"kind""Ptr","child":{"kind":"Void"}},
        };
    };
};
// --------------------------------------------------------
// Type: PrintNamedProperty
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PrintNamedProperty = extern struct {
    propertyName: {"kind""Ptr","child":{"kind":"UInt16"}},
    propertyValue: Windows.Win32.SystemServices.PrintPropertyValue,
};
// --------------------------------------------------------
// Type: PrintPropertiesCollection
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PrintPropertiesCollection = extern struct {
    numberOfProperties: {"kind":"UInt32"},
    propertiesCollection: {"kind""Ptr","child":Windows.Win32.SystemServices.PrintNamedProperty},
};
// --------------------------------------------------------
// Type: PRINT_EXECUTION_CONTEXT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PRINT_EXECUTION_CONTEXT = *opaque{
};
// --------------------------------------------------------
// Type: PRINT_EXECUTION_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRINT_EXECUTION_DATA = extern struct {
    context: Windows.Win32.SystemServices.PRINT_EXECUTION_CONTEXT,
    clientAppPID: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IServiceProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IServiceProvider = *opaque{
    // TODO: Method 'QueryService'
};
// --------------------------------------------------------
// Type: MODEMDEVCAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MODEMDEVCAPS = extern struct {
    dwActualSize: {"kind":"UInt32"},
    dwRequiredSize: {"kind":"UInt32"},
    dwDevSpecificOffset: {"kind":"UInt32"},
    dwDevSpecificSize: {"kind":"UInt32"},
    dwModemProviderVersion: {"kind":"UInt32"},
    dwModemManufacturerOffset: {"kind":"UInt32"},
    dwModemManufacturerSize: {"kind":"UInt32"},
    dwModemModelOffset: {"kind":"UInt32"},
    dwModemModelSize: {"kind":"UInt32"},
    dwModemVersionOffset: {"kind":"UInt32"},
    dwModemVersionSize: {"kind":"UInt32"},
    dwDialOptions: {"kind":"UInt32"},
    dwCallSetupFailTimer: {"kind":"UInt32"},
    dwInactivityTimeout: {"kind":"UInt32"},
    dwSpeakerVolume: {"kind":"UInt32"},
    dwSpeakerMode: {"kind":"UInt32"},
    dwModemOptions: {"kind":"UInt32"},
    dwMaxDTERate: {"kind":"UInt32"},
    dwMaxDCERate: {"kind":"UInt32"},
    abVariablePortion: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: MODEMSETTINGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MODEMSETTINGS = extern struct {
    dwActualSize: {"kind":"UInt32"},
    dwRequiredSize: {"kind":"UInt32"},
    dwDevSpecificOffset: {"kind":"UInt32"},
    dwDevSpecificSize: {"kind":"UInt32"},
    dwCallSetupFailTimer: {"kind":"UInt32"},
    dwInactivityTimeout: {"kind":"UInt32"},
    dwSpeakerVolume: {"kind":"UInt32"},
    dwSpeakerMode: {"kind":"UInt32"},
    dwPreferredModemOptions: {"kind":"UInt32"},
    dwNegotiatedModemOptions: {"kind":"UInt32"},
    dwNegotiatedDCERate: {"kind":"UInt32"},
    abVariablePortion: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: DISPATCHERQUEUE_THREAD_APARTMENTTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DISPATCHERQUEUE_THREAD_APARTMENTTYPE = *opaque{
};
// --------------------------------------------------------
// Type: DISPATCHERQUEUE_THREAD_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DISPATCHERQUEUE_THREAD_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DispatcherQueueOptions
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DispatcherQueueOptions = extern struct {
    dwSize: {"kind":"UInt32"},
    threadType: Windows.Win32.SystemServices.DISPATCHERQUEUE_THREAD_TYPE,
    apartmentType: Windows.Win32.SystemServices.DISPATCHERQUEUE_THREAD_APARTMENTTYPE,
};
// --------------------------------------------------------
// Type: VDS_STORAGE_IDENTIFIER_CODE_SET
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_STORAGE_IDENTIFIER_CODE_SET = *opaque{
};
// --------------------------------------------------------
// Type: VDS_STORAGE_IDENTIFIER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_STORAGE_IDENTIFIER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: VDS_STORAGE_BUS_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_STORAGE_BUS_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: VDS_STORAGE_IDENTIFIER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_STORAGE_IDENTIFIER = extern struct {
    m_CodeSet: Windows.Win32.SystemServices.VDS_STORAGE_IDENTIFIER_CODE_SET,
    m_Type: Windows.Win32.SystemServices.VDS_STORAGE_IDENTIFIER_TYPE,
    m_cbIdentifier: {"kind":"UInt32"},
    m_rgbIdentifier: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: VDS_STORAGE_DEVICE_ID_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_STORAGE_DEVICE_ID_DESCRIPTOR = extern struct {
    m_version: {"kind":"UInt32"},
    m_cIdentifiers: {"kind":"UInt32"},
    m_rgIdentifiers: {"kind""Ptr","child":Windows.Win32.SystemServices.VDS_STORAGE_IDENTIFIER},
};
// --------------------------------------------------------
// Type: VDS_INTERCONNECT_ADDRESS_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_INTERCONNECT_ADDRESS_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: VDS_INTERCONNECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_INTERCONNECT = extern struct {
    m_addressType: Windows.Win32.SystemServices.VDS_INTERCONNECT_ADDRESS_TYPE,
    m_cbPort: {"kind":"UInt32"},
    m_pbPort: {"kind""Ptr","child":{"kind":"Byte"}},
    m_cbAddress: {"kind":"UInt32"},
    m_pbAddress: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: VDS_LUN_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_LUN_INFORMATION = extern struct {
    m_version: {"kind":"UInt32"},
    m_DeviceType: {"kind":"Byte"},
    m_DeviceTypeModifier: {"kind":"Byte"},
    m_bCommandQueueing: Windows.Win32.SystemServices.BOOL,
    m_BusType: Windows.Win32.SystemServices.VDS_STORAGE_BUS_TYPE,
    m_szVendorId: {"kind""Ptr","child":{"kind":"SByte"}},
    m_szProductId: {"kind""Ptr","child":{"kind":"SByte"}},
    m_szProductRevision: {"kind""Ptr","child":{"kind":"SByte"}},
    m_szSerialNumber: {"kind""Ptr","child":{"kind":"SByte"}},
    m_diskSignature: Guid,
    m_deviceIdDescriptor: Windows.Win32.SystemServices.VDS_STORAGE_DEVICE_ID_DESCRIPTOR,
    m_cInterconnects: {"kind":"UInt32"},
    m_rgInterconnects: {"kind""Ptr","child":Windows.Win32.SystemServices.VDS_INTERCONNECT},
};
// --------------------------------------------------------
// Type: VDS_OBJECT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_OBJECT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: VDS_PROVIDER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_PROVIDER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: VDS_PROVIDER_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_PROVIDER_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: VDS_RECOVER_ACTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_RECOVER_ACTION = *opaque{
};
// --------------------------------------------------------
// Type: VDS_NOTIFICATION_TARGET_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_NOTIFICATION_TARGET_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: VDS_PACK_NOTIFICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_PACK_NOTIFICATION = extern struct {
    ulEvent: {"kind":"UInt32"},
    packId: Guid,
};
// --------------------------------------------------------
// Type: VDS_DISK_NOTIFICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_DISK_NOTIFICATION = extern struct {
    ulEvent: {"kind":"UInt32"},
    diskId: Guid,
};
// --------------------------------------------------------
// Type: VDS_VOLUME_NOTIFICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_VOLUME_NOTIFICATION = extern struct {
    ulEvent: {"kind":"UInt32"},
    volumeId: Guid,
    plexId: Guid,
    ulPercentCompleted: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: VDS_PARTITION_NOTIFICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_PARTITION_NOTIFICATION = extern struct {
    ulEvent: {"kind":"UInt32"},
    diskId: Guid,
    ullOffset: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: VDS_SERVICE_NOTIFICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_SERVICE_NOTIFICATION = extern struct {
    ulEvent: {"kind":"UInt32"},
    action: Windows.Win32.SystemServices.VDS_RECOVER_ACTION,
};
// --------------------------------------------------------
// Type: VDS_DRIVE_LETTER_NOTIFICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_DRIVE_LETTER_NOTIFICATION = extern struct {
    ulEvent: {"kind":"UInt32"},
    wcLetter: {"kind":"UInt16"},
    volumeId: Guid,
};
// --------------------------------------------------------
// Type: VDS_FILE_SYSTEM_NOTIFICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_FILE_SYSTEM_NOTIFICATION = extern struct {
    ulEvent: {"kind":"UInt32"},
    volumeId: Guid,
    dwPercentCompleted: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: VDS_MOUNT_POINT_NOTIFICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_MOUNT_POINT_NOTIFICATION = extern struct {
    ulEvent: {"kind":"UInt32"},
    volumeId: Guid,
};
// --------------------------------------------------------
// Type: VDS_SUB_SYSTEM_NOTIFICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_SUB_SYSTEM_NOTIFICATION = extern struct {
    ulEvent: {"kind":"UInt32"},
    subSystemId: Guid,
};
// --------------------------------------------------------
// Type: VDS_CONTROLLER_NOTIFICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_CONTROLLER_NOTIFICATION = extern struct {
    ulEvent: {"kind":"UInt32"},
    controllerId: Guid,
};
// --------------------------------------------------------
// Type: VDS_DRIVE_NOTIFICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_DRIVE_NOTIFICATION = extern struct {
    ulEvent: {"kind":"UInt32"},
    driveId: Guid,
};
// --------------------------------------------------------
// Type: VDS_LUN_NOTIFICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_LUN_NOTIFICATION = extern struct {
    ulEvent: {"kind":"UInt32"},
    LunId: Guid,
};
// --------------------------------------------------------
// Type: VDS_PORT_NOTIFICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_PORT_NOTIFICATION = extern struct {
    ulEvent: {"kind":"UInt32"},
    portId: Guid,
};
// --------------------------------------------------------
// Type: VDS_PORTAL_NOTIFICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_PORTAL_NOTIFICATION = extern struct {
    ulEvent: {"kind":"UInt32"},
    portalId: Guid,
};
// --------------------------------------------------------
// Type: VDS_TARGET_NOTIFICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_TARGET_NOTIFICATION = extern struct {
    ulEvent: {"kind":"UInt32"},
    targetId: Guid,
};
// --------------------------------------------------------
// Type: VDS_PORTAL_GROUP_NOTIFICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_PORTAL_GROUP_NOTIFICATION = extern struct {
    ulEvent: {"kind":"UInt32"},
    portalGroupId: Guid,
};
// --------------------------------------------------------
// Type: VDS_NOTIFICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_NOTIFICATION = extern struct {
    objectType: Windows.Win32.SystemServices.VDS_NOTIFICATION_TARGET_TYPE,
    Anonymous: Windows.Win32.SystemServices.VDS_NOTIFICATION+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: VDS_ASYNC_OUTPUT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_ASYNC_OUTPUT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: VDS_ASYNC_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_ASYNC_OUTPUT = extern struct {
    type: Windows.Win32.SystemServices.VDS_ASYNC_OUTPUT_TYPE,
    Anonymous: Windows.Win32.SystemServices.VDS_ASYNC_OUTPUT+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _cpg
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _cpg = extern struct {
            pPortalGroupUnk: Windows.Win32.Com.IUnknown,
        };
        // --------------------------------------------------------
        // Type: _cl
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _cl = extern struct {
            pLunUnk: Windows.Win32.Com.IUnknown,
        };
        // --------------------------------------------------------
        // Type: _bvp
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _bvp = extern struct {
            pVolumeUnk: Windows.Win32.Com.IUnknown,
        };
        // --------------------------------------------------------
        // Type: _cp
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _cp = extern struct {
            ullOffset: {"kind":"UInt64"},
            volumeId: Guid,
        };
        // --------------------------------------------------------
        // Type: _ct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _ct = extern struct {
            pTargetUnk: Windows.Win32.Com.IUnknown,
        };
        // --------------------------------------------------------
        // Type: _cv
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _cv = extern struct {
            pVolumeUnk: Windows.Win32.Com.IUnknown,
        };
        // --------------------------------------------------------
        // Type: _cvd
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _cvd = extern struct {
            pVDiskUnk: Windows.Win32.Com.IUnknown,
        };
        // --------------------------------------------------------
        // Type: _sv
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _sv = extern struct {
            ullReclaimedBytes: {"kind":"UInt64"},
        };
    };
};
// --------------------------------------------------------
// Type: VDS_IPADDRESS_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_IPADDRESS_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: VDS_HEALTH
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_HEALTH = *opaque{
};
// --------------------------------------------------------
// Type: VDS_TRANSITION_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_TRANSITION_STATE = *opaque{
};
// --------------------------------------------------------
// Type: VDS_FILE_SYSTEM_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_FILE_SYSTEM_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: VDS_HBAPORT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_HBAPORT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: VDS_HBAPORT_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_HBAPORT_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: VDS_HBAPORT_SPEED_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_HBAPORT_SPEED_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: VDS_PATH_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_PATH_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: VDS_LOADBALANCE_POLICY_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_LOADBALANCE_POLICY_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: VDS_PROVIDER_LBSUPPORT_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_PROVIDER_LBSUPPORT_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: VDS_VERSION_SUPPORT_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_VERSION_SUPPORT_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: VDS_HWPROVIDER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_HWPROVIDER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: VDS_ISCSI_LOGIN_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_ISCSI_LOGIN_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: VDS_ISCSI_AUTH_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_ISCSI_AUTH_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: VDS_ISCSI_IPSEC_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_ISCSI_IPSEC_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: VDS_ISCSI_LOGIN_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_ISCSI_LOGIN_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: VDS_PATH_ID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_PATH_ID = extern struct {
    ullSourceId: {"kind":"UInt64"},
    ullPathId: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: VDS_WWN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_WWN = extern struct {
    rguchWwn: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: VDS_IPADDRESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_IPADDRESS = extern struct {
    type: Windows.Win32.SystemServices.VDS_IPADDRESS_TYPE,
    ipv4Address: {"kind":"UInt32"},
    ipv6Address: {"kind":"Array","child": {"kind":"Byte"}},
    ulIpv6FlowInfo: {"kind":"UInt32"},
    ulIpv6ScopeId: {"kind":"UInt32"},
    wszTextAddress: {"kind":"Array","child": {"kind":"UInt16"}},
    ulPort: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: VDS_ISCSI_IPSEC_KEY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_ISCSI_IPSEC_KEY = extern struct {
    pKey: {"kind""Ptr","child":{"kind":"Byte"}},
    ulKeySize: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: VDS_ISCSI_SHARED_SECRET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_ISCSI_SHARED_SECRET = extern struct {
    pSharedSecret: {"kind""Ptr","child":{"kind":"Byte"}},
    ulSharedSecretSize: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: VDS_HBAPORT_PROP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_HBAPORT_PROP = extern struct {
    id: Guid,
    wwnNode: Windows.Win32.SystemServices.VDS_WWN,
    wwnPort: Windows.Win32.SystemServices.VDS_WWN,
    type: Windows.Win32.SystemServices.VDS_HBAPORT_TYPE,
    status: Windows.Win32.SystemServices.VDS_HBAPORT_STATUS,
    ulPortSpeed: {"kind":"UInt32"},
    ulSupportedPortSpeed: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: VDS_ISCSI_INITIATOR_ADAPTER_PROP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_ISCSI_INITIATOR_ADAPTER_PROP = extern struct {
    id: Guid,
    pwszName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: VDS_ISCSI_INITIATOR_PORTAL_PROP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_ISCSI_INITIATOR_PORTAL_PROP = extern struct {
    id: Guid,
    address: Windows.Win32.SystemServices.VDS_IPADDRESS,
    ulPortIndex: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: VDS_PROVIDER_PROP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_PROVIDER_PROP = extern struct {
    id: Guid,
    pwszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    guidVersionId: Guid,
    pwszVersion: {"kind""Ptr","child":{"kind":"UInt16"}},
    type: Windows.Win32.SystemServices.VDS_PROVIDER_TYPE,
    ulFlags: {"kind":"UInt32"},
    ulStripeSizeFlags: {"kind":"UInt32"},
    sRebuildPriority: {"kind":"Int16"},
};
// --------------------------------------------------------
// Type: VDS_PATH_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_PATH_INFO = extern struct {
    pathId: Windows.Win32.SystemServices.VDS_PATH_ID,
    type: Windows.Win32.SystemServices.VDS_HWPROVIDER_TYPE,
    status: Windows.Win32.SystemServices.VDS_PATH_STATUS,
    Anonymous1: Windows.Win32.SystemServices.VDS_PATH_INFO+_Anonymous1_e__Union,
    Anonymous2: Windows.Win32.SystemServices.VDS_PATH_INFO+_Anonymous2_e__Union,
    Anonymous3: Windows.Win32.SystemServices.VDS_PATH_INFO+_Anonymous3_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous3_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous3_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: VDS_PATH_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_PATH_POLICY = extern struct {
    pathId: Windows.Win32.SystemServices.VDS_PATH_ID,
    bPrimaryPath: Windows.Win32.SystemServices.BOOL,
    ulWeight: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IEnumVdsObject
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumVdsObject = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IVdsAsync
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVdsAsync = *opaque{
    // TODO: Method 'Cancel'
    // TODO: Method 'Wait'
    // TODO: Method 'QueryStatus'
};
// --------------------------------------------------------
// Type: IVdsAdviseSink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVdsAdviseSink = *opaque{
    // TODO: Method 'OnNotify'
};
// --------------------------------------------------------
// Type: IVdsProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVdsProvider = *opaque{
    // TODO: Method 'GetProperties'
};
// --------------------------------------------------------
// Type: IVdsProviderSupport
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVdsProviderSupport = *opaque{
    // TODO: Method 'GetVersionSupport'
};
// --------------------------------------------------------
// Type: IVdsProviderPrivate
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVdsProviderPrivate = *opaque{
    // TODO: Method 'GetObjectA'
    // TODO: Method 'OnLoad'
    // TODO: Method 'OnUnload'
};
// --------------------------------------------------------
// Type: VDS_SUB_SYSTEM_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_SUB_SYSTEM_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: VDS_SUB_SYSTEM_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_SUB_SYSTEM_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: VDS_SUB_SYSTEM_SUPPORTED_RAID_TYPE_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_SUB_SYSTEM_SUPPORTED_RAID_TYPE_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: VDS_INTERCONNECT_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_INTERCONNECT_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: VDS_CONTROLLER_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_CONTROLLER_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: VDS_PORT_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_PORT_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: VDS_DRIVE_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_DRIVE_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: VDS_DRIVE_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_DRIVE_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: VDS_LUN_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_LUN_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: VDS_LUN_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_LUN_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: VDS_LUN_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_LUN_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: VDS_LUN_PLEX_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_LUN_PLEX_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: VDS_LUN_PLEX_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_LUN_PLEX_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: VDS_LUN_PLEX_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_LUN_PLEX_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: VDS_ISCSI_PORTAL_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_ISCSI_PORTAL_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: VDS_STORAGE_POOL_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_STORAGE_POOL_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: VDS_STORAGE_POOL_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_STORAGE_POOL_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: VDS_MAINTENANCE_OPERATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_MAINTENANCE_OPERATION = *opaque{
};
// --------------------------------------------------------
// Type: VDS_HINTS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_HINTS = extern struct {
    ullHintMask: {"kind":"UInt64"},
    ullExpectedMaximumSize: {"kind":"UInt64"},
    ulOptimalReadSize: {"kind":"UInt32"},
    ulOptimalReadAlignment: {"kind":"UInt32"},
    ulOptimalWriteSize: {"kind":"UInt32"},
    ulOptimalWriteAlignment: {"kind":"UInt32"},
    ulMaximumDriveCount: {"kind":"UInt32"},
    ulStripeSize: {"kind":"UInt32"},
    bFastCrashRecoveryRequired: Windows.Win32.SystemServices.BOOL,
    bMostlyReads: Windows.Win32.SystemServices.BOOL,
    bOptimizeForSequentialReads: Windows.Win32.SystemServices.BOOL,
    bOptimizeForSequentialWrites: Windows.Win32.SystemServices.BOOL,
    bRemapEnabled: Windows.Win32.SystemServices.BOOL,
    bReadBackVerifyEnabled: Windows.Win32.SystemServices.BOOL,
    bWriteThroughCachingEnabled: Windows.Win32.SystemServices.BOOL,
    bHardwareChecksumEnabled: Windows.Win32.SystemServices.BOOL,
    bIsYankable: Windows.Win32.SystemServices.BOOL,
    sRebuildPriority: {"kind":"Int16"},
};
// --------------------------------------------------------
// Type: VDS_HINTS2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_HINTS2 = extern struct {
    ullHintMask: {"kind":"UInt64"},
    ullExpectedMaximumSize: {"kind":"UInt64"},
    ulOptimalReadSize: {"kind":"UInt32"},
    ulOptimalReadAlignment: {"kind":"UInt32"},
    ulOptimalWriteSize: {"kind":"UInt32"},
    ulOptimalWriteAlignment: {"kind":"UInt32"},
    ulMaximumDriveCount: {"kind":"UInt32"},
    ulStripeSize: {"kind":"UInt32"},
    ulReserved1: {"kind":"UInt32"},
    ulReserved2: {"kind":"UInt32"},
    ulReserved3: {"kind":"UInt32"},
    bFastCrashRecoveryRequired: Windows.Win32.SystemServices.BOOL,
    bMostlyReads: Windows.Win32.SystemServices.BOOL,
    bOptimizeForSequentialReads: Windows.Win32.SystemServices.BOOL,
    bOptimizeForSequentialWrites: Windows.Win32.SystemServices.BOOL,
    bRemapEnabled: Windows.Win32.SystemServices.BOOL,
    bReadBackVerifyEnabled: Windows.Win32.SystemServices.BOOL,
    bWriteThroughCachingEnabled: Windows.Win32.SystemServices.BOOL,
    bHardwareChecksumEnabled: Windows.Win32.SystemServices.BOOL,
    bIsYankable: Windows.Win32.SystemServices.BOOL,
    bAllocateHotSpare: Windows.Win32.SystemServices.BOOL,
    bUseMirroredCache: Windows.Win32.SystemServices.BOOL,
    bReadCachingEnabled: Windows.Win32.SystemServices.BOOL,
    bWriteCachingEnabled: Windows.Win32.SystemServices.BOOL,
    bMediaScanEnabled: Windows.Win32.SystemServices.BOOL,
    bConsistencyCheckEnabled: Windows.Win32.SystemServices.BOOL,
    BusType: Windows.Win32.SystemServices.VDS_STORAGE_BUS_TYPE,
    bReserved1: Windows.Win32.SystemServices.BOOL,
    bReserved2: Windows.Win32.SystemServices.BOOL,
    bReserved3: Windows.Win32.SystemServices.BOOL,
    sRebuildPriority: {"kind":"Int16"},
};
// --------------------------------------------------------
// Type: VDS_SUB_SYSTEM_PROP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_SUB_SYSTEM_PROP = extern struct {
    id: Guid,
    pwszFriendlyName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszIdentification: {"kind""Ptr","child":{"kind":"UInt16"}},
    ulFlags: {"kind":"UInt32"},
    ulStripeSizeFlags: {"kind":"UInt32"},
    status: Windows.Win32.SystemServices.VDS_SUB_SYSTEM_STATUS,
    health: Windows.Win32.SystemServices.VDS_HEALTH,
    sNumberOfInternalBuses: {"kind":"Int16"},
    sMaxNumberOfSlotsEachBus: {"kind":"Int16"},
    sMaxNumberOfControllers: {"kind":"Int16"},
    sRebuildPriority: {"kind":"Int16"},
};
// --------------------------------------------------------
// Type: VDS_SUB_SYSTEM_PROP2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_SUB_SYSTEM_PROP2 = extern struct {
    id: Guid,
    pwszFriendlyName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszIdentification: {"kind""Ptr","child":{"kind":"UInt16"}},
    ulFlags: {"kind":"UInt32"},
    ulStripeSizeFlags: {"kind":"UInt32"},
    ulSupportedRaidTypeFlags: {"kind":"UInt32"},
    status: Windows.Win32.SystemServices.VDS_SUB_SYSTEM_STATUS,
    health: Windows.Win32.SystemServices.VDS_HEALTH,
    sNumberOfInternalBuses: {"kind":"Int16"},
    sMaxNumberOfSlotsEachBus: {"kind":"Int16"},
    sMaxNumberOfControllers: {"kind":"Int16"},
    sRebuildPriority: {"kind":"Int16"},
    ulNumberOfEnclosures: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: VDS_CONTROLLER_PROP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_CONTROLLER_PROP = extern struct {
    id: Guid,
    pwszFriendlyName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszIdentification: {"kind""Ptr","child":{"kind":"UInt16"}},
    status: Windows.Win32.SystemServices.VDS_CONTROLLER_STATUS,
    health: Windows.Win32.SystemServices.VDS_HEALTH,
    sNumberOfPorts: {"kind":"Int16"},
};
// --------------------------------------------------------
// Type: VDS_DRIVE_PROP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_DRIVE_PROP = extern struct {
    id: Guid,
    ullSize: {"kind":"UInt64"},
    pwszFriendlyName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszIdentification: {"kind""Ptr","child":{"kind":"UInt16"}},
    ulFlags: {"kind":"UInt32"},
    status: Windows.Win32.SystemServices.VDS_DRIVE_STATUS,
    health: Windows.Win32.SystemServices.VDS_HEALTH,
    sInternalBusNumber: {"kind":"Int16"},
    sSlotNumber: {"kind":"Int16"},
};
// --------------------------------------------------------
// Type: VDS_DRIVE_PROP2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_DRIVE_PROP2 = extern struct {
    id: Guid,
    ullSize: {"kind":"UInt64"},
    pwszFriendlyName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszIdentification: {"kind""Ptr","child":{"kind":"UInt16"}},
    ulFlags: {"kind":"UInt32"},
    status: Windows.Win32.SystemServices.VDS_DRIVE_STATUS,
    health: Windows.Win32.SystemServices.VDS_HEALTH,
    sInternalBusNumber: {"kind":"Int16"},
    sSlotNumber: {"kind":"Int16"},
    ulEnclosureNumber: {"kind":"UInt32"},
    busType: Windows.Win32.SystemServices.VDS_STORAGE_BUS_TYPE,
    ulSpindleSpeed: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: VDS_DRIVE_EXTENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_DRIVE_EXTENT = extern struct {
    id: Guid,
    LunId: Guid,
    ullSize: {"kind":"UInt64"},
    bUsed: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: VDS_LUN_PROP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_LUN_PROP = extern struct {
    id: Guid,
    ullSize: {"kind":"UInt64"},
    pwszFriendlyName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszIdentification: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszUnmaskingList: {"kind""Ptr","child":{"kind":"UInt16"}},
    ulFlags: {"kind":"UInt32"},
    type: Windows.Win32.SystemServices.VDS_LUN_TYPE,
    status: Windows.Win32.SystemServices.VDS_LUN_STATUS,
    health: Windows.Win32.SystemServices.VDS_HEALTH,
    TransitionState: Windows.Win32.SystemServices.VDS_TRANSITION_STATE,
    sRebuildPriority: {"kind":"Int16"},
};
// --------------------------------------------------------
// Type: VDS_LUN_PLEX_PROP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_LUN_PLEX_PROP = extern struct {
    id: Guid,
    ullSize: {"kind":"UInt64"},
    type: Windows.Win32.SystemServices.VDS_LUN_PLEX_TYPE,
    status: Windows.Win32.SystemServices.VDS_LUN_PLEX_STATUS,
    health: Windows.Win32.SystemServices.VDS_HEALTH,
    TransitionState: Windows.Win32.SystemServices.VDS_TRANSITION_STATE,
    ulFlags: {"kind":"UInt32"},
    ulStripeSize: {"kind":"UInt32"},
    sRebuildPriority: {"kind":"Int16"},
};
// --------------------------------------------------------
// Type: VDS_PORT_PROP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_PORT_PROP = extern struct {
    id: Guid,
    pwszFriendlyName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszIdentification: {"kind""Ptr","child":{"kind":"UInt16"}},
    status: Windows.Win32.SystemServices.VDS_PORT_STATUS,
};
// --------------------------------------------------------
// Type: VDS_ISCSI_PORTAL_PROP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_ISCSI_PORTAL_PROP = extern struct {
    id: Guid,
    address: Windows.Win32.SystemServices.VDS_IPADDRESS,
    status: Windows.Win32.SystemServices.VDS_ISCSI_PORTAL_STATUS,
};
// --------------------------------------------------------
// Type: VDS_ISCSI_TARGET_PROP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_ISCSI_TARGET_PROP = extern struct {
    id: Guid,
    pwszIscsiName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszFriendlyName: {"kind""Ptr","child":{"kind":"UInt16"}},
    bChapEnabled: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: VDS_ISCSI_PORTALGROUP_PROP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_ISCSI_PORTALGROUP_PROP = extern struct {
    id: Guid,
    tag: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: VDS_RAID_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDS_RAID_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: VDS_POOL_CUSTOM_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_POOL_CUSTOM_ATTRIBUTES = extern struct {
    pwszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszValue: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: VDS_POOL_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_POOL_ATTRIBUTES = extern struct {
    ullAttributeMask: {"kind":"UInt64"},
    raidType: Windows.Win32.SystemServices.VDS_RAID_TYPE,
    busType: Windows.Win32.SystemServices.VDS_STORAGE_BUS_TYPE,
    pwszIntendedUsage: {"kind""Ptr","child":{"kind":"UInt16"}},
    bSpinDown: Windows.Win32.SystemServices.BOOL,
    bIsThinProvisioned: Windows.Win32.SystemServices.BOOL,
    ullProvisionedSpace: {"kind":"UInt64"},
    bNoSinglePointOfFailure: Windows.Win32.SystemServices.BOOL,
    ulDataRedundancyMax: {"kind":"UInt32"},
    ulDataRedundancyMin: {"kind":"UInt32"},
    ulDataRedundancyDefault: {"kind":"UInt32"},
    ulPackageRedundancyMax: {"kind":"UInt32"},
    ulPackageRedundancyMin: {"kind":"UInt32"},
    ulPackageRedundancyDefault: {"kind":"UInt32"},
    ulStripeSize: {"kind":"UInt32"},
    ulStripeSizeMax: {"kind":"UInt32"},
    ulStripeSizeMin: {"kind":"UInt32"},
    ulDefaultStripeSize: {"kind":"UInt32"},
    ulNumberOfColumns: {"kind":"UInt32"},
    ulNumberOfColumnsMax: {"kind":"UInt32"},
    ulNumberOfColumnsMin: {"kind":"UInt32"},
    ulDefaultNumberofColumns: {"kind":"UInt32"},
    ulDataAvailabilityHint: {"kind":"UInt32"},
    ulAccessRandomnessHint: {"kind":"UInt32"},
    ulAccessDirectionHint: {"kind":"UInt32"},
    ulAccessSizeHint: {"kind":"UInt32"},
    ulAccessLatencyHint: {"kind":"UInt32"},
    ulAccessBandwidthWeightHint: {"kind":"UInt32"},
    ulStorageCostHint: {"kind":"UInt32"},
    ulStorageEfficiencyHint: {"kind":"UInt32"},
    ulNumOfCustomAttributes: {"kind":"UInt32"},
    pPoolCustomAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.VDS_POOL_CUSTOM_ATTRIBUTES},
    bReserved1: Windows.Win32.SystemServices.BOOL,
    bReserved2: Windows.Win32.SystemServices.BOOL,
    ulReserved1: {"kind":"UInt32"},
    ulReserved2: {"kind":"UInt32"},
    ullReserved1: {"kind":"UInt64"},
    ullReserved2: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: VDS_STORAGE_POOL_PROP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_STORAGE_POOL_PROP = extern struct {
    id: Guid,
    status: Windows.Win32.SystemServices.VDS_STORAGE_POOL_STATUS,
    health: Windows.Win32.SystemServices.VDS_HEALTH,
    type: Windows.Win32.SystemServices.VDS_STORAGE_POOL_TYPE,
    pwszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszDescription: {"kind""Ptr","child":{"kind":"UInt16"}},
    ullTotalConsumedSpace: {"kind":"UInt64"},
    ullTotalManagedSpace: {"kind":"UInt64"},
    ullRemainingFreeSpace: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: VDS_STORAGE_POOL_DRIVE_EXTENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDS_STORAGE_POOL_DRIVE_EXTENT = extern struct {
    id: Guid,
    ullSize: {"kind":"UInt64"},
    bUsed: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: IVdsHwProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVdsHwProvider = *opaque{
    // TODO: Method 'QuerySubSystems'
    // TODO: Method 'Reenumerate'
    // TODO: Method 'Refresh'
};
// --------------------------------------------------------
// Type: IVdsHwProviderType
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVdsHwProviderType = *opaque{
    // TODO: Method 'GetProviderType'
};
// --------------------------------------------------------
// Type: IVdsHwProviderType2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVdsHwProviderType2 = *opaque{
    // TODO: Method 'GetProviderType2'
};
// --------------------------------------------------------
// Type: IVdsHwProviderStoragePools
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVdsHwProviderStoragePools = *opaque{
    // TODO: Method 'QueryStoragePools'
    // TODO: Method 'CreateLunInStoragePool'
    // TODO: Method 'QueryMaxLunCreateSizeInStoragePool'
};
// --------------------------------------------------------
// Type: IVdsSubSystem
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVdsSubSystem = *opaque{
    // TODO: Method 'GetProperties'
    // TODO: Method 'GetProvider'
    // TODO: Method 'QueryControllers'
    // TODO: Method 'QueryLuns'
    // TODO: Method 'QueryDrives'
    // TODO: Method 'GetDrive'
    // TODO: Method 'Reenumerate'
    // TODO: Method 'SetControllerStatus'
    // TODO: Method 'CreateLun'
    // TODO: Method 'ReplaceDrive'
    // TODO: Method 'SetStatus'
    // TODO: Method 'QueryMaxLunCreateSize'
};
// --------------------------------------------------------
// Type: IVdsSubSystem2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVdsSubSystem2 = *opaque{
    // TODO: Method 'GetProperties2'
    // TODO: Method 'GetDrive2'
    // TODO: Method 'CreateLun2'
    // TODO: Method 'QueryMaxLunCreateSize2'
};
// --------------------------------------------------------
// Type: IVdsSubSystemNaming
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVdsSubSystemNaming = *opaque{
    // TODO: Method 'SetFriendlyName'
};
// --------------------------------------------------------
// Type: IVdsSubSystemIscsi
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVdsSubSystemIscsi = *opaque{
    // TODO: Method 'QueryTargets'
    // TODO: Method 'QueryPortals'
    // TODO: Method 'CreateTarget'
    // TODO: Method 'SetIpsecGroupPresharedKey'
};
// --------------------------------------------------------
// Type: IVdsSubSystemInterconnect
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVdsSubSystemInterconnect = *opaque{
    // TODO: Method 'GetSupportedInterconnects'
};
// --------------------------------------------------------
// Type: IVdsControllerPort
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVdsControllerPort = *opaque{
    // TODO: Method 'GetProperties'
    // TODO: Method 'GetController'
    // TODO: Method 'QueryAssociatedLuns'
    // TODO: Method 'Reset'
    // TODO: Method 'SetStatus'
};
// --------------------------------------------------------
// Type: IVdsController
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVdsController = *opaque{
    // TODO: Method 'GetProperties'
    // TODO: Method 'GetSubSystem'
    // TODO: Method 'GetPortProperties'
    // TODO: Method 'FlushCache'
    // TODO: Method 'InvalidateCache'
    // TODO: Method 'Reset'
    // TODO: Method 'QueryAssociatedLuns'
    // TODO: Method 'SetStatus'
};
// --------------------------------------------------------
// Type: IVdsControllerControllerPort
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVdsControllerControllerPort = *opaque{
    // TODO: Method 'QueryControllerPorts'
};
// --------------------------------------------------------
// Type: IVdsDrive
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVdsDrive = *opaque{
    // TODO: Method 'GetProperties'
    // TODO: Method 'GetSubSystem'
    // TODO: Method 'QueryExtents'
    // TODO: Method 'SetFlags'
    // TODO: Method 'ClearFlags'
    // TODO: Method 'SetStatus'
};
// --------------------------------------------------------
// Type: IVdsDrive2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVdsDrive2 = *opaque{
    // TODO: Method 'GetProperties2'
};
// --------------------------------------------------------
// Type: IVdsLun
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVdsLun = *opaque{
    // TODO: Method 'GetProperties'
    // TODO: Method 'GetSubSystem'
    // TODO: Method 'GetIdentificationData'
    // TODO: Method 'QueryActiveControllers'
    // TODO: Method 'Extend'
    // TODO: Method 'Shrink'
    // TODO: Method 'QueryPlexes'
    // TODO: Method 'AddPlex'
    // TODO: Method 'RemovePlex'
    // TODO: Method 'Recover'
    // TODO: Method 'SetMask'
    // TODO: Method 'Delete'
    // TODO: Method 'AssociateControllers'
    // TODO: Method 'QueryHints'
    // TODO: Method 'ApplyHints'
    // TODO: Method 'SetStatus'
    // TODO: Method 'QueryMaxLunExtendSize'
};
// --------------------------------------------------------
// Type: IVdsLun2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVdsLun2 = *opaque{
    // TODO: Method 'QueryHints2'
    // TODO: Method 'ApplyHints2'
};
// --------------------------------------------------------
// Type: IVdsLunNaming
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVdsLunNaming = *opaque{
    // TODO: Method 'SetFriendlyName'
};
// --------------------------------------------------------
// Type: IVdsLunNumber
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVdsLunNumber = *opaque{
    // TODO: Method 'GetLunNumber'
};
// --------------------------------------------------------
// Type: IVdsLunControllerPorts
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVdsLunControllerPorts = *opaque{
    // TODO: Method 'AssociateControllerPorts'
    // TODO: Method 'QueryActiveControllerPorts'
};
// --------------------------------------------------------
// Type: IVdsLunMpio
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVdsLunMpio = *opaque{
    // TODO: Method 'GetPathInfo'
    // TODO: Method 'GetLoadBalancePolicy'
    // TODO: Method 'SetLoadBalancePolicy'
    // TODO: Method 'GetSupportedLbPolicies'
};
// --------------------------------------------------------
// Type: IVdsLunIscsi
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVdsLunIscsi = *opaque{
    // TODO: Method 'AssociateTargets'
    // TODO: Method 'QueryAssociatedTargets'
};
// --------------------------------------------------------
// Type: IVdsLunPlex
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVdsLunPlex = *opaque{
    // TODO: Method 'GetProperties'
    // TODO: Method 'GetLun'
    // TODO: Method 'QueryExtents'
    // TODO: Method 'QueryHints'
    // TODO: Method 'ApplyHints'
};
// --------------------------------------------------------
// Type: IVdsIscsiPortal
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVdsIscsiPortal = *opaque{
    // TODO: Method 'GetProperties'
    // TODO: Method 'GetSubSystem'
    // TODO: Method 'QueryAssociatedPortalGroups'
    // TODO: Method 'SetStatus'
    // TODO: Method 'SetIpsecTunnelAddress'
    // TODO: Method 'GetIpsecSecurity'
    // TODO: Method 'SetIpsecSecurity'
};
// --------------------------------------------------------
// Type: IVdsIscsiTarget
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVdsIscsiTarget = *opaque{
    // TODO: Method 'GetProperties'
    // TODO: Method 'GetSubSystem'
    // TODO: Method 'QueryPortalGroups'
    // TODO: Method 'QueryAssociatedLuns'
    // TODO: Method 'CreatePortalGroup'
    // TODO: Method 'Delete'
    // TODO: Method 'SetFriendlyName'
    // TODO: Method 'SetSharedSecret'
    // TODO: Method 'RememberInitiatorSharedSecret'
    // TODO: Method 'GetConnectedInitiators'
};
// --------------------------------------------------------
// Type: IVdsIscsiPortalGroup
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVdsIscsiPortalGroup = *opaque{
    // TODO: Method 'GetProperties'
    // TODO: Method 'GetTarget'
    // TODO: Method 'QueryAssociatedPortals'
    // TODO: Method 'AddPortal'
    // TODO: Method 'RemovePortal'
    // TODO: Method 'Delete'
};
// --------------------------------------------------------
// Type: IVdsStoragePool
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVdsStoragePool = *opaque{
    // TODO: Method 'GetProvider'
    // TODO: Method 'GetProperties'
    // TODO: Method 'GetAttributes'
    // TODO: Method 'QueryDriveExtents'
    // TODO: Method 'QueryAllocatedLuns'
    // TODO: Method 'QueryAllocatedStoragePools'
};
// --------------------------------------------------------
// Type: IVdsMaintenance
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVdsMaintenance = *opaque{
    // TODO: Method 'StartMaintenance'
    // TODO: Method 'StopMaintenance'
    // TODO: Method 'PulseMaintenance'
};
// --------------------------------------------------------
// Type: IVdsHwProviderPrivate
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVdsHwProviderPrivate = *opaque{
    // TODO: Method 'QueryIfCreatedLun'
};
// --------------------------------------------------------
// Type: IVdsHwProviderPrivateMpio
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVdsHwProviderPrivateMpio = *opaque{
    // TODO: Method 'SetAllPathStatusesFromHbaPort'
};
// --------------------------------------------------------
// Type: IVdsAdmin
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVdsAdmin = *opaque{
    // TODO: Method 'RegisterProvider'
    // TODO: Method 'UnregisterProvider'
};
// --------------------------------------------------------
// Type: VSS_OBJECT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VSS_OBJECT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: VSS_SNAPSHOT_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VSS_SNAPSHOT_STATE = *opaque{
};
// --------------------------------------------------------
// Type: VSS_VOLUME_SNAPSHOT_ATTRIBUTES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VSS_VOLUME_SNAPSHOT_ATTRIBUTES = *opaque{
};
// --------------------------------------------------------
// Type: VSS_SNAPSHOT_CONTEXT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VSS_SNAPSHOT_CONTEXT = *opaque{
};
// --------------------------------------------------------
// Type: VSS_PROVIDER_CAPABILITIES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VSS_PROVIDER_CAPABILITIES = *opaque{
};
// --------------------------------------------------------
// Type: VSS_HARDWARE_OPTIONS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VSS_HARDWARE_OPTIONS = *opaque{
};
// --------------------------------------------------------
// Type: VSS_RECOVERY_OPTIONS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VSS_RECOVERY_OPTIONS = *opaque{
};
// --------------------------------------------------------
// Type: VSS_WRITER_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VSS_WRITER_STATE = *opaque{
};
// --------------------------------------------------------
// Type: VSS_BACKUP_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VSS_BACKUP_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: VSS_RESTORE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VSS_RESTORE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: VSS_ROLLFORWARD_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VSS_ROLLFORWARD_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: VSS_PROVIDER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VSS_PROVIDER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: VSS_APPLICATION_LEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VSS_APPLICATION_LEVEL = *opaque{
};
// --------------------------------------------------------
// Type: VSS_SNAPSHOT_COMPATIBILITY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VSS_SNAPSHOT_COMPATIBILITY = *opaque{
};
// --------------------------------------------------------
// Type: VSS_SNAPSHOT_PROPERTY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VSS_SNAPSHOT_PROPERTY_ID = *opaque{
};
// --------------------------------------------------------
// Type: VSS_FILE_SPEC_BACKUP_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VSS_FILE_SPEC_BACKUP_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: VSS_BACKUP_SCHEMA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VSS_BACKUP_SCHEMA = *opaque{
};
// --------------------------------------------------------
// Type: VSS_SNAPSHOT_PROP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VSS_SNAPSHOT_PROP = extern struct {
    m_SnapshotId: Guid,
    m_SnapshotSetId: Guid,
    m_lSnapshotsCount: {"kind":"Int32"},
    m_pwszSnapshotDeviceObject: {"kind""Ptr","child":{"kind":"UInt16"}},
    m_pwszOriginalVolumeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    m_pwszOriginatingMachine: {"kind""Ptr","child":{"kind":"UInt16"}},
    m_pwszServiceMachine: {"kind""Ptr","child":{"kind":"UInt16"}},
    m_pwszExposedName: {"kind""Ptr","child":{"kind":"UInt16"}},
    m_pwszExposedPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    m_ProviderId: Guid,
    m_lSnapshotAttributes: {"kind":"Int32"},
    m_tsCreationTimestamp: {"kind":"Int64"},
    m_eStatus: Windows.Win32.SystemServices.VSS_SNAPSHOT_STATE,
};
// --------------------------------------------------------
// Type: VSS_PROVIDER_PROP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VSS_PROVIDER_PROP = extern struct {
    m_ProviderId: Guid,
    m_pwszProviderName: {"kind""Ptr","child":{"kind":"UInt16"}},
    m_eProviderType: Windows.Win32.SystemServices.VSS_PROVIDER_TYPE,
    m_pwszProviderVersion: {"kind""Ptr","child":{"kind":"UInt16"}},
    m_ProviderVersionId: Guid,
    m_ClassId: Guid,
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_vss_0000_0000_0001
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const __MIDL___MIDL_itf_vss_0000_0000_0001 = *opaque{
};
// --------------------------------------------------------
// Type: VSS_OBJECT_PROP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VSS_OBJECT_PROP = extern struct {
    Type: Windows.Win32.SystemServices.VSS_OBJECT_TYPE,
    Obj: Windows.Win32.SystemServices.__MIDL___MIDL_itf_vss_0000_0000_0001,
};
// --------------------------------------------------------
// Type: IVssEnumObject
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVssEnumObject = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IVssAsync
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVssAsync = *opaque{
    // TODO: Method 'Cancel'
    // TODO: Method 'Wait'
    // TODO: Method 'QueryStatus'
};
// --------------------------------------------------------
// Type: VSS_USAGE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VSS_USAGE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: VSS_SOURCE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VSS_SOURCE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: VSS_RESTOREMETHOD_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VSS_RESTOREMETHOD_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: VSS_WRITERRESTORE_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VSS_WRITERRESTORE_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: VSS_COMPONENT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VSS_COMPONENT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: VSS_ALTERNATE_WRITER_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VSS_ALTERNATE_WRITER_STATE = *opaque{
};
// --------------------------------------------------------
// Type: VSS_SUBSCRIBE_MASK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VSS_SUBSCRIBE_MASK = *opaque{
};
// --------------------------------------------------------
// Type: VSS_RESTORE_TARGET
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VSS_RESTORE_TARGET = *opaque{
};
// --------------------------------------------------------
// Type: VSS_FILE_RESTORE_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VSS_FILE_RESTORE_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: VSS_COMPONENT_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VSS_COMPONENT_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: IVssExamineWriterMetadata
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IVssExamineWriterMetadata = opaque {
};
// --------------------------------------------------------
// Type: IVssWMFiledesc
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVssWMFiledesc = *opaque{
    // TODO: Method 'GetPath'
    // TODO: Method 'GetFilespec'
    // TODO: Method 'GetRecursive'
    // TODO: Method 'GetAlternateLocation'
    // TODO: Method 'GetBackupTypeMask'
};
// --------------------------------------------------------
// Type: IVssWMDependency
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVssWMDependency = *opaque{
    // TODO: Method 'GetWriterId'
    // TODO: Method 'GetLogicalPath'
    // TODO: Method 'GetComponentName'
};
// --------------------------------------------------------
// Type: IVssComponent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVssComponent = *opaque{
    // TODO: Method 'GetLogicalPath'
    // TODO: Method 'GetComponentType'
    // TODO: Method 'GetComponentName'
    // TODO: Method 'GetBackupSucceeded'
    // TODO: Method 'GetAlternateLocationMappingCount'
    // TODO: Method 'GetAlternateLocationMapping'
    // TODO: Method 'SetBackupMetadata'
    // TODO: Method 'GetBackupMetadata'
    // TODO: Method 'AddPartialFile'
    // TODO: Method 'GetPartialFileCount'
    // TODO: Method 'GetPartialFile'
    // TODO: Method 'IsSelectedForRestore'
    // TODO: Method 'GetAdditionalRestores'
    // TODO: Method 'GetNewTargetCount'
    // TODO: Method 'GetNewTarget'
    // TODO: Method 'AddDirectedTarget'
    // TODO: Method 'GetDirectedTargetCount'
    // TODO: Method 'GetDirectedTarget'
    // TODO: Method 'SetRestoreMetadata'
    // TODO: Method 'GetRestoreMetadata'
    // TODO: Method 'SetRestoreTarget'
    // TODO: Method 'GetRestoreTarget'
    // TODO: Method 'SetPreRestoreFailureMsg'
    // TODO: Method 'GetPreRestoreFailureMsg'
    // TODO: Method 'SetPostRestoreFailureMsg'
    // TODO: Method 'GetPostRestoreFailureMsg'
    // TODO: Method 'SetBackupStamp'
    // TODO: Method 'GetBackupStamp'
    // TODO: Method 'GetPreviousBackupStamp'
    // TODO: Method 'GetBackupOptions'
    // TODO: Method 'GetRestoreOptions'
    // TODO: Method 'GetRestoreSubcomponentCount'
    // TODO: Method 'GetRestoreSubcomponent'
    // TODO: Method 'GetFileRestoreStatus'
    // TODO: Method 'AddDifferencedFilesByLastModifyTime'
    // TODO: Method 'AddDifferencedFilesByLastModifyLSN'
    // TODO: Method 'GetDifferencedFilesCount'
    // TODO: Method 'GetDifferencedFile'
};
// --------------------------------------------------------
// Type: IVssWriterComponents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVssWriterComponents = *opaque{
    // TODO: Method 'GetComponentCount'
    // TODO: Method 'GetWriterInfo'
    // TODO: Method 'GetComponent'
};
// --------------------------------------------------------
// Type: IVssComponentEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVssComponentEx = *opaque{
    // TODO: Method 'SetPrepareForBackupFailureMsg'
    // TODO: Method 'SetPostSnapshotFailureMsg'
    // TODO: Method 'GetPrepareForBackupFailureMsg'
    // TODO: Method 'GetPostSnapshotFailureMsg'
    // TODO: Method 'GetAuthoritativeRestore'
    // TODO: Method 'GetRollForward'
    // TODO: Method 'GetRestoreName'
};
// --------------------------------------------------------
// Type: IVssComponentEx2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVssComponentEx2 = *opaque{
    // TODO: Method 'SetFailure'
    // TODO: Method 'GetFailure'
};
// --------------------------------------------------------
// Type: IVssCreateWriterMetadata
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVssCreateWriterMetadata = *opaque{
    // TODO: Method 'AddIncludeFiles'
    // TODO: Method 'AddExcludeFiles'
    // TODO: Method 'AddComponent'
    // TODO: Method 'AddDatabaseFiles'
    // TODO: Method 'AddDatabaseLogFiles'
    // TODO: Method 'AddFilesToFileGroup'
    // TODO: Method 'SetRestoreMethod'
    // TODO: Method 'AddAlternateLocationMapping'
    // TODO: Method 'AddComponentDependency'
    // TODO: Method 'SetBackupSchema'
    // TODO: Method 'GetDocument'
    // TODO: Method 'SaveAsXML'
};
// --------------------------------------------------------
// Type: IVssCreateWriterMetadataEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVssCreateWriterMetadataEx = *opaque{
    // TODO: Method 'AddDatabaseFiles'
    // TODO: Method 'AddDatabaseLogFiles'
    // TODO: Method 'AddFilesToFileGroup'
    // TODO: Method 'SetRestoreMethod'
    // TODO: Method 'AddAlternateLocationMapping'
    // TODO: Method 'AddComponentDependency'
    // TODO: Method 'SetBackupSchema'
    // TODO: Method 'GetDocument'
    // TODO: Method 'SaveAsXML'
    // TODO: Method 'QueryInterface'
    // TODO: Method 'AddRef'
    // TODO: Method 'Release'
    // TODO: Method 'AddExcludeFilesFromSnapshot'
};
// --------------------------------------------------------
// Type: IVssWriterImpl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVssWriterImpl = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'Subscribe'
    // TODO: Method 'Unsubscribe'
    // TODO: Method 'Uninitialize'
    // TODO: Method 'GetCurrentVolumeArray'
    // TODO: Method 'GetCurrentVolumeCount'
    // TODO: Method 'GetSnapshotDeviceName'
    // TODO: Method 'GetCurrentSnapshotSetId'
    // TODO: Method 'GetContext'
    // TODO: Method 'GetCurrentLevel'
    // TODO: Method 'IsPathAffected'
    // TODO: Method 'IsBootableSystemStateBackedUp'
    // TODO: Method 'AreComponentsSelected'
    // TODO: Method 'GetBackupType'
    // TODO: Method 'GetRestoreType'
    // TODO: Method 'SetWriterFailure'
    // TODO: Method 'IsPartialFileSupportEnabled'
    // TODO: Method 'InstallAlternateWriter'
    // TODO: Method 'GetIdentityInformation'
    // TODO: Method 'SetWriterFailureEx'
    // TODO: Method 'GetSessionId'
    // TODO: Method 'IsWriterShuttingDown'
};
// --------------------------------------------------------
// Type: IVssCreateExpressWriterMetadata
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVssCreateExpressWriterMetadata = *opaque{
    // TODO: Method 'AddExcludeFiles'
    // TODO: Method 'AddComponent'
    // TODO: Method 'AddFilesToFileGroup'
    // TODO: Method 'SetRestoreMethod'
    // TODO: Method 'AddComponentDependency'
    // TODO: Method 'SetBackupSchema'
    // TODO: Method 'SaveAsXML'
};
// --------------------------------------------------------
// Type: IVssExpressWriter
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVssExpressWriter = *opaque{
    // TODO: Method 'CreateMetadata'
    // TODO: Method 'LoadMetadata'
    // TODO: Method 'Register'
    // TODO: Method 'Unregister'
};
// --------------------------------------------------------
// Type: VssSnapshotMgmt
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const VssSnapshotMgmt = opaque {
};
// --------------------------------------------------------
// Type: VSS_MGMT_OBJECT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VSS_MGMT_OBJECT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: VSS_VOLUME_PROP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VSS_VOLUME_PROP = extern struct {
    m_pwszVolumeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    m_pwszVolumeDisplayName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: VSS_DIFF_VOLUME_PROP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VSS_DIFF_VOLUME_PROP = extern struct {
    m_pwszVolumeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    m_pwszVolumeDisplayName: {"kind""Ptr","child":{"kind":"UInt16"}},
    m_llVolumeFreeSpace: {"kind":"Int64"},
    m_llVolumeTotalSpace: {"kind":"Int64"},
};
// --------------------------------------------------------
// Type: VSS_DIFF_AREA_PROP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VSS_DIFF_AREA_PROP = extern struct {
    m_pwszVolumeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    m_pwszDiffAreaVolumeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    m_llMaximumDiffSpace: {"kind":"Int64"},
    m_llAllocatedDiffSpace: {"kind":"Int64"},
    m_llUsedDiffSpace: {"kind":"Int64"},
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_vsmgmt_0000_0000_0001
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const __MIDL___MIDL_itf_vsmgmt_0000_0000_0001 = *opaque{
};
// --------------------------------------------------------
// Type: VSS_MGMT_OBJECT_PROP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VSS_MGMT_OBJECT_PROP = extern struct {
    Type: Windows.Win32.SystemServices.VSS_MGMT_OBJECT_TYPE,
    Obj: Windows.Win32.SystemServices.__MIDL___MIDL_itf_vsmgmt_0000_0000_0001,
};
// --------------------------------------------------------
// Type: VSS_PROTECTION_LEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VSS_PROTECTION_LEVEL = *opaque{
};
// --------------------------------------------------------
// Type: VSS_PROTECTION_FAULT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VSS_PROTECTION_FAULT = *opaque{
};
// --------------------------------------------------------
// Type: VSS_VOLUME_PROTECTION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VSS_VOLUME_PROTECTION_INFO = extern struct {
    m_protectionLevel: Windows.Win32.SystemServices.VSS_PROTECTION_LEVEL,
    m_volumeIsOfflineForProtection: Windows.Win32.SystemServices.BOOL,
    m_protectionFault: Windows.Win32.SystemServices.VSS_PROTECTION_FAULT,
    m_failureStatus: {"kind":"Int32"},
    m_volumeHasUnusedDiffArea: Windows.Win32.SystemServices.BOOL,
    m_reserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IVssSnapshotMgmt
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVssSnapshotMgmt = *opaque{
    // TODO: Method 'GetProviderMgmtInterface'
    // TODO: Method 'QueryVolumesSupportedForSnapshots'
    // TODO: Method 'QuerySnapshotsByVolume'
};
// --------------------------------------------------------
// Type: IVssSnapshotMgmt2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVssSnapshotMgmt2 = *opaque{
    // TODO: Method 'GetMinDiffAreaSize'
};
// --------------------------------------------------------
// Type: IVssDifferentialSoftwareSnapshotMgmt
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVssDifferentialSoftwareSnapshotMgmt = *opaque{
    // TODO: Method 'AddDiffArea'
    // TODO: Method 'ChangeDiffAreaMaximumSize'
    // TODO: Method 'QueryVolumesSupportedForDiffAreas'
    // TODO: Method 'QueryDiffAreasForVolume'
    // TODO: Method 'QueryDiffAreasOnVolume'
    // TODO: Method 'QueryDiffAreasForSnapshot'
};
// --------------------------------------------------------
// Type: IVssDifferentialSoftwareSnapshotMgmt2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVssDifferentialSoftwareSnapshotMgmt2 = *opaque{
    // TODO: Method 'ChangeDiffAreaMaximumSizeEx'
    // TODO: Method 'MigrateDiffAreas'
    // TODO: Method 'QueryMigrationStatus'
    // TODO: Method 'SetSnapshotPriority'
};
// --------------------------------------------------------
// Type: IVssDifferentialSoftwareSnapshotMgmt3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVssDifferentialSoftwareSnapshotMgmt3 = *opaque{
    // TODO: Method 'SetVolumeProtectLevel'
    // TODO: Method 'GetVolumeProtectLevel'
    // TODO: Method 'ClearVolumeProtectFault'
    // TODO: Method 'DeleteUnusedDiffAreas'
    // TODO: Method 'QuerySnapshotDeltaBitmap'
};
// --------------------------------------------------------
// Type: IVssEnumMgmtObject
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVssEnumMgmtObject = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: VSSCoordinator
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const VSSCoordinator = opaque {
};
// --------------------------------------------------------
// Type: IVssAdmin
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVssAdmin = *opaque{
    // TODO: Method 'RegisterProvider'
    // TODO: Method 'UnregisterProvider'
    // TODO: Method 'QueryProviders'
    // TODO: Method 'AbortAllSnapshotsInProgress'
};
// --------------------------------------------------------
// Type: IVssAdminEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVssAdminEx = *opaque{
    // TODO: Method 'GetProviderCapability'
    // TODO: Method 'GetProviderContext'
    // TODO: Method 'SetProviderContext'
};
// --------------------------------------------------------
// Type: IVssSoftwareSnapshotProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVssSoftwareSnapshotProvider = *opaque{
    // TODO: Method 'SetContext'
    // TODO: Method 'GetSnapshotProperties'
    // TODO: Method 'Query'
    // TODO: Method 'DeleteSnapshots'
    // TODO: Method 'BeginPrepareSnapshot'
    // TODO: Method 'IsVolumeSupported'
    // TODO: Method 'IsVolumeSnapshotted'
    // TODO: Method 'SetSnapshotProperty'
    // TODO: Method 'RevertToSnapshot'
    // TODO: Method 'QueryRevertStatus'
};
// --------------------------------------------------------
// Type: IVssProviderCreateSnapshotSet
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVssProviderCreateSnapshotSet = *opaque{
    // TODO: Method 'EndPrepareSnapshots'
    // TODO: Method 'PreCommitSnapshots'
    // TODO: Method 'CommitSnapshots'
    // TODO: Method 'PostCommitSnapshots'
    // TODO: Method 'PreFinalCommitSnapshots'
    // TODO: Method 'PostFinalCommitSnapshots'
    // TODO: Method 'AbortSnapshots'
};
// --------------------------------------------------------
// Type: IVssProviderNotifications
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVssProviderNotifications = *opaque{
    // TODO: Method 'OnLoad'
    // TODO: Method 'OnUnload'
};
// --------------------------------------------------------
// Type: IVssHardwareSnapshotProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVssHardwareSnapshotProvider = *opaque{
    // TODO: Method 'AreLunsSupported'
    // TODO: Method 'FillInLunInfo'
    // TODO: Method 'BeginPrepareSnapshot'
    // TODO: Method 'GetTargetLuns'
    // TODO: Method 'LocateLuns'
    // TODO: Method 'OnLunEmpty'
};
// --------------------------------------------------------
// Type: IVssHardwareSnapshotProviderEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVssHardwareSnapshotProviderEx = *opaque{
    // TODO: Method 'GetProviderCapabilities'
    // TODO: Method 'OnLunStateChange'
    // TODO: Method 'ResyncLuns'
    // TODO: Method 'OnReuseLuns'
};
// --------------------------------------------------------
// Type: IVssFileShareSnapshotProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVssFileShareSnapshotProvider = *opaque{
    // TODO: Method 'SetContext'
    // TODO: Method 'GetSnapshotProperties'
    // TODO: Method 'Query'
    // TODO: Method 'DeleteSnapshots'
    // TODO: Method 'BeginPrepareSnapshot'
    // TODO: Method 'IsPathSupported'
    // TODO: Method 'IsPathSnapshotted'
    // TODO: Method 'SetSnapshotProperty'
};
// --------------------------------------------------------
// Type: IDDVideoPortContainer
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDDVideoPortContainer = opaque {
};
// --------------------------------------------------------
// Type: IDirectDrawVideoPort
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDirectDrawVideoPort = opaque {
};
// --------------------------------------------------------
// Type: IDirectDrawVideoPortNotify
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDirectDrawVideoPortNotify = opaque {
};
// --------------------------------------------------------
// Type: IDDVideoPortContainerVtbl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDDVideoPortContainerVtbl = opaque {
};
// --------------------------------------------------------
// Type: IDirectDrawVideoPortVtbl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDirectDrawVideoPortVtbl = opaque {
};
// --------------------------------------------------------
// Type: IDirectDrawVideoPortNotifyVtbl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDirectDrawVideoPortNotifyVtbl = opaque {
};
// --------------------------------------------------------
// Type: LPDDENUMVIDEOCALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDENUMVIDEOCALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DDVIDEOPORTSTATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDVIDEOPORTSTATUS = extern struct {
    dwSize: {"kind":"UInt32"},
    bInUse: Windows.Win32.SystemServices.BOOL,
    dwFlags: {"kind":"UInt32"},
    dwReserved1: {"kind":"UInt32"},
    VideoPortType: Windows.Win32.CoreAudio.DDVIDEOPORTCONNECT,
    dwReserved2: {"kind":"UIntPtr"},
    dwReserved3: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: DDVIDEOPORTNOTIFY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDVIDEOPORTNOTIFY = extern struct {
    ApproximateTimeStamp: Windows.Win32.SystemServices.LARGE_INTEGER,
    lField: {"kind":"Int32"},
    dwSurfaceIndex: {"kind":"UInt32"},
    lDone: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: _DD_DESTROYDRIVERDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _DD_DESTROYDRIVERDATA = opaque {
};
// --------------------------------------------------------
// Type: _DD_SETMODEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _DD_SETMODEDATA = opaque {
};
// --------------------------------------------------------
// Type: _DD_GETVPORTAUTOFLIPSURFACEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _DD_GETVPORTAUTOFLIPSURFACEDATA = opaque {
};
// --------------------------------------------------------
// Type: PDD_SETCOLORKEY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_SETCOLORKEY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_DESTROYDRIVER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_DESTROYDRIVER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_SETMODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_SETMODE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_ALPHABLT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_ALPHABLT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_SURFCB_SETCLIPLIST
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_SURFCB_SETCLIPLIST = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_VPORTCB_GETAUTOFLIPSURF
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_VPORTCB_GETAUTOFLIPSURF = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DD_MORECAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_MORECAPS = extern struct {
    dwSize: {"kind":"UInt32"},
    dwAlphaCaps: {"kind":"UInt32"},
    dwSVBAlphaCaps: {"kind":"UInt32"},
    dwVSBAlphaCaps: {"kind":"UInt32"},
    dwSSBAlphaCaps: {"kind":"UInt32"},
    dwFilterCaps: {"kind":"UInt32"},
    dwSVBFilterCaps: {"kind":"UInt32"},
    dwVSBFilterCaps: {"kind":"UInt32"},
    dwSSBFilterCaps: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DDNTCORECAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDNTCORECAPS = extern struct {
    dwSize: {"kind":"UInt32"},
    dwCaps: {"kind":"UInt32"},
    dwCaps2: {"kind":"UInt32"},
    dwCKeyCaps: {"kind":"UInt32"},
    dwFXCaps: {"kind":"UInt32"},
    dwFXAlphaCaps: {"kind":"UInt32"},
    dwPalCaps: {"kind":"UInt32"},
    dwSVCaps: {"kind":"UInt32"},
    dwAlphaBltConstBitDepths: {"kind":"UInt32"},
    dwAlphaBltPixelBitDepths: {"kind":"UInt32"},
    dwAlphaBltSurfaceBitDepths: {"kind":"UInt32"},
    dwAlphaOverlayConstBitDepths: {"kind":"UInt32"},
    dwAlphaOverlayPixelBitDepths: {"kind":"UInt32"},
    dwAlphaOverlaySurfaceBitDepths: {"kind":"UInt32"},
    dwZBufferBitDepths: {"kind":"UInt32"},
    dwVidMemTotal: {"kind":"UInt32"},
    dwVidMemFree: {"kind":"UInt32"},
    dwMaxVisibleOverlays: {"kind":"UInt32"},
    dwCurrVisibleOverlays: {"kind":"UInt32"},
    dwNumFourCCCodes: {"kind":"UInt32"},
    dwAlignBoundarySrc: {"kind":"UInt32"},
    dwAlignSizeSrc: {"kind":"UInt32"},
    dwAlignBoundaryDest: {"kind":"UInt32"},
    dwAlignSizeDest: {"kind":"UInt32"},
    dwAlignStrideAlign: {"kind":"UInt32"},
    dwRops: {"kind":"Array","child": {"kind":"UInt32"}},
    ddsCaps: Windows.Win32.DirectDraw.DDSCAPS,
    dwMinOverlayStretch: {"kind":"UInt32"},
    dwMaxOverlayStretch: {"kind":"UInt32"},
    dwMinLiveVideoStretch: {"kind":"UInt32"},
    dwMaxLiveVideoStretch: {"kind":"UInt32"},
    dwMinHwCodecStretch: {"kind":"UInt32"},
    dwMaxHwCodecStretch: {"kind":"UInt32"},
    dwReserved1: {"kind":"UInt32"},
    dwReserved2: {"kind":"UInt32"},
    dwReserved3: {"kind":"UInt32"},
    dwSVBCaps: {"kind":"UInt32"},
    dwSVBCKeyCaps: {"kind":"UInt32"},
    dwSVBFXCaps: {"kind":"UInt32"},
    dwSVBRops: {"kind":"Array","child": {"kind":"UInt32"}},
    dwVSBCaps: {"kind":"UInt32"},
    dwVSBCKeyCaps: {"kind":"UInt32"},
    dwVSBFXCaps: {"kind":"UInt32"},
    dwVSBRops: {"kind":"Array","child": {"kind":"UInt32"}},
    dwSSBCaps: {"kind":"UInt32"},
    dwSSBCKeyCaps: {"kind":"UInt32"},
    dwSSBFXCaps: {"kind":"UInt32"},
    dwSSBRops: {"kind":"Array","child": {"kind":"UInt32"}},
    dwMaxVideoPorts: {"kind":"UInt32"},
    dwCurrVideoPorts: {"kind":"UInt32"},
    dwSVBCaps2: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DD_HALINFO_V4
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_HALINFO_V4 = extern struct {
    dwSize: {"kind":"UInt32"},
    vmiData: Windows.Win32.DisplayDevices.VIDEOMEMORYINFO,
    ddCaps: Windows.Win32.SystemServices.DDNTCORECAPS,
    GetDriverInfo: Windows.Win32.DisplayDevices.PDD_GETDRIVERINFO,
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DD_SETCLIPLISTDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_SETCLIPLISTDATA = extern struct {
    lpDD: {"kind""Ptr","child":Windows.Win32.DisplayDevices.DD_DIRECTDRAW_GLOBAL},
    lpDDSurface: {"kind""Ptr","child":Windows.Win32.DisplayDevices.DD_SURFACE_LOCAL},
    ddRVal: Windows.Win32.Com.HRESULT,
    SetClipList: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: DD_DRVSETCOLORKEYDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_DRVSETCOLORKEYDATA = extern struct {
    lpDDSurface: {"kind""Ptr","child":Windows.Win32.DisplayDevices.DD_SURFACE_LOCAL},
    dwFlags: {"kind":"UInt32"},
    ckNew: Windows.Win32.DirectShow.DDCOLORKEY,
    ddRVal: Windows.Win32.Com.HRESULT,
    SetColorKey: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: DD_DESTROYDDLOCALDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_DESTROYDDLOCALDATA = extern struct {
    dwFlags: {"kind":"UInt32"},
    pDDLcl: {"kind""Ptr","child":Windows.Win32.DisplayDevices.DD_DIRECTDRAW_LOCAL},
    ddRVal: Windows.Win32.Com.HRESULT,
};
// --------------------------------------------------------
// Type: LPD3DVALIDATECALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPD3DVALIDATECALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPD3DENUMTEXTUREFORMATSCALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPD3DENUMTEXTUREFORMATSCALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPD3DENUMPIXELFORMATSCALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPD3DENUMPIXELFORMATSCALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: D3DRECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DRECT = extern struct {
    Anonymous1: Windows.Win32.SystemServices.D3DRECT+_Anonymous1_e__Union,
    Anonymous2: Windows.Win32.SystemServices.D3DRECT+_Anonymous2_e__Union,
    Anonymous3: Windows.Win32.SystemServices.D3DRECT+_Anonymous3_e__Union,
    Anonymous4: Windows.Win32.SystemServices.D3DRECT+_Anonymous4_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous3_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous3_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous4_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous4_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: D3DVECTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DVECTOR = extern struct {
    Anonymous1: Windows.Win32.SystemServices.D3DVECTOR+_Anonymous1_e__Union,
    Anonymous2: Windows.Win32.SystemServices.D3DVECTOR+_Anonymous2_e__Union,
    Anonymous3: Windows.Win32.SystemServices.D3DVECTOR+_Anonymous3_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous3_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous3_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: D3DHVERTEX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DHVERTEX = extern struct {
    dwFlags: {"kind":"UInt32"},
    Anonymous1: Windows.Win32.SystemServices.D3DHVERTEX+_Anonymous1_e__Union,
    Anonymous2: Windows.Win32.SystemServices.D3DHVERTEX+_Anonymous2_e__Union,
    Anonymous3: Windows.Win32.SystemServices.D3DHVERTEX+_Anonymous3_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous3_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous3_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: D3DTLVERTEX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DTLVERTEX = extern struct {
    Anonymous1: Windows.Win32.SystemServices.D3DTLVERTEX+_Anonymous1_e__Union,
    Anonymous2: Windows.Win32.SystemServices.D3DTLVERTEX+_Anonymous2_e__Union,
    Anonymous3: Windows.Win32.SystemServices.D3DTLVERTEX+_Anonymous3_e__Union,
    Anonymous4: Windows.Win32.SystemServices.D3DTLVERTEX+_Anonymous4_e__Union,
    Anonymous5: Windows.Win32.SystemServices.D3DTLVERTEX+_Anonymous5_e__Union,
    Anonymous6: Windows.Win32.SystemServices.D3DTLVERTEX+_Anonymous6_e__Union,
    Anonymous7: Windows.Win32.SystemServices.D3DTLVERTEX+_Anonymous7_e__Union,
    Anonymous8: Windows.Win32.SystemServices.D3DTLVERTEX+_Anonymous8_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous7_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous7_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous5_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous5_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous3_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous3_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous8_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous8_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous4_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous4_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous6_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous6_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: D3DLVERTEX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DLVERTEX = extern struct {
    Anonymous1: Windows.Win32.SystemServices.D3DLVERTEX+_Anonymous1_e__Union,
    Anonymous2: Windows.Win32.SystemServices.D3DLVERTEX+_Anonymous2_e__Union,
    Anonymous3: Windows.Win32.SystemServices.D3DLVERTEX+_Anonymous3_e__Union,
    dwReserved: {"kind":"UInt32"},
    Anonymous4: Windows.Win32.SystemServices.D3DLVERTEX+_Anonymous4_e__Union,
    Anonymous5: Windows.Win32.SystemServices.D3DLVERTEX+_Anonymous5_e__Union,
    Anonymous6: Windows.Win32.SystemServices.D3DLVERTEX+_Anonymous6_e__Union,
    Anonymous7: Windows.Win32.SystemServices.D3DLVERTEX+_Anonymous7_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous7_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous7_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous5_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous5_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous3_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous3_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous4_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous4_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous6_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous6_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: D3DVERTEX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DVERTEX = extern struct {
    Anonymous1: Windows.Win32.SystemServices.D3DVERTEX+_Anonymous1_e__Union,
    Anonymous2: Windows.Win32.SystemServices.D3DVERTEX+_Anonymous2_e__Union,
    Anonymous3: Windows.Win32.SystemServices.D3DVERTEX+_Anonymous3_e__Union,
    Anonymous4: Windows.Win32.SystemServices.D3DVERTEX+_Anonymous4_e__Union,
    Anonymous5: Windows.Win32.SystemServices.D3DVERTEX+_Anonymous5_e__Union,
    Anonymous6: Windows.Win32.SystemServices.D3DVERTEX+_Anonymous6_e__Union,
    Anonymous7: Windows.Win32.SystemServices.D3DVERTEX+_Anonymous7_e__Union,
    Anonymous8: Windows.Win32.SystemServices.D3DVERTEX+_Anonymous8_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous8_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous8_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous6_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous6_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous4_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous4_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous5_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous5_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous7_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous7_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous3_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous3_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: D3DVIEWPORT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DVIEWPORT = extern struct {
    dwSize: {"kind":"UInt32"},
    dwX: {"kind":"UInt32"},
    dwY: {"kind":"UInt32"},
    dwWidth: {"kind":"UInt32"},
    dwHeight: {"kind":"UInt32"},
    dvScaleX: {"kind":"Single"},
    dvScaleY: {"kind":"Single"},
    dvMaxX: {"kind":"Single"},
    dvMaxY: {"kind":"Single"},
    dvMinZ: {"kind":"Single"},
    dvMaxZ: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: D3DVIEWPORT2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DVIEWPORT2 = extern struct {
    dwSize: {"kind":"UInt32"},
    dwX: {"kind":"UInt32"},
    dwY: {"kind":"UInt32"},
    dwWidth: {"kind":"UInt32"},
    dwHeight: {"kind":"UInt32"},
    dvClipX: {"kind":"Single"},
    dvClipY: {"kind":"Single"},
    dvClipWidth: {"kind":"Single"},
    dvClipHeight: {"kind":"Single"},
    dvMinZ: {"kind":"Single"},
    dvMaxZ: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: D3DVIEWPORT7
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DVIEWPORT7 = extern struct {
    dwX: {"kind":"UInt32"},
    dwY: {"kind":"UInt32"},
    dwWidth: {"kind":"UInt32"},
    dwHeight: {"kind":"UInt32"},
    dvMinZ: {"kind":"Single"},
    dvMaxZ: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: D3DTRANSFORMDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DTRANSFORMDATA = extern struct {
    dwSize: {"kind":"UInt32"},
    lpIn: {"kind""Ptr","child":{"kind":"Void"}},
    dwInSize: {"kind":"UInt32"},
    lpOut: {"kind""Ptr","child":{"kind":"Void"}},
    dwOutSize: {"kind":"UInt32"},
    lpHOut: {"kind""Ptr","child":Windows.Win32.SystemServices.D3DHVERTEX},
    dwClip: {"kind":"UInt32"},
    dwClipIntersection: {"kind":"UInt32"},
    dwClipUnion: {"kind":"UInt32"},
    drExtent: Windows.Win32.SystemServices.D3DRECT,
};
// --------------------------------------------------------
// Type: D3DLIGHTINGELEMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DLIGHTINGELEMENT = extern struct {
    dvPosition: Windows.Win32.SystemServices.D3DVECTOR,
    dvNormal: Windows.Win32.SystemServices.D3DVECTOR,
};
// --------------------------------------------------------
// Type: D3DMATERIAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DMATERIAL = extern struct {
    dwSize: {"kind":"UInt32"},
    Anonymous1: Windows.Win32.SystemServices.D3DMATERIAL+_Anonymous1_e__Union,
    Anonymous2: Windows.Win32.SystemServices.D3DMATERIAL+_Anonymous2_e__Union,
    Anonymous3: Windows.Win32.SystemServices.D3DMATERIAL+_Anonymous3_e__Union,
    Anonymous4: Windows.Win32.SystemServices.D3DMATERIAL+_Anonymous4_e__Union,
    Anonymous5: Windows.Win32.SystemServices.D3DMATERIAL+_Anonymous5_e__Union,
    hTexture: {"kind":"UInt32"},
    dwRampSize: {"kind":"UInt32"},
    // --------------------------------------------------------
    // Type: _Anonymous4_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous4_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous5_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous5_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous3_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous3_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: D3DMATERIAL7
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DMATERIAL7 = extern struct {
    Anonymous1: Windows.Win32.SystemServices.D3DMATERIAL7+_Anonymous1_e__Union,
    Anonymous2: Windows.Win32.SystemServices.D3DMATERIAL7+_Anonymous2_e__Union,
    Anonymous3: Windows.Win32.SystemServices.D3DMATERIAL7+_Anonymous3_e__Union,
    Anonymous4: Windows.Win32.SystemServices.D3DMATERIAL7+_Anonymous4_e__Union,
    Anonymous5: Windows.Win32.SystemServices.D3DMATERIAL7+_Anonymous5_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous5_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous5_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous3_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous3_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous4_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous4_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: D3DLIGHTTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DLIGHTTYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3DLIGHT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DLIGHT = extern struct {
    dwSize: {"kind":"UInt32"},
    dltType: Windows.Win32.SystemServices.D3DLIGHTTYPE,
    dcvColor: Windows.Win32.Dxgi.DXGI_RGBA,
    dvPosition: Windows.Win32.SystemServices.D3DVECTOR,
    dvDirection: Windows.Win32.SystemServices.D3DVECTOR,
    dvRange: {"kind":"Single"},
    dvFalloff: {"kind":"Single"},
    dvAttenuation0: {"kind":"Single"},
    dvAttenuation1: {"kind":"Single"},
    dvAttenuation2: {"kind":"Single"},
    dvTheta: {"kind":"Single"},
    dvPhi: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: D3DLIGHT7
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DLIGHT7 = extern struct {
    dltType: Windows.Win32.SystemServices.D3DLIGHTTYPE,
    dcvDiffuse: Windows.Win32.Dxgi.DXGI_RGBA,
    dcvSpecular: Windows.Win32.Dxgi.DXGI_RGBA,
    dcvAmbient: Windows.Win32.Dxgi.DXGI_RGBA,
    dvPosition: Windows.Win32.SystemServices.D3DVECTOR,
    dvDirection: Windows.Win32.SystemServices.D3DVECTOR,
    dvRange: {"kind":"Single"},
    dvFalloff: {"kind":"Single"},
    dvAttenuation0: {"kind":"Single"},
    dvAttenuation1: {"kind":"Single"},
    dvAttenuation2: {"kind":"Single"},
    dvTheta: {"kind":"Single"},
    dvPhi: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: D3DLIGHT2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DLIGHT2 = extern struct {
    dwSize: {"kind":"UInt32"},
    dltType: Windows.Win32.SystemServices.D3DLIGHTTYPE,
    dcvColor: Windows.Win32.Dxgi.DXGI_RGBA,
    dvPosition: Windows.Win32.SystemServices.D3DVECTOR,
    dvDirection: Windows.Win32.SystemServices.D3DVECTOR,
    dvRange: {"kind":"Single"},
    dvFalloff: {"kind":"Single"},
    dvAttenuation0: {"kind":"Single"},
    dvAttenuation1: {"kind":"Single"},
    dvAttenuation2: {"kind":"Single"},
    dvTheta: {"kind":"Single"},
    dvPhi: {"kind":"Single"},
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3DLIGHTDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DLIGHTDATA = extern struct {
    dwSize: {"kind":"UInt32"},
    lpIn: {"kind""Ptr","child":Windows.Win32.SystemServices.D3DLIGHTINGELEMENT},
    dwInSize: {"kind":"UInt32"},
    lpOut: {"kind""Ptr","child":Windows.Win32.SystemServices.D3DTLVERTEX},
    dwOutSize: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3DOPCODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DOPCODE = *opaque{
};
// --------------------------------------------------------
// Type: D3DINSTRUCTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DINSTRUCTION = extern struct {
    bOpcode: {"kind":"Byte"},
    bSize: {"kind":"Byte"},
    wCount: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: D3DTEXTURELOAD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DTEXTURELOAD = extern struct {
    hDestTexture: {"kind":"UInt32"},
    hSrcTexture: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3DPICKRECORD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DPICKRECORD = extern struct {
    bOpcode: {"kind":"Byte"},
    bPad: {"kind":"Byte"},
    dwOffset: {"kind":"UInt32"},
    dvZ: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: D3DSHADEMODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DSHADEMODE = *opaque{
};
// --------------------------------------------------------
// Type: D3DFILLMODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DFILLMODE = *opaque{
};
// --------------------------------------------------------
// Type: D3DLINEPATTERN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DLINEPATTERN = extern struct {
    wRepeatFactor: {"kind":"UInt16"},
    wLinePattern: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: D3DTEXTUREFILTER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DTEXTUREFILTER = *opaque{
};
// --------------------------------------------------------
// Type: D3DBLEND
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DBLEND = *opaque{
};
// --------------------------------------------------------
// Type: D3DTEXTUREBLEND
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DTEXTUREBLEND = *opaque{
};
// --------------------------------------------------------
// Type: D3DTEXTUREADDRESS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DTEXTUREADDRESS = *opaque{
};
// --------------------------------------------------------
// Type: D3DCULL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DCULL = *opaque{
};
// --------------------------------------------------------
// Type: D3DCMPFUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DCMPFUNC = *opaque{
};
// --------------------------------------------------------
// Type: D3DSTENCILOP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DSTENCILOP = *opaque{
};
// --------------------------------------------------------
// Type: D3DFOGMODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DFOGMODE = *opaque{
};
// --------------------------------------------------------
// Type: D3DZBUFFERTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DZBUFFERTYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3DANTIALIASMODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DANTIALIASMODE = *opaque{
};
// --------------------------------------------------------
// Type: D3DVERTEXTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DVERTEXTYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3DPRIMITIVETYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DPRIMITIVETYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3DTRANSFORMSTATETYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DTRANSFORMSTATETYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3DLIGHTSTATETYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DLIGHTSTATETYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3DRENDERSTATETYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DRENDERSTATETYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3DMATERIALCOLORSOURCE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DMATERIALCOLORSOURCE = *opaque{
};
// --------------------------------------------------------
// Type: D3DSTATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DSTATE = extern struct {
    Anonymous1: Windows.Win32.SystemServices.D3DSTATE+_Anonymous1_e__Union,
    Anonymous2: Windows.Win32.SystemServices.D3DSTATE+_Anonymous2_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: D3DMATRIXLOAD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DMATRIXLOAD = extern struct {
    hDestMatrix: {"kind":"UInt32"},
    hSrcMatrix: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3DMATRIXMULTIPLY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DMATRIXMULTIPLY = extern struct {
    hDestMatrix: {"kind":"UInt32"},
    hSrcMatrix1: {"kind":"UInt32"},
    hSrcMatrix2: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3DPROCESSVERTICES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DPROCESSVERTICES = extern struct {
    dwFlags: {"kind":"UInt32"},
    wStart: {"kind":"UInt16"},
    wDest: {"kind":"UInt16"},
    dwCount: {"kind":"UInt32"},
    dwReserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3DTEXTURESTAGESTATETYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DTEXTURESTAGESTATETYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3DTEXTUREOP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DTEXTUREOP = *opaque{
};
// --------------------------------------------------------
// Type: D3DTEXTUREMAGFILTER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DTEXTUREMAGFILTER = *opaque{
};
// --------------------------------------------------------
// Type: D3DTEXTUREMINFILTER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DTEXTUREMINFILTER = *opaque{
};
// --------------------------------------------------------
// Type: D3DTEXTUREMIPFILTER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DTEXTUREMIPFILTER = *opaque{
};
// --------------------------------------------------------
// Type: D3DTRIANGLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DTRIANGLE = extern struct {
    Anonymous1: Windows.Win32.SystemServices.D3DTRIANGLE+_Anonymous1_e__Union,
    Anonymous2: Windows.Win32.SystemServices.D3DTRIANGLE+_Anonymous2_e__Union,
    Anonymous3: Windows.Win32.SystemServices.D3DTRIANGLE+_Anonymous3_e__Union,
    wFlags: {"kind":"UInt16"},
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous3_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous3_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: D3DLINE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DLINE = extern struct {
    Anonymous1: Windows.Win32.SystemServices.D3DLINE+_Anonymous1_e__Union,
    Anonymous2: Windows.Win32.SystemServices.D3DLINE+_Anonymous2_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: D3DSPAN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DSPAN = extern struct {
    wCount: {"kind":"UInt16"},
    wFirst: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: D3DPOINT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DPOINT = extern struct {
    wCount: {"kind":"UInt16"},
    wFirst: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: D3DBRANCH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DBRANCH = extern struct {
    dwMask: {"kind":"UInt32"},
    dwValue: {"kind":"UInt32"},
    bNegate: Windows.Win32.SystemServices.BOOL,
    dwOffset: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3DSTATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DSTATUS = extern struct {
    dwFlags: {"kind":"UInt32"},
    dwStatus: {"kind":"UInt32"},
    drExtent: Windows.Win32.SystemServices.D3DRECT,
};
// --------------------------------------------------------
// Type: D3DCLIPSTATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DCLIPSTATUS = extern struct {
    dwFlags: {"kind":"UInt32"},
    dwStatus: {"kind":"UInt32"},
    minx: {"kind":"Single"},
    maxx: {"kind":"Single"},
    miny: {"kind":"Single"},
    maxy: {"kind":"Single"},
    minz: {"kind":"Single"},
    maxz: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: D3DSTATS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DSTATS = extern struct {
    dwSize: {"kind":"UInt32"},
    dwTrianglesDrawn: {"kind":"UInt32"},
    dwLinesDrawn: {"kind":"UInt32"},
    dwPointsDrawn: {"kind":"UInt32"},
    dwSpansDrawn: {"kind":"UInt32"},
    dwVerticesProcessed: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3DEXECUTEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DEXECUTEDATA = extern struct {
    dwSize: {"kind":"UInt32"},
    dwVertexOffset: {"kind":"UInt32"},
    dwVertexCount: {"kind":"UInt32"},
    dwInstructionOffset: {"kind":"UInt32"},
    dwInstructionLength: {"kind":"UInt32"},
    dwHVertexOffset: {"kind":"UInt32"},
    dsStatus: Windows.Win32.SystemServices.D3DSTATUS,
};
// --------------------------------------------------------
// Type: D3DVERTEXBUFFERDESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DVERTEXBUFFERDESC = extern struct {
    dwSize: {"kind":"UInt32"},
    dwCaps: {"kind":"UInt32"},
    dwFVF: {"kind":"UInt32"},
    dwNumVertices: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3DDP_PTRSTRIDE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DDP_PTRSTRIDE = extern struct {
    lpvData: {"kind""Ptr","child":{"kind":"Void"}},
    dwStride: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3DDRAWPRIMITIVESTRIDEDDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DDRAWPRIMITIVESTRIDEDDATA = extern struct {
    position: Windows.Win32.SystemServices.D3DDP_PTRSTRIDE,
    normal: Windows.Win32.SystemServices.D3DDP_PTRSTRIDE,
    diffuse: Windows.Win32.SystemServices.D3DDP_PTRSTRIDE,
    specular: Windows.Win32.SystemServices.D3DDP_PTRSTRIDE,
    textureCoords: {"kind":"Array","child": Windows.Win32.SystemServices.D3DDP_PTRSTRIDE},
};
// --------------------------------------------------------
// Type: D3DSTATEBLOCKTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DSTATEBLOCKTYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3DVERTEXBLENDFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DVERTEXBLENDFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3DTEXTURETRANSFORMFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DTEXTURETRANSFORMFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3DTRANSFORMCAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DTRANSFORMCAPS = extern struct {
    dwSize: {"kind":"UInt32"},
    dwCaps: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3DLIGHTINGCAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DLIGHTINGCAPS = extern struct {
    dwSize: {"kind":"UInt32"},
    dwCaps: {"kind":"UInt32"},
    dwLightingModel: {"kind":"UInt32"},
    dwNumLights: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: _D3DPrimCaps
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _D3DPrimCaps = extern struct {
    dwSize: {"kind":"UInt32"},
    dwMiscCaps: {"kind":"UInt32"},
    dwRasterCaps: {"kind":"UInt32"},
    dwZCmpCaps: {"kind":"UInt32"},
    dwSrcBlendCaps: {"kind":"UInt32"},
    dwDestBlendCaps: {"kind":"UInt32"},
    dwAlphaCmpCaps: {"kind":"UInt32"},
    dwShadeCaps: {"kind":"UInt32"},
    dwTextureCaps: {"kind":"UInt32"},
    dwTextureFilterCaps: {"kind":"UInt32"},
    dwTextureBlendCaps: {"kind":"UInt32"},
    dwTextureAddressCaps: {"kind":"UInt32"},
    dwStippleWidth: {"kind":"UInt32"},
    dwStippleHeight: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: _D3DDeviceDesc
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _D3DDeviceDesc = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    dcmColorModel: {"kind":"UInt32"},
    dwDevCaps: {"kind":"UInt32"},
    dtcTransformCaps: Windows.Win32.SystemServices.D3DTRANSFORMCAPS,
    bClipping: Windows.Win32.SystemServices.BOOL,
    dlcLightingCaps: Windows.Win32.SystemServices.D3DLIGHTINGCAPS,
    dpcLineCaps: Windows.Win32.SystemServices._D3DPrimCaps,
    dpcTriCaps: Windows.Win32.SystemServices._D3DPrimCaps,
    dwDeviceRenderBitDepth: {"kind":"UInt32"},
    dwDeviceZBufferBitDepth: {"kind":"UInt32"},
    dwMaxBufferSize: {"kind":"UInt32"},
    dwMaxVertexCount: {"kind":"UInt32"},
    dwMinTextureWidth: {"kind":"UInt32"},
    dwMinTextureHeight: {"kind":"UInt32"},
    dwMaxTextureWidth: {"kind":"UInt32"},
    dwMaxTextureHeight: {"kind":"UInt32"},
    dwMinStippleWidth: {"kind":"UInt32"},
    dwMaxStippleWidth: {"kind":"UInt32"},
    dwMinStippleHeight: {"kind":"UInt32"},
    dwMaxStippleHeight: {"kind":"UInt32"},
    dwMaxTextureRepeat: {"kind":"UInt32"},
    dwMaxTextureAspectRatio: {"kind":"UInt32"},
    dwMaxAnisotropy: {"kind":"UInt32"},
    dvGuardBandLeft: {"kind":"Single"},
    dvGuardBandTop: {"kind":"Single"},
    dvGuardBandRight: {"kind":"Single"},
    dvGuardBandBottom: {"kind":"Single"},
    dvExtentsAdjust: {"kind":"Single"},
    dwStencilCaps: {"kind":"UInt32"},
    dwFVFCaps: {"kind":"UInt32"},
    dwTextureOpCaps: {"kind":"UInt32"},
    wMaxTextureBlendStages: {"kind":"UInt16"},
    wMaxSimultaneousTextures: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: _D3DDeviceDesc7
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _D3DDeviceDesc7 = extern struct {
    dwDevCaps: {"kind":"UInt32"},
    dpcLineCaps: Windows.Win32.SystemServices._D3DPrimCaps,
    dpcTriCaps: Windows.Win32.SystemServices._D3DPrimCaps,
    dwDeviceRenderBitDepth: {"kind":"UInt32"},
    dwDeviceZBufferBitDepth: {"kind":"UInt32"},
    dwMinTextureWidth: {"kind":"UInt32"},
    dwMinTextureHeight: {"kind":"UInt32"},
    dwMaxTextureWidth: {"kind":"UInt32"},
    dwMaxTextureHeight: {"kind":"UInt32"},
    dwMaxTextureRepeat: {"kind":"UInt32"},
    dwMaxTextureAspectRatio: {"kind":"UInt32"},
    dwMaxAnisotropy: {"kind":"UInt32"},
    dvGuardBandLeft: {"kind":"Single"},
    dvGuardBandTop: {"kind":"Single"},
    dvGuardBandRight: {"kind":"Single"},
    dvGuardBandBottom: {"kind":"Single"},
    dvExtentsAdjust: {"kind":"Single"},
    dwStencilCaps: {"kind":"UInt32"},
    dwFVFCaps: {"kind":"UInt32"},
    dwTextureOpCaps: {"kind":"UInt32"},
    wMaxTextureBlendStages: {"kind":"UInt16"},
    wMaxSimultaneousTextures: {"kind":"UInt16"},
    dwMaxActiveLights: {"kind":"UInt32"},
    dvMaxVertexW: {"kind":"Single"},
    deviceGUID: Guid,
    wMaxUserClipPlanes: {"kind":"UInt16"},
    wMaxVertexBlendMatrices: {"kind":"UInt16"},
    dwVertexProcessingCaps: {"kind":"UInt32"},
    dwReserved1: {"kind":"UInt32"},
    dwReserved2: {"kind":"UInt32"},
    dwReserved3: {"kind":"UInt32"},
    dwReserved4: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: LPD3DENUMDEVICESCALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPD3DENUMDEVICESCALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPD3DENUMDEVICESCALLBACK7
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPD3DENUMDEVICESCALLBACK7 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: D3DFINDDEVICESEARCH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DFINDDEVICESEARCH = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    bHardware: Windows.Win32.SystemServices.BOOL,
    dcmColorModel: {"kind":"UInt32"},
    guid: Guid,
    dwCaps: {"kind":"UInt32"},
    dpcPrimCaps: Windows.Win32.SystemServices._D3DPrimCaps,
};
// --------------------------------------------------------
// Type: D3DFINDDEVICERESULT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DFINDDEVICERESULT = extern struct {
    dwSize: {"kind":"UInt32"},
    guid: Guid,
    ddHwDesc: Windows.Win32.SystemServices._D3DDeviceDesc,
    ddSwDesc: Windows.Win32.SystemServices._D3DDeviceDesc,
};
// --------------------------------------------------------
// Type: _D3DExecuteBufferDesc
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _D3DExecuteBufferDesc = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    dwCaps: {"kind":"UInt32"},
    dwBufferSize: {"kind":"UInt32"},
    lpData: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: D3DDEVINFO_TEXTUREMANAGER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DDEVINFO_TEXTUREMANAGER = extern struct {
    bThrashing: Windows.Win32.SystemServices.BOOL,
    dwApproxBytesDownloaded: {"kind":"UInt32"},
    dwNumEvicts: {"kind":"UInt32"},
    dwNumVidCreates: {"kind":"UInt32"},
    dwNumTexturesUsed: {"kind":"UInt32"},
    dwNumUsedTexInVid: {"kind":"UInt32"},
    dwWorkingSet: {"kind":"UInt32"},
    dwWorkingSetBytes: {"kind":"UInt32"},
    dwTotalManaged: {"kind":"UInt32"},
    dwTotalBytes: {"kind":"UInt32"},
    dwLastPri: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3DDEVINFO_TEXTURING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DDEVINFO_TEXTURING = extern struct {
    dwNumLoads: {"kind":"UInt32"},
    dwApproxBytesLoaded: {"kind":"UInt32"},
    dwNumPreLoads: {"kind":"UInt32"},
    dwNumSet: {"kind":"UInt32"},
    dwNumCreates: {"kind":"UInt32"},
    dwNumDestroys: {"kind":"UInt32"},
    dwNumSetPriorities: {"kind":"UInt32"},
    dwNumSetLODs: {"kind":"UInt32"},
    dwNumLocks: {"kind":"UInt32"},
    dwNumGetDCs: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: _D3DNTHALDeviceDesc_V1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _D3DNTHALDeviceDesc_V1 = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    dcmColorModel: {"kind":"UInt32"},
    dwDevCaps: {"kind":"UInt32"},
    dtcTransformCaps: Windows.Win32.SystemServices.D3DTRANSFORMCAPS,
    bClipping: Windows.Win32.SystemServices.BOOL,
    dlcLightingCaps: Windows.Win32.SystemServices.D3DLIGHTINGCAPS,
    dpcLineCaps: Windows.Win32.SystemServices._D3DPrimCaps,
    dpcTriCaps: Windows.Win32.SystemServices._D3DPrimCaps,
    dwDeviceRenderBitDepth: {"kind":"UInt32"},
    dwDeviceZBufferBitDepth: {"kind":"UInt32"},
    dwMaxBufferSize: {"kind":"UInt32"},
    dwMaxVertexCount: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: _D3DNTHALDeviceDesc_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _D3DNTHALDeviceDesc_V2 = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    dcmColorModel: {"kind":"UInt32"},
    dwDevCaps: {"kind":"UInt32"},
    dtcTransformCaps: Windows.Win32.SystemServices.D3DTRANSFORMCAPS,
    bClipping: Windows.Win32.SystemServices.BOOL,
    dlcLightingCaps: Windows.Win32.SystemServices.D3DLIGHTINGCAPS,
    dpcLineCaps: Windows.Win32.SystemServices._D3DPrimCaps,
    dpcTriCaps: Windows.Win32.SystemServices._D3DPrimCaps,
    dwDeviceRenderBitDepth: {"kind":"UInt32"},
    dwDeviceZBufferBitDepth: {"kind":"UInt32"},
    dwMaxBufferSize: {"kind":"UInt32"},
    dwMaxVertexCount: {"kind":"UInt32"},
    dwMinTextureWidth: {"kind":"UInt32"},
    dwMinTextureHeight: {"kind":"UInt32"},
    dwMaxTextureWidth: {"kind":"UInt32"},
    dwMaxTextureHeight: {"kind":"UInt32"},
    dwMinStippleWidth: {"kind":"UInt32"},
    dwMaxStippleWidth: {"kind":"UInt32"},
    dwMinStippleHeight: {"kind":"UInt32"},
    dwMaxStippleHeight: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: _D3DNTDeviceDesc_V3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _D3DNTDeviceDesc_V3 = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    dcmColorModel: {"kind":"UInt32"},
    dwDevCaps: {"kind":"UInt32"},
    dtcTransformCaps: Windows.Win32.SystemServices.D3DTRANSFORMCAPS,
    bClipping: Windows.Win32.SystemServices.BOOL,
    dlcLightingCaps: Windows.Win32.SystemServices.D3DLIGHTINGCAPS,
    dpcLineCaps: Windows.Win32.SystemServices._D3DPrimCaps,
    dpcTriCaps: Windows.Win32.SystemServices._D3DPrimCaps,
    dwDeviceRenderBitDepth: {"kind":"UInt32"},
    dwDeviceZBufferBitDepth: {"kind":"UInt32"},
    dwMaxBufferSize: {"kind":"UInt32"},
    dwMaxVertexCount: {"kind":"UInt32"},
    dwMinTextureWidth: {"kind":"UInt32"},
    dwMinTextureHeight: {"kind":"UInt32"},
    dwMaxTextureWidth: {"kind":"UInt32"},
    dwMaxTextureHeight: {"kind":"UInt32"},
    dwMinStippleWidth: {"kind":"UInt32"},
    dwMaxStippleWidth: {"kind":"UInt32"},
    dwMinStippleHeight: {"kind":"UInt32"},
    dwMaxStippleHeight: {"kind":"UInt32"},
    dwMaxTextureRepeat: {"kind":"UInt32"},
    dwMaxTextureAspectRatio: {"kind":"UInt32"},
    dwMaxAnisotropy: {"kind":"UInt32"},
    dvGuardBandLeft: {"kind":"Single"},
    dvGuardBandTop: {"kind":"Single"},
    dvGuardBandRight: {"kind":"Single"},
    dvGuardBandBottom: {"kind":"Single"},
    dvExtentsAdjust: {"kind":"Single"},
    dwStencilCaps: {"kind":"UInt32"},
    dwFVFCaps: {"kind":"UInt32"},
    dwTextureOpCaps: {"kind":"UInt32"},
    wMaxTextureBlendStages: {"kind":"UInt16"},
    wMaxSimultaneousTextures: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: D3DNTHAL_GLOBALDRIVERDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_GLOBALDRIVERDATA = extern struct {
    dwSize: {"kind":"UInt32"},
    hwCaps: Windows.Win32.SystemServices._D3DNTHALDeviceDesc_V1,
    dwNumVertices: {"kind":"UInt32"},
    dwNumClipVertices: {"kind":"UInt32"},
    dwNumTextureFormats: {"kind":"UInt32"},
    lpTextureFormats: {"kind""Ptr","child":Windows.Win32.DirectDraw.DDSURFACEDESC},
};
// --------------------------------------------------------
// Type: D3DNTHAL_D3DDX6EXTENDEDCAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_D3DDX6EXTENDEDCAPS = extern struct {
    dwSize: {"kind":"UInt32"},
    dwMinTextureWidth: {"kind":"UInt32"},
    dwMaxTextureWidth: {"kind":"UInt32"},
    dwMinTextureHeight: {"kind":"UInt32"},
    dwMaxTextureHeight: {"kind":"UInt32"},
    dwMinStippleWidth: {"kind":"UInt32"},
    dwMaxStippleWidth: {"kind":"UInt32"},
    dwMinStippleHeight: {"kind":"UInt32"},
    dwMaxStippleHeight: {"kind":"UInt32"},
    dwMaxTextureRepeat: {"kind":"UInt32"},
    dwMaxTextureAspectRatio: {"kind":"UInt32"},
    dwMaxAnisotropy: {"kind":"UInt32"},
    dvGuardBandLeft: {"kind":"Single"},
    dvGuardBandTop: {"kind":"Single"},
    dvGuardBandRight: {"kind":"Single"},
    dvGuardBandBottom: {"kind":"Single"},
    dvExtentsAdjust: {"kind":"Single"},
    dwStencilCaps: {"kind":"UInt32"},
    dwFVFCaps: {"kind":"UInt32"},
    dwTextureOpCaps: {"kind":"UInt32"},
    wMaxTextureBlendStages: {"kind":"UInt16"},
    wMaxSimultaneousTextures: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: D3DNTHAL_D3DEXTENDEDCAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_D3DEXTENDEDCAPS = extern struct {
    dwSize: {"kind":"UInt32"},
    dwMinTextureWidth: {"kind":"UInt32"},
    dwMaxTextureWidth: {"kind":"UInt32"},
    dwMinTextureHeight: {"kind":"UInt32"},
    dwMaxTextureHeight: {"kind":"UInt32"},
    dwMinStippleWidth: {"kind":"UInt32"},
    dwMaxStippleWidth: {"kind":"UInt32"},
    dwMinStippleHeight: {"kind":"UInt32"},
    dwMaxStippleHeight: {"kind":"UInt32"},
    dwMaxTextureRepeat: {"kind":"UInt32"},
    dwMaxTextureAspectRatio: {"kind":"UInt32"},
    dwMaxAnisotropy: {"kind":"UInt32"},
    dvGuardBandLeft: {"kind":"Single"},
    dvGuardBandTop: {"kind":"Single"},
    dvGuardBandRight: {"kind":"Single"},
    dvGuardBandBottom: {"kind":"Single"},
    dvExtentsAdjust: {"kind":"Single"},
    dwStencilCaps: {"kind":"UInt32"},
    dwFVFCaps: {"kind":"UInt32"},
    dwTextureOpCaps: {"kind":"UInt32"},
    wMaxTextureBlendStages: {"kind":"UInt16"},
    wMaxSimultaneousTextures: {"kind":"UInt16"},
    dwMaxActiveLights: {"kind":"UInt32"},
    dvMaxVertexW: {"kind":"Single"},
    wMaxUserClipPlanes: {"kind":"UInt16"},
    wMaxVertexBlendMatrices: {"kind":"UInt16"},
    dwVertexProcessingCaps: {"kind":"UInt32"},
    dwReserved1: {"kind":"UInt32"},
    dwReserved2: {"kind":"UInt32"},
    dwReserved3: {"kind":"UInt32"},
    dwReserved4: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3DNTHAL_CONTEXTCREATEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_CONTEXTCREATEDATA = extern struct {
    Anonymous1: Windows.Win32.SystemServices.D3DNTHAL_CONTEXTCREATEDATA+_Anonymous1_e__Union,
    Anonymous2: Windows.Win32.SystemServices.D3DNTHAL_CONTEXTCREATEDATA+_Anonymous2_e__Union,
    Anonymous3: Windows.Win32.SystemServices.D3DNTHAL_CONTEXTCREATEDATA+_Anonymous3_e__Union,
    dwPID: {"kind":"UInt32"},
    dwhContext: {"kind":"UIntPtr"},
    ddrval: Windows.Win32.Com.HRESULT,
    // --------------------------------------------------------
    // Type: _Anonymous3_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous3_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: D3DNTHAL_CONTEXTDESTROYDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_CONTEXTDESTROYDATA = extern struct {
    dwhContext: {"kind":"UIntPtr"},
    ddrval: Windows.Win32.Com.HRESULT,
};
// --------------------------------------------------------
// Type: D3DNTHAL_CONTEXTDESTROYALLDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_CONTEXTDESTROYALLDATA = extern struct {
    dwPID: {"kind":"UInt32"},
    ddrval: Windows.Win32.Com.HRESULT,
};
// --------------------------------------------------------
// Type: D3DNTHAL_SCENECAPTUREDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_SCENECAPTUREDATA = extern struct {
    dwhContext: {"kind":"UIntPtr"},
    dwFlag: {"kind":"UInt32"},
    ddrval: Windows.Win32.Com.HRESULT,
};
// --------------------------------------------------------
// Type: D3DNTHAL_TEXTURECREATEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_TEXTURECREATEDATA = extern struct {
    dwhContext: {"kind":"UIntPtr"},
    hDDS: Windows.Win32.SystemServices.HANDLE,
    dwHandle: {"kind":"UIntPtr"},
    ddrval: Windows.Win32.Com.HRESULT,
};
// --------------------------------------------------------
// Type: D3DNTHAL_TEXTUREDESTROYDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_TEXTUREDESTROYDATA = extern struct {
    dwhContext: {"kind":"UIntPtr"},
    dwHandle: {"kind":"UIntPtr"},
    ddrval: Windows.Win32.Com.HRESULT,
};
// --------------------------------------------------------
// Type: D3DNTHAL_TEXTURESWAPDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_TEXTURESWAPDATA = extern struct {
    dwhContext: {"kind":"UIntPtr"},
    dwHandle1: {"kind":"UIntPtr"},
    dwHandle2: {"kind":"UIntPtr"},
    ddrval: Windows.Win32.Com.HRESULT,
};
// --------------------------------------------------------
// Type: D3DNTHAL_TEXTUREGETSURFDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_TEXTUREGETSURFDATA = extern struct {
    dwhContext: {"kind":"UIntPtr"},
    hDDS: Windows.Win32.SystemServices.HANDLE,
    dwHandle: {"kind":"UIntPtr"},
    ddrval: Windows.Win32.Com.HRESULT,
};
// --------------------------------------------------------
// Type: LPD3DNTHAL_CONTEXTCREATECB
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPD3DNTHAL_CONTEXTCREATECB = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPD3DNTHAL_CONTEXTDESTROYCB
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPD3DNTHAL_CONTEXTDESTROYCB = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPD3DNTHAL_CONTEXTDESTROYALLCB
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPD3DNTHAL_CONTEXTDESTROYALLCB = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPD3DNTHAL_SCENECAPTURECB
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPD3DNTHAL_SCENECAPTURECB = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPD3DNTHAL_TEXTURECREATECB
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPD3DNTHAL_TEXTURECREATECB = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPD3DNTHAL_TEXTUREDESTROYCB
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPD3DNTHAL_TEXTUREDESTROYCB = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPD3DNTHAL_TEXTURESWAPCB
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPD3DNTHAL_TEXTURESWAPCB = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPD3DNTHAL_TEXTUREGETSURFCB
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPD3DNTHAL_TEXTUREGETSURFCB = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: D3DNTHAL_CALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_CALLBACKS = extern struct {
    dwSize: {"kind":"UInt32"},
    ContextCreate: Windows.Win32.SystemServices.LPD3DNTHAL_CONTEXTCREATECB,
    ContextDestroy: Windows.Win32.SystemServices.LPD3DNTHAL_CONTEXTDESTROYCB,
    ContextDestroyAll: Windows.Win32.SystemServices.LPD3DNTHAL_CONTEXTDESTROYALLCB,
    SceneCapture: Windows.Win32.SystemServices.LPD3DNTHAL_SCENECAPTURECB,
    dwReserved10: {"kind""Ptr","child":{"kind":"Void"}},
    dwReserved11: {"kind""Ptr","child":{"kind":"Void"}},
    dwReserved22: {"kind""Ptr","child":{"kind":"Void"}},
    dwReserved23: {"kind""Ptr","child":{"kind":"Void"}},
    dwReserved: {"kind":"UIntPtr"},
    TextureCreate: Windows.Win32.SystemServices.LPD3DNTHAL_TEXTURECREATECB,
    TextureDestroy: Windows.Win32.SystemServices.LPD3DNTHAL_TEXTUREDESTROYCB,
    TextureSwap: Windows.Win32.SystemServices.LPD3DNTHAL_TEXTURESWAPCB,
    TextureGetSurf: Windows.Win32.SystemServices.LPD3DNTHAL_TEXTUREGETSURFCB,
    dwReserved12: {"kind""Ptr","child":{"kind":"Void"}},
    dwReserved13: {"kind""Ptr","child":{"kind":"Void"}},
    dwReserved14: {"kind""Ptr","child":{"kind":"Void"}},
    dwReserved15: {"kind""Ptr","child":{"kind":"Void"}},
    dwReserved16: {"kind""Ptr","child":{"kind":"Void"}},
    dwReserved17: {"kind""Ptr","child":{"kind":"Void"}},
    dwReserved18: {"kind""Ptr","child":{"kind":"Void"}},
    dwReserved19: {"kind""Ptr","child":{"kind":"Void"}},
    dwReserved20: {"kind""Ptr","child":{"kind":"Void"}},
    dwReserved21: {"kind""Ptr","child":{"kind":"Void"}},
    dwReserved24: {"kind""Ptr","child":{"kind":"Void"}},
    dwReserved0: {"kind":"UIntPtr"},
    dwReserved1: {"kind":"UIntPtr"},
    dwReserved2: {"kind":"UIntPtr"},
    dwReserved3: {"kind":"UIntPtr"},
    dwReserved4: {"kind":"UIntPtr"},
    dwReserved5: {"kind":"UIntPtr"},
    dwReserved6: {"kind":"UIntPtr"},
    dwReserved7: {"kind":"UIntPtr"},
    dwReserved8: {"kind":"UIntPtr"},
    dwReserved9: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: D3DNTHAL_SETRENDERTARGETDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_SETRENDERTARGETDATA = extern struct {
    dwhContext: {"kind":"UIntPtr"},
    lpDDS: {"kind""Ptr","child":Windows.Win32.DisplayDevices.DD_SURFACE_LOCAL},
    lpDDSZ: {"kind""Ptr","child":Windows.Win32.DisplayDevices.DD_SURFACE_LOCAL},
    ddrval: Windows.Win32.Com.HRESULT,
};
// --------------------------------------------------------
// Type: LPD3DNTHAL_SETRENDERTARGETCB
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPD3DNTHAL_SETRENDERTARGETCB = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: D3DNTHAL_CALLBACKS2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_CALLBACKS2 = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    SetRenderTarget: Windows.Win32.SystemServices.LPD3DNTHAL_SETRENDERTARGETCB,
    dwReserved1: {"kind""Ptr","child":{"kind":"Void"}},
    dwReserved2: {"kind""Ptr","child":{"kind":"Void"}},
    dwReserved3: {"kind""Ptr","child":{"kind":"Void"}},
    dwReserved4: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: D3DNTHAL_CLEAR2DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_CLEAR2DATA = extern struct {
    dwhContext: {"kind":"UIntPtr"},
    dwFlags: {"kind":"UInt32"},
    dwFillColor: {"kind":"UInt32"},
    dvFillDepth: {"kind":"Single"},
    dwFillStencil: {"kind":"UInt32"},
    lpRects: {"kind""Ptr","child":Windows.Win32.SystemServices.D3DRECT},
    dwNumRects: {"kind":"UInt32"},
    ddrval: Windows.Win32.Com.HRESULT,
};
// --------------------------------------------------------
// Type: D3DNTHAL_VALIDATETEXTURESTAGESTATEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_VALIDATETEXTURESTAGESTATEDATA = extern struct {
    dwhContext: {"kind":"UIntPtr"},
    dwFlags: {"kind":"UInt32"},
    dwReserved: {"kind":"UIntPtr"},
    dwNumPasses: {"kind":"UInt32"},
    ddrval: Windows.Win32.Com.HRESULT,
};
// --------------------------------------------------------
// Type: D3DNTHAL_DP2COMMAND
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_DP2COMMAND = extern struct {
    bCommand: {"kind":"Byte"},
    bReserved: {"kind":"Byte"},
    Anonymous: Windows.Win32.SystemServices.D3DNTHAL_DP2COMMAND+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: D3DNTHAL_DP2OPERATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DNTHAL_DP2OPERATION = *opaque{
};
// --------------------------------------------------------
// Type: D3DNTHAL_DP2POINTS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_DP2POINTS = extern struct {
    wCount: {"kind":"UInt16"},
    wVStart: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: D3DNTHAL_DP2STARTVERTEX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_DP2STARTVERTEX = extern struct {
    wVStart: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: D3DNTHAL_DP2LINELIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_DP2LINELIST = extern struct {
    wVStart: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: D3DNTHAL_DP2INDEXEDLINELIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_DP2INDEXEDLINELIST = extern struct {
    wV1: {"kind":"UInt16"},
    wV2: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: D3DNTHAL_DP2LINESTRIP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_DP2LINESTRIP = extern struct {
    wVStart: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: D3DNTHAL_DP2INDEXEDLINESTRIP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_DP2INDEXEDLINESTRIP = extern struct {
    wV: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: D3DNTHAL_DP2TRIANGLELIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_DP2TRIANGLELIST = extern struct {
    wVStart: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: D3DNTHAL_DP2INDEXEDTRIANGLELIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_DP2INDEXEDTRIANGLELIST = extern struct {
    wV1: {"kind":"UInt16"},
    wV2: {"kind":"UInt16"},
    wV3: {"kind":"UInt16"},
    wFlags: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: D3DNTHAL_DP2INDEXEDTRIANGLELIST2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_DP2INDEXEDTRIANGLELIST2 = extern struct {
    wV1: {"kind":"UInt16"},
    wV2: {"kind":"UInt16"},
    wV3: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: D3DNTHAL_DP2TRIANGLESTRIP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_DP2TRIANGLESTRIP = extern struct {
    wVStart: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: D3DNTHAL_DP2INDEXEDTRIANGLESTRIP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_DP2INDEXEDTRIANGLESTRIP = extern struct {
    wV: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: D3DNTHAL_DP2TRIANGLEFAN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_DP2TRIANGLEFAN = extern struct {
    wVStart: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: D3DNTHAL_DP2INDEXEDTRIANGLEFAN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_DP2INDEXEDTRIANGLEFAN = extern struct {
    wV: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: D3DNTHAL_DP2TRIANGLEFAN_IMM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_DP2TRIANGLEFAN_IMM = extern struct {
    dwEdgeFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3DNTHAL_DP2RENDERSTATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_DP2RENDERSTATE = extern struct {
    RenderState: Windows.Win32.SystemServices.D3DRENDERSTATETYPE,
    Anonymous: Windows.Win32.SystemServices.D3DNTHAL_DP2RENDERSTATE+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: D3DNTHAL_DP2TEXTURESTAGESTATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_DP2TEXTURESTAGESTATE = extern struct {
    wStage: {"kind":"UInt16"},
    TSState: {"kind":"UInt16"},
    dwValue: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3DNTHAL_DP2VIEWPORTINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_DP2VIEWPORTINFO = extern struct {
    dwX: {"kind":"UInt32"},
    dwY: {"kind":"UInt32"},
    dwWidth: {"kind":"UInt32"},
    dwHeight: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3DNTHAL_DP2WINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_DP2WINFO = extern struct {
    dvWNear: {"kind":"Single"},
    dvWFar: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: D3DNTHAL_DP2SETPALETTE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_DP2SETPALETTE = extern struct {
    dwPaletteHandle: {"kind":"UInt32"},
    dwPaletteFlags: {"kind":"UInt32"},
    dwSurfaceHandle: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3DNTHAL_DP2UPDATEPALETTE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_DP2UPDATEPALETTE = extern struct {
    dwPaletteHandle: {"kind":"UInt32"},
    wStartIndex: {"kind":"UInt16"},
    wNumEntries: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: D3DNTHAL_DP2SETRENDERTARGET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_DP2SETRENDERTARGET = extern struct {
    hRenderTarget: {"kind":"UInt32"},
    hZBuffer: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3DNTHAL_DP2STATESET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_DP2STATESET = extern struct {
    dwOperation: {"kind":"UInt32"},
    dwParam: {"kind":"UInt32"},
    sbType: Windows.Win32.SystemServices.D3DSTATEBLOCKTYPE,
};
// --------------------------------------------------------
// Type: D3DNTHAL_DP2ZRANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_DP2ZRANGE = extern struct {
    dvMinZ: {"kind":"Single"},
    dvMaxZ: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: D3DNTHAL_DP2SETLIGHT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_DP2SETLIGHT = extern struct {
    dwIndex: {"kind":"UInt32"},
    Anonymous: Windows.Win32.SystemServices.D3DNTHAL_DP2SETLIGHT+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: D3DNTHAL_DP2SETCLIPPLANE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_DP2SETCLIPPLANE = extern struct {
    dwIndex: {"kind":"UInt32"},
    plane: {"kind":"Array","child": {"kind":"Single"}},
};
// --------------------------------------------------------
// Type: D3DNTHAL_DP2CREATELIGHT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_DP2CREATELIGHT = extern struct {
    dwIndex: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3DNTHAL_DP2SETTRANSFORM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_DP2SETTRANSFORM = extern struct {
    xfrmType: Windows.Win32.SystemServices.D3DTRANSFORMSTATETYPE,
    matrix: Windows.Win32.Direct3D9.D3DMATRIX,
};
// --------------------------------------------------------
// Type: D3DNTHAL_DP2EXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_DP2EXT = extern struct {
    dwExtToken: {"kind":"UInt32"},
    dwSize: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3DNTHAL_DP2TEXBLT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_DP2TEXBLT = extern struct {
    dwDDDestSurface: {"kind":"UInt32"},
    dwDDSrcSurface: {"kind":"UInt32"},
    pDest: Windows.Win32.DisplayDevices.POINT,
    rSrc: Windows.Win32.DisplayDevices.RECTL,
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3DNTHAL_DP2SETPRIORITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_DP2SETPRIORITY = extern struct {
    dwDDDestSurface: {"kind":"UInt32"},
    dwPriority: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3DNTHAL_DP2CLEAR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_DP2CLEAR = extern struct {
    dwFlags: {"kind":"UInt32"},
    dwFillColor: {"kind":"UInt32"},
    dvFillDepth: {"kind":"Single"},
    dwFillStencil: {"kind":"UInt32"},
    Rects: {"kind":"Array","child": Windows.Win32.DisplayDevices.RECT},
};
// --------------------------------------------------------
// Type: D3DNTHAL_DP2SETTEXLOD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_DP2SETTEXLOD = extern struct {
    dwDDSurface: {"kind":"UInt32"},
    dwLOD: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3DNTHAL_DRAWPRIMITIVES2DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_DRAWPRIMITIVES2DATA = extern struct {
    dwhContext: {"kind":"UIntPtr"},
    dwFlags: {"kind":"UInt32"},
    dwVertexType: {"kind":"UInt32"},
    lpDDCommands: {"kind""Ptr","child":Windows.Win32.DisplayDevices.DD_SURFACE_LOCAL},
    dwCommandOffset: {"kind":"UInt32"},
    dwCommandLength: {"kind":"UInt32"},
    Anonymous1: Windows.Win32.SystemServices.D3DNTHAL_DRAWPRIMITIVES2DATA+_Anonymous1_e__Union,
    dwVertexOffset: {"kind":"UInt32"},
    dwVertexLength: {"kind":"UInt32"},
    dwReqVertexBufSize: {"kind":"UInt32"},
    dwReqCommandBufSize: {"kind":"UInt32"},
    lpdwRStates: {"kind""Ptr","child":{"kind":"UInt32"}},
    Anonymous2: Windows.Win32.SystemServices.D3DNTHAL_DRAWPRIMITIVES2DATA+_Anonymous2_e__Union,
    dwErrorOffset: {"kind":"UInt32"},
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: LPD3DNTHAL_CLEAR2CB
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPD3DNTHAL_CLEAR2CB = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPD3DNTHAL_VALIDATETEXTURESTAGESTATECB
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPD3DNTHAL_VALIDATETEXTURESTAGESTATECB = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPD3DNTHAL_DRAWPRIMITIVES2CB
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPD3DNTHAL_DRAWPRIMITIVES2CB = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: D3DNTHAL_CALLBACKS3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DNTHAL_CALLBACKS3 = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    Clear2: Windows.Win32.SystemServices.LPD3DNTHAL_CLEAR2CB,
    lpvReserved: {"kind""Ptr","child":{"kind":"Void"}},
    ValidateTextureStageState: Windows.Win32.SystemServices.LPD3DNTHAL_VALIDATETEXTURESTAGESTATECB,
    DrawPrimitives2: Windows.Win32.SystemServices.LPD3DNTHAL_DRAWPRIMITIVES2CB,
};
// --------------------------------------------------------
// Type: PFND3DNTPARSEUNKNOWNCOMMAND
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFND3DNTPARSEUNKNOWNCOMMAND = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: POINTE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POINTE = extern struct {
    x: {"kind":"UInt32"},
    y: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: FLOAT_LONG
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const FLOAT_LONG = *opaque{
};
// --------------------------------------------------------
// Type: POINTFIX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POINTFIX = extern struct {
    x: {"kind":"Int32"},
    y: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: RECTFX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RECTFX = extern struct {
    xLeft: {"kind":"Int32"},
    yTop: {"kind":"Int32"},
    xRight: {"kind":"Int32"},
    yBottom: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HBM__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HBM__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HDEV__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HDEV__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HSURF__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HSURF__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: DHSURF__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHSURF__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: DHPDEV__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHPDEV__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HDRVOBJ__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HDRVOBJ__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: LIGATURE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LIGATURE = extern struct {
    culSize: {"kind":"UInt32"},
    pwsz: {"kind""Ptr","child":{"kind":"UInt16"}},
    chglyph: {"kind":"UInt32"},
    ahglyph: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: FD_LIGATURE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FD_LIGATURE = extern struct {
    culThis: {"kind":"UInt32"},
    ulType: {"kind":"UInt32"},
    cLigatures: {"kind":"UInt32"},
    alig: {"kind":"Array","child": Windows.Win32.SystemServices.LIGATURE},
};
// --------------------------------------------------------
// Type: POINTQF
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POINTQF = extern struct {
    x: Windows.Win32.SystemServices.LARGE_INTEGER,
    y: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: PFN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CDDDXGK_REDIRBITMAPPRESENTINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CDDDXGK_REDIRBITMAPPRESENTINFO = extern struct {
    NumDirtyRects: {"kind":"UInt32"},
    DirtyRect: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    NumContexts: {"kind":"UInt32"},
    hContext: {"kind":"Array","child": {"kind":"IntPtr"}},
    bDoNotSynchronizeWithDxContent: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: FREEOBJPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FREEOBJPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: XFORMOBJ
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const XFORMOBJ = extern struct {
    ulReserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: WNDOBJCHANGEPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WNDOBJCHANGEPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: HSEMAPHORE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HSEMAPHORE__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HFASTMUTEX__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HFASTMUTEX__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: SORTCOMP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SORTCOMP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ENG_SYSTEM_ATTRIBUTE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ENG_SYSTEM_ATTRIBUTE = *opaque{
};
// --------------------------------------------------------
// Type: ENG_DEVICE_ATTRIBUTE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ENG_DEVICE_ATTRIBUTE = *opaque{
};
// --------------------------------------------------------
// Type: EMFINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMFINFO = extern struct {
    nSize: {"kind":"UInt32"},
    hdc: Windows.Win32.Gdi.HDC,
    pvEMF: {"kind""Ptr","child":{"kind":"Byte"}},
    pvCurrentRecord: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: PFN_DrvEnableDriver
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvEnableDriver = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvEnablePDEV
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvEnablePDEV = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvCompletePDEV
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvCompletePDEV = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvResetDevice
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvResetDevice = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvDisablePDEV
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvDisablePDEV = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvSynchronize
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvSynchronize = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvEnableSurface
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvEnableSurface = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvDisableDriver
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvDisableDriver = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvDisableSurface
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvDisableSurface = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvAssertMode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvAssertMode = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvTextOut
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvTextOut = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvStretchBlt
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvStretchBlt = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvStretchBltROP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvStretchBltROP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvTransparentBlt
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvTransparentBlt = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvPlgBlt
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvPlgBlt = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvBitBlt
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvBitBlt = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvRealizeBrush
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvRealizeBrush = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvCopyBits
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvCopyBits = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvDitherColor
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvDitherColor = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvCreateDeviceBitmap
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvCreateDeviceBitmap = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvDeleteDeviceBitmap
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvDeleteDeviceBitmap = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvSetPalette
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvSetPalette = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvEscape
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvEscape = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvDrawEscape
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvDrawEscape = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvQueryFont
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvQueryFont = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvQueryFontTree
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvQueryFontTree = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvQueryFontData
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvQueryFontData = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvFree
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvFree = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvDestroyFont
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvDestroyFont = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvQueryFontCaps
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvQueryFontCaps = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvLoadFontFile
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvLoadFontFile = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvUnloadFontFile
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvUnloadFontFile = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvSetPointerShape
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvSetPointerShape = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvMovePointer
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvMovePointer = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvSendPage
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvSendPage = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvStartPage
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvStartPage = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvStartDoc
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvStartDoc = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvEndDoc
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvEndDoc = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvQuerySpoolType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvQuerySpoolType = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvLineTo
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvLineTo = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvStrokePath
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvStrokePath = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvFillPath
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvFillPath = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvStrokeAndFillPath
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvStrokeAndFillPath = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvPaint
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvPaint = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvGetGlyphMode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvGetGlyphMode = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvResetPDEV
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvResetPDEV = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvSaveScreenBits
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvSaveScreenBits = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvGetModes
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvGetModes = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvQueryTrueTypeTable
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvQueryTrueTypeTable = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvQueryTrueTypeSection
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvQueryTrueTypeSection = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvQueryTrueTypeOutline
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvQueryTrueTypeOutline = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvGetTrueTypeFile
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvGetTrueTypeFile = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvQueryFontFile
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvQueryFontFile = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvQueryAdvanceWidths
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvQueryAdvanceWidths = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvFontManagement
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvFontManagement = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvSetPixelFormat
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvSetPixelFormat = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvDescribePixelFormat
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvDescribePixelFormat = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvSwapBuffers
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvSwapBuffers = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvStartBanding
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvStartBanding = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvNextBand
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvNextBand = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvQueryPerBandInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvQueryPerBandInfo = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvEnableDirectDraw
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvEnableDirectDraw = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvDisableDirectDraw
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvDisableDirectDraw = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvGetDirectDrawInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvGetDirectDrawInfo = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvIcmCreateColorTransform
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvIcmCreateColorTransform = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvIcmDeleteColorTransform
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvIcmDeleteColorTransform = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvIcmCheckBitmapBits
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvIcmCheckBitmapBits = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvIcmSetDeviceGammaRamp
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvIcmSetDeviceGammaRamp = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvAlphaBlend
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvAlphaBlend = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvGradientFill
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvGradientFill = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvQueryDeviceSupport
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvQueryDeviceSupport = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvDeriveSurface
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvDeriveSurface = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvSynchronizeSurface
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvSynchronizeSurface = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvNotify
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvNotify = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvRenderHint
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvRenderHint = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DRH_APIBITMAPDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DRH_APIBITMAPDATA = extern struct {
    pso: {"kind""Ptr","child":Windows.Win32.DisplayDevices.SURFOBJ},
    b: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: PFN_EngCreateRectRgn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_EngCreateRectRgn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_EngDeleteRgn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_EngDeleteRgn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_EngCombineRgn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_EngCombineRgn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_EngCopyRgn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_EngCopyRgn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_EngIntersectRgn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_EngIntersectRgn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_EngSubtractRgn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_EngSubtractRgn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_EngUnionRgn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_EngUnionRgn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_EngXorRgn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_EngXorRgn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvCreateDeviceBitmapEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvCreateDeviceBitmapEx = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvDeleteDeviceBitmapEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvDeleteDeviceBitmapEx = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvAssociateSharedSurface
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvAssociateSharedSurface = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvSynchronizeRedirectionBitmaps
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvSynchronizeRedirectionBitmaps = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvAccumulateD3DDirtyRect
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvAccumulateD3DDirtyRect = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvStartDxInterop
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvStartDxInterop = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvEndDxInterop
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvEndDxInterop = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvLockDisplayArea
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvLockDisplayArea = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvUnlockDisplayArea
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvUnlockDisplayArea = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_DrvSurfaceComplete
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvSurfaceComplete = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DEVICE_EVENT_MOUNT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_EVENT_MOUNT = extern struct {
    Version: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    FileSystemNameLength: {"kind":"UInt32"},
    FileSystemNameOffset: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DEVICE_EVENT_BECOMING_READY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_EVENT_BECOMING_READY = extern struct {
    Version: {"kind":"UInt32"},
    Reason: {"kind":"UInt32"},
    Estimated100msToReady: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DEVICE_EVENT_EXTERNAL_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_EVENT_EXTERNAL_REQUEST = extern struct {
    Version: {"kind":"UInt32"},
    DeviceClass: {"kind":"UInt32"},
    ButtonStatus: {"kind":"UInt16"},
    Request: {"kind":"UInt16"},
    SystemTime: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: DEVICE_EVENT_GENERIC_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_EVENT_GENERIC_DATA = extern struct {
    EventNumber: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DEVICE_EVENT_RBC_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_EVENT_RBC_DATA = extern struct {
    EventNumber: {"kind":"UInt32"},
    SenseQualifier: {"kind":"Byte"},
    SenseCode: {"kind":"Byte"},
    SenseKey: {"kind":"Byte"},
    Reserved: {"kind":"Byte"},
    Information: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: GUID_IO_DISK_CLONE_ARRIVAL_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GUID_IO_DISK_CLONE_ARRIVAL_INFORMATION = extern struct {
    DiskNumber: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DISK_HEALTH_NOTIFICATION_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISK_HEALTH_NOTIFICATION_DATA = extern struct {
    DeviceGuid: Guid,
};
// --------------------------------------------------------
// Type: DEVPROPKEY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVPROPKEY = extern struct {
    fmtid: Guid,
    pid: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DEVPROPSTORE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DEVPROPSTORE = *opaque{
};
// --------------------------------------------------------
// Type: DEVPROPCOMPKEY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVPROPCOMPKEY = extern struct {
    Key: Windows.Win32.SystemServices.DEVPROPKEY,
    Store: Windows.Win32.SystemServices.DEVPROPSTORE,
    LocaleName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: DEVPROPERTY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVPROPERTY = extern struct {
    CompKey: Windows.Win32.SystemServices.DEVPROPCOMPKEY,
    Type: {"kind":"UInt32"},
    BufferSize: {"kind":"UInt32"},
    Buffer: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: REDBOOK_DIGITAL_AUDIO_EXTRACTION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const REDBOOK_DIGITAL_AUDIO_EXTRACTION_INFO = extern struct {
    Version: {"kind":"UInt32"},
    Accurate: {"kind":"UInt32"},
    Supported: {"kind":"UInt32"},
    AccurateMask0: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DEV_BROADCAST_HDR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEV_BROADCAST_HDR = extern struct {
    dbch_size: {"kind":"UInt32"},
    dbch_devicetype: {"kind":"UInt32"},
    dbch_reserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: VolLockBroadcast
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VolLockBroadcast = extern struct {
    vlb_dbh: Windows.Win32.SystemServices.DEV_BROADCAST_HDR,
    vlb_owner: {"kind":"UInt32"},
    vlb_perms: {"kind":"Byte"},
    vlb_lockType: {"kind":"Byte"},
    vlb_drive: {"kind":"Byte"},
    vlb_flags: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: _DEV_BROADCAST_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _DEV_BROADCAST_HEADER = extern struct {
    dbcd_size: {"kind":"UInt32"},
    dbcd_devicetype: {"kind":"UInt32"},
    dbcd_reserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DEV_BROADCAST_OEM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEV_BROADCAST_OEM = extern struct {
    dbco_size: {"kind":"UInt32"},
    dbco_devicetype: {"kind":"UInt32"},
    dbco_reserved: {"kind":"UInt32"},
    dbco_identifier: {"kind":"UInt32"},
    dbco_suppfunc: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DEV_BROADCAST_DEVNODE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEV_BROADCAST_DEVNODE = extern struct {
    dbcd_size: {"kind":"UInt32"},
    dbcd_devicetype: {"kind":"UInt32"},
    dbcd_reserved: {"kind":"UInt32"},
    dbcd_devnode: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DEV_BROADCAST_VOLUME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEV_BROADCAST_VOLUME = extern struct {
    dbcv_size: {"kind":"UInt32"},
    dbcv_devicetype: {"kind":"UInt32"},
    dbcv_reserved: {"kind":"UInt32"},
    dbcv_unitmask: {"kind":"UInt32"},
    dbcv_flags: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: DEV_BROADCAST_PORT_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEV_BROADCAST_PORT_A = extern struct {
    dbcp_size: {"kind":"UInt32"},
    dbcp_devicetype: {"kind":"UInt32"},
    dbcp_reserved: {"kind":"UInt32"},
    dbcp_name: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: DEV_BROADCAST_PORT_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEV_BROADCAST_PORT_W = extern struct {
    dbcp_size: {"kind":"UInt32"},
    dbcp_devicetype: {"kind":"UInt32"},
    dbcp_reserved: {"kind":"UInt32"},
    dbcp_name: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: DEV_BROADCAST_NET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEV_BROADCAST_NET = extern struct {
    dbcn_size: {"kind":"UInt32"},
    dbcn_devicetype: {"kind":"UInt32"},
    dbcn_reserved: {"kind":"UInt32"},
    dbcn_resource: {"kind":"UInt32"},
    dbcn_flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DEV_BROADCAST_DEVICEINTERFACE_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEV_BROADCAST_DEVICEINTERFACE_A = extern struct {
    dbcc_size: {"kind":"UInt32"},
    dbcc_devicetype: {"kind":"UInt32"},
    dbcc_reserved: {"kind":"UInt32"},
    dbcc_classguid: Guid,
    dbcc_name: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: DEV_BROADCAST_DEVICEINTERFACE_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEV_BROADCAST_DEVICEINTERFACE_W = extern struct {
    dbcc_size: {"kind":"UInt32"},
    dbcc_devicetype: {"kind":"UInt32"},
    dbcc_reserved: {"kind":"UInt32"},
    dbcc_classguid: Guid,
    dbcc_name: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: DEV_BROADCAST_HANDLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEV_BROADCAST_HANDLE = extern struct {
    dbch_size: {"kind":"UInt32"},
    dbch_devicetype: {"kind":"UInt32"},
    dbch_reserved: {"kind":"UInt32"},
    dbch_handle: Windows.Win32.SystemServices.HANDLE,
    dbch_hdevnotify: {"kind""Ptr","child":{"kind":"Void"}},
    dbch_eventguid: Guid,
    dbch_nameoffset: {"kind":"Int32"},
    dbch_data: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: DEV_BROADCAST_HANDLE32
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEV_BROADCAST_HANDLE32 = extern struct {
    dbch_size: {"kind":"UInt32"},
    dbch_devicetype: {"kind":"UInt32"},
    dbch_reserved: {"kind":"UInt32"},
    dbch_handle: {"kind":"UInt32"},
    dbch_hdevnotify: {"kind":"UInt32"},
    dbch_eventguid: Guid,
    dbch_nameoffset: {"kind":"Int32"},
    dbch_data: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: DEV_BROADCAST_HANDLE64
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEV_BROADCAST_HANDLE64 = extern struct {
    dbch_size: {"kind":"UInt32"},
    dbch_devicetype: {"kind":"UInt32"},
    dbch_reserved: {"kind":"UInt32"},
    dbch_handle: {"kind":"UInt64"},
    dbch_hdevnotify: {"kind":"UInt64"},
    dbch_eventguid: Guid,
    dbch_nameoffset: {"kind":"Int32"},
    dbch_data: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: _DEV_BROADCAST_USERDEFINED
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _DEV_BROADCAST_USERDEFINED = extern struct {
    dbud_dbh: Windows.Win32.SystemServices.DEV_BROADCAST_HDR,
    dbud_szName: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: PWM_CONTROLLER_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PWM_CONTROLLER_INFO = extern struct {
    Size: {"kind":"UIntPtr"},
    PinCount: {"kind":"UInt32"},
    MinimumPeriod: {"kind":"UInt64"},
    MaximumPeriod: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: PWM_CONTROLLER_GET_ACTUAL_PERIOD_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PWM_CONTROLLER_GET_ACTUAL_PERIOD_OUTPUT = extern struct {
    ActualPeriod: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: PWM_CONTROLLER_SET_DESIRED_PERIOD_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PWM_CONTROLLER_SET_DESIRED_PERIOD_INPUT = extern struct {
    DesiredPeriod: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: PWM_CONTROLLER_SET_DESIRED_PERIOD_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PWM_CONTROLLER_SET_DESIRED_PERIOD_OUTPUT = extern struct {
    ActualPeriod: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: PWM_PIN_GET_ACTIVE_DUTY_CYCLE_PERCENTAGE_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PWM_PIN_GET_ACTIVE_DUTY_CYCLE_PERCENTAGE_OUTPUT = extern struct {
    Percentage: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: PWM_PIN_SET_ACTIVE_DUTY_CYCLE_PERCENTAGE_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PWM_PIN_SET_ACTIVE_DUTY_CYCLE_PERCENTAGE_INPUT = extern struct {
    Percentage: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: PWM_POLARITY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWM_POLARITY = *opaque{
};
// --------------------------------------------------------
// Type: PWM_PIN_GET_POLARITY_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PWM_PIN_GET_POLARITY_OUTPUT = extern struct {
    Polarity: Windows.Win32.SystemServices.PWM_POLARITY,
};
// --------------------------------------------------------
// Type: PWM_PIN_SET_POLARITY_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PWM_PIN_SET_POLARITY_INPUT = extern struct {
    Polarity: Windows.Win32.SystemServices.PWM_POLARITY,
};
// --------------------------------------------------------
// Type: PWM_PIN_IS_STARTED_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PWM_PIN_IS_STARTED_OUTPUT = extern struct {
    IsStarted: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: AtlThunkData_t
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const AtlThunkData_t = opaque {
};
// --------------------------------------------------------
// Type: ENCLAVE_SEALING_IDENTITY_POLICY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ENCLAVE_SEALING_IDENTITY_POLICY = *opaque{
};
// --------------------------------------------------------
// Type: ENCLAVE_IDENTITY
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const ENCLAVE_IDENTITY = *opaque{
};
// --------------------------------------------------------
// Type: VBS_ENCLAVE_REPORT_PKG_HEADER
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const VBS_ENCLAVE_REPORT_PKG_HEADER = *opaque{
};
// --------------------------------------------------------
// Type: VBS_ENCLAVE_REPORT
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const VBS_ENCLAVE_REPORT = *opaque{
};
// --------------------------------------------------------
// Type: VBS_ENCLAVE_REPORT_VARDATA_HEADER
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const VBS_ENCLAVE_REPORT_VARDATA_HEADER = *opaque{
};
// --------------------------------------------------------
// Type: VBS_ENCLAVE_REPORT_MODULE
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const VBS_ENCLAVE_REPORT_MODULE = *opaque{
};
// --------------------------------------------------------
// Type: ENCLAVE_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENCLAVE_INFORMATION = extern struct {
    EnclaveType: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
    BaseAddress: {"kind""Ptr","child":{"kind":"Void"}},
    Size: {"kind":"UIntPtr"},
    Identity: Windows.Win32.SystemServices.ENCLAVE_IDENTITY,
};
// --------------------------------------------------------
// Type: VBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR32
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR32 = extern struct {
    ThreadContext: {"kind":"Array","child": {"kind":"UInt32"}},
    EntryPoint: {"kind":"UInt32"},
    StackPointer: {"kind":"UInt32"},
    ExceptionEntryPoint: {"kind":"UInt32"},
    ExceptionStack: {"kind":"UInt32"},
    ExceptionActive: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: VBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR64
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR64 = extern struct {
    ThreadContext: {"kind":"Array","child": {"kind":"UInt64"}},
    EntryPoint: {"kind":"UInt64"},
    StackPointer: {"kind":"UInt64"},
    ExceptionEntryPoint: {"kind":"UInt64"},
    ExceptionStack: {"kind":"UInt64"},
    ExceptionActive: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: VBS_BASIC_ENCLAVE_EXCEPTION_AMD64
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VBS_BASIC_ENCLAVE_EXCEPTION_AMD64 = extern struct {
    ExceptionCode: {"kind":"UInt32"},
    NumberParameters: {"kind":"UInt32"},
    ExceptionInformation: {"kind":"Array","child": {"kind":"UIntPtr"}},
    ExceptionRAX: {"kind":"UIntPtr"},
    ExceptionRCX: {"kind":"UIntPtr"},
    ExceptionRIP: {"kind":"UIntPtr"},
    ExceptionRFLAGS: {"kind":"UIntPtr"},
    ExceptionRSP: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: VBS_BASIC_ENCLAVE_BASIC_CALL_RETURN_FROM_ENCLAVE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VBS_BASIC_ENCLAVE_BASIC_CALL_RETURN_FROM_ENCLAVE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VBS_BASIC_ENCLAVE_BASIC_CALL_RETURN_FROM_EXCEPTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VBS_BASIC_ENCLAVE_BASIC_CALL_RETURN_FROM_EXCEPTION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VBS_BASIC_ENCLAVE_BASIC_CALL_TERMINATE_THREAD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VBS_BASIC_ENCLAVE_BASIC_CALL_TERMINATE_THREAD = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VBS_BASIC_ENCLAVE_BASIC_CALL_INTERRUPT_THREAD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VBS_BASIC_ENCLAVE_BASIC_CALL_INTERRUPT_THREAD = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VBS_BASIC_ENCLAVE_BASIC_CALL_COMMIT_PAGES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VBS_BASIC_ENCLAVE_BASIC_CALL_COMMIT_PAGES = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VBS_BASIC_ENCLAVE_BASIC_CALL_DECOMMIT_PAGES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VBS_BASIC_ENCLAVE_BASIC_CALL_DECOMMIT_PAGES = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VBS_BASIC_ENCLAVE_BASIC_CALL_PROTECT_PAGES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VBS_BASIC_ENCLAVE_BASIC_CALL_PROTECT_PAGES = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VBS_BASIC_ENCLAVE_BASIC_CALL_CREATE_THREAD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VBS_BASIC_ENCLAVE_BASIC_CALL_CREATE_THREAD = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VBS_BASIC_ENCLAVE_BASIC_CALL_GET_ENCLAVE_INFORMATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VBS_BASIC_ENCLAVE_BASIC_CALL_GET_ENCLAVE_INFORMATION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ENCLAVE_VBS_BASIC_KEY_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENCLAVE_VBS_BASIC_KEY_REQUEST = extern struct {
    RequestSize: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    EnclaveSVN: {"kind":"UInt32"},
    SystemKeyID: {"kind":"UInt32"},
    CurrentSystemKeyID: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_KEY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_KEY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_REPORT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_REPORT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VBS_BASIC_ENCLAVE_BASIC_CALL_VERIFY_REPORT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VBS_BASIC_ENCLAVE_BASIC_CALL_VERIFY_REPORT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_RANDOM_DATA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_RANDOM_DATA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VBS_BASIC_ENCLAVE_SYSCALL_PAGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VBS_BASIC_ENCLAVE_SYSCALL_PAGE = extern struct {
    ReturnFromEnclave: {"kind""Ptr","child":Windows.Win32.SystemServices.VBS_BASIC_ENCLAVE_BASIC_CALL_RETURN_FROM_ENCLAVE},
    ReturnFromException: {"kind""Ptr","child":Windows.Win32.SystemServices.VBS_BASIC_ENCLAVE_BASIC_CALL_RETURN_FROM_EXCEPTION},
    TerminateThread: {"kind""Ptr","child":Windows.Win32.SystemServices.VBS_BASIC_ENCLAVE_BASIC_CALL_TERMINATE_THREAD},
    InterruptThread: {"kind""Ptr","child":Windows.Win32.SystemServices.VBS_BASIC_ENCLAVE_BASIC_CALL_INTERRUPT_THREAD},
    CommitPages: {"kind""Ptr","child":Windows.Win32.SystemServices.VBS_BASIC_ENCLAVE_BASIC_CALL_COMMIT_PAGES},
    DecommitPages: {"kind""Ptr","child":Windows.Win32.SystemServices.VBS_BASIC_ENCLAVE_BASIC_CALL_DECOMMIT_PAGES},
    ProtectPages: {"kind""Ptr","child":Windows.Win32.SystemServices.VBS_BASIC_ENCLAVE_BASIC_CALL_PROTECT_PAGES},
    CreateThread: {"kind""Ptr","child":Windows.Win32.SystemServices.VBS_BASIC_ENCLAVE_BASIC_CALL_CREATE_THREAD},
    GetEnclaveInformation: {"kind""Ptr","child":Windows.Win32.SystemServices.VBS_BASIC_ENCLAVE_BASIC_CALL_GET_ENCLAVE_INFORMATION},
    GenerateKey: {"kind""Ptr","child":Windows.Win32.SystemServices.VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_KEY},
    GenerateReport: {"kind""Ptr","child":Windows.Win32.SystemServices.VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_REPORT},
    VerifyReport: {"kind""Ptr","child":Windows.Win32.SystemServices.VBS_BASIC_ENCLAVE_BASIC_CALL_VERIFY_REPORT},
    GenerateRandomData: {"kind""Ptr","child":Windows.Win32.SystemServices.VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_RANDOM_DATA},
};
// --------------------------------------------------------
// Type: EFFECTIVE_POWER_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EFFECTIVE_POWER_MODE = *opaque{
};
// --------------------------------------------------------
// Type: EFFECTIVE_POWER_MODE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EFFECTIVE_POWER_MODE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: GLOBAL_MACHINE_POWER_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GLOBAL_MACHINE_POWER_POLICY = extern struct {
    Revision: {"kind":"UInt32"},
    LidOpenWakeAc: Windows.Win32.SystemServices.SYSTEM_POWER_STATE,
    LidOpenWakeDc: Windows.Win32.SystemServices.SYSTEM_POWER_STATE,
    BroadcastCapacityResolution: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: GLOBAL_USER_POWER_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GLOBAL_USER_POWER_POLICY = extern struct {
    Revision: {"kind":"UInt32"},
    PowerButtonAc: Windows.Win32.SystemServices.POWER_ACTION_POLICY,
    PowerButtonDc: Windows.Win32.SystemServices.POWER_ACTION_POLICY,
    SleepButtonAc: Windows.Win32.SystemServices.POWER_ACTION_POLICY,
    SleepButtonDc: Windows.Win32.SystemServices.POWER_ACTION_POLICY,
    LidCloseAc: Windows.Win32.SystemServices.POWER_ACTION_POLICY,
    LidCloseDc: Windows.Win32.SystemServices.POWER_ACTION_POLICY,
    DischargePolicy: {"kind":"Array","child": Windows.Win32.SystemServices.SYSTEM_POWER_LEVEL},
    GlobalFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: GLOBAL_POWER_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GLOBAL_POWER_POLICY = extern struct {
    user: Windows.Win32.SystemServices.GLOBAL_USER_POWER_POLICY,
    mach: Windows.Win32.SystemServices.GLOBAL_MACHINE_POWER_POLICY,
};
// --------------------------------------------------------
// Type: MACHINE_POWER_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MACHINE_POWER_POLICY = extern struct {
    Revision: {"kind":"UInt32"},
    MinSleepAc: Windows.Win32.SystemServices.SYSTEM_POWER_STATE,
    MinSleepDc: Windows.Win32.SystemServices.SYSTEM_POWER_STATE,
    ReducedLatencySleepAc: Windows.Win32.SystemServices.SYSTEM_POWER_STATE,
    ReducedLatencySleepDc: Windows.Win32.SystemServices.SYSTEM_POWER_STATE,
    DozeTimeoutAc: {"kind":"UInt32"},
    DozeTimeoutDc: {"kind":"UInt32"},
    DozeS4TimeoutAc: {"kind":"UInt32"},
    DozeS4TimeoutDc: {"kind":"UInt32"},
    MinThrottleAc: {"kind":"Byte"},
    MinThrottleDc: {"kind":"Byte"},
    pad1: {"kind":"Array","child": {"kind":"Byte"}},
    OverThrottledAc: Windows.Win32.SystemServices.POWER_ACTION_POLICY,
    OverThrottledDc: Windows.Win32.SystemServices.POWER_ACTION_POLICY,
};
// --------------------------------------------------------
// Type: MACHINE_PROCESSOR_POWER_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MACHINE_PROCESSOR_POWER_POLICY = extern struct {
    Revision: {"kind":"UInt32"},
    ProcessorPolicyAc: Windows.Win32.SystemServices.PROCESSOR_POWER_POLICY,
    ProcessorPolicyDc: Windows.Win32.SystemServices.PROCESSOR_POWER_POLICY,
};
// --------------------------------------------------------
// Type: USER_POWER_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_POWER_POLICY = extern struct {
    Revision: {"kind":"UInt32"},
    IdleAc: Windows.Win32.SystemServices.POWER_ACTION_POLICY,
    IdleDc: Windows.Win32.SystemServices.POWER_ACTION_POLICY,
    IdleTimeoutAc: {"kind":"UInt32"},
    IdleTimeoutDc: {"kind":"UInt32"},
    IdleSensitivityAc: {"kind":"Byte"},
    IdleSensitivityDc: {"kind":"Byte"},
    ThrottlePolicyAc: {"kind":"Byte"},
    ThrottlePolicyDc: {"kind":"Byte"},
    MaxSleepAc: Windows.Win32.SystemServices.SYSTEM_POWER_STATE,
    MaxSleepDc: Windows.Win32.SystemServices.SYSTEM_POWER_STATE,
    Reserved: {"kind":"Array","child": {"kind":"UInt32"}},
    VideoTimeoutAc: {"kind":"UInt32"},
    VideoTimeoutDc: {"kind":"UInt32"},
    SpindownTimeoutAc: {"kind":"UInt32"},
    SpindownTimeoutDc: {"kind":"UInt32"},
    OptimizeForPowerAc: {"kind":"Byte"},
    OptimizeForPowerDc: {"kind":"Byte"},
    FanThrottleToleranceAc: {"kind":"Byte"},
    FanThrottleToleranceDc: {"kind":"Byte"},
    ForcedThrottleAc: {"kind":"Byte"},
    ForcedThrottleDc: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: POWER_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POWER_POLICY = extern struct {
    user: Windows.Win32.SystemServices.USER_POWER_POLICY,
    mach: Windows.Win32.SystemServices.MACHINE_POWER_POLICY,
};
// --------------------------------------------------------
// Type: PWRSCHEMESENUMPROC_V1
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWRSCHEMESENUMPROC_V1 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWRSCHEMESENUMPROC_V2
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWRSCHEMESENUMPROC_V2 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWRSCHEMESENUMPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWRSCHEMESENUMPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: POWER_DATA_ACCESSOR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const POWER_DATA_ACCESSOR = *opaque{
};
// --------------------------------------------------------
// Type: DEVICE_NOTIFY_CALLBACK_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DEVICE_NOTIFY_CALLBACK_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDEVICE_NOTIFY_CALLBACK_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDEVICE_NOTIFY_CALLBACK_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DEVICE_NOTIFY_SUBSCRIBE_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_NOTIFY_SUBSCRIBE_PARAMETERS = extern struct {
    Callback: Windows.Win32.SystemServices.PDEVICE_NOTIFY_CALLBACK_ROUTINE,
    Context: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: THERMAL_EVENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const THERMAL_EVENT = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Type: {"kind":"UInt32"},
    Temperature: {"kind":"UInt32"},
    TripPointTemperature: {"kind":"UInt32"},
    Initiator: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: BATTERY_QUERY_INFORMATION_LEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BATTERY_QUERY_INFORMATION_LEVEL = *opaque{
};
// --------------------------------------------------------
// Type: BATTERY_QUERY_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BATTERY_QUERY_INFORMATION = extern struct {
    BatteryTag: {"kind":"UInt32"},
    InformationLevel: Windows.Win32.SystemServices.BATTERY_QUERY_INFORMATION_LEVEL,
    AtRate: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: BATTERY_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BATTERY_INFORMATION = extern struct {
    Capabilities: {"kind":"UInt32"},
    Technology: {"kind":"Byte"},
    Reserved: {"kind":"Array","child": {"kind":"Byte"}},
    Chemistry: {"kind":"Array","child": {"kind":"Byte"}},
    DesignedCapacity: {"kind":"UInt32"},
    FullChargedCapacity: {"kind":"UInt32"},
    DefaultAlert1: {"kind":"UInt32"},
    DefaultAlert2: {"kind":"UInt32"},
    CriticalBias: {"kind":"UInt32"},
    CycleCount: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: BATTERY_CHARGING_SOURCE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BATTERY_CHARGING_SOURCE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: BATTERY_CHARGING_SOURCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BATTERY_CHARGING_SOURCE = extern struct {
    Type: Windows.Win32.SystemServices.BATTERY_CHARGING_SOURCE_TYPE,
    MaxCurrent: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: BATTERY_CHARGING_SOURCE_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BATTERY_CHARGING_SOURCE_INFORMATION = extern struct {
    Type: Windows.Win32.SystemServices.BATTERY_CHARGING_SOURCE_TYPE,
    SourceOnline: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: USB_CHARGER_PORT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const USB_CHARGER_PORT = *opaque{
};
// --------------------------------------------------------
// Type: BATTERY_SET_INFORMATION_LEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BATTERY_SET_INFORMATION_LEVEL = *opaque{
};
// --------------------------------------------------------
// Type: BATTERY_SET_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BATTERY_SET_INFORMATION = extern struct {
    BatteryTag: {"kind":"UInt32"},
    InformationLevel: Windows.Win32.SystemServices.BATTERY_SET_INFORMATION_LEVEL,
    Buffer: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: BATTERY_CHARGER_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BATTERY_CHARGER_STATUS = extern struct {
    Type: Windows.Win32.SystemServices.BATTERY_CHARGING_SOURCE_TYPE,
    VaData: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: BATTERY_USB_CHARGER_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BATTERY_USB_CHARGER_STATUS = extern struct {
    Type: Windows.Win32.SystemServices.BATTERY_CHARGING_SOURCE_TYPE,
    Reserved: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    MaxCurrent: {"kind":"UInt32"},
    Voltage: {"kind":"UInt32"},
    PortType: Windows.Win32.SystemServices.USB_CHARGER_PORT,
    PortId: {"kind":"UInt64"},
    PowerSourceInformation: {"kind""Ptr","child":{"kind":"Void"}},
    OemCharger: Guid,
};
// --------------------------------------------------------
// Type: BATTERY_WAIT_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BATTERY_WAIT_STATUS = extern struct {
    BatteryTag: {"kind":"UInt32"},
    Timeout: {"kind":"UInt32"},
    PowerState: {"kind":"UInt32"},
    LowCapacity: {"kind":"UInt32"},
    HighCapacity: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: BATTERY_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BATTERY_STATUS = extern struct {
    PowerState: {"kind":"UInt32"},
    Capacity: {"kind":"UInt32"},
    Voltage: {"kind":"UInt32"},
    Rate: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: BATTERY_MANUFACTURE_DATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BATTERY_MANUFACTURE_DATE = extern struct {
    Day: {"kind":"Byte"},
    Month: {"kind":"Byte"},
    Year: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: THERMAL_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const THERMAL_INFORMATION = extern struct {
    ThermalStamp: {"kind":"UInt32"},
    ThermalConstant1: {"kind":"UInt32"},
    ThermalConstant2: {"kind":"UInt32"},
    Processors: {"kind":"UIntPtr"},
    SamplingPeriod: {"kind":"UInt32"},
    CurrentTemperature: {"kind":"UInt32"},
    PassiveTripPoint: {"kind":"UInt32"},
    CriticalTripPoint: {"kind":"UInt32"},
    ActiveTripPointCount: {"kind":"Byte"},
    ActiveTripPoint: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: THERMAL_WAIT_READ
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const THERMAL_WAIT_READ = extern struct {
    Timeout: {"kind":"UInt32"},
    LowTemperature: {"kind":"UInt32"},
    HighTemperature: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: THERMAL_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const THERMAL_POLICY = extern struct {
    Version: {"kind":"UInt32"},
    WaitForUpdate: {"kind":"Byte"},
    Hibernate: {"kind":"Byte"},
    Critical: {"kind":"Byte"},
    ThermalStandby: {"kind":"Byte"},
    ActivationReasons: {"kind":"UInt32"},
    PassiveLimit: {"kind":"UInt32"},
    ActiveLevel: {"kind":"UInt32"},
    OverThrottled: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: PROCESSOR_OBJECT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESSOR_OBJECT_INFO = extern struct {
    PhysicalID: {"kind":"UInt32"},
    PBlkAddress: {"kind":"UInt32"},
    PBlkLength: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: PROCESSOR_OBJECT_INFO_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESSOR_OBJECT_INFO_EX = extern struct {
    PhysicalID: {"kind":"UInt32"},
    PBlkAddress: {"kind":"UInt32"},
    PBlkLength: {"kind":"Byte"},
    InitialApicId: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: WAKE_ALARM_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WAKE_ALARM_INFORMATION = extern struct {
    TimerIdentifier: {"kind":"UInt32"},
    Timeout: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: ACPI_REAL_TIME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACPI_REAL_TIME = extern struct {
    Year: {"kind":"UInt16"},
    Month: {"kind":"Byte"},
    Day: {"kind":"Byte"},
    Hour: {"kind":"Byte"},
    Minute: {"kind":"Byte"},
    Second: {"kind":"Byte"},
    Valid: {"kind":"Byte"},
    Milliseconds: {"kind":"UInt16"},
    TimeZone: {"kind":"Int16"},
    DayLight: {"kind":"Byte"},
    Reserved1: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: INDIRECT_DISPLAY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INDIRECT_DISPLAY_INFO = extern struct {
    DisplayAdapterLuid: Windows.Win32.Kernel.LUID,
    Flags: {"kind":"UInt32"},
    NumMonitors: {"kind":"UInt32"},
    DisplayAdapterTargetBase: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: VIDEO_VDM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEO_VDM = extern struct {
    ProcessHandle: Windows.Win32.SystemServices.HANDLE,
};
// --------------------------------------------------------
// Type: VIDEO_REGISTER_VDM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEO_REGISTER_VDM = extern struct {
    MinimumStateSize: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: VIDEO_MONITOR_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEO_MONITOR_DESCRIPTOR = extern struct {
    DescriptorSize: {"kind":"UInt32"},
    Descriptor: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: VIDEO_WIN32K_CALLBACKS_PARAMS_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VIDEO_WIN32K_CALLBACKS_PARAMS_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: BlackScreenDiagnosticsCalloutParam
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BlackScreenDiagnosticsCalloutParam = *opaque{
};
// --------------------------------------------------------
// Type: DXGK_WIN32K_PARAM_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGK_WIN32K_PARAM_DATA = extern struct {
    PathsArray: {"kind""Ptr","child":{"kind":"Void"}},
    ModesArray: {"kind""Ptr","child":{"kind":"Void"}},
    NumPathArrayElements: {"kind":"UInt32"},
    NumModeArrayElements: {"kind":"UInt32"},
    SDCFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: VIDEO_WIN32K_CALLBACKS_PARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEO_WIN32K_CALLBACKS_PARAMS = extern struct {
    CalloutType: Windows.Win32.SystemServices.VIDEO_WIN32K_CALLBACKS_PARAMS_TYPE,
    PhysDisp: {"kind""Ptr","child":{"kind":"Void"}},
    Param: {"kind":"UIntPtr"},
    Status: {"kind":"Int32"},
    LockUserSession: {"kind":"Byte"},
    IsPostDevice: {"kind":"Byte"},
    SurpriseRemoval: {"kind":"Byte"},
    WaitForQueueReady: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: PVIDEO_WIN32K_CALLOUT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PVIDEO_WIN32K_CALLOUT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VIDEO_WIN32K_CALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEO_WIN32K_CALLBACKS = extern struct {
    PhysDisp: {"kind""Ptr","child":{"kind":"Void"}},
    Callout: Windows.Win32.SystemServices.PVIDEO_WIN32K_CALLOUT,
    bACPI: {"kind":"UInt32"},
    pPhysDeviceObject: Windows.Win32.SystemServices.HANDLE,
    DualviewFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: VIDEO_DEVICE_SESSION_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEO_DEVICE_SESSION_STATUS = extern struct {
    bEnable: {"kind":"UInt32"},
    bSuccess: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: VIDEO_HARDWARE_STATE_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEO_HARDWARE_STATE_HEADER = extern struct {
    Length: {"kind":"UInt32"},
    PortValue: {"kind":"Array","child": {"kind":"Byte"}},
    AttribIndexDataState: {"kind":"UInt32"},
    BasicSequencerOffset: {"kind":"UInt32"},
    BasicCrtContOffset: {"kind":"UInt32"},
    BasicGraphContOffset: {"kind":"UInt32"},
    BasicAttribContOffset: {"kind":"UInt32"},
    BasicDacOffset: {"kind":"UInt32"},
    BasicLatchesOffset: {"kind":"UInt32"},
    ExtendedSequencerOffset: {"kind":"UInt32"},
    ExtendedCrtContOffset: {"kind":"UInt32"},
    ExtendedGraphContOffset: {"kind":"UInt32"},
    ExtendedAttribContOffset: {"kind":"UInt32"},
    ExtendedDacOffset: {"kind":"UInt32"},
    ExtendedValidatorStateOffset: {"kind":"UInt32"},
    ExtendedMiscDataOffset: {"kind":"UInt32"},
    PlaneLength: {"kind":"UInt32"},
    Plane1Offset: {"kind":"UInt32"},
    Plane2Offset: {"kind":"UInt32"},
    Plane3Offset: {"kind":"UInt32"},
    Plane4Offset: {"kind":"UInt32"},
    VGAStateFlags: {"kind":"UInt32"},
    DIBOffset: {"kind":"UInt32"},
    DIBBitsPerPixel: {"kind":"UInt32"},
    DIBXResolution: {"kind":"UInt32"},
    DIBYResolution: {"kind":"UInt32"},
    DIBXlatOffset: {"kind":"UInt32"},
    DIBXlatLength: {"kind":"UInt32"},
    VesaInfoOffset: {"kind":"UInt32"},
    FrameBufferData: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: VIDEO_HARDWARE_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEO_HARDWARE_STATE = extern struct {
    StateHeader: {"kind""Ptr","child":Windows.Win32.SystemServices.VIDEO_HARDWARE_STATE_HEADER},
    StateLength: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: VIDEO_NUM_MODES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEO_NUM_MODES = extern struct {
    NumModes: {"kind":"UInt32"},
    ModeInformationLength: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: VIDEO_MODE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEO_MODE = extern struct {
    RequestedMode: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: VIDEO_MODE_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEO_MODE_INFORMATION = extern struct {
    Length: {"kind":"UInt32"},
    ModeIndex: {"kind":"UInt32"},
    VisScreenWidth: {"kind":"UInt32"},
    VisScreenHeight: {"kind":"UInt32"},
    ScreenStride: {"kind":"UInt32"},
    NumberOfPlanes: {"kind":"UInt32"},
    BitsPerPlane: {"kind":"UInt32"},
    Frequency: {"kind":"UInt32"},
    XMillimeter: {"kind":"UInt32"},
    YMillimeter: {"kind":"UInt32"},
    NumberRedBits: {"kind":"UInt32"},
    NumberGreenBits: {"kind":"UInt32"},
    NumberBlueBits: {"kind":"UInt32"},
    RedMask: {"kind":"UInt32"},
    GreenMask: {"kind":"UInt32"},
    BlueMask: {"kind":"UInt32"},
    AttributeFlags: {"kind":"UInt32"},
    VideoMemoryBitmapWidth: {"kind":"UInt32"},
    VideoMemoryBitmapHeight: {"kind":"UInt32"},
    DriverSpecificAttributeFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: VIDEO_LOAD_FONT_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEO_LOAD_FONT_INFORMATION = extern struct {
    WidthInPixels: {"kind":"UInt16"},
    HeightInPixels: {"kind":"UInt16"},
    FontSize: {"kind":"UInt32"},
    Font: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: VIDEO_PALETTE_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEO_PALETTE_DATA = extern struct {
    NumEntries: {"kind":"UInt16"},
    FirstEntry: {"kind":"UInt16"},
    Colors: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: VIDEO_CLUTDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEO_CLUTDATA = extern struct {
    Red: {"kind":"Byte"},
    Green: {"kind":"Byte"},
    Blue: {"kind":"Byte"},
    Unused: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: VIDEO_CLUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEO_CLUT = extern struct {
    NumEntries: {"kind":"UInt16"},
    FirstEntry: {"kind":"UInt16"},
    LookupTable: {"kind":"Array","child": Windows.Win32.SystemServices.VIDEO_CLUT+_Anonymous_e__Union},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: VIDEO_CURSOR_POSITION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEO_CURSOR_POSITION = extern struct {
    Column: {"kind":"Int16"},
    Row: {"kind":"Int16"},
};
// --------------------------------------------------------
// Type: VIDEO_CURSOR_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEO_CURSOR_ATTRIBUTES = extern struct {
    Width: {"kind":"UInt16"},
    Height: {"kind":"UInt16"},
    Column: {"kind":"Int16"},
    Row: {"kind":"Int16"},
    Rate: {"kind":"Byte"},
    Enable: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: VIDEO_POINTER_POSITION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEO_POINTER_POSITION = extern struct {
    Column: {"kind":"Int16"},
    Row: {"kind":"Int16"},
};
// --------------------------------------------------------
// Type: VIDEO_POINTER_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEO_POINTER_ATTRIBUTES = extern struct {
    Flags: {"kind":"UInt32"},
    Width: {"kind":"UInt32"},
    Height: {"kind":"UInt32"},
    WidthInBytes: {"kind":"UInt32"},
    Enable: {"kind":"UInt32"},
    Column: {"kind":"Int16"},
    Row: {"kind":"Int16"},
    Pixels: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: VIDEO_POINTER_CAPABILITIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEO_POINTER_CAPABILITIES = extern struct {
    Flags: {"kind":"UInt32"},
    MaxWidth: {"kind":"UInt32"},
    MaxHeight: {"kind":"UInt32"},
    HWPtrBitmapStart: {"kind":"UInt32"},
    HWPtrBitmapEnd: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: VIDEO_BANK_SELECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEO_BANK_SELECT = extern struct {
    Length: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    BankingFlags: {"kind":"UInt32"},
    BankingType: {"kind":"UInt32"},
    PlanarHCBankingType: {"kind":"UInt32"},
    BitmapWidthInBytes: {"kind":"UInt32"},
    BitmapSize: {"kind":"UInt32"},
    Granularity: {"kind":"UInt32"},
    PlanarHCGranularity: {"kind":"UInt32"},
    CodeOffset: {"kind":"UInt32"},
    PlanarHCBankCodeOffset: {"kind":"UInt32"},
    PlanarHCEnableCodeOffset: {"kind":"UInt32"},
    PlanarHCDisableCodeOffset: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: VIDEO_BANK_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VIDEO_BANK_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: VIDEO_MEMORY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEO_MEMORY = extern struct {
    RequestedVirtualAddress: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: VIDEO_SHARE_MEMORY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEO_SHARE_MEMORY = extern struct {
    ProcessHandle: Windows.Win32.SystemServices.HANDLE,
    ViewOffset: {"kind":"UInt32"},
    ViewSize: {"kind":"UInt32"},
    RequestedVirtualAddress: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: VIDEO_SHARE_MEMORY_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEO_SHARE_MEMORY_INFORMATION = extern struct {
    SharedViewOffset: {"kind":"UInt32"},
    SharedViewSize: {"kind":"UInt32"},
    VirtualAddress: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: VIDEO_MEMORY_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEO_MEMORY_INFORMATION = extern struct {
    VideoRamBase: {"kind""Ptr","child":{"kind":"Void"}},
    VideoRamLength: {"kind":"UInt32"},
    FrameBufferBase: {"kind""Ptr","child":{"kind":"Void"}},
    FrameBufferLength: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: VIDEO_PUBLIC_ACCESS_RANGES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEO_PUBLIC_ACCESS_RANGES = extern struct {
    InIoSpace: {"kind":"UInt32"},
    MappedInIoSpace: {"kind":"UInt32"},
    VirtualAddress: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: VIDEO_COLOR_CAPABILITIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEO_COLOR_CAPABILITIES = extern struct {
    Length: {"kind":"UInt32"},
    AttributeFlags: {"kind":"UInt32"},
    RedPhosphoreDecay: {"kind":"Int32"},
    GreenPhosphoreDecay: {"kind":"Int32"},
    BluePhosphoreDecay: {"kind":"Int32"},
    WhiteChromaticity_x: {"kind":"Int32"},
    WhiteChromaticity_y: {"kind":"Int32"},
    WhiteChromaticity_Y: {"kind":"Int32"},
    RedChromaticity_x: {"kind":"Int32"},
    RedChromaticity_y: {"kind":"Int32"},
    GreenChromaticity_x: {"kind":"Int32"},
    GreenChromaticity_y: {"kind":"Int32"},
    BlueChromaticity_x: {"kind":"Int32"},
    BlueChromaticity_y: {"kind":"Int32"},
    WhiteGamma: {"kind":"Int32"},
    RedGamma: {"kind":"Int32"},
    GreenGamma: {"kind":"Int32"},
    BlueGamma: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: VIDEO_POWER_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VIDEO_POWER_STATE = *opaque{
};
// --------------------------------------------------------
// Type: VIDEO_POWER_MANAGEMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEO_POWER_MANAGEMENT = extern struct {
    Length: {"kind":"UInt32"},
    DPMSVersion: {"kind":"UInt32"},
    PowerState: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: VIDEO_COLOR_LUT_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEO_COLOR_LUT_DATA = extern struct {
    Length: {"kind":"UInt32"},
    LutDataFormat: {"kind":"UInt32"},
    LutData: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: VIDEO_LUT_RGB256WORDS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEO_LUT_RGB256WORDS = extern struct {
    Red: {"kind":"Array","child": {"kind":"UInt16"}},
    Green: {"kind":"Array","child": {"kind":"UInt16"}},
    Blue: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: BANK_POSITION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BANK_POSITION = extern struct {
    ReadBankPosition: {"kind":"UInt32"},
    WriteBankPosition: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DISPLAY_BRIGHTNESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISPLAY_BRIGHTNESS = extern struct {
    ucDisplayPolicy: {"kind":"Byte"},
    ucACBrightness: {"kind":"Byte"},
    ucDCBrightness: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: VIDEO_BRIGHTNESS_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEO_BRIGHTNESS_POLICY = extern struct {
    DefaultToBiosPolicy: {"kind":"Byte"},
    LevelCount: {"kind":"Byte"},
    Level: {"kind":"Array","child": Windows.Win32.SystemServices.VIDEO_BRIGHTNESS_POLICY+_Anonymous_e__Struct},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Anonymous_e__Struct = extern struct {
        BatteryLevel: {"kind":"Byte"},
        Brightness: {"kind":"Byte"},
    };
};
// --------------------------------------------------------
// Type: FSCNTL_SCREEN_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FSCNTL_SCREEN_INFO = extern struct {
    Position: Windows.Win32.SystemServices.COORD,
    ScreenSize: Windows.Win32.SystemServices.COORD,
    nNumberOfChars: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: FONT_IMAGE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FONT_IMAGE_INFO = extern struct {
    FontSize: Windows.Win32.SystemServices.COORD,
    ImageBits: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: CHAR_IMAGE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CHAR_IMAGE_INFO = extern struct {
    CharInfo: Windows.Win32.SystemServices.CHAR_INFO,
    FontImageInfo: Windows.Win32.SystemServices.FONT_IMAGE_INFO,
};
// --------------------------------------------------------
// Type: VGA_CHAR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VGA_CHAR = extern struct {
    Char: {"kind":"SByte"},
    Attributes: {"kind":"SByte"},
};
// --------------------------------------------------------
// Type: FSVIDEO_COPY_FRAME_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FSVIDEO_COPY_FRAME_BUFFER = extern struct {
    SrcScreen: Windows.Win32.SystemServices.FSCNTL_SCREEN_INFO,
    DestScreen: Windows.Win32.SystemServices.FSCNTL_SCREEN_INFO,
};
// --------------------------------------------------------
// Type: FSVIDEO_WRITE_TO_FRAME_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FSVIDEO_WRITE_TO_FRAME_BUFFER = extern struct {
    SrcBuffer: {"kind""Ptr","child":Windows.Win32.SystemServices.CHAR_IMAGE_INFO},
    DestScreen: Windows.Win32.SystemServices.FSCNTL_SCREEN_INFO,
};
// --------------------------------------------------------
// Type: FSVIDEO_REVERSE_MOUSE_POINTER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FSVIDEO_REVERSE_MOUSE_POINTER = extern struct {
    Screen: Windows.Win32.SystemServices.FSCNTL_SCREEN_INFO,
    dwType: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: FSVIDEO_MODE_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FSVIDEO_MODE_INFORMATION = extern struct {
    VideoMode: Windows.Win32.SystemServices.VIDEO_MODE_INFORMATION,
    VideoMemory: Windows.Win32.SystemServices.VIDEO_MEMORY_INFORMATION,
};
// --------------------------------------------------------
// Type: FSVIDEO_SCREEN_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FSVIDEO_SCREEN_INFORMATION = extern struct {
    ScreenSize: Windows.Win32.SystemServices.COORD,
    FontSize: Windows.Win32.SystemServices.COORD,
};
// --------------------------------------------------------
// Type: FSVIDEO_CURSOR_POSITION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FSVIDEO_CURSOR_POSITION = extern struct {
    Coord: Windows.Win32.SystemServices.VIDEO_CURSOR_POSITION,
    dwType: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: ENG_EVENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENG_EVENT = extern struct {
    pKEvent: {"kind""Ptr","child":{"kind":"Void"}},
    fFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: VIDEO_PERFORMANCE_COUNTER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEO_PERFORMANCE_COUNTER = extern struct {
    NbOfAllocationEvicted: {"kind":"Array","child": {"kind":"UInt64"}},
    NbOfAllocationMarked: {"kind":"Array","child": {"kind":"UInt64"}},
    NbOfAllocationRestored: {"kind":"Array","child": {"kind":"UInt64"}},
    KBytesEvicted: {"kind":"Array","child": {"kind":"UInt64"}},
    KBytesMarked: {"kind":"Array","child": {"kind":"UInt64"}},
    KBytesRestored: {"kind":"Array","child": {"kind":"UInt64"}},
    NbProcessCommited: {"kind":"UInt64"},
    NbAllocationCommited: {"kind":"UInt64"},
    NbAllocationMarked: {"kind":"UInt64"},
    KBytesAllocated: {"kind":"UInt64"},
    KBytesAvailable: {"kind":"UInt64"},
    KBytesCurMarked: {"kind":"UInt64"},
    Reference: {"kind":"UInt64"},
    Unreference: {"kind":"UInt64"},
    TrueReference: {"kind":"UInt64"},
    NbOfPageIn: {"kind":"UInt64"},
    KBytesPageIn: {"kind":"UInt64"},
    NbOfPageOut: {"kind":"UInt64"},
    KBytesPageOut: {"kind":"UInt64"},
    NbOfRotateOut: {"kind":"UInt64"},
    KBytesRotateOut: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: VIDEO_QUERY_PERFORMANCE_COUNTER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEO_QUERY_PERFORMANCE_COUNTER = extern struct {
    BufferSize: {"kind":"UInt32"},
    Buffer: {"kind""Ptr","child":Windows.Win32.SystemServices.VIDEO_PERFORMANCE_COUNTER},
};
// --------------------------------------------------------
// Type: BRIGHTNESS_INTERFACE_VERSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BRIGHTNESS_INTERFACE_VERSION = *opaque{
};
// --------------------------------------------------------
// Type: PANEL_QUERY_BRIGHTNESS_CAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PANEL_QUERY_BRIGHTNESS_CAPS = extern struct {
    Version: Windows.Win32.SystemServices.BRIGHTNESS_INTERFACE_VERSION,
    Anonymous: Windows.Win32.SystemServices.PANEL_QUERY_BRIGHTNESS_CAPS+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: BRIGHTNESS_LEVEL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BRIGHTNESS_LEVEL = extern struct {
    Count: {"kind":"Byte"},
    Level: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: BRIGHTNESS_NIT_RANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BRIGHTNESS_NIT_RANGE = extern struct {
    MinLevelInMillinit: {"kind":"UInt32"},
    MaxLevelInMillinit: {"kind":"UInt32"},
    StepSizeInMillinit: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: BRIGHTNESS_NIT_RANGES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BRIGHTNESS_NIT_RANGES = extern struct {
    NormalRangeCount: {"kind":"UInt32"},
    RangeCount: {"kind":"UInt32"},
    PreferredMaximumBrightness: {"kind":"UInt32"},
    SupportedRanges: {"kind":"Array","child": Windows.Win32.SystemServices.BRIGHTNESS_NIT_RANGE},
};
// --------------------------------------------------------
// Type: PANEL_QUERY_BRIGHTNESS_RANGES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PANEL_QUERY_BRIGHTNESS_RANGES = extern struct {
    Version: Windows.Win32.SystemServices.BRIGHTNESS_INTERFACE_VERSION,
    Anonymous: Windows.Win32.SystemServices.PANEL_QUERY_BRIGHTNESS_RANGES+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PANEL_GET_BRIGHTNESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PANEL_GET_BRIGHTNESS = extern struct {
    Version: Windows.Win32.SystemServices.BRIGHTNESS_INTERFACE_VERSION,
    Anonymous: Windows.Win32.SystemServices.PANEL_GET_BRIGHTNESS+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            CurrentInMillinits: {"kind":"UInt32"},
            TargetInMillinits: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: CHROMATICITY_COORDINATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CHROMATICITY_COORDINATE = extern struct {
    x: {"kind":"Single"},
    y: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: PANEL_BRIGHTNESS_SENSOR_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PANEL_BRIGHTNESS_SENSOR_DATA = extern struct {
    Anonymous: Windows.Win32.SystemServices.PANEL_BRIGHTNESS_SENSOR_DATA+_Anonymous_e__Union,
    AlsReading: {"kind":"Single"},
    ChromaticityCoordinate: Windows.Win32.SystemServices.CHROMATICITY_COORDINATE,
    ColorTemperature: {"kind":"Single"},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: PANEL_SET_BRIGHTNESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PANEL_SET_BRIGHTNESS = extern struct {
    Version: Windows.Win32.SystemServices.BRIGHTNESS_INTERFACE_VERSION,
    Anonymous: Windows.Win32.SystemServices.PANEL_SET_BRIGHTNESS+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            Millinits: {"kind":"UInt32"},
            TransitionTimeInMs: {"kind":"UInt32"},
            SensorData: Windows.Win32.SystemServices.PANEL_BRIGHTNESS_SENSOR_DATA,
        };
    };
};
// --------------------------------------------------------
// Type: PANEL_SET_BRIGHTNESS_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PANEL_SET_BRIGHTNESS_STATE = extern struct {
    Anonymous: Windows.Win32.SystemServices.PANEL_SET_BRIGHTNESS_STATE+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: BACKLIGHT_OPTIMIZATION_LEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BACKLIGHT_OPTIMIZATION_LEVEL = *opaque{
};
// --------------------------------------------------------
// Type: PANEL_SET_BACKLIGHT_OPTIMIZATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PANEL_SET_BACKLIGHT_OPTIMIZATION = extern struct {
    Level: Windows.Win32.SystemServices.BACKLIGHT_OPTIMIZATION_LEVEL,
};
// --------------------------------------------------------
// Type: BACKLIGHT_REDUCTION_GAMMA_RAMP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BACKLIGHT_REDUCTION_GAMMA_RAMP = extern struct {
    R: {"kind":"Array","child": {"kind":"UInt16"}},
    G: {"kind":"Array","child": {"kind":"UInt16"}},
    B: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: PANEL_GET_BACKLIGHT_REDUCTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PANEL_GET_BACKLIGHT_REDUCTION = extern struct {
    BacklightUsersetting: {"kind":"UInt16"},
    BacklightEffective: {"kind":"UInt16"},
    GammaRamp: Windows.Win32.SystemServices.BACKLIGHT_REDUCTION_GAMMA_RAMP,
};
// --------------------------------------------------------
// Type: COLORSPACE_TRANSFORM_DATA_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const COLORSPACE_TRANSFORM_DATA_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: COLORSPACE_TRANSFORM_DATA_CAP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COLORSPACE_TRANSFORM_DATA_CAP = extern struct {
    DataType: Windows.Win32.SystemServices.COLORSPACE_TRANSFORM_DATA_TYPE,
    Anonymous: Windows.Win32.SystemServices.COLORSPACE_TRANSFORM_DATA_CAP+_Anonymous_e__Union,
    NumericRangeMin: {"kind":"Single"},
    NumericRangeMax: {"kind":"Single"},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous1_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous1_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
        // --------------------------------------------------------
        // Type: _Anonymous2_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous2_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: COLORSPACE_TRANSFORM_1DLUT_CAP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COLORSPACE_TRANSFORM_1DLUT_CAP = extern struct {
    NumberOfLUTEntries: {"kind":"UInt32"},
    DataCap: Windows.Win32.SystemServices.COLORSPACE_TRANSFORM_DATA_CAP,
};
// --------------------------------------------------------
// Type: COLORSPACE_TRANSFORM_MATRIX_CAP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COLORSPACE_TRANSFORM_MATRIX_CAP = extern struct {
    Anonymous: Windows.Win32.SystemServices.COLORSPACE_TRANSFORM_MATRIX_CAP+_Anonymous_e__Union,
    DataCap: Windows.Win32.SystemServices.COLORSPACE_TRANSFORM_DATA_CAP,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: COLORSPACE_TRANSFORM_TARGET_CAPS_VERSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const COLORSPACE_TRANSFORM_TARGET_CAPS_VERSION = *opaque{
};
// --------------------------------------------------------
// Type: COLORSPACE_TRANSFORM_TARGET_CAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COLORSPACE_TRANSFORM_TARGET_CAPS = extern struct {
    Version: Windows.Win32.SystemServices.COLORSPACE_TRANSFORM_TARGET_CAPS_VERSION,
    LookupTable1DDegammaCap: Windows.Win32.SystemServices.COLORSPACE_TRANSFORM_1DLUT_CAP,
    ColorMatrix3x3Cap: Windows.Win32.SystemServices.COLORSPACE_TRANSFORM_MATRIX_CAP,
    LookupTable1DRegammaCap: Windows.Win32.SystemServices.COLORSPACE_TRANSFORM_1DLUT_CAP,
};
// --------------------------------------------------------
// Type: COLORSPACE_TRANSFORM_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const COLORSPACE_TRANSFORM_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: GAMMA_RAMP_RGB256x3x16
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GAMMA_RAMP_RGB256x3x16 = extern struct {
    Red: {"kind":"Array","child": {"kind":"UInt16"}},
    Green: {"kind":"Array","child": {"kind":"UInt16"}},
    Blue: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: GAMMA_RAMP_RGB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GAMMA_RAMP_RGB = extern struct {
    Red: {"kind":"Single"},
    Green: {"kind":"Single"},
    Blue: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: GAMMA_RAMP_DXGI_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GAMMA_RAMP_DXGI_1 = extern struct {
    Scale: Windows.Win32.SystemServices.GAMMA_RAMP_RGB,
    Offset: Windows.Win32.SystemServices.GAMMA_RAMP_RGB,
    GammaCurve: {"kind":"Array","child": Windows.Win32.SystemServices.GAMMA_RAMP_RGB},
};
// --------------------------------------------------------
// Type: COLORSPACE_TRANSFORM_3x4
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COLORSPACE_TRANSFORM_3x4 = extern struct {
    ColorMatrix3x4: {"kind":"Array","child": {"kind":"Single"}},
    ScalarMultiplier: {"kind":"Single"},
    LookupTable1D: {"kind":"Array","child": Windows.Win32.SystemServices.GAMMA_RAMP_RGB},
};
// --------------------------------------------------------
// Type: OUTPUT_WIRE_COLOR_SPACE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OUTPUT_WIRE_COLOR_SPACE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: OUTPUT_COLOR_ENCODING
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OUTPUT_COLOR_ENCODING = *opaque{
};
// --------------------------------------------------------
// Type: OUTPUT_WIRE_FORMAT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OUTPUT_WIRE_FORMAT = extern struct {
    ColorEncoding: Windows.Win32.SystemServices.OUTPUT_COLOR_ENCODING,
    BitsPerPixel: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: COLORSPACE_TRANSFORM_STAGE_CONTROL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const COLORSPACE_TRANSFORM_STAGE_CONTROL = *opaque{
};
// --------------------------------------------------------
// Type: COLORSPACE_TRANSFORM_MATRIX_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COLORSPACE_TRANSFORM_MATRIX_V2 = extern struct {
    StageControlLookupTable1DDegamma: Windows.Win32.SystemServices.COLORSPACE_TRANSFORM_STAGE_CONTROL,
    LookupTable1DDegamma: {"kind":"Array","child": Windows.Win32.SystemServices.GAMMA_RAMP_RGB},
    StageControlColorMatrix3x3: Windows.Win32.SystemServices.COLORSPACE_TRANSFORM_STAGE_CONTROL,
    ColorMatrix3x3: {"kind":"Array","child": {"kind":"Single"}},
    StageControlLookupTable1DRegamma: Windows.Win32.SystemServices.COLORSPACE_TRANSFORM_STAGE_CONTROL,
    LookupTable1DRegamma: {"kind":"Array","child": Windows.Win32.SystemServices.GAMMA_RAMP_RGB},
};
// --------------------------------------------------------
// Type: COLORSPACE_TRANSFORM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COLORSPACE_TRANSFORM = extern struct {
    Type: Windows.Win32.SystemServices.COLORSPACE_TRANSFORM_TYPE,
    Data: Windows.Win32.SystemServices.COLORSPACE_TRANSFORM+_Data_e__Union,
    // --------------------------------------------------------
    // Type: _Data_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Data_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: COLORSPACE_TRANSFORM_SET_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COLORSPACE_TRANSFORM_SET_INPUT = extern struct {
    OutputWireColorSpaceExpected: Windows.Win32.SystemServices.OUTPUT_WIRE_COLOR_SPACE_TYPE,
    OutputWireFormatExpected: Windows.Win32.SystemServices.OUTPUT_WIRE_FORMAT,
    ColorSpaceTransform: Windows.Win32.SystemServices.COLORSPACE_TRANSFORM,
};
// --------------------------------------------------------
// Type: SET_ACTIVE_COLOR_PROFILE_NAME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SET_ACTIVE_COLOR_PROFILE_NAME = extern struct {
    ColorProfileName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: MIPI_DSI_CAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MIPI_DSI_CAPS = extern struct {
    DSITypeMajor: {"kind":"Byte"},
    DSITypeMinor: {"kind":"Byte"},
    SpecVersionMajor: {"kind":"Byte"},
    SpecVersionMinor: {"kind":"Byte"},
    SpecVersionPatch: {"kind":"Byte"},
    TargetMaximumReturnPacketSize: {"kind":"UInt16"},
    ResultCodeFlags: {"kind":"Byte"},
    ResultCodeStatus: {"kind":"Byte"},
    Revision: {"kind":"Byte"},
    Level: {"kind":"Byte"},
    DeviceClassHi: {"kind":"Byte"},
    DeviceClassLo: {"kind":"Byte"},
    ManufacturerHi: {"kind":"Byte"},
    ManufacturerLo: {"kind":"Byte"},
    ProductHi: {"kind":"Byte"},
    ProductLo: {"kind":"Byte"},
    LengthHi: {"kind":"Byte"},
    LengthLo: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: DSI_CONTROL_TRANSMISSION_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DSI_CONTROL_TRANSMISSION_MODE = *opaque{
};
// --------------------------------------------------------
// Type: MIPI_DSI_PACKET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MIPI_DSI_PACKET = extern struct {
    Anonymous1: Windows.Win32.SystemServices.MIPI_DSI_PACKET+_Anonymous1_e__Union,
    Anonymous2: Windows.Win32.SystemServices.MIPI_DSI_PACKET+_Anonymous2_e__Union,
    EccFiller: {"kind":"Byte"},
    Payload: {"kind":"Array","child": {"kind":"Byte"}},
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            Data0: {"kind":"Byte"},
            Data1: {"kind":"Byte"},
        };
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"Byte"},
        };
    };
};
// --------------------------------------------------------
// Type: MIPI_DSI_TRANSMISSION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MIPI_DSI_TRANSMISSION = extern struct {
    TotalBufferSize: {"kind":"UInt32"},
    PacketCount: {"kind":"Byte"},
    FailedPacket: {"kind":"Byte"},
    Anonymous: Windows.Win32.SystemServices.MIPI_DSI_TRANSMISSION+_Anonymous_e__Struct,
    ReadWordCount: {"kind":"UInt16"},
    FinalCommandExtraPayload: {"kind":"UInt16"},
    MipiErrors: {"kind":"UInt16"},
    HostErrors: {"kind":"UInt16"},
    Packets: {"kind":"Array","child": Windows.Win32.SystemServices.MIPI_DSI_PACKET},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Anonymous_e__Struct = extern struct {
        _bitfield: {"kind":"UInt16"},
    };
};
// --------------------------------------------------------
// Type: MIPI_DSI_RESET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MIPI_DSI_RESET = extern struct {
    Flags: {"kind":"UInt32"},
    Anonymous: Windows.Win32.SystemServices.MIPI_DSI_RESET+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: PROCESSOR_NUMBER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESSOR_NUMBER = extern struct {
    Group: {"kind":"UInt16"},
    Number: {"kind":"Byte"},
    Reserved: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: GROUP_AFFINITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GROUP_AFFINITY = extern struct {
    Mask: {"kind":"UIntPtr"},
    Group: {"kind":"UInt16"},
    Reserved: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: PROCESS_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESS_INFORMATION = extern struct {
    hProcess: Windows.Win32.SystemServices.HANDLE,
    hThread: Windows.Win32.SystemServices.HANDLE,
    dwProcessId: {"kind":"UInt32"},
    dwThreadId: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: STARTUPINFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STARTUPINFOA = extern struct {
    cb: {"kind":"UInt32"},
    lpReserved: {"kind""Ptr","child":{"kind":"SByte"}},
    lpDesktop: {"kind""Ptr","child":{"kind":"SByte"}},
    lpTitle: {"kind""Ptr","child":{"kind":"SByte"}},
    dwX: {"kind":"UInt32"},
    dwY: {"kind":"UInt32"},
    dwXSize: {"kind":"UInt32"},
    dwYSize: {"kind":"UInt32"},
    dwXCountChars: {"kind":"UInt32"},
    dwYCountChars: {"kind":"UInt32"},
    dwFillAttribute: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    wShowWindow: {"kind":"UInt16"},
    cbReserved2: {"kind":"UInt16"},
    lpReserved2: {"kind""Ptr","child":{"kind":"Byte"}},
    hStdInput: Windows.Win32.SystemServices.HANDLE,
    hStdOutput: Windows.Win32.SystemServices.HANDLE,
    hStdError: Windows.Win32.SystemServices.HANDLE,
};
// --------------------------------------------------------
// Type: STARTUPINFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STARTUPINFOW = extern struct {
    cb: {"kind":"UInt32"},
    lpReserved: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpDesktop: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwX: {"kind":"UInt32"},
    dwY: {"kind":"UInt32"},
    dwXSize: {"kind":"UInt32"},
    dwYSize: {"kind":"UInt32"},
    dwXCountChars: {"kind":"UInt32"},
    dwYCountChars: {"kind":"UInt32"},
    dwFillAttribute: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    wShowWindow: {"kind":"UInt16"},
    cbReserved2: {"kind":"UInt16"},
    lpReserved2: {"kind""Ptr","child":{"kind":"Byte"}},
    hStdInput: Windows.Win32.SystemServices.HANDLE,
    hStdOutput: Windows.Win32.SystemServices.HANDLE,
    hStdError: Windows.Win32.SystemServices.HANDLE,
};
// --------------------------------------------------------
// Type: MEMORY_PRIORITY_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MEMORY_PRIORITY_INFORMATION = extern struct {
    MemoryPriority: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: THREAD_POWER_THROTTLING_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const THREAD_POWER_THROTTLING_STATE = extern struct {
    Version: {"kind":"UInt32"},
    ControlMask: {"kind":"UInt32"},
    StateMask: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: APP_MEMORY_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const APP_MEMORY_INFORMATION = extern struct {
    AvailableCommit: {"kind":"UInt64"},
    PrivateCommitUsage: {"kind":"UInt64"},
    PeakPrivateCommitUsage: {"kind":"UInt64"},
    TotalCommitUsage: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: PROCESS_MEMORY_EXHAUSTION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROCESS_MEMORY_EXHAUSTION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: PROCESS_MEMORY_EXHAUSTION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESS_MEMORY_EXHAUSTION_INFO = extern struct {
    Version: {"kind":"UInt16"},
    Reserved: {"kind":"UInt16"},
    Type: Windows.Win32.SystemServices.PROCESS_MEMORY_EXHAUSTION_TYPE,
    Value: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: PROCESS_POWER_THROTTLING_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESS_POWER_THROTTLING_STATE = extern struct {
    Version: {"kind":"UInt32"},
    ControlMask: {"kind":"UInt32"},
    StateMask: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PROCESS_PROTECTION_LEVEL_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESS_PROTECTION_LEVEL_INFORMATION = extern struct {
    ProtectionLevel: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PROCESS_LEAP_SECOND_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESS_LEAP_SECOND_INFO = extern struct {
    Flags: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MEMORYSTATUSEX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MEMORYSTATUSEX = extern struct {
    dwLength: {"kind":"UInt32"},
    dwMemoryLoad: {"kind":"UInt32"},
    ullTotalPhys: {"kind":"UInt64"},
    ullAvailPhys: {"kind":"UInt64"},
    ullTotalPageFile: {"kind":"UInt64"},
    ullAvailPageFile: {"kind":"UInt64"},
    ullTotalVirtual: {"kind":"UInt64"},
    ullAvailVirtual: {"kind":"UInt64"},
    ullAvailExtendedVirtual: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: PFIBER_START_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFIBER_START_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: COMMPROP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COMMPROP = extern struct {
    wPacketLength: {"kind":"UInt16"},
    wPacketVersion: {"kind":"UInt16"},
    dwServiceMask: {"kind":"UInt32"},
    dwReserved1: {"kind":"UInt32"},
    dwMaxTxQueue: {"kind":"UInt32"},
    dwMaxRxQueue: {"kind":"UInt32"},
    dwMaxBaud: {"kind":"UInt32"},
    dwProvSubType: {"kind":"UInt32"},
    dwProvCapabilities: {"kind":"UInt32"},
    dwSettableParams: {"kind":"UInt32"},
    dwSettableBaud: {"kind":"UInt32"},
    wSettableData: {"kind":"UInt16"},
    wSettableStopParity: {"kind":"UInt16"},
    dwCurrentTxQueue: {"kind":"UInt32"},
    dwCurrentRxQueue: {"kind":"UInt32"},
    dwProvSpec1: {"kind":"UInt32"},
    dwProvSpec2: {"kind":"UInt32"},
    wcProvChar: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: COMSTAT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COMSTAT = extern struct {
    _bitfield: {"kind":"UInt32"},
    cbInQue: {"kind":"UInt32"},
    cbOutQue: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DCB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DCB = extern struct {
    DCBlength: {"kind":"UInt32"},
    BaudRate: {"kind":"UInt32"},
    _bitfield: {"kind":"UInt32"},
    wReserved: {"kind":"UInt16"},
    XonLim: {"kind":"UInt16"},
    XoffLim: {"kind":"UInt16"},
    ByteSize: {"kind":"Byte"},
    Parity: {"kind":"Byte"},
    StopBits: {"kind":"Byte"},
    XonChar: {"kind":"SByte"},
    XoffChar: {"kind":"SByte"},
    ErrorChar: {"kind":"SByte"},
    EofChar: {"kind":"SByte"},
    EvtChar: {"kind":"SByte"},
    wReserved1: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: COMMTIMEOUTS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COMMTIMEOUTS = extern struct {
    ReadIntervalTimeout: {"kind":"UInt32"},
    ReadTotalTimeoutMultiplier: {"kind":"UInt32"},
    ReadTotalTimeoutConstant: {"kind":"UInt32"},
    WriteTotalTimeoutMultiplier: {"kind":"UInt32"},
    WriteTotalTimeoutConstant: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: COMMCONFIG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COMMCONFIG = extern struct {
    dwSize: {"kind":"UInt32"},
    wVersion: {"kind":"UInt16"},
    wReserved: {"kind":"UInt16"},
    dcb: Windows.Win32.SystemServices.DCB,
    dwProviderSubType: {"kind":"UInt32"},
    dwProviderOffset: {"kind":"UInt32"},
    dwProviderSize: {"kind":"UInt32"},
    wcProviderData: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: MEMORYSTATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MEMORYSTATUS = extern struct {
    dwLength: {"kind":"UInt32"},
    dwMemoryLoad: {"kind":"UInt32"},
    dwTotalPhys: {"kind":"UIntPtr"},
    dwAvailPhys: {"kind":"UIntPtr"},
    dwTotalPageFile: {"kind":"UIntPtr"},
    dwAvailPageFile: {"kind":"UIntPtr"},
    dwTotalVirtual: {"kind":"UIntPtr"},
    dwAvailVirtual: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: UMS_SCHEDULER_STARTUP_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UMS_SCHEDULER_STARTUP_INFO = extern struct {
    UmsVersion: {"kind":"UInt32"},
    CompletionList: {"kind""Ptr","child":{"kind":"Void"}},
    SchedulerProc: Windows.Win32.WindowsProgramming.PUMS_SCHEDULER_ENTRY_POINT,
    SchedulerParam: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: UMS_SYSTEM_THREAD_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UMS_SYSTEM_THREAD_INFORMATION = extern struct {
    UmsVersion: {"kind":"UInt32"},
    Anonymous: Windows.Win32.SystemServices.UMS_SYSTEM_THREAD_INFORMATION+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: WIN32_STREAM_ID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WIN32_STREAM_ID = extern struct {
    dwStreamId: {"kind":"UInt32"},
    dwStreamAttributes: {"kind":"UInt32"},
    Size: Windows.Win32.SystemServices.LARGE_INTEGER,
    dwStreamNameSize: {"kind":"UInt32"},
    cStreamName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: STARTUPINFOEXA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STARTUPINFOEXA = extern struct {
    StartupInfo: Windows.Win32.SystemServices.STARTUPINFOA,
    lpAttributeList: {"kind":"IntPtr"},
};
// --------------------------------------------------------
// Type: STARTUPINFOEXW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STARTUPINFOEXW = extern struct {
    StartupInfo: Windows.Win32.SystemServices.STARTUPINFOW,
    lpAttributeList: {"kind":"IntPtr"},
};
// --------------------------------------------------------
// Type: EVENTLOG_FULL_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EVENTLOG_FULL_INFORMATION = extern struct {
    dwFull: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SYSTEM_POWER_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_POWER_STATUS = extern struct {
    ACLineStatus: {"kind":"Byte"},
    BatteryFlag: {"kind":"Byte"},
    BatteryLifePercent: {"kind":"Byte"},
    SystemStatusFlag: {"kind":"Byte"},
    BatteryLifeTime: {"kind":"UInt32"},
    BatteryFullLifeTime: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PEB_LDR_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PEB_LDR_DATA = extern struct {
    Reserved1: {"kind":"Array","child": {"kind":"Byte"}},
    Reserved2: {"kind":"Array","child": {"kind""Ptr","child":{"kind":"Void"}}},
    InMemoryOrderModuleList: Windows.Win32.Kernel.LIST_ENTRY,
};
// --------------------------------------------------------
// Type: RTL_USER_PROCESS_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RTL_USER_PROCESS_PARAMETERS = extern struct {
    Reserved1: {"kind":"Array","child": {"kind":"Byte"}},
    Reserved2: {"kind":"Array","child": {"kind""Ptr","child":{"kind":"Void"}}},
    ImagePathName: Windows.Win32.Security.UNICODE_STRING,
    CommandLine: Windows.Win32.Security.UNICODE_STRING,
};
// --------------------------------------------------------
// Type: PEB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PEB = extern struct {
    Reserved1: {"kind":"Array","child": {"kind":"Byte"}},
    BeingDebugged: {"kind":"Byte"},
    Reserved2: {"kind":"Array","child": {"kind":"Byte"}},
    Reserved3: {"kind":"Array","child": {"kind""Ptr","child":{"kind":"Void"}}},
    Ldr: {"kind""Ptr","child":Windows.Win32.SystemServices.PEB_LDR_DATA},
    ProcessParameters: {"kind""Ptr","child":Windows.Win32.SystemServices.RTL_USER_PROCESS_PARAMETERS},
    Reserved4: {"kind":"Array","child": {"kind""Ptr","child":{"kind":"Void"}}},
    AtlThunkSListPtr: {"kind""Ptr","child":{"kind":"Void"}},
    Reserved5: {"kind""Ptr","child":{"kind":"Void"}},
    Reserved6: {"kind":"UInt32"},
    Reserved7: {"kind""Ptr","child":{"kind":"Void"}},
    Reserved8: {"kind":"UInt32"},
    AtlThunkSListPtr32: {"kind":"UInt32"},
    Reserved9: {"kind":"Array","child": {"kind""Ptr","child":{"kind":"Void"}}},
    Reserved10: {"kind":"Array","child": {"kind":"Byte"}},
    PostProcessInitRoutine: Windows.Win32.WindowsProgramming.PPS_POST_PROCESS_INIT_ROUTINE,
    Reserved11: {"kind":"Array","child": {"kind":"Byte"}},
    Reserved12: {"kind":"Array","child": {"kind""Ptr","child":{"kind":"Void"}}},
    SessionId: {"kind":"UInt32"},
};
],

"func_definitions": [

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn ExitWindowsEx(
    uFlags: {"kind":"UInt32"},
    dwReason: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn IsWow64Message(

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn RegisterDeviceNotificationA(
    hRecipient: Windows.Win32.SystemServices.HANDLE,
    NotificationFilter: {"kind""Ptr","child":{"kind":"Void"}},
    Flags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn RegisterDeviceNotificationW(
    hRecipient: Windows.Win32.SystemServices.HANDLE,
    NotificationFilter: {"kind""Ptr","child":{"kind":"Void"}},
    Flags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn UnregisterDeviceNotification(
    Handle: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn RegisterPowerSettingNotification(
    hRecipient: Windows.Win32.SystemServices.HANDLE,
    PowerSettingGuid: {"kind""Ptr","child":Guid},
    Flags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn UnregisterPowerSettingNotification(
    Handle: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn RegisterSuspendResumeNotification(
    hRecipient: Windows.Win32.SystemServices.HANDLE,
    Flags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn UnregisterSuspendResumeNotification(
    Handle: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn AttachThreadInput(
    idAttach: {"kind":"UInt32"},
    idAttachTo: {"kind":"UInt32"},
    fAttach: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn WaitForInputIdle(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    dwMilliseconds: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn MsgWaitForMultipleObjects(
    nCount: {"kind":"UInt32"},
    pHandles: {"kind""Ptr","child":{"kind":"IntPtr"}},
    fWaitAll: Windows.Win32.SystemServices.BOOL,
    dwMilliseconds: {"kind":"UInt32"},
    dwWakeMask: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn MsgWaitForMultipleObjectsEx(
    nCount: {"kind":"UInt32"},
    pHandles: {"kind""Ptr","child":{"kind":"IntPtr"}},
    dwMilliseconds: {"kind":"UInt32"},
    dwWakeMask: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn GetGuiResources(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    uiFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn LockWorkStation(

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn UserHandleGrantAccess(
    hUserHandle: Windows.Win32.SystemServices.HANDLE,
    hJob: Windows.Win32.SystemServices.HANDLE,
    bGrant: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn ShutdownBlockReasonCreate(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    pwszReason: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn ShutdownBlockReasonQuery(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    pwszBuff: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchBuff: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn ShutdownBlockReasonDestroy(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn GetAutoRotationState(
    pState: {"kind""Ptr","child":Windows.Win32.SystemServices.AR_STATE},

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn GetDisplayAutoRotationPreferences(
    pOrientation: {"kind""Ptr","child":Windows.Win32.SystemServices.ORIENTATION_PREFERENCE},

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn SetDisplayAutoRotationPreferences(
    orientation: Windows.Win32.SystemServices.ORIENTATION_PREFERENCE,

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn IsImmersiveProcess(
    hProcess: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn SetProcessRestrictionExemption(
    fEnableExemption: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-rtlsupport-l1-1-0" fn RtlCompareMemory(
    Source1: {"kind""Ptr","child":{"kind":"Void"}},
    Source2: {"kind""Ptr","child":{"kind":"Void"}},
    Length: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlInitializeSListHead(
    ListHead: {"kind""Ptr","child":Windows.Win32.SystemServices.SLIST_HEADER},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlFirstEntrySList(
    ListHead: {"kind""Ptr","child":Windows.Win32.SystemServices.SLIST_HEADER},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlInterlockedPopEntrySList(
    ListHead: {"kind""Ptr","child":Windows.Win32.SystemServices.SLIST_HEADER},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlInterlockedPushEntrySList(
    ListHead: {"kind""Ptr","child":Windows.Win32.SystemServices.SLIST_HEADER},
    ListEntry: {"kind""Ptr","child":Windows.Win32.Kernel.SINGLE_LIST_ENTRY},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlInterlockedPushListSListEx(
    ListHead: {"kind""Ptr","child":Windows.Win32.SystemServices.SLIST_HEADER},
    List: {"kind""Ptr","child":Windows.Win32.Kernel.SINGLE_LIST_ENTRY},
    ListEnd: {"kind""Ptr","child":Windows.Win32.Kernel.SINGLE_LIST_ENTRY},
    Count: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlInterlockedFlushSList(
    ListHead: {"kind""Ptr","child":Windows.Win32.SystemServices.SLIST_HEADER},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlQueryDepthSList(
    ListHead: {"kind""Ptr","child":Windows.Win32.SystemServices.SLIST_HEADER},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlGetReturnAddressHijackTarget(

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlGetProductInfo(
    OSMajorVersion: {"kind":"UInt32"},
    OSMinorVersion: {"kind":"UInt32"},
    SpMajorVersion: {"kind":"UInt32"},
    SpMinorVersion: {"kind":"UInt32"},
    ReturnedProductType: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlCrc32(
    Buffer: {"kind""Ptr","child":{"kind":"Void"}},
    Size: {"kind":"UIntPtr"},
    InitialCrc: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlCrc64(
    Buffer: {"kind""Ptr","child":{"kind":"Void"}},
    Size: {"kind":"UIntPtr"},
    InitialCrc: {"kind":"UInt64"},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlOsDeploymentState(
    Flags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlInitializeCorrelationVector(
    CorrelationVector: {"kind""Ptr","child":Windows.Win32.SystemServices.CORRELATION_VECTOR},
    Version: {"kind":"Int32"},
    Guid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlIncrementCorrelationVector(
    CorrelationVector: {"kind""Ptr","child":Windows.Win32.SystemServices.CORRELATION_VECTOR},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlExtendCorrelationVector(
    CorrelationVector: {"kind""Ptr","child":Windows.Win32.SystemServices.CORRELATION_VECTOR},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlValidateCorrelationVector(
    Vector: {"kind""Ptr","child":Windows.Win32.SystemServices.CORRELATION_VECTOR},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlRaiseCustomSystemEventTrigger(
    TriggerConfig: {"kind""Ptr","child":Windows.Win32.SystemServices.CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlIsZeroMemory(
    Buffer: {"kind""Ptr","child":{"kind":"Void"}},
    Length: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlNormalizeSecurityDescriptor(
    SecurityDescriptor: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    SecurityDescriptorLength: {"kind":"UInt32"},
    NewSecurityDescriptor: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    NewSecurityDescriptorLength: {"kind""Ptr","child":{"kind":"UInt32"}},
    CheckOnly: {"kind":"Byte"},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlGetDeviceFamilyInfoEnum(
    pullUAPInfo: {"kind""Ptr","child":{"kind":"UInt64"}},
    pulDeviceFamily: {"kind""Ptr","child":{"kind":"UInt32"}},
    pulDeviceForm: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlConvertDeviceFamilyInfoToString(
    pulDeviceFamilyBufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    pulDeviceFormBufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    DeviceFamily: {"kind""Ptr","child":{"kind":"UInt16"}},
    DeviceForm: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlSwitchedVVI(
    VersionInfo: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.OSVERSIONINFOEXW},
    TypeMask: {"kind":"UInt32"},
    ConditionMask: {"kind":"UInt64"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FlsAlloc(
    lpCallback: Windows.Win32.SystemServices.PFLS_CALLBACK_FUNCTION,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FlsGetValue(
    dwFlsIndex: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FlsSetValue(
    dwFlsIndex: {"kind":"UInt32"},
    lpFlsData: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FlsFree(
    dwFlsIndex: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn IsThreadAFiber(

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn InitializeSRWLock(
    SRWLock: {"kind""Ptr","child":Windows.Win32.SystemServices.RTL_SRWLOCK},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn ReleaseSRWLockExclusive(
    SRWLock: {"kind""Ptr","child":Windows.Win32.SystemServices.RTL_SRWLOCK},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn ReleaseSRWLockShared(
    SRWLock: {"kind""Ptr","child":Windows.Win32.SystemServices.RTL_SRWLOCK},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn AcquireSRWLockExclusive(
    SRWLock: {"kind""Ptr","child":Windows.Win32.SystemServices.RTL_SRWLOCK},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn AcquireSRWLockShared(
    SRWLock: {"kind""Ptr","child":Windows.Win32.SystemServices.RTL_SRWLOCK},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn TryAcquireSRWLockExclusive(
    SRWLock: {"kind""Ptr","child":Windows.Win32.SystemServices.RTL_SRWLOCK},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn TryAcquireSRWLockShared(
    SRWLock: {"kind""Ptr","child":Windows.Win32.SystemServices.RTL_SRWLOCK},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn InitializeCriticalSection(
    lpCriticalSection: {"kind""Ptr","child":Windows.Win32.SystemServices.RTL_CRITICAL_SECTION},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn LeaveCriticalSection(
    lpCriticalSection: {"kind""Ptr","child":Windows.Win32.SystemServices.RTL_CRITICAL_SECTION},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn InitializeCriticalSectionAndSpinCount(
    lpCriticalSection: {"kind""Ptr","child":Windows.Win32.SystemServices.RTL_CRITICAL_SECTION},
    dwSpinCount: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn InitializeCriticalSectionEx(
    lpCriticalSection: {"kind""Ptr","child":Windows.Win32.SystemServices.RTL_CRITICAL_SECTION},
    dwSpinCount: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetCriticalSectionSpinCount(
    lpCriticalSection: {"kind""Ptr","child":Windows.Win32.SystemServices.RTL_CRITICAL_SECTION},
    dwSpinCount: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn TryEnterCriticalSection(
    lpCriticalSection: {"kind""Ptr","child":Windows.Win32.SystemServices.RTL_CRITICAL_SECTION},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn DeleteCriticalSection(
    lpCriticalSection: {"kind""Ptr","child":Windows.Win32.SystemServices.RTL_CRITICAL_SECTION},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn InitOnceInitialize(
    InitOnce: {"kind""Ptr","child":Windows.Win32.SystemServices.RTL_RUN_ONCE},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn InitOnceExecuteOnce(
    InitOnce: {"kind""Ptr","child":Windows.Win32.SystemServices.RTL_RUN_ONCE},
    InitFn: Windows.Win32.SystemServices.PINIT_ONCE_FN,
    Parameter: {"kind""Ptr","child":{"kind":"Void"}},
    Context: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn InitOnceBeginInitialize(
    lpInitOnce: {"kind""Ptr","child":Windows.Win32.SystemServices.RTL_RUN_ONCE},
    dwFlags: {"kind":"UInt32"},
    fPending: {"kind""Ptr","child":{"kind":"Int32"}},
    lpContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn InitOnceComplete(
    lpInitOnce: {"kind""Ptr","child":Windows.Win32.SystemServices.RTL_RUN_ONCE},
    dwFlags: {"kind":"UInt32"},
    lpContext: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn InitializeConditionVariable(
    ConditionVariable: {"kind""Ptr","child":Windows.Win32.SystemServices.RTL_CONDITION_VARIABLE},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn WakeConditionVariable(
    ConditionVariable: {"kind""Ptr","child":Windows.Win32.SystemServices.RTL_CONDITION_VARIABLE},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn WakeAllConditionVariable(
    ConditionVariable: {"kind""Ptr","child":Windows.Win32.SystemServices.RTL_CONDITION_VARIABLE},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SleepConditionVariableCS(
    ConditionVariable: {"kind""Ptr","child":Windows.Win32.SystemServices.RTL_CONDITION_VARIABLE},
    CriticalSection: {"kind""Ptr","child":Windows.Win32.SystemServices.RTL_CRITICAL_SECTION},
    dwMilliseconds: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SleepConditionVariableSRW(
    ConditionVariable: {"kind""Ptr","child":Windows.Win32.SystemServices.RTL_CONDITION_VARIABLE},
    SRWLock: {"kind""Ptr","child":Windows.Win32.SystemServices.RTL_SRWLOCK},
    dwMilliseconds: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetEvent(
    hEvent: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn ResetEvent(
    hEvent: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn ReleaseSemaphore(
    hSemaphore: Windows.Win32.SystemServices.HANDLE,
    lReleaseCount: {"kind":"Int32"},
    lpPreviousCount: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn ReleaseMutex(
    hMutex: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn WaitForSingleObject(
    hHandle: Windows.Win32.SystemServices.HANDLE,
    dwMilliseconds: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SleepEx(
    dwMilliseconds: {"kind":"UInt32"},
    bAlertable: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn WaitForSingleObjectEx(
    hHandle: Windows.Win32.SystemServices.HANDLE,
    dwMilliseconds: {"kind":"UInt32"},
    bAlertable: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn WaitForMultipleObjectsEx(
    nCount: {"kind":"UInt32"},
    lpHandles: {"kind""Ptr","child":{"kind":"IntPtr"}},
    bWaitAll: Windows.Win32.SystemServices.BOOL,
    dwMilliseconds: {"kind":"UInt32"},
    bAlertable: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateMutexA(
    lpMutexAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    bInitialOwner: Windows.Win32.SystemServices.BOOL,
    lpName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateMutexW(
    lpMutexAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    bInitialOwner: Windows.Win32.SystemServices.BOOL,
    lpName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn OpenMutexW(
    dwDesiredAccess: {"kind":"UInt32"},
    bInheritHandle: Windows.Win32.SystemServices.BOOL,
    lpName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateEventA(
    lpEventAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    bManualReset: Windows.Win32.SystemServices.BOOL,
    bInitialState: Windows.Win32.SystemServices.BOOL,
    lpName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateEventW(
    lpEventAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    bManualReset: Windows.Win32.SystemServices.BOOL,
    bInitialState: Windows.Win32.SystemServices.BOOL,
    lpName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn OpenEventA(
    dwDesiredAccess: {"kind":"UInt32"},
    bInheritHandle: Windows.Win32.SystemServices.BOOL,
    lpName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn OpenEventW(
    dwDesiredAccess: {"kind":"UInt32"},
    bInheritHandle: Windows.Win32.SystemServices.BOOL,
    lpName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn OpenSemaphoreW(
    dwDesiredAccess: {"kind":"UInt32"},
    bInheritHandle: Windows.Win32.SystemServices.BOOL,
    lpName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn OpenWaitableTimerW(
    dwDesiredAccess: {"kind":"UInt32"},
    bInheritHandle: Windows.Win32.SystemServices.BOOL,
    lpTimerName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetWaitableTimerEx(
    hTimer: Windows.Win32.SystemServices.HANDLE,
    lpDueTime: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},
    lPeriod: {"kind":"Int32"},
    pfnCompletionRoutine: Windows.Win32.SystemServices.PTIMERAPCROUTINE,
    lpArgToCompletionRoutine: {"kind""Ptr","child":{"kind":"Void"}},
    WakeContext: {"kind""Ptr","child":Windows.Win32.SystemServices.REASON_CONTEXT},
    TolerableDelay: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetWaitableTimer(
    hTimer: Windows.Win32.SystemServices.HANDLE,
    lpDueTime: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},
    lPeriod: {"kind":"Int32"},
    pfnCompletionRoutine: Windows.Win32.SystemServices.PTIMERAPCROUTINE,
    lpArgToCompletionRoutine: {"kind""Ptr","child":{"kind":"Void"}},
    fResume: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CancelWaitableTimer(
    hTimer: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateMutexExA(
    lpMutexAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    lpName: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},
    dwDesiredAccess: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateMutexExW(
    lpMutexAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    lpName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    dwDesiredAccess: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateEventExA(
    lpEventAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    lpName: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},
    dwDesiredAccess: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateEventExW(
    lpEventAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    lpName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    dwDesiredAccess: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateSemaphoreExW(
    lpSemaphoreAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    lInitialCount: {"kind":"Int32"},
    lMaximumCount: {"kind":"Int32"},
    lpName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    dwDesiredAccess: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateWaitableTimerExW(
    lpTimerAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    lpTimerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    dwDesiredAccess: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn EnterSynchronizationBarrier(
    lpBarrier: {"kind""Ptr","child":Windows.Win32.SystemServices.RTL_BARRIER},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn InitializeSynchronizationBarrier(
    lpBarrier: {"kind""Ptr","child":Windows.Win32.SystemServices.RTL_BARRIER},
    lTotalThreads: {"kind":"Int32"},
    lSpinCount: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn DeleteSynchronizationBarrier(
    lpBarrier: {"kind""Ptr","child":Windows.Win32.SystemServices.RTL_BARRIER},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn Sleep(
    dwMilliseconds: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "api-ms-win-core-synch-l1-2-0" fn WaitOnAddress(
    Address: {"kind""Ptr","child":{"kind":"Void"}},
    CompareAddress: {"kind""Ptr","child":{"kind":"Void"}},
    AddressSize: {"kind":"UIntPtr"},
    dwMilliseconds: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-synch-l1-2-0" fn WakeByAddressSingle(
    Address: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-synch-l1-2-0" fn WakeByAddressAll(
    Address: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn WaitForMultipleObjects(
    nCount: {"kind":"UInt32"},
    lpHandles: {"kind""Ptr","child":{"kind":"IntPtr"}},
    bWaitAll: Windows.Win32.SystemServices.BOOL,
    dwMilliseconds: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateSemaphoreW(
    lpSemaphoreAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    lInitialCount: {"kind":"Int32"},
    lMaximumCount: {"kind":"Int32"},
    lpName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateWaitableTimerW(
    lpTimerAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    bManualReset: Windows.Win32.SystemServices.BOOL,
    lpTimerName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn InitializeSListHead(
    ListHead: {"kind""Ptr","child":Windows.Win32.SystemServices.SLIST_HEADER},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn InterlockedPopEntrySList(
    ListHead: {"kind""Ptr","child":Windows.Win32.SystemServices.SLIST_HEADER},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn InterlockedPushEntrySList(
    ListHead: {"kind""Ptr","child":Windows.Win32.SystemServices.SLIST_HEADER},
    ListEntry: {"kind""Ptr","child":Windows.Win32.Kernel.SINGLE_LIST_ENTRY},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn InterlockedPushListSListEx(
    ListHead: {"kind""Ptr","child":Windows.Win32.SystemServices.SLIST_HEADER},
    List: {"kind""Ptr","child":Windows.Win32.Kernel.SINGLE_LIST_ENTRY},
    ListEnd: {"kind""Ptr","child":Windows.Win32.Kernel.SINGLE_LIST_ENTRY},
    Count: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn InterlockedFlushSList(
    ListHead: {"kind""Ptr","child":Windows.Win32.SystemServices.SLIST_HEADER},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn QueryDepthSList(
    ListHead: {"kind""Ptr","child":Windows.Win32.SystemServices.SLIST_HEADER},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn QueueUserWorkItem(
    Function: Windows.Win32.SystemServices.LPTHREAD_START_ROUTINE,
    Context: {"kind""Ptr","child":{"kind":"Void"}},
    Flags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn UnregisterWaitEx(
    WaitHandle: Windows.Win32.SystemServices.HANDLE,
    CompletionEvent: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateTimerQueue(

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateTimerQueueTimer(
    phNewTimer: {"kind""Ptr","child":{"kind":"IntPtr"}},
    TimerQueue: Windows.Win32.SystemServices.HANDLE,
    Callback: Windows.Win32.SystemServices.WAITORTIMERCALLBACK,
    Parameter: {"kind""Ptr","child":{"kind":"Void"}},
    DueTime: {"kind":"UInt32"},
    Period: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn ChangeTimerQueueTimer(
    TimerQueue: Windows.Win32.SystemServices.HANDLE,
    Timer: Windows.Win32.SystemServices.HANDLE,
    DueTime: {"kind":"UInt32"},
    Period: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn DeleteTimerQueueTimer(
    TimerQueue: Windows.Win32.SystemServices.HANDLE,
    Timer: Windows.Win32.SystemServices.HANDLE,
    CompletionEvent: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn DeleteTimerQueueEx(
    TimerQueue: Windows.Win32.SystemServices.HANDLE,
    CompletionEvent: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateThreadpool(
    reserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetThreadpoolThreadMaximum(
    ptpp: Windows.Win32.SystemServices.PTP_POOL,
    cthrdMost: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetThreadpoolThreadMinimum(
    ptpp: Windows.Win32.SystemServices.PTP_POOL,
    cthrdMic: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetThreadpoolStackInformation(
    ptpp: Windows.Win32.SystemServices.PTP_POOL,
    ptpsi: {"kind""Ptr","child":Windows.Win32.SystemServices.TP_POOL_STACK_INFORMATION},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn QueryThreadpoolStackInformation(
    ptpp: Windows.Win32.SystemServices.PTP_POOL,
    ptpsi: {"kind""Ptr","child":Windows.Win32.SystemServices.TP_POOL_STACK_INFORMATION},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn CloseThreadpool(
    ptpp: Windows.Win32.SystemServices.PTP_POOL,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateThreadpoolCleanupGroup(

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn CloseThreadpoolCleanupGroupMembers(
    ptpcg: {"kind":"IntPtr"},
    fCancelPendingCallbacks: Windows.Win32.SystemServices.BOOL,
    pvCleanupContext: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn CloseThreadpoolCleanupGroup(
    ptpcg: {"kind":"IntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetEventWhenCallbackReturns(
    pci: {"kind""Ptr","child":Windows.Win32.SystemServices.TP_CALLBACK_INSTANCE},
    evt: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn ReleaseSemaphoreWhenCallbackReturns(
    pci: {"kind""Ptr","child":Windows.Win32.SystemServices.TP_CALLBACK_INSTANCE},
    sem: Windows.Win32.SystemServices.HANDLE,
    crel: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn ReleaseMutexWhenCallbackReturns(
    pci: {"kind""Ptr","child":Windows.Win32.SystemServices.TP_CALLBACK_INSTANCE},
    mut: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn LeaveCriticalSectionWhenCallbackReturns(
    pci: {"kind""Ptr","child":Windows.Win32.SystemServices.TP_CALLBACK_INSTANCE},
    pcs: {"kind""Ptr","child":Windows.Win32.SystemServices.RTL_CRITICAL_SECTION},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn FreeLibraryWhenCallbackReturns(
    pci: {"kind""Ptr","child":Windows.Win32.SystemServices.TP_CALLBACK_INSTANCE},
    mod: {"kind":"IntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn CallbackMayRunLong(
    pci: {"kind""Ptr","child":Windows.Win32.SystemServices.TP_CALLBACK_INSTANCE},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn DisassociateCurrentThreadFromCallback(
    pci: {"kind""Ptr","child":Windows.Win32.SystemServices.TP_CALLBACK_INSTANCE},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn TrySubmitThreadpoolCallback(
    pfns: Windows.Win32.SystemServices.PTP_SIMPLE_CALLBACK,
    pv: {"kind""Ptr","child":{"kind":"Void"}},
    pcbe: {"kind""Ptr","child":Windows.Win32.SystemServices.TP_CALLBACK_ENVIRON_V3},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateThreadpoolWork(
    pfnwk: Windows.Win32.SystemServices.PTP_WORK_CALLBACK,
    pv: {"kind""Ptr","child":{"kind":"Void"}},
    pcbe: {"kind""Ptr","child":Windows.Win32.SystemServices.TP_CALLBACK_ENVIRON_V3},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SubmitThreadpoolWork(
    pwk: {"kind""Ptr","child":Windows.Win32.SystemServices.TP_WORK},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn WaitForThreadpoolWorkCallbacks(
    pwk: {"kind""Ptr","child":Windows.Win32.SystemServices.TP_WORK},
    fCancelPendingCallbacks: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn CloseThreadpoolWork(
    pwk: {"kind""Ptr","child":Windows.Win32.SystemServices.TP_WORK},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateThreadpoolTimer(
    pfnti: Windows.Win32.SystemServices.PTP_TIMER_CALLBACK,
    pv: {"kind""Ptr","child":{"kind":"Void"}},
    pcbe: {"kind""Ptr","child":Windows.Win32.SystemServices.TP_CALLBACK_ENVIRON_V3},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetThreadpoolTimer(
    pti: {"kind""Ptr","child":Windows.Win32.SystemServices.TP_TIMER},
    pftDueTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    msPeriod: {"kind":"UInt32"},
    msWindowLength: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn IsThreadpoolTimerSet(
    pti: {"kind""Ptr","child":Windows.Win32.SystemServices.TP_TIMER},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn WaitForThreadpoolTimerCallbacks(
    pti: {"kind""Ptr","child":Windows.Win32.SystemServices.TP_TIMER},
    fCancelPendingCallbacks: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn CloseThreadpoolTimer(
    pti: {"kind""Ptr","child":Windows.Win32.SystemServices.TP_TIMER},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateThreadpoolWait(
    pfnwa: Windows.Win32.SystemServices.PTP_WAIT_CALLBACK,
    pv: {"kind""Ptr","child":{"kind":"Void"}},
    pcbe: {"kind""Ptr","child":Windows.Win32.SystemServices.TP_CALLBACK_ENVIRON_V3},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetThreadpoolWait(
    pwa: {"kind""Ptr","child":Windows.Win32.SystemServices.TP_WAIT},
    h: Windows.Win32.SystemServices.HANDLE,
    pftTimeout: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn WaitForThreadpoolWaitCallbacks(
    pwa: {"kind""Ptr","child":Windows.Win32.SystemServices.TP_WAIT},
    fCancelPendingCallbacks: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn CloseThreadpoolWait(
    pwa: {"kind""Ptr","child":Windows.Win32.SystemServices.TP_WAIT},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateThreadpoolIo(
    fl: Windows.Win32.SystemServices.HANDLE,
    pfnio: Windows.Win32.SystemServices.PTP_WIN32_IO_CALLBACK,
    pv: {"kind""Ptr","child":{"kind":"Void"}},
    pcbe: {"kind""Ptr","child":Windows.Win32.SystemServices.TP_CALLBACK_ENVIRON_V3},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn StartThreadpoolIo(
    pio: {"kind""Ptr","child":Windows.Win32.SystemServices.TP_IO},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn CancelThreadpoolIo(
    pio: {"kind""Ptr","child":Windows.Win32.SystemServices.TP_IO},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn WaitForThreadpoolIoCallbacks(
    pio: {"kind""Ptr","child":Windows.Win32.SystemServices.TP_IO},
    fCancelPendingCallbacks: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn CloseThreadpoolIo(
    pio: {"kind""Ptr","child":Windows.Win32.SystemServices.TP_IO},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetThreadpoolTimerEx(
    pti: {"kind""Ptr","child":Windows.Win32.SystemServices.TP_TIMER},
    pftDueTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    msPeriod: {"kind":"UInt32"},
    msWindowLength: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetThreadpoolWaitEx(
    pwa: {"kind""Ptr","child":Windows.Win32.SystemServices.TP_WAIT},
    h: Windows.Win32.SystemServices.HANDLE,
    pftTimeout: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    Reserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn IsProcessInJob(
    ProcessHandle: Windows.Win32.SystemServices.HANDLE,
    JobHandle: Windows.Win32.SystemServices.HANDLE,
    Result: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateJobObjectW(
    lpJobAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    lpName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn FreeMemoryJobObject(
    Buffer: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn OpenJobObjectW(
    dwDesiredAccess: {"kind":"UInt32"},
    bInheritHandle: Windows.Win32.SystemServices.BOOL,
    lpName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn AssignProcessToJobObject(
    hJob: Windows.Win32.SystemServices.HANDLE,
    hProcess: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn TerminateJobObject(
    hJob: Windows.Win32.SystemServices.HANDLE,
    uExitCode: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetInformationJobObject(
    hJob: Windows.Win32.SystemServices.HANDLE,
    JobObjectInformationClass: Windows.Win32.SystemServices.JOBOBJECTINFOCLASS,
    lpJobObjectInformation: {"kind""Ptr","child":{"kind":"Void"}},
    cbJobObjectInformationLength: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetIoRateControlInformationJobObject(
    hJob: Windows.Win32.SystemServices.HANDLE,
    IoRateControlInfo: {"kind""Ptr","child":Windows.Win32.SystemServices.JOBOBJECT_IO_RATE_CONTROL_INFORMATION},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn QueryInformationJobObject(
    hJob: Windows.Win32.SystemServices.HANDLE,
    JobObjectInformationClass: Windows.Win32.SystemServices.JOBOBJECTINFOCLASS,
    lpJobObjectInformation: {"kind""Ptr","child":{"kind":"Void"}},
    cbJobObjectInformationLength: {"kind":"UInt32"},
    lpReturnLength: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn QueryIoRateControlInformationJobObject(
    hJob: Windows.Win32.SystemServices.HANDLE,
    VolumeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    InfoBlocks: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.SystemServices.JOBOBJECT_IO_RATE_CONTROL_INFORMATION}},
    InfoBlockCount: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn CreatePrivateNamespaceW(
    lpPrivateNamespaceAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    lpBoundaryDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    lpAliasPrefix: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn OpenPrivateNamespaceW(
    lpBoundaryDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    lpAliasPrefix: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn ClosePrivateNamespace(
    Handle: Windows.Win32.SystemServices.NamespaceHandle,
    Flags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn CreateBoundaryDescriptorW(
    Name: {"kind""Ptr","child":{"kind":"UInt16"}},
    Flags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn AddSIDToBoundaryDescriptor(
    BoundaryDescriptor: {"kind""Ptr","child":Windows.Win32.SystemServices.HANDLE},
    RequiredSid: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn DeleteBoundaryDescriptor(
    BoundaryDescriptor: Windows.Win32.SystemServices.BoundaryDescriptorHandle,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetNumaHighestNodeNumber(
    HighestNodeNumber: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetNumaNodeProcessorMaskEx(
    Node: {"kind":"UInt16"},
    ProcessorMask: {"kind""Ptr","child":Windows.Win32.SystemServices.GROUP_AFFINITY},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetNumaProximityNodeEx(
    ProximityId: {"kind":"UInt32"},
    NodeNumber: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetProcessGroupAffinity(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    GroupCount: {"kind""Ptr","child":{"kind":"UInt16"}},
    GroupArray: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetThreadGroupAffinity(
    hThread: Windows.Win32.SystemServices.HANDLE,
    GroupAffinity: {"kind""Ptr","child":Windows.Win32.SystemServices.GROUP_AFFINITY},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetThreadGroupAffinity(
    hThread: Windows.Win32.SystemServices.HANDLE,
    GroupAffinity: {"kind""Ptr","child":Windows.Win32.SystemServices.GROUP_AFFINITY},
    PreviousGroupAffinity: {"kind""Ptr","child":Windows.Win32.SystemServices.GROUP_AFFINITY},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreatePipe(
    hReadPipe: {"kind""Ptr","child":{"kind":"IntPtr"}},
    hWritePipe: {"kind""Ptr","child":{"kind":"IntPtr"}},
    lpPipeAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    nSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn ConnectNamedPipe(
    hNamedPipe: Windows.Win32.SystemServices.HANDLE,
    lpOverlapped: {"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn DisconnectNamedPipe(
    hNamedPipe: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetNamedPipeHandleState(
    hNamedPipe: Windows.Win32.SystemServices.HANDLE,
    lpMode: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpMaxCollectionCount: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpCollectDataTimeout: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn PeekNamedPipe(
    hNamedPipe: Windows.Win32.SystemServices.HANDLE,
    lpBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    nBufferSize: {"kind":"UInt32"},
    lpBytesRead: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpTotalBytesAvail: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpBytesLeftThisMessage: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn TransactNamedPipe(
    hNamedPipe: Windows.Win32.SystemServices.HANDLE,
    lpInBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    nInBufferSize: {"kind":"UInt32"},
    lpOutBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    nOutBufferSize: {"kind":"UInt32"},
    lpBytesRead: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpOverlapped: {"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn CreateNamedPipeW(
    lpName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwOpenMode: {"kind":"UInt32"},
    dwPipeMode: {"kind":"UInt32"},
    nMaxInstances: {"kind":"UInt32"},
    nOutBufferSize: {"kind":"UInt32"},
    nInBufferSize: {"kind":"UInt32"},
    nDefaultTimeOut: {"kind":"UInt32"},
    lpSecurityAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn WaitNamedPipeW(
    lpNamedPipeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    nTimeOut: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetNamedPipeClientComputerNameW(
    Pipe: Windows.Win32.SystemServices.HANDLE,
    ClientComputerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ClientComputerNameLength: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetNamedPipeInfo(
    hNamedPipe: Windows.Win32.SystemServices.HANDLE,
    lpFlags: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpOutBufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpInBufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpMaxInstances: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetNamedPipeHandleStateW(
    hNamedPipe: Windows.Win32.SystemServices.HANDLE,
    lpState: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpCurInstances: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpMaxCollectionCount: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpCollectDataTimeout: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpUserName: {"kind""Ptr","child":{"kind":"UInt16"}},
    nMaxUserNameSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn CallNamedPipeW(
    lpNamedPipeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpInBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    nInBufferSize: {"kind":"UInt32"},
    lpOutBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    nOutBufferSize: {"kind":"UInt32"},
    lpBytesRead: {"kind""Ptr","child":{"kind":"UInt32"}},
    nTimeOut: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn HeapCreate(
    flOptions: {"kind":"UInt32"},
    dwInitialSize: {"kind":"UIntPtr"},
    dwMaximumSize: {"kind":"UIntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn HeapDestroy(
    hHeap: Windows.Win32.WindowsProgramming.HeapHandle,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn HeapAlloc(
    hHeap: Windows.Win32.WindowsProgramming.HeapHandle,
    dwFlags: {"kind":"UInt32"},
    dwBytes: {"kind":"UIntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn HeapReAlloc(
    hHeap: Windows.Win32.WindowsProgramming.HeapHandle,
    dwFlags: {"kind":"UInt32"},
    lpMem: {"kind""Ptr","child":{"kind":"Void"}},
    dwBytes: {"kind":"UIntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn HeapFree(
    hHeap: Windows.Win32.SystemServices.HANDLE,
    dwFlags: {"kind":"UInt32"},
    lpMem: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn HeapSize(
    hHeap: Windows.Win32.WindowsProgramming.HeapHandle,
    dwFlags: {"kind":"UInt32"},
    lpMem: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetProcessHeap(

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn HeapCompact(
    hHeap: Windows.Win32.WindowsProgramming.HeapHandle,
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn HeapSetInformation(
    HeapHandle: Windows.Win32.SystemServices.HANDLE,
    HeapInformationClass: Windows.Win32.SystemServices.HEAP_INFORMATION_CLASS,
    HeapInformation: {"kind""Ptr","child":{"kind":"Void"}},
    HeapInformationLength: {"kind":"UIntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn HeapValidate(
    hHeap: Windows.Win32.SystemServices.HANDLE,
    dwFlags: {"kind":"UInt32"},
    lpMem: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn HeapSummary(
    hHeap: Windows.Win32.SystemServices.HANDLE,
    dwFlags: {"kind":"UInt32"},
    lpSummary: {"kind""Ptr","child":Windows.Win32.SystemServices.HEAP_SUMMARY},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetProcessHeaps(
    NumberOfHeaps: {"kind":"UInt32"},
    ProcessHeaps: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn HeapLock(
    hHeap: Windows.Win32.WindowsProgramming.HeapHandle,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn HeapUnlock(
    hHeap: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn HeapWalk(
    hHeap: Windows.Win32.SystemServices.HANDLE,
    lpEntry: {"kind""Ptr","child":Windows.Win32.SystemServices.PROCESS_HEAP_ENTRY},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn HeapQueryInformation(
    HeapHandle: Windows.Win32.SystemServices.HANDLE,
    HeapInformationClass: Windows.Win32.SystemServices.HEAP_INFORMATION_CLASS,
    HeapInformation: {"kind""Ptr","child":{"kind":"Void"}},
    HeapInformationLength: {"kind":"UIntPtr"},
    ReturnLength: {"kind""Ptr","child":{"kind":"UIntPtr"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn VirtualAlloc(
    lpAddress: {"kind""Ptr","child":{"kind":"Void"}},
    dwSize: {"kind":"UIntPtr"},
    flAllocationType: {"kind":"UInt32"},
    flProtect: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn VirtualProtect(
    lpAddress: {"kind""Ptr","child":{"kind":"Void"}},
    dwSize: {"kind":"UIntPtr"},
    flNewProtect: {"kind":"UInt32"},
    lpflOldProtect: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn VirtualFree(
    lpAddress: {"kind""Ptr","child":{"kind":"Void"}},
    dwSize: {"kind":"UIntPtr"},
    dwFreeType: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn VirtualQuery(
    lpAddress: {"kind""Ptr","child":{"kind":"Void"}},
    lpBuffer: {"kind""Ptr","child":Windows.Win32.SystemServices.MEMORY_BASIC_INFORMATION},
    dwLength: {"kind":"UIntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn VirtualAllocEx(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    lpAddress: {"kind""Ptr","child":{"kind":"Void"}},
    dwSize: {"kind":"UIntPtr"},
    flAllocationType: {"kind":"UInt32"},
    flProtect: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn VirtualProtectEx(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    lpAddress: {"kind""Ptr","child":{"kind":"Void"}},
    dwSize: {"kind":"UIntPtr"},
    flNewProtect: {"kind":"UInt32"},
    lpflOldProtect: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn VirtualQueryEx(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    lpAddress: {"kind""Ptr","child":{"kind":"Void"}},
    lpBuffer: {"kind""Ptr","child":Windows.Win32.SystemServices.MEMORY_BASIC_INFORMATION},
    dwLength: {"kind":"UIntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateFileMappingW(
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpFileMappingAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    flProtect: {"kind":"UInt32"},
    dwMaximumSizeHigh: {"kind":"UInt32"},
    dwMaximumSizeLow: {"kind":"UInt32"},
    lpName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn OpenFileMappingW(
    dwDesiredAccess: {"kind":"UInt32"},
    bInheritHandle: Windows.Win32.SystemServices.BOOL,
    lpName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn MapViewOfFile(
    hFileMappingObject: Windows.Win32.SystemServices.HANDLE,
    dwDesiredAccess: {"kind":"UInt32"},
    dwFileOffsetHigh: {"kind":"UInt32"},
    dwFileOffsetLow: {"kind":"UInt32"},
    dwNumberOfBytesToMap: {"kind":"UIntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn MapViewOfFileEx(
    hFileMappingObject: Windows.Win32.SystemServices.HANDLE,
    dwDesiredAccess: {"kind":"UInt32"},
    dwFileOffsetHigh: {"kind":"UInt32"},
    dwFileOffsetLow: {"kind":"UInt32"},
    dwNumberOfBytesToMap: {"kind":"UIntPtr"},
    lpBaseAddress: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn VirtualFreeEx(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    lpAddress: {"kind""Ptr","child":{"kind":"Void"}},
    dwSize: {"kind":"UIntPtr"},
    dwFreeType: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FlushViewOfFile(
    lpBaseAddress: {"kind""Ptr","child":{"kind":"Void"}},
    dwNumberOfBytesToFlush: {"kind":"UIntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn UnmapViewOfFile(
    lpBaseAddress: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetLargePageMinimum(

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetProcessWorkingSetSizeEx(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    lpMinimumWorkingSetSize: {"kind""Ptr","child":{"kind":"UIntPtr"}},
    lpMaximumWorkingSetSize: {"kind""Ptr","child":{"kind":"UIntPtr"}},
    Flags: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetProcessWorkingSetSizeEx(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    dwMinimumWorkingSetSize: {"kind":"UIntPtr"},
    dwMaximumWorkingSetSize: {"kind":"UIntPtr"},
    Flags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn VirtualLock(
    lpAddress: {"kind""Ptr","child":{"kind":"Void"}},
    dwSize: {"kind":"UIntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn VirtualUnlock(
    lpAddress: {"kind""Ptr","child":{"kind":"Void"}},
    dwSize: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetWriteWatch(
    dwFlags: {"kind":"UInt32"},
    lpBaseAddress: {"kind""Ptr","child":{"kind":"Void"}},
    dwRegionSize: {"kind":"UIntPtr"},
    lpAddresses: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    lpdwCount: {"kind""Ptr","child":{"kind":"UIntPtr"}},
    lpdwGranularity: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn ResetWriteWatch(
    lpBaseAddress: {"kind""Ptr","child":{"kind":"Void"}},
    dwRegionSize: {"kind":"UIntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateMemoryResourceNotification(
    NotificationType: Windows.Win32.SystemServices.MEMORY_RESOURCE_NOTIFICATION_TYPE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn QueryMemoryResourceNotification(
    ResourceNotificationHandle: Windows.Win32.SystemServices.HANDLE,
    ResourceState: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetSystemFileCacheSize(
    lpMinimumFileCacheSize: {"kind""Ptr","child":{"kind":"UIntPtr"}},
    lpMaximumFileCacheSize: {"kind""Ptr","child":{"kind":"UIntPtr"}},
    lpFlags: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetSystemFileCacheSize(
    MinimumFileCacheSize: {"kind":"UIntPtr"},
    MaximumFileCacheSize: {"kind":"UIntPtr"},
    Flags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateFileMappingNumaW(
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpFileMappingAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    flProtect: {"kind":"UInt32"},
    dwMaximumSizeHigh: {"kind":"UInt32"},
    dwMaximumSizeLow: {"kind":"UInt32"},
    lpName: {"kind""Ptr","child":{"kind":"UInt16"}},
    nndPreferred: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn PrefetchVirtualMemory(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    NumberOfEntries: {"kind":"UIntPtr"},
    VirtualAddresses: {"kind""Ptr","child":Windows.Win32.SystemServices.WIN32_MEMORY_RANGE_ENTRY},
    Flags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateFileMappingFromApp(
    hFile: Windows.Win32.SystemServices.HANDLE,
    SecurityAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    PageProtection: {"kind":"UInt32"},
    MaximumSize: {"kind":"UInt64"},
    Name: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn MapViewOfFileFromApp(
    hFileMappingObject: Windows.Win32.SystemServices.HANDLE,
    DesiredAccess: {"kind":"UInt32"},
    FileOffset: {"kind":"UInt64"},
    NumberOfBytesToMap: {"kind":"UIntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn UnmapViewOfFileEx(
    BaseAddress: {"kind""Ptr","child":{"kind":"Void"}},
    UnmapFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn AllocateUserPhysicalPages(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    NumberOfPages: {"kind""Ptr","child":{"kind":"UInt32"}},
    PageArray: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FreeUserPhysicalPages(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    NumberOfPages: {"kind""Ptr","child":{"kind":"UInt32"}},
    PageArray: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn MapUserPhysicalPages(
    VirtualAddress: {"kind""Ptr","child":{"kind":"Void"}},
    NumberOfPages: {"kind":"UIntPtr"},
    PageArray: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn AllocateUserPhysicalPagesNuma(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    NumberOfPages: {"kind""Ptr","child":{"kind":"UInt32"}},
    PageArray: {"kind""Ptr","child":{"kind":"UInt32"}},
    nndPreferred: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn VirtualAllocExNuma(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    lpAddress: {"kind""Ptr","child":{"kind":"Void"}},
    dwSize: {"kind":"UIntPtr"},
    flAllocationType: {"kind":"UInt32"},
    flProtect: {"kind":"UInt32"},
    nndPreferred: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetMemoryErrorHandlingCapabilities(
    Capabilities: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn RegisterBadMemoryNotification(
    Callback: Windows.Win32.SystemServices.PBAD_MEMORY_CALLBACK_ROUTINE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn UnregisterBadMemoryNotification(
    RegistrationHandle: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn OfferVirtualMemory(
    VirtualAddress: {"kind""Ptr","child":{"kind":"Void"}},
    Size: {"kind":"UIntPtr"},
    Priority: Windows.Win32.SystemServices.OFFER_PRIORITY,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn ReclaimVirtualMemory(
    VirtualAddress: {"kind""Ptr","child":{"kind":"Void"}},
    Size: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn DiscardVirtualMemory(
    VirtualAddress: {"kind""Ptr","child":{"kind":"Void"}},
    Size: {"kind":"UIntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "api-ms-win-core-memory-l1-1-3" fn SetProcessValidCallTargets(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    VirtualAddress: {"kind""Ptr","child":{"kind":"Void"}},
    RegionSize: {"kind":"UIntPtr"},
    NumberOfOffsets: {"kind":"UInt32"},
    OffsetInformation: {"kind""Ptr","child":Windows.Win32.SystemServices.CFG_CALL_TARGET_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-memory-l1-1-7" fn SetProcessValidCallTargetsForMappedView(
    Process: Windows.Win32.SystemServices.HANDLE,
    VirtualAddress: {"kind""Ptr","child":{"kind":"Void"}},
    RegionSize: {"kind":"UIntPtr"},
    NumberOfOffsets: {"kind":"UInt32"},
    OffsetInformation: {"kind""Ptr","child":Windows.Win32.SystemServices.CFG_CALL_TARGET_INFO},
    Section: Windows.Win32.SystemServices.HANDLE,
    ExpectedFileOffset: {"kind":"UInt64"},

// set_last_errror=True (can and should we use this?)
pub extern "api-ms-win-core-memory-l1-1-3" fn VirtualAllocFromApp(
    BaseAddress: {"kind""Ptr","child":{"kind":"Void"}},
    Size: {"kind":"UIntPtr"},
    AllocationType: {"kind":"UInt32"},
    Protection: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "api-ms-win-core-memory-l1-1-3" fn VirtualProtectFromApp(
    Address: {"kind""Ptr","child":{"kind":"Void"}},
    Size: {"kind":"UIntPtr"},
    NewProtection: {"kind":"UInt32"},
    OldProtection: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "api-ms-win-core-memory-l1-1-3" fn OpenFileMappingFromApp(
    DesiredAccess: {"kind":"UInt32"},
    InheritHandle: Windows.Win32.SystemServices.BOOL,
    Name: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "api-ms-win-core-memory-l1-1-4" fn QueryVirtualMemoryInformation(
    Process: Windows.Win32.SystemServices.HANDLE,
    VirtualAddress: {"kind""Ptr","child":{"kind":"Void"}},
    MemoryInformationClass: Windows.Win32.SystemServices.WIN32_MEMORY_INFORMATION_CLASS,
    MemoryInformation: {"kind""Ptr","child":{"kind":"Void"}},
    MemoryInformationSize: {"kind":"UIntPtr"},
    ReturnSize: {"kind""Ptr","child":{"kind":"UIntPtr"}},

// set_last_errror=True (can and should we use this?)
pub extern "api-ms-win-core-memory-l1-1-5" fn MapViewOfFileNuma2(
    FileMappingHandle: Windows.Win32.SystemServices.HANDLE,
    ProcessHandle: Windows.Win32.SystemServices.HANDLE,
    Offset: {"kind":"UInt64"},
    BaseAddress: {"kind""Ptr","child":{"kind":"Void"}},
    ViewSize: {"kind":"UIntPtr"},
    AllocationType: {"kind":"UInt32"},
    PageProtection: {"kind":"UInt32"},
    PreferredNode: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "api-ms-win-core-memory-l1-1-5" fn UnmapViewOfFile2(
    Process: Windows.Win32.SystemServices.HANDLE,
    BaseAddress: {"kind""Ptr","child":{"kind":"Void"}},
    UnmapFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-memory-l1-1-5" fn VirtualUnlockEx(
    Process: Windows.Win32.SystemServices.HANDLE,
    Address: {"kind""Ptr","child":{"kind":"Void"}},
    Size: {"kind":"UIntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "api-ms-win-core-memory-l1-1-6" fn VirtualAlloc2(
    Process: Windows.Win32.SystemServices.HANDLE,
    BaseAddress: {"kind""Ptr","child":{"kind":"Void"}},
    Size: {"kind":"UIntPtr"},
    AllocationType: {"kind":"UInt32"},
    PageProtection: {"kind":"UInt32"},
    ExtendedParameters: {"kind""Ptr","child":Windows.Win32.SystemServices.MEM_EXTENDED_PARAMETER},
    ParameterCount: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "api-ms-win-core-memory-l1-1-6" fn MapViewOfFile3(
    FileMapping: Windows.Win32.SystemServices.HANDLE,
    Process: Windows.Win32.SystemServices.HANDLE,
    BaseAddress: {"kind""Ptr","child":{"kind":"Void"}},
    Offset: {"kind":"UInt64"},
    ViewSize: {"kind":"UIntPtr"},
    AllocationType: {"kind":"UInt32"},
    PageProtection: {"kind":"UInt32"},
    ExtendedParameters: {"kind""Ptr","child":Windows.Win32.SystemServices.MEM_EXTENDED_PARAMETER},
    ParameterCount: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "api-ms-win-core-memory-l1-1-6" fn VirtualAlloc2FromApp(
    Process: Windows.Win32.SystemServices.HANDLE,
    BaseAddress: {"kind""Ptr","child":{"kind":"Void"}},
    Size: {"kind":"UIntPtr"},
    AllocationType: {"kind":"UInt32"},
    PageProtection: {"kind":"UInt32"},
    ExtendedParameters: {"kind""Ptr","child":Windows.Win32.SystemServices.MEM_EXTENDED_PARAMETER},
    ParameterCount: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "api-ms-win-core-memory-l1-1-6" fn MapViewOfFile3FromApp(
    FileMapping: Windows.Win32.SystemServices.HANDLE,
    Process: Windows.Win32.SystemServices.HANDLE,
    BaseAddress: {"kind""Ptr","child":{"kind":"Void"}},
    Offset: {"kind":"UInt64"},
    ViewSize: {"kind":"UIntPtr"},
    AllocationType: {"kind":"UInt32"},
    PageProtection: {"kind":"UInt32"},
    ExtendedParameters: {"kind""Ptr","child":Windows.Win32.SystemServices.MEM_EXTENDED_PARAMETER},
    ParameterCount: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "api-ms-win-core-memory-l1-1-7" fn CreateFileMapping2(
    File: Windows.Win32.SystemServices.HANDLE,
    SecurityAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    DesiredAccess: {"kind":"UInt32"},
    PageProtection: {"kind":"UInt32"},
    AllocationAttributes: {"kind":"UInt32"},
    MaximumSize: {"kind":"UInt64"},
    Name: {"kind""Ptr","child":{"kind":"UInt16"}},
    ExtendedParameters: {"kind""Ptr","child":Windows.Win32.SystemServices.MEM_EXTENDED_PARAMETER},
    ParameterCount: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn IsEnclaveTypeSupported(
    flEnclaveType: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateEnclave(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    lpAddress: {"kind""Ptr","child":{"kind":"Void"}},
    dwSize: {"kind":"UIntPtr"},
    dwInitialCommitment: {"kind":"UIntPtr"},
    flEnclaveType: {"kind":"UInt32"},
    lpEnclaveInformation: {"kind""Ptr","child":{"kind":"Void"}},
    dwInfoLength: {"kind":"UInt32"},
    lpEnclaveError: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn LoadEnclaveData(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    lpAddress: {"kind""Ptr","child":{"kind":"Void"}},
    lpBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    nSize: {"kind":"UIntPtr"},
    flProtect: {"kind":"UInt32"},
    lpPageInformation: {"kind""Ptr","child":{"kind":"Void"}},
    dwInfoLength: {"kind":"UInt32"},
    lpNumberOfBytesWritten: {"kind""Ptr","child":{"kind":"UIntPtr"}},
    lpEnclaveError: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn InitializeEnclave(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    lpAddress: {"kind""Ptr","child":{"kind":"Void"}},
    lpEnclaveInformation: {"kind""Ptr","child":{"kind":"Void"}},
    dwInfoLength: {"kind":"UInt32"},
    lpEnclaveError: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-enclave-l1-1-1" fn LoadEnclaveImageA(
    lpEnclaveAddress: {"kind""Ptr","child":{"kind":"Void"}},
    lpImageName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "api-ms-win-core-enclave-l1-1-1" fn LoadEnclaveImageW(
    lpEnclaveAddress: {"kind""Ptr","child":{"kind":"Void"}},
    lpImageName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "api-ms-win-core-enclave-l1-1-1" fn CallEnclave(
    lpRoutine: Windows.Win32.SystemServices.LPENCLAVE_ROUTINE,
    lpParameter: {"kind""Ptr","child":{"kind":"Void"}},
    fWaitForThread: Windows.Win32.SystemServices.BOOL,
    lpReturnValue: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=True (can and should we use this?)
pub extern "api-ms-win-core-enclave-l1-1-1" fn TerminateEnclave(
    lpAddress: {"kind""Ptr","child":{"kind":"Void"}},
    fWait: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "api-ms-win-core-enclave-l1-1-1" fn DeleteEnclave(
    lpAddress: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn DisableThreadLibraryCalls(
    hLibModule: {"kind":"IntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn FindResourceExW(
    hModule: {"kind":"IntPtr"},
    lpType: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpName: {"kind""Ptr","child":{"kind":"UInt16"}},
    wLanguage: {"kind":"UInt16"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FreeLibrary(
    hLibModule: {"kind":"IntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn FreeLibraryAndExitThread(
    hLibModule: {"kind":"IntPtr"},
    dwExitCode: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetModuleFileNameA(
    hModule: {"kind":"IntPtr"},
    lpFilename: {"kind""Ptr","child":{"kind":"SByte"}},
    nSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetModuleFileNameW(
    hModule: {"kind":"IntPtr"},
    lpFilename: {"kind""Ptr","child":{"kind":"UInt16"}},
    nSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetModuleHandleA(
    lpModuleName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetModuleHandleW(
    lpModuleName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetModuleHandleExA(
    dwFlags: {"kind":"UInt32"},
    lpModuleName: {"kind""Ptr","child":{"kind":"SByte"}},
    phModule: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetModuleHandleExW(
    dwFlags: {"kind":"UInt32"},
    lpModuleName: {"kind""Ptr","child":{"kind":"UInt16"}},
    phModule: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetProcAddress(
    hModule: {"kind":"IntPtr"},
    lpProcName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn LoadLibraryExA(
    lpLibFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    hFile: Windows.Win32.SystemServices.HANDLE,
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn LoadLibraryExW(
    lpLibFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    hFile: Windows.Win32.SystemServices.HANDLE,
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn AddDllDirectory(
    NewDirectory: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn RemoveDllDirectory(
    Cookie: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetDefaultDllDirectories(
    DirectoryFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn FindResourceW(
    hModule: {"kind":"IntPtr"},
    lpName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpType: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn LoadLibraryA(
    lpLibFileName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn LoadLibraryW(
    lpLibFileName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn EnumResourceNamesW(
    hModule: {"kind":"IntPtr"},
    lpType: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpEnumFunc: Windows.Win32.MenusAndResources.ENUMRESNAMEPROCW,
    lParam: {"kind":"IntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn AllocConsole(

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn FreeConsole(

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn AttachConsole(
    dwProcessId: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetConsoleCP(

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetConsoleOutputCP(

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetConsoleMode(
    hConsoleHandle: Windows.Win32.SystemServices.HANDLE,
    lpMode: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetConsoleMode(
    hConsoleHandle: Windows.Win32.SystemServices.HANDLE,
    dwMode: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetNumberOfConsoleInputEvents(
    hConsoleInput: Windows.Win32.SystemServices.HANDLE,
    lpNumberOfEvents: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn ReadConsoleInputA(
    hConsoleInput: Windows.Win32.SystemServices.HANDLE,
    lpBuffer: {"kind""Ptr","child":Windows.Win32.SystemServices.INPUT_RECORD},
    nLength: {"kind":"UInt32"},
    lpNumberOfEventsRead: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn ReadConsoleInputW(
    hConsoleInput: Windows.Win32.SystemServices.HANDLE,
    lpBuffer: {"kind""Ptr","child":Windows.Win32.SystemServices.INPUT_RECORD},
    nLength: {"kind":"UInt32"},
    lpNumberOfEventsRead: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn PeekConsoleInputA(
    hConsoleInput: Windows.Win32.SystemServices.HANDLE,
    lpBuffer: {"kind""Ptr","child":Windows.Win32.SystemServices.INPUT_RECORD},
    nLength: {"kind":"UInt32"},
    lpNumberOfEventsRead: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn PeekConsoleInputW(
    hConsoleInput: Windows.Win32.SystemServices.HANDLE,
    lpBuffer: {"kind""Ptr","child":Windows.Win32.SystemServices.INPUT_RECORD},
    nLength: {"kind":"UInt32"},
    lpNumberOfEventsRead: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn ReadConsoleA(
    hConsoleInput: Windows.Win32.SystemServices.HANDLE,
    lpBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    nNumberOfCharsToRead: {"kind":"UInt32"},
    lpNumberOfCharsRead: {"kind""Ptr","child":{"kind":"UInt32"}},
    pInputControl: {"kind""Ptr","child":Windows.Win32.SystemServices.CONSOLE_READCONSOLE_CONTROL},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn ReadConsoleW(
    hConsoleInput: Windows.Win32.SystemServices.HANDLE,
    lpBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    nNumberOfCharsToRead: {"kind":"UInt32"},
    lpNumberOfCharsRead: {"kind""Ptr","child":{"kind":"UInt32"}},
    pInputControl: {"kind""Ptr","child":Windows.Win32.SystemServices.CONSOLE_READCONSOLE_CONTROL},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn WriteConsoleA(
    hConsoleOutput: Windows.Win32.SystemServices.HANDLE,
    lpBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    nNumberOfCharsToWrite: {"kind":"UInt32"},
    lpNumberOfCharsWritten: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn WriteConsoleW(
    hConsoleOutput: Windows.Win32.SystemServices.HANDLE,
    lpBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    nNumberOfCharsToWrite: {"kind":"UInt32"},
    lpNumberOfCharsWritten: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetConsoleCtrlHandler(
    HandlerRoutine: Windows.Win32.SystemServices.PHANDLER_ROUTINE,
    Add: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn CreatePseudoConsole(
    size: Windows.Win32.SystemServices.COORD,
    hInput: Windows.Win32.SystemServices.HANDLE,
    hOutput: Windows.Win32.SystemServices.HANDLE,
    dwFlags: {"kind":"UInt32"},
    phPC: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn ResizePseudoConsole(
    hPC: {"kind""Ptr","child":{"kind":"Void"}},
    size: Windows.Win32.SystemServices.COORD,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn ClosePseudoConsole(
    hPC: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn FillConsoleOutputCharacterA(
    hConsoleOutput: Windows.Win32.SystemServices.HANDLE,
    cCharacter: {"kind":"SByte"},
    nLength: {"kind":"UInt32"},
    dwWriteCoord: Windows.Win32.SystemServices.COORD,
    lpNumberOfCharsWritten: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn FillConsoleOutputCharacterW(
    hConsoleOutput: Windows.Win32.SystemServices.HANDLE,
    cCharacter: {"kind":"UInt16"},
    nLength: {"kind":"UInt32"},
    dwWriteCoord: Windows.Win32.SystemServices.COORD,
    lpNumberOfCharsWritten: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn FillConsoleOutputAttribute(
    hConsoleOutput: Windows.Win32.SystemServices.HANDLE,
    wAttribute: {"kind":"UInt16"},
    nLength: {"kind":"UInt32"},
    dwWriteCoord: Windows.Win32.SystemServices.COORD,
    lpNumberOfAttrsWritten: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GenerateConsoleCtrlEvent(
    dwCtrlEvent: {"kind":"UInt32"},
    dwProcessGroupId: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn CreateConsoleScreenBuffer(
    dwDesiredAccess: {"kind":"UInt32"},
    dwShareMode: {"kind":"UInt32"},
    lpSecurityAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    dwFlags: {"kind":"UInt32"},
    lpScreenBufferData: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetConsoleActiveScreenBuffer(
    hConsoleOutput: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn FlushConsoleInputBuffer(
    hConsoleInput: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetConsoleCP(
    wCodePageID: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetConsoleOutputCP(
    wCodePageID: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetConsoleCursorInfo(
    hConsoleOutput: Windows.Win32.SystemServices.HANDLE,
    lpConsoleCursorInfo: {"kind""Ptr","child":Windows.Win32.SystemServices.CONSOLE_CURSOR_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetConsoleCursorInfo(
    hConsoleOutput: Windows.Win32.SystemServices.HANDLE,
    lpConsoleCursorInfo: {"kind""Ptr","child":Windows.Win32.SystemServices.CONSOLE_CURSOR_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetConsoleScreenBufferInfo(
    hConsoleOutput: Windows.Win32.SystemServices.HANDLE,
    lpConsoleScreenBufferInfo: {"kind""Ptr","child":Windows.Win32.SystemServices.CONSOLE_SCREEN_BUFFER_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetConsoleScreenBufferInfoEx(
    hConsoleOutput: Windows.Win32.SystemServices.HANDLE,
    lpConsoleScreenBufferInfoEx: {"kind""Ptr","child":Windows.Win32.SystemServices.CONSOLE_SCREEN_BUFFER_INFOEX},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetConsoleScreenBufferInfoEx(
    hConsoleOutput: Windows.Win32.SystemServices.HANDLE,
    lpConsoleScreenBufferInfoEx: {"kind""Ptr","child":Windows.Win32.SystemServices.CONSOLE_SCREEN_BUFFER_INFOEX},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetConsoleScreenBufferSize(
    hConsoleOutput: Windows.Win32.SystemServices.HANDLE,
    dwSize: Windows.Win32.SystemServices.COORD,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetConsoleCursorPosition(
    hConsoleOutput: Windows.Win32.SystemServices.HANDLE,
    dwCursorPosition: Windows.Win32.SystemServices.COORD,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetLargestConsoleWindowSize(
    hConsoleOutput: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetConsoleTextAttribute(
    hConsoleOutput: Windows.Win32.SystemServices.HANDLE,
    wAttributes: {"kind":"UInt16"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetConsoleWindowInfo(
    hConsoleOutput: Windows.Win32.SystemServices.HANDLE,
    bAbsolute: Windows.Win32.SystemServices.BOOL,
    lpConsoleWindow: {"kind""Ptr","child":Windows.Win32.SystemServices.SMALL_RECT},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn WriteConsoleOutputCharacterA(
    hConsoleOutput: Windows.Win32.SystemServices.HANDLE,
    lpCharacter: {"kind""Ptr","child":{"kind":"SByte"}},
    nLength: {"kind":"UInt32"},
    dwWriteCoord: Windows.Win32.SystemServices.COORD,
    lpNumberOfCharsWritten: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn WriteConsoleOutputCharacterW(
    hConsoleOutput: Windows.Win32.SystemServices.HANDLE,
    lpCharacter: {"kind""Ptr","child":{"kind":"UInt16"}},
    nLength: {"kind":"UInt32"},
    dwWriteCoord: Windows.Win32.SystemServices.COORD,
    lpNumberOfCharsWritten: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn WriteConsoleOutputAttribute(
    hConsoleOutput: Windows.Win32.SystemServices.HANDLE,
    lpAttribute: {"kind""Ptr","child":{"kind":"UInt16"}},
    nLength: {"kind":"UInt32"},
    dwWriteCoord: Windows.Win32.SystemServices.COORD,
    lpNumberOfAttrsWritten: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn ReadConsoleOutputCharacterA(
    hConsoleOutput: Windows.Win32.SystemServices.HANDLE,
    lpCharacter: {"kind""Ptr","child":{"kind":"SByte"}},
    nLength: {"kind":"UInt32"},
    dwReadCoord: Windows.Win32.SystemServices.COORD,
    lpNumberOfCharsRead: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn ReadConsoleOutputCharacterW(
    hConsoleOutput: Windows.Win32.SystemServices.HANDLE,
    lpCharacter: {"kind""Ptr","child":{"kind":"UInt16"}},
    nLength: {"kind":"UInt32"},
    dwReadCoord: Windows.Win32.SystemServices.COORD,
    lpNumberOfCharsRead: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn ReadConsoleOutputAttribute(
    hConsoleOutput: Windows.Win32.SystemServices.HANDLE,
    lpAttribute: {"kind""Ptr","child":{"kind":"UInt16"}},
    nLength: {"kind":"UInt32"},
    dwReadCoord: Windows.Win32.SystemServices.COORD,
    lpNumberOfAttrsRead: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn WriteConsoleInputA(
    hConsoleInput: Windows.Win32.SystemServices.HANDLE,
    lpBuffer: {"kind""Ptr","child":Windows.Win32.SystemServices.INPUT_RECORD},
    nLength: {"kind":"UInt32"},
    lpNumberOfEventsWritten: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn WriteConsoleInputW(
    hConsoleInput: Windows.Win32.SystemServices.HANDLE,
    lpBuffer: {"kind""Ptr","child":Windows.Win32.SystemServices.INPUT_RECORD},
    nLength: {"kind":"UInt32"},
    lpNumberOfEventsWritten: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn ScrollConsoleScreenBufferA(
    hConsoleOutput: Windows.Win32.SystemServices.HANDLE,
    lpScrollRectangle: {"kind""Ptr","child":Windows.Win32.SystemServices.SMALL_RECT},
    lpClipRectangle: {"kind""Ptr","child":Windows.Win32.SystemServices.SMALL_RECT},
    dwDestinationOrigin: Windows.Win32.SystemServices.COORD,
    lpFill: {"kind""Ptr","child":Windows.Win32.SystemServices.CHAR_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn ScrollConsoleScreenBufferW(
    hConsoleOutput: Windows.Win32.SystemServices.HANDLE,
    lpScrollRectangle: {"kind""Ptr","child":Windows.Win32.SystemServices.SMALL_RECT},
    lpClipRectangle: {"kind""Ptr","child":Windows.Win32.SystemServices.SMALL_RECT},
    dwDestinationOrigin: Windows.Win32.SystemServices.COORD,
    lpFill: {"kind""Ptr","child":Windows.Win32.SystemServices.CHAR_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn WriteConsoleOutputA(
    hConsoleOutput: Windows.Win32.SystemServices.HANDLE,
    lpBuffer: {"kind""Ptr","child":Windows.Win32.SystemServices.CHAR_INFO},
    dwBufferSize: Windows.Win32.SystemServices.COORD,
    dwBufferCoord: Windows.Win32.SystemServices.COORD,
    lpWriteRegion: {"kind""Ptr","child":Windows.Win32.SystemServices.SMALL_RECT},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn WriteConsoleOutputW(
    hConsoleOutput: Windows.Win32.SystemServices.HANDLE,
    lpBuffer: {"kind""Ptr","child":Windows.Win32.SystemServices.CHAR_INFO},
    dwBufferSize: Windows.Win32.SystemServices.COORD,
    dwBufferCoord: Windows.Win32.SystemServices.COORD,
    lpWriteRegion: {"kind""Ptr","child":Windows.Win32.SystemServices.SMALL_RECT},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn ReadConsoleOutputA(
    hConsoleOutput: Windows.Win32.SystemServices.HANDLE,
    lpBuffer: {"kind""Ptr","child":Windows.Win32.SystemServices.CHAR_INFO},
    dwBufferSize: Windows.Win32.SystemServices.COORD,
    dwBufferCoord: Windows.Win32.SystemServices.COORD,
    lpReadRegion: {"kind""Ptr","child":Windows.Win32.SystemServices.SMALL_RECT},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn ReadConsoleOutputW(
    hConsoleOutput: Windows.Win32.SystemServices.HANDLE,
    lpBuffer: {"kind""Ptr","child":Windows.Win32.SystemServices.CHAR_INFO},
    dwBufferSize: Windows.Win32.SystemServices.COORD,
    dwBufferCoord: Windows.Win32.SystemServices.COORD,
    lpReadRegion: {"kind""Ptr","child":Windows.Win32.SystemServices.SMALL_RECT},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetConsoleTitleA(
    lpConsoleTitle: {"kind""Ptr","child":{"kind":"SByte"}},
    nSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetConsoleTitleW(
    lpConsoleTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    nSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetConsoleOriginalTitleA(
    lpConsoleTitle: {"kind""Ptr","child":{"kind":"SByte"}},
    nSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetConsoleOriginalTitleW(
    lpConsoleTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    nSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetConsoleTitleA(
    lpConsoleTitle: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetConsoleTitleW(
    lpConsoleTitle: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetNumberOfConsoleMouseButtons(
    lpNumberOfMouseButtons: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetConsoleFontSize(
    hConsoleOutput: Windows.Win32.SystemServices.HANDLE,
    nFont: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetCurrentConsoleFont(
    hConsoleOutput: Windows.Win32.SystemServices.HANDLE,
    bMaximumWindow: Windows.Win32.SystemServices.BOOL,
    lpConsoleCurrentFont: {"kind""Ptr","child":Windows.Win32.SystemServices.CONSOLE_FONT_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetCurrentConsoleFontEx(
    hConsoleOutput: Windows.Win32.SystemServices.HANDLE,
    bMaximumWindow: Windows.Win32.SystemServices.BOOL,
    lpConsoleCurrentFontEx: {"kind""Ptr","child":Windows.Win32.SystemServices.CONSOLE_FONT_INFOEX},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetCurrentConsoleFontEx(
    hConsoleOutput: Windows.Win32.SystemServices.HANDLE,
    bMaximumWindow: Windows.Win32.SystemServices.BOOL,
    lpConsoleCurrentFontEx: {"kind""Ptr","child":Windows.Win32.SystemServices.CONSOLE_FONT_INFOEX},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetConsoleSelectionInfo(
    lpConsoleSelectionInfo: {"kind""Ptr","child":Windows.Win32.SystemServices.CONSOLE_SELECTION_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetConsoleHistoryInfo(
    lpConsoleHistoryInfo: {"kind""Ptr","child":Windows.Win32.SystemServices.CONSOLE_HISTORY_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetConsoleHistoryInfo(
    lpConsoleHistoryInfo: {"kind""Ptr","child":Windows.Win32.SystemServices.CONSOLE_HISTORY_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetConsoleDisplayMode(
    lpModeFlags: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetConsoleDisplayMode(
    hConsoleOutput: Windows.Win32.SystemServices.HANDLE,
    dwFlags: {"kind":"UInt32"},
    lpNewScreenBufferDimensions: {"kind""Ptr","child":Windows.Win32.SystemServices.COORD},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetConsoleWindow(

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn AddConsoleAliasA(
    Source: {"kind""Ptr","child":{"kind":"SByte"}},
    Target: {"kind""Ptr","child":{"kind":"SByte"}},
    ExeName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn AddConsoleAliasW(
    Source: {"kind""Ptr","child":{"kind":"UInt16"}},
    Target: {"kind""Ptr","child":{"kind":"UInt16"}},
    ExeName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetConsoleAliasA(
    Source: {"kind""Ptr","child":{"kind":"SByte"}},
    TargetBuffer: {"kind""Ptr","child":{"kind":"SByte"}},
    TargetBufferLength: {"kind":"UInt32"},
    ExeName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetConsoleAliasW(
    Source: {"kind""Ptr","child":{"kind":"UInt16"}},
    TargetBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    TargetBufferLength: {"kind":"UInt32"},
    ExeName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetConsoleAliasesLengthA(
    ExeName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetConsoleAliasesLengthW(
    ExeName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetConsoleAliasExesLengthA(

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetConsoleAliasExesLengthW(

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetConsoleAliasesA(
    AliasBuffer: {"kind""Ptr","child":{"kind":"SByte"}},
    AliasBufferLength: {"kind":"UInt32"},
    ExeName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetConsoleAliasesW(
    AliasBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    AliasBufferLength: {"kind":"UInt32"},
    ExeName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetConsoleAliasExesA(
    ExeNameBuffer: {"kind""Ptr","child":{"kind":"SByte"}},
    ExeNameBufferLength: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetConsoleAliasExesW(
    ExeNameBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    ExeNameBufferLength: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn ExpungeConsoleCommandHistoryA(
    ExeName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn ExpungeConsoleCommandHistoryW(
    ExeName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetConsoleNumberOfCommandsA(
    Number: {"kind":"UInt32"},
    ExeName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetConsoleNumberOfCommandsW(
    Number: {"kind":"UInt32"},
    ExeName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetConsoleCommandHistoryLengthA(
    ExeName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetConsoleCommandHistoryLengthW(
    ExeName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetConsoleCommandHistoryA(
    Commands: {"kind""Ptr","child":{"kind":"SByte"}},
    CommandBufferLength: {"kind":"UInt32"},
    ExeName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetConsoleCommandHistoryW(
    Commands: {"kind""Ptr","child":{"kind":"UInt16"}},
    CommandBufferLength: {"kind":"UInt32"},
    ExeName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetConsoleProcessList(
    lpdwProcessList: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwProcessCount: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WINMM" fn timeSetEvent(
    uDelay: {"kind":"UInt32"},
    uResolution: {"kind":"UInt32"},
    fptc: Windows.Win32.SystemServices.LPTIMECALLBACK,
    dwUser: {"kind":"UIntPtr"},
    fuEvent: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WINMM" fn timeKillEvent(
    uTimerID: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn I_RpcNsGetBuffer(
    Message: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_MESSAGE},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn I_RpcNsSendReceive(
    Message: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_MESSAGE},
    Handle: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn I_RpcNsRaiseException(
    Message: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_MESSAGE},
    Status: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn I_RpcReBindBuffer(
    Message: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_MESSAGE},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn EnumPrintersA(
    Flags: {"kind":"UInt32"},
    Name: {"kind""Ptr","child":{"kind":"SByte"}},
    Level: {"kind":"UInt32"},
    pPrinterEnum: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBuf: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},
    pcReturned: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn EnumPrintersW(
    Flags: {"kind":"UInt32"},
    Name: {"kind""Ptr","child":{"kind":"UInt16"}},
    Level: {"kind":"UInt32"},
    pPrinterEnum: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBuf: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},
    pcReturned: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn GetSpoolFileHandle(
    hPrinter: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn CommitSpoolData(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    hSpoolFile: Windows.Win32.SystemServices.HANDLE,
    cbCommit: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn CloseSpoolFileHandle(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    hSpoolFile: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn OpenPrinterA(
    pPrinterName: {"kind""Ptr","child":{"kind":"SByte"}},
    phPrinter: {"kind""Ptr","child":{"kind":"IntPtr"}},
    pDefault: {"kind""Ptr","child":Windows.Win32.SystemServices.PRINTER_DEFAULTSA},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn OpenPrinterW(
    pPrinterName: {"kind""Ptr","child":{"kind":"UInt16"}},
    phPrinter: {"kind""Ptr","child":{"kind":"IntPtr"}},
    pDefault: {"kind""Ptr","child":Windows.Win32.SystemServices.PRINTER_DEFAULTSW},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn ResetPrinterA(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pDefault: {"kind""Ptr","child":Windows.Win32.SystemServices.PRINTER_DEFAULTSA},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn ResetPrinterW(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pDefault: {"kind""Ptr","child":Windows.Win32.SystemServices.PRINTER_DEFAULTSW},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn SetJobA(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    JobId: {"kind":"UInt32"},
    Level: {"kind":"UInt32"},
    pJob: {"kind""Ptr","child":{"kind":"Byte"}},
    Command: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn SetJobW(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    JobId: {"kind":"UInt32"},
    Level: {"kind":"UInt32"},
    pJob: {"kind""Ptr","child":{"kind":"Byte"}},
    Command: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn GetJobA(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    JobId: {"kind":"UInt32"},
    Level: {"kind":"UInt32"},
    pJob: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBuf: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn GetJobW(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    JobId: {"kind":"UInt32"},
    Level: {"kind":"UInt32"},
    pJob: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBuf: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn EnumJobsA(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    FirstJob: {"kind":"UInt32"},
    NoJobs: {"kind":"UInt32"},
    Level: {"kind":"UInt32"},
    pJob: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBuf: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},
    pcReturned: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn EnumJobsW(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    FirstJob: {"kind":"UInt32"},
    NoJobs: {"kind":"UInt32"},
    Level: {"kind":"UInt32"},
    pJob: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBuf: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},
    pcReturned: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn AddPrinterA(
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
    Level: {"kind":"UInt32"},
    pPrinter: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn AddPrinterW(
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Level: {"kind":"UInt32"},
    pPrinter: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn DeletePrinter(
    hPrinter: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn SetPrinterA(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    Level: {"kind":"UInt32"},
    pPrinter: {"kind""Ptr","child":{"kind":"Byte"}},
    Command: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn SetPrinterW(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    Level: {"kind":"UInt32"},
    pPrinter: {"kind""Ptr","child":{"kind":"Byte"}},
    Command: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn GetPrinterA(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    Level: {"kind":"UInt32"},
    pPrinter: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBuf: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn GetPrinterW(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    Level: {"kind":"UInt32"},
    pPrinter: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBuf: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn AddPrinterDriverA(
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
    Level: {"kind":"UInt32"},
    pDriverInfo: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn AddPrinterDriverW(
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Level: {"kind":"UInt32"},
    pDriverInfo: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn AddPrinterDriverExA(
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
    Level: {"kind":"UInt32"},
    lpbDriverInfo: {"kind""Ptr","child":{"kind":"Byte"}},
    dwFileCopyFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn AddPrinterDriverExW(
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Level: {"kind":"UInt32"},
    lpbDriverInfo: {"kind""Ptr","child":{"kind":"Byte"}},
    dwFileCopyFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn EnumPrinterDriversA(
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"SByte"}},
    Level: {"kind":"UInt32"},
    pDriverInfo: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBuf: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},
    pcReturned: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn EnumPrinterDriversW(
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"UInt16"}},
    Level: {"kind":"UInt32"},
    pDriverInfo: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBuf: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},
    pcReturned: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn GetPrinterDriverA(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pEnvironment: {"kind""Ptr","child":{"kind":"SByte"}},
    Level: {"kind":"UInt32"},
    pDriverInfo: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBuf: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn GetPrinterDriverW(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pEnvironment: {"kind""Ptr","child":{"kind":"UInt16"}},
    Level: {"kind":"UInt32"},
    pDriverInfo: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBuf: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn GetPrinterDriverDirectoryA(
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"SByte"}},
    Level: {"kind":"UInt32"},
    pDriverDirectory: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBuf: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn GetPrinterDriverDirectoryW(
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"UInt16"}},
    Level: {"kind":"UInt32"},
    pDriverDirectory: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBuf: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn DeletePrinterDriverA(
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"SByte"}},
    pDriverName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn DeletePrinterDriverW(
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDriverName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn DeletePrinterDriverExA(
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"SByte"}},
    pDriverName: {"kind""Ptr","child":{"kind":"SByte"}},
    dwDeleteFlag: {"kind":"UInt32"},
    dwVersionFlag: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn DeletePrinterDriverExW(
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDriverName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwDeleteFlag: {"kind":"UInt32"},
    dwVersionFlag: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn AddPrintProcessorA(
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"SByte"}},
    pPathName: {"kind""Ptr","child":{"kind":"SByte"}},
    pPrintProcessorName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn AddPrintProcessorW(
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"UInt16"}},
    pPathName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pPrintProcessorName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn EnumPrintProcessorsA(
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"SByte"}},
    Level: {"kind":"UInt32"},
    pPrintProcessorInfo: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBuf: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},
    pcReturned: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn EnumPrintProcessorsW(
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"UInt16"}},
    Level: {"kind":"UInt32"},
    pPrintProcessorInfo: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBuf: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},
    pcReturned: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn GetPrintProcessorDirectoryA(
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"SByte"}},
    Level: {"kind":"UInt32"},
    pPrintProcessorInfo: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBuf: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn GetPrintProcessorDirectoryW(
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"UInt16"}},
    Level: {"kind":"UInt32"},
    pPrintProcessorInfo: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBuf: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn EnumPrintProcessorDatatypesA(
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
    pPrintProcessorName: {"kind""Ptr","child":{"kind":"SByte"}},
    Level: {"kind":"UInt32"},
    pDatatypes: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBuf: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},
    pcReturned: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn EnumPrintProcessorDatatypesW(
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pPrintProcessorName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Level: {"kind":"UInt32"},
    pDatatypes: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBuf: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},
    pcReturned: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn DeletePrintProcessorA(
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"SByte"}},
    pPrintProcessorName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn DeletePrintProcessorW(
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"UInt16"}},
    pPrintProcessorName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn StartDocPrinterA(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    Level: {"kind":"UInt32"},
    pDocInfo: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn StartDocPrinterW(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    Level: {"kind":"UInt32"},
    pDocInfo: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn StartPagePrinter(
    hPrinter: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn WritePrinter(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pBuf: {"kind""Ptr","child":{"kind":"Void"}},
    cbBuf: {"kind":"UInt32"},
    pcWritten: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn FlushPrinter(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pBuf: {"kind""Ptr","child":{"kind":"Void"}},
    cbBuf: {"kind":"UInt32"},
    pcWritten: {"kind""Ptr","child":{"kind":"UInt32"}},
    cSleep: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn EndPagePrinter(
    hPrinter: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn AbortPrinter(
    hPrinter: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn ReadPrinter(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pBuf: {"kind""Ptr","child":{"kind":"Void"}},
    cbBuf: {"kind":"UInt32"},
    pNoBytesRead: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn EndDocPrinter(
    hPrinter: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn AddJobA(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    Level: {"kind":"UInt32"},
    pData: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBuf: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn AddJobW(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    Level: {"kind":"UInt32"},
    pData: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBuf: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn ScheduleJob(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    JobId: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn PrinterProperties(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    hPrinter: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn DocumentPropertiesA(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pDeviceName: {"kind""Ptr","child":{"kind":"SByte"}},
    pDevModeOutput: {"kind""Ptr","child":Windows.Win32.Xps.DEVMODEA},
    pDevModeInput: {"kind""Ptr","child":Windows.Win32.Xps.DEVMODEA},
    fMode: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn DocumentPropertiesW(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pDeviceName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDevModeOutput: {"kind""Ptr","child":Windows.Win32.DisplayDevices.DEVMODEW},
    pDevModeInput: {"kind""Ptr","child":Windows.Win32.DisplayDevices.DEVMODEW},
    fMode: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn AdvancedDocumentPropertiesA(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pDeviceName: {"kind""Ptr","child":{"kind":"SByte"}},
    pDevModeOutput: {"kind""Ptr","child":Windows.Win32.Xps.DEVMODEA},
    pDevModeInput: {"kind""Ptr","child":Windows.Win32.Xps.DEVMODEA},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn AdvancedDocumentPropertiesW(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pDeviceName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pDevModeOutput: {"kind""Ptr","child":Windows.Win32.DisplayDevices.DEVMODEW},
    pDevModeInput: {"kind""Ptr","child":Windows.Win32.DisplayDevices.DEVMODEW},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn GetPrinterDataA(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pValueName: {"kind""Ptr","child":{"kind":"SByte"}},
    pType: {"kind""Ptr","child":{"kind":"UInt32"}},
    pData: {"kind""Ptr","child":{"kind":"Byte"}},
    nSize: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn GetPrinterDataW(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pValueName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pType: {"kind""Ptr","child":{"kind":"UInt32"}},
    pData: {"kind""Ptr","child":{"kind":"Byte"}},
    nSize: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn GetPrinterDataExA(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pKeyName: {"kind""Ptr","child":{"kind":"SByte"}},
    pValueName: {"kind""Ptr","child":{"kind":"SByte"}},
    pType: {"kind""Ptr","child":{"kind":"UInt32"}},
    pData: {"kind""Ptr","child":{"kind":"Byte"}},
    nSize: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn GetPrinterDataExW(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pKeyName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pValueName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pType: {"kind""Ptr","child":{"kind":"UInt32"}},
    pData: {"kind""Ptr","child":{"kind":"Byte"}},
    nSize: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn EnumPrinterDataA(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    dwIndex: {"kind":"UInt32"},
    pValueName: {"kind""Ptr","child":{"kind":"SByte"}},
    cbValueName: {"kind":"UInt32"},
    pcbValueName: {"kind""Ptr","child":{"kind":"UInt32"}},
    pType: {"kind""Ptr","child":{"kind":"UInt32"}},
    pData: {"kind""Ptr","child":{"kind":"Byte"}},
    cbData: {"kind":"UInt32"},
    pcbData: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn EnumPrinterDataW(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    dwIndex: {"kind":"UInt32"},
    pValueName: {"kind""Ptr","child":{"kind":"UInt16"}},
    cbValueName: {"kind":"UInt32"},
    pcbValueName: {"kind""Ptr","child":{"kind":"UInt32"}},
    pType: {"kind""Ptr","child":{"kind":"UInt32"}},
    pData: {"kind""Ptr","child":{"kind":"Byte"}},
    cbData: {"kind":"UInt32"},
    pcbData: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn EnumPrinterDataExA(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pKeyName: {"kind""Ptr","child":{"kind":"SByte"}},
    pEnumValues: {"kind""Ptr","child":{"kind":"Byte"}},
    cbEnumValues: {"kind":"UInt32"},
    pcbEnumValues: {"kind""Ptr","child":{"kind":"UInt32"}},
    pnEnumValues: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn EnumPrinterDataExW(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pKeyName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pEnumValues: {"kind""Ptr","child":{"kind":"Byte"}},
    cbEnumValues: {"kind":"UInt32"},
    pcbEnumValues: {"kind""Ptr","child":{"kind":"UInt32"}},
    pnEnumValues: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn EnumPrinterKeyA(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pKeyName: {"kind""Ptr","child":{"kind":"SByte"}},
    pSubkey: {"kind""Ptr","child":{"kind":"SByte"}},
    cbSubkey: {"kind":"UInt32"},
    pcbSubkey: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn EnumPrinterKeyW(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pKeyName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pSubkey: {"kind""Ptr","child":{"kind":"UInt16"}},
    cbSubkey: {"kind":"UInt32"},
    pcbSubkey: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn SetPrinterDataA(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pValueName: {"kind""Ptr","child":{"kind":"SByte"}},
    Type: {"kind":"UInt32"},
    pData: {"kind""Ptr","child":{"kind":"Byte"}},
    cbData: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn SetPrinterDataW(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pValueName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Type: {"kind":"UInt32"},
    pData: {"kind""Ptr","child":{"kind":"Byte"}},
    cbData: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn SetPrinterDataExA(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pKeyName: {"kind""Ptr","child":{"kind":"SByte"}},
    pValueName: {"kind""Ptr","child":{"kind":"SByte"}},
    Type: {"kind":"UInt32"},
    pData: {"kind""Ptr","child":{"kind":"Byte"}},
    cbData: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn SetPrinterDataExW(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pKeyName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pValueName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Type: {"kind":"UInt32"},
    pData: {"kind""Ptr","child":{"kind":"Byte"}},
    cbData: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn DeletePrinterDataA(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pValueName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn DeletePrinterDataW(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pValueName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn DeletePrinterDataExA(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pKeyName: {"kind""Ptr","child":{"kind":"SByte"}},
    pValueName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn DeletePrinterDataExW(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pKeyName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pValueName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn DeletePrinterKeyA(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pKeyName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn DeletePrinterKeyW(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pKeyName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn WaitForPrinterChange(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    Flags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn FindFirstPrinterChangeNotification(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    fdwFilter: {"kind":"UInt32"},
    fdwOptions: {"kind":"UInt32"},
    pPrinterNotifyOptions: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn FindNextPrinterChangeNotification(
    hChange: Windows.Win32.SystemServices.HANDLE,
    pdwChange: {"kind""Ptr","child":{"kind":"UInt32"}},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},
    ppPrinterNotifyInfo: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn FreePrinterNotifyInfo(
    pPrinterNotifyInfo: {"kind""Ptr","child":Windows.Win32.SystemServices.PRINTER_NOTIFY_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn FindClosePrinterChangeNotification(
    hChange: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn PrinterMessageBoxA(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    Error: {"kind":"UInt32"},
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    pText: {"kind""Ptr","child":{"kind":"SByte"}},
    pCaption: {"kind""Ptr","child":{"kind":"SByte"}},
    dwType: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn PrinterMessageBoxW(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    Error: {"kind":"UInt32"},
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    pText: {"kind""Ptr","child":{"kind":"UInt16"}},
    pCaption: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwType: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn ClosePrinter(
    hPrinter: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn AddFormA(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    Level: {"kind":"UInt32"},
    pForm: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn AddFormW(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    Level: {"kind":"UInt32"},
    pForm: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn DeleteFormA(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pFormName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn DeleteFormW(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pFormName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn GetFormA(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pFormName: {"kind""Ptr","child":{"kind":"SByte"}},
    Level: {"kind":"UInt32"},
    pForm: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBuf: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn GetFormW(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pFormName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Level: {"kind":"UInt32"},
    pForm: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBuf: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn SetFormA(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pFormName: {"kind""Ptr","child":{"kind":"SByte"}},
    Level: {"kind":"UInt32"},
    pForm: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn SetFormW(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pFormName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Level: {"kind":"UInt32"},
    pForm: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn EnumFormsA(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    Level: {"kind":"UInt32"},
    pForm: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBuf: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},
    pcReturned: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn EnumFormsW(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    Level: {"kind":"UInt32"},
    pForm: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBuf: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},
    pcReturned: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn EnumMonitorsA(
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
    Level: {"kind":"UInt32"},
    pMonitor: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBuf: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},
    pcReturned: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn EnumMonitorsW(
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Level: {"kind":"UInt32"},
    pMonitor: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBuf: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},
    pcReturned: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn AddMonitorA(
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
    Level: {"kind":"UInt32"},
    pMonitors: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn AddMonitorW(
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Level: {"kind":"UInt32"},
    pMonitors: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn DeleteMonitorA(
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"SByte"}},
    pMonitorName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn DeleteMonitorW(
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"UInt16"}},
    pMonitorName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn EnumPortsA(
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
    Level: {"kind":"UInt32"},
    pPort: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBuf: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},
    pcReturned: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn EnumPortsW(
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Level: {"kind":"UInt32"},
    pPort: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBuf: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},
    pcReturned: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn AddPortA(
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    pMonitorName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn AddPortW(
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    pMonitorName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn ConfigurePortA(
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    pPortName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn ConfigurePortW(
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    pPortName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn DeletePortA(
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    pPortName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn DeletePortW(
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    pPortName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn XcvDataW(
    hXcv: Windows.Win32.SystemServices.HANDLE,
    pszDataName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pInputData: {"kind""Ptr","child":{"kind":"Byte"}},
    cbInputData: {"kind":"UInt32"},
    pOutputData: {"kind""Ptr","child":{"kind":"Byte"}},
    cbOutputData: {"kind":"UInt32"},
    pcbOutputNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},
    pdwStatus: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn GetDefaultPrinterA(
    pszBuffer: {"kind""Ptr","child":{"kind":"SByte"}},
    pcchBuffer: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn GetDefaultPrinterW(
    pszBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchBuffer: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn SetDefaultPrinterA(
    pszPrinter: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn SetDefaultPrinterW(
    pszPrinter: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn SetPortA(
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
    pPortName: {"kind""Ptr","child":{"kind":"SByte"}},
    dwLevel: {"kind":"UInt32"},
    pPortInfo: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn SetPortW(
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pPortName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwLevel: {"kind":"UInt32"},
    pPortInfo: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn AddPrinterConnectionA(
    pName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn AddPrinterConnectionW(
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn DeletePrinterConnectionA(
    pName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn DeletePrinterConnectionW(
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn ConnectToPrinterDlg(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    Flags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn AddPrintProvidorA(
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
    Level: {"kind":"UInt32"},
    pProvidorInfo: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn AddPrintProvidorW(
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Level: {"kind":"UInt32"},
    pProvidorInfo: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn DeletePrintProvidorA(
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"SByte"}},
    pPrintProvidorName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn DeletePrintProvidorW(
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pEnvironment: {"kind""Ptr","child":{"kind":"UInt16"}},
    pPrintProvidorName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn IsValidDevmodeA(
    pDevmode: {"kind""Ptr","child":Windows.Win32.Xps.DEVMODEA},
    DevmodeSize: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn IsValidDevmodeW(
    pDevmode: {"kind""Ptr","child":Windows.Win32.DisplayDevices.DEVMODEW},
    DevmodeSize: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn OpenPrinter2A(
    pPrinterName: {"kind""Ptr","child":{"kind":"SByte"}},
    phPrinter: {"kind""Ptr","child":{"kind":"IntPtr"}},
    pDefault: {"kind""Ptr","child":Windows.Win32.SystemServices.PRINTER_DEFAULTSA},
    pOptions: {"kind""Ptr","child":Windows.Win32.SystemServices.PRINTER_OPTIONSA},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn OpenPrinter2W(
    pPrinterName: {"kind""Ptr","child":{"kind":"UInt16"}},
    phPrinter: {"kind""Ptr","child":{"kind":"IntPtr"}},
    pDefault: {"kind""Ptr","child":Windows.Win32.SystemServices.PRINTER_DEFAULTSW},
    pOptions: {"kind""Ptr","child":Windows.Win32.SystemServices.PRINTER_OPTIONSW},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn AddPrinterConnection2A(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    pszName: {"kind""Ptr","child":{"kind":"SByte"}},
    dwLevel: {"kind":"UInt32"},
    pConnectionInfo: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn AddPrinterConnection2W(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    pszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwLevel: {"kind":"UInt32"},
    pConnectionInfo: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn InstallPrinterDriverFromPackageA(
    pszServer: {"kind""Ptr","child":{"kind":"SByte"}},
    pszInfPath: {"kind""Ptr","child":{"kind":"SByte"}},
    pszDriverName: {"kind""Ptr","child":{"kind":"SByte"}},
    pszEnvironment: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn InstallPrinterDriverFromPackageW(
    pszServer: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszInfPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszDriverName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszEnvironment: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn UploadPrinterDriverPackageA(
    pszServer: {"kind""Ptr","child":{"kind":"SByte"}},
    pszInfPath: {"kind""Ptr","child":{"kind":"SByte"}},
    pszEnvironment: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    pszDestInfPath: {"kind""Ptr","child":{"kind":"SByte"}},
    pcchDestInfPath: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn UploadPrinterDriverPackageW(
    pszServer: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszInfPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszEnvironment: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    pszDestInfPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchDestInfPath: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn GetCorePrinterDriversA(
    pszServer: {"kind""Ptr","child":{"kind":"SByte"}},
    pszEnvironment: {"kind""Ptr","child":{"kind":"SByte"}},
    pszzCoreDriverDependencies: {"kind""Ptr","child":{"kind":"SByte"}},
    cCorePrinterDrivers: {"kind":"UInt32"},
    pCorePrinterDrivers: {"kind""Ptr","child":Windows.Win32.SystemServices.CORE_PRINTER_DRIVERA},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn GetCorePrinterDriversW(
    pszServer: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszEnvironment: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszzCoreDriverDependencies: {"kind""Ptr","child":{"kind":"UInt16"}},
    cCorePrinterDrivers: {"kind":"UInt32"},
    pCorePrinterDrivers: {"kind""Ptr","child":Windows.Win32.SystemServices.CORE_PRINTER_DRIVERW},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn CorePrinterDriverInstalledA(
    pszServer: {"kind""Ptr","child":{"kind":"SByte"}},
    pszEnvironment: {"kind""Ptr","child":{"kind":"SByte"}},
    CoreDriverGUID: Guid,
    ftDriverDate: Windows.Win32.WindowsProgramming.FILETIME,
    dwlDriverVersion: {"kind":"UInt64"},
    pbDriverInstalled: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn CorePrinterDriverInstalledW(
    pszServer: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszEnvironment: {"kind""Ptr","child":{"kind":"UInt16"}},
    CoreDriverGUID: Guid,
    ftDriverDate: Windows.Win32.WindowsProgramming.FILETIME,
    dwlDriverVersion: {"kind":"UInt64"},
    pbDriverInstalled: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn GetPrinterDriverPackagePathA(
    pszServer: {"kind""Ptr","child":{"kind":"SByte"}},
    pszEnvironment: {"kind""Ptr","child":{"kind":"SByte"}},
    pszLanguage: {"kind""Ptr","child":{"kind":"SByte"}},
    pszPackageID: {"kind""Ptr","child":{"kind":"SByte"}},
    pszDriverPackageCab: {"kind""Ptr","child":{"kind":"SByte"}},
    cchDriverPackageCab: {"kind":"UInt32"},
    pcchRequiredSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn GetPrinterDriverPackagePathW(
    pszServer: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszEnvironment: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszLanguage: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszPackageID: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszDriverPackageCab: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchDriverPackageCab: {"kind":"UInt32"},
    pcchRequiredSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn DeletePrinterDriverPackageA(
    pszServer: {"kind""Ptr","child":{"kind":"SByte"}},
    pszInfPath: {"kind""Ptr","child":{"kind":"SByte"}},
    pszEnvironment: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn DeletePrinterDriverPackageW(
    pszServer: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszInfPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszEnvironment: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn ReportJobProcessingProgress(
    printerHandle: Windows.Win32.SystemServices.HANDLE,
    jobId: {"kind":"UInt32"},
    jobOperation: Windows.Win32.SystemServices.EPrintXPSJobOperation,
    jobProgress: Windows.Win32.SystemServices.EPrintXPSJobProgress,

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn GetPrinterDriver2A(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pEnvironment: {"kind""Ptr","child":{"kind":"SByte"}},
    Level: {"kind":"UInt32"},
    pDriverInfo: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBuf: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn GetPrinterDriver2W(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    pEnvironment: {"kind""Ptr","child":{"kind":"UInt16"}},
    Level: {"kind":"UInt32"},
    pDriverInfo: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBuf: {"kind":"UInt32"},
    pcbNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn GetPrintExecutionData(
    pData: {"kind""Ptr","child":Windows.Win32.SystemServices.PRINT_EXECUTION_DATA},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn GetJobNamedPropertyValue(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    JobId: {"kind":"UInt32"},
    pszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pValue: {"kind""Ptr","child":Windows.Win32.SystemServices.PrintPropertyValue},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn FreePrintPropertyValue(
    pValue: {"kind""Ptr","child":Windows.Win32.SystemServices.PrintPropertyValue},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn FreePrintNamedPropertyArray(
    cProperties: {"kind":"UInt32"},
    ppProperties: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.SystemServices.PrintNamedProperty}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn SetJobNamedProperty(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    JobId: {"kind":"UInt32"},
    pProperty: {"kind""Ptr","child":Windows.Win32.SystemServices.PrintNamedProperty},

// set_last_errror=False (can and should we use this?)
pub extern "SPOOLSS" fn DeleteJobNamedProperty(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    JobId: {"kind":"UInt32"},
    pszName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn EnumJobNamedProperties(
    hPrinter: Windows.Win32.SystemServices.HANDLE,
    JobId: {"kind":"UInt32"},
    pcProperties: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppProperties: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.SystemServices.PrintNamedProperty}},

// set_last_errror=False (can and should we use this?)
pub extern "WINSPOOL" fn GetPrintOutputInfo(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    pszPrinter: {"kind""Ptr","child":{"kind":"UInt16"}},
    phFile: {"kind""Ptr","child":Windows.Win32.SystemServices.HANDLE},
    ppszOutputFile: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "CoreMessaging" fn CreateDispatcherQueueController(
    options: Windows.Win32.SystemServices.DispatcherQueueOptions,
    dispatcherQueueController: {"kind""Ptr","child":*opaque{ pub const actual_type = "Windows.System"; }},

// set_last_errror=False (can and should we use this?)
pub extern "VSSAPI" fn CreateVssExpressWriterInternal(
    ppWriter: {"kind""Ptr","child":Windows.Win32.SystemServices.IVssExpressWriter},

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngQueryEMFInfo(
    hdev: {"kind""Ptr","child":Windows.Win32.SystemServices.HDEV__},
    pEMFInfo: {"kind""Ptr","child":Windows.Win32.SystemServices.EMFINFO},

// set_last_errror=True (can and should we use this?)
pub extern "api-ms-win-core-libraryloader-l2-1-0" fn QueryOptionalDelayLoadedAPI(
    hParentModule: {"kind":"IntPtr"},
    lpDllName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpProcName: {"kind""Ptr","child":{"kind":"SByte"}},
    Reserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "vertdll" fn EnclaveGetAttestationReport(
    EnclaveData: {"kind""Ptr","child":{"kind":"Byte"}},
    Report: {"kind""Ptr","child":{"kind":"Void"}},
    BufferSize: {"kind":"UInt32"},
    OutputSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "vertdll" fn EnclaveVerifyAttestationReport(
    EnclaveType: {"kind":"UInt32"},
    Report: {"kind""Ptr","child":{"kind":"Void"}},
    ReportSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "vertdll" fn EnclaveSealData(
    DataToEncrypt: {"kind""Ptr","child":{"kind":"Void"}},
    DataToEncryptSize: {"kind":"UInt32"},
    IdentityPolicy: Windows.Win32.SystemServices.ENCLAVE_SEALING_IDENTITY_POLICY,
    RuntimePolicy: {"kind":"UInt32"},
    ProtectedBlob: {"kind""Ptr","child":{"kind":"Void"}},
    BufferSize: {"kind":"UInt32"},
    ProtectedBlobSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "vertdll" fn EnclaveUnsealData(
    ProtectedBlob: {"kind""Ptr","child":{"kind":"Void"}},
    ProtectedBlobSize: {"kind":"UInt32"},
    DecryptedData: {"kind""Ptr","child":{"kind":"Void"}},
    BufferSize: {"kind":"UInt32"},
    DecryptedDataSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    SealingIdentity: {"kind""Ptr","child":Windows.Win32.SystemServices.ENCLAVE_IDENTITY},
    UnsealingFlags: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "vertdll" fn EnclaveGetEnclaveInformation(
    InformationSize: {"kind":"UInt32"},
    EnclaveInformation: {"kind""Ptr","child":Windows.Win32.SystemServices.ENCLAVE_INFORMATION},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn CallNtPowerInformation(
    InformationLevel: Windows.Win32.SystemServices.POWER_INFORMATION_LEVEL,
    InputBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    InputBufferLength: {"kind":"UInt32"},
    OutputBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    OutputBufferLength: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "api-ms-win-power-base-l1-1-0" fn GetPwrCapabilities(
    lpspc: {"kind""Ptr","child":Windows.Win32.SystemServices.SYSTEM_POWER_CAPABILITIES},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-power-base-l1-1-0" fn PowerDeterminePlatformRoleEx(
    Version: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-power-base-l1-1-0" fn PowerRegisterSuspendResumeNotification(
    Flags: {"kind":"UInt32"},
    Recipient: Windows.Win32.SystemServices.HANDLE,
    RegistrationHandle: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-power-base-l1-1-0" fn PowerUnregisterSuspendResumeNotification(
    RegistrationHandle: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-power-setting-l1-1-0" fn PowerReadACValue(
    RootPowerKey: Windows.Win32.WindowsProgramming.HKEY,
    SchemeGuid: {"kind""Ptr","child":Guid},
    SubGroupOfPowerSettingsGuid: {"kind""Ptr","child":Guid},
    PowerSettingGuid: {"kind""Ptr","child":Guid},
    Type: {"kind""Ptr","child":{"kind":"UInt32"}},
    Buffer: {"kind""Ptr","child":{"kind":"Byte"}},
    BufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-power-setting-l1-1-0" fn PowerReadDCValue(
    RootPowerKey: Windows.Win32.WindowsProgramming.HKEY,
    SchemeGuid: {"kind""Ptr","child":Guid},
    SubGroupOfPowerSettingsGuid: {"kind""Ptr","child":Guid},
    PowerSettingGuid: {"kind""Ptr","child":Guid},
    Type: {"kind""Ptr","child":{"kind":"UInt32"}},
    Buffer: {"kind""Ptr","child":{"kind":"Byte"}},
    BufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-power-setting-l1-1-0" fn PowerGetActiveScheme(
    UserRootPowerKey: Windows.Win32.WindowsProgramming.HKEY,
    ActivePolicyGuid: {"kind""Ptr","child":{"kind""Ptr","child":Guid}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-power-setting-l1-1-0" fn PowerSetActiveScheme(
    UserRootPowerKey: Windows.Win32.WindowsProgramming.HKEY,
    SchemeGuid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-power-setting-l1-1-0" fn PowerSettingRegisterNotification(
    SettingGuid: {"kind""Ptr","child":Guid},
    Flags: {"kind":"UInt32"},
    Recipient: Windows.Win32.SystemServices.HANDLE,
    RegistrationHandle: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-power-setting-l1-1-0" fn PowerSettingUnregisterNotification(
    RegistrationHandle: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-power-setting-l1-1-1" fn PowerRegisterForEffectivePowerModeNotifications(
    Version: {"kind":"UInt32"},
    Callback: {"kind""Ptr","child":Windows.Win32.SystemServices.EFFECTIVE_POWER_MODE_CALLBACK},
    Context: {"kind""Ptr","child":{"kind":"Void"}},
    RegistrationHandle: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-power-setting-l1-1-1" fn PowerUnregisterFromEffectivePowerModeNotifications(
    RegistrationHandle: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "POWRPROF" fn GetPwrDiskSpindownRange(
    puiMax: {"kind""Ptr","child":{"kind":"UInt32"}},
    puiMin: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "POWRPROF" fn EnumPwrSchemes(
    lpfn: Windows.Win32.SystemServices.PWRSCHEMESENUMPROC,
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,

// set_last_errror=True (can and should we use this?)
pub extern "POWRPROF" fn ReadGlobalPwrPolicy(
    pGlobalPowerPolicy: {"kind""Ptr","child":Windows.Win32.SystemServices.GLOBAL_POWER_POLICY},

// set_last_errror=True (can and should we use this?)
pub extern "POWRPROF" fn ReadPwrScheme(
    uiID: {"kind":"UInt32"},
    pPowerPolicy: {"kind""Ptr","child":Windows.Win32.SystemServices.POWER_POLICY},

// set_last_errror=True (can and should we use this?)
pub extern "POWRPROF" fn WritePwrScheme(
    puiID: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpszSchemeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpszDescription: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpScheme: {"kind""Ptr","child":Windows.Win32.SystemServices.POWER_POLICY},

// set_last_errror=True (can and should we use this?)
pub extern "POWRPROF" fn WriteGlobalPwrPolicy(
    pGlobalPowerPolicy: {"kind""Ptr","child":Windows.Win32.SystemServices.GLOBAL_POWER_POLICY},

// set_last_errror=True (can and should we use this?)
pub extern "POWRPROF" fn DeletePwrScheme(
    uiID: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "POWRPROF" fn GetActivePwrScheme(
    puiID: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "POWRPROF" fn SetActivePwrScheme(
    uiID: {"kind":"UInt32"},
    pGlobalPowerPolicy: {"kind""Ptr","child":Windows.Win32.SystemServices.GLOBAL_POWER_POLICY},
    pPowerPolicy: {"kind""Ptr","child":Windows.Win32.SystemServices.POWER_POLICY},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn IsPwrSuspendAllowed(

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn IsPwrHibernateAllowed(

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn IsPwrShutdownAllowed(

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn IsAdminOverrideActive(
    papp: {"kind""Ptr","child":Windows.Win32.SystemServices.ADMINISTRATOR_POWER_POLICY},

// set_last_errror=True (can and should we use this?)
pub extern "POWRPROF" fn SetSuspendState(
    bHibernate: {"kind":"Byte"},
    bForce: {"kind":"Byte"},
    bWakeupEventsDisabled: {"kind":"Byte"},

// set_last_errror=True (can and should we use this?)
pub extern "POWRPROF" fn GetCurrentPowerPolicies(
    pGlobalPowerPolicy: {"kind""Ptr","child":Windows.Win32.SystemServices.GLOBAL_POWER_POLICY},
    pPowerPolicy: {"kind""Ptr","child":Windows.Win32.SystemServices.POWER_POLICY},

// set_last_errror=True (can and should we use this?)
pub extern "POWRPROF" fn CanUserWritePwrScheme(

// set_last_errror=True (can and should we use this?)
pub extern "POWRPROF" fn ReadProcessorPwrScheme(
    uiID: {"kind":"UInt32"},
    pMachineProcessorPowerPolicy: {"kind""Ptr","child":Windows.Win32.SystemServices.MACHINE_PROCESSOR_POWER_POLICY},

// set_last_errror=True (can and should we use this?)
pub extern "POWRPROF" fn WriteProcessorPwrScheme(
    uiID: {"kind":"UInt32"},
    pMachineProcessorPowerPolicy: {"kind""Ptr","child":Windows.Win32.SystemServices.MACHINE_PROCESSOR_POWER_POLICY},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn ValidatePowerPolicies(
    pGlobalPowerPolicy: {"kind""Ptr","child":Windows.Win32.SystemServices.GLOBAL_POWER_POLICY},
    pPowerPolicy: {"kind""Ptr","child":Windows.Win32.SystemServices.POWER_POLICY},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerIsSettingRangeDefined(
    SubKeyGuid: {"kind""Ptr","child":Guid},
    SettingGuid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerSettingAccessCheckEx(
    AccessFlags: Windows.Win32.SystemServices.POWER_DATA_ACCESSOR,
    PowerGuid: {"kind""Ptr","child":Guid},
    AccessType: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerSettingAccessCheck(
    AccessFlags: Windows.Win32.SystemServices.POWER_DATA_ACCESSOR,
    PowerGuid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerReadFriendlyName(
    RootPowerKey: Windows.Win32.WindowsProgramming.HKEY,
    SchemeGuid: {"kind""Ptr","child":Guid},
    SubGroupOfPowerSettingsGuid: {"kind""Ptr","child":Guid},
    PowerSettingGuid: {"kind""Ptr","child":Guid},
    Buffer: {"kind""Ptr","child":{"kind":"Byte"}},
    BufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerReadDescription(
    RootPowerKey: Windows.Win32.WindowsProgramming.HKEY,
    SchemeGuid: {"kind""Ptr","child":Guid},
    SubGroupOfPowerSettingsGuid: {"kind""Ptr","child":Guid},
    PowerSettingGuid: {"kind""Ptr","child":Guid},
    Buffer: {"kind""Ptr","child":{"kind":"Byte"}},
    BufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerReadPossibleValue(
    RootPowerKey: Windows.Win32.WindowsProgramming.HKEY,
    SubGroupOfPowerSettingsGuid: {"kind""Ptr","child":Guid},
    PowerSettingGuid: {"kind""Ptr","child":Guid},
    Type: {"kind""Ptr","child":{"kind":"UInt32"}},
    PossibleSettingIndex: {"kind":"UInt32"},
    Buffer: {"kind""Ptr","child":{"kind":"Byte"}},
    BufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerReadPossibleFriendlyName(
    RootPowerKey: Windows.Win32.WindowsProgramming.HKEY,
    SubGroupOfPowerSettingsGuid: {"kind""Ptr","child":Guid},
    PowerSettingGuid: {"kind""Ptr","child":Guid},
    PossibleSettingIndex: {"kind":"UInt32"},
    Buffer: {"kind""Ptr","child":{"kind":"Byte"}},
    BufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerReadPossibleDescription(
    RootPowerKey: Windows.Win32.WindowsProgramming.HKEY,
    SubGroupOfPowerSettingsGuid: {"kind""Ptr","child":Guid},
    PowerSettingGuid: {"kind""Ptr","child":Guid},
    PossibleSettingIndex: {"kind":"UInt32"},
    Buffer: {"kind""Ptr","child":{"kind":"Byte"}},
    BufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerReadValueMin(
    RootPowerKey: Windows.Win32.WindowsProgramming.HKEY,
    SubGroupOfPowerSettingsGuid: {"kind""Ptr","child":Guid},
    PowerSettingGuid: {"kind""Ptr","child":Guid},
    ValueMinimum: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerReadValueMax(
    RootPowerKey: Windows.Win32.WindowsProgramming.HKEY,
    SubGroupOfPowerSettingsGuid: {"kind""Ptr","child":Guid},
    PowerSettingGuid: {"kind""Ptr","child":Guid},
    ValueMaximum: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerReadValueIncrement(
    RootPowerKey: Windows.Win32.WindowsProgramming.HKEY,
    SubGroupOfPowerSettingsGuid: {"kind""Ptr","child":Guid},
    PowerSettingGuid: {"kind""Ptr","child":Guid},
    ValueIncrement: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerReadValueUnitsSpecifier(
    RootPowerKey: Windows.Win32.WindowsProgramming.HKEY,
    SubGroupOfPowerSettingsGuid: {"kind""Ptr","child":Guid},
    PowerSettingGuid: {"kind""Ptr","child":Guid},
    Buffer: {"kind""Ptr","child":{"kind":"Byte"}},
    BufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerReadIconResourceSpecifier(
    RootPowerKey: Windows.Win32.WindowsProgramming.HKEY,
    SchemeGuid: {"kind""Ptr","child":Guid},
    SubGroupOfPowerSettingsGuid: {"kind""Ptr","child":Guid},
    PowerSettingGuid: {"kind""Ptr","child":Guid},
    Buffer: {"kind""Ptr","child":{"kind":"Byte"}},
    BufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerReadSettingAttributes(
    SubGroupGuid: {"kind""Ptr","child":Guid},
    PowerSettingGuid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerWriteFriendlyName(
    RootPowerKey: Windows.Win32.WindowsProgramming.HKEY,
    SchemeGuid: {"kind""Ptr","child":Guid},
    SubGroupOfPowerSettingsGuid: {"kind""Ptr","child":Guid},
    PowerSettingGuid: {"kind""Ptr","child":Guid},
    Buffer: {"kind""Ptr","child":{"kind":"Byte"}},
    BufferSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerWriteDescription(
    RootPowerKey: Windows.Win32.WindowsProgramming.HKEY,
    SchemeGuid: {"kind""Ptr","child":Guid},
    SubGroupOfPowerSettingsGuid: {"kind""Ptr","child":Guid},
    PowerSettingGuid: {"kind""Ptr","child":Guid},
    Buffer: {"kind""Ptr","child":{"kind":"Byte"}},
    BufferSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerWritePossibleValue(
    RootPowerKey: Windows.Win32.WindowsProgramming.HKEY,
    SubGroupOfPowerSettingsGuid: {"kind""Ptr","child":Guid},
    PowerSettingGuid: {"kind""Ptr","child":Guid},
    Type: {"kind":"UInt32"},
    PossibleSettingIndex: {"kind":"UInt32"},
    Buffer: {"kind""Ptr","child":{"kind":"Byte"}},
    BufferSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerWritePossibleFriendlyName(
    RootPowerKey: Windows.Win32.WindowsProgramming.HKEY,
    SubGroupOfPowerSettingsGuid: {"kind""Ptr","child":Guid},
    PowerSettingGuid: {"kind""Ptr","child":Guid},
    PossibleSettingIndex: {"kind":"UInt32"},
    Buffer: {"kind""Ptr","child":{"kind":"Byte"}},
    BufferSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerWritePossibleDescription(
    RootPowerKey: Windows.Win32.WindowsProgramming.HKEY,
    SubGroupOfPowerSettingsGuid: {"kind""Ptr","child":Guid},
    PowerSettingGuid: {"kind""Ptr","child":Guid},
    PossibleSettingIndex: {"kind":"UInt32"},
    Buffer: {"kind""Ptr","child":{"kind":"Byte"}},
    BufferSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerWriteValueMin(
    RootPowerKey: Windows.Win32.WindowsProgramming.HKEY,
    SubGroupOfPowerSettingsGuid: {"kind""Ptr","child":Guid},
    PowerSettingGuid: {"kind""Ptr","child":Guid},
    ValueMinimum: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerWriteValueMax(
    RootPowerKey: Windows.Win32.WindowsProgramming.HKEY,
    SubGroupOfPowerSettingsGuid: {"kind""Ptr","child":Guid},
    PowerSettingGuid: {"kind""Ptr","child":Guid},
    ValueMaximum: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerWriteValueIncrement(
    RootPowerKey: Windows.Win32.WindowsProgramming.HKEY,
    SubGroupOfPowerSettingsGuid: {"kind""Ptr","child":Guid},
    PowerSettingGuid: {"kind""Ptr","child":Guid},
    ValueIncrement: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerWriteValueUnitsSpecifier(
    RootPowerKey: Windows.Win32.WindowsProgramming.HKEY,
    SubGroupOfPowerSettingsGuid: {"kind""Ptr","child":Guid},
    PowerSettingGuid: {"kind""Ptr","child":Guid},
    Buffer: {"kind""Ptr","child":{"kind":"Byte"}},
    BufferSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerWriteIconResourceSpecifier(
    RootPowerKey: Windows.Win32.WindowsProgramming.HKEY,
    SchemeGuid: {"kind""Ptr","child":Guid},
    SubGroupOfPowerSettingsGuid: {"kind""Ptr","child":Guid},
    PowerSettingGuid: {"kind""Ptr","child":Guid},
    Buffer: {"kind""Ptr","child":{"kind":"Byte"}},
    BufferSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerWriteSettingAttributes(
    SubGroupGuid: {"kind""Ptr","child":Guid},
    PowerSettingGuid: {"kind""Ptr","child":Guid},
    Attributes: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerDuplicateScheme(
    RootPowerKey: Windows.Win32.WindowsProgramming.HKEY,
    SourceSchemeGuid: {"kind""Ptr","child":Guid},
    DestinationSchemeGuid: {"kind""Ptr","child":{"kind""Ptr","child":Guid}},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerImportPowerScheme(
    RootPowerKey: Windows.Win32.WindowsProgramming.HKEY,
    ImportFileNamePath: {"kind""Ptr","child":{"kind":"UInt16"}},
    DestinationSchemeGuid: {"kind""Ptr","child":{"kind""Ptr","child":Guid}},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerDeleteScheme(
    RootPowerKey: Windows.Win32.WindowsProgramming.HKEY,
    SchemeGuid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerRemovePowerSetting(
    PowerSettingSubKeyGuid: {"kind""Ptr","child":Guid},
    PowerSettingGuid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerCreateSetting(
    RootSystemPowerKey: Windows.Win32.WindowsProgramming.HKEY,
    SubGroupOfPowerSettingsGuid: {"kind""Ptr","child":Guid},
    PowerSettingGuid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerCreatePossibleSetting(
    RootSystemPowerKey: Windows.Win32.WindowsProgramming.HKEY,
    SubGroupOfPowerSettingsGuid: {"kind""Ptr","child":Guid},
    PowerSettingGuid: {"kind""Ptr","child":Guid},
    PossibleSettingIndex: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerEnumerate(
    RootPowerKey: Windows.Win32.WindowsProgramming.HKEY,
    SchemeGuid: {"kind""Ptr","child":Guid},
    SubGroupOfPowerSettingsGuid: {"kind""Ptr","child":Guid},
    AccessFlags: Windows.Win32.SystemServices.POWER_DATA_ACCESSOR,
    Index: {"kind":"UInt32"},
    Buffer: {"kind""Ptr","child":{"kind":"Byte"}},
    BufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerOpenUserPowerKey(
    phUserPowerKey: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HKEY},
    Access: {"kind":"UInt32"},
    OpenExisting: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerOpenSystemPowerKey(
    phSystemPowerKey: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HKEY},
    Access: {"kind":"UInt32"},
    OpenExisting: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerCanRestoreIndividualDefaultPowerScheme(
    SchemeGuid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerRestoreIndividualDefaultPowerScheme(
    SchemeGuid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerRestoreDefaultPowerSchemes(

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerReplaceDefaultPowerSchemes(

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerDeterminePlatformRole(

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn DevicePowerEnumDevices(
    QueryIndex: {"kind":"UInt32"},
    QueryInterpretationFlags: {"kind":"UInt32"},
    QueryFlags: {"kind":"UInt32"},
    pReturnBuffer: {"kind""Ptr","child":{"kind":"Byte"}},
    pBufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "POWRPROF" fn DevicePowerSetDeviceState(
    DeviceDescription: {"kind""Ptr","child":{"kind":"UInt16"}},
    SetFlags: {"kind":"UInt32"},
    SetData: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn DevicePowerOpen(
    DebugMask: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn DevicePowerClose(

// set_last_errror=False (can and should we use this?)
pub extern "POWRPROF" fn PowerReportThermalEvent(
    Event: {"kind""Ptr","child":Windows.Win32.SystemServices.THERMAL_EVENT},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn DeviceIoControl(
    hDevice: Windows.Win32.SystemServices.HANDLE,
    dwIoControlCode: {"kind":"UInt32"},
    lpInBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    nInBufferSize: {"kind":"UInt32"},
    lpOutBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    nOutBufferSize: {"kind":"UInt32"},
    lpBytesReturned: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpOverlapped: {"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetOverlappedResult(
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpOverlapped: {"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED},
    lpNumberOfBytesTransferred: {"kind""Ptr","child":{"kind":"UInt32"}},
    bWait: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetOverlappedResultEx(
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpOverlapped: {"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED},
    lpNumberOfBytesTransferred: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwMilliseconds: {"kind":"UInt32"},
    bAlertable: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn IsWow64Process(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    Wow64Process: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn IsWow64Process2(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    pProcessMachine: {"kind""Ptr","child":{"kind":"UInt16"}},
    pNativeMachine: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetCommandLineA(

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetCommandLineW(

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetEnvironmentStrings(

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetEnvironmentStringsW(

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FreeEnvironmentStringsA(
    penv: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FreeEnvironmentStringsW(
    penv: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetEnvironmentVariableA(
    lpName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpBuffer: {"kind""Ptr","child":{"kind":"SByte"}},
    nSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetEnvironmentVariableW(
    lpName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    nSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetEnvironmentVariableA(
    lpName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpValue: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetEnvironmentVariableW(
    lpName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpValue: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn NeedCurrentDirectoryForExePathA(
    ExeName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn NeedCurrentDirectoryForExePathW(
    ExeName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn QueueUserAPC(
    pfnAPC: Windows.Win32.SystemServices.PAPCFUNC,
    hThread: Windows.Win32.SystemServices.HANDLE,
    dwData: {"kind":"UIntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetProcessTimes(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    lpCreationTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    lpExitTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    lpKernelTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    lpUserTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetCurrentProcess(

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetCurrentProcessId(

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn ExitProcess(
    uExitCode: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn TerminateProcess(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    uExitCode: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetExitCodeProcess(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    lpExitCode: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SwitchToThread(

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateThread(
    lpThreadAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    dwStackSize: {"kind":"UIntPtr"},
    lpStartAddress: Windows.Win32.SystemServices.LPTHREAD_START_ROUTINE,
    lpParameter: {"kind""Ptr","child":{"kind":"Void"}},
    dwCreationFlags: {"kind":"UInt32"},
    lpThreadId: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateRemoteThread(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    lpThreadAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    dwStackSize: {"kind":"UIntPtr"},
    lpStartAddress: Windows.Win32.SystemServices.LPTHREAD_START_ROUTINE,
    lpParameter: {"kind""Ptr","child":{"kind":"Void"}},
    dwCreationFlags: {"kind":"UInt32"},
    lpThreadId: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetCurrentThread(

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetCurrentThreadId(

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn OpenThread(
    dwDesiredAccess: {"kind":"UInt32"},
    bInheritHandle: Windows.Win32.SystemServices.BOOL,
    dwThreadId: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetThreadPriority(
    hThread: Windows.Win32.SystemServices.HANDLE,
    nPriority: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetThreadPriorityBoost(
    hThread: Windows.Win32.SystemServices.HANDLE,
    bDisablePriorityBoost: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetThreadPriorityBoost(
    hThread: Windows.Win32.SystemServices.HANDLE,
    pDisablePriorityBoost: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetThreadPriority(
    hThread: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn ExitThread(
    dwExitCode: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn TerminateThread(
    hThread: Windows.Win32.SystemServices.HANDLE,
    dwExitCode: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetExitCodeThread(
    hThread: Windows.Win32.SystemServices.HANDLE,
    lpExitCode: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SuspendThread(
    hThread: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn ResumeThread(
    hThread: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn TlsAlloc(

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn TlsGetValue(
    dwTlsIndex: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn TlsSetValue(
    dwTlsIndex: {"kind":"UInt32"},
    lpTlsValue: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn TlsFree(
    dwTlsIndex: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateProcessA(
    lpApplicationName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpCommandLine: {"kind""Ptr","child":{"kind":"SByte"}},
    lpProcessAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    lpThreadAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    bInheritHandles: Windows.Win32.SystemServices.BOOL,
    dwCreationFlags: Windows.Win32.WindowsProgramming.PROCESS_CREATION_FLAGS,
    lpEnvironment: {"kind""Ptr","child":{"kind":"Void"}},
    lpCurrentDirectory: {"kind""Ptr","child":{"kind":"SByte"}},
    lpStartupInfo: {"kind""Ptr","child":Windows.Win32.SystemServices.STARTUPINFOA},
    lpProcessInformation: {"kind""Ptr","child":Windows.Win32.SystemServices.PROCESS_INFORMATION},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateProcessW(
    lpApplicationName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpCommandLine: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpProcessAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    lpThreadAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    bInheritHandles: Windows.Win32.SystemServices.BOOL,
    dwCreationFlags: Windows.Win32.WindowsProgramming.PROCESS_CREATION_FLAGS,
    lpEnvironment: {"kind""Ptr","child":{"kind":"Void"}},
    lpCurrentDirectory: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpStartupInfo: {"kind""Ptr","child":Windows.Win32.SystemServices.STARTUPINFOW},
    lpProcessInformation: {"kind""Ptr","child":Windows.Win32.SystemServices.PROCESS_INFORMATION},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetProcessShutdownParameters(
    dwLevel: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetProcessVersion(
    ProcessId: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetStartupInfoW(
    lpStartupInfo: {"kind""Ptr","child":Windows.Win32.SystemServices.STARTUPINFOW},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CreateProcessAsUserW(
    hToken: Windows.Win32.SystemServices.HANDLE,
    lpApplicationName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpCommandLine: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpProcessAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    lpThreadAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    bInheritHandles: Windows.Win32.SystemServices.BOOL,
    dwCreationFlags: {"kind":"UInt32"},
    lpEnvironment: {"kind""Ptr","child":{"kind":"Void"}},
    lpCurrentDirectory: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpStartupInfo: {"kind""Ptr","child":Windows.Win32.SystemServices.STARTUPINFOW},
    lpProcessInformation: {"kind""Ptr","child":Windows.Win32.SystemServices.PROCESS_INFORMATION},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetPriorityClass(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    dwPriorityClass: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetPriorityClass(
    hProcess: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetThreadStackGuarantee(
    StackSizeInBytes: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetProcessId(
    Process: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetThreadId(
    Thread: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn FlushProcessWriteBuffers(

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetProcessIdOfThread(
    Thread: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn InitializeProcThreadAttributeList(
    lpAttributeList: {"kind":"IntPtr"},
    dwAttributeCount: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    lpSize: {"kind""Ptr","child":{"kind":"UIntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn DeleteProcThreadAttributeList(
    lpAttributeList: {"kind":"IntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn UpdateProcThreadAttribute(
    lpAttributeList: {"kind":"IntPtr"},
    dwFlags: {"kind":"UInt32"},
    Attribute: {"kind":"UIntPtr"},
    lpValue: {"kind""Ptr","child":{"kind":"Void"}},
    cbSize: {"kind":"UIntPtr"},
    lpPreviousValue: {"kind""Ptr","child":{"kind":"Void"}},
    lpReturnSize: {"kind""Ptr","child":{"kind":"UIntPtr"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetProcessAffinityUpdateMode(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn QueryProcessAffinityUpdateMode(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    lpdwFlags: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateRemoteThreadEx(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    lpThreadAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    dwStackSize: {"kind":"UIntPtr"},
    lpStartAddress: Windows.Win32.SystemServices.LPTHREAD_START_ROUTINE,
    lpParameter: {"kind""Ptr","child":{"kind":"Void"}},
    dwCreationFlags: {"kind":"UInt32"},
    lpAttributeList: {"kind":"IntPtr"},
    lpThreadId: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetCurrentThreadStackLimits(
    LowLimit: {"kind""Ptr","child":{"kind":"UInt32"}},
    HighLimit: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetProcessMitigationPolicy(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    MitigationPolicy: Windows.Win32.SystemServices.PROCESS_MITIGATION_POLICY,
    lpBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    dwLength: {"kind":"UIntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetProcessMitigationPolicy(
    MitigationPolicy: Windows.Win32.SystemServices.PROCESS_MITIGATION_POLICY,
    lpBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    dwLength: {"kind":"UIntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetThreadTimes(
    hThread: Windows.Win32.SystemServices.HANDLE,
    lpCreationTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    lpExitTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    lpKernelTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    lpUserTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn OpenProcess(
    dwDesiredAccess: {"kind":"UInt32"},
    bInheritHandle: Windows.Win32.SystemServices.BOOL,
    dwProcessId: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetProcessHandleCount(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    pdwHandleCount: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetCurrentProcessorNumber(

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetThreadIdealProcessorEx(
    hThread: Windows.Win32.SystemServices.HANDLE,
    lpIdealProcessor: {"kind""Ptr","child":Windows.Win32.SystemServices.PROCESSOR_NUMBER},
    lpPreviousIdealProcessor: {"kind""Ptr","child":Windows.Win32.SystemServices.PROCESSOR_NUMBER},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetThreadIdealProcessorEx(
    hThread: Windows.Win32.SystemServices.HANDLE,
    lpIdealProcessor: {"kind""Ptr","child":Windows.Win32.SystemServices.PROCESSOR_NUMBER},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetCurrentProcessorNumberEx(
    ProcNumber: {"kind""Ptr","child":Windows.Win32.SystemServices.PROCESSOR_NUMBER},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetProcessPriorityBoost(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    pDisablePriorityBoost: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetProcessPriorityBoost(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    bDisablePriorityBoost: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetThreadIOPendingFlag(
    hThread: Windows.Win32.SystemServices.HANDLE,
    lpIOIsPending: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetThreadInformation(
    hThread: Windows.Win32.SystemServices.HANDLE,
    ThreadInformationClass: Windows.Win32.WindowsProgramming.THREAD_INFORMATION_CLASS,
    ThreadInformation: {"kind""Ptr","child":{"kind":"Void"}},
    ThreadInformationSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetThreadInformation(
    hThread: Windows.Win32.SystemServices.HANDLE,
    ThreadInformationClass: Windows.Win32.WindowsProgramming.THREAD_INFORMATION_CLASS,
    ThreadInformation: {"kind""Ptr","child":{"kind":"Void"}},
    ThreadInformationSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn IsProcessCritical(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    Critical: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetProtectedPolicy(
    PolicyGuid: {"kind""Ptr","child":Guid},
    PolicyValue: {"kind":"UIntPtr"},
    OldPolicyValue: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn QueryProtectedPolicy(
    PolicyGuid: {"kind""Ptr","child":Guid},
    PolicyValue: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetThreadIdealProcessor(
    hThread: Windows.Win32.SystemServices.HANDLE,
    dwIdealProcessor: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetProcessInformation(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    ProcessInformationClass: Windows.Win32.Security.PROCESS_INFORMATION_CLASS,
    ProcessInformation: {"kind""Ptr","child":{"kind":"Void"}},
    ProcessInformationSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetProcessInformation(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    ProcessInformationClass: Windows.Win32.Security.PROCESS_INFORMATION_CLASS,
    ProcessInformation: {"kind""Ptr","child":{"kind":"Void"}},
    ProcessInformationSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CreateProcessAsUserA(
    hToken: Windows.Win32.SystemServices.HANDLE,
    lpApplicationName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpCommandLine: {"kind""Ptr","child":{"kind":"SByte"}},
    lpProcessAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    lpThreadAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    bInheritHandles: Windows.Win32.SystemServices.BOOL,
    dwCreationFlags: {"kind":"UInt32"},
    lpEnvironment: {"kind""Ptr","child":{"kind":"Void"}},
    lpCurrentDirectory: {"kind""Ptr","child":{"kind":"SByte"}},
    lpStartupInfo: {"kind""Ptr","child":Windows.Win32.SystemServices.STARTUPINFOA},
    lpProcessInformation: {"kind""Ptr","child":Windows.Win32.SystemServices.PROCESS_INFORMATION},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetProcessShutdownParameters(
    lpdwLevel: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpdwFlags: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetThreadDescription(
    hThread: Windows.Win32.SystemServices.HANDLE,
    lpThreadDescription: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetThreadDescription(
    hThread: Windows.Win32.SystemServices.HANDLE,
    ppszThreadDescription: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GlobalMemoryStatusEx(
    lpBuffer: {"kind""Ptr","child":Windows.Win32.SystemServices.MEMORYSTATUSEX},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetLogicalProcessorInformation(
    Buffer: {"kind""Ptr","child":Windows.Win32.SystemServices.SYSTEM_LOGICAL_PROCESSOR_INFORMATION},
    ReturnedLength: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetLogicalProcessorInformationEx(
    RelationshipType: Windows.Win32.SystemServices.LOGICAL_PROCESSOR_RELATIONSHIP,
    Buffer: {"kind""Ptr","child":Windows.Win32.SystemServices.SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX},
    ReturnedLength: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetPhysicallyInstalledSystemMemory(
    TotalMemoryInKilobytes: {"kind""Ptr","child":{"kind":"UInt64"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetProcessorSystemCycleTime(
    Group: {"kind":"UInt16"},
    Buffer: {"kind""Ptr","child":Windows.Win32.SystemServices.SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION},
    ReturnedLength: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn QueryThreadCycleTime(
    ThreadHandle: Windows.Win32.SystemServices.HANDLE,
    CycleTime: {"kind""Ptr","child":{"kind":"UInt64"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn QueryProcessCycleTime(
    ProcessHandle: Windows.Win32.SystemServices.HANDLE,
    CycleTime: {"kind""Ptr","child":{"kind":"UInt64"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn QueryIdleProcessorCycleTime(
    BufferLength: {"kind""Ptr","child":{"kind":"UInt32"}},
    ProcessorIdleCycleTime: {"kind""Ptr","child":{"kind":"UInt64"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn QueryIdleProcessorCycleTimeEx(
    Group: {"kind":"UInt16"},
    BufferLength: {"kind""Ptr","child":{"kind":"UInt32"}},
    ProcessorIdleCycleTime: {"kind""Ptr","child":{"kind":"UInt64"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GlobalAlloc(
    uFlags: {"kind":"UInt32"},
    dwBytes: {"kind":"UIntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GlobalReAlloc(
    hMem: {"kind":"IntPtr"},
    dwBytes: {"kind":"UIntPtr"},
    uFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GlobalSize(
    hMem: {"kind":"IntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GlobalUnlock(
    hMem: {"kind":"IntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GlobalLock(
    hMem: {"kind":"IntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GlobalFlags(
    hMem: {"kind":"IntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GlobalHandle(
    pMem: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GlobalFree(
    hMem: {"kind":"IntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GlobalMemoryStatus(
    lpBuffer: {"kind""Ptr","child":Windows.Win32.SystemServices.MEMORYSTATUS},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn LocalAlloc(
    uFlags: {"kind":"UInt32"},
    uBytes: {"kind":"UIntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn LocalReAlloc(
    hMem: {"kind":"IntPtr"},
    uBytes: {"kind":"UIntPtr"},
    uFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn LocalLock(
    hMem: {"kind":"IntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn LocalHandle(
    pMem: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn LocalUnlock(
    hMem: {"kind":"IntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn LocalSize(
    hMem: {"kind":"IntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn LocalFlags(
    hMem: {"kind":"IntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn LocalFree(
    hMem: {"kind":"IntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetProcessAffinityMask(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    lpProcessAffinityMask: {"kind""Ptr","child":{"kind":"UIntPtr"}},
    lpSystemAffinityMask: {"kind""Ptr","child":{"kind":"UIntPtr"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetProcessAffinityMask(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    dwProcessAffinityMask: {"kind":"UIntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetProcessIoCounters(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    lpIoCounters: {"kind""Ptr","child":Windows.Win32.SystemServices.IO_COUNTERS},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetProcessWorkingSetSize(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    lpMinimumWorkingSetSize: {"kind""Ptr","child":{"kind":"UIntPtr"}},
    lpMaximumWorkingSetSize: {"kind""Ptr","child":{"kind":"UIntPtr"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetProcessWorkingSetSize(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    dwMinimumWorkingSetSize: {"kind":"UIntPtr"},
    dwMaximumWorkingSetSize: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SwitchToFiber(
    lpFiber: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn DeleteFiber(
    lpFiber: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn ConvertFiberToThread(

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateFiberEx(
    dwStackCommitSize: {"kind":"UIntPtr"},
    dwStackReserveSize: {"kind":"UIntPtr"},
    dwFlags: {"kind":"UInt32"},
    lpStartAddress: Windows.Win32.WindowsProgramming.LPFIBER_START_ROUTINE,
    lpParameter: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn ConvertThreadToFiberEx(
    lpParameter: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateFiber(
    dwStackSize: {"kind":"UIntPtr"},
    lpStartAddress: Windows.Win32.WindowsProgramming.LPFIBER_START_ROUTINE,
    lpParameter: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn ConvertThreadToFiber(
    lpParameter: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateUmsCompletionList(
    UmsCompletionList: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn DequeueUmsCompletionListItems(
    UmsCompletionList: {"kind""Ptr","child":{"kind":"Void"}},
    WaitTimeOut: {"kind":"UInt32"},
    UmsThreadList: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetUmsCompletionListEvent(
    UmsCompletionList: {"kind""Ptr","child":{"kind":"Void"}},
    UmsCompletionEvent: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn ExecuteUmsThread(
    UmsThread: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn UmsThreadYield(
    SchedulerParam: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn DeleteUmsCompletionList(
    UmsCompletionList: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetCurrentUmsThread(

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetNextUmsListItem(
    UmsContext: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn QueryUmsThreadInformation(
    UmsThread: {"kind""Ptr","child":{"kind":"Void"}},
    UmsThreadInfoClass: Windows.Win32.SystemServices.RTL_UMS_THREAD_INFO_CLASS,
    UmsThreadInformation: {"kind""Ptr","child":{"kind":"Void"}},
    UmsThreadInformationLength: {"kind":"UInt32"},
    ReturnLength: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetUmsThreadInformation(
    UmsThread: {"kind""Ptr","child":{"kind":"Void"}},
    UmsThreadInfoClass: Windows.Win32.SystemServices.RTL_UMS_THREAD_INFO_CLASS,
    UmsThreadInformation: {"kind""Ptr","child":{"kind":"Void"}},
    UmsThreadInformationLength: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn DeleteUmsThreadContext(
    UmsThread: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateUmsThreadContext(
    lpUmsThread: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn EnterUmsSchedulingMode(
    SchedulerStartupInfo: {"kind""Ptr","child":Windows.Win32.SystemServices.UMS_SCHEDULER_STARTUP_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetUmsSystemThreadInformation(
    ThreadHandle: Windows.Win32.SystemServices.HANDLE,
    SystemThreadInfo: {"kind""Ptr","child":Windows.Win32.SystemServices.UMS_SYSTEM_THREAD_INFORMATION},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetThreadAffinityMask(
    hThread: Windows.Win32.SystemServices.HANDLE,
    dwThreadAffinityMask: {"kind":"UIntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetProcessDEPPolicy(
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetProcessDEPPolicy(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    lpFlags: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpPermanent: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn RequestWakeupLatency(
    latency: Windows.Win32.SystemServices.LATENCY_TIME,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn IsSystemResumeAutomatic(

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetThreadExecutionState(
    esFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn PowerCreateRequest(
    Context: {"kind""Ptr","child":Windows.Win32.SystemServices.REASON_CONTEXT},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn PowerSetRequest(
    PowerRequest: Windows.Win32.SystemServices.HANDLE,
    RequestType: Windows.Win32.SystemServices.POWER_REQUEST_TYPE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn PowerClearRequest(
    PowerRequest: Windows.Win32.SystemServices.HANDLE,
    RequestType: Windows.Win32.SystemServices.POWER_REQUEST_TYPE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn PulseEvent(
    hEvent: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetDevicePowerState(
    hDevice: Windows.Win32.SystemServices.HANDLE,
    pfOn: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn LoadModule(
    lpModuleName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpParameterBlock: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn WinExec(
    lpCmdLine: {"kind""Ptr","child":{"kind":"SByte"}},
    uCmdShow: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn ClearCommBreak(
    hFile: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn ClearCommError(
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpErrors: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpStat: {"kind""Ptr","child":Windows.Win32.SystemServices.COMSTAT},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetupComm(
    hFile: Windows.Win32.SystemServices.HANDLE,
    dwInQueue: {"kind":"UInt32"},
    dwOutQueue: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn EscapeCommFunction(
    hFile: Windows.Win32.SystemServices.HANDLE,
    dwFunc: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetCommConfig(
    hCommDev: Windows.Win32.SystemServices.HANDLE,
    lpCC: {"kind""Ptr","child":Windows.Win32.SystemServices.COMMCONFIG},
    lpdwSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetCommMask(
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpEvtMask: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetCommProperties(
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpCommProp: {"kind""Ptr","child":Windows.Win32.SystemServices.COMMPROP},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetCommModemStatus(
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpModemStat: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetCommState(
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpDCB: {"kind""Ptr","child":Windows.Win32.SystemServices.DCB},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetCommTimeouts(
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpCommTimeouts: {"kind""Ptr","child":Windows.Win32.SystemServices.COMMTIMEOUTS},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn PurgeComm(
    hFile: Windows.Win32.SystemServices.HANDLE,
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetCommBreak(
    hFile: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetCommConfig(
    hCommDev: Windows.Win32.SystemServices.HANDLE,
    lpCC: {"kind""Ptr","child":Windows.Win32.SystemServices.COMMCONFIG},
    dwSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetCommMask(
    hFile: Windows.Win32.SystemServices.HANDLE,
    dwEvtMask: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetCommState(
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpDCB: {"kind""Ptr","child":Windows.Win32.SystemServices.DCB},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetCommTimeouts(
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpCommTimeouts: {"kind""Ptr","child":Windows.Win32.SystemServices.COMMTIMEOUTS},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn TransmitCommChar(
    hFile: Windows.Win32.SystemServices.HANDLE,
    cChar: {"kind":"SByte"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn WaitCommEvent(
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpEvtMask: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpOverlapped: {"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-comm-l1-1-1" fn OpenCommPort(
    uPortNumber: {"kind":"UInt32"},
    dwDesiredAccess: {"kind":"UInt32"},
    dwFlagsAndAttributes: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-comm-l1-1-2" fn GetCommPorts(
    lpPortNumbers: {"kind""Ptr","child":{"kind":"UInt32"}},
    uPortNumbersCount: {"kind":"UInt32"},
    puPortNumbersFound: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetTapePosition(
    hDevice: Windows.Win32.SystemServices.HANDLE,
    dwPositionMethod: {"kind":"UInt32"},
    dwPartition: {"kind":"UInt32"},
    dwOffsetLow: {"kind":"UInt32"},
    dwOffsetHigh: {"kind":"UInt32"},
    bImmediate: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetTapePosition(
    hDevice: Windows.Win32.SystemServices.HANDLE,
    dwPositionType: {"kind":"UInt32"},
    lpdwPartition: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpdwOffsetLow: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpdwOffsetHigh: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn PrepareTape(
    hDevice: Windows.Win32.SystemServices.HANDLE,
    dwOperation: {"kind":"UInt32"},
    bImmediate: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn EraseTape(
    hDevice: Windows.Win32.SystemServices.HANDLE,
    dwEraseType: {"kind":"UInt32"},
    bImmediate: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn CreateTapePartition(
    hDevice: Windows.Win32.SystemServices.HANDLE,
    dwPartitionMethod: {"kind":"UInt32"},
    dwCount: {"kind":"UInt32"},
    dwSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn WriteTapemark(
    hDevice: Windows.Win32.SystemServices.HANDLE,
    dwTapemarkType: {"kind":"UInt32"},
    dwTapemarkCount: {"kind":"UInt32"},
    bImmediate: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetTapeStatus(
    hDevice: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetTapeParameters(
    hDevice: Windows.Win32.SystemServices.HANDLE,
    dwOperation: {"kind":"UInt32"},
    lpdwSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpTapeInformation: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetTapeParameters(
    hDevice: Windows.Win32.SystemServices.HANDLE,
    dwOperation: {"kind":"UInt32"},
    lpTapeInformation: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetSystemDEPPolicy(

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateMailslotA(
    lpName: {"kind""Ptr","child":{"kind":"SByte"}},
    nMaxMessageSize: {"kind":"UInt32"},
    lReadTimeout: {"kind":"UInt32"},
    lpSecurityAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateMailslotW(
    lpName: {"kind""Ptr","child":{"kind":"UInt16"}},
    nMaxMessageSize: {"kind":"UInt32"},
    lReadTimeout: {"kind":"UInt32"},
    lpSecurityAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetMailslotInfo(
    hMailslot: Windows.Win32.SystemServices.HANDLE,
    lpMaxMessageSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpNextSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpMessageCount: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpReadTimeout: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetMailslotInfo(
    hMailslot: Windows.Win32.SystemServices.HANDLE,
    lReadTimeout: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SignalObjectAndWait(
    hObjectToSignal: Windows.Win32.SystemServices.HANDLE,
    hObjectToWaitOn: Windows.Win32.SystemServices.HANDLE,
    dwMilliseconds: {"kind":"UInt32"},
    bAlertable: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn BackupRead(
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpBuffer: {"kind""Ptr","child":{"kind":"Byte"}},
    nNumberOfBytesToRead: {"kind":"UInt32"},
    lpNumberOfBytesRead: {"kind""Ptr","child":{"kind":"UInt32"}},
    bAbort: Windows.Win32.SystemServices.BOOL,
    bProcessSecurity: Windows.Win32.SystemServices.BOOL,
    lpContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn BackupSeek(
    hFile: Windows.Win32.SystemServices.HANDLE,
    dwLowBytesToSeek: {"kind":"UInt32"},
    dwHighBytesToSeek: {"kind":"UInt32"},
    lpdwLowByteSeeked: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpdwHighByteSeeked: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn BackupWrite(
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpBuffer: {"kind""Ptr","child":{"kind":"Byte"}},
    nNumberOfBytesToWrite: {"kind":"UInt32"},
    lpNumberOfBytesWritten: {"kind""Ptr","child":{"kind":"UInt32"}},
    bAbort: Windows.Win32.SystemServices.BOOL,
    bProcessSecurity: Windows.Win32.SystemServices.BOOL,
    lpContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateSemaphoreA(
    lpSemaphoreAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    lInitialCount: {"kind":"Int32"},
    lMaximumCount: {"kind":"Int32"},
    lpName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateSemaphoreExA(
    lpSemaphoreAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    lInitialCount: {"kind":"Int32"},
    lMaximumCount: {"kind":"Int32"},
    lpName: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},
    dwDesiredAccess: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateFileMappingA(
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpFileMappingAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    flProtect: {"kind":"UInt32"},
    dwMaximumSizeHigh: {"kind":"UInt32"},
    dwMaximumSizeLow: {"kind":"UInt32"},
    lpName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateFileMappingNumaA(
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpFileMappingAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    flProtect: {"kind":"UInt32"},
    dwMaximumSizeHigh: {"kind":"UInt32"},
    dwMaximumSizeLow: {"kind":"UInt32"},
    lpName: {"kind""Ptr","child":{"kind":"SByte"}},
    nndPreferred: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn OpenFileMappingA(
    dwDesiredAccess: {"kind":"UInt32"},
    bInheritHandle: Windows.Win32.SystemServices.BOOL,
    lpName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn LoadPackagedLibrary(
    lpwLibFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Reserved: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn QueryFullProcessImageNameA(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    dwFlags: {"kind":"UInt32"},
    lpExeName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpdwSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn QueryFullProcessImageNameW(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    dwFlags: {"kind":"UInt32"},
    lpExeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpdwSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetDllDirectoryA(
    lpPathName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetDllDirectoryW(
    lpPathName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetDllDirectoryA(
    nBufferLength: {"kind":"UInt32"},
    lpBuffer: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetDllDirectoryW(
    nBufferLength: {"kind":"UInt32"},
    lpBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetNamedPipeHandleStateA(
    hNamedPipe: Windows.Win32.SystemServices.HANDLE,
    lpState: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpCurInstances: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpMaxCollectionCount: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpCollectDataTimeout: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpUserName: {"kind""Ptr","child":{"kind":"SByte"}},
    nMaxUserNameSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CallNamedPipeA(
    lpNamedPipeName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpInBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    nInBufferSize: {"kind":"UInt32"},
    lpOutBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    nOutBufferSize: {"kind":"UInt32"},
    lpBytesRead: {"kind""Ptr","child":{"kind":"UInt32"}},
    nTimeOut: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetNamedPipeClientComputerNameA(
    Pipe: Windows.Win32.SystemServices.HANDLE,
    ClientComputerName: {"kind""Ptr","child":{"kind":"SByte"}},
    ClientComputerNameLength: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetNamedPipeClientProcessId(
    Pipe: Windows.Win32.SystemServices.HANDLE,
    ClientProcessId: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetNamedPipeClientSessionId(
    Pipe: Windows.Win32.SystemServices.HANDLE,
    ClientSessionId: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetNamedPipeServerProcessId(
    Pipe: Windows.Win32.SystemServices.HANDLE,
    ServerProcessId: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetNamedPipeServerSessionId(
    Pipe: Windows.Win32.SystemServices.HANDLE,
    ServerSessionId: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ClearEventLogA(
    hEventLog: Windows.Win32.SystemServices.HANDLE,
    lpBackupFileName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ClearEventLogW(
    hEventLog: Windows.Win32.SystemServices.HANDLE,
    lpBackupFileName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn BackupEventLogA(
    hEventLog: Windows.Win32.SystemServices.HANDLE,
    lpBackupFileName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn BackupEventLogW(
    hEventLog: Windows.Win32.SystemServices.HANDLE,
    lpBackupFileName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CloseEventLog(
    hEventLog: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn DeregisterEventSource(
    hEventLog: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn NotifyChangeEventLog(
    hEventLog: Windows.Win32.SystemServices.HANDLE,
    hEvent: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetNumberOfEventLogRecords(
    hEventLog: Windows.Win32.SystemServices.HANDLE,
    NumberOfRecords: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetOldestEventLogRecord(
    hEventLog: Windows.Win32.SystemServices.HANDLE,
    OldestRecord: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn OpenEventLogA(
    lpUNCServerName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpSourceName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn OpenEventLogW(
    lpUNCServerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpSourceName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn RegisterEventSourceA(
    lpUNCServerName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpSourceName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn RegisterEventSourceW(
    lpUNCServerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpSourceName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn OpenBackupEventLogA(
    lpUNCServerName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpFileName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn OpenBackupEventLogW(
    lpUNCServerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ReadEventLogA(
    hEventLog: Windows.Win32.SystemServices.HANDLE,
    dwReadFlags: {"kind":"UInt32"},
    dwRecordOffset: {"kind":"UInt32"},
    lpBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    nNumberOfBytesToRead: {"kind":"UInt32"},
    pnBytesRead: {"kind""Ptr","child":{"kind":"UInt32"}},
    pnMinNumberOfBytesNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ReadEventLogW(
    hEventLog: Windows.Win32.SystemServices.HANDLE,
    dwReadFlags: {"kind":"UInt32"},
    dwRecordOffset: {"kind":"UInt32"},
    lpBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    nNumberOfBytesToRead: {"kind":"UInt32"},
    pnBytesRead: {"kind""Ptr","child":{"kind":"UInt32"}},
    pnMinNumberOfBytesNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ReportEventA(
    hEventLog: Windows.Win32.SystemServices.HANDLE,
    wType: {"kind":"UInt16"},
    wCategory: {"kind":"UInt16"},
    dwEventID: {"kind":"UInt32"},
    lpUserSid: {"kind""Ptr","child":{"kind":"Void"}},
    wNumStrings: {"kind":"UInt16"},
    dwDataSize: {"kind":"UInt32"},
    lpStrings: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},
    lpRawData: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ReportEventW(
    hEventLog: Windows.Win32.SystemServices.HANDLE,
    wType: {"kind":"UInt16"},
    wCategory: {"kind":"UInt16"},
    dwEventID: {"kind":"UInt32"},
    lpUserSid: {"kind""Ptr","child":{"kind":"Void"}},
    wNumStrings: {"kind":"UInt16"},
    dwDataSize: {"kind":"UInt32"},
    lpStrings: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    lpRawData: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetEventLogInformation(
    hEventLog: Windows.Win32.SystemServices.HANDLE,
    dwInfoLevel: {"kind":"UInt32"},
    lpBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    cbBufSize: {"kind":"UInt32"},
    pcbBytesNeeded: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn MapViewOfFileExNuma(
    hFileMappingObject: Windows.Win32.SystemServices.HANDLE,
    dwDesiredAccess: {"kind":"UInt32"},
    dwFileOffsetHigh: {"kind":"UInt32"},
    dwFileOffsetLow: {"kind":"UInt32"},
    dwNumberOfBytesToMap: {"kind":"UIntPtr"},
    lpBaseAddress: {"kind""Ptr","child":{"kind":"Void"}},
    nndPreferred: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn IsBadReadPtr(
    lp: {"kind""Ptr","child":{"kind":"Void"}},
    ucb: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn IsBadWritePtr(
    lp: {"kind""Ptr","child":{"kind":"Void"}},
    ucb: {"kind":"UIntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn IsBadCodePtr(
    lpfn: Windows.Win32.SystemServices.FARPROC,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn IsBadStringPtrA(
    lpsz: {"kind""Ptr","child":{"kind":"SByte"}},
    ucchMax: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn IsBadStringPtrW(
    lpsz: {"kind""Ptr","child":{"kind":"UInt16"}},
    ucchMax: {"kind":"UIntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn BuildCommDCBA(
    lpDef: {"kind""Ptr","child":{"kind":"SByte"}},
    lpDCB: {"kind""Ptr","child":Windows.Win32.SystemServices.DCB},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn BuildCommDCBW(
    lpDef: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpDCB: {"kind""Ptr","child":Windows.Win32.SystemServices.DCB},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn BuildCommDCBAndTimeoutsA(
    lpDef: {"kind""Ptr","child":{"kind":"SByte"}},
    lpDCB: {"kind""Ptr","child":Windows.Win32.SystemServices.DCB},
    lpCommTimeouts: {"kind""Ptr","child":Windows.Win32.SystemServices.COMMTIMEOUTS},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn BuildCommDCBAndTimeoutsW(
    lpDef: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpDCB: {"kind""Ptr","child":Windows.Win32.SystemServices.DCB},
    lpCommTimeouts: {"kind""Ptr","child":Windows.Win32.SystemServices.COMMTIMEOUTS},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CommConfigDialogA(
    lpszName: {"kind""Ptr","child":{"kind":"SByte"}},
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    lpCC: {"kind""Ptr","child":Windows.Win32.SystemServices.COMMCONFIG},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CommConfigDialogW(
    lpszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    lpCC: {"kind""Ptr","child":Windows.Win32.SystemServices.COMMCONFIG},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetDefaultCommConfigA(
    lpszName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpCC: {"kind""Ptr","child":Windows.Win32.SystemServices.COMMCONFIG},
    lpdwSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetDefaultCommConfigW(
    lpszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpCC: {"kind""Ptr","child":Windows.Win32.SystemServices.COMMCONFIG},
    lpdwSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetDefaultCommConfigA(
    lpszName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpCC: {"kind""Ptr","child":Windows.Win32.SystemServices.COMMCONFIG},
    dwSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetDefaultCommConfigW(
    lpszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpCC: {"kind""Ptr","child":Windows.Win32.SystemServices.COMMCONFIG},
    dwSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CreateProcessWithLogonW(
    lpUsername: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpDomain: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpPassword: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwLogonFlags: {"kind":"UInt32"},
    lpApplicationName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpCommandLine: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwCreationFlags: {"kind":"UInt32"},
    lpEnvironment: {"kind""Ptr","child":{"kind":"Void"}},
    lpCurrentDirectory: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpStartupInfo: {"kind""Ptr","child":Windows.Win32.SystemServices.STARTUPINFOW},
    lpProcessInformation: {"kind""Ptr","child":Windows.Win32.SystemServices.PROCESS_INFORMATION},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CreateProcessWithTokenW(
    hToken: Windows.Win32.SystemServices.HANDLE,
    dwLogonFlags: {"kind":"UInt32"},
    lpApplicationName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpCommandLine: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwCreationFlags: {"kind":"UInt32"},
    lpEnvironment: {"kind""Ptr","child":{"kind":"Void"}},
    lpCurrentDirectory: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpStartupInfo: {"kind""Ptr","child":Windows.Win32.SystemServices.STARTUPINFOW},
    lpProcessInformation: {"kind""Ptr","child":Windows.Win32.SystemServices.PROCESS_INFORMATION},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn RegisterWaitForSingleObject(
    phNewWaitObject: {"kind""Ptr","child":{"kind":"IntPtr"}},
    hObject: Windows.Win32.SystemServices.HANDLE,
    Callback: Windows.Win32.SystemServices.WAITORTIMERCALLBACK,
    Context: {"kind""Ptr","child":{"kind":"Void"}},
    dwMilliseconds: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn UnregisterWait(
    WaitHandle: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn BindIoCompletionCallback(
    FileHandle: Windows.Win32.SystemServices.HANDLE,
    Function: Windows.Win32.FileSystem.LPOVERLAPPED_COMPLETION_ROUTINE,
    Flags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn DeleteTimerQueue(
    TimerQueue: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateBoundaryDescriptorA(
    Name: {"kind""Ptr","child":{"kind":"SByte"}},
    Flags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn AddIntegrityLabelToBoundaryDescriptor(
    BoundaryDescriptor: {"kind""Ptr","child":Windows.Win32.SystemServices.HANDLE},
    IntegrityLabel: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetSystemPowerState(
    fSuspend: Windows.Win32.SystemServices.BOOL,
    fForce: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetSystemPowerStatus(
    lpSystemPowerStatus: {"kind""Ptr","child":Windows.Win32.SystemServices.SYSTEM_POWER_STATUS},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn MapUserPhysicalPagesScatter(
    VirtualAddresses: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    NumberOfPages: {"kind":"UIntPtr"},
    PageArray: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateJobObjectA(
    lpJobAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    lpName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn OpenJobObjectA(
    dwDesiredAccess: {"kind":"UInt32"},
    bInheritHandle: Windows.Win32.SystemServices.BOOL,
    lpName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetActiveProcessorGroupCount(

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetMaximumProcessorGroupCount(

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetActiveProcessorCount(
    GroupNumber: {"kind":"UInt16"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetMaximumProcessorCount(
    GroupNumber: {"kind":"UInt16"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetNumaProcessorNode(
    Processor: {"kind":"Byte"},
    NodeNumber: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetNumaNodeNumberFromHandle(
    hFile: Windows.Win32.SystemServices.HANDLE,
    NodeNumber: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetNumaProcessorNodeEx(
    Processor: {"kind""Ptr","child":Windows.Win32.SystemServices.PROCESSOR_NUMBER},
    NodeNumber: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetNumaNodeProcessorMask(
    Node: {"kind":"Byte"},
    ProcessorMask: {"kind""Ptr","child":{"kind":"UInt64"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetNumaAvailableMemoryNode(
    Node: {"kind":"Byte"},
    AvailableBytes: {"kind""Ptr","child":{"kind":"UInt64"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetNumaAvailableMemoryNodeEx(
    Node: {"kind":"UInt16"},
    AvailableBytes: {"kind""Ptr","child":{"kind":"UInt64"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetNumaProximityNode(
    ProximityId: {"kind":"UInt32"},
    NodeNumber: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn AddSecureMemoryCacheCallback(
    pfnCallBack: Windows.Win32.SystemServices.PSECURE_MEMORY_CACHE_CALLBACK,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn RemoveSecureMemoryCacheCallback(
    pfnCallBack: Windows.Win32.SystemServices.PSECURE_MEMORY_CACHE_CALLBACK,

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn InitiateSystemShutdownA(
    lpMachineName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpMessage: {"kind""Ptr","child":{"kind":"SByte"}},
    dwTimeout: {"kind":"UInt32"},
    bForceAppsClosed: Windows.Win32.SystemServices.BOOL,
    bRebootAfterShutdown: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn InitiateSystemShutdownW(
    lpMachineName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpMessage: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwTimeout: {"kind":"UInt32"},
    bForceAppsClosed: Windows.Win32.SystemServices.BOOL,
    bRebootAfterShutdown: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AbortSystemShutdownA(
    lpMachineName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AbortSystemShutdownW(
    lpMachineName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn InitiateSystemShutdownExA(
    lpMachineName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpMessage: {"kind""Ptr","child":{"kind":"SByte"}},
    dwTimeout: {"kind":"UInt32"},
    bForceAppsClosed: Windows.Win32.SystemServices.BOOL,
    bRebootAfterShutdown: Windows.Win32.SystemServices.BOOL,
    dwReason: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn InitiateSystemShutdownExW(
    lpMachineName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpMessage: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwTimeout: {"kind":"UInt32"},
    bForceAppsClosed: Windows.Win32.SystemServices.BOOL,
    bRebootAfterShutdown: Windows.Win32.SystemServices.BOOL,
    dwReason: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn InitiateShutdownA(
    lpMachineName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpMessage: {"kind""Ptr","child":{"kind":"SByte"}},
    dwGracePeriod: {"kind":"UInt32"},
    dwShutdownFlags: {"kind":"UInt32"},
    dwReason: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn InitiateShutdownW(
    lpMachineName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpMessage: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwGracePeriod: {"kind":"UInt32"},
    dwShutdownFlags: {"kind":"UInt32"},
    dwReason: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn NtQueryInformationProcess(
    ProcessHandle: Windows.Win32.SystemServices.HANDLE,
    ProcessInformationClass: Windows.Win32.WindowsProgramming.PROCESSINFOCLASS,
    ProcessInformation: {"kind""Ptr","child":{"kind":"Void"}},
    ProcessInformationLength: {"kind":"UInt32"},
    ReturnLength: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn NtQueryInformationThread(
    ThreadHandle: Windows.Win32.SystemServices.HANDLE,
    ThreadInformationClass: Windows.Win32.WindowsProgramming.THREADINFOCLASS,
    ThreadInformation: {"kind""Ptr","child":{"kind":"Void"}},
    ThreadInformationLength: {"kind":"UInt32"},
    ReturnLength: {"kind""Ptr","child":{"kind":"UInt32"}},
],

"unicode_aliases": [
     "ENUMRESLANGPROC"
     "PGET_MODULE_HANDLE_EX"
     "PRINTER_INFO_1"
     "PRINTER_INFO_2"
     "PRINTER_INFO_4"
     "PRINTER_INFO_5"
     "PRINTER_INFO_7"
     "PRINTER_INFO_8"
     "PRINTER_INFO_9"
     "JOB_INFO_1"
     "JOB_INFO_2"
     "JOB_INFO_4"
     "ADDJOB_INFO_1"
     "DRIVER_INFO_1"
     "DRIVER_INFO_2"
     "DRIVER_INFO_3"
     "DRIVER_INFO_4"
     "DRIVER_INFO_5"
     "DRIVER_INFO_6"
     "DRIVER_INFO_8"
     "DOC_INFO_1"
     "FORM_INFO_1"
     "FORM_INFO_2"
     "DOC_INFO_2"
     "DOC_INFO_3"
     "PRINTPROCESSOR_INFO_1"
     "PORT_INFO_1"
     "PORT_INFO_2"
     "PORT_INFO_3"
     "MONITOR_INFO_1"
     "MONITOR_INFO_2"
     "DATATYPES_INFO_1"
     "PRINTER_DEFAULTS"
     "PRINTER_ENUM_VALUES"
     "PROVIDOR_INFO_1"
     "PROVIDOR_INFO_2"
     "PRINTER_OPTIONS"
     "PRINTER_CONNECTION_INFO_1"
     "CORE_PRINTER_DRIVER"
     "DEV_BROADCAST_PORT_"
     "DEV_BROADCAST_DEVICEINTERFACE_"
     "STARTUPINFO"
     "STARTUPINFOEX"
     "RegisterDeviceNotification"
     "CreateMutex"
     "CreateEvent"
     "OpenEvent"
     "CreateMutexEx"
     "CreateEventEx"
     "CreateSemaphoreEx"
     "CreateSemaphore"
     "CreateJobObject"
     "OpenJobObject"
     "CreateBoundaryDescriptor"
     "GetNamedPipeClientComputerName"
     "GetNamedPipeHandleState"
     "CallNamedPipe"
     "CreateFileMapping"
     "OpenFileMapping"
     "CreateFileMappingNuma"
     "LoadEnclaveImage"
     "GetModuleFileName"
     "GetModuleHandle"
     "GetModuleHandleEx"
     "LoadLibraryEx"
     "LoadLibrary"
     "ReadConsoleInput"
     "PeekConsoleInput"
     "ReadConsole"
     "WriteConsole"
     "FillConsoleOutputCharacter"
     "WriteConsoleOutputCharacter"
     "ReadConsoleOutputCharacter"
     "WriteConsoleInput"
     "ScrollConsoleScreenBuffer"
     "WriteConsoleOutput"
     "ReadConsoleOutput"
     "GetConsoleTitle"
     "GetConsoleOriginalTitle"
     "SetConsoleTitle"
     "AddConsoleAlias"
     "GetConsoleAlias"
     "GetConsoleAliasesLength"
     "GetConsoleAliasExesLength"
     "GetConsoleAliases"
     "GetConsoleAliasExes"
     "ExpungeConsoleCommandHistory"
     "SetConsoleNumberOfCommands"
     "GetConsoleCommandHistoryLength"
     "GetConsoleCommandHistory"
     "EnumPrinters"
     "OpenPrinter"
     "ResetPrinter"
     "SetJob"
     "GetJob"
     "EnumJobs"
     "AddPrinter"
     "SetPrinter"
     "GetPrinter"
     "AddPrinterDriver"
     "AddPrinterDriverEx"
     "EnumPrinterDrivers"
     "GetPrinterDriver"
     "GetPrinterDriverDirectory"
     "DeletePrinterDriver"
     "DeletePrinterDriverEx"
     "AddPrintProcessor"
     "EnumPrintProcessors"
     "GetPrintProcessorDirectory"
     "EnumPrintProcessorDatatypes"
     "DeletePrintProcessor"
     "StartDocPrinter"
     "AddJob"
     "DocumentProperties"
     "AdvancedDocumentProperties"
     "GetPrinterData"
     "GetPrinterDataEx"
     "EnumPrinterData"
     "EnumPrinterDataEx"
     "EnumPrinterKey"
     "SetPrinterData"
     "SetPrinterDataEx"
     "DeletePrinterData"
     "DeletePrinterDataEx"
     "DeletePrinterKey"
     "PrinterMessageBox"
     "AddForm"
     "DeleteForm"
     "GetForm"
     "SetForm"
     "EnumForms"
     "EnumMonitors"
     "AddMonitor"
     "DeleteMonitor"
     "EnumPorts"
     "AddPort"
     "ConfigurePort"
     "DeletePort"
     "GetDefaultPrinter"
     "SetDefaultPrinter"
     "SetPort"
     "AddPrinterConnection"
     "DeletePrinterConnection"
     "AddPrintProvidor"
     "DeletePrintProvidor"
     "IsValidDevmode"
     "OpenPrinter2"
     "AddPrinterConnection2"
     "InstallPrinterDriverFromPackage"
     "UploadPrinterDriverPackage"
     "GetCorePrinterDrivers"
     "CorePrinterDriverInstalled"
     "GetPrinterDriverPackagePath"
     "DeletePrinterDriverPackage"
     "GetPrinterDriver2"
     "GetCommandLine"
     "FreeEnvironmentStrings"
     "GetEnvironmentVariable"
     "SetEnvironmentVariable"
     "NeedCurrentDirectoryForExePath"
     "CreateProcess"
     "CreateProcessAsUser"
     "CreateMailslot"
     "QueryFullProcessImageName"
     "SetDllDirectory"
     "GetDllDirectory"
     "ClearEventLog"
     "BackupEventLog"
     "OpenEventLog"
     "RegisterEventSource"
     "OpenBackupEventLog"
     "ReadEventLog"
     "ReportEvent"
     "IsBadStringPtr"
     "BuildCommDCB"
     "BuildCommDCBAndTimeouts"
     "CommConfigDialog"
     "GetDefaultCommConfig"
     "SetDefaultCommConfig"
     "InitiateSystemShutdown"
     "AbortSystemShutdown"
     "InitiateSystemShutdownEx"
     "InitiateShutdown"
]}
