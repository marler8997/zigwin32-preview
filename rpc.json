{
"constants": [
     {
         "name": "MidlInterceptionInfoVersionOne"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "MidlWinrtTypeSerializationInfoVersionOne"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
],

"types_definitions": [
// --------------------------------------------------------
// Type: NDR_SCONTEXT_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDR_SCONTEXT_1 = extern struct {
    pad: {"kind":"Array","child": {"kind""Ptr","child":{"kind":"Void"}}},
    userContext: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: RPC_BINDING_VECTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_BINDING_VECTOR = extern struct {
    Count: {"kind":"UInt32"},
    BindingH: {"kind":"Array","child": {"kind""Ptr","child":{"kind":"Void"}}},
};
// --------------------------------------------------------
// Type: UUID_VECTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UUID_VECTOR = extern struct {
    Count: {"kind":"UInt32"},
    Uuid: {"kind":"Array","child": {"kind""Ptr","child":Guid}},
};
// --------------------------------------------------------
// Type: RPC_IF_ID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_IF_ID = extern struct {
    Uuid: Guid,
    VersMajor: {"kind":"UInt16"},
    VersMinor: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: RPC_PROTSEQ_VECTORA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_PROTSEQ_VECTORA = extern struct {
    Count: {"kind":"UInt32"},
    Protseq: {"kind":"Array","child": {"kind""Ptr","child":{"kind":"Byte"}}},
};
// --------------------------------------------------------
// Type: RPC_PROTSEQ_VECTORW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_PROTSEQ_VECTORW = extern struct {
    Count: {"kind":"UInt32"},
    Protseq: {"kind":"Array","child": {"kind""Ptr","child":{"kind":"UInt16"}}},
};
// --------------------------------------------------------
// Type: RPC_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_POLICY = extern struct {
    Length: {"kind":"UInt32"},
    EndpointFlags: {"kind":"UInt32"},
    NICFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: RPC_OBJECT_INQ_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_OBJECT_INQ_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RPC_IF_CALLBACK_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_IF_CALLBACK_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RPC_SECURITY_CALLBACK_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_SECURITY_CALLBACK_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RPC_STATS_VECTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_STATS_VECTOR = extern struct {
    Count: {"kind":"UInt32"},
    Stats: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: RPC_IF_ID_VECTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_IF_ID_VECTOR = extern struct {
    Count: {"kind":"UInt32"},
    IfId: {"kind":"Array","child": {"kind""Ptr","child":Windows.Win32.Rpc.RPC_IF_ID}},
};
// --------------------------------------------------------
// Type: RPC_SECURITY_QOS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_SECURITY_QOS = extern struct {
    Version: {"kind":"UInt32"},
    Capabilities: {"kind":"UInt32"},
    IdentityTracking: {"kind":"UInt32"},
    ImpersonationType: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: RPC_HTTP_TRANSPORT_CREDENTIALS_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_HTTP_TRANSPORT_CREDENTIALS_W = extern struct {
    TransportCredentials: {"kind""Ptr","child":Windows.Win32.Security.SEC_WINNT_AUTH_IDENTITY_W},
    Flags: {"kind":"UInt32"},
    AuthenticationTarget: {"kind":"UInt32"},
    NumberOfAuthnSchemes: {"kind":"UInt32"},
    AuthnSchemes: {"kind""Ptr","child":{"kind":"UInt32"}},
    ServerCertificateSubject: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: RPC_HTTP_TRANSPORT_CREDENTIALS_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_HTTP_TRANSPORT_CREDENTIALS_A = extern struct {
    TransportCredentials: {"kind""Ptr","child":Windows.Win32.Security.SEC_WINNT_AUTH_IDENTITY_A},
    Flags: {"kind":"UInt32"},
    AuthenticationTarget: {"kind":"UInt32"},
    NumberOfAuthnSchemes: {"kind":"UInt32"},
    AuthnSchemes: {"kind""Ptr","child":{"kind":"UInt32"}},
    ServerCertificateSubject: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W = extern struct {
    TransportCredentials: {"kind""Ptr","child":Windows.Win32.Security.SEC_WINNT_AUTH_IDENTITY_W},
    Flags: {"kind":"UInt32"},
    AuthenticationTarget: {"kind":"UInt32"},
    NumberOfAuthnSchemes: {"kind":"UInt32"},
    AuthnSchemes: {"kind""Ptr","child":{"kind":"UInt32"}},
    ServerCertificateSubject: {"kind""Ptr","child":{"kind":"UInt16"}},
    ProxyCredentials: {"kind""Ptr","child":Windows.Win32.Security.SEC_WINNT_AUTH_IDENTITY_W},
    NumberOfProxyAuthnSchemes: {"kind":"UInt32"},
    ProxyAuthnSchemes: {"kind""Ptr","child":{"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A = extern struct {
    TransportCredentials: {"kind""Ptr","child":Windows.Win32.Security.SEC_WINNT_AUTH_IDENTITY_A},
    Flags: {"kind":"UInt32"},
    AuthenticationTarget: {"kind":"UInt32"},
    NumberOfAuthnSchemes: {"kind":"UInt32"},
    AuthnSchemes: {"kind""Ptr","child":{"kind":"UInt32"}},
    ServerCertificateSubject: {"kind""Ptr","child":{"kind":"Byte"}},
    ProxyCredentials: {"kind""Ptr","child":Windows.Win32.Security.SEC_WINNT_AUTH_IDENTITY_A},
    NumberOfProxyAuthnSchemes: {"kind":"UInt32"},
    ProxyAuthnSchemes: {"kind""Ptr","child":{"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W = extern struct {
    TransportCredentials: {"kind""Ptr","child":{"kind":"Void"}},
    Flags: {"kind":"UInt32"},
    AuthenticationTarget: {"kind":"UInt32"},
    NumberOfAuthnSchemes: {"kind":"UInt32"},
    AuthnSchemes: {"kind""Ptr","child":{"kind":"UInt32"}},
    ServerCertificateSubject: {"kind""Ptr","child":{"kind":"UInt16"}},
    ProxyCredentials: {"kind""Ptr","child":{"kind":"Void"}},
    NumberOfProxyAuthnSchemes: {"kind":"UInt32"},
    ProxyAuthnSchemes: {"kind""Ptr","child":{"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A = extern struct {
    TransportCredentials: {"kind""Ptr","child":{"kind":"Void"}},
    Flags: {"kind":"UInt32"},
    AuthenticationTarget: {"kind":"UInt32"},
    NumberOfAuthnSchemes: {"kind":"UInt32"},
    AuthnSchemes: {"kind""Ptr","child":{"kind":"UInt32"}},
    ServerCertificateSubject: {"kind""Ptr","child":{"kind":"Byte"}},
    ProxyCredentials: {"kind""Ptr","child":{"kind":"Void"}},
    NumberOfProxyAuthnSchemes: {"kind":"UInt32"},
    ProxyAuthnSchemes: {"kind""Ptr","child":{"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: RPC_SECURITY_QOS_V2_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_SECURITY_QOS_V2_W = extern struct {
    Version: {"kind":"UInt32"},
    Capabilities: {"kind":"UInt32"},
    IdentityTracking: {"kind":"UInt32"},
    ImpersonationType: {"kind":"UInt32"},
    AdditionalSecurityInfoType: {"kind":"UInt32"},
    u: Windows.Win32.Rpc.RPC_SECURITY_QOS_V2_W+_u_e__Union,
    // --------------------------------------------------------
    // Type: _u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: RPC_SECURITY_QOS_V2_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_SECURITY_QOS_V2_A = extern struct {
    Version: {"kind":"UInt32"},
    Capabilities: {"kind":"UInt32"},
    IdentityTracking: {"kind":"UInt32"},
    ImpersonationType: {"kind":"UInt32"},
    AdditionalSecurityInfoType: {"kind":"UInt32"},
    u: Windows.Win32.Rpc.RPC_SECURITY_QOS_V2_A+_u_e__Union,
    // --------------------------------------------------------
    // Type: _u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: RPC_SECURITY_QOS_V3_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_SECURITY_QOS_V3_W = extern struct {
    Version: {"kind":"UInt32"},
    Capabilities: {"kind":"UInt32"},
    IdentityTracking: {"kind":"UInt32"},
    ImpersonationType: {"kind":"UInt32"},
    AdditionalSecurityInfoType: {"kind":"UInt32"},
    u: Windows.Win32.Rpc.RPC_SECURITY_QOS_V3_W+_u_e__Union,
    Sid: {"kind""Ptr","child":{"kind":"Void"}},
    // --------------------------------------------------------
    // Type: _u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: RPC_SECURITY_QOS_V3_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_SECURITY_QOS_V3_A = extern struct {
    Version: {"kind":"UInt32"},
    Capabilities: {"kind":"UInt32"},
    IdentityTracking: {"kind":"UInt32"},
    ImpersonationType: {"kind":"UInt32"},
    AdditionalSecurityInfoType: {"kind":"UInt32"},
    u: Windows.Win32.Rpc.RPC_SECURITY_QOS_V3_A+_u_e__Union,
    Sid: {"kind""Ptr","child":{"kind":"Void"}},
    // --------------------------------------------------------
    // Type: _u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: RPC_SECURITY_QOS_V4_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_SECURITY_QOS_V4_W = extern struct {
    Version: {"kind":"UInt32"},
    Capabilities: {"kind":"UInt32"},
    IdentityTracking: {"kind":"UInt32"},
    ImpersonationType: {"kind":"UInt32"},
    AdditionalSecurityInfoType: {"kind":"UInt32"},
    u: Windows.Win32.Rpc.RPC_SECURITY_QOS_V4_W+_u_e__Union,
    Sid: {"kind""Ptr","child":{"kind":"Void"}},
    EffectiveOnly: {"kind":"UInt32"},
    // --------------------------------------------------------
    // Type: _u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: RPC_SECURITY_QOS_V4_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_SECURITY_QOS_V4_A = extern struct {
    Version: {"kind":"UInt32"},
    Capabilities: {"kind":"UInt32"},
    IdentityTracking: {"kind":"UInt32"},
    ImpersonationType: {"kind":"UInt32"},
    AdditionalSecurityInfoType: {"kind":"UInt32"},
    u: Windows.Win32.Rpc.RPC_SECURITY_QOS_V4_A+_u_e__Union,
    Sid: {"kind""Ptr","child":{"kind":"Void"}},
    EffectiveOnly: {"kind":"UInt32"},
    // --------------------------------------------------------
    // Type: _u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: RPC_SECURITY_QOS_V5_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_SECURITY_QOS_V5_W = extern struct {
    Version: {"kind":"UInt32"},
    Capabilities: {"kind":"UInt32"},
    IdentityTracking: {"kind":"UInt32"},
    ImpersonationType: {"kind":"UInt32"},
    AdditionalSecurityInfoType: {"kind":"UInt32"},
    u: Windows.Win32.Rpc.RPC_SECURITY_QOS_V5_W+_u_e__Union,
    Sid: {"kind""Ptr","child":{"kind":"Void"}},
    EffectiveOnly: {"kind":"UInt32"},
    ServerSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    // --------------------------------------------------------
    // Type: _u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: RPC_SECURITY_QOS_V5_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_SECURITY_QOS_V5_A = extern struct {
    Version: {"kind":"UInt32"},
    Capabilities: {"kind":"UInt32"},
    IdentityTracking: {"kind":"UInt32"},
    ImpersonationType: {"kind":"UInt32"},
    AdditionalSecurityInfoType: {"kind":"UInt32"},
    u: Windows.Win32.Rpc.RPC_SECURITY_QOS_V5_A+_u_e__Union,
    Sid: {"kind""Ptr","child":{"kind":"Void"}},
    EffectiveOnly: {"kind":"UInt32"},
    ServerSecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    // --------------------------------------------------------
    // Type: _u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: RPC_BINDING_HANDLE_TEMPLATE_V1_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_BINDING_HANDLE_TEMPLATE_V1_W = extern struct {
    Version: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    ProtocolSequence: {"kind":"UInt32"},
    NetworkAddress: {"kind""Ptr","child":{"kind":"UInt16"}},
    StringEndpoint: {"kind""Ptr","child":{"kind":"UInt16"}},
    u1: Windows.Win32.Rpc.RPC_BINDING_HANDLE_TEMPLATE_V1_W+_u1_e__Union,
    ObjectUuid: Guid,
    // --------------------------------------------------------
    // Type: _u1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u1_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: RPC_BINDING_HANDLE_TEMPLATE_V1_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_BINDING_HANDLE_TEMPLATE_V1_A = extern struct {
    Version: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    ProtocolSequence: {"kind":"UInt32"},
    NetworkAddress: {"kind""Ptr","child":{"kind":"Byte"}},
    StringEndpoint: {"kind""Ptr","child":{"kind":"Byte"}},
    u1: Windows.Win32.Rpc.RPC_BINDING_HANDLE_TEMPLATE_V1_A+_u1_e__Union,
    ObjectUuid: Guid,
    // --------------------------------------------------------
    // Type: _u1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u1_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: RPC_BINDING_HANDLE_SECURITY_V1_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_BINDING_HANDLE_SECURITY_V1_W = extern struct {
    Version: {"kind":"UInt32"},
    ServerPrincName: {"kind""Ptr","child":{"kind":"UInt16"}},
    AuthnLevel: {"kind":"UInt32"},
    AuthnSvc: {"kind":"UInt32"},
    AuthIdentity: {"kind""Ptr","child":Windows.Win32.Security.SEC_WINNT_AUTH_IDENTITY_W},
    SecurityQos: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_SECURITY_QOS},
};
// --------------------------------------------------------
// Type: RPC_BINDING_HANDLE_SECURITY_V1_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_BINDING_HANDLE_SECURITY_V1_A = extern struct {
    Version: {"kind":"UInt32"},
    ServerPrincName: {"kind""Ptr","child":{"kind":"Byte"}},
    AuthnLevel: {"kind":"UInt32"},
    AuthnSvc: {"kind":"UInt32"},
    AuthIdentity: {"kind""Ptr","child":Windows.Win32.Security.SEC_WINNT_AUTH_IDENTITY_A},
    SecurityQos: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_SECURITY_QOS},
};
// --------------------------------------------------------
// Type: RPC_BINDING_HANDLE_OPTIONS_V1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_BINDING_HANDLE_OPTIONS_V1 = extern struct {
    Version: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    ComTimeout: {"kind":"UInt32"},
    CallTimeout: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: RPC_HTTP_REDIRECTOR_STAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_HTTP_REDIRECTOR_STAGE = *opaque{
};
// --------------------------------------------------------
// Type: RPC_NEW_HTTP_PROXY_CHANNEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_NEW_HTTP_PROXY_CHANNEL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RPC_HTTP_PROXY_FREE_STRING
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_HTTP_PROXY_FREE_STRING = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RPC_AUTH_KEY_RETRIEVAL_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_AUTH_KEY_RETRIEVAL_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RPC_CLIENT_INFORMATION1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_CLIENT_INFORMATION1 = extern struct {
    UserName: {"kind""Ptr","child":{"kind":"Byte"}},
    ComputerName: {"kind""Ptr","child":{"kind":"Byte"}},
    Privilege: {"kind":"UInt16"},
    AuthFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: RPC_MGMT_AUTHORIZATION_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_MGMT_AUTHORIZATION_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RPC_ENDPOINT_TEMPLATEW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_ENDPOINT_TEMPLATEW = extern struct {
    Version: {"kind":"UInt32"},
    ProtSeq: {"kind""Ptr","child":{"kind":"UInt16"}},
    Endpoint: {"kind""Ptr","child":{"kind":"UInt16"}},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    Backlog: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: RPC_ENDPOINT_TEMPLATEA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_ENDPOINT_TEMPLATEA = extern struct {
    Version: {"kind":"UInt32"},
    ProtSeq: {"kind""Ptr","child":{"kind":"Byte"}},
    Endpoint: {"kind""Ptr","child":{"kind":"Byte"}},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    Backlog: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: RPC_INTERFACE_TEMPLATEA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_INTERFACE_TEMPLATEA = extern struct {
    Version: {"kind":"UInt32"},
    IfSpec: {"kind""Ptr","child":{"kind":"Void"}},
    MgrTypeUuid: {"kind""Ptr","child":Guid},
    MgrEpv: {"kind""Ptr","child":{"kind":"Void"}},
    Flags: {"kind":"UInt32"},
    MaxCalls: {"kind":"UInt32"},
    MaxRpcSize: {"kind":"UInt32"},
    IfCallback: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_IF_CALLBACK_FN},
    UuidVector: {"kind""Ptr","child":Windows.Win32.Rpc.UUID_VECTOR},
    Annotation: {"kind""Ptr","child":{"kind":"Byte"}},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: RPC_INTERFACE_TEMPLATEW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_INTERFACE_TEMPLATEW = extern struct {
    Version: {"kind":"UInt32"},
    IfSpec: {"kind""Ptr","child":{"kind":"Void"}},
    MgrTypeUuid: {"kind""Ptr","child":Guid},
    MgrEpv: {"kind""Ptr","child":{"kind":"Void"}},
    Flags: {"kind":"UInt32"},
    MaxCalls: {"kind":"UInt32"},
    MaxRpcSize: {"kind":"UInt32"},
    IfCallback: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_IF_CALLBACK_FN},
    UuidVector: {"kind""Ptr","child":Windows.Win32.Rpc.UUID_VECTOR},
    Annotation: {"kind""Ptr","child":{"kind":"UInt16"}},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RPC_VERSION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_VERSION = extern struct {
    MajorVersion: {"kind":"UInt16"},
    MinorVersion: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: RPC_SYNTAX_IDENTIFIER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_SYNTAX_IDENTIFIER = extern struct {
    SyntaxGUID: Guid,
    SyntaxVersion: Windows.Win32.Rpc.RPC_VERSION,
};
// --------------------------------------------------------
// Type: RPC_MESSAGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_MESSAGE = extern struct {
    Handle: {"kind""Ptr","child":{"kind":"Void"}},
    DataRepresentation: {"kind":"UInt32"},
    Buffer: {"kind""Ptr","child":{"kind":"Void"}},
    BufferLength: {"kind":"UInt32"},
    ProcNum: {"kind":"UInt32"},
    TransferSyntax: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_SYNTAX_IDENTIFIER},
    RpcInterfaceInformation: {"kind""Ptr","child":{"kind":"Void"}},
    ReservedForRuntime: {"kind""Ptr","child":{"kind":"Void"}},
    ManagerEpv: {"kind""Ptr","child":{"kind":"Void"}},
    ImportContext: {"kind""Ptr","child":{"kind":"Void"}},
    RpcFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: RPC_FORWARD_FUNCTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_FORWARD_FUNCTION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RPC_ADDRESS_CHANGE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_ADDRESS_CHANGE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: RPC_ADDRESS_CHANGE_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_ADDRESS_CHANGE_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RPC_DISPATCH_FUNCTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_DISPATCH_FUNCTION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RPC_DISPATCH_TABLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_DISPATCH_TABLE = extern struct {
    DispatchTableCount: {"kind":"UInt32"},
    DispatchTable: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_DISPATCH_FUNCTION},
    Reserved: {"kind":"IntPtr"},
};
// --------------------------------------------------------
// Type: RPC_PROTSEQ_ENDPOINT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_PROTSEQ_ENDPOINT = extern struct {
    RpcProtocolSequence: {"kind""Ptr","child":{"kind":"Byte"}},
    Endpoint: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: RPC_SERVER_INTERFACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_SERVER_INTERFACE = extern struct {
    Length: {"kind":"UInt32"},
    InterfaceId: Windows.Win32.Rpc.RPC_SYNTAX_IDENTIFIER,
    TransferSyntax: Windows.Win32.Rpc.RPC_SYNTAX_IDENTIFIER,
    DispatchTable: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_DISPATCH_TABLE},
    RpcProtseqEndpointCount: {"kind":"UInt32"},
    RpcProtseqEndpoint: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_PROTSEQ_ENDPOINT},
    DefaultManagerEpv: {"kind""Ptr","child":{"kind":"Void"}},
    InterpreterInfo: {"kind""Ptr","child":{"kind":"Void"}},
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: RPC_CLIENT_INTERFACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_CLIENT_INTERFACE = extern struct {
    Length: {"kind":"UInt32"},
    InterfaceId: Windows.Win32.Rpc.RPC_SYNTAX_IDENTIFIER,
    TransferSyntax: Windows.Win32.Rpc.RPC_SYNTAX_IDENTIFIER,
    DispatchTable: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_DISPATCH_TABLE},
    RpcProtseqEndpointCount: {"kind":"UInt32"},
    RpcProtseqEndpoint: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_PROTSEQ_ENDPOINT},
    Reserved: {"kind":"UIntPtr"},
    InterpreterInfo: {"kind""Ptr","child":{"kind":"Void"}},
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION = *opaque{
};
// --------------------------------------------------------
// Type: PRPC_RUNDOWN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PRPC_RUNDOWN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RPC_SEC_CONTEXT_KEY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_SEC_CONTEXT_KEY_INFO = extern struct {
    EncryptAlgorithm: {"kind":"UInt32"},
    KeySize: {"kind":"UInt32"},
    SignatureAlgorithm: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: RPC_TRANSFER_SYNTAX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_TRANSFER_SYNTAX = extern struct {
    Uuid: Guid,
    VersMajor: {"kind":"UInt16"},
    VersMinor: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: RPCLT_PDU_FILTER_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPCLT_PDU_FILTER_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RPC_SETFILTER_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_SETFILTER_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RPC_BLOCKING_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_BLOCKING_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR = extern struct {
    BufferSize: {"kind":"UInt32"},
    Buffer: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: RDR_CALLOUT_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RDR_CALLOUT_STATE = extern struct {
    LastError: {"kind":"Int32"},
    LastEEInfo: {"kind""Ptr","child":{"kind":"Void"}},
    LastCalledStage: Windows.Win32.Rpc.RPC_HTTP_REDIRECTOR_STAGE,
    ServerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ServerPort: {"kind""Ptr","child":{"kind":"UInt16"}},
    RemoteUser: {"kind""Ptr","child":{"kind":"UInt16"}},
    AuthType: {"kind""Ptr","child":{"kind":"UInt16"}},
    ResourceTypePresent: {"kind":"Byte"},
    SessionIdPresent: {"kind":"Byte"},
    InterfacePresent: {"kind":"Byte"},
    ResourceType: Guid,
    SessionId: Guid,
    Interface: Windows.Win32.Rpc.RPC_SYNTAX_IDENTIFIER,
    CertContext: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: I_RpcProxyIsValidMachineFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const I_RpcProxyIsValidMachineFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: I_RpcProxyGetClientAddressFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const I_RpcProxyGetClientAddressFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: I_RpcProxyGetConnectionTimeoutFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const I_RpcProxyGetConnectionTimeoutFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: I_RpcPerformCalloutFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const I_RpcPerformCalloutFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: I_RpcFreeCalloutStateFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const I_RpcFreeCalloutStateFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: I_RpcProxyGetClientSessionAndResourceUUID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const I_RpcProxyGetClientSessionAndResourceUUID = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: I_RpcProxyFilterIfFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const I_RpcProxyFilterIfFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RpcProxyPerfCounters
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RpcProxyPerfCounters = *opaque{
};
// --------------------------------------------------------
// Type: I_RpcProxyUpdatePerfCounterFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const I_RpcProxyUpdatePerfCounterFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: I_RpcProxyUpdatePerfCounterBackendServerFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const I_RpcProxyUpdatePerfCounterBackendServerFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: I_RpcProxyCallbackInterface
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const I_RpcProxyCallbackInterface = extern struct {
    IsValidMachineFn: Windows.Win32.Rpc.I_RpcProxyIsValidMachineFn,
    GetClientAddressFn: Windows.Win32.Rpc.I_RpcProxyGetClientAddressFn,
    GetConnectionTimeoutFn: Windows.Win32.Rpc.I_RpcProxyGetConnectionTimeoutFn,
    PerformCalloutFn: Windows.Win32.Rpc.I_RpcPerformCalloutFn,
    FreeCalloutStateFn: Windows.Win32.Rpc.I_RpcFreeCalloutStateFn,
    GetClientSessionAndResourceUUIDFn: Windows.Win32.Rpc.I_RpcProxyGetClientSessionAndResourceUUID,
    ProxyFilterIfFn: Windows.Win32.Rpc.I_RpcProxyFilterIfFn,
    RpcProxyUpdatePerfCounterFn: Windows.Win32.Rpc.I_RpcProxyUpdatePerfCounterFn,
    RpcProxyUpdatePerfCounterBackendServerFn: Windows.Win32.Rpc.I_RpcProxyUpdatePerfCounterBackendServerFn,
};
// --------------------------------------------------------
// Type: RPC_NOTIFICATION_TYPES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_NOTIFICATION_TYPES = *opaque{
};
// --------------------------------------------------------
// Type: RPC_ASYNC_EVENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_ASYNC_EVENT = *opaque{
};
// --------------------------------------------------------
// Type: RPCNOTIFICATION_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPCNOTIFICATION_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_RPCNOTIFICATION_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_RPCNOTIFICATION_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RPC_ASYNC_NOTIFICATION_INFO
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const RPC_ASYNC_NOTIFICATION_INFO = *opaque{
    // --------------------------------------------------------
    // Type: _IOC_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _IOC_e__Struct = extern struct {
        hIOPort: Windows.Win32.SystemServices.HANDLE,
        dwNumberOfBytesTransferred: {"kind":"UInt32"},
        dwCompletionKey: {"kind":"UIntPtr"},
        lpOverlapped: {"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED},
    };
    // --------------------------------------------------------
    // Type: _APC_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _APC_e__Struct = extern struct {
        NotificationRoutine: Windows.Win32.Rpc.PFN_RPCNOTIFICATION_ROUTINE,
        hThread: Windows.Win32.SystemServices.HANDLE,
    };
    // --------------------------------------------------------
    // Type: _IntPtr_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _IntPtr_e__Struct = extern struct {
        hWnd: Windows.Win32.WindowsAndMessaging.HWND,
        Msg: {"kind":"UInt32"},
    };
};
// --------------------------------------------------------
// Type: RPC_ASYNC_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_ASYNC_STATE = extern struct {
    Size: {"kind":"UInt32"},
    Signature: {"kind":"UInt32"},
    Lock: {"kind":"Int32"},
    Flags: {"kind":"UInt32"},
    StubInfo: {"kind""Ptr","child":{"kind":"Void"}},
    UserInfo: {"kind""Ptr","child":{"kind":"Void"}},
    RuntimeInfo: {"kind""Ptr","child":{"kind":"Void"}},
    Event: Windows.Win32.Rpc.RPC_ASYNC_EVENT,
    NotificationType: Windows.Win32.Rpc.RPC_NOTIFICATION_TYPES,
    u: Windows.Win32.Rpc.RPC_ASYNC_NOTIFICATION_INFO,
    Reserved: {"kind":"Array","child": {"kind":"IntPtr"}},
};
// --------------------------------------------------------
// Type: ExtendedErrorParamTypes
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ExtendedErrorParamTypes = *opaque{
};
// --------------------------------------------------------
// Type: BinaryParam
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BinaryParam = extern struct {
    Buffer: {"kind""Ptr","child":{"kind":"Void"}},
    Size: {"kind":"Int16"},
};
// --------------------------------------------------------
// Type: RPC_EE_INFO_PARAM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_EE_INFO_PARAM = extern struct {
    ParameterType: Windows.Win32.Rpc.ExtendedErrorParamTypes,
    u: Windows.Win32.Rpc.RPC_EE_INFO_PARAM+_u_e__Union,
    // --------------------------------------------------------
    // Type: _u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: RPC_EXTENDED_ERROR_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_EXTENDED_ERROR_INFO = extern struct {
    Version: {"kind":"UInt32"},
    ComputerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ProcessID: {"kind":"UInt32"},
    u: Windows.Win32.Rpc.RPC_EXTENDED_ERROR_INFO+_u_e__Union,
    GeneratingComponent: {"kind":"UInt32"},
    Status: {"kind":"UInt32"},
    DetectionLocation: {"kind":"UInt16"},
    Flags: {"kind":"UInt16"},
    NumberOfParameters: {"kind":"Int32"},
    Parameters: {"kind":"Array","child": Windows.Win32.Rpc.RPC_EE_INFO_PARAM},
    // --------------------------------------------------------
    // Type: _u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: RPC_ERROR_ENUM_HANDLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_ERROR_ENUM_HANDLE = extern struct {
    Signature: {"kind":"UInt32"},
    CurrentPos: {"kind""Ptr","child":{"kind":"Void"}},
    Head: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: RpcLocalAddressFormat
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RpcLocalAddressFormat = *opaque{
};
// --------------------------------------------------------
// Type: RPC_CALL_LOCAL_ADDRESS_V1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_CALL_LOCAL_ADDRESS_V1 = extern struct {
    Version: {"kind":"UInt32"},
    Buffer: {"kind""Ptr","child":{"kind":"Void"}},
    BufferSize: {"kind":"UInt32"},
    AddressFormat: Windows.Win32.Rpc.RpcLocalAddressFormat,
};
// --------------------------------------------------------
// Type: RPC_CALL_ATTRIBUTES_V1_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_CALL_ATTRIBUTES_V1_W = extern struct {
    Version: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    ServerPrincipalNameBufferLength: {"kind":"UInt32"},
    ServerPrincipalName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ClientPrincipalNameBufferLength: {"kind":"UInt32"},
    ClientPrincipalName: {"kind""Ptr","child":{"kind":"UInt16"}},
    AuthenticationLevel: {"kind":"UInt32"},
    AuthenticationService: {"kind":"UInt32"},
    NullSession: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: RPC_CALL_ATTRIBUTES_V1_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_CALL_ATTRIBUTES_V1_A = extern struct {
    Version: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    ServerPrincipalNameBufferLength: {"kind":"UInt32"},
    ServerPrincipalName: {"kind""Ptr","child":{"kind":"Byte"}},
    ClientPrincipalNameBufferLength: {"kind":"UInt32"},
    ClientPrincipalName: {"kind""Ptr","child":{"kind":"Byte"}},
    AuthenticationLevel: {"kind":"UInt32"},
    AuthenticationService: {"kind":"UInt32"},
    NullSession: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: RpcCallType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RpcCallType = *opaque{
};
// --------------------------------------------------------
// Type: RpcCallClientLocality
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RpcCallClientLocality = *opaque{
};
// --------------------------------------------------------
// Type: RPC_CALL_ATTRIBUTES_V2_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_CALL_ATTRIBUTES_V2_W = extern struct {
    Version: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    ServerPrincipalNameBufferLength: {"kind":"UInt32"},
    ServerPrincipalName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ClientPrincipalNameBufferLength: {"kind":"UInt32"},
    ClientPrincipalName: {"kind""Ptr","child":{"kind":"UInt16"}},
    AuthenticationLevel: {"kind":"UInt32"},
    AuthenticationService: {"kind":"UInt32"},
    NullSession: Windows.Win32.SystemServices.BOOL,
    KernelModeCaller: Windows.Win32.SystemServices.BOOL,
    ProtocolSequence: {"kind":"UInt32"},
    IsClientLocal: Windows.Win32.Rpc.RpcCallClientLocality,
    ClientPID: Windows.Win32.SystemServices.HANDLE,
    CallStatus: {"kind":"UInt32"},
    CallType: Windows.Win32.Rpc.RpcCallType,
    CallLocalAddress: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_CALL_LOCAL_ADDRESS_V1},
    OpNum: {"kind":"UInt16"},
    InterfaceUuid: Guid,
};
// --------------------------------------------------------
// Type: RPC_CALL_ATTRIBUTES_V2_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_CALL_ATTRIBUTES_V2_A = extern struct {
    Version: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    ServerPrincipalNameBufferLength: {"kind":"UInt32"},
    ServerPrincipalName: {"kind""Ptr","child":{"kind":"Byte"}},
    ClientPrincipalNameBufferLength: {"kind":"UInt32"},
    ClientPrincipalName: {"kind""Ptr","child":{"kind":"Byte"}},
    AuthenticationLevel: {"kind":"UInt32"},
    AuthenticationService: {"kind":"UInt32"},
    NullSession: Windows.Win32.SystemServices.BOOL,
    KernelModeCaller: Windows.Win32.SystemServices.BOOL,
    ProtocolSequence: {"kind":"UInt32"},
    IsClientLocal: {"kind":"UInt32"},
    ClientPID: Windows.Win32.SystemServices.HANDLE,
    CallStatus: {"kind":"UInt32"},
    CallType: Windows.Win32.Rpc.RpcCallType,
    CallLocalAddress: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_CALL_LOCAL_ADDRESS_V1},
    OpNum: {"kind":"UInt16"},
    InterfaceUuid: Guid,
};
// --------------------------------------------------------
// Type: RPC_CALL_ATTRIBUTES_V3_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_CALL_ATTRIBUTES_V3_W = extern struct {
    Version: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    ServerPrincipalNameBufferLength: {"kind":"UInt32"},
    ServerPrincipalName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ClientPrincipalNameBufferLength: {"kind":"UInt32"},
    ClientPrincipalName: {"kind""Ptr","child":{"kind":"UInt16"}},
    AuthenticationLevel: {"kind":"UInt32"},
    AuthenticationService: {"kind":"UInt32"},
    NullSession: Windows.Win32.SystemServices.BOOL,
    KernelModeCaller: Windows.Win32.SystemServices.BOOL,
    ProtocolSequence: {"kind":"UInt32"},
    IsClientLocal: Windows.Win32.Rpc.RpcCallClientLocality,
    ClientPID: Windows.Win32.SystemServices.HANDLE,
    CallStatus: {"kind":"UInt32"},
    CallType: Windows.Win32.Rpc.RpcCallType,
    CallLocalAddress: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_CALL_LOCAL_ADDRESS_V1},
    OpNum: {"kind":"UInt16"},
    InterfaceUuid: Guid,
    ClientIdentifierBufferLength: {"kind":"UInt32"},
    ClientIdentifier: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: RPC_CALL_ATTRIBUTES_V3_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_CALL_ATTRIBUTES_V3_A = extern struct {
    Version: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    ServerPrincipalNameBufferLength: {"kind":"UInt32"},
    ServerPrincipalName: {"kind""Ptr","child":{"kind":"Byte"}},
    ClientPrincipalNameBufferLength: {"kind":"UInt32"},
    ClientPrincipalName: {"kind""Ptr","child":{"kind":"Byte"}},
    AuthenticationLevel: {"kind":"UInt32"},
    AuthenticationService: {"kind":"UInt32"},
    NullSession: Windows.Win32.SystemServices.BOOL,
    KernelModeCaller: Windows.Win32.SystemServices.BOOL,
    ProtocolSequence: {"kind":"UInt32"},
    IsClientLocal: {"kind":"UInt32"},
    ClientPID: Windows.Win32.SystemServices.HANDLE,
    CallStatus: {"kind":"UInt32"},
    CallType: Windows.Win32.Rpc.RpcCallType,
    CallLocalAddress: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_CALL_LOCAL_ADDRESS_V1},
    OpNum: {"kind":"UInt16"},
    InterfaceUuid: Guid,
    ClientIdentifierBufferLength: {"kind":"UInt32"},
    ClientIdentifier: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: RPC_NOTIFICATIONS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_NOTIFICATIONS = *opaque{
};
// --------------------------------------------------------
// Type: __AnonymousRecord_rpcndr_L275_C9
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const __AnonymousRecord_rpcndr_L275_C9 = extern struct {
    pad: {"kind":"Array","child": {"kind""Ptr","child":{"kind":"Void"}}},
    userContext: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: NDR_RUNDOWN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDR_RUNDOWN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: NDR_NOTIFY_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDR_NOTIFY_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: NDR_NOTIFY2_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDR_NOTIFY2_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SCONTEXT_QUEUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCONTEXT_QUEUE = extern struct {
    NumberOfObjects: {"kind":"UInt32"},
    ArrayOfObjects: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Rpc.NDR_SCONTEXT_1}},
};
// --------------------------------------------------------
// Type: EXPR_EVAL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EXPR_EVAL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ARRAY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ARRAY_INFO = extern struct {
    Dimension: {"kind":"Int32"},
    BufferConformanceMark: {"kind""Ptr","child":{"kind":"UInt32"}},
    BufferVarianceMark: {"kind""Ptr","child":{"kind":"UInt32"}},
    MaxCountArray: {"kind""Ptr","child":{"kind":"UInt32"}},
    OffsetArray: {"kind""Ptr","child":{"kind":"UInt32"}},
    ActualCountArray: {"kind""Ptr","child":{"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: _NDR_ASYNC_MESSAGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _NDR_ASYNC_MESSAGE = opaque {
};
// --------------------------------------------------------
// Type: _NDR_CORRELATION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _NDR_CORRELATION_INFO = opaque {
};
// --------------------------------------------------------
// Type: NDR_ALLOC_ALL_NODES_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const NDR_ALLOC_ALL_NODES_CONTEXT = opaque {
};
// --------------------------------------------------------
// Type: NDR_POINTER_QUEUE_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const NDR_POINTER_QUEUE_STATE = opaque {
};
// --------------------------------------------------------
// Type: _NDR_PROC_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _NDR_PROC_CONTEXT = opaque {
};
// --------------------------------------------------------
// Type: MIDL_STUB_MESSAGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MIDL_STUB_MESSAGE = extern struct {
    RpcMsg: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_MESSAGE},
    Buffer: {"kind""Ptr","child":{"kind":"Byte"}},
    BufferStart: {"kind""Ptr","child":{"kind":"Byte"}},
    BufferEnd: {"kind""Ptr","child":{"kind":"Byte"}},
    BufferMark: {"kind""Ptr","child":{"kind":"Byte"}},
    BufferLength: {"kind":"UInt32"},
    MemorySize: {"kind":"UInt32"},
    Memory: {"kind""Ptr","child":{"kind":"Byte"}},
    IsClient: {"kind":"Byte"},
    Pad: {"kind":"Byte"},
    uFlags2: {"kind":"UInt16"},
    ReuseBuffer: {"kind":"Int32"},
    pAllocAllNodesContext: {"kind""Ptr","child":Windows.Win32.Rpc.NDR_ALLOC_ALL_NODES_CONTEXT},
    pPointerQueueState: {"kind""Ptr","child":Windows.Win32.Rpc.NDR_POINTER_QUEUE_STATE},
    IgnoreEmbeddedPointers: {"kind":"Int32"},
    PointerBufferMark: {"kind""Ptr","child":{"kind":"Byte"}},
    CorrDespIncrement: {"kind":"Byte"},
    uFlags: {"kind":"Byte"},
    UniquePtrCount: {"kind":"UInt16"},
    MaxCount: {"kind":"UIntPtr"},
    Offset: {"kind":"UInt32"},
    ActualCount: {"kind":"UInt32"},
    pfnAllocate: {"kind":"IntPtr"},
    pfnFree: {"kind":"IntPtr"},
    StackTop: {"kind""Ptr","child":{"kind":"Byte"}},
    pPresentedType: {"kind""Ptr","child":{"kind":"Byte"}},
    pTransmitType: {"kind""Ptr","child":{"kind":"Byte"}},
    SavedHandle: {"kind""Ptr","child":{"kind":"Void"}},
    StubDesc: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_DESC},
    FullPtrXlatTables: {"kind""Ptr","child":Windows.Win32.Rpc.FULL_PTR_XLAT_TABLES},
    FullPtrRefId: {"kind":"UInt32"},
    PointerLength: {"kind":"UInt32"},
    _bitfield: {"kind":"Int32"},
    dwDestContext: {"kind":"UInt32"},
    pvDestContext: {"kind""Ptr","child":{"kind":"Void"}},
    SavedContextHandles: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Rpc.NDR_SCONTEXT_1}},
    ParamNumber: {"kind":"Int32"},
    pRpcChannelBuffer: Windows.Win32.Com.IRpcChannelBuffer,
    pArrayInfo: {"kind""Ptr","child":Windows.Win32.Rpc.ARRAY_INFO},
    SizePtrCountArray: {"kind""Ptr","child":{"kind":"UInt32"}},
    SizePtrOffsetArray: {"kind""Ptr","child":{"kind":"UInt32"}},
    SizePtrLengthArray: {"kind""Ptr","child":{"kind":"UInt32"}},
    pArgQueue: {"kind""Ptr","child":{"kind":"Void"}},
    dwStubPhase: {"kind":"UInt32"},
    LowStackMark: {"kind""Ptr","child":{"kind":"Void"}},
    pAsyncMsg: {"kind""Ptr","child":Windows.Win32.Rpc._NDR_ASYNC_MESSAGE},
    pCorrInfo: {"kind""Ptr","child":Windows.Win32.Rpc._NDR_CORRELATION_INFO},
    pCorrMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pMemoryList: {"kind""Ptr","child":{"kind":"Void"}},
    pCSInfo: {"kind":"IntPtr"},
    ConformanceMark: {"kind""Ptr","child":{"kind":"Byte"}},
    VarianceMark: {"kind""Ptr","child":{"kind":"Byte"}},
    Unused: {"kind":"IntPtr"},
    pContext: {"kind""Ptr","child":Windows.Win32.Rpc._NDR_PROC_CONTEXT},
    ContextHandleHash: {"kind""Ptr","child":{"kind":"Void"}},
    pUserMarshalList: {"kind""Ptr","child":{"kind":"Void"}},
    Reserved51_3: {"kind":"IntPtr"},
    Reserved51_4: {"kind":"IntPtr"},
    Reserved51_5: {"kind":"IntPtr"},
};
// --------------------------------------------------------
// Type: GENERIC_BINDING_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const GENERIC_BINDING_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: GENERIC_UNBIND_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const GENERIC_UNBIND_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: GENERIC_BINDING_ROUTINE_PAIR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GENERIC_BINDING_ROUTINE_PAIR = extern struct {
    pfnBind: Windows.Win32.Rpc.GENERIC_BINDING_ROUTINE,
    pfnUnbind: Windows.Win32.Rpc.GENERIC_UNBIND_ROUTINE,
};
// --------------------------------------------------------
// Type: __GENERIC_BINDING_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const __GENERIC_BINDING_INFO = extern struct {
    pObj: {"kind""Ptr","child":{"kind":"Void"}},
    Size: {"kind":"UInt32"},
    pfnBind: Windows.Win32.Rpc.GENERIC_BINDING_ROUTINE,
    pfnUnbind: Windows.Win32.Rpc.GENERIC_UNBIND_ROUTINE,
};
// --------------------------------------------------------
// Type: XMIT_HELPER_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const XMIT_HELPER_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: XMIT_ROUTINE_QUINTUPLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const XMIT_ROUTINE_QUINTUPLE = extern struct {
    pfnTranslateToXmit: Windows.Win32.Rpc.XMIT_HELPER_ROUTINE,
    pfnTranslateFromXmit: Windows.Win32.Rpc.XMIT_HELPER_ROUTINE,
    pfnFreeXmit: Windows.Win32.Rpc.XMIT_HELPER_ROUTINE,
    pfnFreeInst: Windows.Win32.Rpc.XMIT_HELPER_ROUTINE,
};
// --------------------------------------------------------
// Type: USER_MARSHAL_SIZING_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const USER_MARSHAL_SIZING_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: USER_MARSHAL_MARSHALLING_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const USER_MARSHAL_MARSHALLING_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: USER_MARSHAL_UNMARSHALLING_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const USER_MARSHAL_UNMARSHALLING_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: USER_MARSHAL_FREEING_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const USER_MARSHAL_FREEING_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: USER_MARSHAL_ROUTINE_QUADRUPLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_MARSHAL_ROUTINE_QUADRUPLE = extern struct {
    pfnBufferSize: Windows.Win32.Rpc.USER_MARSHAL_SIZING_ROUTINE,
    pfnMarshall: Windows.Win32.Rpc.USER_MARSHAL_MARSHALLING_ROUTINE,
    pfnUnmarshall: Windows.Win32.Rpc.USER_MARSHAL_UNMARSHALLING_ROUTINE,
    pfnFree: Windows.Win32.Rpc.USER_MARSHAL_FREEING_ROUTINE,
};
// --------------------------------------------------------
// Type: USER_MARSHAL_CB_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const USER_MARSHAL_CB_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: USER_MARSHAL_CB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_MARSHAL_CB = extern struct {
    Flags: {"kind":"UInt32"},
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pReserve: {"kind""Ptr","child":{"kind":"Byte"}},
    Signature: {"kind":"UInt32"},
    CBType: Windows.Win32.Rpc.USER_MARSHAL_CB_TYPE,
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},
    pTypeFormat: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: MALLOC_FREE_STRUCT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MALLOC_FREE_STRUCT = extern struct {
    pfnAllocate: {"kind":"IntPtr"},
    pfnFree: {"kind":"IntPtr"},
};
// --------------------------------------------------------
// Type: COMM_FAULT_OFFSETS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COMM_FAULT_OFFSETS = extern struct {
    CommOffset: {"kind":"Int16"},
    FaultOffset: {"kind":"Int16"},
};
// --------------------------------------------------------
// Type: IDL_CS_CONVERT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IDL_CS_CONVERT = *opaque{
};
// --------------------------------------------------------
// Type: CS_TYPE_NET_SIZE_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CS_TYPE_NET_SIZE_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CS_TYPE_LOCAL_SIZE_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CS_TYPE_LOCAL_SIZE_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CS_TYPE_TO_NETCS_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CS_TYPE_TO_NETCS_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CS_TYPE_FROM_NETCS_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CS_TYPE_FROM_NETCS_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CS_TAG_GETTING_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CS_TAG_GETTING_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: NDR_CS_SIZE_CONVERT_ROUTINES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDR_CS_SIZE_CONVERT_ROUTINES = extern struct {
    pfnNetSize: Windows.Win32.Rpc.CS_TYPE_NET_SIZE_ROUTINE,
    pfnToNetCs: Windows.Win32.Rpc.CS_TYPE_TO_NETCS_ROUTINE,
    pfnLocalSize: Windows.Win32.Rpc.CS_TYPE_LOCAL_SIZE_ROUTINE,
    pfnFromNetCs: Windows.Win32.Rpc.CS_TYPE_FROM_NETCS_ROUTINE,
};
// --------------------------------------------------------
// Type: NDR_CS_ROUTINES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDR_CS_ROUTINES = extern struct {
    pSizeConvertRoutines: {"kind""Ptr","child":Windows.Win32.Rpc.NDR_CS_SIZE_CONVERT_ROUTINES},
    pTagGettingRoutines: {"kind""Ptr","child":Windows.Win32.Rpc.CS_TAG_GETTING_ROUTINE},
};
// --------------------------------------------------------
// Type: NDR_EXPR_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDR_EXPR_DESC = extern struct {
    pOffset: {"kind""Ptr","child":{"kind":"UInt16"}},
    pFormatExpr: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: MIDL_STUB_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MIDL_STUB_DESC = extern struct {
    RpcInterfaceInformation: {"kind""Ptr","child":{"kind":"Void"}},
    pfnAllocate: {"kind":"IntPtr"},
    pfnFree: {"kind":"IntPtr"},
    IMPLICIT_HANDLE_INFO: Windows.Win32.Rpc.MIDL_STUB_DESC+_IMPLICIT_HANDLE_INFO_e__Union,
    apfnNdrRundownRoutines: {"kind""Ptr","child":{"kind":"IntPtr"}},
    aGenericBindingRoutinePairs: {"kind""Ptr","child":Windows.Win32.Rpc.GENERIC_BINDING_ROUTINE_PAIR},
    apfnExprEval: {"kind""Ptr","child":{"kind":"IntPtr"}},
    aXmitQuintuple: {"kind""Ptr","child":Windows.Win32.Rpc.XMIT_ROUTINE_QUINTUPLE},
    pFormatTypes: {"kind""Ptr","child":{"kind":"Byte"}},
    fCheckBounds: {"kind":"Int32"},
    Version: {"kind":"UInt32"},
    pMallocFreeStruct: {"kind""Ptr","child":Windows.Win32.Rpc.MALLOC_FREE_STRUCT},
    MIDLVersion: {"kind":"Int32"},
    CommFaultOffsets: {"kind""Ptr","child":Windows.Win32.Rpc.COMM_FAULT_OFFSETS},
    aUserMarshalQuadruple: {"kind""Ptr","child":Windows.Win32.Rpc.USER_MARSHAL_ROUTINE_QUADRUPLE},
    NotifyRoutineTable: {"kind""Ptr","child":{"kind":"IntPtr"}},
    mFlags: {"kind":"UIntPtr"},
    CsRoutineTables: {"kind""Ptr","child":Windows.Win32.Rpc.NDR_CS_ROUTINES},
    ProxyServerInfo: {"kind""Ptr","child":{"kind":"Void"}},
    pExprInfo: {"kind""Ptr","child":Windows.Win32.Rpc.NDR_EXPR_DESC},
    // --------------------------------------------------------
    // Type: _IMPLICIT_HANDLE_INFO_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _IMPLICIT_HANDLE_INFO_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: MIDL_FORMAT_STRING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MIDL_FORMAT_STRING = extern struct {
    Pad: {"kind":"Int16"},
    Format: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: STUB_THUNK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STUB_THUNK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SERVER_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SERVER_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: MIDL_METHOD_PROPERTY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MIDL_METHOD_PROPERTY = extern struct {
    Id: {"kind":"UInt32"},
    Value: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: MIDL_METHOD_PROPERTY_MAP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MIDL_METHOD_PROPERTY_MAP = extern struct {
    Count: {"kind":"UInt32"},
    Properties: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_METHOD_PROPERTY},
};
// --------------------------------------------------------
// Type: MIDL_INTERFACE_METHOD_PROPERTIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MIDL_INTERFACE_METHOD_PROPERTIES = extern struct {
    MethodCount: {"kind":"UInt16"},
    MethodProperties: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Rpc.MIDL_METHOD_PROPERTY_MAP}},
};
// --------------------------------------------------------
// Type: _MIDL_SERVER_INFO_
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _MIDL_SERVER_INFO_ = extern struct {
    pStubDesc: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_DESC},
    DispatchTable: {"kind""Ptr","child":{"kind":"IntPtr"}},
    ProcString: {"kind""Ptr","child":{"kind":"Byte"}},
    FmtStringOffset: {"kind""Ptr","child":{"kind":"UInt16"}},
    ThunkTable: {"kind""Ptr","child":{"kind":"IntPtr"}},
    pTransferSyntax: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_SYNTAX_IDENTIFIER},
    nCount: {"kind":"UIntPtr"},
    pSyntaxInfo: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_SYNTAX_INFO},
};
// --------------------------------------------------------
// Type: MIDL_STUBLESS_PROXY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MIDL_STUBLESS_PROXY_INFO = extern struct {
    pStubDesc: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_DESC},
    ProcFormatString: {"kind""Ptr","child":{"kind":"Byte"}},
    FormatStringOffset: {"kind""Ptr","child":{"kind":"UInt16"}},
    pTransferSyntax: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_SYNTAX_IDENTIFIER},
    nCount: {"kind":"UIntPtr"},
    pSyntaxInfo: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_SYNTAX_INFO},
};
// --------------------------------------------------------
// Type: MIDL_SYNTAX_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MIDL_SYNTAX_INFO = extern struct {
    TransferSyntax: Windows.Win32.Rpc.RPC_SYNTAX_IDENTIFIER,
    DispatchTable: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_DISPATCH_TABLE},
    ProcString: {"kind""Ptr","child":{"kind":"Byte"}},
    FmtStringOffset: {"kind""Ptr","child":{"kind":"UInt16"}},
    TypeString: {"kind""Ptr","child":{"kind":"Byte"}},
    aUserMarshalQuadruple: {"kind""Ptr","child":{"kind":"Void"}},
    pMethodProperties: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_INTERFACE_METHOD_PROPERTIES},
    pReserved2: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: CLIENT_CALL_RETURN
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const CLIENT_CALL_RETURN = *opaque{
};
// --------------------------------------------------------
// Type: XLAT_SIDE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const XLAT_SIDE = *opaque{
};
// --------------------------------------------------------
// Type: FULL_PTR_XLAT_TABLES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FULL_PTR_XLAT_TABLES = extern struct {
    RefIdToPointer: {"kind""Ptr","child":{"kind":"Void"}},
    PointerToRefId: {"kind""Ptr","child":{"kind":"Void"}},
    NextRefId: {"kind":"UInt32"},
    XlatSide: Windows.Win32.Rpc.XLAT_SIDE,
};
// --------------------------------------------------------
// Type: system_handle_t
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const system_handle_t = *opaque{
};
// --------------------------------------------------------
// Type: MIDL_INTERCEPTION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MIDL_INTERCEPTION_INFO = extern struct {
    Version: {"kind":"UInt32"},
    ProcString: {"kind""Ptr","child":{"kind":"Byte"}},
    ProcFormatOffsetTable: {"kind""Ptr","child":{"kind":"UInt16"}},
    ProcCount: {"kind":"UInt32"},
    TypeString: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: MIDL_WINRT_TYPE_SERIALIZATION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MIDL_WINRT_TYPE_SERIALIZATION_INFO = extern struct {
    Version: {"kind":"UInt32"},
    TypeFormatString: {"kind""Ptr","child":{"kind":"Byte"}},
    FormatStringSize: {"kind":"UInt16"},
    TypeOffset: {"kind":"UInt16"},
    StubDesc: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_DESC},
};
// --------------------------------------------------------
// Type: STUB_PHASE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STUB_PHASE = *opaque{
};
// --------------------------------------------------------
// Type: PROXY_PHASE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROXY_PHASE = *opaque{
};
// --------------------------------------------------------
// Type: RPC_CLIENT_ALLOC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_CLIENT_ALLOC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RPC_CLIENT_FREE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_CLIENT_FREE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: NDR_USER_MARSHAL_INFO_LEVEL1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDR_USER_MARSHAL_INFO_LEVEL1 = extern struct {
    Buffer: {"kind""Ptr","child":{"kind":"Void"}},
    BufferSize: {"kind":"UInt32"},
    pfnAllocate: {"kind":"IntPtr"},
    pfnFree: {"kind":"IntPtr"},
    pRpcChannelBuffer: Windows.Win32.Com.IRpcChannelBuffer,
    Reserved: {"kind":"Array","child": {"kind":"UIntPtr"}},
};
// --------------------------------------------------------
// Type: NDR_USER_MARSHAL_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDR_USER_MARSHAL_INFO = extern struct {
    InformationLevel: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Rpc.NDR_USER_MARSHAL_INFO+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: MIDL_ES_CODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MIDL_ES_CODE = *opaque{
};
// --------------------------------------------------------
// Type: MIDL_ES_HANDLE_STYLE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MIDL_ES_HANDLE_STYLE = *opaque{
};
// --------------------------------------------------------
// Type: MIDL_ES_ALLOC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MIDL_ES_ALLOC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: MIDL_ES_WRITE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MIDL_ES_WRITE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: MIDL_ES_READ
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MIDL_ES_READ = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: MIDL_TYPE_PICKLING_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MIDL_TYPE_PICKLING_INFO = extern struct {
    Version: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    Reserved: {"kind":"Array","child": {"kind":"UIntPtr"}},
};
],

"func_definitions": [

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn IUnknown_QueryInterface_Proxy(
    This: Windows.Win32.Com.IUnknown,
    riid: {"kind""Ptr","child":Guid},
    ppvObject: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn IUnknown_AddRef_Proxy(
    This: Windows.Win32.Com.IUnknown,

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn IUnknown_Release_Proxy(
    This: Windows.Win32.Com.IUnknown,

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingCopy(
    SourceBinding: {"kind""Ptr","child":{"kind":"Void"}},
    DestinationBinding: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingFree(
    Binding: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingSetOption(
    hBinding: {"kind""Ptr","child":{"kind":"Void"}},
    option: {"kind":"UInt32"},
    optionValue: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingInqOption(
    hBinding: {"kind""Ptr","child":{"kind":"Void"}},
    option: {"kind":"UInt32"},
    pOptionValue: {"kind""Ptr","child":{"kind":"UIntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingFromStringBindingA(
    StringBinding: {"kind""Ptr","child":{"kind":"Byte"}},
    Binding: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingFromStringBindingW(
    StringBinding: {"kind""Ptr","child":{"kind":"UInt16"}},
    Binding: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSsGetContextBinding(
    ContextHandle: {"kind""Ptr","child":{"kind":"Void"}},
    Binding: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingInqObject(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    ObjectUuid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingReset(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingSetObject(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    ObjectUuid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtInqDefaultProtectLevel(
    AuthnSvc: {"kind":"UInt32"},
    AuthnLevel: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingToStringBindingA(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    StringBinding: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingToStringBindingW(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    StringBinding: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingVectorFree(
    BindingVector: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Rpc.RPC_BINDING_VECTOR}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcStringBindingComposeA(
    ObjUuid: {"kind""Ptr","child":{"kind":"Byte"}},
    ProtSeq: {"kind""Ptr","child":{"kind":"Byte"}},
    NetworkAddr: {"kind""Ptr","child":{"kind":"Byte"}},
    Endpoint: {"kind""Ptr","child":{"kind":"Byte"}},
    Options: {"kind""Ptr","child":{"kind":"Byte"}},
    StringBinding: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcStringBindingComposeW(
    ObjUuid: {"kind""Ptr","child":{"kind":"UInt16"}},
    ProtSeq: {"kind""Ptr","child":{"kind":"UInt16"}},
    NetworkAddr: {"kind""Ptr","child":{"kind":"UInt16"}},
    Endpoint: {"kind""Ptr","child":{"kind":"UInt16"}},
    Options: {"kind""Ptr","child":{"kind":"UInt16"}},
    StringBinding: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcStringBindingParseA(
    StringBinding: {"kind""Ptr","child":{"kind":"Byte"}},
    ObjUuid: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    Protseq: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    NetworkAddr: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    Endpoint: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    NetworkOptions: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcStringBindingParseW(
    StringBinding: {"kind""Ptr","child":{"kind":"UInt16"}},
    ObjUuid: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    Protseq: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    NetworkAddr: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    Endpoint: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    NetworkOptions: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcStringFreeA(
    String: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcStringFreeW(
    String: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcIfInqId(
    RpcIfHandle: {"kind""Ptr","child":{"kind":"Void"}},
    RpcIfId: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_IF_ID},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcNetworkIsProtseqValidA(
    Protseq: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcNetworkIsProtseqValidW(
    Protseq: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtInqComTimeout(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    Timeout: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtSetComTimeout(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    Timeout: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtSetCancelTimeout(
    Timeout: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcNetworkInqProtseqsA(
    ProtseqVector: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Rpc.RPC_PROTSEQ_VECTORA}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcNetworkInqProtseqsW(
    ProtseqVector: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Rpc.RPC_PROTSEQ_VECTORW}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcObjectInqType(
    ObjUuid: {"kind""Ptr","child":Guid},
    TypeUuid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcObjectSetInqFn(
    InquiryFn: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_OBJECT_INQ_FN},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcObjectSetType(
    ObjUuid: {"kind""Ptr","child":Guid},
    TypeUuid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcProtseqVectorFreeA(
    ProtseqVector: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Rpc.RPC_PROTSEQ_VECTORA}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcProtseqVectorFreeW(
    ProtseqVector: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Rpc.RPC_PROTSEQ_VECTORW}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerInqBindings(
    BindingVector: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Rpc.RPC_BINDING_VECTOR}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerInqBindingsEx(
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    BindingVector: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Rpc.RPC_BINDING_VECTOR}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerInqIf(
    IfSpec: {"kind""Ptr","child":{"kind":"Void"}},
    MgrTypeUuid: {"kind""Ptr","child":Guid},
    MgrEpv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerListen(
    MinimumCallThreads: {"kind":"UInt32"},
    MaxCalls: {"kind":"UInt32"},
    DontWait: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerRegisterIf(
    IfSpec: {"kind""Ptr","child":{"kind":"Void"}},
    MgrTypeUuid: {"kind""Ptr","child":Guid},
    MgrEpv: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerRegisterIfEx(
    IfSpec: {"kind""Ptr","child":{"kind":"Void"}},
    MgrTypeUuid: {"kind""Ptr","child":Guid},
    MgrEpv: {"kind""Ptr","child":{"kind":"Void"}},
    Flags: {"kind":"UInt32"},
    MaxCalls: {"kind":"UInt32"},
    IfCallback: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_IF_CALLBACK_FN},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerRegisterIf2(
    IfSpec: {"kind""Ptr","child":{"kind":"Void"}},
    MgrTypeUuid: {"kind""Ptr","child":Guid},
    MgrEpv: {"kind""Ptr","child":{"kind":"Void"}},
    Flags: {"kind":"UInt32"},
    MaxCalls: {"kind":"UInt32"},
    MaxRpcSize: {"kind":"UInt32"},
    IfCallbackFn: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_IF_CALLBACK_FN},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerRegisterIf3(
    IfSpec: {"kind""Ptr","child":{"kind":"Void"}},
    MgrTypeUuid: {"kind""Ptr","child":Guid},
    MgrEpv: {"kind""Ptr","child":{"kind":"Void"}},
    Flags: {"kind":"UInt32"},
    MaxCalls: {"kind":"UInt32"},
    MaxRpcSize: {"kind":"UInt32"},
    IfCallback: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_IF_CALLBACK_FN},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUnregisterIf(
    IfSpec: {"kind""Ptr","child":{"kind":"Void"}},
    MgrTypeUuid: {"kind""Ptr","child":Guid},
    WaitForCallsToComplete: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUnregisterIfEx(
    IfSpec: {"kind""Ptr","child":{"kind":"Void"}},
    MgrTypeUuid: {"kind""Ptr","child":Guid},
    RundownContextHandles: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUseAllProtseqs(
    MaxCalls: {"kind":"UInt32"},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUseAllProtseqsEx(
    MaxCalls: {"kind":"UInt32"},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    Policy: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_POLICY},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUseAllProtseqsIf(
    MaxCalls: {"kind":"UInt32"},
    IfSpec: {"kind""Ptr","child":{"kind":"Void"}},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUseAllProtseqsIfEx(
    MaxCalls: {"kind":"UInt32"},
    IfSpec: {"kind""Ptr","child":{"kind":"Void"}},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    Policy: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_POLICY},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUseProtseqA(
    Protseq: {"kind""Ptr","child":{"kind":"Byte"}},
    MaxCalls: {"kind":"UInt32"},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUseProtseqExA(
    Protseq: {"kind""Ptr","child":{"kind":"Byte"}},
    MaxCalls: {"kind":"UInt32"},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    Policy: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_POLICY},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUseProtseqW(
    Protseq: {"kind""Ptr","child":{"kind":"UInt16"}},
    MaxCalls: {"kind":"UInt32"},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUseProtseqExW(
    Protseq: {"kind""Ptr","child":{"kind":"UInt16"}},
    MaxCalls: {"kind":"UInt32"},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    Policy: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_POLICY},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUseProtseqEpA(
    Protseq: {"kind""Ptr","child":{"kind":"Byte"}},
    MaxCalls: {"kind":"UInt32"},
    Endpoint: {"kind""Ptr","child":{"kind":"Byte"}},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUseProtseqEpExA(
    Protseq: {"kind""Ptr","child":{"kind":"Byte"}},
    MaxCalls: {"kind":"UInt32"},
    Endpoint: {"kind""Ptr","child":{"kind":"Byte"}},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    Policy: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_POLICY},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUseProtseqEpW(
    Protseq: {"kind""Ptr","child":{"kind":"UInt16"}},
    MaxCalls: {"kind":"UInt32"},
    Endpoint: {"kind""Ptr","child":{"kind":"UInt16"}},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUseProtseqEpExW(
    Protseq: {"kind""Ptr","child":{"kind":"UInt16"}},
    MaxCalls: {"kind":"UInt32"},
    Endpoint: {"kind""Ptr","child":{"kind":"UInt16"}},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    Policy: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_POLICY},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUseProtseqIfA(
    Protseq: {"kind""Ptr","child":{"kind":"Byte"}},
    MaxCalls: {"kind":"UInt32"},
    IfSpec: {"kind""Ptr","child":{"kind":"Void"}},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUseProtseqIfExA(
    Protseq: {"kind""Ptr","child":{"kind":"Byte"}},
    MaxCalls: {"kind":"UInt32"},
    IfSpec: {"kind""Ptr","child":{"kind":"Void"}},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    Policy: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_POLICY},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUseProtseqIfW(
    Protseq: {"kind""Ptr","child":{"kind":"UInt16"}},
    MaxCalls: {"kind":"UInt32"},
    IfSpec: {"kind""Ptr","child":{"kind":"Void"}},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUseProtseqIfExW(
    Protseq: {"kind""Ptr","child":{"kind":"UInt16"}},
    MaxCalls: {"kind":"UInt32"},
    IfSpec: {"kind""Ptr","child":{"kind":"Void"}},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    Policy: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_POLICY},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerYield(

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtStatsVectorFree(
    StatsVector: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Rpc.RPC_STATS_VECTOR}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtInqStats(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    Statistics: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Rpc.RPC_STATS_VECTOR}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtIsServerListening(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtStopServerListening(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtWaitServerListen(

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtSetServerStackSize(
    ThreadStackSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSsDontSerializeContext(

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtEnableIdleCleanup(

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtInqIfIds(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    IfIdVector: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Rpc.RPC_IF_ID_VECTOR}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcIfIdVectorFree(
    IfIdVector: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Rpc.RPC_IF_ID_VECTOR}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtInqServerPrincNameA(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    AuthnSvc: {"kind":"UInt32"},
    ServerPrincName: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtInqServerPrincNameW(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    AuthnSvc: {"kind":"UInt32"},
    ServerPrincName: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerInqDefaultPrincNameA(
    AuthnSvc: {"kind":"UInt32"},
    PrincName: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerInqDefaultPrincNameW(
    AuthnSvc: {"kind":"UInt32"},
    PrincName: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcEpResolveBinding(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    IfSpec: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcNsBindingInqEntryNameA(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    EntryNameSyntax: {"kind":"UInt32"},
    EntryName: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcNsBindingInqEntryNameW(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    EntryNameSyntax: {"kind":"UInt32"},
    EntryName: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingCreateA(
    Template: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_BINDING_HANDLE_TEMPLATE_V1_A},
    Security: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_BINDING_HANDLE_SECURITY_V1_A},
    Options: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_BINDING_HANDLE_OPTIONS_V1},
    Binding: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingCreateW(
    Template: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_BINDING_HANDLE_TEMPLATE_V1_W},
    Security: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_BINDING_HANDLE_SECURITY_V1_W},
    Options: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_BINDING_HANDLE_OPTIONS_V1},
    Binding: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerInqBindingHandle(
    Binding: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcImpersonateClient(
    BindingHandle: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcImpersonateClient2(
    BindingHandle: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcRevertToSelfEx(
    BindingHandle: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcRevertToSelf(

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcImpersonateClientContainer(
    BindingHandle: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcRevertContainerImpersonation(

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingInqAuthClientA(
    ClientBinding: {"kind""Ptr","child":{"kind":"Void"}},
    Privs: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    ServerPrincName: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    AuthnLevel: {"kind""Ptr","child":{"kind":"UInt32"}},
    AuthnSvc: {"kind""Ptr","child":{"kind":"UInt32"}},
    AuthzSvc: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingInqAuthClientW(
    ClientBinding: {"kind""Ptr","child":{"kind":"Void"}},
    Privs: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    ServerPrincName: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    AuthnLevel: {"kind""Ptr","child":{"kind":"UInt32"}},
    AuthnSvc: {"kind""Ptr","child":{"kind":"UInt32"}},
    AuthzSvc: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingInqAuthClientExA(
    ClientBinding: {"kind""Ptr","child":{"kind":"Void"}},
    Privs: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    ServerPrincName: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    AuthnLevel: {"kind""Ptr","child":{"kind":"UInt32"}},
    AuthnSvc: {"kind""Ptr","child":{"kind":"UInt32"}},
    AuthzSvc: {"kind""Ptr","child":{"kind":"UInt32"}},
    Flags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingInqAuthClientExW(
    ClientBinding: {"kind""Ptr","child":{"kind":"Void"}},
    Privs: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    ServerPrincName: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    AuthnLevel: {"kind""Ptr","child":{"kind":"UInt32"}},
    AuthnSvc: {"kind""Ptr","child":{"kind":"UInt32"}},
    AuthzSvc: {"kind""Ptr","child":{"kind":"UInt32"}},
    Flags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingInqAuthInfoA(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    ServerPrincName: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    AuthnLevel: {"kind""Ptr","child":{"kind":"UInt32"}},
    AuthnSvc: {"kind""Ptr","child":{"kind":"UInt32"}},
    AuthIdentity: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    AuthzSvc: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingInqAuthInfoW(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    ServerPrincName: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    AuthnLevel: {"kind""Ptr","child":{"kind":"UInt32"}},
    AuthnSvc: {"kind""Ptr","child":{"kind":"UInt32"}},
    AuthIdentity: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    AuthzSvc: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingSetAuthInfoA(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    ServerPrincName: {"kind""Ptr","child":{"kind":"Byte"}},
    AuthnLevel: {"kind":"UInt32"},
    AuthnSvc: {"kind":"UInt32"},
    AuthIdentity: {"kind""Ptr","child":{"kind":"Void"}},
    AuthzSvc: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingSetAuthInfoExA(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    ServerPrincName: {"kind""Ptr","child":{"kind":"Byte"}},
    AuthnLevel: {"kind":"UInt32"},
    AuthnSvc: {"kind":"UInt32"},
    AuthIdentity: {"kind""Ptr","child":{"kind":"Void"}},
    AuthzSvc: {"kind":"UInt32"},
    SecurityQos: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_SECURITY_QOS},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingSetAuthInfoW(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    ServerPrincName: {"kind""Ptr","child":{"kind":"UInt16"}},
    AuthnLevel: {"kind":"UInt32"},
    AuthnSvc: {"kind":"UInt32"},
    AuthIdentity: {"kind""Ptr","child":{"kind":"Void"}},
    AuthzSvc: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingSetAuthInfoExW(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    ServerPrincName: {"kind""Ptr","child":{"kind":"UInt16"}},
    AuthnLevel: {"kind":"UInt32"},
    AuthnSvc: {"kind":"UInt32"},
    AuthIdentity: {"kind""Ptr","child":{"kind":"Void"}},
    AuthzSvc: {"kind":"UInt32"},
    SecurityQOS: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_SECURITY_QOS},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingInqAuthInfoExA(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    ServerPrincName: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    AuthnLevel: {"kind""Ptr","child":{"kind":"UInt32"}},
    AuthnSvc: {"kind""Ptr","child":{"kind":"UInt32"}},
    AuthIdentity: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    AuthzSvc: {"kind""Ptr","child":{"kind":"UInt32"}},
    RpcQosVersion: {"kind":"UInt32"},
    SecurityQOS: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_SECURITY_QOS},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingInqAuthInfoExW(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    ServerPrincName: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    AuthnLevel: {"kind""Ptr","child":{"kind":"UInt32"}},
    AuthnSvc: {"kind""Ptr","child":{"kind":"UInt32"}},
    AuthIdentity: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    AuthzSvc: {"kind""Ptr","child":{"kind":"UInt32"}},
    RpcQosVersion: {"kind":"UInt32"},
    SecurityQOS: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_SECURITY_QOS},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerCompleteSecurityCallback(
    BindingHandle: {"kind""Ptr","child":{"kind":"Void"}},
    Status: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerRegisterAuthInfoA(
    ServerPrincName: {"kind""Ptr","child":{"kind":"Byte"}},
    AuthnSvc: {"kind":"UInt32"},
    GetKeyFn: Windows.Win32.Rpc.RPC_AUTH_KEY_RETRIEVAL_FN,
    Arg: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerRegisterAuthInfoW(
    ServerPrincName: {"kind""Ptr","child":{"kind":"UInt16"}},
    AuthnSvc: {"kind":"UInt32"},
    GetKeyFn: Windows.Win32.Rpc.RPC_AUTH_KEY_RETRIEVAL_FN,
    Arg: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingServerFromClient(
    ClientBinding: {"kind""Ptr","child":{"kind":"Void"}},
    ServerBinding: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcRaiseException(
    exception: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcTestCancel(

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerTestCancel(
    BindingHandle: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcCancelThread(
    Thread: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcCancelThreadEx(
    Thread: {"kind""Ptr","child":{"kind":"Void"}},
    Timeout: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn UuidCreate(
    Uuid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn UuidCreateSequential(
    Uuid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn UuidToStringA(
    Uuid: {"kind""Ptr","child":Guid},
    StringUuid: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn UuidFromStringA(
    StringUuid: {"kind""Ptr","child":{"kind":"Byte"}},
    Uuid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn UuidToStringW(
    Uuid: {"kind""Ptr","child":Guid},
    StringUuid: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn UuidFromStringW(
    StringUuid: {"kind""Ptr","child":{"kind":"UInt16"}},
    Uuid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn UuidCompare(
    Uuid1: {"kind""Ptr","child":Guid},
    Uuid2: {"kind""Ptr","child":Guid},
    Status: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn UuidCreateNil(
    NilUuid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn UuidEqual(
    Uuid1: {"kind""Ptr","child":Guid},
    Uuid2: {"kind""Ptr","child":Guid},
    Status: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn UuidHash(
    Uuid: {"kind""Ptr","child":Guid},
    Status: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn UuidIsNil(
    Uuid: {"kind""Ptr","child":Guid},
    Status: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcEpRegisterNoReplaceA(
    IfSpec: {"kind""Ptr","child":{"kind":"Void"}},
    BindingVector: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_BINDING_VECTOR},
    UuidVector: {"kind""Ptr","child":Windows.Win32.Rpc.UUID_VECTOR},
    Annotation: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcEpRegisterNoReplaceW(
    IfSpec: {"kind""Ptr","child":{"kind":"Void"}},
    BindingVector: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_BINDING_VECTOR},
    UuidVector: {"kind""Ptr","child":Windows.Win32.Rpc.UUID_VECTOR},
    Annotation: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcEpRegisterA(
    IfSpec: {"kind""Ptr","child":{"kind":"Void"}},
    BindingVector: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_BINDING_VECTOR},
    UuidVector: {"kind""Ptr","child":Windows.Win32.Rpc.UUID_VECTOR},
    Annotation: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcEpRegisterW(
    IfSpec: {"kind""Ptr","child":{"kind":"Void"}},
    BindingVector: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_BINDING_VECTOR},
    UuidVector: {"kind""Ptr","child":Windows.Win32.Rpc.UUID_VECTOR},
    Annotation: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcEpUnregister(
    IfSpec: {"kind""Ptr","child":{"kind":"Void"}},
    BindingVector: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_BINDING_VECTOR},
    UuidVector: {"kind""Ptr","child":Windows.Win32.Rpc.UUID_VECTOR},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn DceErrorInqTextA(
    RpcStatus: {"kind":"Int32"},
    ErrorText: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn DceErrorInqTextW(
    RpcStatus: {"kind":"Int32"},
    ErrorText: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtEpEltInqBegin(
    EpBinding: {"kind""Ptr","child":{"kind":"Void"}},
    InquiryType: {"kind":"UInt32"},
    IfId: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_IF_ID},
    VersOption: {"kind":"UInt32"},
    ObjectUuid: {"kind""Ptr","child":Guid},
    InquiryContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtEpEltInqDone(
    InquiryContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtEpEltInqNextA(
    InquiryContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    IfId: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_IF_ID},
    Binding: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    ObjectUuid: {"kind""Ptr","child":Guid},
    Annotation: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtEpEltInqNextW(
    InquiryContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    IfId: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_IF_ID},
    Binding: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    ObjectUuid: {"kind""Ptr","child":Guid},
    Annotation: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtEpUnregister(
    EpBinding: {"kind""Ptr","child":{"kind":"Void"}},
    IfId: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_IF_ID},
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    ObjectUuid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtSetAuthorizationFn(
    AuthorizationFn: Windows.Win32.Rpc.RPC_MGMT_AUTHORIZATION_FN,

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcExceptionFilter(
    ExceptionCode: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerInterfaceGroupCreateW(
    Interfaces: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_INTERFACE_TEMPLATEW},
    NumIfs: {"kind":"UInt32"},
    Endpoints: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_ENDPOINT_TEMPLATEW},
    NumEndpoints: {"kind":"UInt32"},
    IdlePeriod: {"kind":"UInt32"},
    IdleCallbackFn: Windows.Win32.Rpc.RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN,
    IdleCallbackContext: {"kind""Ptr","child":{"kind":"Void"}},
    IfGroup: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerInterfaceGroupCreateA(
    Interfaces: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_INTERFACE_TEMPLATEA},
    NumIfs: {"kind":"UInt32"},
    Endpoints: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_ENDPOINT_TEMPLATEA},
    NumEndpoints: {"kind":"UInt32"},
    IdlePeriod: {"kind":"UInt32"},
    IdleCallbackFn: Windows.Win32.Rpc.RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN,
    IdleCallbackContext: {"kind""Ptr","child":{"kind":"Void"}},
    IfGroup: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerInterfaceGroupClose(
    IfGroup: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerInterfaceGroupActivate(
    IfGroup: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerInterfaceGroupDeactivate(
    IfGroup: {"kind""Ptr","child":{"kind":"Void"}},
    ForceDeactivation: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerInterfaceGroupInqBindings(
    IfGroup: {"kind""Ptr","child":{"kind":"Void"}},
    BindingVector: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Rpc.RPC_BINDING_VECTOR}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcNegotiateTransferSyntax(
    Message: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_MESSAGE},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcGetBuffer(
    Message: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_MESSAGE},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcGetBufferWithObject(
    Message: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_MESSAGE},
    ObjectUuid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcSendReceive(
    Message: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_MESSAGE},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcFreeBuffer(
    Message: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_MESSAGE},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcSend(
    Message: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_MESSAGE},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcReceive(
    Message: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_MESSAGE},
    Size: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcFreePipeBuffer(
    Message: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_MESSAGE},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcReallocPipeBuffer(
    Message: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_MESSAGE},
    NewSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcRequestMutex(
    Mutex: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcClearMutex(
    Mutex: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcDeleteMutex(
    Mutex: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcAllocate(
    Size: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcFree(
    Object: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcPauseExecution(
    Milliseconds: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcGetExtendedError(

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcSystemHandleTypeSpecificWork(
    Handle: {"kind""Ptr","child":{"kind":"Void"}},
    ActualType: {"kind":"Byte"},
    IdlType: {"kind":"Byte"},
    MarshalDirection: Windows.Win32.Rpc.LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION,

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcGetCurrentCallHandle(

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcNsInterfaceExported(
    EntryNameSyntax: {"kind":"UInt32"},
    EntryName: {"kind""Ptr","child":{"kind":"UInt16"}},
    RpcInterfaceInformation: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_SERVER_INTERFACE},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcNsInterfaceUnexported(
    EntryNameSyntax: {"kind":"UInt32"},
    EntryName: {"kind""Ptr","child":{"kind":"UInt16"}},
    RpcInterfaceInformation: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_SERVER_INTERFACE},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcBindingToStaticStringBindingW(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    StringBinding: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcBindingInqSecurityContext(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    SecurityContextHandle: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcBindingInqSecurityContextKeyInfo(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    KeyInfo: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcBindingInqWireIdForSnego(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    WireId: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcBindingInqMarshalledTargetInfo(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    MarshalledTargetInfoSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    MarshalledTargetInfo: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcBindingInqLocalClientPID(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    Pid: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcBindingHandleToAsyncHandle(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    AsyncHandle: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcNsBindingSetEntryNameW(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    EntryNameSyntax: {"kind":"UInt32"},
    EntryName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcNsBindingSetEntryNameA(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    EntryNameSyntax: {"kind":"UInt32"},
    EntryName: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcServerUseProtseqEp2A(
    NetworkAddress: {"kind""Ptr","child":{"kind":"Byte"}},
    Protseq: {"kind""Ptr","child":{"kind":"Byte"}},
    MaxCalls: {"kind":"UInt32"},
    Endpoint: {"kind""Ptr","child":{"kind":"Byte"}},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    Policy: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcServerUseProtseqEp2W(
    NetworkAddress: {"kind""Ptr","child":{"kind":"UInt16"}},
    Protseq: {"kind""Ptr","child":{"kind":"UInt16"}},
    MaxCalls: {"kind":"UInt32"},
    Endpoint: {"kind""Ptr","child":{"kind":"UInt16"}},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    Policy: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcServerUseProtseq2W(
    NetworkAddress: {"kind""Ptr","child":{"kind":"UInt16"}},
    Protseq: {"kind""Ptr","child":{"kind":"UInt16"}},
    MaxCalls: {"kind":"UInt32"},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    Policy: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcServerUseProtseq2A(
    NetworkAddress: {"kind""Ptr","child":{"kind":"Byte"}},
    Protseq: {"kind""Ptr","child":{"kind":"Byte"}},
    MaxCalls: {"kind":"UInt32"},
    SecurityDescriptor: {"kind""Ptr","child":{"kind":"Void"}},
    Policy: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcServerStartService(
    Protseq: {"kind""Ptr","child":{"kind":"UInt16"}},
    Endpoint: {"kind""Ptr","child":{"kind":"UInt16"}},
    IfSpec: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcBindingInqDynamicEndpointW(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    DynamicEndpoint: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcBindingInqDynamicEndpointA(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    DynamicEndpoint: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcServerCheckClientRestriction(
    Context: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcBindingInqTransportType(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    Type: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcIfInqTransferSyntaxes(
    RpcIfHandle: {"kind""Ptr","child":{"kind":"Void"}},
    TransferSyntaxes: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_TRANSFER_SYNTAX},
    TransferSyntaxSize: {"kind":"UInt32"},
    TransferSyntaxCount: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_UuidCreate(
    Uuid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcBindingCopy(
    SourceBinding: {"kind""Ptr","child":{"kind":"Void"}},
    DestinationBinding: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcBindingIsClientLocal(
    BindingHandle: {"kind""Ptr","child":{"kind":"Void"}},
    ClientLocalFlag: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcBindingCreateNP(
    ServerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ServiceName: {"kind""Ptr","child":{"kind":"UInt16"}},
    NetworkOptions: {"kind""Ptr","child":{"kind":"UInt16"}},
    Binding: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcSsDontSerializeContext(

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcServerRegisterForwardFunction(
    pForwardFunction: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_FORWARD_FUNCTION},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcServerInqAddressChangeFn(

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcServerSetAddressChangeFn(
    pAddressChangeFn: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_ADDRESS_CHANGE_FN},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcServerInqLocalConnAddress(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    Buffer: {"kind""Ptr","child":{"kind":"Void"}},
    BufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    AddressFormat: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcServerInqRemoteConnAddress(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    Buffer: {"kind""Ptr","child":{"kind":"Void"}},
    BufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    AddressFormat: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcSessionStrictContextHandle(

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcTurnOnEEInfoPropagation(

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcServerInqTransportType(
    Type: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcMapWin32Status(
    Status: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcRecordCalloutFailure(
    RpcStatus: {"kind":"Int32"},
    CallOutState: {"kind""Ptr","child":Windows.Win32.Rpc.RDR_CALLOUT_STATE},
    DllName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcMgmtEnableDedicatedThreadPool(

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcGetDefaultSD(
    ppSecurityDescriptor: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcOpenClientProcess(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    DesiredAccess: {"kind":"UInt32"},
    ClientProcess: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcBindingIsServerLocal(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    ServerLocalFlag: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcBindingSetPrivateOption(
    hBinding: {"kind""Ptr","child":{"kind":"Void"}},
    option: {"kind":"UInt32"},
    optionValue: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcServerSubscribeForDisconnectNotification(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    hEvent: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcServerGetAssociationID(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    AssociationID: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcServerDisableExceptionFilter(

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcServerSubscribeForDisconnectNotification2(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    hEvent: {"kind""Ptr","child":{"kind":"Void"}},
    SubscriptionId: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcServerUnsubscribeForDisconnectNotification(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    SubscriptionId: Guid,

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsBindingExportA(
    EntryNameSyntax: {"kind":"UInt32"},
    EntryName: {"kind""Ptr","child":{"kind":"Byte"}},
    IfSpec: {"kind""Ptr","child":{"kind":"Void"}},
    BindingVec: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_BINDING_VECTOR},
    ObjectUuidVec: {"kind""Ptr","child":Windows.Win32.Rpc.UUID_VECTOR},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsBindingUnexportA(
    EntryNameSyntax: {"kind":"UInt32"},
    EntryName: {"kind""Ptr","child":{"kind":"Byte"}},
    IfSpec: {"kind""Ptr","child":{"kind":"Void"}},
    ObjectUuidVec: {"kind""Ptr","child":Windows.Win32.Rpc.UUID_VECTOR},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsBindingExportW(
    EntryNameSyntax: {"kind":"UInt32"},
    EntryName: {"kind""Ptr","child":{"kind":"UInt16"}},
    IfSpec: {"kind""Ptr","child":{"kind":"Void"}},
    BindingVec: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_BINDING_VECTOR},
    ObjectUuidVec: {"kind""Ptr","child":Windows.Win32.Rpc.UUID_VECTOR},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsBindingUnexportW(
    EntryNameSyntax: {"kind":"UInt32"},
    EntryName: {"kind""Ptr","child":{"kind":"UInt16"}},
    IfSpec: {"kind""Ptr","child":{"kind":"Void"}},
    ObjectUuidVec: {"kind""Ptr","child":Windows.Win32.Rpc.UUID_VECTOR},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsBindingExportPnPA(
    EntryNameSyntax: {"kind":"UInt32"},
    EntryName: {"kind""Ptr","child":{"kind":"Byte"}},
    IfSpec: {"kind""Ptr","child":{"kind":"Void"}},
    ObjectVector: {"kind""Ptr","child":Windows.Win32.Rpc.UUID_VECTOR},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsBindingUnexportPnPA(
    EntryNameSyntax: {"kind":"UInt32"},
    EntryName: {"kind""Ptr","child":{"kind":"Byte"}},
    IfSpec: {"kind""Ptr","child":{"kind":"Void"}},
    ObjectVector: {"kind""Ptr","child":Windows.Win32.Rpc.UUID_VECTOR},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsBindingExportPnPW(
    EntryNameSyntax: {"kind":"UInt32"},
    EntryName: {"kind""Ptr","child":{"kind":"UInt16"}},
    IfSpec: {"kind""Ptr","child":{"kind":"Void"}},
    ObjectVector: {"kind""Ptr","child":Windows.Win32.Rpc.UUID_VECTOR},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsBindingUnexportPnPW(
    EntryNameSyntax: {"kind":"UInt32"},
    EntryName: {"kind""Ptr","child":{"kind":"UInt16"}},
    IfSpec: {"kind""Ptr","child":{"kind":"Void"}},
    ObjectVector: {"kind""Ptr","child":Windows.Win32.Rpc.UUID_VECTOR},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsBindingLookupBeginA(
    EntryNameSyntax: {"kind":"UInt32"},
    EntryName: {"kind""Ptr","child":{"kind":"Byte"}},
    IfSpec: {"kind""Ptr","child":{"kind":"Void"}},
    ObjUuid: {"kind""Ptr","child":Guid},
    BindingMaxCount: {"kind":"UInt32"},
    LookupContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsBindingLookupBeginW(
    EntryNameSyntax: {"kind":"UInt32"},
    EntryName: {"kind""Ptr","child":{"kind":"UInt16"}},
    IfSpec: {"kind""Ptr","child":{"kind":"Void"}},
    ObjUuid: {"kind""Ptr","child":Guid},
    BindingMaxCount: {"kind":"UInt32"},
    LookupContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsBindingLookupNext(
    LookupContext: {"kind""Ptr","child":{"kind":"Void"}},
    BindingVec: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Rpc.RPC_BINDING_VECTOR}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsBindingLookupDone(
    LookupContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsGroupDeleteA(
    GroupNameSyntax: {"kind":"UInt32"},
    GroupName: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsGroupMbrAddA(
    GroupNameSyntax: {"kind":"UInt32"},
    GroupName: {"kind""Ptr","child":{"kind":"Byte"}},
    MemberNameSyntax: {"kind":"UInt32"},
    MemberName: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsGroupMbrRemoveA(
    GroupNameSyntax: {"kind":"UInt32"},
    GroupName: {"kind""Ptr","child":{"kind":"Byte"}},
    MemberNameSyntax: {"kind":"UInt32"},
    MemberName: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsGroupMbrInqBeginA(
    GroupNameSyntax: {"kind":"UInt32"},
    GroupName: {"kind""Ptr","child":{"kind":"Byte"}},
    MemberNameSyntax: {"kind":"UInt32"},
    InquiryContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsGroupMbrInqNextA(
    InquiryContext: {"kind""Ptr","child":{"kind":"Void"}},
    MemberName: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsGroupDeleteW(
    GroupNameSyntax: {"kind":"UInt32"},
    GroupName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsGroupMbrAddW(
    GroupNameSyntax: {"kind":"UInt32"},
    GroupName: {"kind""Ptr","child":{"kind":"UInt16"}},
    MemberNameSyntax: {"kind":"UInt32"},
    MemberName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsGroupMbrRemoveW(
    GroupNameSyntax: {"kind":"UInt32"},
    GroupName: {"kind""Ptr","child":{"kind":"UInt16"}},
    MemberNameSyntax: {"kind":"UInt32"},
    MemberName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsGroupMbrInqBeginW(
    GroupNameSyntax: {"kind":"UInt32"},
    GroupName: {"kind""Ptr","child":{"kind":"UInt16"}},
    MemberNameSyntax: {"kind":"UInt32"},
    InquiryContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsGroupMbrInqNextW(
    InquiryContext: {"kind""Ptr","child":{"kind":"Void"}},
    MemberName: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsGroupMbrInqDone(
    InquiryContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsProfileDeleteA(
    ProfileNameSyntax: {"kind":"UInt32"},
    ProfileName: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsProfileEltAddA(
    ProfileNameSyntax: {"kind":"UInt32"},
    ProfileName: {"kind""Ptr","child":{"kind":"Byte"}},
    IfId: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_IF_ID},
    MemberNameSyntax: {"kind":"UInt32"},
    MemberName: {"kind""Ptr","child":{"kind":"Byte"}},
    Priority: {"kind":"UInt32"},
    Annotation: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsProfileEltRemoveA(
    ProfileNameSyntax: {"kind":"UInt32"},
    ProfileName: {"kind""Ptr","child":{"kind":"Byte"}},
    IfId: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_IF_ID},
    MemberNameSyntax: {"kind":"UInt32"},
    MemberName: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsProfileEltInqBeginA(
    ProfileNameSyntax: {"kind":"UInt32"},
    ProfileName: {"kind""Ptr","child":{"kind":"Byte"}},
    InquiryType: {"kind":"UInt32"},
    IfId: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_IF_ID},
    VersOption: {"kind":"UInt32"},
    MemberNameSyntax: {"kind":"UInt32"},
    MemberName: {"kind""Ptr","child":{"kind":"Byte"}},
    InquiryContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsProfileEltInqNextA(
    InquiryContext: {"kind""Ptr","child":{"kind":"Void"}},
    IfId: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_IF_ID},
    MemberName: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    Priority: {"kind""Ptr","child":{"kind":"UInt32"}},
    Annotation: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsProfileDeleteW(
    ProfileNameSyntax: {"kind":"UInt32"},
    ProfileName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsProfileEltAddW(
    ProfileNameSyntax: {"kind":"UInt32"},
    ProfileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    IfId: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_IF_ID},
    MemberNameSyntax: {"kind":"UInt32"},
    MemberName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Priority: {"kind":"UInt32"},
    Annotation: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsProfileEltRemoveW(
    ProfileNameSyntax: {"kind":"UInt32"},
    ProfileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    IfId: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_IF_ID},
    MemberNameSyntax: {"kind":"UInt32"},
    MemberName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsProfileEltInqBeginW(
    ProfileNameSyntax: {"kind":"UInt32"},
    ProfileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    InquiryType: {"kind":"UInt32"},
    IfId: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_IF_ID},
    VersOption: {"kind":"UInt32"},
    MemberNameSyntax: {"kind":"UInt32"},
    MemberName: {"kind""Ptr","child":{"kind":"UInt16"}},
    InquiryContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsProfileEltInqNextW(
    InquiryContext: {"kind""Ptr","child":{"kind":"Void"}},
    IfId: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_IF_ID},
    MemberName: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    Priority: {"kind""Ptr","child":{"kind":"UInt32"}},
    Annotation: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsProfileEltInqDone(
    InquiryContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsEntryObjectInqBeginA(
    EntryNameSyntax: {"kind":"UInt32"},
    EntryName: {"kind""Ptr","child":{"kind":"Byte"}},
    InquiryContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsEntryObjectInqBeginW(
    EntryNameSyntax: {"kind":"UInt32"},
    EntryName: {"kind""Ptr","child":{"kind":"UInt16"}},
    InquiryContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsEntryObjectInqNext(
    InquiryContext: {"kind""Ptr","child":{"kind":"Void"}},
    ObjUuid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsEntryObjectInqDone(
    InquiryContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsEntryExpandNameA(
    EntryNameSyntax: {"kind":"UInt32"},
    EntryName: {"kind""Ptr","child":{"kind":"Byte"}},
    ExpandedName: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsMgmtBindingUnexportA(
    EntryNameSyntax: {"kind":"UInt32"},
    EntryName: {"kind""Ptr","child":{"kind":"Byte"}},
    IfId: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_IF_ID},
    VersOption: {"kind":"UInt32"},
    ObjectUuidVec: {"kind""Ptr","child":Windows.Win32.Rpc.UUID_VECTOR},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsMgmtEntryCreateA(
    EntryNameSyntax: {"kind":"UInt32"},
    EntryName: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsMgmtEntryDeleteA(
    EntryNameSyntax: {"kind":"UInt32"},
    EntryName: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsMgmtEntryInqIfIdsA(
    EntryNameSyntax: {"kind":"UInt32"},
    EntryName: {"kind""Ptr","child":{"kind":"Byte"}},
    IfIdVec: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Rpc.RPC_IF_ID_VECTOR}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsMgmtHandleSetExpAge(
    NsHandle: {"kind""Ptr","child":{"kind":"Void"}},
    ExpirationAge: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsMgmtInqExpAge(
    ExpirationAge: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsMgmtSetExpAge(
    ExpirationAge: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsEntryExpandNameW(
    EntryNameSyntax: {"kind":"UInt32"},
    EntryName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ExpandedName: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsMgmtBindingUnexportW(
    EntryNameSyntax: {"kind":"UInt32"},
    EntryName: {"kind""Ptr","child":{"kind":"UInt16"}},
    IfId: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_IF_ID},
    VersOption: {"kind":"UInt32"},
    ObjectUuidVec: {"kind""Ptr","child":Windows.Win32.Rpc.UUID_VECTOR},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsMgmtEntryCreateW(
    EntryNameSyntax: {"kind":"UInt32"},
    EntryName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsMgmtEntryDeleteW(
    EntryNameSyntax: {"kind":"UInt32"},
    EntryName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsMgmtEntryInqIfIdsW(
    EntryNameSyntax: {"kind":"UInt32"},
    EntryName: {"kind""Ptr","child":{"kind":"UInt16"}},
    IfIdVec: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Rpc.RPC_IF_ID_VECTOR}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsBindingImportBeginA(
    EntryNameSyntax: {"kind":"UInt32"},
    EntryName: {"kind""Ptr","child":{"kind":"Byte"}},
    IfSpec: {"kind""Ptr","child":{"kind":"Void"}},
    ObjUuid: {"kind""Ptr","child":Guid},
    ImportContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsBindingImportBeginW(
    EntryNameSyntax: {"kind":"UInt32"},
    EntryName: {"kind""Ptr","child":{"kind":"UInt16"}},
    IfSpec: {"kind""Ptr","child":{"kind":"Void"}},
    ObjUuid: {"kind""Ptr","child":Guid},
    ImportContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsBindingImportNext(
    ImportContext: {"kind""Ptr","child":{"kind":"Void"}},
    Binding: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsBindingImportDone(
    ImportContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsBindingSelect(
    BindingVec: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_BINDING_VECTOR},
    Binding: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcAsyncRegisterInfo(
    pAsync: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_ASYNC_STATE},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcAsyncInitializeHandle(
    pAsync: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_ASYNC_STATE},
    Size: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcAsyncGetCallStatus(
    pAsync: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_ASYNC_STATE},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcAsyncCompleteCall(
    pAsync: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_ASYNC_STATE},
    Reply: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcAsyncAbortCall(
    pAsync: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_ASYNC_STATE},
    ExceptionCode: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcAsyncCancelCall(
    pAsync: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_ASYNC_STATE},
    fAbort: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcErrorStartEnumeration(
    EnumHandle: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_ERROR_ENUM_HANDLE},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcErrorGetNextRecord(
    EnumHandle: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_ERROR_ENUM_HANDLE},
    CopyStrings: Windows.Win32.SystemServices.BOOL,
    ErrorInfo: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_EXTENDED_ERROR_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcErrorEndEnumeration(
    EnumHandle: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_ERROR_ENUM_HANDLE},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcErrorResetEnumeration(
    EnumHandle: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_ERROR_ENUM_HANDLE},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcErrorGetNumberOfRecords(
    EnumHandle: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_ERROR_ENUM_HANDLE},
    Records: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcErrorSaveErrorInfo(
    EnumHandle: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_ERROR_ENUM_HANDLE},
    ErrorBlob: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    BlobSize: {"kind""Ptr","child":{"kind":"UIntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcErrorLoadErrorInfo(
    ErrorBlob: {"kind""Ptr","child":{"kind":"Void"}},
    BlobSize: {"kind":"UIntPtr"},
    EnumHandle: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_ERROR_ENUM_HANDLE},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcErrorAddRecord(
    ErrorInfo: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_EXTENDED_ERROR_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcErrorClearInformation(

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcGetAuthorizationContextForClient(
    ClientBinding: {"kind""Ptr","child":{"kind":"Void"}},
    ImpersonateOnReturn: Windows.Win32.SystemServices.BOOL,
    Reserved1: {"kind""Ptr","child":{"kind":"Void"}},
    pExpirationTime: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},
    Reserved2: Windows.Win32.Kernel.LUID,
    Reserved3: {"kind":"UInt32"},
    Reserved4: {"kind""Ptr","child":{"kind":"Void"}},
    pAuthzClientContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcFreeAuthorizationContext(
    pAuthzClientContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSsContextLockExclusive(
    ServerBindingHandle: {"kind""Ptr","child":{"kind":"Void"}},
    UserContext: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSsContextLockShared(
    ServerBindingHandle: {"kind""Ptr","child":{"kind":"Void"}},
    UserContext: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerInqCallAttributesW(
    ClientBinding: {"kind""Ptr","child":{"kind":"Void"}},
    RpcCallAttributes: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerInqCallAttributesA(
    ClientBinding: {"kind""Ptr","child":{"kind":"Void"}},
    RpcCallAttributes: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerSubscribeForNotification(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    Notification: Windows.Win32.Rpc.RPC_NOTIFICATIONS,
    NotificationType: Windows.Win32.Rpc.RPC_NOTIFICATION_TYPES,
    NotificationInfo: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_ASYNC_NOTIFICATION_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUnsubscribeForNotification(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    Notification: Windows.Win32.Rpc.RPC_NOTIFICATIONS,
    NotificationsQueued: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingBind(
    pAsync: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_ASYNC_STATE},
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    IfSpec: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingUnbind(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcAsyncSetHandle(
    Message: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_MESSAGE},
    pAsync: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_ASYNC_STATE},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcAsyncAbortCall(
    pAsync: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_ASYNC_STATE},
    ExceptionCode: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcExceptionFilter(
    ExceptionCode: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcBindingInqClientTokenAttributes(
    Binding: {"kind""Ptr","child":{"kind":"Void"}},
    TokenId: {"kind""Ptr","child":Windows.Win32.Kernel.LUID},
    AuthenticationId: {"kind""Ptr","child":Windows.Win32.Kernel.LUID},
    ModifiedId: {"kind""Ptr","child":Windows.Win32.Kernel.LUID},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NDRCContextBinding(
    CContext: {"kind":"IntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NDRCContextMarshall(
    CContext: {"kind":"IntPtr"},
    pBuff: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NDRCContextUnmarshall(
    pCContext: {"kind""Ptr","child":{"kind":"IntPtr"}},
    hBinding: {"kind""Ptr","child":{"kind":"Void"}},
    pBuff: {"kind""Ptr","child":{"kind":"Void"}},
    DataRepresentation: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NDRSContextMarshall(
    CContext: {"kind""Ptr","child":Windows.Win32.Rpc.NDR_SCONTEXT_1},
    pBuff: {"kind""Ptr","child":{"kind":"Void"}},
    userRunDownIn: Windows.Win32.Rpc.NDR_RUNDOWN,

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NDRSContextUnmarshall(
    pBuff: {"kind""Ptr","child":{"kind":"Void"}},
    DataRepresentation: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NDRSContextMarshallEx(
    BindingHandle: {"kind""Ptr","child":{"kind":"Void"}},
    CContext: {"kind""Ptr","child":Windows.Win32.Rpc.NDR_SCONTEXT_1},
    pBuff: {"kind""Ptr","child":{"kind":"Void"}},
    userRunDownIn: Windows.Win32.Rpc.NDR_RUNDOWN,

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NDRSContextMarshall2(
    BindingHandle: {"kind""Ptr","child":{"kind":"Void"}},
    CContext: {"kind""Ptr","child":Windows.Win32.Rpc.NDR_SCONTEXT_1},
    pBuff: {"kind""Ptr","child":{"kind":"Void"}},
    userRunDownIn: Windows.Win32.Rpc.NDR_RUNDOWN,
    CtxGuard: {"kind""Ptr","child":{"kind":"Void"}},
    Flags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NDRSContextUnmarshallEx(
    BindingHandle: {"kind""Ptr","child":{"kind":"Void"}},
    pBuff: {"kind""Ptr","child":{"kind":"Void"}},
    DataRepresentation: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NDRSContextUnmarshall2(
    BindingHandle: {"kind""Ptr","child":{"kind":"Void"}},
    pBuff: {"kind""Ptr","child":{"kind":"Void"}},
    DataRepresentation: {"kind":"UInt32"},
    CtxGuard: {"kind""Ptr","child":{"kind":"Void"}},
    Flags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSsDestroyClientContext(
    ContextHandle: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrSimpleTypeMarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    FormatChar: {"kind":"Byte"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrPointerMarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantStructMarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantVaryingStructMarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrFixedArrayMarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantVaryingArrayMarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrVaryingArrayMarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrNonConformantStringMarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantStringMarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrEncapsulatedUnionMarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrNonEncapsulatedUnionMarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrByteCountPointerMarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrXmitOrRepAsMarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrUserMarshalMarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrInterfacePointerMarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrClientContextMarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    ContextHandle: {"kind":"IntPtr"},
    fCheck: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrServerContextMarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    ContextHandle: {"kind""Ptr","child":Windows.Win32.Rpc.NDR_SCONTEXT_1},
    RundownRoutine: Windows.Win32.Rpc.NDR_RUNDOWN,

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrServerContextNewMarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    ContextHandle: {"kind""Ptr","child":Windows.Win32.Rpc.NDR_SCONTEXT_1},
    RundownRoutine: Windows.Win32.Rpc.NDR_RUNDOWN,
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrSimpleTypeUnmarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    FormatChar: {"kind":"Byte"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrRangeUnmarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    ppMemory: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},
    fMustAlloc: {"kind":"Byte"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrCorrelationInitialize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Void"}},
    CacheSize: {"kind":"UInt32"},
    flags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrCorrelationPass(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrCorrelationFree(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrPointerUnmarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    ppMemory: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},
    fMustAlloc: {"kind":"Byte"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantStructUnmarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    ppMemory: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},
    fMustAlloc: {"kind":"Byte"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantVaryingStructUnmarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    ppMemory: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},
    fMustAlloc: {"kind":"Byte"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrFixedArrayUnmarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    ppMemory: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},
    fMustAlloc: {"kind":"Byte"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantArrayUnmarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    ppMemory: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},
    fMustAlloc: {"kind":"Byte"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantVaryingArrayUnmarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    ppMemory: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},
    fMustAlloc: {"kind":"Byte"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrVaryingArrayUnmarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    ppMemory: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},
    fMustAlloc: {"kind":"Byte"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrNonConformantStringUnmarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    ppMemory: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},
    fMustAlloc: {"kind":"Byte"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantStringUnmarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    ppMemory: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},
    fMustAlloc: {"kind":"Byte"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrEncapsulatedUnionUnmarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    ppMemory: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},
    fMustAlloc: {"kind":"Byte"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrNonEncapsulatedUnionUnmarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    ppMemory: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},
    fMustAlloc: {"kind":"Byte"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrByteCountPointerUnmarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    ppMemory: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},
    fMustAlloc: {"kind":"Byte"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrXmitOrRepAsUnmarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    ppMemory: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},
    fMustAlloc: {"kind":"Byte"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrInterfacePointerUnmarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    ppMemory: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},
    fMustAlloc: {"kind":"Byte"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrClientContextUnmarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pContextHandle: {"kind""Ptr","child":{"kind":"IntPtr"}},
    BindHandle: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrServerContextUnmarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrContextHandleInitialize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrServerContextNewUnmarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrPointerBufferSize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantStructBufferSize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantVaryingStructBufferSize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrFixedArrayBufferSize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantVaryingArrayBufferSize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrVaryingArrayBufferSize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantStringBufferSize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrNonConformantStringBufferSize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrEncapsulatedUnionBufferSize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrNonEncapsulatedUnionBufferSize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrByteCountPointerBufferSize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrXmitOrRepAsBufferSize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrUserMarshalBufferSize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrInterfacePointerBufferSize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrContextHandleSize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrPointerMemorySize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrSimpleStructMemorySize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantStructMemorySize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantVaryingStructMemorySize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrComplexStructMemorySize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrFixedArrayMemorySize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantArrayMemorySize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantVaryingArrayMemorySize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrVaryingArrayMemorySize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrComplexArrayMemorySize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantStringMemorySize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrNonConformantStringMemorySize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrEncapsulatedUnionMemorySize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrNonEncapsulatedUnionMemorySize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrXmitOrRepAsMemorySize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrUserMarshalMemorySize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrInterfacePointerMemorySize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrPointerFree(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrSimpleStructFree(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantStructFree(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantVaryingStructFree(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrComplexStructFree(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrFixedArrayFree(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantArrayFree(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantVaryingArrayFree(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrVaryingArrayFree(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrComplexArrayFree(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrEncapsulatedUnionFree(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrNonEncapsulatedUnionFree(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrByteCountPointerFree(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrXmitOrRepAsFree(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrUserMarshalFree(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrInterfacePointerFree(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Byte"}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConvert2(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},
    NumberParams: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConvert(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrUserMarshalSimpleTypeConvert(
    pFlags: {"kind""Ptr","child":{"kind":"UInt32"}},
    pBuffer: {"kind""Ptr","child":{"kind":"Byte"}},
    FormatChar: {"kind":"Byte"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrClientInitializeNew(
    pRpcMsg: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_MESSAGE},
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pStubDescriptor: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_DESC},
    ProcNum: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrServerInitializeNew(
    pRpcMsg: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_MESSAGE},
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pStubDescriptor: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_DESC},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrServerInitializePartial(
    pRpcMsg: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_MESSAGE},
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pStubDescriptor: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_DESC},
    RequestedBufferSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrClientInitialize(
    pRpcMsg: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_MESSAGE},
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pStubDescriptor: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_DESC},
    ProcNum: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrServerInitialize(
    pRpcMsg: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_MESSAGE},
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pStubDescriptor: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_DESC},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrServerInitializeUnmarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pStubDescriptor: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_DESC},
    pRpcMsg: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_MESSAGE},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrServerInitializeMarshall(
    pRpcMsg: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_MESSAGE},
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrGetBuffer(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    BufferLength: {"kind":"UInt32"},
    Handle: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrNsGetBuffer(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    BufferLength: {"kind":"UInt32"},
    Handle: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrSendReceive(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pBufferEnd: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrNsSendReceive(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pBufferEnd: {"kind""Ptr","child":{"kind":"Byte"}},
    pAutoHandle: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrFreeBuffer(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrGetDcomProtocolVersion(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pVersion: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_VERSION},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrClientCall2(
    pStubDescriptor: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_DESC},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrAsyncClientCall(
    pStubDescriptor: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_DESC},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrDcomAsyncClientCall(
    pStubDescriptor: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_DESC},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrAsyncServerCall(
    pRpcMsg: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_MESSAGE},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrDcomAsyncStubCall(
    pThis: Windows.Win32.Com.IRpcStubBuffer,
    pChannel: Windows.Win32.Com.IRpcChannelBuffer,
    pRpcMsg: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_MESSAGE},
    pdwStubPhase: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrStubCall2(
    pThis: {"kind""Ptr","child":{"kind":"Void"}},
    pChannel: {"kind""Ptr","child":{"kind":"Void"}},
    pRpcMsg: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_MESSAGE},
    pdwStubPhase: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrServerCall2(
    pRpcMsg: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_MESSAGE},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMapCommAndFaultStatus(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pCommStatus: {"kind""Ptr","child":{"kind":"UInt32"}},
    pFaultStatus: {"kind""Ptr","child":{"kind":"UInt32"}},
    Status: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSsAllocate(
    Size: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSsDisableAllocate(

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSsEnableAllocate(

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSsFree(
    NodeToFree: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSsGetThreadHandle(

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSsSetClientAllocFree(
    ClientAlloc: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_CLIENT_ALLOC},
    ClientFree: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_CLIENT_FREE},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSsSetThreadHandle(
    Id: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSsSwapClientAllocFree(
    ClientAlloc: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_CLIENT_ALLOC},
    ClientFree: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_CLIENT_FREE},
    OldClientAlloc: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Rpc.RPC_CLIENT_ALLOC}},
    OldClientFree: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Rpc.RPC_CLIENT_FREE}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSmAllocate(
    Size: {"kind":"UIntPtr"},
    pStatus: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSmClientFree(
    pNodeToFree: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSmDestroyClientContext(
    ContextHandle: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSmDisableAllocate(

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSmEnableAllocate(

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSmFree(
    NodeToFree: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSmGetThreadHandle(
    pStatus: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSmSetClientAllocFree(
    ClientAlloc: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_CLIENT_ALLOC},
    ClientFree: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_CLIENT_FREE},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSmSetThreadHandle(
    Id: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSmSwapClientAllocFree(
    ClientAlloc: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_CLIENT_ALLOC},
    ClientFree: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_CLIENT_FREE},
    OldClientAlloc: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Rpc.RPC_CLIENT_ALLOC}},
    OldClientFree: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Rpc.RPC_CLIENT_FREE}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrRpcSsEnableAllocate(
    pMessage: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrRpcSsDisableAllocate(
    pMessage: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrRpcSmSetClientToOsf(
    pMessage: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrRpcSmClientAllocate(
    Size: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrRpcSmClientFree(
    NodeToFree: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrRpcSsDefaultAllocate(
    Size: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrRpcSsDefaultFree(
    NodeToFree: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrFullPointerXlatInit(
    NumberOfPointers: {"kind":"UInt32"},
    XlatSide: Windows.Win32.Rpc.XLAT_SIDE,

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrFullPointerXlatFree(
    pXlatTables: {"kind""Ptr","child":Windows.Win32.Rpc.FULL_PTR_XLAT_TABLES},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrAllocate(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    Len: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrClearOutParameters(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},
    ArgAddr: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrOleAllocate(
    Size: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrOleFree(
    NodeToFree: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrGetUserMarshalInfo(
    pFlags: {"kind""Ptr","child":{"kind":"UInt32"}},
    InformationLevel: {"kind":"UInt32"},
    pMarshalInfo: {"kind""Ptr","child":Windows.Win32.Rpc.NDR_USER_MARSHAL_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrCreateServerInterfaceFromStub(
    pStub: Windows.Win32.Com.IRpcStubBuffer,
    pServerIf: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_SERVER_INTERFACE},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrClientCall3(
    pProxyInfo: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUBLESS_PROXY_INFO},
    nProcNum: {"kind":"UInt32"},
    pReturnValue: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn Ndr64AsyncClientCall(
    pProxyInfo: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUBLESS_PROXY_INFO},
    nProcNum: {"kind":"UInt32"},
    pReturnValue: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn Ndr64DcomAsyncClientCall(
    pProxyInfo: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUBLESS_PROXY_INFO},
    nProcNum: {"kind":"UInt32"},
    pReturnValue: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn Ndr64AsyncServerCall64(
    pRpcMsg: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_MESSAGE},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn Ndr64AsyncServerCallAll(
    pRpcMsg: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_MESSAGE},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn Ndr64DcomAsyncStubCall(
    pThis: Windows.Win32.Com.IRpcStubBuffer,
    pChannel: Windows.Win32.Com.IRpcChannelBuffer,
    pRpcMsg: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_MESSAGE},
    pdwStubPhase: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrStubCall3(
    pThis: {"kind""Ptr","child":{"kind":"Void"}},
    pChannel: {"kind""Ptr","child":{"kind":"Void"}},
    pRpcMsg: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_MESSAGE},
    pdwStubPhase: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrServerCallAll(
    pRpcMsg: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_MESSAGE},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrServerCallNdr64(
    pRpcMsg: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_MESSAGE},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrPartialIgnoreClientMarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrPartialIgnoreServerUnmarshall(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    ppMemory: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrPartialIgnoreClientBufferSize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    pMemory: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrPartialIgnoreServerInitialize(
    pStubMsg: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_MESSAGE},
    ppMemory: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pFormat: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcUserFree(
    AsyncHandle: {"kind""Ptr","child":{"kind":"Void"}},
    pBuffer: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn MesEncodeIncrementalHandleCreate(
    UserState: {"kind""Ptr","child":{"kind":"Void"}},
    AllocFn: Windows.Win32.Rpc.MIDL_ES_ALLOC,
    WriteFn: Windows.Win32.Rpc.MIDL_ES_WRITE,
    pHandle: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn MesDecodeIncrementalHandleCreate(
    UserState: {"kind""Ptr","child":{"kind":"Void"}},
    ReadFn: Windows.Win32.Rpc.MIDL_ES_READ,
    pHandle: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn MesIncrementalHandleReset(
    Handle: {"kind""Ptr","child":{"kind":"Void"}},
    UserState: {"kind""Ptr","child":{"kind":"Void"}},
    AllocFn: Windows.Win32.Rpc.MIDL_ES_ALLOC,
    WriteFn: Windows.Win32.Rpc.MIDL_ES_WRITE,
    ReadFn: Windows.Win32.Rpc.MIDL_ES_READ,
    Operation: Windows.Win32.Rpc.MIDL_ES_CODE,

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn MesEncodeFixedBufferHandleCreate(
    pBuffer: {"kind""Ptr","child":{"kind":"SByte"}},
    BufferSize: {"kind":"UInt32"},
    pEncodedSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    pHandle: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn MesEncodeDynBufferHandleCreate(
    pBuffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},
    pEncodedSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    pHandle: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn MesDecodeBufferHandleCreate(
    Buffer: {"kind""Ptr","child":{"kind":"SByte"}},
    BufferSize: {"kind":"UInt32"},
    pHandle: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn MesBufferHandleReset(
    Handle: {"kind""Ptr","child":{"kind":"Void"}},
    HandleStyle: {"kind":"UInt32"},
    Operation: Windows.Win32.Rpc.MIDL_ES_CODE,
    pBuffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},
    BufferSize: {"kind":"UInt32"},
    pEncodedSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn MesHandleFree(
    Handle: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn MesInqProcEncodingId(
    Handle: {"kind""Ptr","child":{"kind":"Void"}},
    pInterfaceId: {"kind""Ptr","child":Windows.Win32.Rpc.RPC_SYNTAX_IDENTIFIER},
    pProcNum: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesSimpleTypeAlignSize(
    param0: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesSimpleTypeDecode(
    Handle: {"kind""Ptr","child":{"kind":"Void"}},
    pObject: {"kind""Ptr","child":{"kind":"Void"}},
    Size: {"kind":"Int16"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesSimpleTypeEncode(
    Handle: {"kind""Ptr","child":{"kind":"Void"}},
    pStubDesc: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_DESC},
    pObject: {"kind""Ptr","child":{"kind":"Void"}},
    Size: {"kind":"Int16"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesTypeAlignSize(
    Handle: {"kind""Ptr","child":{"kind":"Void"}},
    pStubDesc: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_DESC},
    pFormatString: {"kind""Ptr","child":{"kind":"Byte"}},
    pObject: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesTypeEncode(
    Handle: {"kind""Ptr","child":{"kind":"Void"}},
    pStubDesc: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_DESC},
    pFormatString: {"kind""Ptr","child":{"kind":"Byte"}},
    pObject: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesTypeDecode(
    Handle: {"kind""Ptr","child":{"kind":"Void"}},
    pStubDesc: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_DESC},
    pFormatString: {"kind""Ptr","child":{"kind":"Byte"}},
    pObject: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesTypeAlignSize2(
    Handle: {"kind""Ptr","child":{"kind":"Void"}},
    pPicklingInfo: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_TYPE_PICKLING_INFO},
    pStubDesc: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_DESC},
    pFormatString: {"kind""Ptr","child":{"kind":"Byte"}},
    pObject: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesTypeEncode2(
    Handle: {"kind""Ptr","child":{"kind":"Void"}},
    pPicklingInfo: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_TYPE_PICKLING_INFO},
    pStubDesc: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_DESC},
    pFormatString: {"kind""Ptr","child":{"kind":"Byte"}},
    pObject: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesTypeDecode2(
    Handle: {"kind""Ptr","child":{"kind":"Void"}},
    pPicklingInfo: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_TYPE_PICKLING_INFO},
    pStubDesc: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_DESC},
    pFormatString: {"kind""Ptr","child":{"kind":"Byte"}},
    pObject: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesTypeFree2(
    Handle: {"kind""Ptr","child":{"kind":"Void"}},
    pPicklingInfo: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_TYPE_PICKLING_INFO},
    pStubDesc: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_DESC},
    pFormatString: {"kind""Ptr","child":{"kind":"Byte"}},
    pObject: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesProcEncodeDecode(
    Handle: {"kind""Ptr","child":{"kind":"Void"}},
    pStubDesc: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_DESC},
    pFormatString: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesProcEncodeDecode2(
    Handle: {"kind""Ptr","child":{"kind":"Void"}},
    pStubDesc: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUB_DESC},
    pFormatString: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesTypeAlignSize3(
    Handle: {"kind""Ptr","child":{"kind":"Void"}},
    pPicklingInfo: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_TYPE_PICKLING_INFO},
    pProxyInfo: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUBLESS_PROXY_INFO},
    ArrTypeOffset: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt32"}}},
    nTypeIndex: {"kind":"UInt32"},
    pObject: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesTypeEncode3(
    Handle: {"kind""Ptr","child":{"kind":"Void"}},
    pPicklingInfo: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_TYPE_PICKLING_INFO},
    pProxyInfo: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUBLESS_PROXY_INFO},
    ArrTypeOffset: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt32"}}},
    nTypeIndex: {"kind":"UInt32"},
    pObject: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesTypeDecode3(
    Handle: {"kind""Ptr","child":{"kind":"Void"}},
    pPicklingInfo: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_TYPE_PICKLING_INFO},
    pProxyInfo: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUBLESS_PROXY_INFO},
    ArrTypeOffset: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt32"}}},
    nTypeIndex: {"kind":"UInt32"},
    pObject: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesTypeFree3(
    Handle: {"kind""Ptr","child":{"kind":"Void"}},
    pPicklingInfo: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_TYPE_PICKLING_INFO},
    pProxyInfo: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUBLESS_PROXY_INFO},
    ArrTypeOffset: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt32"}}},
    nTypeIndex: {"kind":"UInt32"},
    pObject: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesProcEncodeDecode3(
    Handle: {"kind""Ptr","child":{"kind":"Void"}},
    pProxyInfo: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUBLESS_PROXY_INFO},
    nProcNum: {"kind":"UInt32"},
    pReturnValue: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesSimpleTypeDecodeAll(
    Handle: {"kind""Ptr","child":{"kind":"Void"}},
    pProxyInfo: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUBLESS_PROXY_INFO},
    pObject: {"kind""Ptr","child":{"kind":"Void"}},
    Size: {"kind":"Int16"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesSimpleTypeEncodeAll(
    Handle: {"kind""Ptr","child":{"kind":"Void"}},
    pProxyInfo: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUBLESS_PROXY_INFO},
    pObject: {"kind""Ptr","child":{"kind":"Void"}},
    Size: {"kind":"Int16"},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesSimpleTypeAlignSizeAll(
    Handle: {"kind""Ptr","child":{"kind":"Void"}},
    pProxyInfo: {"kind""Ptr","child":Windows.Win32.Rpc.MIDL_STUBLESS_PROXY_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcCertGeneratePrincipalNameW(
    Context: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    Flags: {"kind":"UInt32"},
    pBuffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcCertGeneratePrincipalNameA(
    Context: {"kind""Ptr","child":Windows.Win32.Security.CERT_CONTEXT},
    Flags: {"kind":"UInt32"},
    pBuffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
],

"unicode_aliases": [
     "RPC_PROTSEQ_VECTOR"
     "RPC_HTTP_TRANSPORT_CREDENTIALS_"
     "RPC_HTTP_TRANSPORT_CREDENTIALS_V2_"
     "RPC_HTTP_TRANSPORT_CREDENTIALS_V3_"
     "RPC_SECURITY_QOS_V2_"
     "RPC_SECURITY_QOS_V3_"
     "RPC_SECURITY_QOS_V4_"
     "RPC_SECURITY_QOS_V5_"
     "RPC_BINDING_HANDLE_TEMPLATE_V1_"
     "RPC_BINDING_HANDLE_SECURITY_V1_"
     "RPC_ENDPOINT_TEMPLATE"
     "RPC_INTERFACE_TEMPLATE"
     "RPC_CALL_ATTRIBUTES_V1_"
     "RPC_CALL_ATTRIBUTES_V2_"
     "RPC_CALL_ATTRIBUTES_V3_"
     "RpcBindingFromStringBinding"
     "RpcBindingToStringBinding"
     "RpcStringBindingCompose"
     "RpcStringBindingParse"
     "RpcStringFree"
     "RpcNetworkIsProtseqValid"
     "RpcNetworkInqProtseqs"
     "RpcProtseqVectorFree"
     "RpcServerUseProtseq"
     "RpcServerUseProtseqEx"
     "RpcServerUseProtseqEp"
     "RpcServerUseProtseqEpEx"
     "RpcServerUseProtseqIf"
     "RpcServerUseProtseqIfEx"
     "RpcMgmtInqServerPrincName"
     "RpcServerInqDefaultPrincName"
     "RpcNsBindingInqEntryName"
     "RpcBindingCreate"
     "RpcBindingInqAuthClient"
     "RpcBindingInqAuthClientEx"
     "RpcBindingInqAuthInfo"
     "RpcBindingSetAuthInfo"
     "RpcBindingSetAuthInfoEx"
     "RpcBindingInqAuthInfoEx"
     "RpcServerRegisterAuthInfo"
     "UuidToString"
     "UuidFromString"
     "RpcEpRegisterNoReplace"
     "RpcEpRegister"
     "DceErrorInqText"
     "RpcMgmtEpEltInqNext"
     "RpcServerInterfaceGroupCreate"
     "I_RpcNsBindingSetEntryName"
     "I_RpcServerUseProtseqEp2"
     "I_RpcServerUseProtseq2"
     "I_RpcBindingInqDynamicEndpoint"
     "RpcNsBindingExport"
     "RpcNsBindingUnexport"
     "RpcNsBindingExportPnP"
     "RpcNsBindingUnexportPnP"
     "RpcNsBindingLookupBegin"
     "RpcNsGroupDelete"
     "RpcNsGroupMbrAdd"
     "RpcNsGroupMbrRemove"
     "RpcNsGroupMbrInqBegin"
     "RpcNsGroupMbrInqNext"
     "RpcNsProfileDelete"
     "RpcNsProfileEltAdd"
     "RpcNsProfileEltRemove"
     "RpcNsProfileEltInqBegin"
     "RpcNsProfileEltInqNext"
     "RpcNsEntryObjectInqBegin"
     "RpcNsEntryExpandName"
     "RpcNsMgmtBindingUnexport"
     "RpcNsMgmtEntryCreate"
     "RpcNsMgmtEntryDelete"
     "RpcNsMgmtEntryInqIfIds"
     "RpcNsBindingImportBegin"
     "RpcServerInqCallAttributes"
     "RpcCertGeneratePrincipalName"
]}
