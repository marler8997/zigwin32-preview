{
"constants": [
],

"types_definitions": [
// --------------------------------------------------------
// Type: XAPO_REGISTRATION_PROPERTIES
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const XAPO_REGISTRATION_PROPERTIES = *opaque{
};
// --------------------------------------------------------
// Type: XAPO_LOCKFORPROCESS_PARAMETERS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const XAPO_LOCKFORPROCESS_PARAMETERS = *opaque{
};
// --------------------------------------------------------
// Type: XAPO_BUFFER_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const XAPO_BUFFER_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: XAPO_PROCESS_BUFFER_PARAMETERS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const XAPO_PROCESS_BUFFER_PARAMETERS = *opaque{
};
// --------------------------------------------------------
// Type: IXAPO
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXAPO = *opaque{
    // TODO: Method 'GetRegistrationProperties'
    // TODO: Method 'IsInputFormatSupported'
    // TODO: Method 'IsOutputFormatSupported'
    // TODO: Method 'Initialize'
    // TODO: Method 'Reset'
    // TODO: Method 'LockForProcess'
    // TODO: Method 'UnlockForProcess'
    // TODO: Method 'Process'
    // TODO: Method 'CalcInputFrames'
    // TODO: Method 'CalcOutputFrames'
};
// --------------------------------------------------------
// Type: IXAPOParameters
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXAPOParameters = *opaque{
    // TODO: Method 'SetParameters'
    // TODO: Method 'GetParameters'
};
// --------------------------------------------------------
// Type: FXEQ
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const FXEQ = opaque {
};
// --------------------------------------------------------
// Type: FXMasteringLimiter
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const FXMasteringLimiter = opaque {
};
// --------------------------------------------------------
// Type: FXReverb
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const FXReverb = opaque {
};
// --------------------------------------------------------
// Type: FXEcho
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const FXEcho = opaque {
};
// --------------------------------------------------------
// Type: FXEQ_PARAMETERS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const FXEQ_PARAMETERS = *opaque{
};
// --------------------------------------------------------
// Type: FXMASTERINGLIMITER_PARAMETERS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const FXMASTERINGLIMITER_PARAMETERS = *opaque{
};
// --------------------------------------------------------
// Type: FXREVERB_PARAMETERS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const FXREVERB_PARAMETERS = *opaque{
};
// --------------------------------------------------------
// Type: FXECHO_INITDATA
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const FXECHO_INITDATA = *opaque{
};
// --------------------------------------------------------
// Type: FXECHO_PARAMETERS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const FXECHO_PARAMETERS = *opaque{
};
// --------------------------------------------------------
// Type: XAUDIO2_VOICE_DETAILS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const XAUDIO2_VOICE_DETAILS = *opaque{
};
// --------------------------------------------------------
// Type: XAUDIO2_SEND_DESCRIPTOR
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const XAUDIO2_SEND_DESCRIPTOR = *opaque{
};
// --------------------------------------------------------
// Type: XAUDIO2_VOICE_SENDS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const XAUDIO2_VOICE_SENDS = *opaque{
};
// --------------------------------------------------------
// Type: XAUDIO2_EFFECT_DESCRIPTOR
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const XAUDIO2_EFFECT_DESCRIPTOR = *opaque{
};
// --------------------------------------------------------
// Type: XAUDIO2_EFFECT_CHAIN
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const XAUDIO2_EFFECT_CHAIN = *opaque{
};
// --------------------------------------------------------
// Type: XAUDIO2_FILTER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const XAUDIO2_FILTER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: XAUDIO2_FILTER_PARAMETERS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const XAUDIO2_FILTER_PARAMETERS = *opaque{
};
// --------------------------------------------------------
// Type: XAUDIO2_BUFFER
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const XAUDIO2_BUFFER = *opaque{
};
// --------------------------------------------------------
// Type: XAUDIO2_BUFFER_WMA
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const XAUDIO2_BUFFER_WMA = *opaque{
};
// --------------------------------------------------------
// Type: XAUDIO2_VOICE_STATE
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const XAUDIO2_VOICE_STATE = *opaque{
};
// --------------------------------------------------------
// Type: XAUDIO2_PERFORMANCE_DATA
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const XAUDIO2_PERFORMANCE_DATA = *opaque{
};
// --------------------------------------------------------
// Type: XAUDIO2_DEBUG_CONFIGURATION
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const XAUDIO2_DEBUG_CONFIGURATION = *opaque{
};
// --------------------------------------------------------
// Type: IXAudio2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXAudio2 = *opaque{
    // TODO: Method 'RegisterForCallbacks'
    // TODO: Method 'UnregisterForCallbacks'
    // TODO: Method 'CreateSourceVoice'
    // TODO: Method 'CreateSubmixVoice'
    // TODO: Method 'CreateMasteringVoice'
    // TODO: Method 'StartEngine'
    // TODO: Method 'StopEngine'
    // TODO: Method 'CommitChanges'
    // TODO: Method 'GetPerformanceData'
    // TODO: Method 'SetDebugConfiguration'
};
// --------------------------------------------------------
// Type: IXAudio2Extension
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXAudio2Extension = *opaque{
    // TODO: Method 'GetProcessingQuantum'
    // TODO: Method 'GetProcessor'
};
// --------------------------------------------------------
// Type: IXAudio2Voice
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXAudio2Voice = *opaque{
    // TODO: Method 'GetVoiceDetails'
    // TODO: Method 'SetOutputVoices'
    // TODO: Method 'SetEffectChain'
    // TODO: Method 'EnableEffect'
    // TODO: Method 'DisableEffect'
    // TODO: Method 'GetEffectState'
    // TODO: Method 'SetEffectParameters'
    // TODO: Method 'GetEffectParameters'
    // TODO: Method 'SetFilterParameters'
    // TODO: Method 'GetFilterParameters'
    // TODO: Method 'SetOutputFilterParameters'
    // TODO: Method 'GetOutputFilterParameters'
    // TODO: Method 'SetVolume'
    // TODO: Method 'GetVolume'
    // TODO: Method 'SetChannelVolumes'
    // TODO: Method 'GetChannelVolumes'
    // TODO: Method 'SetOutputMatrix'
    // TODO: Method 'GetOutputMatrix'
    // TODO: Method 'DestroyVoice'
};
// --------------------------------------------------------
// Type: IXAudio2SourceVoice
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXAudio2SourceVoice = *opaque{
    // TODO: Method 'Start'
    // TODO: Method 'Stop'
    // TODO: Method 'SubmitSourceBuffer'
    // TODO: Method 'FlushSourceBuffers'
    // TODO: Method 'Discontinuity'
    // TODO: Method 'ExitLoop'
    // TODO: Method 'GetState'
    // TODO: Method 'SetFrequencyRatio'
    // TODO: Method 'GetFrequencyRatio'
    // TODO: Method 'SetSourceSampleRate'
};
// --------------------------------------------------------
// Type: IXAudio2SubmixVoice
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXAudio2SubmixVoice = *opaque{
};
// --------------------------------------------------------
// Type: IXAudio2MasteringVoice
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXAudio2MasteringVoice = *opaque{
    // TODO: Method 'GetChannelMask'
};
// --------------------------------------------------------
// Type: IXAudio2EngineCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXAudio2EngineCallback = *opaque{
    // TODO: Method 'OnProcessingPassStart'
    // TODO: Method 'OnProcessingPassEnd'
    // TODO: Method 'OnCriticalError'
};
// --------------------------------------------------------
// Type: IXAudio2VoiceCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXAudio2VoiceCallback = *opaque{
    // TODO: Method 'OnVoiceProcessingPassStart'
    // TODO: Method 'OnVoiceProcessingPassEnd'
    // TODO: Method 'OnStreamEnd'
    // TODO: Method 'OnBufferStart'
    // TODO: Method 'OnBufferEnd'
    // TODO: Method 'OnLoopEnd'
    // TODO: Method 'OnVoiceError'
};
// --------------------------------------------------------
// Type: AudioVolumeMeter
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const AudioVolumeMeter = opaque {
};
// --------------------------------------------------------
// Type: AudioReverb
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const AudioReverb = opaque {
};
// --------------------------------------------------------
// Type: XAUDIO2FX_VOLUMEMETER_LEVELS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const XAUDIO2FX_VOLUMEMETER_LEVELS = *opaque{
};
// --------------------------------------------------------
// Type: XAUDIO2FX_REVERB_PARAMETERS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const XAUDIO2FX_REVERB_PARAMETERS = *opaque{
};
// --------------------------------------------------------
// Type: XAUDIO2FX_REVERB_I3DL2_PARAMETERS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const XAUDIO2FX_REVERB_I3DL2_PARAMETERS = *opaque{
};
// --------------------------------------------------------
// Type: HrtfPosition
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HrtfPosition = extern struct {
    x: {"kind":"Single"},
    y: {"kind":"Single"},
    z: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: HrtfOrientation
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HrtfOrientation = extern struct {
    element: {"kind":"Array","child": {"kind":"Single"}},
};
// --------------------------------------------------------
// Type: HrtfDirectivityType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HrtfDirectivityType = *opaque{
};
// --------------------------------------------------------
// Type: HrtfEnvironment
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HrtfEnvironment = *opaque{
};
// --------------------------------------------------------
// Type: HrtfDirectivity
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HrtfDirectivity = extern struct {
    type: Windows.Win32.XAudio2.HrtfDirectivityType,
    scaling: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: HrtfDirectivityCardioid
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HrtfDirectivityCardioid = extern struct {
    directivity: Windows.Win32.XAudio2.HrtfDirectivity,
    order: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: HrtfDirectivityCone
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HrtfDirectivityCone = extern struct {
    directivity: Windows.Win32.XAudio2.HrtfDirectivity,
    innerAngle: {"kind":"Single"},
    outerAngle: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: HrtfDistanceDecayType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HrtfDistanceDecayType = *opaque{
};
// --------------------------------------------------------
// Type: HrtfDistanceDecay
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HrtfDistanceDecay = extern struct {
    type: Windows.Win32.XAudio2.HrtfDistanceDecayType,
    maxGain: {"kind":"Single"},
    minGain: {"kind":"Single"},
    unityGainDistance: {"kind":"Single"},
    cutoffDistance: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: HrtfApoInit
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HrtfApoInit = extern struct {
    distanceDecay: {"kind""Ptr","child":Windows.Win32.XAudio2.HrtfDistanceDecay},
    directivity: {"kind""Ptr","child":Windows.Win32.XAudio2.HrtfDirectivity},
};
// --------------------------------------------------------
// Type: IXAPOHrtfParameters
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXAPOHrtfParameters = *opaque{
    // TODO: Method 'SetSourcePosition'
    // TODO: Method 'SetSourceOrientation'
    // TODO: Method 'SetSourceGain'
    // TODO: Method 'SetEnvironment'
};
],

"func_definitions": [

// set_last_errror=False (can and should we use this?)
pub extern "XAudio2_9" fn CreateFX(
    clsid: {"kind""Ptr","child":Guid},
    pEffect: {"kind""Ptr","child":Windows.Win32.Com.IUnknown},
    pInitDat: {"kind""Ptr","child":{"kind":"Void"}},
    InitDataByteSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "XAudio2_9" fn XAudio2CreateWithVersionInfo(
    ppXAudio2: {"kind""Ptr","child":Windows.Win32.XAudio2.IXAudio2},
    Flags: {"kind":"UInt32"},
    XAudio2Processor: {"kind":"UInt32"},
    ntddiVersion: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "XAudio2_9" fn CreateAudioVolumeMeter(
    ppApo: {"kind""Ptr","child":Windows.Win32.Com.IUnknown},

// set_last_errror=False (can and should we use this?)
pub extern "XAudio2_9" fn CreateAudioReverb(
    ppApo: {"kind""Ptr","child":Windows.Win32.Com.IUnknown},

// set_last_errror=False (can and should we use this?)
pub extern "HrtfApo" fn CreateHrtfApo(
    init: {"kind""Ptr","child":Windows.Win32.XAudio2.HrtfApoInit},
    xApo: {"kind""Ptr","child":Windows.Win32.XAudio2.IXAPO},
],

"unicode_aliases": [
]}
