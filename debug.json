{
"constants": [
     {
         "name": "ACTIVPROF_E_PROFILER_PRESENT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220992
    }
    ,{
         "name": "ACTIVPROF_E_PROFILER_ABSENT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220991
    }
    ,{
         "name": "ACTIVPROF_E_UNABLE_TO_APPLY_ACTION"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220990
    }
    ,{
         "name": "PROFILER_HEAP_OBJECT_NAME_ID_UNAVAILABLE"
        ,"type": {"kind":"UInt32"}
        ,"value": 4294967295
    }
],

"types_definitions": [
// --------------------------------------------------------
// Type: FLASHWINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FLASHWINFO = extern struct {
    cbSize: {"kind":"UInt32"},
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    dwFlags: {"kind":"UInt32"},
    uCount: {"kind":"UInt32"},
    dwTimeout: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CONTEXT = extern struct {
    ContextFlags: {"kind":"UInt32"},
    Dr0: {"kind":"UInt32"},
    Dr1: {"kind":"UInt32"},
    Dr2: {"kind":"UInt32"},
    Dr3: {"kind":"UInt32"},
    Dr6: {"kind":"UInt32"},
    Dr7: {"kind":"UInt32"},
    FloatSave: Windows.Win32.SystemServices.FLOATING_SAVE_AREA,
    SegGs: {"kind":"UInt32"},
    SegFs: {"kind":"UInt32"},
    SegEs: {"kind":"UInt32"},
    SegDs: {"kind":"UInt32"},
    Edi: {"kind":"UInt32"},
    Esi: {"kind":"UInt32"},
    Ebx: {"kind":"UInt32"},
    Edx: {"kind":"UInt32"},
    Ecx: {"kind":"UInt32"},
    Eax: {"kind":"UInt32"},
    Ebp: {"kind":"UInt32"},
    Eip: {"kind":"UInt32"},
    SegCs: {"kind":"UInt32"},
    EFlags: {"kind":"UInt32"},
    Esp: {"kind":"UInt32"},
    SegSs: {"kind":"UInt32"},
    ExtendedRegisters: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: LDT_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LDT_ENTRY = extern struct {
    LimitLow: {"kind":"UInt16"},
    BaseLow: {"kind":"UInt16"},
    HighWord: Windows.Win32.Debug.LDT_ENTRY+_HighWord_e__Union,
    // --------------------------------------------------------
    // Type: _HighWord_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _HighWord_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Bytes_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Bytes_e__Struct = extern struct {
            BaseMid: {"kind":"Byte"},
            Flags1: {"kind":"Byte"},
            Flags2: {"kind":"Byte"},
            BaseHi: {"kind":"Byte"},
        };
        // --------------------------------------------------------
        // Type: _Bits_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Bits_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: WOW64_FLOATING_SAVE_AREA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WOW64_FLOATING_SAVE_AREA = extern struct {
    ControlWord: {"kind":"UInt32"},
    StatusWord: {"kind":"UInt32"},
    TagWord: {"kind":"UInt32"},
    ErrorOffset: {"kind":"UInt32"},
    ErrorSelector: {"kind":"UInt32"},
    DataOffset: {"kind":"UInt32"},
    DataSelector: {"kind":"UInt32"},
    RegisterArea: {"kind":"Array","child": {"kind":"Byte"}},
    Cr0NpxState: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: WOW64_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WOW64_CONTEXT = extern struct {
    ContextFlags: {"kind":"UInt32"},
    Dr0: {"kind":"UInt32"},
    Dr1: {"kind":"UInt32"},
    Dr2: {"kind":"UInt32"},
    Dr3: {"kind":"UInt32"},
    Dr6: {"kind":"UInt32"},
    Dr7: {"kind":"UInt32"},
    FloatSave: Windows.Win32.Debug.WOW64_FLOATING_SAVE_AREA,
    SegGs: {"kind":"UInt32"},
    SegFs: {"kind":"UInt32"},
    SegEs: {"kind":"UInt32"},
    SegDs: {"kind":"UInt32"},
    Edi: {"kind":"UInt32"},
    Esi: {"kind":"UInt32"},
    Ebx: {"kind":"UInt32"},
    Edx: {"kind":"UInt32"},
    Ecx: {"kind":"UInt32"},
    Eax: {"kind":"UInt32"},
    Ebp: {"kind":"UInt32"},
    Eip: {"kind":"UInt32"},
    SegCs: {"kind":"UInt32"},
    EFlags: {"kind":"UInt32"},
    Esp: {"kind":"UInt32"},
    SegSs: {"kind":"UInt32"},
    ExtendedRegisters: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: WOW64_LDT_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WOW64_LDT_ENTRY = extern struct {
    LimitLow: {"kind":"UInt16"},
    BaseLow: {"kind":"UInt16"},
    HighWord: Windows.Win32.Debug.WOW64_LDT_ENTRY+_HighWord_e__Union,
    // --------------------------------------------------------
    // Type: _HighWord_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _HighWord_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Bytes_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Bytes_e__Struct = extern struct {
            BaseMid: {"kind":"Byte"},
            Flags1: {"kind":"Byte"},
            Flags2: {"kind":"Byte"},
            BaseHi: {"kind":"Byte"},
        };
        // --------------------------------------------------------
        // Type: _Bits_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Bits_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: EXCEPTION_RECORD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EXCEPTION_RECORD = extern struct {
    ExceptionCode: {"kind":"UInt32"},
    ExceptionFlags: {"kind":"UInt32"},
    ExceptionRecord: {"kind""Ptr","child":Windows.Win32.Debug.EXCEPTION_RECORD},
    ExceptionAddress: {"kind""Ptr","child":{"kind":"Void"}},
    NumberParameters: {"kind":"UInt32"},
    ExceptionInformation: {"kind":"Array","child": {"kind":"UIntPtr"}},
};
// --------------------------------------------------------
// Type: EXCEPTION_RECORD64
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EXCEPTION_RECORD64 = extern struct {
    ExceptionCode: {"kind":"UInt32"},
    ExceptionFlags: {"kind":"UInt32"},
    ExceptionRecord: {"kind":"UInt64"},
    ExceptionAddress: {"kind":"UInt64"},
    NumberParameters: {"kind":"UInt32"},
    __unusedAlignment: {"kind":"UInt32"},
    ExceptionInformation: {"kind":"Array","child": {"kind":"UInt64"}},
};
// --------------------------------------------------------
// Type: EXCEPTION_POINTERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EXCEPTION_POINTERS = extern struct {
    ExceptionRecord: {"kind""Ptr","child":Windows.Win32.Debug.EXCEPTION_RECORD},
    ContextRecord: {"kind""Ptr","child":Windows.Win32.Debug.CONTEXT},
};
// --------------------------------------------------------
// Type: IMAGE_FILE_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_FILE_HEADER = extern struct {
    Machine: {"kind":"UInt16"},
    NumberOfSections: {"kind":"UInt16"},
    TimeDateStamp: {"kind":"UInt32"},
    PointerToSymbolTable: {"kind":"UInt32"},
    NumberOfSymbols: {"kind":"UInt32"},
    SizeOfOptionalHeader: {"kind":"UInt16"},
    Characteristics: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: IMAGE_DATA_DIRECTORY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_DATA_DIRECTORY = extern struct {
    VirtualAddress: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IMAGE_OPTIONAL_HEADER64
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const IMAGE_OPTIONAL_HEADER64 = *opaque{
};
// --------------------------------------------------------
// Type: IMAGE_NT_HEADERS64
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_NT_HEADERS64 = extern struct {
    Signature: {"kind":"UInt32"},
    FileHeader: Windows.Win32.Debug.IMAGE_FILE_HEADER,
    OptionalHeader: Windows.Win32.Debug.IMAGE_OPTIONAL_HEADER64,
};
// --------------------------------------------------------
// Type: IMAGE_SECTION_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_SECTION_HEADER = extern struct {
    Name: {"kind":"Array","child": {"kind":"Byte"}},
    Misc: Windows.Win32.Debug.IMAGE_SECTION_HEADER+_Misc_e__Union,
    VirtualAddress: {"kind":"UInt32"},
    SizeOfRawData: {"kind":"UInt32"},
    PointerToRawData: {"kind":"UInt32"},
    PointerToRelocations: {"kind":"UInt32"},
    PointerToLinenumbers: {"kind":"UInt32"},
    NumberOfRelocations: {"kind":"UInt16"},
    NumberOfLinenumbers: {"kind":"UInt16"},
    Characteristics: {"kind":"UInt32"},
    // --------------------------------------------------------
    // Type: _Misc_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Misc_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IMAGE_LOAD_CONFIG_DIRECTORY32
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_LOAD_CONFIG_DIRECTORY32 = extern struct {
    Size: {"kind":"UInt32"},
    TimeDateStamp: {"kind":"UInt32"},
    MajorVersion: {"kind":"UInt16"},
    MinorVersion: {"kind":"UInt16"},
    GlobalFlagsClear: {"kind":"UInt32"},
    GlobalFlagsSet: {"kind":"UInt32"},
    CriticalSectionDefaultTimeout: {"kind":"UInt32"},
    DeCommitFreeBlockThreshold: {"kind":"UInt32"},
    DeCommitTotalFreeThreshold: {"kind":"UInt32"},
    LockPrefixTable: {"kind":"UInt32"},
    MaximumAllocationSize: {"kind":"UInt32"},
    VirtualMemoryThreshold: {"kind":"UInt32"},
    ProcessHeapFlags: {"kind":"UInt32"},
    ProcessAffinityMask: {"kind":"UInt32"},
    CSDVersion: {"kind":"UInt16"},
    DependentLoadFlags: {"kind":"UInt16"},
    EditList: {"kind":"UInt32"},
    SecurityCookie: {"kind":"UInt32"},
    SEHandlerTable: {"kind":"UInt32"},
    SEHandlerCount: {"kind":"UInt32"},
    GuardCFCheckFunctionPointer: {"kind":"UInt32"},
    GuardCFDispatchFunctionPointer: {"kind":"UInt32"},
    GuardCFFunctionTable: {"kind":"UInt32"},
    GuardCFFunctionCount: {"kind":"UInt32"},
    GuardFlags: {"kind":"UInt32"},
    CodeIntegrity: Windows.Win32.SystemServices.IMAGE_LOAD_CONFIG_CODE_INTEGRITY,
    GuardAddressTakenIatEntryTable: {"kind":"UInt32"},
    GuardAddressTakenIatEntryCount: {"kind":"UInt32"},
    GuardLongJumpTargetTable: {"kind":"UInt32"},
    GuardLongJumpTargetCount: {"kind":"UInt32"},
    DynamicValueRelocTable: {"kind":"UInt32"},
    CHPEMetadataPointer: {"kind":"UInt32"},
    GuardRFFailureRoutine: {"kind":"UInt32"},
    GuardRFFailureRoutineFunctionPointer: {"kind":"UInt32"},
    DynamicValueRelocTableOffset: {"kind":"UInt32"},
    DynamicValueRelocTableSection: {"kind":"UInt16"},
    Reserved2: {"kind":"UInt16"},
    GuardRFVerifyStackPointerFunctionPointer: {"kind":"UInt32"},
    HotPatchTableOffset: {"kind":"UInt32"},
    Reserved3: {"kind":"UInt32"},
    EnclaveConfigurationPointer: {"kind":"UInt32"},
    VolatileMetadataPointer: {"kind":"UInt32"},
    GuardEHContinuationTable: {"kind":"UInt32"},
    GuardEHContinuationCount: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IMAGE_LOAD_CONFIG_DIRECTORY64
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const IMAGE_LOAD_CONFIG_DIRECTORY64 = *opaque{
};
// --------------------------------------------------------
// Type: IMAGE_DEBUG_DIRECTORY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_DEBUG_DIRECTORY = extern struct {
    Characteristics: {"kind":"UInt32"},
    TimeDateStamp: {"kind":"UInt32"},
    MajorVersion: {"kind":"UInt16"},
    MinorVersion: {"kind":"UInt16"},
    Type: {"kind":"UInt32"},
    SizeOfData: {"kind":"UInt32"},
    AddressOfRawData: {"kind":"UInt32"},
    PointerToRawData: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IMAGE_COFF_SYMBOLS_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_COFF_SYMBOLS_HEADER = extern struct {
    NumberOfSymbols: {"kind":"UInt32"},
    LvaToFirstSymbol: {"kind":"UInt32"},
    NumberOfLinenumbers: {"kind":"UInt32"},
    LvaToFirstLinenumber: {"kind":"UInt32"},
    RvaToFirstByteOfCode: {"kind":"UInt32"},
    RvaToLastByteOfCode: {"kind":"UInt32"},
    RvaToFirstByteOfData: {"kind":"UInt32"},
    RvaToLastByteOfData: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: FPO_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FPO_DATA = extern struct {
    ulOffStart: {"kind":"UInt32"},
    cbProcSize: {"kind":"UInt32"},
    cdwLocals: {"kind":"UInt32"},
    cdwParams: {"kind":"UInt16"},
    _bitfield: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: IMAGE_FUNCTION_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_FUNCTION_ENTRY = extern struct {
    StartingAddress: {"kind":"UInt32"},
    EndingAddress: {"kind":"UInt32"},
    EndOfPrologue: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IMAGE_FUNCTION_ENTRY64
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const IMAGE_FUNCTION_ENTRY64 = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PVECTORED_EXCEPTION_HANDLER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PVECTORED_EXCEPTION_HANDLER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: EXCEPTION_DEBUG_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EXCEPTION_DEBUG_INFO = extern struct {
    ExceptionRecord: Windows.Win32.Debug.EXCEPTION_RECORD,
    dwFirstChance: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CREATE_THREAD_DEBUG_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CREATE_THREAD_DEBUG_INFO = extern struct {
    hThread: Windows.Win32.SystemServices.HANDLE,
    lpThreadLocalBase: {"kind""Ptr","child":{"kind":"Void"}},
    lpStartAddress: Windows.Win32.SystemServices.LPTHREAD_START_ROUTINE,
};
// --------------------------------------------------------
// Type: CREATE_PROCESS_DEBUG_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CREATE_PROCESS_DEBUG_INFO = extern struct {
    hFile: Windows.Win32.SystemServices.HANDLE,
    hProcess: Windows.Win32.SystemServices.HANDLE,
    hThread: Windows.Win32.SystemServices.HANDLE,
    lpBaseOfImage: {"kind""Ptr","child":{"kind":"Void"}},
    dwDebugInfoFileOffset: {"kind":"UInt32"},
    nDebugInfoSize: {"kind":"UInt32"},
    lpThreadLocalBase: {"kind""Ptr","child":{"kind":"Void"}},
    lpStartAddress: Windows.Win32.SystemServices.LPTHREAD_START_ROUTINE,
    lpImageName: {"kind""Ptr","child":{"kind":"Void"}},
    fUnicode: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: EXIT_THREAD_DEBUG_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EXIT_THREAD_DEBUG_INFO = extern struct {
    dwExitCode: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: EXIT_PROCESS_DEBUG_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EXIT_PROCESS_DEBUG_INFO = extern struct {
    dwExitCode: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: LOAD_DLL_DEBUG_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LOAD_DLL_DEBUG_INFO = extern struct {
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpBaseOfDll: {"kind""Ptr","child":{"kind":"Void"}},
    dwDebugInfoFileOffset: {"kind":"UInt32"},
    nDebugInfoSize: {"kind":"UInt32"},
    lpImageName: {"kind""Ptr","child":{"kind":"Void"}},
    fUnicode: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: UNLOAD_DLL_DEBUG_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UNLOAD_DLL_DEBUG_INFO = extern struct {
    lpBaseOfDll: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: OUTPUT_DEBUG_STRING_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OUTPUT_DEBUG_STRING_INFO = extern struct {
    lpDebugStringData: {"kind""Ptr","child":{"kind":"SByte"}},
    fUnicode: {"kind":"UInt16"},
    nDebugStringLength: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: RIP_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RIP_INFO = extern struct {
    dwError: {"kind":"UInt32"},
    dwType: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DEBUG_EVENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEBUG_EVENT = extern struct {
    dwDebugEventCode: {"kind":"UInt32"},
    dwProcessId: {"kind":"UInt32"},
    dwThreadId: {"kind":"UInt32"},
    u: Windows.Win32.Debug.DEBUG_EVENT+_u_e__Union,
    // --------------------------------------------------------
    // Type: _u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PTOP_LEVEL_EXCEPTION_FILTER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PTOP_LEVEL_EXCEPTION_FILTER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPTOP_LEVEL_EXCEPTION_FILTER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPTOP_LEVEL_EXCEPTION_FILTER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WCT_OBJECT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WCT_OBJECT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WCT_OBJECT_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WCT_OBJECT_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: WAITCHAIN_NODE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WAITCHAIN_NODE_INFO = extern struct {
    ObjectType: Windows.Win32.Debug.WCT_OBJECT_TYPE,
    ObjectStatus: Windows.Win32.Debug.WCT_OBJECT_STATUS,
    Anonymous: Windows.Win32.Debug.WAITCHAIN_NODE_INFO+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _LockObject_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _LockObject_e__Struct = extern struct {
            ObjectName: {"kind":"Array","child": {"kind":"UInt16"}},
            Timeout: Windows.Win32.SystemServices.LARGE_INTEGER,
            Alertable: Windows.Win32.SystemServices.BOOL,
        };
        // --------------------------------------------------------
        // Type: _ThreadObject_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _ThreadObject_e__Struct = extern struct {
            ProcessId: {"kind":"UInt32"},
            ThreadId: {"kind":"UInt32"},
            WaitTime: {"kind":"UInt32"},
            ContextSwitches: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: PWAITCHAINCALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWAITCHAINCALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PCOGETCALLSTATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PCOGETCALLSTATE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PCOGETACTIVATIONSTATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PCOGETACTIVATIONSTATE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: MINIDUMP_LOCATION_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MINIDUMP_LOCATION_DESCRIPTOR = extern struct {
    DataSize: {"kind":"UInt32"},
    Rva: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MINIDUMP_LOCATION_DESCRIPTOR64
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const MINIDUMP_LOCATION_DESCRIPTOR64 = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_MEMORY_DESCRIPTOR
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const MINIDUMP_MEMORY_DESCRIPTOR = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_MEMORY_DESCRIPTOR64
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const MINIDUMP_MEMORY_DESCRIPTOR64 = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_HEADER
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const MINIDUMP_HEADER = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: MINIDUMP_DIRECTORY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MINIDUMP_DIRECTORY = extern struct {
    StreamType: {"kind":"UInt32"},
    Location: Windows.Win32.Debug.MINIDUMP_LOCATION_DESCRIPTOR,
};
// --------------------------------------------------------
// Type: MINIDUMP_STRING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MINIDUMP_STRING = extern struct {
    Length: {"kind":"UInt32"},
    Buffer: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: MINIDUMP_STREAM_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MINIDUMP_STREAM_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: CPU_INFORMATION
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const CPU_INFORMATION = *opaque{
    // --------------------------------------------------------
    // Type: _X86CpuInfo_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _X86CpuInfo_e__Struct = extern struct {
        VendorId: {"kind":"Array","child": {"kind":"UInt32"}},
        VersionInformation: {"kind":"UInt32"},
        FeatureInformation: {"kind":"UInt32"},
        AMDExtendedCpuFeatures: {"kind":"UInt32"},
    };
    // --------------------------------------------------------
    // Type: _OtherCpuInfo_e__Struct
    // TypeLayoutAttr: sequential
    // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
    pub const _OtherCpuInfo_e__Struct = *opaque{
    };
};
// --------------------------------------------------------
// Type: MINIDUMP_SYSTEM_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MINIDUMP_SYSTEM_INFO = extern struct {
    ProcessorArchitecture: {"kind":"UInt16"},
    ProcessorLevel: {"kind":"UInt16"},
    ProcessorRevision: {"kind":"UInt16"},
    Anonymous1: Windows.Win32.Debug.MINIDUMP_SYSTEM_INFO+_Anonymous1_e__Union,
    MajorVersion: {"kind":"UInt32"},
    MinorVersion: {"kind":"UInt32"},
    BuildNumber: {"kind":"UInt32"},
    PlatformId: {"kind":"UInt32"},
    CSDVersionRva: {"kind":"UInt32"},
    Anonymous2: Windows.Win32.Debug.MINIDUMP_SYSTEM_INFO+_Anonymous2_e__Union,
    Cpu: Windows.Win32.Debug.CPU_INFORMATION,
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            SuiteMask: {"kind":"UInt16"},
            Reserved2: {"kind":"UInt16"},
        };
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            NumberOfProcessors: {"kind":"Byte"},
            ProductType: {"kind":"Byte"},
        };
    };
};
// --------------------------------------------------------
// Type: MINIDUMP_THREAD
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const MINIDUMP_THREAD = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_THREAD_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MINIDUMP_THREAD_LIST = extern struct {
    NumberOfThreads: {"kind":"UInt32"},
    Threads: {"kind":"Array","child": Windows.Win32.Debug.MINIDUMP_THREAD},
};
// --------------------------------------------------------
// Type: MINIDUMP_THREAD_EX
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const MINIDUMP_THREAD_EX = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_THREAD_EX_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MINIDUMP_THREAD_EX_LIST = extern struct {
    NumberOfThreads: {"kind":"UInt32"},
    Threads: {"kind":"Array","child": Windows.Win32.Debug.MINIDUMP_THREAD_EX},
};
// --------------------------------------------------------
// Type: MINIDUMP_EXCEPTION
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const MINIDUMP_EXCEPTION = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_EXCEPTION_STREAM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MINIDUMP_EXCEPTION_STREAM = extern struct {
    ThreadId: {"kind":"UInt32"},
    __alignment: {"kind":"UInt32"},
    ExceptionRecord: Windows.Win32.Debug.MINIDUMP_EXCEPTION,
    ThreadContext: Windows.Win32.Debug.MINIDUMP_LOCATION_DESCRIPTOR,
};
// --------------------------------------------------------
// Type: MINIDUMP_MODULE
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const MINIDUMP_MODULE = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_MODULE_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MINIDUMP_MODULE_LIST = extern struct {
    NumberOfModules: {"kind":"UInt32"},
    Modules: {"kind":"Array","child": Windows.Win32.Debug.MINIDUMP_MODULE},
};
// --------------------------------------------------------
// Type: MINIDUMP_MEMORY_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MINIDUMP_MEMORY_LIST = extern struct {
    NumberOfMemoryRanges: {"kind":"UInt32"},
    MemoryRanges: {"kind":"Array","child": Windows.Win32.Debug.MINIDUMP_MEMORY_DESCRIPTOR},
};
// --------------------------------------------------------
// Type: MINIDUMP_MEMORY64_LIST
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const MINIDUMP_MEMORY64_LIST = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_EXCEPTION_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MINIDUMP_EXCEPTION_INFORMATION = extern struct {
    ThreadId: {"kind":"UInt32"},
    ExceptionPointers: {"kind""Ptr","child":Windows.Win32.Debug.EXCEPTION_POINTERS},
    ClientPointers: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: MINIDUMP_EXCEPTION_INFORMATION64
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const MINIDUMP_EXCEPTION_INFORMATION64 = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_HANDLE_OBJECT_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MINIDUMP_HANDLE_OBJECT_INFORMATION = extern struct {
    NextInfoRva: {"kind":"UInt32"},
    InfoType: {"kind":"UInt32"},
    SizeOfInfo: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MINIDUMP_HANDLE_DESCRIPTOR
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const MINIDUMP_HANDLE_DESCRIPTOR = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_HANDLE_DESCRIPTOR_2
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const MINIDUMP_HANDLE_DESCRIPTOR_2 = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_HANDLE_DATA_STREAM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MINIDUMP_HANDLE_DATA_STREAM = extern struct {
    SizeOfHeader: {"kind":"UInt32"},
    SizeOfDescriptor: {"kind":"UInt32"},
    NumberOfDescriptors: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MINIDUMP_HANDLE_OPERATION_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MINIDUMP_HANDLE_OPERATION_LIST = extern struct {
    SizeOfHeader: {"kind":"UInt32"},
    SizeOfEntry: {"kind":"UInt32"},
    NumberOfEntries: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MINIDUMP_FUNCTION_TABLE_DESCRIPTOR
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const MINIDUMP_FUNCTION_TABLE_DESCRIPTOR = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_FUNCTION_TABLE_STREAM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MINIDUMP_FUNCTION_TABLE_STREAM = extern struct {
    SizeOfHeader: {"kind":"UInt32"},
    SizeOfDescriptor: {"kind":"UInt32"},
    SizeOfNativeDescriptor: {"kind":"UInt32"},
    SizeOfFunctionEntry: {"kind":"UInt32"},
    NumberOfDescriptors: {"kind":"UInt32"},
    SizeOfAlignPad: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MINIDUMP_UNLOADED_MODULE
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const MINIDUMP_UNLOADED_MODULE = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_UNLOADED_MODULE_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MINIDUMP_UNLOADED_MODULE_LIST = extern struct {
    SizeOfHeader: {"kind":"UInt32"},
    SizeOfEntry: {"kind":"UInt32"},
    NumberOfEntries: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: XSTATE_CONFIG_FEATURE_MSC_INFO
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const XSTATE_CONFIG_FEATURE_MSC_INFO = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_MISC_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MINIDUMP_MISC_INFO = extern struct {
    SizeOfInfo: {"kind":"UInt32"},
    Flags1: {"kind":"UInt32"},
    ProcessId: {"kind":"UInt32"},
    ProcessCreateTime: {"kind":"UInt32"},
    ProcessUserTime: {"kind":"UInt32"},
    ProcessKernelTime: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MINIDUMP_MISC_INFO_2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MINIDUMP_MISC_INFO_2 = extern struct {
    SizeOfInfo: {"kind":"UInt32"},
    Flags1: {"kind":"UInt32"},
    ProcessId: {"kind":"UInt32"},
    ProcessCreateTime: {"kind":"UInt32"},
    ProcessUserTime: {"kind":"UInt32"},
    ProcessKernelTime: {"kind":"UInt32"},
    ProcessorMaxMhz: {"kind":"UInt32"},
    ProcessorCurrentMhz: {"kind":"UInt32"},
    ProcessorMhzLimit: {"kind":"UInt32"},
    ProcessorMaxIdleState: {"kind":"UInt32"},
    ProcessorCurrentIdleState: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MINIDUMP_MISC_INFO_3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MINIDUMP_MISC_INFO_3 = extern struct {
    SizeOfInfo: {"kind":"UInt32"},
    Flags1: {"kind":"UInt32"},
    ProcessId: {"kind":"UInt32"},
    ProcessCreateTime: {"kind":"UInt32"},
    ProcessUserTime: {"kind":"UInt32"},
    ProcessKernelTime: {"kind":"UInt32"},
    ProcessorMaxMhz: {"kind":"UInt32"},
    ProcessorCurrentMhz: {"kind":"UInt32"},
    ProcessorMhzLimit: {"kind":"UInt32"},
    ProcessorMaxIdleState: {"kind":"UInt32"},
    ProcessorCurrentIdleState: {"kind":"UInt32"},
    ProcessIntegrityLevel: {"kind":"UInt32"},
    ProcessExecuteFlags: {"kind":"UInt32"},
    ProtectedProcess: {"kind":"UInt32"},
    TimeZoneId: {"kind":"UInt32"},
    TimeZone: Windows.Win32.WindowsProgramming.TIME_ZONE_INFORMATION,
};
// --------------------------------------------------------
// Type: MINIDUMP_MISC_INFO_4
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MINIDUMP_MISC_INFO_4 = extern struct {
    SizeOfInfo: {"kind":"UInt32"},
    Flags1: {"kind":"UInt32"},
    ProcessId: {"kind":"UInt32"},
    ProcessCreateTime: {"kind":"UInt32"},
    ProcessUserTime: {"kind":"UInt32"},
    ProcessKernelTime: {"kind":"UInt32"},
    ProcessorMaxMhz: {"kind":"UInt32"},
    ProcessorCurrentMhz: {"kind":"UInt32"},
    ProcessorMhzLimit: {"kind":"UInt32"},
    ProcessorMaxIdleState: {"kind":"UInt32"},
    ProcessorCurrentIdleState: {"kind":"UInt32"},
    ProcessIntegrityLevel: {"kind":"UInt32"},
    ProcessExecuteFlags: {"kind":"UInt32"},
    ProtectedProcess: {"kind":"UInt32"},
    TimeZoneId: {"kind":"UInt32"},
    TimeZone: Windows.Win32.WindowsProgramming.TIME_ZONE_INFORMATION,
    BuildString: {"kind":"Array","child": {"kind":"UInt16"}},
    DbgBldStr: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: MINIDUMP_MISC_INFO_5
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MINIDUMP_MISC_INFO_5 = extern struct {
    SizeOfInfo: {"kind":"UInt32"},
    Flags1: {"kind":"UInt32"},
    ProcessId: {"kind":"UInt32"},
    ProcessCreateTime: {"kind":"UInt32"},
    ProcessUserTime: {"kind":"UInt32"},
    ProcessKernelTime: {"kind":"UInt32"},
    ProcessorMaxMhz: {"kind":"UInt32"},
    ProcessorCurrentMhz: {"kind":"UInt32"},
    ProcessorMhzLimit: {"kind":"UInt32"},
    ProcessorMaxIdleState: {"kind":"UInt32"},
    ProcessorCurrentIdleState: {"kind":"UInt32"},
    ProcessIntegrityLevel: {"kind":"UInt32"},
    ProcessExecuteFlags: {"kind":"UInt32"},
    ProtectedProcess: {"kind":"UInt32"},
    TimeZoneId: {"kind":"UInt32"},
    TimeZone: Windows.Win32.WindowsProgramming.TIME_ZONE_INFORMATION,
    BuildString: {"kind":"Array","child": {"kind":"UInt16"}},
    DbgBldStr: {"kind":"Array","child": {"kind":"UInt16"}},
    XStateData: Windows.Win32.Debug.XSTATE_CONFIG_FEATURE_MSC_INFO,
    ProcessCookie: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MINIDUMP_MEMORY_INFO
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const MINIDUMP_MEMORY_INFO = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_MEMORY_INFO_LIST
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const MINIDUMP_MEMORY_INFO_LIST = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_THREAD_NAME
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const MINIDUMP_THREAD_NAME = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_THREAD_NAME_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MINIDUMP_THREAD_NAME_LIST = extern struct {
    NumberOfThreadNames: {"kind":"UInt32"},
    ThreadNames: {"kind":"Array","child": Windows.Win32.Debug.MINIDUMP_THREAD_NAME},
};
// --------------------------------------------------------
// Type: MINIDUMP_THREAD_INFO
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const MINIDUMP_THREAD_INFO = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_THREAD_INFO_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MINIDUMP_THREAD_INFO_LIST = extern struct {
    SizeOfHeader: {"kind":"UInt32"},
    SizeOfEntry: {"kind":"UInt32"},
    NumberOfEntries: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MINIDUMP_TOKEN_INFO_HEADER
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const MINIDUMP_TOKEN_INFO_HEADER = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_TOKEN_INFO_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MINIDUMP_TOKEN_INFO_LIST = extern struct {
    TokenListSize: {"kind":"UInt32"},
    TokenListEntries: {"kind":"UInt32"},
    ListHeaderSize: {"kind":"UInt32"},
    ElementHeaderSize: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MINIDUMP_SYSTEM_BASIC_INFORMATION
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const MINIDUMP_SYSTEM_BASIC_INFORMATION = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_SYSTEM_FILECACHE_INFORMATION
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const MINIDUMP_SYSTEM_FILECACHE_INFORMATION = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const MINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_SYSTEM_PERFORMANCE_INFORMATION
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const MINIDUMP_SYSTEM_PERFORMANCE_INFORMATION = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_SYSTEM_MEMORY_INFO_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MINIDUMP_SYSTEM_MEMORY_INFO_1 = extern struct {
    Revision: {"kind":"UInt16"},
    Flags: {"kind":"UInt16"},
    BasicInfo: Windows.Win32.Debug.MINIDUMP_SYSTEM_BASIC_INFORMATION,
    FileCacheInfo: Windows.Win32.Debug.MINIDUMP_SYSTEM_FILECACHE_INFORMATION,
    BasicPerfInfo: Windows.Win32.Debug.MINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION,
    PerfInfo: Windows.Win32.Debug.MINIDUMP_SYSTEM_PERFORMANCE_INFORMATION,
};
// --------------------------------------------------------
// Type: MINIDUMP_PROCESS_VM_COUNTERS_1
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const MINIDUMP_PROCESS_VM_COUNTERS_1 = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_PROCESS_VM_COUNTERS_2
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const MINIDUMP_PROCESS_VM_COUNTERS_2 = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_USER_RECORD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MINIDUMP_USER_RECORD = extern struct {
    Type: {"kind":"UInt32"},
    Memory: Windows.Win32.Debug.MINIDUMP_LOCATION_DESCRIPTOR,
};
// --------------------------------------------------------
// Type: MINIDUMP_USER_STREAM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MINIDUMP_USER_STREAM = extern struct {
    Type: {"kind":"UInt32"},
    BufferSize: {"kind":"UInt32"},
    Buffer: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: MINIDUMP_USER_STREAM_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MINIDUMP_USER_STREAM_INFORMATION = extern struct {
    UserStreamCount: {"kind":"UInt32"},
    UserStreamArray: {"kind""Ptr","child":Windows.Win32.Debug.MINIDUMP_USER_STREAM},
};
// --------------------------------------------------------
// Type: MINIDUMP_CALLBACK_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MINIDUMP_CALLBACK_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_THREAD_CALLBACK
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const MINIDUMP_THREAD_CALLBACK = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_THREAD_EX_CALLBACK
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const MINIDUMP_THREAD_EX_CALLBACK = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_INCLUDE_THREAD_CALLBACK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MINIDUMP_INCLUDE_THREAD_CALLBACK = extern struct {
    ThreadId: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: THREAD_WRITE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const THREAD_WRITE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_MODULE_CALLBACK
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const MINIDUMP_MODULE_CALLBACK = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_INCLUDE_MODULE_CALLBACK
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const MINIDUMP_INCLUDE_MODULE_CALLBACK = *opaque{
};
// --------------------------------------------------------
// Type: MODULE_WRITE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MODULE_WRITE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_IO_CALLBACK
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const MINIDUMP_IO_CALLBACK = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_READ_MEMORY_FAILURE_CALLBACK
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const MINIDUMP_READ_MEMORY_FAILURE_CALLBACK = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_VM_QUERY_CALLBACK
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const MINIDUMP_VM_QUERY_CALLBACK = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_VM_PRE_READ_CALLBACK
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const MINIDUMP_VM_PRE_READ_CALLBACK = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_VM_POST_READ_CALLBACK
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const MINIDUMP_VM_POST_READ_CALLBACK = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_CALLBACK_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MINIDUMP_CALLBACK_INPUT = extern struct {
    ProcessId: {"kind":"UInt32"},
    ProcessHandle: Windows.Win32.SystemServices.HANDLE,
    CallbackType: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Debug.MINIDUMP_CALLBACK_INPUT+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: MINIDUMP_CALLBACK_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MINIDUMP_CALLBACK_OUTPUT = extern struct {
    Anonymous: Windows.Win32.Debug.MINIDUMP_CALLBACK_OUTPUT+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous4_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous4_e__Struct = extern struct {
            VmQueryStatus: Windows.Win32.Com.HRESULT,
            VmQueryResult: Windows.Win32.Debug.MINIDUMP_MEMORY_INFO,
        };
        // --------------------------------------------------------
        // Type: _Anonymous2_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous2_e__Struct = extern struct {
            CheckCancel: Windows.Win32.SystemServices.BOOL,
            Cancel: Windows.Win32.SystemServices.BOOL,
        };
        // --------------------------------------------------------
        // Type: _Anonymous5_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous5_e__Struct = extern struct {
            VmReadStatus: Windows.Win32.Com.HRESULT,
            VmReadBytesCompleted: {"kind":"UInt32"},
        };
        // --------------------------------------------------------
        // Type: _Anonymous1_e__Struct
        // TypeLayoutAttr: sequential
        // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
        pub const _Anonymous1_e__Struct = *opaque{
        };
        // --------------------------------------------------------
        // Type: _Anonymous3_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous3_e__Struct = extern struct {
            VmRegion: Windows.Win32.Debug.MINIDUMP_MEMORY_INFO,
            Continue: Windows.Win32.SystemServices.BOOL,
        };
    };
};
// --------------------------------------------------------
// Type: MINIDUMP_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MINIDUMP_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_SECONDARY_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MINIDUMP_SECONDARY_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: MINIDUMP_CALLBACK_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MINIDUMP_CALLBACK_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: MINIDUMP_CALLBACK_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MINIDUMP_CALLBACK_INFORMATION = extern struct {
    CallbackRoutine: Windows.Win32.Debug.MINIDUMP_CALLBACK_ROUTINE,
    CallbackParam: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: ProcessDebugManager
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ProcessDebugManager = opaque {
};
// --------------------------------------------------------
// Type: DebugHelper
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DebugHelper = opaque {
};
// --------------------------------------------------------
// Type: CDebugDocumentHelper
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CDebugDocumentHelper = opaque {
};
// --------------------------------------------------------
// Type: MachineDebugManager_RETAIL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const MachineDebugManager_RETAIL = opaque {
};
// --------------------------------------------------------
// Type: MachineDebugManager_DEBUG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const MachineDebugManager_DEBUG = opaque {
};
// --------------------------------------------------------
// Type: DefaultDebugSessionProvider
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DefaultDebugSessionProvider = opaque {
};
// --------------------------------------------------------
// Type: SCRIPTLANGUAGEVERSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SCRIPTLANGUAGEVERSION = *opaque{
};
// --------------------------------------------------------
// Type: SCRIPTSTATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SCRIPTSTATE = *opaque{
};
// --------------------------------------------------------
// Type: SCRIPTTRACEINFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SCRIPTTRACEINFO = *opaque{
};
// --------------------------------------------------------
// Type: SCRIPTTHREADSTATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SCRIPTTHREADSTATE = *opaque{
};
// --------------------------------------------------------
// Type: SCRIPTGCTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SCRIPTGCTYPE = *opaque{
};
// --------------------------------------------------------
// Type: SCRIPTUICITEM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SCRIPTUICITEM = *opaque{
};
// --------------------------------------------------------
// Type: SCRIPTUICHANDLING
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SCRIPTUICHANDLING = *opaque{
};
// --------------------------------------------------------
// Type: IActiveScriptSite
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptSite = *opaque{
    // TODO: Method 'GetLCID'
    // TODO: Method 'GetItemInfo'
    // TODO: Method 'GetDocVersionString'
    // TODO: Method 'OnScriptTerminate'
    // TODO: Method 'OnStateChange'
    // TODO: Method 'OnScriptError'
    // TODO: Method 'OnEnterScript'
    // TODO: Method 'OnLeaveScript'
};
// --------------------------------------------------------
// Type: IActiveScriptError
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptError = *opaque{
    // TODO: Method 'GetExceptionInfo'
    // TODO: Method 'GetSourcePosition'
    // TODO: Method 'GetSourceLineText'
};
// --------------------------------------------------------
// Type: IActiveScriptError64
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptError64 = *opaque{
    // TODO: Method 'GetSourcePosition64'
};
// --------------------------------------------------------
// Type: IActiveScriptSiteWindow
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptSiteWindow = *opaque{
    // TODO: Method 'GetWindow'
    // TODO: Method 'EnableModeless'
};
// --------------------------------------------------------
// Type: IActiveScriptSiteUIControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptSiteUIControl = *opaque{
    // TODO: Method 'GetUIBehavior'
};
// --------------------------------------------------------
// Type: IActiveScriptSiteInterruptPoll
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptSiteInterruptPoll = *opaque{
    // TODO: Method 'QueryContinue'
};
// --------------------------------------------------------
// Type: IActiveScript
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScript = *opaque{
    // TODO: Method 'SetScriptSite'
    // TODO: Method 'GetScriptSite'
    // TODO: Method 'SetScriptState'
    // TODO: Method 'GetScriptState'
    // TODO: Method 'Close'
    // TODO: Method 'AddNamedItem'
    // TODO: Method 'AddTypeLib'
    // TODO: Method 'GetScriptDispatch'
    // TODO: Method 'GetCurrentScriptThreadID'
    // TODO: Method 'GetScriptThreadID'
    // TODO: Method 'GetScriptThreadState'
    // TODO: Method 'InterruptScriptThread'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IActiveScriptParse32
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptParse32 = *opaque{
    // TODO: Method 'InitNew'
    // TODO: Method 'AddScriptlet'
    // TODO: Method 'ParseScriptText'
};
// --------------------------------------------------------
// Type: IActiveScriptParse64
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptParse64 = *opaque{
    // TODO: Method 'InitNew'
    // TODO: Method 'AddScriptlet'
    // TODO: Method 'ParseScriptText'
};
// --------------------------------------------------------
// Type: IActiveScriptParseProcedureOld32
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptParseProcedureOld32 = *opaque{
    // TODO: Method 'ParseProcedureText'
};
// --------------------------------------------------------
// Type: IActiveScriptParseProcedureOld64
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptParseProcedureOld64 = *opaque{
    // TODO: Method 'ParseProcedureText'
};
// --------------------------------------------------------
// Type: IActiveScriptParseProcedure32
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptParseProcedure32 = *opaque{
    // TODO: Method 'ParseProcedureText'
};
// --------------------------------------------------------
// Type: IActiveScriptParseProcedure64
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptParseProcedure64 = *opaque{
    // TODO: Method 'ParseProcedureText'
};
// --------------------------------------------------------
// Type: IActiveScriptParseProcedure2_32
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptParseProcedure2_32 = *opaque{
};
// --------------------------------------------------------
// Type: IActiveScriptParseProcedure2_64
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptParseProcedure2_64 = *opaque{
};
// --------------------------------------------------------
// Type: IActiveScriptEncode
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptEncode = *opaque{
    // TODO: Method 'EncodeSection'
    // TODO: Method 'DecodeScript'
    // TODO: Method 'GetEncodeProgId'
};
// --------------------------------------------------------
// Type: IActiveScriptHostEncode
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptHostEncode = *opaque{
    // TODO: Method 'EncodeScriptHostFile'
};
// --------------------------------------------------------
// Type: IBindEventHandler
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IBindEventHandler = *opaque{
    // TODO: Method 'BindHandler'
};
// --------------------------------------------------------
// Type: IActiveScriptStats
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptStats = *opaque{
    // TODO: Method 'GetStat'
    // TODO: Method 'GetStatEx'
    // TODO: Method 'ResetStats'
};
// --------------------------------------------------------
// Type: IActiveScriptProperty
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptProperty = *opaque{
    // TODO: Method 'GetProperty'
    // TODO: Method 'SetProperty'
};
// --------------------------------------------------------
// Type: ITridentEventSink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITridentEventSink = *opaque{
    // TODO: Method 'FireEvent'
};
// --------------------------------------------------------
// Type: IActiveScriptGarbageCollector
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptGarbageCollector = *opaque{
    // TODO: Method 'CollectGarbage'
};
// --------------------------------------------------------
// Type: IActiveScriptSIPInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptSIPInfo = *opaque{
    // TODO: Method 'GetSIPOID'
};
// --------------------------------------------------------
// Type: IActiveScriptSiteTraceInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptSiteTraceInfo = *opaque{
    // TODO: Method 'SendScriptTraceInfo'
};
// --------------------------------------------------------
// Type: IActiveScriptTraceInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptTraceInfo = *opaque{
    // TODO: Method 'StartScriptTracing'
    // TODO: Method 'StopScriptTracing'
};
// --------------------------------------------------------
// Type: IActiveScriptStringCompare
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptStringCompare = *opaque{
    // TODO: Method 'StrComp'
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_dbgprop_0000_0000_0001
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_dbgprop_0000_0000_0001 = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_dbgprop_0000_0000_0002
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_dbgprop_0000_0000_0002 = *opaque{
};
// --------------------------------------------------------
// Type: tagOBJECT_ATTRIB_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const tagOBJECT_ATTRIB_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: PROP_INFO_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROP_INFO_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: DebugPropertyInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DebugPropertyInfo = extern struct {
    m_dwValidFields: {"kind":"UInt32"},
    m_bstrName: Windows.Win32.Automation.BSTR,
    m_bstrType: Windows.Win32.Automation.BSTR,
    m_bstrValue: Windows.Win32.Automation.BSTR,
    m_bstrFullName: Windows.Win32.Automation.BSTR,
    m_dwAttrib: {"kind":"UInt32"},
    m_pDebugProp: Windows.Win32.Debug.IDebugProperty,
};
// --------------------------------------------------------
// Type: EX_PROP_INFO_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EX_PROP_INFO_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: ExtendedDebugPropertyInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ExtendedDebugPropertyInfo = extern struct {
    dwValidFields: {"kind":"UInt32"},
    pszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszType: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszValue: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszFullName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwAttrib: {"kind":"UInt32"},
    pDebugProp: Windows.Win32.Debug.IDebugProperty,
    nDISPID: {"kind":"UInt32"},
    nType: {"kind":"UInt32"},
    varValue: Windows.Win32.Automation.VARIANT,
    plbValue: Windows.Win32.StructuredStorage.ILockBytes,
    pDebugExtProp: Windows.Win32.Debug.IDebugExtendedProperty,
};
// --------------------------------------------------------
// Type: IDebugProperty
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugProperty = *opaque{
    // TODO: Method 'GetPropertyInfo'
    // TODO: Method 'GetExtendedInfo'
    // TODO: Method 'SetValueAsString'
    // TODO: Method 'EnumMembers'
    // TODO: Method 'GetParent'
};
// --------------------------------------------------------
// Type: IEnumDebugPropertyInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumDebugPropertyInfo = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
    // TODO: Method 'GetCount'
};
// --------------------------------------------------------
// Type: IDebugExtendedProperty
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugExtendedProperty = *opaque{
    // TODO: Method 'GetExtendedPropertyInfo'
    // TODO: Method 'EnumExtendedMembers'
};
// --------------------------------------------------------
// Type: IEnumDebugExtendedPropertyInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumDebugExtendedPropertyInfo = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
    // TODO: Method 'GetCount'
};
// --------------------------------------------------------
// Type: IPerPropertyBrowsing2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPerPropertyBrowsing2 = *opaque{
    // TODO: Method 'GetDisplayString'
    // TODO: Method 'MapPropertyToPage'
    // TODO: Method 'GetPredefinedStrings'
    // TODO: Method 'SetPredefinedValue'
};
// --------------------------------------------------------
// Type: IDebugPropertyEnumType_All
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugPropertyEnumType_All = *opaque{
    // TODO: Method 'GetName'
};
// --------------------------------------------------------
// Type: IDebugPropertyEnumType_Locals
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugPropertyEnumType_Locals = *opaque{
};
// --------------------------------------------------------
// Type: IDebugPropertyEnumType_Arguments
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugPropertyEnumType_Arguments = *opaque{
};
// --------------------------------------------------------
// Type: IDebugPropertyEnumType_LocalsPlusArgs
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugPropertyEnumType_LocalsPlusArgs = *opaque{
};
// --------------------------------------------------------
// Type: IDebugPropertyEnumType_Registers
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugPropertyEnumType_Registers = *opaque{
};
// --------------------------------------------------------
// Type: BREAKPOINT_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BREAKPOINT_STATE = *opaque{
};
// --------------------------------------------------------
// Type: BREAKREASON
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BREAKREASON = *opaque{
};
// --------------------------------------------------------
// Type: tagBREAKRESUME_ACTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const tagBREAKRESUME_ACTION = *opaque{
};
// --------------------------------------------------------
// Type: ERRORRESUMEACTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ERRORRESUMEACTION = *opaque{
};
// --------------------------------------------------------
// Type: DOCUMENTNAMETYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOCUMENTNAMETYPE = *opaque{
};
// --------------------------------------------------------
// Type: IActiveScriptDebug32
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptDebug32 = *opaque{
    // TODO: Method 'GetScriptTextAttributes'
    // TODO: Method 'GetScriptletTextAttributes'
    // TODO: Method 'EnumCodeContextsOfPosition'
};
// --------------------------------------------------------
// Type: IActiveScriptDebug64
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptDebug64 = *opaque{
    // TODO: Method 'GetScriptTextAttributes'
    // TODO: Method 'GetScriptletTextAttributes'
    // TODO: Method 'EnumCodeContextsOfPosition'
};
// --------------------------------------------------------
// Type: IActiveScriptSiteDebug32
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptSiteDebug32 = *opaque{
    // TODO: Method 'GetDocumentContextFromPosition'
    // TODO: Method 'GetApplication'
    // TODO: Method 'GetRootApplicationNode'
    // TODO: Method 'OnScriptErrorDebug'
};
// --------------------------------------------------------
// Type: IActiveScriptSiteDebug64
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptSiteDebug64 = *opaque{
    // TODO: Method 'GetDocumentContextFromPosition'
    // TODO: Method 'GetApplication'
    // TODO: Method 'GetRootApplicationNode'
    // TODO: Method 'OnScriptErrorDebug'
};
// --------------------------------------------------------
// Type: IActiveScriptSiteDebugEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptSiteDebugEx = *opaque{
    // TODO: Method 'OnCanNotJITScriptErrorDebug'
};
// --------------------------------------------------------
// Type: IActiveScriptErrorDebug
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptErrorDebug = *opaque{
    // TODO: Method 'GetDocumentContext'
    // TODO: Method 'GetStackFrame'
};
// --------------------------------------------------------
// Type: IDebugCodeContext
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugCodeContext = *opaque{
    // TODO: Method 'GetDocumentContext'
    // TODO: Method 'SetBreakPoint'
};
// --------------------------------------------------------
// Type: IDebugExpression
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugExpression = *opaque{
    // TODO: Method 'Start'
    // TODO: Method 'Abort'
    // TODO: Method 'QueryIsComplete'
    // TODO: Method 'GetResultAsString'
    // TODO: Method 'GetResultAsDebugProperty'
};
// --------------------------------------------------------
// Type: IDebugExpressionContext
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugExpressionContext = *opaque{
    // TODO: Method 'ParseLanguageText'
    // TODO: Method 'GetLanguageInfo'
};
// --------------------------------------------------------
// Type: IDebugExpressionCallBack
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugExpressionCallBack = *opaque{
    // TODO: Method 'onComplete'
};
// --------------------------------------------------------
// Type: IDebugStackFrame
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugStackFrame = *opaque{
    // TODO: Method 'GetCodeContext'
    // TODO: Method 'GetDescriptionString'
    // TODO: Method 'GetLanguageString'
    // TODO: Method 'GetThread'
    // TODO: Method 'GetDebugProperty'
};
// --------------------------------------------------------
// Type: IDebugStackFrameSniffer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugStackFrameSniffer = *opaque{
    // TODO: Method 'EnumStackFrames'
};
// --------------------------------------------------------
// Type: IDebugStackFrameSnifferEx32
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugStackFrameSnifferEx32 = *opaque{
    // TODO: Method 'EnumStackFramesEx32'
};
// --------------------------------------------------------
// Type: IDebugStackFrameSnifferEx64
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugStackFrameSnifferEx64 = *opaque{
    // TODO: Method 'EnumStackFramesEx64'
};
// --------------------------------------------------------
// Type: IDebugSyncOperation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugSyncOperation = *opaque{
    // TODO: Method 'GetTargetThread'
    // TODO: Method 'Execute'
    // TODO: Method 'InProgressAbort'
};
// --------------------------------------------------------
// Type: IDebugAsyncOperation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugAsyncOperation = *opaque{
    // TODO: Method 'GetSyncDebugOperation'
    // TODO: Method 'Start'
    // TODO: Method 'Abort'
    // TODO: Method 'QueryIsComplete'
    // TODO: Method 'GetResult'
};
// --------------------------------------------------------
// Type: IDebugAsyncOperationCallBack
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugAsyncOperationCallBack = *opaque{
    // TODO: Method 'onComplete'
};
// --------------------------------------------------------
// Type: IEnumDebugCodeContexts
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumDebugCodeContexts = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: DebugStackFrameDescriptor
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DebugStackFrameDescriptor = extern struct {
    pdsf: Windows.Win32.Debug.IDebugStackFrame,
    dwMin: {"kind":"UInt32"},
    dwLim: {"kind":"UInt32"},
    fFinal: Windows.Win32.SystemServices.BOOL,
    punkFinal: Windows.Win32.Com.IUnknown,
};
// --------------------------------------------------------
// Type: DebugStackFrameDescriptor64
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DebugStackFrameDescriptor64 = extern struct {
    pdsf: Windows.Win32.Debug.IDebugStackFrame,
    dwMin: {"kind":"UInt64"},
    dwLim: {"kind":"UInt64"},
    fFinal: Windows.Win32.SystemServices.BOOL,
    punkFinal: Windows.Win32.Com.IUnknown,
};
// --------------------------------------------------------
// Type: IEnumDebugStackFrames
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumDebugStackFrames = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IEnumDebugStackFrames64
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumDebugStackFrames64 = *opaque{
    // TODO: Method 'Next64'
};
// --------------------------------------------------------
// Type: IDebugDocumentInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugDocumentInfo = *opaque{
    // TODO: Method 'GetName'
    // TODO: Method 'GetDocumentClassId'
};
// --------------------------------------------------------
// Type: IDebugDocumentProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugDocumentProvider = *opaque{
    // TODO: Method 'GetDocument'
};
// --------------------------------------------------------
// Type: IDebugDocument
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugDocument = *opaque{
};
// --------------------------------------------------------
// Type: IDebugDocumentText
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugDocumentText = *opaque{
    // TODO: Method 'GetDocumentAttributes'
    // TODO: Method 'GetSize'
    // TODO: Method 'GetPositionOfLine'
    // TODO: Method 'GetLineOfPosition'
    // TODO: Method 'GetText'
    // TODO: Method 'GetPositionOfContext'
    // TODO: Method 'GetContextOfPosition'
};
// --------------------------------------------------------
// Type: IDebugDocumentTextEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugDocumentTextEvents = *opaque{
    // TODO: Method 'onDestroy'
    // TODO: Method 'onInsertText'
    // TODO: Method 'onRemoveText'
    // TODO: Method 'onReplaceText'
    // TODO: Method 'onUpdateTextAttributes'
    // TODO: Method 'onUpdateDocumentAttributes'
};
// --------------------------------------------------------
// Type: IDebugDocumentTextAuthor
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugDocumentTextAuthor = *opaque{
    // TODO: Method 'InsertText'
    // TODO: Method 'RemoveText'
    // TODO: Method 'ReplaceTextA'
};
// --------------------------------------------------------
// Type: IDebugDocumentTextExternalAuthor
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugDocumentTextExternalAuthor = *opaque{
    // TODO: Method 'GetPathName'
    // TODO: Method 'GetFileName'
    // TODO: Method 'NotifyChanged'
};
// --------------------------------------------------------
// Type: IDebugDocumentHelper32
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugDocumentHelper32 = *opaque{
    // TODO: Method 'Init'
    // TODO: Method 'Attach'
    // TODO: Method 'Detach'
    // TODO: Method 'AddUnicodeText'
    // TODO: Method 'AddDBCSText'
    // TODO: Method 'SetDebugDocumentHost'
    // TODO: Method 'AddDeferredText'
    // TODO: Method 'DefineScriptBlock'
    // TODO: Method 'SetDefaultTextAttr'
    // TODO: Method 'SetTextAttributes'
    // TODO: Method 'SetLongName'
    // TODO: Method 'SetShortName'
    // TODO: Method 'SetDocumentAttr'
    // TODO: Method 'GetDebugApplicationNode'
    // TODO: Method 'GetScriptBlockInfo'
    // TODO: Method 'CreateDebugDocumentContext'
    // TODO: Method 'BringDocumentToTop'
    // TODO: Method 'BringDocumentContextToTop'
};
// --------------------------------------------------------
// Type: IDebugDocumentHelper64
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugDocumentHelper64 = *opaque{
    // TODO: Method 'Init'
    // TODO: Method 'Attach'
    // TODO: Method 'Detach'
    // TODO: Method 'AddUnicodeText'
    // TODO: Method 'AddDBCSText'
    // TODO: Method 'SetDebugDocumentHost'
    // TODO: Method 'AddDeferredText'
    // TODO: Method 'DefineScriptBlock'
    // TODO: Method 'SetDefaultTextAttr'
    // TODO: Method 'SetTextAttributes'
    // TODO: Method 'SetLongName'
    // TODO: Method 'SetShortName'
    // TODO: Method 'SetDocumentAttr'
    // TODO: Method 'GetDebugApplicationNode'
    // TODO: Method 'GetScriptBlockInfo'
    // TODO: Method 'CreateDebugDocumentContext'
    // TODO: Method 'BringDocumentToTop'
    // TODO: Method 'BringDocumentContextToTop'
};
// --------------------------------------------------------
// Type: IDebugDocumentHost
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugDocumentHost = *opaque{
    // TODO: Method 'GetDeferredText'
    // TODO: Method 'GetScriptTextAttributes'
    // TODO: Method 'OnCreateDocumentContext'
    // TODO: Method 'GetPathName'
    // TODO: Method 'GetFileName'
    // TODO: Method 'NotifyChanged'
};
// --------------------------------------------------------
// Type: IDebugDocumentContext
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugDocumentContext = *opaque{
    // TODO: Method 'GetDocument'
    // TODO: Method 'EnumCodeContexts'
};
// --------------------------------------------------------
// Type: IDebugSessionProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugSessionProvider = *opaque{
    // TODO: Method 'StartDebugSession'
};
// --------------------------------------------------------
// Type: IApplicationDebugger
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IApplicationDebugger = *opaque{
    // TODO: Method 'QueryAlive'
    // TODO: Method 'CreateInstanceAtDebugger'
    // TODO: Method 'onDebugOutput'
    // TODO: Method 'onHandleBreakPoint'
    // TODO: Method 'onClose'
    // TODO: Method 'onDebuggerEvent'
};
// --------------------------------------------------------
// Type: IApplicationDebuggerUI
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IApplicationDebuggerUI = *opaque{
    // TODO: Method 'BringDocumentToTop'
    // TODO: Method 'BringDocumentContextToTop'
};
// --------------------------------------------------------
// Type: IMachineDebugManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMachineDebugManager = *opaque{
    // TODO: Method 'AddApplication'
    // TODO: Method 'RemoveApplication'
    // TODO: Method 'EnumApplications'
};
// --------------------------------------------------------
// Type: IMachineDebugManagerCookie
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMachineDebugManagerCookie = *opaque{
    // TODO: Method 'AddApplication'
    // TODO: Method 'RemoveApplication'
    // TODO: Method 'EnumApplications'
};
// --------------------------------------------------------
// Type: IMachineDebugManagerEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMachineDebugManagerEvents = *opaque{
    // TODO: Method 'onAddApplication'
    // TODO: Method 'onRemoveApplication'
};
// --------------------------------------------------------
// Type: IProcessDebugManager32
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IProcessDebugManager32 = *opaque{
    // TODO: Method 'CreateApplication'
    // TODO: Method 'GetDefaultApplication'
    // TODO: Method 'AddApplication'
    // TODO: Method 'RemoveApplication'
    // TODO: Method 'CreateDebugDocumentHelper'
};
// --------------------------------------------------------
// Type: IProcessDebugManager64
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IProcessDebugManager64 = *opaque{
    // TODO: Method 'CreateApplication'
    // TODO: Method 'GetDefaultApplication'
    // TODO: Method 'AddApplication'
    // TODO: Method 'RemoveApplication'
    // TODO: Method 'CreateDebugDocumentHelper'
};
// --------------------------------------------------------
// Type: IRemoteDebugApplication
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRemoteDebugApplication = *opaque{
    // TODO: Method 'ResumeFromBreakPoint'
    // TODO: Method 'CauseBreak'
    // TODO: Method 'ConnectDebugger'
    // TODO: Method 'DisconnectDebugger'
    // TODO: Method 'GetDebugger'
    // TODO: Method 'CreateInstanceAtApplication'
    // TODO: Method 'QueryAlive'
    // TODO: Method 'EnumThreads'
    // TODO: Method 'GetName'
    // TODO: Method 'GetRootNode'
    // TODO: Method 'EnumGlobalExpressionContexts'
};
// --------------------------------------------------------
// Type: IDebugApplication32
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugApplication32 = *opaque{
    // TODO: Method 'SetName'
    // TODO: Method 'StepOutComplete'
    // TODO: Method 'DebugOutput'
    // TODO: Method 'StartDebugSession'
    // TODO: Method 'HandleBreakPoint'
    // TODO: Method 'Close'
    // TODO: Method 'GetBreakFlags'
    // TODO: Method 'GetCurrentThread'
    // TODO: Method 'CreateAsyncDebugOperation'
    // TODO: Method 'AddStackFrameSniffer'
    // TODO: Method 'RemoveStackFrameSniffer'
    // TODO: Method 'QueryCurrentThreadIsDebuggerThread'
    // TODO: Method 'SynchronousCallInDebuggerThread'
    // TODO: Method 'CreateApplicationNode'
    // TODO: Method 'FireDebuggerEvent'
    // TODO: Method 'HandleRuntimeError'
    // TODO: Method 'FCanJitDebug'
    // TODO: Method 'FIsAutoJitDebugEnabled'
    // TODO: Method 'AddGlobalExpressionContextProvider'
    // TODO: Method 'RemoveGlobalExpressionContextProvider'
};
// --------------------------------------------------------
// Type: IDebugApplication64
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugApplication64 = *opaque{
    // TODO: Method 'SetName'
    // TODO: Method 'StepOutComplete'
    // TODO: Method 'DebugOutput'
    // TODO: Method 'StartDebugSession'
    // TODO: Method 'HandleBreakPoint'
    // TODO: Method 'Close'
    // TODO: Method 'GetBreakFlags'
    // TODO: Method 'GetCurrentThread'
    // TODO: Method 'CreateAsyncDebugOperation'
    // TODO: Method 'AddStackFrameSniffer'
    // TODO: Method 'RemoveStackFrameSniffer'
    // TODO: Method 'QueryCurrentThreadIsDebuggerThread'
    // TODO: Method 'SynchronousCallInDebuggerThread'
    // TODO: Method 'CreateApplicationNode'
    // TODO: Method 'FireDebuggerEvent'
    // TODO: Method 'HandleRuntimeError'
    // TODO: Method 'FCanJitDebug'
    // TODO: Method 'FIsAutoJitDebugEnabled'
    // TODO: Method 'AddGlobalExpressionContextProvider'
    // TODO: Method 'RemoveGlobalExpressionContextProvider'
};
// --------------------------------------------------------
// Type: IRemoteDebugApplicationEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRemoteDebugApplicationEvents = *opaque{
    // TODO: Method 'OnConnectDebugger'
    // TODO: Method 'OnDisconnectDebugger'
    // TODO: Method 'OnSetName'
    // TODO: Method 'OnDebugOutput'
    // TODO: Method 'OnClose'
    // TODO: Method 'OnEnterBreakPoint'
    // TODO: Method 'OnLeaveBreakPoint'
    // TODO: Method 'OnCreateThread'
    // TODO: Method 'OnDestroyThread'
    // TODO: Method 'OnBreakFlagChange'
};
// --------------------------------------------------------
// Type: IDebugApplicationNode
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugApplicationNode = *opaque{
    // TODO: Method 'EnumChildren'
    // TODO: Method 'GetParent'
    // TODO: Method 'SetDocumentProvider'
    // TODO: Method 'Close'
    // TODO: Method 'Attach'
    // TODO: Method 'Detach'
};
// --------------------------------------------------------
// Type: IDebugApplicationNodeEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugApplicationNodeEvents = *opaque{
    // TODO: Method 'onAddChild'
    // TODO: Method 'onRemoveChild'
    // TODO: Method 'onDetach'
    // TODO: Method 'onAttach'
};
// --------------------------------------------------------
// Type: AsyncIDebugApplicationNodeEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const AsyncIDebugApplicationNodeEvents = *opaque{
    // TODO: Method 'Begin_onAddChild'
    // TODO: Method 'Finish_onAddChild'
    // TODO: Method 'Begin_onRemoveChild'
    // TODO: Method 'Finish_onRemoveChild'
    // TODO: Method 'Begin_onDetach'
    // TODO: Method 'Finish_onDetach'
    // TODO: Method 'Begin_onAttach'
    // TODO: Method 'Finish_onAttach'
};
// --------------------------------------------------------
// Type: IDebugThreadCall32
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugThreadCall32 = *opaque{
    // TODO: Method 'ThreadCallHandler'
};
// --------------------------------------------------------
// Type: IDebugThreadCall64
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugThreadCall64 = *opaque{
    // TODO: Method 'ThreadCallHandler'
};
// --------------------------------------------------------
// Type: IRemoteDebugApplicationThread
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRemoteDebugApplicationThread = *opaque{
    // TODO: Method 'GetSystemThreadId'
    // TODO: Method 'GetApplication'
    // TODO: Method 'EnumStackFrames'
    // TODO: Method 'GetDescription'
    // TODO: Method 'SetNextStatement'
    // TODO: Method 'GetState'
    // TODO: Method 'Suspend'
    // TODO: Method 'Resume'
    // TODO: Method 'GetSuspendCount'
};
// --------------------------------------------------------
// Type: IDebugApplicationThread
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugApplicationThread = *opaque{
    // TODO: Method 'SynchronousCallIntoThread32'
    // TODO: Method 'QueryIsCurrentThread'
    // TODO: Method 'QueryIsDebuggerThread'
    // TODO: Method 'SetDescription'
    // TODO: Method 'SetStateString'
};
// --------------------------------------------------------
// Type: IDebugApplicationThread64
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugApplicationThread64 = *opaque{
    // TODO: Method 'SynchronousCallIntoThread64'
};
// --------------------------------------------------------
// Type: IDebugCookie
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugCookie = *opaque{
    // TODO: Method 'SetDebugCookie'
};
// --------------------------------------------------------
// Type: IEnumDebugApplicationNodes
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumDebugApplicationNodes = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IEnumRemoteDebugApplications
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumRemoteDebugApplications = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IEnumRemoteDebugApplicationThreads
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumRemoteDebugApplicationThreads = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IDebugFormatter
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugFormatter = *opaque{
    // TODO: Method 'GetStringForVariant'
    // TODO: Method 'GetVariantForString'
    // TODO: Method 'GetStringForVarType'
};
// --------------------------------------------------------
// Type: ISimpleConnectionPoint
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISimpleConnectionPoint = *opaque{
    // TODO: Method 'GetEventCount'
    // TODO: Method 'DescribeEvents'
    // TODO: Method 'Advise'
    // TODO: Method 'Unadvise'
};
// --------------------------------------------------------
// Type: IDebugHelper
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugHelper = *opaque{
    // TODO: Method 'CreatePropertyBrowser'
    // TODO: Method 'CreatePropertyBrowserEx'
    // TODO: Method 'CreateSimpleConnectionPoint'
};
// --------------------------------------------------------
// Type: IEnumDebugExpressionContexts
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumDebugExpressionContexts = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IProvideExpressionContexts
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IProvideExpressionContexts = *opaque{
    // TODO: Method 'EnumExpressionContexts'
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_activprof_0000_0000_0001
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_activprof_0000_0000_0001 = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_activprof_0000_0000_0002
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_activprof_0000_0000_0002 = *opaque{
};
// --------------------------------------------------------
// Type: IActiveScriptProfilerControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptProfilerControl = *opaque{
    // TODO: Method 'StartProfiling'
    // TODO: Method 'SetProfilerEventMask'
    // TODO: Method 'StopProfiling'
};
// --------------------------------------------------------
// Type: IActiveScriptProfilerControl2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptProfilerControl2 = *opaque{
    // TODO: Method 'CompleteProfilerStart'
    // TODO: Method 'PrepareProfilerStop'
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_activprof_0000_0002_0001
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_activprof_0000_0002_0001 = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_activprof_0000_0002_0002
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_activprof_0000_0002_0002 = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_activprof_0000_0002_0003
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_activprof_0000_0002_0003 = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_activprof_0000_0002_0004
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_activprof_0000_0002_0004 = *opaque{
};
// --------------------------------------------------------
// Type: PROFILER_HEAP_OBJECT_SCOPE_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROFILER_HEAP_OBJECT_SCOPE_LIST = extern struct {
    count: {"kind":"UInt32"},
    scopes: {"kind":"Array","child": {"kind":"UIntPtr"}},
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_activprof_0000_0002_0005
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_activprof_0000_0002_0005 = *opaque{
};
// --------------------------------------------------------
// Type: PROFILER_PROPERTY_TYPE_SUBSTRING_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROFILER_PROPERTY_TYPE_SUBSTRING_INFO = extern struct {
    length: {"kind":"UInt32"},
    value: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: PROFILER_HEAP_OBJECT_RELATIONSHIP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROFILER_HEAP_OBJECT_RELATIONSHIP = extern struct {
    relationshipId: {"kind":"UInt32"},
    relationshipInfo: Windows.Win32.Debug.__MIDL___MIDL_itf_activprof_0000_0002_0005,
    Anonymous: Windows.Win32.Debug.PROFILER_HEAP_OBJECT_RELATIONSHIP+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST = extern struct {
    count: {"kind":"UInt32"},
    elements: {"kind":"Array","child": Windows.Win32.Debug.PROFILER_HEAP_OBJECT_RELATIONSHIP},
};
// --------------------------------------------------------
// Type: PROFILER_HEAP_OBJECT_OPTIONAL_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROFILER_HEAP_OBJECT_OPTIONAL_INFO = extern struct {
    infoType: Windows.Win32.Debug.__MIDL___MIDL_itf_activprof_0000_0002_0002,
    Anonymous: Windows.Win32.Debug.PROFILER_HEAP_OBJECT_OPTIONAL_INFO+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PROFILER_HEAP_OBJECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROFILER_HEAP_OBJECT = extern struct {
    size: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Debug.PROFILER_HEAP_OBJECT+_Anonymous_e__Union,
    typeNameId: {"kind":"UInt32"},
    flags: {"kind":"UInt32"},
    unused: {"kind":"UInt16"},
    optionalInfoCount: {"kind":"UInt16"},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IActiveScriptProfilerHeapEnum
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptProfilerHeapEnum = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'GetOptionalInfo'
    // TODO: Method 'FreeObjectAndOptionalInfo'
    // TODO: Method 'GetNameIdMap'
};
// --------------------------------------------------------
// Type: IActiveScriptProfilerControl3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptProfilerControl3 = *opaque{
    // TODO: Method 'EnumHeap'
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_activprof_0000_0004_0001
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_activprof_0000_0004_0001 = *opaque{
};
// --------------------------------------------------------
// Type: PROFILER_HEAP_SUMMARY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROFILER_HEAP_SUMMARY = extern struct {
    version: Windows.Win32.Debug.__MIDL___MIDL_itf_activprof_0000_0004_0001,
    totalHeapSize: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IActiveScriptProfilerControl4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptProfilerControl4 = *opaque{
    // TODO: Method 'SummarizeHeap'
};
// --------------------------------------------------------
// Type: IActiveScriptProfilerControl5
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptProfilerControl5 = *opaque{
    // TODO: Method 'EnumHeap2'
};
// --------------------------------------------------------
// Type: IActiveScriptProfilerCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptProfilerCallback = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'Shutdown'
    // TODO: Method 'ScriptCompiled'
    // TODO: Method 'FunctionCompiled'
    // TODO: Method 'OnFunctionEnter'
    // TODO: Method 'OnFunctionExit'
};
// --------------------------------------------------------
// Type: IActiveScriptProfilerCallback2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptProfilerCallback2 = *opaque{
    // TODO: Method 'OnFunctionEnterByName'
    // TODO: Method 'OnFunctionExitByName'
};
// --------------------------------------------------------
// Type: IActiveScriptProfilerCallback3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveScriptProfilerCallback3 = *opaque{
    // TODO: Method 'SetWebWorkerId'
};
// --------------------------------------------------------
// Type: HTMLCSSStyleDeclaration
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLCSSStyleDeclaration = opaque {
};
// --------------------------------------------------------
// Type: HTMLStyle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLStyle = opaque {
};
// --------------------------------------------------------
// Type: HTMLRuleStyle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLRuleStyle = opaque {
};
// --------------------------------------------------------
// Type: HTMLCSSRule
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLCSSRule = opaque {
};
// --------------------------------------------------------
// Type: HTMLCSSImportRule
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLCSSImportRule = opaque {
};
// --------------------------------------------------------
// Type: HTMLCSSMediaRule
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLCSSMediaRule = opaque {
};
// --------------------------------------------------------
// Type: HTMLCSSMediaList
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLCSSMediaList = opaque {
};
// --------------------------------------------------------
// Type: HTMLCSSNamespaceRule
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLCSSNamespaceRule = opaque {
};
// --------------------------------------------------------
// Type: HTMLMSCSSKeyframeRule
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLMSCSSKeyframeRule = opaque {
};
// --------------------------------------------------------
// Type: HTMLMSCSSKeyframesRule
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLMSCSSKeyframesRule = opaque {
};
// --------------------------------------------------------
// Type: HTMLRenderStyle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLRenderStyle = opaque {
};
// --------------------------------------------------------
// Type: HTMLCurrentStyle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLCurrentStyle = opaque {
};
// --------------------------------------------------------
// Type: HTMLDOMAttribute
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLDOMAttribute = opaque {
};
// --------------------------------------------------------
// Type: HTMLDOMTextNode
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLDOMTextNode = opaque {
};
// --------------------------------------------------------
// Type: HTMLDOMImplementation
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLDOMImplementation = opaque {
};
// --------------------------------------------------------
// Type: HTMLAttributeCollection
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLAttributeCollection = opaque {
};
// --------------------------------------------------------
// Type: StaticNodeList
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const StaticNodeList = opaque {
};
// --------------------------------------------------------
// Type: DOMChildrenCollection
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DOMChildrenCollection = opaque {
};
// --------------------------------------------------------
// Type: HTMLDefaults
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLDefaults = opaque {
};
// --------------------------------------------------------
// Type: HTCDefaultDispatch
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTCDefaultDispatch = opaque {
};
// --------------------------------------------------------
// Type: HTCPropertyBehavior
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTCPropertyBehavior = opaque {
};
// --------------------------------------------------------
// Type: HTCMethodBehavior
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTCMethodBehavior = opaque {
};
// --------------------------------------------------------
// Type: HTCEventBehavior
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTCEventBehavior = opaque {
};
// --------------------------------------------------------
// Type: HTCAttachBehavior
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTCAttachBehavior = opaque {
};
// --------------------------------------------------------
// Type: HTCDescBehavior
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTCDescBehavior = opaque {
};
// --------------------------------------------------------
// Type: HTMLUrnCollection
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLUrnCollection = opaque {
};
// --------------------------------------------------------
// Type: HTMLGenericElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLGenericElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLStyleSheetRule
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLStyleSheetRule = opaque {
};
// --------------------------------------------------------
// Type: HTMLStyleSheetRulesCollection
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLStyleSheetRulesCollection = opaque {
};
// --------------------------------------------------------
// Type: HTMLStyleSheetPage
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLStyleSheetPage = opaque {
};
// --------------------------------------------------------
// Type: HTMLStyleSheetPagesCollection
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLStyleSheetPagesCollection = opaque {
};
// --------------------------------------------------------
// Type: HTMLStyleSheet
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLStyleSheet = opaque {
};
// --------------------------------------------------------
// Type: HTMLStyleSheetsCollection
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLStyleSheetsCollection = opaque {
};
// --------------------------------------------------------
// Type: HTMLLinkElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLLinkElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLDOMRange
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLDOMRange = opaque {
};
// --------------------------------------------------------
// Type: HTMLFormElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLFormElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLTextElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLTextElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLImg
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLImg = opaque {
};
// --------------------------------------------------------
// Type: HTMLImageElementFactory
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLImageElementFactory = opaque {
};
// --------------------------------------------------------
// Type: HTMLBody
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLBody = opaque {
};
// --------------------------------------------------------
// Type: HTMLFontElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLFontElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLAnchorElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLAnchorElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLLabelElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLLabelElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLListElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLListElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLUListElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLUListElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLOListElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLOListElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLLIElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLLIElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLBlockElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLBlockElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLDivElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLDivElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLDDElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLDDElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLDTElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLDTElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLBRElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLBRElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLDListElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLDListElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLHRElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLHRElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLParaElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLParaElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLElementCollection
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLElementCollection = opaque {
};
// --------------------------------------------------------
// Type: HTMLHeaderElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLHeaderElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLSelectElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLSelectElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLWndSelectElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLWndSelectElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLOptionElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLOptionElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLOptionElementFactory
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLOptionElementFactory = opaque {
};
// --------------------------------------------------------
// Type: HTMLWndOptionElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLWndOptionElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLInputElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLInputElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLTextAreaElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLTextAreaElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLRichtextElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLRichtextElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLButtonElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLButtonElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLMarqueeElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLMarqueeElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLHtmlElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLHtmlElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLHeadElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLHeadElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLTitleElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLTitleElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLMetaElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLMetaElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLBaseElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLBaseElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLIsIndexElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLIsIndexElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLNextIdElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLNextIdElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLBaseFontElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLBaseFontElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLUnknownElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLUnknownElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLHistory
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLHistory = opaque {
};
// --------------------------------------------------------
// Type: COpsProfile
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const COpsProfile = opaque {
};
// --------------------------------------------------------
// Type: HTMLNavigator
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLNavigator = opaque {
};
// --------------------------------------------------------
// Type: HTMLLocation
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLLocation = opaque {
};
// --------------------------------------------------------
// Type: CMimeTypes
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMimeTypes = opaque {
};
// --------------------------------------------------------
// Type: CPlugins
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CPlugins = opaque {
};
// --------------------------------------------------------
// Type: CEventObj
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CEventObj = opaque {
};
// --------------------------------------------------------
// Type: HTMLStyleMedia
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLStyleMedia = opaque {
};
// --------------------------------------------------------
// Type: FramesCollection
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const FramesCollection = opaque {
};
// --------------------------------------------------------
// Type: HTMLScreen
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLScreen = opaque {
};
// --------------------------------------------------------
// Type: HTMLWindow2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLWindow2 = opaque {
};
// --------------------------------------------------------
// Type: HTMLWindowProxy
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLWindowProxy = opaque {
};
// --------------------------------------------------------
// Type: HTMLDocumentCompatibleInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLDocumentCompatibleInfo = opaque {
};
// --------------------------------------------------------
// Type: HTMLDocumentCompatibleInfoCollection
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLDocumentCompatibleInfoCollection = opaque {
};
// --------------------------------------------------------
// Type: HTMLDocument
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLDocument = opaque {
};
// --------------------------------------------------------
// Type: Scriptlet
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const Scriptlet = opaque {
};
// --------------------------------------------------------
// Type: HTMLEmbed
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLEmbed = opaque {
};
// --------------------------------------------------------
// Type: HTMLAreasCollection
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLAreasCollection = opaque {
};
// --------------------------------------------------------
// Type: HTMLMapElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLMapElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLAreaElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLAreaElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLTableCaption
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLTableCaption = opaque {
};
// --------------------------------------------------------
// Type: HTMLCommentElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLCommentElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLPhraseElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLPhraseElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLSpanElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLSpanElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLTable
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLTable = opaque {
};
// --------------------------------------------------------
// Type: HTMLTableCol
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLTableCol = opaque {
};
// --------------------------------------------------------
// Type: HTMLTableSection
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLTableSection = opaque {
};
// --------------------------------------------------------
// Type: HTMLTableRow
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLTableRow = opaque {
};
// --------------------------------------------------------
// Type: HTMLTableCell
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLTableCell = opaque {
};
// --------------------------------------------------------
// Type: HTMLScriptElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLScriptElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLNoShowElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLNoShowElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLObjectElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLObjectElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLParamElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLParamElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLFrameBase
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLFrameBase = opaque {
};
// --------------------------------------------------------
// Type: HTMLFrameElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLFrameElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLIFrame
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLIFrame = opaque {
};
// --------------------------------------------------------
// Type: HTMLDivPosition
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLDivPosition = opaque {
};
// --------------------------------------------------------
// Type: HTMLFieldSetElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLFieldSetElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLLegendElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLLegendElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLSpanFlow
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLSpanFlow = opaque {
};
// --------------------------------------------------------
// Type: HTMLFrameSetSite
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLFrameSetSite = opaque {
};
// --------------------------------------------------------
// Type: HTMLBGsound
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLBGsound = opaque {
};
// --------------------------------------------------------
// Type: HTMLStyleElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLStyleElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLStyleFontFace
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLStyleFontFace = opaque {
};
// --------------------------------------------------------
// Type: XDomainRequest
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const XDomainRequest = opaque {
};
// --------------------------------------------------------
// Type: XDomainRequestFactory
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const XDomainRequestFactory = opaque {
};
// --------------------------------------------------------
// Type: HTMLStorage
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLStorage = opaque {
};
// --------------------------------------------------------
// Type: DOMEvent
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DOMEvent = opaque {
};
// --------------------------------------------------------
// Type: DOMUIEvent
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DOMUIEvent = opaque {
};
// --------------------------------------------------------
// Type: DOMMouseEvent
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DOMMouseEvent = opaque {
};
// --------------------------------------------------------
// Type: DOMDragEvent
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DOMDragEvent = opaque {
};
// --------------------------------------------------------
// Type: DOMMouseWheelEvent
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DOMMouseWheelEvent = opaque {
};
// --------------------------------------------------------
// Type: DOMWheelEvent
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DOMWheelEvent = opaque {
};
// --------------------------------------------------------
// Type: DOMTextEvent
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DOMTextEvent = opaque {
};
// --------------------------------------------------------
// Type: DOMKeyboardEvent
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DOMKeyboardEvent = opaque {
};
// --------------------------------------------------------
// Type: DOMCompositionEvent
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DOMCompositionEvent = opaque {
};
// --------------------------------------------------------
// Type: DOMMutationEvent
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DOMMutationEvent = opaque {
};
// --------------------------------------------------------
// Type: DOMBeforeUnloadEvent
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DOMBeforeUnloadEvent = opaque {
};
// --------------------------------------------------------
// Type: DOMFocusEvent
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DOMFocusEvent = opaque {
};
// --------------------------------------------------------
// Type: DOMCustomEvent
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DOMCustomEvent = opaque {
};
// --------------------------------------------------------
// Type: CanvasGradient
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CanvasGradient = opaque {
};
// --------------------------------------------------------
// Type: CanvasPattern
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CanvasPattern = opaque {
};
// --------------------------------------------------------
// Type: CanvasTextMetrics
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CanvasTextMetrics = opaque {
};
// --------------------------------------------------------
// Type: CanvasImageData
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CanvasImageData = opaque {
};
// --------------------------------------------------------
// Type: CanvasRenderingContext2D
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CanvasRenderingContext2D = opaque {
};
// --------------------------------------------------------
// Type: HTMLCanvasElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLCanvasElement = opaque {
};
// --------------------------------------------------------
// Type: DOMProgressEvent
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DOMProgressEvent = opaque {
};
// --------------------------------------------------------
// Type: DOMMessageEvent
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DOMMessageEvent = opaque {
};
// --------------------------------------------------------
// Type: DOMSiteModeEvent
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DOMSiteModeEvent = opaque {
};
// --------------------------------------------------------
// Type: DOMStorageEvent
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DOMStorageEvent = opaque {
};
// --------------------------------------------------------
// Type: XMLHttpRequestEventTarget
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const XMLHttpRequestEventTarget = opaque {
};
// --------------------------------------------------------
// Type: HTMLXMLHttpRequest
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLXMLHttpRequest = opaque {
};
// --------------------------------------------------------
// Type: HTMLXMLHttpRequestFactory
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLXMLHttpRequestFactory = opaque {
};
// --------------------------------------------------------
// Type: SVGAngle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGAngle = opaque {
};
// --------------------------------------------------------
// Type: SVGAnimatedAngle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGAnimatedAngle = opaque {
};
// --------------------------------------------------------
// Type: SVGAnimatedTransformList
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGAnimatedTransformList = opaque {
};
// --------------------------------------------------------
// Type: SVGAnimatedBoolean
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGAnimatedBoolean = opaque {
};
// --------------------------------------------------------
// Type: SVGAnimatedEnumeration
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGAnimatedEnumeration = opaque {
};
// --------------------------------------------------------
// Type: SVGAnimatedInteger
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGAnimatedInteger = opaque {
};
// --------------------------------------------------------
// Type: SVGAnimatedLength
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGAnimatedLength = opaque {
};
// --------------------------------------------------------
// Type: SVGAnimatedLengthList
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGAnimatedLengthList = opaque {
};
// --------------------------------------------------------
// Type: SVGAnimatedNumber
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGAnimatedNumber = opaque {
};
// --------------------------------------------------------
// Type: SVGAnimatedNumberList
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGAnimatedNumberList = opaque {
};
// --------------------------------------------------------
// Type: SVGAnimatedRect
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGAnimatedRect = opaque {
};
// --------------------------------------------------------
// Type: SVGAnimatedString
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGAnimatedString = opaque {
};
// --------------------------------------------------------
// Type: SVGClipPathElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGClipPathElement = opaque {
};
// --------------------------------------------------------
// Type: SVGElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGElement = opaque {
};
// --------------------------------------------------------
// Type: SVGLength
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGLength = opaque {
};
// --------------------------------------------------------
// Type: SVGLengthList
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGLengthList = opaque {
};
// --------------------------------------------------------
// Type: SVGMatrix
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGMatrix = opaque {
};
// --------------------------------------------------------
// Type: SVGNumber
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGNumber = opaque {
};
// --------------------------------------------------------
// Type: SVGNumberList
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGNumberList = opaque {
};
// --------------------------------------------------------
// Type: SVGPatternElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGPatternElement = opaque {
};
// --------------------------------------------------------
// Type: SVGPathSeg
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGPathSeg = opaque {
};
// --------------------------------------------------------
// Type: SVGPathSegArcAbs
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGPathSegArcAbs = opaque {
};
// --------------------------------------------------------
// Type: SVGPathSegArcRel
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGPathSegArcRel = opaque {
};
// --------------------------------------------------------
// Type: SVGPathSegClosePath
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGPathSegClosePath = opaque {
};
// --------------------------------------------------------
// Type: SVGPathSegMovetoAbs
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGPathSegMovetoAbs = opaque {
};
// --------------------------------------------------------
// Type: SVGPathSegMovetoRel
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGPathSegMovetoRel = opaque {
};
// --------------------------------------------------------
// Type: SVGPathSegLinetoAbs
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGPathSegLinetoAbs = opaque {
};
// --------------------------------------------------------
// Type: SVGPathSegLinetoRel
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGPathSegLinetoRel = opaque {
};
// --------------------------------------------------------
// Type: SVGPathSegCurvetoCubicAbs
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGPathSegCurvetoCubicAbs = opaque {
};
// --------------------------------------------------------
// Type: SVGPathSegCurvetoCubicRel
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGPathSegCurvetoCubicRel = opaque {
};
// --------------------------------------------------------
// Type: SVGPathSegCurvetoCubicSmoothAbs
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGPathSegCurvetoCubicSmoothAbs = opaque {
};
// --------------------------------------------------------
// Type: SVGPathSegCurvetoCubicSmoothRel
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGPathSegCurvetoCubicSmoothRel = opaque {
};
// --------------------------------------------------------
// Type: SVGPathSegCurvetoQuadraticAbs
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGPathSegCurvetoQuadraticAbs = opaque {
};
// --------------------------------------------------------
// Type: SVGPathSegCurvetoQuadraticRel
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGPathSegCurvetoQuadraticRel = opaque {
};
// --------------------------------------------------------
// Type: SVGPathSegCurvetoQuadraticSmoothAbs
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGPathSegCurvetoQuadraticSmoothAbs = opaque {
};
// --------------------------------------------------------
// Type: SVGPathSegCurvetoQuadraticSmoothRel
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGPathSegCurvetoQuadraticSmoothRel = opaque {
};
// --------------------------------------------------------
// Type: SVGPathSegLinetoHorizontalAbs
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGPathSegLinetoHorizontalAbs = opaque {
};
// --------------------------------------------------------
// Type: SVGPathSegLinetoHorizontalRel
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGPathSegLinetoHorizontalRel = opaque {
};
// --------------------------------------------------------
// Type: SVGPathSegLinetoVerticalAbs
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGPathSegLinetoVerticalAbs = opaque {
};
// --------------------------------------------------------
// Type: SVGPathSegLinetoVerticalRel
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGPathSegLinetoVerticalRel = opaque {
};
// --------------------------------------------------------
// Type: SVGPathSegList
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGPathSegList = opaque {
};
// --------------------------------------------------------
// Type: SVGPoint
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGPoint = opaque {
};
// --------------------------------------------------------
// Type: SVGPointList
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGPointList = opaque {
};
// --------------------------------------------------------
// Type: SVGRect
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGRect = opaque {
};
// --------------------------------------------------------
// Type: SVGStringList
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGStringList = opaque {
};
// --------------------------------------------------------
// Type: SVGTransform
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGTransform = opaque {
};
// --------------------------------------------------------
// Type: SVGSVGElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGSVGElement = opaque {
};
// --------------------------------------------------------
// Type: SVGUseElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGUseElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLStyleSheetRulesAppliedCollection
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLStyleSheetRulesAppliedCollection = opaque {
};
// --------------------------------------------------------
// Type: RulesApplied
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const RulesApplied = opaque {
};
// --------------------------------------------------------
// Type: RulesAppliedCollection
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const RulesAppliedCollection = opaque {
};
// --------------------------------------------------------
// Type: HTMLW3CComputedStyle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLW3CComputedStyle = opaque {
};
// --------------------------------------------------------
// Type: SVGTransformList
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGTransformList = opaque {
};
// --------------------------------------------------------
// Type: SVGCircleElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGCircleElement = opaque {
};
// --------------------------------------------------------
// Type: SVGEllipseElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGEllipseElement = opaque {
};
// --------------------------------------------------------
// Type: SVGLineElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGLineElement = opaque {
};
// --------------------------------------------------------
// Type: SVGRectElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGRectElement = opaque {
};
// --------------------------------------------------------
// Type: SVGPolygonElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGPolygonElement = opaque {
};
// --------------------------------------------------------
// Type: SVGPolylineElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGPolylineElement = opaque {
};
// --------------------------------------------------------
// Type: SVGGElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGGElement = opaque {
};
// --------------------------------------------------------
// Type: SVGSymbolElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGSymbolElement = opaque {
};
// --------------------------------------------------------
// Type: SVGDefsElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGDefsElement = opaque {
};
// --------------------------------------------------------
// Type: SVGPathElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGPathElement = opaque {
};
// --------------------------------------------------------
// Type: SVGPreserveAspectRatio
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGPreserveAspectRatio = opaque {
};
// --------------------------------------------------------
// Type: SVGTextElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGTextElement = opaque {
};
// --------------------------------------------------------
// Type: SVGAnimatedPreserveAspectRatio
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGAnimatedPreserveAspectRatio = opaque {
};
// --------------------------------------------------------
// Type: SVGImageElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGImageElement = opaque {
};
// --------------------------------------------------------
// Type: SVGStopElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGStopElement = opaque {
};
// --------------------------------------------------------
// Type: SVGGradientElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGGradientElement = opaque {
};
// --------------------------------------------------------
// Type: SVGLinearGradientElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGLinearGradientElement = opaque {
};
// --------------------------------------------------------
// Type: SVGRadialGradientElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGRadialGradientElement = opaque {
};
// --------------------------------------------------------
// Type: SVGMaskElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGMaskElement = opaque {
};
// --------------------------------------------------------
// Type: SVGMarkerElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGMarkerElement = opaque {
};
// --------------------------------------------------------
// Type: SVGZoomEvent
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGZoomEvent = opaque {
};
// --------------------------------------------------------
// Type: SVGAElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGAElement = opaque {
};
// --------------------------------------------------------
// Type: SVGViewElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGViewElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLMediaError
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLMediaError = opaque {
};
// --------------------------------------------------------
// Type: HTMLTimeRanges
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLTimeRanges = opaque {
};
// --------------------------------------------------------
// Type: HTMLMediaElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLMediaElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLSourceElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLSourceElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLAudioElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLAudioElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLAudioElementFactory
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLAudioElementFactory = opaque {
};
// --------------------------------------------------------
// Type: HTMLVideoElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLVideoElement = opaque {
};
// --------------------------------------------------------
// Type: SVGSwitchElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGSwitchElement = opaque {
};
// --------------------------------------------------------
// Type: SVGDescElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGDescElement = opaque {
};
// --------------------------------------------------------
// Type: SVGTitleElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGTitleElement = opaque {
};
// --------------------------------------------------------
// Type: SVGMetadataElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGMetadataElement = opaque {
};
// --------------------------------------------------------
// Type: SVGElementInstance
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGElementInstance = opaque {
};
// --------------------------------------------------------
// Type: SVGElementInstanceList
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGElementInstanceList = opaque {
};
// --------------------------------------------------------
// Type: DOMException
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DOMException = opaque {
};
// --------------------------------------------------------
// Type: RangeException
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const RangeException = opaque {
};
// --------------------------------------------------------
// Type: SVGException
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGException = opaque {
};
// --------------------------------------------------------
// Type: EventException
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const EventException = opaque {
};
// --------------------------------------------------------
// Type: SVGScriptElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGScriptElement = opaque {
};
// --------------------------------------------------------
// Type: SVGStyleElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGStyleElement = opaque {
};
// --------------------------------------------------------
// Type: SVGTextContentElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGTextContentElement = opaque {
};
// --------------------------------------------------------
// Type: SVGTextPositioningElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGTextPositioningElement = opaque {
};
// --------------------------------------------------------
// Type: DOMDocumentType
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DOMDocumentType = opaque {
};
// --------------------------------------------------------
// Type: NodeIterator
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const NodeIterator = opaque {
};
// --------------------------------------------------------
// Type: TreeWalker
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const TreeWalker = opaque {
};
// --------------------------------------------------------
// Type: DOMProcessingInstruction
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DOMProcessingInstruction = opaque {
};
// --------------------------------------------------------
// Type: HTMLPerformance
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLPerformance = opaque {
};
// --------------------------------------------------------
// Type: HTMLPerformanceNavigation
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLPerformanceNavigation = opaque {
};
// --------------------------------------------------------
// Type: HTMLPerformanceTiming
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLPerformanceTiming = opaque {
};
// --------------------------------------------------------
// Type: SVGTSpanElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGTSpanElement = opaque {
};
// --------------------------------------------------------
// Type: CTemplatePrinter
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CTemplatePrinter = opaque {
};
// --------------------------------------------------------
// Type: CPrintManagerTemplatePrinter
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CPrintManagerTemplatePrinter = opaque {
};
// --------------------------------------------------------
// Type: SVGTextPathElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SVGTextPathElement = opaque {
};
// --------------------------------------------------------
// Type: XMLSerializer
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const XMLSerializer = opaque {
};
// --------------------------------------------------------
// Type: DOMParser
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DOMParser = opaque {
};
// --------------------------------------------------------
// Type: HTMLDOMXmlSerializerFactory
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLDOMXmlSerializerFactory = opaque {
};
// --------------------------------------------------------
// Type: DOMParserFactory
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DOMParserFactory = opaque {
};
// --------------------------------------------------------
// Type: HTMLSemanticElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLSemanticElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLProgressElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLProgressElement = opaque {
};
// --------------------------------------------------------
// Type: DOMMSTransitionEvent
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DOMMSTransitionEvent = opaque {
};
// --------------------------------------------------------
// Type: DOMMSAnimationEvent
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DOMMSAnimationEvent = opaque {
};
// --------------------------------------------------------
// Type: WebGeolocation
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WebGeolocation = opaque {
};
// --------------------------------------------------------
// Type: WebGeocoordinates
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WebGeocoordinates = opaque {
};
// --------------------------------------------------------
// Type: WebGeopositionError
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WebGeopositionError = opaque {
};
// --------------------------------------------------------
// Type: WebGeoposition
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WebGeoposition = opaque {
};
// --------------------------------------------------------
// Type: CClientCaps
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CClientCaps = opaque {
};
// --------------------------------------------------------
// Type: DOMMSManipulationEvent
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DOMMSManipulationEvent = opaque {
};
// --------------------------------------------------------
// Type: DOMCloseEvent
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DOMCloseEvent = opaque {
};
// --------------------------------------------------------
// Type: ApplicationCache
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ApplicationCache = opaque {
};
// --------------------------------------------------------
// Type: HtmlDlgSafeHelper
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HtmlDlgSafeHelper = opaque {
};
// --------------------------------------------------------
// Type: BlockFormats
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const BlockFormats = opaque {
};
// --------------------------------------------------------
// Type: FontNames
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const FontNames = opaque {
};
// --------------------------------------------------------
// Type: HTMLNamespace
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLNamespace = opaque {
};
// --------------------------------------------------------
// Type: HTMLNamespaceCollection
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLNamespaceCollection = opaque {
};
// --------------------------------------------------------
// Type: ThreadDialogProcParam
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ThreadDialogProcParam = opaque {
};
// --------------------------------------------------------
// Type: HTMLDialog
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLDialog = opaque {
};
// --------------------------------------------------------
// Type: HTMLPopup
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLPopup = opaque {
};
// --------------------------------------------------------
// Type: HTMLAppBehavior
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLAppBehavior = opaque {
};
// --------------------------------------------------------
// Type: OldHTMLDocument
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const OldHTMLDocument = opaque {
};
// --------------------------------------------------------
// Type: OldHTMLFormElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const OldHTMLFormElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLInputButtonElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLInputButtonElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLInputTextElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLInputTextElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLInputFileElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLInputFileElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLOptionButtonElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLOptionButtonElement = opaque {
};
// --------------------------------------------------------
// Type: HTMLInputImage
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HTMLInputImage = opaque {
};
// --------------------------------------------------------
// Type: IHTMLFiltersCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLFiltersCollection = *opaque{
    // TODO: Method 'get_length'
    // TODO: Method 'get__newEnum'
    // TODO: Method 'item'
};
// --------------------------------------------------------
// Type: IIE70DispatchEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IIE70DispatchEx = *opaque{
};
// --------------------------------------------------------
// Type: IIE80DispatchEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IIE80DispatchEx = *opaque{
};
// --------------------------------------------------------
// Type: htmlDesignMode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlDesignMode = *opaque{
};
// --------------------------------------------------------
// Type: htmlZOrder
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlZOrder = *opaque{
};
// --------------------------------------------------------
// Type: htmlClear
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlClear = *opaque{
};
// --------------------------------------------------------
// Type: htmlControlAlign
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlControlAlign = *opaque{
};
// --------------------------------------------------------
// Type: htmlBlockAlign
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlBlockAlign = *opaque{
};
// --------------------------------------------------------
// Type: htmlReadyState
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlReadyState = *opaque{
};
// --------------------------------------------------------
// Type: htmlLoop
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlLoop = *opaque{
};
// --------------------------------------------------------
// Type: mediaType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const mediaType = *opaque{
};
// --------------------------------------------------------
// Type: DomConstructor
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DomConstructor = *opaque{
};
// --------------------------------------------------------
// Type: styleTextTransform
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleTextTransform = *opaque{
};
// --------------------------------------------------------
// Type: styleDataRepeat
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleDataRepeat = *opaque{
};
// --------------------------------------------------------
// Type: styleOverflow
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleOverflow = *opaque{
};
// --------------------------------------------------------
// Type: styleMsOverflowStyle
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleMsOverflowStyle = *opaque{
};
// --------------------------------------------------------
// Type: styleTableLayout
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleTableLayout = *opaque{
};
// --------------------------------------------------------
// Type: styleBorderCollapse
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleBorderCollapse = *opaque{
};
// --------------------------------------------------------
// Type: styleCaptionSide
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleCaptionSide = *opaque{
};
// --------------------------------------------------------
// Type: styleEmptyCells
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleEmptyCells = *opaque{
};
// --------------------------------------------------------
// Type: styleFontStyle
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleFontStyle = *opaque{
};
// --------------------------------------------------------
// Type: styleFontVariant
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleFontVariant = *opaque{
};
// --------------------------------------------------------
// Type: styleBackgroundRepeat
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleBackgroundRepeat = *opaque{
};
// --------------------------------------------------------
// Type: styleBackgroundAttachment
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleBackgroundAttachment = *opaque{
};
// --------------------------------------------------------
// Type: styleBackgroundAttachment3
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleBackgroundAttachment3 = *opaque{
};
// --------------------------------------------------------
// Type: styleBackgroundClip
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleBackgroundClip = *opaque{
};
// --------------------------------------------------------
// Type: styleBackgroundOrigin
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleBackgroundOrigin = *opaque{
};
// --------------------------------------------------------
// Type: styleVerticalAlign
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleVerticalAlign = *opaque{
};
// --------------------------------------------------------
// Type: styleFontWeight
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleFontWeight = *opaque{
};
// --------------------------------------------------------
// Type: styleFontSize
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleFontSize = *opaque{
};
// --------------------------------------------------------
// Type: styleZIndex
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleZIndex = *opaque{
};
// --------------------------------------------------------
// Type: styleWidowsOrphans
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleWidowsOrphans = *opaque{
};
// --------------------------------------------------------
// Type: styleAuto
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleAuto = *opaque{
};
// --------------------------------------------------------
// Type: styleNone
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleNone = *opaque{
};
// --------------------------------------------------------
// Type: styleNormal
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleNormal = *opaque{
};
// --------------------------------------------------------
// Type: styleBorderWidth
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleBorderWidth = *opaque{
};
// --------------------------------------------------------
// Type: stylePosition
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const stylePosition = *opaque{
};
// --------------------------------------------------------
// Type: styleBorderStyle
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleBorderStyle = *opaque{
};
// --------------------------------------------------------
// Type: styleOutlineStyle
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleOutlineStyle = *opaque{
};
// --------------------------------------------------------
// Type: styleStyleFloat
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleStyleFloat = *opaque{
};
// --------------------------------------------------------
// Type: styleDisplay
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleDisplay = *opaque{
};
// --------------------------------------------------------
// Type: styleVisibility
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleVisibility = *opaque{
};
// --------------------------------------------------------
// Type: styleListStyleType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleListStyleType = *opaque{
};
// --------------------------------------------------------
// Type: styleListStylePosition
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleListStylePosition = *opaque{
};
// --------------------------------------------------------
// Type: styleWhiteSpace
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleWhiteSpace = *opaque{
};
// --------------------------------------------------------
// Type: stylePageBreak
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const stylePageBreak = *opaque{
};
// --------------------------------------------------------
// Type: stylePageBreakInside
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const stylePageBreakInside = *opaque{
};
// --------------------------------------------------------
// Type: styleCursor
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleCursor = *opaque{
};
// --------------------------------------------------------
// Type: styleDir
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleDir = *opaque{
};
// --------------------------------------------------------
// Type: styleBidi
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleBidi = *opaque{
};
// --------------------------------------------------------
// Type: styleImeMode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleImeMode = *opaque{
};
// --------------------------------------------------------
// Type: styleRubyAlign
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleRubyAlign = *opaque{
};
// --------------------------------------------------------
// Type: styleRubyPosition
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleRubyPosition = *opaque{
};
// --------------------------------------------------------
// Type: styleRubyOverhang
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleRubyOverhang = *opaque{
};
// --------------------------------------------------------
// Type: styleLayoutGridChar
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleLayoutGridChar = *opaque{
};
// --------------------------------------------------------
// Type: styleLayoutGridLine
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleLayoutGridLine = *opaque{
};
// --------------------------------------------------------
// Type: styleLayoutGridMode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleLayoutGridMode = *opaque{
};
// --------------------------------------------------------
// Type: styleLayoutGridType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleLayoutGridType = *opaque{
};
// --------------------------------------------------------
// Type: styleLineBreak
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleLineBreak = *opaque{
};
// --------------------------------------------------------
// Type: styleWordBreak
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleWordBreak = *opaque{
};
// --------------------------------------------------------
// Type: styleWordWrap
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleWordWrap = *opaque{
};
// --------------------------------------------------------
// Type: styleTextJustify
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleTextJustify = *opaque{
};
// --------------------------------------------------------
// Type: styleTextAlignLast
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleTextAlignLast = *opaque{
};
// --------------------------------------------------------
// Type: styleTextJustifyTrim
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleTextJustifyTrim = *opaque{
};
// --------------------------------------------------------
// Type: styleAccelerator
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleAccelerator = *opaque{
};
// --------------------------------------------------------
// Type: styleLayoutFlow
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleLayoutFlow = *opaque{
};
// --------------------------------------------------------
// Type: styleBlockProgression
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleBlockProgression = *opaque{
};
// --------------------------------------------------------
// Type: styleWritingMode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleWritingMode = *opaque{
};
// --------------------------------------------------------
// Type: styleBool
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleBool = *opaque{
};
// --------------------------------------------------------
// Type: styleTextUnderlinePosition
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleTextUnderlinePosition = *opaque{
};
// --------------------------------------------------------
// Type: styleTextOverflow
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleTextOverflow = *opaque{
};
// --------------------------------------------------------
// Type: styleInterpolation
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleInterpolation = *opaque{
};
// --------------------------------------------------------
// Type: styleBoxSizing
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleBoxSizing = *opaque{
};
// --------------------------------------------------------
// Type: styleFlex
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleFlex = *opaque{
};
// --------------------------------------------------------
// Type: styleFlexBasis
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleFlexBasis = *opaque{
};
// --------------------------------------------------------
// Type: styleFlexDirection
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleFlexDirection = *opaque{
};
// --------------------------------------------------------
// Type: styleWebkitBoxOrient
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleWebkitBoxOrient = *opaque{
};
// --------------------------------------------------------
// Type: styleWebkitBoxDirection
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleWebkitBoxDirection = *opaque{
};
// --------------------------------------------------------
// Type: styleFlexWrap
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleFlexWrap = *opaque{
};
// --------------------------------------------------------
// Type: styleAlignItems
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleAlignItems = *opaque{
};
// --------------------------------------------------------
// Type: styleMsFlexAlign
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleMsFlexAlign = *opaque{
};
// --------------------------------------------------------
// Type: styleMsFlexItemAlign
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleMsFlexItemAlign = *opaque{
};
// --------------------------------------------------------
// Type: styleAlignSelf
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleAlignSelf = *opaque{
};
// --------------------------------------------------------
// Type: styleJustifyContent
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleJustifyContent = *opaque{
};
// --------------------------------------------------------
// Type: styleMsFlexPack
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleMsFlexPack = *opaque{
};
// --------------------------------------------------------
// Type: styleWebkitBoxPack
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleWebkitBoxPack = *opaque{
};
// --------------------------------------------------------
// Type: styleMsFlexLinePack
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleMsFlexLinePack = *opaque{
};
// --------------------------------------------------------
// Type: styleAlignContent
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleAlignContent = *opaque{
};
// --------------------------------------------------------
// Type: styleColumnFill
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleColumnFill = *opaque{
};
// --------------------------------------------------------
// Type: styleColumnSpan
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleColumnSpan = *opaque{
};
// --------------------------------------------------------
// Type: styleBreak
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleBreak = *opaque{
};
// --------------------------------------------------------
// Type: styleBreakInside
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleBreakInside = *opaque{
};
// --------------------------------------------------------
// Type: styleMsScrollChaining
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleMsScrollChaining = *opaque{
};
// --------------------------------------------------------
// Type: styleMsContentZooming
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleMsContentZooming = *opaque{
};
// --------------------------------------------------------
// Type: styleMsContentZoomSnapType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleMsContentZoomSnapType = *opaque{
};
// --------------------------------------------------------
// Type: styleMsScrollRails
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleMsScrollRails = *opaque{
};
// --------------------------------------------------------
// Type: styleMsContentZoomChaining
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleMsContentZoomChaining = *opaque{
};
// --------------------------------------------------------
// Type: styleMsScrollSnapType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleMsScrollSnapType = *opaque{
};
// --------------------------------------------------------
// Type: styleGridColumn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleGridColumn = *opaque{
};
// --------------------------------------------------------
// Type: styleGridColumnAlign
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleGridColumnAlign = *opaque{
};
// --------------------------------------------------------
// Type: styleGridColumnSpan
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleGridColumnSpan = *opaque{
};
// --------------------------------------------------------
// Type: styleGridRow
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleGridRow = *opaque{
};
// --------------------------------------------------------
// Type: styleGridRowAlign
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleGridRowAlign = *opaque{
};
// --------------------------------------------------------
// Type: styleGridRowSpan
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleGridRowSpan = *opaque{
};
// --------------------------------------------------------
// Type: styleWrapThrough
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleWrapThrough = *opaque{
};
// --------------------------------------------------------
// Type: styleWrapFlow
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleWrapFlow = *opaque{
};
// --------------------------------------------------------
// Type: styleAlignmentBaseline
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleAlignmentBaseline = *opaque{
};
// --------------------------------------------------------
// Type: styleBaselineShift
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleBaselineShift = *opaque{
};
// --------------------------------------------------------
// Type: styleClipRule
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleClipRule = *opaque{
};
// --------------------------------------------------------
// Type: styleDominantBaseline
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleDominantBaseline = *opaque{
};
// --------------------------------------------------------
// Type: styleFillRule
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleFillRule = *opaque{
};
// --------------------------------------------------------
// Type: styleFontStretch
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleFontStretch = *opaque{
};
// --------------------------------------------------------
// Type: stylePointerEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const stylePointerEvents = *opaque{
};
// --------------------------------------------------------
// Type: styleEnableBackground
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleEnableBackground = *opaque{
};
// --------------------------------------------------------
// Type: styleStrokeLinecap
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleStrokeLinecap = *opaque{
};
// --------------------------------------------------------
// Type: styleStrokeLinejoin
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleStrokeLinejoin = *opaque{
};
// --------------------------------------------------------
// Type: styleTextAnchor
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleTextAnchor = *opaque{
};
// --------------------------------------------------------
// Type: styleAttrType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleAttrType = *opaque{
};
// --------------------------------------------------------
// Type: styleInitialColor
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleInitialColor = *opaque{
};
// --------------------------------------------------------
// Type: styleInitialString
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleInitialString = *opaque{
};
// --------------------------------------------------------
// Type: styleTransformOriginX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleTransformOriginX = *opaque{
};
// --------------------------------------------------------
// Type: styleTransformOriginY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleTransformOriginY = *opaque{
};
// --------------------------------------------------------
// Type: stylePerspectiveOriginX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const stylePerspectiveOriginX = *opaque{
};
// --------------------------------------------------------
// Type: stylePerspectiveOriginY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const stylePerspectiveOriginY = *opaque{
};
// --------------------------------------------------------
// Type: styleTransformStyle
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleTransformStyle = *opaque{
};
// --------------------------------------------------------
// Type: styleBackfaceVisibility
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleBackfaceVisibility = *opaque{
};
// --------------------------------------------------------
// Type: styleTextSizeAdjust
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleTextSizeAdjust = *opaque{
};
// --------------------------------------------------------
// Type: styleColorInterpolationFilters
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleColorInterpolationFilters = *opaque{
};
// --------------------------------------------------------
// Type: styleHyphens
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleHyphens = *opaque{
};
// --------------------------------------------------------
// Type: styleHyphenateLimitLines
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleHyphenateLimitLines = *opaque{
};
// --------------------------------------------------------
// Type: styleMsAnimationPlayState
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleMsAnimationPlayState = *opaque{
};
// --------------------------------------------------------
// Type: styleMsAnimationDirection
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleMsAnimationDirection = *opaque{
};
// --------------------------------------------------------
// Type: styleMsAnimationFillMode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleMsAnimationFillMode = *opaque{
};
// --------------------------------------------------------
// Type: styleMsHighContrastAdjust
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleMsHighContrastAdjust = *opaque{
};
// --------------------------------------------------------
// Type: styleMsUserSelect
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleMsUserSelect = *opaque{
};
// --------------------------------------------------------
// Type: styleMsTouchAction
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleMsTouchAction = *opaque{
};
// --------------------------------------------------------
// Type: styleMsTouchSelect
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleMsTouchSelect = *opaque{
};
// --------------------------------------------------------
// Type: styleMsScrollTranslation
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleMsScrollTranslation = *opaque{
};
// --------------------------------------------------------
// Type: styleBorderImageRepeat
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleBorderImageRepeat = *opaque{
};
// --------------------------------------------------------
// Type: styleBorderImageSliceFill
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleBorderImageSliceFill = *opaque{
};
// --------------------------------------------------------
// Type: styleMsImeAlign
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleMsImeAlign = *opaque{
};
// --------------------------------------------------------
// Type: styleMsTextCombineHorizontal
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleMsTextCombineHorizontal = *opaque{
};
// --------------------------------------------------------
// Type: styleWebkitAppearance
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleWebkitAppearance = *opaque{
};
// --------------------------------------------------------
// Type: styleViewportSize
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleViewportSize = *opaque{
};
// --------------------------------------------------------
// Type: styleUserZoom
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleUserZoom = *opaque{
};
// --------------------------------------------------------
// Type: styleTextLineThroughStyle
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleTextLineThroughStyle = *opaque{
};
// --------------------------------------------------------
// Type: styleTextUnderlineStyle
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleTextUnderlineStyle = *opaque{
};
// --------------------------------------------------------
// Type: styleTextEffect
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleTextEffect = *opaque{
};
// --------------------------------------------------------
// Type: styleDefaultTextSelection
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleDefaultTextSelection = *opaque{
};
// --------------------------------------------------------
// Type: styleTextDecoration
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const styleTextDecoration = *opaque{
};
// --------------------------------------------------------
// Type: textDecoration
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const textDecoration = *opaque{
};
// --------------------------------------------------------
// Type: htmlListType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlListType = *opaque{
};
// --------------------------------------------------------
// Type: htmlMethod
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlMethod = *opaque{
};
// --------------------------------------------------------
// Type: htmlWrap
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlWrap = *opaque{
};
// --------------------------------------------------------
// Type: htmlDir
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlDir = *opaque{
};
// --------------------------------------------------------
// Type: htmlEditable
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlEditable = *opaque{
};
// --------------------------------------------------------
// Type: htmlInput
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlInput = *opaque{
};
// --------------------------------------------------------
// Type: htmlSpellCheck
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlSpellCheck = *opaque{
};
// --------------------------------------------------------
// Type: htmlEncoding
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlEncoding = *opaque{
};
// --------------------------------------------------------
// Type: htmlAdjacency
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlAdjacency = *opaque{
};
// --------------------------------------------------------
// Type: htmlTabIndex
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlTabIndex = *opaque{
};
// --------------------------------------------------------
// Type: htmlComponent
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlComponent = *opaque{
};
// --------------------------------------------------------
// Type: htmlApplyLocation
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlApplyLocation = *opaque{
};
// --------------------------------------------------------
// Type: htmlGlyphMode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlGlyphMode = *opaque{
};
// --------------------------------------------------------
// Type: htmlDraggable
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlDraggable = *opaque{
};
// --------------------------------------------------------
// Type: htmlUnit
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlUnit = *opaque{
};
// --------------------------------------------------------
// Type: htmlEndPoints
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlEndPoints = *opaque{
};
// --------------------------------------------------------
// Type: htmlDirection
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlDirection = *opaque{
};
// --------------------------------------------------------
// Type: htmlStart
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlStart = *opaque{
};
// --------------------------------------------------------
// Type: bodyScroll
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const bodyScroll = *opaque{
};
// --------------------------------------------------------
// Type: htmlSelectType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlSelectType = *opaque{
};
// --------------------------------------------------------
// Type: htmlSelectExFlag
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlSelectExFlag = *opaque{
};
// --------------------------------------------------------
// Type: htmlSelection
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlSelection = *opaque{
};
// --------------------------------------------------------
// Type: htmlMarqueeBehavior
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlMarqueeBehavior = *opaque{
};
// --------------------------------------------------------
// Type: htmlMarqueeDirection
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlMarqueeDirection = *opaque{
};
// --------------------------------------------------------
// Type: htmlPersistState
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlPersistState = *opaque{
};
// --------------------------------------------------------
// Type: htmlDropEffect
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlDropEffect = *opaque{
};
// --------------------------------------------------------
// Type: htmlEffectAllowed
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlEffectAllowed = *opaque{
};
// --------------------------------------------------------
// Type: htmlCompatMode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlCompatMode = *opaque{
};
// --------------------------------------------------------
// Type: BoolValue
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BoolValue = *opaque{
};
// --------------------------------------------------------
// Type: htmlCaptionAlign
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlCaptionAlign = *opaque{
};
// --------------------------------------------------------
// Type: htmlCaptionVAlign
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlCaptionVAlign = *opaque{
};
// --------------------------------------------------------
// Type: htmlFrame
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlFrame = *opaque{
};
// --------------------------------------------------------
// Type: htmlRules
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlRules = *opaque{
};
// --------------------------------------------------------
// Type: htmlCellAlign
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlCellAlign = *opaque{
};
// --------------------------------------------------------
// Type: htmlCellVAlign
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlCellVAlign = *opaque{
};
// --------------------------------------------------------
// Type: frameScrolling
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const frameScrolling = *opaque{
};
// --------------------------------------------------------
// Type: sandboxAllow
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const sandboxAllow = *opaque{
};
// --------------------------------------------------------
// Type: svgAngleType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const svgAngleType = *opaque{
};
// --------------------------------------------------------
// Type: svgExternalResourcesRequired
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const svgExternalResourcesRequired = *opaque{
};
// --------------------------------------------------------
// Type: svgFocusable
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const svgFocusable = *opaque{
};
// --------------------------------------------------------
// Type: svgLengthType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const svgLengthType = *opaque{
};
// --------------------------------------------------------
// Type: svgPathSegType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const svgPathSegType = *opaque{
};
// --------------------------------------------------------
// Type: svgTransformType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const svgTransformType = *opaque{
};
// --------------------------------------------------------
// Type: svgPreserveAspectRatioAlignType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const svgPreserveAspectRatioAlignType = *opaque{
};
// --------------------------------------------------------
// Type: svgPreserveAspectMeetOrSliceType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const svgPreserveAspectMeetOrSliceType = *opaque{
};
// --------------------------------------------------------
// Type: svgUnitTypes
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const svgUnitTypes = *opaque{
};
// --------------------------------------------------------
// Type: svgSpreadMethod
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const svgSpreadMethod = *opaque{
};
// --------------------------------------------------------
// Type: svgFeblendMode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const svgFeblendMode = *opaque{
};
// --------------------------------------------------------
// Type: svgFecolormatrixType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const svgFecolormatrixType = *opaque{
};
// --------------------------------------------------------
// Type: svgFecomponenttransferType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const svgFecomponenttransferType = *opaque{
};
// --------------------------------------------------------
// Type: svgFecompositeOperator
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const svgFecompositeOperator = *opaque{
};
// --------------------------------------------------------
// Type: svgEdgemode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const svgEdgemode = *opaque{
};
// --------------------------------------------------------
// Type: svgPreserveAlpha
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const svgPreserveAlpha = *opaque{
};
// --------------------------------------------------------
// Type: svgChannel
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const svgChannel = *opaque{
};
// --------------------------------------------------------
// Type: svgMorphologyOperator
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const svgMorphologyOperator = *opaque{
};
// --------------------------------------------------------
// Type: svgTurbulenceType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const svgTurbulenceType = *opaque{
};
// --------------------------------------------------------
// Type: svgStitchtype
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const svgStitchtype = *opaque{
};
// --------------------------------------------------------
// Type: svgMarkerUnits
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const svgMarkerUnits = *opaque{
};
// --------------------------------------------------------
// Type: svgMarkerOrient
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const svgMarkerOrient = *opaque{
};
// --------------------------------------------------------
// Type: svgMarkerOrientAttribute
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const svgMarkerOrientAttribute = *opaque{
};
// --------------------------------------------------------
// Type: htmlMediaNetworkState
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlMediaNetworkState = *opaque{
};
// --------------------------------------------------------
// Type: htmlMediaReadyState
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlMediaReadyState = *opaque{
};
// --------------------------------------------------------
// Type: htmlMediaErr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const htmlMediaErr = *opaque{
};
// --------------------------------------------------------
// Type: lengthAdjust
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const lengthAdjust = *opaque{
};
// --------------------------------------------------------
// Type: textpathMethodtype
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const textpathMethodtype = *opaque{
};
// --------------------------------------------------------
// Type: textpathSpacingtype
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const textpathSpacingtype = *opaque{
};
// --------------------------------------------------------
// Type: ELEMENT_CORNER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ELEMENT_CORNER = *opaque{
};
// --------------------------------------------------------
// Type: SECUREURLHOSTVALIDATE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SECUREURLHOSTVALIDATE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: POINTER_GRAVITY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const POINTER_GRAVITY = *opaque{
};
// --------------------------------------------------------
// Type: ELEMENT_ADJACENCY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ELEMENT_ADJACENCY = *opaque{
};
// --------------------------------------------------------
// Type: MARKUP_CONTEXT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MARKUP_CONTEXT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: FINDTEXT_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FINDTEXT_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: MOVEUNIT_ACTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MOVEUNIT_ACTION = *opaque{
};
// --------------------------------------------------------
// Type: PARSE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PARSE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: ELEMENT_TAG_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ELEMENT_TAG_ID = *opaque{
};
// --------------------------------------------------------
// Type: SELECTION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SELECTION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: SAVE_SEGMENTS_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SAVE_SEGMENTS_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CARET_DIRECTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CARET_DIRECTION = *opaque{
};
// --------------------------------------------------------
// Type: LINE_DIRECTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LINE_DIRECTION = *opaque{
};
// --------------------------------------------------------
// Type: HT_OPTIONS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HT_OPTIONS = *opaque{
};
// --------------------------------------------------------
// Type: HT_RESULTS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HT_RESULTS = *opaque{
};
// --------------------------------------------------------
// Type: DISPLAY_MOVEUNIT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DISPLAY_MOVEUNIT = *opaque{
};
// --------------------------------------------------------
// Type: DISPLAY_GRAVITY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DISPLAY_GRAVITY = *opaque{
};
// --------------------------------------------------------
// Type: DISPLAY_BREAK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DISPLAY_BREAK = *opaque{
};
// --------------------------------------------------------
// Type: COORD_SYSTEM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const COORD_SYSTEM = *opaque{
};
// --------------------------------------------------------
// Type: DEV_CONSOLE_MESSAGE_LEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DEV_CONSOLE_MESSAGE_LEVEL = *opaque{
};
// --------------------------------------------------------
// Type: DOM_EVENT_PHASE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOM_EVENT_PHASE = *opaque{
};
// --------------------------------------------------------
// Type: SCRIPT_TIMER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SCRIPT_TIMER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: HTML_PAINTER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HTML_PAINTER = *opaque{
};
// --------------------------------------------------------
// Type: HTML_PAINT_ZORDER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HTML_PAINT_ZORDER = *opaque{
};
// --------------------------------------------------------
// Type: HTML_PAINT_DRAW_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HTML_PAINT_DRAW_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: HTML_PAINT_EVENT_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HTML_PAINT_EVENT_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: HTML_PAINT_DRAW_INFO_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HTML_PAINT_DRAW_INFO_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: HTML_PAINTER_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HTML_PAINTER_INFO = extern struct {
    lFlags: {"kind":"Int32"},
    lZOrder: {"kind":"Int32"},
    iidDrawObject: Guid,
    rcExpand: Windows.Win32.DisplayDevices.RECT,
};
// --------------------------------------------------------
// Type: HTML_PAINT_XFORM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HTML_PAINT_XFORM = extern struct {
    eM11: {"kind":"Single"},
    eM12: {"kind":"Single"},
    eM21: {"kind":"Single"},
    eM22: {"kind":"Single"},
    eDx: {"kind":"Single"},
    eDy: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: HTML_PAINT_DRAW_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HTML_PAINT_DRAW_INFO = extern struct {
    rcViewport: Windows.Win32.DisplayDevices.RECT,
    hrgnUpdate: Windows.Win32.Gdi.HRGN,
    xform: Windows.Win32.Debug.HTML_PAINT_XFORM,
};
// --------------------------------------------------------
// Type: HTMLDlgFlag
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HTMLDlgFlag = *opaque{
};
// --------------------------------------------------------
// Type: HTMLDlgBorder
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HTMLDlgBorder = *opaque{
};
// --------------------------------------------------------
// Type: HTMLDlgEdge
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HTMLDlgEdge = *opaque{
};
// --------------------------------------------------------
// Type: HTMLDlgCenter
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HTMLDlgCenter = *opaque{
};
// --------------------------------------------------------
// Type: HTMLAppFlag
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HTMLAppFlag = *opaque{
};
// --------------------------------------------------------
// Type: HTMLMinimizeFlag
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HTMLMinimizeFlag = *opaque{
};
// --------------------------------------------------------
// Type: HTMLMaximizeFlag
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HTMLMaximizeFlag = *opaque{
};
// --------------------------------------------------------
// Type: HTMLCaptionFlag
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HTMLCaptionFlag = *opaque{
};
// --------------------------------------------------------
// Type: HTMLSysMenuFlag
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HTMLSysMenuFlag = *opaque{
};
// --------------------------------------------------------
// Type: HTMLBorder
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HTMLBorder = *opaque{
};
// --------------------------------------------------------
// Type: HTMLBorderStyle
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HTMLBorderStyle = *opaque{
};
// --------------------------------------------------------
// Type: HTMLWindowState
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HTMLWindowState = *opaque{
};
// --------------------------------------------------------
// Type: BEHAVIOR_EVENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BEHAVIOR_EVENT = *opaque{
};
// --------------------------------------------------------
// Type: BEHAVIOR_EVENT_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BEHAVIOR_EVENT_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: BEHAVIOR_RENDER_INFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BEHAVIOR_RENDER_INFO = *opaque{
};
// --------------------------------------------------------
// Type: BEHAVIOR_RELATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BEHAVIOR_RELATION = *opaque{
};
// --------------------------------------------------------
// Type: BEHAVIOR_LAYOUT_INFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BEHAVIOR_LAYOUT_INFO = *opaque{
};
// --------------------------------------------------------
// Type: BEHAVIOR_LAYOUT_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BEHAVIOR_LAYOUT_MODE = *opaque{
};
// --------------------------------------------------------
// Type: ELEMENTDESCRIPTOR_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ELEMENTDESCRIPTOR_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: ELEMENTNAMESPACE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ELEMENTNAMESPACE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: VIEW_OBJECT_ALPHA_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VIEW_OBJECT_ALPHA_MODE = *opaque{
};
// --------------------------------------------------------
// Type: VIEW_OBJECT_COMPOSITION_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VIEW_OBJECT_COMPOSITION_MODE = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLEventObj
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLEventObj = *opaque{
    // TODO: Method 'get_srcElement'
    // TODO: Method 'get_altKey'
    // TODO: Method 'get_ctrlKey'
    // TODO: Method 'get_shiftKey'
    // TODO: Method 'put_returnValue'
    // TODO: Method 'get_returnValue'
    // TODO: Method 'put_cancelBubble'
    // TODO: Method 'get_cancelBubble'
    // TODO: Method 'get_fromElement'
    // TODO: Method 'get_toElement'
    // TODO: Method 'put_keyCode'
    // TODO: Method 'get_keyCode'
    // TODO: Method 'get_button'
    // TODO: Method 'get_type'
    // TODO: Method 'get_qualifier'
    // TODO: Method 'get_reason'
    // TODO: Method 'get_x'
    // TODO: Method 'get_y'
    // TODO: Method 'get_clientX'
    // TODO: Method 'get_clientY'
    // TODO: Method 'get_offsetX'
    // TODO: Method 'get_offsetY'
    // TODO: Method 'get_screenX'
    // TODO: Method 'get_screenY'
    // TODO: Method 'get_srcFilter'
};
// --------------------------------------------------------
// Type: IElementBehaviorSite
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IElementBehaviorSite = *opaque{
    // TODO: Method 'GetElement'
    // TODO: Method 'RegisterNotification'
};
// --------------------------------------------------------
// Type: IElementBehavior
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IElementBehavior = *opaque{
    // TODO: Method 'Init'
    // TODO: Method 'Notify'
    // TODO: Method 'Detach'
};
// --------------------------------------------------------
// Type: IElementBehaviorFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IElementBehaviorFactory = *opaque{
    // TODO: Method 'FindBehavior'
};
// --------------------------------------------------------
// Type: IElementBehaviorSiteOM
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IElementBehaviorSiteOM = *opaque{
    // TODO: Method 'RegisterEvent'
    // TODO: Method 'GetEventCookie'
    // TODO: Method 'FireEvent'
    // TODO: Method 'CreateEventObject'
    // TODO: Method 'RegisterName'
    // TODO: Method 'RegisterUrn'
};
// --------------------------------------------------------
// Type: IElementBehaviorRender
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IElementBehaviorRender = *opaque{
    // TODO: Method 'Draw'
    // TODO: Method 'GetRenderInfo'
    // TODO: Method 'HitTestPoint'
};
// --------------------------------------------------------
// Type: IElementBehaviorSiteRender
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IElementBehaviorSiteRender = *opaque{
    // TODO: Method 'Invalidate'
    // TODO: Method 'InvalidateRenderInfo'
    // TODO: Method 'InvalidateStyle'
};
// --------------------------------------------------------
// Type: IDOMEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDOMEvent = *opaque{
    // TODO: Method 'get_bubbles'
    // TODO: Method 'get_cancelable'
    // TODO: Method 'get_currentTarget'
    // TODO: Method 'get_defaultPrevented'
    // TODO: Method 'get_eventPhase'
    // TODO: Method 'get_target'
    // TODO: Method 'get_timeStamp'
    // TODO: Method 'get_type'
    // TODO: Method 'initEvent'
    // TODO: Method 'preventDefault'
    // TODO: Method 'stopPropagation'
    // TODO: Method 'stopImmediatePropagation'
    // TODO: Method 'get_isTrusted'
    // TODO: Method 'put_cancelBubble'
    // TODO: Method 'get_cancelBubble'
    // TODO: Method 'get_srcElement'
};
// --------------------------------------------------------
// Type: IHTMLDOMConstructor
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDOMConstructor = *opaque{
    // TODO: Method 'get_constructor'
    // TODO: Method 'LookupGetter'
    // TODO: Method 'LookupSetter'
    // TODO: Method 'DefineGetter'
    // TODO: Method 'DefineSetter'
};
// --------------------------------------------------------
// Type: IHTMLStyleSheetRule
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLStyleSheetRule = *opaque{
    // TODO: Method 'put_selectorText'
    // TODO: Method 'get_selectorText'
    // TODO: Method 'get_style'
    // TODO: Method 'get_readOnly'
};
// --------------------------------------------------------
// Type: IHTMLCSSStyleDeclaration
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLCSSStyleDeclaration = *opaque{
    // TODO: Method 'get_length'
    // TODO: Method 'get_parentRule'
    // TODO: Method 'getPropertyValue'
    // TODO: Method 'getPropertyPriority'
    // TODO: Method 'removeProperty'
    // TODO: Method 'setProperty'
    // TODO: Method 'item'
    // TODO: Method 'put_fontFamily'
    // TODO: Method 'get_fontFamily'
    // TODO: Method 'put_fontStyle'
    // TODO: Method 'get_fontStyle'
    // TODO: Method 'put_fontVariant'
    // TODO: Method 'get_fontVariant'
    // TODO: Method 'put_fontWeight'
    // TODO: Method 'get_fontWeight'
    // TODO: Method 'put_fontSize'
    // TODO: Method 'get_fontSize'
    // TODO: Method 'put_font'
    // TODO: Method 'get_font'
    // TODO: Method 'put_color'
    // TODO: Method 'get_color'
    // TODO: Method 'put_background'
    // TODO: Method 'get_background'
    // TODO: Method 'put_backgroundColor'
    // TODO: Method 'get_backgroundColor'
    // TODO: Method 'put_backgroundImage'
    // TODO: Method 'get_backgroundImage'
    // TODO: Method 'put_backgroundRepeat'
    // TODO: Method 'get_backgroundRepeat'
    // TODO: Method 'put_backgroundAttachment'
    // TODO: Method 'get_backgroundAttachment'
    // TODO: Method 'put_backgroundPosition'
    // TODO: Method 'get_backgroundPosition'
    // TODO: Method 'put_backgroundPositionX'
    // TODO: Method 'get_backgroundPositionX'
    // TODO: Method 'put_backgroundPositionY'
    // TODO: Method 'get_backgroundPositionY'
    // TODO: Method 'put_wordSpacing'
    // TODO: Method 'get_wordSpacing'
    // TODO: Method 'put_letterSpacing'
    // TODO: Method 'get_letterSpacing'
    // TODO: Method 'put_textDecoration'
    // TODO: Method 'get_textDecoration'
    // TODO: Method 'put_verticalAlign'
    // TODO: Method 'get_verticalAlign'
    // TODO: Method 'put_textTransform'
    // TODO: Method 'get_textTransform'
    // TODO: Method 'put_textAlign'
    // TODO: Method 'get_textAlign'
    // TODO: Method 'put_textIndent'
    // TODO: Method 'get_textIndent'
    // TODO: Method 'put_lineHeight'
    // TODO: Method 'get_lineHeight'
    // TODO: Method 'put_marginTop'
    // TODO: Method 'get_marginTop'
    // TODO: Method 'put_marginRight'
    // TODO: Method 'get_marginRight'
    // TODO: Method 'put_marginBottom'
    // TODO: Method 'get_marginBottom'
    // TODO: Method 'put_marginLeft'
    // TODO: Method 'get_marginLeft'
    // TODO: Method 'put_margin'
    // TODO: Method 'get_margin'
    // TODO: Method 'put_paddingTop'
    // TODO: Method 'get_paddingTop'
    // TODO: Method 'put_paddingRight'
    // TODO: Method 'get_paddingRight'
    // TODO: Method 'put_paddingBottom'
    // TODO: Method 'get_paddingBottom'
    // TODO: Method 'put_paddingLeft'
    // TODO: Method 'get_paddingLeft'
    // TODO: Method 'put_padding'
    // TODO: Method 'get_padding'
    // TODO: Method 'put_border'
    // TODO: Method 'get_border'
    // TODO: Method 'put_borderTop'
    // TODO: Method 'get_borderTop'
    // TODO: Method 'put_borderRight'
    // TODO: Method 'get_borderRight'
    // TODO: Method 'put_borderBottom'
    // TODO: Method 'get_borderBottom'
    // TODO: Method 'put_borderLeft'
    // TODO: Method 'get_borderLeft'
    // TODO: Method 'put_borderColor'
    // TODO: Method 'get_borderColor'
    // TODO: Method 'put_borderTopColor'
    // TODO: Method 'get_borderTopColor'
    // TODO: Method 'put_borderRightColor'
    // TODO: Method 'get_borderRightColor'
    // TODO: Method 'put_borderBottomColor'
    // TODO: Method 'get_borderBottomColor'
    // TODO: Method 'put_borderLeftColor'
    // TODO: Method 'get_borderLeftColor'
    // TODO: Method 'put_borderWidth'
    // TODO: Method 'get_borderWidth'
    // TODO: Method 'put_borderTopWidth'
    // TODO: Method 'get_borderTopWidth'
    // TODO: Method 'put_borderRightWidth'
    // TODO: Method 'get_borderRightWidth'
    // TODO: Method 'put_borderBottomWidth'
    // TODO: Method 'get_borderBottomWidth'
    // TODO: Method 'put_borderLeftWidth'
    // TODO: Method 'get_borderLeftWidth'
    // TODO: Method 'put_borderStyle'
    // TODO: Method 'get_borderStyle'
    // TODO: Method 'put_borderTopStyle'
    // TODO: Method 'get_borderTopStyle'
    // TODO: Method 'put_borderRightStyle'
    // TODO: Method 'get_borderRightStyle'
    // TODO: Method 'put_borderBottomStyle'
    // TODO: Method 'get_borderBottomStyle'
    // TODO: Method 'put_borderLeftStyle'
    // TODO: Method 'get_borderLeftStyle'
    // TODO: Method 'put_width'
    // TODO: Method 'get_width'
    // TODO: Method 'put_height'
    // TODO: Method 'get_height'
    // TODO: Method 'put_styleFloat'
    // TODO: Method 'get_styleFloat'
    // TODO: Method 'put_clear'
    // TODO: Method 'get_clear'
    // TODO: Method 'put_display'
    // TODO: Method 'get_display'
    // TODO: Method 'put_visibility'
    // TODO: Method 'get_visibility'
    // TODO: Method 'put_listStyleType'
    // TODO: Method 'get_listStyleType'
    // TODO: Method 'put_listStylePosition'
    // TODO: Method 'get_listStylePosition'
    // TODO: Method 'put_listStyleImage'
    // TODO: Method 'get_listStyleImage'
    // TODO: Method 'put_listStyle'
    // TODO: Method 'get_listStyle'
    // TODO: Method 'put_whiteSpace'
    // TODO: Method 'get_whiteSpace'
    // TODO: Method 'put_top'
    // TODO: Method 'get_top'
    // TODO: Method 'put_left'
    // TODO: Method 'get_left'
    // TODO: Method 'put_zIndex'
    // TODO: Method 'get_zIndex'
    // TODO: Method 'put_overflow'
    // TODO: Method 'get_overflow'
    // TODO: Method 'put_pageBreakBefore'
    // TODO: Method 'get_pageBreakBefore'
    // TODO: Method 'put_pageBreakAfter'
    // TODO: Method 'get_pageBreakAfter'
    // TODO: Method 'put_cssText'
    // TODO: Method 'get_cssText'
    // TODO: Method 'put_cursor'
    // TODO: Method 'get_cursor'
    // TODO: Method 'put_clip'
    // TODO: Method 'get_clip'
    // TODO: Method 'put_filter'
    // TODO: Method 'get_filter'
    // TODO: Method 'put_tableLayout'
    // TODO: Method 'get_tableLayout'
    // TODO: Method 'put_borderCollapse'
    // TODO: Method 'get_borderCollapse'
    // TODO: Method 'put_direction'
    // TODO: Method 'get_direction'
    // TODO: Method 'put_behavior'
    // TODO: Method 'get_behavior'
    // TODO: Method 'put_position'
    // TODO: Method 'get_position'
    // TODO: Method 'put_unicodeBidi'
    // TODO: Method 'get_unicodeBidi'
    // TODO: Method 'put_bottom'
    // TODO: Method 'get_bottom'
    // TODO: Method 'put_right'
    // TODO: Method 'get_right'
    // TODO: Method 'put_imeMode'
    // TODO: Method 'get_imeMode'
    // TODO: Method 'put_rubyAlign'
    // TODO: Method 'get_rubyAlign'
    // TODO: Method 'put_rubyPosition'
    // TODO: Method 'get_rubyPosition'
    // TODO: Method 'put_rubyOverhang'
    // TODO: Method 'get_rubyOverhang'
    // TODO: Method 'put_layoutGridChar'
    // TODO: Method 'get_layoutGridChar'
    // TODO: Method 'put_layoutGridLine'
    // TODO: Method 'get_layoutGridLine'
    // TODO: Method 'put_layoutGridMode'
    // TODO: Method 'get_layoutGridMode'
    // TODO: Method 'put_layoutGridType'
    // TODO: Method 'get_layoutGridType'
    // TODO: Method 'put_layoutGrid'
    // TODO: Method 'get_layoutGrid'
    // TODO: Method 'put_textAutospace'
    // TODO: Method 'get_textAutospace'
    // TODO: Method 'put_wordBreak'
    // TODO: Method 'get_wordBreak'
    // TODO: Method 'put_lineBreak'
    // TODO: Method 'get_lineBreak'
    // TODO: Method 'put_textJustify'
    // TODO: Method 'get_textJustify'
    // TODO: Method 'put_textJustifyTrim'
    // TODO: Method 'get_textJustifyTrim'
    // TODO: Method 'put_textKashida'
    // TODO: Method 'get_textKashida'
    // TODO: Method 'put_overflowX'
    // TODO: Method 'get_overflowX'
    // TODO: Method 'put_overflowY'
    // TODO: Method 'get_overflowY'
    // TODO: Method 'put_accelerator'
    // TODO: Method 'get_accelerator'
    // TODO: Method 'put_layoutFlow'
    // TODO: Method 'get_layoutFlow'
    // TODO: Method 'put_zoom'
    // TODO: Method 'get_zoom'
    // TODO: Method 'put_wordWrap'
    // TODO: Method 'get_wordWrap'
    // TODO: Method 'put_textUnderlinePosition'
    // TODO: Method 'get_textUnderlinePosition'
    // TODO: Method 'put_scrollbarBaseColor'
    // TODO: Method 'get_scrollbarBaseColor'
    // TODO: Method 'put_scrollbarFaceColor'
    // TODO: Method 'get_scrollbarFaceColor'
    // TODO: Method 'put_scrollbar3dLightColor'
    // TODO: Method 'get_scrollbar3dLightColor'
    // TODO: Method 'put_scrollbarShadowColor'
    // TODO: Method 'get_scrollbarShadowColor'
    // TODO: Method 'put_scrollbarHighlightColor'
    // TODO: Method 'get_scrollbarHighlightColor'
    // TODO: Method 'put_scrollbarDarkShadowColor'
    // TODO: Method 'get_scrollbarDarkShadowColor'
    // TODO: Method 'put_scrollbarArrowColor'
    // TODO: Method 'get_scrollbarArrowColor'
    // TODO: Method 'put_scrollbarTrackColor'
    // TODO: Method 'get_scrollbarTrackColor'
    // TODO: Method 'put_writingMode'
    // TODO: Method 'get_writingMode'
    // TODO: Method 'put_textAlignLast'
    // TODO: Method 'get_textAlignLast'
    // TODO: Method 'put_textKashidaSpace'
    // TODO: Method 'get_textKashidaSpace'
    // TODO: Method 'put_textOverflow'
    // TODO: Method 'get_textOverflow'
    // TODO: Method 'put_minHeight'
    // TODO: Method 'get_minHeight'
    // TODO: Method 'put_msInterpolationMode'
    // TODO: Method 'get_msInterpolationMode'
    // TODO: Method 'put_maxHeight'
    // TODO: Method 'get_maxHeight'
    // TODO: Method 'put_minWidth'
    // TODO: Method 'get_minWidth'
    // TODO: Method 'put_maxWidth'
    // TODO: Method 'get_maxWidth'
    // TODO: Method 'put_content'
    // TODO: Method 'get_content'
    // TODO: Method 'put_captionSide'
    // TODO: Method 'get_captionSide'
    // TODO: Method 'put_counterIncrement'
    // TODO: Method 'get_counterIncrement'
    // TODO: Method 'put_counterReset'
    // TODO: Method 'get_counterReset'
    // TODO: Method 'put_outline'
    // TODO: Method 'get_outline'
    // TODO: Method 'put_outlineWidth'
    // TODO: Method 'get_outlineWidth'
    // TODO: Method 'put_outlineStyle'
    // TODO: Method 'get_outlineStyle'
    // TODO: Method 'put_outlineColor'
    // TODO: Method 'get_outlineColor'
    // TODO: Method 'put_boxSizing'
    // TODO: Method 'get_boxSizing'
    // TODO: Method 'put_borderSpacing'
    // TODO: Method 'get_borderSpacing'
    // TODO: Method 'put_orphans'
    // TODO: Method 'get_orphans'
    // TODO: Method 'put_widows'
    // TODO: Method 'get_widows'
    // TODO: Method 'put_pageBreakInside'
    // TODO: Method 'get_pageBreakInside'
    // TODO: Method 'put_emptyCells'
    // TODO: Method 'get_emptyCells'
    // TODO: Method 'put_msBlockProgression'
    // TODO: Method 'get_msBlockProgression'
    // TODO: Method 'put_quotes'
    // TODO: Method 'get_quotes'
    // TODO: Method 'put_alignmentBaseline'
    // TODO: Method 'get_alignmentBaseline'
    // TODO: Method 'put_baselineShift'
    // TODO: Method 'get_baselineShift'
    // TODO: Method 'put_dominantBaseline'
    // TODO: Method 'get_dominantBaseline'
    // TODO: Method 'put_fontSizeAdjust'
    // TODO: Method 'get_fontSizeAdjust'
    // TODO: Method 'put_fontStretch'
    // TODO: Method 'get_fontStretch'
    // TODO: Method 'put_opacity'
    // TODO: Method 'get_opacity'
    // TODO: Method 'put_clipPath'
    // TODO: Method 'get_clipPath'
    // TODO: Method 'put_clipRule'
    // TODO: Method 'get_clipRule'
    // TODO: Method 'put_fill'
    // TODO: Method 'get_fill'
    // TODO: Method 'put_fillOpacity'
    // TODO: Method 'get_fillOpacity'
    // TODO: Method 'put_fillRule'
    // TODO: Method 'get_fillRule'
    // TODO: Method 'put_kerning'
    // TODO: Method 'get_kerning'
    // TODO: Method 'put_marker'
    // TODO: Method 'get_marker'
    // TODO: Method 'put_markerEnd'
    // TODO: Method 'get_markerEnd'
    // TODO: Method 'put_markerMid'
    // TODO: Method 'get_markerMid'
    // TODO: Method 'put_markerStart'
    // TODO: Method 'get_markerStart'
    // TODO: Method 'put_mask'
    // TODO: Method 'get_mask'
    // TODO: Method 'put_pointerEvents'
    // TODO: Method 'get_pointerEvents'
    // TODO: Method 'put_stopColor'
    // TODO: Method 'get_stopColor'
    // TODO: Method 'put_stopOpacity'
    // TODO: Method 'get_stopOpacity'
    // TODO: Method 'put_stroke'
    // TODO: Method 'get_stroke'
    // TODO: Method 'put_strokeDasharray'
    // TODO: Method 'get_strokeDasharray'
    // TODO: Method 'put_strokeDashoffset'
    // TODO: Method 'get_strokeDashoffset'
    // TODO: Method 'put_strokeLinecap'
    // TODO: Method 'get_strokeLinecap'
    // TODO: Method 'put_strokeLinejoin'
    // TODO: Method 'get_strokeLinejoin'
    // TODO: Method 'put_strokeMiterlimit'
    // TODO: Method 'get_strokeMiterlimit'
    // TODO: Method 'put_strokeOpacity'
    // TODO: Method 'get_strokeOpacity'
    // TODO: Method 'put_strokeWidth'
    // TODO: Method 'get_strokeWidth'
    // TODO: Method 'put_textAnchor'
    // TODO: Method 'get_textAnchor'
    // TODO: Method 'put_glyphOrientationHorizontal'
    // TODO: Method 'get_glyphOrientationHorizontal'
    // TODO: Method 'put_glyphOrientationVertical'
    // TODO: Method 'get_glyphOrientationVertical'
    // TODO: Method 'put_borderRadius'
    // TODO: Method 'get_borderRadius'
    // TODO: Method 'put_borderTopLeftRadius'
    // TODO: Method 'get_borderTopLeftRadius'
    // TODO: Method 'put_borderTopRightRadius'
    // TODO: Method 'get_borderTopRightRadius'
    // TODO: Method 'put_borderBottomRightRadius'
    // TODO: Method 'get_borderBottomRightRadius'
    // TODO: Method 'put_borderBottomLeftRadius'
    // TODO: Method 'get_borderBottomLeftRadius'
    // TODO: Method 'put_clipTop'
    // TODO: Method 'get_clipTop'
    // TODO: Method 'put_clipRight'
    // TODO: Method 'get_clipRight'
    // TODO: Method 'get_clipBottom'
    // TODO: Method 'put_clipLeft'
    // TODO: Method 'get_clipLeft'
    // TODO: Method 'put_cssFloat'
    // TODO: Method 'get_cssFloat'
    // TODO: Method 'put_backgroundClip'
    // TODO: Method 'get_backgroundClip'
    // TODO: Method 'put_backgroundOrigin'
    // TODO: Method 'get_backgroundOrigin'
    // TODO: Method 'put_backgroundSize'
    // TODO: Method 'get_backgroundSize'
    // TODO: Method 'put_boxShadow'
    // TODO: Method 'get_boxShadow'
    // TODO: Method 'put_msTransform'
    // TODO: Method 'get_msTransform'
    // TODO: Method 'put_msTransformOrigin'
    // TODO: Method 'get_msTransformOrigin'
};
// --------------------------------------------------------
// Type: IHTMLCSSStyleDeclaration2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLCSSStyleDeclaration2 = *opaque{
    // TODO: Method 'put_msScrollChaining'
    // TODO: Method 'get_msScrollChaining'
    // TODO: Method 'put_msContentZooming'
    // TODO: Method 'get_msContentZooming'
    // TODO: Method 'put_msContentZoomSnapType'
    // TODO: Method 'get_msContentZoomSnapType'
    // TODO: Method 'put_msScrollRails'
    // TODO: Method 'get_msScrollRails'
    // TODO: Method 'put_msContentZoomChaining'
    // TODO: Method 'get_msContentZoomChaining'
    // TODO: Method 'put_msScrollSnapType'
    // TODO: Method 'get_msScrollSnapType'
    // TODO: Method 'put_msContentZoomLimit'
    // TODO: Method 'get_msContentZoomLimit'
    // TODO: Method 'put_msContentZoomSnap'
    // TODO: Method 'get_msContentZoomSnap'
    // TODO: Method 'put_msContentZoomSnapPoints'
    // TODO: Method 'get_msContentZoomSnapPoints'
    // TODO: Method 'put_msContentZoomLimitMin'
    // TODO: Method 'get_msContentZoomLimitMin'
    // TODO: Method 'put_msContentZoomLimitMax'
    // TODO: Method 'get_msContentZoomLimitMax'
    // TODO: Method 'put_msScrollSnapX'
    // TODO: Method 'get_msScrollSnapX'
    // TODO: Method 'put_msScrollSnapY'
    // TODO: Method 'get_msScrollSnapY'
    // TODO: Method 'put_msScrollSnapPointsX'
    // TODO: Method 'get_msScrollSnapPointsX'
    // TODO: Method 'put_msScrollSnapPointsY'
    // TODO: Method 'get_msScrollSnapPointsY'
    // TODO: Method 'put_msGridColumn'
    // TODO: Method 'get_msGridColumn'
    // TODO: Method 'put_msGridColumnAlign'
    // TODO: Method 'get_msGridColumnAlign'
    // TODO: Method 'put_msGridColumns'
    // TODO: Method 'get_msGridColumns'
    // TODO: Method 'put_msGridColumnSpan'
    // TODO: Method 'get_msGridColumnSpan'
    // TODO: Method 'put_msGridRow'
    // TODO: Method 'get_msGridRow'
    // TODO: Method 'put_msGridRowAlign'
    // TODO: Method 'get_msGridRowAlign'
    // TODO: Method 'put_msGridRows'
    // TODO: Method 'get_msGridRows'
    // TODO: Method 'put_msGridRowSpan'
    // TODO: Method 'get_msGridRowSpan'
    // TODO: Method 'put_msWrapThrough'
    // TODO: Method 'get_msWrapThrough'
    // TODO: Method 'put_msWrapMargin'
    // TODO: Method 'get_msWrapMargin'
    // TODO: Method 'put_msWrapFlow'
    // TODO: Method 'get_msWrapFlow'
    // TODO: Method 'put_msAnimationName'
    // TODO: Method 'get_msAnimationName'
    // TODO: Method 'put_msAnimationDuration'
    // TODO: Method 'get_msAnimationDuration'
    // TODO: Method 'put_msAnimationTimingFunction'
    // TODO: Method 'get_msAnimationTimingFunction'
    // TODO: Method 'put_msAnimationDelay'
    // TODO: Method 'get_msAnimationDelay'
    // TODO: Method 'put_msAnimationDirection'
    // TODO: Method 'get_msAnimationDirection'
    // TODO: Method 'put_msAnimationPlayState'
    // TODO: Method 'get_msAnimationPlayState'
    // TODO: Method 'put_msAnimationIterationCount'
    // TODO: Method 'get_msAnimationIterationCount'
    // TODO: Method 'put_msAnimation'
    // TODO: Method 'get_msAnimation'
    // TODO: Method 'put_msAnimationFillMode'
    // TODO: Method 'get_msAnimationFillMode'
    // TODO: Method 'put_colorInterpolationFilters'
    // TODO: Method 'get_colorInterpolationFilters'
    // TODO: Method 'put_columnCount'
    // TODO: Method 'get_columnCount'
    // TODO: Method 'put_columnWidth'
    // TODO: Method 'get_columnWidth'
    // TODO: Method 'put_columnGap'
    // TODO: Method 'get_columnGap'
    // TODO: Method 'put_columnFill'
    // TODO: Method 'get_columnFill'
    // TODO: Method 'put_columnSpan'
    // TODO: Method 'get_columnSpan'
    // TODO: Method 'put_columns'
    // TODO: Method 'get_columns'
    // TODO: Method 'put_columnRule'
    // TODO: Method 'get_columnRule'
    // TODO: Method 'put_columnRuleColor'
    // TODO: Method 'get_columnRuleColor'
    // TODO: Method 'put_columnRuleStyle'
    // TODO: Method 'get_columnRuleStyle'
    // TODO: Method 'put_columnRuleWidth'
    // TODO: Method 'get_columnRuleWidth'
    // TODO: Method 'put_breakBefore'
    // TODO: Method 'get_breakBefore'
    // TODO: Method 'put_breakAfter'
    // TODO: Method 'get_breakAfter'
    // TODO: Method 'put_breakInside'
    // TODO: Method 'get_breakInside'
    // TODO: Method 'put_floodColor'
    // TODO: Method 'get_floodColor'
    // TODO: Method 'put_floodOpacity'
    // TODO: Method 'get_floodOpacity'
    // TODO: Method 'put_lightingColor'
    // TODO: Method 'get_lightingColor'
    // TODO: Method 'put_msScrollLimitXMin'
    // TODO: Method 'get_msScrollLimitXMin'
    // TODO: Method 'put_msScrollLimitYMin'
    // TODO: Method 'get_msScrollLimitYMin'
    // TODO: Method 'put_msScrollLimitXMax'
    // TODO: Method 'get_msScrollLimitXMax'
    // TODO: Method 'put_msScrollLimitYMax'
    // TODO: Method 'get_msScrollLimitYMax'
    // TODO: Method 'put_msScrollLimit'
    // TODO: Method 'get_msScrollLimit'
    // TODO: Method 'put_textShadow'
    // TODO: Method 'get_textShadow'
    // TODO: Method 'put_msFlowFrom'
    // TODO: Method 'get_msFlowFrom'
    // TODO: Method 'put_msFlowInto'
    // TODO: Method 'get_msFlowInto'
    // TODO: Method 'put_msHyphens'
    // TODO: Method 'get_msHyphens'
    // TODO: Method 'put_msHyphenateLimitZone'
    // TODO: Method 'get_msHyphenateLimitZone'
    // TODO: Method 'put_msHyphenateLimitChars'
    // TODO: Method 'get_msHyphenateLimitChars'
    // TODO: Method 'put_msHyphenateLimitLines'
    // TODO: Method 'get_msHyphenateLimitLines'
    // TODO: Method 'put_msHighContrastAdjust'
    // TODO: Method 'get_msHighContrastAdjust'
    // TODO: Method 'put_enableBackground'
    // TODO: Method 'get_enableBackground'
    // TODO: Method 'put_msFontFeatureSettings'
    // TODO: Method 'get_msFontFeatureSettings'
    // TODO: Method 'put_msUserSelect'
    // TODO: Method 'get_msUserSelect'
    // TODO: Method 'put_msOverflowStyle'
    // TODO: Method 'get_msOverflowStyle'
    // TODO: Method 'put_msTransformStyle'
    // TODO: Method 'get_msTransformStyle'
    // TODO: Method 'put_msBackfaceVisibility'
    // TODO: Method 'get_msBackfaceVisibility'
    // TODO: Method 'put_msPerspective'
    // TODO: Method 'get_msPerspective'
    // TODO: Method 'put_msPerspectiveOrigin'
    // TODO: Method 'get_msPerspectiveOrigin'
    // TODO: Method 'put_msTransitionProperty'
    // TODO: Method 'get_msTransitionProperty'
    // TODO: Method 'put_msTransitionDuration'
    // TODO: Method 'get_msTransitionDuration'
    // TODO: Method 'put_msTransitionTimingFunction'
    // TODO: Method 'get_msTransitionTimingFunction'
    // TODO: Method 'put_msTransitionDelay'
    // TODO: Method 'get_msTransitionDelay'
    // TODO: Method 'put_msTransition'
    // TODO: Method 'get_msTransition'
    // TODO: Method 'put_msTouchAction'
    // TODO: Method 'get_msTouchAction'
    // TODO: Method 'put_msScrollTranslation'
    // TODO: Method 'get_msScrollTranslation'
    // TODO: Method 'put_msFlex'
    // TODO: Method 'get_msFlex'
    // TODO: Method 'put_msFlexPositive'
    // TODO: Method 'get_msFlexPositive'
    // TODO: Method 'put_msFlexNegative'
    // TODO: Method 'get_msFlexNegative'
    // TODO: Method 'put_msFlexPreferredSize'
    // TODO: Method 'get_msFlexPreferredSize'
    // TODO: Method 'put_msFlexFlow'
    // TODO: Method 'get_msFlexFlow'
    // TODO: Method 'put_msFlexDirection'
    // TODO: Method 'get_msFlexDirection'
    // TODO: Method 'put_msFlexWrap'
    // TODO: Method 'get_msFlexWrap'
    // TODO: Method 'put_msFlexAlign'
    // TODO: Method 'get_msFlexAlign'
    // TODO: Method 'put_msFlexItemAlign'
    // TODO: Method 'get_msFlexItemAlign'
    // TODO: Method 'put_msFlexPack'
    // TODO: Method 'get_msFlexPack'
    // TODO: Method 'put_msFlexLinePack'
    // TODO: Method 'get_msFlexLinePack'
    // TODO: Method 'put_msFlexOrder'
    // TODO: Method 'get_msFlexOrder'
    // TODO: Method 'put_msTouchSelect'
    // TODO: Method 'get_msTouchSelect'
    // TODO: Method 'put_transform'
    // TODO: Method 'get_transform'
    // TODO: Method 'put_transformOrigin'
    // TODO: Method 'get_transformOrigin'
    // TODO: Method 'put_transformStyle'
    // TODO: Method 'get_transformStyle'
    // TODO: Method 'put_backfaceVisibility'
    // TODO: Method 'get_backfaceVisibility'
    // TODO: Method 'put_perspective'
    // TODO: Method 'get_perspective'
    // TODO: Method 'put_perspectiveOrigin'
    // TODO: Method 'get_perspectiveOrigin'
    // TODO: Method 'put_transitionProperty'
    // TODO: Method 'get_transitionProperty'
    // TODO: Method 'put_transitionDuration'
    // TODO: Method 'get_transitionDuration'
    // TODO: Method 'put_transitionTimingFunction'
    // TODO: Method 'get_transitionTimingFunction'
    // TODO: Method 'put_transitionDelay'
    // TODO: Method 'get_transitionDelay'
    // TODO: Method 'put_transition'
    // TODO: Method 'get_transition'
    // TODO: Method 'put_fontFeatureSettings'
    // TODO: Method 'get_fontFeatureSettings'
    // TODO: Method 'put_animationName'
    // TODO: Method 'get_animationName'
    // TODO: Method 'put_animationDuration'
    // TODO: Method 'get_animationDuration'
    // TODO: Method 'put_animationTimingFunction'
    // TODO: Method 'get_animationTimingFunction'
    // TODO: Method 'put_animationDelay'
    // TODO: Method 'get_animationDelay'
    // TODO: Method 'put_animationDirection'
    // TODO: Method 'get_animationDirection'
    // TODO: Method 'put_animationPlayState'
    // TODO: Method 'get_animationPlayState'
    // TODO: Method 'put_animationIterationCount'
    // TODO: Method 'get_animationIterationCount'
    // TODO: Method 'put_animation'
    // TODO: Method 'get_animation'
    // TODO: Method 'put_animationFillMode'
    // TODO: Method 'get_animationFillMode'
};
// --------------------------------------------------------
// Type: IHTMLCSSStyleDeclaration3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLCSSStyleDeclaration3 = *opaque{
    // TODO: Method 'put_flex'
    // TODO: Method 'get_flex'
    // TODO: Method 'put_flexDirection'
    // TODO: Method 'get_flexDirection'
    // TODO: Method 'put_flexWrap'
    // TODO: Method 'get_flexWrap'
    // TODO: Method 'put_flexFlow'
    // TODO: Method 'get_flexFlow'
    // TODO: Method 'put_flexGrow'
    // TODO: Method 'get_flexGrow'
    // TODO: Method 'put_flexShrink'
    // TODO: Method 'get_flexShrink'
    // TODO: Method 'put_flexBasis'
    // TODO: Method 'get_flexBasis'
    // TODO: Method 'put_justifyContent'
    // TODO: Method 'get_justifyContent'
    // TODO: Method 'put_alignItems'
    // TODO: Method 'get_alignItems'
    // TODO: Method 'put_alignSelf'
    // TODO: Method 'get_alignSelf'
    // TODO: Method 'put_alignContent'
    // TODO: Method 'get_alignContent'
    // TODO: Method 'put_borderImage'
    // TODO: Method 'get_borderImage'
    // TODO: Method 'put_borderImageSource'
    // TODO: Method 'get_borderImageSource'
    // TODO: Method 'put_borderImageSlice'
    // TODO: Method 'get_borderImageSlice'
    // TODO: Method 'put_borderImageWidth'
    // TODO: Method 'get_borderImageWidth'
    // TODO: Method 'put_borderImageOutset'
    // TODO: Method 'get_borderImageOutset'
    // TODO: Method 'put_borderImageRepeat'
    // TODO: Method 'get_borderImageRepeat'
    // TODO: Method 'put_msImeAlign'
    // TODO: Method 'get_msImeAlign'
    // TODO: Method 'put_msTextCombineHorizontal'
    // TODO: Method 'get_msTextCombineHorizontal'
    // TODO: Method 'put_touchAction'
    // TODO: Method 'get_touchAction'
};
// --------------------------------------------------------
// Type: IHTMLCSSStyleDeclaration4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLCSSStyleDeclaration4 = *opaque{
    // TODO: Method 'put_webkitAppearance'
    // TODO: Method 'get_webkitAppearance'
    // TODO: Method 'put_webkitUserSelect'
    // TODO: Method 'get_webkitUserSelect'
    // TODO: Method 'put_webkitBoxAlign'
    // TODO: Method 'get_webkitBoxAlign'
    // TODO: Method 'put_webkitBoxOrdinalGroup'
    // TODO: Method 'get_webkitBoxOrdinalGroup'
    // TODO: Method 'put_webkitBoxPack'
    // TODO: Method 'get_webkitBoxPack'
    // TODO: Method 'put_webkitBoxFlex'
    // TODO: Method 'get_webkitBoxFlex'
    // TODO: Method 'put_webkitBoxOrient'
    // TODO: Method 'get_webkitBoxOrient'
    // TODO: Method 'put_webkitBoxDirection'
    // TODO: Method 'get_webkitBoxDirection'
    // TODO: Method 'put_webkitTransform'
    // TODO: Method 'get_webkitTransform'
    // TODO: Method 'put_webkitBackgroundSize'
    // TODO: Method 'get_webkitBackgroundSize'
    // TODO: Method 'put_webkitBackfaceVisibility'
    // TODO: Method 'get_webkitBackfaceVisibility'
    // TODO: Method 'put_webkitAnimation'
    // TODO: Method 'get_webkitAnimation'
    // TODO: Method 'put_webkitTransition'
    // TODO: Method 'get_webkitTransition'
    // TODO: Method 'put_webkitAnimationName'
    // TODO: Method 'get_webkitAnimationName'
    // TODO: Method 'put_webkitAnimationDuration'
    // TODO: Method 'get_webkitAnimationDuration'
    // TODO: Method 'put_webkitAnimationTimingFunction'
    // TODO: Method 'get_webkitAnimationTimingFunction'
    // TODO: Method 'put_webkitAnimationDelay'
    // TODO: Method 'get_webkitAnimationDelay'
    // TODO: Method 'put_webkitAnimationIterationCount'
    // TODO: Method 'get_webkitAnimationIterationCount'
    // TODO: Method 'put_webkitAnimationDirection'
    // TODO: Method 'get_webkitAnimationDirection'
    // TODO: Method 'put_webkitAnimationPlayState'
    // TODO: Method 'get_webkitAnimationPlayState'
    // TODO: Method 'put_webkitTransitionProperty'
    // TODO: Method 'get_webkitTransitionProperty'
    // TODO: Method 'put_webkitTransitionDuration'
    // TODO: Method 'get_webkitTransitionDuration'
    // TODO: Method 'put_webkitTransitionTimingFunction'
    // TODO: Method 'get_webkitTransitionTimingFunction'
    // TODO: Method 'put_webkitTransitionDelay'
    // TODO: Method 'get_webkitTransitionDelay'
    // TODO: Method 'put_webkitBackgroundAttachment'
    // TODO: Method 'get_webkitBackgroundAttachment'
    // TODO: Method 'put_webkitBackgroundColor'
    // TODO: Method 'get_webkitBackgroundColor'
    // TODO: Method 'put_webkitBackgroundClip'
    // TODO: Method 'get_webkitBackgroundClip'
    // TODO: Method 'put_webkitBackgroundImage'
    // TODO: Method 'get_webkitBackgroundImage'
    // TODO: Method 'put_webkitBackgroundRepeat'
    // TODO: Method 'get_webkitBackgroundRepeat'
    // TODO: Method 'put_webkitBackgroundOrigin'
    // TODO: Method 'get_webkitBackgroundOrigin'
    // TODO: Method 'put_webkitBackgroundPosition'
    // TODO: Method 'get_webkitBackgroundPosition'
    // TODO: Method 'put_webkitBackgroundPositionX'
    // TODO: Method 'get_webkitBackgroundPositionX'
    // TODO: Method 'put_webkitBackgroundPositionY'
    // TODO: Method 'get_webkitBackgroundPositionY'
    // TODO: Method 'put_webkitBackground'
    // TODO: Method 'get_webkitBackground'
    // TODO: Method 'put_webkitTransformOrigin'
    // TODO: Method 'get_webkitTransformOrigin'
    // TODO: Method 'put_msTextSizeAdjust'
    // TODO: Method 'get_msTextSizeAdjust'
    // TODO: Method 'put_webkitTextSizeAdjust'
    // TODO: Method 'get_webkitTextSizeAdjust'
    // TODO: Method 'put_webkitBorderImage'
    // TODO: Method 'get_webkitBorderImage'
    // TODO: Method 'put_webkitBorderImageSource'
    // TODO: Method 'get_webkitBorderImageSource'
    // TODO: Method 'put_webkitBorderImageSlice'
    // TODO: Method 'get_webkitBorderImageSlice'
    // TODO: Method 'put_webkitBorderImageWidth'
    // TODO: Method 'get_webkitBorderImageWidth'
    // TODO: Method 'put_webkitBorderImageOutset'
    // TODO: Method 'get_webkitBorderImageOutset'
    // TODO: Method 'put_webkitBorderImageRepeat'
    // TODO: Method 'get_webkitBorderImageRepeat'
    // TODO: Method 'put_webkitBoxSizing'
    // TODO: Method 'get_webkitBoxSizing'
    // TODO: Method 'put_webkitAnimationFillMode'
    // TODO: Method 'get_webkitAnimationFillMode'
};
// --------------------------------------------------------
// Type: IHTMLStyleEnabled
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLStyleEnabled = *opaque{
    // TODO: Method 'msGetPropertyEnabled'
    // TODO: Method 'msPutPropertyEnabled'
};
// --------------------------------------------------------
// Type: DispHTMLCSSStyleDeclaration
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLCSSStyleDeclaration = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLStyle
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLStyle = *opaque{
    // TODO: Method 'put_fontFamily'
    // TODO: Method 'get_fontFamily'
    // TODO: Method 'put_fontStyle'
    // TODO: Method 'get_fontStyle'
    // TODO: Method 'put_fontVariant'
    // TODO: Method 'get_fontVariant'
    // TODO: Method 'put_fontWeight'
    // TODO: Method 'get_fontWeight'
    // TODO: Method 'put_fontSize'
    // TODO: Method 'get_fontSize'
    // TODO: Method 'put_font'
    // TODO: Method 'get_font'
    // TODO: Method 'put_color'
    // TODO: Method 'get_color'
    // TODO: Method 'put_background'
    // TODO: Method 'get_background'
    // TODO: Method 'put_backgroundColor'
    // TODO: Method 'get_backgroundColor'
    // TODO: Method 'put_backgroundImage'
    // TODO: Method 'get_backgroundImage'
    // TODO: Method 'put_backgroundRepeat'
    // TODO: Method 'get_backgroundRepeat'
    // TODO: Method 'put_backgroundAttachment'
    // TODO: Method 'get_backgroundAttachment'
    // TODO: Method 'put_backgroundPosition'
    // TODO: Method 'get_backgroundPosition'
    // TODO: Method 'put_backgroundPositionX'
    // TODO: Method 'get_backgroundPositionX'
    // TODO: Method 'put_backgroundPositionY'
    // TODO: Method 'get_backgroundPositionY'
    // TODO: Method 'put_wordSpacing'
    // TODO: Method 'get_wordSpacing'
    // TODO: Method 'put_letterSpacing'
    // TODO: Method 'get_letterSpacing'
    // TODO: Method 'put_textDecoration'
    // TODO: Method 'get_textDecoration'
    // TODO: Method 'put_textDecorationNone'
    // TODO: Method 'get_textDecorationNone'
    // TODO: Method 'put_textDecorationUnderline'
    // TODO: Method 'get_textDecorationUnderline'
    // TODO: Method 'put_textDecorationOverline'
    // TODO: Method 'get_textDecorationOverline'
    // TODO: Method 'put_textDecorationLineThrough'
    // TODO: Method 'get_textDecorationLineThrough'
    // TODO: Method 'put_textDecorationBlink'
    // TODO: Method 'get_textDecorationBlink'
    // TODO: Method 'put_verticalAlign'
    // TODO: Method 'get_verticalAlign'
    // TODO: Method 'put_textTransform'
    // TODO: Method 'get_textTransform'
    // TODO: Method 'put_textAlign'
    // TODO: Method 'get_textAlign'
    // TODO: Method 'put_textIndent'
    // TODO: Method 'get_textIndent'
    // TODO: Method 'put_lineHeight'
    // TODO: Method 'get_lineHeight'
    // TODO: Method 'put_marginTop'
    // TODO: Method 'get_marginTop'
    // TODO: Method 'put_marginRight'
    // TODO: Method 'get_marginRight'
    // TODO: Method 'put_marginBottom'
    // TODO: Method 'get_marginBottom'
    // TODO: Method 'put_marginLeft'
    // TODO: Method 'get_marginLeft'
    // TODO: Method 'put_margin'
    // TODO: Method 'get_margin'
    // TODO: Method 'put_paddingTop'
    // TODO: Method 'get_paddingTop'
    // TODO: Method 'put_paddingRight'
    // TODO: Method 'get_paddingRight'
    // TODO: Method 'put_paddingBottom'
    // TODO: Method 'get_paddingBottom'
    // TODO: Method 'put_paddingLeft'
    // TODO: Method 'get_paddingLeft'
    // TODO: Method 'put_padding'
    // TODO: Method 'get_padding'
    // TODO: Method 'put_border'
    // TODO: Method 'get_border'
    // TODO: Method 'put_borderTop'
    // TODO: Method 'get_borderTop'
    // TODO: Method 'put_borderRight'
    // TODO: Method 'get_borderRight'
    // TODO: Method 'put_borderBottom'
    // TODO: Method 'get_borderBottom'
    // TODO: Method 'put_borderLeft'
    // TODO: Method 'get_borderLeft'
    // TODO: Method 'put_borderColor'
    // TODO: Method 'get_borderColor'
    // TODO: Method 'put_borderTopColor'
    // TODO: Method 'get_borderTopColor'
    // TODO: Method 'put_borderRightColor'
    // TODO: Method 'get_borderRightColor'
    // TODO: Method 'put_borderBottomColor'
    // TODO: Method 'get_borderBottomColor'
    // TODO: Method 'put_borderLeftColor'
    // TODO: Method 'get_borderLeftColor'
    // TODO: Method 'put_borderWidth'
    // TODO: Method 'get_borderWidth'
    // TODO: Method 'put_borderTopWidth'
    // TODO: Method 'get_borderTopWidth'
    // TODO: Method 'put_borderRightWidth'
    // TODO: Method 'get_borderRightWidth'
    // TODO: Method 'put_borderBottomWidth'
    // TODO: Method 'get_borderBottomWidth'
    // TODO: Method 'put_borderLeftWidth'
    // TODO: Method 'get_borderLeftWidth'
    // TODO: Method 'put_borderStyle'
    // TODO: Method 'get_borderStyle'
    // TODO: Method 'put_borderTopStyle'
    // TODO: Method 'get_borderTopStyle'
    // TODO: Method 'put_borderRightStyle'
    // TODO: Method 'get_borderRightStyle'
    // TODO: Method 'put_borderBottomStyle'
    // TODO: Method 'get_borderBottomStyle'
    // TODO: Method 'put_borderLeftStyle'
    // TODO: Method 'get_borderLeftStyle'
    // TODO: Method 'put_width'
    // TODO: Method 'get_width'
    // TODO: Method 'put_height'
    // TODO: Method 'get_height'
    // TODO: Method 'put_styleFloat'
    // TODO: Method 'get_styleFloat'
    // TODO: Method 'put_clear'
    // TODO: Method 'get_clear'
    // TODO: Method 'put_display'
    // TODO: Method 'get_display'
    // TODO: Method 'put_visibility'
    // TODO: Method 'get_visibility'
    // TODO: Method 'put_listStyleType'
    // TODO: Method 'get_listStyleType'
    // TODO: Method 'put_listStylePosition'
    // TODO: Method 'get_listStylePosition'
    // TODO: Method 'put_listStyleImage'
    // TODO: Method 'get_listStyleImage'
    // TODO: Method 'put_listStyle'
    // TODO: Method 'get_listStyle'
    // TODO: Method 'put_whiteSpace'
    // TODO: Method 'get_whiteSpace'
    // TODO: Method 'put_top'
    // TODO: Method 'get_top'
    // TODO: Method 'put_left'
    // TODO: Method 'get_left'
    // TODO: Method 'get_position'
    // TODO: Method 'put_zIndex'
    // TODO: Method 'get_zIndex'
    // TODO: Method 'put_overflow'
    // TODO: Method 'get_overflow'
    // TODO: Method 'put_pageBreakBefore'
    // TODO: Method 'get_pageBreakBefore'
    // TODO: Method 'put_pageBreakAfter'
    // TODO: Method 'get_pageBreakAfter'
    // TODO: Method 'put_cssText'
    // TODO: Method 'get_cssText'
    // TODO: Method 'put_pixelTop'
    // TODO: Method 'get_pixelTop'
    // TODO: Method 'put_pixelLeft'
    // TODO: Method 'get_pixelLeft'
    // TODO: Method 'put_pixelWidth'
    // TODO: Method 'get_pixelWidth'
    // TODO: Method 'put_pixelHeight'
    // TODO: Method 'get_pixelHeight'
    // TODO: Method 'put_posTop'
    // TODO: Method 'get_posTop'
    // TODO: Method 'put_posLeft'
    // TODO: Method 'get_posLeft'
    // TODO: Method 'put_posWidth'
    // TODO: Method 'get_posWidth'
    // TODO: Method 'put_posHeight'
    // TODO: Method 'get_posHeight'
    // TODO: Method 'put_cursor'
    // TODO: Method 'get_cursor'
    // TODO: Method 'put_clip'
    // TODO: Method 'get_clip'
    // TODO: Method 'put_filter'
    // TODO: Method 'get_filter'
    // TODO: Method 'setAttribute'
    // TODO: Method 'getAttribute'
    // TODO: Method 'removeAttribute'
    // TODO: Method 'toString'
};
// --------------------------------------------------------
// Type: IHTMLStyle2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLStyle2 = *opaque{
    // TODO: Method 'put_tableLayout'
    // TODO: Method 'get_tableLayout'
    // TODO: Method 'put_borderCollapse'
    // TODO: Method 'get_borderCollapse'
    // TODO: Method 'put_direction'
    // TODO: Method 'get_direction'
    // TODO: Method 'put_behavior'
    // TODO: Method 'get_behavior'
    // TODO: Method 'setExpression'
    // TODO: Method 'getExpression'
    // TODO: Method 'removeExpression'
    // TODO: Method 'put_position'
    // TODO: Method 'get_position'
    // TODO: Method 'put_unicodeBidi'
    // TODO: Method 'get_unicodeBidi'
    // TODO: Method 'put_bottom'
    // TODO: Method 'get_bottom'
    // TODO: Method 'put_right'
    // TODO: Method 'get_right'
    // TODO: Method 'put_pixelBottom'
    // TODO: Method 'get_pixelBottom'
    // TODO: Method 'put_pixelRight'
    // TODO: Method 'get_pixelRight'
    // TODO: Method 'put_posBottom'
    // TODO: Method 'get_posBottom'
    // TODO: Method 'put_posRight'
    // TODO: Method 'get_posRight'
    // TODO: Method 'put_imeMode'
    // TODO: Method 'get_imeMode'
    // TODO: Method 'put_rubyAlign'
    // TODO: Method 'get_rubyAlign'
    // TODO: Method 'put_rubyPosition'
    // TODO: Method 'get_rubyPosition'
    // TODO: Method 'put_rubyOverhang'
    // TODO: Method 'get_rubyOverhang'
    // TODO: Method 'put_layoutGridChar'
    // TODO: Method 'get_layoutGridChar'
    // TODO: Method 'put_layoutGridLine'
    // TODO: Method 'get_layoutGridLine'
    // TODO: Method 'put_layoutGridMode'
    // TODO: Method 'get_layoutGridMode'
    // TODO: Method 'put_layoutGridType'
    // TODO: Method 'get_layoutGridType'
    // TODO: Method 'put_layoutGrid'
    // TODO: Method 'get_layoutGrid'
    // TODO: Method 'put_wordBreak'
    // TODO: Method 'get_wordBreak'
    // TODO: Method 'put_lineBreak'
    // TODO: Method 'get_lineBreak'
    // TODO: Method 'put_textJustify'
    // TODO: Method 'get_textJustify'
    // TODO: Method 'put_textJustifyTrim'
    // TODO: Method 'get_textJustifyTrim'
    // TODO: Method 'put_textKashida'
    // TODO: Method 'get_textKashida'
    // TODO: Method 'put_textAutospace'
    // TODO: Method 'get_textAutospace'
    // TODO: Method 'put_overflowX'
    // TODO: Method 'get_overflowX'
    // TODO: Method 'put_overflowY'
    // TODO: Method 'get_overflowY'
    // TODO: Method 'put_accelerator'
    // TODO: Method 'get_accelerator'
};
// --------------------------------------------------------
// Type: IHTMLStyle3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLStyle3 = *opaque{
    // TODO: Method 'put_layoutFlow'
    // TODO: Method 'get_layoutFlow'
    // TODO: Method 'put_zoom'
    // TODO: Method 'get_zoom'
    // TODO: Method 'put_wordWrap'
    // TODO: Method 'get_wordWrap'
    // TODO: Method 'put_textUnderlinePosition'
    // TODO: Method 'get_textUnderlinePosition'
    // TODO: Method 'put_scrollbarBaseColor'
    // TODO: Method 'get_scrollbarBaseColor'
    // TODO: Method 'put_scrollbarFaceColor'
    // TODO: Method 'get_scrollbarFaceColor'
    // TODO: Method 'put_scrollbar3dLightColor'
    // TODO: Method 'get_scrollbar3dLightColor'
    // TODO: Method 'put_scrollbarShadowColor'
    // TODO: Method 'get_scrollbarShadowColor'
    // TODO: Method 'put_scrollbarHighlightColor'
    // TODO: Method 'get_scrollbarHighlightColor'
    // TODO: Method 'put_scrollbarDarkShadowColor'
    // TODO: Method 'get_scrollbarDarkShadowColor'
    // TODO: Method 'put_scrollbarArrowColor'
    // TODO: Method 'get_scrollbarArrowColor'
    // TODO: Method 'put_scrollbarTrackColor'
    // TODO: Method 'get_scrollbarTrackColor'
    // TODO: Method 'put_writingMode'
    // TODO: Method 'get_writingMode'
    // TODO: Method 'put_textAlignLast'
    // TODO: Method 'get_textAlignLast'
    // TODO: Method 'put_textKashidaSpace'
    // TODO: Method 'get_textKashidaSpace'
};
// --------------------------------------------------------
// Type: IHTMLStyle4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLStyle4 = *opaque{
    // TODO: Method 'put_textOverflow'
    // TODO: Method 'get_textOverflow'
    // TODO: Method 'put_minHeight'
    // TODO: Method 'get_minHeight'
};
// --------------------------------------------------------
// Type: IHTMLStyle5
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLStyle5 = *opaque{
    // TODO: Method 'put_msInterpolationMode'
    // TODO: Method 'get_msInterpolationMode'
    // TODO: Method 'put_maxHeight'
    // TODO: Method 'get_maxHeight'
    // TODO: Method 'put_minWidth'
    // TODO: Method 'get_minWidth'
    // TODO: Method 'put_maxWidth'
    // TODO: Method 'get_maxWidth'
};
// --------------------------------------------------------
// Type: IHTMLStyle6
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLStyle6 = *opaque{
    // TODO: Method 'put_content'
    // TODO: Method 'get_content'
    // TODO: Method 'put_captionSide'
    // TODO: Method 'get_captionSide'
    // TODO: Method 'put_counterIncrement'
    // TODO: Method 'get_counterIncrement'
    // TODO: Method 'put_counterReset'
    // TODO: Method 'get_counterReset'
    // TODO: Method 'put_outline'
    // TODO: Method 'get_outline'
    // TODO: Method 'put_outlineWidth'
    // TODO: Method 'get_outlineWidth'
    // TODO: Method 'put_outlineStyle'
    // TODO: Method 'get_outlineStyle'
    // TODO: Method 'put_outlineColor'
    // TODO: Method 'get_outlineColor'
    // TODO: Method 'put_boxSizing'
    // TODO: Method 'get_boxSizing'
    // TODO: Method 'put_borderSpacing'
    // TODO: Method 'get_borderSpacing'
    // TODO: Method 'put_orphans'
    // TODO: Method 'get_orphans'
    // TODO: Method 'put_widows'
    // TODO: Method 'get_widows'
    // TODO: Method 'put_pageBreakInside'
    // TODO: Method 'get_pageBreakInside'
    // TODO: Method 'put_emptyCells'
    // TODO: Method 'get_emptyCells'
    // TODO: Method 'put_msBlockProgression'
    // TODO: Method 'get_msBlockProgression'
    // TODO: Method 'put_quotes'
    // TODO: Method 'get_quotes'
};
// --------------------------------------------------------
// Type: IHTMLRuleStyle
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLRuleStyle = *opaque{
    // TODO: Method 'put_fontFamily'
    // TODO: Method 'get_fontFamily'
    // TODO: Method 'put_fontStyle'
    // TODO: Method 'get_fontStyle'
    // TODO: Method 'put_fontVariant'
    // TODO: Method 'get_fontVariant'
    // TODO: Method 'put_fontWeight'
    // TODO: Method 'get_fontWeight'
    // TODO: Method 'put_fontSize'
    // TODO: Method 'get_fontSize'
    // TODO: Method 'put_font'
    // TODO: Method 'get_font'
    // TODO: Method 'put_color'
    // TODO: Method 'get_color'
    // TODO: Method 'put_background'
    // TODO: Method 'get_background'
    // TODO: Method 'put_backgroundColor'
    // TODO: Method 'get_backgroundColor'
    // TODO: Method 'put_backgroundImage'
    // TODO: Method 'get_backgroundImage'
    // TODO: Method 'put_backgroundRepeat'
    // TODO: Method 'get_backgroundRepeat'
    // TODO: Method 'put_backgroundAttachment'
    // TODO: Method 'get_backgroundAttachment'
    // TODO: Method 'put_backgroundPosition'
    // TODO: Method 'get_backgroundPosition'
    // TODO: Method 'put_backgroundPositionX'
    // TODO: Method 'get_backgroundPositionX'
    // TODO: Method 'put_backgroundPositionY'
    // TODO: Method 'get_backgroundPositionY'
    // TODO: Method 'put_wordSpacing'
    // TODO: Method 'get_wordSpacing'
    // TODO: Method 'put_letterSpacing'
    // TODO: Method 'get_letterSpacing'
    // TODO: Method 'put_textDecoration'
    // TODO: Method 'get_textDecoration'
    // TODO: Method 'put_textDecorationNone'
    // TODO: Method 'get_textDecorationNone'
    // TODO: Method 'put_textDecorationUnderline'
    // TODO: Method 'get_textDecorationUnderline'
    // TODO: Method 'put_textDecorationOverline'
    // TODO: Method 'get_textDecorationOverline'
    // TODO: Method 'put_textDecorationLineThrough'
    // TODO: Method 'get_textDecorationLineThrough'
    // TODO: Method 'put_textDecorationBlink'
    // TODO: Method 'get_textDecorationBlink'
    // TODO: Method 'put_verticalAlign'
    // TODO: Method 'get_verticalAlign'
    // TODO: Method 'put_textTransform'
    // TODO: Method 'get_textTransform'
    // TODO: Method 'put_textAlign'
    // TODO: Method 'get_textAlign'
    // TODO: Method 'put_textIndent'
    // TODO: Method 'get_textIndent'
    // TODO: Method 'put_lineHeight'
    // TODO: Method 'get_lineHeight'
    // TODO: Method 'put_marginTop'
    // TODO: Method 'get_marginTop'
    // TODO: Method 'put_marginRight'
    // TODO: Method 'get_marginRight'
    // TODO: Method 'put_marginBottom'
    // TODO: Method 'get_marginBottom'
    // TODO: Method 'put_marginLeft'
    // TODO: Method 'get_marginLeft'
    // TODO: Method 'put_margin'
    // TODO: Method 'get_margin'
    // TODO: Method 'put_paddingTop'
    // TODO: Method 'get_paddingTop'
    // TODO: Method 'put_paddingRight'
    // TODO: Method 'get_paddingRight'
    // TODO: Method 'put_paddingBottom'
    // TODO: Method 'get_paddingBottom'
    // TODO: Method 'put_paddingLeft'
    // TODO: Method 'get_paddingLeft'
    // TODO: Method 'put_padding'
    // TODO: Method 'get_padding'
    // TODO: Method 'put_border'
    // TODO: Method 'get_border'
    // TODO: Method 'put_borderTop'
    // TODO: Method 'get_borderTop'
    // TODO: Method 'put_borderRight'
    // TODO: Method 'get_borderRight'
    // TODO: Method 'put_borderBottom'
    // TODO: Method 'get_borderBottom'
    // TODO: Method 'put_borderLeft'
    // TODO: Method 'get_borderLeft'
    // TODO: Method 'put_borderColor'
    // TODO: Method 'get_borderColor'
    // TODO: Method 'put_borderTopColor'
    // TODO: Method 'get_borderTopColor'
    // TODO: Method 'put_borderRightColor'
    // TODO: Method 'get_borderRightColor'
    // TODO: Method 'put_borderBottomColor'
    // TODO: Method 'get_borderBottomColor'
    // TODO: Method 'put_borderLeftColor'
    // TODO: Method 'get_borderLeftColor'
    // TODO: Method 'put_borderWidth'
    // TODO: Method 'get_borderWidth'
    // TODO: Method 'put_borderTopWidth'
    // TODO: Method 'get_borderTopWidth'
    // TODO: Method 'put_borderRightWidth'
    // TODO: Method 'get_borderRightWidth'
    // TODO: Method 'put_borderBottomWidth'
    // TODO: Method 'get_borderBottomWidth'
    // TODO: Method 'put_borderLeftWidth'
    // TODO: Method 'get_borderLeftWidth'
    // TODO: Method 'put_borderStyle'
    // TODO: Method 'get_borderStyle'
    // TODO: Method 'put_borderTopStyle'
    // TODO: Method 'get_borderTopStyle'
    // TODO: Method 'put_borderRightStyle'
    // TODO: Method 'get_borderRightStyle'
    // TODO: Method 'put_borderBottomStyle'
    // TODO: Method 'get_borderBottomStyle'
    // TODO: Method 'put_borderLeftStyle'
    // TODO: Method 'get_borderLeftStyle'
    // TODO: Method 'put_width'
    // TODO: Method 'get_width'
    // TODO: Method 'put_height'
    // TODO: Method 'get_height'
    // TODO: Method 'put_styleFloat'
    // TODO: Method 'get_styleFloat'
    // TODO: Method 'put_clear'
    // TODO: Method 'get_clear'
    // TODO: Method 'put_display'
    // TODO: Method 'get_display'
    // TODO: Method 'put_visibility'
    // TODO: Method 'get_visibility'
    // TODO: Method 'put_listStyleType'
    // TODO: Method 'get_listStyleType'
    // TODO: Method 'put_listStylePosition'
    // TODO: Method 'get_listStylePosition'
    // TODO: Method 'put_listStyleImage'
    // TODO: Method 'get_listStyleImage'
    // TODO: Method 'put_listStyle'
    // TODO: Method 'get_listStyle'
    // TODO: Method 'put_whiteSpace'
    // TODO: Method 'get_whiteSpace'
    // TODO: Method 'put_top'
    // TODO: Method 'get_top'
    // TODO: Method 'put_left'
    // TODO: Method 'get_left'
    // TODO: Method 'get_position'
    // TODO: Method 'put_zIndex'
    // TODO: Method 'get_zIndex'
    // TODO: Method 'put_overflow'
    // TODO: Method 'get_overflow'
    // TODO: Method 'put_pageBreakBefore'
    // TODO: Method 'get_pageBreakBefore'
    // TODO: Method 'put_pageBreakAfter'
    // TODO: Method 'get_pageBreakAfter'
    // TODO: Method 'put_cssText'
    // TODO: Method 'get_cssText'
    // TODO: Method 'put_cursor'
    // TODO: Method 'get_cursor'
    // TODO: Method 'put_clip'
    // TODO: Method 'get_clip'
    // TODO: Method 'put_filter'
    // TODO: Method 'get_filter'
    // TODO: Method 'setAttribute'
    // TODO: Method 'getAttribute'
    // TODO: Method 'removeAttribute'
};
// --------------------------------------------------------
// Type: IHTMLRuleStyle2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLRuleStyle2 = *opaque{
    // TODO: Method 'put_tableLayout'
    // TODO: Method 'get_tableLayout'
    // TODO: Method 'put_borderCollapse'
    // TODO: Method 'get_borderCollapse'
    // TODO: Method 'put_direction'
    // TODO: Method 'get_direction'
    // TODO: Method 'put_behavior'
    // TODO: Method 'get_behavior'
    // TODO: Method 'put_position'
    // TODO: Method 'get_position'
    // TODO: Method 'put_unicodeBidi'
    // TODO: Method 'get_unicodeBidi'
    // TODO: Method 'put_bottom'
    // TODO: Method 'get_bottom'
    // TODO: Method 'put_right'
    // TODO: Method 'get_right'
    // TODO: Method 'put_pixelBottom'
    // TODO: Method 'get_pixelBottom'
    // TODO: Method 'put_pixelRight'
    // TODO: Method 'get_pixelRight'
    // TODO: Method 'put_posBottom'
    // TODO: Method 'get_posBottom'
    // TODO: Method 'put_posRight'
    // TODO: Method 'get_posRight'
    // TODO: Method 'put_imeMode'
    // TODO: Method 'get_imeMode'
    // TODO: Method 'put_rubyAlign'
    // TODO: Method 'get_rubyAlign'
    // TODO: Method 'put_rubyPosition'
    // TODO: Method 'get_rubyPosition'
    // TODO: Method 'put_rubyOverhang'
    // TODO: Method 'get_rubyOverhang'
    // TODO: Method 'put_layoutGridChar'
    // TODO: Method 'get_layoutGridChar'
    // TODO: Method 'put_layoutGridLine'
    // TODO: Method 'get_layoutGridLine'
    // TODO: Method 'put_layoutGridMode'
    // TODO: Method 'get_layoutGridMode'
    // TODO: Method 'put_layoutGridType'
    // TODO: Method 'get_layoutGridType'
    // TODO: Method 'put_layoutGrid'
    // TODO: Method 'get_layoutGrid'
    // TODO: Method 'put_textAutospace'
    // TODO: Method 'get_textAutospace'
    // TODO: Method 'put_wordBreak'
    // TODO: Method 'get_wordBreak'
    // TODO: Method 'put_lineBreak'
    // TODO: Method 'get_lineBreak'
    // TODO: Method 'put_textJustify'
    // TODO: Method 'get_textJustify'
    // TODO: Method 'put_textJustifyTrim'
    // TODO: Method 'get_textJustifyTrim'
    // TODO: Method 'put_textKashida'
    // TODO: Method 'get_textKashida'
    // TODO: Method 'put_overflowX'
    // TODO: Method 'get_overflowX'
    // TODO: Method 'put_overflowY'
    // TODO: Method 'get_overflowY'
    // TODO: Method 'put_accelerator'
    // TODO: Method 'get_accelerator'
};
// --------------------------------------------------------
// Type: IHTMLRuleStyle3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLRuleStyle3 = *opaque{
    // TODO: Method 'put_layoutFlow'
    // TODO: Method 'get_layoutFlow'
    // TODO: Method 'put_zoom'
    // TODO: Method 'get_zoom'
    // TODO: Method 'put_wordWrap'
    // TODO: Method 'get_wordWrap'
    // TODO: Method 'put_textUnderlinePosition'
    // TODO: Method 'get_textUnderlinePosition'
    // TODO: Method 'put_scrollbarBaseColor'
    // TODO: Method 'get_scrollbarBaseColor'
    // TODO: Method 'put_scrollbarFaceColor'
    // TODO: Method 'get_scrollbarFaceColor'
    // TODO: Method 'put_scrollbar3dLightColor'
    // TODO: Method 'get_scrollbar3dLightColor'
    // TODO: Method 'put_scrollbarShadowColor'
    // TODO: Method 'get_scrollbarShadowColor'
    // TODO: Method 'put_scrollbarHighlightColor'
    // TODO: Method 'get_scrollbarHighlightColor'
    // TODO: Method 'put_scrollbarDarkShadowColor'
    // TODO: Method 'get_scrollbarDarkShadowColor'
    // TODO: Method 'put_scrollbarArrowColor'
    // TODO: Method 'get_scrollbarArrowColor'
    // TODO: Method 'put_scrollbarTrackColor'
    // TODO: Method 'get_scrollbarTrackColor'
    // TODO: Method 'put_writingMode'
    // TODO: Method 'get_writingMode'
    // TODO: Method 'put_textAlignLast'
    // TODO: Method 'get_textAlignLast'
    // TODO: Method 'put_textKashidaSpace'
    // TODO: Method 'get_textKashidaSpace'
};
// --------------------------------------------------------
// Type: IHTMLRuleStyle4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLRuleStyle4 = *opaque{
    // TODO: Method 'put_textOverflow'
    // TODO: Method 'get_textOverflow'
    // TODO: Method 'put_minHeight'
    // TODO: Method 'get_minHeight'
};
// --------------------------------------------------------
// Type: IHTMLRuleStyle5
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLRuleStyle5 = *opaque{
    // TODO: Method 'put_msInterpolationMode'
    // TODO: Method 'get_msInterpolationMode'
    // TODO: Method 'put_maxHeight'
    // TODO: Method 'get_maxHeight'
    // TODO: Method 'put_minWidth'
    // TODO: Method 'get_minWidth'
    // TODO: Method 'put_maxWidth'
    // TODO: Method 'get_maxWidth'
};
// --------------------------------------------------------
// Type: IHTMLRuleStyle6
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLRuleStyle6 = *opaque{
    // TODO: Method 'put_content'
    // TODO: Method 'get_content'
    // TODO: Method 'put_captionSide'
    // TODO: Method 'get_captionSide'
    // TODO: Method 'put_counterIncrement'
    // TODO: Method 'get_counterIncrement'
    // TODO: Method 'put_counterReset'
    // TODO: Method 'get_counterReset'
    // TODO: Method 'put_outline'
    // TODO: Method 'get_outline'
    // TODO: Method 'put_outlineWidth'
    // TODO: Method 'get_outlineWidth'
    // TODO: Method 'put_outlineStyle'
    // TODO: Method 'get_outlineStyle'
    // TODO: Method 'put_outlineColor'
    // TODO: Method 'get_outlineColor'
    // TODO: Method 'put_boxSizing'
    // TODO: Method 'get_boxSizing'
    // TODO: Method 'put_borderSpacing'
    // TODO: Method 'get_borderSpacing'
    // TODO: Method 'put_orphans'
    // TODO: Method 'get_orphans'
    // TODO: Method 'put_widows'
    // TODO: Method 'get_widows'
    // TODO: Method 'put_pageBreakInside'
    // TODO: Method 'get_pageBreakInside'
    // TODO: Method 'put_emptyCells'
    // TODO: Method 'get_emptyCells'
    // TODO: Method 'put_msBlockProgression'
    // TODO: Method 'get_msBlockProgression'
    // TODO: Method 'put_quotes'
    // TODO: Method 'get_quotes'
};
// --------------------------------------------------------
// Type: DispHTMLStyle
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLStyle = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLRuleStyle
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLRuleStyle = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLStyleSheetRulesCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLStyleSheetRulesCollection = *opaque{
    // TODO: Method 'get_length'
    // TODO: Method 'item'
};
// --------------------------------------------------------
// Type: IHTMLStyleSheet
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLStyleSheet = *opaque{
    // TODO: Method 'put_title'
    // TODO: Method 'get_title'
    // TODO: Method 'get_parentStyleSheet'
    // TODO: Method 'get_owningElement'
    // TODO: Method 'put_disabled'
    // TODO: Method 'get_disabled'
    // TODO: Method 'get_readOnly'
    // TODO: Method 'get_imports'
    // TODO: Method 'put_href'
    // TODO: Method 'get_href'
    // TODO: Method 'get_type'
    // TODO: Method 'get_id'
    // TODO: Method 'addImport'
    // TODO: Method 'addRule'
    // TODO: Method 'removeImport'
    // TODO: Method 'removeRule'
    // TODO: Method 'put_media'
    // TODO: Method 'get_media'
    // TODO: Method 'put_cssText'
    // TODO: Method 'get_cssText'
    // TODO: Method 'get_rules'
};
// --------------------------------------------------------
// Type: IHTMLCSSRule
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLCSSRule = *opaque{
    // TODO: Method 'get_type'
    // TODO: Method 'put_cssText'
    // TODO: Method 'get_cssText'
    // TODO: Method 'get_parentRule'
    // TODO: Method 'get_parentStyleSheet'
};
// --------------------------------------------------------
// Type: IHTMLCSSImportRule
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLCSSImportRule = *opaque{
    // TODO: Method 'get_href'
    // TODO: Method 'put_media'
    // TODO: Method 'get_media'
    // TODO: Method 'get_styleSheet'
};
// --------------------------------------------------------
// Type: IHTMLCSSMediaRule
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLCSSMediaRule = *opaque{
    // TODO: Method 'put_media'
    // TODO: Method 'get_media'
    // TODO: Method 'get_cssRules'
    // TODO: Method 'insertRule'
    // TODO: Method 'deleteRule'
};
// --------------------------------------------------------
// Type: IHTMLCSSMediaList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLCSSMediaList = *opaque{
    // TODO: Method 'put_mediaText'
    // TODO: Method 'get_mediaText'
    // TODO: Method 'get_length'
    // TODO: Method 'item'
    // TODO: Method 'appendMedium'
    // TODO: Method 'deleteMedium'
};
// --------------------------------------------------------
// Type: IHTMLCSSNamespaceRule
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLCSSNamespaceRule = *opaque{
    // TODO: Method 'get_namespaceURI'
    // TODO: Method 'get_prefix'
};
// --------------------------------------------------------
// Type: IHTMLMSCSSKeyframeRule
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLMSCSSKeyframeRule = *opaque{
    // TODO: Method 'put_keyText'
    // TODO: Method 'get_keyText'
    // TODO: Method 'get_style'
};
// --------------------------------------------------------
// Type: IHTMLMSCSSKeyframesRule
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLMSCSSKeyframesRule = *opaque{
    // TODO: Method 'put_name'
    // TODO: Method 'get_name'
    // TODO: Method 'get_cssRules'
    // TODO: Method 'appendRule'
    // TODO: Method 'deleteRule'
    // TODO: Method 'findRule'
};
// --------------------------------------------------------
// Type: DispHTMLCSSRule
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLCSSRule = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLCSSImportRule
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLCSSImportRule = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLCSSMediaRule
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLCSSMediaRule = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLCSSMediaList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLCSSMediaList = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLCSSNamespaceRule
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLCSSNamespaceRule = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLMSCSSKeyframeRule
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLMSCSSKeyframeRule = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLMSCSSKeyframesRule
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLMSCSSKeyframesRule = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLRenderStyle
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLRenderStyle = *opaque{
    // TODO: Method 'put_textLineThroughStyle'
    // TODO: Method 'get_textLineThroughStyle'
    // TODO: Method 'put_textUnderlineStyle'
    // TODO: Method 'get_textUnderlineStyle'
    // TODO: Method 'put_textEffect'
    // TODO: Method 'get_textEffect'
    // TODO: Method 'put_textColor'
    // TODO: Method 'get_textColor'
    // TODO: Method 'put_textBackgroundColor'
    // TODO: Method 'get_textBackgroundColor'
    // TODO: Method 'put_textDecorationColor'
    // TODO: Method 'get_textDecorationColor'
    // TODO: Method 'put_renderingPriority'
    // TODO: Method 'get_renderingPriority'
    // TODO: Method 'put_defaultTextSelection'
    // TODO: Method 'get_defaultTextSelection'
    // TODO: Method 'put_textDecoration'
    // TODO: Method 'get_textDecoration'
};
// --------------------------------------------------------
// Type: DispHTMLRenderStyle
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLRenderStyle = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLCurrentStyle
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLCurrentStyle = *opaque{
    // TODO: Method 'get_position'
    // TODO: Method 'get_styleFloat'
    // TODO: Method 'get_color'
    // TODO: Method 'get_backgroundColor'
    // TODO: Method 'get_fontFamily'
    // TODO: Method 'get_fontStyle'
    // TODO: Method 'get_fontVariant'
    // TODO: Method 'get_fontWeight'
    // TODO: Method 'get_fontSize'
    // TODO: Method 'get_backgroundImage'
    // TODO: Method 'get_backgroundPositionX'
    // TODO: Method 'get_backgroundPositionY'
    // TODO: Method 'get_backgroundRepeat'
    // TODO: Method 'get_borderLeftColor'
    // TODO: Method 'get_borderTopColor'
    // TODO: Method 'get_borderRightColor'
    // TODO: Method 'get_borderBottomColor'
    // TODO: Method 'get_borderTopStyle'
    // TODO: Method 'get_borderRightStyle'
    // TODO: Method 'get_borderBottomStyle'
    // TODO: Method 'get_borderLeftStyle'
    // TODO: Method 'get_borderTopWidth'
    // TODO: Method 'get_borderRightWidth'
    // TODO: Method 'get_borderBottomWidth'
    // TODO: Method 'get_borderLeftWidth'
    // TODO: Method 'get_left'
    // TODO: Method 'get_top'
    // TODO: Method 'get_width'
    // TODO: Method 'get_height'
    // TODO: Method 'get_paddingLeft'
    // TODO: Method 'get_paddingTop'
    // TODO: Method 'get_paddingRight'
    // TODO: Method 'get_paddingBottom'
    // TODO: Method 'get_textAlign'
    // TODO: Method 'get_textDecoration'
    // TODO: Method 'get_display'
    // TODO: Method 'get_visibility'
    // TODO: Method 'get_zIndex'
    // TODO: Method 'get_letterSpacing'
    // TODO: Method 'get_lineHeight'
    // TODO: Method 'get_textIndent'
    // TODO: Method 'get_verticalAlign'
    // TODO: Method 'get_backgroundAttachment'
    // TODO: Method 'get_marginTop'
    // TODO: Method 'get_marginRight'
    // TODO: Method 'get_marginBottom'
    // TODO: Method 'get_marginLeft'
    // TODO: Method 'get_clear'
    // TODO: Method 'get_listStyleType'
    // TODO: Method 'get_listStylePosition'
    // TODO: Method 'get_listStyleImage'
    // TODO: Method 'get_clipTop'
    // TODO: Method 'get_clipRight'
    // TODO: Method 'get_clipBottom'
    // TODO: Method 'get_clipLeft'
    // TODO: Method 'get_overflow'
    // TODO: Method 'get_pageBreakBefore'
    // TODO: Method 'get_pageBreakAfter'
    // TODO: Method 'get_cursor'
    // TODO: Method 'get_tableLayout'
    // TODO: Method 'get_borderCollapse'
    // TODO: Method 'get_direction'
    // TODO: Method 'get_behavior'
    // TODO: Method 'getAttribute'
    // TODO: Method 'get_unicodeBidi'
    // TODO: Method 'get_right'
    // TODO: Method 'get_bottom'
    // TODO: Method 'get_imeMode'
    // TODO: Method 'get_rubyAlign'
    // TODO: Method 'get_rubyPosition'
    // TODO: Method 'get_rubyOverhang'
    // TODO: Method 'get_textAutospace'
    // TODO: Method 'get_lineBreak'
    // TODO: Method 'get_wordBreak'
    // TODO: Method 'get_textJustify'
    // TODO: Method 'get_textJustifyTrim'
    // TODO: Method 'get_textKashida'
    // TODO: Method 'get_blockDirection'
    // TODO: Method 'get_layoutGridChar'
    // TODO: Method 'get_layoutGridLine'
    // TODO: Method 'get_layoutGridMode'
    // TODO: Method 'get_layoutGridType'
    // TODO: Method 'get_borderStyle'
    // TODO: Method 'get_borderColor'
    // TODO: Method 'get_borderWidth'
    // TODO: Method 'get_padding'
    // TODO: Method 'get_margin'
    // TODO: Method 'get_accelerator'
    // TODO: Method 'get_overflowX'
    // TODO: Method 'get_overflowY'
    // TODO: Method 'get_textTransform'
};
// --------------------------------------------------------
// Type: IHTMLCurrentStyle2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLCurrentStyle2 = *opaque{
    // TODO: Method 'get_layoutFlow'
    // TODO: Method 'get_wordWrap'
    // TODO: Method 'get_textUnderlinePosition'
    // TODO: Method 'get_hasLayout'
    // TODO: Method 'get_scrollbarBaseColor'
    // TODO: Method 'get_scrollbarFaceColor'
    // TODO: Method 'get_scrollbar3dLightColor'
    // TODO: Method 'get_scrollbarShadowColor'
    // TODO: Method 'get_scrollbarHighlightColor'
    // TODO: Method 'get_scrollbarDarkShadowColor'
    // TODO: Method 'get_scrollbarArrowColor'
    // TODO: Method 'get_scrollbarTrackColor'
    // TODO: Method 'get_writingMode'
    // TODO: Method 'get_zoom'
    // TODO: Method 'get_filter'
    // TODO: Method 'get_textAlignLast'
    // TODO: Method 'get_textKashidaSpace'
    // TODO: Method 'get_isBlock'
};
// --------------------------------------------------------
// Type: IHTMLCurrentStyle3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLCurrentStyle3 = *opaque{
    // TODO: Method 'get_textOverflow'
    // TODO: Method 'get_minHeight'
    // TODO: Method 'get_wordSpacing'
    // TODO: Method 'get_whiteSpace'
};
// --------------------------------------------------------
// Type: IHTMLCurrentStyle4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLCurrentStyle4 = *opaque{
    // TODO: Method 'get_msInterpolationMode'
    // TODO: Method 'get_maxHeight'
    // TODO: Method 'get_minWidth'
    // TODO: Method 'get_maxWidth'
};
// --------------------------------------------------------
// Type: IHTMLCurrentStyle5
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLCurrentStyle5 = *opaque{
    // TODO: Method 'get_captionSide'
    // TODO: Method 'get_outline'
    // TODO: Method 'get_outlineWidth'
    // TODO: Method 'get_outlineStyle'
    // TODO: Method 'get_outlineColor'
    // TODO: Method 'get_boxSizing'
    // TODO: Method 'get_borderSpacing'
    // TODO: Method 'get_orphans'
    // TODO: Method 'get_widows'
    // TODO: Method 'get_pageBreakInside'
    // TODO: Method 'get_emptyCells'
    // TODO: Method 'get_msBlockProgression'
    // TODO: Method 'get_quotes'
};
// --------------------------------------------------------
// Type: DispHTMLCurrentStyle
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLCurrentStyle = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLElement = *opaque{
    // TODO: Method 'setAttribute'
    // TODO: Method 'getAttribute'
    // TODO: Method 'removeAttribute'
    // TODO: Method 'put_className'
    // TODO: Method 'get_className'
    // TODO: Method 'put_id'
    // TODO: Method 'get_id'
    // TODO: Method 'get_tagName'
    // TODO: Method 'get_parentElement'
    // TODO: Method 'get_style'
    // TODO: Method 'put_onhelp'
    // TODO: Method 'get_onhelp'
    // TODO: Method 'put_onclick'
    // TODO: Method 'get_onclick'
    // TODO: Method 'put_ondblclick'
    // TODO: Method 'get_ondblclick'
    // TODO: Method 'put_onkeydown'
    // TODO: Method 'get_onkeydown'
    // TODO: Method 'put_onkeyup'
    // TODO: Method 'get_onkeyup'
    // TODO: Method 'put_onkeypress'
    // TODO: Method 'get_onkeypress'
    // TODO: Method 'put_onmouseout'
    // TODO: Method 'get_onmouseout'
    // TODO: Method 'put_onmouseover'
    // TODO: Method 'get_onmouseover'
    // TODO: Method 'put_onmousemove'
    // TODO: Method 'get_onmousemove'
    // TODO: Method 'put_onmousedown'
    // TODO: Method 'get_onmousedown'
    // TODO: Method 'put_onmouseup'
    // TODO: Method 'get_onmouseup'
    // TODO: Method 'get_document'
    // TODO: Method 'put_title'
    // TODO: Method 'get_title'
    // TODO: Method 'put_language'
    // TODO: Method 'get_language'
    // TODO: Method 'put_onselectstart'
    // TODO: Method 'get_onselectstart'
    // TODO: Method 'scrollIntoView'
    // TODO: Method 'contains'
    // TODO: Method 'get_sourceIndex'
    // TODO: Method 'get_recordNumber'
    // TODO: Method 'put_lang'
    // TODO: Method 'get_lang'
    // TODO: Method 'get_offsetLeft'
    // TODO: Method 'get_offsetTop'
    // TODO: Method 'get_offsetWidth'
    // TODO: Method 'get_offsetHeight'
    // TODO: Method 'get_offsetParent'
    // TODO: Method 'put_innerHTML'
    // TODO: Method 'get_innerHTML'
    // TODO: Method 'put_innerText'
    // TODO: Method 'get_innerText'
    // TODO: Method 'put_outerHTML'
    // TODO: Method 'get_outerHTML'
    // TODO: Method 'put_outerText'
    // TODO: Method 'get_outerText'
    // TODO: Method 'insertAdjacentHTML'
    // TODO: Method 'insertAdjacentText'
    // TODO: Method 'get_parentTextEdit'
    // TODO: Method 'get_isTextEdit'
    // TODO: Method 'click'
    // TODO: Method 'get_filters'
    // TODO: Method 'put_ondragstart'
    // TODO: Method 'get_ondragstart'
    // TODO: Method 'toString'
    // TODO: Method 'put_onbeforeupdate'
    // TODO: Method 'get_onbeforeupdate'
    // TODO: Method 'put_onafterupdate'
    // TODO: Method 'get_onafterupdate'
    // TODO: Method 'put_onerrorupdate'
    // TODO: Method 'get_onerrorupdate'
    // TODO: Method 'put_onrowexit'
    // TODO: Method 'get_onrowexit'
    // TODO: Method 'put_onrowenter'
    // TODO: Method 'get_onrowenter'
    // TODO: Method 'put_ondatasetchanged'
    // TODO: Method 'get_ondatasetchanged'
    // TODO: Method 'put_ondataavailable'
    // TODO: Method 'get_ondataavailable'
    // TODO: Method 'put_ondatasetcomplete'
    // TODO: Method 'get_ondatasetcomplete'
    // TODO: Method 'put_onfilterchange'
    // TODO: Method 'get_onfilterchange'
    // TODO: Method 'get_children'
    // TODO: Method 'get_all'
};
// --------------------------------------------------------
// Type: IHTMLRect
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLRect = *opaque{
    // TODO: Method 'put_left'
    // TODO: Method 'get_left'
    // TODO: Method 'put_top'
    // TODO: Method 'get_top'
    // TODO: Method 'put_right'
    // TODO: Method 'get_right'
    // TODO: Method 'put_bottom'
    // TODO: Method 'get_bottom'
};
// --------------------------------------------------------
// Type: IHTMLRect2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLRect2 = *opaque{
    // TODO: Method 'get_width'
    // TODO: Method 'get_height'
};
// --------------------------------------------------------
// Type: IHTMLRectCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLRectCollection = *opaque{
    // TODO: Method 'get_length'
    // TODO: Method 'get__newEnum'
    // TODO: Method 'item'
};
// --------------------------------------------------------
// Type: IHTMLElementCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLElementCollection = *opaque{
    // TODO: Method 'toString'
    // TODO: Method 'put_length'
    // TODO: Method 'get_length'
    // TODO: Method 'get__newEnum'
    // TODO: Method 'item'
    // TODO: Method 'tags'
};
// --------------------------------------------------------
// Type: IHTMLElement2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLElement2 = *opaque{
    // TODO: Method 'get_scopeName'
    // TODO: Method 'setCapture'
    // TODO: Method 'releaseCapture'
    // TODO: Method 'put_onlosecapture'
    // TODO: Method 'get_onlosecapture'
    // TODO: Method 'componentFromPoint'
    // TODO: Method 'doScroll'
    // TODO: Method 'put_onscroll'
    // TODO: Method 'get_onscroll'
    // TODO: Method 'put_ondrag'
    // TODO: Method 'get_ondrag'
    // TODO: Method 'put_ondragend'
    // TODO: Method 'get_ondragend'
    // TODO: Method 'put_ondragenter'
    // TODO: Method 'get_ondragenter'
    // TODO: Method 'put_ondragover'
    // TODO: Method 'get_ondragover'
    // TODO: Method 'put_ondragleave'
    // TODO: Method 'get_ondragleave'
    // TODO: Method 'put_ondrop'
    // TODO: Method 'get_ondrop'
    // TODO: Method 'put_onbeforecut'
    // TODO: Method 'get_onbeforecut'
    // TODO: Method 'put_oncut'
    // TODO: Method 'get_oncut'
    // TODO: Method 'put_onbeforecopy'
    // TODO: Method 'get_onbeforecopy'
    // TODO: Method 'put_oncopy'
    // TODO: Method 'get_oncopy'
    // TODO: Method 'put_onbeforepaste'
    // TODO: Method 'get_onbeforepaste'
    // TODO: Method 'put_onpaste'
    // TODO: Method 'get_onpaste'
    // TODO: Method 'get_currentStyle'
    // TODO: Method 'put_onpropertychange'
    // TODO: Method 'get_onpropertychange'
    // TODO: Method 'getClientRects'
    // TODO: Method 'getBoundingClientRect'
    // TODO: Method 'setExpression'
    // TODO: Method 'getExpression'
    // TODO: Method 'removeExpression'
    // TODO: Method 'put_tabIndex'
    // TODO: Method 'get_tabIndex'
    // TODO: Method 'focus'
    // TODO: Method 'put_accessKey'
    // TODO: Method 'get_accessKey'
    // TODO: Method 'put_onblur'
    // TODO: Method 'get_onblur'
    // TODO: Method 'put_onfocus'
    // TODO: Method 'get_onfocus'
    // TODO: Method 'put_onresize'
    // TODO: Method 'get_onresize'
    // TODO: Method 'blur'
    // TODO: Method 'addFilter'
    // TODO: Method 'removeFilter'
    // TODO: Method 'get_clientHeight'
    // TODO: Method 'get_clientWidth'
    // TODO: Method 'get_clientTop'
    // TODO: Method 'get_clientLeft'
    // TODO: Method 'attachEvent'
    // TODO: Method 'detachEvent'
    // TODO: Method 'get_readyState'
    // TODO: Method 'put_onreadystatechange'
    // TODO: Method 'get_onreadystatechange'
    // TODO: Method 'put_onrowsdelete'
    // TODO: Method 'get_onrowsdelete'
    // TODO: Method 'put_onrowsinserted'
    // TODO: Method 'get_onrowsinserted'
    // TODO: Method 'put_oncellchange'
    // TODO: Method 'get_oncellchange'
    // TODO: Method 'put_dir'
    // TODO: Method 'get_dir'
    // TODO: Method 'createControlRange'
    // TODO: Method 'get_scrollHeight'
    // TODO: Method 'get_scrollWidth'
    // TODO: Method 'put_scrollTop'
    // TODO: Method 'get_scrollTop'
    // TODO: Method 'put_scrollLeft'
    // TODO: Method 'get_scrollLeft'
    // TODO: Method 'clearAttributes'
    // TODO: Method 'mergeAttributes'
    // TODO: Method 'put_oncontextmenu'
    // TODO: Method 'get_oncontextmenu'
    // TODO: Method 'insertAdjacentElement'
    // TODO: Method 'applyElement'
    // TODO: Method 'getAdjacentText'
    // TODO: Method 'replaceAdjacentText'
    // TODO: Method 'get_canHaveChildren'
    // TODO: Method 'addBehavior'
    // TODO: Method 'removeBehavior'
    // TODO: Method 'get_runtimeStyle'
    // TODO: Method 'get_behaviorUrns'
    // TODO: Method 'put_tagUrn'
    // TODO: Method 'get_tagUrn'
    // TODO: Method 'put_onbeforeeditfocus'
    // TODO: Method 'get_onbeforeeditfocus'
    // TODO: Method 'get_readyStateValue'
    // TODO: Method 'getElementsByTagName'
};
// --------------------------------------------------------
// Type: IHTMLAttributeCollection3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLAttributeCollection3 = *opaque{
    // TODO: Method 'getNamedItem'
    // TODO: Method 'setNamedItem'
    // TODO: Method 'removeNamedItem'
    // TODO: Method 'item'
    // TODO: Method 'get_length'
};
// --------------------------------------------------------
// Type: IDOMDocumentType
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDOMDocumentType = *opaque{
    // TODO: Method 'get_name'
    // TODO: Method 'get_entities'
    // TODO: Method 'get_notations'
    // TODO: Method 'get_publicId'
    // TODO: Method 'get_systemId'
    // TODO: Method 'get_internalSubset'
};
// --------------------------------------------------------
// Type: IHTMLDocument7
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDocument7 = *opaque{
    // TODO: Method 'get_defaultView'
    // TODO: Method 'createCDATASection'
    // TODO: Method 'getSelection'
    // TODO: Method 'getElementsByTagNameNS'
    // TODO: Method 'createElementNS'
    // TODO: Method 'createAttributeNS'
    // TODO: Method 'put_onmsthumbnailclick'
    // TODO: Method 'get_onmsthumbnailclick'
    // TODO: Method 'get_characterSet'
    // TODO: Method 'createElement'
    // TODO: Method 'createAttribute'
    // TODO: Method 'getElementsByClassName'
    // TODO: Method 'createProcessingInstruction'
    // TODO: Method 'adoptNode'
    // TODO: Method 'put_onmssitemodejumplistitemremoved'
    // TODO: Method 'get_onmssitemodejumplistitemremoved'
    // TODO: Method 'get_all'
    // TODO: Method 'get_inputEncoding'
    // TODO: Method 'get_xmlEncoding'
    // TODO: Method 'put_xmlStandalone'
    // TODO: Method 'get_xmlStandalone'
    // TODO: Method 'put_xmlVersion'
    // TODO: Method 'get_xmlVersion'
    // TODO: Method 'hasAttributes'
    // TODO: Method 'put_onabort'
    // TODO: Method 'get_onabort'
    // TODO: Method 'put_onblur'
    // TODO: Method 'get_onblur'
    // TODO: Method 'put_oncanplay'
    // TODO: Method 'get_oncanplay'
    // TODO: Method 'put_oncanplaythrough'
    // TODO: Method 'get_oncanplaythrough'
    // TODO: Method 'put_onchange'
    // TODO: Method 'get_onchange'
    // TODO: Method 'put_ondrag'
    // TODO: Method 'get_ondrag'
    // TODO: Method 'put_ondragend'
    // TODO: Method 'get_ondragend'
    // TODO: Method 'put_ondragenter'
    // TODO: Method 'get_ondragenter'
    // TODO: Method 'put_ondragleave'
    // TODO: Method 'get_ondragleave'
    // TODO: Method 'put_ondragover'
    // TODO: Method 'get_ondragover'
    // TODO: Method 'put_ondrop'
    // TODO: Method 'get_ondrop'
    // TODO: Method 'put_ondurationchange'
    // TODO: Method 'get_ondurationchange'
    // TODO: Method 'put_onemptied'
    // TODO: Method 'get_onemptied'
    // TODO: Method 'put_onended'
    // TODO: Method 'get_onended'
    // TODO: Method 'put_onerror'
    // TODO: Method 'get_onerror'
    // TODO: Method 'put_onfocus'
    // TODO: Method 'get_onfocus'
    // TODO: Method 'put_oninput'
    // TODO: Method 'get_oninput'
    // TODO: Method 'put_onload'
    // TODO: Method 'get_onload'
    // TODO: Method 'put_onloadeddata'
    // TODO: Method 'get_onloadeddata'
    // TODO: Method 'put_onloadedmetadata'
    // TODO: Method 'get_onloadedmetadata'
    // TODO: Method 'put_onloadstart'
    // TODO: Method 'get_onloadstart'
    // TODO: Method 'put_onpause'
    // TODO: Method 'get_onpause'
    // TODO: Method 'put_onplay'
    // TODO: Method 'get_onplay'
    // TODO: Method 'put_onplaying'
    // TODO: Method 'get_onplaying'
    // TODO: Method 'put_onprogress'
    // TODO: Method 'get_onprogress'
    // TODO: Method 'put_onratechange'
    // TODO: Method 'get_onratechange'
    // TODO: Method 'put_onreset'
    // TODO: Method 'get_onreset'
    // TODO: Method 'put_onscroll'
    // TODO: Method 'get_onscroll'
    // TODO: Method 'put_onseeked'
    // TODO: Method 'get_onseeked'
    // TODO: Method 'put_onseeking'
    // TODO: Method 'get_onseeking'
    // TODO: Method 'put_onselect'
    // TODO: Method 'get_onselect'
    // TODO: Method 'put_onstalled'
    // TODO: Method 'get_onstalled'
    // TODO: Method 'put_onsubmit'
    // TODO: Method 'get_onsubmit'
    // TODO: Method 'put_onsuspend'
    // TODO: Method 'get_onsuspend'
    // TODO: Method 'put_ontimeupdate'
    // TODO: Method 'get_ontimeupdate'
    // TODO: Method 'put_onvolumechange'
    // TODO: Method 'get_onvolumechange'
    // TODO: Method 'put_onwaiting'
    // TODO: Method 'get_onwaiting'
    // TODO: Method 'normalize'
    // TODO: Method 'importNode'
    // TODO: Method 'get_parentWindow'
    // TODO: Method 'putref_body'
    // TODO: Method 'get_body'
    // TODO: Method 'get_head'
};
// --------------------------------------------------------
// Type: IHTMLDOMNode
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDOMNode = *opaque{
    // TODO: Method 'get_nodeType'
    // TODO: Method 'get_parentNode'
    // TODO: Method 'hasChildNodes'
    // TODO: Method 'get_childNodes'
    // TODO: Method 'get_attributes'
    // TODO: Method 'insertBefore'
    // TODO: Method 'removeChild'
    // TODO: Method 'replaceChild'
    // TODO: Method 'cloneNode'
    // TODO: Method 'removeNode'
    // TODO: Method 'swapNode'
    // TODO: Method 'replaceNode'
    // TODO: Method 'appendChild'
    // TODO: Method 'get_nodeName'
    // TODO: Method 'put_nodeValue'
    // TODO: Method 'get_nodeValue'
    // TODO: Method 'get_firstChild'
    // TODO: Method 'get_lastChild'
    // TODO: Method 'get_previousSibling'
    // TODO: Method 'get_nextSibling'
};
// --------------------------------------------------------
// Type: IHTMLDOMNode2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDOMNode2 = *opaque{
    // TODO: Method 'get_ownerDocument'
};
// --------------------------------------------------------
// Type: IHTMLDOMNode3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDOMNode3 = *opaque{
    // TODO: Method 'put_prefix'
    // TODO: Method 'get_prefix'
    // TODO: Method 'get_localName'
    // TODO: Method 'get_namespaceURI'
    // TODO: Method 'put_textContent'
    // TODO: Method 'get_textContent'
    // TODO: Method 'isEqualNode'
    // TODO: Method 'lookupNamespaceURI'
    // TODO: Method 'lookupPrefix'
    // TODO: Method 'isDefaultNamespace'
    // TODO: Method 'appendChild'
    // TODO: Method 'insertBefore'
    // TODO: Method 'removeChild'
    // TODO: Method 'replaceChild'
    // TODO: Method 'isSameNode'
    // TODO: Method 'compareDocumentPosition'
    // TODO: Method 'isSupported'
};
// --------------------------------------------------------
// Type: IHTMLDOMAttribute
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDOMAttribute = *opaque{
    // TODO: Method 'get_nodeName'
    // TODO: Method 'put_nodeValue'
    // TODO: Method 'get_nodeValue'
    // TODO: Method 'get_specified'
};
// --------------------------------------------------------
// Type: IHTMLDOMAttribute2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDOMAttribute2 = *opaque{
    // TODO: Method 'get_name'
    // TODO: Method 'put_value'
    // TODO: Method 'get_value'
    // TODO: Method 'get_expando'
    // TODO: Method 'get_nodeType'
    // TODO: Method 'get_parentNode'
    // TODO: Method 'get_childNodes'
    // TODO: Method 'get_firstChild'
    // TODO: Method 'get_lastChild'
    // TODO: Method 'get_previousSibling'
    // TODO: Method 'get_nextSibling'
    // TODO: Method 'get_attributes'
    // TODO: Method 'get_ownerDocument'
    // TODO: Method 'insertBefore'
    // TODO: Method 'replaceChild'
    // TODO: Method 'removeChild'
    // TODO: Method 'appendChild'
    // TODO: Method 'hasChildNodes'
    // TODO: Method 'cloneNode'
};
// --------------------------------------------------------
// Type: IHTMLDOMAttribute3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDOMAttribute3 = *opaque{
    // TODO: Method 'put_nodeValue'
    // TODO: Method 'get_nodeValue'
    // TODO: Method 'put_value'
    // TODO: Method 'get_value'
    // TODO: Method 'get_specified'
    // TODO: Method 'get_ownerElement'
};
// --------------------------------------------------------
// Type: IHTMLDOMAttribute4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDOMAttribute4 = *opaque{
    // TODO: Method 'put_nodeValue'
    // TODO: Method 'get_nodeValue'
    // TODO: Method 'get_nodeName'
    // TODO: Method 'get_name'
    // TODO: Method 'put_value'
    // TODO: Method 'get_value'
    // TODO: Method 'get_firstChild'
    // TODO: Method 'get_lastChild'
    // TODO: Method 'get_childNodes'
    // TODO: Method 'hasAttributes'
    // TODO: Method 'hasChildNodes'
    // TODO: Method 'normalize'
    // TODO: Method 'get_specified'
};
// --------------------------------------------------------
// Type: IHTMLDOMTextNode
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDOMTextNode = *opaque{
    // TODO: Method 'put_data'
    // TODO: Method 'get_data'
    // TODO: Method 'toString'
    // TODO: Method 'get_length'
    // TODO: Method 'splitText'
};
// --------------------------------------------------------
// Type: IHTMLDOMTextNode2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDOMTextNode2 = *opaque{
    // TODO: Method 'substringData'
    // TODO: Method 'appendData'
    // TODO: Method 'insertData'
    // TODO: Method 'deleteData'
    // TODO: Method 'replaceData'
};
// --------------------------------------------------------
// Type: IHTMLDOMTextNode3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDOMTextNode3 = *opaque{
    // TODO: Method 'substringData'
    // TODO: Method 'insertData'
    // TODO: Method 'deleteData'
    // TODO: Method 'replaceData'
    // TODO: Method 'splitText'
    // TODO: Method 'get_wholeText'
    // TODO: Method 'replaceWholeText'
    // TODO: Method 'hasAttributes'
    // TODO: Method 'normalize'
};
// --------------------------------------------------------
// Type: IHTMLDOMImplementation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDOMImplementation = *opaque{
    // TODO: Method 'hasFeature'
};
// --------------------------------------------------------
// Type: IHTMLDOMImplementation2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDOMImplementation2 = *opaque{
    // TODO: Method 'createDocumentType'
    // TODO: Method 'createDocument'
    // TODO: Method 'createHTMLDocument'
    // TODO: Method 'hasFeature'
};
// --------------------------------------------------------
// Type: DispHTMLDOMAttribute
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLDOMAttribute = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLDOMTextNode
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLDOMTextNode = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLDOMImplementation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLDOMImplementation = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLAttributeCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLAttributeCollection = *opaque{
    // TODO: Method 'get_length'
    // TODO: Method 'get__newEnum'
    // TODO: Method 'item'
};
// --------------------------------------------------------
// Type: IHTMLAttributeCollection2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLAttributeCollection2 = *opaque{
    // TODO: Method 'getNamedItem'
    // TODO: Method 'setNamedItem'
    // TODO: Method 'removeNamedItem'
};
// --------------------------------------------------------
// Type: IHTMLAttributeCollection4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLAttributeCollection4 = *opaque{
    // TODO: Method 'getNamedItemNS'
    // TODO: Method 'setNamedItemNS'
    // TODO: Method 'removeNamedItemNS'
    // TODO: Method 'getNamedItem'
    // TODO: Method 'setNamedItem'
    // TODO: Method 'removeNamedItem'
    // TODO: Method 'item'
    // TODO: Method 'get_length'
};
// --------------------------------------------------------
// Type: IHTMLDOMChildrenCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDOMChildrenCollection = *opaque{
    // TODO: Method 'get_length'
    // TODO: Method 'get__newEnum'
    // TODO: Method 'item'
};
// --------------------------------------------------------
// Type: IHTMLDOMChildrenCollection2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDOMChildrenCollection2 = *opaque{
    // TODO: Method 'item'
};
// --------------------------------------------------------
// Type: DispHTMLAttributeCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLAttributeCollection = *opaque{
};
// --------------------------------------------------------
// Type: DispStaticNodeList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispStaticNodeList = *opaque{
};
// --------------------------------------------------------
// Type: DispDOMChildrenCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispDOMChildrenCollection = *opaque{
};
// --------------------------------------------------------
// Type: HTMLElementEvents4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLElementEvents4 = *opaque{
};
// --------------------------------------------------------
// Type: HTMLElementEvents3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLElementEvents3 = *opaque{
};
// --------------------------------------------------------
// Type: HTMLElementEvents2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLElementEvents2 = *opaque{
};
// --------------------------------------------------------
// Type: HTMLElementEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLElementEvents = *opaque{
};
// --------------------------------------------------------
// Type: IRulesAppliedCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRulesAppliedCollection = *opaque{
    // TODO: Method 'item'
    // TODO: Method 'get_length'
    // TODO: Method 'get_element'
    // TODO: Method 'propertyInheritedFrom'
    // TODO: Method 'get_propertyCount'
    // TODO: Method 'property'
    // TODO: Method 'propertyInheritedTrace'
    // TODO: Method 'propertyInheritedTraceLength'
};
// --------------------------------------------------------
// Type: IHTMLElement3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLElement3 = *opaque{
    // TODO: Method 'mergeAttributes'
    // TODO: Method 'get_isMultiLine'
    // TODO: Method 'get_canHaveHTML'
    // TODO: Method 'put_onlayoutcomplete'
    // TODO: Method 'get_onlayoutcomplete'
    // TODO: Method 'put_onpage'
    // TODO: Method 'get_onpage'
    // TODO: Method 'put_inflateBlock'
    // TODO: Method 'get_inflateBlock'
    // TODO: Method 'put_onbeforedeactivate'
    // TODO: Method 'get_onbeforedeactivate'
    // TODO: Method 'setActive'
    // TODO: Method 'put_contentEditable'
    // TODO: Method 'get_contentEditable'
    // TODO: Method 'get_isContentEditable'
    // TODO: Method 'put_hideFocus'
    // TODO: Method 'get_hideFocus'
    // TODO: Method 'put_disabled'
    // TODO: Method 'get_disabled'
    // TODO: Method 'get_isDisabled'
    // TODO: Method 'put_onmove'
    // TODO: Method 'get_onmove'
    // TODO: Method 'put_oncontrolselect'
    // TODO: Method 'get_oncontrolselect'
    // TODO: Method 'fireEvent'
    // TODO: Method 'put_onresizestart'
    // TODO: Method 'get_onresizestart'
    // TODO: Method 'put_onresizeend'
    // TODO: Method 'get_onresizeend'
    // TODO: Method 'put_onmovestart'
    // TODO: Method 'get_onmovestart'
    // TODO: Method 'put_onmoveend'
    // TODO: Method 'get_onmoveend'
    // TODO: Method 'put_onmouseenter'
    // TODO: Method 'get_onmouseenter'
    // TODO: Method 'put_onmouseleave'
    // TODO: Method 'get_onmouseleave'
    // TODO: Method 'put_onactivate'
    // TODO: Method 'get_onactivate'
    // TODO: Method 'put_ondeactivate'
    // TODO: Method 'get_ondeactivate'
    // TODO: Method 'dragDrop'
    // TODO: Method 'get_glyphMode'
};
// --------------------------------------------------------
// Type: IHTMLElement4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLElement4 = *opaque{
    // TODO: Method 'put_onmousewheel'
    // TODO: Method 'get_onmousewheel'
    // TODO: Method 'normalize'
    // TODO: Method 'getAttributeNode'
    // TODO: Method 'setAttributeNode'
    // TODO: Method 'removeAttributeNode'
    // TODO: Method 'put_onbeforeactivate'
    // TODO: Method 'get_onbeforeactivate'
    // TODO: Method 'put_onfocusin'
    // TODO: Method 'get_onfocusin'
    // TODO: Method 'put_onfocusout'
    // TODO: Method 'get_onfocusout'
};
// --------------------------------------------------------
// Type: IElementSelector
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IElementSelector = *opaque{
    // TODO: Method 'querySelector'
    // TODO: Method 'querySelectorAll'
};
// --------------------------------------------------------
// Type: IHTMLElementRender
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLElementRender = *opaque{
    // TODO: Method 'DrawToDC'
    // TODO: Method 'SetDocumentPrinter'
};
// --------------------------------------------------------
// Type: IHTMLUniqueName
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLUniqueName = *opaque{
    // TODO: Method 'get_uniqueNumber'
    // TODO: Method 'get_uniqueID'
};
// --------------------------------------------------------
// Type: IHTMLElement5
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLElement5 = *opaque{
    // TODO: Method 'getAttributeNode'
    // TODO: Method 'setAttributeNode'
    // TODO: Method 'removeAttributeNode'
    // TODO: Method 'hasAttribute'
    // TODO: Method 'put_role'
    // TODO: Method 'get_role'
    // TODO: Method 'put_ariaBusy'
    // TODO: Method 'get_ariaBusy'
    // TODO: Method 'put_ariaChecked'
    // TODO: Method 'get_ariaChecked'
    // TODO: Method 'put_ariaDisabled'
    // TODO: Method 'get_ariaDisabled'
    // TODO: Method 'put_ariaExpanded'
    // TODO: Method 'get_ariaExpanded'
    // TODO: Method 'put_ariaHaspopup'
    // TODO: Method 'get_ariaHaspopup'
    // TODO: Method 'put_ariaHidden'
    // TODO: Method 'get_ariaHidden'
    // TODO: Method 'put_ariaInvalid'
    // TODO: Method 'get_ariaInvalid'
    // TODO: Method 'put_ariaMultiselectable'
    // TODO: Method 'get_ariaMultiselectable'
    // TODO: Method 'put_ariaPressed'
    // TODO: Method 'get_ariaPressed'
    // TODO: Method 'put_ariaReadonly'
    // TODO: Method 'get_ariaReadonly'
    // TODO: Method 'put_ariaRequired'
    // TODO: Method 'get_ariaRequired'
    // TODO: Method 'put_ariaSecret'
    // TODO: Method 'get_ariaSecret'
    // TODO: Method 'put_ariaSelected'
    // TODO: Method 'get_ariaSelected'
    // TODO: Method 'getAttribute'
    // TODO: Method 'setAttribute'
    // TODO: Method 'removeAttribute'
    // TODO: Method 'get_attributes'
    // TODO: Method 'put_ariaValuenow'
    // TODO: Method 'get_ariaValuenow'
    // TODO: Method 'put_ariaPosinset'
    // TODO: Method 'get_ariaPosinset'
    // TODO: Method 'put_ariaSetsize'
    // TODO: Method 'get_ariaSetsize'
    // TODO: Method 'put_ariaLevel'
    // TODO: Method 'get_ariaLevel'
    // TODO: Method 'put_ariaValuemin'
    // TODO: Method 'get_ariaValuemin'
    // TODO: Method 'put_ariaValuemax'
    // TODO: Method 'get_ariaValuemax'
    // TODO: Method 'put_ariaControls'
    // TODO: Method 'get_ariaControls'
    // TODO: Method 'put_ariaDescribedby'
    // TODO: Method 'get_ariaDescribedby'
    // TODO: Method 'put_ariaFlowto'
    // TODO: Method 'get_ariaFlowto'
    // TODO: Method 'put_ariaLabelledby'
    // TODO: Method 'get_ariaLabelledby'
    // TODO: Method 'put_ariaActivedescendant'
    // TODO: Method 'get_ariaActivedescendant'
    // TODO: Method 'put_ariaOwns'
    // TODO: Method 'get_ariaOwns'
    // TODO: Method 'hasAttributes'
    // TODO: Method 'put_ariaLive'
    // TODO: Method 'get_ariaLive'
    // TODO: Method 'put_ariaRelevant'
    // TODO: Method 'get_ariaRelevant'
};
// --------------------------------------------------------
// Type: IHTMLElement6
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLElement6 = *opaque{
    // TODO: Method 'getAttributeNS'
    // TODO: Method 'setAttributeNS'
    // TODO: Method 'removeAttributeNS'
    // TODO: Method 'getAttributeNodeNS'
    // TODO: Method 'setAttributeNodeNS'
    // TODO: Method 'hasAttributeNS'
    // TODO: Method 'getAttribute'
    // TODO: Method 'setAttribute'
    // TODO: Method 'removeAttribute'
    // TODO: Method 'getAttributeNode'
    // TODO: Method 'setAttributeNode'
    // TODO: Method 'removeAttributeNode'
    // TODO: Method 'hasAttribute'
    // TODO: Method 'getElementsByTagNameNS'
    // TODO: Method 'get_tagName'
    // TODO: Method 'get_nodeName'
    // TODO: Method 'getElementsByClassName'
    // TODO: Method 'msMatchesSelector'
    // TODO: Method 'put_onabort'
    // TODO: Method 'get_onabort'
    // TODO: Method 'put_oncanplay'
    // TODO: Method 'get_oncanplay'
    // TODO: Method 'put_oncanplaythrough'
    // TODO: Method 'get_oncanplaythrough'
    // TODO: Method 'put_onchange'
    // TODO: Method 'get_onchange'
    // TODO: Method 'put_ondurationchange'
    // TODO: Method 'get_ondurationchange'
    // TODO: Method 'put_onemptied'
    // TODO: Method 'get_onemptied'
    // TODO: Method 'put_onended'
    // TODO: Method 'get_onended'
    // TODO: Method 'put_onerror'
    // TODO: Method 'get_onerror'
    // TODO: Method 'put_oninput'
    // TODO: Method 'get_oninput'
    // TODO: Method 'put_onload'
    // TODO: Method 'get_onload'
    // TODO: Method 'put_onloadeddata'
    // TODO: Method 'get_onloadeddata'
    // TODO: Method 'put_onloadedmetadata'
    // TODO: Method 'get_onloadedmetadata'
    // TODO: Method 'put_onloadstart'
    // TODO: Method 'get_onloadstart'
    // TODO: Method 'put_onpause'
    // TODO: Method 'get_onpause'
    // TODO: Method 'put_onplay'
    // TODO: Method 'get_onplay'
    // TODO: Method 'put_onplaying'
    // TODO: Method 'get_onplaying'
    // TODO: Method 'put_onprogress'
    // TODO: Method 'get_onprogress'
    // TODO: Method 'put_onratechange'
    // TODO: Method 'get_onratechange'
    // TODO: Method 'put_onreset'
    // TODO: Method 'get_onreset'
    // TODO: Method 'put_onseeked'
    // TODO: Method 'get_onseeked'
    // TODO: Method 'put_onseeking'
    // TODO: Method 'get_onseeking'
    // TODO: Method 'put_onselect'
    // TODO: Method 'get_onselect'
    // TODO: Method 'put_onstalled'
    // TODO: Method 'get_onstalled'
    // TODO: Method 'put_onsubmit'
    // TODO: Method 'get_onsubmit'
    // TODO: Method 'put_onsuspend'
    // TODO: Method 'get_onsuspend'
    // TODO: Method 'put_ontimeupdate'
    // TODO: Method 'get_ontimeupdate'
    // TODO: Method 'put_onvolumechange'
    // TODO: Method 'get_onvolumechange'
    // TODO: Method 'put_onwaiting'
    // TODO: Method 'get_onwaiting'
    // TODO: Method 'hasAttributes'
};
// --------------------------------------------------------
// Type: IHTMLElement7
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLElement7 = *opaque{
    // TODO: Method 'put_onmspointerdown'
    // TODO: Method 'get_onmspointerdown'
    // TODO: Method 'put_onmspointermove'
    // TODO: Method 'get_onmspointermove'
    // TODO: Method 'put_onmspointerup'
    // TODO: Method 'get_onmspointerup'
    // TODO: Method 'put_onmspointerover'
    // TODO: Method 'get_onmspointerover'
    // TODO: Method 'put_onmspointerout'
    // TODO: Method 'get_onmspointerout'
    // TODO: Method 'put_onmspointercancel'
    // TODO: Method 'get_onmspointercancel'
    // TODO: Method 'put_onmspointerhover'
    // TODO: Method 'get_onmspointerhover'
    // TODO: Method 'put_onmslostpointercapture'
    // TODO: Method 'get_onmslostpointercapture'
    // TODO: Method 'put_onmsgotpointercapture'
    // TODO: Method 'get_onmsgotpointercapture'
    // TODO: Method 'put_onmsgesturestart'
    // TODO: Method 'get_onmsgesturestart'
    // TODO: Method 'put_onmsgesturechange'
    // TODO: Method 'get_onmsgesturechange'
    // TODO: Method 'put_onmsgestureend'
    // TODO: Method 'get_onmsgestureend'
    // TODO: Method 'put_onmsgesturehold'
    // TODO: Method 'get_onmsgesturehold'
    // TODO: Method 'put_onmsgesturetap'
    // TODO: Method 'get_onmsgesturetap'
    // TODO: Method 'put_onmsgesturedoubletap'
    // TODO: Method 'get_onmsgesturedoubletap'
    // TODO: Method 'put_onmsinertiastart'
    // TODO: Method 'get_onmsinertiastart'
    // TODO: Method 'msSetPointerCapture'
    // TODO: Method 'msReleasePointerCapture'
    // TODO: Method 'put_onmstransitionstart'
    // TODO: Method 'get_onmstransitionstart'
    // TODO: Method 'put_onmstransitionend'
    // TODO: Method 'get_onmstransitionend'
    // TODO: Method 'put_onmsanimationstart'
    // TODO: Method 'get_onmsanimationstart'
    // TODO: Method 'put_onmsanimationend'
    // TODO: Method 'get_onmsanimationend'
    // TODO: Method 'put_onmsanimationiteration'
    // TODO: Method 'get_onmsanimationiteration'
    // TODO: Method 'put_oninvalid'
    // TODO: Method 'get_oninvalid'
    // TODO: Method 'put_xmsAcceleratorKey'
    // TODO: Method 'get_xmsAcceleratorKey'
    // TODO: Method 'put_spellcheck'
    // TODO: Method 'get_spellcheck'
    // TODO: Method 'put_onmsmanipulationstatechanged'
    // TODO: Method 'get_onmsmanipulationstatechanged'
    // TODO: Method 'put_oncuechange'
    // TODO: Method 'get_oncuechange'
};
// --------------------------------------------------------
// Type: IHTMLElementAppliedStyles
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLElementAppliedStyles = *opaque{
    // TODO: Method 'msGetRulesApplied'
    // TODO: Method 'msGetRulesAppliedWithAncestor'
};
// --------------------------------------------------------
// Type: IElementTraversal
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IElementTraversal = *opaque{
    // TODO: Method 'get_firstElementChild'
    // TODO: Method 'get_lastElementChild'
    // TODO: Method 'get_previousElementSibling'
    // TODO: Method 'get_nextElementSibling'
    // TODO: Method 'get_childElementCount'
};
// --------------------------------------------------------
// Type: IHTMLDatabinding
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDatabinding = *opaque{
    // TODO: Method 'put_dataFld'
    // TODO: Method 'get_dataFld'
    // TODO: Method 'put_dataSrc'
    // TODO: Method 'get_dataSrc'
    // TODO: Method 'put_dataFormatAs'
    // TODO: Method 'get_dataFormatAs'
};
// --------------------------------------------------------
// Type: IHTMLDocument
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDocument = *opaque{
    // TODO: Method 'get_Script'
};
// --------------------------------------------------------
// Type: IHTMLElementDefaults
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLElementDefaults = *opaque{
    // TODO: Method 'get_style'
    // TODO: Method 'put_tabStop'
    // TODO: Method 'get_tabStop'
    // TODO: Method 'put_viewInheritStyle'
    // TODO: Method 'get_viewInheritStyle'
    // TODO: Method 'put_viewMasterTab'
    // TODO: Method 'get_viewMasterTab'
    // TODO: Method 'put_scrollSegmentX'
    // TODO: Method 'get_scrollSegmentX'
    // TODO: Method 'put_scrollSegmentY'
    // TODO: Method 'get_scrollSegmentY'
    // TODO: Method 'put_isMultiLine'
    // TODO: Method 'get_isMultiLine'
    // TODO: Method 'put_contentEditable'
    // TODO: Method 'get_contentEditable'
    // TODO: Method 'put_canHaveHTML'
    // TODO: Method 'get_canHaveHTML'
    // TODO: Method 'putref_viewLink'
    // TODO: Method 'get_viewLink'
    // TODO: Method 'put_frozen'
    // TODO: Method 'get_frozen'
};
// --------------------------------------------------------
// Type: DispHTMLDefaults
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLDefaults = *opaque{
};
// --------------------------------------------------------
// Type: IHTCDefaultDispatch
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTCDefaultDispatch = *opaque{
    // TODO: Method 'get_element'
    // TODO: Method 'createEventObject'
    // TODO: Method 'get_defaults'
    // TODO: Method 'get_document'
};
// --------------------------------------------------------
// Type: IHTCPropertyBehavior
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTCPropertyBehavior = *opaque{
    // TODO: Method 'fireChange'
    // TODO: Method 'put_value'
    // TODO: Method 'get_value'
};
// --------------------------------------------------------
// Type: IHTCMethodBehavior
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTCMethodBehavior = *opaque{
};
// --------------------------------------------------------
// Type: IHTCEventBehavior
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTCEventBehavior = *opaque{
    // TODO: Method 'fire'
};
// --------------------------------------------------------
// Type: IHTCAttachBehavior
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTCAttachBehavior = *opaque{
    // TODO: Method 'fireEvent'
    // TODO: Method 'detachEvent'
};
// --------------------------------------------------------
// Type: IHTCAttachBehavior2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTCAttachBehavior2 = *opaque{
    // TODO: Method 'fireEvent'
};
// --------------------------------------------------------
// Type: IHTCDescBehavior
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTCDescBehavior = *opaque{
    // TODO: Method 'get_urn'
    // TODO: Method 'get_name'
};
// --------------------------------------------------------
// Type: DispHTCDefaultDispatch
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTCDefaultDispatch = *opaque{
};
// --------------------------------------------------------
// Type: DispHTCPropertyBehavior
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTCPropertyBehavior = *opaque{
};
// --------------------------------------------------------
// Type: DispHTCMethodBehavior
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTCMethodBehavior = *opaque{
};
// --------------------------------------------------------
// Type: DispHTCEventBehavior
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTCEventBehavior = *opaque{
};
// --------------------------------------------------------
// Type: DispHTCAttachBehavior
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTCAttachBehavior = *opaque{
};
// --------------------------------------------------------
// Type: DispHTCDescBehavior
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTCDescBehavior = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLUrnCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLUrnCollection = *opaque{
    // TODO: Method 'get_length'
    // TODO: Method 'item'
};
// --------------------------------------------------------
// Type: DispHTMLUrnCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLUrnCollection = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLGenericElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLGenericElement = *opaque{
    // TODO: Method 'get_recordset'
    // TODO: Method 'namedRecordset'
};
// --------------------------------------------------------
// Type: DispHTMLGenericElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLGenericElement = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLStyleSheetRuleApplied
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLStyleSheetRuleApplied = *opaque{
    // TODO: Method 'get_msSpecificity'
    // TODO: Method 'msGetSpecificity'
};
// --------------------------------------------------------
// Type: IHTMLStyleSheetRule2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLStyleSheetRule2 = *opaque{
    // TODO: Method 'put_selectorText'
    // TODO: Method 'get_selectorText'
};
// --------------------------------------------------------
// Type: IHTMLStyleSheetRulesCollection2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLStyleSheetRulesCollection2 = *opaque{
    // TODO: Method 'get_length'
    // TODO: Method 'item'
};
// --------------------------------------------------------
// Type: DispHTMLStyleSheetRule
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLStyleSheetRule = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLStyleSheetRulesCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLStyleSheetRulesCollection = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLStyleSheetPage
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLStyleSheetPage = *opaque{
    // TODO: Method 'get_selector'
    // TODO: Method 'get_pseudoClass'
};
// --------------------------------------------------------
// Type: IHTMLStyleSheetPage2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLStyleSheetPage2 = *opaque{
    // TODO: Method 'put_selectorText'
    // TODO: Method 'get_selectorText'
    // TODO: Method 'get_style'
};
// --------------------------------------------------------
// Type: IHTMLStyleSheetPagesCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLStyleSheetPagesCollection = *opaque{
    // TODO: Method 'get_length'
    // TODO: Method 'item'
};
// --------------------------------------------------------
// Type: DispHTMLStyleSheetPage
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLStyleSheetPage = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLStyleSheetPagesCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLStyleSheetPagesCollection = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLStyleSheetsCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLStyleSheetsCollection = *opaque{
    // TODO: Method 'get_length'
    // TODO: Method 'get__newEnum'
    // TODO: Method 'item'
};
// --------------------------------------------------------
// Type: IHTMLStyleSheet2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLStyleSheet2 = *opaque{
    // TODO: Method 'get_pages'
    // TODO: Method 'addPageRule'
};
// --------------------------------------------------------
// Type: IHTMLStyleSheet3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLStyleSheet3 = *opaque{
    // TODO: Method 'put_href'
    // TODO: Method 'get_href'
    // TODO: Method 'get_isAlternate'
    // TODO: Method 'get_isPrefAlternate'
};
// --------------------------------------------------------
// Type: IHTMLStyleSheet4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLStyleSheet4 = *opaque{
    // TODO: Method 'get_type'
    // TODO: Method 'get_href'
    // TODO: Method 'get_title'
    // TODO: Method 'get_ownerNode'
    // TODO: Method 'get_ownerRule'
    // TODO: Method 'get_cssRules'
    // TODO: Method 'get_media'
    // TODO: Method 'insertRule'
    // TODO: Method 'deleteRule'
};
// --------------------------------------------------------
// Type: DispHTMLStyleSheet
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLStyleSheet = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLStyleSheetsCollection2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLStyleSheetsCollection2 = *opaque{
    // TODO: Method 'item'
};
// --------------------------------------------------------
// Type: DispHTMLStyleSheetsCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLStyleSheetsCollection = *opaque{
};
// --------------------------------------------------------
// Type: HTMLLinkElementEvents2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLLinkElementEvents2 = *opaque{
};
// --------------------------------------------------------
// Type: HTMLLinkElementEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLLinkElementEvents = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLLinkElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLLinkElement = *opaque{
    // TODO: Method 'put_href'
    // TODO: Method 'get_href'
    // TODO: Method 'put_rel'
    // TODO: Method 'get_rel'
    // TODO: Method 'put_rev'
    // TODO: Method 'get_rev'
    // TODO: Method 'put_type'
    // TODO: Method 'get_type'
    // TODO: Method 'get_readyState'
    // TODO: Method 'put_onreadystatechange'
    // TODO: Method 'get_onreadystatechange'
    // TODO: Method 'put_onload'
    // TODO: Method 'get_onload'
    // TODO: Method 'put_onerror'
    // TODO: Method 'get_onerror'
    // TODO: Method 'get_styleSheet'
    // TODO: Method 'put_disabled'
    // TODO: Method 'get_disabled'
    // TODO: Method 'put_media'
    // TODO: Method 'get_media'
};
// --------------------------------------------------------
// Type: IHTMLLinkElement2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLLinkElement2 = *opaque{
    // TODO: Method 'put_target'
    // TODO: Method 'get_target'
};
// --------------------------------------------------------
// Type: IHTMLLinkElement3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLLinkElement3 = *opaque{
    // TODO: Method 'put_charset'
    // TODO: Method 'get_charset'
    // TODO: Method 'put_hreflang'
    // TODO: Method 'get_hreflang'
};
// --------------------------------------------------------
// Type: IHTMLLinkElement4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLLinkElement4 = *opaque{
    // TODO: Method 'put_href'
    // TODO: Method 'get_href'
};
// --------------------------------------------------------
// Type: IHTMLLinkElement5
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLLinkElement5 = *opaque{
    // TODO: Method 'get_sheet'
};
// --------------------------------------------------------
// Type: DispHTMLLinkElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLLinkElement = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLTxtRange
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLTxtRange = *opaque{
    // TODO: Method 'get_htmlText'
    // TODO: Method 'put_text'
    // TODO: Method 'get_text'
    // TODO: Method 'parentElement'
    // TODO: Method 'duplicate'
    // TODO: Method 'inRange'
    // TODO: Method 'isEqual'
    // TODO: Method 'scrollIntoView'
    // TODO: Method 'collapse'
    // TODO: Method 'expand'
    // TODO: Method 'move'
    // TODO: Method 'moveStart'
    // TODO: Method 'moveEnd'
    // TODO: Method 'select'
    // TODO: Method 'pasteHTML'
    // TODO: Method 'moveToElementText'
    // TODO: Method 'setEndPoint'
    // TODO: Method 'compareEndPoints'
    // TODO: Method 'findText'
    // TODO: Method 'moveToPoint'
    // TODO: Method 'getBookmark'
    // TODO: Method 'moveToBookmark'
    // TODO: Method 'queryCommandSupported'
    // TODO: Method 'queryCommandEnabled'
    // TODO: Method 'queryCommandState'
    // TODO: Method 'queryCommandIndeterm'
    // TODO: Method 'queryCommandText'
    // TODO: Method 'queryCommandValue'
    // TODO: Method 'execCommand'
    // TODO: Method 'execCommandShowHelp'
};
// --------------------------------------------------------
// Type: IHTMLTextRangeMetrics
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLTextRangeMetrics = *opaque{
    // TODO: Method 'get_offsetTop'
    // TODO: Method 'get_offsetLeft'
    // TODO: Method 'get_boundingTop'
    // TODO: Method 'get_boundingLeft'
    // TODO: Method 'get_boundingWidth'
    // TODO: Method 'get_boundingHeight'
};
// --------------------------------------------------------
// Type: IHTMLTextRangeMetrics2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLTextRangeMetrics2 = *opaque{
    // TODO: Method 'getClientRects'
    // TODO: Method 'getBoundingClientRect'
};
// --------------------------------------------------------
// Type: IHTMLTxtRangeCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLTxtRangeCollection = *opaque{
    // TODO: Method 'get_length'
    // TODO: Method 'get__newEnum'
    // TODO: Method 'item'
};
// --------------------------------------------------------
// Type: IHTMLDOMRange
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDOMRange = *opaque{
    // TODO: Method 'get_startContainer'
    // TODO: Method 'get_startOffset'
    // TODO: Method 'get_endContainer'
    // TODO: Method 'get_endOffset'
    // TODO: Method 'get_collapsed'
    // TODO: Method 'get_commonAncestorContainer'
    // TODO: Method 'setStart'
    // TODO: Method 'setEnd'
    // TODO: Method 'setStartBefore'
    // TODO: Method 'setStartAfter'
    // TODO: Method 'setEndBefore'
    // TODO: Method 'setEndAfter'
    // TODO: Method 'collapse'
    // TODO: Method 'selectNode'
    // TODO: Method 'selectNodeContents'
    // TODO: Method 'compareBoundaryPoints'
    // TODO: Method 'deleteContents'
    // TODO: Method 'extractContents'
    // TODO: Method 'cloneContents'
    // TODO: Method 'insertNode'
    // TODO: Method 'surroundContents'
    // TODO: Method 'cloneRange'
    // TODO: Method 'toString'
    // TODO: Method 'detach'
    // TODO: Method 'getClientRects'
    // TODO: Method 'getBoundingClientRect'
};
// --------------------------------------------------------
// Type: DispHTMLDOMRange
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLDOMRange = *opaque{
};
// --------------------------------------------------------
// Type: HTMLFormElementEvents2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLFormElementEvents2 = *opaque{
};
// --------------------------------------------------------
// Type: HTMLFormElementEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLFormElementEvents = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLFormElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLFormElement = *opaque{
    // TODO: Method 'put_action'
    // TODO: Method 'get_action'
    // TODO: Method 'put_dir'
    // TODO: Method 'get_dir'
    // TODO: Method 'put_encoding'
    // TODO: Method 'get_encoding'
    // TODO: Method 'put_method'
    // TODO: Method 'get_method'
    // TODO: Method 'get_elements'
    // TODO: Method 'put_target'
    // TODO: Method 'get_target'
    // TODO: Method 'put_name'
    // TODO: Method 'get_name'
    // TODO: Method 'put_onsubmit'
    // TODO: Method 'get_onsubmit'
    // TODO: Method 'put_onreset'
    // TODO: Method 'get_onreset'
    // TODO: Method 'submit'
    // TODO: Method 'reset'
    // TODO: Method 'put_length'
    // TODO: Method 'get_length'
    // TODO: Method 'get__newEnum'
    // TODO: Method 'item'
    // TODO: Method 'tags'
};
// --------------------------------------------------------
// Type: IHTMLFormElement2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLFormElement2 = *opaque{
    // TODO: Method 'put_acceptCharset'
    // TODO: Method 'get_acceptCharset'
    // TODO: Method 'urns'
};
// --------------------------------------------------------
// Type: IHTMLFormElement3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLFormElement3 = *opaque{
    // TODO: Method 'namedItem'
};
// --------------------------------------------------------
// Type: IHTMLSubmitData
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLSubmitData = *opaque{
    // TODO: Method 'appendNameValuePair'
    // TODO: Method 'appendNameFilePair'
    // TODO: Method 'appendItemSeparator'
};
// --------------------------------------------------------
// Type: IHTMLFormElement4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLFormElement4 = *opaque{
    // TODO: Method 'put_action'
    // TODO: Method 'get_action'
};
// --------------------------------------------------------
// Type: DispHTMLFormElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLFormElement = *opaque{
};
// --------------------------------------------------------
// Type: HTMLControlElementEvents2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLControlElementEvents2 = *opaque{
};
// --------------------------------------------------------
// Type: HTMLControlElementEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLControlElementEvents = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLControlElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLControlElement = *opaque{
    // TODO: Method 'put_tabIndex'
    // TODO: Method 'get_tabIndex'
    // TODO: Method 'focus'
    // TODO: Method 'put_accessKey'
    // TODO: Method 'get_accessKey'
    // TODO: Method 'put_onblur'
    // TODO: Method 'get_onblur'
    // TODO: Method 'put_onfocus'
    // TODO: Method 'get_onfocus'
    // TODO: Method 'put_onresize'
    // TODO: Method 'get_onresize'
    // TODO: Method 'blur'
    // TODO: Method 'addFilter'
    // TODO: Method 'removeFilter'
    // TODO: Method 'get_clientHeight'
    // TODO: Method 'get_clientWidth'
    // TODO: Method 'get_clientTop'
    // TODO: Method 'get_clientLeft'
};
// --------------------------------------------------------
// Type: IHTMLTextElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLTextElement = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLTextElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLTextElement = *opaque{
};
// --------------------------------------------------------
// Type: HTMLTextContainerEvents2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLTextContainerEvents2 = *opaque{
};
// --------------------------------------------------------
// Type: HTMLTextContainerEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLTextContainerEvents = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLTextContainer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLTextContainer = *opaque{
    // TODO: Method 'createControlRange'
    // TODO: Method 'get_scrollHeight'
    // TODO: Method 'get_scrollWidth'
    // TODO: Method 'put_scrollTop'
    // TODO: Method 'get_scrollTop'
    // TODO: Method 'put_scrollLeft'
    // TODO: Method 'get_scrollLeft'
    // TODO: Method 'put_onscroll'
    // TODO: Method 'get_onscroll'
};
// --------------------------------------------------------
// Type: IHTMLControlRange
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLControlRange = *opaque{
    // TODO: Method 'select'
    // TODO: Method 'add'
    // TODO: Method 'remove'
    // TODO: Method 'item'
    // TODO: Method 'scrollIntoView'
    // TODO: Method 'queryCommandSupported'
    // TODO: Method 'queryCommandEnabled'
    // TODO: Method 'queryCommandState'
    // TODO: Method 'queryCommandIndeterm'
    // TODO: Method 'queryCommandText'
    // TODO: Method 'queryCommandValue'
    // TODO: Method 'execCommand'
    // TODO: Method 'execCommandShowHelp'
    // TODO: Method 'commonParentElement'
    // TODO: Method 'get_length'
};
// --------------------------------------------------------
// Type: IHTMLControlRange2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLControlRange2 = *opaque{
    // TODO: Method 'addElement'
};
// --------------------------------------------------------
// Type: HTMLImgEvents2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLImgEvents2 = *opaque{
};
// --------------------------------------------------------
// Type: HTMLImgEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLImgEvents = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLImgElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLImgElement = *opaque{
    // TODO: Method 'put_isMap'
    // TODO: Method 'get_isMap'
    // TODO: Method 'put_useMap'
    // TODO: Method 'get_useMap'
    // TODO: Method 'get_mimeType'
    // TODO: Method 'get_fileSize'
    // TODO: Method 'get_fileCreatedDate'
    // TODO: Method 'get_fileModifiedDate'
    // TODO: Method 'get_fileUpdatedDate'
    // TODO: Method 'get_protocol'
    // TODO: Method 'get_href'
    // TODO: Method 'get_nameProp'
    // TODO: Method 'put_border'
    // TODO: Method 'get_border'
    // TODO: Method 'put_vspace'
    // TODO: Method 'get_vspace'
    // TODO: Method 'put_hspace'
    // TODO: Method 'get_hspace'
    // TODO: Method 'put_alt'
    // TODO: Method 'get_alt'
    // TODO: Method 'put_src'
    // TODO: Method 'get_src'
    // TODO: Method 'put_lowsrc'
    // TODO: Method 'get_lowsrc'
    // TODO: Method 'put_vrml'
    // TODO: Method 'get_vrml'
    // TODO: Method 'put_dynsrc'
    // TODO: Method 'get_dynsrc'
    // TODO: Method 'get_readyState'
    // TODO: Method 'get_complete'
    // TODO: Method 'put_loop'
    // TODO: Method 'get_loop'
    // TODO: Method 'put_align'
    // TODO: Method 'get_align'
    // TODO: Method 'put_onload'
    // TODO: Method 'get_onload'
    // TODO: Method 'put_onerror'
    // TODO: Method 'get_onerror'
    // TODO: Method 'put_onabort'
    // TODO: Method 'get_onabort'
    // TODO: Method 'put_name'
    // TODO: Method 'get_name'
    // TODO: Method 'put_width'
    // TODO: Method 'get_width'
    // TODO: Method 'put_height'
    // TODO: Method 'get_height'
    // TODO: Method 'put_start'
    // TODO: Method 'get_start'
};
// --------------------------------------------------------
// Type: IHTMLImgElement2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLImgElement2 = *opaque{
    // TODO: Method 'put_longDesc'
    // TODO: Method 'get_longDesc'
};
// --------------------------------------------------------
// Type: IHTMLImgElement3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLImgElement3 = *opaque{
    // TODO: Method 'put_longDesc'
    // TODO: Method 'get_longDesc'
    // TODO: Method 'put_vrml'
    // TODO: Method 'get_vrml'
    // TODO: Method 'put_lowsrc'
    // TODO: Method 'get_lowsrc'
    // TODO: Method 'put_dynsrc'
    // TODO: Method 'get_dynsrc'
};
// --------------------------------------------------------
// Type: IHTMLImgElement4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLImgElement4 = *opaque{
    // TODO: Method 'get_naturalWidth'
    // TODO: Method 'get_naturalHeight'
};
// --------------------------------------------------------
// Type: IHTMLMSImgElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLMSImgElement = *opaque{
    // TODO: Method 'put_msPlayToDisabled'
    // TODO: Method 'get_msPlayToDisabled'
    // TODO: Method 'put_msPlayToPrimary'
    // TODO: Method 'get_msPlayToPrimary'
};
// --------------------------------------------------------
// Type: IHTMLImageElementFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLImageElementFactory = *opaque{
    // TODO: Method 'create'
};
// --------------------------------------------------------
// Type: DispHTMLImg
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLImg = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLBodyElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLBodyElement = *opaque{
    // TODO: Method 'put_background'
    // TODO: Method 'get_background'
    // TODO: Method 'put_bgProperties'
    // TODO: Method 'get_bgProperties'
    // TODO: Method 'put_leftMargin'
    // TODO: Method 'get_leftMargin'
    // TODO: Method 'put_topMargin'
    // TODO: Method 'get_topMargin'
    // TODO: Method 'put_rightMargin'
    // TODO: Method 'get_rightMargin'
    // TODO: Method 'put_bottomMargin'
    // TODO: Method 'get_bottomMargin'
    // TODO: Method 'put_noWrap'
    // TODO: Method 'get_noWrap'
    // TODO: Method 'put_bgColor'
    // TODO: Method 'get_bgColor'
    // TODO: Method 'put_text'
    // TODO: Method 'get_text'
    // TODO: Method 'put_link'
    // TODO: Method 'get_link'
    // TODO: Method 'put_vLink'
    // TODO: Method 'get_vLink'
    // TODO: Method 'put_aLink'
    // TODO: Method 'get_aLink'
    // TODO: Method 'put_onload'
    // TODO: Method 'get_onload'
    // TODO: Method 'put_onunload'
    // TODO: Method 'get_onunload'
    // TODO: Method 'put_scroll'
    // TODO: Method 'get_scroll'
    // TODO: Method 'put_onselect'
    // TODO: Method 'get_onselect'
    // TODO: Method 'put_onbeforeunload'
    // TODO: Method 'get_onbeforeunload'
    // TODO: Method 'createTextRange'
};
// --------------------------------------------------------
// Type: IHTMLBodyElement2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLBodyElement2 = *opaque{
    // TODO: Method 'put_onbeforeprint'
    // TODO: Method 'get_onbeforeprint'
    // TODO: Method 'put_onafterprint'
    // TODO: Method 'get_onafterprint'
};
// --------------------------------------------------------
// Type: IHTMLBodyElement3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLBodyElement3 = *opaque{
    // TODO: Method 'put_background'
    // TODO: Method 'get_background'
    // TODO: Method 'put_ononline'
    // TODO: Method 'get_ononline'
    // TODO: Method 'put_onoffline'
    // TODO: Method 'get_onoffline'
    // TODO: Method 'put_onhashchange'
    // TODO: Method 'get_onhashchange'
};
// --------------------------------------------------------
// Type: IHTMLBodyElement4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLBodyElement4 = *opaque{
    // TODO: Method 'put_onmessage'
    // TODO: Method 'get_onmessage'
    // TODO: Method 'put_onstorage'
    // TODO: Method 'get_onstorage'
};
// --------------------------------------------------------
// Type: IHTMLBodyElement5
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLBodyElement5 = *opaque{
    // TODO: Method 'put_onpopstate'
    // TODO: Method 'get_onpopstate'
};
// --------------------------------------------------------
// Type: DispHTMLBody
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLBody = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLFontElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLFontElement = *opaque{
    // TODO: Method 'put_color'
    // TODO: Method 'get_color'
    // TODO: Method 'put_face'
    // TODO: Method 'get_face'
    // TODO: Method 'put_size'
    // TODO: Method 'get_size'
};
// --------------------------------------------------------
// Type: DispHTMLFontElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLFontElement = *opaque{
};
// --------------------------------------------------------
// Type: HTMLAnchorEvents2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLAnchorEvents2 = *opaque{
};
// --------------------------------------------------------
// Type: HTMLAnchorEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLAnchorEvents = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLAnchorElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLAnchorElement = *opaque{
    // TODO: Method 'put_href'
    // TODO: Method 'get_href'
    // TODO: Method 'put_target'
    // TODO: Method 'get_target'
    // TODO: Method 'put_rel'
    // TODO: Method 'get_rel'
    // TODO: Method 'put_rev'
    // TODO: Method 'get_rev'
    // TODO: Method 'put_urn'
    // TODO: Method 'get_urn'
    // TODO: Method 'put_Methods'
    // TODO: Method 'get_Methods'
    // TODO: Method 'put_name'
    // TODO: Method 'get_name'
    // TODO: Method 'put_host'
    // TODO: Method 'get_host'
    // TODO: Method 'put_hostname'
    // TODO: Method 'get_hostname'
    // TODO: Method 'put_pathname'
    // TODO: Method 'get_pathname'
    // TODO: Method 'put_port'
    // TODO: Method 'get_port'
    // TODO: Method 'put_protocol'
    // TODO: Method 'get_protocol'
    // TODO: Method 'put_search'
    // TODO: Method 'get_search'
    // TODO: Method 'put_hash'
    // TODO: Method 'get_hash'
    // TODO: Method 'put_onblur'
    // TODO: Method 'get_onblur'
    // TODO: Method 'put_onfocus'
    // TODO: Method 'get_onfocus'
    // TODO: Method 'put_accessKey'
    // TODO: Method 'get_accessKey'
    // TODO: Method 'get_protocolLong'
    // TODO: Method 'get_mimeType'
    // TODO: Method 'get_nameProp'
    // TODO: Method 'put_tabIndex'
    // TODO: Method 'get_tabIndex'
    // TODO: Method 'focus'
    // TODO: Method 'blur'
};
// --------------------------------------------------------
// Type: IHTMLAnchorElement2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLAnchorElement2 = *opaque{
    // TODO: Method 'put_charset'
    // TODO: Method 'get_charset'
    // TODO: Method 'put_coords'
    // TODO: Method 'get_coords'
    // TODO: Method 'put_hreflang'
    // TODO: Method 'get_hreflang'
    // TODO: Method 'put_shape'
    // TODO: Method 'get_shape'
    // TODO: Method 'put_type'
    // TODO: Method 'get_type'
};
// --------------------------------------------------------
// Type: IHTMLAnchorElement3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLAnchorElement3 = *opaque{
    // TODO: Method 'put_shape'
    // TODO: Method 'get_shape'
    // TODO: Method 'put_coords'
    // TODO: Method 'get_coords'
    // TODO: Method 'put_href'
    // TODO: Method 'get_href'
};
// --------------------------------------------------------
// Type: DispHTMLAnchorElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLAnchorElement = *opaque{
};
// --------------------------------------------------------
// Type: HTMLLabelEvents2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLLabelEvents2 = *opaque{
};
// --------------------------------------------------------
// Type: HTMLLabelEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLLabelEvents = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLLabelElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLLabelElement = *opaque{
    // TODO: Method 'put_htmlFor'
    // TODO: Method 'get_htmlFor'
    // TODO: Method 'put_accessKey'
    // TODO: Method 'get_accessKey'
};
// --------------------------------------------------------
// Type: IHTMLLabelElement2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLLabelElement2 = *opaque{
    // TODO: Method 'get_form'
};
// --------------------------------------------------------
// Type: DispHTMLLabelElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLLabelElement = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLListElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLListElement = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLListElement2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLListElement2 = *opaque{
    // TODO: Method 'put_compact'
    // TODO: Method 'get_compact'
};
// --------------------------------------------------------
// Type: DispHTMLListElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLListElement = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLUListElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLUListElement = *opaque{
    // TODO: Method 'put_compact'
    // TODO: Method 'get_compact'
    // TODO: Method 'put_type'
    // TODO: Method 'get_type'
};
// --------------------------------------------------------
// Type: DispHTMLUListElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLUListElement = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLOListElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLOListElement = *opaque{
    // TODO: Method 'put_compact'
    // TODO: Method 'get_compact'
    // TODO: Method 'put_start'
    // TODO: Method 'get_start'
    // TODO: Method 'put_type'
    // TODO: Method 'get_type'
};
// --------------------------------------------------------
// Type: DispHTMLOListElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLOListElement = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLLIElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLLIElement = *opaque{
    // TODO: Method 'put_type'
    // TODO: Method 'get_type'
    // TODO: Method 'put_value'
    // TODO: Method 'get_value'
};
// --------------------------------------------------------
// Type: DispHTMLLIElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLLIElement = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLBlockElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLBlockElement = *opaque{
    // TODO: Method 'put_clear'
    // TODO: Method 'get_clear'
};
// --------------------------------------------------------
// Type: IHTMLBlockElement2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLBlockElement2 = *opaque{
    // TODO: Method 'put_cite'
    // TODO: Method 'get_cite'
    // TODO: Method 'put_width'
    // TODO: Method 'get_width'
};
// --------------------------------------------------------
// Type: IHTMLBlockElement3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLBlockElement3 = *opaque{
    // TODO: Method 'put_cite'
    // TODO: Method 'get_cite'
};
// --------------------------------------------------------
// Type: DispHTMLBlockElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLBlockElement = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLDivElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDivElement = *opaque{
    // TODO: Method 'put_align'
    // TODO: Method 'get_align'
    // TODO: Method 'put_noWrap'
    // TODO: Method 'get_noWrap'
};
// --------------------------------------------------------
// Type: DispHTMLDivElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLDivElement = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLDDElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDDElement = *opaque{
    // TODO: Method 'put_noWrap'
    // TODO: Method 'get_noWrap'
};
// --------------------------------------------------------
// Type: DispHTMLDDElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLDDElement = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLDTElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDTElement = *opaque{
    // TODO: Method 'put_noWrap'
    // TODO: Method 'get_noWrap'
};
// --------------------------------------------------------
// Type: DispHTMLDTElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLDTElement = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLBRElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLBRElement = *opaque{
    // TODO: Method 'put_clear'
    // TODO: Method 'get_clear'
};
// --------------------------------------------------------
// Type: DispHTMLBRElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLBRElement = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLDListElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDListElement = *opaque{
    // TODO: Method 'put_compact'
    // TODO: Method 'get_compact'
};
// --------------------------------------------------------
// Type: DispHTMLDListElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLDListElement = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLHRElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLHRElement = *opaque{
    // TODO: Method 'put_align'
    // TODO: Method 'get_align'
    // TODO: Method 'put_color'
    // TODO: Method 'get_color'
    // TODO: Method 'put_noShade'
    // TODO: Method 'get_noShade'
    // TODO: Method 'put_width'
    // TODO: Method 'get_width'
    // TODO: Method 'put_size'
    // TODO: Method 'get_size'
};
// --------------------------------------------------------
// Type: DispHTMLHRElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLHRElement = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLParaElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLParaElement = *opaque{
    // TODO: Method 'put_align'
    // TODO: Method 'get_align'
};
// --------------------------------------------------------
// Type: DispHTMLParaElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLParaElement = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLElementCollection2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLElementCollection2 = *opaque{
    // TODO: Method 'urns'
};
// --------------------------------------------------------
// Type: IHTMLElementCollection3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLElementCollection3 = *opaque{
    // TODO: Method 'namedItem'
};
// --------------------------------------------------------
// Type: IHTMLElementCollection4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLElementCollection4 = *opaque{
    // TODO: Method 'get_length'
    // TODO: Method 'item'
    // TODO: Method 'namedItem'
};
// --------------------------------------------------------
// Type: DispHTMLElementCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLElementCollection = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLHeaderElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLHeaderElement = *opaque{
    // TODO: Method 'put_align'
    // TODO: Method 'get_align'
};
// --------------------------------------------------------
// Type: DispHTMLHeaderElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLHeaderElement = *opaque{
};
// --------------------------------------------------------
// Type: HTMLSelectElementEvents2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLSelectElementEvents2 = *opaque{
};
// --------------------------------------------------------
// Type: HTMLSelectElementEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLSelectElementEvents = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLOptionElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLOptionElement = *opaque{
    // TODO: Method 'put_selected'
    // TODO: Method 'get_selected'
    // TODO: Method 'put_value'
    // TODO: Method 'get_value'
    // TODO: Method 'put_defaultSelected'
    // TODO: Method 'get_defaultSelected'
    // TODO: Method 'put_index'
    // TODO: Method 'get_index'
    // TODO: Method 'put_text'
    // TODO: Method 'get_text'
    // TODO: Method 'get_form'
};
// --------------------------------------------------------
// Type: IHTMLSelectElementEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLSelectElementEx = *opaque{
    // TODO: Method 'ShowDropdown'
    // TODO: Method 'SetSelectExFlags'
    // TODO: Method 'GetSelectExFlags'
    // TODO: Method 'GetDropdownOpen'
};
// --------------------------------------------------------
// Type: IHTMLSelectElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLSelectElement = *opaque{
    // TODO: Method 'put_size'
    // TODO: Method 'get_size'
    // TODO: Method 'put_multiple'
    // TODO: Method 'get_multiple'
    // TODO: Method 'put_name'
    // TODO: Method 'get_name'
    // TODO: Method 'get_options'
    // TODO: Method 'put_onchange'
    // TODO: Method 'get_onchange'
    // TODO: Method 'put_selectedIndex'
    // TODO: Method 'get_selectedIndex'
    // TODO: Method 'get_type'
    // TODO: Method 'put_value'
    // TODO: Method 'get_value'
    // TODO: Method 'put_disabled'
    // TODO: Method 'get_disabled'
    // TODO: Method 'get_form'
    // TODO: Method 'add'
    // TODO: Method 'remove'
    // TODO: Method 'put_length'
    // TODO: Method 'get_length'
    // TODO: Method 'get__newEnum'
    // TODO: Method 'item'
    // TODO: Method 'tags'
};
// --------------------------------------------------------
// Type: IHTMLSelectElement2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLSelectElement2 = *opaque{
    // TODO: Method 'urns'
};
// --------------------------------------------------------
// Type: IHTMLSelectElement4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLSelectElement4 = *opaque{
    // TODO: Method 'namedItem'
};
// --------------------------------------------------------
// Type: IHTMLSelectElement5
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLSelectElement5 = *opaque{
    // TODO: Method 'add'
};
// --------------------------------------------------------
// Type: IHTMLSelectElement6
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLSelectElement6 = *opaque{
    // TODO: Method 'add'
    // TODO: Method 'put_value'
    // TODO: Method 'get_value'
};
// --------------------------------------------------------
// Type: DispHTMLSelectElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLSelectElement = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLWndSelectElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLWndSelectElement = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLSelectionObject
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLSelectionObject = *opaque{
    // TODO: Method 'createRange'
    // TODO: Method 'empty'
    // TODO: Method 'clear'
    // TODO: Method 'get_type'
};
// --------------------------------------------------------
// Type: IHTMLSelectionObject2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLSelectionObject2 = *opaque{
    // TODO: Method 'createRangeCollection'
    // TODO: Method 'get_typeDetail'
};
// --------------------------------------------------------
// Type: IHTMLSelection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLSelection = *opaque{
    // TODO: Method 'get_anchorNode'
    // TODO: Method 'get_anchorOffset'
    // TODO: Method 'get_focusNode'
    // TODO: Method 'get_focusOffset'
    // TODO: Method 'get_isCollapsed'
    // TODO: Method 'collapse'
    // TODO: Method 'collapseToStart'
    // TODO: Method 'collapseToEnd'
    // TODO: Method 'selectAllChildren'
    // TODO: Method 'deleteFromDocument'
    // TODO: Method 'get_rangeCount'
    // TODO: Method 'getRangeAt'
    // TODO: Method 'addRange'
    // TODO: Method 'removeRange'
    // TODO: Method 'removeAllRanges'
    // TODO: Method 'toString'
};
// --------------------------------------------------------
// Type: IHTMLOptionElement3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLOptionElement3 = *opaque{
    // TODO: Method 'put_label'
    // TODO: Method 'get_label'
};
// --------------------------------------------------------
// Type: IHTMLOptionElement4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLOptionElement4 = *opaque{
    // TODO: Method 'put_value'
    // TODO: Method 'get_value'
};
// --------------------------------------------------------
// Type: IHTMLOptionElementFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLOptionElementFactory = *opaque{
    // TODO: Method 'create'
};
// --------------------------------------------------------
// Type: DispHTMLOptionElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLOptionElement = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLWndOptionElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLWndOptionElement = *opaque{
};
// --------------------------------------------------------
// Type: HTMLButtonElementEvents2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLButtonElementEvents2 = *opaque{
};
// --------------------------------------------------------
// Type: HTMLButtonElementEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLButtonElementEvents = *opaque{
};
// --------------------------------------------------------
// Type: HTMLInputTextElementEvents2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLInputTextElementEvents2 = *opaque{
};
// --------------------------------------------------------
// Type: HTMLOptionButtonElementEvents2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLOptionButtonElementEvents2 = *opaque{
};
// --------------------------------------------------------
// Type: HTMLInputFileElementEvents2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLInputFileElementEvents2 = *opaque{
};
// --------------------------------------------------------
// Type: HTMLInputImageEvents2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLInputImageEvents2 = *opaque{
};
// --------------------------------------------------------
// Type: HTMLInputTextElementEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLInputTextElementEvents = *opaque{
};
// --------------------------------------------------------
// Type: HTMLOptionButtonElementEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLOptionButtonElementEvents = *opaque{
};
// --------------------------------------------------------
// Type: HTMLInputFileElementEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLInputFileElementEvents = *opaque{
};
// --------------------------------------------------------
// Type: HTMLInputImageEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLInputImageEvents = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLInputElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLInputElement = *opaque{
    // TODO: Method 'put_type'
    // TODO: Method 'get_type'
    // TODO: Method 'put_value'
    // TODO: Method 'get_value'
    // TODO: Method 'put_name'
    // TODO: Method 'get_name'
    // TODO: Method 'put_status'
    // TODO: Method 'get_status'
    // TODO: Method 'put_disabled'
    // TODO: Method 'get_disabled'
    // TODO: Method 'get_form'
    // TODO: Method 'put_size'
    // TODO: Method 'get_size'
    // TODO: Method 'put_maxLength'
    // TODO: Method 'get_maxLength'
    // TODO: Method 'select'
    // TODO: Method 'put_onchange'
    // TODO: Method 'get_onchange'
    // TODO: Method 'put_onselect'
    // TODO: Method 'get_onselect'
    // TODO: Method 'put_defaultValue'
    // TODO: Method 'get_defaultValue'
    // TODO: Method 'put_readOnly'
    // TODO: Method 'get_readOnly'
    // TODO: Method 'createTextRange'
    // TODO: Method 'put_indeterminate'
    // TODO: Method 'get_indeterminate'
    // TODO: Method 'put_defaultChecked'
    // TODO: Method 'get_defaultChecked'
    // TODO: Method 'put_checked'
    // TODO: Method 'get_checked'
    // TODO: Method 'put_border'
    // TODO: Method 'get_border'
    // TODO: Method 'put_vspace'
    // TODO: Method 'get_vspace'
    // TODO: Method 'put_hspace'
    // TODO: Method 'get_hspace'
    // TODO: Method 'put_alt'
    // TODO: Method 'get_alt'
    // TODO: Method 'put_src'
    // TODO: Method 'get_src'
    // TODO: Method 'put_lowsrc'
    // TODO: Method 'get_lowsrc'
    // TODO: Method 'put_vrml'
    // TODO: Method 'get_vrml'
    // TODO: Method 'put_dynsrc'
    // TODO: Method 'get_dynsrc'
    // TODO: Method 'get_readyState'
    // TODO: Method 'get_complete'
    // TODO: Method 'put_loop'
    // TODO: Method 'get_loop'
    // TODO: Method 'put_align'
    // TODO: Method 'get_align'
    // TODO: Method 'put_onload'
    // TODO: Method 'get_onload'
    // TODO: Method 'put_onerror'
    // TODO: Method 'get_onerror'
    // TODO: Method 'put_onabort'
    // TODO: Method 'get_onabort'
    // TODO: Method 'put_width'
    // TODO: Method 'get_width'
    // TODO: Method 'put_height'
    // TODO: Method 'get_height'
    // TODO: Method 'put_start'
    // TODO: Method 'get_start'
};
// --------------------------------------------------------
// Type: IHTMLInputElement2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLInputElement2 = *opaque{
    // TODO: Method 'put_accept'
    // TODO: Method 'get_accept'
    // TODO: Method 'put_useMap'
    // TODO: Method 'get_useMap'
};
// --------------------------------------------------------
// Type: IHTMLInputElement3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLInputElement3 = *opaque{
    // TODO: Method 'put_src'
    // TODO: Method 'get_src'
    // TODO: Method 'put_lowsrc'
    // TODO: Method 'get_lowsrc'
    // TODO: Method 'put_vrml'
    // TODO: Method 'get_vrml'
    // TODO: Method 'put_dynsrc'
    // TODO: Method 'get_dynsrc'
};
// --------------------------------------------------------
// Type: IHTMLInputButtonElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLInputButtonElement = *opaque{
    // TODO: Method 'get_type'
    // TODO: Method 'put_value'
    // TODO: Method 'get_value'
    // TODO: Method 'put_name'
    // TODO: Method 'get_name'
    // TODO: Method 'put_status'
    // TODO: Method 'get_status'
    // TODO: Method 'put_disabled'
    // TODO: Method 'get_disabled'
    // TODO: Method 'get_form'
    // TODO: Method 'createTextRange'
};
// --------------------------------------------------------
// Type: IHTMLInputHiddenElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLInputHiddenElement = *opaque{
    // TODO: Method 'get_type'
    // TODO: Method 'put_value'
    // TODO: Method 'get_value'
    // TODO: Method 'put_name'
    // TODO: Method 'get_name'
    // TODO: Method 'put_status'
    // TODO: Method 'get_status'
    // TODO: Method 'put_disabled'
    // TODO: Method 'get_disabled'
    // TODO: Method 'get_form'
    // TODO: Method 'createTextRange'
};
// --------------------------------------------------------
// Type: IHTMLInputTextElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLInputTextElement = *opaque{
    // TODO: Method 'get_type'
    // TODO: Method 'put_value'
    // TODO: Method 'get_value'
    // TODO: Method 'put_name'
    // TODO: Method 'get_name'
    // TODO: Method 'put_status'
    // TODO: Method 'get_status'
    // TODO: Method 'put_disabled'
    // TODO: Method 'get_disabled'
    // TODO: Method 'get_form'
    // TODO: Method 'put_defaultValue'
    // TODO: Method 'get_defaultValue'
    // TODO: Method 'put_size'
    // TODO: Method 'get_size'
    // TODO: Method 'put_maxLength'
    // TODO: Method 'get_maxLength'
    // TODO: Method 'select'
    // TODO: Method 'put_onchange'
    // TODO: Method 'get_onchange'
    // TODO: Method 'put_onselect'
    // TODO: Method 'get_onselect'
    // TODO: Method 'put_readOnly'
    // TODO: Method 'get_readOnly'
    // TODO: Method 'createTextRange'
};
// --------------------------------------------------------
// Type: IHTMLInputTextElement2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLInputTextElement2 = *opaque{
    // TODO: Method 'put_selectionStart'
    // TODO: Method 'get_selectionStart'
    // TODO: Method 'put_selectionEnd'
    // TODO: Method 'get_selectionEnd'
    // TODO: Method 'setSelectionRange'
};
// --------------------------------------------------------
// Type: IHTMLInputFileElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLInputFileElement = *opaque{
    // TODO: Method 'get_type'
    // TODO: Method 'put_name'
    // TODO: Method 'get_name'
    // TODO: Method 'put_status'
    // TODO: Method 'get_status'
    // TODO: Method 'put_disabled'
    // TODO: Method 'get_disabled'
    // TODO: Method 'get_form'
    // TODO: Method 'put_size'
    // TODO: Method 'get_size'
    // TODO: Method 'put_maxLength'
    // TODO: Method 'get_maxLength'
    // TODO: Method 'select'
    // TODO: Method 'put_onchange'
    // TODO: Method 'get_onchange'
    // TODO: Method 'put_onselect'
    // TODO: Method 'get_onselect'
    // TODO: Method 'put_value'
    // TODO: Method 'get_value'
};
// --------------------------------------------------------
// Type: IHTMLOptionButtonElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLOptionButtonElement = *opaque{
    // TODO: Method 'put_value'
    // TODO: Method 'get_value'
    // TODO: Method 'get_type'
    // TODO: Method 'put_name'
    // TODO: Method 'get_name'
    // TODO: Method 'put_checked'
    // TODO: Method 'get_checked'
    // TODO: Method 'put_defaultChecked'
    // TODO: Method 'get_defaultChecked'
    // TODO: Method 'put_onchange'
    // TODO: Method 'get_onchange'
    // TODO: Method 'put_disabled'
    // TODO: Method 'get_disabled'
    // TODO: Method 'put_status'
    // TODO: Method 'get_status'
    // TODO: Method 'put_indeterminate'
    // TODO: Method 'get_indeterminate'
    // TODO: Method 'get_form'
};
// --------------------------------------------------------
// Type: IHTMLInputImage
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLInputImage = *opaque{
    // TODO: Method 'get_type'
    // TODO: Method 'put_disabled'
    // TODO: Method 'get_disabled'
    // TODO: Method 'put_border'
    // TODO: Method 'get_border'
    // TODO: Method 'put_vspace'
    // TODO: Method 'get_vspace'
    // TODO: Method 'put_hspace'
    // TODO: Method 'get_hspace'
    // TODO: Method 'put_alt'
    // TODO: Method 'get_alt'
    // TODO: Method 'put_src'
    // TODO: Method 'get_src'
    // TODO: Method 'put_lowsrc'
    // TODO: Method 'get_lowsrc'
    // TODO: Method 'put_vrml'
    // TODO: Method 'get_vrml'
    // TODO: Method 'put_dynsrc'
    // TODO: Method 'get_dynsrc'
    // TODO: Method 'get_readyState'
    // TODO: Method 'get_complete'
    // TODO: Method 'put_loop'
    // TODO: Method 'get_loop'
    // TODO: Method 'put_align'
    // TODO: Method 'get_align'
    // TODO: Method 'put_onload'
    // TODO: Method 'get_onload'
    // TODO: Method 'put_onerror'
    // TODO: Method 'get_onerror'
    // TODO: Method 'put_onabort'
    // TODO: Method 'get_onabort'
    // TODO: Method 'put_name'
    // TODO: Method 'get_name'
    // TODO: Method 'put_width'
    // TODO: Method 'get_width'
    // TODO: Method 'put_height'
    // TODO: Method 'get_height'
    // TODO: Method 'put_start'
    // TODO: Method 'get_start'
};
// --------------------------------------------------------
// Type: IHTMLInputRangeElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLInputRangeElement = *opaque{
    // TODO: Method 'put_disabled'
    // TODO: Method 'get_disabled'
    // TODO: Method 'get_type'
    // TODO: Method 'put_alt'
    // TODO: Method 'get_alt'
    // TODO: Method 'put_name'
    // TODO: Method 'get_name'
    // TODO: Method 'put_value'
    // TODO: Method 'get_value'
    // TODO: Method 'put_min'
    // TODO: Method 'get_min'
    // TODO: Method 'put_max'
    // TODO: Method 'get_max'
    // TODO: Method 'put_step'
    // TODO: Method 'get_step'
    // TODO: Method 'put_valueAsNumber'
    // TODO: Method 'get_valueAsNumber'
    // TODO: Method 'stepUp'
    // TODO: Method 'stepDown'
};
// --------------------------------------------------------
// Type: DispHTMLInputElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLInputElement = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLTextAreaElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLTextAreaElement = *opaque{
    // TODO: Method 'get_type'
    // TODO: Method 'put_value'
    // TODO: Method 'get_value'
    // TODO: Method 'put_name'
    // TODO: Method 'get_name'
    // TODO: Method 'put_status'
    // TODO: Method 'get_status'
    // TODO: Method 'put_disabled'
    // TODO: Method 'get_disabled'
    // TODO: Method 'get_form'
    // TODO: Method 'put_defaultValue'
    // TODO: Method 'get_defaultValue'
    // TODO: Method 'select'
    // TODO: Method 'put_onchange'
    // TODO: Method 'get_onchange'
    // TODO: Method 'put_onselect'
    // TODO: Method 'get_onselect'
    // TODO: Method 'put_readOnly'
    // TODO: Method 'get_readOnly'
    // TODO: Method 'put_rows'
    // TODO: Method 'get_rows'
    // TODO: Method 'put_cols'
    // TODO: Method 'get_cols'
    // TODO: Method 'put_wrap'
    // TODO: Method 'get_wrap'
    // TODO: Method 'createTextRange'
};
// --------------------------------------------------------
// Type: IHTMLTextAreaElement2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLTextAreaElement2 = *opaque{
    // TODO: Method 'put_selectionStart'
    // TODO: Method 'get_selectionStart'
    // TODO: Method 'put_selectionEnd'
    // TODO: Method 'get_selectionEnd'
    // TODO: Method 'setSelectionRange'
};
// --------------------------------------------------------
// Type: DispHTMLTextAreaElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLTextAreaElement = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLRichtextElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLRichtextElement = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLButtonElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLButtonElement = *opaque{
    // TODO: Method 'get_type'
    // TODO: Method 'put_value'
    // TODO: Method 'get_value'
    // TODO: Method 'put_name'
    // TODO: Method 'get_name'
    // TODO: Method 'put_status'
    // TODO: Method 'get_status'
    // TODO: Method 'put_disabled'
    // TODO: Method 'get_disabled'
    // TODO: Method 'get_form'
    // TODO: Method 'createTextRange'
};
// --------------------------------------------------------
// Type: IHTMLButtonElement2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLButtonElement2 = *opaque{
    // TODO: Method 'put_type'
    // TODO: Method 'get_type'
};
// --------------------------------------------------------
// Type: DispHTMLButtonElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLButtonElement = *opaque{
};
// --------------------------------------------------------
// Type: HTMLMarqueeElementEvents2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLMarqueeElementEvents2 = *opaque{
};
// --------------------------------------------------------
// Type: HTMLMarqueeElementEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLMarqueeElementEvents = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLMarqueeElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLMarqueeElement = *opaque{
    // TODO: Method 'put_bgColor'
    // TODO: Method 'get_bgColor'
    // TODO: Method 'put_scrollDelay'
    // TODO: Method 'get_scrollDelay'
    // TODO: Method 'put_direction'
    // TODO: Method 'get_direction'
    // TODO: Method 'put_behavior'
    // TODO: Method 'get_behavior'
    // TODO: Method 'put_scrollAmount'
    // TODO: Method 'get_scrollAmount'
    // TODO: Method 'put_loop'
    // TODO: Method 'get_loop'
    // TODO: Method 'put_vspace'
    // TODO: Method 'get_vspace'
    // TODO: Method 'put_hspace'
    // TODO: Method 'get_hspace'
    // TODO: Method 'put_onfinish'
    // TODO: Method 'get_onfinish'
    // TODO: Method 'put_onstart'
    // TODO: Method 'get_onstart'
    // TODO: Method 'put_onbounce'
    // TODO: Method 'get_onbounce'
    // TODO: Method 'put_width'
    // TODO: Method 'get_width'
    // TODO: Method 'put_height'
    // TODO: Method 'get_height'
    // TODO: Method 'put_trueSpeed'
    // TODO: Method 'get_trueSpeed'
    // TODO: Method 'start'
    // TODO: Method 'stop'
};
// --------------------------------------------------------
// Type: DispHTMLMarqueeElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLMarqueeElement = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLHtmlElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLHtmlElement = *opaque{
    // TODO: Method 'put_version'
    // TODO: Method 'get_version'
};
// --------------------------------------------------------
// Type: IHTMLHeadElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLHeadElement = *opaque{
    // TODO: Method 'put_profile'
    // TODO: Method 'get_profile'
};
// --------------------------------------------------------
// Type: IHTMLHeadElement2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLHeadElement2 = *opaque{
    // TODO: Method 'put_profile'
    // TODO: Method 'get_profile'
};
// --------------------------------------------------------
// Type: IHTMLTitleElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLTitleElement = *opaque{
    // TODO: Method 'put_text'
    // TODO: Method 'get_text'
};
// --------------------------------------------------------
// Type: IHTMLMetaElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLMetaElement = *opaque{
    // TODO: Method 'put_httpEquiv'
    // TODO: Method 'get_httpEquiv'
    // TODO: Method 'put_content'
    // TODO: Method 'get_content'
    // TODO: Method 'put_name'
    // TODO: Method 'get_name'
    // TODO: Method 'put_url'
    // TODO: Method 'get_url'
    // TODO: Method 'put_charset'
    // TODO: Method 'get_charset'
};
// --------------------------------------------------------
// Type: IHTMLMetaElement2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLMetaElement2 = *opaque{
    // TODO: Method 'put_scheme'
    // TODO: Method 'get_scheme'
};
// --------------------------------------------------------
// Type: IHTMLMetaElement3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLMetaElement3 = *opaque{
    // TODO: Method 'put_url'
    // TODO: Method 'get_url'
};
// --------------------------------------------------------
// Type: IHTMLBaseElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLBaseElement = *opaque{
    // TODO: Method 'put_href'
    // TODO: Method 'get_href'
    // TODO: Method 'put_target'
    // TODO: Method 'get_target'
};
// --------------------------------------------------------
// Type: IHTMLBaseElement2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLBaseElement2 = *opaque{
    // TODO: Method 'put_href'
    // TODO: Method 'get_href'
};
// --------------------------------------------------------
// Type: DispHTMLHtmlElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLHtmlElement = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLHeadElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLHeadElement = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLTitleElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLTitleElement = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLMetaElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLMetaElement = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLBaseElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLBaseElement = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLIsIndexElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLIsIndexElement = *opaque{
    // TODO: Method 'put_prompt'
    // TODO: Method 'get_prompt'
    // TODO: Method 'put_action'
    // TODO: Method 'get_action'
};
// --------------------------------------------------------
// Type: IHTMLIsIndexElement2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLIsIndexElement2 = *opaque{
    // TODO: Method 'get_form'
};
// --------------------------------------------------------
// Type: IHTMLNextIdElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLNextIdElement = *opaque{
    // TODO: Method 'put_n'
    // TODO: Method 'get_n'
};
// --------------------------------------------------------
// Type: DispHTMLIsIndexElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLIsIndexElement = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLNextIdElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLNextIdElement = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLBaseFontElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLBaseFontElement = *opaque{
    // TODO: Method 'put_color'
    // TODO: Method 'get_color'
    // TODO: Method 'put_face'
    // TODO: Method 'get_face'
    // TODO: Method 'put_size'
    // TODO: Method 'get_size'
};
// --------------------------------------------------------
// Type: DispHTMLBaseFontElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLBaseFontElement = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLUnknownElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLUnknownElement = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLUnknownElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLUnknownElement = *opaque{
};
// --------------------------------------------------------
// Type: IWebGeolocation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWebGeolocation = *opaque{
    // TODO: Method 'getCurrentPosition'
    // TODO: Method 'watchPosition'
    // TODO: Method 'clearWatch'
};
// --------------------------------------------------------
// Type: IHTMLMimeTypesCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLMimeTypesCollection = *opaque{
    // TODO: Method 'get_length'
};
// --------------------------------------------------------
// Type: IHTMLPluginsCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLPluginsCollection = *opaque{
    // TODO: Method 'get_length'
    // TODO: Method 'refresh'
};
// --------------------------------------------------------
// Type: IOmHistory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOmHistory = *opaque{
    // TODO: Method 'get_length'
    // TODO: Method 'back'
    // TODO: Method 'forward'
    // TODO: Method 'go'
};
// --------------------------------------------------------
// Type: IHTMLOpsProfile
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLOpsProfile = *opaque{
    // TODO: Method 'addRequest'
    // TODO: Method 'clearRequest'
    // TODO: Method 'doRequest'
    // TODO: Method 'getAttribute'
    // TODO: Method 'setAttribute'
    // TODO: Method 'commitChanges'
    // TODO: Method 'addReadRequest'
    // TODO: Method 'doReadRequest'
    // TODO: Method 'doWriteRequest'
};
// --------------------------------------------------------
// Type: IOmNavigator
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOmNavigator = *opaque{
    // TODO: Method 'get_appCodeName'
    // TODO: Method 'get_appName'
    // TODO: Method 'get_appVersion'
    // TODO: Method 'get_userAgent'
    // TODO: Method 'javaEnabled'
    // TODO: Method 'taintEnabled'
    // TODO: Method 'get_mimeTypes'
    // TODO: Method 'get_plugins'
    // TODO: Method 'get_cookieEnabled'
    // TODO: Method 'get_opsProfile'
    // TODO: Method 'toString'
    // TODO: Method 'get_cpuClass'
    // TODO: Method 'get_systemLanguage'
    // TODO: Method 'get_browserLanguage'
    // TODO: Method 'get_userLanguage'
    // TODO: Method 'get_platform'
    // TODO: Method 'get_appMinorVersion'
    // TODO: Method 'get_connectionSpeed'
    // TODO: Method 'get_onLine'
    // TODO: Method 'get_userProfile'
};
// --------------------------------------------------------
// Type: INavigatorGeolocation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const INavigatorGeolocation = *opaque{
    // TODO: Method 'get_geolocation'
};
// --------------------------------------------------------
// Type: INavigatorDoNotTrack
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const INavigatorDoNotTrack = *opaque{
    // TODO: Method 'get_msDoNotTrack'
};
// --------------------------------------------------------
// Type: IHTMLLocation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLLocation = *opaque{
    // TODO: Method 'put_href'
    // TODO: Method 'get_href'
    // TODO: Method 'put_protocol'
    // TODO: Method 'get_protocol'
    // TODO: Method 'put_host'
    // TODO: Method 'get_host'
    // TODO: Method 'put_hostname'
    // TODO: Method 'get_hostname'
    // TODO: Method 'put_port'
    // TODO: Method 'get_port'
    // TODO: Method 'put_pathname'
    // TODO: Method 'get_pathname'
    // TODO: Method 'put_search'
    // TODO: Method 'get_search'
    // TODO: Method 'put_hash'
    // TODO: Method 'get_hash'
    // TODO: Method 'reload'
    // TODO: Method 'replace'
    // TODO: Method 'assign'
    // TODO: Method 'toString'
};
// --------------------------------------------------------
// Type: DispHTMLHistory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLHistory = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLNavigator
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLNavigator = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLLocation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLLocation = *opaque{
};
// --------------------------------------------------------
// Type: DispCPlugins
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispCPlugins = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLBookmarkCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLBookmarkCollection = *opaque{
    // TODO: Method 'get_length'
    // TODO: Method 'get__newEnum'
    // TODO: Method 'item'
};
// --------------------------------------------------------
// Type: IHTMLDataTransfer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDataTransfer = *opaque{
    // TODO: Method 'setData'
    // TODO: Method 'getData'
    // TODO: Method 'clearData'
    // TODO: Method 'put_dropEffect'
    // TODO: Method 'get_dropEffect'
    // TODO: Method 'put_effectAllowed'
    // TODO: Method 'get_effectAllowed'
};
// --------------------------------------------------------
// Type: IHTMLEventObj2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLEventObj2 = *opaque{
    // TODO: Method 'setAttribute'
    // TODO: Method 'getAttribute'
    // TODO: Method 'removeAttribute'
    // TODO: Method 'put_propertyName'
    // TODO: Method 'get_propertyName'
    // TODO: Method 'putref_bookmarks'
    // TODO: Method 'get_bookmarks'
    // TODO: Method 'putref_recordset'
    // TODO: Method 'get_recordset'
    // TODO: Method 'put_dataFld'
    // TODO: Method 'get_dataFld'
    // TODO: Method 'putref_boundElements'
    // TODO: Method 'get_boundElements'
    // TODO: Method 'put_repeat'
    // TODO: Method 'get_repeat'
    // TODO: Method 'put_srcUrn'
    // TODO: Method 'get_srcUrn'
    // TODO: Method 'putref_srcElement'
    // TODO: Method 'get_srcElement'
    // TODO: Method 'put_altKey'
    // TODO: Method 'get_altKey'
    // TODO: Method 'put_ctrlKey'
    // TODO: Method 'get_ctrlKey'
    // TODO: Method 'put_shiftKey'
    // TODO: Method 'get_shiftKey'
    // TODO: Method 'putref_fromElement'
    // TODO: Method 'get_fromElement'
    // TODO: Method 'putref_toElement'
    // TODO: Method 'get_toElement'
    // TODO: Method 'put_button'
    // TODO: Method 'get_button'
    // TODO: Method 'put_type'
    // TODO: Method 'get_type'
    // TODO: Method 'put_qualifier'
    // TODO: Method 'get_qualifier'
    // TODO: Method 'put_reason'
    // TODO: Method 'get_reason'
    // TODO: Method 'put_x'
    // TODO: Method 'get_x'
    // TODO: Method 'put_y'
    // TODO: Method 'get_y'
    // TODO: Method 'put_clientX'
    // TODO: Method 'get_clientX'
    // TODO: Method 'put_clientY'
    // TODO: Method 'get_clientY'
    // TODO: Method 'put_offsetX'
    // TODO: Method 'get_offsetX'
    // TODO: Method 'put_offsetY'
    // TODO: Method 'get_offsetY'
    // TODO: Method 'put_screenX'
    // TODO: Method 'get_screenX'
    // TODO: Method 'put_screenY'
    // TODO: Method 'get_screenY'
    // TODO: Method 'putref_srcFilter'
    // TODO: Method 'get_srcFilter'
    // TODO: Method 'get_dataTransfer'
};
// --------------------------------------------------------
// Type: IHTMLEventObj3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLEventObj3 = *opaque{
    // TODO: Method 'get_contentOverflow'
    // TODO: Method 'put_shiftLeft'
    // TODO: Method 'get_shiftLeft'
    // TODO: Method 'put_altLeft'
    // TODO: Method 'get_altLeft'
    // TODO: Method 'put_ctrlLeft'
    // TODO: Method 'get_ctrlLeft'
    // TODO: Method 'get_imeCompositionChange'
    // TODO: Method 'get_imeNotifyCommand'
    // TODO: Method 'get_imeNotifyData'
    // TODO: Method 'get_imeRequest'
    // TODO: Method 'get_imeRequestData'
    // TODO: Method 'get_keyboardLayout'
    // TODO: Method 'get_behaviorCookie'
    // TODO: Method 'get_behaviorPart'
    // TODO: Method 'get_nextPage'
};
// --------------------------------------------------------
// Type: IHTMLEventObj4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLEventObj4 = *opaque{
    // TODO: Method 'get_wheelDelta'
};
// --------------------------------------------------------
// Type: IHTMLEventObj5
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLEventObj5 = *opaque{
    // TODO: Method 'put_url'
    // TODO: Method 'get_url'
    // TODO: Method 'put_data'
    // TODO: Method 'get_data'
    // TODO: Method 'get_source'
    // TODO: Method 'put_origin'
    // TODO: Method 'get_origin'
    // TODO: Method 'put_issession'
    // TODO: Method 'get_issession'
};
// --------------------------------------------------------
// Type: IHTMLEventObj6
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLEventObj6 = *opaque{
    // TODO: Method 'get_actionURL'
    // TODO: Method 'get_buttonID'
};
// --------------------------------------------------------
// Type: DispCEventObj
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispCEventObj = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLStyleMedia
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLStyleMedia = *opaque{
    // TODO: Method 'get_type'
    // TODO: Method 'matchMedium'
};
// --------------------------------------------------------
// Type: DispHTMLStyleMedia
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLStyleMedia = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLFramesCollection2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLFramesCollection2 = *opaque{
    // TODO: Method 'item'
    // TODO: Method 'get_length'
};
// --------------------------------------------------------
// Type: HTMLWindowEvents3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLWindowEvents3 = *opaque{
};
// --------------------------------------------------------
// Type: HTMLWindowEvents2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLWindowEvents2 = *opaque{
};
// --------------------------------------------------------
// Type: HTMLWindowEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLWindowEvents = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLDocument2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDocument2 = *opaque{
    // TODO: Method 'get_all'
    // TODO: Method 'get_body'
    // TODO: Method 'get_activeElement'
    // TODO: Method 'get_images'
    // TODO: Method 'get_applets'
    // TODO: Method 'get_links'
    // TODO: Method 'get_forms'
    // TODO: Method 'get_anchors'
    // TODO: Method 'put_title'
    // TODO: Method 'get_title'
    // TODO: Method 'get_scripts'
    // TODO: Method 'put_designMode'
    // TODO: Method 'get_designMode'
    // TODO: Method 'get_selection'
    // TODO: Method 'get_readyState'
    // TODO: Method 'get_frames'
    // TODO: Method 'get_embeds'
    // TODO: Method 'get_plugins'
    // TODO: Method 'put_alinkColor'
    // TODO: Method 'get_alinkColor'
    // TODO: Method 'put_bgColor'
    // TODO: Method 'get_bgColor'
    // TODO: Method 'put_fgColor'
    // TODO: Method 'get_fgColor'
    // TODO: Method 'put_linkColor'
    // TODO: Method 'get_linkColor'
    // TODO: Method 'put_vlinkColor'
    // TODO: Method 'get_vlinkColor'
    // TODO: Method 'get_referrer'
    // TODO: Method 'get_location'
    // TODO: Method 'get_lastModified'
    // TODO: Method 'put_URL'
    // TODO: Method 'get_URL'
    // TODO: Method 'put_domain'
    // TODO: Method 'get_domain'
    // TODO: Method 'put_cookie'
    // TODO: Method 'get_cookie'
    // TODO: Method 'put_expando'
    // TODO: Method 'get_expando'
    // TODO: Method 'put_charset'
    // TODO: Method 'get_charset'
    // TODO: Method 'put_defaultCharset'
    // TODO: Method 'get_defaultCharset'
    // TODO: Method 'get_mimeType'
    // TODO: Method 'get_fileSize'
    // TODO: Method 'get_fileCreatedDate'
    // TODO: Method 'get_fileModifiedDate'
    // TODO: Method 'get_fileUpdatedDate'
    // TODO: Method 'get_security'
    // TODO: Method 'get_protocol'
    // TODO: Method 'get_nameProp'
    // TODO: Method 'write'
    // TODO: Method 'writeln'
    // TODO: Method 'open'
    // TODO: Method 'close'
    // TODO: Method 'clear'
    // TODO: Method 'queryCommandSupported'
    // TODO: Method 'queryCommandEnabled'
    // TODO: Method 'queryCommandState'
    // TODO: Method 'queryCommandIndeterm'
    // TODO: Method 'queryCommandText'
    // TODO: Method 'queryCommandValue'
    // TODO: Method 'execCommand'
    // TODO: Method 'execCommandShowHelp'
    // TODO: Method 'createElement'
    // TODO: Method 'put_onhelp'
    // TODO: Method 'get_onhelp'
    // TODO: Method 'put_onclick'
    // TODO: Method 'get_onclick'
    // TODO: Method 'put_ondblclick'
    // TODO: Method 'get_ondblclick'
    // TODO: Method 'put_onkeyup'
    // TODO: Method 'get_onkeyup'
    // TODO: Method 'put_onkeydown'
    // TODO: Method 'get_onkeydown'
    // TODO: Method 'put_onkeypress'
    // TODO: Method 'get_onkeypress'
    // TODO: Method 'put_onmouseup'
    // TODO: Method 'get_onmouseup'
    // TODO: Method 'put_onmousedown'
    // TODO: Method 'get_onmousedown'
    // TODO: Method 'put_onmousemove'
    // TODO: Method 'get_onmousemove'
    // TODO: Method 'put_onmouseout'
    // TODO: Method 'get_onmouseout'
    // TODO: Method 'put_onmouseover'
    // TODO: Method 'get_onmouseover'
    // TODO: Method 'put_onreadystatechange'
    // TODO: Method 'get_onreadystatechange'
    // TODO: Method 'put_onafterupdate'
    // TODO: Method 'get_onafterupdate'
    // TODO: Method 'put_onrowexit'
    // TODO: Method 'get_onrowexit'
    // TODO: Method 'put_onrowenter'
    // TODO: Method 'get_onrowenter'
    // TODO: Method 'put_ondragstart'
    // TODO: Method 'get_ondragstart'
    // TODO: Method 'put_onselectstart'
    // TODO: Method 'get_onselectstart'
    // TODO: Method 'elementFromPoint'
    // TODO: Method 'get_parentWindow'
    // TODO: Method 'get_styleSheets'
    // TODO: Method 'put_onbeforeupdate'
    // TODO: Method 'get_onbeforeupdate'
    // TODO: Method 'put_onerrorupdate'
    // TODO: Method 'get_onerrorupdate'
    // TODO: Method 'toString'
    // TODO: Method 'createStyleSheet'
};
// --------------------------------------------------------
// Type: IHTMLWindow2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLWindow2 = *opaque{
    // TODO: Method 'get_frames'
    // TODO: Method 'put_defaultStatus'
    // TODO: Method 'get_defaultStatus'
    // TODO: Method 'put_status'
    // TODO: Method 'get_status'
    // TODO: Method 'setTimeout'
    // TODO: Method 'clearTimeout'
    // TODO: Method 'alert'
    // TODO: Method 'confirm'
    // TODO: Method 'prompt'
    // TODO: Method 'get_Image'
    // TODO: Method 'get_location'
    // TODO: Method 'get_history'
    // TODO: Method 'close'
    // TODO: Method 'put_opener'
    // TODO: Method 'get_opener'
    // TODO: Method 'get_navigator'
    // TODO: Method 'put_name'
    // TODO: Method 'get_name'
    // TODO: Method 'get_parent'
    // TODO: Method 'open'
    // TODO: Method 'get_self'
    // TODO: Method 'get_top'
    // TODO: Method 'get_window'
    // TODO: Method 'navigate'
    // TODO: Method 'put_onfocus'
    // TODO: Method 'get_onfocus'
    // TODO: Method 'put_onblur'
    // TODO: Method 'get_onblur'
    // TODO: Method 'put_onload'
    // TODO: Method 'get_onload'
    // TODO: Method 'put_onbeforeunload'
    // TODO: Method 'get_onbeforeunload'
    // TODO: Method 'put_onunload'
    // TODO: Method 'get_onunload'
    // TODO: Method 'put_onhelp'
    // TODO: Method 'get_onhelp'
    // TODO: Method 'put_onerror'
    // TODO: Method 'get_onerror'
    // TODO: Method 'put_onresize'
    // TODO: Method 'get_onresize'
    // TODO: Method 'put_onscroll'
    // TODO: Method 'get_onscroll'
    // TODO: Method 'get_document'
    // TODO: Method 'get_event'
    // TODO: Method 'get__newEnum'
    // TODO: Method 'showModalDialog'
    // TODO: Method 'showHelp'
    // TODO: Method 'get_screen'
    // TODO: Method 'get_Option'
    // TODO: Method 'focus'
    // TODO: Method 'get_closed'
    // TODO: Method 'blur'
    // TODO: Method 'scroll'
    // TODO: Method 'get_clientInformation'
    // TODO: Method 'setInterval'
    // TODO: Method 'clearInterval'
    // TODO: Method 'put_offscreenBuffering'
    // TODO: Method 'get_offscreenBuffering'
    // TODO: Method 'execScript'
    // TODO: Method 'toString'
    // TODO: Method 'scrollBy'
    // TODO: Method 'scrollTo'
    // TODO: Method 'moveTo'
    // TODO: Method 'moveBy'
    // TODO: Method 'resizeTo'
    // TODO: Method 'resizeBy'
    // TODO: Method 'get_external'
};
// --------------------------------------------------------
// Type: IHTMLWindow3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLWindow3 = *opaque{
    // TODO: Method 'get_screenLeft'
    // TODO: Method 'get_screenTop'
    // TODO: Method 'attachEvent'
    // TODO: Method 'detachEvent'
    // TODO: Method 'setTimeout'
    // TODO: Method 'setInterval'
    // TODO: Method 'print'
    // TODO: Method 'put_onbeforeprint'
    // TODO: Method 'get_onbeforeprint'
    // TODO: Method 'put_onafterprint'
    // TODO: Method 'get_onafterprint'
    // TODO: Method 'get_clipboardData'
    // TODO: Method 'showModelessDialog'
};
// --------------------------------------------------------
// Type: IHTMLFrameBase
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLFrameBase = *opaque{
    // TODO: Method 'put_src'
    // TODO: Method 'get_src'
    // TODO: Method 'put_name'
    // TODO: Method 'get_name'
    // TODO: Method 'put_border'
    // TODO: Method 'get_border'
    // TODO: Method 'put_frameBorder'
    // TODO: Method 'get_frameBorder'
    // TODO: Method 'put_frameSpacing'
    // TODO: Method 'get_frameSpacing'
    // TODO: Method 'put_marginWidth'
    // TODO: Method 'get_marginWidth'
    // TODO: Method 'put_marginHeight'
    // TODO: Method 'get_marginHeight'
    // TODO: Method 'put_noResize'
    // TODO: Method 'get_noResize'
    // TODO: Method 'put_scrolling'
    // TODO: Method 'get_scrolling'
};
// --------------------------------------------------------
// Type: IHTMLStorage
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLStorage = *opaque{
    // TODO: Method 'get_length'
    // TODO: Method 'get_remainingSpace'
    // TODO: Method 'key'
    // TODO: Method 'getItem'
    // TODO: Method 'setItem'
    // TODO: Method 'removeItem'
    // TODO: Method 'clear'
};
// --------------------------------------------------------
// Type: IHTMLPerformance
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLPerformance = *opaque{
    // TODO: Method 'get_navigation'
    // TODO: Method 'get_timing'
    // TODO: Method 'toString'
    // TODO: Method 'toJSON'
};
// --------------------------------------------------------
// Type: IHTMLApplicationCache
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLApplicationCache = *opaque{
    // TODO: Method 'get_status'
    // TODO: Method 'put_onchecking'
    // TODO: Method 'get_onchecking'
    // TODO: Method 'put_onerror'
    // TODO: Method 'get_onerror'
    // TODO: Method 'put_onnoupdate'
    // TODO: Method 'get_onnoupdate'
    // TODO: Method 'put_ondownloading'
    // TODO: Method 'get_ondownloading'
    // TODO: Method 'put_onprogress'
    // TODO: Method 'get_onprogress'
    // TODO: Method 'put_onupdateready'
    // TODO: Method 'get_onupdateready'
    // TODO: Method 'put_oncached'
    // TODO: Method 'get_oncached'
    // TODO: Method 'put_onobsolete'
    // TODO: Method 'get_onobsolete'
    // TODO: Method 'update'
    // TODO: Method 'swapCache'
    // TODO: Method 'abort'
};
// --------------------------------------------------------
// Type: IHTMLScreen
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLScreen = *opaque{
    // TODO: Method 'get_colorDepth'
    // TODO: Method 'put_bufferDepth'
    // TODO: Method 'get_bufferDepth'
    // TODO: Method 'get_width'
    // TODO: Method 'get_height'
    // TODO: Method 'put_updateInterval'
    // TODO: Method 'get_updateInterval'
    // TODO: Method 'get_availHeight'
    // TODO: Method 'get_availWidth'
    // TODO: Method 'get_fontSmoothingEnabled'
};
// --------------------------------------------------------
// Type: IHTMLScreen2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLScreen2 = *opaque{
    // TODO: Method 'get_logicalXDPI'
    // TODO: Method 'get_logicalYDPI'
    // TODO: Method 'get_deviceXDPI'
    // TODO: Method 'get_deviceYDPI'
};
// --------------------------------------------------------
// Type: IHTMLScreen3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLScreen3 = *opaque{
    // TODO: Method 'get_systemXDPI'
    // TODO: Method 'get_systemYDPI'
};
// --------------------------------------------------------
// Type: IHTMLScreen4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLScreen4 = *opaque{
    // TODO: Method 'get_pixelDepth'
};
// --------------------------------------------------------
// Type: IHTMLWindow4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLWindow4 = *opaque{
    // TODO: Method 'createPopup'
    // TODO: Method 'get_frameElement'
};
// --------------------------------------------------------
// Type: IHTMLWindow5
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLWindow5 = *opaque{
    // TODO: Method 'put_XMLHttpRequest'
    // TODO: Method 'get_XMLHttpRequest'
};
// --------------------------------------------------------
// Type: IHTMLWindow6
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLWindow6 = *opaque{
    // TODO: Method 'put_XDomainRequest'
    // TODO: Method 'get_XDomainRequest'
    // TODO: Method 'get_sessionStorage'
    // TODO: Method 'get_localStorage'
    // TODO: Method 'put_onhashchange'
    // TODO: Method 'get_onhashchange'
    // TODO: Method 'get_maxConnectionsPerServer'
    // TODO: Method 'postMessage'
    // TODO: Method 'toStaticHTML'
    // TODO: Method 'put_onmessage'
    // TODO: Method 'get_onmessage'
    // TODO: Method 'msWriteProfilerMark'
};
// --------------------------------------------------------
// Type: IHTMLWindow7
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLWindow7 = *opaque{
    // TODO: Method 'getSelection'
    // TODO: Method 'getComputedStyle'
    // TODO: Method 'get_styleMedia'
    // TODO: Method 'put_performance'
    // TODO: Method 'get_performance'
    // TODO: Method 'get_innerWidth'
    // TODO: Method 'get_innerHeight'
    // TODO: Method 'get_pageXOffset'
    // TODO: Method 'get_pageYOffset'
    // TODO: Method 'get_screenX'
    // TODO: Method 'get_screenY'
    // TODO: Method 'get_outerWidth'
    // TODO: Method 'get_outerHeight'
    // TODO: Method 'put_onabort'
    // TODO: Method 'get_onabort'
    // TODO: Method 'put_oncanplay'
    // TODO: Method 'get_oncanplay'
    // TODO: Method 'put_oncanplaythrough'
    // TODO: Method 'get_oncanplaythrough'
    // TODO: Method 'put_onchange'
    // TODO: Method 'get_onchange'
    // TODO: Method 'put_onclick'
    // TODO: Method 'get_onclick'
    // TODO: Method 'put_oncontextmenu'
    // TODO: Method 'get_oncontextmenu'
    // TODO: Method 'put_ondblclick'
    // TODO: Method 'get_ondblclick'
    // TODO: Method 'put_ondrag'
    // TODO: Method 'get_ondrag'
    // TODO: Method 'put_ondragend'
    // TODO: Method 'get_ondragend'
    // TODO: Method 'put_ondragenter'
    // TODO: Method 'get_ondragenter'
    // TODO: Method 'put_ondragleave'
    // TODO: Method 'get_ondragleave'
    // TODO: Method 'put_ondragover'
    // TODO: Method 'get_ondragover'
    // TODO: Method 'put_ondragstart'
    // TODO: Method 'get_ondragstart'
    // TODO: Method 'put_ondrop'
    // TODO: Method 'get_ondrop'
    // TODO: Method 'put_ondurationchange'
    // TODO: Method 'get_ondurationchange'
    // TODO: Method 'put_onfocusin'
    // TODO: Method 'get_onfocusin'
    // TODO: Method 'put_onfocusout'
    // TODO: Method 'get_onfocusout'
    // TODO: Method 'put_oninput'
    // TODO: Method 'get_oninput'
    // TODO: Method 'put_onemptied'
    // TODO: Method 'get_onemptied'
    // TODO: Method 'put_onended'
    // TODO: Method 'get_onended'
    // TODO: Method 'put_onkeydown'
    // TODO: Method 'get_onkeydown'
    // TODO: Method 'put_onkeypress'
    // TODO: Method 'get_onkeypress'
    // TODO: Method 'put_onkeyup'
    // TODO: Method 'get_onkeyup'
    // TODO: Method 'put_onloadeddata'
    // TODO: Method 'get_onloadeddata'
    // TODO: Method 'put_onloadedmetadata'
    // TODO: Method 'get_onloadedmetadata'
    // TODO: Method 'put_onloadstart'
    // TODO: Method 'get_onloadstart'
    // TODO: Method 'put_onmousedown'
    // TODO: Method 'get_onmousedown'
    // TODO: Method 'put_onmouseenter'
    // TODO: Method 'get_onmouseenter'
    // TODO: Method 'put_onmouseleave'
    // TODO: Method 'get_onmouseleave'
    // TODO: Method 'put_onmousemove'
    // TODO: Method 'get_onmousemove'
    // TODO: Method 'put_onmouseout'
    // TODO: Method 'get_onmouseout'
    // TODO: Method 'put_onmouseover'
    // TODO: Method 'get_onmouseover'
    // TODO: Method 'put_onmouseup'
    // TODO: Method 'get_onmouseup'
    // TODO: Method 'put_onmousewheel'
    // TODO: Method 'get_onmousewheel'
    // TODO: Method 'put_onoffline'
    // TODO: Method 'get_onoffline'
    // TODO: Method 'put_ononline'
    // TODO: Method 'get_ononline'
    // TODO: Method 'put_onprogress'
    // TODO: Method 'get_onprogress'
    // TODO: Method 'put_onratechange'
    // TODO: Method 'get_onratechange'
    // TODO: Method 'put_onreadystatechange'
    // TODO: Method 'get_onreadystatechange'
    // TODO: Method 'put_onreset'
    // TODO: Method 'get_onreset'
    // TODO: Method 'put_onseeked'
    // TODO: Method 'get_onseeked'
    // TODO: Method 'put_onseeking'
    // TODO: Method 'get_onseeking'
    // TODO: Method 'put_onselect'
    // TODO: Method 'get_onselect'
    // TODO: Method 'put_onstalled'
    // TODO: Method 'get_onstalled'
    // TODO: Method 'put_onstorage'
    // TODO: Method 'get_onstorage'
    // TODO: Method 'put_onsubmit'
    // TODO: Method 'get_onsubmit'
    // TODO: Method 'put_onsuspend'
    // TODO: Method 'get_onsuspend'
    // TODO: Method 'put_ontimeupdate'
    // TODO: Method 'get_ontimeupdate'
    // TODO: Method 'put_onpause'
    // TODO: Method 'get_onpause'
    // TODO: Method 'put_onplay'
    // TODO: Method 'get_onplay'
    // TODO: Method 'put_onplaying'
    // TODO: Method 'get_onplaying'
    // TODO: Method 'put_onvolumechange'
    // TODO: Method 'get_onvolumechange'
    // TODO: Method 'put_onwaiting'
    // TODO: Method 'get_onwaiting'
};
// --------------------------------------------------------
// Type: IHTMLWindow8
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLWindow8 = *opaque{
    // TODO: Method 'put_onmspointerdown'
    // TODO: Method 'get_onmspointerdown'
    // TODO: Method 'put_onmspointermove'
    // TODO: Method 'get_onmspointermove'
    // TODO: Method 'put_onmspointerup'
    // TODO: Method 'get_onmspointerup'
    // TODO: Method 'put_onmspointerover'
    // TODO: Method 'get_onmspointerover'
    // TODO: Method 'put_onmspointerout'
    // TODO: Method 'get_onmspointerout'
    // TODO: Method 'put_onmspointercancel'
    // TODO: Method 'get_onmspointercancel'
    // TODO: Method 'put_onmspointerhover'
    // TODO: Method 'get_onmspointerhover'
    // TODO: Method 'put_onmsgesturestart'
    // TODO: Method 'get_onmsgesturestart'
    // TODO: Method 'put_onmsgesturechange'
    // TODO: Method 'get_onmsgesturechange'
    // TODO: Method 'put_onmsgestureend'
    // TODO: Method 'get_onmsgestureend'
    // TODO: Method 'put_onmsgesturehold'
    // TODO: Method 'get_onmsgesturehold'
    // TODO: Method 'put_onmsgesturetap'
    // TODO: Method 'get_onmsgesturetap'
    // TODO: Method 'put_onmsgesturedoubletap'
    // TODO: Method 'get_onmsgesturedoubletap'
    // TODO: Method 'put_onmsinertiastart'
    // TODO: Method 'get_onmsinertiastart'
    // TODO: Method 'get_applicationCache'
    // TODO: Method 'put_onpopstate'
    // TODO: Method 'get_onpopstate'
};
// --------------------------------------------------------
// Type: DispHTMLScreen
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLScreen = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLWindow2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLWindow2 = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLWindowProxy
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLWindowProxy = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLDocumentCompatibleInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDocumentCompatibleInfo = *opaque{
    // TODO: Method 'get_userAgent'
    // TODO: Method 'get_version'
};
// --------------------------------------------------------
// Type: IHTMLDocumentCompatibleInfoCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDocumentCompatibleInfoCollection = *opaque{
    // TODO: Method 'get_length'
    // TODO: Method 'item'
};
// --------------------------------------------------------
// Type: DispHTMLDocumentCompatibleInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLDocumentCompatibleInfo = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLDocumentCompatibleInfoCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLDocumentCompatibleInfoCollection = *opaque{
};
// --------------------------------------------------------
// Type: HTMLDocumentEvents4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLDocumentEvents4 = *opaque{
};
// --------------------------------------------------------
// Type: HTMLDocumentEvents3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLDocumentEvents3 = *opaque{
};
// --------------------------------------------------------
// Type: HTMLDocumentEvents2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLDocumentEvents2 = *opaque{
};
// --------------------------------------------------------
// Type: HTMLDocumentEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLDocumentEvents = *opaque{
};
// --------------------------------------------------------
// Type: ISVGSVGElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGSVGElement = *opaque{
    // TODO: Method 'putref_x'
    // TODO: Method 'get_x'
    // TODO: Method 'putref_y'
    // TODO: Method 'get_y'
    // TODO: Method 'putref_width'
    // TODO: Method 'get_width'
    // TODO: Method 'putref_height'
    // TODO: Method 'get_height'
    // TODO: Method 'put_contentScriptType'
    // TODO: Method 'get_contentScriptType'
    // TODO: Method 'put_contentStyleType'
    // TODO: Method 'get_contentStyleType'
    // TODO: Method 'putref_viewport'
    // TODO: Method 'get_viewport'
    // TODO: Method 'put_pixelUnitToMillimeterX'
    // TODO: Method 'get_pixelUnitToMillimeterX'
    // TODO: Method 'put_pixelUnitToMillimeterY'
    // TODO: Method 'get_pixelUnitToMillimeterY'
    // TODO: Method 'put_screenPixelToMillimeterX'
    // TODO: Method 'get_screenPixelToMillimeterX'
    // TODO: Method 'put_screenPixelToMillimeterY'
    // TODO: Method 'get_screenPixelToMillimeterY'
    // TODO: Method 'put_useCurrentView'
    // TODO: Method 'get_useCurrentView'
    // TODO: Method 'putref_currentView'
    // TODO: Method 'get_currentView'
    // TODO: Method 'put_currentScale'
    // TODO: Method 'get_currentScale'
    // TODO: Method 'putref_currentTranslate'
    // TODO: Method 'get_currentTranslate'
    // TODO: Method 'suspendRedraw'
    // TODO: Method 'unsuspendRedraw'
    // TODO: Method 'unsuspendRedrawAll'
    // TODO: Method 'forceRedraw'
    // TODO: Method 'pauseAnimations'
    // TODO: Method 'unpauseAnimations'
    // TODO: Method 'animationsPaused'
    // TODO: Method 'getCurrentTime'
    // TODO: Method 'setCurrentTime'
    // TODO: Method 'getIntersectionList'
    // TODO: Method 'getEnclosureList'
    // TODO: Method 'checkIntersection'
    // TODO: Method 'checkEnclosure'
    // TODO: Method 'deselectAll'
    // TODO: Method 'createSVGNumber'
    // TODO: Method 'createSVGLength'
    // TODO: Method 'createSVGAngle'
    // TODO: Method 'createSVGPoint'
    // TODO: Method 'createSVGMatrix'
    // TODO: Method 'createSVGRect'
    // TODO: Method 'createSVGTransform'
    // TODO: Method 'createSVGTransformFromMatrix'
    // TODO: Method 'getElementById'
};
// --------------------------------------------------------
// Type: IDOMNodeIterator
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDOMNodeIterator = *opaque{
    // TODO: Method 'get_root'
    // TODO: Method 'get_whatToShow'
    // TODO: Method 'get_filter'
    // TODO: Method 'get_expandEntityReferences'
    // TODO: Method 'nextNode'
    // TODO: Method 'previousNode'
    // TODO: Method 'detach'
};
// --------------------------------------------------------
// Type: IDOMTreeWalker
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDOMTreeWalker = *opaque{
    // TODO: Method 'get_root'
    // TODO: Method 'get_whatToShow'
    // TODO: Method 'get_filter'
    // TODO: Method 'get_expandEntityReferences'
    // TODO: Method 'putref_currentNode'
    // TODO: Method 'get_currentNode'
    // TODO: Method 'parentNode'
    // TODO: Method 'firstChild'
    // TODO: Method 'lastChild'
    // TODO: Method 'previousSibling'
    // TODO: Method 'nextSibling'
    // TODO: Method 'previousNode'
    // TODO: Method 'nextNode'
};
// --------------------------------------------------------
// Type: IDOMProcessingInstruction
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDOMProcessingInstruction = *opaque{
    // TODO: Method 'get_target'
    // TODO: Method 'put_data'
    // TODO: Method 'get_data'
};
// --------------------------------------------------------
// Type: IHTMLDocument3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDocument3 = *opaque{
    // TODO: Method 'releaseCapture'
    // TODO: Method 'recalc'
    // TODO: Method 'createTextNode'
    // TODO: Method 'get_documentElement'
    // TODO: Method 'get_uniqueID'
    // TODO: Method 'attachEvent'
    // TODO: Method 'detachEvent'
    // TODO: Method 'put_onrowsdelete'
    // TODO: Method 'get_onrowsdelete'
    // TODO: Method 'put_onrowsinserted'
    // TODO: Method 'get_onrowsinserted'
    // TODO: Method 'put_oncellchange'
    // TODO: Method 'get_oncellchange'
    // TODO: Method 'put_ondatasetchanged'
    // TODO: Method 'get_ondatasetchanged'
    // TODO: Method 'put_ondataavailable'
    // TODO: Method 'get_ondataavailable'
    // TODO: Method 'put_ondatasetcomplete'
    // TODO: Method 'get_ondatasetcomplete'
    // TODO: Method 'put_onpropertychange'
    // TODO: Method 'get_onpropertychange'
    // TODO: Method 'put_dir'
    // TODO: Method 'get_dir'
    // TODO: Method 'put_oncontextmenu'
    // TODO: Method 'get_oncontextmenu'
    // TODO: Method 'put_onstop'
    // TODO: Method 'get_onstop'
    // TODO: Method 'createDocumentFragment'
    // TODO: Method 'get_parentDocument'
    // TODO: Method 'put_enableDownload'
    // TODO: Method 'get_enableDownload'
    // TODO: Method 'put_baseUrl'
    // TODO: Method 'get_baseUrl'
    // TODO: Method 'get_childNodes'
    // TODO: Method 'put_inheritStyleSheets'
    // TODO: Method 'get_inheritStyleSheets'
    // TODO: Method 'put_onbeforeeditfocus'
    // TODO: Method 'get_onbeforeeditfocus'
    // TODO: Method 'getElementsByName'
    // TODO: Method 'getElementById'
    // TODO: Method 'getElementsByTagName'
};
// --------------------------------------------------------
// Type: IHTMLDocument4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDocument4 = *opaque{
    // TODO: Method 'focus'
    // TODO: Method 'hasFocus'
    // TODO: Method 'put_onselectionchange'
    // TODO: Method 'get_onselectionchange'
    // TODO: Method 'get_namespaces'
    // TODO: Method 'createDocumentFromUrl'
    // TODO: Method 'put_media'
    // TODO: Method 'get_media'
    // TODO: Method 'createEventObject'
    // TODO: Method 'fireEvent'
    // TODO: Method 'createRenderStyle'
    // TODO: Method 'put_oncontrolselect'
    // TODO: Method 'get_oncontrolselect'
    // TODO: Method 'get_URLUnencoded'
};
// --------------------------------------------------------
// Type: IHTMLDocument5
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDocument5 = *opaque{
    // TODO: Method 'put_onmousewheel'
    // TODO: Method 'get_onmousewheel'
    // TODO: Method 'get_doctype'
    // TODO: Method 'get_implementation'
    // TODO: Method 'createAttribute'
    // TODO: Method 'createComment'
    // TODO: Method 'put_onfocusin'
    // TODO: Method 'get_onfocusin'
    // TODO: Method 'put_onfocusout'
    // TODO: Method 'get_onfocusout'
    // TODO: Method 'put_onactivate'
    // TODO: Method 'get_onactivate'
    // TODO: Method 'put_ondeactivate'
    // TODO: Method 'get_ondeactivate'
    // TODO: Method 'put_onbeforeactivate'
    // TODO: Method 'get_onbeforeactivate'
    // TODO: Method 'put_onbeforedeactivate'
    // TODO: Method 'get_onbeforedeactivate'
    // TODO: Method 'get_compatMode'
};
// --------------------------------------------------------
// Type: IHTMLDocument6
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDocument6 = *opaque{
    // TODO: Method 'get_compatible'
    // TODO: Method 'get_documentMode'
    // TODO: Method 'put_onstorage'
    // TODO: Method 'get_onstorage'
    // TODO: Method 'put_onstoragecommit'
    // TODO: Method 'get_onstoragecommit'
    // TODO: Method 'getElementById'
    // TODO: Method 'updateSettings'
};
// --------------------------------------------------------
// Type: IHTMLDocument8
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDocument8 = *opaque{
    // TODO: Method 'put_onmscontentzoom'
    // TODO: Method 'get_onmscontentzoom'
    // TODO: Method 'put_onmspointerdown'
    // TODO: Method 'get_onmspointerdown'
    // TODO: Method 'put_onmspointermove'
    // TODO: Method 'get_onmspointermove'
    // TODO: Method 'put_onmspointerup'
    // TODO: Method 'get_onmspointerup'
    // TODO: Method 'put_onmspointerover'
    // TODO: Method 'get_onmspointerover'
    // TODO: Method 'put_onmspointerout'
    // TODO: Method 'get_onmspointerout'
    // TODO: Method 'put_onmspointercancel'
    // TODO: Method 'get_onmspointercancel'
    // TODO: Method 'put_onmspointerhover'
    // TODO: Method 'get_onmspointerhover'
    // TODO: Method 'put_onmsgesturestart'
    // TODO: Method 'get_onmsgesturestart'
    // TODO: Method 'put_onmsgesturechange'
    // TODO: Method 'get_onmsgesturechange'
    // TODO: Method 'put_onmsgestureend'
    // TODO: Method 'get_onmsgestureend'
    // TODO: Method 'put_onmsgesturehold'
    // TODO: Method 'get_onmsgesturehold'
    // TODO: Method 'put_onmsgesturetap'
    // TODO: Method 'get_onmsgesturetap'
    // TODO: Method 'put_onmsgesturedoubletap'
    // TODO: Method 'get_onmsgesturedoubletap'
    // TODO: Method 'put_onmsinertiastart'
    // TODO: Method 'get_onmsinertiastart'
    // TODO: Method 'elementsFromPoint'
    // TODO: Method 'elementsFromRect'
    // TODO: Method 'put_onmsmanipulationstatechanged'
    // TODO: Method 'get_onmsmanipulationstatechanged'
    // TODO: Method 'put_msCapsLockWarningOff'
    // TODO: Method 'get_msCapsLockWarningOff'
};
// --------------------------------------------------------
// Type: IDocumentEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDocumentEvent = *opaque{
    // TODO: Method 'createEvent'
};
// --------------------------------------------------------
// Type: IDocumentRange
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDocumentRange = *opaque{
    // TODO: Method 'createRange'
};
// --------------------------------------------------------
// Type: IDocumentSelector
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDocumentSelector = *opaque{
    // TODO: Method 'querySelector'
    // TODO: Method 'querySelectorAll'
};
// --------------------------------------------------------
// Type: IDocumentTraversal
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDocumentTraversal = *opaque{
    // TODO: Method 'createNodeIterator'
    // TODO: Method 'createTreeWalker'
};
// --------------------------------------------------------
// Type: DispHTMLDocument
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLDocument = *opaque{
};
// --------------------------------------------------------
// Type: DWebBridgeEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DWebBridgeEvents = *opaque{
};
// --------------------------------------------------------
// Type: IWebBridge
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWebBridge = *opaque{
    // TODO: Method 'put_URL'
    // TODO: Method 'get_URL'
    // TODO: Method 'put_Scrollbar'
    // TODO: Method 'get_Scrollbar'
    // TODO: Method 'put_embed'
    // TODO: Method 'get_embed'
    // TODO: Method 'get_event'
    // TODO: Method 'get_readyState'
    // TODO: Method 'AboutBox'
};
// --------------------------------------------------------
// Type: IWBScriptControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWBScriptControl = *opaque{
    // TODO: Method 'raiseEvent'
    // TODO: Method 'bubbleEvent'
    // TODO: Method 'setContextMenu'
    // TODO: Method 'put_selectableContent'
    // TODO: Method 'get_selectableContent'
    // TODO: Method 'get_frozen'
    // TODO: Method 'put_scrollbar'
    // TODO: Method 'get_scrollbar'
    // TODO: Method 'get_version'
    // TODO: Method 'get_visibility'
    // TODO: Method 'put_onvisibilitychange'
    // TODO: Method 'get_onvisibilitychange'
};
// --------------------------------------------------------
// Type: IHTMLEmbedElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLEmbedElement = *opaque{
    // TODO: Method 'put_hidden'
    // TODO: Method 'get_hidden'
    // TODO: Method 'get_palette'
    // TODO: Method 'get_pluginspage'
    // TODO: Method 'put_src'
    // TODO: Method 'get_src'
    // TODO: Method 'put_units'
    // TODO: Method 'get_units'
    // TODO: Method 'put_name'
    // TODO: Method 'get_name'
    // TODO: Method 'put_width'
    // TODO: Method 'get_width'
    // TODO: Method 'put_height'
    // TODO: Method 'get_height'
};
// --------------------------------------------------------
// Type: IHTMLEmbedElement2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLEmbedElement2 = *opaque{
    // TODO: Method 'put_src'
    // TODO: Method 'get_src'
    // TODO: Method 'get_pluginspage'
};
// --------------------------------------------------------
// Type: DispHTMLEmbed
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLEmbed = *opaque{
};
// --------------------------------------------------------
// Type: HTMLMapEvents2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLMapEvents2 = *opaque{
};
// --------------------------------------------------------
// Type: HTMLMapEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLMapEvents = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLAreasCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLAreasCollection = *opaque{
    // TODO: Method 'put_length'
    // TODO: Method 'get_length'
    // TODO: Method 'get__newEnum'
    // TODO: Method 'item'
    // TODO: Method 'tags'
    // TODO: Method 'add'
    // TODO: Method 'remove'
};
// --------------------------------------------------------
// Type: IHTMLAreasCollection2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLAreasCollection2 = *opaque{
    // TODO: Method 'urns'
};
// --------------------------------------------------------
// Type: IHTMLAreasCollection3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLAreasCollection3 = *opaque{
    // TODO: Method 'namedItem'
};
// --------------------------------------------------------
// Type: IHTMLAreasCollection4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLAreasCollection4 = *opaque{
    // TODO: Method 'get_length'
    // TODO: Method 'item'
    // TODO: Method 'namedItem'
};
// --------------------------------------------------------
// Type: IHTMLMapElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLMapElement = *opaque{
    // TODO: Method 'get_areas'
    // TODO: Method 'put_name'
    // TODO: Method 'get_name'
};
// --------------------------------------------------------
// Type: DispHTMLAreasCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLAreasCollection = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLMapElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLMapElement = *opaque{
};
// --------------------------------------------------------
// Type: HTMLAreaEvents2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLAreaEvents2 = *opaque{
};
// --------------------------------------------------------
// Type: HTMLAreaEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLAreaEvents = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLAreaElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLAreaElement = *opaque{
    // TODO: Method 'put_shape'
    // TODO: Method 'get_shape'
    // TODO: Method 'put_coords'
    // TODO: Method 'get_coords'
    // TODO: Method 'put_href'
    // TODO: Method 'get_href'
    // TODO: Method 'put_target'
    // TODO: Method 'get_target'
    // TODO: Method 'put_alt'
    // TODO: Method 'get_alt'
    // TODO: Method 'put_noHref'
    // TODO: Method 'get_noHref'
    // TODO: Method 'put_host'
    // TODO: Method 'get_host'
    // TODO: Method 'put_hostname'
    // TODO: Method 'get_hostname'
    // TODO: Method 'put_pathname'
    // TODO: Method 'get_pathname'
    // TODO: Method 'put_port'
    // TODO: Method 'get_port'
    // TODO: Method 'put_protocol'
    // TODO: Method 'get_protocol'
    // TODO: Method 'put_search'
    // TODO: Method 'get_search'
    // TODO: Method 'put_hash'
    // TODO: Method 'get_hash'
    // TODO: Method 'put_onblur'
    // TODO: Method 'get_onblur'
    // TODO: Method 'put_onfocus'
    // TODO: Method 'get_onfocus'
    // TODO: Method 'put_tabIndex'
    // TODO: Method 'get_tabIndex'
    // TODO: Method 'focus'
    // TODO: Method 'blur'
};
// --------------------------------------------------------
// Type: IHTMLAreaElement2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLAreaElement2 = *opaque{
    // TODO: Method 'put_shape'
    // TODO: Method 'get_shape'
    // TODO: Method 'put_coords'
    // TODO: Method 'get_coords'
    // TODO: Method 'put_href'
    // TODO: Method 'get_href'
};
// --------------------------------------------------------
// Type: DispHTMLAreaElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLAreaElement = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLTableCaption
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLTableCaption = *opaque{
    // TODO: Method 'put_align'
    // TODO: Method 'get_align'
    // TODO: Method 'put_vAlign'
    // TODO: Method 'get_vAlign'
};
// --------------------------------------------------------
// Type: DispHTMLTableCaption
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLTableCaption = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLCommentElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLCommentElement = *opaque{
    // TODO: Method 'put_text'
    // TODO: Method 'get_text'
    // TODO: Method 'put_atomic'
    // TODO: Method 'get_atomic'
};
// --------------------------------------------------------
// Type: IHTMLCommentElement2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLCommentElement2 = *opaque{
    // TODO: Method 'put_data'
    // TODO: Method 'get_data'
    // TODO: Method 'get_length'
    // TODO: Method 'substringData'
    // TODO: Method 'appendData'
    // TODO: Method 'insertData'
    // TODO: Method 'deleteData'
    // TODO: Method 'replaceData'
};
// --------------------------------------------------------
// Type: IHTMLCommentElement3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLCommentElement3 = *opaque{
    // TODO: Method 'substringData'
    // TODO: Method 'insertData'
    // TODO: Method 'deleteData'
    // TODO: Method 'replaceData'
};
// --------------------------------------------------------
// Type: DispHTMLCommentElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLCommentElement = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLPhraseElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLPhraseElement = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLPhraseElement2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLPhraseElement2 = *opaque{
    // TODO: Method 'put_cite'
    // TODO: Method 'get_cite'
    // TODO: Method 'put_dateTime'
    // TODO: Method 'get_dateTime'
};
// --------------------------------------------------------
// Type: IHTMLPhraseElement3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLPhraseElement3 = *opaque{
    // TODO: Method 'put_cite'
    // TODO: Method 'get_cite'
};
// --------------------------------------------------------
// Type: IHTMLSpanElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLSpanElement = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLPhraseElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLPhraseElement = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLSpanElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLSpanElement = *opaque{
};
// --------------------------------------------------------
// Type: HTMLTableEvents2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLTableEvents2 = *opaque{
};
// --------------------------------------------------------
// Type: HTMLTableEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLTableEvents = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLTableSection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLTableSection = *opaque{
    // TODO: Method 'put_align'
    // TODO: Method 'get_align'
    // TODO: Method 'put_vAlign'
    // TODO: Method 'get_vAlign'
    // TODO: Method 'put_bgColor'
    // TODO: Method 'get_bgColor'
    // TODO: Method 'get_rows'
    // TODO: Method 'insertRow'
    // TODO: Method 'deleteRow'
};
// --------------------------------------------------------
// Type: IHTMLTable
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLTable = *opaque{
    // TODO: Method 'put_cols'
    // TODO: Method 'get_cols'
    // TODO: Method 'put_border'
    // TODO: Method 'get_border'
    // TODO: Method 'put_frame'
    // TODO: Method 'get_frame'
    // TODO: Method 'put_rules'
    // TODO: Method 'get_rules'
    // TODO: Method 'put_cellSpacing'
    // TODO: Method 'get_cellSpacing'
    // TODO: Method 'put_cellPadding'
    // TODO: Method 'get_cellPadding'
    // TODO: Method 'put_background'
    // TODO: Method 'get_background'
    // TODO: Method 'put_bgColor'
    // TODO: Method 'get_bgColor'
    // TODO: Method 'put_borderColor'
    // TODO: Method 'get_borderColor'
    // TODO: Method 'put_borderColorLight'
    // TODO: Method 'get_borderColorLight'
    // TODO: Method 'put_borderColorDark'
    // TODO: Method 'get_borderColorDark'
    // TODO: Method 'put_align'
    // TODO: Method 'get_align'
    // TODO: Method 'refresh'
    // TODO: Method 'get_rows'
    // TODO: Method 'put_width'
    // TODO: Method 'get_width'
    // TODO: Method 'put_height'
    // TODO: Method 'get_height'
    // TODO: Method 'put_dataPageSize'
    // TODO: Method 'get_dataPageSize'
    // TODO: Method 'nextPage'
    // TODO: Method 'previousPage'
    // TODO: Method 'get_tHead'
    // TODO: Method 'get_tFoot'
    // TODO: Method 'get_tBodies'
    // TODO: Method 'get_caption'
    // TODO: Method 'createTHead'
    // TODO: Method 'deleteTHead'
    // TODO: Method 'createTFoot'
    // TODO: Method 'deleteTFoot'
    // TODO: Method 'createCaption'
    // TODO: Method 'deleteCaption'
    // TODO: Method 'insertRow'
    // TODO: Method 'deleteRow'
    // TODO: Method 'get_readyState'
    // TODO: Method 'put_onreadystatechange'
    // TODO: Method 'get_onreadystatechange'
};
// --------------------------------------------------------
// Type: IHTMLTable2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLTable2 = *opaque{
    // TODO: Method 'firstPage'
    // TODO: Method 'lastPage'
    // TODO: Method 'get_cells'
    // TODO: Method 'moveRow'
};
// --------------------------------------------------------
// Type: IHTMLTable3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLTable3 = *opaque{
    // TODO: Method 'put_summary'
    // TODO: Method 'get_summary'
};
// --------------------------------------------------------
// Type: IHTMLTable4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLTable4 = *opaque{
    // TODO: Method 'putref_tHead'
    // TODO: Method 'get_tHead'
    // TODO: Method 'putref_tFoot'
    // TODO: Method 'get_tFoot'
    // TODO: Method 'putref_caption'
    // TODO: Method 'get_caption'
    // TODO: Method 'insertRow'
    // TODO: Method 'deleteRow'
    // TODO: Method 'createTBody'
};
// --------------------------------------------------------
// Type: IHTMLTableCol
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLTableCol = *opaque{
    // TODO: Method 'put_span'
    // TODO: Method 'get_span'
    // TODO: Method 'put_width'
    // TODO: Method 'get_width'
    // TODO: Method 'put_align'
    // TODO: Method 'get_align'
    // TODO: Method 'put_vAlign'
    // TODO: Method 'get_vAlign'
};
// --------------------------------------------------------
// Type: IHTMLTableCol2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLTableCol2 = *opaque{
    // TODO: Method 'put_ch'
    // TODO: Method 'get_ch'
    // TODO: Method 'put_chOff'
    // TODO: Method 'get_chOff'
};
// --------------------------------------------------------
// Type: IHTMLTableCol3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLTableCol3 = *opaque{
    // TODO: Method 'put_ch'
    // TODO: Method 'get_ch'
    // TODO: Method 'put_chOff'
    // TODO: Method 'get_chOff'
};
// --------------------------------------------------------
// Type: IHTMLTableSection2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLTableSection2 = *opaque{
    // TODO: Method 'moveRow'
};
// --------------------------------------------------------
// Type: IHTMLTableSection3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLTableSection3 = *opaque{
    // TODO: Method 'put_ch'
    // TODO: Method 'get_ch'
    // TODO: Method 'put_chOff'
    // TODO: Method 'get_chOff'
};
// --------------------------------------------------------
// Type: IHTMLTableSection4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLTableSection4 = *opaque{
    // TODO: Method 'put_ch'
    // TODO: Method 'get_ch'
    // TODO: Method 'put_chOff'
    // TODO: Method 'get_chOff'
    // TODO: Method 'insertRow'
    // TODO: Method 'deleteRow'
};
// --------------------------------------------------------
// Type: IHTMLTableRow
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLTableRow = *opaque{
    // TODO: Method 'put_align'
    // TODO: Method 'get_align'
    // TODO: Method 'put_vAlign'
    // TODO: Method 'get_vAlign'
    // TODO: Method 'put_bgColor'
    // TODO: Method 'get_bgColor'
    // TODO: Method 'put_borderColor'
    // TODO: Method 'get_borderColor'
    // TODO: Method 'put_borderColorLight'
    // TODO: Method 'get_borderColorLight'
    // TODO: Method 'put_borderColorDark'
    // TODO: Method 'get_borderColorDark'
    // TODO: Method 'get_rowIndex'
    // TODO: Method 'get_sectionRowIndex'
    // TODO: Method 'get_cells'
    // TODO: Method 'insertCell'
    // TODO: Method 'deleteCell'
};
// --------------------------------------------------------
// Type: IHTMLTableRow2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLTableRow2 = *opaque{
    // TODO: Method 'put_height'
    // TODO: Method 'get_height'
};
// --------------------------------------------------------
// Type: IHTMLTableRow3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLTableRow3 = *opaque{
    // TODO: Method 'put_ch'
    // TODO: Method 'get_ch'
    // TODO: Method 'put_chOff'
    // TODO: Method 'get_chOff'
};
// --------------------------------------------------------
// Type: IHTMLTableRow4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLTableRow4 = *opaque{
    // TODO: Method 'put_ch'
    // TODO: Method 'get_ch'
    // TODO: Method 'put_chOff'
    // TODO: Method 'get_chOff'
    // TODO: Method 'insertCell'
    // TODO: Method 'deleteCell'
};
// --------------------------------------------------------
// Type: IHTMLTableRowMetrics
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLTableRowMetrics = *opaque{
    // TODO: Method 'get_clientHeight'
    // TODO: Method 'get_clientWidth'
    // TODO: Method 'get_clientTop'
    // TODO: Method 'get_clientLeft'
};
// --------------------------------------------------------
// Type: IHTMLTableCell
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLTableCell = *opaque{
    // TODO: Method 'put_rowSpan'
    // TODO: Method 'get_rowSpan'
    // TODO: Method 'put_colSpan'
    // TODO: Method 'get_colSpan'
    // TODO: Method 'put_align'
    // TODO: Method 'get_align'
    // TODO: Method 'put_vAlign'
    // TODO: Method 'get_vAlign'
    // TODO: Method 'put_bgColor'
    // TODO: Method 'get_bgColor'
    // TODO: Method 'put_noWrap'
    // TODO: Method 'get_noWrap'
    // TODO: Method 'put_background'
    // TODO: Method 'get_background'
    // TODO: Method 'put_borderColor'
    // TODO: Method 'get_borderColor'
    // TODO: Method 'put_borderColorLight'
    // TODO: Method 'get_borderColorLight'
    // TODO: Method 'put_borderColorDark'
    // TODO: Method 'get_borderColorDark'
    // TODO: Method 'put_width'
    // TODO: Method 'get_width'
    // TODO: Method 'put_height'
    // TODO: Method 'get_height'
    // TODO: Method 'get_cellIndex'
};
// --------------------------------------------------------
// Type: IHTMLTableCell2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLTableCell2 = *opaque{
    // TODO: Method 'put_abbr'
    // TODO: Method 'get_abbr'
    // TODO: Method 'put_axis'
    // TODO: Method 'get_axis'
    // TODO: Method 'put_ch'
    // TODO: Method 'get_ch'
    // TODO: Method 'put_chOff'
    // TODO: Method 'get_chOff'
    // TODO: Method 'put_headers'
    // TODO: Method 'get_headers'
    // TODO: Method 'put_scope'
    // TODO: Method 'get_scope'
};
// --------------------------------------------------------
// Type: IHTMLTableCell3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLTableCell3 = *opaque{
    // TODO: Method 'put_ch'
    // TODO: Method 'get_ch'
    // TODO: Method 'put_chOff'
    // TODO: Method 'get_chOff'
};
// --------------------------------------------------------
// Type: DispHTMLTable
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLTable = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLTableCol
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLTableCol = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLTableSection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLTableSection = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLTableRow
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLTableRow = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLTableCell
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLTableCell = *opaque{
};
// --------------------------------------------------------
// Type: HTMLScriptEvents2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLScriptEvents2 = *opaque{
};
// --------------------------------------------------------
// Type: HTMLScriptEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLScriptEvents = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLScriptElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLScriptElement = *opaque{
    // TODO: Method 'put_src'
    // TODO: Method 'get_src'
    // TODO: Method 'put_htmlFor'
    // TODO: Method 'get_htmlFor'
    // TODO: Method 'put_event'
    // TODO: Method 'get_event'
    // TODO: Method 'put_text'
    // TODO: Method 'get_text'
    // TODO: Method 'put_defer'
    // TODO: Method 'get_defer'
    // TODO: Method 'get_readyState'
    // TODO: Method 'put_onerror'
    // TODO: Method 'get_onerror'
    // TODO: Method 'put_type'
    // TODO: Method 'get_type'
};
// --------------------------------------------------------
// Type: IHTMLScriptElement2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLScriptElement2 = *opaque{
    // TODO: Method 'put_charset'
    // TODO: Method 'get_charset'
};
// --------------------------------------------------------
// Type: IHTMLScriptElement3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLScriptElement3 = *opaque{
    // TODO: Method 'put_src'
    // TODO: Method 'get_src'
};
// --------------------------------------------------------
// Type: IHTMLScriptElement4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLScriptElement4 = *opaque{
    // TODO: Method 'get_usedCharset'
};
// --------------------------------------------------------
// Type: DispHTMLScriptElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLScriptElement = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLNoShowElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLNoShowElement = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLNoShowElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLNoShowElement = *opaque{
};
// --------------------------------------------------------
// Type: HTMLObjectElementEvents2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLObjectElementEvents2 = *opaque{
};
// --------------------------------------------------------
// Type: HTMLObjectElementEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLObjectElementEvents = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLObjectElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLObjectElement = *opaque{
    // TODO: Method 'get_object'
    // TODO: Method 'get_classid'
    // TODO: Method 'get_data'
    // TODO: Method 'putref_recordset'
    // TODO: Method 'get_recordset'
    // TODO: Method 'put_align'
    // TODO: Method 'get_align'
    // TODO: Method 'put_name'
    // TODO: Method 'get_name'
    // TODO: Method 'put_codeBase'
    // TODO: Method 'get_codeBase'
    // TODO: Method 'put_codeType'
    // TODO: Method 'get_codeType'
    // TODO: Method 'put_code'
    // TODO: Method 'get_code'
    // TODO: Method 'get_BaseHref'
    // TODO: Method 'put_type'
    // TODO: Method 'get_type'
    // TODO: Method 'get_form'
    // TODO: Method 'put_width'
    // TODO: Method 'get_width'
    // TODO: Method 'put_height'
    // TODO: Method 'get_height'
    // TODO: Method 'get_readyState'
    // TODO: Method 'put_onreadystatechange'
    // TODO: Method 'get_onreadystatechange'
    // TODO: Method 'put_onerror'
    // TODO: Method 'get_onerror'
    // TODO: Method 'put_altHtml'
    // TODO: Method 'get_altHtml'
    // TODO: Method 'put_vspace'
    // TODO: Method 'get_vspace'
    // TODO: Method 'put_hspace'
    // TODO: Method 'get_hspace'
};
// --------------------------------------------------------
// Type: IHTMLObjectElement2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLObjectElement2 = *opaque{
    // TODO: Method 'namedRecordset'
    // TODO: Method 'put_classid'
    // TODO: Method 'get_classid'
    // TODO: Method 'put_data'
    // TODO: Method 'get_data'
};
// --------------------------------------------------------
// Type: IHTMLObjectElement3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLObjectElement3 = *opaque{
    // TODO: Method 'put_archive'
    // TODO: Method 'get_archive'
    // TODO: Method 'put_alt'
    // TODO: Method 'get_alt'
    // TODO: Method 'put_declare'
    // TODO: Method 'get_declare'
    // TODO: Method 'put_standby'
    // TODO: Method 'get_standby'
    // TODO: Method 'put_border'
    // TODO: Method 'get_border'
    // TODO: Method 'put_useMap'
    // TODO: Method 'get_useMap'
};
// --------------------------------------------------------
// Type: IHTMLObjectElement4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLObjectElement4 = *opaque{
    // TODO: Method 'get_contentDocument'
    // TODO: Method 'put_codeBase'
    // TODO: Method 'get_codeBase'
    // TODO: Method 'put_data'
    // TODO: Method 'get_data'
};
// --------------------------------------------------------
// Type: IHTMLObjectElement5
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLObjectElement5 = *opaque{
    // TODO: Method 'put_object'
    // TODO: Method 'get_object'
};
// --------------------------------------------------------
// Type: IHTMLParamElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLParamElement = *opaque{
    // TODO: Method 'put_name'
    // TODO: Method 'get_name'
    // TODO: Method 'put_value'
    // TODO: Method 'get_value'
    // TODO: Method 'put_type'
    // TODO: Method 'get_type'
    // TODO: Method 'put_valueType'
    // TODO: Method 'get_valueType'
};
// --------------------------------------------------------
// Type: IHTMLParamElement2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLParamElement2 = *opaque{
    // TODO: Method 'put_name'
    // TODO: Method 'get_name'
    // TODO: Method 'put_type'
    // TODO: Method 'get_type'
    // TODO: Method 'put_value'
    // TODO: Method 'get_value'
    // TODO: Method 'put_valueType'
    // TODO: Method 'get_valueType'
};
// --------------------------------------------------------
// Type: DispHTMLObjectElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLObjectElement = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLParamElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLParamElement = *opaque{
};
// --------------------------------------------------------
// Type: HTMLFrameSiteEvents2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLFrameSiteEvents2 = *opaque{
};
// --------------------------------------------------------
// Type: HTMLFrameSiteEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLFrameSiteEvents = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLFrameBase2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLFrameBase2 = *opaque{
    // TODO: Method 'get_contentWindow'
    // TODO: Method 'put_onload'
    // TODO: Method 'get_onload'
    // TODO: Method 'put_onreadystatechange'
    // TODO: Method 'get_onreadystatechange'
    // TODO: Method 'get_readyState'
    // TODO: Method 'put_allowTransparency'
    // TODO: Method 'get_allowTransparency'
};
// --------------------------------------------------------
// Type: IHTMLFrameBase3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLFrameBase3 = *opaque{
    // TODO: Method 'put_longDesc'
    // TODO: Method 'get_longDesc'
};
// --------------------------------------------------------
// Type: DispHTMLFrameBase
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLFrameBase = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLFrameElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLFrameElement = *opaque{
    // TODO: Method 'put_borderColor'
    // TODO: Method 'get_borderColor'
};
// --------------------------------------------------------
// Type: IHTMLFrameElement2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLFrameElement2 = *opaque{
    // TODO: Method 'put_height'
    // TODO: Method 'get_height'
    // TODO: Method 'put_width'
    // TODO: Method 'get_width'
};
// --------------------------------------------------------
// Type: IHTMLFrameElement3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLFrameElement3 = *opaque{
    // TODO: Method 'get_contentDocument'
    // TODO: Method 'put_src'
    // TODO: Method 'get_src'
    // TODO: Method 'put_longDesc'
    // TODO: Method 'get_longDesc'
    // TODO: Method 'put_frameBorder'
    // TODO: Method 'get_frameBorder'
};
// --------------------------------------------------------
// Type: DispHTMLFrameElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLFrameElement = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLIFrameElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLIFrameElement = *opaque{
    // TODO: Method 'put_vspace'
    // TODO: Method 'get_vspace'
    // TODO: Method 'put_hspace'
    // TODO: Method 'get_hspace'
    // TODO: Method 'put_align'
    // TODO: Method 'get_align'
};
// --------------------------------------------------------
// Type: IHTMLIFrameElement2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLIFrameElement2 = *opaque{
    // TODO: Method 'put_height'
    // TODO: Method 'get_height'
    // TODO: Method 'put_width'
    // TODO: Method 'get_width'
};
// --------------------------------------------------------
// Type: IHTMLIFrameElement3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLIFrameElement3 = *opaque{
    // TODO: Method 'get_contentDocument'
    // TODO: Method 'put_src'
    // TODO: Method 'get_src'
    // TODO: Method 'put_longDesc'
    // TODO: Method 'get_longDesc'
    // TODO: Method 'put_frameBorder'
    // TODO: Method 'get_frameBorder'
};
// --------------------------------------------------------
// Type: DispHTMLIFrame
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLIFrame = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLDivPosition
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDivPosition = *opaque{
    // TODO: Method 'put_align'
    // TODO: Method 'get_align'
};
// --------------------------------------------------------
// Type: IHTMLFieldSetElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLFieldSetElement = *opaque{
    // TODO: Method 'put_align'
    // TODO: Method 'get_align'
};
// --------------------------------------------------------
// Type: IHTMLFieldSetElement2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLFieldSetElement2 = *opaque{
    // TODO: Method 'get_form'
};
// --------------------------------------------------------
// Type: IHTMLLegendElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLLegendElement = *opaque{
    // TODO: Method 'put_align'
    // TODO: Method 'get_align'
};
// --------------------------------------------------------
// Type: IHTMLLegendElement2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLLegendElement2 = *opaque{
    // TODO: Method 'get_form'
};
// --------------------------------------------------------
// Type: DispHTMLDivPosition
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLDivPosition = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLFieldSetElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLFieldSetElement = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLLegendElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLLegendElement = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLSpanFlow
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLSpanFlow = *opaque{
    // TODO: Method 'put_align'
    // TODO: Method 'get_align'
};
// --------------------------------------------------------
// Type: DispHTMLSpanFlow
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLSpanFlow = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLFrameSetElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLFrameSetElement = *opaque{
    // TODO: Method 'put_rows'
    // TODO: Method 'get_rows'
    // TODO: Method 'put_cols'
    // TODO: Method 'get_cols'
    // TODO: Method 'put_border'
    // TODO: Method 'get_border'
    // TODO: Method 'put_borderColor'
    // TODO: Method 'get_borderColor'
    // TODO: Method 'put_frameBorder'
    // TODO: Method 'get_frameBorder'
    // TODO: Method 'put_frameSpacing'
    // TODO: Method 'get_frameSpacing'
    // TODO: Method 'put_name'
    // TODO: Method 'get_name'
    // TODO: Method 'put_onload'
    // TODO: Method 'get_onload'
    // TODO: Method 'put_onunload'
    // TODO: Method 'get_onunload'
    // TODO: Method 'put_onbeforeunload'
    // TODO: Method 'get_onbeforeunload'
};
// --------------------------------------------------------
// Type: IHTMLFrameSetElement2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLFrameSetElement2 = *opaque{
    // TODO: Method 'put_onbeforeprint'
    // TODO: Method 'get_onbeforeprint'
    // TODO: Method 'put_onafterprint'
    // TODO: Method 'get_onafterprint'
};
// --------------------------------------------------------
// Type: IHTMLFrameSetElement3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLFrameSetElement3 = *opaque{
    // TODO: Method 'put_onhashchange'
    // TODO: Method 'get_onhashchange'
    // TODO: Method 'put_onmessage'
    // TODO: Method 'get_onmessage'
    // TODO: Method 'put_onoffline'
    // TODO: Method 'get_onoffline'
    // TODO: Method 'put_ononline'
    // TODO: Method 'get_ononline'
    // TODO: Method 'put_onstorage'
    // TODO: Method 'get_onstorage'
};
// --------------------------------------------------------
// Type: DispHTMLFrameSetSite
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLFrameSetSite = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLBGsound
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLBGsound = *opaque{
    // TODO: Method 'put_src'
    // TODO: Method 'get_src'
    // TODO: Method 'put_loop'
    // TODO: Method 'get_loop'
    // TODO: Method 'put_volume'
    // TODO: Method 'get_volume'
    // TODO: Method 'put_balance'
    // TODO: Method 'get_balance'
};
// --------------------------------------------------------
// Type: DispHTMLBGsound
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLBGsound = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLFontNamesCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLFontNamesCollection = *opaque{
    // TODO: Method 'get_length'
    // TODO: Method 'get__newEnum'
    // TODO: Method 'item'
};
// --------------------------------------------------------
// Type: IHTMLFontSizesCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLFontSizesCollection = *opaque{
    // TODO: Method 'get_length'
    // TODO: Method 'get__newEnum'
    // TODO: Method 'get_forFont'
    // TODO: Method 'item'
};
// --------------------------------------------------------
// Type: IHTMLOptionsHolder
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLOptionsHolder = *opaque{
    // TODO: Method 'get_document'
    // TODO: Method 'get_fonts'
    // TODO: Method 'put_execArg'
    // TODO: Method 'get_execArg'
    // TODO: Method 'put_errorLine'
    // TODO: Method 'get_errorLine'
    // TODO: Method 'put_errorCharacter'
    // TODO: Method 'get_errorCharacter'
    // TODO: Method 'put_errorCode'
    // TODO: Method 'get_errorCode'
    // TODO: Method 'put_errorMessage'
    // TODO: Method 'get_errorMessage'
    // TODO: Method 'put_errorDebug'
    // TODO: Method 'get_errorDebug'
    // TODO: Method 'get_unsecuredWindowOfDocument'
    // TODO: Method 'put_findText'
    // TODO: Method 'get_findText'
    // TODO: Method 'put_anythingAfterFrameset'
    // TODO: Method 'get_anythingAfterFrameset'
    // TODO: Method 'sizes'
    // TODO: Method 'openfiledlg'
    // TODO: Method 'savefiledlg'
    // TODO: Method 'choosecolordlg'
    // TODO: Method 'showSecurityInfo'
    // TODO: Method 'isApartmentModel'
    // TODO: Method 'getCharset'
    // TODO: Method 'get_secureConnectionInfo'
};
// --------------------------------------------------------
// Type: HTMLStyleElementEvents2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLStyleElementEvents2 = *opaque{
};
// --------------------------------------------------------
// Type: HTMLStyleElementEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLStyleElementEvents = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLStyleElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLStyleElement = *opaque{
    // TODO: Method 'put_type'
    // TODO: Method 'get_type'
    // TODO: Method 'get_readyState'
    // TODO: Method 'put_onreadystatechange'
    // TODO: Method 'get_onreadystatechange'
    // TODO: Method 'put_onload'
    // TODO: Method 'get_onload'
    // TODO: Method 'put_onerror'
    // TODO: Method 'get_onerror'
    // TODO: Method 'get_styleSheet'
    // TODO: Method 'put_disabled'
    // TODO: Method 'get_disabled'
    // TODO: Method 'put_media'
    // TODO: Method 'get_media'
};
// --------------------------------------------------------
// Type: IHTMLStyleElement2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLStyleElement2 = *opaque{
    // TODO: Method 'get_sheet'
};
// --------------------------------------------------------
// Type: DispHTMLStyleElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLStyleElement = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLStyleFontFace
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLStyleFontFace = *opaque{
    // TODO: Method 'put_fontsrc'
    // TODO: Method 'get_fontsrc'
};
// --------------------------------------------------------
// Type: IHTMLStyleFontFace2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLStyleFontFace2 = *opaque{
    // TODO: Method 'get_style'
};
// --------------------------------------------------------
// Type: DispHTMLStyleFontFace
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLStyleFontFace = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLXDomainRequest
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLXDomainRequest = *opaque{
    // TODO: Method 'get_responseText'
    // TODO: Method 'put_timeout'
    // TODO: Method 'get_timeout'
    // TODO: Method 'get_contentType'
    // TODO: Method 'put_onprogress'
    // TODO: Method 'get_onprogress'
    // TODO: Method 'put_onerror'
    // TODO: Method 'get_onerror'
    // TODO: Method 'put_ontimeout'
    // TODO: Method 'get_ontimeout'
    // TODO: Method 'put_onload'
    // TODO: Method 'get_onload'
    // TODO: Method 'abort'
    // TODO: Method 'open'
    // TODO: Method 'send'
};
// --------------------------------------------------------
// Type: IHTMLXDomainRequestFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLXDomainRequestFactory = *opaque{
    // TODO: Method 'create'
};
// --------------------------------------------------------
// Type: DispXDomainRequest
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispXDomainRequest = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLStorage2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLStorage2 = *opaque{
    // TODO: Method 'setItem'
};
// --------------------------------------------------------
// Type: DispHTMLStorage
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLStorage = *opaque{
};
// --------------------------------------------------------
// Type: IEventTarget
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEventTarget = *opaque{
    // TODO: Method 'addEventListener'
    // TODO: Method 'removeEventListener'
    // TODO: Method 'dispatchEvent'
};
// --------------------------------------------------------
// Type: DispDOMEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispDOMEvent = *opaque{
};
// --------------------------------------------------------
// Type: IDOMUIEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDOMUIEvent = *opaque{
    // TODO: Method 'get_view'
    // TODO: Method 'get_detail'
    // TODO: Method 'initUIEvent'
};
// --------------------------------------------------------
// Type: DispDOMUIEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispDOMUIEvent = *opaque{
};
// --------------------------------------------------------
// Type: IDOMMouseEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDOMMouseEvent = *opaque{
    // TODO: Method 'get_screenX'
    // TODO: Method 'get_screenY'
    // TODO: Method 'get_clientX'
    // TODO: Method 'get_clientY'
    // TODO: Method 'get_ctrlKey'
    // TODO: Method 'get_shiftKey'
    // TODO: Method 'get_altKey'
    // TODO: Method 'get_metaKey'
    // TODO: Method 'get_button'
    // TODO: Method 'get_relatedTarget'
    // TODO: Method 'initMouseEvent'
    // TODO: Method 'getModifierState'
    // TODO: Method 'get_buttons'
    // TODO: Method 'get_fromElement'
    // TODO: Method 'get_toElement'
    // TODO: Method 'get_x'
    // TODO: Method 'get_y'
    // TODO: Method 'get_offsetX'
    // TODO: Method 'get_offsetY'
    // TODO: Method 'get_pageX'
    // TODO: Method 'get_pageY'
    // TODO: Method 'get_layerX'
    // TODO: Method 'get_layerY'
    // TODO: Method 'get_which'
};
// --------------------------------------------------------
// Type: DispDOMMouseEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispDOMMouseEvent = *opaque{
};
// --------------------------------------------------------
// Type: IDOMDragEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDOMDragEvent = *opaque{
    // TODO: Method 'get_dataTransfer'
    // TODO: Method 'initDragEvent'
};
// --------------------------------------------------------
// Type: DispDOMDragEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispDOMDragEvent = *opaque{
};
// --------------------------------------------------------
// Type: IDOMMouseWheelEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDOMMouseWheelEvent = *opaque{
    // TODO: Method 'get_wheelDelta'
    // TODO: Method 'initMouseWheelEvent'
};
// --------------------------------------------------------
// Type: DispDOMMouseWheelEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispDOMMouseWheelEvent = *opaque{
};
// --------------------------------------------------------
// Type: IDOMWheelEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDOMWheelEvent = *opaque{
    // TODO: Method 'get_deltaX'
    // TODO: Method 'get_deltaY'
    // TODO: Method 'get_deltaZ'
    // TODO: Method 'get_deltaMode'
    // TODO: Method 'initWheelEvent'
};
// --------------------------------------------------------
// Type: DispDOMWheelEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispDOMWheelEvent = *opaque{
};
// --------------------------------------------------------
// Type: IDOMTextEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDOMTextEvent = *opaque{
    // TODO: Method 'get_data'
    // TODO: Method 'get_inputMethod'
    // TODO: Method 'initTextEvent'
    // TODO: Method 'get_locale'
};
// --------------------------------------------------------
// Type: DispDOMTextEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispDOMTextEvent = *opaque{
};
// --------------------------------------------------------
// Type: IDOMKeyboardEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDOMKeyboardEvent = *opaque{
    // TODO: Method 'get_key'
    // TODO: Method 'get_location'
    // TODO: Method 'get_ctrlKey'
    // TODO: Method 'get_shiftKey'
    // TODO: Method 'get_altKey'
    // TODO: Method 'get_metaKey'
    // TODO: Method 'get_repeat'
    // TODO: Method 'getModifierState'
    // TODO: Method 'initKeyboardEvent'
    // TODO: Method 'get_keyCode'
    // TODO: Method 'get_charCode'
    // TODO: Method 'get_which'
    // TODO: Method 'get_ie9_char'
    // TODO: Method 'get_locale'
};
// --------------------------------------------------------
// Type: DispDOMKeyboardEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispDOMKeyboardEvent = *opaque{
};
// --------------------------------------------------------
// Type: IDOMCompositionEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDOMCompositionEvent = *opaque{
    // TODO: Method 'get_data'
    // TODO: Method 'initCompositionEvent'
    // TODO: Method 'get_locale'
};
// --------------------------------------------------------
// Type: DispDOMCompositionEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispDOMCompositionEvent = *opaque{
};
// --------------------------------------------------------
// Type: IDOMMutationEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDOMMutationEvent = *opaque{
    // TODO: Method 'get_relatedNode'
    // TODO: Method 'get_prevValue'
    // TODO: Method 'get_newValue'
    // TODO: Method 'get_attrName'
    // TODO: Method 'get_attrChange'
    // TODO: Method 'initMutationEvent'
};
// --------------------------------------------------------
// Type: DispDOMMutationEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispDOMMutationEvent = *opaque{
};
// --------------------------------------------------------
// Type: IDOMBeforeUnloadEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDOMBeforeUnloadEvent = *opaque{
    // TODO: Method 'put_returnValue'
    // TODO: Method 'get_returnValue'
};
// --------------------------------------------------------
// Type: DispDOMBeforeUnloadEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispDOMBeforeUnloadEvent = *opaque{
};
// --------------------------------------------------------
// Type: IDOMFocusEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDOMFocusEvent = *opaque{
    // TODO: Method 'get_relatedTarget'
    // TODO: Method 'initFocusEvent'
};
// --------------------------------------------------------
// Type: DispDOMFocusEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispDOMFocusEvent = *opaque{
};
// --------------------------------------------------------
// Type: IDOMCustomEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDOMCustomEvent = *opaque{
    // TODO: Method 'get_detail'
    // TODO: Method 'initCustomEvent'
};
// --------------------------------------------------------
// Type: DispDOMCustomEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispDOMCustomEvent = *opaque{
};
// --------------------------------------------------------
// Type: ICanvasGradient
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICanvasGradient = *opaque{
    // TODO: Method 'addColorStop'
};
// --------------------------------------------------------
// Type: ICanvasPattern
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICanvasPattern = *opaque{
};
// --------------------------------------------------------
// Type: ICanvasTextMetrics
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICanvasTextMetrics = *opaque{
    // TODO: Method 'get_width'
};
// --------------------------------------------------------
// Type: ICanvasImageData
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICanvasImageData = *opaque{
    // TODO: Method 'get_width'
    // TODO: Method 'get_height'
    // TODO: Method 'get_data'
};
// --------------------------------------------------------
// Type: ICanvasPixelArray
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICanvasPixelArray = *opaque{
    // TODO: Method 'get_length'
};
// --------------------------------------------------------
// Type: IHTMLCanvasElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLCanvasElement = *opaque{
    // TODO: Method 'put_width'
    // TODO: Method 'get_width'
    // TODO: Method 'put_height'
    // TODO: Method 'get_height'
    // TODO: Method 'getContext'
    // TODO: Method 'toDataURL'
};
// --------------------------------------------------------
// Type: ICanvasRenderingContext2D
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICanvasRenderingContext2D = *opaque{
    // TODO: Method 'get_canvas'
    // TODO: Method 'restore'
    // TODO: Method 'save'
    // TODO: Method 'rotate'
    // TODO: Method 'scale'
    // TODO: Method 'setTransform'
    // TODO: Method 'transform'
    // TODO: Method 'translate'
    // TODO: Method 'put_globalAlpha'
    // TODO: Method 'get_globalAlpha'
    // TODO: Method 'put_globalCompositeOperation'
    // TODO: Method 'get_globalCompositeOperation'
    // TODO: Method 'put_fillStyle'
    // TODO: Method 'get_fillStyle'
    // TODO: Method 'put_strokeStyle'
    // TODO: Method 'get_strokeStyle'
    // TODO: Method 'createLinearGradient'
    // TODO: Method 'createRadialGradient'
    // TODO: Method 'createPattern'
    // TODO: Method 'put_lineCap'
    // TODO: Method 'get_lineCap'
    // TODO: Method 'put_lineJoin'
    // TODO: Method 'get_lineJoin'
    // TODO: Method 'put_lineWidth'
    // TODO: Method 'get_lineWidth'
    // TODO: Method 'put_miterLimit'
    // TODO: Method 'get_miterLimit'
    // TODO: Method 'put_shadowBlur'
    // TODO: Method 'get_shadowBlur'
    // TODO: Method 'put_shadowColor'
    // TODO: Method 'get_shadowColor'
    // TODO: Method 'put_shadowOffsetX'
    // TODO: Method 'get_shadowOffsetX'
    // TODO: Method 'put_shadowOffsetY'
    // TODO: Method 'get_shadowOffsetY'
    // TODO: Method 'clearRect'
    // TODO: Method 'fillRect'
    // TODO: Method 'strokeRect'
    // TODO: Method 'arc'
    // TODO: Method 'arcTo'
    // TODO: Method 'beginPath'
    // TODO: Method 'bezierCurveTo'
    // TODO: Method 'clip'
    // TODO: Method 'closePath'
    // TODO: Method 'fill'
    // TODO: Method 'lineTo'
    // TODO: Method 'moveTo'
    // TODO: Method 'quadraticCurveTo'
    // TODO: Method 'rect'
    // TODO: Method 'stroke'
    // TODO: Method 'isPointInPath'
    // TODO: Method 'put_font'
    // TODO: Method 'get_font'
    // TODO: Method 'put_textAlign'
    // TODO: Method 'get_textAlign'
    // TODO: Method 'put_textBaseline'
    // TODO: Method 'get_textBaseline'
    // TODO: Method 'fillText'
    // TODO: Method 'measureText'
    // TODO: Method 'strokeText'
    // TODO: Method 'drawImage'
    // TODO: Method 'createImageData'
    // TODO: Method 'getImageData'
    // TODO: Method 'putImageData'
};
// --------------------------------------------------------
// Type: DispCanvasGradient
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispCanvasGradient = *opaque{
};
// --------------------------------------------------------
// Type: DispCanvasPattern
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispCanvasPattern = *opaque{
};
// --------------------------------------------------------
// Type: DispCanvasTextMetrics
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispCanvasTextMetrics = *opaque{
};
// --------------------------------------------------------
// Type: DispCanvasImageData
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispCanvasImageData = *opaque{
};
// --------------------------------------------------------
// Type: DispCanvasRenderingContext2D
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispCanvasRenderingContext2D = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLCanvasElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLCanvasElement = *opaque{
};
// --------------------------------------------------------
// Type: IDOMProgressEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDOMProgressEvent = *opaque{
    // TODO: Method 'get_lengthComputable'
    // TODO: Method 'get_loaded'
    // TODO: Method 'get_total'
    // TODO: Method 'initProgressEvent'
};
// --------------------------------------------------------
// Type: DispDOMProgressEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispDOMProgressEvent = *opaque{
};
// --------------------------------------------------------
// Type: IDOMMessageEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDOMMessageEvent = *opaque{
    // TODO: Method 'get_data'
    // TODO: Method 'get_origin'
    // TODO: Method 'get_source'
    // TODO: Method 'initMessageEvent'
};
// --------------------------------------------------------
// Type: DispDOMMessageEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispDOMMessageEvent = *opaque{
};
// --------------------------------------------------------
// Type: IDOMSiteModeEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDOMSiteModeEvent = *opaque{
    // TODO: Method 'get_buttonID'
    // TODO: Method 'get_actionURL'
};
// --------------------------------------------------------
// Type: DispDOMSiteModeEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispDOMSiteModeEvent = *opaque{
};
// --------------------------------------------------------
// Type: IDOMStorageEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDOMStorageEvent = *opaque{
    // TODO: Method 'get_key'
    // TODO: Method 'get_oldValue'
    // TODO: Method 'get_newValue'
    // TODO: Method 'get_url'
    // TODO: Method 'get_storageArea'
    // TODO: Method 'initStorageEvent'
};
// --------------------------------------------------------
// Type: DispDOMStorageEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispDOMStorageEvent = *opaque{
};
// --------------------------------------------------------
// Type: IXMLHttpRequestEventTarget
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLHttpRequestEventTarget = *opaque{
};
// --------------------------------------------------------
// Type: DispXMLHttpRequestEventTarget
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispXMLHttpRequestEventTarget = *opaque{
};
// --------------------------------------------------------
// Type: HTMLXMLHttpRequestEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLXMLHttpRequestEvents = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLXMLHttpRequest
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLXMLHttpRequest = *opaque{
    // TODO: Method 'get_readyState'
    // TODO: Method 'get_responseBody'
    // TODO: Method 'get_responseText'
    // TODO: Method 'get_responseXML'
    // TODO: Method 'get_status'
    // TODO: Method 'get_statusText'
    // TODO: Method 'put_onreadystatechange'
    // TODO: Method 'get_onreadystatechange'
    // TODO: Method 'abort'
    // TODO: Method 'open'
    // TODO: Method 'send'
    // TODO: Method 'getAllResponseHeaders'
    // TODO: Method 'getResponseHeader'
    // TODO: Method 'setRequestHeader'
};
// --------------------------------------------------------
// Type: IHTMLXMLHttpRequest2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLXMLHttpRequest2 = *opaque{
    // TODO: Method 'put_timeout'
    // TODO: Method 'get_timeout'
    // TODO: Method 'put_ontimeout'
    // TODO: Method 'get_ontimeout'
};
// --------------------------------------------------------
// Type: IHTMLXMLHttpRequestFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLXMLHttpRequestFactory = *opaque{
    // TODO: Method 'create'
};
// --------------------------------------------------------
// Type: DispHTMLXMLHttpRequest
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLXMLHttpRequest = *opaque{
};
// --------------------------------------------------------
// Type: ISVGAngle
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGAngle = *opaque{
    // TODO: Method 'put_unitType'
    // TODO: Method 'get_unitType'
    // TODO: Method 'put_value'
    // TODO: Method 'get_value'
    // TODO: Method 'put_valueInSpecifiedUnits'
    // TODO: Method 'get_valueInSpecifiedUnits'
    // TODO: Method 'put_valueAsString'
    // TODO: Method 'get_valueAsString'
    // TODO: Method 'newValueSpecifiedUnits'
    // TODO: Method 'convertToSpecifiedUnits'
};
// --------------------------------------------------------
// Type: ISVGElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGElement = *opaque{
    // TODO: Method 'put_xmlbase'
    // TODO: Method 'get_xmlbase'
    // TODO: Method 'putref_ownerSVGElement'
    // TODO: Method 'get_ownerSVGElement'
    // TODO: Method 'putref_viewportElement'
    // TODO: Method 'get_viewportElement'
    // TODO: Method 'putref_focusable'
    // TODO: Method 'get_focusable'
};
// --------------------------------------------------------
// Type: ISVGRect
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGRect = *opaque{
    // TODO: Method 'put_x'
    // TODO: Method 'get_x'
    // TODO: Method 'put_y'
    // TODO: Method 'get_y'
    // TODO: Method 'put_width'
    // TODO: Method 'get_width'
    // TODO: Method 'put_height'
    // TODO: Method 'get_height'
};
// --------------------------------------------------------
// Type: ISVGMatrix
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGMatrix = *opaque{
    // TODO: Method 'put_a'
    // TODO: Method 'get_a'
    // TODO: Method 'put_b'
    // TODO: Method 'get_b'
    // TODO: Method 'put_c'
    // TODO: Method 'get_c'
    // TODO: Method 'put_d'
    // TODO: Method 'get_d'
    // TODO: Method 'put_e'
    // TODO: Method 'get_e'
    // TODO: Method 'put_f'
    // TODO: Method 'get_f'
    // TODO: Method 'multiply'
    // TODO: Method 'inverse'
    // TODO: Method 'translate'
    // TODO: Method 'scale'
    // TODO: Method 'scaleNonUniform'
    // TODO: Method 'rotate'
    // TODO: Method 'rotateFromVector'
    // TODO: Method 'flipX'
    // TODO: Method 'flipY'
    // TODO: Method 'skewX'
    // TODO: Method 'skewY'
};
// --------------------------------------------------------
// Type: ISVGStringList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGStringList = *opaque{
    // TODO: Method 'put_numberOfItems'
    // TODO: Method 'get_numberOfItems'
    // TODO: Method 'clear'
    // TODO: Method 'initialize'
    // TODO: Method 'getItem'
    // TODO: Method 'insertItemBefore'
    // TODO: Method 'replaceItem'
    // TODO: Method 'removeItem'
    // TODO: Method 'appendItem'
};
// --------------------------------------------------------
// Type: ISVGAnimatedRect
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGAnimatedRect = *opaque{
    // TODO: Method 'putref_baseVal'
    // TODO: Method 'get_baseVal'
    // TODO: Method 'putref_animVal'
    // TODO: Method 'get_animVal'
};
// --------------------------------------------------------
// Type: ISVGAnimatedString
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGAnimatedString = *opaque{
    // TODO: Method 'put_baseVal'
    // TODO: Method 'get_baseVal'
    // TODO: Method 'get_animVal'
};
// --------------------------------------------------------
// Type: ISVGAnimatedBoolean
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGAnimatedBoolean = *opaque{
    // TODO: Method 'put_baseVal'
    // TODO: Method 'get_baseVal'
    // TODO: Method 'put_animVal'
    // TODO: Method 'get_animVal'
};
// --------------------------------------------------------
// Type: ISVGAnimatedTransformList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGAnimatedTransformList = *opaque{
    // TODO: Method 'putref_baseVal'
    // TODO: Method 'get_baseVal'
    // TODO: Method 'putref_animVal'
    // TODO: Method 'get_animVal'
};
// --------------------------------------------------------
// Type: ISVGAnimatedPreserveAspectRatio
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGAnimatedPreserveAspectRatio = *opaque{
    // TODO: Method 'putref_baseVal'
    // TODO: Method 'get_baseVal'
    // TODO: Method 'putref_animVal'
    // TODO: Method 'get_animVal'
};
// --------------------------------------------------------
// Type: ISVGStylable
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGStylable = *opaque{
    // TODO: Method 'get_className'
};
// --------------------------------------------------------
// Type: ISVGLocatable
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGLocatable = *opaque{
    // TODO: Method 'get_nearestViewportElement'
    // TODO: Method 'get_farthestViewportElement'
    // TODO: Method 'getBBox'
    // TODO: Method 'getCTM'
    // TODO: Method 'getScreenCTM'
    // TODO: Method 'getTransformToElement'
};
// --------------------------------------------------------
// Type: ISVGTransformable
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGTransformable = *opaque{
    // TODO: Method 'get_transform'
};
// --------------------------------------------------------
// Type: ISVGTests
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGTests = *opaque{
    // TODO: Method 'get_requiredFeatures'
    // TODO: Method 'get_requiredExtensions'
    // TODO: Method 'get_systemLanguage'
    // TODO: Method 'hasExtension'
};
// --------------------------------------------------------
// Type: ISVGLangSpace
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGLangSpace = *opaque{
    // TODO: Method 'put_xmllang'
    // TODO: Method 'get_xmllang'
    // TODO: Method 'put_xmlspace'
    // TODO: Method 'get_xmlspace'
};
// --------------------------------------------------------
// Type: ISVGExternalResourcesRequired
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGExternalResourcesRequired = *opaque{
    // TODO: Method 'get_externalResourcesRequired'
};
// --------------------------------------------------------
// Type: ISVGFitToViewBox
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGFitToViewBox = *opaque{
    // TODO: Method 'get_viewBox'
    // TODO: Method 'putref_preserveAspectRatio'
    // TODO: Method 'get_preserveAspectRatio'
};
// --------------------------------------------------------
// Type: ISVGZoomAndPan
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGZoomAndPan = *opaque{
    // TODO: Method 'get_zoomAndPan'
};
// --------------------------------------------------------
// Type: ISVGURIReference
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGURIReference = *opaque{
    // TODO: Method 'get_href'
};
// --------------------------------------------------------
// Type: ISVGAnimatedAngle
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGAnimatedAngle = *opaque{
    // TODO: Method 'putref_baseVal'
    // TODO: Method 'get_baseVal'
    // TODO: Method 'putref_animVal'
    // TODO: Method 'get_animVal'
};
// --------------------------------------------------------
// Type: ISVGTransformList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGTransformList = *opaque{
    // TODO: Method 'put_numberOfItems'
    // TODO: Method 'get_numberOfItems'
    // TODO: Method 'clear'
    // TODO: Method 'initialize'
    // TODO: Method 'getItem'
    // TODO: Method 'insertItemBefore'
    // TODO: Method 'replaceItem'
    // TODO: Method 'removeItem'
    // TODO: Method 'appendItem'
    // TODO: Method 'createSVGTransformFromMatrix'
    // TODO: Method 'consolidate'
};
// --------------------------------------------------------
// Type: ISVGAnimatedEnumeration
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGAnimatedEnumeration = *opaque{
    // TODO: Method 'put_baseVal'
    // TODO: Method 'get_baseVal'
    // TODO: Method 'put_animVal'
    // TODO: Method 'get_animVal'
};
// --------------------------------------------------------
// Type: ISVGAnimatedInteger
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGAnimatedInteger = *opaque{
    // TODO: Method 'put_baseVal'
    // TODO: Method 'get_baseVal'
    // TODO: Method 'put_animVal'
    // TODO: Method 'get_animVal'
};
// --------------------------------------------------------
// Type: ISVGLength
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGLength = *opaque{
    // TODO: Method 'put_unitType'
    // TODO: Method 'get_unitType'
    // TODO: Method 'put_value'
    // TODO: Method 'get_value'
    // TODO: Method 'put_valueInSpecifiedUnits'
    // TODO: Method 'get_valueInSpecifiedUnits'
    // TODO: Method 'put_valueAsString'
    // TODO: Method 'get_valueAsString'
    // TODO: Method 'newValueSpecifiedUnits'
    // TODO: Method 'convertToSpecifiedUnits'
};
// --------------------------------------------------------
// Type: ISVGAnimatedLength
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGAnimatedLength = *opaque{
    // TODO: Method 'putref_baseVal'
    // TODO: Method 'get_baseVal'
    // TODO: Method 'putref_animVal'
    // TODO: Method 'get_animVal'
};
// --------------------------------------------------------
// Type: ISVGLengthList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGLengthList = *opaque{
    // TODO: Method 'put_numberOfItems'
    // TODO: Method 'get_numberOfItems'
    // TODO: Method 'clear'
    // TODO: Method 'initialize'
    // TODO: Method 'getItem'
    // TODO: Method 'insertItemBefore'
    // TODO: Method 'replaceItem'
    // TODO: Method 'removeItem'
    // TODO: Method 'appendItem'
};
// --------------------------------------------------------
// Type: ISVGAnimatedLengthList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGAnimatedLengthList = *opaque{
    // TODO: Method 'putref_baseVal'
    // TODO: Method 'get_baseVal'
    // TODO: Method 'putref_animVal'
    // TODO: Method 'get_animVal'
};
// --------------------------------------------------------
// Type: ISVGNumber
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGNumber = *opaque{
    // TODO: Method 'put_value'
    // TODO: Method 'get_value'
};
// --------------------------------------------------------
// Type: ISVGAnimatedNumber
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGAnimatedNumber = *opaque{
    // TODO: Method 'put_baseVal'
    // TODO: Method 'get_baseVal'
    // TODO: Method 'put_animVal'
    // TODO: Method 'get_animVal'
};
// --------------------------------------------------------
// Type: ISVGNumberList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGNumberList = *opaque{
    // TODO: Method 'put_numberOfItems'
    // TODO: Method 'get_numberOfItems'
    // TODO: Method 'clear'
    // TODO: Method 'initialize'
    // TODO: Method 'getItem'
    // TODO: Method 'insertItemBefore'
    // TODO: Method 'replaceItem'
    // TODO: Method 'removeItem'
    // TODO: Method 'appendItem'
};
// --------------------------------------------------------
// Type: ISVGAnimatedNumberList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGAnimatedNumberList = *opaque{
    // TODO: Method 'putref_baseVal'
    // TODO: Method 'get_baseVal'
    // TODO: Method 'putref_animVal'
    // TODO: Method 'get_animVal'
};
// --------------------------------------------------------
// Type: ISVGClipPathElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGClipPathElement = *opaque{
    // TODO: Method 'putref_clipPathUnits'
    // TODO: Method 'get_clipPathUnits'
};
// --------------------------------------------------------
// Type: DispSVGClipPathElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGClipPathElement = *opaque{
};
// --------------------------------------------------------
// Type: ISVGDocument
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGDocument = *opaque{
    // TODO: Method 'get_rootElement'
};
// --------------------------------------------------------
// Type: IGetSVGDocument
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IGetSVGDocument = *opaque{
    // TODO: Method 'getSVGDocument'
};
// --------------------------------------------------------
// Type: DispSVGElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGElement = *opaque{
};
// --------------------------------------------------------
// Type: IICCSVGColor
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IICCSVGColor = *opaque{
};
// --------------------------------------------------------
// Type: ISVGPaint
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGPaint = *opaque{
};
// --------------------------------------------------------
// Type: ISVGPatternElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGPatternElement = *opaque{
    // TODO: Method 'putref_patternUnits'
    // TODO: Method 'get_patternUnits'
    // TODO: Method 'putref_patternContentUnits'
    // TODO: Method 'get_patternContentUnits'
    // TODO: Method 'putref_patternTransform'
    // TODO: Method 'get_patternTransform'
    // TODO: Method 'putref_x'
    // TODO: Method 'get_x'
    // TODO: Method 'putref_y'
    // TODO: Method 'get_y'
    // TODO: Method 'putref_width'
    // TODO: Method 'get_width'
    // TODO: Method 'putref_height'
    // TODO: Method 'get_height'
};
// --------------------------------------------------------
// Type: DispSVGPatternElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGPatternElement = *opaque{
};
// --------------------------------------------------------
// Type: ISVGPathSeg
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGPathSeg = *opaque{
    // TODO: Method 'put_pathSegType'
    // TODO: Method 'get_pathSegType'
    // TODO: Method 'get_pathSegTypeAsLetter'
};
// --------------------------------------------------------
// Type: ISVGPathSegArcAbs
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGPathSegArcAbs = *opaque{
    // TODO: Method 'put_x'
    // TODO: Method 'get_x'
    // TODO: Method 'put_y'
    // TODO: Method 'get_y'
    // TODO: Method 'put_r1'
    // TODO: Method 'get_r1'
    // TODO: Method 'put_r2'
    // TODO: Method 'get_r2'
    // TODO: Method 'put_angle'
    // TODO: Method 'get_angle'
    // TODO: Method 'put_largeArcFlag'
    // TODO: Method 'get_largeArcFlag'
    // TODO: Method 'put_sweepFlag'
    // TODO: Method 'get_sweepFlag'
};
// --------------------------------------------------------
// Type: ISVGPathSegArcRel
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGPathSegArcRel = *opaque{
    // TODO: Method 'put_x'
    // TODO: Method 'get_x'
    // TODO: Method 'put_y'
    // TODO: Method 'get_y'
    // TODO: Method 'put_r1'
    // TODO: Method 'get_r1'
    // TODO: Method 'put_r2'
    // TODO: Method 'get_r2'
    // TODO: Method 'put_angle'
    // TODO: Method 'get_angle'
    // TODO: Method 'put_largeArcFlag'
    // TODO: Method 'get_largeArcFlag'
    // TODO: Method 'put_sweepFlag'
    // TODO: Method 'get_sweepFlag'
};
// --------------------------------------------------------
// Type: ISVGPathSegClosePath
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGPathSegClosePath = *opaque{
};
// --------------------------------------------------------
// Type: ISVGPathSegMovetoAbs
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGPathSegMovetoAbs = *opaque{
    // TODO: Method 'put_x'
    // TODO: Method 'get_x'
    // TODO: Method 'put_y'
    // TODO: Method 'get_y'
};
// --------------------------------------------------------
// Type: ISVGPathSegMovetoRel
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGPathSegMovetoRel = *opaque{
    // TODO: Method 'put_x'
    // TODO: Method 'get_x'
    // TODO: Method 'put_y'
    // TODO: Method 'get_y'
};
// --------------------------------------------------------
// Type: ISVGPathSegLinetoAbs
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGPathSegLinetoAbs = *opaque{
    // TODO: Method 'put_x'
    // TODO: Method 'get_x'
    // TODO: Method 'put_y'
    // TODO: Method 'get_y'
};
// --------------------------------------------------------
// Type: ISVGPathSegLinetoRel
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGPathSegLinetoRel = *opaque{
    // TODO: Method 'put_x'
    // TODO: Method 'get_x'
    // TODO: Method 'put_y'
    // TODO: Method 'get_y'
};
// --------------------------------------------------------
// Type: ISVGPathSegCurvetoCubicAbs
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGPathSegCurvetoCubicAbs = *opaque{
    // TODO: Method 'put_x'
    // TODO: Method 'get_x'
    // TODO: Method 'put_y'
    // TODO: Method 'get_y'
    // TODO: Method 'put_x1'
    // TODO: Method 'get_x1'
    // TODO: Method 'put_y1'
    // TODO: Method 'get_y1'
    // TODO: Method 'put_x2'
    // TODO: Method 'get_x2'
    // TODO: Method 'put_y2'
    // TODO: Method 'get_y2'
};
// --------------------------------------------------------
// Type: ISVGPathSegCurvetoCubicRel
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGPathSegCurvetoCubicRel = *opaque{
    // TODO: Method 'put_x'
    // TODO: Method 'get_x'
    // TODO: Method 'put_y'
    // TODO: Method 'get_y'
    // TODO: Method 'put_x1'
    // TODO: Method 'get_x1'
    // TODO: Method 'put_y1'
    // TODO: Method 'get_y1'
    // TODO: Method 'put_x2'
    // TODO: Method 'get_x2'
    // TODO: Method 'put_y2'
    // TODO: Method 'get_y2'
};
// --------------------------------------------------------
// Type: ISVGPathSegCurvetoCubicSmoothAbs
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGPathSegCurvetoCubicSmoothAbs = *opaque{
    // TODO: Method 'put_x'
    // TODO: Method 'get_x'
    // TODO: Method 'put_y'
    // TODO: Method 'get_y'
    // TODO: Method 'put_x2'
    // TODO: Method 'get_x2'
    // TODO: Method 'put_y2'
    // TODO: Method 'get_y2'
};
// --------------------------------------------------------
// Type: ISVGPathSegCurvetoCubicSmoothRel
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGPathSegCurvetoCubicSmoothRel = *opaque{
    // TODO: Method 'put_x'
    // TODO: Method 'get_x'
    // TODO: Method 'put_y'
    // TODO: Method 'get_y'
    // TODO: Method 'put_x2'
    // TODO: Method 'get_x2'
    // TODO: Method 'put_y2'
    // TODO: Method 'get_y2'
};
// --------------------------------------------------------
// Type: ISVGPathSegCurvetoQuadraticAbs
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGPathSegCurvetoQuadraticAbs = *opaque{
    // TODO: Method 'put_x'
    // TODO: Method 'get_x'
    // TODO: Method 'put_y'
    // TODO: Method 'get_y'
    // TODO: Method 'put_x1'
    // TODO: Method 'get_x1'
    // TODO: Method 'put_y1'
    // TODO: Method 'get_y1'
};
// --------------------------------------------------------
// Type: ISVGPathSegCurvetoQuadraticRel
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGPathSegCurvetoQuadraticRel = *opaque{
    // TODO: Method 'put_x'
    // TODO: Method 'get_x'
    // TODO: Method 'put_y'
    // TODO: Method 'get_y'
    // TODO: Method 'put_x1'
    // TODO: Method 'get_x1'
    // TODO: Method 'put_y1'
    // TODO: Method 'get_y1'
};
// --------------------------------------------------------
// Type: ISVGPathSegCurvetoQuadraticSmoothAbs
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGPathSegCurvetoQuadraticSmoothAbs = *opaque{
    // TODO: Method 'put_x'
    // TODO: Method 'get_x'
    // TODO: Method 'put_y'
    // TODO: Method 'get_y'
};
// --------------------------------------------------------
// Type: ISVGPathSegCurvetoQuadraticSmoothRel
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGPathSegCurvetoQuadraticSmoothRel = *opaque{
    // TODO: Method 'put_x'
    // TODO: Method 'get_x'
    // TODO: Method 'put_y'
    // TODO: Method 'get_y'
};
// --------------------------------------------------------
// Type: ISVGPathSegLinetoHorizontalAbs
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGPathSegLinetoHorizontalAbs = *opaque{
    // TODO: Method 'put_x'
    // TODO: Method 'get_x'
};
// --------------------------------------------------------
// Type: ISVGPathSegLinetoHorizontalRel
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGPathSegLinetoHorizontalRel = *opaque{
    // TODO: Method 'put_x'
    // TODO: Method 'get_x'
};
// --------------------------------------------------------
// Type: ISVGPathSegLinetoVerticalAbs
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGPathSegLinetoVerticalAbs = *opaque{
    // TODO: Method 'put_y'
    // TODO: Method 'get_y'
};
// --------------------------------------------------------
// Type: ISVGPathSegLinetoVerticalRel
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGPathSegLinetoVerticalRel = *opaque{
    // TODO: Method 'put_y'
    // TODO: Method 'get_y'
};
// --------------------------------------------------------
// Type: DispSVGPathSegArcAbs
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGPathSegArcAbs = *opaque{
};
// --------------------------------------------------------
// Type: DispSVGPathSegArcRel
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGPathSegArcRel = *opaque{
};
// --------------------------------------------------------
// Type: DispSVGPathSegClosePath
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGPathSegClosePath = *opaque{
};
// --------------------------------------------------------
// Type: DispSVGPathSegMovetoAbs
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGPathSegMovetoAbs = *opaque{
};
// --------------------------------------------------------
// Type: DispSVGPathSegMovetoRel
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGPathSegMovetoRel = *opaque{
};
// --------------------------------------------------------
// Type: DispSVGPathSegLinetoAbs
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGPathSegLinetoAbs = *opaque{
};
// --------------------------------------------------------
// Type: DispSVGPathSegLinetoRel
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGPathSegLinetoRel = *opaque{
};
// --------------------------------------------------------
// Type: DispSVGPathSegCurvetoCubicAbs
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGPathSegCurvetoCubicAbs = *opaque{
};
// --------------------------------------------------------
// Type: DispSVGPathSegCurvetoCubicRel
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGPathSegCurvetoCubicRel = *opaque{
};
// --------------------------------------------------------
// Type: DispSVGPathSegCurvetoCubicSmoothAbs
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGPathSegCurvetoCubicSmoothAbs = *opaque{
};
// --------------------------------------------------------
// Type: DispSVGPathSegCurvetoCubicSmoothRel
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGPathSegCurvetoCubicSmoothRel = *opaque{
};
// --------------------------------------------------------
// Type: DispSVGPathSegCurvetoQuadraticAbs
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGPathSegCurvetoQuadraticAbs = *opaque{
};
// --------------------------------------------------------
// Type: DispSVGPathSegCurvetoQuadraticRel
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGPathSegCurvetoQuadraticRel = *opaque{
};
// --------------------------------------------------------
// Type: DispSVGPathSegCurvetoQuadraticSmoothAbs
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGPathSegCurvetoQuadraticSmoothAbs = *opaque{
};
// --------------------------------------------------------
// Type: DispSVGPathSegCurvetoQuadraticSmoothRel
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGPathSegCurvetoQuadraticSmoothRel = *opaque{
};
// --------------------------------------------------------
// Type: DispSVGPathSegLinetoHorizontalAbs
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGPathSegLinetoHorizontalAbs = *opaque{
};
// --------------------------------------------------------
// Type: DispSVGPathSegLinetoHorizontalRel
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGPathSegLinetoHorizontalRel = *opaque{
};
// --------------------------------------------------------
// Type: DispSVGPathSegLinetoVerticalAbs
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGPathSegLinetoVerticalAbs = *opaque{
};
// --------------------------------------------------------
// Type: DispSVGPathSegLinetoVerticalRel
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGPathSegLinetoVerticalRel = *opaque{
};
// --------------------------------------------------------
// Type: ISVGPathSegList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGPathSegList = *opaque{
    // TODO: Method 'put_numberOfItems'
    // TODO: Method 'get_numberOfItems'
    // TODO: Method 'clear'
    // TODO: Method 'initialize'
    // TODO: Method 'getItem'
    // TODO: Method 'insertItemBefore'
    // TODO: Method 'replaceItem'
    // TODO: Method 'removeItem'
    // TODO: Method 'appendItem'
};
// --------------------------------------------------------
// Type: ISVGPoint
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGPoint = *opaque{
    // TODO: Method 'put_x'
    // TODO: Method 'get_x'
    // TODO: Method 'put_y'
    // TODO: Method 'get_y'
    // TODO: Method 'matrixTransform'
};
// --------------------------------------------------------
// Type: ISVGPointList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGPointList = *opaque{
    // TODO: Method 'put_numberOfItems'
    // TODO: Method 'get_numberOfItems'
    // TODO: Method 'clear'
    // TODO: Method 'initialize'
    // TODO: Method 'getItem'
    // TODO: Method 'insertItemBefore'
    // TODO: Method 'replaceItem'
    // TODO: Method 'removeItem'
    // TODO: Method 'appendItem'
};
// --------------------------------------------------------
// Type: ISVGViewSpec
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGViewSpec = *opaque{
};
// --------------------------------------------------------
// Type: ISVGTransform
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGTransform = *opaque{
    // TODO: Method 'put_type'
    // TODO: Method 'get_type'
    // TODO: Method 'putref_matrix'
    // TODO: Method 'get_matrix'
    // TODO: Method 'put_angle'
    // TODO: Method 'get_angle'
    // TODO: Method 'setMatrix'
    // TODO: Method 'setTranslate'
    // TODO: Method 'setScale'
    // TODO: Method 'setRotate'
    // TODO: Method 'setSkewX'
    // TODO: Method 'setSkewY'
};
// --------------------------------------------------------
// Type: DispSVGSVGElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGSVGElement = *opaque{
};
// --------------------------------------------------------
// Type: ISVGElementInstance
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGElementInstance = *opaque{
    // TODO: Method 'get_correspondingElement'
    // TODO: Method 'get_correspondingUseElement'
    // TODO: Method 'get_parentNode'
    // TODO: Method 'get_childNodes'
    // TODO: Method 'get_firstChild'
    // TODO: Method 'get_lastChild'
    // TODO: Method 'get_previousSibling'
    // TODO: Method 'get_nextSibling'
};
// --------------------------------------------------------
// Type: ISVGUseElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGUseElement = *opaque{
    // TODO: Method 'putref_x'
    // TODO: Method 'get_x'
    // TODO: Method 'putref_y'
    // TODO: Method 'get_y'
    // TODO: Method 'putref_width'
    // TODO: Method 'get_width'
    // TODO: Method 'putref_height'
    // TODO: Method 'get_height'
    // TODO: Method 'putref_instanceRoot'
    // TODO: Method 'get_instanceRoot'
    // TODO: Method 'putref_animatedInstanceRoot'
    // TODO: Method 'get_animatedInstanceRoot'
};
// --------------------------------------------------------
// Type: DispSVGUseElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGUseElement = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLStyleSheetRulesAppliedCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLStyleSheetRulesAppliedCollection = *opaque{
    // TODO: Method 'item'
    // TODO: Method 'get_length'
    // TODO: Method 'propertyAppliedBy'
    // TODO: Method 'propertyAppliedTrace'
    // TODO: Method 'propertyAppliedTraceLength'
};
// --------------------------------------------------------
// Type: IRulesApplied
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRulesApplied = *opaque{
    // TODO: Method 'get_element'
    // TODO: Method 'get_inlineStyles'
    // TODO: Method 'get_appliedRules'
    // TODO: Method 'propertyIsInline'
    // TODO: Method 'propertyIsInheritable'
    // TODO: Method 'hasInheritableProperty'
};
// --------------------------------------------------------
// Type: DispHTMLStyleSheetRulesAppliedCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLStyleSheetRulesAppliedCollection = *opaque{
};
// --------------------------------------------------------
// Type: DispRulesApplied
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispRulesApplied = *opaque{
};
// --------------------------------------------------------
// Type: DispRulesAppliedCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispRulesAppliedCollection = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLW3CComputedStyle
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLW3CComputedStyle = *opaque{
};
// --------------------------------------------------------
// Type: ISVGAnimatedPoints
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGAnimatedPoints = *opaque{
    // TODO: Method 'putref_points'
    // TODO: Method 'get_points'
    // TODO: Method 'putref_animatedPoints'
    // TODO: Method 'get_animatedPoints'
};
// --------------------------------------------------------
// Type: ISVGCircleElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGCircleElement = *opaque{
    // TODO: Method 'putref_cx'
    // TODO: Method 'get_cx'
    // TODO: Method 'putref_cy'
    // TODO: Method 'get_cy'
    // TODO: Method 'putref_r'
    // TODO: Method 'get_r'
};
// --------------------------------------------------------
// Type: ISVGEllipseElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGEllipseElement = *opaque{
    // TODO: Method 'putref_cx'
    // TODO: Method 'get_cx'
    // TODO: Method 'putref_cy'
    // TODO: Method 'get_cy'
    // TODO: Method 'putref_rx'
    // TODO: Method 'get_rx'
    // TODO: Method 'putref_ry'
    // TODO: Method 'get_ry'
};
// --------------------------------------------------------
// Type: ISVGLineElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGLineElement = *opaque{
    // TODO: Method 'putref_x1'
    // TODO: Method 'get_x1'
    // TODO: Method 'putref_y1'
    // TODO: Method 'get_y1'
    // TODO: Method 'putref_x2'
    // TODO: Method 'get_x2'
    // TODO: Method 'putref_y2'
    // TODO: Method 'get_y2'
};
// --------------------------------------------------------
// Type: ISVGRectElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGRectElement = *opaque{
    // TODO: Method 'putref_x'
    // TODO: Method 'get_x'
    // TODO: Method 'putref_y'
    // TODO: Method 'get_y'
    // TODO: Method 'putref_width'
    // TODO: Method 'get_width'
    // TODO: Method 'putref_height'
    // TODO: Method 'get_height'
    // TODO: Method 'putref_rx'
    // TODO: Method 'get_rx'
    // TODO: Method 'putref_ry'
    // TODO: Method 'get_ry'
};
// --------------------------------------------------------
// Type: ISVGPolygonElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGPolygonElement = *opaque{
};
// --------------------------------------------------------
// Type: ISVGPolylineElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGPolylineElement = *opaque{
};
// --------------------------------------------------------
// Type: DispSVGCircleElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGCircleElement = *opaque{
};
// --------------------------------------------------------
// Type: DispSVGEllipseElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGEllipseElement = *opaque{
};
// --------------------------------------------------------
// Type: DispSVGLineElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGLineElement = *opaque{
};
// --------------------------------------------------------
// Type: DispSVGRectElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGRectElement = *opaque{
};
// --------------------------------------------------------
// Type: DispSVGPolygonElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGPolygonElement = *opaque{
};
// --------------------------------------------------------
// Type: DispSVGPolylineElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGPolylineElement = *opaque{
};
// --------------------------------------------------------
// Type: ISVGGElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGGElement = *opaque{
};
// --------------------------------------------------------
// Type: DispSVGGElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGGElement = *opaque{
};
// --------------------------------------------------------
// Type: ISVGSymbolElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGSymbolElement = *opaque{
};
// --------------------------------------------------------
// Type: DispSVGSymbolElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGSymbolElement = *opaque{
};
// --------------------------------------------------------
// Type: ISVGDefsElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGDefsElement = *opaque{
};
// --------------------------------------------------------
// Type: DispSVGDefsElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGDefsElement = *opaque{
};
// --------------------------------------------------------
// Type: ISVGAnimatedPathData
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGAnimatedPathData = *opaque{
    // TODO: Method 'putref_pathSegList'
    // TODO: Method 'get_pathSegList'
    // TODO: Method 'putref_normalizedPathSegList'
    // TODO: Method 'get_normalizedPathSegList'
    // TODO: Method 'putref_animatedPathSegList'
    // TODO: Method 'get_animatedPathSegList'
    // TODO: Method 'putref_animatedNormalizedPathSegList'
    // TODO: Method 'get_animatedNormalizedPathSegList'
};
// --------------------------------------------------------
// Type: ISVGPathElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGPathElement = *opaque{
    // TODO: Method 'putref_pathLength'
    // TODO: Method 'get_pathLength'
    // TODO: Method 'getTotalLength'
    // TODO: Method 'getPointAtLength'
    // TODO: Method 'getPathSegAtLength'
    // TODO: Method 'createSVGPathSegClosePath'
    // TODO: Method 'createSVGPathSegMovetoAbs'
    // TODO: Method 'createSVGPathSegMovetoRel'
    // TODO: Method 'createSVGPathSegLinetoAbs'
    // TODO: Method 'createSVGPathSegLinetoRel'
    // TODO: Method 'createSVGPathSegCurvetoCubicAbs'
    // TODO: Method 'createSVGPathSegCurvetoCubicRel'
    // TODO: Method 'createSVGPathSegCurvetoQuadraticAbs'
    // TODO: Method 'createSVGPathSegCurvetoQuadraticRel'
    // TODO: Method 'createSVGPathSegArcAbs'
    // TODO: Method 'createSVGPathSegArcRel'
    // TODO: Method 'createSVGPathSegLinetoHorizontalAbs'
    // TODO: Method 'createSVGPathSegLinetoHorizontalRel'
    // TODO: Method 'createSVGPathSegLinetoVerticalAbs'
    // TODO: Method 'createSVGPathSegLinetoVerticalRel'
    // TODO: Method 'createSVGPathSegCurvetoCubicSmoothAbs'
    // TODO: Method 'createSVGPathSegCurvetoCubicSmoothRel'
    // TODO: Method 'createSVGPathSegCurvetoQuadraticSmoothAbs'
    // TODO: Method 'createSVGPathSegCurvetoQuadraticSmoothRel'
};
// --------------------------------------------------------
// Type: DispSVGPathElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGPathElement = *opaque{
};
// --------------------------------------------------------
// Type: ISVGPreserveAspectRatio
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGPreserveAspectRatio = *opaque{
    // TODO: Method 'put_align'
    // TODO: Method 'get_align'
    // TODO: Method 'put_meetOrSlice'
    // TODO: Method 'get_meetOrSlice'
};
// --------------------------------------------------------
// Type: ISVGTextElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGTextElement = *opaque{
};
// --------------------------------------------------------
// Type: DispSVGTextElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGTextElement = *opaque{
};
// --------------------------------------------------------
// Type: ISVGImageElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGImageElement = *opaque{
    // TODO: Method 'putref_x'
    // TODO: Method 'get_x'
    // TODO: Method 'putref_y'
    // TODO: Method 'get_y'
    // TODO: Method 'putref_width'
    // TODO: Method 'get_width'
    // TODO: Method 'putref_height'
    // TODO: Method 'get_height'
};
// --------------------------------------------------------
// Type: DispSVGImageElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGImageElement = *opaque{
};
// --------------------------------------------------------
// Type: ISVGStopElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGStopElement = *opaque{
    // TODO: Method 'putref_offset'
    // TODO: Method 'get_offset'
};
// --------------------------------------------------------
// Type: DispSVGStopElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGStopElement = *opaque{
};
// --------------------------------------------------------
// Type: ISVGGradientElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGGradientElement = *opaque{
    // TODO: Method 'putref_gradientUnits'
    // TODO: Method 'get_gradientUnits'
    // TODO: Method 'putref_gradientTransform'
    // TODO: Method 'get_gradientTransform'
    // TODO: Method 'putref_spreadMethod'
    // TODO: Method 'get_spreadMethod'
};
// --------------------------------------------------------
// Type: DispSVGGradientElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGGradientElement = *opaque{
};
// --------------------------------------------------------
// Type: ISVGLinearGradientElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGLinearGradientElement = *opaque{
    // TODO: Method 'putref_x1'
    // TODO: Method 'get_x1'
    // TODO: Method 'putref_y1'
    // TODO: Method 'get_y1'
    // TODO: Method 'putref_x2'
    // TODO: Method 'get_x2'
    // TODO: Method 'putref_y2'
    // TODO: Method 'get_y2'
};
// --------------------------------------------------------
// Type: DispSVGLinearGradientElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGLinearGradientElement = *opaque{
};
// --------------------------------------------------------
// Type: ISVGRadialGradientElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGRadialGradientElement = *opaque{
    // TODO: Method 'putref_cx'
    // TODO: Method 'get_cx'
    // TODO: Method 'putref_cy'
    // TODO: Method 'get_cy'
    // TODO: Method 'putref_r'
    // TODO: Method 'get_r'
    // TODO: Method 'putref_fx'
    // TODO: Method 'get_fx'
    // TODO: Method 'putref_fy'
    // TODO: Method 'get_fy'
};
// --------------------------------------------------------
// Type: DispSVGRadialGradientElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGRadialGradientElement = *opaque{
};
// --------------------------------------------------------
// Type: ISVGMaskElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGMaskElement = *opaque{
    // TODO: Method 'putref_maskUnits'
    // TODO: Method 'get_maskUnits'
    // TODO: Method 'putref_maskContentUnits'
    // TODO: Method 'get_maskContentUnits'
    // TODO: Method 'putref_x'
    // TODO: Method 'get_x'
    // TODO: Method 'putref_y'
    // TODO: Method 'get_y'
    // TODO: Method 'putref_width'
    // TODO: Method 'get_width'
    // TODO: Method 'putref_height'
    // TODO: Method 'get_height'
};
// --------------------------------------------------------
// Type: DispSVGMaskElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGMaskElement = *opaque{
};
// --------------------------------------------------------
// Type: ISVGMarkerElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGMarkerElement = *opaque{
    // TODO: Method 'putref_refX'
    // TODO: Method 'get_refX'
    // TODO: Method 'putref_refY'
    // TODO: Method 'get_refY'
    // TODO: Method 'putref_markerUnits'
    // TODO: Method 'get_markerUnits'
    // TODO: Method 'putref_markerWidth'
    // TODO: Method 'get_markerWidth'
    // TODO: Method 'putref_markerHeight'
    // TODO: Method 'get_markerHeight'
    // TODO: Method 'putref_orientType'
    // TODO: Method 'get_orientType'
    // TODO: Method 'putref_orientAngle'
    // TODO: Method 'get_orientAngle'
    // TODO: Method 'setOrientToAuto'
    // TODO: Method 'setOrientToAngle'
};
// --------------------------------------------------------
// Type: DispSVGMarkerElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGMarkerElement = *opaque{
};
// --------------------------------------------------------
// Type: ISVGZoomEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGZoomEvent = *opaque{
    // TODO: Method 'get_zoomRectScreen'
    // TODO: Method 'get_previousScale'
    // TODO: Method 'get_previousTranslate'
    // TODO: Method 'get_newScale'
    // TODO: Method 'get_newTranslate'
};
// --------------------------------------------------------
// Type: DispSVGZoomEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGZoomEvent = *opaque{
};
// --------------------------------------------------------
// Type: ISVGAElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGAElement = *opaque{
    // TODO: Method 'putref_target'
    // TODO: Method 'get_target'
};
// --------------------------------------------------------
// Type: DispSVGAElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGAElement = *opaque{
};
// --------------------------------------------------------
// Type: ISVGViewElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGViewElement = *opaque{
    // TODO: Method 'putref_viewTarget'
    // TODO: Method 'get_viewTarget'
};
// --------------------------------------------------------
// Type: DispSVGViewElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGViewElement = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLMediaError
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLMediaError = *opaque{
    // TODO: Method 'get_code'
};
// --------------------------------------------------------
// Type: IHTMLTimeRanges
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLTimeRanges = *opaque{
    // TODO: Method 'get_length'
    // TODO: Method 'start'
    // TODO: Method 'end'
};
// --------------------------------------------------------
// Type: IHTMLTimeRanges2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLTimeRanges2 = *opaque{
    // TODO: Method 'startDouble'
    // TODO: Method 'endDouble'
};
// --------------------------------------------------------
// Type: IHTMLMediaElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLMediaElement = *opaque{
    // TODO: Method 'get_error'
    // TODO: Method 'put_src'
    // TODO: Method 'get_src'
    // TODO: Method 'get_currentSrc'
    // TODO: Method 'get_networkState'
    // TODO: Method 'put_preload'
    // TODO: Method 'get_preload'
    // TODO: Method 'get_buffered'
    // TODO: Method 'load'
    // TODO: Method 'canPlayType'
    // TODO: Method 'get_seeking'
    // TODO: Method 'put_currentTime'
    // TODO: Method 'get_currentTime'
    // TODO: Method 'get_initialTime'
    // TODO: Method 'get_duration'
    // TODO: Method 'get_paused'
    // TODO: Method 'put_defaultPlaybackRate'
    // TODO: Method 'get_defaultPlaybackRate'
    // TODO: Method 'put_playbackRate'
    // TODO: Method 'get_playbackRate'
    // TODO: Method 'get_played'
    // TODO: Method 'get_seekable'
    // TODO: Method 'get_ended'
    // TODO: Method 'put_autoplay'
    // TODO: Method 'get_autoplay'
    // TODO: Method 'put_loop'
    // TODO: Method 'get_loop'
    // TODO: Method 'play'
    // TODO: Method 'pause'
    // TODO: Method 'put_controls'
    // TODO: Method 'get_controls'
    // TODO: Method 'put_volume'
    // TODO: Method 'get_volume'
    // TODO: Method 'put_muted'
    // TODO: Method 'get_muted'
    // TODO: Method 'put_autobuffer'
    // TODO: Method 'get_autobuffer'
};
// --------------------------------------------------------
// Type: IHTMLMediaElement2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLMediaElement2 = *opaque{
    // TODO: Method 'put_currentTimeDouble'
    // TODO: Method 'get_currentTimeDouble'
    // TODO: Method 'get_initialTimeDouble'
    // TODO: Method 'get_durationDouble'
    // TODO: Method 'put_defaultPlaybackRateDouble'
    // TODO: Method 'get_defaultPlaybackRateDouble'
    // TODO: Method 'put_playbackRateDouble'
    // TODO: Method 'get_playbackRateDouble'
    // TODO: Method 'put_volumeDouble'
    // TODO: Method 'get_volumeDouble'
};
// --------------------------------------------------------
// Type: IHTMLMSMediaElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLMSMediaElement = *opaque{
    // TODO: Method 'put_msPlayToDisabled'
    // TODO: Method 'get_msPlayToDisabled'
    // TODO: Method 'put_msPlayToPrimary'
    // TODO: Method 'get_msPlayToPrimary'
};
// --------------------------------------------------------
// Type: IHTMLSourceElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLSourceElement = *opaque{
    // TODO: Method 'put_src'
    // TODO: Method 'get_src'
    // TODO: Method 'put_type'
    // TODO: Method 'get_type'
    // TODO: Method 'put_media'
    // TODO: Method 'get_media'
};
// --------------------------------------------------------
// Type: IHTMLAudioElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLAudioElement = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLVideoElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLVideoElement = *opaque{
    // TODO: Method 'put_width'
    // TODO: Method 'get_width'
    // TODO: Method 'put_height'
    // TODO: Method 'get_height'
    // TODO: Method 'get_videoWidth'
    // TODO: Method 'get_videoHeight'
    // TODO: Method 'put_poster'
    // TODO: Method 'get_poster'
};
// --------------------------------------------------------
// Type: IHTMLAudioElementFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLAudioElementFactory = *opaque{
    // TODO: Method 'create'
};
// --------------------------------------------------------
// Type: DispHTMLMediaError
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLMediaError = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLTimeRanges
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLTimeRanges = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLMediaElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLMediaElement = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLSourceElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLSourceElement = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLAudioElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLAudioElement = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLVideoElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLVideoElement = *opaque{
};
// --------------------------------------------------------
// Type: ISVGSwitchElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGSwitchElement = *opaque{
};
// --------------------------------------------------------
// Type: DispSVGSwitchElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGSwitchElement = *opaque{
};
// --------------------------------------------------------
// Type: ISVGDescElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGDescElement = *opaque{
};
// --------------------------------------------------------
// Type: DispSVGDescElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGDescElement = *opaque{
};
// --------------------------------------------------------
// Type: ISVGTitleElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGTitleElement = *opaque{
};
// --------------------------------------------------------
// Type: DispSVGTitleElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGTitleElement = *opaque{
};
// --------------------------------------------------------
// Type: ISVGMetadataElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGMetadataElement = *opaque{
};
// --------------------------------------------------------
// Type: DispSVGMetadataElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGMetadataElement = *opaque{
};
// --------------------------------------------------------
// Type: ISVGElementInstanceList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGElementInstanceList = *opaque{
    // TODO: Method 'get_length'
    // TODO: Method 'item'
};
// --------------------------------------------------------
// Type: DispSVGElementInstance
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGElementInstance = *opaque{
};
// --------------------------------------------------------
// Type: DispSVGElementInstanceList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGElementInstanceList = *opaque{
};
// --------------------------------------------------------
// Type: IDOMException
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDOMException = *opaque{
    // TODO: Method 'put_code'
    // TODO: Method 'get_code'
    // TODO: Method 'get_message'
};
// --------------------------------------------------------
// Type: DispDOMException
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispDOMException = *opaque{
};
// --------------------------------------------------------
// Type: IRangeException
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRangeException = *opaque{
    // TODO: Method 'put_code'
    // TODO: Method 'get_code'
    // TODO: Method 'get_message'
};
// --------------------------------------------------------
// Type: DispRangeException
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispRangeException = *opaque{
};
// --------------------------------------------------------
// Type: ISVGException
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGException = *opaque{
    // TODO: Method 'put_code'
    // TODO: Method 'get_code'
    // TODO: Method 'get_message'
};
// --------------------------------------------------------
// Type: DispSVGException
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGException = *opaque{
};
// --------------------------------------------------------
// Type: IEventException
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEventException = *opaque{
    // TODO: Method 'put_code'
    // TODO: Method 'get_code'
    // TODO: Method 'get_message'
};
// --------------------------------------------------------
// Type: DispEventException
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispEventException = *opaque{
};
// --------------------------------------------------------
// Type: ISVGScriptElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGScriptElement = *opaque{
    // TODO: Method 'put_type'
    // TODO: Method 'get_type'
};
// --------------------------------------------------------
// Type: DispSVGScriptElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGScriptElement = *opaque{
};
// --------------------------------------------------------
// Type: ISVGStyleElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGStyleElement = *opaque{
    // TODO: Method 'put_type'
    // TODO: Method 'get_type'
    // TODO: Method 'put_media'
    // TODO: Method 'get_media'
};
// --------------------------------------------------------
// Type: DispSVGStyleElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGStyleElement = *opaque{
};
// --------------------------------------------------------
// Type: ISVGTextContentElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGTextContentElement = *opaque{
    // TODO: Method 'putref_textLength'
    // TODO: Method 'get_textLength'
    // TODO: Method 'putref_lengthAdjust'
    // TODO: Method 'get_lengthAdjust'
    // TODO: Method 'getNumberOfChars'
    // TODO: Method 'getComputedTextLength'
    // TODO: Method 'getSubStringLength'
    // TODO: Method 'getStartPositionOfChar'
    // TODO: Method 'getEndPositionOfChar'
    // TODO: Method 'getExtentOfChar'
    // TODO: Method 'getRotationOfChar'
    // TODO: Method 'getCharNumAtPosition'
    // TODO: Method 'selectSubString'
};
// --------------------------------------------------------
// Type: DispSVGTextContentElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGTextContentElement = *opaque{
};
// --------------------------------------------------------
// Type: ISVGTextPositioningElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGTextPositioningElement = *opaque{
    // TODO: Method 'putref_x'
    // TODO: Method 'get_x'
    // TODO: Method 'putref_y'
    // TODO: Method 'get_y'
    // TODO: Method 'putref_dx'
    // TODO: Method 'get_dx'
    // TODO: Method 'putref_dy'
    // TODO: Method 'get_dy'
    // TODO: Method 'putref_rotate'
    // TODO: Method 'get_rotate'
};
// --------------------------------------------------------
// Type: DispSVGTextPositioningElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGTextPositioningElement = *opaque{
};
// --------------------------------------------------------
// Type: DispDOMDocumentType
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispDOMDocumentType = *opaque{
};
// --------------------------------------------------------
// Type: DispNodeIterator
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispNodeIterator = *opaque{
};
// --------------------------------------------------------
// Type: DispTreeWalker
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispTreeWalker = *opaque{
};
// --------------------------------------------------------
// Type: DispDOMProcessingInstruction
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispDOMProcessingInstruction = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLPerformanceNavigation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLPerformanceNavigation = *opaque{
    // TODO: Method 'get_type'
    // TODO: Method 'get_redirectCount'
    // TODO: Method 'toString'
    // TODO: Method 'toJSON'
};
// --------------------------------------------------------
// Type: IHTMLPerformanceTiming
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLPerformanceTiming = *opaque{
    // TODO: Method 'get_navigationStart'
    // TODO: Method 'get_unloadEventStart'
    // TODO: Method 'get_unloadEventEnd'
    // TODO: Method 'get_redirectStart'
    // TODO: Method 'get_redirectEnd'
    // TODO: Method 'get_fetchStart'
    // TODO: Method 'get_domainLookupStart'
    // TODO: Method 'get_domainLookupEnd'
    // TODO: Method 'get_connectStart'
    // TODO: Method 'get_connectEnd'
    // TODO: Method 'get_requestStart'
    // TODO: Method 'get_responseStart'
    // TODO: Method 'get_responseEnd'
    // TODO: Method 'get_domLoading'
    // TODO: Method 'get_domInteractive'
    // TODO: Method 'get_domContentLoadedEventStart'
    // TODO: Method 'get_domContentLoadedEventEnd'
    // TODO: Method 'get_domComplete'
    // TODO: Method 'get_loadEventStart'
    // TODO: Method 'get_loadEventEnd'
    // TODO: Method 'get_msFirstPaint'
    // TODO: Method 'toString'
    // TODO: Method 'toJSON'
};
// --------------------------------------------------------
// Type: DispHTMLPerformance
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLPerformance = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLPerformanceNavigation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLPerformanceNavigation = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLPerformanceTiming
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLPerformanceTiming = *opaque{
};
// --------------------------------------------------------
// Type: ISVGTSpanElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGTSpanElement = *opaque{
};
// --------------------------------------------------------
// Type: DispSVGTSpanElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGTSpanElement = *opaque{
};
// --------------------------------------------------------
// Type: ITemplatePrinter
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITemplatePrinter = *opaque{
    // TODO: Method 'startDoc'
    // TODO: Method 'stopDoc'
    // TODO: Method 'printBlankPage'
    // TODO: Method 'printPage'
    // TODO: Method 'ensurePrintDialogDefaults'
    // TODO: Method 'showPrintDialog'
    // TODO: Method 'showPageSetupDialog'
    // TODO: Method 'printNonNative'
    // TODO: Method 'printNonNativeFrames'
    // TODO: Method 'put_framesetDocument'
    // TODO: Method 'get_framesetDocument'
    // TODO: Method 'put_frameActive'
    // TODO: Method 'get_frameActive'
    // TODO: Method 'put_frameAsShown'
    // TODO: Method 'get_frameAsShown'
    // TODO: Method 'put_selection'
    // TODO: Method 'get_selection'
    // TODO: Method 'put_selectedPages'
    // TODO: Method 'get_selectedPages'
    // TODO: Method 'put_currentPage'
    // TODO: Method 'get_currentPage'
    // TODO: Method 'put_currentPageAvail'
    // TODO: Method 'get_currentPageAvail'
    // TODO: Method 'put_collate'
    // TODO: Method 'get_collate'
    // TODO: Method 'get_duplex'
    // TODO: Method 'put_copies'
    // TODO: Method 'get_copies'
    // TODO: Method 'put_pageFrom'
    // TODO: Method 'get_pageFrom'
    // TODO: Method 'put_pageTo'
    // TODO: Method 'get_pageTo'
    // TODO: Method 'put_tableOfLinks'
    // TODO: Method 'get_tableOfLinks'
    // TODO: Method 'put_allLinkedDocuments'
    // TODO: Method 'get_allLinkedDocuments'
    // TODO: Method 'put_header'
    // TODO: Method 'get_header'
    // TODO: Method 'put_footer'
    // TODO: Method 'get_footer'
    // TODO: Method 'put_marginLeft'
    // TODO: Method 'get_marginLeft'
    // TODO: Method 'put_marginRight'
    // TODO: Method 'get_marginRight'
    // TODO: Method 'put_marginTop'
    // TODO: Method 'get_marginTop'
    // TODO: Method 'put_marginBottom'
    // TODO: Method 'get_marginBottom'
    // TODO: Method 'get_pageWidth'
    // TODO: Method 'get_pageHeight'
    // TODO: Method 'get_unprintableLeft'
    // TODO: Method 'get_unprintableTop'
    // TODO: Method 'get_unprintableRight'
    // TODO: Method 'get_unprintableBottom'
    // TODO: Method 'updatePageStatus'
};
// --------------------------------------------------------
// Type: ITemplatePrinter2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITemplatePrinter2 = *opaque{
    // TODO: Method 'put_selectionEnabled'
    // TODO: Method 'get_selectionEnabled'
    // TODO: Method 'put_frameActiveEnabled'
    // TODO: Method 'get_frameActiveEnabled'
    // TODO: Method 'put_orientation'
    // TODO: Method 'get_orientation'
    // TODO: Method 'put_usePrinterCopyCollate'
    // TODO: Method 'get_usePrinterCopyCollate'
    // TODO: Method 'deviceSupports'
};
// --------------------------------------------------------
// Type: ITemplatePrinter3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITemplatePrinter3 = *opaque{
    // TODO: Method 'put_headerFooterFont'
    // TODO: Method 'get_headerFooterFont'
    // TODO: Method 'getPageMarginTop'
    // TODO: Method 'getPageMarginRight'
    // TODO: Method 'getPageMarginBottom'
    // TODO: Method 'getPageMarginLeft'
    // TODO: Method 'getPageMarginTopImportant'
    // TODO: Method 'getPageMarginRightImportant'
    // TODO: Method 'getPageMarginBottomImportant'
    // TODO: Method 'getPageMarginLeftImportant'
};
// --------------------------------------------------------
// Type: IPrintManagerTemplatePrinter
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPrintManagerTemplatePrinter = *opaque{
    // TODO: Method 'startPrint'
    // TODO: Method 'drawPreviewPage'
    // TODO: Method 'setPageCount'
    // TODO: Method 'invalidatePreview'
    // TODO: Method 'getPrintTaskOptionValue'
    // TODO: Method 'endPrint'
};
// --------------------------------------------------------
// Type: IPrintManagerTemplatePrinter2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPrintManagerTemplatePrinter2 = *opaque{
    // TODO: Method 'get_showHeaderFooter'
    // TODO: Method 'get_shrinkToFit'
    // TODO: Method 'get_percentScale'
};
// --------------------------------------------------------
// Type: DispCPrintManagerTemplatePrinter
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispCPrintManagerTemplatePrinter = *opaque{
};
// --------------------------------------------------------
// Type: ISVGTextPathElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISVGTextPathElement = *opaque{
    // TODO: Method 'putref_startOffset'
    // TODO: Method 'get_startOffset'
    // TODO: Method 'putref_method'
    // TODO: Method 'get_method'
    // TODO: Method 'putref_spacing'
    // TODO: Method 'get_spacing'
};
// --------------------------------------------------------
// Type: DispSVGTextPathElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispSVGTextPathElement = *opaque{
};
// --------------------------------------------------------
// Type: IDOMXmlSerializer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDOMXmlSerializer = *opaque{
    // TODO: Method 'serializeToString'
};
// --------------------------------------------------------
// Type: IDOMParser
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDOMParser = *opaque{
    // TODO: Method 'parseFromString'
};
// --------------------------------------------------------
// Type: DispXMLSerializer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispXMLSerializer = *opaque{
};
// --------------------------------------------------------
// Type: DispDOMParser
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispDOMParser = *opaque{
};
// --------------------------------------------------------
// Type: IDOMXmlSerializerFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDOMXmlSerializerFactory = *opaque{
    // TODO: Method 'create'
};
// --------------------------------------------------------
// Type: IDOMParserFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDOMParserFactory = *opaque{
    // TODO: Method 'create'
};
// --------------------------------------------------------
// Type: DispHTMLSemanticElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLSemanticElement = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLProgressElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLProgressElement = *opaque{
    // TODO: Method 'put_value'
    // TODO: Method 'get_value'
    // TODO: Method 'put_max'
    // TODO: Method 'get_max'
    // TODO: Method 'get_position'
    // TODO: Method 'get_form'
};
// --------------------------------------------------------
// Type: DispHTMLProgressElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLProgressElement = *opaque{
};
// --------------------------------------------------------
// Type: IDOMMSTransitionEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDOMMSTransitionEvent = *opaque{
    // TODO: Method 'get_propertyName'
    // TODO: Method 'get_elapsedTime'
    // TODO: Method 'initMSTransitionEvent'
};
// --------------------------------------------------------
// Type: DispDOMMSTransitionEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispDOMMSTransitionEvent = *opaque{
};
// --------------------------------------------------------
// Type: IDOMMSAnimationEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDOMMSAnimationEvent = *opaque{
    // TODO: Method 'get_animationName'
    // TODO: Method 'get_elapsedTime'
    // TODO: Method 'initMSAnimationEvent'
};
// --------------------------------------------------------
// Type: DispDOMMSAnimationEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispDOMMSAnimationEvent = *opaque{
};
// --------------------------------------------------------
// Type: IWebGeocoordinates
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWebGeocoordinates = *opaque{
    // TODO: Method 'get_latitude'
    // TODO: Method 'get_longitude'
    // TODO: Method 'get_altitude'
    // TODO: Method 'get_accuracy'
    // TODO: Method 'get_altitudeAccuracy'
    // TODO: Method 'get_heading'
    // TODO: Method 'get_speed'
};
// --------------------------------------------------------
// Type: IWebGeopositionError
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWebGeopositionError = *opaque{
    // TODO: Method 'get_code'
    // TODO: Method 'get_message'
};
// --------------------------------------------------------
// Type: IWebGeoposition
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWebGeoposition = *opaque{
    // TODO: Method 'get_coords'
    // TODO: Method 'get_timestamp'
};
// --------------------------------------------------------
// Type: DispWebGeolocation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispWebGeolocation = *opaque{
};
// --------------------------------------------------------
// Type: DispWebGeocoordinates
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispWebGeocoordinates = *opaque{
};
// --------------------------------------------------------
// Type: DispWebGeopositionError
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispWebGeopositionError = *opaque{
};
// --------------------------------------------------------
// Type: DispWebGeoposition
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispWebGeoposition = *opaque{
};
// --------------------------------------------------------
// Type: IClientCaps
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IClientCaps = *opaque{
    // TODO: Method 'get_javaEnabled'
    // TODO: Method 'get_cookieEnabled'
    // TODO: Method 'get_cpuClass'
    // TODO: Method 'get_systemLanguage'
    // TODO: Method 'get_userLanguage'
    // TODO: Method 'get_platform'
    // TODO: Method 'get_connectionSpeed'
    // TODO: Method 'get_onLine'
    // TODO: Method 'get_colorDepth'
    // TODO: Method 'get_bufferDepth'
    // TODO: Method 'get_width'
    // TODO: Method 'get_height'
    // TODO: Method 'get_availHeight'
    // TODO: Method 'get_availWidth'
    // TODO: Method 'get_connectionType'
    // TODO: Method 'isComponentInstalled'
    // TODO: Method 'getComponentVersion'
    // TODO: Method 'compareVersions'
    // TODO: Method 'addComponentRequest'
    // TODO: Method 'doComponentRequest'
    // TODO: Method 'clearComponentRequest'
};
// --------------------------------------------------------
// Type: IDOMMSManipulationEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDOMMSManipulationEvent = *opaque{
    // TODO: Method 'get_lastState'
    // TODO: Method 'get_currentState'
    // TODO: Method 'initMSManipulationEvent'
};
// --------------------------------------------------------
// Type: DispDOMMSManipulationEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispDOMMSManipulationEvent = *opaque{
};
// --------------------------------------------------------
// Type: IDOMCloseEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDOMCloseEvent = *opaque{
    // TODO: Method 'get_wasClean'
    // TODO: Method 'initCloseEvent'
};
// --------------------------------------------------------
// Type: DispDOMCloseEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispDOMCloseEvent = *opaque{
};
// --------------------------------------------------------
// Type: DispApplicationCache
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispApplicationCache = *opaque{
};
// --------------------------------------------------------
// Type: ICSSFilterSite
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICSSFilterSite = *opaque{
    // TODO: Method 'GetElement'
    // TODO: Method 'FireOnFilterChangeEvent'
};
// --------------------------------------------------------
// Type: IMarkupPointer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMarkupPointer = *opaque{
    // TODO: Method 'OwningDoc'
    // TODO: Method 'Gravity'
    // TODO: Method 'SetGravity'
    // TODO: Method 'Cling'
    // TODO: Method 'SetCling'
    // TODO: Method 'Unposition'
    // TODO: Method 'IsPositioned'
    // TODO: Method 'GetContainer'
    // TODO: Method 'MoveAdjacentToElement'
    // TODO: Method 'MoveToPointer'
    // TODO: Method 'MoveToContainer'
    // TODO: Method 'Left'
    // TODO: Method 'Right'
    // TODO: Method 'CurrentScope'
    // TODO: Method 'IsLeftOf'
    // TODO: Method 'IsLeftOfOrEqualTo'
    // TODO: Method 'IsRightOf'
    // TODO: Method 'IsRightOfOrEqualTo'
    // TODO: Method 'IsEqualTo'
    // TODO: Method 'MoveUnit'
    // TODO: Method 'FindTextA'
};
// --------------------------------------------------------
// Type: IMarkupContainer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMarkupContainer = *opaque{
    // TODO: Method 'OwningDoc'
};
// --------------------------------------------------------
// Type: IMarkupContainer2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMarkupContainer2 = *opaque{
    // TODO: Method 'CreateChangeLog'
    // TODO: Method 'RegisterForDirtyRange'
    // TODO: Method 'UnRegisterForDirtyRange'
    // TODO: Method 'GetAndClearDirtyRange'
    // TODO: Method 'GetVersionNumber'
    // TODO: Method 'GetMasterElement'
};
// --------------------------------------------------------
// Type: IHTMLChangeLog
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLChangeLog = *opaque{
    // TODO: Method 'GetNextChange'
};
// --------------------------------------------------------
// Type: IHTMLChangeSink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLChangeSink = *opaque{
    // TODO: Method 'Notify'
};
// --------------------------------------------------------
// Type: ISegmentList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISegmentList = *opaque{
    // TODO: Method 'CreateIterator'
    // TODO: Method 'GetType'
    // TODO: Method 'IsEmpty'
};
// --------------------------------------------------------
// Type: ISegmentListIterator
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISegmentListIterator = *opaque{
    // TODO: Method 'Current'
    // TODO: Method 'First'
    // TODO: Method 'IsDone'
    // TODO: Method 'Advance'
};
// --------------------------------------------------------
// Type: IHTMLCaret
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLCaret = *opaque{
    // TODO: Method 'MoveCaretToPointer'
    // TODO: Method 'MoveCaretToPointerEx'
    // TODO: Method 'MoveMarkupPointerToCaret'
    // TODO: Method 'MoveDisplayPointerToCaret'
    // TODO: Method 'IsVisible'
    // TODO: Method 'Show'
    // TODO: Method 'Hide'
    // TODO: Method 'InsertText'
    // TODO: Method 'ScrollIntoView'
    // TODO: Method 'GetLocation'
    // TODO: Method 'GetCaretDirection'
    // TODO: Method 'SetCaretDirection'
};
// --------------------------------------------------------
// Type: ISegment
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISegment = *opaque{
    // TODO: Method 'GetPointers'
};
// --------------------------------------------------------
// Type: IElementSegment
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IElementSegment = *opaque{
    // TODO: Method 'GetElement'
    // TODO: Method 'SetPrimary'
    // TODO: Method 'IsPrimary'
};
// --------------------------------------------------------
// Type: IHighlightSegment
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHighlightSegment = *opaque{
};
// --------------------------------------------------------
// Type: IHighlightRenderingServices
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHighlightRenderingServices = *opaque{
    // TODO: Method 'AddSegment'
    // TODO: Method 'MoveSegmentToPointers'
    // TODO: Method 'RemoveSegment'
};
// --------------------------------------------------------
// Type: ILineInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ILineInfo = *opaque{
    // TODO: Method 'get_x'
    // TODO: Method 'get_baseLine'
    // TODO: Method 'get_textDescent'
    // TODO: Method 'get_textHeight'
    // TODO: Method 'get_lineDirection'
};
// --------------------------------------------------------
// Type: IDisplayPointer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDisplayPointer = *opaque{
    // TODO: Method 'MoveToPoint'
    // TODO: Method 'MoveUnit'
    // TODO: Method 'PositionMarkupPointer'
    // TODO: Method 'MoveToPointer'
    // TODO: Method 'SetPointerGravity'
    // TODO: Method 'GetPointerGravity'
    // TODO: Method 'SetDisplayGravity'
    // TODO: Method 'GetDisplayGravity'
    // TODO: Method 'IsPositioned'
    // TODO: Method 'Unposition'
    // TODO: Method 'IsEqualTo'
    // TODO: Method 'IsLeftOf'
    // TODO: Method 'IsRightOf'
    // TODO: Method 'IsAtBOL'
    // TODO: Method 'MoveToMarkupPointer'
    // TODO: Method 'ScrollIntoView'
    // TODO: Method 'GetLineInfo'
    // TODO: Method 'GetFlowElement'
    // TODO: Method 'QueryBreaks'
};
// --------------------------------------------------------
// Type: IDisplayServices
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDisplayServices = *opaque{
    // TODO: Method 'CreateDisplayPointer'
    // TODO: Method 'TransformRect'
    // TODO: Method 'TransformPoint'
    // TODO: Method 'GetCaret'
    // TODO: Method 'GetComputedStyle'
    // TODO: Method 'ScrollRectIntoView'
    // TODO: Method 'HasFlowLayout'
};
// --------------------------------------------------------
// Type: IHtmlDlgSafeHelper
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHtmlDlgSafeHelper = *opaque{
    // TODO: Method 'choosecolordlg'
    // TODO: Method 'getCharset'
    // TODO: Method 'get_Fonts'
    // TODO: Method 'get_BlockFormats'
};
// --------------------------------------------------------
// Type: IBlockFormats
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IBlockFormats = *opaque{
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'get_Count'
    // TODO: Method 'Item'
};
// --------------------------------------------------------
// Type: IFontNames
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFontNames = *opaque{
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'get_Count'
    // TODO: Method 'Item'
};
// --------------------------------------------------------
// Type: ICSSFilter
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICSSFilter = *opaque{
    // TODO: Method 'SetSite'
    // TODO: Method 'OnAmbientPropertyChange'
};
// --------------------------------------------------------
// Type: ISecureUrlHost
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISecureUrlHost = *opaque{
    // TODO: Method 'ValidateSecureUrl'
};
// --------------------------------------------------------
// Type: IMarkupServices
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMarkupServices = *opaque{
    // TODO: Method 'CreateMarkupPointer'
    // TODO: Method 'CreateMarkupContainer'
    // TODO: Method 'CreateElement'
    // TODO: Method 'CloneElement'
    // TODO: Method 'InsertElement'
    // TODO: Method 'RemoveElement'
    // TODO: Method 'Remove'
    // TODO: Method 'Copy'
    // TODO: Method 'Move'
    // TODO: Method 'InsertText'
    // TODO: Method 'ParseString'
    // TODO: Method 'ParseGlobal'
    // TODO: Method 'IsScopedElement'
    // TODO: Method 'GetElementTagId'
    // TODO: Method 'GetTagIDForName'
    // TODO: Method 'GetNameForTagID'
    // TODO: Method 'MovePointersToRange'
    // TODO: Method 'MoveRangeToPointers'
    // TODO: Method 'BeginUndoUnit'
    // TODO: Method 'EndUndoUnit'
};
// --------------------------------------------------------
// Type: IMarkupServices2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMarkupServices2 = *opaque{
    // TODO: Method 'ParseGlobalEx'
    // TODO: Method 'ValidateElements'
    // TODO: Method 'SaveSegmentsToClipboard'
};
// --------------------------------------------------------
// Type: IHTMLChangePlayback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLChangePlayback = *opaque{
    // TODO: Method 'ExecChange'
};
// --------------------------------------------------------
// Type: IMarkupPointer2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMarkupPointer2 = *opaque{
    // TODO: Method 'IsAtWordBreak'
    // TODO: Method 'GetMarkupPosition'
    // TODO: Method 'MoveToMarkupPosition'
    // TODO: Method 'MoveUnitBounded'
    // TODO: Method 'IsInsideURL'
    // TODO: Method 'MoveToContent'
};
// --------------------------------------------------------
// Type: IMarkupTextFrags
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMarkupTextFrags = *opaque{
    // TODO: Method 'GetTextFragCount'
    // TODO: Method 'GetTextFrag'
    // TODO: Method 'RemoveTextFrag'
    // TODO: Method 'InsertTextFrag'
    // TODO: Method 'FindTextFragFromMarkupPointer'
};
// --------------------------------------------------------
// Type: IXMLGenericParse
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLGenericParse = *opaque{
    // TODO: Method 'SetGenericParse'
};
// --------------------------------------------------------
// Type: IHTMLEditHost
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLEditHost = *opaque{
    // TODO: Method 'SnapRect'
};
// --------------------------------------------------------
// Type: IHTMLEditHost2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLEditHost2 = *opaque{
    // TODO: Method 'PreDrag'
};
// --------------------------------------------------------
// Type: ISequenceNumber
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISequenceNumber = *opaque{
    // TODO: Method 'GetSequenceNumber'
};
// --------------------------------------------------------
// Type: IIMEServices
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IIMEServices = *opaque{
    // TODO: Method 'GetActiveIMM'
};
// --------------------------------------------------------
// Type: ISelectionServicesListener
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISelectionServicesListener = *opaque{
    // TODO: Method 'BeginSelectionUndo'
    // TODO: Method 'EndSelectionUndo'
    // TODO: Method 'OnSelectedElementExit'
    // TODO: Method 'OnChangeType'
    // TODO: Method 'GetTypeDetail'
};
// --------------------------------------------------------
// Type: ISelectionServices
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISelectionServices = *opaque{
    // TODO: Method 'SetSelectionType'
    // TODO: Method 'GetMarkupContainer'
    // TODO: Method 'AddSegment'
    // TODO: Method 'AddElementSegment'
    // TODO: Method 'RemoveSegment'
    // TODO: Method 'GetSelectionServicesListener'
};
// --------------------------------------------------------
// Type: IHTMLEditDesigner
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLEditDesigner = *opaque{
    // TODO: Method 'PreHandleEvent'
    // TODO: Method 'PostHandleEvent'
    // TODO: Method 'TranslateAcceleratorA'
    // TODO: Method 'PostEditorEventNotify'
};
// --------------------------------------------------------
// Type: IHTMLEditServices
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLEditServices = *opaque{
    // TODO: Method 'AddDesigner'
    // TODO: Method 'RemoveDesigner'
    // TODO: Method 'GetSelectionServices'
    // TODO: Method 'MoveToSelectionAnchor'
    // TODO: Method 'MoveToSelectionEnd'
    // TODO: Method 'SelectRange'
};
// --------------------------------------------------------
// Type: IHTMLEditServices2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLEditServices2 = *opaque{
    // TODO: Method 'MoveToSelectionAnchorEx'
    // TODO: Method 'MoveToSelectionEndEx'
    // TODO: Method 'FreezeVirtualCaretPos'
    // TODO: Method 'UnFreezeVirtualCaretPos'
};
// --------------------------------------------------------
// Type: IHTMLComputedStyle
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLComputedStyle = *opaque{
    // TODO: Method 'get_bold'
    // TODO: Method 'get_italic'
    // TODO: Method 'get_underline'
    // TODO: Method 'get_overline'
    // TODO: Method 'get_strikeOut'
    // TODO: Method 'get_subScript'
    // TODO: Method 'get_superScript'
    // TODO: Method 'get_explicitFace'
    // TODO: Method 'get_fontWeight'
    // TODO: Method 'get_fontSize'
    // TODO: Method 'get_fontName'
    // TODO: Method 'get_hasBgColor'
    // TODO: Method 'get_textColor'
    // TODO: Method 'get_backgroundColor'
    // TODO: Method 'get_preFormatted'
    // TODO: Method 'get_direction'
    // TODO: Method 'get_blockDirection'
    // TODO: Method 'get_OL'
    // TODO: Method 'IsEqual'
};
// --------------------------------------------------------
// Type: IDeveloperConsoleMessageReceiver
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDeveloperConsoleMessageReceiver = *opaque{
    // TODO: Method 'Write'
    // TODO: Method 'WriteWithUrl'
    // TODO: Method 'WriteWithUrlAndLine'
    // TODO: Method 'WriteWithUrlLineAndColumn'
};
// --------------------------------------------------------
// Type: IScriptEventHandler
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IScriptEventHandler = *opaque{
    // TODO: Method 'FunctionName'
    // TODO: Method 'DebugDocumentContext'
    // TODO: Method 'EventHandlerDispatch'
    // TODO: Method 'UsesCapture'
    // TODO: Method 'Cookie'
};
// --------------------------------------------------------
// Type: IDebugCallbackNotificationHandler
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDebugCallbackNotificationHandler = *opaque{
    // TODO: Method 'RequestedCallbackTypes'
    // TODO: Method 'BeforeDispatchEvent'
    // TODO: Method 'DispatchEventComplete'
    // TODO: Method 'BeforeInvokeDomCallback'
    // TODO: Method 'InvokeDomCallbackComplete'
    // TODO: Method 'BeforeInvokeCallback'
    // TODO: Method 'InvokeCallbackComplete'
};
// --------------------------------------------------------
// Type: IScriptEventHandlerSourceInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IScriptEventHandlerSourceInfo = *opaque{
    // TODO: Method 'GetSourceInfo'
};
// --------------------------------------------------------
// Type: IDOMEventRegistrationCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDOMEventRegistrationCallback = *opaque{
    // TODO: Method 'OnDOMEventListenerAdded'
    // TODO: Method 'OnDOMEventListenerRemoved'
};
// --------------------------------------------------------
// Type: IEventTarget2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEventTarget2 = *opaque{
    // TODO: Method 'GetRegisteredEventTypes'
    // TODO: Method 'GetListenersForType'
    // TODO: Method 'RegisterForDOMEventListeners'
    // TODO: Method 'UnregisterForDOMEventListeners'
};
// --------------------------------------------------------
// Type: HTMLNamespaceEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const HTMLNamespaceEvents = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLNamespace
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLNamespace = *opaque{
    // TODO: Method 'get_name'
    // TODO: Method 'get_urn'
    // TODO: Method 'get_tagNames'
    // TODO: Method 'get_readyState'
    // TODO: Method 'put_onreadystatechange'
    // TODO: Method 'get_onreadystatechange'
    // TODO: Method 'doImport'
    // TODO: Method 'attachEvent'
    // TODO: Method 'detachEvent'
};
// --------------------------------------------------------
// Type: IHTMLNamespaceCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLNamespaceCollection = *opaque{
    // TODO: Method 'get_length'
    // TODO: Method 'item'
    // TODO: Method 'add'
};
// --------------------------------------------------------
// Type: DispHTMLNamespace
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLNamespace = *opaque{
};
// --------------------------------------------------------
// Type: DispHTMLNamespaceCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLNamespaceCollection = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLPainter
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLPainter = *opaque{
    // TODO: Method 'Draw'
    // TODO: Method 'OnResize'
    // TODO: Method 'GetPainterInfo'
    // TODO: Method 'HitTestPoint'
};
// --------------------------------------------------------
// Type: IHTMLPaintSite
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLPaintSite = *opaque{
    // TODO: Method 'InvalidatePainterInfo'
    // TODO: Method 'InvalidateRect'
    // TODO: Method 'InvalidateRegion'
    // TODO: Method 'GetDrawInfo'
    // TODO: Method 'TransformGlobalToLocal'
    // TODO: Method 'TransformLocalToGlobal'
    // TODO: Method 'GetHitTestCookie'
};
// --------------------------------------------------------
// Type: IHTMLPainterEventInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLPainterEventInfo = *opaque{
    // TODO: Method 'GetEventInfoFlags'
    // TODO: Method 'GetEventTarget'
    // TODO: Method 'SetCursor'
    // TODO: Method 'StringFromPartID'
};
// --------------------------------------------------------
// Type: IHTMLPainterOverlay
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLPainterOverlay = *opaque{
    // TODO: Method 'OnMove'
};
// --------------------------------------------------------
// Type: IHTMLIPrintCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLIPrintCollection = *opaque{
    // TODO: Method 'get_length'
    // TODO: Method 'get__newEnum'
    // TODO: Method 'item'
};
// --------------------------------------------------------
// Type: IEnumPrivacyRecords
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumPrivacyRecords = *opaque{
    // TODO: Method 'Reset'
    // TODO: Method 'GetSize'
    // TODO: Method 'GetPrivacyImpacted'
    // TODO: Method 'Next'
};
// --------------------------------------------------------
// Type: IWPCBlockedUrls
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWPCBlockedUrls = *opaque{
    // TODO: Method 'GetCount'
    // TODO: Method 'GetUrl'
};
// --------------------------------------------------------
// Type: IHTMLDOMConstructorCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDOMConstructorCollection = *opaque{
    // TODO: Method 'get_Attr'
    // TODO: Method 'get_BehaviorUrnsCollection'
    // TODO: Method 'get_BookmarkCollection'
    // TODO: Method 'get_CompatibleInfo'
    // TODO: Method 'get_CompatibleInfoCollection'
    // TODO: Method 'get_ControlRangeCollection'
    // TODO: Method 'get_CSSCurrentStyleDeclaration'
    // TODO: Method 'get_CSSRuleList'
    // TODO: Method 'get_CSSRuleStyleDeclaration'
    // TODO: Method 'get_CSSStyleDeclaration'
    // TODO: Method 'get_CSSStyleRule'
    // TODO: Method 'get_CSSStyleSheet'
    // TODO: Method 'get_DataTransfer'
    // TODO: Method 'get_DOMImplementation'
    // TODO: Method 'get_Element'
    // TODO: Method 'get_Event'
    // TODO: Method 'get_History'
    // TODO: Method 'get_HTCElementBehaviorDefaults'
    // TODO: Method 'get_HTMLAnchorElement'
    // TODO: Method 'get_HTMLAreaElement'
    // TODO: Method 'get_HTMLAreasCollection'
    // TODO: Method 'get_HTMLBaseElement'
    // TODO: Method 'get_HTMLBaseFontElement'
    // TODO: Method 'get_HTMLBGSoundElement'
    // TODO: Method 'get_HTMLBlockElement'
    // TODO: Method 'get_HTMLBodyElement'
    // TODO: Method 'get_HTMLBRElement'
    // TODO: Method 'get_HTMLButtonElement'
    // TODO: Method 'get_HTMLCollection'
    // TODO: Method 'get_HTMLCommentElement'
    // TODO: Method 'get_HTMLDDElement'
    // TODO: Method 'get_HTMLDivElement'
    // TODO: Method 'get_HTMLDocument'
    // TODO: Method 'get_HTMLDListElement'
    // TODO: Method 'get_HTMLDTElement'
    // TODO: Method 'get_HTMLEmbedElement'
    // TODO: Method 'get_HTMLFieldSetElement'
    // TODO: Method 'get_HTMLFontElement'
    // TODO: Method 'get_HTMLFormElement'
    // TODO: Method 'get_HTMLFrameElement'
    // TODO: Method 'get_HTMLFrameSetElement'
    // TODO: Method 'get_HTMLGenericElement'
    // TODO: Method 'get_HTMLHeadElement'
    // TODO: Method 'get_HTMLHeadingElement'
    // TODO: Method 'get_HTMLHRElement'
    // TODO: Method 'get_HTMLHtmlElement'
    // TODO: Method 'get_HTMLIFrameElement'
    // TODO: Method 'get_HTMLImageElement'
    // TODO: Method 'get_HTMLInputElement'
    // TODO: Method 'get_HTMLIsIndexElement'
    // TODO: Method 'get_HTMLLabelElement'
    // TODO: Method 'get_HTMLLegendElement'
    // TODO: Method 'get_HTMLLIElement'
    // TODO: Method 'get_HTMLLinkElement'
    // TODO: Method 'get_HTMLMapElement'
    // TODO: Method 'get_HTMLMarqueeElement'
    // TODO: Method 'get_HTMLMetaElement'
    // TODO: Method 'get_HTMLModelessDialog'
    // TODO: Method 'get_HTMLNamespaceInfo'
    // TODO: Method 'get_HTMLNamespaceInfoCollection'
    // TODO: Method 'get_HTMLNextIdElement'
    // TODO: Method 'get_HTMLNoShowElement'
    // TODO: Method 'get_HTMLObjectElement'
    // TODO: Method 'get_HTMLOListElement'
    // TODO: Method 'get_HTMLOptionElement'
    // TODO: Method 'get_HTMLParagraphElement'
    // TODO: Method 'get_HTMLParamElement'
    // TODO: Method 'get_HTMLPhraseElement'
    // TODO: Method 'get_HTMLPluginsCollection'
    // TODO: Method 'get_HTMLPopup'
    // TODO: Method 'get_HTMLScriptElement'
    // TODO: Method 'get_HTMLSelectElement'
    // TODO: Method 'get_HTMLSpanElement'
    // TODO: Method 'get_HTMLStyleElement'
    // TODO: Method 'get_HTMLTableCaptionElement'
    // TODO: Method 'get_HTMLTableCellElement'
    // TODO: Method 'get_HTMLTableColElement'
    // TODO: Method 'get_HTMLTableElement'
    // TODO: Method 'get_HTMLTableRowElement'
    // TODO: Method 'get_HTMLTableSectionElement'
    // TODO: Method 'get_HTMLTextAreaElement'
    // TODO: Method 'get_HTMLTextElement'
    // TODO: Method 'get_HTMLTitleElement'
    // TODO: Method 'get_HTMLUListElement'
    // TODO: Method 'get_HTMLUnknownElement'
    // TODO: Method 'get_Image'
    // TODO: Method 'get_Location'
    // TODO: Method 'get_NamedNodeMap'
    // TODO: Method 'get_Navigator'
    // TODO: Method 'get_NodeList'
    // TODO: Method 'get_Option'
    // TODO: Method 'get_Screen'
    // TODO: Method 'get_Selection'
    // TODO: Method 'get_StaticNodeList'
    // TODO: Method 'get_Storage'
    // TODO: Method 'get_StyleSheetList'
    // TODO: Method 'get_StyleSheetPage'
    // TODO: Method 'get_StyleSheetPageList'
    // TODO: Method 'get_Text'
    // TODO: Method 'get_TextRange'
    // TODO: Method 'get_TextRangeCollection'
    // TODO: Method 'get_TextRectangle'
    // TODO: Method 'get_TextRectangleList'
    // TODO: Method 'get_Window'
    // TODO: Method 'get_XDomainRequest'
    // TODO: Method 'get_XMLHttpRequest'
};
// --------------------------------------------------------
// Type: IHTMLDialog
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDialog = *opaque{
    // TODO: Method 'put_dialogTop'
    // TODO: Method 'get_dialogTop'
    // TODO: Method 'put_dialogLeft'
    // TODO: Method 'get_dialogLeft'
    // TODO: Method 'put_dialogWidth'
    // TODO: Method 'get_dialogWidth'
    // TODO: Method 'put_dialogHeight'
    // TODO: Method 'get_dialogHeight'
    // TODO: Method 'get_dialogArguments'
    // TODO: Method 'get_menuArguments'
    // TODO: Method 'put_returnValue'
    // TODO: Method 'get_returnValue'
    // TODO: Method 'close'
    // TODO: Method 'toString'
};
// --------------------------------------------------------
// Type: IHTMLDialog2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDialog2 = *opaque{
    // TODO: Method 'put_status'
    // TODO: Method 'get_status'
    // TODO: Method 'put_resizable'
    // TODO: Method 'get_resizable'
};
// --------------------------------------------------------
// Type: IHTMLDialog3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLDialog3 = *opaque{
    // TODO: Method 'put_unadorned'
    // TODO: Method 'get_unadorned'
    // TODO: Method 'put_dialogHide'
    // TODO: Method 'get_dialogHide'
};
// --------------------------------------------------------
// Type: IHTMLModelessInit
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLModelessInit = *opaque{
    // TODO: Method 'get_parameters'
    // TODO: Method 'get_optionString'
    // TODO: Method 'get_moniker'
    // TODO: Method 'get_document'
};
// --------------------------------------------------------
// Type: IHTMLPopup
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLPopup = *opaque{
    // TODO: Method 'show'
    // TODO: Method 'hide'
    // TODO: Method 'get_document'
    // TODO: Method 'get_isOpen'
};
// --------------------------------------------------------
// Type: DispHTMLPopup
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLPopup = *opaque{
};
// --------------------------------------------------------
// Type: IHTMLAppBehavior
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLAppBehavior = *opaque{
    // TODO: Method 'put_applicationName'
    // TODO: Method 'get_applicationName'
    // TODO: Method 'put_version'
    // TODO: Method 'get_version'
    // TODO: Method 'put_icon'
    // TODO: Method 'get_icon'
    // TODO: Method 'put_singleInstance'
    // TODO: Method 'get_singleInstance'
    // TODO: Method 'put_minimizeButton'
    // TODO: Method 'get_minimizeButton'
    // TODO: Method 'put_maximizeButton'
    // TODO: Method 'get_maximizeButton'
    // TODO: Method 'put_border'
    // TODO: Method 'get_border'
    // TODO: Method 'put_borderStyle'
    // TODO: Method 'get_borderStyle'
    // TODO: Method 'put_sysMenu'
    // TODO: Method 'get_sysMenu'
    // TODO: Method 'put_caption'
    // TODO: Method 'get_caption'
    // TODO: Method 'put_windowState'
    // TODO: Method 'get_windowState'
    // TODO: Method 'put_showInTaskBar'
    // TODO: Method 'get_showInTaskBar'
    // TODO: Method 'get_commandLine'
};
// --------------------------------------------------------
// Type: IHTMLAppBehavior2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLAppBehavior2 = *opaque{
    // TODO: Method 'put_contextMenu'
    // TODO: Method 'get_contextMenu'
    // TODO: Method 'put_innerBorder'
    // TODO: Method 'get_innerBorder'
    // TODO: Method 'put_scroll'
    // TODO: Method 'get_scroll'
    // TODO: Method 'put_scrollFlat'
    // TODO: Method 'get_scrollFlat'
    // TODO: Method 'put_selection'
    // TODO: Method 'get_selection'
};
// --------------------------------------------------------
// Type: IHTMLAppBehavior3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHTMLAppBehavior3 = *opaque{
    // TODO: Method 'put_navigable'
    // TODO: Method 'get_navigable'
};
// --------------------------------------------------------
// Type: DispHTMLAppBehavior
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispHTMLAppBehavior = *opaque{
};
// --------------------------------------------------------
// Type: DispIHTMLInputButtonElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispIHTMLInputButtonElement = *opaque{
};
// --------------------------------------------------------
// Type: DispIHTMLInputTextElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispIHTMLInputTextElement = *opaque{
};
// --------------------------------------------------------
// Type: DispIHTMLInputFileElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispIHTMLInputFileElement = *opaque{
};
// --------------------------------------------------------
// Type: DispIHTMLOptionButtonElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispIHTMLOptionButtonElement = *opaque{
};
// --------------------------------------------------------
// Type: DispIHTMLInputImage
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DispIHTMLInputImage = *opaque{
};
// --------------------------------------------------------
// Type: IElementNamespace
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IElementNamespace = *opaque{
    // TODO: Method 'AddTag'
};
// --------------------------------------------------------
// Type: IElementNamespaceTable
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IElementNamespaceTable = *opaque{
    // TODO: Method 'AddNamespace'
};
// --------------------------------------------------------
// Type: IElementNamespaceFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IElementNamespaceFactory = *opaque{
    // TODO: Method 'Create'
};
// --------------------------------------------------------
// Type: IElementNamespaceFactory2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IElementNamespaceFactory2 = *opaque{
    // TODO: Method 'CreateWithImplementation'
};
// --------------------------------------------------------
// Type: IElementNamespaceFactoryCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IElementNamespaceFactoryCallback = *opaque{
    // TODO: Method 'Resolve'
};
// --------------------------------------------------------
// Type: IElementBehaviorSiteOM2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IElementBehaviorSiteOM2 = *opaque{
    // TODO: Method 'GetDefaults'
};
// --------------------------------------------------------
// Type: IElementBehaviorCategory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IElementBehaviorCategory = *opaque{
    // TODO: Method 'GetCategory'
};
// --------------------------------------------------------
// Type: IElementBehaviorSiteCategory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IElementBehaviorSiteCategory = *opaque{
    // TODO: Method 'GetRelatedBehaviors'
};
// --------------------------------------------------------
// Type: IElementBehaviorSubmit
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IElementBehaviorSubmit = *opaque{
    // TODO: Method 'GetSubmitInfo'
    // TODO: Method 'Reset'
};
// --------------------------------------------------------
// Type: IElementBehaviorFocus
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IElementBehaviorFocus = *opaque{
    // TODO: Method 'GetFocusRect'
};
// --------------------------------------------------------
// Type: IElementBehaviorLayout
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IElementBehaviorLayout = *opaque{
    // TODO: Method 'GetSize'
    // TODO: Method 'GetLayoutInfo'
    // TODO: Method 'GetPosition'
    // TODO: Method 'MapSize'
};
// --------------------------------------------------------
// Type: IElementBehaviorLayout2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IElementBehaviorLayout2 = *opaque{
    // TODO: Method 'GetTextDescent'
};
// --------------------------------------------------------
// Type: IElementBehaviorSiteLayout
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IElementBehaviorSiteLayout = *opaque{
    // TODO: Method 'InvalidateLayoutInfo'
    // TODO: Method 'InvalidateSize'
    // TODO: Method 'GetMediaResolution'
};
// --------------------------------------------------------
// Type: IElementBehaviorSiteLayout2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IElementBehaviorSiteLayout2 = *opaque{
    // TODO: Method 'GetFontInfo'
};
// --------------------------------------------------------
// Type: IHostBehaviorInit
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHostBehaviorInit = *opaque{
    // TODO: Method 'PopulateNamespaceTable'
};
// --------------------------------------------------------
// Type: ISurfacePresenter
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISurfacePresenter = *opaque{
    // TODO: Method 'Present'
    // TODO: Method 'GetBuffer'
    // TODO: Method 'IsCurrent'
};
// --------------------------------------------------------
// Type: IViewObjectPresentSite
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IViewObjectPresentSite = *opaque{
    // TODO: Method 'CreateSurfacePresenter'
    // TODO: Method 'IsHardwareComposition'
    // TODO: Method 'SetCompositionMode'
};
// --------------------------------------------------------
// Type: ICanvasPixelArrayData
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICanvasPixelArrayData = *opaque{
    // TODO: Method 'GetBufferPointer'
};
// --------------------------------------------------------
// Type: IViewObjectPrint
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IViewObjectPrint = *opaque{
    // TODO: Method 'GetPrintBitmap'
};
// --------------------------------------------------------
// Type: IViewObjectPresentNotifySite
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IViewObjectPresentNotifySite = *opaque{
    // TODO: Method 'RequestFrame'
};
// --------------------------------------------------------
// Type: IViewObjectPresentNotify
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IViewObjectPresentNotify = *opaque{
    // TODO: Method 'OnPreRender'
};
// --------------------------------------------------------
// Type: ITrackingProtection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITrackingProtection = *opaque{
    // TODO: Method 'EvaluateUrl'
    // TODO: Method 'GetEnabled'
};
// --------------------------------------------------------
// Type: IBFCacheable
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IBFCacheable = *opaque{
    // TODO: Method 'EnterBFCache'
    // TODO: Method 'ExitBFCache'
};
// --------------------------------------------------------
// Type: IWebApplicationScriptEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWebApplicationScriptEvents = *opaque{
    // TODO: Method 'BeforeScriptExecute'
    // TODO: Method 'ScriptError'
};
// --------------------------------------------------------
// Type: IWebApplicationNavigationEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWebApplicationNavigationEvents = *opaque{
    // TODO: Method 'BeforeNavigate'
    // TODO: Method 'NavigateComplete'
    // TODO: Method 'NavigateError'
    // TODO: Method 'DocumentComplete'
    // TODO: Method 'DownloadBegin'
    // TODO: Method 'DownloadComplete'
};
// --------------------------------------------------------
// Type: IWebApplicationUIEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWebApplicationUIEvents = *opaque{
    // TODO: Method 'SecurityProblem'
};
// --------------------------------------------------------
// Type: IWebApplicationUpdateEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWebApplicationUpdateEvents = *opaque{
    // TODO: Method 'OnPaint'
    // TODO: Method 'OnCssChanged'
};
// --------------------------------------------------------
// Type: IWebApplicationHost
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWebApplicationHost = *opaque{
    // TODO: Method 'get_HWND'
    // TODO: Method 'get_Document'
    // TODO: Method 'Refresh'
    // TODO: Method 'Advise'
    // TODO: Method 'Unadvise'
};
// --------------------------------------------------------
// Type: IWebApplicationActivation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWebApplicationActivation = *opaque{
    // TODO: Method 'CancelPendingActivation'
};
// --------------------------------------------------------
// Type: IWebApplicationAuthoringMode
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWebApplicationAuthoringMode = *opaque{
    // TODO: Method 'get_AuthoringClientBinary'
};
// --------------------------------------------------------
// Type: RegisterAuthoringClientFunctionType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RegisterAuthoringClientFunctionType = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: UnregisterAuthoringClientFunctionType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UnregisterAuthoringClientFunctionType = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
],

"func_definitions": [

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn FlashWindow(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    bInvert: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn FlashWindowEx(
    pfwi: {"kind""Ptr","child":Windows.Win32.Debug.FLASHWINFO},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn MessageBeep(
    uType: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn SetLastErrorEx(
    dwErrCode: {"kind":"UInt32"},
    dwType: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn RtlCaptureContext(
    ContextRecord: {"kind""Ptr","child":Windows.Win32.Debug.CONTEXT},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn RtlUnwind(
    TargetFrame: {"kind""Ptr","child":{"kind":"Void"}},
    TargetIp: {"kind""Ptr","child":{"kind":"Void"}},
    ExceptionRecord: {"kind""Ptr","child":Windows.Win32.Debug.EXCEPTION_RECORD},
    ReturnValue: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn RtlPcToFileHeader(
    PcValue: {"kind""Ptr","child":{"kind":"Void"}},
    BaseOfImage: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn ReadProcessMemory(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    lpBaseAddress: {"kind""Ptr","child":{"kind":"Void"}},
    lpBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    nSize: {"kind":"UIntPtr"},
    lpNumberOfBytesRead: {"kind""Ptr","child":{"kind":"UIntPtr"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn WriteProcessMemory(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    lpBaseAddress: {"kind""Ptr","child":{"kind":"Void"}},
    lpBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    nSize: {"kind":"UIntPtr"},
    lpNumberOfBytesWritten: {"kind""Ptr","child":{"kind":"UIntPtr"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn Wow64GetThreadContext(
    hThread: Windows.Win32.SystemServices.HANDLE,
    lpContext: {"kind""Ptr","child":Windows.Win32.Debug.WOW64_CONTEXT},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn Wow64SetThreadContext(
    hThread: Windows.Win32.SystemServices.HANDLE,
    lpContext: {"kind""Ptr","child":Windows.Win32.Debug.WOW64_CONTEXT},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetThreadContext(
    hThread: Windows.Win32.SystemServices.HANDLE,
    lpContext: {"kind""Ptr","child":Windows.Win32.Debug.CONTEXT},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetThreadContext(
    hThread: Windows.Win32.SystemServices.HANDLE,
    lpContext: {"kind""Ptr","child":Windows.Win32.Debug.CONTEXT},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FlushInstructionCache(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    lpBaseAddress: {"kind""Ptr","child":{"kind":"Void"}},
    dwSize: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn FatalExit(
    ExitCode: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetThreadSelectorEntry(
    hThread: Windows.Win32.SystemServices.HANDLE,
    dwSelector: {"kind":"UInt32"},
    lpSelectorEntry: {"kind""Ptr","child":Windows.Win32.Debug.LDT_ENTRY},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn Wow64GetThreadSelectorEntry(
    hThread: Windows.Win32.SystemServices.HANDLE,
    dwSelector: {"kind":"UInt32"},
    lpSelectorEntry: {"kind""Ptr","child":Windows.Win32.Debug.WOW64_LDT_ENTRY},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn DebugSetProcessKillOnExit(
    KillOnExit: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn DebugBreakProcess(
    Process: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FormatMessageA(
    dwFlags: {"kind":"UInt32"},
    lpSource: {"kind""Ptr","child":{"kind":"Void"}},
    dwMessageId: {"kind":"UInt32"},
    dwLanguageId: {"kind":"UInt32"},
    lpBuffer: {"kind""Ptr","child":{"kind":"SByte"}},
    nSize: {"kind":"UInt32"},
    Arguments: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FormatMessageW(
    dwFlags: {"kind":"UInt32"},
    lpSource: {"kind""Ptr","child":{"kind":"Void"}},
    dwMessageId: {"kind":"UInt32"},
    dwLanguageId: {"kind":"UInt32"},
    lpBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    nSize: {"kind":"UInt32"},
    Arguments: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CopyContext(
    Destination: {"kind""Ptr","child":Windows.Win32.Debug.CONTEXT},
    ContextFlags: {"kind":"UInt32"},
    Source: {"kind""Ptr","child":Windows.Win32.Debug.CONTEXT},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn InitializeContext(
    Buffer: {"kind""Ptr","child":{"kind":"Void"}},
    ContextFlags: {"kind":"UInt32"},
    Context: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Debug.CONTEXT}},
    ContextLength: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetEnabledXStateFeatures(

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetXStateFeaturesMask(
    Context: {"kind""Ptr","child":Windows.Win32.Debug.CONTEXT},
    FeatureMask: {"kind""Ptr","child":{"kind":"UInt64"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn LocateXStateFeature(
    Context: {"kind""Ptr","child":Windows.Win32.Debug.CONTEXT},
    FeatureId: {"kind":"UInt32"},
    Length: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetXStateFeaturesMask(
    Context: {"kind""Ptr","child":Windows.Win32.Debug.CONTEXT},
    FeatureMask: {"kind":"UInt64"},

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlNtStatusToDosError(
    Status: Windows.Win32.SystemServices.NTSTATUS,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn IsDebuggerPresent(

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn DebugBreak(

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn OutputDebugStringA(
    lpOutputString: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn OutputDebugStringW(
    lpOutputString: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn ContinueDebugEvent(
    dwProcessId: {"kind":"UInt32"},
    dwThreadId: {"kind":"UInt32"},
    dwContinueStatus: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn WaitForDebugEvent(
    lpDebugEvent: {"kind""Ptr","child":Windows.Win32.Debug.DEBUG_EVENT},
    dwMilliseconds: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn DebugActiveProcess(
    dwProcessId: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn DebugActiveProcessStop(
    dwProcessId: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CheckRemoteDebuggerPresent(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    pbDebuggerPresent: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn WaitForDebugEventEx(
    lpDebugEvent: {"kind""Ptr","child":Windows.Win32.Debug.DEBUG_EVENT},
    dwMilliseconds: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn EncodePointer(
    Ptr: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn DecodePointer(
    Ptr: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn EncodeSystemPointer(
    Ptr: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn DecodeSystemPointer(
    Ptr: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-util-l1-1-1" fn EncodeRemotePointer(
    ProcessHandle: Windows.Win32.SystemServices.HANDLE,
    Ptr: {"kind""Ptr","child":{"kind":"Void"}},
    EncodedPtr: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-util-l1-1-1" fn DecodeRemotePointer(
    ProcessHandle: Windows.Win32.SystemServices.HANDLE,
    Ptr: {"kind""Ptr","child":{"kind":"Void"}},
    DecodedPtr: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn Beep(
    dwFreq: {"kind":"UInt32"},
    dwDuration: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn RaiseException(
    dwExceptionCode: {"kind":"UInt32"},
    dwExceptionFlags: {"kind":"UInt32"},
    nNumberOfArguments: {"kind":"UInt32"},
    lpArguments: {"kind""Ptr","child":{"kind":"UIntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn UnhandledExceptionFilter(
    ExceptionInfo: {"kind""Ptr","child":Windows.Win32.Debug.EXCEPTION_POINTERS},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetUnhandledExceptionFilter(
    lpTopLevelExceptionFilter: Windows.Win32.Debug.LPTOP_LEVEL_EXCEPTION_FILTER,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetLastError(

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetLastError(
    dwErrCode: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetErrorMode(

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetErrorMode(
    uMode: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn AddVectoredExceptionHandler(
    First: {"kind":"UInt32"},
    Handler: Windows.Win32.Debug.PVECTORED_EXCEPTION_HANDLER,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn RemoveVectoredExceptionHandler(
    Handle: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn AddVectoredContinueHandler(
    First: {"kind":"UInt32"},
    Handler: Windows.Win32.Debug.PVECTORED_EXCEPTION_HANDLER,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn RemoveVectoredContinueHandler(
    Handle: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn RaiseFailFastException(
    pExceptionRecord: {"kind""Ptr","child":Windows.Win32.Debug.EXCEPTION_RECORD},
    pContextRecord: {"kind""Ptr","child":Windows.Win32.Debug.CONTEXT},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn FatalAppExitA(
    uAction: {"kind":"UInt32"},
    lpMessageText: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn FatalAppExitW(
    uAction: {"kind":"UInt32"},
    lpMessageText: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetThreadErrorMode(

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetThreadErrorMode(
    dwNewMode: {"kind":"UInt32"},
    lpOldMode: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-errorhandling-l1-1-3" fn TerminateProcessOnMemoryExhaustion(
    FailedAllocationSize: {"kind":"UIntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn OpenThreadWaitChainSession(
    Flags: {"kind":"UInt32"},
    callback: Windows.Win32.Debug.PWAITCHAINCALLBACK,

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn CloseThreadWaitChainSession(
    WctHandle: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetThreadWaitChain(
    WctHandle: {"kind""Ptr","child":{"kind":"Void"}},
    Context: {"kind":"UIntPtr"},
    Flags: {"kind":"UInt32"},
    ThreadId: {"kind":"UInt32"},
    NodeCount: {"kind""Ptr","child":{"kind":"UInt32"}},
    NodeInfoArray: {"kind""Ptr","child":Windows.Win32.Debug.WAITCHAIN_NODE_INFO},
    IsCycle: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegisterWaitChainCOMCallback(
    CallStateCallback: Windows.Win32.Debug.PCOGETCALLSTATE,
    ActivationStateCallback: Windows.Win32.Debug.PCOGETACTIVATIONSTATE,

// set_last_errror=True (can and should we use this?)
pub extern "api-ms-win-core-debug-minidump-l1-1-0" fn MiniDumpWriteDump(
    hProcess: Windows.Win32.SystemServices.HANDLE,
    ProcessId: {"kind":"UInt32"},
    hFile: Windows.Win32.SystemServices.HANDLE,
    DumpType: Windows.Win32.Debug.MINIDUMP_TYPE,
    ExceptionParam: {"kind""Ptr","child":Windows.Win32.Debug.MINIDUMP_EXCEPTION_INFORMATION},
    UserStreamParam: {"kind""Ptr","child":Windows.Win32.Debug.MINIDUMP_USER_STREAM_INFORMATION},
    CallbackParam: {"kind""Ptr","child":Windows.Win32.Debug.MINIDUMP_CALLBACK_INFORMATION},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-debug-minidump-l1-1-0" fn MiniDumpReadDumpStream(
    BaseOfDump: {"kind""Ptr","child":{"kind":"Void"}},
    StreamNumber: {"kind":"UInt32"},
    Dir: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Debug.MINIDUMP_DIRECTORY}},
    StreamPointer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    StreamSize: {"kind""Ptr","child":{"kind":"UInt32"}},
],

"unicode_aliases": [
     "FormatMessage"
     "OutputDebugString"
     "FatalAppExit"
]}
