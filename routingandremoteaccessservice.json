{
"constants": [
],

"types_definitions": [
// --------------------------------------------------------
// Type: RASAPIVERSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RASAPIVERSION = *opaque{
};
// --------------------------------------------------------
// Type: RASIPADDR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RASIPADDR = extern struct {
    a: {"kind":"Byte"},
    b: {"kind":"Byte"},
    c: {"kind":"Byte"},
    d: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: tagRASTUNNELENDPOINT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASTUNNELENDPOINT = extern struct {
    dwType: {"kind":"UInt32"},
    Anonymous: Windows.Win32.RoutingAndRemoteAccessService.tagRASTUNNELENDPOINT+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: HRASCONN__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HRASCONN__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: tagRASCONNW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASCONNW = extern struct {
    dwSize: {"kind":"UInt32"},
    hrasconn: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.HRASCONN__},
    szEntryName: {"kind":"Array","child": {"kind":"UInt16"}},
    szDeviceType: {"kind":"Array","child": {"kind":"UInt16"}},
    szDeviceName: {"kind":"Array","child": {"kind":"UInt16"}},
    szPhonebook: {"kind":"Array","child": {"kind":"UInt16"}},
    dwSubEntry: {"kind":"UInt32"},
    guidEntry: Guid,
    dwFlags: {"kind":"UInt32"},
    luid: Windows.Win32.Kernel.LUID,
    guidCorrelationId: Guid,
};
// --------------------------------------------------------
// Type: tagRASCONNA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASCONNA = extern struct {
    dwSize: {"kind":"UInt32"},
    hrasconn: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.HRASCONN__},
    szEntryName: {"kind":"Array","child": {"kind":"SByte"}},
    szDeviceType: {"kind":"Array","child": {"kind":"SByte"}},
    szDeviceName: {"kind":"Array","child": {"kind":"SByte"}},
    szPhonebook: {"kind":"Array","child": {"kind":"SByte"}},
    dwSubEntry: {"kind":"UInt32"},
    guidEntry: Guid,
    dwFlags: {"kind":"UInt32"},
    luid: Windows.Win32.Kernel.LUID,
    guidCorrelationId: Guid,
};
// --------------------------------------------------------
// Type: tagRASCONNSTATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const tagRASCONNSTATE = *opaque{
};
// --------------------------------------------------------
// Type: tagRASCONNSUBSTATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const tagRASCONNSUBSTATE = *opaque{
};
// --------------------------------------------------------
// Type: tagRASCONNSTATUSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASCONNSTATUSW = extern struct {
    dwSize: {"kind":"UInt32"},
    rasconnstate: Windows.Win32.RoutingAndRemoteAccessService.tagRASCONNSTATE,
    dwError: {"kind":"UInt32"},
    szDeviceType: {"kind":"Array","child": {"kind":"UInt16"}},
    szDeviceName: {"kind":"Array","child": {"kind":"UInt16"}},
    szPhoneNumber: {"kind":"Array","child": {"kind":"UInt16"}},
    localEndPoint: Windows.Win32.RoutingAndRemoteAccessService.tagRASTUNNELENDPOINT,
    remoteEndPoint: Windows.Win32.RoutingAndRemoteAccessService.tagRASTUNNELENDPOINT,
    rasconnsubstate: Windows.Win32.RoutingAndRemoteAccessService.tagRASCONNSUBSTATE,
};
// --------------------------------------------------------
// Type: tagRASCONNSTATUSA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASCONNSTATUSA = extern struct {
    dwSize: {"kind":"UInt32"},
    rasconnstate: Windows.Win32.RoutingAndRemoteAccessService.tagRASCONNSTATE,
    dwError: {"kind":"UInt32"},
    szDeviceType: {"kind":"Array","child": {"kind":"SByte"}},
    szDeviceName: {"kind":"Array","child": {"kind":"SByte"}},
    szPhoneNumber: {"kind":"Array","child": {"kind":"SByte"}},
    localEndPoint: Windows.Win32.RoutingAndRemoteAccessService.tagRASTUNNELENDPOINT,
    remoteEndPoint: Windows.Win32.RoutingAndRemoteAccessService.tagRASTUNNELENDPOINT,
    rasconnsubstate: Windows.Win32.RoutingAndRemoteAccessService.tagRASCONNSUBSTATE,
};
// --------------------------------------------------------
// Type: tagRASDIALPARAMSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASDIALPARAMSW = extern struct {
    dwSize: {"kind":"UInt32"},
    szEntryName: {"kind":"Array","child": {"kind":"UInt16"}},
    szPhoneNumber: {"kind":"Array","child": {"kind":"UInt16"}},
    szCallbackNumber: {"kind":"Array","child": {"kind":"UInt16"}},
    szUserName: {"kind":"Array","child": {"kind":"UInt16"}},
    szPassword: {"kind":"Array","child": {"kind":"UInt16"}},
    szDomain: {"kind":"Array","child": {"kind":"UInt16"}},
    dwSubEntry: {"kind":"UInt32"},
    dwCallbackId: {"kind":"UIntPtr"},
    dwIfIndex: {"kind":"UInt32"},
    szEncPassword: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: tagRASDIALPARAMSA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASDIALPARAMSA = extern struct {
    dwSize: {"kind":"UInt32"},
    szEntryName: {"kind":"Array","child": {"kind":"SByte"}},
    szPhoneNumber: {"kind":"Array","child": {"kind":"SByte"}},
    szCallbackNumber: {"kind":"Array","child": {"kind":"SByte"}},
    szUserName: {"kind":"Array","child": {"kind":"SByte"}},
    szPassword: {"kind":"Array","child": {"kind":"SByte"}},
    szDomain: {"kind":"Array","child": {"kind":"SByte"}},
    dwSubEntry: {"kind":"UInt32"},
    dwCallbackId: {"kind":"UIntPtr"},
    dwIfIndex: {"kind":"UInt32"},
    szEncPassword: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: tagRASEAPINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASEAPINFO = extern struct {
    dwSizeofEapInfo: {"kind":"UInt32"},
    pbEapInfo: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: RASDEVSPECIFICINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RASDEVSPECIFICINFO = extern struct {
    dwSize: {"kind":"UInt32"},
    pbDevSpecificInfo: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: tagRASDIALEXTENSIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASDIALEXTENSIONS = extern struct {
    dwSize: {"kind":"UInt32"},
    dwfOptions: {"kind":"UInt32"},
    hwndParent: Windows.Win32.WindowsAndMessaging.HWND,
    reserved: {"kind":"UIntPtr"},
    reserved1: {"kind":"UIntPtr"},
    RasEapInfo: Windows.Win32.RoutingAndRemoteAccessService.tagRASEAPINFO,
    fSkipPppAuth: Windows.Win32.SystemServices.BOOL,
    RasDevSpecificInfo: Windows.Win32.RoutingAndRemoteAccessService.RASDEVSPECIFICINFO,
};
// --------------------------------------------------------
// Type: tagRASENTRYNAMEW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASENTRYNAMEW = extern struct {
    dwSize: {"kind":"UInt32"},
    szEntryName: {"kind":"Array","child": {"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    szPhonebookPath: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: tagRASENTRYNAMEA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASENTRYNAMEA = extern struct {
    dwSize: {"kind":"UInt32"},
    szEntryName: {"kind":"Array","child": {"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},
    szPhonebookPath: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: tagRASPROJECTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const tagRASPROJECTION = *opaque{
};
// --------------------------------------------------------
// Type: tagRASAMBW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASAMBW = extern struct {
    dwSize: {"kind":"UInt32"},
    dwError: {"kind":"UInt32"},
    szNetBiosError: {"kind":"Array","child": {"kind":"UInt16"}},
    bLana: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: tagRASAMBA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASAMBA = extern struct {
    dwSize: {"kind":"UInt32"},
    dwError: {"kind":"UInt32"},
    szNetBiosError: {"kind":"Array","child": {"kind":"SByte"}},
    bLana: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: tagRASPPPNBFW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASPPPNBFW = extern struct {
    dwSize: {"kind":"UInt32"},
    dwError: {"kind":"UInt32"},
    dwNetBiosError: {"kind":"UInt32"},
    szNetBiosError: {"kind":"Array","child": {"kind":"UInt16"}},
    szWorkstationName: {"kind":"Array","child": {"kind":"UInt16"}},
    bLana: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: tagRASPPPNBFA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASPPPNBFA = extern struct {
    dwSize: {"kind":"UInt32"},
    dwError: {"kind":"UInt32"},
    dwNetBiosError: {"kind":"UInt32"},
    szNetBiosError: {"kind":"Array","child": {"kind":"SByte"}},
    szWorkstationName: {"kind":"Array","child": {"kind":"SByte"}},
    bLana: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: tagRASIPXW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASIPXW = extern struct {
    dwSize: {"kind":"UInt32"},
    dwError: {"kind":"UInt32"},
    szIpxAddress: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: tagRASPPPIPXA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASPPPIPXA = extern struct {
    dwSize: {"kind":"UInt32"},
    dwError: {"kind":"UInt32"},
    szIpxAddress: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: tagRASPPPIPW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASPPPIPW = extern struct {
    dwSize: {"kind":"UInt32"},
    dwError: {"kind":"UInt32"},
    szIpAddress: {"kind":"Array","child": {"kind":"UInt16"}},
    szServerIpAddress: {"kind":"Array","child": {"kind":"UInt16"}},
    dwOptions: {"kind":"UInt32"},
    dwServerOptions: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: tagRASPPPIPA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASPPPIPA = extern struct {
    dwSize: {"kind":"UInt32"},
    dwError: {"kind":"UInt32"},
    szIpAddress: {"kind":"Array","child": {"kind":"SByte"}},
    szServerIpAddress: {"kind":"Array","child": {"kind":"SByte"}},
    dwOptions: {"kind":"UInt32"},
    dwServerOptions: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: tagRASPPPIPV6
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASPPPIPV6 = extern struct {
    dwSize: {"kind":"UInt32"},
    dwError: {"kind":"UInt32"},
    bLocalInterfaceIdentifier: {"kind":"Array","child": {"kind":"Byte"}},
    bPeerInterfaceIdentifier: {"kind":"Array","child": {"kind":"Byte"}},
    bLocalCompressionProtocol: {"kind":"Array","child": {"kind":"Byte"}},
    bPeerCompressionProtocol: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: tagRASPPPLCPW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASPPPLCPW = extern struct {
    dwSize: {"kind":"UInt32"},
    fBundled: Windows.Win32.SystemServices.BOOL,
    dwError: {"kind":"UInt32"},
    dwAuthenticationProtocol: {"kind":"UInt32"},
    dwAuthenticationData: {"kind":"UInt32"},
    dwEapTypeId: {"kind":"UInt32"},
    dwServerAuthenticationProtocol: {"kind":"UInt32"},
    dwServerAuthenticationData: {"kind":"UInt32"},
    dwServerEapTypeId: {"kind":"UInt32"},
    fMultilink: Windows.Win32.SystemServices.BOOL,
    dwTerminateReason: {"kind":"UInt32"},
    dwServerTerminateReason: {"kind":"UInt32"},
    szReplyMessage: {"kind":"Array","child": {"kind":"UInt16"}},
    dwOptions: {"kind":"UInt32"},
    dwServerOptions: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: tagRASPPPLCPA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASPPPLCPA = extern struct {
    dwSize: {"kind":"UInt32"},
    fBundled: Windows.Win32.SystemServices.BOOL,
    dwError: {"kind":"UInt32"},
    dwAuthenticationProtocol: {"kind":"UInt32"},
    dwAuthenticationData: {"kind":"UInt32"},
    dwEapTypeId: {"kind":"UInt32"},
    dwServerAuthenticationProtocol: {"kind":"UInt32"},
    dwServerAuthenticationData: {"kind":"UInt32"},
    dwServerEapTypeId: {"kind":"UInt32"},
    fMultilink: Windows.Win32.SystemServices.BOOL,
    dwTerminateReason: {"kind":"UInt32"},
    dwServerTerminateReason: {"kind":"UInt32"},
    szReplyMessage: {"kind":"Array","child": {"kind":"SByte"}},
    dwOptions: {"kind":"UInt32"},
    dwServerOptions: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: tagRASPPPCCP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASPPPCCP = extern struct {
    dwSize: {"kind":"UInt32"},
    dwError: {"kind":"UInt32"},
    dwCompressionAlgorithm: {"kind":"UInt32"},
    dwOptions: {"kind":"UInt32"},
    dwServerCompressionAlgorithm: {"kind":"UInt32"},
    dwServerOptions: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: RASPPP_PROJECTION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RASPPP_PROJECTION_INFO = extern struct {
    dwIPv4NegotiationError: {"kind":"UInt32"},
    ipv4Address: Windows.Win32.WinSock.in_addr,
    ipv4ServerAddress: Windows.Win32.WinSock.in_addr,
    dwIPv4Options: {"kind":"UInt32"},
    dwIPv4ServerOptions: {"kind":"UInt32"},
    dwIPv6NegotiationError: {"kind":"UInt32"},
    bInterfaceIdentifier: {"kind":"Array","child": {"kind":"Byte"}},
    bServerInterfaceIdentifier: {"kind":"Array","child": {"kind":"Byte"}},
    fBundled: Windows.Win32.SystemServices.BOOL,
    fMultilink: Windows.Win32.SystemServices.BOOL,
    dwAuthenticationProtocol: {"kind":"UInt32"},
    dwAuthenticationData: {"kind":"UInt32"},
    dwServerAuthenticationProtocol: {"kind":"UInt32"},
    dwServerAuthenticationData: {"kind":"UInt32"},
    dwEapTypeId: {"kind":"UInt32"},
    dwServerEapTypeId: {"kind":"UInt32"},
    dwLcpOptions: {"kind":"UInt32"},
    dwLcpServerOptions: {"kind":"UInt32"},
    dwCcpError: {"kind":"UInt32"},
    dwCcpCompressionAlgorithm: {"kind":"UInt32"},
    dwCcpServerCompressionAlgorithm: {"kind":"UInt32"},
    dwCcpOptions: {"kind":"UInt32"},
    dwCcpServerOptions: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: RASIKEV2_PROJECTION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RASIKEV2_PROJECTION_INFO = extern struct {
    dwIPv4NegotiationError: {"kind":"UInt32"},
    ipv4Address: Windows.Win32.WinSock.in_addr,
    ipv4ServerAddress: Windows.Win32.WinSock.in_addr,
    dwIPv6NegotiationError: {"kind":"UInt32"},
    ipv6Address: Windows.Win32.WinSock.in6_addr,
    ipv6ServerAddress: Windows.Win32.WinSock.in6_addr,
    dwPrefixLength: {"kind":"UInt32"},
    dwAuthenticationProtocol: {"kind":"UInt32"},
    dwEapTypeId: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    dwEncryptionMethod: {"kind":"UInt32"},
    numIPv4ServerAddresses: {"kind":"UInt32"},
    ipv4ServerAddresses: {"kind""Ptr","child":Windows.Win32.WinSock.in_addr},
    numIPv6ServerAddresses: {"kind":"UInt32"},
    ipv6ServerAddresses: {"kind""Ptr","child":Windows.Win32.WinSock.in6_addr},
};
// --------------------------------------------------------
// Type: RASPROJECTION_INFO_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RASPROJECTION_INFO_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IKEV2_ID_PAYLOAD_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IKEV2_ID_PAYLOAD_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: RAS_PROJECTION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RAS_PROJECTION_INFO = extern struct {
    version: Windows.Win32.RoutingAndRemoteAccessService.RASAPIVERSION,
    type: Windows.Win32.RoutingAndRemoteAccessService.RASPROJECTION_INFO_TYPE,
    Anonymous: Windows.Win32.RoutingAndRemoteAccessService.RAS_PROJECTION_INFO+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: RASDIALFUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RASDIALFUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RASDIALFUNC1
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RASDIALFUNC1 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RASDIALFUNC2
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RASDIALFUNC2 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: tagRASDEVINFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASDEVINFOW = extern struct {
    dwSize: {"kind":"UInt32"},
    szDeviceType: {"kind":"Array","child": {"kind":"UInt16"}},
    szDeviceName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: tagRASDEVINFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASDEVINFOA = extern struct {
    dwSize: {"kind":"UInt32"},
    szDeviceType: {"kind":"Array","child": {"kind":"SByte"}},
    szDeviceName: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: RASCTRYINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RASCTRYINFO = extern struct {
    dwSize: {"kind":"UInt32"},
    dwCountryID: {"kind":"UInt32"},
    dwNextCountryID: {"kind":"UInt32"},
    dwCountryCode: {"kind":"UInt32"},
    dwCountryNameOffset: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: tagRASENTRYA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASENTRYA = extern struct {
    dwSize: {"kind":"UInt32"},
    dwfOptions: {"kind":"UInt32"},
    dwCountryID: {"kind":"UInt32"},
    dwCountryCode: {"kind":"UInt32"},
    szAreaCode: {"kind":"Array","child": {"kind":"SByte"}},
    szLocalPhoneNumber: {"kind":"Array","child": {"kind":"SByte"}},
    dwAlternateOffset: {"kind":"UInt32"},
    ipaddr: Windows.Win32.RoutingAndRemoteAccessService.RASIPADDR,
    ipaddrDns: Windows.Win32.RoutingAndRemoteAccessService.RASIPADDR,
    ipaddrDnsAlt: Windows.Win32.RoutingAndRemoteAccessService.RASIPADDR,
    ipaddrWins: Windows.Win32.RoutingAndRemoteAccessService.RASIPADDR,
    ipaddrWinsAlt: Windows.Win32.RoutingAndRemoteAccessService.RASIPADDR,
    dwFrameSize: {"kind":"UInt32"},
    dwfNetProtocols: {"kind":"UInt32"},
    dwFramingProtocol: {"kind":"UInt32"},
    szScript: {"kind":"Array","child": {"kind":"SByte"}},
    szAutodialDll: {"kind":"Array","child": {"kind":"SByte"}},
    szAutodialFunc: {"kind":"Array","child": {"kind":"SByte"}},
    szDeviceType: {"kind":"Array","child": {"kind":"SByte"}},
    szDeviceName: {"kind":"Array","child": {"kind":"SByte"}},
    szX25PadType: {"kind":"Array","child": {"kind":"SByte"}},
    szX25Address: {"kind":"Array","child": {"kind":"SByte"}},
    szX25Facilities: {"kind":"Array","child": {"kind":"SByte"}},
    szX25UserData: {"kind":"Array","child": {"kind":"SByte"}},
    dwChannels: {"kind":"UInt32"},
    dwReserved1: {"kind":"UInt32"},
    dwReserved2: {"kind":"UInt32"},
    dwSubEntries: {"kind":"UInt32"},
    dwDialMode: {"kind":"UInt32"},
    dwDialExtraPercent: {"kind":"UInt32"},
    dwDialExtraSampleSeconds: {"kind":"UInt32"},
    dwHangUpExtraPercent: {"kind":"UInt32"},
    dwHangUpExtraSampleSeconds: {"kind":"UInt32"},
    dwIdleDisconnectSeconds: {"kind":"UInt32"},
    dwType: {"kind":"UInt32"},
    dwEncryptionType: {"kind":"UInt32"},
    dwCustomAuthKey: {"kind":"UInt32"},
    guidId: Guid,
    szCustomDialDll: {"kind":"Array","child": {"kind":"SByte"}},
    dwVpnStrategy: {"kind":"UInt32"},
    dwfOptions2: {"kind":"UInt32"},
    dwfOptions3: {"kind":"UInt32"},
    szDnsSuffix: {"kind":"Array","child": {"kind":"SByte"}},
    dwTcpWindowSize: {"kind":"UInt32"},
    szPrerequisitePbk: {"kind":"Array","child": {"kind":"SByte"}},
    szPrerequisiteEntry: {"kind":"Array","child": {"kind":"SByte"}},
    dwRedialCount: {"kind":"UInt32"},
    dwRedialPause: {"kind":"UInt32"},
    ipv6addrDns: Windows.Win32.WinSock.in6_addr,
    ipv6addrDnsAlt: Windows.Win32.WinSock.in6_addr,
    dwIPv4InterfaceMetric: {"kind":"UInt32"},
    dwIPv6InterfaceMetric: {"kind":"UInt32"},
    ipv6addr: Windows.Win32.WinSock.in6_addr,
    dwIPv6PrefixLength: {"kind":"UInt32"},
    dwNetworkOutageTime: {"kind":"UInt32"},
    szIDi: {"kind":"Array","child": {"kind":"SByte"}},
    szIDr: {"kind":"Array","child": {"kind":"SByte"}},
    fIsImsConfig: Windows.Win32.SystemServices.BOOL,
    IdiType: Windows.Win32.RoutingAndRemoteAccessService.IKEV2_ID_PAYLOAD_TYPE,
    IdrType: Windows.Win32.RoutingAndRemoteAccessService.IKEV2_ID_PAYLOAD_TYPE,
    fDisableIKEv2Fragmentation: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: tagRASENTRYW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASENTRYW = extern struct {
    dwSize: {"kind":"UInt32"},
    dwfOptions: {"kind":"UInt32"},
    dwCountryID: {"kind":"UInt32"},
    dwCountryCode: {"kind":"UInt32"},
    szAreaCode: {"kind":"Array","child": {"kind":"UInt16"}},
    szLocalPhoneNumber: {"kind":"Array","child": {"kind":"UInt16"}},
    dwAlternateOffset: {"kind":"UInt32"},
    ipaddr: Windows.Win32.RoutingAndRemoteAccessService.RASIPADDR,
    ipaddrDns: Windows.Win32.RoutingAndRemoteAccessService.RASIPADDR,
    ipaddrDnsAlt: Windows.Win32.RoutingAndRemoteAccessService.RASIPADDR,
    ipaddrWins: Windows.Win32.RoutingAndRemoteAccessService.RASIPADDR,
    ipaddrWinsAlt: Windows.Win32.RoutingAndRemoteAccessService.RASIPADDR,
    dwFrameSize: {"kind":"UInt32"},
    dwfNetProtocols: {"kind":"UInt32"},
    dwFramingProtocol: {"kind":"UInt32"},
    szScript: {"kind":"Array","child": {"kind":"UInt16"}},
    szAutodialDll: {"kind":"Array","child": {"kind":"UInt16"}},
    szAutodialFunc: {"kind":"Array","child": {"kind":"UInt16"}},
    szDeviceType: {"kind":"Array","child": {"kind":"UInt16"}},
    szDeviceName: {"kind":"Array","child": {"kind":"UInt16"}},
    szX25PadType: {"kind":"Array","child": {"kind":"UInt16"}},
    szX25Address: {"kind":"Array","child": {"kind":"UInt16"}},
    szX25Facilities: {"kind":"Array","child": {"kind":"UInt16"}},
    szX25UserData: {"kind":"Array","child": {"kind":"UInt16"}},
    dwChannels: {"kind":"UInt32"},
    dwReserved1: {"kind":"UInt32"},
    dwReserved2: {"kind":"UInt32"},
    dwSubEntries: {"kind":"UInt32"},
    dwDialMode: {"kind":"UInt32"},
    dwDialExtraPercent: {"kind":"UInt32"},
    dwDialExtraSampleSeconds: {"kind":"UInt32"},
    dwHangUpExtraPercent: {"kind":"UInt32"},
    dwHangUpExtraSampleSeconds: {"kind":"UInt32"},
    dwIdleDisconnectSeconds: {"kind":"UInt32"},
    dwType: {"kind":"UInt32"},
    dwEncryptionType: {"kind":"UInt32"},
    dwCustomAuthKey: {"kind":"UInt32"},
    guidId: Guid,
    szCustomDialDll: {"kind":"Array","child": {"kind":"UInt16"}},
    dwVpnStrategy: {"kind":"UInt32"},
    dwfOptions2: {"kind":"UInt32"},
    dwfOptions3: {"kind":"UInt32"},
    szDnsSuffix: {"kind":"Array","child": {"kind":"UInt16"}},
    dwTcpWindowSize: {"kind":"UInt32"},
    szPrerequisitePbk: {"kind":"Array","child": {"kind":"UInt16"}},
    szPrerequisiteEntry: {"kind":"Array","child": {"kind":"UInt16"}},
    dwRedialCount: {"kind":"UInt32"},
    dwRedialPause: {"kind":"UInt32"},
    ipv6addrDns: Windows.Win32.WinSock.in6_addr,
    ipv6addrDnsAlt: Windows.Win32.WinSock.in6_addr,
    dwIPv4InterfaceMetric: {"kind":"UInt32"},
    dwIPv6InterfaceMetric: {"kind":"UInt32"},
    ipv6addr: Windows.Win32.WinSock.in6_addr,
    dwIPv6PrefixLength: {"kind":"UInt32"},
    dwNetworkOutageTime: {"kind":"UInt32"},
    szIDi: {"kind":"Array","child": {"kind":"UInt16"}},
    szIDr: {"kind":"Array","child": {"kind":"UInt16"}},
    fIsImsConfig: Windows.Win32.SystemServices.BOOL,
    IdiType: Windows.Win32.RoutingAndRemoteAccessService.IKEV2_ID_PAYLOAD_TYPE,
    IdrType: Windows.Win32.RoutingAndRemoteAccessService.IKEV2_ID_PAYLOAD_TYPE,
    fDisableIKEv2Fragmentation: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: ORASADFUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ORASADFUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: tagRASADPARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASADPARAMS = extern struct {
    dwSize: {"kind":"UInt32"},
    hwndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    dwFlags: {"kind":"UInt32"},
    xDlg: {"kind":"Int32"},
    yDlg: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: RASADFUNCA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RASADFUNCA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RASADFUNCW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RASADFUNCW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: tagRASSUBENTRYA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASSUBENTRYA = extern struct {
    dwSize: {"kind":"UInt32"},
    dwfFlags: {"kind":"UInt32"},
    szDeviceType: {"kind":"Array","child": {"kind":"SByte"}},
    szDeviceName: {"kind":"Array","child": {"kind":"SByte"}},
    szLocalPhoneNumber: {"kind":"Array","child": {"kind":"SByte"}},
    dwAlternateOffset: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: tagRASSUBENTRYW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASSUBENTRYW = extern struct {
    dwSize: {"kind":"UInt32"},
    dwfFlags: {"kind":"UInt32"},
    szDeviceType: {"kind":"Array","child": {"kind":"UInt16"}},
    szDeviceName: {"kind":"Array","child": {"kind":"UInt16"}},
    szLocalPhoneNumber: {"kind":"Array","child": {"kind":"UInt16"}},
    dwAlternateOffset: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: tagRASCREDENTIALSA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASCREDENTIALSA = extern struct {
    dwSize: {"kind":"UInt32"},
    dwMask: {"kind":"UInt32"},
    szUserName: {"kind":"Array","child": {"kind":"SByte"}},
    szPassword: {"kind":"Array","child": {"kind":"SByte"}},
    szDomain: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: tagRASCREDENTIALSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASCREDENTIALSW = extern struct {
    dwSize: {"kind":"UInt32"},
    dwMask: {"kind":"UInt32"},
    szUserName: {"kind":"Array","child": {"kind":"UInt16"}},
    szPassword: {"kind":"Array","child": {"kind":"UInt16"}},
    szDomain: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: tagRASAUTODIALENTRYA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASAUTODIALENTRYA = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    dwDialingLocation: {"kind":"UInt32"},
    szEntry: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: tagRASAUTODIALENTRYW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASAUTODIALENTRYW = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    dwDialingLocation: {"kind":"UInt32"},
    szEntry: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: tagRASEAPUSERIDENTITYA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASEAPUSERIDENTITYA = extern struct {
    szUserName: {"kind":"Array","child": {"kind":"SByte"}},
    dwSizeofEapInfo: {"kind":"UInt32"},
    pbEapInfo: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: tagRASEAPUSERIDENTITYW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASEAPUSERIDENTITYW = extern struct {
    szUserName: {"kind":"Array","child": {"kind":"UInt16"}},
    dwSizeofEapInfo: {"kind":"UInt32"},
    pbEapInfo: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: PFNRASGETBUFFER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNRASGETBUFFER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNRASFREEBUFFER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNRASFREEBUFFER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNRASSENDBUFFER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNRASSENDBUFFER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNRASRECEIVEBUFFER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNRASRECEIVEBUFFER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNRASRETRIEVEBUFFER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNRASRETRIEVEBUFFER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RasCustomScriptExecuteFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RasCustomScriptExecuteFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: tagRASCOMMSETTINGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASCOMMSETTINGS = extern struct {
    dwSize: {"kind":"UInt32"},
    bParity: {"kind":"Byte"},
    bStop: {"kind":"Byte"},
    bByteSize: {"kind":"Byte"},
    bAlign: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: PFNRASSETCOMMSETTINGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNRASSETCOMMSETTINGS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: tagRASCUSTOMSCRIPTEXTENSIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASCUSTOMSCRIPTEXTENSIONS = extern struct {
    dwSize: {"kind":"UInt32"},
    pfnRasSetCommSettings: Windows.Win32.RoutingAndRemoteAccessService.PFNRASSETCOMMSETTINGS,
};
// --------------------------------------------------------
// Type: RAS_STATS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RAS_STATS = extern struct {
    dwSize: {"kind":"UInt32"},
    dwBytesXmited: {"kind":"UInt32"},
    dwBytesRcved: {"kind":"UInt32"},
    dwFramesXmited: {"kind":"UInt32"},
    dwFramesRcved: {"kind":"UInt32"},
    dwCrcErr: {"kind":"UInt32"},
    dwTimeoutErr: {"kind":"UInt32"},
    dwAlignmentErr: {"kind":"UInt32"},
    dwHardwareOverrunErr: {"kind":"UInt32"},
    dwFramingErr: {"kind":"UInt32"},
    dwBufferOverrunErr: {"kind":"UInt32"},
    dwCompressionRatioIn: {"kind":"UInt32"},
    dwCompressionRatioOut: {"kind":"UInt32"},
    dwBps: {"kind":"UInt32"},
    dwConnectDuration: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: RasCustomHangUpFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RasCustomHangUpFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RasCustomDialFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RasCustomDialFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RasCustomDeleteEntryNotifyFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RasCustomDeleteEntryNotifyFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: tagRASUPDATECONN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASUPDATECONN = extern struct {
    version: Windows.Win32.RoutingAndRemoteAccessService.RASAPIVERSION,
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    dwIfIndex: {"kind":"UInt32"},
    localEndPoint: Windows.Win32.RoutingAndRemoteAccessService.tagRASTUNNELENDPOINT,
    remoteEndPoint: Windows.Win32.RoutingAndRemoteAccessService.tagRASTUNNELENDPOINT,
};
// --------------------------------------------------------
// Type: RASPBDLGFUNCW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RASPBDLGFUNCW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RASPBDLGFUNCA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RASPBDLGFUNCA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: tagRASNOUSERW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASNOUSERW = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    dwTimeoutMs: {"kind":"UInt32"},
    szUserName: {"kind":"Array","child": {"kind":"UInt16"}},
    szPassword: {"kind":"Array","child": {"kind":"UInt16"}},
    szDomain: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: tagRASNOUSERA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASNOUSERA = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    dwTimeoutMs: {"kind":"UInt32"},
    szUserName: {"kind":"Array","child": {"kind":"SByte"}},
    szPassword: {"kind":"Array","child": {"kind":"SByte"}},
    szDomain: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: tagRASPBDLGW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASPBDLGW = extern struct {
    dwSize: {"kind":"UInt32"},
    hwndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    dwFlags: {"kind":"UInt32"},
    xDlg: {"kind":"Int32"},
    yDlg: {"kind":"Int32"},
    dwCallbackId: {"kind":"UIntPtr"},
    pCallback: Windows.Win32.RoutingAndRemoteAccessService.RASPBDLGFUNCW,
    dwError: {"kind":"UInt32"},
    reserved: {"kind":"UIntPtr"},
    reserved2: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: tagRASPBDLGA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASPBDLGA = extern struct {
    dwSize: {"kind":"UInt32"},
    hwndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    dwFlags: {"kind":"UInt32"},
    xDlg: {"kind":"Int32"},
    yDlg: {"kind":"Int32"},
    dwCallbackId: {"kind":"UIntPtr"},
    pCallback: Windows.Win32.RoutingAndRemoteAccessService.RASPBDLGFUNCA,
    dwError: {"kind":"UInt32"},
    reserved: {"kind":"UIntPtr"},
    reserved2: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: tagRASENTRYDLGW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASENTRYDLGW = extern struct {
    dwSize: {"kind":"UInt32"},
    hwndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    dwFlags: {"kind":"UInt32"},
    xDlg: {"kind":"Int32"},
    yDlg: {"kind":"Int32"},
    szEntry: {"kind":"Array","child": {"kind":"UInt16"}},
    dwError: {"kind":"UInt32"},
    reserved: {"kind":"UIntPtr"},
    reserved2: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: tagRASENTRYDLGA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASENTRYDLGA = extern struct {
    dwSize: {"kind":"UInt32"},
    hwndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    dwFlags: {"kind":"UInt32"},
    xDlg: {"kind":"Int32"},
    yDlg: {"kind":"Int32"},
    szEntry: {"kind":"Array","child": {"kind":"SByte"}},
    dwError: {"kind":"UInt32"},
    reserved: {"kind":"UIntPtr"},
    reserved2: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: tagRASDIALDLG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagRASDIALDLG = extern struct {
    dwSize: {"kind":"UInt32"},
    hwndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    dwFlags: {"kind":"UInt32"},
    xDlg: {"kind":"Int32"},
    yDlg: {"kind":"Int32"},
    dwSubEntry: {"kind":"UInt32"},
    dwError: {"kind":"UInt32"},
    reserved: {"kind":"UIntPtr"},
    reserved2: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: RasCustomDialDlgFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RasCustomDialDlgFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RasCustomEntryDlgFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RasCustomEntryDlgFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ROUTER_INTERFACE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ROUTER_INTERFACE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: ROUTER_CONNECTION_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ROUTER_CONNECTION_STATE = *opaque{
};
// --------------------------------------------------------
// Type: MPR_INTERFACE_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MPR_INTERFACE_0 = extern struct {
    wszInterfaceName: {"kind":"Array","child": {"kind":"UInt16"}},
    hInterface: Windows.Win32.SystemServices.HANDLE,
    fEnabled: Windows.Win32.SystemServices.BOOL,
    dwIfType: Windows.Win32.RoutingAndRemoteAccessService.ROUTER_INTERFACE_TYPE,
    dwConnectionState: Windows.Win32.RoutingAndRemoteAccessService.ROUTER_CONNECTION_STATE,
    fUnReachabilityReasons: {"kind":"UInt32"},
    dwLastError: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MPR_IPINIP_INTERFACE_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MPR_IPINIP_INTERFACE_0 = extern struct {
    wszFriendlyName: {"kind":"Array","child": {"kind":"UInt16"}},
    Guid: Guid,
};
// --------------------------------------------------------
// Type: MPR_INTERFACE_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MPR_INTERFACE_1 = extern struct {
    wszInterfaceName: {"kind":"Array","child": {"kind":"UInt16"}},
    hInterface: Windows.Win32.SystemServices.HANDLE,
    fEnabled: Windows.Win32.SystemServices.BOOL,
    dwIfType: Windows.Win32.RoutingAndRemoteAccessService.ROUTER_INTERFACE_TYPE,
    dwConnectionState: Windows.Win32.RoutingAndRemoteAccessService.ROUTER_CONNECTION_STATE,
    fUnReachabilityReasons: {"kind":"UInt32"},
    dwLastError: {"kind":"UInt32"},
    lpwsDialoutHoursRestriction: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: MPR_INTERFACE_2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MPR_INTERFACE_2 = extern struct {
    wszInterfaceName: {"kind":"Array","child": {"kind":"UInt16"}},
    hInterface: Windows.Win32.SystemServices.HANDLE,
    fEnabled: Windows.Win32.SystemServices.BOOL,
    dwIfType: Windows.Win32.RoutingAndRemoteAccessService.ROUTER_INTERFACE_TYPE,
    dwConnectionState: Windows.Win32.RoutingAndRemoteAccessService.ROUTER_CONNECTION_STATE,
    fUnReachabilityReasons: {"kind":"UInt32"},
    dwLastError: {"kind":"UInt32"},
    dwfOptions: {"kind":"UInt32"},
    szLocalPhoneNumber: {"kind":"Array","child": {"kind":"UInt16"}},
    szAlternates: {"kind""Ptr","child":{"kind":"UInt16"}},
    ipaddr: {"kind":"UInt32"},
    ipaddrDns: {"kind":"UInt32"},
    ipaddrDnsAlt: {"kind":"UInt32"},
    ipaddrWins: {"kind":"UInt32"},
    ipaddrWinsAlt: {"kind":"UInt32"},
    dwfNetProtocols: {"kind":"UInt32"},
    szDeviceType: {"kind":"Array","child": {"kind":"UInt16"}},
    szDeviceName: {"kind":"Array","child": {"kind":"UInt16"}},
    szX25PadType: {"kind":"Array","child": {"kind":"UInt16"}},
    szX25Address: {"kind":"Array","child": {"kind":"UInt16"}},
    szX25Facilities: {"kind":"Array","child": {"kind":"UInt16"}},
    szX25UserData: {"kind":"Array","child": {"kind":"UInt16"}},
    dwChannels: {"kind":"UInt32"},
    dwSubEntries: {"kind":"UInt32"},
    dwDialMode: {"kind":"UInt32"},
    dwDialExtraPercent: {"kind":"UInt32"},
    dwDialExtraSampleSeconds: {"kind":"UInt32"},
    dwHangUpExtraPercent: {"kind":"UInt32"},
    dwHangUpExtraSampleSeconds: {"kind":"UInt32"},
    dwIdleDisconnectSeconds: {"kind":"UInt32"},
    dwType: {"kind":"UInt32"},
    dwEncryptionType: {"kind":"UInt32"},
    dwCustomAuthKey: {"kind":"UInt32"},
    dwCustomAuthDataSize: {"kind":"UInt32"},
    lpbCustomAuthData: {"kind""Ptr","child":{"kind":"Byte"}},
    guidId: Guid,
    dwVpnStrategy: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MPR_INTERFACE_3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MPR_INTERFACE_3 = extern struct {
    wszInterfaceName: {"kind":"Array","child": {"kind":"UInt16"}},
    hInterface: Windows.Win32.SystemServices.HANDLE,
    fEnabled: Windows.Win32.SystemServices.BOOL,
    dwIfType: Windows.Win32.RoutingAndRemoteAccessService.ROUTER_INTERFACE_TYPE,
    dwConnectionState: Windows.Win32.RoutingAndRemoteAccessService.ROUTER_CONNECTION_STATE,
    fUnReachabilityReasons: {"kind":"UInt32"},
    dwLastError: {"kind":"UInt32"},
    dwfOptions: {"kind":"UInt32"},
    szLocalPhoneNumber: {"kind":"Array","child": {"kind":"UInt16"}},
    szAlternates: {"kind""Ptr","child":{"kind":"UInt16"}},
    ipaddr: {"kind":"UInt32"},
    ipaddrDns: {"kind":"UInt32"},
    ipaddrDnsAlt: {"kind":"UInt32"},
    ipaddrWins: {"kind":"UInt32"},
    ipaddrWinsAlt: {"kind":"UInt32"},
    dwfNetProtocols: {"kind":"UInt32"},
    szDeviceType: {"kind":"Array","child": {"kind":"UInt16"}},
    szDeviceName: {"kind":"Array","child": {"kind":"UInt16"}},
    szX25PadType: {"kind":"Array","child": {"kind":"UInt16"}},
    szX25Address: {"kind":"Array","child": {"kind":"UInt16"}},
    szX25Facilities: {"kind":"Array","child": {"kind":"UInt16"}},
    szX25UserData: {"kind":"Array","child": {"kind":"UInt16"}},
    dwChannels: {"kind":"UInt32"},
    dwSubEntries: {"kind":"UInt32"},
    dwDialMode: {"kind":"UInt32"},
    dwDialExtraPercent: {"kind":"UInt32"},
    dwDialExtraSampleSeconds: {"kind":"UInt32"},
    dwHangUpExtraPercent: {"kind":"UInt32"},
    dwHangUpExtraSampleSeconds: {"kind":"UInt32"},
    dwIdleDisconnectSeconds: {"kind":"UInt32"},
    dwType: {"kind":"UInt32"},
    dwEncryptionType: {"kind":"UInt32"},
    dwCustomAuthKey: {"kind":"UInt32"},
    dwCustomAuthDataSize: {"kind":"UInt32"},
    lpbCustomAuthData: {"kind""Ptr","child":{"kind":"Byte"}},
    guidId: Guid,
    dwVpnStrategy: {"kind":"UInt32"},
    AddressCount: {"kind":"UInt32"},
    ipv6addrDns: Windows.Win32.WinSock.in6_addr,
    ipv6addrDnsAlt: Windows.Win32.WinSock.in6_addr,
    ipv6addr: {"kind""Ptr","child":Windows.Win32.WinSock.in6_addr},
};
// --------------------------------------------------------
// Type: MPR_DEVICE_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MPR_DEVICE_0 = extern struct {
    szDeviceType: {"kind":"Array","child": {"kind":"UInt16"}},
    szDeviceName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: MPR_DEVICE_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MPR_DEVICE_1 = extern struct {
    szDeviceType: {"kind":"Array","child": {"kind":"UInt16"}},
    szDeviceName: {"kind":"Array","child": {"kind":"UInt16"}},
    szLocalPhoneNumber: {"kind":"Array","child": {"kind":"UInt16"}},
    szAlternates: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: MPR_CREDENTIALSEX_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MPR_CREDENTIALSEX_0 = extern struct {
    dwSize: {"kind":"UInt32"},
    lpbCredentialsInfo: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: MPR_CREDENTIALSEX_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MPR_CREDENTIALSEX_1 = extern struct {
    dwSize: {"kind":"UInt32"},
    lpbCredentialsInfo: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: MPR_TRANSPORT_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MPR_TRANSPORT_0 = extern struct {
    dwTransportId: {"kind":"UInt32"},
    hTransport: Windows.Win32.SystemServices.HANDLE,
    wszTransportName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: MPR_IFTRANSPORT_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MPR_IFTRANSPORT_0 = extern struct {
    dwTransportId: {"kind":"UInt32"},
    hIfTransport: Windows.Win32.SystemServices.HANDLE,
    wszIfTransportName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: MPR_SERVER_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MPR_SERVER_0 = extern struct {
    fLanOnlyMode: Windows.Win32.SystemServices.BOOL,
    dwUpTime: {"kind":"UInt32"},
    dwTotalPorts: {"kind":"UInt32"},
    dwPortsInUse: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MPR_SERVER_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MPR_SERVER_1 = extern struct {
    dwNumPptpPorts: {"kind":"UInt32"},
    dwPptpPortFlags: {"kind":"UInt32"},
    dwNumL2tpPorts: {"kind":"UInt32"},
    dwL2tpPortFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MPR_SERVER_2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MPR_SERVER_2 = extern struct {
    dwNumPptpPorts: {"kind":"UInt32"},
    dwPptpPortFlags: {"kind":"UInt32"},
    dwNumL2tpPorts: {"kind":"UInt32"},
    dwL2tpPortFlags: {"kind":"UInt32"},
    dwNumSstpPorts: {"kind":"UInt32"},
    dwSstpPortFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: RAS_PORT_CONDITION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RAS_PORT_CONDITION = *opaque{
};
// --------------------------------------------------------
// Type: RAS_HARDWARE_CONDITION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RAS_HARDWARE_CONDITION = *opaque{
};
// --------------------------------------------------------
// Type: RAS_PORT_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RAS_PORT_0 = extern struct {
    hPort: Windows.Win32.SystemServices.HANDLE,
    hConnection: Windows.Win32.SystemServices.HANDLE,
    dwPortCondition: Windows.Win32.RoutingAndRemoteAccessService.RAS_PORT_CONDITION,
    dwTotalNumberOfCalls: {"kind":"UInt32"},
    dwConnectDuration: {"kind":"UInt32"},
    wszPortName: {"kind":"Array","child": {"kind":"UInt16"}},
    wszMediaName: {"kind":"Array","child": {"kind":"UInt16"}},
    wszDeviceName: {"kind":"Array","child": {"kind":"UInt16"}},
    wszDeviceType: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: RAS_PORT_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RAS_PORT_1 = extern struct {
    hPort: Windows.Win32.SystemServices.HANDLE,
    hConnection: Windows.Win32.SystemServices.HANDLE,
    dwHardwareCondition: Windows.Win32.RoutingAndRemoteAccessService.RAS_HARDWARE_CONDITION,
    dwLineSpeed: {"kind":"UInt32"},
    dwBytesXmited: {"kind":"UInt32"},
    dwBytesRcved: {"kind":"UInt32"},
    dwFramesXmited: {"kind":"UInt32"},
    dwFramesRcved: {"kind":"UInt32"},
    dwCrcErr: {"kind":"UInt32"},
    dwTimeoutErr: {"kind":"UInt32"},
    dwAlignmentErr: {"kind":"UInt32"},
    dwHardwareOverrunErr: {"kind":"UInt32"},
    dwFramingErr: {"kind":"UInt32"},
    dwBufferOverrunErr: {"kind":"UInt32"},
    dwCompressionRatioIn: {"kind":"UInt32"},
    dwCompressionRatioOut: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: RAS_PORT_2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RAS_PORT_2 = extern struct {
    hPort: Windows.Win32.SystemServices.HANDLE,
    hConnection: Windows.Win32.SystemServices.HANDLE,
    dwConn_State: {"kind":"UInt32"},
    wszPortName: {"kind":"Array","child": {"kind":"UInt16"}},
    wszMediaName: {"kind":"Array","child": {"kind":"UInt16"}},
    wszDeviceName: {"kind":"Array","child": {"kind":"UInt16"}},
    wszDeviceType: {"kind":"Array","child": {"kind":"UInt16"}},
    dwHardwareCondition: Windows.Win32.RoutingAndRemoteAccessService.RAS_HARDWARE_CONDITION,
    dwLineSpeed: {"kind":"UInt32"},
    dwCrcErr: {"kind":"UInt32"},
    dwSerialOverRunErrs: {"kind":"UInt32"},
    dwTimeoutErr: {"kind":"UInt32"},
    dwAlignmentErr: {"kind":"UInt32"},
    dwHardwareOverrunErr: {"kind":"UInt32"},
    dwFramingErr: {"kind":"UInt32"},
    dwBufferOverrunErr: {"kind":"UInt32"},
    dwCompressionRatioIn: {"kind":"UInt32"},
    dwCompressionRatioOut: {"kind":"UInt32"},
    dwTotalErrors: {"kind":"UInt32"},
    ullBytesXmited: {"kind":"UInt64"},
    ullBytesRcved: {"kind":"UInt64"},
    ullFramesXmited: {"kind":"UInt64"},
    ullFramesRcved: {"kind":"UInt64"},
    ullBytesTxUncompressed: {"kind":"UInt64"},
    ullBytesTxCompressed: {"kind":"UInt64"},
    ullBytesRcvUncompressed: {"kind":"UInt64"},
    ullBytesRcvCompressed: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: PPP_NBFCP_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PPP_NBFCP_INFO = extern struct {
    dwError: {"kind":"UInt32"},
    wszWksta: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: PPP_IPCP_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PPP_IPCP_INFO = extern struct {
    dwError: {"kind":"UInt32"},
    wszAddress: {"kind":"Array","child": {"kind":"UInt16"}},
    wszRemoteAddress: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: PPP_IPCP_INFO2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PPP_IPCP_INFO2 = extern struct {
    dwError: {"kind":"UInt32"},
    wszAddress: {"kind":"Array","child": {"kind":"UInt16"}},
    wszRemoteAddress: {"kind":"Array","child": {"kind":"UInt16"}},
    dwOptions: {"kind":"UInt32"},
    dwRemoteOptions: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PPP_IPXCP_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PPP_IPXCP_INFO = extern struct {
    dwError: {"kind":"UInt32"},
    wszAddress: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: PPP_ATCP_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PPP_ATCP_INFO = extern struct {
    dwError: {"kind":"UInt32"},
    wszAddress: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: PPP_IPV6_CP_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PPP_IPV6_CP_INFO = extern struct {
    dwVersion: {"kind":"UInt32"},
    dwSize: {"kind":"UInt32"},
    dwError: {"kind":"UInt32"},
    bInterfaceIdentifier: {"kind":"Array","child": {"kind":"Byte"}},
    bRemoteInterfaceIdentifier: {"kind":"Array","child": {"kind":"Byte"}},
    dwOptions: {"kind":"UInt32"},
    dwRemoteOptions: {"kind":"UInt32"},
    bPrefix: {"kind":"Array","child": {"kind":"Byte"}},
    dwPrefixLength: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PPP_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PPP_INFO = extern struct {
    nbf: Windows.Win32.RoutingAndRemoteAccessService.PPP_NBFCP_INFO,
    ip: Windows.Win32.RoutingAndRemoteAccessService.PPP_IPCP_INFO,
    ipx: Windows.Win32.RoutingAndRemoteAccessService.PPP_IPXCP_INFO,
    at: Windows.Win32.RoutingAndRemoteAccessService.PPP_ATCP_INFO,
};
// --------------------------------------------------------
// Type: PPP_CCP_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PPP_CCP_INFO = extern struct {
    dwError: {"kind":"UInt32"},
    dwCompressionAlgorithm: {"kind":"UInt32"},
    dwOptions: {"kind":"UInt32"},
    dwRemoteCompressionAlgorithm: {"kind":"UInt32"},
    dwRemoteOptions: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PPP_LCP_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PPP_LCP_INFO = extern struct {
    dwError: {"kind":"UInt32"},
    dwAuthenticationProtocol: {"kind":"UInt32"},
    dwAuthenticationData: {"kind":"UInt32"},
    dwRemoteAuthenticationProtocol: {"kind":"UInt32"},
    dwRemoteAuthenticationData: {"kind":"UInt32"},
    dwTerminateReason: {"kind":"UInt32"},
    dwRemoteTerminateReason: {"kind":"UInt32"},
    dwOptions: {"kind":"UInt32"},
    dwRemoteOptions: {"kind":"UInt32"},
    dwEapTypeId: {"kind":"UInt32"},
    dwRemoteEapTypeId: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PPP_INFO_2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PPP_INFO_2 = extern struct {
    nbf: Windows.Win32.RoutingAndRemoteAccessService.PPP_NBFCP_INFO,
    ip: Windows.Win32.RoutingAndRemoteAccessService.PPP_IPCP_INFO2,
    ipx: Windows.Win32.RoutingAndRemoteAccessService.PPP_IPXCP_INFO,
    at: Windows.Win32.RoutingAndRemoteAccessService.PPP_ATCP_INFO,
    ccp: Windows.Win32.RoutingAndRemoteAccessService.PPP_CCP_INFO,
    lcp: Windows.Win32.RoutingAndRemoteAccessService.PPP_LCP_INFO,
};
// --------------------------------------------------------
// Type: PPP_INFO_3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PPP_INFO_3 = extern struct {
    nbf: Windows.Win32.RoutingAndRemoteAccessService.PPP_NBFCP_INFO,
    ip: Windows.Win32.RoutingAndRemoteAccessService.PPP_IPCP_INFO2,
    ipv6: Windows.Win32.RoutingAndRemoteAccessService.PPP_IPV6_CP_INFO,
    ccp: Windows.Win32.RoutingAndRemoteAccessService.PPP_CCP_INFO,
    lcp: Windows.Win32.RoutingAndRemoteAccessService.PPP_LCP_INFO,
};
// --------------------------------------------------------
// Type: RAS_CONNECTION_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RAS_CONNECTION_0 = extern struct {
    hConnection: Windows.Win32.SystemServices.HANDLE,
    hInterface: Windows.Win32.SystemServices.HANDLE,
    dwConnectDuration: {"kind":"UInt32"},
    dwInterfaceType: Windows.Win32.RoutingAndRemoteAccessService.ROUTER_INTERFACE_TYPE,
    dwConnectionFlags: {"kind":"UInt32"},
    wszInterfaceName: {"kind":"Array","child": {"kind":"UInt16"}},
    wszUserName: {"kind":"Array","child": {"kind":"UInt16"}},
    wszLogonDomain: {"kind":"Array","child": {"kind":"UInt16"}},
    wszRemoteComputer: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: RAS_CONNECTION_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RAS_CONNECTION_1 = extern struct {
    hConnection: Windows.Win32.SystemServices.HANDLE,
    hInterface: Windows.Win32.SystemServices.HANDLE,
    PppInfo: Windows.Win32.RoutingAndRemoteAccessService.PPP_INFO,
    dwBytesXmited: {"kind":"UInt32"},
    dwBytesRcved: {"kind":"UInt32"},
    dwFramesXmited: {"kind":"UInt32"},
    dwFramesRcved: {"kind":"UInt32"},
    dwCrcErr: {"kind":"UInt32"},
    dwTimeoutErr: {"kind":"UInt32"},
    dwAlignmentErr: {"kind":"UInt32"},
    dwHardwareOverrunErr: {"kind":"UInt32"},
    dwFramingErr: {"kind":"UInt32"},
    dwBufferOverrunErr: {"kind":"UInt32"},
    dwCompressionRatioIn: {"kind":"UInt32"},
    dwCompressionRatioOut: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: RAS_CONNECTION_2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RAS_CONNECTION_2 = extern struct {
    hConnection: Windows.Win32.SystemServices.HANDLE,
    wszUserName: {"kind":"Array","child": {"kind":"UInt16"}},
    dwInterfaceType: Windows.Win32.RoutingAndRemoteAccessService.ROUTER_INTERFACE_TYPE,
    guid: Guid,
    PppInfo2: Windows.Win32.RoutingAndRemoteAccessService.PPP_INFO_2,
};
// --------------------------------------------------------
// Type: RAS_QUARANTINE_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RAS_QUARANTINE_STATE = *opaque{
};
// --------------------------------------------------------
// Type: RAS_CONNECTION_3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RAS_CONNECTION_3 = extern struct {
    dwVersion: {"kind":"UInt32"},
    dwSize: {"kind":"UInt32"},
    hConnection: Windows.Win32.SystemServices.HANDLE,
    wszUserName: {"kind":"Array","child": {"kind":"UInt16"}},
    dwInterfaceType: Windows.Win32.RoutingAndRemoteAccessService.ROUTER_INTERFACE_TYPE,
    guid: Guid,
    PppInfo3: Windows.Win32.RoutingAndRemoteAccessService.PPP_INFO_3,
    rasQuarState: Windows.Win32.RoutingAndRemoteAccessService.RAS_QUARANTINE_STATE,
    timer: Windows.Win32.WindowsProgramming.FILETIME,
};
// --------------------------------------------------------
// Type: RAS_USER_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RAS_USER_0 = extern struct {
    bfPrivilege: {"kind":"Byte"},
    wszPhoneNumber: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: RAS_USER_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RAS_USER_1 = extern struct {
    bfPrivilege: {"kind":"Byte"},
    wszPhoneNumber: {"kind":"Array","child": {"kind":"UInt16"}},
    bfPrivilege2: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: MPR_FILTER_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MPR_FILTER_0 = extern struct {
    fEnable: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: MPRAPI_OBJECT_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MPRAPI_OBJECT_HEADER = extern struct {
    revision: {"kind":"Byte"},
    type: {"kind":"Byte"},
    size: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: MPRAPI_OBJECT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MPRAPI_OBJECT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: PPP_PROJECTION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PPP_PROJECTION_INFO = extern struct {
    dwIPv4NegotiationError: {"kind":"UInt32"},
    wszAddress: {"kind":"Array","child": {"kind":"UInt16"}},
    wszRemoteAddress: {"kind":"Array","child": {"kind":"UInt16"}},
    dwIPv4Options: {"kind":"UInt32"},
    dwIPv4RemoteOptions: {"kind":"UInt32"},
    IPv4SubInterfaceIndex: {"kind":"UInt64"},
    dwIPv6NegotiationError: {"kind":"UInt32"},
    bInterfaceIdentifier: {"kind":"Array","child": {"kind":"Byte"}},
    bRemoteInterfaceIdentifier: {"kind":"Array","child": {"kind":"Byte"}},
    bPrefix: {"kind":"Array","child": {"kind":"Byte"}},
    dwPrefixLength: {"kind":"UInt32"},
    IPv6SubInterfaceIndex: {"kind":"UInt64"},
    dwLcpError: {"kind":"UInt32"},
    dwAuthenticationProtocol: {"kind":"UInt32"},
    dwAuthenticationData: {"kind":"UInt32"},
    dwRemoteAuthenticationProtocol: {"kind":"UInt32"},
    dwRemoteAuthenticationData: {"kind":"UInt32"},
    dwLcpTerminateReason: {"kind":"UInt32"},
    dwLcpRemoteTerminateReason: {"kind":"UInt32"},
    dwLcpOptions: {"kind":"UInt32"},
    dwLcpRemoteOptions: {"kind":"UInt32"},
    dwEapTypeId: {"kind":"UInt32"},
    dwRemoteEapTypeId: {"kind":"UInt32"},
    dwCcpError: {"kind":"UInt32"},
    dwCompressionAlgorithm: {"kind":"UInt32"},
    dwCcpOptions: {"kind":"UInt32"},
    dwRemoteCompressionAlgorithm: {"kind":"UInt32"},
    dwCcpRemoteOptions: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PPP_PROJECTION_INFO2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PPP_PROJECTION_INFO2 = extern struct {
    dwIPv4NegotiationError: {"kind":"UInt32"},
    wszAddress: {"kind":"Array","child": {"kind":"UInt16"}},
    wszRemoteAddress: {"kind":"Array","child": {"kind":"UInt16"}},
    dwIPv4Options: {"kind":"UInt32"},
    dwIPv4RemoteOptions: {"kind":"UInt32"},
    IPv4SubInterfaceIndex: {"kind":"UInt64"},
    dwIPv6NegotiationError: {"kind":"UInt32"},
    bInterfaceIdentifier: {"kind":"Array","child": {"kind":"Byte"}},
    bRemoteInterfaceIdentifier: {"kind":"Array","child": {"kind":"Byte"}},
    bPrefix: {"kind":"Array","child": {"kind":"Byte"}},
    dwPrefixLength: {"kind":"UInt32"},
    IPv6SubInterfaceIndex: {"kind":"UInt64"},
    dwLcpError: {"kind":"UInt32"},
    dwAuthenticationProtocol: {"kind":"UInt32"},
    dwAuthenticationData: {"kind":"UInt32"},
    dwRemoteAuthenticationProtocol: {"kind":"UInt32"},
    dwRemoteAuthenticationData: {"kind":"UInt32"},
    dwLcpTerminateReason: {"kind":"UInt32"},
    dwLcpRemoteTerminateReason: {"kind":"UInt32"},
    dwLcpOptions: {"kind":"UInt32"},
    dwLcpRemoteOptions: {"kind":"UInt32"},
    dwEapTypeId: {"kind":"UInt32"},
    dwEmbeddedEAPTypeId: {"kind":"UInt32"},
    dwRemoteEapTypeId: {"kind":"UInt32"},
    dwCcpError: {"kind":"UInt32"},
    dwCompressionAlgorithm: {"kind":"UInt32"},
    dwCcpOptions: {"kind":"UInt32"},
    dwRemoteCompressionAlgorithm: {"kind":"UInt32"},
    dwCcpRemoteOptions: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IKEV2_PROJECTION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEV2_PROJECTION_INFO = extern struct {
    dwIPv4NegotiationError: {"kind":"UInt32"},
    wszAddress: {"kind":"Array","child": {"kind":"UInt16"}},
    wszRemoteAddress: {"kind":"Array","child": {"kind":"UInt16"}},
    IPv4SubInterfaceIndex: {"kind":"UInt64"},
    dwIPv6NegotiationError: {"kind":"UInt32"},
    bInterfaceIdentifier: {"kind":"Array","child": {"kind":"Byte"}},
    bRemoteInterfaceIdentifier: {"kind":"Array","child": {"kind":"Byte"}},
    bPrefix: {"kind":"Array","child": {"kind":"Byte"}},
    dwPrefixLength: {"kind":"UInt32"},
    IPv6SubInterfaceIndex: {"kind":"UInt64"},
    dwOptions: {"kind":"UInt32"},
    dwAuthenticationProtocol: {"kind":"UInt32"},
    dwEapTypeId: {"kind":"UInt32"},
    dwCompressionAlgorithm: {"kind":"UInt32"},
    dwEncryptionMethod: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IKEV2_PROJECTION_INFO2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEV2_PROJECTION_INFO2 = extern struct {
    dwIPv4NegotiationError: {"kind":"UInt32"},
    wszAddress: {"kind":"Array","child": {"kind":"UInt16"}},
    wszRemoteAddress: {"kind":"Array","child": {"kind":"UInt16"}},
    IPv4SubInterfaceIndex: {"kind":"UInt64"},
    dwIPv6NegotiationError: {"kind":"UInt32"},
    bInterfaceIdentifier: {"kind":"Array","child": {"kind":"Byte"}},
    bRemoteInterfaceIdentifier: {"kind":"Array","child": {"kind":"Byte"}},
    bPrefix: {"kind":"Array","child": {"kind":"Byte"}},
    dwPrefixLength: {"kind":"UInt32"},
    IPv6SubInterfaceIndex: {"kind":"UInt64"},
    dwOptions: {"kind":"UInt32"},
    dwAuthenticationProtocol: {"kind":"UInt32"},
    dwEapTypeId: {"kind":"UInt32"},
    dwEmbeddedEAPTypeId: {"kind":"UInt32"},
    dwCompressionAlgorithm: {"kind":"UInt32"},
    dwEncryptionMethod: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PROJECTION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROJECTION_INFO = extern struct {
    projectionInfoType: {"kind":"Byte"},
    Anonymous: Windows.Win32.RoutingAndRemoteAccessService.PROJECTION_INFO+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PROJECTION_INFO2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROJECTION_INFO2 = extern struct {
    projectionInfoType: {"kind":"Byte"},
    Anonymous: Windows.Win32.RoutingAndRemoteAccessService.PROJECTION_INFO2+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: RAS_CONNECTION_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RAS_CONNECTION_EX = extern struct {
    Header: Windows.Win32.RoutingAndRemoteAccessService.MPRAPI_OBJECT_HEADER,
    dwConnectDuration: {"kind":"UInt32"},
    dwInterfaceType: Windows.Win32.RoutingAndRemoteAccessService.ROUTER_INTERFACE_TYPE,
    dwConnectionFlags: {"kind":"UInt32"},
    wszInterfaceName: {"kind":"Array","child": {"kind":"UInt16"}},
    wszUserName: {"kind":"Array","child": {"kind":"UInt16"}},
    wszLogonDomain: {"kind":"Array","child": {"kind":"UInt16"}},
    wszRemoteComputer: {"kind":"Array","child": {"kind":"UInt16"}},
    guid: Guid,
    rasQuarState: Windows.Win32.RoutingAndRemoteAccessService.RAS_QUARANTINE_STATE,
    probationTime: Windows.Win32.WindowsProgramming.FILETIME,
    dwBytesXmited: {"kind":"UInt32"},
    dwBytesRcved: {"kind":"UInt32"},
    dwFramesXmited: {"kind":"UInt32"},
    dwFramesRcved: {"kind":"UInt32"},
    dwCrcErr: {"kind":"UInt32"},
    dwTimeoutErr: {"kind":"UInt32"},
    dwAlignmentErr: {"kind":"UInt32"},
    dwHardwareOverrunErr: {"kind":"UInt32"},
    dwFramingErr: {"kind":"UInt32"},
    dwBufferOverrunErr: {"kind":"UInt32"},
    dwCompressionRatioIn: {"kind":"UInt32"},
    dwCompressionRatioOut: {"kind":"UInt32"},
    dwNumSwitchOvers: {"kind":"UInt32"},
    wszRemoteEndpointAddress: {"kind":"Array","child": {"kind":"UInt16"}},
    wszLocalEndpointAddress: {"kind":"Array","child": {"kind":"UInt16"}},
    ProjectionInfo: Windows.Win32.RoutingAndRemoteAccessService.PROJECTION_INFO,
    hConnection: Windows.Win32.SystemServices.HANDLE,
    hInterface: Windows.Win32.SystemServices.HANDLE,
};
// --------------------------------------------------------
// Type: RAS_CONNECTION_4
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RAS_CONNECTION_4 = extern struct {
    dwConnectDuration: {"kind":"UInt32"},
    dwInterfaceType: Windows.Win32.RoutingAndRemoteAccessService.ROUTER_INTERFACE_TYPE,
    dwConnectionFlags: {"kind":"UInt32"},
    wszInterfaceName: {"kind":"Array","child": {"kind":"UInt16"}},
    wszUserName: {"kind":"Array","child": {"kind":"UInt16"}},
    wszLogonDomain: {"kind":"Array","child": {"kind":"UInt16"}},
    wszRemoteComputer: {"kind":"Array","child": {"kind":"UInt16"}},
    guid: Guid,
    rasQuarState: Windows.Win32.RoutingAndRemoteAccessService.RAS_QUARANTINE_STATE,
    probationTime: Windows.Win32.WindowsProgramming.FILETIME,
    connectionStartTime: Windows.Win32.WindowsProgramming.FILETIME,
    ullBytesXmited: {"kind":"UInt64"},
    ullBytesRcved: {"kind":"UInt64"},
    dwFramesXmited: {"kind":"UInt32"},
    dwFramesRcved: {"kind":"UInt32"},
    dwCrcErr: {"kind":"UInt32"},
    dwTimeoutErr: {"kind":"UInt32"},
    dwAlignmentErr: {"kind":"UInt32"},
    dwHardwareOverrunErr: {"kind":"UInt32"},
    dwFramingErr: {"kind":"UInt32"},
    dwBufferOverrunErr: {"kind":"UInt32"},
    dwCompressionRatioIn: {"kind":"UInt32"},
    dwCompressionRatioOut: {"kind":"UInt32"},
    dwNumSwitchOvers: {"kind":"UInt32"},
    wszRemoteEndpointAddress: {"kind":"Array","child": {"kind":"UInt16"}},
    wszLocalEndpointAddress: {"kind":"Array","child": {"kind":"UInt16"}},
    ProjectionInfo: Windows.Win32.RoutingAndRemoteAccessService.PROJECTION_INFO2,
    hConnection: Windows.Win32.SystemServices.HANDLE,
    hInterface: Windows.Win32.SystemServices.HANDLE,
    dwDeviceType: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: ROUTER_CUSTOM_IKEv2_POLICY0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ROUTER_CUSTOM_IKEv2_POLICY0 = extern struct {
    dwIntegrityMethod: {"kind":"UInt32"},
    dwEncryptionMethod: {"kind":"UInt32"},
    dwCipherTransformConstant: {"kind":"UInt32"},
    dwAuthTransformConstant: {"kind":"UInt32"},
    dwPfsGroup: {"kind":"UInt32"},
    dwDhGroup: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: ROUTER_IKEv2_IF_CUSTOM_CONFIG0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ROUTER_IKEv2_IF_CUSTOM_CONFIG0 = extern struct {
    dwSaLifeTime: {"kind":"UInt32"},
    dwSaDataSize: {"kind":"UInt32"},
    certificateName: Windows.Win32.Security.CRYPTOAPI_BLOB,
    customPolicy: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.ROUTER_CUSTOM_IKEv2_POLICY0},
};
// --------------------------------------------------------
// Type: MPR_IF_CUSTOMINFOEX0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MPR_IF_CUSTOMINFOEX0 = extern struct {
    Header: Windows.Win32.RoutingAndRemoteAccessService.MPRAPI_OBJECT_HEADER,
    dwFlags: {"kind":"UInt32"},
    customIkev2Config: Windows.Win32.RoutingAndRemoteAccessService.ROUTER_IKEv2_IF_CUSTOM_CONFIG0,
};
// --------------------------------------------------------
// Type: MPR_CERT_EKU
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MPR_CERT_EKU = extern struct {
    dwSize: {"kind":"UInt32"},
    IsEKUOID: Windows.Win32.SystemServices.BOOL,
    pwszEKU: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: VPN_TS_IP_ADDRESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VPN_TS_IP_ADDRESS = extern struct {
    Type: {"kind":"UInt16"},
    Anonymous: Windows.Win32.RoutingAndRemoteAccessService.VPN_TS_IP_ADDRESS+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: MPR_VPN_TS_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MPR_VPN_TS_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: _MPR_VPN_SELECTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _MPR_VPN_SELECTOR = extern struct {
    type: Windows.Win32.RoutingAndRemoteAccessService.MPR_VPN_TS_TYPE,
    protocolId: {"kind":"Byte"},
    portStart: {"kind":"UInt16"},
    portEnd: {"kind":"UInt16"},
    tsPayloadId: {"kind":"UInt16"},
    addrStart: Windows.Win32.RoutingAndRemoteAccessService.VPN_TS_IP_ADDRESS,
    addrEnd: Windows.Win32.RoutingAndRemoteAccessService.VPN_TS_IP_ADDRESS,
};
// --------------------------------------------------------
// Type: MPR_VPN_TRAFFIC_SELECTORS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MPR_VPN_TRAFFIC_SELECTORS = extern struct {
    numTsi: {"kind":"UInt32"},
    numTsr: {"kind":"UInt32"},
    tsI: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService._MPR_VPN_SELECTOR},
    tsR: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService._MPR_VPN_SELECTOR},
};
// --------------------------------------------------------
// Type: ROUTER_IKEv2_IF_CUSTOM_CONFIG2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ROUTER_IKEv2_IF_CUSTOM_CONFIG2 = extern struct {
    dwSaLifeTime: {"kind":"UInt32"},
    dwSaDataSize: {"kind":"UInt32"},
    certificateName: Windows.Win32.Security.CRYPTOAPI_BLOB,
    customPolicy: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.ROUTER_CUSTOM_IKEv2_POLICY0},
    certificateHash: Windows.Win32.Security.CRYPTOAPI_BLOB,
    dwMmSaLifeTime: {"kind":"UInt32"},
    vpnTrafficSelectors: Windows.Win32.RoutingAndRemoteAccessService.MPR_VPN_TRAFFIC_SELECTORS,
};
// --------------------------------------------------------
// Type: MPR_IF_CUSTOMINFOEX2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MPR_IF_CUSTOMINFOEX2 = extern struct {
    Header: Windows.Win32.RoutingAndRemoteAccessService.MPRAPI_OBJECT_HEADER,
    dwFlags: {"kind":"UInt32"},
    customIkev2Config: Windows.Win32.RoutingAndRemoteAccessService.ROUTER_IKEv2_IF_CUSTOM_CONFIG2,
};
// --------------------------------------------------------
// Type: IKEV2_TUNNEL_CONFIG_PARAMS4
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEV2_TUNNEL_CONFIG_PARAMS4 = extern struct {
    dwIdleTimeout: {"kind":"UInt32"},
    dwNetworkBlackoutTime: {"kind":"UInt32"},
    dwSaLifeTime: {"kind":"UInt32"},
    dwSaDataSizeForRenegotiation: {"kind":"UInt32"},
    dwConfigOptions: {"kind":"UInt32"},
    dwTotalCertificates: {"kind":"UInt32"},
    certificateNames: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
    machineCertificateName: Windows.Win32.Security.CRYPTOAPI_BLOB,
    dwEncryptionType: {"kind":"UInt32"},
    customPolicy: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.ROUTER_CUSTOM_IKEv2_POLICY0},
    dwTotalEkus: {"kind":"UInt32"},
    certificateEKUs: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.MPR_CERT_EKU},
    machineCertificateHash: Windows.Win32.Security.CRYPTOAPI_BLOB,
    dwMmSaLifeTime: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: ROUTER_IKEv2_IF_CUSTOM_CONFIG1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ROUTER_IKEv2_IF_CUSTOM_CONFIG1 = extern struct {
    dwSaLifeTime: {"kind":"UInt32"},
    dwSaDataSize: {"kind":"UInt32"},
    certificateName: Windows.Win32.Security.CRYPTOAPI_BLOB,
    customPolicy: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.ROUTER_CUSTOM_IKEv2_POLICY0},
    certificateHash: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: MPR_IF_CUSTOMINFOEX1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MPR_IF_CUSTOMINFOEX1 = extern struct {
    Header: Windows.Win32.RoutingAndRemoteAccessService.MPRAPI_OBJECT_HEADER,
    dwFlags: {"kind":"UInt32"},
    customIkev2Config: Windows.Win32.RoutingAndRemoteAccessService.ROUTER_IKEv2_IF_CUSTOM_CONFIG1,
};
// --------------------------------------------------------
// Type: IKEV2_TUNNEL_CONFIG_PARAMS3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEV2_TUNNEL_CONFIG_PARAMS3 = extern struct {
    dwIdleTimeout: {"kind":"UInt32"},
    dwNetworkBlackoutTime: {"kind":"UInt32"},
    dwSaLifeTime: {"kind":"UInt32"},
    dwSaDataSizeForRenegotiation: {"kind":"UInt32"},
    dwConfigOptions: {"kind":"UInt32"},
    dwTotalCertificates: {"kind":"UInt32"},
    certificateNames: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
    machineCertificateName: Windows.Win32.Security.CRYPTOAPI_BLOB,
    dwEncryptionType: {"kind":"UInt32"},
    customPolicy: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.ROUTER_CUSTOM_IKEv2_POLICY0},
    dwTotalEkus: {"kind":"UInt32"},
    certificateEKUs: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.MPR_CERT_EKU},
    machineCertificateHash: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: IKEV2_TUNNEL_CONFIG_PARAMS2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEV2_TUNNEL_CONFIG_PARAMS2 = extern struct {
    dwIdleTimeout: {"kind":"UInt32"},
    dwNetworkBlackoutTime: {"kind":"UInt32"},
    dwSaLifeTime: {"kind":"UInt32"},
    dwSaDataSizeForRenegotiation: {"kind":"UInt32"},
    dwConfigOptions: {"kind":"UInt32"},
    dwTotalCertificates: {"kind":"UInt32"},
    certificateNames: {"kind""Ptr","child":Windows.Win32.Security.CRYPTOAPI_BLOB},
    machineCertificateName: Windows.Win32.Security.CRYPTOAPI_BLOB,
    dwEncryptionType: {"kind":"UInt32"},
    customPolicy: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.ROUTER_CUSTOM_IKEv2_POLICY0},
};
// --------------------------------------------------------
// Type: L2TP_TUNNEL_CONFIG_PARAMS2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const L2TP_TUNNEL_CONFIG_PARAMS2 = extern struct {
    dwIdleTimeout: {"kind":"UInt32"},
    dwEncryptionType: {"kind":"UInt32"},
    dwSaLifeTime: {"kind":"UInt32"},
    dwSaDataSizeForRenegotiation: {"kind":"UInt32"},
    customPolicy: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.ROUTER_CUSTOM_IKEv2_POLICY0},
    dwMmSaLifeTime: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: L2TP_TUNNEL_CONFIG_PARAMS1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const L2TP_TUNNEL_CONFIG_PARAMS1 = extern struct {
    dwIdleTimeout: {"kind":"UInt32"},
    dwEncryptionType: {"kind":"UInt32"},
    dwSaLifeTime: {"kind":"UInt32"},
    dwSaDataSizeForRenegotiation: {"kind":"UInt32"},
    customPolicy: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.ROUTER_CUSTOM_IKEv2_POLICY0},
};
// --------------------------------------------------------
// Type: IKEV2_CONFIG_PARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEV2_CONFIG_PARAMS = extern struct {
    dwNumPorts: {"kind":"UInt32"},
    dwPortFlags: {"kind":"UInt32"},
    dwTunnelConfigParamFlags: {"kind":"UInt32"},
    TunnelConfigParams: Windows.Win32.RoutingAndRemoteAccessService.IKEV2_TUNNEL_CONFIG_PARAMS4,
};
// --------------------------------------------------------
// Type: PPTP_CONFIG_PARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PPTP_CONFIG_PARAMS = extern struct {
    dwNumPorts: {"kind":"UInt32"},
    dwPortFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: L2TP_CONFIG_PARAMS1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const L2TP_CONFIG_PARAMS1 = extern struct {
    dwNumPorts: {"kind":"UInt32"},
    dwPortFlags: {"kind":"UInt32"},
    dwTunnelConfigParamFlags: {"kind":"UInt32"},
    TunnelConfigParams: Windows.Win32.RoutingAndRemoteAccessService.L2TP_TUNNEL_CONFIG_PARAMS2,
};
// --------------------------------------------------------
// Type: GRE_CONFIG_PARAMS0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GRE_CONFIG_PARAMS0 = extern struct {
    dwNumPorts: {"kind":"UInt32"},
    dwPortFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: L2TP_CONFIG_PARAMS0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const L2TP_CONFIG_PARAMS0 = extern struct {
    dwNumPorts: {"kind":"UInt32"},
    dwPortFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SSTP_CERT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SSTP_CERT_INFO = extern struct {
    isDefault: Windows.Win32.SystemServices.BOOL,
    certBlob: Windows.Win32.Security.CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: SSTP_CONFIG_PARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SSTP_CONFIG_PARAMS = extern struct {
    dwNumPorts: {"kind":"UInt32"},
    dwPortFlags: {"kind":"UInt32"},
    isUseHttps: Windows.Win32.SystemServices.BOOL,
    certAlgorithm: {"kind":"UInt32"},
    sstpCertDetails: Windows.Win32.RoutingAndRemoteAccessService.SSTP_CERT_INFO,
};
// --------------------------------------------------------
// Type: MPRAPI_TUNNEL_CONFIG_PARAMS0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MPRAPI_TUNNEL_CONFIG_PARAMS0 = extern struct {
    IkeConfigParams: Windows.Win32.RoutingAndRemoteAccessService.IKEV2_CONFIG_PARAMS,
    PptpConfigParams: Windows.Win32.RoutingAndRemoteAccessService.PPTP_CONFIG_PARAMS,
    L2tpConfigParams: Windows.Win32.RoutingAndRemoteAccessService.L2TP_CONFIG_PARAMS1,
    SstpConfigParams: Windows.Win32.RoutingAndRemoteAccessService.SSTP_CONFIG_PARAMS,
};
// --------------------------------------------------------
// Type: MPRAPI_TUNNEL_CONFIG_PARAMS1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MPRAPI_TUNNEL_CONFIG_PARAMS1 = extern struct {
    IkeConfigParams: Windows.Win32.RoutingAndRemoteAccessService.IKEV2_CONFIG_PARAMS,
    PptpConfigParams: Windows.Win32.RoutingAndRemoteAccessService.PPTP_CONFIG_PARAMS,
    L2tpConfigParams: Windows.Win32.RoutingAndRemoteAccessService.L2TP_CONFIG_PARAMS1,
    SstpConfigParams: Windows.Win32.RoutingAndRemoteAccessService.SSTP_CONFIG_PARAMS,
    GREConfigParams: Windows.Win32.RoutingAndRemoteAccessService.GRE_CONFIG_PARAMS0,
};
// --------------------------------------------------------
// Type: MPR_SERVER_EX0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MPR_SERVER_EX0 = extern struct {
    Header: Windows.Win32.RoutingAndRemoteAccessService.MPRAPI_OBJECT_HEADER,
    fLanOnlyMode: {"kind":"UInt32"},
    dwUpTime: {"kind":"UInt32"},
    dwTotalPorts: {"kind":"UInt32"},
    dwPortsInUse: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
    ConfigParams: Windows.Win32.RoutingAndRemoteAccessService.MPRAPI_TUNNEL_CONFIG_PARAMS0,
};
// --------------------------------------------------------
// Type: MPR_SERVER_EX1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MPR_SERVER_EX1 = extern struct {
    Header: Windows.Win32.RoutingAndRemoteAccessService.MPRAPI_OBJECT_HEADER,
    fLanOnlyMode: {"kind":"UInt32"},
    dwUpTime: {"kind":"UInt32"},
    dwTotalPorts: {"kind":"UInt32"},
    dwPortsInUse: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
    ConfigParams: Windows.Win32.RoutingAndRemoteAccessService.MPRAPI_TUNNEL_CONFIG_PARAMS1,
};
// --------------------------------------------------------
// Type: MPR_SERVER_SET_CONFIG_EX0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MPR_SERVER_SET_CONFIG_EX0 = extern struct {
    Header: Windows.Win32.RoutingAndRemoteAccessService.MPRAPI_OBJECT_HEADER,
    setConfigForProtocols: {"kind":"UInt32"},
    ConfigParams: Windows.Win32.RoutingAndRemoteAccessService.MPRAPI_TUNNEL_CONFIG_PARAMS0,
};
// --------------------------------------------------------
// Type: MPR_SERVER_SET_CONFIG_EX1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MPR_SERVER_SET_CONFIG_EX1 = extern struct {
    Header: Windows.Win32.RoutingAndRemoteAccessService.MPRAPI_OBJECT_HEADER,
    setConfigForProtocols: {"kind":"UInt32"},
    ConfigParams: Windows.Win32.RoutingAndRemoteAccessService.MPRAPI_TUNNEL_CONFIG_PARAMS1,
};
// --------------------------------------------------------
// Type: AUTH_VALIDATION_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTH_VALIDATION_EX = extern struct {
    Header: Windows.Win32.RoutingAndRemoteAccessService.MPRAPI_OBJECT_HEADER,
    hRasConnection: Windows.Win32.SystemServices.HANDLE,
    wszUserName: {"kind":"Array","child": {"kind":"UInt16"}},
    wszLogonDomain: {"kind":"Array","child": {"kind":"UInt16"}},
    AuthInfoSize: {"kind":"UInt32"},
    AuthInfo: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: RAS_UPDATE_CONNECTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RAS_UPDATE_CONNECTION = extern struct {
    Header: Windows.Win32.RoutingAndRemoteAccessService.MPRAPI_OBJECT_HEADER,
    dwIfIndex: {"kind":"UInt32"},
    wszLocalEndpointAddress: {"kind":"Array","child": {"kind":"UInt16"}},
    wszRemoteEndpointAddress: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: PMPRADMINGETIPADDRESSFORUSER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PMPRADMINGETIPADDRESSFORUSER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PMPRADMINRELEASEIPADRESS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PMPRADMINRELEASEIPADRESS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PMPRADMINGETIPV6ADDRESSFORUSER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PMPRADMINGETIPV6ADDRESSFORUSER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PMPRADMINRELEASEIPV6ADDRESSFORUSER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PMPRADMINRELEASEIPV6ADDRESSFORUSER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PMPRADMINACCEPTNEWCONNECTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PMPRADMINACCEPTNEWCONNECTION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PMPRADMINACCEPTNEWCONNECTION2
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PMPRADMINACCEPTNEWCONNECTION2 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PMPRADMINACCEPTNEWCONNECTION3
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PMPRADMINACCEPTNEWCONNECTION3 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PMPRADMINACCEPTNEWLINK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PMPRADMINACCEPTNEWLINK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PMPRADMINCONNECTIONHANGUPNOTIFICATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PMPRADMINCONNECTIONHANGUPNOTIFICATION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PMPRADMINCONNECTIONHANGUPNOTIFICATION2
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PMPRADMINCONNECTIONHANGUPNOTIFICATION2 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PMPRADMINCONNECTIONHANGUPNOTIFICATION3
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PMPRADMINCONNECTIONHANGUPNOTIFICATION3 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PMPRADMINLINKHANGUPNOTIFICATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PMPRADMINLINKHANGUPNOTIFICATION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PMPRADMINTERMINATEDLL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PMPRADMINTERMINATEDLL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PMPRADMINACCEPTREAUTHENTICATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PMPRADMINACCEPTREAUTHENTICATION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PMPRADMINACCEPTNEWCONNECTIONEX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PMPRADMINACCEPTNEWCONNECTIONEX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PMPRADMINACCEPTREAUTHENTICATIONEX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PMPRADMINACCEPTREAUTHENTICATIONEX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PMPRADMINACCEPTTUNNELENDPOINTCHANGEEX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PMPRADMINACCEPTTUNNELENDPOINTCHANGEEX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PMPRADMINCONNECTIONHANGUPNOTIFICATIONEX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PMPRADMINCONNECTIONHANGUPNOTIFICATIONEX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PMPRADMINRASVALIDATEPREAUTHENTICATEDCONNECTIONEX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PMPRADMINRASVALIDATEPREAUTHENTICATEDCONNECTIONEX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: MPRAPI_ADMIN_DLL_CALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MPRAPI_ADMIN_DLL_CALLBACKS = extern struct {
    revision: {"kind":"Byte"},
    lpfnMprAdminGetIpAddressForUser: Windows.Win32.RoutingAndRemoteAccessService.PMPRADMINGETIPADDRESSFORUSER,
    lpfnMprAdminReleaseIpAddress: Windows.Win32.RoutingAndRemoteAccessService.PMPRADMINRELEASEIPADRESS,
    lpfnMprAdminGetIpv6AddressForUser: Windows.Win32.RoutingAndRemoteAccessService.PMPRADMINGETIPV6ADDRESSFORUSER,
    lpfnMprAdminReleaseIpV6AddressForUser: Windows.Win32.RoutingAndRemoteAccessService.PMPRADMINRELEASEIPV6ADDRESSFORUSER,
    lpfnRasAdminAcceptNewLink: Windows.Win32.RoutingAndRemoteAccessService.PMPRADMINACCEPTNEWLINK,
    lpfnRasAdminLinkHangupNotification: Windows.Win32.RoutingAndRemoteAccessService.PMPRADMINLINKHANGUPNOTIFICATION,
    lpfnRasAdminTerminateDll: Windows.Win32.RoutingAndRemoteAccessService.PMPRADMINTERMINATEDLL,
    lpfnRasAdminAcceptNewConnectionEx: Windows.Win32.RoutingAndRemoteAccessService.PMPRADMINACCEPTNEWCONNECTIONEX,
    lpfnRasAdminAcceptEndpointChangeEx: Windows.Win32.RoutingAndRemoteAccessService.PMPRADMINACCEPTTUNNELENDPOINTCHANGEEX,
    lpfnRasAdminAcceptReauthenticationEx: Windows.Win32.RoutingAndRemoteAccessService.PMPRADMINACCEPTREAUTHENTICATIONEX,
    lpfnRasAdminConnectionHangupNotificationEx: Windows.Win32.RoutingAndRemoteAccessService.PMPRADMINCONNECTIONHANGUPNOTIFICATIONEX,
    lpfnRASValidatePreAuthenticatedConnectionEx: Windows.Win32.RoutingAndRemoteAccessService.PMPRADMINRASVALIDATEPREAUTHENTICATEDCONNECTIONEX,
};
// --------------------------------------------------------
// Type: SECURITY_MESSAGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECURITY_MESSAGE = extern struct {
    dwMsgId: {"kind":"UInt32"},
    hPort: {"kind":"IntPtr"},
    dwError: {"kind":"UInt32"},
    UserName: {"kind":"Array","child": {"kind":"SByte"}},
    Domain: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: RAS_SECURITY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RAS_SECURITY_INFO = extern struct {
    LastError: {"kind":"UInt32"},
    BytesReceived: {"kind":"UInt32"},
    DeviceName: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: RASSECURITYPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RASSECURITYPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: MGM_IF_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MGM_IF_ENTRY = extern struct {
    dwIfIndex: {"kind":"UInt32"},
    dwIfNextHopAddr: {"kind":"UInt32"},
    bIGMP: Windows.Win32.SystemServices.BOOL,
    bIsEnabled: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: PMGM_RPF_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PMGM_RPF_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PMGM_CREATION_ALERT_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PMGM_CREATION_ALERT_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PMGM_PRUNE_ALERT_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PMGM_PRUNE_ALERT_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PMGM_JOIN_ALERT_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PMGM_JOIN_ALERT_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PMGM_WRONG_IF_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PMGM_WRONG_IF_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PMGM_LOCAL_JOIN_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PMGM_LOCAL_JOIN_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PMGM_LOCAL_LEAVE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PMGM_LOCAL_LEAVE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PMGM_DISABLE_IGMP_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PMGM_DISABLE_IGMP_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PMGM_ENABLE_IGMP_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PMGM_ENABLE_IGMP_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ROUTING_PROTOCOL_CONFIG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ROUTING_PROTOCOL_CONFIG = extern struct {
    dwCallbackFlags: {"kind":"UInt32"},
    pfnRpfCallback: Windows.Win32.RoutingAndRemoteAccessService.PMGM_RPF_CALLBACK,
    pfnCreationAlertCallback: Windows.Win32.RoutingAndRemoteAccessService.PMGM_CREATION_ALERT_CALLBACK,
    pfnPruneAlertCallback: Windows.Win32.RoutingAndRemoteAccessService.PMGM_PRUNE_ALERT_CALLBACK,
    pfnJoinAlertCallback: Windows.Win32.RoutingAndRemoteAccessService.PMGM_JOIN_ALERT_CALLBACK,
    pfnWrongIfCallback: Windows.Win32.RoutingAndRemoteAccessService.PMGM_WRONG_IF_CALLBACK,
    pfnLocalJoinCallback: Windows.Win32.RoutingAndRemoteAccessService.PMGM_LOCAL_JOIN_CALLBACK,
    pfnLocalLeaveCallback: Windows.Win32.RoutingAndRemoteAccessService.PMGM_LOCAL_LEAVE_CALLBACK,
    pfnDisableIgmpCallback: Windows.Win32.RoutingAndRemoteAccessService.PMGM_DISABLE_IGMP_CALLBACK,
    pfnEnableIgmpCallback: Windows.Win32.RoutingAndRemoteAccessService.PMGM_ENABLE_IGMP_CALLBACK,
};
// --------------------------------------------------------
// Type: MGM_ENUM_TYPES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MGM_ENUM_TYPES = *opaque{
};
// --------------------------------------------------------
// Type: SOURCE_GROUP_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SOURCE_GROUP_ENTRY = extern struct {
    dwSourceAddr: {"kind":"UInt32"},
    dwSourceMask: {"kind":"UInt32"},
    dwGroupAddr: {"kind":"UInt32"},
    dwGroupMask: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: RTM_REGN_PROFILE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RTM_REGN_PROFILE = extern struct {
    MaxNextHopsInRoute: {"kind":"UInt32"},
    MaxHandlesInEnum: {"kind":"UInt32"},
    ViewsSupported: {"kind":"UInt32"},
    NumberOfViews: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: RTM_NET_ADDRESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RTM_NET_ADDRESS = extern struct {
    AddressFamily: {"kind":"UInt16"},
    NumBits: {"kind":"UInt16"},
    AddrBits: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: RTM_PREF_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RTM_PREF_INFO = extern struct {
    Metric: {"kind":"UInt32"},
    Preference: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: RTM_NEXTHOP_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RTM_NEXTHOP_LIST = extern struct {
    NumNextHops: {"kind":"UInt16"},
    NextHops: {"kind":"Array","child": {"kind":"IntPtr"}},
};
// --------------------------------------------------------
// Type: RTM_DEST_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RTM_DEST_INFO = extern struct {
    DestHandle: {"kind":"IntPtr"},
    DestAddress: Windows.Win32.RoutingAndRemoteAccessService.RTM_NET_ADDRESS,
    LastChanged: Windows.Win32.WindowsProgramming.FILETIME,
    BelongsToViews: {"kind":"UInt32"},
    NumberOfViews: {"kind":"UInt32"},
    ViewInfo: {"kind":"Array","child": Windows.Win32.RoutingAndRemoteAccessService.RTM_DEST_INFO+_Anonymous_e__Struct},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Anonymous_e__Struct = extern struct {
        ViewId: {"kind":"Int32"},
        NumRoutes: {"kind":"UInt32"},
        Route: {"kind":"IntPtr"},
        Owner: {"kind":"IntPtr"},
        DestFlags: {"kind":"UInt32"},
        HoldRoute: {"kind":"IntPtr"},
    };
};
// --------------------------------------------------------
// Type: RTM_ROUTE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RTM_ROUTE_INFO = extern struct {
    DestHandle: {"kind":"IntPtr"},
    RouteOwner: {"kind":"IntPtr"},
    Neighbour: {"kind":"IntPtr"},
    State: {"kind":"Byte"},
    Flags1: {"kind":"Byte"},
    Flags: {"kind":"UInt16"},
    PrefInfo: Windows.Win32.RoutingAndRemoteAccessService.RTM_PREF_INFO,
    BelongsToViews: {"kind":"UInt32"},
    EntitySpecificInfo: {"kind""Ptr","child":{"kind":"Void"}},
    NextHopsList: Windows.Win32.RoutingAndRemoteAccessService.RTM_NEXTHOP_LIST,
};
// --------------------------------------------------------
// Type: RTM_NEXTHOP_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RTM_NEXTHOP_INFO = extern struct {
    NextHopAddress: Windows.Win32.RoutingAndRemoteAccessService.RTM_NET_ADDRESS,
    NextHopOwner: {"kind":"IntPtr"},
    InterfaceIndex: {"kind":"UInt32"},
    State: {"kind":"UInt16"},
    Flags: {"kind":"UInt16"},
    EntitySpecificInfo: {"kind""Ptr","child":{"kind":"Void"}},
    RemoteNextHop: {"kind":"IntPtr"},
};
// --------------------------------------------------------
// Type: RTM_ENTITY_ID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RTM_ENTITY_ID = extern struct {
    Anonymous: Windows.Win32.RoutingAndRemoteAccessService.RTM_ENTITY_ID+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            EntityProtocolId: {"kind":"UInt32"},
            EntityInstanceId: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: RTM_ENTITY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RTM_ENTITY_INFO = extern struct {
    RtmInstanceId: {"kind":"UInt16"},
    AddressFamily: {"kind":"UInt16"},
    EntityId: Windows.Win32.RoutingAndRemoteAccessService.RTM_ENTITY_ID,
};
// --------------------------------------------------------
// Type: RTM_EVENT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RTM_EVENT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: _EVENT_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _EVENT_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RTM_EVENT_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RTM_EVENT_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PRTM_EVENT_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PRTM_EVENT_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RTM_ENTITY_METHOD_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RTM_ENTITY_METHOD_INPUT = extern struct {
    MethodType: {"kind":"UInt32"},
    InputSize: {"kind":"UInt32"},
    InputData: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: RTM_ENTITY_METHOD_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RTM_ENTITY_METHOD_OUTPUT = extern struct {
    MethodType: {"kind":"UInt32"},
    MethodStatus: {"kind":"UInt32"},
    OutputSize: {"kind":"UInt32"},
    OutputData: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: _ENTITY_METHOD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _ENTITY_METHOD = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RTM_ENTITY_EXPORT_METHOD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RTM_ENTITY_EXPORT_METHOD = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PRTM_ENTITY_EXPORT_METHOD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PRTM_ENTITY_EXPORT_METHOD = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RTM_ENTITY_EXPORT_METHODS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RTM_ENTITY_EXPORT_METHODS = extern struct {
    NumMethods: {"kind":"UInt32"},
    Methods: {"kind":"Array","child": {"kind":"IntPtr"}},
};
],

"func_definitions": [

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasDialA(
    param0: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASDIALEXTENSIONS},
    param1: {"kind""Ptr","child":{"kind":"SByte"}},
    param2: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASDIALPARAMSA},
    param3: {"kind":"UInt32"},
    param4: {"kind""Ptr","child":{"kind":"Void"}},
    param5: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.HRASCONN__}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasDialW(
    param0: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASDIALEXTENSIONS},
    param1: {"kind""Ptr","child":{"kind":"UInt16"}},
    param2: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASDIALPARAMSW},
    param3: {"kind":"UInt32"},
    param4: {"kind""Ptr","child":{"kind":"Void"}},
    param5: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.HRASCONN__}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasEnumConnectionsA(
    param0: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASCONNA},
    param1: {"kind""Ptr","child":{"kind":"UInt32"}},
    param2: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasEnumConnectionsW(
    param0: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASCONNW},
    param1: {"kind""Ptr","child":{"kind":"UInt32"}},
    param2: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasEnumEntriesA(
    param0: {"kind""Ptr","child":{"kind":"SByte"}},
    param1: {"kind""Ptr","child":{"kind":"SByte"}},
    param2: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASENTRYNAMEA},
    param3: {"kind""Ptr","child":{"kind":"UInt32"}},
    param4: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasEnumEntriesW(
    param0: {"kind""Ptr","child":{"kind":"UInt16"}},
    param1: {"kind""Ptr","child":{"kind":"UInt16"}},
    param2: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASENTRYNAMEW},
    param3: {"kind""Ptr","child":{"kind":"UInt32"}},
    param4: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasGetConnectStatusA(
    param0: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.HRASCONN__},
    param1: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASCONNSTATUSA},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasGetConnectStatusW(
    param0: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.HRASCONN__},
    param1: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASCONNSTATUSW},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasGetErrorStringA(
    ResourceId: {"kind":"UInt32"},
    lpszString: {"kind""Ptr","child":{"kind":"SByte"}},
    InBufSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasGetErrorStringW(
    ResourceId: {"kind":"UInt32"},
    lpszString: {"kind""Ptr","child":{"kind":"UInt16"}},
    InBufSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasHangUpA(
    param0: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.HRASCONN__},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasHangUpW(
    param0: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.HRASCONN__},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasGetProjectionInfoA(
    param0: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.HRASCONN__},
    param1: Windows.Win32.RoutingAndRemoteAccessService.tagRASPROJECTION,
    param2: {"kind""Ptr","child":{"kind":"Void"}},
    param3: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasGetProjectionInfoW(
    param0: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.HRASCONN__},
    param1: Windows.Win32.RoutingAndRemoteAccessService.tagRASPROJECTION,
    param2: {"kind""Ptr","child":{"kind":"Void"}},
    param3: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasCreatePhonebookEntryA(
    param0: Windows.Win32.WindowsAndMessaging.HWND,
    param1: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasCreatePhonebookEntryW(
    param0: Windows.Win32.WindowsAndMessaging.HWND,
    param1: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasEditPhonebookEntryA(
    param0: Windows.Win32.WindowsAndMessaging.HWND,
    param1: {"kind""Ptr","child":{"kind":"SByte"}},
    param2: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasEditPhonebookEntryW(
    param0: Windows.Win32.WindowsAndMessaging.HWND,
    param1: {"kind""Ptr","child":{"kind":"UInt16"}},
    param2: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasSetEntryDialParamsA(
    param0: {"kind""Ptr","child":{"kind":"SByte"}},
    param1: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASDIALPARAMSA},
    param2: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasSetEntryDialParamsW(
    param0: {"kind""Ptr","child":{"kind":"UInt16"}},
    param1: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASDIALPARAMSW},
    param2: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasGetEntryDialParamsA(
    param0: {"kind""Ptr","child":{"kind":"SByte"}},
    param1: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASDIALPARAMSA},
    param2: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasGetEntryDialParamsW(
    param0: {"kind""Ptr","child":{"kind":"UInt16"}},
    param1: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASDIALPARAMSW},
    param2: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasEnumDevicesA(
    param0: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASDEVINFOA},
    param1: {"kind""Ptr","child":{"kind":"UInt32"}},
    param2: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasEnumDevicesW(
    param0: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASDEVINFOW},
    param1: {"kind""Ptr","child":{"kind":"UInt32"}},
    param2: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasGetCountryInfoA(
    param0: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RASCTRYINFO},
    param1: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasGetCountryInfoW(
    param0: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RASCTRYINFO},
    param1: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasGetEntryPropertiesA(
    param0: {"kind""Ptr","child":{"kind":"SByte"}},
    param1: {"kind""Ptr","child":{"kind":"SByte"}},
    param2: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASENTRYA},
    param3: {"kind""Ptr","child":{"kind":"UInt32"}},
    param4: {"kind""Ptr","child":{"kind":"Byte"}},
    param5: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasGetEntryPropertiesW(
    param0: {"kind""Ptr","child":{"kind":"UInt16"}},
    param1: {"kind""Ptr","child":{"kind":"UInt16"}},
    param2: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASENTRYW},
    param3: {"kind""Ptr","child":{"kind":"UInt32"}},
    param4: {"kind""Ptr","child":{"kind":"Byte"}},
    param5: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasSetEntryPropertiesA(
    param0: {"kind""Ptr","child":{"kind":"SByte"}},
    param1: {"kind""Ptr","child":{"kind":"SByte"}},
    param2: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASENTRYA},
    param3: {"kind":"UInt32"},
    param4: {"kind""Ptr","child":{"kind":"Byte"}},
    param5: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasSetEntryPropertiesW(
    param0: {"kind""Ptr","child":{"kind":"UInt16"}},
    param1: {"kind""Ptr","child":{"kind":"UInt16"}},
    param2: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASENTRYW},
    param3: {"kind":"UInt32"},
    param4: {"kind""Ptr","child":{"kind":"Byte"}},
    param5: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasRenameEntryA(
    param0: {"kind""Ptr","child":{"kind":"SByte"}},
    param1: {"kind""Ptr","child":{"kind":"SByte"}},
    param2: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasRenameEntryW(
    param0: {"kind""Ptr","child":{"kind":"UInt16"}},
    param1: {"kind""Ptr","child":{"kind":"UInt16"}},
    param2: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasDeleteEntryA(
    param0: {"kind""Ptr","child":{"kind":"SByte"}},
    param1: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasDeleteEntryW(
    param0: {"kind""Ptr","child":{"kind":"UInt16"}},
    param1: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasValidateEntryNameA(
    param0: {"kind""Ptr","child":{"kind":"SByte"}},
    param1: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasValidateEntryNameW(
    param0: {"kind""Ptr","child":{"kind":"UInt16"}},
    param1: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasConnectionNotificationA(
    param0: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.HRASCONN__},
    param1: Windows.Win32.SystemServices.HANDLE,
    param2: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasConnectionNotificationW(
    param0: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.HRASCONN__},
    param1: Windows.Win32.SystemServices.HANDLE,
    param2: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasGetSubEntryHandleA(
    param0: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.HRASCONN__},
    param1: {"kind":"UInt32"},
    param2: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.HRASCONN__}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasGetSubEntryHandleW(
    param0: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.HRASCONN__},
    param1: {"kind":"UInt32"},
    param2: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.HRASCONN__}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasGetCredentialsA(
    param0: {"kind""Ptr","child":{"kind":"SByte"}},
    param1: {"kind""Ptr","child":{"kind":"SByte"}},
    param2: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASCREDENTIALSA},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasGetCredentialsW(
    param0: {"kind""Ptr","child":{"kind":"UInt16"}},
    param1: {"kind""Ptr","child":{"kind":"UInt16"}},
    param2: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASCREDENTIALSW},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasSetCredentialsA(
    param0: {"kind""Ptr","child":{"kind":"SByte"}},
    param1: {"kind""Ptr","child":{"kind":"SByte"}},
    param2: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASCREDENTIALSA},
    param3: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasSetCredentialsW(
    param0: {"kind""Ptr","child":{"kind":"UInt16"}},
    param1: {"kind""Ptr","child":{"kind":"UInt16"}},
    param2: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASCREDENTIALSW},
    param3: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasGetSubEntryPropertiesA(
    param0: {"kind""Ptr","child":{"kind":"SByte"}},
    param1: {"kind""Ptr","child":{"kind":"SByte"}},
    param2: {"kind":"UInt32"},
    param3: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASSUBENTRYA},
    param4: {"kind""Ptr","child":{"kind":"UInt32"}},
    param5: {"kind""Ptr","child":{"kind":"Byte"}},
    param6: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasGetSubEntryPropertiesW(
    param0: {"kind""Ptr","child":{"kind":"UInt16"}},
    param1: {"kind""Ptr","child":{"kind":"UInt16"}},
    param2: {"kind":"UInt32"},
    param3: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASSUBENTRYW},
    param4: {"kind""Ptr","child":{"kind":"UInt32"}},
    param5: {"kind""Ptr","child":{"kind":"Byte"}},
    param6: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasSetSubEntryPropertiesA(
    param0: {"kind""Ptr","child":{"kind":"SByte"}},
    param1: {"kind""Ptr","child":{"kind":"SByte"}},
    param2: {"kind":"UInt32"},
    param3: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASSUBENTRYA},
    param4: {"kind":"UInt32"},
    param5: {"kind""Ptr","child":{"kind":"Byte"}},
    param6: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasSetSubEntryPropertiesW(
    param0: {"kind""Ptr","child":{"kind":"UInt16"}},
    param1: {"kind""Ptr","child":{"kind":"UInt16"}},
    param2: {"kind":"UInt32"},
    param3: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASSUBENTRYW},
    param4: {"kind":"UInt32"},
    param5: {"kind""Ptr","child":{"kind":"Byte"}},
    param6: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasGetAutodialAddressA(
    param0: {"kind""Ptr","child":{"kind":"SByte"}},
    param1: {"kind""Ptr","child":{"kind":"UInt32"}},
    param2: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASAUTODIALENTRYA},
    param3: {"kind""Ptr","child":{"kind":"UInt32"}},
    param4: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasGetAutodialAddressW(
    param0: {"kind""Ptr","child":{"kind":"UInt16"}},
    param1: {"kind""Ptr","child":{"kind":"UInt32"}},
    param2: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASAUTODIALENTRYW},
    param3: {"kind""Ptr","child":{"kind":"UInt32"}},
    param4: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasSetAutodialAddressA(
    param0: {"kind""Ptr","child":{"kind":"SByte"}},
    param1: {"kind":"UInt32"},
    param2: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASAUTODIALENTRYA},
    param3: {"kind":"UInt32"},
    param4: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasSetAutodialAddressW(
    param0: {"kind""Ptr","child":{"kind":"UInt16"}},
    param1: {"kind":"UInt32"},
    param2: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASAUTODIALENTRYW},
    param3: {"kind":"UInt32"},
    param4: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasEnumAutodialAddressesA(
    lppRasAutodialAddresses: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},
    lpdwcbRasAutodialAddresses: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpdwcRasAutodialAddresses: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasEnumAutodialAddressesW(
    lppRasAutodialAddresses: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    lpdwcbRasAutodialAddresses: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpdwcRasAutodialAddresses: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasGetAutodialEnableA(
    param0: {"kind":"UInt32"},
    param1: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasGetAutodialEnableW(
    param0: {"kind":"UInt32"},
    param1: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasSetAutodialEnableA(
    param0: {"kind":"UInt32"},
    param1: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasSetAutodialEnableW(
    param0: {"kind":"UInt32"},
    param1: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasGetAutodialParamA(
    param0: {"kind":"UInt32"},
    param1: {"kind""Ptr","child":{"kind":"Void"}},
    param2: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasGetAutodialParamW(
    param0: {"kind":"UInt32"},
    param1: {"kind""Ptr","child":{"kind":"Void"}},
    param2: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasSetAutodialParamA(
    param0: {"kind":"UInt32"},
    param1: {"kind""Ptr","child":{"kind":"Void"}},
    param2: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasSetAutodialParamW(
    param0: {"kind":"UInt32"},
    param1: {"kind""Ptr","child":{"kind":"Void"}},
    param2: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasGetPCscf(
    lpszPCscf: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasInvokeEapUI(
    param0: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.HRASCONN__},
    param1: {"kind":"UInt32"},
    param2: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASDIALEXTENSIONS},
    param3: Windows.Win32.WindowsAndMessaging.HWND,

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasGetLinkStatistics(
    hRasConn: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.HRASCONN__},
    dwSubEntry: {"kind":"UInt32"},
    lpStatistics: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RAS_STATS},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasGetConnectionStatistics(
    hRasConn: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.HRASCONN__},
    lpStatistics: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RAS_STATS},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasClearLinkStatistics(
    hRasConn: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.HRASCONN__},
    dwSubEntry: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasClearConnectionStatistics(
    hRasConn: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.HRASCONN__},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasGetEapUserDataA(
    hToken: Windows.Win32.SystemServices.HANDLE,
    pszPhonebook: {"kind""Ptr","child":{"kind":"SByte"}},
    pszEntry: {"kind""Ptr","child":{"kind":"SByte"}},
    pbEapData: {"kind""Ptr","child":{"kind":"Byte"}},
    pdwSizeofEapData: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasGetEapUserDataW(
    hToken: Windows.Win32.SystemServices.HANDLE,
    pszPhonebook: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszEntry: {"kind""Ptr","child":{"kind":"UInt16"}},
    pbEapData: {"kind""Ptr","child":{"kind":"Byte"}},
    pdwSizeofEapData: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasSetEapUserDataA(
    hToken: Windows.Win32.SystemServices.HANDLE,
    pszPhonebook: {"kind""Ptr","child":{"kind":"SByte"}},
    pszEntry: {"kind""Ptr","child":{"kind":"SByte"}},
    pbEapData: {"kind""Ptr","child":{"kind":"Byte"}},
    dwSizeofEapData: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasSetEapUserDataW(
    hToken: Windows.Win32.SystemServices.HANDLE,
    pszPhonebook: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszEntry: {"kind""Ptr","child":{"kind":"UInt16"}},
    pbEapData: {"kind""Ptr","child":{"kind":"Byte"}},
    dwSizeofEapData: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasGetCustomAuthDataA(
    pszPhonebook: {"kind""Ptr","child":{"kind":"SByte"}},
    pszEntry: {"kind""Ptr","child":{"kind":"SByte"}},
    pbCustomAuthData: {"kind""Ptr","child":{"kind":"Byte"}},
    pdwSizeofCustomAuthData: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasGetCustomAuthDataW(
    pszPhonebook: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszEntry: {"kind""Ptr","child":{"kind":"UInt16"}},
    pbCustomAuthData: {"kind""Ptr","child":{"kind":"Byte"}},
    pdwSizeofCustomAuthData: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasSetCustomAuthDataA(
    pszPhonebook: {"kind""Ptr","child":{"kind":"SByte"}},
    pszEntry: {"kind""Ptr","child":{"kind":"SByte"}},
    pbCustomAuthData: {"kind""Ptr","child":{"kind":"Byte"}},
    dwSizeofCustomAuthData: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasSetCustomAuthDataW(
    pszPhonebook: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszEntry: {"kind""Ptr","child":{"kind":"UInt16"}},
    pbCustomAuthData: {"kind""Ptr","child":{"kind":"Byte"}},
    dwSizeofCustomAuthData: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasGetEapUserIdentityW(
    pszPhonebook: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszEntry: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    ppRasEapUserIdentity: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASEAPUSERIDENTITYW}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasGetEapUserIdentityA(
    pszPhonebook: {"kind""Ptr","child":{"kind":"SByte"}},
    pszEntry: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    ppRasEapUserIdentity: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASEAPUSERIDENTITYA}},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasFreeEapUserIdentityW(
    pRasEapUserIdentity: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASEAPUSERIDENTITYW},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasFreeEapUserIdentityA(
    pRasEapUserIdentity: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASEAPUSERIDENTITYA},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasDeleteSubEntryA(
    pszPhonebook: {"kind""Ptr","child":{"kind":"SByte"}},
    pszEntry: {"kind""Ptr","child":{"kind":"SByte"}},
    dwSubentryId: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasDeleteSubEntryW(
    pszPhonebook: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszEntry: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwSubEntryId: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasUpdateConnection(
    hrasconn: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.HRASCONN__},
    lprasupdateconn: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASUPDATECONN},

// set_last_errror=False (can and should we use this?)
pub extern "RASAPI32" fn RasGetProjectionInfoEx(
    hrasconn: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.HRASCONN__},
    pRasProjection: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RAS_PROJECTION_INFO},
    lpdwSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "RASDLG" fn RasPhonebookDlgA(
    lpszPhonebook: {"kind""Ptr","child":{"kind":"SByte"}},
    lpszEntry: {"kind""Ptr","child":{"kind":"SByte"}},
    lpInfo: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASPBDLGA},

// set_last_errror=False (can and should we use this?)
pub extern "RASDLG" fn RasPhonebookDlgW(
    lpszPhonebook: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpszEntry: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpInfo: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASPBDLGW},

// set_last_errror=False (can and should we use this?)
pub extern "RASDLG" fn RasEntryDlgA(
    lpszPhonebook: {"kind""Ptr","child":{"kind":"SByte"}},
    lpszEntry: {"kind""Ptr","child":{"kind":"SByte"}},
    lpInfo: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASENTRYDLGA},

// set_last_errror=False (can and should we use this?)
pub extern "RASDLG" fn RasEntryDlgW(
    lpszPhonebook: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpszEntry: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpInfo: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASENTRYDLGW},

// set_last_errror=False (can and should we use this?)
pub extern "RASDLG" fn RasDialDlgA(
    lpszPhonebook: {"kind""Ptr","child":{"kind":"SByte"}},
    lpszEntry: {"kind""Ptr","child":{"kind":"SByte"}},
    lpszPhoneNumber: {"kind""Ptr","child":{"kind":"SByte"}},
    lpInfo: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASDIALDLG},

// set_last_errror=False (can and should we use this?)
pub extern "RASDLG" fn RasDialDlgW(
    lpszPhonebook: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpszEntry: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpszPhoneNumber: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpInfo: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.tagRASDIALDLG},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminConnectionEnumEx(
    hRasServer: {"kind":"IntPtr"},
    pObjectHeader: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.MPRAPI_OBJECT_HEADER},
    dwPreferedMaxLen: {"kind":"UInt32"},
    lpdwEntriesRead: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpdwTotalEntries: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppRasConn: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RAS_CONNECTION_EX}},
    lpdwResumeHandle: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminConnectionGetInfoEx(
    hRasServer: {"kind":"IntPtr"},
    hRasConnection: Windows.Win32.SystemServices.HANDLE,
    pRasConnection: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RAS_CONNECTION_EX},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminServerGetInfoEx(
    hMprServer: {"kind":"IntPtr"},
    pServerInfo: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.MPR_SERVER_EX1},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminServerSetInfoEx(
    hMprServer: {"kind":"IntPtr"},
    pServerInfo: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.MPR_SERVER_SET_CONFIG_EX1},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprConfigServerGetInfoEx(
    hMprConfig: Windows.Win32.SystemServices.HANDLE,
    pServerInfo: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.MPR_SERVER_EX1},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprConfigServerSetInfoEx(
    hMprConfig: Windows.Win32.SystemServices.HANDLE,
    pSetServerConfig: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.MPR_SERVER_SET_CONFIG_EX1},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminUpdateConnection(
    hRasServer: {"kind":"IntPtr"},
    hRasConnection: Windows.Win32.SystemServices.HANDLE,
    pRasUpdateConnection: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RAS_UPDATE_CONNECTION},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminIsServiceInitialized(
    lpwsServerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    fIsServiceInitialized: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminInterfaceSetCustomInfoEx(
    hMprServer: {"kind":"IntPtr"},
    hInterface: Windows.Win32.SystemServices.HANDLE,
    pCustomInfo: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.MPR_IF_CUSTOMINFOEX2},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminInterfaceGetCustomInfoEx(
    hMprServer: {"kind":"IntPtr"},
    hInterface: Windows.Win32.SystemServices.HANDLE,
    pCustomInfo: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.MPR_IF_CUSTOMINFOEX2},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprConfigInterfaceGetCustomInfoEx(
    hMprConfig: Windows.Win32.SystemServices.HANDLE,
    hRouterInterface: Windows.Win32.SystemServices.HANDLE,
    pCustomInfo: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.MPR_IF_CUSTOMINFOEX2},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprConfigInterfaceSetCustomInfoEx(
    hMprConfig: Windows.Win32.SystemServices.HANDLE,
    hRouterInterface: Windows.Win32.SystemServices.HANDLE,
    pCustomInfo: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.MPR_IF_CUSTOMINFOEX2},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminConnectionEnum(
    hRasServer: {"kind":"IntPtr"},
    dwLevel: {"kind":"UInt32"},
    lplpbBuffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    dwPrefMaxLen: {"kind":"UInt32"},
    lpdwEntriesRead: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpdwTotalEntries: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpdwResumeHandle: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminPortEnum(
    hRasServer: {"kind":"IntPtr"},
    dwLevel: {"kind":"UInt32"},
    hRasConnection: Windows.Win32.SystemServices.HANDLE,
    lplpbBuffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    dwPrefMaxLen: {"kind":"UInt32"},
    lpdwEntriesRead: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpdwTotalEntries: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpdwResumeHandle: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminConnectionGetInfo(
    hRasServer: {"kind":"IntPtr"},
    dwLevel: {"kind":"UInt32"},
    hRasConnection: Windows.Win32.SystemServices.HANDLE,
    lplpbBuffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminPortGetInfo(
    hRasServer: {"kind":"IntPtr"},
    dwLevel: {"kind":"UInt32"},
    hPort: Windows.Win32.SystemServices.HANDLE,
    lplpbBuffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminConnectionClearStats(
    hRasServer: {"kind":"IntPtr"},
    hRasConnection: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminPortClearStats(
    hRasServer: {"kind":"IntPtr"},
    hPort: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminPortReset(
    hRasServer: {"kind":"IntPtr"},
    hPort: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminPortDisconnect(
    hRasServer: {"kind":"IntPtr"},
    hPort: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminConnectionRemoveQuarantine(
    hRasServer: Windows.Win32.SystemServices.HANDLE,
    hRasConnection: Windows.Win32.SystemServices.HANDLE,
    fIsIpAddress: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminUserGetInfo(
    lpszServer: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpszUser: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwLevel: {"kind":"UInt32"},
    lpbBuffer: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminUserSetInfo(
    lpszServer: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpszUser: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwLevel: {"kind":"UInt32"},
    lpbBuffer: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminSendUserMessage(
    hMprServer: {"kind":"IntPtr"},
    hConnection: Windows.Win32.SystemServices.HANDLE,
    lpwszMessage: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminGetPDCServer(
    lpszDomain: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpszServer: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpszPDCServer: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminIsServiceRunning(
    lpwsServerName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminServerConnect(
    lpwsServerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    phMprServer: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminServerDisconnect(
    hMprServer: {"kind":"IntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminServerGetCredentials(
    hMprServer: {"kind":"IntPtr"},
    dwLevel: {"kind":"UInt32"},
    lplpbBuffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminServerSetCredentials(
    hMprServer: {"kind":"IntPtr"},
    dwLevel: {"kind":"UInt32"},
    lpbBuffer: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminBufferFree(
    pBuffer: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminGetErrorString(
    dwError: {"kind":"UInt32"},
    lplpwsErrorString: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminServerGetInfo(
    hMprServer: {"kind":"IntPtr"},
    dwLevel: {"kind":"UInt32"},
    lplpbBuffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminServerSetInfo(
    hMprServer: {"kind":"IntPtr"},
    dwLevel: {"kind":"UInt32"},
    lpbBuffer: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminEstablishDomainRasServer(
    pszDomain: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszMachine: {"kind""Ptr","child":{"kind":"UInt16"}},
    bEnable: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminIsDomainRasServer(
    pszDomain: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszMachine: {"kind""Ptr","child":{"kind":"UInt16"}},
    pbIsRasServer: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminTransportCreate(
    hMprServer: {"kind":"IntPtr"},
    dwTransportId: {"kind":"UInt32"},
    lpwsTransportName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pGlobalInfo: {"kind""Ptr","child":{"kind":"Byte"}},
    dwGlobalInfoSize: {"kind":"UInt32"},
    pClientInterfaceInfo: {"kind""Ptr","child":{"kind":"Byte"}},
    dwClientInterfaceInfoSize: {"kind":"UInt32"},
    lpwsDLLPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminTransportSetInfo(
    hMprServer: {"kind":"IntPtr"},
    dwTransportId: {"kind":"UInt32"},
    pGlobalInfo: {"kind""Ptr","child":{"kind":"Byte"}},
    dwGlobalInfoSize: {"kind":"UInt32"},
    pClientInterfaceInfo: {"kind""Ptr","child":{"kind":"Byte"}},
    dwClientInterfaceInfoSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminTransportGetInfo(
    hMprServer: {"kind":"IntPtr"},
    dwTransportId: {"kind":"UInt32"},
    ppGlobalInfo: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    lpdwGlobalInfoSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppClientInterfaceInfo: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    lpdwClientInterfaceInfoSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminDeviceEnum(
    hMprServer: {"kind":"IntPtr"},
    dwLevel: {"kind":"UInt32"},
    lplpbBuffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    lpdwTotalEntries: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminInterfaceGetHandle(
    hMprServer: {"kind":"IntPtr"},
    lpwsInterfaceName: {"kind""Ptr","child":{"kind":"UInt16"}},
    phInterface: {"kind""Ptr","child":Windows.Win32.SystemServices.HANDLE},
    fIncludeClientInterfaces: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminInterfaceCreate(
    hMprServer: {"kind":"IntPtr"},
    dwLevel: {"kind":"UInt32"},
    lpbBuffer: {"kind""Ptr","child":{"kind":"Byte"}},
    phInterface: {"kind""Ptr","child":Windows.Win32.SystemServices.HANDLE},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminInterfaceGetInfo(
    hMprServer: {"kind":"IntPtr"},
    hInterface: Windows.Win32.SystemServices.HANDLE,
    dwLevel: {"kind":"UInt32"},
    lplpbBuffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminInterfaceSetInfo(
    hMprServer: {"kind":"IntPtr"},
    hInterface: Windows.Win32.SystemServices.HANDLE,
    dwLevel: {"kind":"UInt32"},
    lpbBuffer: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminInterfaceDelete(
    hMprServer: {"kind":"IntPtr"},
    hInterface: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminInterfaceDeviceGetInfo(
    hMprServer: {"kind":"IntPtr"},
    hInterface: Windows.Win32.SystemServices.HANDLE,
    dwIndex: {"kind":"UInt32"},
    dwLevel: {"kind":"UInt32"},
    lplpBuffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminInterfaceDeviceSetInfo(
    hMprServer: {"kind":"IntPtr"},
    hInterface: Windows.Win32.SystemServices.HANDLE,
    dwIndex: {"kind":"UInt32"},
    dwLevel: {"kind":"UInt32"},
    lpbBuffer: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminInterfaceTransportRemove(
    hMprServer: {"kind":"IntPtr"},
    hInterface: Windows.Win32.SystemServices.HANDLE,
    dwTransportId: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminInterfaceTransportAdd(
    hMprServer: {"kind":"IntPtr"},
    hInterface: Windows.Win32.SystemServices.HANDLE,
    dwTransportId: {"kind":"UInt32"},
    pInterfaceInfo: {"kind""Ptr","child":{"kind":"Byte"}},
    dwInterfaceInfoSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminInterfaceTransportGetInfo(
    hMprServer: {"kind":"IntPtr"},
    hInterface: Windows.Win32.SystemServices.HANDLE,
    dwTransportId: {"kind":"UInt32"},
    ppInterfaceInfo: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    lpdwInterfaceInfoSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminInterfaceTransportSetInfo(
    hMprServer: {"kind":"IntPtr"},
    hInterface: Windows.Win32.SystemServices.HANDLE,
    dwTransportId: {"kind":"UInt32"},
    pInterfaceInfo: {"kind""Ptr","child":{"kind":"Byte"}},
    dwInterfaceInfoSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminInterfaceEnum(
    hMprServer: {"kind":"IntPtr"},
    dwLevel: {"kind":"UInt32"},
    lplpbBuffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    dwPrefMaxLen: {"kind":"UInt32"},
    lpdwEntriesRead: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpdwTotalEntries: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpdwResumeHandle: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminInterfaceSetCredentials(
    lpwsServer: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpwsInterfaceName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpwsUserName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpwsDomainName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpwsPassword: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminInterfaceGetCredentials(
    lpwsServer: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpwsInterfaceName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpwsUserName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpwsPassword: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpwsDomainName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminInterfaceSetCredentialsEx(
    hMprServer: {"kind":"IntPtr"},
    hInterface: Windows.Win32.SystemServices.HANDLE,
    dwLevel: {"kind":"UInt32"},
    lpbBuffer: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminInterfaceGetCredentialsEx(
    hMprServer: {"kind":"IntPtr"},
    hInterface: Windows.Win32.SystemServices.HANDLE,
    dwLevel: {"kind":"UInt32"},
    lplpbBuffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminInterfaceConnect(
    hMprServer: {"kind":"IntPtr"},
    hInterface: Windows.Win32.SystemServices.HANDLE,
    hEvent: Windows.Win32.SystemServices.HANDLE,
    fSynchronous: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminInterfaceDisconnect(
    hMprServer: {"kind":"IntPtr"},
    hInterface: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminInterfaceUpdateRoutes(
    hMprServer: {"kind":"IntPtr"},
    hInterface: Windows.Win32.SystemServices.HANDLE,
    dwProtocolId: {"kind":"UInt32"},
    hEvent: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminInterfaceQueryUpdateResult(
    hMprServer: {"kind":"IntPtr"},
    hInterface: Windows.Win32.SystemServices.HANDLE,
    dwProtocolId: {"kind":"UInt32"},
    lpdwUpdateResult: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminInterfaceUpdatePhonebookInfo(
    hMprServer: {"kind":"IntPtr"},
    hInterface: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminRegisterConnectionNotification(
    hMprServer: {"kind":"IntPtr"},
    hEventNotification: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminDeregisterConnectionNotification(
    hMprServer: {"kind":"IntPtr"},
    hEventNotification: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminMIBServerConnect(
    lpwsServerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    phMibServer: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminMIBServerDisconnect(
    hMibServer: {"kind":"IntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminMIBEntryCreate(
    hMibServer: {"kind":"IntPtr"},
    dwPid: {"kind":"UInt32"},
    dwRoutingPid: {"kind":"UInt32"},
    lpEntry: {"kind""Ptr","child":{"kind":"Void"}},
    dwEntrySize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminMIBEntryDelete(
    hMibServer: {"kind":"IntPtr"},
    dwProtocolId: {"kind":"UInt32"},
    dwRoutingPid: {"kind":"UInt32"},
    lpEntry: {"kind""Ptr","child":{"kind":"Void"}},
    dwEntrySize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminMIBEntrySet(
    hMibServer: {"kind":"IntPtr"},
    dwProtocolId: {"kind":"UInt32"},
    dwRoutingPid: {"kind":"UInt32"},
    lpEntry: {"kind""Ptr","child":{"kind":"Void"}},
    dwEntrySize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminMIBEntryGet(
    hMibServer: {"kind":"IntPtr"},
    dwProtocolId: {"kind":"UInt32"},
    dwRoutingPid: {"kind":"UInt32"},
    lpInEntry: {"kind""Ptr","child":{"kind":"Void"}},
    dwInEntrySize: {"kind":"UInt32"},
    lplpOutEntry: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    lpOutEntrySize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminMIBEntryGetFirst(
    hMibServer: {"kind":"IntPtr"},
    dwProtocolId: {"kind":"UInt32"},
    dwRoutingPid: {"kind":"UInt32"},
    lpInEntry: {"kind""Ptr","child":{"kind":"Void"}},
    dwInEntrySize: {"kind":"UInt32"},
    lplpOutEntry: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    lpOutEntrySize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminMIBEntryGetNext(
    hMibServer: {"kind":"IntPtr"},
    dwProtocolId: {"kind":"UInt32"},
    dwRoutingPid: {"kind":"UInt32"},
    lpInEntry: {"kind""Ptr","child":{"kind":"Void"}},
    dwInEntrySize: {"kind":"UInt32"},
    lplpOutEntry: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    lpOutEntrySize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprAdminMIBBufferFree(
    pBuffer: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprConfigServerInstall(
    dwLevel: {"kind":"UInt32"},
    pBuffer: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprConfigServerConnect(
    lpwsServerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    phMprConfig: {"kind""Ptr","child":Windows.Win32.SystemServices.HANDLE},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprConfigServerDisconnect(
    hMprConfig: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprConfigServerRefresh(
    hMprConfig: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprConfigBufferFree(
    pBuffer: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprConfigServerGetInfo(
    hMprConfig: Windows.Win32.SystemServices.HANDLE,
    dwLevel: {"kind":"UInt32"},
    lplpbBuffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprConfigServerSetInfo(
    hMprServer: {"kind":"IntPtr"},
    dwLevel: {"kind":"UInt32"},
    lpbBuffer: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprConfigServerBackup(
    hMprConfig: Windows.Win32.SystemServices.HANDLE,
    lpwsPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprConfigServerRestore(
    hMprConfig: Windows.Win32.SystemServices.HANDLE,
    lpwsPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprConfigTransportCreate(
    hMprConfig: Windows.Win32.SystemServices.HANDLE,
    dwTransportId: {"kind":"UInt32"},
    lpwsTransportName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pGlobalInfo: {"kind""Ptr","child":{"kind":"Byte"}},
    dwGlobalInfoSize: {"kind":"UInt32"},
    pClientInterfaceInfo: {"kind""Ptr","child":{"kind":"Byte"}},
    dwClientInterfaceInfoSize: {"kind":"UInt32"},
    lpwsDLLPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    phRouterTransport: {"kind""Ptr","child":Windows.Win32.SystemServices.HANDLE},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprConfigTransportDelete(
    hMprConfig: Windows.Win32.SystemServices.HANDLE,
    hRouterTransport: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprConfigTransportGetHandle(
    hMprConfig: Windows.Win32.SystemServices.HANDLE,
    dwTransportId: {"kind":"UInt32"},
    phRouterTransport: {"kind""Ptr","child":Windows.Win32.SystemServices.HANDLE},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprConfigTransportSetInfo(
    hMprConfig: Windows.Win32.SystemServices.HANDLE,
    hRouterTransport: Windows.Win32.SystemServices.HANDLE,
    pGlobalInfo: {"kind""Ptr","child":{"kind":"Byte"}},
    dwGlobalInfoSize: {"kind":"UInt32"},
    pClientInterfaceInfo: {"kind""Ptr","child":{"kind":"Byte"}},
    dwClientInterfaceInfoSize: {"kind":"UInt32"},
    lpwsDLLPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprConfigTransportGetInfo(
    hMprConfig: Windows.Win32.SystemServices.HANDLE,
    hRouterTransport: Windows.Win32.SystemServices.HANDLE,
    ppGlobalInfo: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    lpdwGlobalInfoSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppClientInterfaceInfo: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    lpdwClientInterfaceInfoSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    lplpwsDLLPath: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprConfigTransportEnum(
    hMprConfig: Windows.Win32.SystemServices.HANDLE,
    dwLevel: {"kind":"UInt32"},
    lplpBuffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    dwPrefMaxLen: {"kind":"UInt32"},
    lpdwEntriesRead: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpdwTotalEntries: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpdwResumeHandle: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprConfigInterfaceCreate(
    hMprConfig: Windows.Win32.SystemServices.HANDLE,
    dwLevel: {"kind":"UInt32"},
    lpbBuffer: {"kind""Ptr","child":{"kind":"Byte"}},
    phRouterInterface: {"kind""Ptr","child":Windows.Win32.SystemServices.HANDLE},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprConfigInterfaceDelete(
    hMprConfig: Windows.Win32.SystemServices.HANDLE,
    hRouterInterface: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprConfigInterfaceGetHandle(
    hMprConfig: Windows.Win32.SystemServices.HANDLE,
    lpwsInterfaceName: {"kind""Ptr","child":{"kind":"UInt16"}},
    phRouterInterface: {"kind""Ptr","child":Windows.Win32.SystemServices.HANDLE},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprConfigInterfaceGetInfo(
    hMprConfig: Windows.Win32.SystemServices.HANDLE,
    hRouterInterface: Windows.Win32.SystemServices.HANDLE,
    dwLevel: {"kind":"UInt32"},
    lplpBuffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    lpdwBufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprConfigInterfaceSetInfo(
    hMprConfig: Windows.Win32.SystemServices.HANDLE,
    hRouterInterface: Windows.Win32.SystemServices.HANDLE,
    dwLevel: {"kind":"UInt32"},
    lpbBuffer: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprConfigInterfaceEnum(
    hMprConfig: Windows.Win32.SystemServices.HANDLE,
    dwLevel: {"kind":"UInt32"},
    lplpBuffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    dwPrefMaxLen: {"kind":"UInt32"},
    lpdwEntriesRead: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpdwTotalEntries: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpdwResumeHandle: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprConfigInterfaceTransportAdd(
    hMprConfig: Windows.Win32.SystemServices.HANDLE,
    hRouterInterface: Windows.Win32.SystemServices.HANDLE,
    dwTransportId: {"kind":"UInt32"},
    lpwsTransportName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pInterfaceInfo: {"kind""Ptr","child":{"kind":"Byte"}},
    dwInterfaceInfoSize: {"kind":"UInt32"},
    phRouterIfTransport: {"kind""Ptr","child":Windows.Win32.SystemServices.HANDLE},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprConfigInterfaceTransportRemove(
    hMprConfig: Windows.Win32.SystemServices.HANDLE,
    hRouterInterface: Windows.Win32.SystemServices.HANDLE,
    hRouterIfTransport: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprConfigInterfaceTransportGetHandle(
    hMprConfig: Windows.Win32.SystemServices.HANDLE,
    hRouterInterface: Windows.Win32.SystemServices.HANDLE,
    dwTransportId: {"kind":"UInt32"},
    phRouterIfTransport: {"kind""Ptr","child":Windows.Win32.SystemServices.HANDLE},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprConfigInterfaceTransportGetInfo(
    hMprConfig: Windows.Win32.SystemServices.HANDLE,
    hRouterInterface: Windows.Win32.SystemServices.HANDLE,
    hRouterIfTransport: Windows.Win32.SystemServices.HANDLE,
    ppInterfaceInfo: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    lpdwInterfaceInfoSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprConfigInterfaceTransportSetInfo(
    hMprConfig: Windows.Win32.SystemServices.HANDLE,
    hRouterInterface: Windows.Win32.SystemServices.HANDLE,
    hRouterIfTransport: Windows.Win32.SystemServices.HANDLE,
    pInterfaceInfo: {"kind""Ptr","child":{"kind":"Byte"}},
    dwInterfaceInfoSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprConfigInterfaceTransportEnum(
    hMprConfig: Windows.Win32.SystemServices.HANDLE,
    hRouterInterface: Windows.Win32.SystemServices.HANDLE,
    dwLevel: {"kind":"UInt32"},
    lplpBuffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    dwPrefMaxLen: {"kind":"UInt32"},
    lpdwEntriesRead: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpdwTotalEntries: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpdwResumeHandle: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprConfigGetFriendlyName(
    hMprConfig: Windows.Win32.SystemServices.HANDLE,
    pszGuidName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwBufferSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprConfigGetGuidName(
    hMprConfig: Windows.Win32.SystemServices.HANDLE,
    pszFriendlyName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwBufferSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprConfigFilterGetInfo(
    hMprConfig: Windows.Win32.SystemServices.HANDLE,
    dwLevel: {"kind":"UInt32"},
    dwTransportId: {"kind":"UInt32"},
    lpBuffer: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprConfigFilterSetInfo(
    hMprConfig: Windows.Win32.SystemServices.HANDLE,
    dwLevel: {"kind":"UInt32"},
    dwTransportId: {"kind":"UInt32"},
    lpBuffer: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprInfoCreate(
    dwVersion: {"kind":"UInt32"},
    lplpNewHeader: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprInfoDelete(
    lpHeader: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprInfoRemoveAll(
    lpHeader: {"kind""Ptr","child":{"kind":"Void"}},
    lplpNewHeader: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprInfoDuplicate(
    lpHeader: {"kind""Ptr","child":{"kind":"Void"}},
    lplpNewHeader: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprInfoBlockAdd(
    lpHeader: {"kind""Ptr","child":{"kind":"Void"}},
    dwInfoType: {"kind":"UInt32"},
    dwItemSize: {"kind":"UInt32"},
    dwItemCount: {"kind":"UInt32"},
    lpItemData: {"kind""Ptr","child":{"kind":"Byte"}},
    lplpNewHeader: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprInfoBlockRemove(
    lpHeader: {"kind""Ptr","child":{"kind":"Void"}},
    dwInfoType: {"kind":"UInt32"},
    lplpNewHeader: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprInfoBlockSet(
    lpHeader: {"kind""Ptr","child":{"kind":"Void"}},
    dwInfoType: {"kind":"UInt32"},
    dwItemSize: {"kind":"UInt32"},
    dwItemCount: {"kind":"UInt32"},
    lpItemData: {"kind""Ptr","child":{"kind":"Byte"}},
    lplpNewHeader: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprInfoBlockFind(
    lpHeader: {"kind""Ptr","child":{"kind":"Void"}},
    dwInfoType: {"kind":"UInt32"},
    lpdwItemSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpdwItemCount: {"kind""Ptr","child":{"kind":"UInt32"}},
    lplpItemData: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "MPRAPI" fn MprInfoBlockQuerySize(
    lpHeader: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn MgmRegisterMProtocol(
    prpiInfo: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.ROUTING_PROTOCOL_CONFIG},
    dwProtocolId: {"kind":"UInt32"},
    dwComponentId: {"kind":"UInt32"},
    phProtocol: {"kind""Ptr","child":Windows.Win32.SystemServices.HANDLE},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn MgmDeRegisterMProtocol(
    hProtocol: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn MgmTakeInterfaceOwnership(
    hProtocol: Windows.Win32.SystemServices.HANDLE,
    dwIfIndex: {"kind":"UInt32"},
    dwIfNextHopAddr: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn MgmReleaseInterfaceOwnership(
    hProtocol: Windows.Win32.SystemServices.HANDLE,
    dwIfIndex: {"kind":"UInt32"},
    dwIfNextHopAddr: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn MgmGetProtocolOnInterface(
    dwIfIndex: {"kind":"UInt32"},
    dwIfNextHopAddr: {"kind":"UInt32"},
    pdwIfProtocolId: {"kind""Ptr","child":{"kind":"UInt32"}},
    pdwIfComponentId: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn MgmAddGroupMembershipEntry(
    hProtocol: Windows.Win32.SystemServices.HANDLE,
    dwSourceAddr: {"kind":"UInt32"},
    dwSourceMask: {"kind":"UInt32"},
    dwGroupAddr: {"kind":"UInt32"},
    dwGroupMask: {"kind":"UInt32"},
    dwIfIndex: {"kind":"UInt32"},
    dwIfNextHopIPAddr: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn MgmDeleteGroupMembershipEntry(
    hProtocol: Windows.Win32.SystemServices.HANDLE,
    dwSourceAddr: {"kind":"UInt32"},
    dwSourceMask: {"kind":"UInt32"},
    dwGroupAddr: {"kind":"UInt32"},
    dwGroupMask: {"kind":"UInt32"},
    dwIfIndex: {"kind":"UInt32"},
    dwIfNextHopIPAddr: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn MgmGetMfe(
    pimm: {"kind""Ptr","child":Windows.Win32.Mib.MIB_IPMCAST_MFE},
    pdwBufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    pbBuffer: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn MgmGetFirstMfe(
    pdwBufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    pbBuffer: {"kind""Ptr","child":{"kind":"Byte"}},
    pdwNumEntries: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn MgmGetNextMfe(
    pimmStart: {"kind""Ptr","child":Windows.Win32.Mib.MIB_IPMCAST_MFE},
    pdwBufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    pbBuffer: {"kind""Ptr","child":{"kind":"Byte"}},
    pdwNumEntries: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn MgmGetMfeStats(
    pimm: {"kind""Ptr","child":Windows.Win32.Mib.MIB_IPMCAST_MFE},
    pdwBufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    pbBuffer: {"kind""Ptr","child":{"kind":"Byte"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn MgmGetFirstMfeStats(
    pdwBufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    pbBuffer: {"kind""Ptr","child":{"kind":"Byte"}},
    pdwNumEntries: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn MgmGetNextMfeStats(
    pimmStart: {"kind""Ptr","child":Windows.Win32.Mib.MIB_IPMCAST_MFE},
    pdwBufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    pbBuffer: {"kind""Ptr","child":{"kind":"Byte"}},
    pdwNumEntries: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn MgmGroupEnumerationStart(
    hProtocol: Windows.Win32.SystemServices.HANDLE,
    metEnumType: Windows.Win32.RoutingAndRemoteAccessService.MGM_ENUM_TYPES,
    phEnumHandle: {"kind""Ptr","child":Windows.Win32.SystemServices.HANDLE},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn MgmGroupEnumerationGetNext(
    hEnum: Windows.Win32.SystemServices.HANDLE,
    pdwBufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    pbBuffer: {"kind""Ptr","child":{"kind":"Byte"}},
    pdwNumEntries: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn MgmGroupEnumerationEnd(
    hEnum: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmConvertNetAddressToIpv6AddressAndLength(
    pNetAddress: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_NET_ADDRESS},
    pAddress: {"kind""Ptr","child":Windows.Win32.WinSock.in6_addr},
    pLength: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwAddressSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmConvertIpv6AddressAndLengthToNetAddress(
    pNetAddress: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_NET_ADDRESS},
    Address: Windows.Win32.WinSock.in6_addr,
    dwLength: {"kind":"UInt32"},
    dwAddressSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmRegisterEntity(
    RtmEntityInfo: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_ENTITY_INFO},
    ExportMethods: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_ENTITY_EXPORT_METHODS},
    EventCallback: Windows.Win32.RoutingAndRemoteAccessService.RTM_EVENT_CALLBACK,
    ReserveOpaquePointer: Windows.Win32.SystemServices.BOOL,
    RtmRegProfile: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_REGN_PROFILE},
    RtmRegHandle: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmDeregisterEntity(
    RtmRegHandle: {"kind":"IntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmGetRegisteredEntities(
    RtmRegHandle: {"kind":"IntPtr"},
    NumEntities: {"kind""Ptr","child":{"kind":"UInt32"}},
    EntityHandles: {"kind""Ptr","child":{"kind":"IntPtr"}},
    EntityInfos: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_ENTITY_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmReleaseEntities(
    RtmRegHandle: {"kind":"IntPtr"},
    NumEntities: {"kind":"UInt32"},
    EntityHandles: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmLockDestination(
    RtmRegHandle: {"kind":"IntPtr"},
    DestHandle: {"kind":"IntPtr"},
    Exclusive: Windows.Win32.SystemServices.BOOL,
    LockDest: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmGetOpaqueInformationPointer(
    RtmRegHandle: {"kind":"IntPtr"},
    DestHandle: {"kind":"IntPtr"},
    OpaqueInfoPointer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmGetEntityMethods(
    RtmRegHandle: {"kind":"IntPtr"},
    EntityHandle: {"kind":"IntPtr"},
    NumMethods: {"kind""Ptr","child":{"kind":"UInt32"}},
    ExptMethods: Windows.Win32.RoutingAndRemoteAccessService.PRTM_ENTITY_EXPORT_METHOD,

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmInvokeMethod(
    RtmRegHandle: {"kind":"IntPtr"},
    EntityHandle: {"kind":"IntPtr"},
    Input: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_ENTITY_METHOD_INPUT},
    OutputSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    Output: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_ENTITY_METHOD_OUTPUT},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmBlockMethods(
    RtmRegHandle: {"kind":"IntPtr"},
    TargetHandle: Windows.Win32.SystemServices.HANDLE,
    TargetType: {"kind":"Byte"},
    BlockingFlag: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmGetEntityInfo(
    RtmRegHandle: {"kind":"IntPtr"},
    EntityHandle: {"kind":"IntPtr"},
    EntityInfo: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_ENTITY_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmGetDestInfo(
    RtmRegHandle: {"kind":"IntPtr"},
    DestHandle: {"kind":"IntPtr"},
    ProtocolId: {"kind":"UInt32"},
    TargetViews: {"kind":"UInt32"},
    DestInfo: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_DEST_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmGetRouteInfo(
    RtmRegHandle: {"kind":"IntPtr"},
    RouteHandle: {"kind":"IntPtr"},
    RouteInfo: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_ROUTE_INFO},
    DestAddress: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_NET_ADDRESS},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmGetNextHopInfo(
    RtmRegHandle: {"kind":"IntPtr"},
    NextHopHandle: {"kind":"IntPtr"},
    NextHopInfo: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_NEXTHOP_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmReleaseEntityInfo(
    RtmRegHandle: {"kind":"IntPtr"},
    EntityInfo: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_ENTITY_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmReleaseDestInfo(
    RtmRegHandle: {"kind":"IntPtr"},
    DestInfo: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_DEST_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmReleaseRouteInfo(
    RtmRegHandle: {"kind":"IntPtr"},
    RouteInfo: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_ROUTE_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmReleaseNextHopInfo(
    RtmRegHandle: {"kind":"IntPtr"},
    NextHopInfo: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_NEXTHOP_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmAddRouteToDest(
    RtmRegHandle: {"kind":"IntPtr"},
    RouteHandle: {"kind""Ptr","child":{"kind":"IntPtr"}},
    DestAddress: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_NET_ADDRESS},
    RouteInfo: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_ROUTE_INFO},
    TimeToLive: {"kind":"UInt32"},
    RouteListHandle: {"kind":"IntPtr"},
    NotifyType: {"kind":"UInt32"},
    NotifyHandle: {"kind":"IntPtr"},
    ChangeFlags: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmDeleteRouteToDest(
    RtmRegHandle: {"kind":"IntPtr"},
    RouteHandle: {"kind":"IntPtr"},
    ChangeFlags: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmHoldDestination(
    RtmRegHandle: {"kind":"IntPtr"},
    DestHandle: {"kind":"IntPtr"},
    TargetViews: {"kind":"UInt32"},
    HoldTime: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmGetRoutePointer(
    RtmRegHandle: {"kind":"IntPtr"},
    RouteHandle: {"kind":"IntPtr"},
    RoutePointer: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_ROUTE_INFO}},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmLockRoute(
    RtmRegHandle: {"kind":"IntPtr"},
    RouteHandle: {"kind":"IntPtr"},
    Exclusive: Windows.Win32.SystemServices.BOOL,
    LockRoute: Windows.Win32.SystemServices.BOOL,
    RoutePointer: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_ROUTE_INFO}},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmUpdateAndUnlockRoute(
    RtmRegHandle: {"kind":"IntPtr"},
    RouteHandle: {"kind":"IntPtr"},
    TimeToLive: {"kind":"UInt32"},
    RouteListHandle: {"kind":"IntPtr"},
    NotifyType: {"kind":"UInt32"},
    NotifyHandle: {"kind":"IntPtr"},
    ChangeFlags: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmGetExactMatchDestination(
    RtmRegHandle: {"kind":"IntPtr"},
    DestAddress: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_NET_ADDRESS},
    ProtocolId: {"kind":"UInt32"},
    TargetViews: {"kind":"UInt32"},
    DestInfo: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_DEST_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmGetMostSpecificDestination(
    RtmRegHandle: {"kind":"IntPtr"},
    DestAddress: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_NET_ADDRESS},
    ProtocolId: {"kind":"UInt32"},
    TargetViews: {"kind":"UInt32"},
    DestInfo: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_DEST_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmGetLessSpecificDestination(
    RtmRegHandle: {"kind":"IntPtr"},
    DestHandle: {"kind":"IntPtr"},
    ProtocolId: {"kind":"UInt32"},
    TargetViews: {"kind":"UInt32"},
    DestInfo: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_DEST_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmGetExactMatchRoute(
    RtmRegHandle: {"kind":"IntPtr"},
    DestAddress: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_NET_ADDRESS},
    MatchingFlags: {"kind":"UInt32"},
    RouteInfo: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_ROUTE_INFO},
    InterfaceIndex: {"kind":"UInt32"},
    TargetViews: {"kind":"UInt32"},
    RouteHandle: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmIsBestRoute(
    RtmRegHandle: {"kind":"IntPtr"},
    RouteHandle: {"kind":"IntPtr"},
    BestInViews: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmAddNextHop(
    RtmRegHandle: {"kind":"IntPtr"},
    NextHopInfo: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_NEXTHOP_INFO},
    NextHopHandle: {"kind""Ptr","child":{"kind":"IntPtr"}},
    ChangeFlags: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmFindNextHop(
    RtmRegHandle: {"kind":"IntPtr"},
    NextHopInfo: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_NEXTHOP_INFO},
    NextHopHandle: {"kind""Ptr","child":{"kind":"IntPtr"}},
    NextHopPointer: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_NEXTHOP_INFO}},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmDeleteNextHop(
    RtmRegHandle: {"kind":"IntPtr"},
    NextHopHandle: {"kind":"IntPtr"},
    NextHopInfo: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_NEXTHOP_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmGetNextHopPointer(
    RtmRegHandle: {"kind":"IntPtr"},
    NextHopHandle: {"kind":"IntPtr"},
    NextHopPointer: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_NEXTHOP_INFO}},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmLockNextHop(
    RtmRegHandle: {"kind":"IntPtr"},
    NextHopHandle: {"kind":"IntPtr"},
    Exclusive: Windows.Win32.SystemServices.BOOL,
    LockNextHop: Windows.Win32.SystemServices.BOOL,
    NextHopPointer: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_NEXTHOP_INFO}},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmCreateDestEnum(
    RtmRegHandle: {"kind":"IntPtr"},
    TargetViews: {"kind":"UInt32"},
    EnumFlags: {"kind":"UInt32"},
    NetAddress: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_NET_ADDRESS},
    ProtocolId: {"kind":"UInt32"},
    RtmEnumHandle: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmGetEnumDests(
    RtmRegHandle: {"kind":"IntPtr"},
    EnumHandle: {"kind":"IntPtr"},
    NumDests: {"kind""Ptr","child":{"kind":"UInt32"}},
    DestInfos: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_DEST_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmReleaseDests(
    RtmRegHandle: {"kind":"IntPtr"},
    NumDests: {"kind":"UInt32"},
    DestInfos: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_DEST_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmCreateRouteEnum(
    RtmRegHandle: {"kind":"IntPtr"},
    DestHandle: {"kind":"IntPtr"},
    TargetViews: {"kind":"UInt32"},
    EnumFlags: {"kind":"UInt32"},
    StartDest: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_NET_ADDRESS},
    MatchingFlags: {"kind":"UInt32"},
    CriteriaRoute: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_ROUTE_INFO},
    CriteriaInterface: {"kind":"UInt32"},
    RtmEnumHandle: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmGetEnumRoutes(
    RtmRegHandle: {"kind":"IntPtr"},
    EnumHandle: {"kind":"IntPtr"},
    NumRoutes: {"kind""Ptr","child":{"kind":"UInt32"}},
    RouteHandles: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmReleaseRoutes(
    RtmRegHandle: {"kind":"IntPtr"},
    NumRoutes: {"kind":"UInt32"},
    RouteHandles: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmCreateNextHopEnum(
    RtmRegHandle: {"kind":"IntPtr"},
    EnumFlags: {"kind":"UInt32"},
    NetAddress: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_NET_ADDRESS},
    RtmEnumHandle: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmGetEnumNextHops(
    RtmRegHandle: {"kind":"IntPtr"},
    EnumHandle: {"kind":"IntPtr"},
    NumNextHops: {"kind""Ptr","child":{"kind":"UInt32"}},
    NextHopHandles: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmReleaseNextHops(
    RtmRegHandle: {"kind":"IntPtr"},
    NumNextHops: {"kind":"UInt32"},
    NextHopHandles: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmDeleteEnumHandle(
    RtmRegHandle: {"kind":"IntPtr"},
    EnumHandle: {"kind":"IntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmRegisterForChangeNotification(
    RtmRegHandle: {"kind":"IntPtr"},
    TargetViews: {"kind":"UInt32"},
    NotifyFlags: {"kind":"UInt32"},
    NotifyContext: {"kind""Ptr","child":{"kind":"Void"}},
    NotifyHandle: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmGetChangedDests(
    RtmRegHandle: {"kind":"IntPtr"},
    NotifyHandle: {"kind":"IntPtr"},
    NumDests: {"kind""Ptr","child":{"kind":"UInt32"}},
    ChangedDests: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_DEST_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmReleaseChangedDests(
    RtmRegHandle: {"kind":"IntPtr"},
    NotifyHandle: {"kind":"IntPtr"},
    NumDests: {"kind":"UInt32"},
    ChangedDests: {"kind""Ptr","child":Windows.Win32.RoutingAndRemoteAccessService.RTM_DEST_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmIgnoreChangedDests(
    RtmRegHandle: {"kind":"IntPtr"},
    NotifyHandle: {"kind":"IntPtr"},
    NumDests: {"kind":"UInt32"},
    ChangedDests: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmGetChangeStatus(
    RtmRegHandle: {"kind":"IntPtr"},
    NotifyHandle: {"kind":"IntPtr"},
    DestHandle: {"kind":"IntPtr"},
    ChangeStatus: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmMarkDestForChangeNotification(
    RtmRegHandle: {"kind":"IntPtr"},
    NotifyHandle: {"kind":"IntPtr"},
    DestHandle: {"kind":"IntPtr"},
    MarkDest: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmIsMarkedForChangeNotification(
    RtmRegHandle: {"kind":"IntPtr"},
    NotifyHandle: {"kind":"IntPtr"},
    DestHandle: {"kind":"IntPtr"},
    DestMarked: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmDeregisterFromChangeNotification(
    RtmRegHandle: {"kind":"IntPtr"},
    NotifyHandle: {"kind":"IntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmCreateRouteList(
    RtmRegHandle: {"kind":"IntPtr"},
    RouteListHandle: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmInsertInRouteList(
    RtmRegHandle: {"kind":"IntPtr"},
    RouteListHandle: {"kind":"IntPtr"},
    NumRoutes: {"kind":"UInt32"},
    RouteHandles: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmCreateRouteListEnum(
    RtmRegHandle: {"kind":"IntPtr"},
    RouteListHandle: {"kind":"IntPtr"},
    RtmEnumHandle: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmGetListEnumRoutes(
    RtmRegHandle: {"kind":"IntPtr"},
    EnumHandle: {"kind":"IntPtr"},
    NumRoutes: {"kind""Ptr","child":{"kind":"UInt32"}},
    RouteHandles: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmDeleteRouteList(
    RtmRegHandle: {"kind":"IntPtr"},
    RouteListHandle: {"kind":"IntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "rtm" fn RtmReferenceHandles(
    RtmRegHandle: {"kind":"IntPtr"},
    NumHandles: {"kind":"UInt32"},
    RtmHandles: {"kind""Ptr","child":Windows.Win32.SystemServices.HANDLE},
],

"unicode_aliases": [
     "tagRASCONN"
     "tagRASCONNSTATUS"
     "tagRASDIALPARAMS"
     "tagRASENTRYNAME"
     "tagRASAMB"
     "tagRASPPPNBF"
     "tagRASPPPIP"
     "tagRASPPPLCP"
     "tagRASDEVINFO"
     "tagRASENTRY"
     "RASADFUNC"
     "tagRASSUBENTRY"
     "tagRASCREDENTIALS"
     "tagRASAUTODIALENTRY"
     "tagRASEAPUSERIDENTITY"
     "RASPBDLGFUNC"
     "tagRASNOUSER"
     "tagRASPBDLG"
     "tagRASENTRYDLG"
     "RasDial"
     "RasEnumConnections"
     "RasEnumEntries"
     "RasGetConnectStatus"
     "RasGetErrorString"
     "RasHangUp"
     "RasGetProjectionInfo"
     "RasCreatePhonebookEntry"
     "RasEditPhonebookEntry"
     "RasSetEntryDialParams"
     "RasGetEntryDialParams"
     "RasEnumDevices"
     "RasGetCountryInfo"
     "RasGetEntryProperties"
     "RasSetEntryProperties"
     "RasRenameEntry"
     "RasDeleteEntry"
     "RasValidateEntryName"
     "RasConnectionNotification"
     "RasGetSubEntryHandle"
     "RasGetCredentials"
     "RasSetCredentials"
     "RasGetSubEntryProperties"
     "RasSetSubEntryProperties"
     "RasGetAutodialAddress"
     "RasSetAutodialAddress"
     "RasEnumAutodialAddresses"
     "RasGetAutodialEnable"
     "RasSetAutodialEnable"
     "RasGetAutodialParam"
     "RasSetAutodialParam"
     "RasGetEapUserData"
     "RasSetEapUserData"
     "RasGetCustomAuthData"
     "RasSetCustomAuthData"
     "RasGetEapUserIdentity"
     "RasFreeEapUserIdentity"
     "RasDeleteSubEntry"
     "RasPhonebookDlg"
     "RasEntryDlg"
     "RasDialDlg"
]}
