{
"constants": [
     {
         "name": "GPFIDL_DEFAULT"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "GPFIDL_ALTNAME"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "GPFIDL_UNCPRINTER"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "ISHCUTCMDID_DOWNLOADICON"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "ISHCUTCMDID_INTSHORTCUTCREATE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "ISHCUTCMDID_COMMITHISTORY"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "ISHCUTCMDID_SETUSERAWURL"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "SFBID_PIDLCHANGED"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "DBCID_EMPTY"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "DBCID_ONDRAG"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "DBCID_CLSIDOFBAR"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "DBCID_RESIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "DBCID_GETBAR"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "BMICON_LARGE"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "BMICON_SMALL"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "ASSOCF_NONE"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "ASSOCF_INIT_NOREMAPCLSID"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "ASSOCF_INIT_BYEXENAME"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "ASSOCF_OPEN_BYEXENAME"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "ASSOCF_INIT_DEFAULTTOSTAR"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "ASSOCF_INIT_DEFAULTTOFOLDER"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "ASSOCF_NOUSERSETTINGS"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "ASSOCF_NOTRUNCATE"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "ASSOCF_VERIFY"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "ASSOCF_REMAPRUNDLL"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "ASSOCF_NOFIXUPS"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "ASSOCF_IGNOREBASECLASS"
        ,"type": {"kind":"Int32"}
        ,"value": 512
    }
    ,{
         "name": "ASSOCF_INIT_IGNOREUNKNOWN"
        ,"type": {"kind":"Int32"}
        ,"value": 1024
    }
    ,{
         "name": "ASSOCF_INIT_FIXED_PROGID"
        ,"type": {"kind":"Int32"}
        ,"value": 2048
    }
    ,{
         "name": "ASSOCF_IS_PROTOCOL"
        ,"type": {"kind":"Int32"}
        ,"value": 4096
    }
    ,{
         "name": "ASSOCF_INIT_FOR_FILE"
        ,"type": {"kind":"Int32"}
        ,"value": 8192
    }
    ,{
         "name": "ASSOCF_IS_FULL_URI"
        ,"type": {"kind":"Int32"}
        ,"value": 16384
    }
    ,{
         "name": "ASSOCF_PER_MACHINE_ONLY"
        ,"type": {"kind":"Int32"}
        ,"value": 32768
    }
    ,{
         "name": "ASSOCF_APP_TO_APP"
        ,"type": {"kind":"Int32"}
        ,"value": 65536
    }
    ,{
         "name": "CTF_INSIST"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "CTF_THREAD_REF"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "CTF_PROCESS_REF"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "CTF_COINIT_STA"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "CTF_COINIT"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "CTF_FREELIBANDEXIT"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "CTF_REF_COUNTED"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "CTF_WAIT_ALLOWCOM"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "CTF_UNUSED"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "CTF_INHERITWOW64"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "CTF_WAIT_NO_REENTRANCY"
        ,"type": {"kind":"Int32"}
        ,"value": 512
    }
    ,{
         "name": "CTF_KEYBOARD_LOCALE"
        ,"type": {"kind":"Int32"}
        ,"value": 1024
    }
    ,{
         "name": "CTF_OLEINITIALIZE"
        ,"type": {"kind":"Int32"}
        ,"value": 2048
    }
    ,{
         "name": "CTF_COINIT_MTA"
        ,"type": {"kind":"Int32"}
        ,"value": 4096
    }
    ,{
         "name": "CTF_NOADDREFLIB"
        ,"type": {"kind":"Int32"}
        ,"value": 8192
    }
],

"types_definitions": [
// --------------------------------------------------------
// Type: INotifyReplica
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const INotifyReplica = *opaque{
    // TODO: Method 'YouAreAReplica'
};
// --------------------------------------------------------
// Type: HELPINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HELPINFO = extern struct {
    cbSize: {"kind":"UInt32"},
    iContextType: {"kind":"Int32"},
    iCtrlId: {"kind":"Int32"},
    hItemHandle: Windows.Win32.SystemServices.HANDLE,
    dwContextId: {"kind":"UIntPtr"},
    MousePos: Windows.Win32.DisplayDevices.POINT,
};
// --------------------------------------------------------
// Type: MULTIKEYHELPA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MULTIKEYHELPA = extern struct {
    mkSize: {"kind":"UInt32"},
    mkKeylist: {"kind":"SByte"},
    szKeyphrase: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: MULTIKEYHELPW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MULTIKEYHELPW = extern struct {
    mkSize: {"kind":"UInt32"},
    mkKeylist: {"kind":"UInt16"},
    szKeyphrase: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: HELPWININFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HELPWININFOA = extern struct {
    wStructSize: {"kind":"Int32"},
    x: {"kind":"Int32"},
    y: {"kind":"Int32"},
    dx: {"kind":"Int32"},
    dy: {"kind":"Int32"},
    wMax: {"kind":"Int32"},
    rgchMember: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: HELPWININFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HELPWININFOW = extern struct {
    wStructSize: {"kind":"Int32"},
    x: {"kind":"Int32"},
    y: {"kind":"Int32"},
    dx: {"kind":"Int32"},
    dy: {"kind":"Int32"},
    wMax: {"kind":"Int32"},
    rgchMember: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SOFTDISTINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SOFTDISTINFO = extern struct {
    cbSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    dwAdState: {"kind":"UInt32"},
    szTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    szAbstract: {"kind""Ptr","child":{"kind":"UInt16"}},
    szHREF: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwInstalledVersionMS: {"kind":"UInt32"},
    dwInstalledVersionLS: {"kind":"UInt32"},
    dwUpdateVersionMS: {"kind":"UInt32"},
    dwUpdateVersionLS: {"kind":"UInt32"},
    dwAdvertisedVersionMS: {"kind":"UInt32"},
    dwAdvertisedVersionLS: {"kind":"UInt32"},
    dwReserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: HDROP__
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const HDROP__ = *opaque{
};
// --------------------------------------------------------
// Type: DRAGINFOA
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const DRAGINFOA = *opaque{
};
// --------------------------------------------------------
// Type: DRAGINFOW
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const DRAGINFOW = *opaque{
};
// --------------------------------------------------------
// Type: APPBARDATA
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const APPBARDATA = *opaque{
};
// --------------------------------------------------------
// Type: SHFILEOPSTRUCTA
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SHFILEOPSTRUCTA = *opaque{
};
// --------------------------------------------------------
// Type: SHFILEOPSTRUCTW
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SHFILEOPSTRUCTW = *opaque{
};
// --------------------------------------------------------
// Type: SHNAMEMAPPINGA
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SHNAMEMAPPINGA = *opaque{
};
// --------------------------------------------------------
// Type: SHNAMEMAPPINGW
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SHNAMEMAPPINGW = *opaque{
};
// --------------------------------------------------------
// Type: SHELLEXECUTEINFOA
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SHELLEXECUTEINFOA = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: SHELLEXECUTEINFOW
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SHELLEXECUTEINFOW = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: SHCREATEPROCESSINFOW
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SHCREATEPROCESSINFOW = *opaque{
};
// --------------------------------------------------------
// Type: ASSOCCLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ASSOCCLASS = *opaque{
};
// --------------------------------------------------------
// Type: ASSOCIATIONELEMENT
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const ASSOCIATIONELEMENT = *opaque{
};
// --------------------------------------------------------
// Type: SHQUERYRBINFO
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SHQUERYRBINFO = *opaque{
};
// --------------------------------------------------------
// Type: QUERY_USER_NOTIFICATION_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QUERY_USER_NOTIFICATION_STATE = *opaque{
};
// --------------------------------------------------------
// Type: NOTIFYICONDATAA
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const NOTIFYICONDATAA = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: NOTIFYICONDATAW
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const NOTIFYICONDATAW = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: NOTIFYICONIDENTIFIER
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const NOTIFYICONIDENTIFIER = *opaque{
};
// --------------------------------------------------------
// Type: SHFILEINFOA
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SHFILEINFOA = *opaque{
};
// --------------------------------------------------------
// Type: SHFILEINFOW
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SHFILEINFOW = *opaque{
};
// --------------------------------------------------------
// Type: SHSTOCKICONINFO
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SHSTOCKICONINFO = *opaque{
};
// --------------------------------------------------------
// Type: SHSTOCKICONID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SHSTOCKICONID = *opaque{
};
// --------------------------------------------------------
// Type: OPEN_PRINTER_PROPS_INFOA
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const OPEN_PRINTER_PROPS_INFOA = *opaque{
};
// --------------------------------------------------------
// Type: OPEN_PRINTER_PROPS_INFOW
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const OPEN_PRINTER_PROPS_INFOW = *opaque{
};
// --------------------------------------------------------
// Type: PFNCANSHAREFOLDERW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNCANSHAREFOLDERW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNSHOWSHAREFOLDERUIW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNSHOWSHAREFOLDERUIW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: IMarkupCallback
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IMarkupCallback = opaque {
};
// --------------------------------------------------------
// Type: IControlMarkup
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IControlMarkup = opaque {
};
// --------------------------------------------------------
// Type: QueryCancelAutoPlay
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const QueryCancelAutoPlay = opaque {
};
// --------------------------------------------------------
// Type: TimeCategorizer
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const TimeCategorizer = opaque {
};
// --------------------------------------------------------
// Type: AlphabeticalCategorizer
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const AlphabeticalCategorizer = opaque {
};
// --------------------------------------------------------
// Type: MergedCategorizer
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const MergedCategorizer = opaque {
};
// --------------------------------------------------------
// Type: ImageProperties
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ImageProperties = opaque {
};
// --------------------------------------------------------
// Type: CDBurn
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CDBurn = opaque {
};
// --------------------------------------------------------
// Type: StartMenuPin
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const StartMenuPin = opaque {
};
// --------------------------------------------------------
// Type: WebWizardHost
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WebWizardHost = opaque {
};
// --------------------------------------------------------
// Type: PublishDropTarget
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const PublishDropTarget = opaque {
};
// --------------------------------------------------------
// Type: PublishingWizard
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const PublishingWizard = opaque {
};
// --------------------------------------------------------
// Type: InternetPrintOrdering
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const InternetPrintOrdering = opaque {
};
// --------------------------------------------------------
// Type: FolderViewHost
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const FolderViewHost = opaque {
};
// --------------------------------------------------------
// Type: ExplorerBrowser
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ExplorerBrowser = opaque {
};
// --------------------------------------------------------
// Type: ImageRecompress
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ImageRecompress = opaque {
};
// --------------------------------------------------------
// Type: TrayBandSiteService
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const TrayBandSiteService = opaque {
};
// --------------------------------------------------------
// Type: TrayDeskBand
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const TrayDeskBand = opaque {
};
// --------------------------------------------------------
// Type: AttachmentServices
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const AttachmentServices = opaque {
};
// --------------------------------------------------------
// Type: DocPropShellExtension
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DocPropShellExtension = opaque {
};
// --------------------------------------------------------
// Type: FSCopyHandler
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const FSCopyHandler = opaque {
};
// --------------------------------------------------------
// Type: PreviousVersions
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const PreviousVersions = opaque {
};
// --------------------------------------------------------
// Type: NamespaceTreeControl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const NamespaceTreeControl = opaque {
};
// --------------------------------------------------------
// Type: IENamespaceTreeControl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IENamespaceTreeControl = opaque {
};
// --------------------------------------------------------
// Type: ApplicationAssociationRegistrationUI
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ApplicationAssociationRegistrationUI = opaque {
};
// --------------------------------------------------------
// Type: DesktopGadget
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DesktopGadget = opaque {
};
// --------------------------------------------------------
// Type: AccessibilityDockingService
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const AccessibilityDockingService = opaque {
};
// --------------------------------------------------------
// Type: ExecuteFolder
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ExecuteFolder = opaque {
};
// --------------------------------------------------------
// Type: VirtualDesktopManager
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const VirtualDesktopManager = opaque {
};
// --------------------------------------------------------
// Type: StorageProviderBanners
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const StorageProviderBanners = opaque {
};
// --------------------------------------------------------
// Type: SHITEMID
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SHITEMID = *opaque{
};
// --------------------------------------------------------
// Type: ITEMIDLIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ITEMIDLIST = extern struct {
    mkid: Windows.Win32.Shell.SHITEMID,
};
// --------------------------------------------------------
// Type: STRRET_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STRRET_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: STRRET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STRRET = extern struct {
    uType: {"kind":"UInt32"},
    Anonymous: Windows.Win32.Shell.STRRET+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: SHELLDETAILS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SHELLDETAILS = *opaque{
};
// --------------------------------------------------------
// Type: PERCEIVED
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PERCEIVED = *opaque{
};
// --------------------------------------------------------
// Type: COMDLG_FILTERSPEC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COMDLG_FILTERSPEC = extern struct {
    pszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszSpec: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SHCOLSTATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SHCOLSTATE = *opaque{
};
// --------------------------------------------------------
// Type: DEVICE_SCALE_FACTOR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DEVICE_SCALE_FACTOR = *opaque{
};
// --------------------------------------------------------
// Type: IObjectArray
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IObjectArray = *opaque{
    // TODO: Method 'GetCount'
    // TODO: Method 'GetAt'
};
// --------------------------------------------------------
// Type: IObjectCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IObjectCollection = *opaque{
    // TODO: Method 'AddObject'
    // TODO: Method 'AddFromArray'
    // TODO: Method 'RemoveObjectAt'
    // TODO: Method 'Clear'
};
// --------------------------------------------------------
// Type: DesktopWallpaper
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DesktopWallpaper = opaque {
};
// --------------------------------------------------------
// Type: ShellDesktop
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ShellDesktop = opaque {
};
// --------------------------------------------------------
// Type: ShellFSFolder
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ShellFSFolder = opaque {
};
// --------------------------------------------------------
// Type: NetworkPlaces
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const NetworkPlaces = opaque {
};
// --------------------------------------------------------
// Type: ShellLink
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ShellLink = opaque {
};
// --------------------------------------------------------
// Type: DriveSizeCategorizer
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DriveSizeCategorizer = opaque {
};
// --------------------------------------------------------
// Type: DriveTypeCategorizer
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DriveTypeCategorizer = opaque {
};
// --------------------------------------------------------
// Type: FreeSpaceCategorizer
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const FreeSpaceCategorizer = opaque {
};
// --------------------------------------------------------
// Type: SizeCategorizer
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SizeCategorizer = opaque {
};
// --------------------------------------------------------
// Type: PropertiesUI
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const PropertiesUI = opaque {
};
// --------------------------------------------------------
// Type: UserNotification
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const UserNotification = opaque {
};
// --------------------------------------------------------
// Type: TaskbarList
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const TaskbarList = opaque {
};
// --------------------------------------------------------
// Type: ShellItem
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ShellItem = opaque {
};
// --------------------------------------------------------
// Type: NamespaceWalker
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const NamespaceWalker = opaque {
};
// --------------------------------------------------------
// Type: FileOperation
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const FileOperation = opaque {
};
// --------------------------------------------------------
// Type: FileOpenDialog
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const FileOpenDialog = opaque {
};
// --------------------------------------------------------
// Type: FileSaveDialog
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const FileSaveDialog = opaque {
};
// --------------------------------------------------------
// Type: KnownFolderManager
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const KnownFolderManager = opaque {
};
// --------------------------------------------------------
// Type: SharingConfigurationManager
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SharingConfigurationManager = opaque {
};
// --------------------------------------------------------
// Type: NetworkConnections
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const NetworkConnections = opaque {
};
// --------------------------------------------------------
// Type: ScheduledTasks
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ScheduledTasks = opaque {
};
// --------------------------------------------------------
// Type: ApplicationAssociationRegistration
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ApplicationAssociationRegistration = opaque {
};
// --------------------------------------------------------
// Type: SearchFolderItemFactory
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SearchFolderItemFactory = opaque {
};
// --------------------------------------------------------
// Type: OpenControlPanel
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const OpenControlPanel = opaque {
};
// --------------------------------------------------------
// Type: MailRecipient
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const MailRecipient = opaque {
};
// --------------------------------------------------------
// Type: NetworkExplorerFolder
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const NetworkExplorerFolder = opaque {
};
// --------------------------------------------------------
// Type: DestinationList
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DestinationList = opaque {
};
// --------------------------------------------------------
// Type: ApplicationDestinations
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ApplicationDestinations = opaque {
};
// --------------------------------------------------------
// Type: ApplicationDocumentLists
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ApplicationDocumentLists = opaque {
};
// --------------------------------------------------------
// Type: HomeGroup
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const HomeGroup = opaque {
};
// --------------------------------------------------------
// Type: ShellLibrary
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ShellLibrary = opaque {
};
// --------------------------------------------------------
// Type: AppStartupLink
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const AppStartupLink = opaque {
};
// --------------------------------------------------------
// Type: EnumerableObjectCollection
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const EnumerableObjectCollection = opaque {
};
// --------------------------------------------------------
// Type: FrameworkInputPane
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const FrameworkInputPane = opaque {
};
// --------------------------------------------------------
// Type: DefFolderMenu
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DefFolderMenu = opaque {
};
// --------------------------------------------------------
// Type: AppVisibility
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const AppVisibility = opaque {
};
// --------------------------------------------------------
// Type: AppShellVerbHandler
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const AppShellVerbHandler = opaque {
};
// --------------------------------------------------------
// Type: ExecuteUnknown
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ExecuteUnknown = opaque {
};
// --------------------------------------------------------
// Type: PackageDebugSettings
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const PackageDebugSettings = opaque {
};
// --------------------------------------------------------
// Type: SuspensionDependencyManager
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SuspensionDependencyManager = opaque {
};
// --------------------------------------------------------
// Type: ApplicationActivationManager
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ApplicationActivationManager = opaque {
};
// --------------------------------------------------------
// Type: ApplicationDesignModeSettings
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ApplicationDesignModeSettings = opaque {
};
// --------------------------------------------------------
// Type: CMINVOKECOMMANDINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMINVOKECOMMANDINFO = extern struct {
    cbSize: {"kind":"UInt32"},
    fMask: {"kind":"UInt32"},
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    lpVerb: {"kind""Ptr","child":{"kind":"SByte"}},
    lpParameters: {"kind""Ptr","child":{"kind":"SByte"}},
    lpDirectory: {"kind""Ptr","child":{"kind":"SByte"}},
    nShow: {"kind":"Int32"},
    dwHotKey: {"kind":"UInt32"},
    hIcon: Windows.Win32.SystemServices.HANDLE,
};
// --------------------------------------------------------
// Type: CMINVOKECOMMANDINFOEX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMINVOKECOMMANDINFOEX = extern struct {
    cbSize: {"kind":"UInt32"},
    fMask: {"kind":"UInt32"},
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    lpVerb: {"kind""Ptr","child":{"kind":"SByte"}},
    lpParameters: {"kind""Ptr","child":{"kind":"SByte"}},
    lpDirectory: {"kind""Ptr","child":{"kind":"SByte"}},
    nShow: {"kind":"Int32"},
    dwHotKey: {"kind":"UInt32"},
    hIcon: Windows.Win32.SystemServices.HANDLE,
    lpTitle: {"kind""Ptr","child":{"kind":"SByte"}},
    lpVerbW: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpParametersW: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpDirectoryW: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpTitleW: {"kind""Ptr","child":{"kind":"UInt16"}},
    ptInvoke: Windows.Win32.DisplayDevices.POINT,
};
// --------------------------------------------------------
// Type: IContextMenu
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IContextMenu = *opaque{
    // TODO: Method 'QueryContextMenu'
    // TODO: Method 'InvokeCommand'
    // TODO: Method 'GetCommandString'
};
// --------------------------------------------------------
// Type: IContextMenu2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IContextMenu2 = *opaque{
    // TODO: Method 'HandleMenuMsg'
};
// --------------------------------------------------------
// Type: IContextMenu3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IContextMenu3 = *opaque{
    // TODO: Method 'HandleMenuMsg2'
};
// --------------------------------------------------------
// Type: IExecuteCommand
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IExecuteCommand = *opaque{
    // TODO: Method 'SetKeyState'
    // TODO: Method 'SetParameters'
    // TODO: Method 'SetPosition'
    // TODO: Method 'SetShowWindow'
    // TODO: Method 'SetNoShowUI'
    // TODO: Method 'SetDirectory'
    // TODO: Method 'Execute'
};
// --------------------------------------------------------
// Type: IPersistFolder
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPersistFolder = *opaque{
    // TODO: Method 'Initialize'
};
// --------------------------------------------------------
// Type: IRunnableTask
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRunnableTask = *opaque{
    // TODO: Method 'Run'
    // TODO: Method 'Kill'
    // TODO: Method 'Suspend'
    // TODO: Method 'Resume'
    // TODO: Method 'IsRunning'
};
// --------------------------------------------------------
// Type: IShellTaskScheduler
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellTaskScheduler = *opaque{
    // TODO: Method 'AddTask'
    // TODO: Method 'RemoveTasks'
    // TODO: Method 'CountTasks'
    // TODO: Method 'Status'
};
// --------------------------------------------------------
// Type: IPersistFolder2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPersistFolder2 = *opaque{
    // TODO: Method 'GetCurFolder'
};
// --------------------------------------------------------
// Type: PERSIST_FOLDER_TARGET_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PERSIST_FOLDER_TARGET_INFO = extern struct {
    pidlTargetFolder: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    szTargetParsingName: {"kind":"Array","child": {"kind":"UInt16"}},
    szNetworkProvider: {"kind":"Array","child": {"kind":"UInt16"}},
    dwAttributes: {"kind":"UInt32"},
    csidl: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: IPersistFolder3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPersistFolder3 = *opaque{
    // TODO: Method 'InitializeEx'
    // TODO: Method 'GetFolderTargetInfo'
};
// --------------------------------------------------------
// Type: IPersistIDList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPersistIDList = *opaque{
    // TODO: Method 'SetIDList'
    // TODO: Method 'GetIDList'
};
// --------------------------------------------------------
// Type: IEnumIDList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumIDList = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IEnumFullIDList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumFullIDList = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: _SHGDNF
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _SHGDNF = *opaque{
};
// --------------------------------------------------------
// Type: _SHCONTF
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _SHCONTF = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_PROVIDER_FILE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_PROVIDER_FILE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: MERGE_UPDATE_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MERGE_UPDATE_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: IFileSyncMergeHandler
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFileSyncMergeHandler = *opaque{
    // TODO: Method 'Merge'
    // TODO: Method 'ShowResolveConflictUIAsync'
};
// --------------------------------------------------------
// Type: FOLDER_ENUM_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FOLDER_ENUM_MODE = *opaque{
};
// --------------------------------------------------------
// Type: IObjectWithFolderEnumMode
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IObjectWithFolderEnumMode = *opaque{
    // TODO: Method 'SetMode'
    // TODO: Method 'GetMode'
};
// --------------------------------------------------------
// Type: IParseAndCreateItem
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IParseAndCreateItem = *opaque{
    // TODO: Method 'SetItem'
    // TODO: Method 'GetItem'
};
// --------------------------------------------------------
// Type: IShellFolder
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellFolder = *opaque{
    // TODO: Method 'ParseDisplayName'
    // TODO: Method 'EnumObjects'
    // TODO: Method 'BindToObject'
    // TODO: Method 'BindToStorage'
    // TODO: Method 'CompareIDs'
    // TODO: Method 'CreateViewObject'
    // TODO: Method 'GetAttributesOf'
    // TODO: Method 'GetUIObjectOf'
    // TODO: Method 'GetDisplayNameOf'
    // TODO: Method 'SetNameOf'
};
// --------------------------------------------------------
// Type: EXTRASEARCH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EXTRASEARCH = extern struct {
    guidSearch: Guid,
    wszFriendlyName: {"kind":"Array","child": {"kind":"UInt16"}},
    wszUrl: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: IEnumExtraSearch
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumExtraSearch = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IShellFolder2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellFolder2 = *opaque{
    // TODO: Method 'GetDefaultSearchGUID'
    // TODO: Method 'EnumSearches'
    // TODO: Method 'GetDefaultColumn'
    // TODO: Method 'GetDefaultColumnState'
    // TODO: Method 'GetDetailsEx'
    // TODO: Method 'GetDetailsOf'
    // TODO: Method 'MapColumnToSCID'
};
// --------------------------------------------------------
// Type: FOLDERFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FOLDERFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: FOLDERVIEWMODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FOLDERVIEWMODE = *opaque{
};
// --------------------------------------------------------
// Type: FOLDERLOGICALVIEWMODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FOLDERLOGICALVIEWMODE = *opaque{
};
// --------------------------------------------------------
// Type: FOLDERSETTINGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FOLDERSETTINGS = extern struct {
    ViewMode: {"kind":"UInt32"},
    fFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: _SVSIF
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _SVSIF = *opaque{
};
// --------------------------------------------------------
// Type: _SVGIO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _SVGIO = *opaque{
};
// --------------------------------------------------------
// Type: SVUIA_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SVUIA_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: LPFNSVADDPROPSHEETPAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFNSVADDPROPSHEETPAGE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: IShellView
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellView = *opaque{
    // TODO: Method 'TranslateAcceleratorA'
    // TODO: Method 'EnableModeless'
    // TODO: Method 'UIActivate'
    // TODO: Method 'Refresh'
    // TODO: Method 'CreateViewWindow'
    // TODO: Method 'DestroyViewWindow'
    // TODO: Method 'GetCurrentInfo'
    // TODO: Method 'AddPropertySheetPages'
    // TODO: Method 'SaveViewState'
    // TODO: Method 'SelectItem'
    // TODO: Method 'GetItemObject'
};
// --------------------------------------------------------
// Type: SV2CVW2_PARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SV2CVW2_PARAMS = extern struct {
    cbSize: {"kind":"UInt32"},
    psvPrev: Windows.Win32.Shell.IShellView,
    pfs: {"kind""Ptr","child":Windows.Win32.Shell.FOLDERSETTINGS},
    psbOwner: Windows.Win32.Shell.IShellBrowser,
    prcView: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    pvid: {"kind""Ptr","child":Guid},
    hwndView: Windows.Win32.WindowsAndMessaging.HWND,
};
// --------------------------------------------------------
// Type: IShellView2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellView2 = *opaque{
    // TODO: Method 'GetView'
    // TODO: Method 'CreateViewWindow2'
    // TODO: Method 'HandleRename'
    // TODO: Method 'SelectAndPositionItem'
};
// --------------------------------------------------------
// Type: IFolderView
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFolderView = *opaque{
    // TODO: Method 'GetCurrentViewMode'
    // TODO: Method 'SetCurrentViewMode'
    // TODO: Method 'GetFolder'
    // TODO: Method 'Item'
    // TODO: Method 'ItemCount'
    // TODO: Method 'Items'
    // TODO: Method 'GetSelectionMarkedItem'
    // TODO: Method 'GetFocusedItem'
    // TODO: Method 'GetItemPosition'
    // TODO: Method 'GetSpacing'
    // TODO: Method 'GetDefaultSpacing'
    // TODO: Method 'GetAutoArrange'
    // TODO: Method 'SelectItem'
    // TODO: Method 'SelectAndPositionItems'
};
// --------------------------------------------------------
// Type: tagSORTDIRECTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const tagSORTDIRECTION = *opaque{
};
// --------------------------------------------------------
// Type: SORTCOLUMN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SORTCOLUMN = extern struct {
    propkey: Windows.Win32.WindowsPropertiesSystem.PROPERTYKEY,
    direction: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: FVTEXTTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FVTEXTTYPE = *opaque{
};
// --------------------------------------------------------
// Type: IFolderView2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFolderView2 = *opaque{
    // TODO: Method 'SetGroupBy'
    // TODO: Method 'GetGroupBy'
    // TODO: Method 'SetViewProperty'
    // TODO: Method 'GetViewProperty'
    // TODO: Method 'SetTileViewProperties'
    // TODO: Method 'SetExtendedTileViewProperties'
    // TODO: Method 'SetText'
    // TODO: Method 'SetCurrentFolderFlags'
    // TODO: Method 'GetCurrentFolderFlags'
    // TODO: Method 'GetSortColumnCount'
    // TODO: Method 'SetSortColumns'
    // TODO: Method 'GetSortColumns'
    // TODO: Method 'GetItem'
    // TODO: Method 'GetVisibleItem'
    // TODO: Method 'GetSelectedItem'
    // TODO: Method 'GetSelection'
    // TODO: Method 'GetSelectionState'
    // TODO: Method 'InvokeVerbOnSelection'
    // TODO: Method 'SetViewModeAndIconSize'
    // TODO: Method 'GetViewModeAndIconSize'
    // TODO: Method 'SetGroupSubsetCount'
    // TODO: Method 'GetGroupSubsetCount'
    // TODO: Method 'SetRedraw'
    // TODO: Method 'IsMoveInSameFolder'
    // TODO: Method 'DoRename'
};
// --------------------------------------------------------
// Type: IFolderViewSettings
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFolderViewSettings = *opaque{
    // TODO: Method 'GetColumnPropertyList'
    // TODO: Method 'GetGroupByProperty'
    // TODO: Method 'GetViewMode'
    // TODO: Method 'GetIconSize'
    // TODO: Method 'GetFolderFlags'
    // TODO: Method 'GetSortColumns'
    // TODO: Method 'GetGroupSubsetCount'
};
// --------------------------------------------------------
// Type: IInitializeNetworkFolder
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInitializeNetworkFolder = *opaque{
    // TODO: Method 'Initialize'
};
// --------------------------------------------------------
// Type: INetworkFolderInternal
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const INetworkFolderInternal = *opaque{
    // TODO: Method 'GetResourceDisplayType'
    // TODO: Method 'GetIDList'
    // TODO: Method 'GetProvider'
};
// --------------------------------------------------------
// Type: IPreviewHandlerVisuals
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPreviewHandlerVisuals = *opaque{
    // TODO: Method 'SetBackgroundColor'
    // TODO: Method 'SetFont'
    // TODO: Method 'SetTextColor'
};
// --------------------------------------------------------
// Type: ICommDlgBrowser
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICommDlgBrowser = *opaque{
    // TODO: Method 'OnDefaultCommand'
    // TODO: Method 'OnStateChange'
    // TODO: Method 'IncludeObject'
};
// --------------------------------------------------------
// Type: ICommDlgBrowser2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICommDlgBrowser2 = *opaque{
    // TODO: Method 'Notify'
    // TODO: Method 'GetDefaultMenuText'
    // TODO: Method 'GetViewFlags'
};
// --------------------------------------------------------
// Type: CM_MASK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CM_MASK = *opaque{
};
// --------------------------------------------------------
// Type: CM_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CM_STATE = *opaque{
};
// --------------------------------------------------------
// Type: CM_ENUM_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CM_ENUM_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CM_SET_WIDTH_VALUE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CM_SET_WIDTH_VALUE = *opaque{
};
// --------------------------------------------------------
// Type: CM_COLUMNINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CM_COLUMNINFO = extern struct {
    cbSize: {"kind":"UInt32"},
    dwMask: {"kind":"UInt32"},
    dwState: {"kind":"UInt32"},
    uWidth: {"kind":"UInt32"},
    uDefaultWidth: {"kind":"UInt32"},
    uIdealWidth: {"kind":"UInt32"},
    wszName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: IColumnManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IColumnManager = *opaque{
    // TODO: Method 'SetColumnInfo'
    // TODO: Method 'GetColumnInfo'
    // TODO: Method 'GetColumnCount'
    // TODO: Method 'GetColumns'
    // TODO: Method 'SetColumns'
};
// --------------------------------------------------------
// Type: IFolderFilterSite
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFolderFilterSite = *opaque{
    // TODO: Method 'SetFilter'
};
// --------------------------------------------------------
// Type: IFolderFilter
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFolderFilter = *opaque{
    // TODO: Method 'ShouldShow'
    // TODO: Method 'GetEnumFlags'
};
// --------------------------------------------------------
// Type: IInputObjectSite
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInputObjectSite = *opaque{
    // TODO: Method 'OnFocusChangeIS'
};
// --------------------------------------------------------
// Type: IInputObject
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInputObject = *opaque{
    // TODO: Method 'UIActivateIO'
    // TODO: Method 'HasFocusIO'
    // TODO: Method 'TranslateAcceleratorIO'
};
// --------------------------------------------------------
// Type: IInputObject2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInputObject2 = *opaque{
    // TODO: Method 'TranslateAcceleratorGlobal'
};
// --------------------------------------------------------
// Type: IShellIcon
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellIcon = *opaque{
    // TODO: Method 'GetIconOf'
};
// --------------------------------------------------------
// Type: IShellBrowser
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellBrowser = *opaque{
    // TODO: Method 'InsertMenusSB'
    // TODO: Method 'SetMenuSB'
    // TODO: Method 'RemoveMenusSB'
    // TODO: Method 'SetStatusTextSB'
    // TODO: Method 'EnableModelessSB'
    // TODO: Method 'TranslateAcceleratorSB'
    // TODO: Method 'BrowseObject'
    // TODO: Method 'GetViewStateStream'
    // TODO: Method 'GetControlWindow'
    // TODO: Method 'SendControlMsg'
    // TODO: Method 'QueryActiveShellView'
    // TODO: Method 'OnViewWindowActive'
    // TODO: Method 'SetToolbarItems'
};
// --------------------------------------------------------
// Type: IProfferService
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IProfferService = *opaque{
    // TODO: Method 'ProfferService'
    // TODO: Method 'RevokeService'
};
// --------------------------------------------------------
// Type: SIGDN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SIGDN = *opaque{
};
// --------------------------------------------------------
// Type: _SICHINTF
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _SICHINTF = *opaque{
};
// --------------------------------------------------------
// Type: IShellItem
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellItem = *opaque{
    // TODO: Method 'BindToHandler'
    // TODO: Method 'GetParent'
    // TODO: Method 'GetDisplayName'
    // TODO: Method 'GetAttributes'
    // TODO: Method 'Compare'
};
// --------------------------------------------------------
// Type: DATAOBJ_GET_ITEM_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DATAOBJ_GET_ITEM_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: IShellItem2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellItem2 = *opaque{
    // TODO: Method 'GetPropertyStore'
    // TODO: Method 'GetPropertyStoreWithCreateObject'
    // TODO: Method 'GetPropertyStoreForKeys'
    // TODO: Method 'GetPropertyDescriptionList'
    // TODO: Method 'Update'
    // TODO: Method 'GetProperty'
    // TODO: Method 'GetCLSID'
    // TODO: Method 'GetFileTime'
    // TODO: Method 'GetInt32'
    // TODO: Method 'GetString'
    // TODO: Method 'GetUInt32'
    // TODO: Method 'GetUInt64'
    // TODO: Method 'GetBool'
};
// --------------------------------------------------------
// Type: _SIIGBF
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _SIIGBF = *opaque{
};
// --------------------------------------------------------
// Type: IShellItemImageFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellItemImageFactory = *opaque{
    // TODO: Method 'GetImage'
};
// --------------------------------------------------------
// Type: IEnumShellItems
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumShellItems = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: STGOP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STGOP = *opaque{
};
// --------------------------------------------------------
// Type: _TRANSFER_SOURCE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _TRANSFER_SOURCE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: _TRANSFER_ADVISE_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _TRANSFER_ADVISE_STATE = *opaque{
};
// --------------------------------------------------------
// Type: ITransferAdviseSink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITransferAdviseSink = *opaque{
    // TODO: Method 'UpdateProgress'
    // TODO: Method 'UpdateTransferState'
    // TODO: Method 'ConfirmOverwrite'
    // TODO: Method 'ConfirmEncryptionLoss'
    // TODO: Method 'FileFailure'
    // TODO: Method 'SubStreamFailure'
    // TODO: Method 'PropertyFailure'
};
// --------------------------------------------------------
// Type: ITransferSource
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITransferSource = *opaque{
    // TODO: Method 'Advise'
    // TODO: Method 'Unadvise'
    // TODO: Method 'SetProperties'
    // TODO: Method 'OpenItem'
    // TODO: Method 'MoveItem'
    // TODO: Method 'RecycleItem'
    // TODO: Method 'RemoveItem'
    // TODO: Method 'RenameItem'
    // TODO: Method 'LinkItem'
    // TODO: Method 'ApplyPropertiesToItem'
    // TODO: Method 'GetDefaultDestinationName'
    // TODO: Method 'EnterFolder'
    // TODO: Method 'LeaveFolder'
};
// --------------------------------------------------------
// Type: SHELL_ITEM_RESOURCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SHELL_ITEM_RESOURCE = extern struct {
    guidType: Guid,
    szName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: IEnumResources
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumResources = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IShellItemResources
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellItemResources = *opaque{
    // TODO: Method 'GetAttributes'
    // TODO: Method 'GetSize'
    // TODO: Method 'GetTimes'
    // TODO: Method 'SetTimes'
    // TODO: Method 'GetResourceDescription'
    // TODO: Method 'EnumResources'
    // TODO: Method 'SupportsResource'
    // TODO: Method 'OpenResource'
    // TODO: Method 'CreateResource'
    // TODO: Method 'MarkForDelete'
};
// --------------------------------------------------------
// Type: ITransferDestination
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITransferDestination = *opaque{
    // TODO: Method 'Advise'
    // TODO: Method 'Unadvise'
    // TODO: Method 'CreateItem'
};
// --------------------------------------------------------
// Type: IFileOperationProgressSink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFileOperationProgressSink = *opaque{
    // TODO: Method 'StartOperations'
    // TODO: Method 'FinishOperations'
    // TODO: Method 'PreRenameItem'
    // TODO: Method 'PostRenameItem'
    // TODO: Method 'PreMoveItem'
    // TODO: Method 'PostMoveItem'
    // TODO: Method 'PreCopyItem'
    // TODO: Method 'PostCopyItem'
    // TODO: Method 'PreDeleteItem'
    // TODO: Method 'PostDeleteItem'
    // TODO: Method 'PreNewItem'
    // TODO: Method 'PostNewItem'
    // TODO: Method 'UpdateProgress'
    // TODO: Method 'ResetTimer'
    // TODO: Method 'PauseTimer'
    // TODO: Method 'ResumeTimer'
};
// --------------------------------------------------------
// Type: SIATTRIBFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SIATTRIBFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: IShellItemArray
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellItemArray = *opaque{
    // TODO: Method 'BindToHandler'
    // TODO: Method 'GetPropertyStore'
    // TODO: Method 'GetPropertyDescriptionList'
    // TODO: Method 'GetAttributes'
    // TODO: Method 'GetCount'
    // TODO: Method 'GetItemAt'
    // TODO: Method 'EnumItems'
};
// --------------------------------------------------------
// Type: IInitializeWithItem
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInitializeWithItem = *opaque{
    // TODO: Method 'Initialize'
};
// --------------------------------------------------------
// Type: IObjectWithSelection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IObjectWithSelection = *opaque{
    // TODO: Method 'SetSelection'
    // TODO: Method 'GetSelection'
};
// --------------------------------------------------------
// Type: IObjectWithBackReferences
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IObjectWithBackReferences = *opaque{
    // TODO: Method 'RemoveBackReferences'
};
// --------------------------------------------------------
// Type: _PROPERTYUI_NAME_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _PROPERTYUI_NAME_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: _PROPERTYUI_FORMAT_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _PROPERTYUI_FORMAT_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: ICategoryProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICategoryProvider = *opaque{
    // TODO: Method 'CanCategorizeOnSCID'
    // TODO: Method 'GetDefaultCategory'
    // TODO: Method 'GetCategoryForSCID'
    // TODO: Method 'EnumCategories'
    // TODO: Method 'GetCategoryName'
    // TODO: Method 'CreateCategory'
};
// --------------------------------------------------------
// Type: CATEGORYINFO_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CATEGORYINFO_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CATSORT_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CATSORT_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CATEGORY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CATEGORY_INFO = extern struct {
    cif: Windows.Win32.Shell.CATEGORYINFO_FLAGS,
    wszName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: ICategorizer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICategorizer = *opaque{
    // TODO: Method 'GetDescription'
    // TODO: Method 'GetCategory'
    // TODO: Method 'GetCategoryInfo'
    // TODO: Method 'CompareCategory'
};
// --------------------------------------------------------
// Type: SHDRAGIMAGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SHDRAGIMAGE = extern struct {
    sizeDragImage: Windows.Win32.DisplayDevices.SIZE,
    ptOffset: Windows.Win32.DisplayDevices.POINT,
    hbmpDragImage: Windows.Win32.Gdi.HBITMAP,
    crColorKey: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IDropTargetHelper
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDropTargetHelper = *opaque{
    // TODO: Method 'DragEnter'
    // TODO: Method 'DragLeave'
    // TODO: Method 'DragOver'
    // TODO: Method 'Drop'
    // TODO: Method 'Show'
};
// --------------------------------------------------------
// Type: IDragSourceHelper
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDragSourceHelper = *opaque{
    // TODO: Method 'InitializeFromBitmap'
    // TODO: Method 'InitializeFromWindow'
};
// --------------------------------------------------------
// Type: SLR_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SLR_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: SLGP_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SLGP_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: IShellLinkA
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellLinkA = *opaque{
    // TODO: Method 'GetPath'
    // TODO: Method 'GetIDList'
    // TODO: Method 'SetIDList'
    // TODO: Method 'GetDescription'
    // TODO: Method 'SetDescription'
    // TODO: Method 'GetWorkingDirectory'
    // TODO: Method 'SetWorkingDirectory'
    // TODO: Method 'GetArguments'
    // TODO: Method 'SetArguments'
    // TODO: Method 'GetHotkey'
    // TODO: Method 'SetHotkey'
    // TODO: Method 'GetShowCmd'
    // TODO: Method 'SetShowCmd'
    // TODO: Method 'GetIconLocation'
    // TODO: Method 'SetIconLocation'
    // TODO: Method 'SetRelativePath'
    // TODO: Method 'Resolve'
    // TODO: Method 'SetPath'
};
// --------------------------------------------------------
// Type: IShellLinkW
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellLinkW = *opaque{
    // TODO: Method 'GetPath'
    // TODO: Method 'GetIDList'
    // TODO: Method 'SetIDList'
    // TODO: Method 'GetDescription'
    // TODO: Method 'SetDescription'
    // TODO: Method 'GetWorkingDirectory'
    // TODO: Method 'SetWorkingDirectory'
    // TODO: Method 'GetArguments'
    // TODO: Method 'SetArguments'
    // TODO: Method 'GetHotkey'
    // TODO: Method 'SetHotkey'
    // TODO: Method 'GetShowCmd'
    // TODO: Method 'SetShowCmd'
    // TODO: Method 'GetIconLocation'
    // TODO: Method 'SetIconLocation'
    // TODO: Method 'SetRelativePath'
    // TODO: Method 'Resolve'
    // TODO: Method 'SetPath'
};
// --------------------------------------------------------
// Type: IShellLinkDataList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellLinkDataList = *opaque{
    // TODO: Method 'AddDataBlock'
    // TODO: Method 'CopyDataBlock'
    // TODO: Method 'RemoveDataBlock'
    // TODO: Method 'GetFlags'
    // TODO: Method 'SetFlags'
};
// --------------------------------------------------------
// Type: IResolveShellLink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IResolveShellLink = *opaque{
    // TODO: Method 'ResolveShellLink'
};
// --------------------------------------------------------
// Type: _SPINITF
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _SPINITF = *opaque{
};
// --------------------------------------------------------
// Type: IActionProgressDialog
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActionProgressDialog = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'Stop'
};
// --------------------------------------------------------
// Type: _SPBEGINF
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _SPBEGINF = *opaque{
};
// --------------------------------------------------------
// Type: SPACTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SPACTION = *opaque{
};
// --------------------------------------------------------
// Type: SPTEXT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SPTEXT = *opaque{
};
// --------------------------------------------------------
// Type: IActionProgress
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActionProgress = *opaque{
    // TODO: Method 'Begin'
    // TODO: Method 'UpdateProgress'
    // TODO: Method 'UpdateText'
    // TODO: Method 'QueryCancel'
    // TODO: Method 'ResetCancel'
    // TODO: Method 'End'
};
// --------------------------------------------------------
// Type: IShellExtInit
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellExtInit = *opaque{
    // TODO: Method 'Initialize'
};
// --------------------------------------------------------
// Type: _EXPPS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _EXPPS = *opaque{
};
// --------------------------------------------------------
// Type: IShellPropSheetExt
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellPropSheetExt = *opaque{
    // TODO: Method 'AddPages'
    // TODO: Method 'ReplacePage'
};
// --------------------------------------------------------
// Type: IRemoteComputer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRemoteComputer = *opaque{
    // TODO: Method 'Initialize'
};
// --------------------------------------------------------
// Type: IQueryContinue
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IQueryContinue = *opaque{
    // TODO: Method 'QueryContinue'
};
// --------------------------------------------------------
// Type: IObjectWithCancelEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IObjectWithCancelEvent = *opaque{
    // TODO: Method 'GetCancelEvent'
};
// --------------------------------------------------------
// Type: IUserNotification
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUserNotification = *opaque{
    // TODO: Method 'SetBalloonInfo'
    // TODO: Method 'SetBalloonRetry'
    // TODO: Method 'SetIconInfo'
    // TODO: Method 'Show'
    // TODO: Method 'PlaySoundA'
};
// --------------------------------------------------------
// Type: IItemNameLimits
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IItemNameLimits = *opaque{
    // TODO: Method 'GetValidCharacters'
    // TODO: Method 'GetMaxLength'
};
// --------------------------------------------------------
// Type: ISearchFolderItemFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISearchFolderItemFactory = *opaque{
    // TODO: Method 'SetDisplayName'
    // TODO: Method 'SetFolderTypeID'
    // TODO: Method 'SetFolderLogicalViewMode'
    // TODO: Method 'SetIconSize'
    // TODO: Method 'SetVisibleColumns'
    // TODO: Method 'SetSortColumns'
    // TODO: Method 'SetGroupColumn'
    // TODO: Method 'SetStacks'
    // TODO: Method 'SetScope'
    // TODO: Method 'SetCondition'
    // TODO: Method 'GetShellItem'
    // TODO: Method 'GetIDList'
};
// --------------------------------------------------------
// Type: IExtractImage
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IExtractImage = *opaque{
    // TODO: Method 'GetLocation'
    // TODO: Method 'Extract'
};
// --------------------------------------------------------
// Type: IExtractImage2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IExtractImage2 = *opaque{
    // TODO: Method 'GetDateStamp'
};
// --------------------------------------------------------
// Type: IThumbnailHandlerFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IThumbnailHandlerFactory = *opaque{
    // TODO: Method 'GetThumbnailHandler'
};
// --------------------------------------------------------
// Type: IParentAndItem
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IParentAndItem = *opaque{
    // TODO: Method 'SetParentAndItem'
    // TODO: Method 'GetParentAndItem'
};
// --------------------------------------------------------
// Type: IDockingWindow
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDockingWindow = *opaque{
    // TODO: Method 'ShowDW'
    // TODO: Method 'CloseDW'
    // TODO: Method 'ResizeBorderDW'
};
// --------------------------------------------------------
// Type: DESKBANDINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DESKBANDINFO = extern struct {
    dwMask: {"kind":"UInt32"},
    ptMinSize: Windows.Win32.DisplayDevices.POINTL,
    ptMaxSize: Windows.Win32.DisplayDevices.POINTL,
    ptIntegral: Windows.Win32.DisplayDevices.POINTL,
    ptActual: Windows.Win32.DisplayDevices.POINTL,
    wszTitle: {"kind":"Array","child": {"kind":"UInt16"}},
    dwModeFlags: {"kind":"UInt32"},
    crBkgnd: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: tagDESKBANDCID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const tagDESKBANDCID = *opaque{
};
// --------------------------------------------------------
// Type: IDeskBand
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDeskBand = *opaque{
    // TODO: Method 'GetBandInfo'
};
// --------------------------------------------------------
// Type: IDeskBandInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDeskBandInfo = *opaque{
    // TODO: Method 'GetDefaultBandWidth'
};
// --------------------------------------------------------
// Type: ITaskbarList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITaskbarList = *opaque{
    // TODO: Method 'HrInit'
    // TODO: Method 'AddTab'
    // TODO: Method 'DeleteTab'
    // TODO: Method 'ActivateTab'
    // TODO: Method 'SetActiveAlt'
};
// --------------------------------------------------------
// Type: ITaskbarList2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITaskbarList2 = *opaque{
    // TODO: Method 'MarkFullscreenWindow'
};
// --------------------------------------------------------
// Type: THUMBBUTTONFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const THUMBBUTTONFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: THUMBBUTTONMASK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const THUMBBUTTONMASK = *opaque{
};
// --------------------------------------------------------
// Type: THUMBBUTTON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const THUMBBUTTON = extern struct {
    dwMask: Windows.Win32.Shell.THUMBBUTTONMASK,
    iId: {"kind":"UInt32"},
    iBitmap: {"kind":"UInt32"},
    hIcon: Windows.Win32.Gdi.HICON,
    szTip: {"kind":"Array","child": {"kind":"UInt16"}},
    dwFlags: Windows.Win32.Shell.THUMBBUTTONFLAGS,
};
// --------------------------------------------------------
// Type: TBPFLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TBPFLAG = *opaque{
};
// --------------------------------------------------------
// Type: ITaskbarList3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITaskbarList3 = *opaque{
    // TODO: Method 'SetProgressValue'
    // TODO: Method 'SetProgressState'
    // TODO: Method 'RegisterTab'
    // TODO: Method 'UnregisterTab'
    // TODO: Method 'SetTabOrder'
    // TODO: Method 'SetTabActive'
    // TODO: Method 'ThumbBarAddButtons'
    // TODO: Method 'ThumbBarUpdateButtons'
    // TODO: Method 'ThumbBarSetImageList'
    // TODO: Method 'SetOverlayIcon'
    // TODO: Method 'SetThumbnailTooltip'
    // TODO: Method 'SetThumbnailClip'
};
// --------------------------------------------------------
// Type: STPFLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STPFLAG = *opaque{
};
// --------------------------------------------------------
// Type: ITaskbarList4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITaskbarList4 = *opaque{
    // TODO: Method 'SetTabProperties'
};
// --------------------------------------------------------
// Type: IExplorerBrowserEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IExplorerBrowserEvents = *opaque{
    // TODO: Method 'OnNavigationPending'
    // TODO: Method 'OnViewCreated'
    // TODO: Method 'OnNavigationComplete'
    // TODO: Method 'OnNavigationFailed'
};
// --------------------------------------------------------
// Type: EXPLORER_BROWSER_OPTIONS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EXPLORER_BROWSER_OPTIONS = *opaque{
};
// --------------------------------------------------------
// Type: EXPLORER_BROWSER_FILL_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EXPLORER_BROWSER_FILL_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: IExplorerBrowser
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IExplorerBrowser = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'Destroy'
    // TODO: Method 'SetRect'
    // TODO: Method 'SetPropertyBag'
    // TODO: Method 'SetEmptyText'
    // TODO: Method 'SetFolderSettings'
    // TODO: Method 'Advise'
    // TODO: Method 'Unadvise'
    // TODO: Method 'SetOptions'
    // TODO: Method 'GetOptions'
    // TODO: Method 'BrowseToIDList'
    // TODO: Method 'BrowseToObject'
    // TODO: Method 'FillFromObject'
    // TODO: Method 'RemoveAll'
    // TODO: Method 'GetCurrentView'
};
// --------------------------------------------------------
// Type: IEnumObjects
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumObjects = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: _OPPROGDLGF
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _OPPROGDLGF = *opaque{
};
// --------------------------------------------------------
// Type: _PDMODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _PDMODE = *opaque{
};
// --------------------------------------------------------
// Type: IOperationsProgressDialog
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOperationsProgressDialog = *opaque{
    // TODO: Method 'StartProgressDialog'
    // TODO: Method 'StopProgressDialog'
    // TODO: Method 'SetOperation'
    // TODO: Method 'SetMode'
    // TODO: Method 'UpdateProgress'
    // TODO: Method 'UpdateLocations'
    // TODO: Method 'ResetTimer'
    // TODO: Method 'PauseTimer'
    // TODO: Method 'ResumeTimer'
    // TODO: Method 'GetMilliseconds'
    // TODO: Method 'GetOperationStatus'
};
// --------------------------------------------------------
// Type: IIOCancelInformation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IIOCancelInformation = *opaque{
    // TODO: Method 'SetCancelInformation'
    // TODO: Method 'GetCancelInformation'
};
// --------------------------------------------------------
// Type: IFileOperation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFileOperation = *opaque{
    // TODO: Method 'Advise'
    // TODO: Method 'Unadvise'
    // TODO: Method 'SetOperationFlags'
    // TODO: Method 'SetProgressMessage'
    // TODO: Method 'SetProgressDialog'
    // TODO: Method 'SetProperties'
    // TODO: Method 'SetOwnerWindow'
    // TODO: Method 'ApplyPropertiesToItem'
    // TODO: Method 'ApplyPropertiesToItems'
    // TODO: Method 'RenameItem'
    // TODO: Method 'RenameItems'
    // TODO: Method 'MoveItem'
    // TODO: Method 'MoveItems'
    // TODO: Method 'CopyItem'
    // TODO: Method 'CopyItems'
    // TODO: Method 'DeleteItem'
    // TODO: Method 'DeleteItems'
    // TODO: Method 'NewItem'
    // TODO: Method 'PerformOperations'
    // TODO: Method 'GetAnyOperationsAborted'
};
// --------------------------------------------------------
// Type: FILE_OPERATION_FLAGS2
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FILE_OPERATION_FLAGS2 = *opaque{
};
// --------------------------------------------------------
// Type: IFileOperation2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFileOperation2 = *opaque{
    // TODO: Method 'SetOperationFlags2'
};
// --------------------------------------------------------
// Type: IObjectProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IObjectProvider = *opaque{
    // TODO: Method 'QueryObject'
};
// --------------------------------------------------------
// Type: INamespaceWalkCB
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const INamespaceWalkCB = *opaque{
    // TODO: Method 'FoundItem'
    // TODO: Method 'EnterFolder'
    // TODO: Method 'LeaveFolder'
    // TODO: Method 'InitializeProgressDialog'
};
// --------------------------------------------------------
// Type: INamespaceWalkCB2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const INamespaceWalkCB2 = *opaque{
    // TODO: Method 'WalkComplete'
};
// --------------------------------------------------------
// Type: NAMESPACEWALKFLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NAMESPACEWALKFLAG = *opaque{
};
// --------------------------------------------------------
// Type: INamespaceWalk
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const INamespaceWalk = *opaque{
    // TODO: Method 'Walk'
    // TODO: Method 'GetIDArrayResult'
};
// --------------------------------------------------------
// Type: BANDSITEINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BANDSITEINFO = extern struct {
    dwMask: {"kind":"UInt32"},
    dwState: {"kind":"UInt32"},
    dwStyle: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: tagBANDSITECID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const tagBANDSITECID = *opaque{
};
// --------------------------------------------------------
// Type: IBandSite
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IBandSite = *opaque{
    // TODO: Method 'AddBand'
    // TODO: Method 'EnumBands'
    // TODO: Method 'QueryBand'
    // TODO: Method 'SetBandState'
    // TODO: Method 'RemoveBand'
    // TODO: Method 'GetBandObject'
    // TODO: Method 'SetBandSiteInfo'
    // TODO: Method 'GetBandSiteInfo'
};
// --------------------------------------------------------
// Type: IModalWindow
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IModalWindow = *opaque{
    // TODO: Method 'Show'
};
// --------------------------------------------------------
// Type: IContextMenuSite
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IContextMenuSite = *opaque{
    // TODO: Method 'DoContextMenuPopup'
};
// --------------------------------------------------------
// Type: tagMENUBANDHANDLERCID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const tagMENUBANDHANDLERCID = *opaque{
};
// --------------------------------------------------------
// Type: IMenuBand
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMenuBand = *opaque{
    // TODO: Method 'IsMenuMessage'
    // TODO: Method 'TranslateMenuMessage'
};
// --------------------------------------------------------
// Type: IRegTreeItem
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRegTreeItem = *opaque{
    // TODO: Method 'GetCheckState'
    // TODO: Method 'SetCheckState'
};
// --------------------------------------------------------
// Type: IDeskBar
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDeskBar = *opaque{
    // TODO: Method 'SetClient'
    // TODO: Method 'GetClient'
    // TODO: Method 'OnPosRectChangeDB'
};
// --------------------------------------------------------
// Type: tagMENUPOPUPSELECT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const tagMENUPOPUPSELECT = *opaque{
};
// --------------------------------------------------------
// Type: tagMENUPOPUPPOPUPFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const tagMENUPOPUPPOPUPFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: IMenuPopup
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMenuPopup = *opaque{
    // TODO: Method 'Popup'
    // TODO: Method 'OnSelect'
    // TODO: Method 'SetSubMenu'
};
// --------------------------------------------------------
// Type: FILE_USAGE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FILE_USAGE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IFileIsInUse
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFileIsInUse = *opaque{
    // TODO: Method 'GetAppName'
    // TODO: Method 'GetUsage'
    // TODO: Method 'GetCapabilities'
    // TODO: Method 'GetSwitchToHWND'
    // TODO: Method 'CloseFile'
};
// --------------------------------------------------------
// Type: FDE_OVERWRITE_RESPONSE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FDE_OVERWRITE_RESPONSE = *opaque{
};
// --------------------------------------------------------
// Type: FDE_SHAREVIOLATION_RESPONSE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FDE_SHAREVIOLATION_RESPONSE = *opaque{
};
// --------------------------------------------------------
// Type: FDAP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FDAP = *opaque{
};
// --------------------------------------------------------
// Type: IFileDialogEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFileDialogEvents = *opaque{
    // TODO: Method 'OnFileOk'
    // TODO: Method 'OnFolderChanging'
    // TODO: Method 'OnFolderChange'
    // TODO: Method 'OnSelectionChange'
    // TODO: Method 'OnShareViolation'
    // TODO: Method 'OnTypeChange'
    // TODO: Method 'OnOverwrite'
};
// --------------------------------------------------------
// Type: _FILEOPENDIALOGOPTIONS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _FILEOPENDIALOGOPTIONS = *opaque{
};
// --------------------------------------------------------
// Type: IFileDialog
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFileDialog = *opaque{
    // TODO: Method 'SetFileTypes'
    // TODO: Method 'SetFileTypeIndex'
    // TODO: Method 'GetFileTypeIndex'
    // TODO: Method 'Advise'
    // TODO: Method 'Unadvise'
    // TODO: Method 'SetOptions'
    // TODO: Method 'GetOptions'
    // TODO: Method 'SetDefaultFolder'
    // TODO: Method 'SetFolder'
    // TODO: Method 'GetFolder'
    // TODO: Method 'GetCurrentSelection'
    // TODO: Method 'SetFileName'
    // TODO: Method 'GetFileName'
    // TODO: Method 'SetTitle'
    // TODO: Method 'SetOkButtonLabel'
    // TODO: Method 'SetFileNameLabel'
    // TODO: Method 'GetResult'
    // TODO: Method 'AddPlace'
    // TODO: Method 'SetDefaultExtension'
    // TODO: Method 'Close'
    // TODO: Method 'SetClientGuid'
    // TODO: Method 'ClearClientData'
    // TODO: Method 'SetFilter'
};
// --------------------------------------------------------
// Type: IFileSaveDialog
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFileSaveDialog = *opaque{
    // TODO: Method 'SetSaveAsItem'
    // TODO: Method 'SetProperties'
    // TODO: Method 'SetCollectedProperties'
    // TODO: Method 'GetProperties'
    // TODO: Method 'ApplyProperties'
};
// --------------------------------------------------------
// Type: IFileOpenDialog
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFileOpenDialog = *opaque{
    // TODO: Method 'GetResults'
    // TODO: Method 'GetSelectedItems'
};
// --------------------------------------------------------
// Type: CDCONTROLSTATEF
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CDCONTROLSTATEF = *opaque{
};
// --------------------------------------------------------
// Type: IFileDialogCustomize
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFileDialogCustomize = *opaque{
    // TODO: Method 'EnableOpenDropDown'
    // TODO: Method 'AddMenu'
    // TODO: Method 'AddPushButton'
    // TODO: Method 'AddComboBox'
    // TODO: Method 'AddRadioButtonList'
    // TODO: Method 'AddCheckButton'
    // TODO: Method 'AddEditBox'
    // TODO: Method 'AddSeparator'
    // TODO: Method 'AddText'
    // TODO: Method 'SetControlLabel'
    // TODO: Method 'GetControlState'
    // TODO: Method 'SetControlState'
    // TODO: Method 'GetEditBoxText'
    // TODO: Method 'SetEditBoxText'
    // TODO: Method 'GetCheckButtonState'
    // TODO: Method 'SetCheckButtonState'
    // TODO: Method 'AddControlItem'
    // TODO: Method 'RemoveControlItem'
    // TODO: Method 'RemoveAllControlItems'
    // TODO: Method 'GetControlItemState'
    // TODO: Method 'SetControlItemState'
    // TODO: Method 'GetSelectedControlItem'
    // TODO: Method 'SetSelectedControlItem'
    // TODO: Method 'StartVisualGroup'
    // TODO: Method 'EndVisualGroup'
    // TODO: Method 'MakeProminent'
    // TODO: Method 'SetControlItemText'
};
// --------------------------------------------------------
// Type: ASSOCIATIONLEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ASSOCIATIONLEVEL = *opaque{
};
// --------------------------------------------------------
// Type: ASSOCIATIONTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ASSOCIATIONTYPE = *opaque{
};
// --------------------------------------------------------
// Type: IApplicationAssociationRegistration
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IApplicationAssociationRegistration = *opaque{
    // TODO: Method 'QueryCurrentDefault'
    // TODO: Method 'QueryAppIsDefault'
    // TODO: Method 'QueryAppIsDefaultAll'
    // TODO: Method 'SetAppAsDefault'
    // TODO: Method 'SetAppAsDefaultAll'
    // TODO: Method 'ClearUserAssociations'
};
// --------------------------------------------------------
// Type: DELEGATEITEMID
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const DELEGATEITEMID = *opaque{
};
// --------------------------------------------------------
// Type: IDelegateFolder
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDelegateFolder = *opaque{
    // TODO: Method 'SetItemAlloc'
};
// --------------------------------------------------------
// Type: _BROWSERFRAMEOPTIONS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _BROWSERFRAMEOPTIONS = *opaque{
};
// --------------------------------------------------------
// Type: IBrowserFrameOptions
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IBrowserFrameOptions = *opaque{
    // TODO: Method 'GetFrameOptions'
};
// --------------------------------------------------------
// Type: NWMF
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NWMF = *opaque{
};
// --------------------------------------------------------
// Type: INewWindowManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const INewWindowManager = *opaque{
    // TODO: Method 'EvaluateNewWindow'
};
// --------------------------------------------------------
// Type: ATTACHMENT_PROMPT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ATTACHMENT_PROMPT = *opaque{
};
// --------------------------------------------------------
// Type: ATTACHMENT_ACTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ATTACHMENT_ACTION = *opaque{
};
// --------------------------------------------------------
// Type: IAttachmentExecute
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAttachmentExecute = *opaque{
    // TODO: Method 'SetClientTitle'
    // TODO: Method 'SetClientGuid'
    // TODO: Method 'SetLocalPath'
    // TODO: Method 'SetFileName'
    // TODO: Method 'SetSource'
    // TODO: Method 'SetReferrer'
    // TODO: Method 'CheckPolicy'
    // TODO: Method 'Prompt'
    // TODO: Method 'Save'
    // TODO: Method 'Execute'
    // TODO: Method 'SaveWithUI'
    // TODO: Method 'ClearClientState'
};
// --------------------------------------------------------
// Type: SMDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SMDATA = extern struct {
    dwMask: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    hmenu: Windows.Win32.MenusAndResources.HMENU,
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    uId: {"kind":"UInt32"},
    uIdParent: {"kind":"UInt32"},
    uIdAncestor: {"kind":"UInt32"},
    punk: Windows.Win32.Com.IUnknown,
    pidlFolder: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    pidlItem: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    psf: Windows.Win32.Shell.IShellFolder,
    pvUserData: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: SMINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SMINFO = extern struct {
    dwMask: {"kind":"UInt32"},
    dwType: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    iIcon: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: SMCSHCHANGENOTIFYSTRUCT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SMCSHCHANGENOTIFYSTRUCT = extern struct {
    lEvent: {"kind":"Int32"},
    pidl1: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    pidl2: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
};
// --------------------------------------------------------
// Type: tagSMINFOMASK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const tagSMINFOMASK = *opaque{
};
// --------------------------------------------------------
// Type: tagSMINFOTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const tagSMINFOTYPE = *opaque{
};
// --------------------------------------------------------
// Type: tagSMINFOFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const tagSMINFOFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: IShellMenuCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellMenuCallback = *opaque{
    // TODO: Method 'CallbackSM'
};
// --------------------------------------------------------
// Type: IShellMenu
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellMenu = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'GetMenuInfo'
    // TODO: Method 'SetShellFolder'
    // TODO: Method 'GetShellFolder'
    // TODO: Method 'SetMenu'
    // TODO: Method 'GetMenu'
    // TODO: Method 'InvalidateItem'
    // TODO: Method 'GetState'
    // TODO: Method 'SetMenuToolbar'
};
// --------------------------------------------------------
// Type: KF_CATEGORY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KF_CATEGORY = *opaque{
};
// --------------------------------------------------------
// Type: _KF_DEFINITION_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _KF_DEFINITION_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: _KF_REDIRECT_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _KF_REDIRECT_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: _KF_REDIRECTION_CAPABILITIES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _KF_REDIRECTION_CAPABILITIES = *opaque{
};
// --------------------------------------------------------
// Type: KNOWNFOLDER_DEFINITION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KNOWNFOLDER_DEFINITION = extern struct {
    category: Windows.Win32.Shell.KF_CATEGORY,
    pszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszDescription: {"kind""Ptr","child":{"kind":"UInt16"}},
    fidParent: Guid,
    pszRelativePath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszParsingName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszTooltip: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszLocalizedName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszIcon: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszSecurity: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwAttributes: {"kind":"UInt32"},
    kfdFlags: {"kind":"UInt32"},
    ftidType: Guid,
};
// --------------------------------------------------------
// Type: IKnownFolder
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IKnownFolder = *opaque{
    // TODO: Method 'GetId'
    // TODO: Method 'GetCategory'
    // TODO: Method 'GetShellItem'
    // TODO: Method 'GetPath'
    // TODO: Method 'SetPath'
    // TODO: Method 'GetIDList'
    // TODO: Method 'GetFolderType'
    // TODO: Method 'GetRedirectionCapabilities'
    // TODO: Method 'GetFolderDefinition'
};
// --------------------------------------------------------
// Type: FFFP_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FFFP_MODE = *opaque{
};
// --------------------------------------------------------
// Type: IKnownFolderManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IKnownFolderManager = *opaque{
    // TODO: Method 'FolderIdFromCsidl'
    // TODO: Method 'FolderIdToCsidl'
    // TODO: Method 'GetFolderIds'
    // TODO: Method 'GetFolder'
    // TODO: Method 'GetFolderByName'
    // TODO: Method 'RegisterFolder'
    // TODO: Method 'UnregisterFolder'
    // TODO: Method 'FindFolderFromPath'
    // TODO: Method 'FindFolderFromIDList'
    // TODO: Method 'Redirect'
};
// --------------------------------------------------------
// Type: SHARE_ROLE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SHARE_ROLE = *opaque{
};
// --------------------------------------------------------
// Type: DEF_SHARE_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DEF_SHARE_ID = *opaque{
};
// --------------------------------------------------------
// Type: ISharingConfigurationManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISharingConfigurationManager = *opaque{
    // TODO: Method 'CreateShare'
    // TODO: Method 'DeleteShare'
    // TODO: Method 'ShareExists'
    // TODO: Method 'GetSharePermissions'
    // TODO: Method 'SharePrinters'
    // TODO: Method 'StopSharingPrinters'
    // TODO: Method 'ArePrintersShared'
};
// --------------------------------------------------------
// Type: IRelatedItem
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRelatedItem = *opaque{
    // TODO: Method 'GetItemIDList'
    // TODO: Method 'GetItem'
};
// --------------------------------------------------------
// Type: IIdentityName
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IIdentityName = *opaque{
};
// --------------------------------------------------------
// Type: IDelegateItem
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDelegateItem = *opaque{
};
// --------------------------------------------------------
// Type: ICurrentItem
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICurrentItem = *opaque{
};
// --------------------------------------------------------
// Type: ITransferMediumItem
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITransferMediumItem = *opaque{
};
// --------------------------------------------------------
// Type: IDisplayItem
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDisplayItem = *opaque{
};
// --------------------------------------------------------
// Type: IViewStateIdentityItem
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IViewStateIdentityItem = *opaque{
};
// --------------------------------------------------------
// Type: IPreviewItem
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPreviewItem = *opaque{
};
// --------------------------------------------------------
// Type: IDestinationStreamFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDestinationStreamFactory = *opaque{
    // TODO: Method 'GetDestinationStream'
};
// --------------------------------------------------------
// Type: ICreateProcessInputs
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICreateProcessInputs = *opaque{
    // TODO: Method 'GetCreateFlags'
    // TODO: Method 'SetCreateFlags'
    // TODO: Method 'AddCreateFlags'
    // TODO: Method 'SetHotKey'
    // TODO: Method 'AddStartupFlags'
    // TODO: Method 'SetTitle'
    // TODO: Method 'SetEnvironmentVariableA'
};
// --------------------------------------------------------
// Type: ICreatingProcess
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICreatingProcess = *opaque{
    // TODO: Method 'OnCreating'
};
// --------------------------------------------------------
// Type: ILaunchUIContext
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ILaunchUIContext = *opaque{
    // TODO: Method 'SetAssociatedWindow'
    // TODO: Method 'SetTabGroupingPreference'
};
// --------------------------------------------------------
// Type: ILaunchUIContextProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ILaunchUIContextProvider = *opaque{
    // TODO: Method 'UpdateContext'
};
// --------------------------------------------------------
// Type: _NMCII_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _NMCII_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: _NMCSAEI_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _NMCSAEI_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: INewMenuClient
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const INewMenuClient = *opaque{
    // TODO: Method 'IncludeItems'
    // TODO: Method 'SelectAndEditItem'
};
// --------------------------------------------------------
// Type: IInitializeWithBindCtx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInitializeWithBindCtx = *opaque{
    // TODO: Method 'Initialize'
};
// --------------------------------------------------------
// Type: IShellItemFilter
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellItemFilter = *opaque{
    // TODO: Method 'IncludeItem'
    // TODO: Method 'GetEnumFlagsForItem'
};
// --------------------------------------------------------
// Type: _NSTCSTYLE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _NSTCSTYLE = *opaque{
};
// --------------------------------------------------------
// Type: _NSTCROOTSTYLE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _NSTCROOTSTYLE = *opaque{
};
// --------------------------------------------------------
// Type: _NSTCITEMSTATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _NSTCITEMSTATE = *opaque{
};
// --------------------------------------------------------
// Type: NSTCGNI
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NSTCGNI = *opaque{
};
// --------------------------------------------------------
// Type: INameSpaceTreeControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const INameSpaceTreeControl = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'TreeAdvise'
    // TODO: Method 'TreeUnadvise'
    // TODO: Method 'AppendRoot'
    // TODO: Method 'InsertRoot'
    // TODO: Method 'RemoveRoot'
    // TODO: Method 'RemoveAllRoots'
    // TODO: Method 'GetRootItems'
    // TODO: Method 'SetItemState'
    // TODO: Method 'GetItemState'
    // TODO: Method 'GetSelectedItems'
    // TODO: Method 'GetItemCustomState'
    // TODO: Method 'SetItemCustomState'
    // TODO: Method 'EnsureItemVisible'
    // TODO: Method 'SetTheme'
    // TODO: Method 'GetNextItem'
    // TODO: Method 'HitTest'
    // TODO: Method 'GetItemRect'
    // TODO: Method 'CollapseAll'
};
// --------------------------------------------------------
// Type: NSTCFOLDERCAPABILITIES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NSTCFOLDERCAPABILITIES = *opaque{
};
// --------------------------------------------------------
// Type: INameSpaceTreeControlFolderCapabilities
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const INameSpaceTreeControlFolderCapabilities = *opaque{
    // TODO: Method 'GetFolderCapabilities'
};
// --------------------------------------------------------
// Type: IPreviewHandler
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPreviewHandler = *opaque{
    // TODO: Method 'SetWindow'
    // TODO: Method 'SetRect'
    // TODO: Method 'DoPreview'
    // TODO: Method 'Unload'
    // TODO: Method 'SetFocus'
    // TODO: Method 'QueryFocus'
    // TODO: Method 'TranslateAcceleratorA'
};
// --------------------------------------------------------
// Type: PREVIEWHANDLERFRAMEINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PREVIEWHANDLERFRAMEINFO = extern struct {
    haccel: Windows.Win32.MenusAndResources.HACCEL,
    cAccelEntries: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IPreviewHandlerFrame
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPreviewHandlerFrame = *opaque{
    // TODO: Method 'GetWindowContext'
    // TODO: Method 'TranslateAcceleratorA'
};
// --------------------------------------------------------
// Type: _EXPLORERPANESTATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _EXPLORERPANESTATE = *opaque{
};
// --------------------------------------------------------
// Type: IExplorerPaneVisibility
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IExplorerPaneVisibility = *opaque{
    // TODO: Method 'GetPaneState'
};
// --------------------------------------------------------
// Type: IContextMenuCB
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IContextMenuCB = *opaque{
    // TODO: Method 'CallBack'
};
// --------------------------------------------------------
// Type: IDefaultExtractIconInit
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDefaultExtractIconInit = *opaque{
    // TODO: Method 'SetFlags'
    // TODO: Method 'SetKey'
    // TODO: Method 'SetNormalIcon'
    // TODO: Method 'SetOpenIcon'
    // TODO: Method 'SetShortcutIcon'
    // TODO: Method 'SetDefaultIcon'
};
// --------------------------------------------------------
// Type: _EXPCMDSTATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _EXPCMDSTATE = *opaque{
};
// --------------------------------------------------------
// Type: _EXPCMDFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _EXPCMDFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: IExplorerCommand
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IExplorerCommand = *opaque{
    // TODO: Method 'GetTitle'
    // TODO: Method 'GetIcon'
    // TODO: Method 'GetToolTip'
    // TODO: Method 'GetCanonicalName'
    // TODO: Method 'GetState'
    // TODO: Method 'Invoke'
    // TODO: Method 'GetFlags'
    // TODO: Method 'EnumSubCommands'
};
// --------------------------------------------------------
// Type: IExplorerCommandState
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IExplorerCommandState = *opaque{
    // TODO: Method 'GetState'
};
// --------------------------------------------------------
// Type: IInitializeCommand
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInitializeCommand = *opaque{
    // TODO: Method 'Initialize'
};
// --------------------------------------------------------
// Type: IEnumExplorerCommand
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumExplorerCommand = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IExplorerCommandProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IExplorerCommandProvider = *opaque{
    // TODO: Method 'GetCommands'
    // TODO: Method 'GetCommand'
};
// --------------------------------------------------------
// Type: CPVIEW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CPVIEW = *opaque{
};
// --------------------------------------------------------
// Type: IOpenControlPanel
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOpenControlPanel = *opaque{
    // TODO: Method 'Open'
    // TODO: Method 'GetPath'
    // TODO: Method 'GetCurrentView'
};
// --------------------------------------------------------
// Type: IFileSystemBindData
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFileSystemBindData = *opaque{
    // TODO: Method 'SetFindData'
    // TODO: Method 'GetFindData'
};
// --------------------------------------------------------
// Type: IFileSystemBindData2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFileSystemBindData2 = *opaque{
    // TODO: Method 'SetFileID'
    // TODO: Method 'GetFileID'
    // TODO: Method 'SetJunctionCLSID'
    // TODO: Method 'GetJunctionCLSID'
};
// --------------------------------------------------------
// Type: KNOWNDESTCATEGORY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KNOWNDESTCATEGORY = *opaque{
};
// --------------------------------------------------------
// Type: ICustomDestinationList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICustomDestinationList = *opaque{
    // TODO: Method 'SetAppID'
    // TODO: Method 'BeginList'
    // TODO: Method 'AppendCategory'
    // TODO: Method 'AppendKnownCategory'
    // TODO: Method 'AddUserTasks'
    // TODO: Method 'CommitList'
    // TODO: Method 'GetRemovedDestinations'
    // TODO: Method 'DeleteList'
    // TODO: Method 'AbortList'
};
// --------------------------------------------------------
// Type: IApplicationDestinations
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IApplicationDestinations = *opaque{
    // TODO: Method 'SetAppID'
    // TODO: Method 'RemoveDestination'
    // TODO: Method 'RemoveAllDestinations'
};
// --------------------------------------------------------
// Type: APPDOCLISTTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const APPDOCLISTTYPE = *opaque{
};
// --------------------------------------------------------
// Type: IApplicationDocumentLists
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IApplicationDocumentLists = *opaque{
    // TODO: Method 'SetAppID'
    // TODO: Method 'GetList'
};
// --------------------------------------------------------
// Type: IObjectWithAppUserModelID
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IObjectWithAppUserModelID = *opaque{
    // TODO: Method 'SetAppID'
    // TODO: Method 'GetAppID'
};
// --------------------------------------------------------
// Type: IObjectWithProgID
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IObjectWithProgID = *opaque{
    // TODO: Method 'SetProgID'
    // TODO: Method 'GetProgID'
};
// --------------------------------------------------------
// Type: IUpdateIDList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUpdateIDList = *opaque{
    // TODO: Method 'Update'
};
// --------------------------------------------------------
// Type: DESKTOP_SLIDESHOW_OPTIONS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DESKTOP_SLIDESHOW_OPTIONS = *opaque{
};
// --------------------------------------------------------
// Type: DESKTOP_SLIDESHOW_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DESKTOP_SLIDESHOW_STATE = *opaque{
};
// --------------------------------------------------------
// Type: DESKTOP_SLIDESHOW_DIRECTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DESKTOP_SLIDESHOW_DIRECTION = *opaque{
};
// --------------------------------------------------------
// Type: DESKTOP_WALLPAPER_POSITION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DESKTOP_WALLPAPER_POSITION = *opaque{
};
// --------------------------------------------------------
// Type: IDesktopWallpaper
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDesktopWallpaper = *opaque{
    // TODO: Method 'SetWallpaper'
    // TODO: Method 'GetWallpaper'
    // TODO: Method 'GetMonitorDevicePathAt'
    // TODO: Method 'GetMonitorDevicePathCount'
    // TODO: Method 'GetMonitorRECT'
    // TODO: Method 'SetBackgroundColor'
    // TODO: Method 'GetBackgroundColor'
    // TODO: Method 'SetPosition'
    // TODO: Method 'GetPosition'
    // TODO: Method 'SetSlideshow'
    // TODO: Method 'GetSlideshow'
    // TODO: Method 'SetSlideshowOptions'
    // TODO: Method 'GetSlideshowOptions'
    // TODO: Method 'AdvanceSlideshow'
    // TODO: Method 'GetStatus'
    // TODO: Method 'Enable'
};
// --------------------------------------------------------
// Type: HOMEGROUPSHARINGCHOICES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HOMEGROUPSHARINGCHOICES = *opaque{
};
// --------------------------------------------------------
// Type: IHomeGroup
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHomeGroup = *opaque{
    // TODO: Method 'IsMember'
    // TODO: Method 'ShowSharingWizard'
};
// --------------------------------------------------------
// Type: IInitializeWithPropertyStore
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInitializeWithPropertyStore = *opaque{
    // TODO: Method 'Initialize'
};
// --------------------------------------------------------
// Type: IOpenSearchSource
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOpenSearchSource = *opaque{
    // TODO: Method 'GetResults'
};
// --------------------------------------------------------
// Type: LIBRARYFOLDERFILTER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LIBRARYFOLDERFILTER = *opaque{
};
// --------------------------------------------------------
// Type: LIBRARYOPTIONFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LIBRARYOPTIONFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: DEFAULTSAVEFOLDERTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DEFAULTSAVEFOLDERTYPE = *opaque{
};
// --------------------------------------------------------
// Type: LIBRARYSAVEFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LIBRARYSAVEFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: IShellLibrary
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellLibrary = *opaque{
    // TODO: Method 'LoadLibraryFromItem'
    // TODO: Method 'LoadLibraryFromKnownFolder'
    // TODO: Method 'AddFolder'
    // TODO: Method 'RemoveFolder'
    // TODO: Method 'GetFolders'
    // TODO: Method 'ResolveFolder'
    // TODO: Method 'GetDefaultSaveFolder'
    // TODO: Method 'SetDefaultSaveFolder'
    // TODO: Method 'GetOptions'
    // TODO: Method 'SetOptions'
    // TODO: Method 'GetFolderType'
    // TODO: Method 'SetFolderType'
    // TODO: Method 'GetIcon'
    // TODO: Method 'SetIcon'
    // TODO: Method 'Commit'
    // TODO: Method 'Save'
    // TODO: Method 'SaveInKnownFolder'
};
// --------------------------------------------------------
// Type: DEFAULT_FOLDER_MENU_RESTRICTIONS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DEFAULT_FOLDER_MENU_RESTRICTIONS = *opaque{
};
// --------------------------------------------------------
// Type: IDefaultFolderMenuInitialize
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDefaultFolderMenuInitialize = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'SetMenuRestrictions'
    // TODO: Method 'GetMenuRestrictions'
    // TODO: Method 'SetHandlerClsid'
};
// --------------------------------------------------------
// Type: ACTIVATEOPTIONS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ACTIVATEOPTIONS = *opaque{
};
// --------------------------------------------------------
// Type: IApplicationActivationManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IApplicationActivationManager = *opaque{
    // TODO: Method 'ActivateApplication'
    // TODO: Method 'ActivateForFile'
    // TODO: Method 'ActivateForProtocol'
};
// --------------------------------------------------------
// Type: IVirtualDesktopManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVirtualDesktopManager = *opaque{
    // TODO: Method 'IsWindowOnCurrentVirtualDesktop'
    // TODO: Method 'GetWindowDesktopId'
    // TODO: Method 'MoveWindowToDesktop'
};
// --------------------------------------------------------
// Type: LIBRARYMANAGEDIALOGOPTIONS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LIBRARYMANAGEDIALOGOPTIONS = *opaque{
};
// --------------------------------------------------------
// Type: IAssocHandlerInvoker
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAssocHandlerInvoker = *opaque{
    // TODO: Method 'SupportsSelection'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: AHTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AHTYPE = *opaque{
};
// --------------------------------------------------------
// Type: IAssocHandler
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAssocHandler = *opaque{
    // TODO: Method 'GetName'
    // TODO: Method 'GetUIName'
    // TODO: Method 'GetIconLocation'
    // TODO: Method 'IsRecommended'
    // TODO: Method 'MakeDefault'
    // TODO: Method 'Invoke'
    // TODO: Method 'CreateInvoker'
};
// --------------------------------------------------------
// Type: IEnumAssocHandlers
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumAssocHandlers = *opaque{
    // TODO: Method 'Next'
};
// --------------------------------------------------------
// Type: ASSOC_FILTER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ASSOC_FILTER = *opaque{
};
// --------------------------------------------------------
// Type: IDataObjectProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDataObjectProvider = *opaque{
    // TODO: Method 'GetDataObject'
    // TODO: Method 'SetDataObject'
};
// --------------------------------------------------------
// Type: IDataTransferManagerInterop
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDataTransferManagerInterop = *opaque{
    // TODO: Method 'GetForWindow'
    // TODO: Method 'ShowShareUIForWindow'
};
// --------------------------------------------------------
// Type: IFrameworkInputPaneHandler
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFrameworkInputPaneHandler = *opaque{
    // TODO: Method 'Showing'
    // TODO: Method 'Hiding'
};
// --------------------------------------------------------
// Type: IFrameworkInputPane
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFrameworkInputPane = *opaque{
    // TODO: Method 'Advise'
    // TODO: Method 'AdviseWithHWND'
    // TODO: Method 'Unadvise'
    // TODO: Method 'Location'
};
// --------------------------------------------------------
// Type: MONITOR_APP_VISIBILITY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MONITOR_APP_VISIBILITY = *opaque{
};
// --------------------------------------------------------
// Type: IAppVisibilityEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAppVisibilityEvents = *opaque{
    // TODO: Method 'AppVisibilityOnMonitorChanged'
    // TODO: Method 'LauncherVisibilityChange'
};
// --------------------------------------------------------
// Type: IAppVisibility
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAppVisibility = *opaque{
    // TODO: Method 'GetAppVisibilityOnMonitor'
    // TODO: Method 'IsLauncherVisible'
    // TODO: Method 'Advise'
    // TODO: Method 'Unadvise'
};
// --------------------------------------------------------
// Type: PACKAGE_EXECUTION_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PACKAGE_EXECUTION_STATE = *opaque{
};
// --------------------------------------------------------
// Type: IPackageExecutionStateChangeNotification
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPackageExecutionStateChangeNotification = *opaque{
    // TODO: Method 'OnStateChanged'
};
// --------------------------------------------------------
// Type: IPackageDebugSettings
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPackageDebugSettings = *opaque{
    // TODO: Method 'EnableDebugging'
    // TODO: Method 'DisableDebugging'
    // TODO: Method 'Suspend'
    // TODO: Method 'Resume'
    // TODO: Method 'TerminateAllProcesses'
    // TODO: Method 'SetTargetSessionId'
    // TODO: Method 'EnumerateBackgroundTasks'
    // TODO: Method 'ActivateBackgroundTask'
    // TODO: Method 'StartServicing'
    // TODO: Method 'StopServicing'
    // TODO: Method 'StartSessionRedirection'
    // TODO: Method 'StopSessionRedirection'
    // TODO: Method 'GetPackageExecutionState'
    // TODO: Method 'RegisterForPackageStateChanges'
    // TODO: Method 'UnregisterForPackageStateChanges'
};
// --------------------------------------------------------
// Type: IPackageDebugSettings2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPackageDebugSettings2 = *opaque{
    // TODO: Method 'EnumerateApps'
};
// --------------------------------------------------------
// Type: ISuspensionDependencyManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISuspensionDependencyManager = *opaque{
    // TODO: Method 'RegisterAsChild'
    // TODO: Method 'GroupChildWithParent'
    // TODO: Method 'UngroupChildFromParent'
};
// --------------------------------------------------------
// Type: AHE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AHE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IExecuteCommandApplicationHostEnvironment
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IExecuteCommandApplicationHostEnvironment = *opaque{
    // TODO: Method 'GetValue'
};
// --------------------------------------------------------
// Type: EC_HOST_UI_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EC_HOST_UI_MODE = *opaque{
};
// --------------------------------------------------------
// Type: IExecuteCommandHost
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IExecuteCommandHost = *opaque{
    // TODO: Method 'GetUIMode'
};
// --------------------------------------------------------
// Type: APPLICATION_VIEW_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const APPLICATION_VIEW_STATE = *opaque{
};
// --------------------------------------------------------
// Type: EDGE_GESTURE_KIND
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EDGE_GESTURE_KIND = *opaque{
};
// --------------------------------------------------------
// Type: IApplicationDesignModeSettings
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IApplicationDesignModeSettings = *opaque{
    // TODO: Method 'SetNativeDisplaySize'
    // TODO: Method 'SetScaleFactor'
    // TODO: Method 'SetApplicationViewState'
    // TODO: Method 'ComputeApplicationSize'
    // TODO: Method 'IsApplicationViewStateSupported'
    // TODO: Method 'TriggerEdgeGesture'
};
// --------------------------------------------------------
// Type: NATIVE_DISPLAY_ORIENTATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NATIVE_DISPLAY_ORIENTATION = *opaque{
};
// --------------------------------------------------------
// Type: APPLICATION_VIEW_ORIENTATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const APPLICATION_VIEW_ORIENTATION = *opaque{
};
// --------------------------------------------------------
// Type: ADJACENT_DISPLAY_EDGES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADJACENT_DISPLAY_EDGES = *opaque{
};
// --------------------------------------------------------
// Type: APPLICATION_VIEW_MIN_WIDTH
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const APPLICATION_VIEW_MIN_WIDTH = *opaque{
};
// --------------------------------------------------------
// Type: IApplicationDesignModeSettings2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IApplicationDesignModeSettings2 = *opaque{
    // TODO: Method 'SetNativeDisplayOrientation'
    // TODO: Method 'SetApplicationViewOrientation'
    // TODO: Method 'SetAdjacentDisplayEdges'
    // TODO: Method 'SetIsOnLockScreen'
    // TODO: Method 'SetApplicationViewMinWidth'
    // TODO: Method 'GetApplicationSizeBounds'
    // TODO: Method 'GetApplicationViewOrientation'
};
// --------------------------------------------------------
// Type: ILaunchTargetMonitor
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ILaunchTargetMonitor = *opaque{
    // TODO: Method 'GetMonitor'
};
// --------------------------------------------------------
// Type: APPLICATION_VIEW_SIZE_PREFERENCE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const APPLICATION_VIEW_SIZE_PREFERENCE = *opaque{
};
// --------------------------------------------------------
// Type: ILaunchSourceViewSizePreference
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ILaunchSourceViewSizePreference = *opaque{
    // TODO: Method 'GetSourceViewToPosition'
    // TODO: Method 'GetSourceViewSizePreference'
};
// --------------------------------------------------------
// Type: ILaunchTargetViewSizePreference
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ILaunchTargetViewSizePreference = *opaque{
    // TODO: Method 'GetTargetViewSizePreference'
};
// --------------------------------------------------------
// Type: ILaunchSourceAppUserModelId
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ILaunchSourceAppUserModelId = *opaque{
    // TODO: Method 'GetAppUserModelId'
};
// --------------------------------------------------------
// Type: IInitializeWithWindow
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInitializeWithWindow = *opaque{
    // TODO: Method 'Initialize'
};
// --------------------------------------------------------
// Type: IHandlerInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHandlerInfo = *opaque{
    // TODO: Method 'GetApplicationDisplayName'
    // TODO: Method 'GetApplicationPublisher'
    // TODO: Method 'GetApplicationIconReference'
};
// --------------------------------------------------------
// Type: IHandlerInfo2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHandlerInfo2 = *opaque{
    // TODO: Method 'GetApplicationId'
};
// --------------------------------------------------------
// Type: IHandlerActivationHost
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHandlerActivationHost = *opaque{
    // TODO: Method 'BeforeCoCreateInstance'
    // TODO: Method 'BeforeCreateProcess'
};
// --------------------------------------------------------
// Type: IAppActivationUIInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAppActivationUIInfo = *opaque{
    // TODO: Method 'GetMonitor'
    // TODO: Method 'GetInvokePoint'
    // TODO: Method 'GetShowCommand'
    // TODO: Method 'GetShowUI'
    // TODO: Method 'GetKeyState'
};
// --------------------------------------------------------
// Type: FLYOUT_PLACEMENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FLYOUT_PLACEMENT = *opaque{
};
// --------------------------------------------------------
// Type: IContactManagerInterop
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IContactManagerInterop = *opaque{
    // TODO: Method 'ShowContactCardForWindow'
};
// --------------------------------------------------------
// Type: IShellIconOverlayIdentifier
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellIconOverlayIdentifier = *opaque{
    // TODO: Method 'IsMemberOf'
    // TODO: Method 'GetOverlayInfo'
    // TODO: Method 'GetPriority'
};
// --------------------------------------------------------
// Type: BANNER_NOTIFICATION_EVENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BANNER_NOTIFICATION_EVENT = *opaque{
};
// --------------------------------------------------------
// Type: BANNER_NOTIFICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BANNER_NOTIFICATION = extern struct {
    event: Windows.Win32.Shell.BANNER_NOTIFICATION_EVENT,
    providerIdentity: {"kind""Ptr","child":{"kind":"UInt16"}},
    contentId: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: IBannerNotificationHandler
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IBannerNotificationHandler = *opaque{
    // TODO: Method 'OnBannerEvent'
};
// --------------------------------------------------------
// Type: SORT_ORDER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SORT_ORDER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: ISortColumnArray
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISortColumnArray = *opaque{
    // TODO: Method 'GetCount'
    // TODO: Method 'GetAt'
    // TODO: Method 'GetSortType'
};
// --------------------------------------------------------
// Type: IPropertyKeyStore
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPropertyKeyStore = *opaque{
    // TODO: Method 'GetKeyCount'
    // TODO: Method 'GetKeyAt'
    // TODO: Method 'AppendKey'
    // TODO: Method 'DeleteKey'
    // TODO: Method 'IsKeyInStore'
    // TODO: Method 'RemoveKey'
};
// --------------------------------------------------------
// Type: IQueryCodePage
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IQueryCodePage = *opaque{
    // TODO: Method 'GetCodePage'
    // TODO: Method 'SetCodePage'
};
// --------------------------------------------------------
// Type: FOLDERVIEWOPTIONS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FOLDERVIEWOPTIONS = *opaque{
};
// --------------------------------------------------------
// Type: IFolderViewOptions
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFolderViewOptions = *opaque{
    // TODO: Method 'SetFolderViewOptions'
    // TODO: Method 'GetFolderViewOptions'
};
// --------------------------------------------------------
// Type: _SV3CVW3_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _SV3CVW3_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: IShellView3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellView3 = *opaque{
    // TODO: Method 'CreateViewWindow3'
};
// --------------------------------------------------------
// Type: ISearchBoxInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISearchBoxInfo = *opaque{
    // TODO: Method 'GetCondition'
    // TODO: Method 'GetText'
};
// --------------------------------------------------------
// Type: VPWATERMARKFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VPWATERMARKFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: VPCOLORFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VPCOLORFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: IVisualProperties
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVisualProperties = *opaque{
    // TODO: Method 'SetWatermark'
    // TODO: Method 'SetColor'
    // TODO: Method 'GetColor'
    // TODO: Method 'SetItemHeight'
    // TODO: Method 'GetItemHeight'
    // TODO: Method 'SetFont'
    // TODO: Method 'GetFont'
    // TODO: Method 'SetTheme'
};
// --------------------------------------------------------
// Type: ICommDlgBrowser3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICommDlgBrowser3 = *opaque{
    // TODO: Method 'OnColumnClicked'
    // TODO: Method 'GetCurrentFilter'
    // TODO: Method 'OnPreViewCreated'
};
// --------------------------------------------------------
// Type: IUserAccountChangeCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUserAccountChangeCallback = *opaque{
    // TODO: Method 'OnPictureChange'
};
// --------------------------------------------------------
// Type: IStreamAsync
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IStreamAsync = *opaque{
    // TODO: Method 'ReadAsync'
    // TODO: Method 'WriteAsync'
    // TODO: Method 'OverlappedResult'
    // TODO: Method 'CancelIo'
};
// --------------------------------------------------------
// Type: IStreamUnbufferedInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IStreamUnbufferedInfo = *opaque{
    // TODO: Method 'GetSectorSize'
};
// --------------------------------------------------------
// Type: DSH_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DSH_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: IDragSourceHelper2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDragSourceHelper2 = *opaque{
    // TODO: Method 'SetFlags'
};
// --------------------------------------------------------
// Type: IHWEventHandler
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHWEventHandler = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'HandleEvent'
    // TODO: Method 'HandleEventWithContent'
};
// --------------------------------------------------------
// Type: IHWEventHandler2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHWEventHandler2 = *opaque{
    // TODO: Method 'HandleEventWithHWND'
};
// --------------------------------------------------------
// Type: IQueryCancelAutoPlay
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IQueryCancelAutoPlay = *opaque{
    // TODO: Method 'AllowAutoPlay'
};
// --------------------------------------------------------
// Type: IDynamicHWHandler
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDynamicHWHandler = *opaque{
    // TODO: Method 'GetDynamicInfo'
};
// --------------------------------------------------------
// Type: IUserNotificationCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUserNotificationCallback = *opaque{
    // TODO: Method 'OnBalloonUserClick'
    // TODO: Method 'OnLeftClick'
    // TODO: Method 'OnContextMenu'
};
// --------------------------------------------------------
// Type: IUserNotification2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUserNotification2 = *opaque{
    // TODO: Method 'SetBalloonInfo'
    // TODO: Method 'SetBalloonRetry'
    // TODO: Method 'SetIconInfo'
    // TODO: Method 'Show'
    // TODO: Method 'PlaySoundA'
};
// --------------------------------------------------------
// Type: IDeskBand2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDeskBand2 = *opaque{
    // TODO: Method 'CanRenderComposited'
    // TODO: Method 'SetCompositionState'
    // TODO: Method 'GetCompositionState'
};
// --------------------------------------------------------
// Type: IStartMenuPinnedList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IStartMenuPinnedList = *opaque{
    // TODO: Method 'RemoveFromList'
};
// --------------------------------------------------------
// Type: ICDBurn
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICDBurn = *opaque{
    // TODO: Method 'GetRecorderDriveLetter'
    // TODO: Method 'Burn'
    // TODO: Method 'HasRecordableDrive'
};
// --------------------------------------------------------
// Type: IWizardSite
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWizardSite = *opaque{
    // TODO: Method 'GetPreviousPage'
    // TODO: Method 'GetNextPage'
    // TODO: Method 'GetCancelledPage'
};
// --------------------------------------------------------
// Type: IWizardExtension
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWizardExtension = *opaque{
    // TODO: Method 'AddPages'
    // TODO: Method 'GetFirstPage'
    // TODO: Method 'GetLastPage'
};
// --------------------------------------------------------
// Type: IWebWizardExtension
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWebWizardExtension = *opaque{
    // TODO: Method 'SetInitialURL'
    // TODO: Method 'SetErrorURL'
};
// --------------------------------------------------------
// Type: IPublishingWizard
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPublishingWizard = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'GetTransferManifest'
};
// --------------------------------------------------------
// Type: IFolderViewHost
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFolderViewHost = *opaque{
    // TODO: Method 'Initialize'
};
// --------------------------------------------------------
// Type: IAccessibleObject
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAccessibleObject = *opaque{
    // TODO: Method 'SetAccessibleName'
};
// --------------------------------------------------------
// Type: IResultsFolder
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IResultsFolder = *opaque{
    // TODO: Method 'AddItem'
    // TODO: Method 'AddIDList'
    // TODO: Method 'RemoveItem'
    // TODO: Method 'RemoveIDList'
    // TODO: Method 'RemoveAll'
};
// --------------------------------------------------------
// Type: IAutoCompleteDropDown
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAutoCompleteDropDown = *opaque{
    // TODO: Method 'GetDropDownStatus'
    // TODO: Method 'ResetEnumerator'
};
// --------------------------------------------------------
// Type: tagCDBURNINGEXTENSIONRET
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const tagCDBURNINGEXTENSIONRET = *opaque{
};
// --------------------------------------------------------
// Type: _CDBE_ACTIONS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _CDBE_ACTIONS = *opaque{
};
// --------------------------------------------------------
// Type: ICDBurnExt
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICDBurnExt = *opaque{
    // TODO: Method 'GetSupportedActionTypes'
};
// --------------------------------------------------------
// Type: IEnumReadyCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumReadyCallback = *opaque{
    // TODO: Method 'EnumReady'
};
// --------------------------------------------------------
// Type: IEnumerableView
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumerableView = *opaque{
    // TODO: Method 'SetEnumReadyCallback'
    // TODO: Method 'CreateEnumIDListFromContents'
};
// --------------------------------------------------------
// Type: IInsertItem
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInsertItem = *opaque{
    // TODO: Method 'InsertItem'
};
// --------------------------------------------------------
// Type: IFolderBandPriv
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFolderBandPriv = *opaque{
    // TODO: Method 'SetCascade'
    // TODO: Method 'SetAccelerators'
    // TODO: Method 'SetNoIcons'
    // TODO: Method 'SetNoText'
};
// --------------------------------------------------------
// Type: IImageRecompress
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IImageRecompress = *opaque{
    // TODO: Method 'RecompressImage'
};
// --------------------------------------------------------
// Type: IFileDialogControlEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFileDialogControlEvents = *opaque{
    // TODO: Method 'OnItemSelected'
    // TODO: Method 'OnButtonClicked'
    // TODO: Method 'OnCheckButtonToggled'
    // TODO: Method 'OnControlActivating'
};
// --------------------------------------------------------
// Type: IFileDialog2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFileDialog2 = *opaque{
    // TODO: Method 'SetCancelButtonLabel'
    // TODO: Method 'SetNavigationRoot'
};
// --------------------------------------------------------
// Type: IApplicationAssociationRegistrationUI
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IApplicationAssociationRegistrationUI = *opaque{
    // TODO: Method 'LaunchAdvancedAssociationUI'
};
// --------------------------------------------------------
// Type: IShellRunDll
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellRunDll = *opaque{
    // TODO: Method 'Run'
};
// --------------------------------------------------------
// Type: IPreviousVersionsInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPreviousVersionsInfo = *opaque{
    // TODO: Method 'AreSnapshotsAvailable'
};
// --------------------------------------------------------
// Type: IUseToBrowseItem
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUseToBrowseItem = *opaque{
};
// --------------------------------------------------------
// Type: NSTCSTYLE2
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NSTCSTYLE2 = *opaque{
};
// --------------------------------------------------------
// Type: INameSpaceTreeControl2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const INameSpaceTreeControl2 = *opaque{
    // TODO: Method 'SetControlStyle'
    // TODO: Method 'GetControlStyle'
    // TODO: Method 'SetControlStyle2'
    // TODO: Method 'GetControlStyle2'
};
// --------------------------------------------------------
// Type: _NSTCEHITTEST
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _NSTCEHITTEST = *opaque{
};
// --------------------------------------------------------
// Type: _NSTCECLICKTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _NSTCECLICKTYPE = *opaque{
};
// --------------------------------------------------------
// Type: INameSpaceTreeControlEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const INameSpaceTreeControlEvents = *opaque{
    // TODO: Method 'OnItemClick'
    // TODO: Method 'OnPropertyItemCommit'
    // TODO: Method 'OnItemStateChanging'
    // TODO: Method 'OnItemStateChanged'
    // TODO: Method 'OnSelectionChanged'
    // TODO: Method 'OnKeyboardInput'
    // TODO: Method 'OnBeforeExpand'
    // TODO: Method 'OnAfterExpand'
    // TODO: Method 'OnBeginLabelEdit'
    // TODO: Method 'OnEndLabelEdit'
    // TODO: Method 'OnGetToolTip'
    // TODO: Method 'OnBeforeItemDelete'
    // TODO: Method 'OnItemAdded'
    // TODO: Method 'OnItemDeleted'
    // TODO: Method 'OnBeforeContextMenu'
    // TODO: Method 'OnAfterContextMenu'
    // TODO: Method 'OnBeforeStateImageChange'
    // TODO: Method 'OnGetDefaultIconIndex'
};
// --------------------------------------------------------
// Type: INameSpaceTreeControlDropHandler
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const INameSpaceTreeControlDropHandler = *opaque{
    // TODO: Method 'OnDragEnter'
    // TODO: Method 'OnDragOver'
    // TODO: Method 'OnDragPosition'
    // TODO: Method 'OnDrop'
    // TODO: Method 'OnDropPosition'
    // TODO: Method 'OnDragLeave'
};
// --------------------------------------------------------
// Type: INameSpaceTreeAccessible
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const INameSpaceTreeAccessible = *opaque{
    // TODO: Method 'OnGetDefaultAccessibilityAction'
    // TODO: Method 'OnDoDefaultAccessibilityAction'
    // TODO: Method 'OnGetAccessibilityRole'
};
// --------------------------------------------------------
// Type: NSTCCUSTOMDRAW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NSTCCUSTOMDRAW = extern struct {
    psi: Windows.Win32.Shell.IShellItem,
    uItemState: {"kind":"UInt32"},
    nstcis: {"kind":"UInt32"},
    pszText: {"kind""Ptr","child":{"kind":"UInt16"}},
    iImage: {"kind":"Int32"},
    himl: Windows.Win32.Controls.HIMAGELIST,
    iLevel: {"kind":"Int32"},
    iIndent: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: INameSpaceTreeControlCustomDraw
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const INameSpaceTreeControlCustomDraw = *opaque{
    // TODO: Method 'PrePaint'
    // TODO: Method 'PostPaint'
    // TODO: Method 'ItemPrePaint'
    // TODO: Method 'ItemPostPaint'
};
// --------------------------------------------------------
// Type: ITrayDeskBand
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITrayDeskBand = *opaque{
    // TODO: Method 'ShowDeskBand'
    // TODO: Method 'HideDeskBand'
    // TODO: Method 'IsDeskBandShown'
    // TODO: Method 'DeskBandRegistrationChanged'
};
// --------------------------------------------------------
// Type: IBandHost
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IBandHost = *opaque{
    // TODO: Method 'CreateBand'
    // TODO: Method 'SetBandAvailability'
    // TODO: Method 'DestroyBand'
};
// --------------------------------------------------------
// Type: IComputerInfoChangeNotify
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IComputerInfoChangeNotify = *opaque{
    // TODO: Method 'ComputerInfoChanged'
};
// --------------------------------------------------------
// Type: IDesktopGadget
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDesktopGadget = *opaque{
    // TODO: Method 'RunGadget'
};
// --------------------------------------------------------
// Type: UNDOCK_REASON
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UNDOCK_REASON = *opaque{
};
// --------------------------------------------------------
// Type: IStorageProviderBanners
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IStorageProviderBanners = *opaque{
    // TODO: Method 'SetBanner'
    // TODO: Method 'ClearBanner'
    // TODO: Method 'ClearAllBanners'
    // TODO: Method 'GetBanner'
};
// --------------------------------------------------------
// Type: ShellFolderViewOC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ShellFolderViewOC = opaque {
};
// --------------------------------------------------------
// Type: ShellFolderItem
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ShellFolderItem = opaque {
};
// --------------------------------------------------------
// Type: ShellLinkObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ShellLinkObject = opaque {
};
// --------------------------------------------------------
// Type: ShellFolderView
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ShellFolderView = opaque {
};
// --------------------------------------------------------
// Type: Shell
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const Shell = opaque {
};
// --------------------------------------------------------
// Type: ShellDispatchInproc
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ShellDispatchInproc = opaque {
};
// --------------------------------------------------------
// Type: FileSearchBand
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const FileSearchBand = opaque {
};
// --------------------------------------------------------
// Type: OfflineFolderStatus
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OfflineFolderStatus = *opaque{
};
// --------------------------------------------------------
// Type: ShellFolderViewOptions
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ShellFolderViewOptions = *opaque{
};
// --------------------------------------------------------
// Type: ShellSpecialFolderConstants
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ShellSpecialFolderConstants = *opaque{
};
// --------------------------------------------------------
// Type: IFolderViewOC
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFolderViewOC = *opaque{
    // TODO: Method 'SetFolderView'
};
// --------------------------------------------------------
// Type: DShellFolderViewEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DShellFolderViewEvents = *opaque{
};
// --------------------------------------------------------
// Type: DFConstraint
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DFConstraint = *opaque{
    // TODO: Method 'get_Name'
    // TODO: Method 'get_Value'
};
// --------------------------------------------------------
// Type: FolderItem
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const FolderItem = *opaque{
    // TODO: Method 'get_Application'
    // TODO: Method 'get_Parent'
    // TODO: Method 'get_Name'
    // TODO: Method 'put_Name'
    // TODO: Method 'get_Path'
    // TODO: Method 'get_GetLink'
    // TODO: Method 'get_GetFolder'
    // TODO: Method 'get_IsLink'
    // TODO: Method 'get_IsFolder'
    // TODO: Method 'get_IsFileSystem'
    // TODO: Method 'get_IsBrowsable'
    // TODO: Method 'get_ModifyDate'
    // TODO: Method 'put_ModifyDate'
    // TODO: Method 'get_Size'
    // TODO: Method 'get_Type'
    // TODO: Method 'Verbs'
    // TODO: Method 'InvokeVerb'
};
// --------------------------------------------------------
// Type: FolderItems
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const FolderItems = *opaque{
    // TODO: Method 'get_Count'
    // TODO: Method 'get_Application'
    // TODO: Method 'get_Parent'
    // TODO: Method 'Item'
    // TODO: Method '_NewEnum'
};
// --------------------------------------------------------
// Type: FolderItemVerb
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const FolderItemVerb = *opaque{
    // TODO: Method 'get_Application'
    // TODO: Method 'get_Parent'
    // TODO: Method 'get_Name'
    // TODO: Method 'DoIt'
};
// --------------------------------------------------------
// Type: FolderItemVerbs
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const FolderItemVerbs = *opaque{
    // TODO: Method 'get_Count'
    // TODO: Method 'get_Application'
    // TODO: Method 'get_Parent'
    // TODO: Method 'Item'
    // TODO: Method '_NewEnum'
};
// --------------------------------------------------------
// Type: Folder
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const Folder = *opaque{
    // TODO: Method 'get_Title'
    // TODO: Method 'get_Application'
    // TODO: Method 'get_Parent'
    // TODO: Method 'get_ParentFolder'
    // TODO: Method 'Items'
    // TODO: Method 'ParseName'
    // TODO: Method 'NewFolder'
    // TODO: Method 'MoveHere'
    // TODO: Method 'CopyHere'
    // TODO: Method 'GetDetailsOf'
};
// --------------------------------------------------------
// Type: Folder2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const Folder2 = *opaque{
    // TODO: Method 'get_Self'
    // TODO: Method 'get_OfflineStatus'
    // TODO: Method 'Synchronize'
    // TODO: Method 'get_HaveToShowWebViewBarricade'
    // TODO: Method 'DismissedWebViewBarricade'
};
// --------------------------------------------------------
// Type: Folder3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const Folder3 = *opaque{
    // TODO: Method 'get_ShowWebViewBarricade'
    // TODO: Method 'put_ShowWebViewBarricade'
};
// --------------------------------------------------------
// Type: FolderItem2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const FolderItem2 = *opaque{
    // TODO: Method 'InvokeVerbEx'
    // TODO: Method 'ExtendedProperty'
};
// --------------------------------------------------------
// Type: FolderItems2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const FolderItems2 = *opaque{
    // TODO: Method 'InvokeVerbEx'
};
// --------------------------------------------------------
// Type: FolderItems3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const FolderItems3 = *opaque{
    // TODO: Method 'Filter'
    // TODO: Method 'get_Verbs'
};
// --------------------------------------------------------
// Type: IShellLinkDual
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellLinkDual = *opaque{
    // TODO: Method 'get_Path'
    // TODO: Method 'put_Path'
    // TODO: Method 'get_Description'
    // TODO: Method 'put_Description'
    // TODO: Method 'get_WorkingDirectory'
    // TODO: Method 'put_WorkingDirectory'
    // TODO: Method 'get_Arguments'
    // TODO: Method 'put_Arguments'
    // TODO: Method 'get_Hotkey'
    // TODO: Method 'put_Hotkey'
    // TODO: Method 'get_ShowCommand'
    // TODO: Method 'put_ShowCommand'
    // TODO: Method 'Resolve'
    // TODO: Method 'GetIconLocation'
    // TODO: Method 'SetIconLocation'
    // TODO: Method 'Save'
};
// --------------------------------------------------------
// Type: IShellLinkDual2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellLinkDual2 = *opaque{
    // TODO: Method 'get_Target'
};
// --------------------------------------------------------
// Type: IShellFolderViewDual
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellFolderViewDual = *opaque{
    // TODO: Method 'get_Application'
    // TODO: Method 'get_Parent'
    // TODO: Method 'get_Folder'
    // TODO: Method 'SelectedItems'
    // TODO: Method 'get_FocusedItem'
    // TODO: Method 'SelectItem'
    // TODO: Method 'PopupItemMenu'
    // TODO: Method 'get_Script'
    // TODO: Method 'get_ViewOptions'
};
// --------------------------------------------------------
// Type: IShellFolderViewDual2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellFolderViewDual2 = *opaque{
    // TODO: Method 'get_CurrentViewMode'
    // TODO: Method 'put_CurrentViewMode'
    // TODO: Method 'SelectItemRelative'
};
// --------------------------------------------------------
// Type: IShellFolderViewDual3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellFolderViewDual3 = *opaque{
    // TODO: Method 'get_GroupBy'
    // TODO: Method 'put_GroupBy'
    // TODO: Method 'get_FolderFlags'
    // TODO: Method 'put_FolderFlags'
    // TODO: Method 'get_SortColumns'
    // TODO: Method 'put_SortColumns'
    // TODO: Method 'put_IconSize'
    // TODO: Method 'get_IconSize'
    // TODO: Method 'FilterView'
};
// --------------------------------------------------------
// Type: IShellDispatch
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellDispatch = *opaque{
    // TODO: Method 'get_Application'
    // TODO: Method 'get_Parent'
    // TODO: Method 'NameSpace'
    // TODO: Method 'BrowseForFolder'
    // TODO: Method 'Windows'
    // TODO: Method 'Open'
    // TODO: Method 'Explore'
    // TODO: Method 'MinimizeAll'
    // TODO: Method 'UndoMinimizeALL'
    // TODO: Method 'FileRun'
    // TODO: Method 'CascadeWindows'
    // TODO: Method 'TileVertically'
    // TODO: Method 'TileHorizontally'
    // TODO: Method 'ShutdownWindows'
    // TODO: Method 'Suspend'
    // TODO: Method 'EjectPC'
    // TODO: Method 'SetTime'
    // TODO: Method 'TrayProperties'
    // TODO: Method 'Help'
    // TODO: Method 'FindFiles'
    // TODO: Method 'FindComputer'
    // TODO: Method 'RefreshMenu'
    // TODO: Method 'ControlPanelItem'
};
// --------------------------------------------------------
// Type: IShellDispatch2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellDispatch2 = *opaque{
    // TODO: Method 'IsRestricted'
    // TODO: Method 'ShellExecuteA'
    // TODO: Method 'FindPrinter'
    // TODO: Method 'GetSystemInformation'
    // TODO: Method 'ServiceStart'
    // TODO: Method 'ServiceStop'
    // TODO: Method 'IsServiceRunning'
    // TODO: Method 'CanStartStopService'
    // TODO: Method 'ShowBrowserBar'
};
// --------------------------------------------------------
// Type: IShellDispatch3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellDispatch3 = *opaque{
    // TODO: Method 'AddToRecent'
};
// --------------------------------------------------------
// Type: IShellDispatch4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellDispatch4 = *opaque{
    // TODO: Method 'WindowsSecurity'
    // TODO: Method 'ToggleDesktop'
    // TODO: Method 'ExplorerPolicy'
    // TODO: Method 'GetSetting'
};
// --------------------------------------------------------
// Type: IShellDispatch5
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellDispatch5 = *opaque{
    // TODO: Method 'WindowSwitcher'
};
// --------------------------------------------------------
// Type: IShellDispatch6
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellDispatch6 = *opaque{
    // TODO: Method 'SearchCommand'
};
// --------------------------------------------------------
// Type: IFileSearchBand
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFileSearchBand = *opaque{
    // TODO: Method 'SetFocus'
    // TODO: Method 'SetSearchParameters'
    // TODO: Method 'get_SearchID'
    // TODO: Method 'get_Scope'
    // TODO: Method 'get_QueryFile'
};
// --------------------------------------------------------
// Type: IWebWizardHost
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWebWizardHost = *opaque{
    // TODO: Method 'FinalBack'
    // TODO: Method 'FinalNext'
    // TODO: Method 'Cancel'
    // TODO: Method 'put_Caption'
    // TODO: Method 'get_Caption'
    // TODO: Method 'put_Property'
    // TODO: Method 'get_Property'
    // TODO: Method 'SetWizardButtons'
    // TODO: Method 'SetHeaderText'
};
// --------------------------------------------------------
// Type: IWebWizardHost2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWebWizardHost2 = *opaque{
    // TODO: Method 'SignString'
};
// --------------------------------------------------------
// Type: INewWDEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const INewWDEvents = *opaque{
    // TODO: Method 'PassportAuthenticate'
};
// --------------------------------------------------------
// Type: IAutoComplete
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAutoComplete = *opaque{
    // TODO: Method 'Init'
    // TODO: Method 'Enable'
};
// --------------------------------------------------------
// Type: AUTOCOMPLETEOPTIONS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AUTOCOMPLETEOPTIONS = *opaque{
};
// --------------------------------------------------------
// Type: IAutoComplete2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAutoComplete2 = *opaque{
    // TODO: Method 'SetOptions'
    // TODO: Method 'GetOptions'
};
// --------------------------------------------------------
// Type: ACENUMOPTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ACENUMOPTION = *opaque{
};
// --------------------------------------------------------
// Type: IEnumACString
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumACString = *opaque{
    // TODO: Method 'NextItem'
    // TODO: Method 'SetEnumOptions'
    // TODO: Method 'GetEnumOptions'
};
// --------------------------------------------------------
// Type: IDataObjectAsyncCapability
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDataObjectAsyncCapability = *opaque{
    // TODO: Method 'SetAsyncMode'
    // TODO: Method 'GetAsyncMode'
    // TODO: Method 'StartOperation'
    // TODO: Method 'InOperation'
    // TODO: Method 'EndOperation'
};
// --------------------------------------------------------
// Type: IExtractIconA
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IExtractIconA = *opaque{
    // TODO: Method 'GetIconLocation'
    // TODO: Method 'Extract'
};
// --------------------------------------------------------
// Type: IExtractIconW
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IExtractIconW = *opaque{
    // TODO: Method 'GetIconLocation'
    // TODO: Method 'Extract'
};
// --------------------------------------------------------
// Type: IShellIconOverlayManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellIconOverlayManager = *opaque{
    // TODO: Method 'GetFileOverlayInfo'
    // TODO: Method 'GetReservedOverlayInfo'
    // TODO: Method 'RefreshOverlayImages'
    // TODO: Method 'LoadNonloadedOverlayIdentifiers'
    // TODO: Method 'OverlayIndexFromImageIndex'
};
// --------------------------------------------------------
// Type: IShellIconOverlay
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellIconOverlay = *opaque{
    // TODO: Method 'GetOverlayIndex'
    // TODO: Method 'GetOverlayIconIndex'
};
// --------------------------------------------------------
// Type: SHELL_LINK_DATA_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SHELL_LINK_DATA_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: DATABLOCK_HEADER
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const DATABLOCK_HEADER = *opaque{
};
// --------------------------------------------------------
// Type: NT_CONSOLE_PROPS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const NT_CONSOLE_PROPS = *opaque{
};
// --------------------------------------------------------
// Type: NT_FE_CONSOLE_PROPS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const NT_FE_CONSOLE_PROPS = *opaque{
};
// --------------------------------------------------------
// Type: EXP_DARWIN_LINK
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const EXP_DARWIN_LINK = *opaque{
};
// --------------------------------------------------------
// Type: EXP_SPECIAL_FOLDER
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const EXP_SPECIAL_FOLDER = *opaque{
};
// --------------------------------------------------------
// Type: EXP_SZ_LINK
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const EXP_SZ_LINK = *opaque{
};
// --------------------------------------------------------
// Type: EXP_PROPERTYSTORAGE
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const EXP_PROPERTYSTORAGE = *opaque{
};
// --------------------------------------------------------
// Type: IShellExecuteHookA
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellExecuteHookA = *opaque{
    // TODO: Method 'Execute'
};
// --------------------------------------------------------
// Type: IShellExecuteHookW
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellExecuteHookW = *opaque{
    // TODO: Method 'Execute'
};
// --------------------------------------------------------
// Type: IURLSearchHook
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IURLSearchHook = *opaque{
    // TODO: Method 'Translate'
};
// --------------------------------------------------------
// Type: ISearchContext
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISearchContext = *opaque{
    // TODO: Method 'GetSearchUrl'
    // TODO: Method 'GetSearchText'
    // TODO: Method 'GetSearchStyle'
};
// --------------------------------------------------------
// Type: IURLSearchHook2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IURLSearchHook2 = *opaque{
    // TODO: Method 'TranslateWithSearchContext'
};
// --------------------------------------------------------
// Type: SHGFP_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SHGFP_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: KNOWN_FOLDER_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KNOWN_FOLDER_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: SHFOLDERCUSTOMSETTINGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SHFOLDERCUSTOMSETTINGS = extern struct {
    dwSize: {"kind":"UInt32"},
    dwMask: {"kind":"UInt32"},
    pvid: {"kind""Ptr","child":Guid},
    pszWebViewTemplate: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchWebViewTemplate: {"kind":"UInt32"},
    pszWebViewTemplateVersion: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszInfoTip: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchInfoTip: {"kind":"UInt32"},
    pclsid: {"kind""Ptr","child":Guid},
    dwFlags: {"kind":"UInt32"},
    pszIconFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchIconFile: {"kind":"UInt32"},
    iIconIndex: {"kind":"Int32"},
    pszLogo: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchLogo: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: BROWSEINFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BROWSEINFOA = extern struct {
    hwndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    pidlRoot: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    pszDisplayName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpszTitle: {"kind""Ptr","child":{"kind":"SByte"}},
    ulFlags: {"kind":"UInt32"},
    lpfn: Windows.Win32.ActiveDirectory.BFFCALLBACK,
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
    iImage: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: BROWSEINFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BROWSEINFOW = extern struct {
    hwndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    pidlRoot: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    pszDisplayName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpszTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    ulFlags: {"kind":"UInt32"},
    lpfn: Windows.Win32.ActiveDirectory.BFFCALLBACK,
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
    iImage: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: IShellDetails
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellDetails = *opaque{
    // TODO: Method 'GetDetailsOf'
    // TODO: Method 'ColumnClick'
};
// --------------------------------------------------------
// Type: IObjMgr
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IObjMgr = *opaque{
    // TODO: Method 'Append'
    // TODO: Method 'Remove'
};
// --------------------------------------------------------
// Type: IACList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IACList = *opaque{
    // TODO: Method 'Expand'
};
// --------------------------------------------------------
// Type: AUTOCOMPLETELISTOPTIONS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AUTOCOMPLETELISTOPTIONS = *opaque{
};
// --------------------------------------------------------
// Type: IACList2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IACList2 = *opaque{
    // TODO: Method 'SetOptions'
    // TODO: Method 'GetOptions'
};
// --------------------------------------------------------
// Type: IProgressDialog
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IProgressDialog = *opaque{
    // TODO: Method 'StartProgressDialog'
    // TODO: Method 'StopProgressDialog'
    // TODO: Method 'SetTitle'
    // TODO: Method 'SetAnimation'
    // TODO: Method 'HasUserCancelled'
    // TODO: Method 'SetProgress'
    // TODO: Method 'SetProgress64'
    // TODO: Method 'SetLine'
    // TODO: Method 'SetCancelMsg'
    // TODO: Method 'Timer'
};
// --------------------------------------------------------
// Type: IDockingWindowSite
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDockingWindowSite = *opaque{
    // TODO: Method 'GetBorderDW'
    // TODO: Method 'RequestBorderSpaceDW'
    // TODO: Method 'SetBorderSpaceDW'
};
// --------------------------------------------------------
// Type: NRESARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NRESARRAY = extern struct {
    cItems: {"kind":"UInt32"},
    nr: {"kind":"Array","child": Windows.Win32.Security.NETRESOURCEA},
};
// --------------------------------------------------------
// Type: CIDA
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const CIDA = *opaque{
};
// --------------------------------------------------------
// Type: FD_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FD_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: FILEDESCRIPTORA
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const FILEDESCRIPTORA = *opaque{
};
// --------------------------------------------------------
// Type: FILEDESCRIPTORW
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const FILEDESCRIPTORW = *opaque{
};
// --------------------------------------------------------
// Type: FILEGROUPDESCRIPTORA
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const FILEGROUPDESCRIPTORA = *opaque{
};
// --------------------------------------------------------
// Type: FILEGROUPDESCRIPTORW
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const FILEGROUPDESCRIPTORW = *opaque{
};
// --------------------------------------------------------
// Type: DROPFILES
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const DROPFILES = *opaque{
};
// --------------------------------------------------------
// Type: FILE_ATTRIBUTES_ARRAY
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const FILE_ATTRIBUTES_ARRAY = *opaque{
};
// --------------------------------------------------------
// Type: DROPIMAGETYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DROPIMAGETYPE = *opaque{
};
// --------------------------------------------------------
// Type: DROPDESCRIPTION
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const DROPDESCRIPTION = *opaque{
};
// --------------------------------------------------------
// Type: SHChangeNotifyEntry
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SHChangeNotifyEntry = *opaque{
};
// --------------------------------------------------------
// Type: IShellChangeNotify
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellChangeNotify = *opaque{
    // TODO: Method 'OnChange'
};
// --------------------------------------------------------
// Type: IQueryInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IQueryInfo = *opaque{
    // TODO: Method 'GetInfoTip'
    // TODO: Method 'GetInfoFlags'
};
// --------------------------------------------------------
// Type: SHARD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SHARD = *opaque{
};
// --------------------------------------------------------
// Type: SHARDAPPIDINFO
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SHARDAPPIDINFO = *opaque{
};
// --------------------------------------------------------
// Type: SHARDAPPIDINFOIDLIST
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SHARDAPPIDINFOIDLIST = *opaque{
};
// --------------------------------------------------------
// Type: SHARDAPPIDINFOLINK
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SHARDAPPIDINFOLINK = *opaque{
};
// --------------------------------------------------------
// Type: SHChangeDWORDAsIDList
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SHChangeDWORDAsIDList = *opaque{
};
// --------------------------------------------------------
// Type: SHChangeUpdateImageIDList
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SHChangeUpdateImageIDList = *opaque{
};
// --------------------------------------------------------
// Type: SCNRT_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SCNRT_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: SHDESCRIPTIONID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SHDESCRIPTIONID = extern struct {
    dwDescriptionId: {"kind":"UInt32"},
    clsid: Guid,
};
// --------------------------------------------------------
// Type: AUTO_SCROLL_DATA
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const AUTO_SCROLL_DATA = *opaque{
};
// --------------------------------------------------------
// Type: CABINETSTATE
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const CABINETSTATE = *opaque{
};
// --------------------------------------------------------
// Type: HPSXA__
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const HPSXA__ = *opaque{
};
// --------------------------------------------------------
// Type: RESTRICTIONS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RESTRICTIONS = *opaque{
};
// --------------------------------------------------------
// Type: tagOPEN_AS_INFO_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const tagOPEN_AS_INFO_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: OPENASINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OPENASINFO = extern struct {
    pcszFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcszClass: {"kind""Ptr","child":{"kind":"UInt16"}},
    oaifInFlags: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: IShellFolderViewCB
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellFolderViewCB = *opaque{
    // TODO: Method 'MessageSFVCB'
};
// --------------------------------------------------------
// Type: QCMINFO_IDMAP_PLACEMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QCMINFO_IDMAP_PLACEMENT = extern struct {
    id: {"kind":"UInt32"},
    fFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: QCMINFO_IDMAP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QCMINFO_IDMAP = extern struct {
    nMaxIds: {"kind":"UInt32"},
    pIdList: {"kind":"Array","child": Windows.Win32.Shell.QCMINFO_IDMAP_PLACEMENT},
};
// --------------------------------------------------------
// Type: QCMINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QCMINFO = extern struct {
    hmenu: Windows.Win32.MenusAndResources.HMENU,
    indexMenu: {"kind":"UInt32"},
    idCmdFirst: {"kind":"UInt32"},
    idCmdLast: {"kind":"UInt32"},
    pIdMap: {"kind""Ptr","child":Windows.Win32.Shell.QCMINFO_IDMAP},
};
// --------------------------------------------------------
// Type: DETAILSINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DETAILSINFO = extern struct {
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    fmt: {"kind":"Int32"},
    cxChar: {"kind":"Int32"},
    str: Windows.Win32.Shell.STRRET,
    iImage: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: SFVM_PROPPAGE_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SFVM_PROPPAGE_DATA = extern struct {
    dwReserved: {"kind":"UInt32"},
    pfn: Windows.Win32.Controls.LPFNADDPROPSHEETPAGE,
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
};
// --------------------------------------------------------
// Type: SFVM_HELPTOPIC_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SFVM_HELPTOPIC_DATA = extern struct {
    wszHelpFile: {"kind":"Array","child": {"kind":"UInt16"}},
    wszHelpTopic: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: ITEMSPACING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ITEMSPACING = extern struct {
    cxSmall: {"kind":"Int32"},
    cySmall: {"kind":"Int32"},
    cxLarge: {"kind":"Int32"},
    cyLarge: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: IShellFolderView
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellFolderView = *opaque{
    // TODO: Method 'Rearrange'
    // TODO: Method 'GetArrangeParam'
    // TODO: Method 'ArrangeGrid'
    // TODO: Method 'AutoArrange'
    // TODO: Method 'GetAutoArrange'
    // TODO: Method 'AddObject'
    // TODO: Method 'GetObjectA'
    // TODO: Method 'RemoveObject'
    // TODO: Method 'GetObjectCount'
    // TODO: Method 'SetObjectCount'
    // TODO: Method 'UpdateObject'
    // TODO: Method 'RefreshObject'
    // TODO: Method 'SetRedraw'
    // TODO: Method 'GetSelectedCount'
    // TODO: Method 'GetSelectedObjects'
    // TODO: Method 'IsDropOnSource'
    // TODO: Method 'GetDragPoint'
    // TODO: Method 'GetDropPoint'
    // TODO: Method 'MoveIcons'
    // TODO: Method 'SetItemPos'
    // TODO: Method 'IsBkDropTarget'
    // TODO: Method 'SetClipboard'
    // TODO: Method 'SetPoints'
    // TODO: Method 'GetItemSpacing'
    // TODO: Method 'SetCallback'
    // TODO: Method 'Select'
    // TODO: Method 'QuerySupport'
    // TODO: Method 'SetAutomationObject'
};
// --------------------------------------------------------
// Type: SFV_CREATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SFV_CREATE = extern struct {
    cbSize: {"kind":"UInt32"},
    pshf: Windows.Win32.Shell.IShellFolder,
    psvOuter: Windows.Win32.Shell.IShellView,
    psfvcb: Windows.Win32.Shell.IShellFolderViewCB,
};
// --------------------------------------------------------
// Type: LPFNDFMCALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFNDFMCALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DEFCONTEXTMENU
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEFCONTEXTMENU = extern struct {
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    pcmcb: Windows.Win32.Shell.IContextMenuCB,
    pidlFolder: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    psf: Windows.Win32.Shell.IShellFolder,
    cidl: {"kind":"UInt32"},
    apidl: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST}},
    punkAssociationInfo: Windows.Win32.Com.IUnknown,
    cKeys: {"kind":"UInt32"},
    aKeys: {"kind""Ptr","child":{"kind":"IntPtr"}},
};
// --------------------------------------------------------
// Type: DFMICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DFMICS = extern struct {
    cbSize: {"kind":"UInt32"},
    fMask: {"kind":"UInt32"},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
    idCmdFirst: {"kind":"UInt32"},
    idDefMax: {"kind":"UInt32"},
    pici: {"kind""Ptr","child":Windows.Win32.Shell.CMINVOKECOMMANDINFO},
    punkSite: Windows.Win32.Com.IUnknown,
};
// --------------------------------------------------------
// Type: LPFNVIEWCALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFNVIEWCALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CSFV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CSFV = extern struct {
    cbSize: {"kind":"UInt32"},
    pshf: Windows.Win32.Shell.IShellFolder,
    psvOuter: Windows.Win32.Shell.IShellView,
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    lEvents: {"kind":"Int32"},
    pfnCallback: Windows.Win32.Shell.LPFNVIEWCALLBACK,
    fvm: Windows.Win32.Shell.FOLDERVIEWMODE,
};
// --------------------------------------------------------
// Type: SHELLSTATEA
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SHELLSTATEA = *opaque{
};
// --------------------------------------------------------
// Type: SHELLSTATEW
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SHELLSTATEW = *opaque{
};
// --------------------------------------------------------
// Type: SHELLFLAGSTATE
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SHELLFLAGSTATE = *opaque{
};
// --------------------------------------------------------
// Type: INamedPropertyBag
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const INamedPropertyBag = *opaque{
    // TODO: Method 'ReadPropertyNPB'
    // TODO: Method 'WritePropertyNPB'
    // TODO: Method 'RemovePropertyNPB'
};
// --------------------------------------------------------
// Type: IESHORTCUTFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IESHORTCUTFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: INewShortcutHookA
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const INewShortcutHookA = *opaque{
    // TODO: Method 'SetReferent'
    // TODO: Method 'GetReferent'
    // TODO: Method 'SetFolder'
    // TODO: Method 'GetFolder'
    // TODO: Method 'GetName'
    // TODO: Method 'GetExtension'
};
// --------------------------------------------------------
// Type: INewShortcutHookW
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const INewShortcutHookW = *opaque{
    // TODO: Method 'SetReferent'
    // TODO: Method 'GetReferent'
    // TODO: Method 'SetFolder'
    // TODO: Method 'GetFolder'
    // TODO: Method 'GetName'
    // TODO: Method 'GetExtension'
};
// --------------------------------------------------------
// Type: ICopyHookA
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICopyHookA = *opaque{
    // TODO: Method 'CopyCallback'
};
// --------------------------------------------------------
// Type: ICopyHookW
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICopyHookW = *opaque{
    // TODO: Method 'CopyCallback'
};
// --------------------------------------------------------
// Type: ICurrentWorkingDirectory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICurrentWorkingDirectory = *opaque{
    // TODO: Method 'GetDirectory'
    // TODO: Method 'SetDirectory'
};
// --------------------------------------------------------
// Type: IDockingWindowFrame
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDockingWindowFrame = *opaque{
    // TODO: Method 'AddToolbar'
    // TODO: Method 'RemoveToolbar'
    // TODO: Method 'FindToolbar'
};
// --------------------------------------------------------
// Type: IThumbnailCapture
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IThumbnailCapture = *opaque{
    // TODO: Method 'CaptureThumbnail'
};
// --------------------------------------------------------
// Type: BANDINFOSFB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BANDINFOSFB = extern struct {
    dwMask: {"kind":"UInt32"},
    dwStateMask: {"kind":"UInt32"},
    dwState: {"kind":"UInt32"},
    crBkgnd: {"kind":"UInt32"},
    crBtnLt: {"kind":"UInt32"},
    crBtnDk: {"kind":"UInt32"},
    wViewMode: {"kind":"UInt16"},
    wAlign: {"kind":"UInt16"},
    psf: Windows.Win32.Shell.IShellFolder,
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
};
// --------------------------------------------------------
// Type: IShellFolderBand
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellFolderBand = *opaque{
    // TODO: Method 'InitializeSFB'
    // TODO: Method 'SetBandInfoSFB'
    // TODO: Method 'GetBandInfoSFB'
};
// --------------------------------------------------------
// Type: IDeskBarClient
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDeskBarClient = *opaque{
    // TODO: Method 'SetDeskBarSite'
    // TODO: Method 'SetModeDBC'
    // TODO: Method 'UIActivateDBC'
    // TODO: Method 'GetSize'
};
// --------------------------------------------------------
// Type: SHCOLUMNINFO
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SHCOLUMNINFO = *opaque{
};
// --------------------------------------------------------
// Type: SHCOLUMNINIT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SHCOLUMNINIT = extern struct {
    dwFlags: {"kind":"UInt32"},
    dwReserved: {"kind":"UInt32"},
    wszFolder: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SHCOLUMNDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SHCOLUMNDATA = extern struct {
    dwFlags: {"kind":"UInt32"},
    dwFileAttributes: {"kind":"UInt32"},
    dwReserved: {"kind":"UInt32"},
    pwszExt: {"kind""Ptr","child":{"kind":"UInt16"}},
    wszFile: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: IColumnProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IColumnProvider = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'GetColumnInfo'
    // TODO: Method 'GetItemData'
};
// --------------------------------------------------------
// Type: SHChangeProductKeyAsIDList
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SHChangeProductKeyAsIDList = *opaque{
};
// --------------------------------------------------------
// Type: IDocViewSite
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDocViewSite = *opaque{
    // TODO: Method 'OnSetTitle'
};
// --------------------------------------------------------
// Type: IInitializeObject
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInitializeObject = *opaque{
    // TODO: Method 'Initialize'
};
// --------------------------------------------------------
// Type: IBanneredBar
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IBanneredBar = *opaque{
    // TODO: Method 'SetIconSize'
    // TODO: Method 'GetIconSize'
    // TODO: Method 'SetBitmap'
    // TODO: Method 'GetBitmap'
};
// --------------------------------------------------------
// Type: TBINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TBINFO = extern struct {
    cbuttons: {"kind":"UInt32"},
    uFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SFV_SETITEMPOS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SFV_SETITEMPOS = extern struct {
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    pt: Windows.Win32.DisplayDevices.POINT,
};
// --------------------------------------------------------
// Type: AASHELLMENUFILENAME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AASHELLMENUFILENAME = extern struct {
    cbTotal: {"kind":"Int16"},
    rgbReserved: {"kind":"Array","child": {"kind":"Byte"}},
    szFileName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: AASHELLMENUITEM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AASHELLMENUITEM = extern struct {
    lpReserved1: {"kind""Ptr","child":{"kind":"Void"}},
    iReserved: {"kind":"Int32"},
    uiReserved: {"kind":"UInt32"},
    lpName: {"kind""Ptr","child":Windows.Win32.Shell.AASHELLMENUFILENAME},
    psz: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: DISPLAY_DEVICE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DISPLAY_DEVICE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: SCALE_CHANGE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SCALE_CHANGE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: SHELL_UI_COMPONENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SHELL_UI_COMPONENT = *opaque{
};
// --------------------------------------------------------
// Type: tagSFBS_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const tagSFBS_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: URL_SCHEME
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const URL_SCHEME = *opaque{
};
// --------------------------------------------------------
// Type: URL_PART
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const URL_PART = *opaque{
};
// --------------------------------------------------------
// Type: URLIS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const URLIS = *opaque{
};
// --------------------------------------------------------
// Type: PARSEDURLA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PARSEDURLA = extern struct {
    cbSize: {"kind":"UInt32"},
    pszProtocol: {"kind""Ptr","child":{"kind":"SByte"}},
    cchProtocol: {"kind":"UInt32"},
    pszSuffix: {"kind""Ptr","child":{"kind":"SByte"}},
    cchSuffix: {"kind":"UInt32"},
    nScheme: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PARSEDURLW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PARSEDURLW = extern struct {
    cbSize: {"kind":"UInt32"},
    pszProtocol: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchProtocol: {"kind":"UInt32"},
    pszSuffix: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchSuffix: {"kind":"UInt32"},
    nScheme: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SHREGDEL_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SHREGDEL_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: SHREGENUM_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SHREGENUM_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: ASSOCSTR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ASSOCSTR = *opaque{
};
// --------------------------------------------------------
// Type: ASSOCKEY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ASSOCKEY = *opaque{
};
// --------------------------------------------------------
// Type: ASSOCDATA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ASSOCDATA = *opaque{
};
// --------------------------------------------------------
// Type: ASSOCENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ASSOCENUM = *opaque{
};
// --------------------------------------------------------
// Type: FILETYPEATTRIBUTEFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FILETYPEATTRIBUTEFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: IQueryAssociations
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IQueryAssociations = *opaque{
    // TODO: Method 'Init'
    // TODO: Method 'GetString'
    // TODO: Method 'GetKey'
    // TODO: Method 'GetData'
    // TODO: Method 'GetEnum'
};
// --------------------------------------------------------
// Type: SHGLOBALCOUNTER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SHGLOBALCOUNTER = *opaque{
};
// --------------------------------------------------------
// Type: QITAB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QITAB = extern struct {
    piid: {"kind""Ptr","child":Guid},
    dwOffset: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DLLVERSIONINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DLLVERSIONINFO = extern struct {
    cbSize: {"kind":"UInt32"},
    dwMajorVersion: {"kind":"UInt32"},
    dwMinorVersion: {"kind":"UInt32"},
    dwBuildNumber: {"kind":"UInt32"},
    dwPlatformID: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DLLVERSIONINFO2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DLLVERSIONINFO2 = extern struct {
    info1: Windows.Win32.Shell.DLLVERSIONINFO,
    dwFlags: {"kind":"UInt32"},
    ullVersion: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: DLLGETVERSIONPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DLLGETVERSIONPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: APPINFODATAFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const APPINFODATAFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: APPINFODATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const APPINFODATA = extern struct {
    cbSize: {"kind":"UInt32"},
    dwMask: {"kind":"UInt32"},
    pszDisplayName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszVersion: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszPublisher: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszProductID: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszRegisteredOwner: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszRegisteredCompany: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszLanguage: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszSupportUrl: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszSupportTelephone: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszHelpLink: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszInstallLocation: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszInstallSource: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszInstallDate: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszContact: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszComments: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszImage: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszReadmeUrl: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszUpdateInfoUrl: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: APPACTIONFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const APPACTIONFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: SLOWAPPINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SLOWAPPINFO = extern struct {
    ullSize: {"kind":"UInt64"},
    ftLastUsed: Windows.Win32.WindowsProgramming.FILETIME,
    iTimesUsed: {"kind":"Int32"},
    pszImage: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: IShellApp
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellApp = *opaque{
    // TODO: Method 'GetAppInfo'
    // TODO: Method 'GetPossibleActions'
    // TODO: Method 'GetSlowAppInfo'
    // TODO: Method 'GetCachedSlowAppInfo'
    // TODO: Method 'IsInstalled'
};
// --------------------------------------------------------
// Type: PUBAPPINFOFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PUBAPPINFOFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: PUBAPPINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PUBAPPINFO = extern struct {
    cbSize: {"kind":"UInt32"},
    dwMask: {"kind":"UInt32"},
    pszSource: {"kind""Ptr","child":{"kind":"UInt16"}},
    stAssigned: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    stPublished: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    stScheduled: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    stExpire: Windows.Win32.WindowsProgramming.SYSTEMTIME,
};
// --------------------------------------------------------
// Type: IPublishedApp
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPublishedApp = *opaque{
    // TODO: Method 'Install'
    // TODO: Method 'GetPublishedAppInfo'
    // TODO: Method 'Unschedule'
};
// --------------------------------------------------------
// Type: IPublishedApp2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPublishedApp2 = *opaque{
    // TODO: Method 'Install2'
};
// --------------------------------------------------------
// Type: IEnumPublishedApps
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumPublishedApps = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Reset'
};
// --------------------------------------------------------
// Type: IAppPublisher
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAppPublisher = *opaque{
    // TODO: Method 'GetNumberOfCategories'
    // TODO: Method 'GetCategories'
    // TODO: Method 'GetNumberOfApps'
    // TODO: Method 'EnumApps'
};
// --------------------------------------------------------
// Type: PasswordCredentialProvider
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const PasswordCredentialProvider = opaque {
};
// --------------------------------------------------------
// Type: V1PasswordCredentialProvider
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const V1PasswordCredentialProvider = opaque {
};
// --------------------------------------------------------
// Type: PINLogonCredentialProvider
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const PINLogonCredentialProvider = opaque {
};
// --------------------------------------------------------
// Type: NPCredentialProvider
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const NPCredentialProvider = opaque {
};
// --------------------------------------------------------
// Type: SmartcardCredentialProvider
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SmartcardCredentialProvider = opaque {
};
// --------------------------------------------------------
// Type: V1SmartcardCredentialProvider
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const V1SmartcardCredentialProvider = opaque {
};
// --------------------------------------------------------
// Type: SmartcardPinProvider
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SmartcardPinProvider = opaque {
};
// --------------------------------------------------------
// Type: SmartcardReaderSelectionProvider
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SmartcardReaderSelectionProvider = opaque {
};
// --------------------------------------------------------
// Type: SmartcardWinRTProvider
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SmartcardWinRTProvider = opaque {
};
// --------------------------------------------------------
// Type: GenericCredentialProvider
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const GenericCredentialProvider = opaque {
};
// --------------------------------------------------------
// Type: RASProvider
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const RASProvider = opaque {
};
// --------------------------------------------------------
// Type: OnexCredentialProvider
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const OnexCredentialProvider = opaque {
};
// --------------------------------------------------------
// Type: OnexPlapSmartcardCredentialProvider
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const OnexPlapSmartcardCredentialProvider = opaque {
};
// --------------------------------------------------------
// Type: VaultProvider
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const VaultProvider = opaque {
};
// --------------------------------------------------------
// Type: WinBioCredentialProvider
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WinBioCredentialProvider = opaque {
};
// --------------------------------------------------------
// Type: V1WinBioCredentialProvider
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const V1WinBioCredentialProvider = opaque {
};
// --------------------------------------------------------
// Type: CREDENTIAL_PROVIDER_USAGE_SCENARIO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CREDENTIAL_PROVIDER_USAGE_SCENARIO = *opaque{
};
// --------------------------------------------------------
// Type: CREDENTIAL_PROVIDER_FIELD_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CREDENTIAL_PROVIDER_FIELD_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: CREDENTIAL_PROVIDER_FIELD_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CREDENTIAL_PROVIDER_FIELD_STATE = *opaque{
};
// --------------------------------------------------------
// Type: CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE = *opaque{
};
// --------------------------------------------------------
// Type: CREDENTIAL_PROVIDER_FIELD_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CREDENTIAL_PROVIDER_FIELD_DESCRIPTOR = extern struct {
    dwFieldID: {"kind":"UInt32"},
    cpft: Windows.Win32.Shell.CREDENTIAL_PROVIDER_FIELD_TYPE,
    pszLabel: {"kind""Ptr","child":{"kind":"UInt16"}},
    guidFieldType: Guid,
};
// --------------------------------------------------------
// Type: CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE = *opaque{
};
// --------------------------------------------------------
// Type: CREDENTIAL_PROVIDER_STATUS_ICON
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CREDENTIAL_PROVIDER_STATUS_ICON = *opaque{
};
// --------------------------------------------------------
// Type: CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION = extern struct {
    ulAuthenticationPackage: {"kind":"UInt32"},
    clsidCredentialProvider: Guid,
    cbSerialization: {"kind":"UInt32"},
    rgbSerialization: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS = *opaque{
};
// --------------------------------------------------------
// Type: CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS = *opaque{
};
// --------------------------------------------------------
// Type: ICredentialProviderCredential
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICredentialProviderCredential = *opaque{
    // TODO: Method 'Advise'
    // TODO: Method 'UnAdvise'
    // TODO: Method 'SetSelected'
    // TODO: Method 'SetDeselected'
    // TODO: Method 'GetFieldState'
    // TODO: Method 'GetStringValue'
    // TODO: Method 'GetBitmapValue'
    // TODO: Method 'GetCheckboxValue'
    // TODO: Method 'GetSubmitButtonValue'
    // TODO: Method 'GetComboBoxValueCount'
    // TODO: Method 'GetComboBoxValueAt'
    // TODO: Method 'SetStringValue'
    // TODO: Method 'SetCheckboxValue'
    // TODO: Method 'SetComboBoxSelectedValue'
    // TODO: Method 'CommandLinkClicked'
    // TODO: Method 'GetSerialization'
    // TODO: Method 'ReportResult'
};
// --------------------------------------------------------
// Type: IQueryContinueWithStatus
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IQueryContinueWithStatus = *opaque{
    // TODO: Method 'SetStatusMessage'
};
// --------------------------------------------------------
// Type: IConnectableCredentialProviderCredential
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IConnectableCredentialProviderCredential = *opaque{
    // TODO: Method 'Connect'
    // TODO: Method 'Disconnect'
};
// --------------------------------------------------------
// Type: ICredentialProviderCredentialEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICredentialProviderCredentialEvents = *opaque{
    // TODO: Method 'SetFieldState'
    // TODO: Method 'SetFieldInteractiveState'
    // TODO: Method 'SetFieldString'
    // TODO: Method 'SetFieldCheckbox'
    // TODO: Method 'SetFieldBitmap'
    // TODO: Method 'SetFieldComboBoxSelectedItem'
    // TODO: Method 'DeleteFieldComboBoxItem'
    // TODO: Method 'AppendFieldComboBoxItem'
    // TODO: Method 'SetFieldSubmitButton'
    // TODO: Method 'OnCreatingWindow'
};
// --------------------------------------------------------
// Type: ICredentialProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICredentialProvider = *opaque{
    // TODO: Method 'SetUsageScenario'
    // TODO: Method 'SetSerialization'
    // TODO: Method 'Advise'
    // TODO: Method 'UnAdvise'
    // TODO: Method 'GetFieldDescriptorCount'
    // TODO: Method 'GetFieldDescriptorAt'
    // TODO: Method 'GetCredentialCount'
    // TODO: Method 'GetCredentialAt'
};
// --------------------------------------------------------
// Type: ICredentialProviderEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICredentialProviderEvents = *opaque{
    // TODO: Method 'CredentialsChanged'
};
// --------------------------------------------------------
// Type: ICredentialProviderFilter
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICredentialProviderFilter = *opaque{
    // TODO: Method 'Filter'
    // TODO: Method 'UpdateRemoteCredential'
};
// --------------------------------------------------------
// Type: ICredentialProviderCredential2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICredentialProviderCredential2 = *opaque{
    // TODO: Method 'GetUserSid'
};
// --------------------------------------------------------
// Type: ICredentialProviderCredentialWithFieldOptions
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICredentialProviderCredentialWithFieldOptions = *opaque{
    // TODO: Method 'GetFieldOptions'
};
// --------------------------------------------------------
// Type: ICredentialProviderCredentialEvents2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICredentialProviderCredentialEvents2 = *opaque{
    // TODO: Method 'BeginFieldUpdates'
    // TODO: Method 'EndFieldUpdates'
    // TODO: Method 'SetFieldOptions'
};
// --------------------------------------------------------
// Type: ICredentialProviderUser
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICredentialProviderUser = *opaque{
    // TODO: Method 'GetSid'
    // TODO: Method 'GetProviderID'
    // TODO: Method 'GetStringValue'
    // TODO: Method 'GetValue'
};
// --------------------------------------------------------
// Type: ICredentialProviderUserArray
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICredentialProviderUserArray = *opaque{
    // TODO: Method 'SetProviderFilter'
    // TODO: Method 'GetAccountOptions'
    // TODO: Method 'GetCount'
    // TODO: Method 'GetAt'
};
// --------------------------------------------------------
// Type: ICredentialProviderSetUserArray
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICredentialProviderSetUserArray = *opaque{
    // TODO: Method 'SetUserArray'
};
// --------------------------------------------------------
// Type: SyncMgrClient
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SyncMgrClient = opaque {
};
// --------------------------------------------------------
// Type: SyncMgrControl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SyncMgrControl = opaque {
};
// --------------------------------------------------------
// Type: SyncMgrScheduleWizard
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SyncMgrScheduleWizard = opaque {
};
// --------------------------------------------------------
// Type: SyncMgrFolder
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SyncMgrFolder = opaque {
};
// --------------------------------------------------------
// Type: SyncSetupFolder
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SyncSetupFolder = opaque {
};
// --------------------------------------------------------
// Type: ConflictFolder
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ConflictFolder = opaque {
};
// --------------------------------------------------------
// Type: SyncResultsFolder
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SyncResultsFolder = opaque {
};
// --------------------------------------------------------
// Type: SimpleConflictPresenter
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SimpleConflictPresenter = opaque {
};
// --------------------------------------------------------
// Type: ISyncMgrHandlerCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISyncMgrHandlerCollection = *opaque{
    // TODO: Method 'GetHandlerEnumerator'
    // TODO: Method 'BindToHandler'
};
// --------------------------------------------------------
// Type: SYNCMGR_HANDLER_CAPABILITIES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SYNCMGR_HANDLER_CAPABILITIES = *opaque{
};
// --------------------------------------------------------
// Type: SYNCMGR_HANDLER_POLICIES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SYNCMGR_HANDLER_POLICIES = *opaque{
};
// --------------------------------------------------------
// Type: ISyncMgrHandler
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISyncMgrHandler = *opaque{
    // TODO: Method 'GetName'
    // TODO: Method 'GetHandlerInfo'
    // TODO: Method 'GetObjectA'
    // TODO: Method 'GetCapabilities'
    // TODO: Method 'GetPolicies'
    // TODO: Method 'Activate'
    // TODO: Method 'Enable'
    // TODO: Method 'Synchronize'
};
// --------------------------------------------------------
// Type: SYNCMGR_HANDLER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SYNCMGR_HANDLER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: ISyncMgrHandlerInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISyncMgrHandlerInfo = *opaque{
    // TODO: Method 'GetType'
    // TODO: Method 'GetTypeLabel'
    // TODO: Method 'GetComment'
    // TODO: Method 'GetLastSyncTime'
    // TODO: Method 'IsActive'
    // TODO: Method 'IsEnabled'
    // TODO: Method 'IsConnected'
};
// --------------------------------------------------------
// Type: ISyncMgrSyncItemContainer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISyncMgrSyncItemContainer = *opaque{
    // TODO: Method 'GetSyncItem'
    // TODO: Method 'GetSyncItemEnumerator'
    // TODO: Method 'GetSyncItemCount'
};
// --------------------------------------------------------
// Type: SYNCMGR_ITEM_CAPABILITIES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SYNCMGR_ITEM_CAPABILITIES = *opaque{
};
// --------------------------------------------------------
// Type: SYNCMGR_ITEM_POLICIES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SYNCMGR_ITEM_POLICIES = *opaque{
};
// --------------------------------------------------------
// Type: ISyncMgrSyncItem
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISyncMgrSyncItem = *opaque{
    // TODO: Method 'GetItemID'
    // TODO: Method 'GetName'
    // TODO: Method 'GetItemInfo'
    // TODO: Method 'GetObjectA'
    // TODO: Method 'GetCapabilities'
    // TODO: Method 'GetPolicies'
    // TODO: Method 'Enable'
    // TODO: Method 'Delete'
};
// --------------------------------------------------------
// Type: ISyncMgrSyncItemInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISyncMgrSyncItemInfo = *opaque{
    // TODO: Method 'GetTypeLabel'
    // TODO: Method 'GetComment'
    // TODO: Method 'GetLastSyncTime'
    // TODO: Method 'IsEnabled'
    // TODO: Method 'IsConnected'
};
// --------------------------------------------------------
// Type: IEnumSyncMgrSyncItems
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumSyncMgrSyncItems = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: SYNCMGR_PROGRESS_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SYNCMGR_PROGRESS_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: SYNCMGR_CANCEL_REQUEST
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SYNCMGR_CANCEL_REQUEST = *opaque{
};
// --------------------------------------------------------
// Type: SYNCMGR_EVENT_LEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SYNCMGR_EVENT_LEVEL = *opaque{
};
// --------------------------------------------------------
// Type: SYNCMGR_EVENT_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SYNCMGR_EVENT_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: ISyncMgrSessionCreator
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISyncMgrSessionCreator = *opaque{
    // TODO: Method 'CreateSession'
};
// --------------------------------------------------------
// Type: ISyncMgrSyncCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISyncMgrSyncCallback = *opaque{
    // TODO: Method 'ReportProgress'
    // TODO: Method 'SetHandlerProgressText'
    // TODO: Method 'ReportEventA'
    // TODO: Method 'CanContinue'
    // TODO: Method 'QueryForAdditionalItems'
    // TODO: Method 'AddItemToSession'
    // TODO: Method 'AddIUnknownToSession'
    // TODO: Method 'ProposeItem'
    // TODO: Method 'CommitItem'
    // TODO: Method 'ReportManualSync'
};
// --------------------------------------------------------
// Type: ISyncMgrUIOperation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISyncMgrUIOperation = *opaque{
    // TODO: Method 'Run'
};
// --------------------------------------------------------
// Type: ISyncMgrEventLinkUIOperation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISyncMgrEventLinkUIOperation = *opaque{
    // TODO: Method 'Init'
};
// --------------------------------------------------------
// Type: ISyncMgrScheduleWizardUIOperation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISyncMgrScheduleWizardUIOperation = *opaque{
    // TODO: Method 'InitWizard'
};
// --------------------------------------------------------
// Type: ISyncMgrSyncResult
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISyncMgrSyncResult = *opaque{
    // TODO: Method 'Result'
};
// --------------------------------------------------------
// Type: SYNCMGR_CONTROL_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SYNCMGR_CONTROL_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: SYNCMGR_SYNC_CONTROL_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SYNCMGR_SYNC_CONTROL_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: SYNCMGR_UPDATE_REASON
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SYNCMGR_UPDATE_REASON = *opaque{
};
// --------------------------------------------------------
// Type: ISyncMgrControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISyncMgrControl = *opaque{
    // TODO: Method 'StartHandlerSync'
    // TODO: Method 'StartItemSync'
    // TODO: Method 'StartSyncAll'
    // TODO: Method 'StopHandlerSync'
    // TODO: Method 'StopItemSync'
    // TODO: Method 'StopSyncAll'
    // TODO: Method 'UpdateHandlerCollection'
    // TODO: Method 'UpdateHandler'
    // TODO: Method 'UpdateItem'
    // TODO: Method 'UpdateEvents'
    // TODO: Method 'UpdateConflict'
    // TODO: Method 'UpdateConflicts'
    // TODO: Method 'ActivateHandler'
    // TODO: Method 'EnableHandler'
    // TODO: Method 'EnableItem'
};
// --------------------------------------------------------
// Type: ISyncMgrEventStore
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISyncMgrEventStore = *opaque{
    // TODO: Method 'GetEventEnumerator'
    // TODO: Method 'GetEventCount'
    // TODO: Method 'GetEvent'
    // TODO: Method 'RemoveEvent'
};
// --------------------------------------------------------
// Type: ISyncMgrEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISyncMgrEvent = *opaque{
    // TODO: Method 'GetEventID'
    // TODO: Method 'GetHandlerID'
    // TODO: Method 'GetItemID'
    // TODO: Method 'GetLevel'
    // TODO: Method 'GetFlags'
    // TODO: Method 'GetTime'
    // TODO: Method 'GetName'
    // TODO: Method 'GetDescription'
    // TODO: Method 'GetLinkText'
    // TODO: Method 'GetLinkReference'
    // TODO: Method 'GetContext'
};
// --------------------------------------------------------
// Type: IEnumSyncMgrEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumSyncMgrEvents = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: SYNCMGR_CONFLICT_ID_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYNCMGR_CONFLICT_ID_INFO = extern struct {
    pblobID: {"kind""Ptr","child":Windows.Win32.Com.BYTE_BLOB},
    pblobExtra: {"kind""Ptr","child":Windows.Win32.Com.BYTE_BLOB},
};
// --------------------------------------------------------
// Type: ISyncMgrConflictStore
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISyncMgrConflictStore = *opaque{
    // TODO: Method 'EnumConflicts'
    // TODO: Method 'BindToConflict'
    // TODO: Method 'RemoveConflicts'
    // TODO: Method 'GetCount'
};
// --------------------------------------------------------
// Type: IEnumSyncMgrConflict
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumSyncMgrConflict = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: SYNCMGR_CONFLICT_ITEM_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SYNCMGR_CONFLICT_ITEM_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: ISyncMgrConflict
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISyncMgrConflict = *opaque{
    // TODO: Method 'GetProperty'
    // TODO: Method 'GetConflictIdInfo'
    // TODO: Method 'GetItemsArray'
    // TODO: Method 'Resolve'
    // TODO: Method 'GetResolutionHandler'
};
// --------------------------------------------------------
// Type: SYNCMGR_RESOLUTION_ABILITIES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SYNCMGR_RESOLUTION_ABILITIES = *opaque{
};
// --------------------------------------------------------
// Type: SYNCMGR_RESOLUTION_FEEDBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SYNCMGR_RESOLUTION_FEEDBACK = *opaque{
};
// --------------------------------------------------------
// Type: ISyncMgrResolutionHandler
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISyncMgrResolutionHandler = *opaque{
    // TODO: Method 'QueryAbilities'
    // TODO: Method 'KeepOther'
    // TODO: Method 'KeepRecent'
    // TODO: Method 'RemoveFromSyncSet'
    // TODO: Method 'KeepItems'
};
// --------------------------------------------------------
// Type: ISyncMgrConflictPresenter
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISyncMgrConflictPresenter = *opaque{
    // TODO: Method 'PresentConflict'
};
// --------------------------------------------------------
// Type: SYNCMGR_PRESENTER_NEXT_STEP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SYNCMGR_PRESENTER_NEXT_STEP = *opaque{
};
// --------------------------------------------------------
// Type: SYNCMGR_PRESENTER_CHOICE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SYNCMGR_PRESENTER_CHOICE = *opaque{
};
// --------------------------------------------------------
// Type: ISyncMgrConflictResolveInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISyncMgrConflictResolveInfo = *opaque{
    // TODO: Method 'GetIterationInfo'
    // TODO: Method 'GetPresenterNextStep'
    // TODO: Method 'GetPresenterChoice'
    // TODO: Method 'GetItemChoiceCount'
    // TODO: Method 'GetItemChoice'
    // TODO: Method 'SetPresenterNextStep'
    // TODO: Method 'SetPresenterChoice'
    // TODO: Method 'SetItemChoices'
};
// --------------------------------------------------------
// Type: ISyncMgrConflictFolder
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISyncMgrConflictFolder = *opaque{
    // TODO: Method 'GetConflictIDList'
};
// --------------------------------------------------------
// Type: CONFIRM_CONFLICT_ITEM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CONFIRM_CONFLICT_ITEM = extern struct {
    pShellItem: Windows.Win32.Shell.IShellItem2,
    pszOriginalName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszAlternateName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszLocationShort: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszLocationFull: {"kind""Ptr","child":{"kind":"UInt16"}},
    nType: Windows.Win32.Shell.SYNCMGR_CONFLICT_ITEM_TYPE,
};
// --------------------------------------------------------
// Type: CONFIRM_CONFLICT_RESULT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CONFIRM_CONFLICT_RESULT_INFO = extern struct {
    pszNewName: {"kind""Ptr","child":{"kind":"UInt16"}},
    iItemIndex: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: ISyncMgrConflictItems
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISyncMgrConflictItems = *opaque{
    // TODO: Method 'GetCount'
    // TODO: Method 'GetItem'
};
// --------------------------------------------------------
// Type: ISyncMgrConflictResolutionItems
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISyncMgrConflictResolutionItems = *opaque{
    // TODO: Method 'GetCount'
    // TODO: Method 'GetItem'
};
// --------------------------------------------------------
// Type: InputPanelConfiguration
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const InputPanelConfiguration = opaque {
};
// --------------------------------------------------------
// Type: IInputPanelConfiguration
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInputPanelConfiguration = *opaque{
    // TODO: Method 'EnableFocusTracking'
};
// --------------------------------------------------------
// Type: IInputPanelInvocationConfiguration
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInputPanelInvocationConfiguration = *opaque{
    // TODO: Method 'RequireTouchInEditControl'
};
// --------------------------------------------------------
// Type: LocalThumbnailCache
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const LocalThumbnailCache = opaque {
};
// --------------------------------------------------------
// Type: SharedBitmap
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SharedBitmap = opaque {
};
// --------------------------------------------------------
// Type: WTS_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WTS_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: WTS_CACHEFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WTS_CACHEFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: WTS_CONTEXTFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WTS_CONTEXTFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: WTS_ALPHATYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WTS_ALPHATYPE = *opaque{
};
// --------------------------------------------------------
// Type: WTS_THUMBNAILID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTS_THUMBNAILID = extern struct {
    rgbKey: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: ISharedBitmap
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISharedBitmap = *opaque{
    // TODO: Method 'GetSharedBitmap'
    // TODO: Method 'GetSize'
    // TODO: Method 'GetFormat'
    // TODO: Method 'InitializeBitmap'
    // TODO: Method 'Detach'
};
// --------------------------------------------------------
// Type: IThumbnailCache
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IThumbnailCache = *opaque{
    // TODO: Method 'GetThumbnail'
    // TODO: Method 'GetThumbnailByID'
};
// --------------------------------------------------------
// Type: IThumbnailProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IThumbnailProvider = *opaque{
    // TODO: Method 'GetThumbnail'
};
// --------------------------------------------------------
// Type: IThumbnailSettings
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IThumbnailSettings = *opaque{
    // TODO: Method 'SetContext'
};
// --------------------------------------------------------
// Type: IThumbnailCachePrimer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IThumbnailCachePrimer = *opaque{
    // TODO: Method 'PageInThumbnail'
};
// --------------------------------------------------------
// Type: ShellImageDataFactory
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ShellImageDataFactory = opaque {
};
// --------------------------------------------------------
// Type: IShellImageDataFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellImageDataFactory = *opaque{
    // TODO: Method 'CreateIShellImageData'
    // TODO: Method 'CreateImageFromFile'
    // TODO: Method 'CreateImageFromStream'
    // TODO: Method 'GetDataFormatFromPath'
};
// --------------------------------------------------------
// Type: IShellImageData
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellImageData = *opaque{
    // TODO: Method 'Decode'
    // TODO: Method 'Draw'
    // TODO: Method 'NextFrame'
    // TODO: Method 'NextPage'
    // TODO: Method 'PrevPage'
    // TODO: Method 'IsTransparent'
    // TODO: Method 'IsAnimated'
    // TODO: Method 'IsVector'
    // TODO: Method 'IsMultipage'
    // TODO: Method 'IsEditable'
    // TODO: Method 'IsPrintable'
    // TODO: Method 'IsDecoded'
    // TODO: Method 'GetCurrentPage'
    // TODO: Method 'GetPageCount'
    // TODO: Method 'SelectPage'
    // TODO: Method 'GetSize'
    // TODO: Method 'GetRawDataFormat'
    // TODO: Method 'GetPixelFormat'
    // TODO: Method 'GetDelay'
    // TODO: Method 'GetProperties'
    // TODO: Method 'Rotate'
    // TODO: Method 'Scale'
    // TODO: Method 'DiscardEdit'
    // TODO: Method 'SetEncoderParams'
    // TODO: Method 'DisplayName'
    // TODO: Method 'GetResolution'
    // TODO: Method 'GetEncoderParams'
    // TODO: Method 'RegisterAbort'
    // TODO: Method 'CloneFrame'
    // TODO: Method 'ReplaceFrame'
};
// --------------------------------------------------------
// Type: IShellImageDataAbort
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellImageDataAbort = *opaque{
    // TODO: Method 'QueryAbort'
};
// --------------------------------------------------------
// Type: IStorageProviderPropertyHandler
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IStorageProviderPropertyHandler = *opaque{
    // TODO: Method 'RetrieveProperties'
    // TODO: Method 'SaveProperties'
};
// --------------------------------------------------------
// Type: IStorageProviderHandler
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IStorageProviderHandler = *opaque{
    // TODO: Method 'GetPropertyHandlerFromPath'
    // TODO: Method 'GetPropertyHandlerFromUri'
    // TODO: Method 'GetPropertyHandlerFromFileId'
};
// --------------------------------------------------------
// Type: SyncMgr
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SyncMgr = opaque {
};
// --------------------------------------------------------
// Type: SYNCMGRSTATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SYNCMGRSTATUS = *opaque{
};
// --------------------------------------------------------
// Type: SYNCMGRPROGRESSITEM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYNCMGRPROGRESSITEM = extern struct {
    cbSize: {"kind":"UInt32"},
    mask: {"kind":"UInt32"},
    lpcStatusText: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwStatusType: {"kind":"UInt32"},
    iProgValue: {"kind":"Int32"},
    iMaxValue: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: SYNCMGRLOGLEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SYNCMGRLOGLEVEL = *opaque{
};
// --------------------------------------------------------
// Type: SYNCMGRERRORFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SYNCMGRERRORFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: SYNCMGRLOGERRORINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYNCMGRLOGERRORINFO = extern struct {
    cbSize: {"kind":"UInt32"},
    mask: {"kind":"UInt32"},
    dwSyncMgrErrorFlags: {"kind":"UInt32"},
    ErrorID: Guid,
    ItemID: Guid,
};
// --------------------------------------------------------
// Type: ISyncMgrSynchronizeCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISyncMgrSynchronizeCallback = *opaque{
    // TODO: Method 'ShowPropertiesCompleted'
    // TODO: Method 'PrepareForSyncCompleted'
    // TODO: Method 'SynchronizeCompleted'
    // TODO: Method 'ShowErrorCompleted'
    // TODO: Method 'EnableModeless'
    // TODO: Method 'Progress'
    // TODO: Method 'LogError'
    // TODO: Method 'DeleteLogError'
    // TODO: Method 'EstablishConnection'
};
// --------------------------------------------------------
// Type: SYNCMGRITEMFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SYNCMGRITEMFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: SYNCMGRITEM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYNCMGRITEM = extern struct {
    cbSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    ItemID: Guid,
    dwItemState: {"kind":"UInt32"},
    hIcon: Windows.Win32.Gdi.HICON,
    wszItemName: {"kind":"Array","child": {"kind":"UInt16"}},
    ftLastUpdate: Windows.Win32.WindowsProgramming.FILETIME,
};
// --------------------------------------------------------
// Type: ISyncMgrEnumItems
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISyncMgrEnumItems = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: SYNCMGRFLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SYNCMGRFLAG = *opaque{
};
// --------------------------------------------------------
// Type: SYNCMGRHANDLERFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SYNCMGRHANDLERFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: SYNCMGRHANDLERINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYNCMGRHANDLERINFO = extern struct {
    cbSize: {"kind":"UInt32"},
    hIcon: Windows.Win32.Gdi.HICON,
    SyncMgrHandlerFlags: {"kind":"UInt32"},
    wszHandlerName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SYNCMGRITEMSTATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SYNCMGRITEMSTATE = *opaque{
};
// --------------------------------------------------------
// Type: ISyncMgrSynchronize
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISyncMgrSynchronize = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'GetHandlerInfo'
    // TODO: Method 'EnumSyncMgrItems'
    // TODO: Method 'GetItemObject'
    // TODO: Method 'ShowProperties'
    // TODO: Method 'SetProgressCallback'
    // TODO: Method 'PrepareForSync'
    // TODO: Method 'Synchronize'
    // TODO: Method 'SetItemStatus'
    // TODO: Method 'ShowError'
};
// --------------------------------------------------------
// Type: SYNCMGRINVOKEFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SYNCMGRINVOKEFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: ISyncMgrSynchronizeInvoke
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISyncMgrSynchronizeInvoke = *opaque{
    // TODO: Method 'UpdateItems'
    // TODO: Method 'UpdateAll'
};
// --------------------------------------------------------
// Type: SYNCMGRREGISTERFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SYNCMGRREGISTERFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: ISyncMgrRegister
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISyncMgrRegister = *opaque{
    // TODO: Method 'RegisterSyncMgrHandler'
    // TODO: Method 'UnregisterSyncMgrHandler'
    // TODO: Method 'GetHandlerRegistrationInfo'
};
// --------------------------------------------------------
// Type: ThumbnailStreamCache
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ThumbnailStreamCache = opaque {
};
// --------------------------------------------------------
// Type: ThumbnailStreamCacheOptions
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ThumbnailStreamCacheOptions = *opaque{
};
// --------------------------------------------------------
// Type: IThumbnailStreamCache
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IThumbnailStreamCache = *opaque{
    // TODO: Method 'GetThumbnailStream'
    // TODO: Method 'SetThumbnailStream'
};
// --------------------------------------------------------
// Type: TrackShellMenu
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const TrackShellMenu = opaque {
};
// --------------------------------------------------------
// Type: WINDOWDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WINDOWDATA = extern struct {
    dwWindowID: {"kind":"UInt32"},
    uiCP: {"kind":"UInt32"},
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    lpszUrl: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpszUrlLocation: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpszTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: ITravelLogEntry
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITravelLogEntry = *opaque{
    // TODO: Method 'GetTitle'
    // TODO: Method 'GetURL'
};
// --------------------------------------------------------
// Type: ITravelLogClient
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITravelLogClient = *opaque{
    // TODO: Method 'FindWindowByIndex'
    // TODO: Method 'GetWindowData'
    // TODO: Method 'LoadHistoryPosition'
};
// --------------------------------------------------------
// Type: IEnumTravelLogEntry
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumTravelLogEntry = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: tagTLENUMF
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const tagTLENUMF = *opaque{
};
// --------------------------------------------------------
// Type: ITravelLogStg
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITravelLogStg = *opaque{
    // TODO: Method 'CreateEntry'
    // TODO: Method 'TravelTo'
    // TODO: Method 'EnumEntries'
    // TODO: Method 'FindEntries'
    // TODO: Method 'GetCount'
    // TODO: Method 'RemoveEntry'
    // TODO: Method 'GetRelativeEntry'
};
// --------------------------------------------------------
// Type: _HLSR_NOREDEF10
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _HLSR_NOREDEF10 = *opaque{
};
// --------------------------------------------------------
// Type: _HLSHORTCUTF__NOREDEF10
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _HLSHORTCUTF__NOREDEF10 = *opaque{
};
// --------------------------------------------------------
// Type: _HLTRANSLATEF_NOREDEF10
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _HLTRANSLATEF_NOREDEF10 = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL_IHlink_0001
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL_IHlink_0001 = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL_IHlink_0002
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL_IHlink_0002 = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL_IHlink_0003
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL_IHlink_0003 = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL_IHlink_0004
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL_IHlink_0004 = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL_IHlink_0005
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL_IHlink_0005 = *opaque{
};
// --------------------------------------------------------
// Type: IHlink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHlink = *opaque{
    // TODO: Method 'SetHlinkSite'
    // TODO: Method 'GetHlinkSite'
    // TODO: Method 'SetMonikerReference'
    // TODO: Method 'GetMonikerReference'
    // TODO: Method 'SetStringReference'
    // TODO: Method 'GetStringReference'
    // TODO: Method 'SetFriendlyName'
    // TODO: Method 'GetFriendlyName'
    // TODO: Method 'SetTargetFrameName'
    // TODO: Method 'GetTargetFrameName'
    // TODO: Method 'GetMiscStatus'
    // TODO: Method 'Navigate'
    // TODO: Method 'SetAdditionalParams'
    // TODO: Method 'GetAdditionalParams'
};
// --------------------------------------------------------
// Type: __MIDL_IHlinkSite_0001
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL_IHlinkSite_0001 = *opaque{
};
// --------------------------------------------------------
// Type: IHlinkSite
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHlinkSite = *opaque{
    // TODO: Method 'QueryService'
    // TODO: Method 'GetMoniker'
    // TODO: Method 'ReadyToNavigate'
    // TODO: Method 'OnNavigationComplete'
};
// --------------------------------------------------------
// Type: IHlinkTarget
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHlinkTarget = *opaque{
    // TODO: Method 'SetBrowseContext'
    // TODO: Method 'GetBrowseContext'
    // TODO: Method 'Navigate'
    // TODO: Method 'GetMoniker'
    // TODO: Method 'GetFriendlyName'
};
// --------------------------------------------------------
// Type: IHlinkFrame
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHlinkFrame = *opaque{
    // TODO: Method 'SetBrowseContext'
    // TODO: Method 'GetBrowseContext'
    // TODO: Method 'Navigate'
    // TODO: Method 'OnNavigate'
    // TODO: Method 'UpdateHlink'
};
// --------------------------------------------------------
// Type: HLITEM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HLITEM = extern struct {
    uHLID: {"kind":"UInt32"},
    pwzFriendlyName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: IEnumHLITEM
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumHLITEM = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: __MIDL_IHlinkBrowseContext_0001
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL_IHlinkBrowseContext_0001 = *opaque{
};
// --------------------------------------------------------
// Type: HLTBINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HLTBINFO = extern struct {
    uDockType: {"kind":"UInt32"},
    rcTbPos: Windows.Win32.DisplayDevices.RECT,
};
// --------------------------------------------------------
// Type: __MIDL_IHlinkBrowseContext_0002
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL_IHlinkBrowseContext_0002 = *opaque{
};
// --------------------------------------------------------
// Type: HLBWINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HLBWINFO = extern struct {
    cbSize: {"kind":"UInt32"},
    grfHLBWIF: {"kind":"UInt32"},
    rcFramePos: Windows.Win32.DisplayDevices.RECT,
    rcDocPos: Windows.Win32.DisplayDevices.RECT,
    hltbinfo: Windows.Win32.Shell.HLTBINFO,
};
// --------------------------------------------------------
// Type: __MIDL_IHlinkBrowseContext_0003
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL_IHlinkBrowseContext_0003 = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL_IHlinkBrowseContext_0004
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL_IHlinkBrowseContext_0004 = *opaque{
};
// --------------------------------------------------------
// Type: IHlinkBrowseContext
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHlinkBrowseContext = *opaque{
    // TODO: Method 'Register'
    // TODO: Method 'GetObjectA'
    // TODO: Method 'Revoke'
    // TODO: Method 'SetBrowseWindowInfo'
    // TODO: Method 'GetBrowseWindowInfo'
    // TODO: Method 'SetInitialHlink'
    // TODO: Method 'OnNavigateHlink'
    // TODO: Method 'UpdateHlink'
    // TODO: Method 'EnumNavigationStack'
    // TODO: Method 'QueryHlink'
    // TODO: Method 'GetHlink'
    // TODO: Method 'SetCurrentHlink'
    // TODO: Method 'Clone'
    // TODO: Method 'Close'
};
// --------------------------------------------------------
// Type: IExtensionServices
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IExtensionServices = *opaque{
    // TODO: Method 'SetAdditionalHeaders'
    // TODO: Method 'SetAuthenticateData'
};
// --------------------------------------------------------
// Type: ITravelEntry
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITravelEntry = *opaque{
    // TODO: Method 'Invoke'
    // TODO: Method 'Update'
    // TODO: Method 'GetPidl'
};
// --------------------------------------------------------
// Type: ITravelLog
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITravelLog = *opaque{
    // TODO: Method 'AddEntry'
    // TODO: Method 'UpdateEntry'
    // TODO: Method 'UpdateExternal'
    // TODO: Method 'Travel'
    // TODO: Method 'GetTravelEntry'
    // TODO: Method 'FindTravelEntry'
    // TODO: Method 'GetToolTipText'
    // TODO: Method 'InsertMenuEntries'
    // TODO: Method 'Clone'
    // TODO: Method 'CountEntries'
    // TODO: Method 'Revert'
};
// --------------------------------------------------------
// Type: CIE4ConnectionPoint
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const CIE4ConnectionPoint = *opaque{
    // TODO: Method 'DoInvokeIE4'
    // TODO: Method 'DoInvokePIDLIE4'
};
// --------------------------------------------------------
// Type: IExpDispSupportXP
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IExpDispSupportXP = *opaque{
    // TODO: Method 'FindCIE4ConnectionPoint'
    // TODO: Method 'OnTranslateAccelerator'
    // TODO: Method 'OnInvoke'
};
// --------------------------------------------------------
// Type: IExpDispSupport
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IExpDispSupport = *opaque{
    // TODO: Method 'FindConnectionPoint'
    // TODO: Method 'OnTranslateAccelerator'
    // TODO: Method 'OnInvoke'
};
// --------------------------------------------------------
// Type: BNSTATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BNSTATE = *opaque{
};
// --------------------------------------------------------
// Type: SHELLBROWSERSHOWCONTROL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SHELLBROWSERSHOWCONTROL = *opaque{
};
// --------------------------------------------------------
// Type: IBrowserService
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IBrowserService = *opaque{
    // TODO: Method 'GetParentSite'
    // TODO: Method 'SetTitle'
    // TODO: Method 'GetTitle'
    // TODO: Method 'GetOleObject'
    // TODO: Method 'GetTravelLog'
    // TODO: Method 'ShowControlWindow'
    // TODO: Method 'IsControlWindowShown'
    // TODO: Method 'IEGetDisplayName'
    // TODO: Method 'IEParseDisplayName'
    // TODO: Method 'DisplayParseError'
    // TODO: Method 'NavigateToPidl'
    // TODO: Method 'SetNavigateState'
    // TODO: Method 'GetNavigateState'
    // TODO: Method 'NotifyRedirect'
    // TODO: Method 'UpdateWindowList'
    // TODO: Method 'UpdateBackForwardState'
    // TODO: Method 'SetFlags'
    // TODO: Method 'GetFlags'
    // TODO: Method 'CanNavigateNow'
    // TODO: Method 'GetPidl'
    // TODO: Method 'SetReferrer'
    // TODO: Method 'GetBrowserIndex'
    // TODO: Method 'GetBrowserByIndex'
    // TODO: Method 'GetHistoryObject'
    // TODO: Method 'SetHistoryObject'
    // TODO: Method 'CacheOLEServer'
    // TODO: Method 'GetSetCodePage'
    // TODO: Method 'OnHttpEquiv'
    // TODO: Method 'GetPalette'
    // TODO: Method 'RegisterWindow'
};
// --------------------------------------------------------
// Type: IShellService
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellService = *opaque{
    // TODO: Method 'SetOwner'
};
// --------------------------------------------------------
// Type: SECURELOCKCODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SECURELOCKCODE = *opaque{
};
// --------------------------------------------------------
// Type: BASEBROWSERDATAXP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BASEBROWSERDATAXP = extern struct {
    _hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    _ptl: Windows.Win32.Shell.ITravelLog,
    _phlf: Windows.Win32.Shell.IHlinkFrame,
    _pautoWB2: Windows.Win32.WindowsProgramming.IWebBrowser2,
    _pautoEDS: Windows.Win32.Shell.IExpDispSupportXP,
    _pautoSS: Windows.Win32.Shell.IShellService,
    _eSecureLockIcon: {"kind":"Int32"},
    _bitfield: {"kind":"UInt32"},
    _uActivateState: {"kind":"UInt32"},
    _pidlViewState: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    _pctView: Windows.Win32.Com.IOleCommandTarget,
    _pidlCur: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    _psv: Windows.Win32.Shell.IShellView,
    _psf: Windows.Win32.Shell.IShellFolder,
    _hwndView: Windows.Win32.WindowsAndMessaging.HWND,
    _pszTitleCur: {"kind""Ptr","child":{"kind":"UInt16"}},
    _pidlPending: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    _psvPending: Windows.Win32.Shell.IShellView,
    _psfPending: Windows.Win32.Shell.IShellFolder,
    _hwndViewPending: Windows.Win32.WindowsAndMessaging.HWND,
    _pszTitlePending: {"kind""Ptr","child":{"kind":"UInt16"}},
    _fIsViewMSHTML: Windows.Win32.SystemServices.BOOL,
    _fPrivacyImpacted: Windows.Win32.SystemServices.BOOL,
    _clsidView: Guid,
    _clsidViewPending: Guid,
    _hwndFrame: Windows.Win32.WindowsAndMessaging.HWND,
};
// --------------------------------------------------------
// Type: BASEBROWSERDATALH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BASEBROWSERDATALH = extern struct {
    _hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    _ptl: Windows.Win32.Shell.ITravelLog,
    _phlf: Windows.Win32.Shell.IHlinkFrame,
    _pautoWB2: Windows.Win32.WindowsProgramming.IWebBrowser2,
    _pautoEDS: Windows.Win32.Shell.IExpDispSupport,
    _pautoSS: Windows.Win32.Shell.IShellService,
    _eSecureLockIcon: {"kind":"Int32"},
    _bitfield: {"kind":"UInt32"},
    _uActivateState: {"kind":"UInt32"},
    _pidlViewState: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    _pctView: Windows.Win32.Com.IOleCommandTarget,
    _pidlCur: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    _psv: Windows.Win32.Shell.IShellView,
    _psf: Windows.Win32.Shell.IShellFolder,
    _hwndView: Windows.Win32.WindowsAndMessaging.HWND,
    _pszTitleCur: {"kind""Ptr","child":{"kind":"UInt16"}},
    _pidlPending: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    _psvPending: Windows.Win32.Shell.IShellView,
    _psfPending: Windows.Win32.Shell.IShellFolder,
    _hwndViewPending: Windows.Win32.WindowsAndMessaging.HWND,
    _pszTitlePending: {"kind""Ptr","child":{"kind":"UInt16"}},
    _fIsViewMSHTML: Windows.Win32.SystemServices.BOOL,
    _fPrivacyImpacted: Windows.Win32.SystemServices.BOOL,
    _clsidView: Guid,
    _clsidViewPending: Guid,
    _hwndFrame: Windows.Win32.WindowsAndMessaging.HWND,
    _lPhishingFilterStatus: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: FOLDERSETDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FOLDERSETDATA = extern struct {
    _fs: Windows.Win32.Shell.FOLDERSETTINGS,
    _vidRestore: Guid,
    _dwViewPriority: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: TOOLBARITEM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOOLBARITEM = extern struct {
    ptbar: Windows.Win32.Shell.IDockingWindow,
    rcBorderTool: Windows.Win32.DisplayDevices.RECT,
    pwszItem: {"kind""Ptr","child":{"kind":"UInt16"}},
    fShow: Windows.Win32.SystemServices.BOOL,
    hMon: {"kind":"IntPtr"},
};
// --------------------------------------------------------
// Type: IBrowserService2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IBrowserService2 = *opaque{
    // TODO: Method 'WndProcBS'
    // TODO: Method 'SetAsDefFolderSettings'
    // TODO: Method 'GetViewRect'
    // TODO: Method 'OnSize'
    // TODO: Method 'OnCreate'
    // TODO: Method 'OnCommand'
    // TODO: Method 'OnDestroy'
    // TODO: Method 'OnNotify'
    // TODO: Method 'OnSetFocus'
    // TODO: Method 'OnFrameWindowActivateBS'
    // TODO: Method 'ReleaseShellView'
    // TODO: Method 'ActivatePendingView'
    // TODO: Method 'CreateViewWindow'
    // TODO: Method 'CreateBrowserPropSheetExt'
    // TODO: Method 'GetViewWindow'
    // TODO: Method 'GetBaseBrowserData'
    // TODO: Method 'PutBaseBrowserData'
    // TODO: Method 'InitializeTravelLog'
    // TODO: Method 'SetTopBrowser'
    // TODO: Method 'Offline'
    // TODO: Method 'AllowViewResize'
    // TODO: Method 'SetActivateState'
    // TODO: Method 'UpdateSecureLockIcon'
    // TODO: Method 'InitializeDownloadManager'
    // TODO: Method 'InitializeTransitionSite'
    // TODO: Method '_Initialize'
    // TODO: Method '_CancelPendingNavigationAsync'
    // TODO: Method '_CancelPendingView'
    // TODO: Method '_MaySaveChanges'
    // TODO: Method '_PauseOrResumeView'
    // TODO: Method '_DisableModeless'
    // TODO: Method '_NavigateToPidl2'
    // TODO: Method '_TryShell2Rename'
    // TODO: Method '_SwitchActivationNow'
    // TODO: Method '_ExecChildren'
    // TODO: Method '_SendChildren'
    // TODO: Method 'GetFolderSetData'
    // TODO: Method '_OnFocusChange'
    // TODO: Method 'v_ShowHideChildWindows'
    // TODO: Method '_get_itbLastFocus'
    // TODO: Method '_put_itbLastFocus'
    // TODO: Method '_UIActivateView'
    // TODO: Method '_GetViewBorderRect'
    // TODO: Method '_UpdateViewRectSize'
    // TODO: Method '_ResizeNextBorder'
    // TODO: Method '_ResizeView'
    // TODO: Method '_GetEffectiveClientArea'
    // TODO: Method 'v_GetViewStream'
    // TODO: Method 'ForwardViewMsg'
    // TODO: Method 'SetAcceleratorMenu'
    // TODO: Method '_GetToolbarCount'
    // TODO: Method '_GetToolbarItem'
    // TODO: Method '_SaveToolbars'
    // TODO: Method '_LoadToolbars'
    // TODO: Method '_CloseAndReleaseToolbars'
    // TODO: Method 'v_MayGetNextToolbarFocus'
    // TODO: Method '_ResizeNextBorderHelper'
    // TODO: Method '_FindTBar'
    // TODO: Method '_SetFocus'
    // TODO: Method 'v_MayTranslateAccelerator'
    // TODO: Method '_GetBorderDWHelper'
    // TODO: Method 'v_CheckZoneCrossing'
};
// --------------------------------------------------------
// Type: IEPDNFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IEPDNFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: IBrowserService3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IBrowserService3 = *opaque{
    // TODO: Method '_PositionViewWindow'
    // TODO: Method 'IEParseDisplayNameEx'
};
// --------------------------------------------------------
// Type: IBrowserService4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IBrowserService4 = *opaque{
    // TODO: Method 'ActivateView'
    // TODO: Method 'SaveViewState'
    // TODO: Method '_ResizeAllBorders'
};
// --------------------------------------------------------
// Type: ITrackShellMenu
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITrackShellMenu = *opaque{
    // TODO: Method 'SetObscured'
    // TODO: Method 'Popup'
};
// --------------------------------------------------------
// Type: ImageTranscode
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ImageTranscode = opaque {
};
// --------------------------------------------------------
// Type: TI_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TI_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: ITranscodeImage
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITranscodeImage = *opaque{
    // TODO: Method 'TranscodeImage'
};
// --------------------------------------------------------
// Type: PATHCCH_OPTIONS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PATHCCH_OPTIONS = *opaque{
};
// --------------------------------------------------------
// Type: APPLET_PROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const APPLET_PROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CPLINFO
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const CPLINFO = *opaque{
};
// --------------------------------------------------------
// Type: NEWCPLINFOA
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const NEWCPLINFOA = *opaque{
};
// --------------------------------------------------------
// Type: NEWCPLINFOW
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const NEWCPLINFOW = *opaque{
};
// --------------------------------------------------------
// Type: PROFILEINFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROFILEINFOA = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    lpUserName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpProfilePath: {"kind""Ptr","child":{"kind":"SByte"}},
    lpDefaultPath: {"kind""Ptr","child":{"kind":"SByte"}},
    lpServerName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpPolicyPath: {"kind""Ptr","child":{"kind":"SByte"}},
    hProfile: Windows.Win32.SystemServices.HANDLE,
};
// --------------------------------------------------------
// Type: PROFILEINFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROFILEINFOW = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    lpUserName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpProfilePath: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpDefaultPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpServerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpPolicyPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    hProfile: Windows.Win32.SystemServices.HANDLE,
};
// --------------------------------------------------------
// Type: iurl_seturl_flags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const iurl_seturl_flags = *opaque{
};
// --------------------------------------------------------
// Type: iurl_invokecommand_flags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const iurl_invokecommand_flags = *opaque{
};
// --------------------------------------------------------
// Type: urlinvokecommandinfoA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const urlinvokecommandinfoA = extern struct {
    dwcbSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    hwndParent: Windows.Win32.WindowsAndMessaging.HWND,
    pcszVerb: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: urlinvokecommandinfoW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const urlinvokecommandinfoW = extern struct {
    dwcbSize: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    hwndParent: Windows.Win32.WindowsAndMessaging.HWND,
    pcszVerb: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: IUniformResourceLocatorA
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUniformResourceLocatorA = *opaque{
    // TODO: Method 'SetURL'
    // TODO: Method 'GetURL'
    // TODO: Method 'InvokeCommand'
};
// --------------------------------------------------------
// Type: IUniformResourceLocatorW
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUniformResourceLocatorW = *opaque{
    // TODO: Method 'SetURL'
    // TODO: Method 'GetURL'
    // TODO: Method 'InvokeCommand'
};
// --------------------------------------------------------
// Type: translateurl_in_flags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const translateurl_in_flags = *opaque{
};
// --------------------------------------------------------
// Type: urlassociationdialog_in_flags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const urlassociationdialog_in_flags = *opaque{
};
// --------------------------------------------------------
// Type: mimeassociationdialog_in_flags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const mimeassociationdialog_in_flags = *opaque{
};
// --------------------------------------------------------
// Type: PAPPSTATE_CHANGE_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PAPPSTATE_CHANGE_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: _APPSTATE_REGISTRATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _APPSTATE_REGISTRATION = opaque {
};
// --------------------------------------------------------
// Type: PAPPCONSTRAIN_CHANGE_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PAPPCONSTRAIN_CHANGE_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: _APPCONSTRAIN_REGISTRATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _APPCONSTRAIN_REGISTRATION = opaque {
};
// --------------------------------------------------------
// Type: CActiveIMM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CActiveIMM = opaque {
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_dimm_0000_0000_0012
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const __MIDL___MIDL_itf_dimm_0000_0000_0012 = extern struct {
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    fOpen: Windows.Win32.SystemServices.BOOL,
    ptStatusWndPos: Windows.Win32.DisplayDevices.POINT,
    ptSoftKbdPos: Windows.Win32.DisplayDevices.POINT,
    fdwConversion: {"kind":"UInt32"},
    fdwSentence: {"kind":"UInt32"},
    lfFont: Windows.Win32.Shell.__MIDL___MIDL_itf_dimm_0000_0000_0012+_lfFont_e__Union,
    cfCompForm: Windows.Win32.Intl.COMPOSITIONFORM,
    cfCandForm: {"kind":"Array","child": Windows.Win32.Intl.CANDIDATEFORM},
    hCompStr: {"kind""Ptr","child":Windows.Win32.Intl.HIMCC__},
    hCandInfo: {"kind""Ptr","child":Windows.Win32.Intl.HIMCC__},
    hGuideLine: {"kind""Ptr","child":Windows.Win32.Intl.HIMCC__},
    hPrivate: {"kind""Ptr","child":Windows.Win32.Intl.HIMCC__},
    dwNumMsgBuf: {"kind":"UInt32"},
    hMsgBuf: {"kind""Ptr","child":Windows.Win32.Intl.HIMCC__},
    fdwInit: {"kind":"UInt32"},
    dwReserve: {"kind":"Array","child": {"kind":"UInt32"}},
    // --------------------------------------------------------
    // Type: _lfFont_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _lfFont_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_dimm_0000_0000_0014
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const __MIDL___MIDL_itf_dimm_0000_0000_0014 = extern struct {
    dwPrivateDataSize: {"kind":"UInt32"},
    fdwProperty: {"kind":"UInt32"},
    fdwConversionCaps: {"kind":"UInt32"},
    fdwSentenceCaps: {"kind":"UInt32"},
    fdwUICaps: {"kind":"UInt32"},
    fdwSCSCaps: {"kind":"UInt32"},
    fdwSelectCaps: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IEnumRegisterWordA
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumRegisterWordA = *opaque{
    // TODO: Method 'Clone'
    // TODO: Method 'Next'
    // TODO: Method 'Reset'
    // TODO: Method 'Skip'
};
// --------------------------------------------------------
// Type: IEnumRegisterWordW
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumRegisterWordW = *opaque{
    // TODO: Method 'Clone'
    // TODO: Method 'Next'
    // TODO: Method 'Reset'
    // TODO: Method 'Skip'
};
// --------------------------------------------------------
// Type: IEnumInputContext
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumInputContext = *opaque{
    // TODO: Method 'Clone'
    // TODO: Method 'Next'
    // TODO: Method 'Reset'
    // TODO: Method 'Skip'
};
// --------------------------------------------------------
// Type: IActiveIMMRegistrar
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveIMMRegistrar = *opaque{
    // TODO: Method 'RegisterIME'
    // TODO: Method 'UnregisterIME'
};
// --------------------------------------------------------
// Type: IActiveIMMMessagePumpOwner
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveIMMMessagePumpOwner = *opaque{
    // TODO: Method 'Start'
    // TODO: Method 'End'
    // TODO: Method 'OnTranslateMessage'
    // TODO: Method 'Pause'
    // TODO: Method 'Resume'
};
// --------------------------------------------------------
// Type: IActiveIMMApp
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveIMMApp = *opaque{
    // TODO: Method 'AssociateContext'
    // TODO: Method 'ConfigureIMEA'
    // TODO: Method 'ConfigureIMEW'
    // TODO: Method 'CreateContext'
    // TODO: Method 'DestroyContext'
    // TODO: Method 'EnumRegisterWordA'
    // TODO: Method 'EnumRegisterWordW'
    // TODO: Method 'EscapeA'
    // TODO: Method 'EscapeW'
    // TODO: Method 'GetCandidateListA'
    // TODO: Method 'GetCandidateListW'
    // TODO: Method 'GetCandidateListCountA'
    // TODO: Method 'GetCandidateListCountW'
    // TODO: Method 'GetCandidateWindow'
    // TODO: Method 'GetCompositionFontA'
    // TODO: Method 'GetCompositionFontW'
    // TODO: Method 'GetCompositionStringA'
    // TODO: Method 'GetCompositionStringW'
    // TODO: Method 'GetCompositionWindow'
    // TODO: Method 'GetContext'
    // TODO: Method 'GetConversionListA'
    // TODO: Method 'GetConversionListW'
    // TODO: Method 'GetConversionStatus'
    // TODO: Method 'GetDefaultIMEWnd'
    // TODO: Method 'GetDescriptionA'
    // TODO: Method 'GetDescriptionW'
    // TODO: Method 'GetGuideLineA'
    // TODO: Method 'GetGuideLineW'
    // TODO: Method 'GetIMEFileNameA'
    // TODO: Method 'GetIMEFileNameW'
    // TODO: Method 'GetOpenStatus'
    // TODO: Method 'GetProperty'
    // TODO: Method 'GetRegisterWordStyleA'
    // TODO: Method 'GetRegisterWordStyleW'
    // TODO: Method 'GetStatusWindowPos'
    // TODO: Method 'GetVirtualKey'
    // TODO: Method 'InstallIMEA'
    // TODO: Method 'InstallIMEW'
    // TODO: Method 'IsIME'
    // TODO: Method 'IsUIMessageA'
    // TODO: Method 'IsUIMessageW'
    // TODO: Method 'NotifyIME'
    // TODO: Method 'RegisterWordA'
    // TODO: Method 'RegisterWordW'
    // TODO: Method 'ReleaseContext'
    // TODO: Method 'SetCandidateWindow'
    // TODO: Method 'SetCompositionFontA'
    // TODO: Method 'SetCompositionFontW'
    // TODO: Method 'SetCompositionStringA'
    // TODO: Method 'SetCompositionStringW'
    // TODO: Method 'SetCompositionWindow'
    // TODO: Method 'SetConversionStatus'
    // TODO: Method 'SetOpenStatus'
    // TODO: Method 'SetStatusWindowPos'
    // TODO: Method 'SimulateHotKey'
    // TODO: Method 'UnregisterWordA'
    // TODO: Method 'UnregisterWordW'
    // TODO: Method 'Activate'
    // TODO: Method 'Deactivate'
    // TODO: Method 'OnDefWindowProc'
    // TODO: Method 'FilterClientWindows'
    // TODO: Method 'GetCodePageA'
    // TODO: Method 'GetLangId'
    // TODO: Method 'AssociateContextEx'
    // TODO: Method 'DisableIME'
    // TODO: Method 'GetImeMenuItemsA'
    // TODO: Method 'GetImeMenuItemsW'
    // TODO: Method 'EnumInputContext'
};
// --------------------------------------------------------
// Type: IActiveIMMIME
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveIMMIME = *opaque{
    // TODO: Method 'AssociateContext'
    // TODO: Method 'ConfigureIMEA'
    // TODO: Method 'ConfigureIMEW'
    // TODO: Method 'CreateContext'
    // TODO: Method 'DestroyContext'
    // TODO: Method 'EnumRegisterWordA'
    // TODO: Method 'EnumRegisterWordW'
    // TODO: Method 'EscapeA'
    // TODO: Method 'EscapeW'
    // TODO: Method 'GetCandidateListA'
    // TODO: Method 'GetCandidateListW'
    // TODO: Method 'GetCandidateListCountA'
    // TODO: Method 'GetCandidateListCountW'
    // TODO: Method 'GetCandidateWindow'
    // TODO: Method 'GetCompositionFontA'
    // TODO: Method 'GetCompositionFontW'
    // TODO: Method 'GetCompositionStringA'
    // TODO: Method 'GetCompositionStringW'
    // TODO: Method 'GetCompositionWindow'
    // TODO: Method 'GetContext'
    // TODO: Method 'GetConversionListA'
    // TODO: Method 'GetConversionListW'
    // TODO: Method 'GetConversionStatus'
    // TODO: Method 'GetDefaultIMEWnd'
    // TODO: Method 'GetDescriptionA'
    // TODO: Method 'GetDescriptionW'
    // TODO: Method 'GetGuideLineA'
    // TODO: Method 'GetGuideLineW'
    // TODO: Method 'GetIMEFileNameA'
    // TODO: Method 'GetIMEFileNameW'
    // TODO: Method 'GetOpenStatus'
    // TODO: Method 'GetProperty'
    // TODO: Method 'GetRegisterWordStyleA'
    // TODO: Method 'GetRegisterWordStyleW'
    // TODO: Method 'GetStatusWindowPos'
    // TODO: Method 'GetVirtualKey'
    // TODO: Method 'InstallIMEA'
    // TODO: Method 'InstallIMEW'
    // TODO: Method 'IsIME'
    // TODO: Method 'IsUIMessageA'
    // TODO: Method 'IsUIMessageW'
    // TODO: Method 'NotifyIME'
    // TODO: Method 'RegisterWordA'
    // TODO: Method 'RegisterWordW'
    // TODO: Method 'ReleaseContext'
    // TODO: Method 'SetCandidateWindow'
    // TODO: Method 'SetCompositionFontA'
    // TODO: Method 'SetCompositionFontW'
    // TODO: Method 'SetCompositionStringA'
    // TODO: Method 'SetCompositionStringW'
    // TODO: Method 'SetCompositionWindow'
    // TODO: Method 'SetConversionStatus'
    // TODO: Method 'SetOpenStatus'
    // TODO: Method 'SetStatusWindowPos'
    // TODO: Method 'SimulateHotKey'
    // TODO: Method 'UnregisterWordA'
    // TODO: Method 'UnregisterWordW'
    // TODO: Method 'GenerateMessage'
    // TODO: Method 'LockIMC'
    // TODO: Method 'UnlockIMC'
    // TODO: Method 'GetIMCLockCount'
    // TODO: Method 'CreateIMCC'
    // TODO: Method 'DestroyIMCC'
    // TODO: Method 'LockIMCC'
    // TODO: Method 'UnlockIMCC'
    // TODO: Method 'ReSizeIMCC'
    // TODO: Method 'GetIMCCSize'
    // TODO: Method 'GetIMCCLockCount'
    // TODO: Method 'GetHotKey'
    // TODO: Method 'SetHotKey'
    // TODO: Method 'CreateSoftKeyboard'
    // TODO: Method 'DestroySoftKeyboard'
    // TODO: Method 'ShowSoftKeyboard'
    // TODO: Method 'GetCodePageA'
    // TODO: Method 'GetLangId'
    // TODO: Method 'KeybdEvent'
    // TODO: Method 'LockModal'
    // TODO: Method 'UnlockModal'
    // TODO: Method 'AssociateContextEx'
    // TODO: Method 'DisableIME'
    // TODO: Method 'GetImeMenuItemsA'
    // TODO: Method 'GetImeMenuItemsW'
    // TODO: Method 'EnumInputContext'
    // TODO: Method 'RequestMessageA'
    // TODO: Method 'RequestMessageW'
    // TODO: Method 'SendIMCA'
    // TODO: Method 'SendIMCW'
    // TODO: Method 'IsSleeping'
};
// --------------------------------------------------------
// Type: IActiveIME
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveIME = *opaque{
    // TODO: Method 'Inquire'
    // TODO: Method 'ConversionList'
    // TODO: Method 'Configure'
    // TODO: Method 'Destroy'
    // TODO: Method 'Escape'
    // TODO: Method 'SetActiveContext'
    // TODO: Method 'ProcessKey'
    // TODO: Method 'Notify'
    // TODO: Method 'Select'
    // TODO: Method 'SetCompositionString'
    // TODO: Method 'ToAsciiEx'
    // TODO: Method 'RegisterWord'
    // TODO: Method 'UnregisterWord'
    // TODO: Method 'GetRegisterWordStyle'
    // TODO: Method 'EnumRegisterWord'
    // TODO: Method 'GetCodePageA'
    // TODO: Method 'GetLangId'
};
// --------------------------------------------------------
// Type: IActiveIME2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IActiveIME2 = *opaque{
    // TODO: Method 'Sleep'
    // TODO: Method 'Unsleep'
};
// --------------------------------------------------------
// Type: NC_ADDRESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NC_ADDRESS = extern struct {
    pAddrInfo: {"kind""Ptr","child":Windows.Win32.IpHelper.NET_ADDRESS_INFO},
    PortNumber: {"kind":"UInt16"},
    PrefixLength: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: ShFindChangeNotifcationHandle
// TypeLayoutAttr: sequential
// RAIIFree 'SHChangeNotification_Unlock' (TODO: can we use this information?)
pub const ShFindChangeNotifcationHandle = {"kind":"IntPtr"};
// --------------------------------------------------------
// Type: LOGFONTA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LOGFONTA = extern struct {
    lfHeight: {"kind":"Int32"},
    lfWidth: {"kind":"Int32"},
    lfEscapement: {"kind":"Int32"},
    lfOrientation: {"kind":"Int32"},
    lfWeight: {"kind":"Int32"},
    lfItalic: {"kind":"Byte"},
    lfUnderline: {"kind":"Byte"},
    lfStrikeOut: {"kind":"Byte"},
    lfCharSet: {"kind":"Byte"},
    lfOutPrecision: {"kind":"Byte"},
    lfClipPrecision: {"kind":"Byte"},
    lfQuality: {"kind":"Byte"},
    lfPitchAndFamily: {"kind":"Byte"},
    lfFaceName: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: LOGFONTW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LOGFONTW = extern struct {
    lfHeight: {"kind":"Int32"},
    lfWidth: {"kind":"Int32"},
    lfEscapement: {"kind":"Int32"},
    lfOrientation: {"kind":"Int32"},
    lfWeight: {"kind":"Int32"},
    lfItalic: {"kind":"Byte"},
    lfUnderline: {"kind":"Byte"},
    lfStrikeOut: {"kind":"Byte"},
    lfCharSet: {"kind":"Byte"},
    lfOutPrecision: {"kind":"Byte"},
    lfClipPrecision: {"kind":"Byte"},
    lfQuality: {"kind":"Byte"},
    lfPitchAndFamily: {"kind":"Byte"},
    lfFaceName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SERIALIZEDPROPERTYVALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERIALIZEDPROPERTYVALUE = extern struct {
    dwType: {"kind":"UInt32"},
    rgb: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: APPCATEGORYINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const APPCATEGORYINFO = extern struct {
    Locale: {"kind":"UInt32"},
    pszDescription: {"kind""Ptr","child":{"kind":"UInt16"}},
    AppCategoryId: Guid,
};
// --------------------------------------------------------
// Type: APPCATEGORYINFOLIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const APPCATEGORYINFOLIST = extern struct {
    cCategory: {"kind":"UInt32"},
    pCategoryInfo: {"kind""Ptr","child":Windows.Win32.Shell.APPCATEGORYINFO},
};
// --------------------------------------------------------
// Type: IInitializeWithFile
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInitializeWithFile = *opaque{
    // TODO: Method 'Initialize'
};
// --------------------------------------------------------
// Type: IInitializeWithStream
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInitializeWithStream = *opaque{
    // TODO: Method 'Initialize'
};
// --------------------------------------------------------
// Type: INamedPropertyStore
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const INamedPropertyStore = *opaque{
    // TODO: Method 'GetNamedValue'
    // TODO: Method 'SetNamedValue'
    // TODO: Method 'GetNameCount'
    // TODO: Method 'GetNameAt'
};
// --------------------------------------------------------
// Type: IObjectWithPropertyKey
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IObjectWithPropertyKey = *opaque{
    // TODO: Method 'SetPropertyKey'
    // TODO: Method 'GetPropertyKey'
};
// --------------------------------------------------------
// Type: IDelayedPropertyStoreFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDelayedPropertyStoreFactory = *opaque{
    // TODO: Method 'GetDelayedPropertyStore'
};
// --------------------------------------------------------
// Type: IPersistSerializedPropStorage
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPersistSerializedPropStorage = *opaque{
    // TODO: Method 'SetFlags'
    // TODO: Method 'SetPropertyStorage'
    // TODO: Method 'GetPropertyStorage'
};
// --------------------------------------------------------
// Type: IPersistSerializedPropStorage2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPersistSerializedPropStorage2 = *opaque{
    // TODO: Method 'GetPropertyStorageSize'
    // TODO: Method 'GetPropertyStorageBuffer'
};
// --------------------------------------------------------
// Type: ICreateObject
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICreateObject = *opaque{
    // TODO: Method 'CreateObject'
};
// --------------------------------------------------------
// Type: SUBCLASSPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SUBCLASSPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ShellWindowTypeConstants
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ShellWindowTypeConstants = *opaque{
};
// --------------------------------------------------------
// Type: ShellWindowFindWindowOptions
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ShellWindowFindWindowOptions = *opaque{
};
// --------------------------------------------------------
// Type: IShellWindows
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellWindows = *opaque{
    // TODO: Method 'get_Count'
    // TODO: Method 'Item'
    // TODO: Method '_NewEnum'
    // TODO: Method 'Register'
    // TODO: Method 'RegisterPending'
    // TODO: Method 'Revoke'
    // TODO: Method 'OnNavigate'
    // TODO: Method 'OnActivated'
    // TODO: Method 'FindWindowSW'
    // TODO: Method 'OnCreated'
    // TODO: Method 'ProcessAttachDetach'
};
],

"func_definitions": [

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn SetWindowContextHelpId(
    param0: Windows.Win32.WindowsAndMessaging.HWND,
    param1: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn GetWindowContextHelpId(
    param0: Windows.Win32.WindowsAndMessaging.HWND,

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn SetMenuContextHelpId(
    param0: Windows.Win32.MenusAndResources.HMENU,
    param1: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn GetMenuContextHelpId(
    param0: Windows.Win32.MenusAndResources.HMENU,

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn WinHelpA(
    hWndMain: Windows.Win32.WindowsAndMessaging.HWND,
    lpszHelp: {"kind""Ptr","child":{"kind":"SByte"}},
    uCommand: {"kind":"UInt32"},
    dwData: {"kind":"UIntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn WinHelpW(
    hWndMain: Windows.Win32.WindowsAndMessaging.HWND,
    lpszHelp: {"kind""Ptr","child":{"kind":"UInt16"}},
    uCommand: {"kind":"UInt32"},
    dwData: {"kind":"UIntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "SHELL32" fn CommandLineToArgvW(
    lpCmdLine: {"kind""Ptr","child":{"kind":"UInt16"}},
    pNumArgs: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn DragQueryFileA(
    hDrop: {"kind""Ptr","child":Windows.Win32.Shell.HDROP__},
    iFile: {"kind":"UInt32"},
    lpszFile: {"kind""Ptr","child":{"kind":"SByte"}},
    cch: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn DragQueryFileW(
    hDrop: {"kind""Ptr","child":Windows.Win32.Shell.HDROP__},
    iFile: {"kind":"UInt32"},
    lpszFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    cch: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn DragQueryPoint(
    hDrop: {"kind""Ptr","child":Windows.Win32.Shell.HDROP__},
    ppt: {"kind""Ptr","child":Windows.Win32.DisplayDevices.POINT},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn DragFinish(
    hDrop: {"kind""Ptr","child":Windows.Win32.Shell.HDROP__},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn DragAcceptFiles(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    fAccept: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn ShellExecuteA(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    lpOperation: {"kind""Ptr","child":{"kind":"SByte"}},
    lpFile: {"kind""Ptr","child":{"kind":"SByte"}},
    lpParameters: {"kind""Ptr","child":{"kind":"SByte"}},
    lpDirectory: {"kind""Ptr","child":{"kind":"SByte"}},
    nShowCmd: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn ShellExecuteW(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    lpOperation: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpParameters: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpDirectory: {"kind""Ptr","child":{"kind":"UInt16"}},
    nShowCmd: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn FindExecutableA(
    lpFile: {"kind""Ptr","child":{"kind":"SByte"}},
    lpDirectory: {"kind""Ptr","child":{"kind":"SByte"}},
    lpResult: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn FindExecutableW(
    lpFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpDirectory: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpResult: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn ShellAboutA(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    szApp: {"kind""Ptr","child":{"kind":"SByte"}},
    szOtherStuff: {"kind""Ptr","child":{"kind":"SByte"}},
    hIcon: Windows.Win32.Gdi.HICON,

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn ShellAboutW(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    szApp: {"kind""Ptr","child":{"kind":"UInt16"}},
    szOtherStuff: {"kind""Ptr","child":{"kind":"UInt16"}},
    hIcon: Windows.Win32.Gdi.HICON,

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn DuplicateIcon(
    hInst: Windows.Win32.SystemServices.HINSTANCE,
    hIcon: Windows.Win32.Gdi.HICON,

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn ExtractAssociatedIconA(
    hInst: Windows.Win32.SystemServices.HINSTANCE,
    pszIconPath: {"kind""Ptr","child":{"kind":"SByte"}},
    piIcon: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn ExtractAssociatedIconW(
    hInst: Windows.Win32.SystemServices.HINSTANCE,
    pszIconPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    piIcon: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn ExtractAssociatedIconExA(
    hInst: Windows.Win32.SystemServices.HINSTANCE,
    pszIconPath: {"kind""Ptr","child":{"kind":"SByte"}},
    piIconIndex: {"kind""Ptr","child":{"kind":"UInt16"}},
    piIconId: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn ExtractAssociatedIconExW(
    hInst: Windows.Win32.SystemServices.HINSTANCE,
    pszIconPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    piIconIndex: {"kind""Ptr","child":{"kind":"UInt16"}},
    piIconId: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn ExtractIconA(
    hInst: Windows.Win32.SystemServices.HINSTANCE,
    pszExeFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    nIconIndex: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn ExtractIconW(
    hInst: Windows.Win32.SystemServices.HINSTANCE,
    pszExeFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    nIconIndex: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHAppBarMessage(
    dwMessage: {"kind":"UInt32"},
    pData: {"kind""Ptr","child":Windows.Win32.Shell.APPBARDATA},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn DoEnvironmentSubstA(
    pszSrc: {"kind""Ptr","child":{"kind":"SByte"}},
    cchSrc: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn DoEnvironmentSubstW(
    pszSrc: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchSrc: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "SHELL32" fn ExtractIconExA(
    lpszFile: {"kind""Ptr","child":{"kind":"SByte"}},
    nIconIndex: {"kind":"Int32"},
    phiconLarge: {"kind""Ptr","child":Windows.Win32.Gdi.HICON},
    phiconSmall: {"kind""Ptr","child":Windows.Win32.Gdi.HICON},
    nIcons: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "SHELL32" fn ExtractIconExW(
    lpszFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    nIconIndex: {"kind":"Int32"},
    phiconLarge: {"kind""Ptr","child":Windows.Win32.Gdi.HICON},
    phiconSmall: {"kind""Ptr","child":Windows.Win32.Gdi.HICON},
    nIcons: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "SHELL32" fn SHFileOperationA(
    lpFileOp: {"kind""Ptr","child":Windows.Win32.Shell.SHFILEOPSTRUCTA},

// set_last_errror=True (can and should we use this?)
pub extern "SHELL32" fn SHFileOperationW(
    lpFileOp: {"kind""Ptr","child":Windows.Win32.Shell.SHFILEOPSTRUCTW},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHFreeNameMappings(
    hNameMappings: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "SHELL32" fn ShellExecuteExA(
    pExecInfo: {"kind""Ptr","child":Windows.Win32.Shell.SHELLEXECUTEINFOA},

// set_last_errror=True (can and should we use this?)
pub extern "SHELL32" fn ShellExecuteExW(
    pExecInfo: {"kind""Ptr","child":Windows.Win32.Shell.SHELLEXECUTEINFOW},

// set_last_errror=True (can and should we use this?)
pub extern "SHELL32" fn SHCreateProcessAsUserW(
    pscpi: {"kind""Ptr","child":Windows.Win32.Shell.SHCREATEPROCESSINFOW},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHEvaluateSystemCommandTemplate(
    pszCmdTemplate: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppszApplication: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    ppszCommandLine: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    ppszParameters: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn AssocCreateForClasses(
    rgClasses: {"kind""Ptr","child":Windows.Win32.Shell.ASSOCIATIONELEMENT},
    cClasses: {"kind":"UInt32"},
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHQueryRecycleBinA(
    pszRootPath: {"kind""Ptr","child":{"kind":"SByte"}},
    pSHQueryRBInfo: {"kind""Ptr","child":Windows.Win32.Shell.SHQUERYRBINFO},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHQueryRecycleBinW(
    pszRootPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pSHQueryRBInfo: {"kind""Ptr","child":Windows.Win32.Shell.SHQUERYRBINFO},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHEmptyRecycleBinA(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    pszRootPath: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHEmptyRecycleBinW(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    pszRootPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHQueryUserNotificationState(
    pquns: {"kind""Ptr","child":Windows.Win32.Shell.QUERY_USER_NOTIFICATION_STATE},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn Shell_NotifyIconA(
    dwMessage: {"kind":"UInt32"},
    lpData: {"kind""Ptr","child":Windows.Win32.Shell.NOTIFYICONDATAA},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn Shell_NotifyIconW(
    dwMessage: {"kind":"UInt32"},
    lpData: {"kind""Ptr","child":Windows.Win32.Shell.NOTIFYICONDATAW},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn Shell_NotifyIconGetRect(
    identifier: {"kind""Ptr","child":Windows.Win32.Shell.NOTIFYICONIDENTIFIER},
    iconLocation: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetFileInfoA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFileAttributes: {"kind":"UInt32"},
    psfi: {"kind""Ptr","child":Windows.Win32.Shell.SHFILEINFOA},
    cbFileInfo: {"kind":"UInt32"},
    uFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetFileInfoW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFileAttributes: {"kind":"UInt32"},
    psfi: {"kind""Ptr","child":Windows.Win32.Shell.SHFILEINFOW},
    cbFileInfo: {"kind":"UInt32"},
    uFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetStockIconInfo(
    siid: Windows.Win32.Shell.SHSTOCKICONID,
    uFlags: {"kind":"UInt32"},
    psii: {"kind""Ptr","child":Windows.Win32.Shell.SHSTOCKICONINFO},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetDiskFreeSpaceExA(
    pszDirectoryName: {"kind""Ptr","child":{"kind":"SByte"}},
    pulFreeBytesAvailableToCaller: {"kind""Ptr","child":Windows.Win32.SystemServices.ULARGE_INTEGER},
    pulTotalNumberOfBytes: {"kind""Ptr","child":Windows.Win32.SystemServices.ULARGE_INTEGER},
    pulTotalNumberOfFreeBytes: {"kind""Ptr","child":Windows.Win32.SystemServices.ULARGE_INTEGER},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetDiskFreeSpaceExW(
    pszDirectoryName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pulFreeBytesAvailableToCaller: {"kind""Ptr","child":Windows.Win32.SystemServices.ULARGE_INTEGER},
    pulTotalNumberOfBytes: {"kind""Ptr","child":Windows.Win32.SystemServices.ULARGE_INTEGER},
    pulTotalNumberOfFreeBytes: {"kind""Ptr","child":Windows.Win32.SystemServices.ULARGE_INTEGER},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetNewLinkInfoA(
    pszLinkTo: {"kind""Ptr","child":{"kind":"SByte"}},
    pszDir: {"kind""Ptr","child":{"kind":"SByte"}},
    pszName: {"kind""Ptr","child":{"kind":"SByte"}},
    pfMustCopy: {"kind""Ptr","child":{"kind":"Int32"}},
    uFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetNewLinkInfoW(
    pszLinkTo: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszDir: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pfMustCopy: {"kind""Ptr","child":{"kind":"Int32"}},
    uFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHInvokePrinterCommandA(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    uAction: {"kind":"UInt32"},
    lpBuf1: {"kind""Ptr","child":{"kind":"SByte"}},
    lpBuf2: {"kind""Ptr","child":{"kind":"SByte"}},
    fModal: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHInvokePrinterCommandW(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    uAction: {"kind":"UInt32"},
    lpBuf1: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpBuf2: {"kind""Ptr","child":{"kind":"UInt16"}},
    fModal: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHLoadNonloadedIconOverlayIdentifiers(

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHIsFileAvailableOffline(
    pwszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pdwStatus: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHSetLocalizedName(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszResModule: {"kind""Ptr","child":{"kind":"UInt16"}},
    idsRes: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHRemoveLocalizedName(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetLocalizedName(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszResModule: {"kind""Ptr","child":{"kind":"UInt16"}},
    cch: {"kind":"UInt32"},
    pidsRes: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=True (can and should we use this?)
pub extern "SHLWAPI" fn ShellMessageBoxA(
    hAppInst: Windows.Win32.SystemServices.HINSTANCE,
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    lpcText: {"kind""Ptr","child":{"kind":"SByte"}},
    lpcTitle: {"kind""Ptr","child":{"kind":"SByte"}},
    fuStyle: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "SHLWAPI" fn ShellMessageBoxW(
    hAppInst: Windows.Win32.SystemServices.HINSTANCE,
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    lpcText: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpcTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    fuStyle: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn IsLFNDriveA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn IsLFNDriveW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHEnumerateUnreadMailAccountsW(
    hKeyUser: Windows.Win32.WindowsProgramming.HKEY,
    dwIndex: {"kind":"UInt32"},
    pszMailAddress: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchMailAddress: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetUnreadMailCountW(
    hKeyUser: Windows.Win32.WindowsProgramming.HKEY,
    pszMailAddress: {"kind""Ptr","child":{"kind":"UInt16"}},
    pdwCount: {"kind""Ptr","child":{"kind":"UInt32"}},
    pFileTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    pszShellExecuteCommand: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchShellExecuteCommand: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHSetUnreadMailCountW(
    pszMailAddress: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwCount: {"kind":"UInt32"},
    pszShellExecuteCommand: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHTestTokenMembership(
    hToken: Windows.Win32.SystemServices.HANDLE,
    ulRID: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetImageList(
    iImageList: {"kind":"Int32"},
    riid: {"kind""Ptr","child":Guid},
    ppvObj: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn InitNetworkAddressControl(

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetDriveMedia(
    pszDrive: {"kind""Ptr","child":{"kind":"UInt16"}},
    pdwMediaContent: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHSimpleIDListFromPath(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHCreateItemFromIDList(
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHCreateItemFromParsingName(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pbc: Windows.Win32.Com.IBindCtx,
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHCreateItemWithParent(
    pidlParent: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    psfParent: Windows.Win32.Shell.IShellFolder,
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    riid: {"kind""Ptr","child":Guid},
    ppvItem: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHCreateItemFromRelativeName(
    psiParent: Windows.Win32.Shell.IShellItem,
    pszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pbc: Windows.Win32.Com.IBindCtx,
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHCreateItemInKnownFolder(
    kfid: {"kind""Ptr","child":Guid},
    dwKFFlags: {"kind":"UInt32"},
    pszItem: {"kind""Ptr","child":{"kind":"UInt16"}},
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetIDListFromObject(
    punk: Windows.Win32.Com.IUnknown,
    ppidl: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetItemFromObject(
    punk: Windows.Win32.Com.IUnknown,
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetNameFromIDList(
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    sigdnName: Windows.Win32.Shell.SIGDN,
    ppszName: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetItemFromDataObject(
    pdtobj: Windows.Win32.Com.IDataObject,
    dwFlags: Windows.Win32.Shell.DATAOBJ_GET_ITEM_FLAGS,
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHCreateShellItemArray(
    pidlParent: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    psf: Windows.Win32.Shell.IShellFolder,
    cidl: {"kind":"UInt32"},
    ppidl: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST}},
    ppsiItemArray: {"kind""Ptr","child":Windows.Win32.Shell.IShellItemArray},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHCreateShellItemArrayFromDataObject(
    pdo: Windows.Win32.Com.IDataObject,
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHCreateShellItemArrayFromIDLists(
    cidl: {"kind":"UInt32"},
    rgpidl: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST}},
    ppsiItemArray: {"kind""Ptr","child":Windows.Win32.Shell.IShellItemArray},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHCreateShellItemArrayFromShellItem(
    psi: Windows.Win32.Shell.IShellItem,
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHCreateAssociationRegistration(
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHCreateDefaultExtractIcon(
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SetCurrentProcessExplicitAppUserModelID(
    AppID: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn GetCurrentProcessExplicitAppUserModelID(
    AppID: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetTemporaryPropertyForItem(
    psi: Windows.Win32.Shell.IShellItem,
    propkey: {"kind""Ptr","child":Windows.Win32.WindowsPropertiesSystem.PROPERTYKEY},
    ppropvar: {"kind""Ptr","child":Windows.Win32.StructuredStorage.PROPVARIANT},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHSetTemporaryPropertyForItem(
    psi: Windows.Win32.Shell.IShellItem,
    propkey: {"kind""Ptr","child":Windows.Win32.WindowsPropertiesSystem.PROPERTYKEY},
    propvar: {"kind""Ptr","child":Windows.Win32.StructuredStorage.PROPVARIANT},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHShowManageLibraryUI(
    psiLibrary: Windows.Win32.Shell.IShellItem,
    hwndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    pszTitle: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszInstruction: {"kind""Ptr","child":{"kind":"UInt16"}},
    lmdOptions: Windows.Win32.Shell.LIBRARYMANAGEDIALOGOPTIONS,

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHResolveLibrary(
    psiLibrary: Windows.Win32.Shell.IShellItem,

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHAssocEnumHandlers(
    pszExtra: {"kind""Ptr","child":{"kind":"UInt16"}},
    afFilter: Windows.Win32.Shell.ASSOC_FILTER,
    ppEnumHandler: {"kind""Ptr","child":Windows.Win32.Shell.IEnumAssocHandlers},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHAssocEnumHandlersForProtocolByApplication(
    protocol: {"kind""Ptr","child":{"kind":"UInt16"}},
    riid: {"kind""Ptr","child":Guid},
    enumHandlers: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HMONITOR_UserSize(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind":"UInt32"},
    param2: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HMONITOR_UserMarshal(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HMONITOR_UserUnmarshal(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HMONITOR_UserFree(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HMONITOR_UserSize64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind":"UInt32"},
    param2: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HMONITOR_UserMarshal64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HMONITOR_UserUnmarshal64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"Byte"}},
    param2: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "OLE32" fn HMONITOR_UserFree64(
    param0: {"kind""Ptr","child":{"kind":"UInt32"}},
    param1: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHCreateDefaultPropertiesOp(
    psi: Windows.Win32.Shell.IShellItem,
    ppFileOp: {"kind""Ptr","child":Windows.Win32.Shell.IFileOperation},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHSetDefaultProperties(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    psi: Windows.Win32.Shell.IShellItem,
    dwFileOpFlags: {"kind":"UInt32"},
    pfops: Windows.Win32.Shell.IFileOperationProgressSink,

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetMalloc(
    ppMalloc: {"kind""Ptr","child":Windows.Win32.Com.IMalloc},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHAlloc(
    cb: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHFree(
    pv: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetIconOverlayIndexA(
    pszIconPath: {"kind""Ptr","child":{"kind":"SByte"}},
    iIconIndex: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetIconOverlayIndexW(
    pszIconPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    iIconIndex: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn ILClone(
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn ILCloneFirst(
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn ILCombine(
    pidl1: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    pidl2: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn ILFree(
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn ILGetNext(
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn ILGetSize(
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn ILFindChild(
    pidlParent: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    pidlChild: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn ILFindLastID(
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn ILRemoveLastID(
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn ILIsEqual(
    pidl1: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    pidl2: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn ILIsParent(
    pidl1: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    pidl2: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    fImmediate: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn ILSaveToStream(
    pstm: Windows.Win32.StructuredStorage.IStream,
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn ILLoadFromStreamEx(
    pstm: Windows.Win32.StructuredStorage.IStream,
    pidl: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn ILCreateFromPathA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn ILCreateFromPathW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHILCreateFromPath(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppidl: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST}},
    rgfInOut: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn ILAppendID(
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    pmkid: {"kind""Ptr","child":Windows.Win32.Shell.SHITEMID},
    fAppend: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetPathFromIDListEx(
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchPath: {"kind":"UInt32"},
    uOpts: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetPathFromIDListA(
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetPathFromIDListW(
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHCreateDirectory(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHCreateDirectoryExA(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},
    psa: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHCreateDirectoryExW(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    psa: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHOpenFolderAndSelectItems(
    pidlFolder: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    cidl: {"kind":"UInt32"},
    apidl: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHCreateShellItem(
    pidlParent: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    psfParent: Windows.Win32.Shell.IShellFolder,
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    ppsi: {"kind""Ptr","child":Windows.Win32.Shell.IShellItem},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetSpecialFolderLocation(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    csidl: {"kind":"Int32"},
    ppidl: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHCloneSpecialIDList(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    csidl: {"kind":"Int32"},
    fCreate: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetSpecialFolderPathA(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},
    csidl: {"kind":"Int32"},
    fCreate: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetSpecialFolderPathW(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    csidl: {"kind":"Int32"},
    fCreate: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHFlushSFCache(

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetFolderPathA(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    csidl: {"kind":"Int32"},
    hToken: Windows.Win32.SystemServices.HANDLE,
    dwFlags: {"kind":"UInt32"},
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetFolderPathW(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    csidl: {"kind":"Int32"},
    hToken: Windows.Win32.SystemServices.HANDLE,
    dwFlags: {"kind":"UInt32"},
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetFolderLocation(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    csidl: {"kind":"Int32"},
    hToken: Windows.Win32.SystemServices.HANDLE,
    dwFlags: {"kind":"UInt32"},
    ppidl: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHSetFolderPathA(
    csidl: {"kind":"Int32"},
    hToken: Windows.Win32.SystemServices.HANDLE,
    dwFlags: {"kind":"UInt32"},
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHSetFolderPathW(
    csidl: {"kind":"Int32"},
    hToken: Windows.Win32.SystemServices.HANDLE,
    dwFlags: {"kind":"UInt32"},
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetFolderPathAndSubDirA(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    csidl: {"kind":"Int32"},
    hToken: Windows.Win32.SystemServices.HANDLE,
    dwFlags: {"kind":"UInt32"},
    pszSubDir: {"kind""Ptr","child":{"kind":"SByte"}},
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetFolderPathAndSubDirW(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    csidl: {"kind":"Int32"},
    hToken: Windows.Win32.SystemServices.HANDLE,
    dwFlags: {"kind":"UInt32"},
    pszSubDir: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetKnownFolderIDList(
    rfid: {"kind""Ptr","child":Guid},
    dwFlags: {"kind":"UInt32"},
    hToken: Windows.Win32.SystemServices.HANDLE,
    ppidl: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHSetKnownFolderPath(
    rfid: {"kind""Ptr","child":Guid},
    dwFlags: {"kind":"UInt32"},
    hToken: Windows.Win32.SystemServices.HANDLE,
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetKnownFolderPath(
    rfid: {"kind""Ptr","child":Guid},
    dwFlags: {"kind":"UInt32"},
    hToken: Windows.Win32.SystemServices.HANDLE,
    ppszPath: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetKnownFolderItem(
    rfid: {"kind""Ptr","child":Guid},
    flags: Windows.Win32.Shell.KNOWN_FOLDER_FLAG,
    hToken: Windows.Win32.SystemServices.HANDLE,
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetSetFolderCustomSettings(
    pfcs: {"kind""Ptr","child":Windows.Win32.Shell.SHFOLDERCUSTOMSETTINGS},
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwReadWrite: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHBrowseForFolderA(
    lpbi: {"kind""Ptr","child":Windows.Win32.Shell.BROWSEINFOA},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHBrowseForFolderW(
    lpbi: {"kind""Ptr","child":Windows.Win32.Shell.BROWSEINFOW},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHLoadInProc(
    rclsid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetDesktopFolder(
    ppshf: {"kind""Ptr","child":Windows.Win32.Shell.IShellFolder},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHChangeNotify(
    wEventId: {"kind":"Int32"},
    uFlags: {"kind":"UInt32"},
    dwItem1: {"kind""Ptr","child":{"kind":"Void"}},
    dwItem2: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHAddToRecentDocs(
    uFlags: {"kind":"UInt32"},
    pv: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHHandleUpdateImage(
    pidlExtra: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHUpdateImageA(
    pszHashItem: {"kind""Ptr","child":{"kind":"SByte"}},
    iIndex: {"kind":"Int32"},
    uFlags: {"kind":"UInt32"},
    iImageIndex: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHUpdateImageW(
    pszHashItem: {"kind""Ptr","child":{"kind":"UInt16"}},
    iIndex: {"kind":"Int32"},
    uFlags: {"kind":"UInt32"},
    iImageIndex: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHChangeNotifyRegister(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    fSources: {"kind":"Int32"},
    fEvents: {"kind":"Int32"},
    wMsg: {"kind":"UInt32"},
    cEntries: {"kind":"Int32"},
    pshcne: {"kind""Ptr","child":Windows.Win32.Shell.SHChangeNotifyEntry},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHChangeNotifyDeregister(
    ulID: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHChangeNotification_Lock(
    hChange: Windows.Win32.SystemServices.HANDLE,
    dwProcId: {"kind":"UInt32"},
    pppidl: {"kind""Ptr","child":{"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST}}},
    plEvent: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHChangeNotification_Unlock(
    hLock: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetRealIDL(
    psf: Windows.Win32.Shell.IShellFolder,
    pidlSimple: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    ppidlReal: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetInstanceExplorer(
    ppunk: {"kind""Ptr","child":Windows.Win32.Com.IUnknown},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetDataFromIDListA(
    psf: Windows.Win32.Shell.IShellFolder,
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    nFormat: {"kind":"Int32"},
    pv: {"kind""Ptr","child":{"kind":"Void"}},
    cb: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetDataFromIDListW(
    psf: Windows.Win32.Shell.IShellFolder,
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    nFormat: {"kind":"Int32"},
    pv: {"kind""Ptr","child":{"kind":"Void"}},
    cb: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn RestartDialog(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    pszPrompt: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwReturn: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn RestartDialogEx(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    pszPrompt: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwReturn: {"kind":"UInt32"},
    dwReasonCode: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHCoCreateInstance(
    pszCLSID: {"kind""Ptr","child":{"kind":"UInt16"}},
    pclsid: {"kind""Ptr","child":Guid},
    pUnkOuter: Windows.Win32.Com.IUnknown,
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHCreateDataObject(
    pidlFolder: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    cidl: {"kind":"UInt32"},
    apidl: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST}},
    pdtInner: Windows.Win32.Com.IDataObject,
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn CIDLData_CreateFromIDArray(
    pidlFolder: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    cidl: {"kind":"UInt32"},
    apidl: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST}},
    ppdtobj: {"kind""Ptr","child":Windows.Win32.Com.IDataObject},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHCreateStdEnumFmtEtc(
    cfmt: {"kind":"UInt32"},
    afmt: {"kind""Ptr","child":Windows.Win32.Com.FORMATETC},
    ppenumFormatEtc: {"kind""Ptr","child":Windows.Win32.Com.IEnumFORMATETC},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHDoDragDrop(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    pdata: Windows.Win32.Com.IDataObject,
    pdsrc: Windows.Win32.Com.IDropSource,
    dwEffect: {"kind":"UInt32"},
    pdwEffect: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn DAD_SetDragImage(
    him: Windows.Win32.Controls.HIMAGELIST,
    pptOffset: {"kind""Ptr","child":Windows.Win32.DisplayDevices.POINT},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn DAD_DragEnterEx(
    hwndTarget: Windows.Win32.WindowsAndMessaging.HWND,
    ptStart: Windows.Win32.DisplayDevices.POINT,

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn DAD_DragEnterEx2(
    hwndTarget: Windows.Win32.WindowsAndMessaging.HWND,
    ptStart: Windows.Win32.DisplayDevices.POINT,
    pdtObject: Windows.Win32.Com.IDataObject,

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn DAD_ShowDragImage(
    fShow: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn DAD_DragMove(
    pt: Windows.Win32.DisplayDevices.POINT,

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn DAD_DragLeave(

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn DAD_AutoScroll(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    pad: {"kind""Ptr","child":Windows.Win32.Shell.AUTO_SCROLL_DATA},
    pptNow: {"kind""Ptr","child":Windows.Win32.DisplayDevices.POINT},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn ReadCabinetState(
    pcs: {"kind""Ptr","child":Windows.Win32.Shell.CABINETSTATE},
    cLength: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn WriteCabinetState(
    pcs: {"kind""Ptr","child":Windows.Win32.Shell.CABINETSTATE},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn PathMakeUniqueName(
    pszUniqueName: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchMax: {"kind":"UInt32"},
    pszTemplate: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszLongPlate: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszDir: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn PathIsExe(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn PathCleanupSpec(
    pszDir: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszSpec: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "SHELL32" fn PathResolve(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    dirs: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    fFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn GetFileNameFromBrowse(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    pszFilePath: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchFilePath: {"kind":"UInt32"},
    pszWorkingDir: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszDefExt: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszFilters: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszTitle: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn DriveType(
    iDrive: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn RealDriveType(
    iDrive: {"kind":"Int32"},
    fOKToHitNet: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn IsNetDrive(
    iDrive: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn Shell_MergeMenus(
    hmDst: Windows.Win32.MenusAndResources.HMENU,
    hmSrc: Windows.Win32.MenusAndResources.HMENU,
    uInsert: {"kind":"UInt32"},
    uIDAdjust: {"kind":"UInt32"},
    uIDAdjustMax: {"kind":"UInt32"},
    uFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHObjectProperties(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    shopObjectType: {"kind":"UInt32"},
    pszObjectName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszPropertyPage: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHFormatDrive(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    drive: {"kind":"UInt32"},
    fmtID: {"kind":"UInt32"},
    options: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHDestroyPropSheetExtArray(
    hpsxa: {"kind""Ptr","child":Windows.Win32.Shell.HPSXA__},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHAddFromPropSheetExtArray(
    hpsxa: {"kind""Ptr","child":Windows.Win32.Shell.HPSXA__},
    lpfnAddPage: Windows.Win32.Controls.LPFNADDPROPSHEETPAGE,
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHReplaceFromPropSheetExtArray(
    hpsxa: {"kind""Ptr","child":Windows.Win32.Shell.HPSXA__},
    uPageID: {"kind":"UInt32"},
    lpfnReplaceWith: Windows.Win32.Controls.LPFNADDPROPSHEETPAGE,
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn OpenRegStream(
    hkey: Windows.Win32.WindowsProgramming.HKEY,
    pszSubkey: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszValue: {"kind""Ptr","child":{"kind":"UInt16"}},
    grfMode: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHFindFiles(
    pidlFolder: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    pidlSaveFile: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn PathGetShortPath(
    pszLongPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn PathYetAnotherMakeUniqueName(
    pszUniqueName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszShort: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszFileSpec: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn Win32DeleteFile(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHRestricted(
    rest: Windows.Win32.Shell.RESTRICTIONS,

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SignalFileOpen(
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn AssocGetDetailsOfPropKey(
    psf: Windows.Win32.Shell.IShellFolder,
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    pkey: {"kind""Ptr","child":Windows.Win32.WindowsPropertiesSystem.PROPERTYKEY},
    pv: {"kind""Ptr","child":Windows.Win32.Automation.VARIANT},
    pfFoundPropKey: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHStartNetConnectionDialogW(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    pszRemoteName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwType: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHDefExtractIconA(
    pszIconFile: {"kind""Ptr","child":{"kind":"SByte"}},
    iIndex: {"kind":"Int32"},
    uFlags: {"kind":"UInt32"},
    phiconLarge: {"kind""Ptr","child":Windows.Win32.Gdi.HICON},
    phiconSmall: {"kind""Ptr","child":Windows.Win32.Gdi.HICON},
    nIconSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHDefExtractIconW(
    pszIconFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    iIndex: {"kind":"Int32"},
    uFlags: {"kind":"UInt32"},
    phiconLarge: {"kind""Ptr","child":Windows.Win32.Gdi.HICON},
    phiconSmall: {"kind""Ptr","child":Windows.Win32.Gdi.HICON},
    nIconSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHOpenWithDialog(
    hwndParent: Windows.Win32.WindowsAndMessaging.HWND,
    poainfo: {"kind""Ptr","child":Windows.Win32.Shell.OPENASINFO},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn Shell_GetImageLists(
    phiml: {"kind""Ptr","child":Windows.Win32.Controls.HIMAGELIST},
    phimlSmall: {"kind""Ptr","child":Windows.Win32.Controls.HIMAGELIST},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn Shell_GetCachedImageIndex(
    pwszIconPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    iIconIndex: {"kind":"Int32"},
    uIconFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn Shell_GetCachedImageIndexA(
    pszIconPath: {"kind""Ptr","child":{"kind":"SByte"}},
    iIconIndex: {"kind":"Int32"},
    uIconFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn Shell_GetCachedImageIndexW(
    pszIconPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    iIconIndex: {"kind":"Int32"},
    uIconFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHValidateUNC(
    hwndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    pszFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    fConnect: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHSetInstanceExplorer(
    punk: Windows.Win32.Com.IUnknown,

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn IsUserAnAdmin(

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHShellFolderView_Message(
    hwndMain: Windows.Win32.WindowsAndMessaging.HWND,
    uMsg: {"kind":"UInt32"},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHCreateShellFolderView(
    pcsfv: {"kind""Ptr","child":Windows.Win32.Shell.SFV_CREATE},
    ppsv: {"kind""Ptr","child":Windows.Win32.Shell.IShellView},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn CDefFolderMenu_Create2(
    pidlFolder: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    cidl: {"kind":"UInt32"},
    apidl: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST}},
    psf: Windows.Win32.Shell.IShellFolder,
    pfn: Windows.Win32.Shell.LPFNDFMCALLBACK,
    nKeys: {"kind":"UInt32"},
    ahkeys: {"kind""Ptr","child":{"kind":"IntPtr"}},
    ppcm: {"kind""Ptr","child":Windows.Win32.Shell.IContextMenu},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHCreateDefaultContextMenu(
    pdcm: {"kind""Ptr","child":Windows.Win32.Shell.DEFCONTEXTMENU},
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHFind_InitMenuPopup(
    hmenu: Windows.Win32.MenusAndResources.HMENU,
    hwndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    idCmdFirst: {"kind":"UInt32"},
    idCmdLast: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHCreateShellFolderViewEx(
    pcsfv: {"kind""Ptr","child":Windows.Win32.Shell.CSFV},
    ppsv: {"kind""Ptr","child":Windows.Win32.Shell.IShellView},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetSetSettings(
    lpss: {"kind""Ptr","child":Windows.Win32.Shell.SHELLSTATEA},
    dwMask: {"kind":"UInt32"},
    bSet: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetSettings(
    psfs: {"kind""Ptr","child":Windows.Win32.Shell.SHELLFLAGSTATE},
    dwMask: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHBindToParent(
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    ppidlLast: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHBindToFolderIDListParent(
    psfRoot: Windows.Win32.Shell.IShellFolder,
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    ppidlLast: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHBindToFolderIDListParentEx(
    psfRoot: Windows.Win32.Shell.IShellFolder,
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    ppbc: Windows.Win32.Com.IBindCtx,
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    ppidlLast: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHBindToObject(
    psf: Windows.Win32.Shell.IShellFolder,
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    pbc: Windows.Win32.Com.IBindCtx,
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHParseDisplayName(
    pszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pbc: Windows.Win32.Com.IBindCtx,
    ppidl: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST}},
    sfgaoIn: {"kind":"UInt32"},
    psfgaoOut: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHPathPrepareForWriteA(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    punkEnableModless: Windows.Win32.Com.IUnknown,
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHPathPrepareForWriteW(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    punkEnableModless: Windows.Win32.Com.IUnknown,
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHCreateFileExtractIconW(
    pszFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFileAttributes: {"kind":"UInt32"},
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHLimitInputEdit(
    hwndEdit: Windows.Win32.WindowsAndMessaging.HWND,
    psf: Windows.Win32.Shell.IShellFolder,

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetAttributesFromDataObject(
    pdo: Windows.Win32.Com.IDataObject,
    dwAttributeMask: {"kind":"UInt32"},
    pdwAttributes: {"kind""Ptr","child":{"kind":"UInt32"}},
    pcItems: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHMapPIDLToSystemImageListIndex(
    pshf: Windows.Win32.Shell.IShellFolder,
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    piIndexSel: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHCLSIDFromString(
    psz: {"kind""Ptr","child":{"kind":"UInt16"}},
    pclsid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn PickIconDlg(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    pszIconPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchIconPath: {"kind":"UInt32"},
    piIconIndex: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn StgMakeUniqueName(
    pstgParent: Windows.Win32.StructuredStorage.IStorage,
    pszFileSpec: {"kind""Ptr","child":{"kind":"UInt16"}},
    grfMode: {"kind":"UInt32"},
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHChangeNotifyRegisterThread(
    status: Windows.Win32.Shell.SCNRT_STATUS,

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn PathQualify(
    psz: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn PathIsSlowA(
    pszFile: {"kind""Ptr","child":{"kind":"SByte"}},
    dwAttr: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn PathIsSlowW(
    pszFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwAttr: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHCreatePropSheetExtArray(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    pszSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    max_iface: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHOpenPropSheetW(
    pszCaption: {"kind""Ptr","child":{"kind":"UInt16"}},
    ahkeys: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.WindowsProgramming.HKEY}},
    ckeys: {"kind":"UInt32"},
    pclsidDefault: {"kind""Ptr","child":Guid},
    pdtobj: Windows.Win32.Com.IDataObject,
    psb: Windows.Win32.Shell.IShellBrowser,
    pStartPage: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHDOCVW" fn SoftwareUpdateMessageBox(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    pszDistUnit: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    psdi: {"kind""Ptr","child":Windows.Win32.Shell.SOFTDISTINFO},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHMultiFileProperties(
    pdtobj: Windows.Win32.Com.IDataObject,
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHCreateQueryCancelAutoPlayMoniker(
    ppmoniker: {"kind""Ptr","child":Windows.Win32.Com.IMoniker},

// set_last_errror=False (can and should we use this?)
pub extern "SHDOCVW" fn ImportPrivacySettings(
    pszFilename: {"kind""Ptr","child":{"kind":"UInt16"}},
    pfParsePrivacyPreferences: {"kind""Ptr","child":{"kind":"Int32"}},
    pfParsePerSiteRules: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHDOCVW" fn DoPrivacyDlg(
    hwndOwner: Windows.Win32.WindowsAndMessaging.HWND,
    pszUrl: {"kind""Ptr","child":{"kind":"UInt16"}},
    pPrivacyEnum: Windows.Win32.Debug.IEnumPrivacyRecords,
    fReportAllSites: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-shcore-scaling-l1-1-0" fn GetScaleFactorForDevice(
    deviceType: Windows.Win32.Shell.DISPLAY_DEVICE_TYPE,

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-shcore-scaling-l1-1-0" fn RegisterScaleChangeNotifications(
    displayDevice: Windows.Win32.Shell.DISPLAY_DEVICE_TYPE,
    hwndNotify: Windows.Win32.WindowsAndMessaging.HWND,
    uMsgNotify: {"kind":"UInt32"},
    pdwCookie: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-shcore-scaling-l1-1-0" fn RevokeScaleChangeNotifications(
    displayDevice: Windows.Win32.Shell.DISPLAY_DEVICE_TYPE,
    dwCookie: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-shcore-scaling-l1-1-1" fn GetScaleFactorForMonitor(
    hMon: {"kind":"IntPtr"},
    pScale: {"kind""Ptr","child":Windows.Win32.Shell.DEVICE_SCALE_FACTOR},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-shcore-scaling-l1-1-1" fn RegisterScaleChangeEvent(
    hEvent: Windows.Win32.SystemServices.HANDLE,
    pdwCookie: {"kind""Ptr","child":{"kind":"UIntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-shcore-scaling-l1-1-1" fn UnregisterScaleChangeEvent(
    dwCookie: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-shcore-scaling-l1-1-2" fn GetDpiForShellUIComponent(
    param0: Windows.Win32.Shell.SHELL_UI_COMPONENT,

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrChrA(
    pszStart: {"kind""Ptr","child":{"kind":"SByte"}},
    wMatch: {"kind":"UInt16"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrChrW(
    pszStart: {"kind""Ptr","child":{"kind":"UInt16"}},
    wMatch: {"kind":"UInt16"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrChrIA(
    pszStart: {"kind""Ptr","child":{"kind":"SByte"}},
    wMatch: {"kind":"UInt16"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrChrIW(
    pszStart: {"kind""Ptr","child":{"kind":"UInt16"}},
    wMatch: {"kind":"UInt16"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrChrNW(
    pszStart: {"kind""Ptr","child":{"kind":"UInt16"}},
    wMatch: {"kind":"UInt16"},
    cchMax: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrChrNIW(
    pszStart: {"kind""Ptr","child":{"kind":"UInt16"}},
    wMatch: {"kind":"UInt16"},
    cchMax: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrCmpNA(
    psz1: {"kind""Ptr","child":{"kind":"SByte"}},
    psz2: {"kind""Ptr","child":{"kind":"SByte"}},
    nChar: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrCmpNW(
    psz1: {"kind""Ptr","child":{"kind":"UInt16"}},
    psz2: {"kind""Ptr","child":{"kind":"UInt16"}},
    nChar: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrCmpNIA(
    psz1: {"kind""Ptr","child":{"kind":"SByte"}},
    psz2: {"kind""Ptr","child":{"kind":"SByte"}},
    nChar: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrCmpNIW(
    psz1: {"kind""Ptr","child":{"kind":"UInt16"}},
    psz2: {"kind""Ptr","child":{"kind":"UInt16"}},
    nChar: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrCSpnA(
    pszStr: {"kind""Ptr","child":{"kind":"SByte"}},
    pszSet: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrCSpnW(
    pszStr: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszSet: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrCSpnIA(
    pszStr: {"kind""Ptr","child":{"kind":"SByte"}},
    pszSet: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrCSpnIW(
    pszStr: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszSet: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrDupA(
    pszSrch: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrDupW(
    pszSrch: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrFormatByteSizeEx(
    ull: {"kind":"UInt64"},
    flags: {"kind":"Int32"},
    pszBuf: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchBuf: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrFormatByteSizeA(
    dw: {"kind":"UInt32"},
    pszBuf: {"kind""Ptr","child":{"kind":"SByte"}},
    cchBuf: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrFormatByteSize64A(
    qdw: {"kind":"Int64"},
    pszBuf: {"kind""Ptr","child":{"kind":"SByte"}},
    cchBuf: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrFormatByteSizeW(
    qdw: {"kind":"Int64"},
    pszBuf: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchBuf: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrFormatKBSizeW(
    qdw: {"kind":"Int64"},
    pszBuf: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchBuf: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrFormatKBSizeA(
    qdw: {"kind":"Int64"},
    pszBuf: {"kind""Ptr","child":{"kind":"SByte"}},
    cchBuf: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrFromTimeIntervalA(
    pszOut: {"kind""Ptr","child":{"kind":"SByte"}},
    cchMax: {"kind":"UInt32"},
    dwTimeMS: {"kind":"UInt32"},
    digits: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrFromTimeIntervalW(
    pszOut: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchMax: {"kind":"UInt32"},
    dwTimeMS: {"kind":"UInt32"},
    digits: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrIsIntlEqualA(
    fCaseSens: Windows.Win32.SystemServices.BOOL,
    pszString1: {"kind""Ptr","child":{"kind":"SByte"}},
    pszString2: {"kind""Ptr","child":{"kind":"SByte"}},
    nChar: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrIsIntlEqualW(
    fCaseSens: Windows.Win32.SystemServices.BOOL,
    pszString1: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszString2: {"kind""Ptr","child":{"kind":"UInt16"}},
    nChar: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrNCatA(
    psz1: {"kind""Ptr","child":{"kind":"SByte"}},
    psz2: {"kind""Ptr","child":{"kind":"SByte"}},
    cchMax: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrNCatW(
    psz1: {"kind""Ptr","child":{"kind":"UInt16"}},
    psz2: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchMax: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrPBrkA(
    psz: {"kind""Ptr","child":{"kind":"SByte"}},
    pszSet: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrPBrkW(
    psz: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszSet: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrRChrA(
    pszStart: {"kind""Ptr","child":{"kind":"SByte"}},
    pszEnd: {"kind""Ptr","child":{"kind":"SByte"}},
    wMatch: {"kind":"UInt16"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrRChrW(
    pszStart: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszEnd: {"kind""Ptr","child":{"kind":"UInt16"}},
    wMatch: {"kind":"UInt16"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrRChrIA(
    pszStart: {"kind""Ptr","child":{"kind":"SByte"}},
    pszEnd: {"kind""Ptr","child":{"kind":"SByte"}},
    wMatch: {"kind":"UInt16"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrRChrIW(
    pszStart: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszEnd: {"kind""Ptr","child":{"kind":"UInt16"}},
    wMatch: {"kind":"UInt16"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrRStrIA(
    pszSource: {"kind""Ptr","child":{"kind":"SByte"}},
    pszLast: {"kind""Ptr","child":{"kind":"SByte"}},
    pszSrch: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrRStrIW(
    pszSource: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszLast: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszSrch: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrSpnA(
    psz: {"kind""Ptr","child":{"kind":"SByte"}},
    pszSet: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrSpnW(
    psz: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszSet: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrStrA(
    pszFirst: {"kind""Ptr","child":{"kind":"SByte"}},
    pszSrch: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrStrW(
    pszFirst: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszSrch: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrStrIA(
    pszFirst: {"kind""Ptr","child":{"kind":"SByte"}},
    pszSrch: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrStrIW(
    pszFirst: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszSrch: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrStrNW(
    pszFirst: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszSrch: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchMax: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrStrNIW(
    pszFirst: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszSrch: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchMax: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrToIntA(
    pszSrc: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrToIntW(
    pszSrc: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrToIntExA(
    pszString: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"Int32"},
    piRet: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrToIntExW(
    pszString: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"Int32"},
    piRet: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrToInt64ExA(
    pszString: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"Int32"},
    pllRet: {"kind""Ptr","child":{"kind":"Int64"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrToInt64ExW(
    pszString: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"Int32"},
    pllRet: {"kind""Ptr","child":{"kind":"Int64"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrTrimA(
    psz: {"kind""Ptr","child":{"kind":"SByte"}},
    pszTrimChars: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrTrimW(
    psz: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszTrimChars: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrCatW(
    psz1: {"kind""Ptr","child":{"kind":"UInt16"}},
    psz2: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrCmpW(
    psz1: {"kind""Ptr","child":{"kind":"UInt16"}},
    psz2: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrCmpIW(
    psz1: {"kind""Ptr","child":{"kind":"UInt16"}},
    psz2: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrCpyW(
    psz1: {"kind""Ptr","child":{"kind":"UInt16"}},
    psz2: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrCpyNW(
    pszDst: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszSrc: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchMax: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrCatBuffW(
    pszDest: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszSrc: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchDestBuffSize: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrCatBuffA(
    pszDest: {"kind""Ptr","child":{"kind":"SByte"}},
    pszSrc: {"kind""Ptr","child":{"kind":"SByte"}},
    cchDestBuffSize: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn ChrCmpIA(
    w1: {"kind":"UInt16"},
    w2: {"kind":"UInt16"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn ChrCmpIW(
    w1: {"kind":"UInt16"},
    w2: {"kind":"UInt16"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn wvnsprintfA(
    pszDest: {"kind""Ptr","child":{"kind":"SByte"}},
    cchDest: {"kind":"Int32"},
    pszFmt: {"kind""Ptr","child":{"kind":"SByte"}},
    arglist: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn wvnsprintfW(
    pszDest: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchDest: {"kind":"Int32"},
    pszFmt: {"kind""Ptr","child":{"kind":"UInt16"}},
    arglist: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn wnsprintfA(
    pszDest: {"kind""Ptr","child":{"kind":"SByte"}},
    cchDest: {"kind":"Int32"},
    pszFmt: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn wnsprintfW(
    pszDest: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchDest: {"kind":"Int32"},
    pszFmt: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrRetToStrA(
    pstr: {"kind""Ptr","child":Windows.Win32.Shell.STRRET},
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    ppsz: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrRetToStrW(
    pstr: {"kind""Ptr","child":Windows.Win32.Shell.STRRET},
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    ppsz: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrRetToBufA(
    pstr: {"kind""Ptr","child":Windows.Win32.Shell.STRRET},
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    pszBuf: {"kind""Ptr","child":{"kind":"SByte"}},
    cchBuf: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrRetToBufW(
    pstr: {"kind""Ptr","child":Windows.Win32.Shell.STRRET},
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    pszBuf: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchBuf: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHStrDupA(
    psz: {"kind""Ptr","child":{"kind":"SByte"}},
    ppwsz: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHStrDupW(
    psz: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppwsz: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrCmpLogicalW(
    psz1: {"kind""Ptr","child":{"kind":"UInt16"}},
    psz2: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrCatChainW(
    pszDst: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchDst: {"kind":"UInt32"},
    ichAt: {"kind":"UInt32"},
    pszSrc: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrRetToBSTR(
    pstr: {"kind""Ptr","child":Windows.Win32.Shell.STRRET},
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    pbstr: {"kind""Ptr","child":Windows.Win32.Automation.BSTR},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHLoadIndirectString(
    pszSource: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszOutBuf: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchOutBuf: {"kind":"UInt32"},
    ppvReserved: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn IsCharSpaceA(
    wch: {"kind":"SByte"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn IsCharSpaceW(
    wch: {"kind":"UInt16"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrCmpCA(
    pszStr1: {"kind""Ptr","child":{"kind":"SByte"}},
    pszStr2: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrCmpCW(
    pszStr1: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszStr2: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrCmpICA(
    pszStr1: {"kind""Ptr","child":{"kind":"SByte"}},
    pszStr2: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrCmpICW(
    pszStr1: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszStr2: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrCmpNCA(
    pszStr1: {"kind""Ptr","child":{"kind":"SByte"}},
    pszStr2: {"kind""Ptr","child":{"kind":"SByte"}},
    nChar: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrCmpNCW(
    pszStr1: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszStr2: {"kind""Ptr","child":{"kind":"UInt16"}},
    nChar: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrCmpNICA(
    pszStr1: {"kind""Ptr","child":{"kind":"SByte"}},
    pszStr2: {"kind""Ptr","child":{"kind":"SByte"}},
    nChar: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn StrCmpNICW(
    pszStr1: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszStr2: {"kind""Ptr","child":{"kind":"UInt16"}},
    nChar: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn IntlStrEqWorkerA(
    fCaseSens: Windows.Win32.SystemServices.BOOL,
    lpString1: {"kind""Ptr","child":{"kind":"SByte"}},
    lpString2: {"kind""Ptr","child":{"kind":"SByte"}},
    nChar: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn IntlStrEqWorkerW(
    fCaseSens: Windows.Win32.SystemServices.BOOL,
    lpString1: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpString2: {"kind""Ptr","child":{"kind":"UInt16"}},
    nChar: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathAddBackslashA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathAddBackslashW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathAddExtensionA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},
    pszExt: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathAddExtensionW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszExt: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathAppendA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},
    pszMore: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathAppendW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszMore: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathBuildRootA(
    pszRoot: {"kind""Ptr","child":{"kind":"SByte"}},
    iDrive: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathBuildRootW(
    pszRoot: {"kind""Ptr","child":{"kind":"UInt16"}},
    iDrive: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "SHLWAPI" fn PathCanonicalizeA(
    pszBuf: {"kind""Ptr","child":{"kind":"SByte"}},
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "SHLWAPI" fn PathCanonicalizeW(
    pszBuf: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathCombineA(
    pszDest: {"kind""Ptr","child":{"kind":"SByte"}},
    pszDir: {"kind""Ptr","child":{"kind":"SByte"}},
    pszFile: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathCombineW(
    pszDest: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszDir: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszFile: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathCompactPathA(
    hDC: Windows.Win32.Gdi.HDC,
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},
    dx: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathCompactPathW(
    hDC: Windows.Win32.Gdi.HDC,
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    dx: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathCompactPathExA(
    pszOut: {"kind""Ptr","child":{"kind":"SByte"}},
    pszSrc: {"kind""Ptr","child":{"kind":"SByte"}},
    cchMax: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathCompactPathExW(
    pszOut: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszSrc: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchMax: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathCommonPrefixA(
    pszFile1: {"kind""Ptr","child":{"kind":"SByte"}},
    pszFile2: {"kind""Ptr","child":{"kind":"SByte"}},
    achPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathCommonPrefixW(
    pszFile1: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszFile2: {"kind""Ptr","child":{"kind":"UInt16"}},
    achPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "SHLWAPI" fn PathFileExistsA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "SHLWAPI" fn PathFileExistsW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathFindExtensionA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathFindExtensionW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathFindFileNameA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathFindFileNameW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathFindNextComponentA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathFindNextComponentW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathFindOnPathA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},
    ppszOtherDirs: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathFindOnPathW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppszOtherDirs: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathFindSuffixArrayA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},
    apszSuffix: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},
    iArraySize: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathFindSuffixArrayW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    apszSuffix: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    iArraySize: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathGetArgsA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathGetArgsW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathIsLFNFileSpecA(
    pszName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathIsLFNFileSpecW(
    pszName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathGetCharTypeA(
    ch: {"kind":"Byte"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathGetCharTypeW(
    ch: {"kind":"UInt16"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathGetDriveNumberA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathGetDriveNumberW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathIsDirectoryA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathIsDirectoryW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathIsDirectoryEmptyA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathIsDirectoryEmptyW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathIsFileSpecA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathIsFileSpecW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathIsPrefixA(
    pszPrefix: {"kind""Ptr","child":{"kind":"SByte"}},
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathIsPrefixW(
    pszPrefix: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathIsRelativeA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathIsRelativeW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathIsRootA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathIsRootW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathIsSameRootA(
    pszPath1: {"kind""Ptr","child":{"kind":"SByte"}},
    pszPath2: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathIsSameRootW(
    pszPath1: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszPath2: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathIsUNCA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathIsUNCW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathIsNetworkPathA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathIsNetworkPathW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathIsUNCServerA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathIsUNCServerW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathIsUNCServerShareA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathIsUNCServerShareW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathIsContentTypeA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},
    pszContentType: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathIsContentTypeW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszContentType: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathIsURLA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathIsURLW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathMakePrettyA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathMakePrettyW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathMatchSpecA(
    pszFile: {"kind""Ptr","child":{"kind":"SByte"}},
    pszSpec: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathMatchSpecW(
    pszFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszSpec: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathMatchSpecExA(
    pszFile: {"kind""Ptr","child":{"kind":"SByte"}},
    pszSpec: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathMatchSpecExW(
    pszFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszSpec: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathParseIconLocationA(
    pszIconFile: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathParseIconLocationW(
    pszIconFile: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathQuoteSpacesA(
    lpsz: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathQuoteSpacesW(
    lpsz: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathRelativePathToA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},
    pszFrom: {"kind""Ptr","child":{"kind":"SByte"}},
    dwAttrFrom: {"kind":"UInt32"},
    pszTo: {"kind""Ptr","child":{"kind":"SByte"}},
    dwAttrTo: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathRelativePathToW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszFrom: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwAttrFrom: {"kind":"UInt32"},
    pszTo: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwAttrTo: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathRemoveArgsA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathRemoveArgsW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathRemoveBackslashA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathRemoveBackslashW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathRemoveBlanksA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathRemoveBlanksW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathRemoveExtensionA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathRemoveExtensionW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathRemoveFileSpecA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathRemoveFileSpecW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathRenameExtensionA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},
    pszExt: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathRenameExtensionW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszExt: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathSearchAndQualifyA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},
    pszBuf: {"kind""Ptr","child":{"kind":"SByte"}},
    cchBuf: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathSearchAndQualifyW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszBuf: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchBuf: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathSetDlgItemPathA(
    hDlg: Windows.Win32.WindowsAndMessaging.HWND,
    id: {"kind":"Int32"},
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathSetDlgItemPathW(
    hDlg: Windows.Win32.WindowsAndMessaging.HWND,
    id: {"kind":"Int32"},
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathSkipRootA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathSkipRootW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathStripPathA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathStripPathW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathStripToRootA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathStripToRootW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathUnquoteSpacesA(
    lpsz: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathUnquoteSpacesW(
    lpsz: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathMakeSystemFolderA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathMakeSystemFolderW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathUnmakeSystemFolderA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathUnmakeSystemFolderW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathIsSystemFolderA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},
    dwAttrb: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathIsSystemFolderW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwAttrb: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathUndecorateA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathUndecorateW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathUnExpandEnvStringsA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},
    pszBuf: {"kind""Ptr","child":{"kind":"SByte"}},
    cchBuf: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathUnExpandEnvStringsW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszBuf: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchBuf: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn UrlCompareA(
    psz1: {"kind""Ptr","child":{"kind":"SByte"}},
    psz2: {"kind""Ptr","child":{"kind":"SByte"}},
    fIgnoreSlash: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn UrlCompareW(
    psz1: {"kind""Ptr","child":{"kind":"UInt16"}},
    psz2: {"kind""Ptr","child":{"kind":"UInt16"}},
    fIgnoreSlash: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn UrlCombineA(
    pszBase: {"kind""Ptr","child":{"kind":"SByte"}},
    pszRelative: {"kind""Ptr","child":{"kind":"SByte"}},
    pszCombined: {"kind""Ptr","child":{"kind":"SByte"}},
    pcchCombined: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn UrlCombineW(
    pszBase: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszRelative: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszCombined: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchCombined: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn UrlCanonicalizeA(
    pszUrl: {"kind""Ptr","child":{"kind":"SByte"}},
    pszCanonicalized: {"kind""Ptr","child":{"kind":"SByte"}},
    pcchCanonicalized: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn UrlCanonicalizeW(
    pszUrl: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszCanonicalized: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchCanonicalized: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn UrlIsOpaqueA(
    pszURL: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn UrlIsOpaqueW(
    pszURL: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn UrlIsNoHistoryA(
    pszURL: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn UrlIsNoHistoryW(
    pszURL: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn UrlIsA(
    pszUrl: {"kind""Ptr","child":{"kind":"SByte"}},
    UrlIs: Windows.Win32.Shell.URLIS,

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn UrlIsW(
    pszUrl: {"kind""Ptr","child":{"kind":"UInt16"}},
    UrlIs: Windows.Win32.Shell.URLIS,

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn UrlGetLocationA(
    pszURL: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn UrlGetLocationW(
    pszURL: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn UrlUnescapeA(
    pszUrl: {"kind""Ptr","child":{"kind":"SByte"}},
    pszUnescaped: {"kind""Ptr","child":{"kind":"SByte"}},
    pcchUnescaped: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn UrlUnescapeW(
    pszUrl: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszUnescaped: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchUnescaped: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn UrlEscapeA(
    pszUrl: {"kind""Ptr","child":{"kind":"SByte"}},
    pszEscaped: {"kind""Ptr","child":{"kind":"SByte"}},
    pcchEscaped: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn UrlEscapeW(
    pszUrl: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszEscaped: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchEscaped: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn UrlCreateFromPathA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},
    pszUrl: {"kind""Ptr","child":{"kind":"SByte"}},
    pcchUrl: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn UrlCreateFromPathW(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszUrl: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchUrl: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathCreateFromUrlA(
    pszUrl: {"kind""Ptr","child":{"kind":"SByte"}},
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},
    pcchPath: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathCreateFromUrlW(
    pszUrl: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchPath: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn PathCreateFromUrlAlloc(
    pszIn: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppszOut: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn UrlHashA(
    pszUrl: {"kind""Ptr","child":{"kind":"SByte"}},
    pbHash: {"kind""Ptr","child":{"kind":"Byte"}},
    cbHash: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn UrlHashW(
    pszUrl: {"kind""Ptr","child":{"kind":"UInt16"}},
    pbHash: {"kind""Ptr","child":{"kind":"Byte"}},
    cbHash: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn UrlGetPartW(
    pszIn: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszOut: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchOut: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwPart: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn UrlGetPartA(
    pszIn: {"kind""Ptr","child":{"kind":"SByte"}},
    pszOut: {"kind""Ptr","child":{"kind":"SByte"}},
    pcchOut: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwPart: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn UrlApplySchemeA(
    pszIn: {"kind""Ptr","child":{"kind":"SByte"}},
    pszOut: {"kind""Ptr","child":{"kind":"SByte"}},
    pcchOut: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn UrlApplySchemeW(
    pszIn: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszOut: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchOut: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn HashData(
    pbData: {"kind""Ptr","child":{"kind":"Byte"}},
    cbData: {"kind":"UInt32"},
    pbHash: {"kind""Ptr","child":{"kind":"Byte"}},
    cbHash: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn UrlFixupW(
    pcszUrl: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszTranslatedUrl: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchMax: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn ParseURLA(
    pcszURL: {"kind""Ptr","child":{"kind":"SByte"}},
    ppu: {"kind""Ptr","child":Windows.Win32.Shell.PARSEDURLA},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn ParseURLW(
    pcszURL: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppu: {"kind""Ptr","child":Windows.Win32.Shell.PARSEDURLW},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHDeleteEmptyKeyA(
    hkey: Windows.Win32.WindowsProgramming.HKEY,
    pszSubKey: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHDeleteEmptyKeyW(
    hkey: Windows.Win32.WindowsProgramming.HKEY,
    pszSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHDeleteKeyA(
    hkey: Windows.Win32.WindowsProgramming.HKEY,
    pszSubKey: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHDeleteKeyW(
    hkey: Windows.Win32.WindowsProgramming.HKEY,
    pszSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHRegDuplicateHKey(
    hkey: Windows.Win32.WindowsProgramming.HKEY,

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHDeleteValueA(
    hkey: Windows.Win32.WindowsProgramming.HKEY,
    pszSubKey: {"kind""Ptr","child":{"kind":"SByte"}},
    pszValue: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHDeleteValueW(
    hkey: Windows.Win32.WindowsProgramming.HKEY,
    pszSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszValue: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHGetValueA(
    hkey: Windows.Win32.WindowsProgramming.HKEY,
    pszSubKey: {"kind""Ptr","child":{"kind":"SByte"}},
    pszValue: {"kind""Ptr","child":{"kind":"SByte"}},
    pdwType: {"kind""Ptr","child":{"kind":"UInt32"}},
    pvData: {"kind""Ptr","child":{"kind":"Void"}},
    pcbData: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHGetValueW(
    hkey: Windows.Win32.WindowsProgramming.HKEY,
    pszSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszValue: {"kind""Ptr","child":{"kind":"UInt16"}},
    pdwType: {"kind""Ptr","child":{"kind":"UInt32"}},
    pvData: {"kind""Ptr","child":{"kind":"Void"}},
    pcbData: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHSetValueA(
    hkey: Windows.Win32.WindowsProgramming.HKEY,
    pszSubKey: {"kind""Ptr","child":{"kind":"SByte"}},
    pszValue: {"kind""Ptr","child":{"kind":"SByte"}},
    dwType: {"kind":"UInt32"},
    pvData: {"kind""Ptr","child":{"kind":"Void"}},
    cbData: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHSetValueW(
    hkey: Windows.Win32.WindowsProgramming.HKEY,
    pszSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszValue: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwType: {"kind":"UInt32"},
    pvData: {"kind""Ptr","child":{"kind":"Void"}},
    cbData: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHRegGetValueA(
    hkey: Windows.Win32.WindowsProgramming.HKEY,
    pszSubKey: {"kind""Ptr","child":{"kind":"SByte"}},
    pszValue: {"kind""Ptr","child":{"kind":"SByte"}},
    srrfFlags: {"kind":"Int32"},
    pdwType: {"kind""Ptr","child":{"kind":"UInt32"}},
    pvData: {"kind""Ptr","child":{"kind":"Void"}},
    pcbData: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHRegGetValueW(
    hkey: Windows.Win32.WindowsProgramming.HKEY,
    pszSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszValue: {"kind""Ptr","child":{"kind":"UInt16"}},
    srrfFlags: {"kind":"Int32"},
    pdwType: {"kind""Ptr","child":{"kind":"UInt32"}},
    pvData: {"kind""Ptr","child":{"kind":"Void"}},
    pcbData: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHRegGetValueFromHKCUHKLM(
    pwszKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszValue: {"kind""Ptr","child":{"kind":"UInt16"}},
    srrfFlags: {"kind":"Int32"},
    pdwType: {"kind""Ptr","child":{"kind":"UInt32"}},
    pvData: {"kind""Ptr","child":{"kind":"Void"}},
    pcbData: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHQueryValueExA(
    hkey: Windows.Win32.WindowsProgramming.HKEY,
    pszValue: {"kind""Ptr","child":{"kind":"SByte"}},
    pdwReserved: {"kind""Ptr","child":{"kind":"UInt32"}},
    pdwType: {"kind""Ptr","child":{"kind":"UInt32"}},
    pvData: {"kind""Ptr","child":{"kind":"Void"}},
    pcbData: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHQueryValueExW(
    hkey: Windows.Win32.WindowsProgramming.HKEY,
    pszValue: {"kind""Ptr","child":{"kind":"UInt16"}},
    pdwReserved: {"kind""Ptr","child":{"kind":"UInt32"}},
    pdwType: {"kind""Ptr","child":{"kind":"UInt32"}},
    pvData: {"kind""Ptr","child":{"kind":"Void"}},
    pcbData: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHEnumKeyExA(
    hkey: Windows.Win32.WindowsProgramming.HKEY,
    dwIndex: {"kind":"UInt32"},
    pszName: {"kind""Ptr","child":{"kind":"SByte"}},
    pcchName: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHEnumKeyExW(
    hkey: Windows.Win32.WindowsProgramming.HKEY,
    dwIndex: {"kind":"UInt32"},
    pszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchName: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHEnumValueA(
    hkey: Windows.Win32.WindowsProgramming.HKEY,
    dwIndex: {"kind":"UInt32"},
    pszValueName: {"kind""Ptr","child":{"kind":"SByte"}},
    pcchValueName: {"kind""Ptr","child":{"kind":"UInt32"}},
    pdwType: {"kind""Ptr","child":{"kind":"UInt32"}},
    pvData: {"kind""Ptr","child":{"kind":"Void"}},
    pcbData: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHEnumValueW(
    hkey: Windows.Win32.WindowsProgramming.HKEY,
    dwIndex: {"kind":"UInt32"},
    pszValueName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchValueName: {"kind""Ptr","child":{"kind":"UInt32"}},
    pdwType: {"kind""Ptr","child":{"kind":"UInt32"}},
    pvData: {"kind""Ptr","child":{"kind":"Void"}},
    pcbData: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHQueryInfoKeyA(
    hkey: Windows.Win32.WindowsProgramming.HKEY,
    pcSubKeys: {"kind""Ptr","child":{"kind":"UInt32"}},
    pcchMaxSubKeyLen: {"kind""Ptr","child":{"kind":"UInt32"}},
    pcValues: {"kind""Ptr","child":{"kind":"UInt32"}},
    pcchMaxValueNameLen: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHQueryInfoKeyW(
    hkey: Windows.Win32.WindowsProgramming.HKEY,
    pcSubKeys: {"kind""Ptr","child":{"kind":"UInt32"}},
    pcchMaxSubKeyLen: {"kind""Ptr","child":{"kind":"UInt32"}},
    pcValues: {"kind""Ptr","child":{"kind":"UInt32"}},
    pcchMaxValueNameLen: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHCopyKeyA(
    hkeySrc: Windows.Win32.WindowsProgramming.HKEY,
    pszSrcSubKey: {"kind""Ptr","child":{"kind":"SByte"}},
    hkeyDest: Windows.Win32.WindowsProgramming.HKEY,
    fReserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHCopyKeyW(
    hkeySrc: Windows.Win32.WindowsProgramming.HKEY,
    pszSrcSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    hkeyDest: Windows.Win32.WindowsProgramming.HKEY,
    fReserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHRegGetPathA(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    pcszSubKey: {"kind""Ptr","child":{"kind":"SByte"}},
    pcszValue: {"kind""Ptr","child":{"kind":"SByte"}},
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHRegGetPathW(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    pcszSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcszValue: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHRegSetPathA(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    pcszSubKey: {"kind""Ptr","child":{"kind":"SByte"}},
    pcszValue: {"kind""Ptr","child":{"kind":"SByte"}},
    pcszPath: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHRegSetPathW(
    hKey: Windows.Win32.WindowsProgramming.HKEY,
    pcszSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcszValue: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHRegCreateUSKeyA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},
    samDesired: {"kind":"UInt32"},
    hRelativeUSKey: {"kind":"IntPtr"},
    phNewUSKey: {"kind""Ptr","child":{"kind":"IntPtr"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHRegCreateUSKeyW(
    pwzPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    samDesired: {"kind":"UInt32"},
    hRelativeUSKey: {"kind":"IntPtr"},
    phNewUSKey: {"kind""Ptr","child":{"kind":"IntPtr"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHRegOpenUSKeyA(
    pszPath: {"kind""Ptr","child":{"kind":"SByte"}},
    samDesired: {"kind":"UInt32"},
    hRelativeUSKey: {"kind":"IntPtr"},
    phNewUSKey: {"kind""Ptr","child":{"kind":"IntPtr"}},
    fIgnoreHKCU: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHRegOpenUSKeyW(
    pwzPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    samDesired: {"kind":"UInt32"},
    hRelativeUSKey: {"kind":"IntPtr"},
    phNewUSKey: {"kind""Ptr","child":{"kind":"IntPtr"}},
    fIgnoreHKCU: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHRegQueryUSValueA(
    hUSKey: {"kind":"IntPtr"},
    pszValue: {"kind""Ptr","child":{"kind":"SByte"}},
    pdwType: {"kind""Ptr","child":{"kind":"UInt32"}},
    pvData: {"kind""Ptr","child":{"kind":"Void"}},
    pcbData: {"kind""Ptr","child":{"kind":"UInt32"}},
    fIgnoreHKCU: Windows.Win32.SystemServices.BOOL,
    pvDefaultData: {"kind""Ptr","child":{"kind":"Void"}},
    dwDefaultDataSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHRegQueryUSValueW(
    hUSKey: {"kind":"IntPtr"},
    pszValue: {"kind""Ptr","child":{"kind":"UInt16"}},
    pdwType: {"kind""Ptr","child":{"kind":"UInt32"}},
    pvData: {"kind""Ptr","child":{"kind":"Void"}},
    pcbData: {"kind""Ptr","child":{"kind":"UInt32"}},
    fIgnoreHKCU: Windows.Win32.SystemServices.BOOL,
    pvDefaultData: {"kind""Ptr","child":{"kind":"Void"}},
    dwDefaultDataSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHRegWriteUSValueA(
    hUSKey: {"kind":"IntPtr"},
    pszValue: {"kind""Ptr","child":{"kind":"SByte"}},
    dwType: {"kind":"UInt32"},
    pvData: {"kind""Ptr","child":{"kind":"Void"}},
    cbData: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHRegWriteUSValueW(
    hUSKey: {"kind":"IntPtr"},
    pwzValue: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwType: {"kind":"UInt32"},
    pvData: {"kind""Ptr","child":{"kind":"Void"}},
    cbData: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHRegDeleteUSValueA(
    hUSKey: {"kind":"IntPtr"},
    pszValue: {"kind""Ptr","child":{"kind":"SByte"}},
    delRegFlags: Windows.Win32.Shell.SHREGDEL_FLAGS,

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHRegDeleteUSValueW(
    hUSKey: {"kind":"IntPtr"},
    pwzValue: {"kind""Ptr","child":{"kind":"UInt16"}},
    delRegFlags: Windows.Win32.Shell.SHREGDEL_FLAGS,

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHRegDeleteEmptyUSKeyW(
    hUSKey: {"kind":"IntPtr"},
    pwzSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    delRegFlags: Windows.Win32.Shell.SHREGDEL_FLAGS,

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHRegDeleteEmptyUSKeyA(
    hUSKey: {"kind":"IntPtr"},
    pszSubKey: {"kind""Ptr","child":{"kind":"SByte"}},
    delRegFlags: Windows.Win32.Shell.SHREGDEL_FLAGS,

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHRegEnumUSKeyA(
    hUSKey: {"kind":"IntPtr"},
    dwIndex: {"kind":"UInt32"},
    pszName: {"kind""Ptr","child":{"kind":"SByte"}},
    pcchName: {"kind""Ptr","child":{"kind":"UInt32"}},
    enumRegFlags: Windows.Win32.Shell.SHREGENUM_FLAGS,

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHRegEnumUSKeyW(
    hUSKey: {"kind":"IntPtr"},
    dwIndex: {"kind":"UInt32"},
    pwzName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchName: {"kind""Ptr","child":{"kind":"UInt32"}},
    enumRegFlags: Windows.Win32.Shell.SHREGENUM_FLAGS,

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHRegEnumUSValueA(
    hUSkey: {"kind":"IntPtr"},
    dwIndex: {"kind":"UInt32"},
    pszValueName: {"kind""Ptr","child":{"kind":"SByte"}},
    pcchValueName: {"kind""Ptr","child":{"kind":"UInt32"}},
    pdwType: {"kind""Ptr","child":{"kind":"UInt32"}},
    pvData: {"kind""Ptr","child":{"kind":"Void"}},
    pcbData: {"kind""Ptr","child":{"kind":"UInt32"}},
    enumRegFlags: Windows.Win32.Shell.SHREGENUM_FLAGS,

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHRegEnumUSValueW(
    hUSkey: {"kind":"IntPtr"},
    dwIndex: {"kind":"UInt32"},
    pszValueName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchValueName: {"kind""Ptr","child":{"kind":"UInt32"}},
    pdwType: {"kind""Ptr","child":{"kind":"UInt32"}},
    pvData: {"kind""Ptr","child":{"kind":"Void"}},
    pcbData: {"kind""Ptr","child":{"kind":"UInt32"}},
    enumRegFlags: Windows.Win32.Shell.SHREGENUM_FLAGS,

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHRegQueryInfoUSKeyA(
    hUSKey: {"kind":"IntPtr"},
    pcSubKeys: {"kind""Ptr","child":{"kind":"UInt32"}},
    pcchMaxSubKeyLen: {"kind""Ptr","child":{"kind":"UInt32"}},
    pcValues: {"kind""Ptr","child":{"kind":"UInt32"}},
    pcchMaxValueNameLen: {"kind""Ptr","child":{"kind":"UInt32"}},
    enumRegFlags: Windows.Win32.Shell.SHREGENUM_FLAGS,

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHRegQueryInfoUSKeyW(
    hUSKey: {"kind":"IntPtr"},
    pcSubKeys: {"kind""Ptr","child":{"kind":"UInt32"}},
    pcchMaxSubKeyLen: {"kind""Ptr","child":{"kind":"UInt32"}},
    pcValues: {"kind""Ptr","child":{"kind":"UInt32"}},
    pcchMaxValueNameLen: {"kind""Ptr","child":{"kind":"UInt32"}},
    enumRegFlags: Windows.Win32.Shell.SHREGENUM_FLAGS,

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHRegCloseUSKey(
    hUSKey: {"kind":"IntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHRegGetUSValueA(
    pszSubKey: {"kind""Ptr","child":{"kind":"SByte"}},
    pszValue: {"kind""Ptr","child":{"kind":"SByte"}},
    pdwType: {"kind""Ptr","child":{"kind":"UInt32"}},
    pvData: {"kind""Ptr","child":{"kind":"Void"}},
    pcbData: {"kind""Ptr","child":{"kind":"UInt32"}},
    fIgnoreHKCU: Windows.Win32.SystemServices.BOOL,
    pvDefaultData: {"kind""Ptr","child":{"kind":"Void"}},
    dwDefaultDataSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHRegGetUSValueW(
    pszSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszValue: {"kind""Ptr","child":{"kind":"UInt16"}},
    pdwType: {"kind""Ptr","child":{"kind":"UInt32"}},
    pvData: {"kind""Ptr","child":{"kind":"Void"}},
    pcbData: {"kind""Ptr","child":{"kind":"UInt32"}},
    fIgnoreHKCU: Windows.Win32.SystemServices.BOOL,
    pvDefaultData: {"kind""Ptr","child":{"kind":"Void"}},
    dwDefaultDataSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHRegSetUSValueA(
    pszSubKey: {"kind""Ptr","child":{"kind":"SByte"}},
    pszValue: {"kind""Ptr","child":{"kind":"SByte"}},
    dwType: {"kind":"UInt32"},
    pvData: {"kind""Ptr","child":{"kind":"Void"}},
    cbData: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHRegSetUSValueW(
    pwzSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwzValue: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwType: {"kind":"UInt32"},
    pvData: {"kind""Ptr","child":{"kind":"Void"}},
    cbData: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHRegGetIntW(
    hk: Windows.Win32.WindowsProgramming.HKEY,
    pwzKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    iDefault: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHRegGetBoolUSValueA(
    pszSubKey: {"kind""Ptr","child":{"kind":"SByte"}},
    pszValue: {"kind""Ptr","child":{"kind":"SByte"}},
    fIgnoreHKCU: Windows.Win32.SystemServices.BOOL,
    fDefault: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHRegGetBoolUSValueW(
    pszSubKey: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszValue: {"kind""Ptr","child":{"kind":"UInt16"}},
    fIgnoreHKCU: Windows.Win32.SystemServices.BOOL,
    fDefault: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn AssocCreate(
    clsid: Guid,
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn AssocQueryStringA(
    flags: {"kind":"UInt32"},
    str: Windows.Win32.Shell.ASSOCSTR,
    pszAssoc: {"kind""Ptr","child":{"kind":"SByte"}},
    pszExtra: {"kind""Ptr","child":{"kind":"SByte"}},
    pszOut: {"kind""Ptr","child":{"kind":"SByte"}},
    pcchOut: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn AssocQueryStringW(
    flags: {"kind":"UInt32"},
    str: Windows.Win32.Shell.ASSOCSTR,
    pszAssoc: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszExtra: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszOut: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchOut: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn AssocQueryStringByKeyA(
    flags: {"kind":"UInt32"},
    str: Windows.Win32.Shell.ASSOCSTR,
    hkAssoc: Windows.Win32.WindowsProgramming.HKEY,
    pszExtra: {"kind""Ptr","child":{"kind":"SByte"}},
    pszOut: {"kind""Ptr","child":{"kind":"SByte"}},
    pcchOut: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn AssocQueryStringByKeyW(
    flags: {"kind":"UInt32"},
    str: Windows.Win32.Shell.ASSOCSTR,
    hkAssoc: Windows.Win32.WindowsProgramming.HKEY,
    pszExtra: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszOut: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchOut: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn AssocQueryKeyA(
    flags: {"kind":"UInt32"},
    key: Windows.Win32.Shell.ASSOCKEY,
    pszAssoc: {"kind""Ptr","child":{"kind":"SByte"}},
    pszExtra: {"kind""Ptr","child":{"kind":"SByte"}},
    phkeyOut: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HKEY},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn AssocQueryKeyW(
    flags: {"kind":"UInt32"},
    key: Windows.Win32.Shell.ASSOCKEY,
    pszAssoc: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszExtra: {"kind""Ptr","child":{"kind":"UInt16"}},
    phkeyOut: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HKEY},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn AssocIsDangerous(
    pszAssoc: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn AssocGetPerceivedType(
    pszExt: {"kind""Ptr","child":{"kind":"UInt16"}},
    ptype: {"kind""Ptr","child":Windows.Win32.Shell.PERCEIVED},
    pflag: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppszType: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHOpenRegStreamA(
    hkey: Windows.Win32.WindowsProgramming.HKEY,
    pszSubkey: {"kind""Ptr","child":{"kind":"SByte"}},
    pszValue: {"kind""Ptr","child":{"kind":"SByte"}},
    grfMode: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHOpenRegStreamW(
    hkey: Windows.Win32.WindowsProgramming.HKEY,
    pszSubkey: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszValue: {"kind""Ptr","child":{"kind":"UInt16"}},
    grfMode: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHOpenRegStream2A(
    hkey: Windows.Win32.WindowsProgramming.HKEY,
    pszSubkey: {"kind""Ptr","child":{"kind":"SByte"}},
    pszValue: {"kind""Ptr","child":{"kind":"SByte"}},
    grfMode: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHOpenRegStream2W(
    hkey: Windows.Win32.WindowsProgramming.HKEY,
    pszSubkey: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszValue: {"kind""Ptr","child":{"kind":"UInt16"}},
    grfMode: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHCreateStreamOnFileA(
    pszFile: {"kind""Ptr","child":{"kind":"SByte"}},
    grfMode: {"kind":"UInt32"},
    ppstm: {"kind""Ptr","child":Windows.Win32.StructuredStorage.IStream},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHCreateStreamOnFileW(
    pszFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    grfMode: {"kind":"UInt32"},
    ppstm: {"kind""Ptr","child":Windows.Win32.StructuredStorage.IStream},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHCreateStreamOnFileEx(
    pszFile: {"kind""Ptr","child":{"kind":"UInt16"}},
    grfMode: {"kind":"UInt32"},
    dwAttributes: {"kind":"UInt32"},
    fCreate: Windows.Win32.SystemServices.BOOL,
    pstmTemplate: Windows.Win32.StructuredStorage.IStream,
    ppstm: {"kind""Ptr","child":Windows.Win32.StructuredStorage.IStream},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHCreateMemStream(
    pInit: {"kind""Ptr","child":{"kind":"Byte"}},
    cbInit: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn GetAcceptLanguagesA(
    pszLanguages: {"kind""Ptr","child":{"kind":"SByte"}},
    pcchLanguages: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn GetAcceptLanguagesW(
    pszLanguages: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchLanguages: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn IUnknown_Set(
    ppunk: {"kind""Ptr","child":Windows.Win32.Com.IUnknown},
    punk: Windows.Win32.Com.IUnknown,

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn IUnknown_AtomicRelease(
    ppunk: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn IUnknown_GetWindow(
    punk: Windows.Win32.Com.IUnknown,
    phwnd: {"kind""Ptr","child":Windows.Win32.WindowsAndMessaging.HWND},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn IUnknown_SetSite(
    punk: Windows.Win32.Com.IUnknown,
    punkSite: Windows.Win32.Com.IUnknown,

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn IUnknown_GetSite(
    punk: Windows.Win32.Com.IUnknown,
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn IUnknown_QueryService(
    punk: Windows.Win32.Com.IUnknown,
    guidService: {"kind""Ptr","child":Guid},
    riid: {"kind""Ptr","child":Guid},
    ppvOut: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn IStream_Read(
    pstm: Windows.Win32.StructuredStorage.IStream,
    pv: {"kind""Ptr","child":{"kind":"Void"}},
    cb: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn IStream_Write(
    pstm: Windows.Win32.StructuredStorage.IStream,
    pv: {"kind""Ptr","child":{"kind":"Void"}},
    cb: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn IStream_Reset(
    pstm: Windows.Win32.StructuredStorage.IStream,

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn IStream_Size(
    pstm: Windows.Win32.StructuredStorage.IStream,
    pui: {"kind""Ptr","child":Windows.Win32.SystemServices.ULARGE_INTEGER},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn ConnectToConnectionPoint(
    punk: Windows.Win32.Com.IUnknown,
    riidEvent: {"kind""Ptr","child":Guid},
    fConnect: Windows.Win32.SystemServices.BOOL,
    punkTarget: Windows.Win32.Com.IUnknown,
    pdwCookie: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppcpOut: {"kind""Ptr","child":Windows.Win32.Com.IConnectionPoint},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn IStream_ReadPidl(
    pstm: Windows.Win32.StructuredStorage.IStream,
    ppidlOut: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn IStream_WritePidl(
    pstm: Windows.Win32.StructuredStorage.IStream,
    pidlWrite: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn IStream_ReadStr(
    pstm: Windows.Win32.StructuredStorage.IStream,
    ppsz: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn IStream_WriteStr(
    pstm: Windows.Win32.StructuredStorage.IStream,
    psz: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn IStream_Copy(
    pstmFrom: Windows.Win32.StructuredStorage.IStream,
    pstmTo: Windows.Win32.StructuredStorage.IStream,
    cb: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHGetViewStatePropertyBag(
    pidl: {"kind""Ptr","child":Windows.Win32.Shell.ITEMIDLIST},
    pszBagName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHFormatDateTimeA(
    pft: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    pdwFlags: {"kind""Ptr","child":{"kind":"UInt32"}},
    pszBuf: {"kind""Ptr","child":{"kind":"SByte"}},
    cchBuf: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHFormatDateTimeW(
    pft: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.FILETIME},
    pdwFlags: {"kind""Ptr","child":{"kind":"UInt32"}},
    pszBuf: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchBuf: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHAnsiToUnicode(
    pszSrc: {"kind""Ptr","child":{"kind":"SByte"}},
    pwszDst: {"kind""Ptr","child":{"kind":"UInt16"}},
    cwchBuf: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHAnsiToAnsi(
    pszSrc: {"kind""Ptr","child":{"kind":"SByte"}},
    pszDst: {"kind""Ptr","child":{"kind":"SByte"}},
    cchBuf: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHUnicodeToAnsi(
    pwszSrc: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszDst: {"kind""Ptr","child":{"kind":"SByte"}},
    cchBuf: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHUnicodeToUnicode(
    pwzSrc: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwzDst: {"kind""Ptr","child":{"kind":"UInt16"}},
    cwchBuf: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHMessageBoxCheckA(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    pszText: {"kind""Ptr","child":{"kind":"SByte"}},
    pszCaption: {"kind""Ptr","child":{"kind":"SByte"}},
    uType: {"kind":"UInt32"},
    iDefault: {"kind":"Int32"},
    pszRegVal: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHMessageBoxCheckW(
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    pszText: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszCaption: {"kind""Ptr","child":{"kind":"UInt16"}},
    uType: {"kind":"UInt32"},
    iDefault: {"kind":"Int32"},
    pszRegVal: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHSendMessageBroadcastA(
    uMsg: {"kind":"UInt32"},
    wParam: Windows.Win32.WindowsAndMessaging.WPARAM,
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHSendMessageBroadcastW(
    uMsg: {"kind":"UInt32"},
    wParam: Windows.Win32.WindowsAndMessaging.WPARAM,
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHStripMneumonicA(
    pszMenu: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHStripMneumonicW(
    pszMenu: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn IsOS(
    dwOS: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHGlobalCounterGetValue(
    id: Windows.Win32.Shell.SHGLOBALCOUNTER,

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHGlobalCounterIncrement(
    id: Windows.Win32.Shell.SHGLOBALCOUNTER,

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHGlobalCounterDecrement(
    id: Windows.Win32.Shell.SHGLOBALCOUNTER,

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHAllocShared(
    pvData: {"kind""Ptr","child":{"kind":"Void"}},
    dwSize: {"kind":"UInt32"},
    dwProcessId: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "SHLWAPI" fn SHFreeShared(
    hData: Windows.Win32.SystemServices.HANDLE,
    dwProcessId: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHLockShared(
    hData: Windows.Win32.SystemServices.HANDLE,
    dwProcessId: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "SHLWAPI" fn SHUnlockShared(
    pvData: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn WhichPlatform(

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn QISearch(
    that: {"kind""Ptr","child":{"kind":"Void"}},
    pqit: {"kind""Ptr","child":Windows.Win32.Shell.QITAB},
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHIsLowMemoryMachine(
    dwType: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn GetMenuPosFromID(
    hmenu: Windows.Win32.MenusAndResources.HMENU,
    id: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHGetInverseCMAP(
    pbMap: {"kind""Ptr","child":{"kind":"Byte"}},
    cbMap: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHAutoComplete(
    hwndEdit: Windows.Win32.WindowsAndMessaging.HWND,
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHCreateThreadRef(
    pcRef: {"kind""Ptr","child":{"kind":"Int32"}},
    ppunk: {"kind""Ptr","child":Windows.Win32.Com.IUnknown},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHSetThreadRef(
    punk: Windows.Win32.Com.IUnknown,

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHGetThreadRef(
    ppunk: {"kind""Ptr","child":Windows.Win32.Com.IUnknown},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHSkipJunction(
    pbc: Windows.Win32.Com.IBindCtx,
    pclsid: {"kind""Ptr","child":Guid},

// set_last_errror=True (can and should we use this?)
pub extern "SHLWAPI" fn SHCreateThread(
    pfnThreadProc: Windows.Win32.SystemServices.LPTHREAD_START_ROUTINE,
    pData: {"kind""Ptr","child":{"kind":"Void"}},
    flags: {"kind":"UInt32"},
    pfnCallback: Windows.Win32.SystemServices.LPTHREAD_START_ROUTINE,

// set_last_errror=True (can and should we use this?)
pub extern "SHLWAPI" fn SHCreateThreadWithHandle(
    pfnThreadProc: Windows.Win32.SystemServices.LPTHREAD_START_ROUTINE,
    pData: {"kind""Ptr","child":{"kind":"Void"}},
    flags: {"kind":"UInt32"},
    pfnCallback: Windows.Win32.SystemServices.LPTHREAD_START_ROUTINE,
    pHandle: {"kind""Ptr","child":Windows.Win32.SystemServices.HANDLE},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHReleaseThreadRef(

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn SHCreateShellPalette(
    hdc: Windows.Win32.Gdi.HDC,

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn ColorRGBToHLS(
    clrRGB: {"kind":"UInt32"},
    pwHue: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwLuminance: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwSaturation: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn ColorHLSToRGB(
    wHue: {"kind":"UInt16"},
    wLuminance: {"kind":"UInt16"},
    wSaturation: {"kind":"UInt16"},

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn ColorAdjustLuma(
    clrRGB: {"kind":"UInt32"},
    n: {"kind":"Int32"},
    fScale: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "SHLWAPI" fn IsInternetESCEnabled(

// set_last_errror=False (can and should we use this?)
pub extern "hlink" fn HlinkCreateFromMoniker(
    pimkTrgt: Windows.Win32.Com.IMoniker,
    pwzLocation: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwzFriendlyName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pihlsite: Windows.Win32.Shell.IHlinkSite,
    dwSiteData: {"kind":"UInt32"},
    piunkOuter: Windows.Win32.Com.IUnknown,
    riid: {"kind""Ptr","child":Guid},
    ppvObj: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "hlink" fn HlinkCreateFromString(
    pwzTarget: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwzLocation: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwzFriendlyName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pihlsite: Windows.Win32.Shell.IHlinkSite,
    dwSiteData: {"kind":"UInt32"},
    piunkOuter: Windows.Win32.Com.IUnknown,
    riid: {"kind""Ptr","child":Guid},
    ppvObj: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "hlink" fn HlinkCreateFromData(
    piDataObj: Windows.Win32.Com.IDataObject,
    pihlsite: Windows.Win32.Shell.IHlinkSite,
    dwSiteData: {"kind":"UInt32"},
    piunkOuter: Windows.Win32.Com.IUnknown,
    riid: {"kind""Ptr","child":Guid},
    ppvObj: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "hlink" fn HlinkQueryCreateFromData(
    piDataObj: Windows.Win32.Com.IDataObject,

// set_last_errror=False (can and should we use this?)
pub extern "hlink" fn HlinkClone(
    pihl: Windows.Win32.Shell.IHlink,
    riid: {"kind""Ptr","child":Guid},
    pihlsiteForClone: Windows.Win32.Shell.IHlinkSite,
    dwSiteData: {"kind":"UInt32"},
    ppvObj: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "hlink" fn HlinkCreateBrowseContext(
    piunkOuter: Windows.Win32.Com.IUnknown,
    riid: {"kind""Ptr","child":Guid},
    ppvObj: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "hlink" fn HlinkNavigateToStringReference(
    pwzTarget: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwzLocation: {"kind""Ptr","child":{"kind":"UInt16"}},
    pihlsite: Windows.Win32.Shell.IHlinkSite,
    dwSiteData: {"kind":"UInt32"},
    pihlframe: Windows.Win32.Shell.IHlinkFrame,
    grfHLNF: {"kind":"UInt32"},
    pibc: Windows.Win32.Com.IBindCtx,
    pibsc: Windows.Win32.Com.IBindStatusCallback,
    pihlbc: Windows.Win32.Shell.IHlinkBrowseContext,

// set_last_errror=False (can and should we use this?)
pub extern "hlink" fn HlinkNavigate(
    pihl: Windows.Win32.Shell.IHlink,
    pihlframe: Windows.Win32.Shell.IHlinkFrame,
    grfHLNF: {"kind":"UInt32"},
    pbc: Windows.Win32.Com.IBindCtx,
    pibsc: Windows.Win32.Com.IBindStatusCallback,
    pihlbc: Windows.Win32.Shell.IHlinkBrowseContext,

// set_last_errror=False (can and should we use this?)
pub extern "hlink" fn HlinkOnNavigate(
    pihlframe: Windows.Win32.Shell.IHlinkFrame,
    pihlbc: Windows.Win32.Shell.IHlinkBrowseContext,
    grfHLNF: {"kind":"UInt32"},
    pimkTarget: Windows.Win32.Com.IMoniker,
    pwzLocation: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwzFriendlyName: {"kind""Ptr","child":{"kind":"UInt16"}},
    puHLID: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "hlink" fn HlinkUpdateStackItem(
    pihlframe: Windows.Win32.Shell.IHlinkFrame,
    pihlbc: Windows.Win32.Shell.IHlinkBrowseContext,
    uHLID: {"kind":"UInt32"},
    pimkTrgt: Windows.Win32.Com.IMoniker,
    pwzLocation: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwzFriendlyName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "hlink" fn HlinkOnRenameDocument(
    dwReserved: {"kind":"UInt32"},
    pihlbc: Windows.Win32.Shell.IHlinkBrowseContext,
    pimkOld: Windows.Win32.Com.IMoniker,
    pimkNew: Windows.Win32.Com.IMoniker,

// set_last_errror=False (can and should we use this?)
pub extern "hlink" fn HlinkResolveMonikerForData(
    pimkReference: Windows.Win32.Com.IMoniker,
    reserved: {"kind":"UInt32"},
    pibc: Windows.Win32.Com.IBindCtx,
    cFmtetc: {"kind":"UInt32"},
    rgFmtetc: {"kind""Ptr","child":Windows.Win32.Com.FORMATETC},
    pibsc: Windows.Win32.Com.IBindStatusCallback,
    pimkBase: Windows.Win32.Com.IMoniker,

// set_last_errror=False (can and should we use this?)
pub extern "hlink" fn HlinkResolveStringForData(
    pwzReference: {"kind""Ptr","child":{"kind":"UInt16"}},
    reserved: {"kind":"UInt32"},
    pibc: Windows.Win32.Com.IBindCtx,
    cFmtetc: {"kind":"UInt32"},
    rgFmtetc: {"kind""Ptr","child":Windows.Win32.Com.FORMATETC},
    pibsc: Windows.Win32.Com.IBindStatusCallback,
    pimkBase: Windows.Win32.Com.IMoniker,

// set_last_errror=False (can and should we use this?)
pub extern "hlink" fn HlinkParseDisplayName(
    pibc: Windows.Win32.Com.IBindCtx,
    pwzDisplayName: {"kind""Ptr","child":{"kind":"UInt16"}},
    fNoForceAbs: Windows.Win32.SystemServices.BOOL,
    pcchEaten: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppimk: {"kind""Ptr","child":Windows.Win32.Com.IMoniker},

// set_last_errror=False (can and should we use this?)
pub extern "hlink" fn HlinkCreateExtensionServices(
    pwzAdditionalHeaders: {"kind""Ptr","child":{"kind":"UInt16"}},
    phwnd: Windows.Win32.WindowsAndMessaging.HWND,
    pszUsername: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszPassword: {"kind""Ptr","child":{"kind":"UInt16"}},
    piunkOuter: Windows.Win32.Com.IUnknown,
    riid: {"kind""Ptr","child":Guid},
    ppvObj: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "hlink" fn HlinkPreprocessMoniker(
    pibc: Windows.Win32.Com.IBindCtx,
    pimkIn: Windows.Win32.Com.IMoniker,
    ppimkOut: {"kind""Ptr","child":Windows.Win32.Com.IMoniker},

// set_last_errror=False (can and should we use this?)
pub extern "hlink" fn OleSaveToStreamEx(
    piunk: Windows.Win32.Com.IUnknown,
    pistm: Windows.Win32.StructuredStorage.IStream,
    fClearDirty: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "hlink" fn HlinkSetSpecialReference(
    uReference: {"kind":"UInt32"},
    pwzReference: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "hlink" fn HlinkGetSpecialReference(
    uReference: {"kind":"UInt32"},
    ppwzReference: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "hlink" fn HlinkCreateShortcut(
    grfHLSHORTCUTF: {"kind":"UInt32"},
    pihl: Windows.Win32.Shell.IHlink,
    pwzDir: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwzFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppwzShortcutFile: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    dwReserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "hlink" fn HlinkCreateShortcutFromMoniker(
    grfHLSHORTCUTF: {"kind":"UInt32"},
    pimkTarget: Windows.Win32.Com.IMoniker,
    pwzLocation: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwzDir: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwzFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppwzShortcutFile: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    dwReserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "hlink" fn HlinkCreateShortcutFromString(
    grfHLSHORTCUTF: {"kind":"UInt32"},
    pwzTarget: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwzLocation: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwzDir: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwzFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppwzShortcutFile: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    dwReserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "hlink" fn HlinkResolveShortcut(
    pwzShortcutFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pihlsite: Windows.Win32.Shell.IHlinkSite,
    dwSiteData: {"kind":"UInt32"},
    piunkOuter: Windows.Win32.Com.IUnknown,
    riid: {"kind""Ptr","child":Guid},
    ppvObj: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "hlink" fn HlinkResolveShortcutToMoniker(
    pwzShortcutFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppimkTarget: {"kind""Ptr","child":Windows.Win32.Com.IMoniker},
    ppwzLocation: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "hlink" fn HlinkResolveShortcutToString(
    pwzShortcutFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppwzTarget: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    ppwzLocation: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "hlink" fn HlinkIsShortcut(
    pwzFileName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "hlink" fn HlinkGetValueFromParams(
    pwzParams: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwzName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppwzValue: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "hlink" fn HlinkTranslateURL(
    pwzURL: {"kind""Ptr","child":{"kind":"UInt16"}},
    grfFlags: {"kind":"UInt32"},
    ppwzTranslatedURL: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-path-l1-1-0" fn PathIsUNCEx(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppszServer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchIsRoot(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchAddBackslashEx(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchPath: {"kind":"UIntPtr"},
    ppszEnd: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    pcchRemaining: {"kind""Ptr","child":{"kind":"UIntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchAddBackslash(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchPath: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchRemoveBackslashEx(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchPath: {"kind":"UIntPtr"},
    ppszEnd: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    pcchRemaining: {"kind""Ptr","child":{"kind":"UIntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchRemoveBackslash(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchPath: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchSkipRoot(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppszRootEnd: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchStripToRoot(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchPath: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchRemoveFileSpec(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchPath: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchFindExtension(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchPath: {"kind":"UIntPtr"},
    ppszExt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchAddExtension(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchPath: {"kind":"UIntPtr"},
    pszExt: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchRenameExtension(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchPath: {"kind":"UIntPtr"},
    pszExt: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchRemoveExtension(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchPath: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchCanonicalizeEx(
    pszPathOut: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchPathOut: {"kind":"UIntPtr"},
    pszPathIn: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchCanonicalize(
    pszPathOut: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchPathOut: {"kind":"UIntPtr"},
    pszPathIn: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchCombineEx(
    pszPathOut: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchPathOut: {"kind":"UIntPtr"},
    pszPathIn: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszMore: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchCombine(
    pszPathOut: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchPathOut: {"kind":"UIntPtr"},
    pszPathIn: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszMore: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchAppendEx(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchPath: {"kind":"UIntPtr"},
    pszMore: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchAppend(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchPath: {"kind":"UIntPtr"},
    pszMore: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchStripPrefix(
    pszPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchPath: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-path-l1-1-0" fn PathAllocCombine(
    pszPathIn: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszMore: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    ppszPathOut: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-path-l1-1-0" fn PathAllocCanonicalize(
    pszPathIn: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    ppszPathOut: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-psm-appnotify-l1-1-0" fn RegisterAppStateChangeNotification(
    Routine: Windows.Win32.Shell.PAPPSTATE_CHANGE_ROUTINE,
    Context: {"kind""Ptr","child":{"kind":"Void"}},
    Registration: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Shell._APPSTATE_REGISTRATION}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-psm-appnotify-l1-1-0" fn UnregisterAppStateChangeNotification(
    Registration: {"kind""Ptr","child":Windows.Win32.Shell._APPSTATE_REGISTRATION},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-psm-appnotify-l1-1-1" fn RegisterAppConstrainedChangeNotification(
    Routine: Windows.Win32.Shell.PAPPCONSTRAIN_CHANGE_ROUTINE,
    Context: {"kind""Ptr","child":{"kind":"Void"}},
    Registration: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Shell._APPCONSTRAIN_REGISTRATION}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-psm-appnotify-l1-1-1" fn UnregisterAppConstrainedChangeNotification(
    Registration: {"kind""Ptr","child":Windows.Win32.Shell._APPCONSTRAIN_REGISTRATION},

// set_last_errror=True (can and should we use this?)
pub extern "USERENV" fn LoadUserProfileA(
    hToken: Windows.Win32.SystemServices.HANDLE,
    lpProfileInfo: {"kind""Ptr","child":Windows.Win32.Shell.PROFILEINFOA},

// set_last_errror=True (can and should we use this?)
pub extern "USERENV" fn LoadUserProfileW(
    hToken: Windows.Win32.SystemServices.HANDLE,
    lpProfileInfo: {"kind""Ptr","child":Windows.Win32.Shell.PROFILEINFOW},

// set_last_errror=True (can and should we use this?)
pub extern "USERENV" fn UnloadUserProfile(
    hToken: Windows.Win32.SystemServices.HANDLE,
    hProfile: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "USERENV" fn GetProfilesDirectoryA(
    lpProfileDir: {"kind""Ptr","child":{"kind":"SByte"}},
    lpcchSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "USERENV" fn GetProfilesDirectoryW(
    lpProfileDir: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpcchSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "USERENV" fn GetProfileType(
    dwFlags: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "USERENV" fn DeleteProfileA(
    lpSidString: {"kind""Ptr","child":{"kind":"SByte"}},
    lpProfilePath: {"kind""Ptr","child":{"kind":"SByte"}},
    lpComputerName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "USERENV" fn DeleteProfileW(
    lpSidString: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpProfilePath: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpComputerName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "USERENV" fn CreateProfile(
    pszUserSid: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszUserName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszProfilePath: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchProfilePath: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "USERENV" fn GetDefaultUserProfileDirectoryA(
    lpProfileDir: {"kind""Ptr","child":{"kind":"SByte"}},
    lpcchSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "USERENV" fn GetDefaultUserProfileDirectoryW(
    lpProfileDir: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpcchSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "USERENV" fn GetAllUsersProfileDirectoryA(
    lpProfileDir: {"kind""Ptr","child":{"kind":"SByte"}},
    lpcchSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "USERENV" fn GetAllUsersProfileDirectoryW(
    lpProfileDir: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpcchSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "USERENV" fn GetUserProfileDirectoryA(
    hToken: Windows.Win32.SystemServices.HANDLE,
    lpProfileDir: {"kind""Ptr","child":{"kind":"SByte"}},
    lpcchSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "USERENV" fn GetUserProfileDirectoryW(
    hToken: Windows.Win32.SystemServices.HANDLE,
    lpProfileDir: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpcchSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "USERENV" fn CreateEnvironmentBlock(
    lpEnvironment: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    hToken: Windows.Win32.SystemServices.HANDLE,
    bInherit: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "USERENV" fn DestroyEnvironmentBlock(
    lpEnvironment: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "USERENV" fn ExpandEnvironmentStringsForUserA(
    hToken: Windows.Win32.SystemServices.HANDLE,
    lpSrc: {"kind""Ptr","child":{"kind":"SByte"}},
    lpDest: {"kind""Ptr","child":{"kind":"SByte"}},
    dwSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "USERENV" fn ExpandEnvironmentStringsForUserW(
    hToken: Windows.Win32.SystemServices.HANDLE,
    lpSrc: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpDest: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "USERENV" fn CreateAppContainerProfile(
    pszAppContainerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszDisplayName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszDescription: {"kind""Ptr","child":{"kind":"UInt16"}},
    pCapabilities: {"kind""Ptr","child":Windows.Win32.Security.SID_AND_ATTRIBUTES},
    dwCapabilityCount: {"kind":"UInt32"},
    ppSidAppContainerSid: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "USERENV" fn DeleteAppContainerProfile(
    pszAppContainerName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "USERENV" fn GetAppContainerRegistryLocation(
    desiredAccess: {"kind":"UInt32"},
    phAppContainerKey: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.HKEY},

// set_last_errror=False (can and should we use this?)
pub extern "USERENV" fn GetAppContainerFolderPath(
    pszAppContainerSid: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppszPath: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "USERENV" fn DeriveAppContainerSidFromAppContainerName(
    pszAppContainerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppsidAppContainerSid: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "USERENV" fn DeriveRestrictedAppContainerSidFromAppContainerSidAndRestrictedName(
    psidAppContainerSid: {"kind""Ptr","child":{"kind":"Void"}},
    pszRestrictedAppContainerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppsidRestrictedAppContainerSid: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn SetWindowSubclass(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    pfnSubclass: Windows.Win32.Shell.SUBCLASSPROC,
    uIdSubclass: {"kind":"UIntPtr"},
    dwRefData: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn GetWindowSubclass(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    pfnSubclass: Windows.Win32.Shell.SUBCLASSPROC,
    uIdSubclass: {"kind":"UIntPtr"},
    pdwRefData: {"kind""Ptr","child":{"kind":"UIntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn RemoveWindowSubclass(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    pfnSubclass: Windows.Win32.Shell.SUBCLASSPROC,
    uIdSubclass: {"kind":"UIntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "COMCTL32" fn DefSubclassProc(
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    uMsg: {"kind":"UInt32"},
    wParam: Windows.Win32.WindowsAndMessaging.WPARAM,
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
],

"unicode_aliases": [
     "MULTIKEYHELP"
     "HELPWININFO"
     "DRAGINFO"
     "SHFILEOPSTRUCT"
     "SHNAMEMAPPING"
     "SHELLEXECUTEINFO"
     "NOTIFYICONDATA"
     "SHFILEINFO"
     "OPEN_PRINTER_PROPS_INFO"
     "IShellLink"
     "IExtractIcon"
     "IShellExecuteHook"
     "BROWSEINFO"
     "FILEDESCRIPTOR"
     "FILEGROUPDESCRIPTOR"
     "SHELLSTATE"
     "INewShortcutHook"
     "ICopyHook"
     "PARSEDURL"
     "NEWCPLINFO"
     "PROFILEINFO"
     "urlinvokecommandinfo"
     "IUniformResourceLocator"
     "IEnumRegisterWord"
     "LOGFONT"
     "WinHelp"
     "DragQueryFile"
     "ShellExecute"
     "FindExecutable"
     "ShellAbout"
     "ExtractAssociatedIcon"
     "ExtractAssociatedIconEx"
     "ExtractIcon"
     "DoEnvironmentSubst"
     "ExtractIconEx"
     "SHFileOperation"
     "ShellExecuteEx"
     "SHQueryRecycleBin"
     "SHEmptyRecycleBin"
     "Shell_NotifyIcon"
     "SHGetFileInfo"
     "SHGetDiskFreeSpaceEx"
     "SHGetNewLinkInfo"
     "SHInvokePrinterCommand"
     "ShellMessageBox"
     "IsLFNDrive"
     "SHGetIconOverlayIndex"
     "ILCreateFromPath"
     "SHGetPathFromIDList"
     "SHCreateDirectoryEx"
     "SHGetSpecialFolderPath"
     "SHGetFolderPath"
     "SHSetFolderPath"
     "SHGetFolderPathAndSubDir"
     "SHBrowseForFolder"
     "SHUpdateImage"
     "SHGetDataFromIDList"
     "SHDefExtractIcon"
     "SHPathPrepareForWrite"
     "PathIsSlow"
     "StrChr"
     "StrChrI"
     "StrCmpN"
     "StrCmpNI"
     "StrCSpn"
     "StrCSpnI"
     "StrDup"
     "StrFormatByteSize"
     "StrFormatKBSize"
     "StrFromTimeInterval"
     "StrIsIntlEqual"
     "StrNCat"
     "StrPBrk"
     "StrRChr"
     "StrRChrI"
     "StrRStrI"
     "StrSpn"
     "StrStr"
     "StrStrI"
     "StrToInt"
     "StrToIntEx"
     "StrToInt64Ex"
     "StrTrim"
     "StrCatBuff"
     "ChrCmpI"
     "wvnsprintf"
     "wnsprintf"
     "StrRetToStr"
     "StrRetToBuf"
     "SHStrDup"
     "IsCharSpace"
     "StrCmpC"
     "StrCmpIC"
     "StrCmpNC"
     "StrCmpNIC"
     "IntlStrEqWorker"
     "PathAddBackslash"
     "PathAddExtension"
     "PathAppend"
     "PathBuildRoot"
     "PathCanonicalize"
     "PathCombine"
     "PathCompactPath"
     "PathCompactPathEx"
     "PathCommonPrefix"
     "PathFileExists"
     "PathFindExtension"
     "PathFindFileName"
     "PathFindNextComponent"
     "PathFindOnPath"
     "PathFindSuffixArray"
     "PathGetArgs"
     "PathIsLFNFileSpec"
     "PathGetCharType"
     "PathGetDriveNumber"
     "PathIsDirectory"
     "PathIsDirectoryEmpty"
     "PathIsFileSpec"
     "PathIsPrefix"
     "PathIsRelative"
     "PathIsRoot"
     "PathIsSameRoot"
     "PathIsUNC"
     "PathIsNetworkPath"
     "PathIsUNCServer"
     "PathIsUNCServerShare"
     "PathIsContentType"
     "PathIsURL"
     "PathMakePretty"
     "PathMatchSpec"
     "PathMatchSpecEx"
     "PathParseIconLocation"
     "PathQuoteSpaces"
     "PathRelativePathTo"
     "PathRemoveArgs"
     "PathRemoveBackslash"
     "PathRemoveBlanks"
     "PathRemoveExtension"
     "PathRemoveFileSpec"
     "PathRenameExtension"
     "PathSearchAndQualify"
     "PathSetDlgItemPath"
     "PathSkipRoot"
     "PathStripPath"
     "PathStripToRoot"
     "PathUnquoteSpaces"
     "PathMakeSystemFolder"
     "PathUnmakeSystemFolder"
     "PathIsSystemFolder"
     "PathUndecorate"
     "PathUnExpandEnvStrings"
     "UrlCompare"
     "UrlCombine"
     "UrlCanonicalize"
     "UrlIsOpaque"
     "UrlIsNoHistory"
     "UrlIs"
     "UrlGetLocation"
     "UrlUnescape"
     "UrlEscape"
     "UrlCreateFromPath"
     "PathCreateFromUrl"
     "UrlHash"
     "UrlGetPart"
     "UrlApplyScheme"
     "ParseURL"
     "SHDeleteEmptyKey"
     "SHDeleteKey"
     "SHDeleteValue"
     "SHGetValue"
     "SHSetValue"
     "SHRegGetValue"
     "SHQueryValueEx"
     "SHEnumKeyEx"
     "SHEnumValue"
     "SHQueryInfoKey"
     "SHCopyKey"
     "SHRegGetPath"
     "SHRegSetPath"
     "SHRegCreateUSKey"
     "SHRegOpenUSKey"
     "SHRegQueryUSValue"
     "SHRegWriteUSValue"
     "SHRegDeleteUSValue"
     "SHRegDeleteEmptyUSKey"
     "SHRegEnumUSKey"
     "SHRegEnumUSValue"
     "SHRegQueryInfoUSKey"
     "SHRegGetUSValue"
     "SHRegSetUSValue"
     "SHRegGetBoolUSValue"
     "AssocQueryString"
     "AssocQueryStringByKey"
     "AssocQueryKey"
     "SHOpenRegStream"
     "SHOpenRegStream2"
     "SHCreateStreamOnFile"
     "GetAcceptLanguages"
     "SHFormatDateTime"
     "SHMessageBoxCheck"
     "SHSendMessageBroadcast"
     "SHStripMneumonic"
     "LoadUserProfile"
     "GetProfilesDirectory"
     "DeleteProfile"
     "GetDefaultUserProfileDirectory"
     "GetAllUsersProfileDirectory"
     "GetUserProfileDirectory"
     "ExpandEnvironmentStringsForUser"
]}
