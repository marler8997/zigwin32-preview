{
"constants": [
     {
         "name": "UITER_UNKNOWN_INDEX"
        ,"type": {"kind":"Int32"}
        ,"value": -2
    }
    ,{
         "name": "UTEXT_PROVIDER_LENGTH_IS_EXPENSIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "UTEXT_PROVIDER_STABLE_CHUNKS"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "UTEXT_PROVIDER_WRITABLE"
        ,"type": {"kind":"Int32"}
        ,"value": 3
    }
    ,{
         "name": "UTEXT_PROVIDER_HAS_META_DATA"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "UTEXT_PROVIDER_OWNS_TEXT"
        ,"type": {"kind":"Int32"}
        ,"value": 5
    }
    ,{
         "name": "UTEXT_MAGIC"
        ,"type": {"kind":"Int32"}
        ,"value": 878368812
    }
    ,{
         "name": "USET_IGNORE_SPACE"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "USET_CASE_INSENSITIVE"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "USET_ADD_CASE_MAPPINGS"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "USET_SERIALIZED_STATIC_ARRAY_CAPACITY"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "U_PARSE_CONTEXT_LEN"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "UIDNA_DEFAULT"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "UIDNA_USE_STD3_RULES"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "UIDNA_CHECK_BIDI"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "UIDNA_CHECK_CONTEXTJ"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "UIDNA_NONTRANSITIONAL_TO_ASCII"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "UIDNA_NONTRANSITIONAL_TO_UNICODE"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "UIDNA_CHECK_CONTEXTO"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "UIDNA_ERROR_EMPTY_LABEL"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "UIDNA_ERROR_LABEL_TOO_LONG"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "UIDNA_ERROR_DOMAIN_NAME_TOO_LONG"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "UIDNA_ERROR_LEADING_HYPHEN"
        ,"type": {"kind":"Int32"}
        ,"value": 8
    }
    ,{
         "name": "UIDNA_ERROR_TRAILING_HYPHEN"
        ,"type": {"kind":"Int32"}
        ,"value": 16
    }
    ,{
         "name": "UIDNA_ERROR_HYPHEN_3_4"
        ,"type": {"kind":"Int32"}
        ,"value": 32
    }
    ,{
         "name": "UIDNA_ERROR_LEADING_COMBINING_MARK"
        ,"type": {"kind":"Int32"}
        ,"value": 64
    }
    ,{
         "name": "UIDNA_ERROR_DISALLOWED"
        ,"type": {"kind":"Int32"}
        ,"value": 128
    }
    ,{
         "name": "UIDNA_ERROR_PUNYCODE"
        ,"type": {"kind":"Int32"}
        ,"value": 256
    }
    ,{
         "name": "UIDNA_ERROR_LABEL_HAS_DOT"
        ,"type": {"kind":"Int32"}
        ,"value": 512
    }
    ,{
         "name": "UIDNA_ERROR_INVALID_ACE_LABEL"
        ,"type": {"kind":"Int32"}
        ,"value": 1024
    }
    ,{
         "name": "UIDNA_ERROR_BIDI"
        ,"type": {"kind":"Int32"}
        ,"value": 2048
    }
    ,{
         "name": "UIDNA_ERROR_CONTEXTJ"
        ,"type": {"kind":"Int32"}
        ,"value": 4096
    }
    ,{
         "name": "UIDNA_ERROR_CONTEXTO_PUNCTUATION"
        ,"type": {"kind":"Int32"}
        ,"value": 8192
    }
    ,{
         "name": "UIDNA_ERROR_CONTEXTO_DIGITS"
        ,"type": {"kind":"Int32"}
        ,"value": 16384
    }
],

"types_definitions": [
// --------------------------------------------------------
// Type: FONTSIGNATURE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FONTSIGNATURE = extern struct {
    fsUsb: {"kind":"Array","child": {"kind":"UInt32"}},
    fsCsb: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: CHARSETINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CHARSETINFO = extern struct {
    ciCharset: {"kind":"UInt32"},
    ciACP: {"kind":"UInt32"},
    fs: Windows.Win32.Intl.FONTSIGNATURE,
};
// --------------------------------------------------------
// Type: LOCALESIGNATURE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LOCALESIGNATURE = extern struct {
    lsUsb: {"kind":"Array","child": {"kind":"UInt32"}},
    lsCsbDefault: {"kind":"Array","child": {"kind":"UInt32"}},
    lsCsbSupported: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: CPINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CPINFO = extern struct {
    MaxCharSize: {"kind":"UInt32"},
    DefaultChar: {"kind":"Array","child": {"kind":"Byte"}},
    LeadByte: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: CPINFOEXA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CPINFOEXA = extern struct {
    MaxCharSize: {"kind":"UInt32"},
    DefaultChar: {"kind":"Array","child": {"kind":"Byte"}},
    LeadByte: {"kind":"Array","child": {"kind":"Byte"}},
    UnicodeDefaultChar: {"kind":"UInt16"},
    CodePage: {"kind":"UInt32"},
    CodePageName: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: CPINFOEXW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CPINFOEXW = extern struct {
    MaxCharSize: {"kind":"UInt32"},
    DefaultChar: {"kind":"Array","child": {"kind":"Byte"}},
    LeadByte: {"kind":"Array","child": {"kind":"Byte"}},
    UnicodeDefaultChar: {"kind":"UInt16"},
    CodePage: {"kind":"UInt32"},
    CodePageName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: NUMBERFMTA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NUMBERFMTA = extern struct {
    NumDigits: {"kind":"UInt32"},
    LeadingZero: {"kind":"UInt32"},
    Grouping: {"kind":"UInt32"},
    lpDecimalSep: {"kind""Ptr","child":{"kind":"SByte"}},
    lpThousandSep: {"kind""Ptr","child":{"kind":"SByte"}},
    NegativeOrder: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NUMBERFMTW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NUMBERFMTW = extern struct {
    NumDigits: {"kind":"UInt32"},
    LeadingZero: {"kind":"UInt32"},
    Grouping: {"kind":"UInt32"},
    lpDecimalSep: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpThousandSep: {"kind""Ptr","child":{"kind":"UInt16"}},
    NegativeOrder: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CURRENCYFMTA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CURRENCYFMTA = extern struct {
    NumDigits: {"kind":"UInt32"},
    LeadingZero: {"kind":"UInt32"},
    Grouping: {"kind":"UInt32"},
    lpDecimalSep: {"kind""Ptr","child":{"kind":"SByte"}},
    lpThousandSep: {"kind""Ptr","child":{"kind":"SByte"}},
    NegativeOrder: {"kind":"UInt32"},
    PositiveOrder: {"kind":"UInt32"},
    lpCurrencySymbol: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: CURRENCYFMTW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CURRENCYFMTW = extern struct {
    NumDigits: {"kind":"UInt32"},
    LeadingZero: {"kind":"UInt32"},
    Grouping: {"kind":"UInt32"},
    lpDecimalSep: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpThousandSep: {"kind""Ptr","child":{"kind":"UInt16"}},
    NegativeOrder: {"kind":"UInt32"},
    PositiveOrder: {"kind":"UInt32"},
    lpCurrencySymbol: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SYSNLS_FUNCTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SYSNLS_FUNCTION = *opaque{
};
// --------------------------------------------------------
// Type: NLSVERSIONINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NLSVERSIONINFO = extern struct {
    dwNLSVersionInfoSize: {"kind":"UInt32"},
    dwNLSVersion: {"kind":"UInt32"},
    dwDefinedVersion: {"kind":"UInt32"},
    dwEffectiveId: {"kind":"UInt32"},
    guidCustomVersion: Guid,
};
// --------------------------------------------------------
// Type: NLSVERSIONINFOEX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NLSVERSIONINFOEX = extern struct {
    dwNLSVersionInfoSize: {"kind":"UInt32"},
    dwNLSVersion: {"kind":"UInt32"},
    dwDefinedVersion: {"kind":"UInt32"},
    dwEffectiveId: {"kind":"UInt32"},
    guidCustomVersion: Guid,
};
// --------------------------------------------------------
// Type: SYSGEOTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SYSGEOTYPE = *opaque{
};
// --------------------------------------------------------
// Type: SYSGEOCLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SYSGEOCLASS = *opaque{
};
// --------------------------------------------------------
// Type: LOCALE_ENUMPROCA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LOCALE_ENUMPROCA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LOCALE_ENUMPROCW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LOCALE_ENUMPROCW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: NORM_FORM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NORM_FORM = *opaque{
};
// --------------------------------------------------------
// Type: LANGUAGEGROUP_ENUMPROCA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LANGUAGEGROUP_ENUMPROCA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LANGGROUPLOCALE_ENUMPROCA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LANGGROUPLOCALE_ENUMPROCA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: UILANGUAGE_ENUMPROCA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UILANGUAGE_ENUMPROCA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CODEPAGE_ENUMPROCA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CODEPAGE_ENUMPROCA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DATEFMT_ENUMPROCA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DATEFMT_ENUMPROCA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DATEFMT_ENUMPROCEXA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DATEFMT_ENUMPROCEXA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: TIMEFMT_ENUMPROCA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TIMEFMT_ENUMPROCA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CALINFO_ENUMPROCA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CALINFO_ENUMPROCA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CALINFO_ENUMPROCEXA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CALINFO_ENUMPROCEXA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LANGUAGEGROUP_ENUMPROCW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LANGUAGEGROUP_ENUMPROCW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LANGGROUPLOCALE_ENUMPROCW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LANGGROUPLOCALE_ENUMPROCW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: UILANGUAGE_ENUMPROCW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UILANGUAGE_ENUMPROCW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CODEPAGE_ENUMPROCW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CODEPAGE_ENUMPROCW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DATEFMT_ENUMPROCW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DATEFMT_ENUMPROCW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DATEFMT_ENUMPROCEXW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DATEFMT_ENUMPROCEXW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: TIMEFMT_ENUMPROCW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TIMEFMT_ENUMPROCW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CALINFO_ENUMPROCW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CALINFO_ENUMPROCW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CALINFO_ENUMPROCEXW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CALINFO_ENUMPROCEXW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: GEO_ENUMPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const GEO_ENUMPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: GEO_ENUMNAMEPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const GEO_ENUMNAMEPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FILEMUIINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILEMUIINFO = extern struct {
    dwSize: {"kind":"UInt32"},
    dwVersion: {"kind":"UInt32"},
    dwFileType: {"kind":"UInt32"},
    pChecksum: {"kind":"Array","child": {"kind":"Byte"}},
    pServiceChecksum: {"kind":"Array","child": {"kind":"Byte"}},
    dwLanguageNameOffset: {"kind":"UInt32"},
    dwTypeIDMainSize: {"kind":"UInt32"},
    dwTypeIDMainOffset: {"kind":"UInt32"},
    dwTypeNameMainOffset: {"kind":"UInt32"},
    dwTypeIDMUISize: {"kind":"UInt32"},
    dwTypeIDMUIOffset: {"kind":"UInt32"},
    dwTypeNameMUIOffset: {"kind":"UInt32"},
    abBuffer: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: HSAVEDUILANGUAGES__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HSAVEDUILANGUAGES__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: CALINFO_ENUMPROCEXEX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CALINFO_ENUMPROCEXEX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DATEFMT_ENUMPROCEXEX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DATEFMT_ENUMPROCEXEX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: TIMEFMT_ENUMPROCEX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TIMEFMT_ENUMPROCEX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LOCALE_ENUMPROCEX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LOCALE_ENUMPROCEX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: HIMC__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HIMC__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: HIMCC__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HIMCC__ = extern struct {
    unused: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: COMPOSITIONFORM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COMPOSITIONFORM = extern struct {
    dwStyle: {"kind":"UInt32"},
    ptCurrentPos: Windows.Win32.DisplayDevices.POINT,
    rcArea: Windows.Win32.DisplayDevices.RECT,
};
// --------------------------------------------------------
// Type: CANDIDATEFORM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CANDIDATEFORM = extern struct {
    dwIndex: {"kind":"UInt32"},
    dwStyle: {"kind":"UInt32"},
    ptCurrentPos: Windows.Win32.DisplayDevices.POINT,
    rcArea: Windows.Win32.DisplayDevices.RECT,
};
// --------------------------------------------------------
// Type: CANDIDATELIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CANDIDATELIST = extern struct {
    dwSize: {"kind":"UInt32"},
    dwStyle: {"kind":"UInt32"},
    dwCount: {"kind":"UInt32"},
    dwSelection: {"kind":"UInt32"},
    dwPageStart: {"kind":"UInt32"},
    dwPageSize: {"kind":"UInt32"},
    dwOffset: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: REGISTERWORDA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const REGISTERWORDA = extern struct {
    lpReading: {"kind""Ptr","child":{"kind":"SByte"}},
    lpWord: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: REGISTERWORDW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const REGISTERWORDW = extern struct {
    lpReading: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpWord: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: RECONVERTSTRING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RECONVERTSTRING = extern struct {
    dwSize: {"kind":"UInt32"},
    dwVersion: {"kind":"UInt32"},
    dwStrLen: {"kind":"UInt32"},
    dwStrOffset: {"kind":"UInt32"},
    dwCompStrLen: {"kind":"UInt32"},
    dwCompStrOffset: {"kind":"UInt32"},
    dwTargetStrLen: {"kind":"UInt32"},
    dwTargetStrOffset: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: STYLEBUFA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STYLEBUFA = extern struct {
    dwStyle: {"kind":"UInt32"},
    szDescription: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: STYLEBUFW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STYLEBUFW = extern struct {
    dwStyle: {"kind":"UInt32"},
    szDescription: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: IMEMENUITEMINFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMEMENUITEMINFOA = extern struct {
    cbSize: {"kind":"UInt32"},
    fType: {"kind":"UInt32"},
    fState: {"kind":"UInt32"},
    wID: {"kind":"UInt32"},
    hbmpChecked: Windows.Win32.Gdi.HBITMAP,
    hbmpUnchecked: Windows.Win32.Gdi.HBITMAP,
    dwItemData: {"kind":"UInt32"},
    szString: {"kind":"Array","child": {"kind":"SByte"}},
    hbmpItem: Windows.Win32.Gdi.HBITMAP,
};
// --------------------------------------------------------
// Type: IMEMENUITEMINFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMEMENUITEMINFOW = extern struct {
    cbSize: {"kind":"UInt32"},
    fType: {"kind":"UInt32"},
    fState: {"kind":"UInt32"},
    wID: {"kind":"UInt32"},
    hbmpChecked: Windows.Win32.Gdi.HBITMAP,
    hbmpUnchecked: Windows.Win32.Gdi.HBITMAP,
    dwItemData: {"kind":"UInt32"},
    szString: {"kind":"Array","child": {"kind":"UInt16"}},
    hbmpItem: Windows.Win32.Gdi.HBITMAP,
};
// --------------------------------------------------------
// Type: IMECHARPOSITION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMECHARPOSITION = extern struct {
    dwSize: {"kind":"UInt32"},
    dwCharPos: {"kind":"UInt32"},
    pt: Windows.Win32.DisplayDevices.POINT,
    cLineHeight: {"kind":"UInt32"},
    rcDocument: Windows.Win32.DisplayDevices.RECT,
};
// --------------------------------------------------------
// Type: IMCENUMPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IMCENUMPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: REGISTERWORDENUMPROCA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const REGISTERWORDENUMPROCA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: REGISTERWORDENUMPROCW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const REGISTERWORDENUMPROCW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_MAPPINGCALLBACKPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_MAPPINGCALLBACKPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: MAPPING_SERVICE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MAPPING_SERVICE_INFO = extern struct {
    Size: {"kind":"UIntPtr"},
    pszCopyright: {"kind""Ptr","child":{"kind":"UInt16"}},
    wMajorVersion: {"kind":"UInt16"},
    wMinorVersion: {"kind":"UInt16"},
    wBuildVersion: {"kind":"UInt16"},
    wStepVersion: {"kind":"UInt16"},
    dwInputContentTypesCount: {"kind":"UInt32"},
    prgInputContentTypes: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    dwOutputContentTypesCount: {"kind":"UInt32"},
    prgOutputContentTypes: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    dwInputLanguagesCount: {"kind":"UInt32"},
    prgInputLanguages: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    dwOutputLanguagesCount: {"kind":"UInt32"},
    prgOutputLanguages: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    dwInputScriptsCount: {"kind":"UInt32"},
    prgInputScripts: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    dwOutputScriptsCount: {"kind":"UInt32"},
    prgOutputScripts: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    guid: Guid,
    pszCategory: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszDescription: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwPrivateDataSize: {"kind":"UInt32"},
    pPrivateData: {"kind""Ptr","child":{"kind":"Void"}},
    pContext: {"kind""Ptr","child":{"kind":"Void"}},
    _bitfield: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MAPPING_ENUM_OPTIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MAPPING_ENUM_OPTIONS = extern struct {
    Size: {"kind":"UIntPtr"},
    pszCategory: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszInputLanguage: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszOutputLanguage: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszInputScript: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszOutputScript: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszInputContentType: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszOutputContentType: {"kind""Ptr","child":{"kind":"UInt16"}},
    pGuid: {"kind""Ptr","child":Guid},
    _bitfield: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MAPPING_OPTIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MAPPING_OPTIONS = extern struct {
    Size: {"kind":"UIntPtr"},
    pszInputLanguage: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszOutputLanguage: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszInputScript: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszOutputScript: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszInputContentType: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszOutputContentType: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszUILanguage: {"kind""Ptr","child":{"kind":"UInt16"}},
    pfnRecognizeCallback: Windows.Win32.Intl.PFN_MAPPINGCALLBACKPROC,
    pRecognizeCallerData: {"kind""Ptr","child":{"kind":"Void"}},
    dwRecognizeCallerDataSize: {"kind":"UInt32"},
    pfnActionCallback: Windows.Win32.Intl.PFN_MAPPINGCALLBACKPROC,
    pActionCallerData: {"kind""Ptr","child":{"kind":"Void"}},
    dwActionCallerDataSize: {"kind":"UInt32"},
    dwServiceFlag: {"kind":"UInt32"},
    _bitfield: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MAPPING_DATA_RANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MAPPING_DATA_RANGE = extern struct {
    dwStartIndex: {"kind":"UInt32"},
    dwEndIndex: {"kind":"UInt32"},
    pszDescription: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwDescriptionLength: {"kind":"UInt32"},
    pData: {"kind""Ptr","child":{"kind":"Void"}},
    dwDataSize: {"kind":"UInt32"},
    pszContentType: {"kind""Ptr","child":{"kind":"UInt16"}},
    prgActionIds: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    dwActionsCount: {"kind":"UInt32"},
    prgActionDisplayNames: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
};
// --------------------------------------------------------
// Type: MAPPING_PROPERTY_BAG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MAPPING_PROPERTY_BAG = extern struct {
    Size: {"kind":"UIntPtr"},
    prgResultRanges: {"kind""Ptr","child":Windows.Win32.Intl.MAPPING_DATA_RANGE},
    dwRangesCount: {"kind":"UInt32"},
    pServiceData: {"kind""Ptr","child":{"kind":"Void"}},
    dwServiceDataSize: {"kind":"UInt32"},
    pCallerData: {"kind""Ptr","child":{"kind":"Void"}},
    dwCallerDataSize: {"kind":"UInt32"},
    pContext: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: SpellCheckerFactory
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SpellCheckerFactory = opaque {
};
// --------------------------------------------------------
// Type: WORDLIST_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WORDLIST_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: CORRECTIVE_ACTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CORRECTIVE_ACTION = *opaque{
};
// --------------------------------------------------------
// Type: ISpellingError
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISpellingError = *opaque{
    // TODO: Method 'get_StartIndex'
    // TODO: Method 'get_Length'
    // TODO: Method 'get_CorrectiveAction'
    // TODO: Method 'get_Replacement'
};
// --------------------------------------------------------
// Type: IEnumSpellingError
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumSpellingError = *opaque{
    // TODO: Method 'Next'
};
// --------------------------------------------------------
// Type: IOptionDescription
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOptionDescription = *opaque{
    // TODO: Method 'get_Id'
    // TODO: Method 'get_Heading'
    // TODO: Method 'get_Description'
    // TODO: Method 'get_Labels'
};
// --------------------------------------------------------
// Type: ISpellCheckerChangedEventHandler
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISpellCheckerChangedEventHandler = *opaque{
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ISpellChecker
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISpellChecker = *opaque{
    // TODO: Method 'get_LanguageTag'
    // TODO: Method 'Check'
    // TODO: Method 'Suggest'
    // TODO: Method 'Add'
    // TODO: Method 'Ignore'
    // TODO: Method 'AutoCorrect'
    // TODO: Method 'GetOptionValue'
    // TODO: Method 'get_OptionIds'
    // TODO: Method 'get_Id'
    // TODO: Method 'get_LocalizedName'
    // TODO: Method 'add_SpellCheckerChanged'
    // TODO: Method 'remove_SpellCheckerChanged'
    // TODO: Method 'GetOptionDescription'
    // TODO: Method 'ComprehensiveCheck'
};
// --------------------------------------------------------
// Type: ISpellChecker2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISpellChecker2 = *opaque{
    // TODO: Method 'Remove'
};
// --------------------------------------------------------
// Type: ISpellCheckerFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISpellCheckerFactory = *opaque{
    // TODO: Method 'get_SupportedLanguages'
    // TODO: Method 'IsSupported'
    // TODO: Method 'CreateSpellChecker'
};
// --------------------------------------------------------
// Type: IUserDictionariesRegistrar
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUserDictionariesRegistrar = *opaque{
    // TODO: Method 'RegisterUserDictionary'
    // TODO: Method 'UnregisterUserDictionary'
};
// --------------------------------------------------------
// Type: ISpellCheckProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISpellCheckProvider = *opaque{
    // TODO: Method 'get_LanguageTag'
    // TODO: Method 'Check'
    // TODO: Method 'Suggest'
    // TODO: Method 'GetOptionValue'
    // TODO: Method 'SetOptionValue'
    // TODO: Method 'get_OptionIds'
    // TODO: Method 'get_Id'
    // TODO: Method 'get_LocalizedName'
    // TODO: Method 'GetOptionDescription'
    // TODO: Method 'InitializeWordlist'
};
// --------------------------------------------------------
// Type: IComprehensiveSpellCheckProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IComprehensiveSpellCheckProvider = *opaque{
    // TODO: Method 'ComprehensiveCheck'
};
// --------------------------------------------------------
// Type: ISpellCheckProviderFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISpellCheckProviderFactory = *opaque{
    // TODO: Method 'get_SupportedLanguages'
    // TODO: Method 'IsSupported'
    // TODO: Method 'CreateSpellCheckProvider'
};
// --------------------------------------------------------
// Type: IFEClassFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFEClassFactory = *opaque{
};
// --------------------------------------------------------
// Type: IMEDLG
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const IMEDLG = *opaque{
};
// --------------------------------------------------------
// Type: IFECommon
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFECommon = *opaque{
    // TODO: Method 'IsDefaultIME'
    // TODO: Method 'SetDefaultIME'
    // TODO: Method 'InvokeWordRegDialog'
    // TODO: Method 'InvokeDictToolDialog'
};
// --------------------------------------------------------
// Type: WDD
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const WDD = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: MORRSLT
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const MORRSLT = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous3_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous3_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IFELanguage
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFELanguage = *opaque{
    // TODO: Method 'Open'
    // TODO: Method 'Close'
    // TODO: Method 'GetJMorphResult'
    // TODO: Method 'GetConversionModeCaps'
    // TODO: Method 'GetPhonetic'
    // TODO: Method 'GetConversion'
};
// --------------------------------------------------------
// Type: IMEREG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IMEREG = *opaque{
};
// --------------------------------------------------------
// Type: IMEFMT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IMEFMT = *opaque{
};
// --------------------------------------------------------
// Type: IMEUCT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IMEUCT = *opaque{
};
// --------------------------------------------------------
// Type: IMEWRD
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const IMEWRD = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
        pub const _Anonymous_e__Struct = *opaque{
        };
    };
};
// --------------------------------------------------------
// Type: IMESHF
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const IMESHF = *opaque{
};
// --------------------------------------------------------
// Type: POSTBL
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const POSTBL = *opaque{
};
// --------------------------------------------------------
// Type: IMEREL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IMEREL = *opaque{
};
// --------------------------------------------------------
// Type: IMEDP
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const IMEDP = *opaque{
};
// --------------------------------------------------------
// Type: PFNLOG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNLOG = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: IFEDictionary
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFEDictionary = *opaque{
    // TODO: Method 'Open'
    // TODO: Method 'Close'
    // TODO: Method 'GetHeader'
    // TODO: Method 'DisplayProperty'
    // TODO: Method 'GetPosTable'
    // TODO: Method 'GetWords'
    // TODO: Method 'NextWords'
    // TODO: Method 'Create'
    // TODO: Method 'SetHeader'
    // TODO: Method 'ExistWord'
    // TODO: Method 'ExistDependency'
    // TODO: Method 'RegisterWord'
    // TODO: Method 'RegisterDependency'
    // TODO: Method 'GetDependencies'
    // TODO: Method 'NextDependencies'
    // TODO: Method 'ConvertFromOldMSIME'
    // TODO: Method 'ConvertFromUserToSys'
};
// --------------------------------------------------------
// Type: IMEKMSINIT
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const IMEKMSINIT = *opaque{
};
// --------------------------------------------------------
// Type: IMEKMSKEY
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const IMEKMSKEY = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IMEKMS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const IMEKMS = *opaque{
};
// --------------------------------------------------------
// Type: IMEKMSNTFY
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const IMEKMSNTFY = *opaque{
};
// --------------------------------------------------------
// Type: IMEKMSKMP
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const IMEKMSKMP = *opaque{
};
// --------------------------------------------------------
// Type: IMEKMSINVK
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const IMEKMSINVK = *opaque{
};
// --------------------------------------------------------
// Type: IMEKMSFUNCDESC
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const IMEKMSFUNCDESC = *opaque{
};
// --------------------------------------------------------
// Type: fpCreateIFECommonInstanceType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const fpCreateIFECommonInstanceType = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: fpCreateIFELanguageInstanceType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const fpCreateIFELanguageInstanceType = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: fpCreateIFEDictionaryInstanceType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const fpCreateIFEDictionaryInstanceType = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: COMPOSITIONSTRING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COMPOSITIONSTRING = extern struct {
    dwSize: {"kind":"UInt32"},
    dwCompReadAttrLen: {"kind":"UInt32"},
    dwCompReadAttrOffset: {"kind":"UInt32"},
    dwCompReadClauseLen: {"kind":"UInt32"},
    dwCompReadClauseOffset: {"kind":"UInt32"},
    dwCompReadStrLen: {"kind":"UInt32"},
    dwCompReadStrOffset: {"kind":"UInt32"},
    dwCompAttrLen: {"kind":"UInt32"},
    dwCompAttrOffset: {"kind":"UInt32"},
    dwCompClauseLen: {"kind":"UInt32"},
    dwCompClauseOffset: {"kind":"UInt32"},
    dwCompStrLen: {"kind":"UInt32"},
    dwCompStrOffset: {"kind":"UInt32"},
    dwCursorPos: {"kind":"UInt32"},
    dwDeltaStart: {"kind":"UInt32"},
    dwResultReadClauseLen: {"kind":"UInt32"},
    dwResultReadClauseOffset: {"kind":"UInt32"},
    dwResultReadStrLen: {"kind":"UInt32"},
    dwResultReadStrOffset: {"kind":"UInt32"},
    dwResultClauseLen: {"kind":"UInt32"},
    dwResultClauseOffset: {"kind":"UInt32"},
    dwResultStrLen: {"kind":"UInt32"},
    dwResultStrOffset: {"kind":"UInt32"},
    dwPrivateSize: {"kind":"UInt32"},
    dwPrivateOffset: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: GUIDELINE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GUIDELINE = extern struct {
    dwSize: {"kind":"UInt32"},
    dwLevel: {"kind":"UInt32"},
    dwIndex: {"kind":"UInt32"},
    dwStrLen: {"kind":"UInt32"},
    dwStrOffset: {"kind":"UInt32"},
    dwPrivateSize: {"kind":"UInt32"},
    dwPrivateOffset: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: TRANSMSG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRANSMSG = extern struct {
    message: {"kind":"UInt32"},
    wParam: Windows.Win32.WindowsAndMessaging.WPARAM,
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
};
// --------------------------------------------------------
// Type: TRANSMSGLIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRANSMSGLIST = extern struct {
    uMsgCount: {"kind":"UInt32"},
    TransMsg: {"kind":"Array","child": Windows.Win32.Intl.TRANSMSG},
};
// --------------------------------------------------------
// Type: CANDIDATEINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CANDIDATEINFO = extern struct {
    dwSize: {"kind":"UInt32"},
    dwCount: {"kind":"UInt32"},
    dwOffset: {"kind":"Array","child": {"kind":"UInt32"}},
    dwPrivateSize: {"kind":"UInt32"},
    dwPrivateOffset: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: INPUTCONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INPUTCONTEXT = extern struct {
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    fOpen: Windows.Win32.SystemServices.BOOL,
    ptStatusWndPos: Windows.Win32.DisplayDevices.POINT,
    ptSoftKbdPos: Windows.Win32.DisplayDevices.POINT,
    fdwConversion: {"kind":"UInt32"},
    fdwSentence: {"kind":"UInt32"},
    lfFont: Windows.Win32.Intl.INPUTCONTEXT+_lfFont_e__Union,
    cfCompForm: Windows.Win32.Intl.COMPOSITIONFORM,
    cfCandForm: {"kind":"Array","child": Windows.Win32.Intl.CANDIDATEFORM},
    hCompStr: {"kind""Ptr","child":Windows.Win32.Intl.HIMCC__},
    hCandInfo: {"kind""Ptr","child":Windows.Win32.Intl.HIMCC__},
    hGuideLine: {"kind""Ptr","child":Windows.Win32.Intl.HIMCC__},
    hPrivate: {"kind""Ptr","child":Windows.Win32.Intl.HIMCC__},
    dwNumMsgBuf: {"kind":"UInt32"},
    hMsgBuf: {"kind""Ptr","child":Windows.Win32.Intl.HIMCC__},
    fdwInit: {"kind":"UInt32"},
    dwReserve: {"kind":"Array","child": {"kind":"UInt32"}},
    // --------------------------------------------------------
    // Type: _lfFont_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _lfFont_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IMEINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMEINFO = extern struct {
    dwPrivateDataSize: {"kind":"UInt32"},
    fdwProperty: {"kind":"UInt32"},
    fdwConversionCaps: {"kind":"UInt32"},
    fdwSentenceCaps: {"kind":"UInt32"},
    fdwUICaps: {"kind":"UInt32"},
    fdwSCSCaps: {"kind":"UInt32"},
    fdwSelectCaps: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SOFTKBDDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SOFTKBDDATA = extern struct {
    uCount: {"kind":"UInt32"},
    wCode: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: APPLETIDLIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const APPLETIDLIST = extern struct {
    count: {"kind":"Int32"},
    pIIDList: {"kind""Ptr","child":Guid},
};
// --------------------------------------------------------
// Type: IMESTRINGCANDIDATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMESTRINGCANDIDATE = extern struct {
    uCount: {"kind":"UInt32"},
    lpwstr: {"kind":"Array","child": {"kind""Ptr","child":{"kind":"UInt16"}}},
};
// --------------------------------------------------------
// Type: IMEITEM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMEITEM = extern struct {
    cbSize: {"kind":"Int32"},
    iType: {"kind":"Int32"},
    lpItemData: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: IMEITEMCANDIDATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMEITEMCANDIDATE = extern struct {
    uCount: {"kind":"UInt32"},
    imeItem: {"kind":"Array","child": Windows.Win32.Intl.IMEITEM},
};
// --------------------------------------------------------
// Type: tabIMESTRINGINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tabIMESTRINGINFO = extern struct {
    dwFarEastId: {"kind":"UInt32"},
    lpwstr: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: tabIMEFAREASTINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tabIMEFAREASTINFO = extern struct {
    dwSize: {"kind":"UInt32"},
    dwType: {"kind":"UInt32"},
    dwData: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: IMESTRINGCANDIDATEINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMESTRINGCANDIDATEINFO = extern struct {
    dwFarEastId: {"kind":"UInt32"},
    lpFarEastInfo: {"kind""Ptr","child":Windows.Win32.Intl.tabIMEFAREASTINFO},
    fInfoMask: {"kind":"UInt32"},
    iSelIndex: {"kind":"Int32"},
    uCount: {"kind":"UInt32"},
    lpwstr: {"kind":"Array","child": {"kind""Ptr","child":{"kind":"UInt16"}}},
};
// --------------------------------------------------------
// Type: IMECOMPOSITIONSTRINGINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMECOMPOSITIONSTRINGINFO = extern struct {
    iCompStrLen: {"kind":"Int32"},
    iCaretPos: {"kind":"Int32"},
    iEditStart: {"kind":"Int32"},
    iEditLen: {"kind":"Int32"},
    iTargetStart: {"kind":"Int32"},
    iTargetLen: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: IMECHARINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMECHARINFO = extern struct {
    wch: {"kind":"UInt16"},
    dwCharInfo: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IMEAPPLETCFG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMEAPPLETCFG = extern struct {
    dwConfig: {"kind":"UInt32"},
    wchTitle: {"kind":"Array","child": {"kind":"UInt16"}},
    wchTitleFontFace: {"kind":"Array","child": {"kind":"UInt16"}},
    dwCharSet: {"kind":"UInt32"},
    iCategory: {"kind":"Int32"},
    hIcon: Windows.Win32.Gdi.HICON,
    langID: {"kind":"UInt16"},
    dummy: {"kind":"UInt16"},
    lReserved1: Windows.Win32.WindowsAndMessaging.LPARAM,
};
// --------------------------------------------------------
// Type: IMEAPPLETUI
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMEAPPLETUI = extern struct {
    hwnd: Windows.Win32.WindowsAndMessaging.HWND,
    dwStyle: {"kind":"UInt32"},
    width: {"kind":"Int32"},
    height: {"kind":"Int32"},
    minWidth: {"kind":"Int32"},
    minHeight: {"kind":"Int32"},
    maxWidth: {"kind":"Int32"},
    maxHeight: {"kind":"Int32"},
    lReserved1: Windows.Win32.WindowsAndMessaging.LPARAM,
    lReserved2: Windows.Win32.WindowsAndMessaging.LPARAM,
};
// --------------------------------------------------------
// Type: APPLYCANDEXPARAM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const APPLYCANDEXPARAM = extern struct {
    dwSize: {"kind":"UInt32"},
    lpwstrDisplay: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpwstrReading: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwReserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IImeSpecifyApplets
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IImeSpecifyApplets = *opaque{
    // TODO: Method 'GetAppletIIDList'
};
// --------------------------------------------------------
// Type: IImePadApplet
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IImePadApplet = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'Terminate'
    // TODO: Method 'GetAppletConfig'
    // TODO: Method 'CreateUI'
    // TODO: Method 'Notify'
};
// --------------------------------------------------------
// Type: IImePad
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IImePad = *opaque{
    // TODO: Method 'Request'
};
// --------------------------------------------------------
// Type: IImePlugInDictDictionaryList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IImePlugInDictDictionaryList = *opaque{
    // TODO: Method 'GetDictionariesInUse'
    // TODO: Method 'DeleteDictionary'
};
// --------------------------------------------------------
// Type: SCRIPT_CONTROL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCRIPT_CONTROL = extern struct {
    _bitfield: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SCRIPT_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCRIPT_STATE = extern struct {
    _bitfield: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: SCRIPT_ANALYSIS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCRIPT_ANALYSIS = extern struct {
    _bitfield: {"kind":"UInt16"},
    s: Windows.Win32.Intl.SCRIPT_STATE,
};
// --------------------------------------------------------
// Type: SCRIPT_ITEM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCRIPT_ITEM = extern struct {
    iCharPos: {"kind":"Int32"},
    a: Windows.Win32.Intl.SCRIPT_ANALYSIS,
};
// --------------------------------------------------------
// Type: SCRIPT_JUSTIFY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SCRIPT_JUSTIFY = *opaque{
};
// --------------------------------------------------------
// Type: SCRIPT_VISATTR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCRIPT_VISATTR = extern struct {
    _bitfield: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: GOFFSET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GOFFSET = extern struct {
    du: {"kind":"Int32"},
    dv: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: SCRIPT_LOGATTR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCRIPT_LOGATTR = extern struct {
    _bitfield: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: SCRIPT_PROPERTIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCRIPT_PROPERTIES = extern struct {
    _bitfield1: {"kind":"UInt32"},
    _bitfield2: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SCRIPT_FONTPROPERTIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCRIPT_FONTPROPERTIES = extern struct {
    cBytes: {"kind":"Int32"},
    wgBlank: {"kind":"UInt16"},
    wgDefault: {"kind":"UInt16"},
    wgInvalid: {"kind":"UInt16"},
    wgKashida: {"kind":"UInt16"},
    iKashidaWidth: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: SCRIPT_TABDEF
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCRIPT_TABDEF = extern struct {
    cTabStops: {"kind":"Int32"},
    iScale: {"kind":"Int32"},
    pTabStops: {"kind""Ptr","child":{"kind":"Int32"}},
    iTabOrigin: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: SCRIPT_DIGITSUBSTITUTE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCRIPT_DIGITSUBSTITUTE = extern struct {
    _bitfield1: {"kind":"UInt32"},
    _bitfield2: {"kind":"UInt32"},
    dwReserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: opentype_feature_record
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const opentype_feature_record = extern struct {
    tagFeature: {"kind":"UInt32"},
    lParameter: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: textrange_properties
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const textrange_properties = extern struct {
    potfRecords: {"kind""Ptr","child":Windows.Win32.Intl.opentype_feature_record},
    cotfRecords: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: script_charprop
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const script_charprop = extern struct {
    _bitfield: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: script_glyphprop
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const script_glyphprop = extern struct {
    sva: Windows.Win32.Intl.SCRIPT_VISATTR,
    reserved: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: UErrorCode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UErrorCode = *opaque{
};
// --------------------------------------------------------
// Type: UTraceLevel
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UTraceLevel = *opaque{
};
// --------------------------------------------------------
// Type: UTraceFunctionNumber
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UTraceFunctionNumber = *opaque{
};
// --------------------------------------------------------
// Type: UTraceEntry
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UTraceEntry = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: UTraceExit
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UTraceExit = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: UTraceData
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UTraceData = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: UStringTrieResult
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UStringTrieResult = *opaque{
};
// --------------------------------------------------------
// Type: UScriptCode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UScriptCode = *opaque{
};
// --------------------------------------------------------
// Type: UScriptUsage
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UScriptUsage = *opaque{
};
// --------------------------------------------------------
// Type: UReplaceableCallbacks
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UReplaceableCallbacks = extern struct {
    length: {"kind":"IntPtr"},
    charAt: {"kind":"IntPtr"},
    char32At: {"kind":"IntPtr"},
    replace: {"kind":"IntPtr"},
    extract: {"kind":"IntPtr"},
    copy: {"kind":"IntPtr"},
};
// --------------------------------------------------------
// Type: UFieldPosition
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UFieldPosition = extern struct {
    field: {"kind":"Int32"},
    beginIndex: {"kind":"Int32"},
    endIndex: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: UCharIteratorOrigin
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UCharIteratorOrigin = *opaque{
};
// --------------------------------------------------------
// Type: UCharIteratorGetIndex
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UCharIteratorGetIndex = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: UCharIteratorMove
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UCharIteratorMove = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: UCharIteratorHasNext
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UCharIteratorHasNext = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: UCharIteratorHasPrevious
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UCharIteratorHasPrevious = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: UCharIteratorCurrent
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UCharIteratorCurrent = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: UCharIteratorNext
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UCharIteratorNext = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: UCharIteratorPrevious
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UCharIteratorPrevious = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: UCharIteratorReserved
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UCharIteratorReserved = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: UCharIteratorGetState
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UCharIteratorGetState = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: UCharIteratorSetState
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UCharIteratorSetState = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: UCharIterator
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UCharIterator = extern struct {
    context: {"kind""Ptr","child":{"kind":"Void"}},
    length: {"kind":"Int32"},
    start: {"kind":"Int32"},
    index: {"kind":"Int32"},
    limit: {"kind":"Int32"},
    reservedField: {"kind":"Int32"},
    getIndex: {"kind""Ptr","child":Windows.Win32.Intl.UCharIteratorGetIndex},
    move: {"kind""Ptr","child":Windows.Win32.Intl.UCharIteratorMove},
    hasNext: {"kind""Ptr","child":Windows.Win32.Intl.UCharIteratorHasNext},
    hasPrevious: {"kind""Ptr","child":Windows.Win32.Intl.UCharIteratorHasPrevious},
    current: {"kind""Ptr","child":Windows.Win32.Intl.UCharIteratorCurrent},
    next: {"kind""Ptr","child":Windows.Win32.Intl.UCharIteratorNext},
    previous: {"kind""Ptr","child":Windows.Win32.Intl.UCharIteratorPrevious},
    reservedFn: {"kind""Ptr","child":Windows.Win32.Intl.UCharIteratorReserved},
    getState: {"kind""Ptr","child":Windows.Win32.Intl.UCharIteratorGetState},
    setState: {"kind""Ptr","child":Windows.Win32.Intl.UCharIteratorSetState},
};
// --------------------------------------------------------
// Type: UEnumeration
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const UEnumeration = opaque {
};
// --------------------------------------------------------
// Type: ULocDataLocaleType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ULocDataLocaleType = *opaque{
};
// --------------------------------------------------------
// Type: ULayoutType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ULayoutType = *opaque{
};
// --------------------------------------------------------
// Type: UAcceptResult
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UAcceptResult = *opaque{
};
// --------------------------------------------------------
// Type: UResourceBundle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const UResourceBundle = opaque {
};
// --------------------------------------------------------
// Type: UResType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UResType = *opaque{
};
// --------------------------------------------------------
// Type: UDisplayContextType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UDisplayContextType = *opaque{
};
// --------------------------------------------------------
// Type: UDisplayContext
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UDisplayContext = *opaque{
};
// --------------------------------------------------------
// Type: UDialectHandling
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UDialectHandling = *opaque{
};
// --------------------------------------------------------
// Type: ULocaleDisplayNames
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ULocaleDisplayNames = opaque {
};
// --------------------------------------------------------
// Type: UCurrencyUsage
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UCurrencyUsage = *opaque{
};
// --------------------------------------------------------
// Type: UCurrNameStyle
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UCurrNameStyle = *opaque{
};
// --------------------------------------------------------
// Type: UCurrCurrencyType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UCurrCurrencyType = *opaque{
};
// --------------------------------------------------------
// Type: UConverter
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const UConverter = opaque {
};
// --------------------------------------------------------
// Type: UConverterCallbackReason
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UConverterCallbackReason = *opaque{
};
// --------------------------------------------------------
// Type: UConverterFromUnicodeArgs
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UConverterFromUnicodeArgs = extern struct {
    size: {"kind":"UInt16"},
    flush: {"kind":"SByte"},
    converter: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},
    source: {"kind""Ptr","child":{"kind":"UInt16"}},
    sourceLimit: {"kind""Ptr","child":{"kind":"UInt16"}},
    target: {"kind""Ptr","child":{"kind":"SByte"}},
    targetLimit: {"kind""Ptr","child":{"kind":"SByte"}},
    offsets: {"kind""Ptr","child":{"kind":"Int32"}},
};
// --------------------------------------------------------
// Type: UConverterToUnicodeArgs
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UConverterToUnicodeArgs = extern struct {
    size: {"kind":"UInt16"},
    flush: {"kind":"SByte"},
    converter: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},
    source: {"kind""Ptr","child":{"kind":"SByte"}},
    sourceLimit: {"kind""Ptr","child":{"kind":"SByte"}},
    target: {"kind""Ptr","child":{"kind":"UInt16"}},
    targetLimit: {"kind""Ptr","child":{"kind":"UInt16"}},
    offsets: {"kind""Ptr","child":{"kind":"Int32"}},
};
// --------------------------------------------------------
// Type: USet
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const USet = opaque {
};
// --------------------------------------------------------
// Type: UConverterType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UConverterType = *opaque{
};
// --------------------------------------------------------
// Type: UConverterPlatform
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UConverterPlatform = *opaque{
};
// --------------------------------------------------------
// Type: UConverterToUCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UConverterToUCallback = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: UConverterFromUCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UConverterFromUCallback = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: UConverterUnicodeSet
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UConverterUnicodeSet = *opaque{
};
// --------------------------------------------------------
// Type: UMemAllocFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UMemAllocFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: UMemReallocFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UMemReallocFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: UMemFreeFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UMemFreeFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: UProperty
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UProperty = *opaque{
};
// --------------------------------------------------------
// Type: UCharCategory
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UCharCategory = *opaque{
};
// --------------------------------------------------------
// Type: UCharDirection
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UCharDirection = *opaque{
};
// --------------------------------------------------------
// Type: UBidiPairedBracketType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UBidiPairedBracketType = *opaque{
};
// --------------------------------------------------------
// Type: UBlockCode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UBlockCode = *opaque{
};
// --------------------------------------------------------
// Type: UEastAsianWidth
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UEastAsianWidth = *opaque{
};
// --------------------------------------------------------
// Type: UCharNameChoice
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UCharNameChoice = *opaque{
};
// --------------------------------------------------------
// Type: UPropertyNameChoice
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UPropertyNameChoice = *opaque{
};
// --------------------------------------------------------
// Type: UDecompositionType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UDecompositionType = *opaque{
};
// --------------------------------------------------------
// Type: UJoiningType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UJoiningType = *opaque{
};
// --------------------------------------------------------
// Type: UJoiningGroup
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UJoiningGroup = *opaque{
};
// --------------------------------------------------------
// Type: UGraphemeClusterBreak
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UGraphemeClusterBreak = *opaque{
};
// --------------------------------------------------------
// Type: UWordBreakValues
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UWordBreakValues = *opaque{
};
// --------------------------------------------------------
// Type: USentenceBreak
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const USentenceBreak = *opaque{
};
// --------------------------------------------------------
// Type: ULineBreak
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ULineBreak = *opaque{
};
// --------------------------------------------------------
// Type: UNumericType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UNumericType = *opaque{
};
// --------------------------------------------------------
// Type: UHangulSyllableType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UHangulSyllableType = *opaque{
};
// --------------------------------------------------------
// Type: UIndicPositionalCategory
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UIndicPositionalCategory = *opaque{
};
// --------------------------------------------------------
// Type: UIndicSyllabicCategory
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UIndicSyllabicCategory = *opaque{
};
// --------------------------------------------------------
// Type: UVerticalOrientation
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UVerticalOrientation = *opaque{
};
// --------------------------------------------------------
// Type: UCharEnumTypeRange
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UCharEnumTypeRange = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: UEnumCharNamesFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UEnumCharNamesFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: UBiDiDirection
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UBiDiDirection = *opaque{
};
// --------------------------------------------------------
// Type: UBiDi
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const UBiDi = opaque {
};
// --------------------------------------------------------
// Type: UBiDiReorderingMode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UBiDiReorderingMode = *opaque{
};
// --------------------------------------------------------
// Type: UBiDiReorderingOption
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UBiDiReorderingOption = *opaque{
};
// --------------------------------------------------------
// Type: UBiDiClassCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UBiDiClassCallback = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: UBiDiOrder
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UBiDiOrder = *opaque{
};
// --------------------------------------------------------
// Type: UBiDiMirroring
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UBiDiMirroring = *opaque{
};
// --------------------------------------------------------
// Type: UBiDiTransform
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const UBiDiTransform = opaque {
};
// --------------------------------------------------------
// Type: UTextClone
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UTextClone = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: UTextNativeLength
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UTextNativeLength = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: UTextAccess
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UTextAccess = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: UTextExtract
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UTextExtract = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: UTextReplace
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UTextReplace = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: UTextCopy
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UTextCopy = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: UTextMapOffsetToNative
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UTextMapOffsetToNative = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: UTextMapNativeIndexToUTF16
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UTextMapNativeIndexToUTF16 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: UTextClose
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UTextClose = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: UTextFuncs
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UTextFuncs = extern struct {
    tableSize: {"kind":"Int32"},
    reserved1: {"kind":"Int32"},
    reserved2: {"kind":"Int32"},
    reserved3: {"kind":"Int32"},
    clone: {"kind""Ptr","child":Windows.Win32.Intl.UTextClone},
    nativeLength: {"kind""Ptr","child":Windows.Win32.Intl.UTextNativeLength},
    access: {"kind""Ptr","child":Windows.Win32.Intl.UTextAccess},
    extract: {"kind""Ptr","child":Windows.Win32.Intl.UTextExtract},
    replace: {"kind""Ptr","child":Windows.Win32.Intl.UTextReplace},
    copy: {"kind""Ptr","child":Windows.Win32.Intl.UTextCopy},
    mapOffsetToNative: {"kind""Ptr","child":Windows.Win32.Intl.UTextMapOffsetToNative},
    mapNativeIndexToUTF16: {"kind""Ptr","child":Windows.Win32.Intl.UTextMapNativeIndexToUTF16},
    close: {"kind""Ptr","child":Windows.Win32.Intl.UTextClose},
    spare1: {"kind""Ptr","child":Windows.Win32.Intl.UTextClose},
    spare2: {"kind""Ptr","child":Windows.Win32.Intl.UTextClose},
    spare3: {"kind""Ptr","child":Windows.Win32.Intl.UTextClose},
};
// --------------------------------------------------------
// Type: UText
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UText = extern struct {
    magic: {"kind":"UInt32"},
    flags: {"kind":"Int32"},
    providerProperties: {"kind":"Int32"},
    sizeOfStruct: {"kind":"Int32"},
    chunkNativeLimit: {"kind":"Int64"},
    extraSize: {"kind":"Int32"},
    nativeIndexingLimit: {"kind":"Int32"},
    chunkNativeStart: {"kind":"Int64"},
    chunkOffset: {"kind":"Int32"},
    chunkLength: {"kind":"Int32"},
    chunkContents: {"kind""Ptr","child":{"kind":"UInt16"}},
    pFuncs: {"kind""Ptr","child":Windows.Win32.Intl.UTextFuncs},
    pExtra: {"kind""Ptr","child":{"kind":"Void"}},
    context: {"kind""Ptr","child":{"kind":"Void"}},
    p: {"kind""Ptr","child":{"kind":"Void"}},
    q: {"kind""Ptr","child":{"kind":"Void"}},
    r: {"kind""Ptr","child":{"kind":"Void"}},
    privP: {"kind""Ptr","child":{"kind":"Void"}},
    a: {"kind":"Int64"},
    b: {"kind":"Int32"},
    c: {"kind":"Int32"},
    privA: {"kind":"Int64"},
    privB: {"kind":"Int32"},
    privC: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: USetSpanCondition
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const USetSpanCondition = *opaque{
};
// --------------------------------------------------------
// Type: USerializedSet
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USerializedSet = extern struct {
    array: {"kind""Ptr","child":{"kind":"UInt16"}},
    bmpLength: {"kind":"Int32"},
    length: {"kind":"Int32"},
    staticArray: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: UNormalization2Mode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UNormalization2Mode = *opaque{
};
// --------------------------------------------------------
// Type: UNormalizationCheckResult
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UNormalizationCheckResult = *opaque{
};
// --------------------------------------------------------
// Type: UNormalizer2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const UNormalizer2 = opaque {
};
// --------------------------------------------------------
// Type: UNormalizationMode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UNormalizationMode = *opaque{
};
// --------------------------------------------------------
// Type: UConverterSelector
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const UConverterSelector = opaque {
};
// --------------------------------------------------------
// Type: UBreakIterator
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const UBreakIterator = opaque {
};
// --------------------------------------------------------
// Type: UNESCAPE_CHAR_AT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UNESCAPE_CHAR_AT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: UCaseMap
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const UCaseMap = opaque {
};
// --------------------------------------------------------
// Type: UParseError
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UParseError = extern struct {
    line: {"kind":"Int32"},
    offset: {"kind":"Int32"},
    preContext: {"kind":"Array","child": {"kind":"UInt16"}},
    postContext: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: UStringPrepProfile
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const UStringPrepProfile = opaque {
};
// --------------------------------------------------------
// Type: UStringPrepProfileType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UStringPrepProfileType = *opaque{
};
// --------------------------------------------------------
// Type: UIDNA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const UIDNA = opaque {
};
// --------------------------------------------------------
// Type: UIDNAInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UIDNAInfo = extern struct {
    size: {"kind":"Int16"},
    isTransitionalDifferent: {"kind":"SByte"},
    reservedB3: {"kind":"SByte"},
    errors: {"kind":"UInt32"},
    reservedI2: {"kind":"Int32"},
    reservedI3: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: UBreakIteratorType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UBreakIteratorType = *opaque{
};
// --------------------------------------------------------
// Type: UWordBreak
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UWordBreak = *opaque{
};
// --------------------------------------------------------
// Type: ULineBreakTag
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ULineBreakTag = *opaque{
};
// --------------------------------------------------------
// Type: USentenceBreakTag
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const USentenceBreakTag = *opaque{
};
// --------------------------------------------------------
// Type: UCalendarType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UCalendarType = *opaque{
};
// --------------------------------------------------------
// Type: UCalendarDateFields
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UCalendarDateFields = *opaque{
};
// --------------------------------------------------------
// Type: UCalendarDaysOfWeek
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UCalendarDaysOfWeek = *opaque{
};
// --------------------------------------------------------
// Type: UCalendarMonths
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UCalendarMonths = *opaque{
};
// --------------------------------------------------------
// Type: UCalendarAMPMs
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UCalendarAMPMs = *opaque{
};
// --------------------------------------------------------
// Type: USystemTimeZoneType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const USystemTimeZoneType = *opaque{
};
// --------------------------------------------------------
// Type: UCalendarDisplayNameType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UCalendarDisplayNameType = *opaque{
};
// --------------------------------------------------------
// Type: UCalendarAttribute
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UCalendarAttribute = *opaque{
};
// --------------------------------------------------------
// Type: UCalendarWallTimeOption
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UCalendarWallTimeOption = *opaque{
};
// --------------------------------------------------------
// Type: UCalendarLimitType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UCalendarLimitType = *opaque{
};
// --------------------------------------------------------
// Type: UCalendarWeekdayType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UCalendarWeekdayType = *opaque{
};
// --------------------------------------------------------
// Type: UTimeZoneTransitionType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UTimeZoneTransitionType = *opaque{
};
// --------------------------------------------------------
// Type: UCollator
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const UCollator = opaque {
};
// --------------------------------------------------------
// Type: UCollationResult
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UCollationResult = *opaque{
};
// --------------------------------------------------------
// Type: UColAttributeValue
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UColAttributeValue = *opaque{
};
// --------------------------------------------------------
// Type: UColReorderCode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UColReorderCode = *opaque{
};
// --------------------------------------------------------
// Type: UColAttribute
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UColAttribute = *opaque{
};
// --------------------------------------------------------
// Type: UColRuleOption
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UColRuleOption = *opaque{
};
// --------------------------------------------------------
// Type: UColBoundMode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UColBoundMode = *opaque{
};
// --------------------------------------------------------
// Type: UCollationElements
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const UCollationElements = opaque {
};
// --------------------------------------------------------
// Type: UCharsetDetector
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const UCharsetDetector = opaque {
};
// --------------------------------------------------------
// Type: UCharsetMatch
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const UCharsetMatch = opaque {
};
// --------------------------------------------------------
// Type: UDateTimePatternField
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UDateTimePatternField = *opaque{
};
// --------------------------------------------------------
// Type: UDateTimePGDisplayWidth
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UDateTimePGDisplayWidth = *opaque{
};
// --------------------------------------------------------
// Type: UDateTimePatternMatchOptions
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UDateTimePatternMatchOptions = *opaque{
};
// --------------------------------------------------------
// Type: UDateTimePatternConflict
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UDateTimePatternConflict = *opaque{
};
// --------------------------------------------------------
// Type: UFieldPositionIterator
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const UFieldPositionIterator = opaque {
};
// --------------------------------------------------------
// Type: UFormattableType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UFormattableType = *opaque{
};
// --------------------------------------------------------
// Type: UDateIntervalFormat
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const UDateIntervalFormat = opaque {
};
// --------------------------------------------------------
// Type: UGender
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UGender = *opaque{
};
// --------------------------------------------------------
// Type: UGenderInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const UGenderInfo = opaque {
};
// --------------------------------------------------------
// Type: UListFormatter
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const UListFormatter = opaque {
};
// --------------------------------------------------------
// Type: ULocaleData
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ULocaleData = opaque {
};
// --------------------------------------------------------
// Type: ULocaleDataExemplarSetType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ULocaleDataExemplarSetType = *opaque{
};
// --------------------------------------------------------
// Type: ULocaleDataDelimiterType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ULocaleDataDelimiterType = *opaque{
};
// --------------------------------------------------------
// Type: UMeasurementSystem
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UMeasurementSystem = *opaque{
};
// --------------------------------------------------------
// Type: UNumberFormatStyle
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UNumberFormatStyle = *opaque{
};
// --------------------------------------------------------
// Type: UNumberFormatRoundingMode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UNumberFormatRoundingMode = *opaque{
};
// --------------------------------------------------------
// Type: UNumberFormatPadPosition
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UNumberFormatPadPosition = *opaque{
};
// --------------------------------------------------------
// Type: UNumberCompactStyle
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UNumberCompactStyle = *opaque{
};
// --------------------------------------------------------
// Type: UCurrencySpacing
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UCurrencySpacing = *opaque{
};
// --------------------------------------------------------
// Type: UNumberFormatFields
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UNumberFormatFields = *opaque{
};
// --------------------------------------------------------
// Type: UNumberFormatAttributeValue
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UNumberFormatAttributeValue = *opaque{
};
// --------------------------------------------------------
// Type: UNumberFormatAttribute
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UNumberFormatAttribute = *opaque{
};
// --------------------------------------------------------
// Type: UNumberFormatTextAttribute
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UNumberFormatTextAttribute = *opaque{
};
// --------------------------------------------------------
// Type: UNumberFormatSymbol
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UNumberFormatSymbol = *opaque{
};
// --------------------------------------------------------
// Type: UDateFormatStyle
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UDateFormatStyle = *opaque{
};
// --------------------------------------------------------
// Type: UDateFormatField
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UDateFormatField = *opaque{
};
// --------------------------------------------------------
// Type: UDateFormatBooleanAttribute
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UDateFormatBooleanAttribute = *opaque{
};
// --------------------------------------------------------
// Type: UDateFormatSymbolType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UDateFormatSymbolType = *opaque{
};
// --------------------------------------------------------
// Type: UDateFormatSymbols
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const UDateFormatSymbols = opaque {
};
// --------------------------------------------------------
// Type: UNumberFormatter
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const UNumberFormatter = opaque {
};
// --------------------------------------------------------
// Type: UFormattedNumber
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const UFormattedNumber = opaque {
};
// --------------------------------------------------------
// Type: UNumberingSystem
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const UNumberingSystem = opaque {
};
// --------------------------------------------------------
// Type: UPluralType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UPluralType = *opaque{
};
// --------------------------------------------------------
// Type: UPluralRules
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const UPluralRules = opaque {
};
// --------------------------------------------------------
// Type: URegularExpression
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const URegularExpression = opaque {
};
// --------------------------------------------------------
// Type: URegexpFlag
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const URegexpFlag = *opaque{
};
// --------------------------------------------------------
// Type: URegexMatchCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const URegexMatchCallback = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: URegexFindProgressCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const URegexFindProgressCallback = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: URegionType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const URegionType = *opaque{
};
// --------------------------------------------------------
// Type: URegion
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const URegion = opaque {
};
// --------------------------------------------------------
// Type: UDateRelativeDateTimeFormatterStyle
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UDateRelativeDateTimeFormatterStyle = *opaque{
};
// --------------------------------------------------------
// Type: URelativeDateTimeUnit
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const URelativeDateTimeUnit = *opaque{
};
// --------------------------------------------------------
// Type: URelativeDateTimeFormatter
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const URelativeDateTimeFormatter = opaque {
};
// --------------------------------------------------------
// Type: UStringSearch
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const UStringSearch = opaque {
};
// --------------------------------------------------------
// Type: USearchAttribute
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const USearchAttribute = *opaque{
};
// --------------------------------------------------------
// Type: USearchAttributeValue
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const USearchAttributeValue = *opaque{
};
// --------------------------------------------------------
// Type: USpoofChecker
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const USpoofChecker = opaque {
};
// --------------------------------------------------------
// Type: USpoofCheckResult
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const USpoofCheckResult = opaque {
};
// --------------------------------------------------------
// Type: USpoofChecks
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const USpoofChecks = *opaque{
};
// --------------------------------------------------------
// Type: URestrictionLevel
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const URestrictionLevel = *opaque{
};
// --------------------------------------------------------
// Type: UDateTimeScale
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UDateTimeScale = *opaque{
};
// --------------------------------------------------------
// Type: UTimeScaleValue
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UTimeScaleValue = *opaque{
};
// --------------------------------------------------------
// Type: UTransDirection
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UTransDirection = *opaque{
};
// --------------------------------------------------------
// Type: UTransPosition
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UTransPosition = extern struct {
    contextStart: {"kind":"Int32"},
    contextLimit: {"kind":"Int32"},
    start: {"kind":"Int32"},
    limit: {"kind":"Int32"},
};
],

"func_definitions": [

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetTextCharset(
    hdc: Windows.Win32.Gdi.HDC,

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetTextCharsetInfo(
    hdc: Windows.Win32.Gdi.HDC,
    lpSig: {"kind""Ptr","child":Windows.Win32.Intl.FONTSIGNATURE},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "GDI32" fn TranslateCharsetInfo(
    lpSrc: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpCs: {"kind""Ptr","child":Windows.Win32.Intl.CHARSETINFO},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FindStringOrdinal(
    dwFindStringOrdinalFlags: {"kind":"UInt32"},
    lpStringSource: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchSource: {"kind":"Int32"},
    lpStringValue: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchValue: {"kind":"Int32"},
    bIgnoreCase: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetDateFormatA(
    Locale: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    lpDate: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.SYSTEMTIME},
    lpFormat: {"kind""Ptr","child":{"kind":"SByte"}},
    lpDateStr: {"kind""Ptr","child":{"kind":"SByte"}},
    cchDate: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetDateFormatW(
    Locale: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    lpDate: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.SYSTEMTIME},
    lpFormat: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpDateStr: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchDate: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetTimeFormatA(
    Locale: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    lpTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.SYSTEMTIME},
    lpFormat: {"kind""Ptr","child":{"kind":"SByte"}},
    lpTimeStr: {"kind""Ptr","child":{"kind":"SByte"}},
    cchTime: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetTimeFormatW(
    Locale: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    lpTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.SYSTEMTIME},
    lpFormat: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpTimeStr: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchTime: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetTimeFormatEx(
    lpLocaleName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    lpTime: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.SYSTEMTIME},
    lpFormat: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpTimeStr: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchTime: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetDateFormatEx(
    lpLocaleName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    lpDate: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.SYSTEMTIME},
    lpFormat: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpDateStr: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchDate: {"kind":"Int32"},
    lpCalendar: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetDurationFormatEx(
    lpLocaleName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    lpDuration: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.SYSTEMTIME},
    ullDuration: {"kind":"UInt64"},
    lpFormat: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpDurationStr: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchDuration: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CompareStringEx(
    lpLocaleName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwCmpFlags: {"kind":"UInt32"},
    lpString1: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchCount1: {"kind":"Int32"},
    lpString2: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchCount2: {"kind":"Int32"},
    lpVersionInformation: {"kind""Ptr","child":Windows.Win32.Intl.NLSVERSIONINFO},
    lpReserved: {"kind""Ptr","child":{"kind":"Void"}},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CompareStringOrdinal(
    lpString1: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchCount1: {"kind":"Int32"},
    lpString2: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchCount2: {"kind":"Int32"},
    bIgnoreCase: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn CompareStringW(
    Locale: {"kind":"UInt32"},
    dwCmpFlags: {"kind":"UInt32"},
    lpString1: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchCount1: {"kind":"Int32"},
    lpString2: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchCount2: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FoldStringW(
    dwMapFlags: {"kind":"UInt32"},
    lpSrcStr: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchSrc: {"kind":"Int32"},
    lpDestStr: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchDest: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetStringTypeExW(
    Locale: {"kind":"UInt32"},
    dwInfoType: {"kind":"UInt32"},
    lpSrcStr: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchSrc: {"kind":"Int32"},
    lpCharType: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetStringTypeW(
    dwInfoType: {"kind":"UInt32"},
    lpSrcStr: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchSrc: {"kind":"Int32"},
    lpCharType: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn MultiByteToWideChar(
    CodePage: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    lpMultiByteStr: {"kind""Ptr","child":{"kind":"SByte"}},
    cbMultiByte: {"kind":"Int32"},
    lpWideCharStr: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchWideChar: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn WideCharToMultiByte(
    CodePage: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    lpWideCharStr: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchWideChar: {"kind":"Int32"},
    lpMultiByteStr: {"kind""Ptr","child":{"kind":"SByte"}},
    cbMultiByte: {"kind":"Int32"},
    lpDefaultChar: {"kind""Ptr","child":{"kind":"SByte"}},
    lpUsedDefaultChar: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn IsValidCodePage(
    CodePage: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetACP(

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetOEMCP(

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetCPInfo(
    CodePage: {"kind":"UInt32"},
    lpCPInfo: {"kind""Ptr","child":Windows.Win32.Intl.CPINFO},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetCPInfoExA(
    CodePage: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    lpCPInfoEx: {"kind""Ptr","child":Windows.Win32.Intl.CPINFOEXA},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetCPInfoExW(
    CodePage: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    lpCPInfoEx: {"kind""Ptr","child":Windows.Win32.Intl.CPINFOEXW},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn CompareStringA(
    Locale: {"kind":"UInt32"},
    dwCmpFlags: {"kind":"UInt32"},
    lpString1: {"kind""Ptr","child":{"kind":"SByte"}},
    cchCount1: {"kind":"Int32"},
    lpString2: {"kind""Ptr","child":{"kind":"SByte"}},
    cchCount2: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FindNLSString(
    Locale: {"kind":"UInt32"},
    dwFindNLSStringFlags: {"kind":"UInt32"},
    lpStringSource: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchSource: {"kind":"Int32"},
    lpStringValue: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchValue: {"kind":"Int32"},
    pcchFound: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn LCMapStringW(
    Locale: {"kind":"UInt32"},
    dwMapFlags: {"kind":"UInt32"},
    lpSrcStr: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchSrc: {"kind":"Int32"},
    lpDestStr: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchDest: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn LCMapStringA(
    Locale: {"kind":"UInt32"},
    dwMapFlags: {"kind":"UInt32"},
    lpSrcStr: {"kind""Ptr","child":{"kind":"SByte"}},
    cchSrc: {"kind":"Int32"},
    lpDestStr: {"kind""Ptr","child":{"kind":"SByte"}},
    cchDest: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetLocaleInfoW(
    Locale: {"kind":"UInt32"},
    LCType: {"kind":"UInt32"},
    lpLCData: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchData: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetLocaleInfoA(
    Locale: {"kind":"UInt32"},
    LCType: {"kind":"UInt32"},
    lpLCData: {"kind""Ptr","child":{"kind":"SByte"}},
    cchData: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetLocaleInfoA(
    Locale: {"kind":"UInt32"},
    LCType: {"kind":"UInt32"},
    lpLCData: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetLocaleInfoW(
    Locale: {"kind":"UInt32"},
    LCType: {"kind":"UInt32"},
    lpLCData: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetCalendarInfoA(
    Locale: {"kind":"UInt32"},
    Calendar: {"kind":"UInt32"},
    CalType: {"kind":"UInt32"},
    lpCalData: {"kind""Ptr","child":{"kind":"SByte"}},
    cchData: {"kind":"Int32"},
    lpValue: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetCalendarInfoW(
    Locale: {"kind":"UInt32"},
    Calendar: {"kind":"UInt32"},
    CalType: {"kind":"UInt32"},
    lpCalData: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchData: {"kind":"Int32"},
    lpValue: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetCalendarInfoA(
    Locale: {"kind":"UInt32"},
    Calendar: {"kind":"UInt32"},
    CalType: {"kind":"UInt32"},
    lpCalData: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetCalendarInfoW(
    Locale: {"kind":"UInt32"},
    Calendar: {"kind":"UInt32"},
    CalType: {"kind":"UInt32"},
    lpCalData: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn IsDBCSLeadByte(
    TestChar: {"kind":"Byte"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn IsDBCSLeadByteEx(
    CodePage: {"kind":"UInt32"},
    TestChar: {"kind":"Byte"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn LocaleNameToLCID(
    lpName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn LCIDToLocaleName(
    Locale: {"kind":"UInt32"},
    lpName: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchName: {"kind":"Int32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetDurationFormat(
    Locale: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    lpDuration: {"kind""Ptr","child":Windows.Win32.WindowsProgramming.SYSTEMTIME},
    ullDuration: {"kind":"UInt64"},
    lpFormat: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpDurationStr: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchDuration: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetNumberFormatA(
    Locale: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    lpValue: {"kind""Ptr","child":{"kind":"SByte"}},
    lpFormat: {"kind""Ptr","child":Windows.Win32.Intl.NUMBERFMTA},
    lpNumberStr: {"kind""Ptr","child":{"kind":"SByte"}},
    cchNumber: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetNumberFormatW(
    Locale: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    lpValue: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpFormat: {"kind""Ptr","child":Windows.Win32.Intl.NUMBERFMTW},
    lpNumberStr: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchNumber: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetCurrencyFormatA(
    Locale: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    lpValue: {"kind""Ptr","child":{"kind":"SByte"}},
    lpFormat: {"kind""Ptr","child":Windows.Win32.Intl.CURRENCYFMTA},
    lpCurrencyStr: {"kind""Ptr","child":{"kind":"SByte"}},
    cchCurrency: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetCurrencyFormatW(
    Locale: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    lpValue: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpFormat: {"kind""Ptr","child":Windows.Win32.Intl.CURRENCYFMTW},
    lpCurrencyStr: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchCurrency: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn EnumCalendarInfoA(
    lpCalInfoEnumProc: Windows.Win32.Intl.CALINFO_ENUMPROCA,
    Locale: {"kind":"UInt32"},
    Calendar: {"kind":"UInt32"},
    CalType: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn EnumCalendarInfoW(
    lpCalInfoEnumProc: Windows.Win32.Intl.CALINFO_ENUMPROCW,
    Locale: {"kind":"UInt32"},
    Calendar: {"kind":"UInt32"},
    CalType: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn EnumCalendarInfoExA(
    lpCalInfoEnumProcEx: Windows.Win32.Intl.CALINFO_ENUMPROCEXA,
    Locale: {"kind":"UInt32"},
    Calendar: {"kind":"UInt32"},
    CalType: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn EnumCalendarInfoExW(
    lpCalInfoEnumProcEx: Windows.Win32.Intl.CALINFO_ENUMPROCEXW,
    Locale: {"kind":"UInt32"},
    Calendar: {"kind":"UInt32"},
    CalType: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn EnumTimeFormatsA(
    lpTimeFmtEnumProc: Windows.Win32.Intl.TIMEFMT_ENUMPROCA,
    Locale: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn EnumTimeFormatsW(
    lpTimeFmtEnumProc: Windows.Win32.Intl.TIMEFMT_ENUMPROCW,
    Locale: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn EnumDateFormatsA(
    lpDateFmtEnumProc: Windows.Win32.Intl.DATEFMT_ENUMPROCA,
    Locale: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn EnumDateFormatsW(
    lpDateFmtEnumProc: Windows.Win32.Intl.DATEFMT_ENUMPROCW,
    Locale: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn EnumDateFormatsExA(
    lpDateFmtEnumProcEx: Windows.Win32.Intl.DATEFMT_ENUMPROCEXA,
    Locale: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn EnumDateFormatsExW(
    lpDateFmtEnumProcEx: Windows.Win32.Intl.DATEFMT_ENUMPROCEXW,
    Locale: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn IsValidLanguageGroup(
    LanguageGroup: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetNLSVersion(
    Function: {"kind":"UInt32"},
    Locale: {"kind":"UInt32"},
    lpVersionInformation: {"kind""Ptr","child":Windows.Win32.Intl.NLSVERSIONINFO},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn IsValidLocale(
    Locale: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetGeoInfoA(
    Location: {"kind":"Int32"},
    GeoType: {"kind":"UInt32"},
    lpGeoData: {"kind""Ptr","child":{"kind":"SByte"}},
    cchData: {"kind":"Int32"},
    LangId: {"kind":"UInt16"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetGeoInfoW(
    Location: {"kind":"Int32"},
    GeoType: {"kind":"UInt32"},
    lpGeoData: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchData: {"kind":"Int32"},
    LangId: {"kind":"UInt16"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetGeoInfoEx(
    location: {"kind""Ptr","child":{"kind":"UInt16"}},
    geoType: {"kind":"UInt32"},
    geoData: {"kind""Ptr","child":{"kind":"UInt16"}},
    geoDataCount: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn EnumSystemGeoID(
    GeoClass: {"kind":"UInt32"},
    ParentGeoId: {"kind":"Int32"},
    lpGeoEnumProc: Windows.Win32.Intl.GEO_ENUMPROC,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn EnumSystemGeoNames(
    geoClass: {"kind":"UInt32"},
    geoEnumProc: Windows.Win32.Intl.GEO_ENUMNAMEPROC,
    data: Windows.Win32.WindowsAndMessaging.LPARAM,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetUserGeoID(
    GeoClass: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetUserDefaultGeoName(
    geoName: {"kind""Ptr","child":{"kind":"UInt16"}},
    geoNameCount: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetUserGeoID(
    GeoId: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetUserGeoName(
    geoName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn ConvertDefaultLocale(
    Locale: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetSystemDefaultUILanguage(

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetThreadLocale(

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetThreadLocale(
    Locale: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetUserDefaultUILanguage(

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetUserDefaultLangID(

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetSystemDefaultLangID(

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetSystemDefaultLCID(

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetUserDefaultLCID(

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetThreadUILanguage(
    LangId: {"kind":"UInt16"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetThreadUILanguage(

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetProcessPreferredUILanguages(
    dwFlags: {"kind":"UInt32"},
    pulNumLanguages: {"kind""Ptr","child":{"kind":"UInt32"}},
    pwszLanguagesBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchLanguagesBuffer: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetProcessPreferredUILanguages(
    dwFlags: {"kind":"UInt32"},
    pwszLanguagesBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    pulNumLanguages: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetUserPreferredUILanguages(
    dwFlags: {"kind":"UInt32"},
    pulNumLanguages: {"kind""Ptr","child":{"kind":"UInt32"}},
    pwszLanguagesBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchLanguagesBuffer: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetSystemPreferredUILanguages(
    dwFlags: {"kind":"UInt32"},
    pulNumLanguages: {"kind""Ptr","child":{"kind":"UInt32"}},
    pwszLanguagesBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchLanguagesBuffer: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetThreadPreferredUILanguages(
    dwFlags: {"kind":"UInt32"},
    pulNumLanguages: {"kind""Ptr","child":{"kind":"UInt32"}},
    pwszLanguagesBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchLanguagesBuffer: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetThreadPreferredUILanguages(
    dwFlags: {"kind":"UInt32"},
    pwszLanguagesBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    pulNumLanguages: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetFileMUIInfo(
    dwFlags: {"kind":"UInt32"},
    pcwszFilePath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pFileMUIInfo: {"kind""Ptr","child":Windows.Win32.Intl.FILEMUIINFO},
    pcbFileMUIInfo: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetFileMUIPath(
    dwFlags: {"kind":"UInt32"},
    pcwszFilePath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszLanguage: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchLanguage: {"kind""Ptr","child":{"kind":"UInt32"}},
    pwszFileMUIPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchFileMUIPath: {"kind""Ptr","child":{"kind":"UInt32"}},
    pululEnumerator: {"kind""Ptr","child":{"kind":"UInt64"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetUILanguageInfo(
    dwFlags: {"kind":"UInt32"},
    pwmszLanguage: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszFallbackLanguages: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchFallbackLanguages: {"kind""Ptr","child":{"kind":"UInt32"}},
    pAttributes: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetThreadPreferredUILanguages2(
    flags: {"kind":"UInt32"},
    languages: {"kind""Ptr","child":{"kind":"UInt16"}},
    numLanguagesSet: {"kind""Ptr","child":{"kind":"UInt32"}},
    snapshot: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Intl.HSAVEDUILANGUAGES__}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn RestoreThreadPreferredUILanguages(
    snapshot: {"kind""Ptr","child":Windows.Win32.Intl.HSAVEDUILANGUAGES__},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn NotifyUILanguageChange(
    dwFlags: {"kind":"UInt32"},
    pcwstrNewLanguage: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcwstrPreviousLanguage: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwReserved: {"kind":"UInt32"},
    pdwStatusRtrn: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetStringTypeExA(
    Locale: {"kind":"UInt32"},
    dwInfoType: {"kind":"UInt32"},
    lpSrcStr: {"kind""Ptr","child":{"kind":"SByte"}},
    cchSrc: {"kind":"Int32"},
    lpCharType: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetStringTypeA(
    Locale: {"kind":"UInt32"},
    dwInfoType: {"kind":"UInt32"},
    lpSrcStr: {"kind""Ptr","child":{"kind":"SByte"}},
    cchSrc: {"kind":"Int32"},
    lpCharType: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FoldStringA(
    dwMapFlags: {"kind":"UInt32"},
    lpSrcStr: {"kind""Ptr","child":{"kind":"SByte"}},
    cchSrc: {"kind":"Int32"},
    lpDestStr: {"kind""Ptr","child":{"kind":"SByte"}},
    cchDest: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn EnumSystemLocalesA(
    lpLocaleEnumProc: Windows.Win32.Intl.LOCALE_ENUMPROCA,
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn EnumSystemLocalesW(
    lpLocaleEnumProc: Windows.Win32.Intl.LOCALE_ENUMPROCW,
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn EnumSystemLanguageGroupsA(
    lpLanguageGroupEnumProc: Windows.Win32.Intl.LANGUAGEGROUP_ENUMPROCA,
    dwFlags: {"kind":"UInt32"},
    lParam: {"kind":"IntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn EnumSystemLanguageGroupsW(
    lpLanguageGroupEnumProc: Windows.Win32.Intl.LANGUAGEGROUP_ENUMPROCW,
    dwFlags: {"kind":"UInt32"},
    lParam: {"kind":"IntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn EnumLanguageGroupLocalesA(
    lpLangGroupLocaleEnumProc: Windows.Win32.Intl.LANGGROUPLOCALE_ENUMPROCA,
    LanguageGroup: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    lParam: {"kind":"IntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn EnumLanguageGroupLocalesW(
    lpLangGroupLocaleEnumProc: Windows.Win32.Intl.LANGGROUPLOCALE_ENUMPROCW,
    LanguageGroup: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    lParam: {"kind":"IntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn EnumUILanguagesA(
    lpUILanguageEnumProc: Windows.Win32.Intl.UILANGUAGE_ENUMPROCA,
    dwFlags: {"kind":"UInt32"},
    lParam: {"kind":"IntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn EnumUILanguagesW(
    lpUILanguageEnumProc: Windows.Win32.Intl.UILANGUAGE_ENUMPROCW,
    dwFlags: {"kind":"UInt32"},
    lParam: {"kind":"IntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn EnumSystemCodePagesA(
    lpCodePageEnumProc: Windows.Win32.Intl.CODEPAGE_ENUMPROCA,
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn EnumSystemCodePagesW(
    lpCodePageEnumProc: Windows.Win32.Intl.CODEPAGE_ENUMPROCW,
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "NORMALIZ" fn IdnToAscii(
    dwFlags: {"kind":"UInt32"},
    lpUnicodeCharStr: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchUnicodeChar: {"kind":"Int32"},
    lpASCIICharStr: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchASCIIChar: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "NORMALIZ" fn IdnToUnicode(
    dwFlags: {"kind":"UInt32"},
    lpASCIICharStr: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchASCIIChar: {"kind":"Int32"},
    lpUnicodeCharStr: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchUnicodeChar: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn IdnToNameprepUnicode(
    dwFlags: {"kind":"UInt32"},
    lpUnicodeCharStr: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchUnicodeChar: {"kind":"Int32"},
    lpNameprepCharStr: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchNameprepChar: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn NormalizeString(
    NormForm: Windows.Win32.Intl.NORM_FORM,
    lpSrcString: {"kind""Ptr","child":{"kind":"UInt16"}},
    cwSrcLength: {"kind":"Int32"},
    lpDstString: {"kind""Ptr","child":{"kind":"UInt16"}},
    cwDstLength: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn IsNormalizedString(
    NormForm: Windows.Win32.Intl.NORM_FORM,
    lpString: {"kind""Ptr","child":{"kind":"UInt16"}},
    cwLength: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn VerifyScripts(
    dwFlags: {"kind":"UInt32"},
    lpLocaleScripts: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchLocaleScripts: {"kind":"Int32"},
    lpTestScripts: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchTestScripts: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetStringScripts(
    dwFlags: {"kind":"UInt32"},
    lpString: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchString: {"kind":"Int32"},
    lpScripts: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchScripts: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetLocaleInfoEx(
    lpLocaleName: {"kind""Ptr","child":{"kind":"UInt16"}},
    LCType: {"kind":"UInt32"},
    lpLCData: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchData: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetCalendarInfoEx(
    lpLocaleName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Calendar: {"kind":"UInt32"},
    lpReserved: {"kind""Ptr","child":{"kind":"UInt16"}},
    CalType: {"kind":"UInt32"},
    lpCalData: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchData: {"kind":"Int32"},
    lpValue: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetNumberFormatEx(
    lpLocaleName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    lpValue: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpFormat: {"kind""Ptr","child":Windows.Win32.Intl.NUMBERFMTW},
    lpNumberStr: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchNumber: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetCurrencyFormatEx(
    lpLocaleName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    lpValue: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpFormat: {"kind""Ptr","child":Windows.Win32.Intl.CURRENCYFMTW},
    lpCurrencyStr: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchCurrency: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetUserDefaultLocaleName(
    lpLocaleName: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchLocaleName: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetSystemDefaultLocaleName(
    lpLocaleName: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchLocaleName: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn IsNLSDefinedString(
    Function: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    lpVersionInformation: {"kind""Ptr","child":Windows.Win32.Intl.NLSVERSIONINFO},
    lpString: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchStr: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetNLSVersionEx(
    function: {"kind":"UInt32"},
    lpLocaleName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpVersionInformation: {"kind""Ptr","child":Windows.Win32.Intl.NLSVERSIONINFOEX},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn IsValidNLSVersion(
    function: {"kind":"UInt32"},
    lpLocaleName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpVersionInformation: {"kind""Ptr","child":Windows.Win32.Intl.NLSVERSIONINFOEX},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FindNLSStringEx(
    lpLocaleName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFindNLSStringFlags: {"kind":"UInt32"},
    lpStringSource: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchSource: {"kind":"Int32"},
    lpStringValue: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchValue: {"kind":"Int32"},
    pcchFound: {"kind""Ptr","child":{"kind":"Int32"}},
    lpVersionInformation: {"kind""Ptr","child":Windows.Win32.Intl.NLSVERSIONINFO},
    lpReserved: {"kind""Ptr","child":{"kind":"Void"}},
    sortHandle: Windows.Win32.WindowsAndMessaging.LPARAM,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn LCMapStringEx(
    lpLocaleName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwMapFlags: {"kind":"UInt32"},
    lpSrcStr: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchSrc: {"kind":"Int32"},
    lpDestStr: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchDest: {"kind":"Int32"},
    lpVersionInformation: {"kind""Ptr","child":Windows.Win32.Intl.NLSVERSIONINFO},
    lpReserved: {"kind""Ptr","child":{"kind":"Void"}},
    sortHandle: Windows.Win32.WindowsAndMessaging.LPARAM,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn IsValidLocaleName(
    lpLocaleName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn EnumCalendarInfoExEx(
    pCalInfoEnumProcExEx: Windows.Win32.Intl.CALINFO_ENUMPROCEXEX,
    lpLocaleName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Calendar: {"kind":"UInt32"},
    lpReserved: {"kind""Ptr","child":{"kind":"UInt16"}},
    CalType: {"kind":"UInt32"},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn EnumDateFormatsExEx(
    lpDateFmtEnumProcExEx: Windows.Win32.Intl.DATEFMT_ENUMPROCEXEX,
    lpLocaleName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn EnumTimeFormatsEx(
    lpTimeFmtEnumProcEx: Windows.Win32.Intl.TIMEFMT_ENUMPROCEX,
    lpLocaleName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn EnumSystemLocalesEx(
    lpLocaleEnumProcEx: Windows.Win32.Intl.LOCALE_ENUMPROCEX,
    dwFlags: {"kind":"UInt32"},
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,
    lpReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn ResolveLocaleName(
    lpNameToResolve: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpLocaleName: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchLocaleName: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmInstallIMEA(
    lpszIMEFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpszLayoutText: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmInstallIMEW(
    lpszIMEFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpszLayoutText: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmGetDefaultIMEWnd(
    param0: Windows.Win32.WindowsAndMessaging.HWND,

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmGetDescriptionA(
    param0: {"kind":"IntPtr"},
    lpszDescription: {"kind""Ptr","child":{"kind":"SByte"}},
    uBufLen: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmGetDescriptionW(
    param0: {"kind":"IntPtr"},
    lpszDescription: {"kind""Ptr","child":{"kind":"UInt16"}},
    uBufLen: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmGetIMEFileNameA(
    param0: {"kind":"IntPtr"},
    lpszFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    uBufLen: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmGetIMEFileNameW(
    param0: {"kind":"IntPtr"},
    lpszFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    uBufLen: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmGetProperty(
    param0: {"kind":"IntPtr"},
    param1: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmIsIME(
    param0: {"kind":"IntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmSimulateHotKey(
    param0: Windows.Win32.WindowsAndMessaging.HWND,
    param1: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmCreateContext(

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmDestroyContext(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmGetContext(
    param0: Windows.Win32.WindowsAndMessaging.HWND,

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmReleaseContext(
    param0: Windows.Win32.WindowsAndMessaging.HWND,
    param1: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmAssociateContext(
    param0: Windows.Win32.WindowsAndMessaging.HWND,
    param1: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmAssociateContextEx(
    param0: Windows.Win32.WindowsAndMessaging.HWND,
    param1: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},
    param2: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmGetCompositionStringA(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},
    param1: {"kind":"UInt32"},
    lpBuf: {"kind""Ptr","child":{"kind":"Void"}},
    dwBufLen: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmGetCompositionStringW(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},
    param1: {"kind":"UInt32"},
    lpBuf: {"kind""Ptr","child":{"kind":"Void"}},
    dwBufLen: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmSetCompositionStringA(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},
    dwIndex: {"kind":"UInt32"},
    lpComp: {"kind""Ptr","child":{"kind":"Void"}},
    dwCompLen: {"kind":"UInt32"},
    lpRead: {"kind""Ptr","child":{"kind":"Void"}},
    dwReadLen: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmSetCompositionStringW(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},
    dwIndex: {"kind":"UInt32"},
    lpComp: {"kind""Ptr","child":{"kind":"Void"}},
    dwCompLen: {"kind":"UInt32"},
    lpRead: {"kind""Ptr","child":{"kind":"Void"}},
    dwReadLen: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmGetCandidateListCountA(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},
    lpdwListCount: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmGetCandidateListCountW(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},
    lpdwListCount: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmGetCandidateListA(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},
    deIndex: {"kind":"UInt32"},
    lpCandList: {"kind""Ptr","child":Windows.Win32.Intl.CANDIDATELIST},
    dwBufLen: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmGetCandidateListW(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},
    deIndex: {"kind":"UInt32"},
    lpCandList: {"kind""Ptr","child":Windows.Win32.Intl.CANDIDATELIST},
    dwBufLen: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmGetGuideLineA(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},
    dwIndex: {"kind":"UInt32"},
    lpBuf: {"kind""Ptr","child":{"kind":"SByte"}},
    dwBufLen: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmGetGuideLineW(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},
    dwIndex: {"kind":"UInt32"},
    lpBuf: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwBufLen: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmGetConversionStatus(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},
    lpfdwConversion: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpfdwSentence: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmSetConversionStatus(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},
    param1: {"kind":"UInt32"},
    param2: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmGetOpenStatus(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmSetOpenStatus(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},
    param1: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmGetCompositionFontA(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},
    lplf: {"kind""Ptr","child":Windows.Win32.Shell.LOGFONTA},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmGetCompositionFontW(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},
    lplf: {"kind""Ptr","child":Windows.Win32.Shell.LOGFONTW},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmSetCompositionFontA(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},
    lplf: {"kind""Ptr","child":Windows.Win32.Shell.LOGFONTA},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmSetCompositionFontW(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},
    lplf: {"kind""Ptr","child":Windows.Win32.Shell.LOGFONTW},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmConfigureIMEA(
    param0: {"kind":"IntPtr"},
    param1: Windows.Win32.WindowsAndMessaging.HWND,
    param2: {"kind":"UInt32"},
    param3: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmConfigureIMEW(
    param0: {"kind":"IntPtr"},
    param1: Windows.Win32.WindowsAndMessaging.HWND,
    param2: {"kind":"UInt32"},
    param3: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmEscapeA(
    param0: {"kind":"IntPtr"},
    param1: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},
    param2: {"kind":"UInt32"},
    param3: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmEscapeW(
    param0: {"kind":"IntPtr"},
    param1: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},
    param2: {"kind":"UInt32"},
    param3: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmGetConversionListA(
    param0: {"kind":"IntPtr"},
    param1: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},
    lpSrc: {"kind""Ptr","child":{"kind":"SByte"}},
    lpDst: {"kind""Ptr","child":Windows.Win32.Intl.CANDIDATELIST},
    dwBufLen: {"kind":"UInt32"},
    uFlag: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmGetConversionListW(
    param0: {"kind":"IntPtr"},
    param1: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},
    lpSrc: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpDst: {"kind""Ptr","child":Windows.Win32.Intl.CANDIDATELIST},
    dwBufLen: {"kind":"UInt32"},
    uFlag: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmNotifyIME(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},
    dwAction: {"kind":"UInt32"},
    dwIndex: {"kind":"UInt32"},
    dwValue: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmGetStatusWindowPos(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},
    lpptPos: {"kind""Ptr","child":Windows.Win32.DisplayDevices.POINT},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmSetStatusWindowPos(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},
    lpptPos: {"kind""Ptr","child":Windows.Win32.DisplayDevices.POINT},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmGetCompositionWindow(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},
    lpCompForm: {"kind""Ptr","child":Windows.Win32.Intl.COMPOSITIONFORM},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmSetCompositionWindow(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},
    lpCompForm: {"kind""Ptr","child":Windows.Win32.Intl.COMPOSITIONFORM},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmGetCandidateWindow(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},
    param1: {"kind":"UInt32"},
    lpCandidate: {"kind""Ptr","child":Windows.Win32.Intl.CANDIDATEFORM},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmSetCandidateWindow(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},
    lpCandidate: {"kind""Ptr","child":Windows.Win32.Intl.CANDIDATEFORM},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmIsUIMessageA(
    param0: Windows.Win32.WindowsAndMessaging.HWND,
    param1: {"kind":"UInt32"},
    param2: Windows.Win32.WindowsAndMessaging.WPARAM,
    param3: Windows.Win32.WindowsAndMessaging.LPARAM,

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmIsUIMessageW(
    param0: Windows.Win32.WindowsAndMessaging.HWND,
    param1: {"kind":"UInt32"},
    param2: Windows.Win32.WindowsAndMessaging.WPARAM,
    param3: Windows.Win32.WindowsAndMessaging.LPARAM,

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmGetVirtualKey(
    param0: Windows.Win32.WindowsAndMessaging.HWND,

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmRegisterWordA(
    param0: {"kind":"IntPtr"},
    lpszReading: {"kind""Ptr","child":{"kind":"SByte"}},
    param2: {"kind":"UInt32"},
    lpszRegister: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmRegisterWordW(
    param0: {"kind":"IntPtr"},
    lpszReading: {"kind""Ptr","child":{"kind":"UInt16"}},
    param2: {"kind":"UInt32"},
    lpszRegister: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmUnregisterWordA(
    param0: {"kind":"IntPtr"},
    lpszReading: {"kind""Ptr","child":{"kind":"SByte"}},
    param2: {"kind":"UInt32"},
    lpszUnregister: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmUnregisterWordW(
    param0: {"kind":"IntPtr"},
    lpszReading: {"kind""Ptr","child":{"kind":"UInt16"}},
    param2: {"kind":"UInt32"},
    lpszUnregister: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmGetRegisterWordStyleA(
    param0: {"kind":"IntPtr"},
    nItem: {"kind":"UInt32"},
    lpStyleBuf: {"kind""Ptr","child":Windows.Win32.Intl.STYLEBUFA},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmGetRegisterWordStyleW(
    param0: {"kind":"IntPtr"},
    nItem: {"kind":"UInt32"},
    lpStyleBuf: {"kind""Ptr","child":Windows.Win32.Intl.STYLEBUFW},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmEnumRegisterWordA(
    param0: {"kind":"IntPtr"},
    param1: Windows.Win32.Intl.REGISTERWORDENUMPROCA,
    lpszReading: {"kind""Ptr","child":{"kind":"SByte"}},
    param3: {"kind":"UInt32"},
    lpszRegister: {"kind""Ptr","child":{"kind":"SByte"}},
    param5: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmEnumRegisterWordW(
    param0: {"kind":"IntPtr"},
    param1: Windows.Win32.Intl.REGISTERWORDENUMPROCW,
    lpszReading: {"kind""Ptr","child":{"kind":"UInt16"}},
    param3: {"kind":"UInt32"},
    lpszRegister: {"kind""Ptr","child":{"kind":"UInt16"}},
    param5: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmDisableIME(
    param0: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmEnumInputContext(
    idThread: {"kind":"UInt32"},
    lpfn: Windows.Win32.Intl.IMCENUMPROC,
    lParam: Windows.Win32.WindowsAndMessaging.LPARAM,

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmGetImeMenuItemsA(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},
    param1: {"kind":"UInt32"},
    param2: {"kind":"UInt32"},
    lpImeParentMenu: {"kind""Ptr","child":Windows.Win32.Intl.IMEMENUITEMINFOA},
    lpImeMenu: {"kind""Ptr","child":Windows.Win32.Intl.IMEMENUITEMINFOA},
    dwSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmGetImeMenuItemsW(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},
    param1: {"kind":"UInt32"},
    param2: {"kind":"UInt32"},
    lpImeParentMenu: {"kind""Ptr","child":Windows.Win32.Intl.IMEMENUITEMINFOW},
    lpImeMenu: {"kind""Ptr","child":Windows.Win32.Intl.IMEMENUITEMINFOW},
    dwSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmDisableTextFrameService(
    idThread: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmDisableLegacyIME(

// set_last_errror=False (can and should we use this?)
pub extern "elscore" fn MappingGetServices(
    pOptions: {"kind""Ptr","child":Windows.Win32.Intl.MAPPING_ENUM_OPTIONS},
    prgServices: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Intl.MAPPING_SERVICE_INFO}},
    pdwServicesCount: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "elscore" fn MappingFreeServices(
    pServiceInfo: {"kind""Ptr","child":Windows.Win32.Intl.MAPPING_SERVICE_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "elscore" fn MappingRecognizeText(
    pServiceInfo: {"kind""Ptr","child":Windows.Win32.Intl.MAPPING_SERVICE_INFO},
    pszText: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwLength: {"kind":"UInt32"},
    dwIndex: {"kind":"UInt32"},
    pOptions: {"kind""Ptr","child":Windows.Win32.Intl.MAPPING_OPTIONS},
    pbag: {"kind""Ptr","child":Windows.Win32.Intl.MAPPING_PROPERTY_BAG},

// set_last_errror=False (can and should we use this?)
pub extern "elscore" fn MappingDoAction(
    pBag: {"kind""Ptr","child":Windows.Win32.Intl.MAPPING_PROPERTY_BAG},
    dwRangeIndex: {"kind":"UInt32"},
    pszActionId: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "elscore" fn MappingFreePropertyBag(
    pBag: {"kind""Ptr","child":Windows.Win32.Intl.MAPPING_PROPERTY_BAG},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmGetHotKey(
    param0: {"kind":"UInt32"},
    lpuModifiers: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpuVKey: {"kind""Ptr","child":{"kind":"UInt32"}},
    phKL: {"kind""Ptr","child":{"kind":"IntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmSetHotKey(
    param0: {"kind":"UInt32"},
    param1: {"kind":"UInt32"},
    param2: {"kind":"UInt32"},
    param3: {"kind":"IntPtr"},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmGenerateMessage(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmRequestMessageA(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},
    param1: Windows.Win32.WindowsAndMessaging.WPARAM,
    param2: Windows.Win32.WindowsAndMessaging.LPARAM,

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmRequestMessageW(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},
    param1: Windows.Win32.WindowsAndMessaging.WPARAM,
    param2: Windows.Win32.WindowsAndMessaging.LPARAM,

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmCreateSoftKeyboard(
    param0: {"kind":"UInt32"},
    param1: Windows.Win32.WindowsAndMessaging.HWND,
    param2: {"kind":"Int32"},
    param3: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmDestroySoftKeyboard(
    param0: Windows.Win32.WindowsAndMessaging.HWND,

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmShowSoftKeyboard(
    param0: Windows.Win32.WindowsAndMessaging.HWND,
    param1: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmLockIMC(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmUnlockIMC(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmGetIMCLockCount(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMC__},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmCreateIMCC(
    param0: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmDestroyIMCC(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMCC__},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmLockIMCC(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMCC__},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmUnlockIMCC(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMCC__},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmGetIMCCLockCount(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMCC__},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmReSizeIMCC(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMCC__},
    param1: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "IMM32" fn ImmGetIMCCSize(
    param0: {"kind""Ptr","child":Windows.Win32.Intl.HIMCC__},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptFreeCache(
    psc: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptItemize(
    pwcInChars: {"kind""Ptr","child":{"kind":"UInt16"}},
    cInChars: {"kind":"Int32"},
    cMaxItems: {"kind":"Int32"},
    psControl: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_CONTROL},
    psState: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_STATE},
    pItems: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_ITEM},
    pcItems: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptLayout(
    cRuns: {"kind":"Int32"},
    pbLevel: {"kind""Ptr","child":{"kind":"Byte"}},
    piVisualToLogical: {"kind""Ptr","child":{"kind":"Int32"}},
    piLogicalToVisual: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptShape(
    hdc: Windows.Win32.Gdi.HDC,
    psc: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pwcChars: {"kind""Ptr","child":{"kind":"UInt16"}},
    cChars: {"kind":"Int32"},
    cMaxGlyphs: {"kind":"Int32"},
    psa: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_ANALYSIS},
    pwOutGlyphs: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwLogClust: {"kind""Ptr","child":{"kind":"UInt16"}},
    psva: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_VISATTR},
    pcGlyphs: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptPlace(
    hdc: Windows.Win32.Gdi.HDC,
    psc: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pwGlyphs: {"kind""Ptr","child":{"kind":"UInt16"}},
    cGlyphs: {"kind":"Int32"},
    psva: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_VISATTR},
    psa: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_ANALYSIS},
    piAdvance: {"kind""Ptr","child":{"kind":"Int32"}},
    pGoffset: {"kind""Ptr","child":Windows.Win32.Intl.GOFFSET},
    pABC: {"kind""Ptr","child":Windows.Win32.Gdi.ABC},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptTextOut(
    hdc: {"kind":"IntPtr"},
    psc: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    x: {"kind":"Int32"},
    y: {"kind":"Int32"},
    fuOptions: {"kind":"UInt32"},
    lprc: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    psa: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_ANALYSIS},
    pwcReserved: {"kind""Ptr","child":{"kind":"UInt16"}},
    iReserved: {"kind":"Int32"},
    pwGlyphs: {"kind""Ptr","child":{"kind":"UInt16"}},
    cGlyphs: {"kind":"Int32"},
    piAdvance: {"kind""Ptr","child":{"kind":"Int32"}},
    piJustify: {"kind""Ptr","child":{"kind":"Int32"}},
    pGoffset: {"kind""Ptr","child":Windows.Win32.Intl.GOFFSET},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptJustify(
    psva: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_VISATTR},
    piAdvance: {"kind""Ptr","child":{"kind":"Int32"}},
    cGlyphs: {"kind":"Int32"},
    iDx: {"kind":"Int32"},
    iMinKashida: {"kind":"Int32"},
    piJustify: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptBreak(
    pwcChars: {"kind""Ptr","child":{"kind":"UInt16"}},
    cChars: {"kind":"Int32"},
    psa: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_ANALYSIS},
    psla: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_LOGATTR},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptCPtoX(
    iCP: {"kind":"Int32"},
    fTrailing: Windows.Win32.SystemServices.BOOL,
    cChars: {"kind":"Int32"},
    cGlyphs: {"kind":"Int32"},
    pwLogClust: {"kind""Ptr","child":{"kind":"UInt16"}},
    psva: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_VISATTR},
    piAdvance: {"kind""Ptr","child":{"kind":"Int32"}},
    psa: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_ANALYSIS},
    piX: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptXtoCP(
    iX: {"kind":"Int32"},
    cChars: {"kind":"Int32"},
    cGlyphs: {"kind":"Int32"},
    pwLogClust: {"kind""Ptr","child":{"kind":"UInt16"}},
    psva: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_VISATTR},
    piAdvance: {"kind""Ptr","child":{"kind":"Int32"}},
    psa: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_ANALYSIS},
    piCP: {"kind""Ptr","child":{"kind":"Int32"}},
    piTrailing: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptGetLogicalWidths(
    psa: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_ANALYSIS},
    cChars: {"kind":"Int32"},
    cGlyphs: {"kind":"Int32"},
    piGlyphWidth: {"kind""Ptr","child":{"kind":"Int32"}},
    pwLogClust: {"kind""Ptr","child":{"kind":"UInt16"}},
    psva: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_VISATTR},
    piDx: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptApplyLogicalWidth(
    piDx: {"kind""Ptr","child":{"kind":"Int32"}},
    cChars: {"kind":"Int32"},
    cGlyphs: {"kind":"Int32"},
    pwLogClust: {"kind""Ptr","child":{"kind":"UInt16"}},
    psva: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_VISATTR},
    piAdvance: {"kind""Ptr","child":{"kind":"Int32"}},
    psa: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_ANALYSIS},
    pABC: {"kind""Ptr","child":Windows.Win32.Gdi.ABC},
    piJustify: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptGetCMap(
    hdc: Windows.Win32.Gdi.HDC,
    psc: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pwcInChars: {"kind""Ptr","child":{"kind":"UInt16"}},
    cChars: {"kind":"Int32"},
    dwFlags: {"kind":"UInt32"},
    pwOutGlyphs: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptGetGlyphABCWidth(
    hdc: Windows.Win32.Gdi.HDC,
    psc: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    wGlyph: {"kind":"UInt16"},
    pABC: {"kind""Ptr","child":Windows.Win32.Gdi.ABC},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptGetProperties(
    ppSp: {"kind""Ptr","child":{"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_PROPERTIES}}},
    piNumScripts: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptGetFontProperties(
    hdc: Windows.Win32.Gdi.HDC,
    psc: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    sfp: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_FONTPROPERTIES},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptCacheGetHeight(
    hdc: Windows.Win32.Gdi.HDC,
    psc: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    tmHeight: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptStringAnalyse(
    hdc: Windows.Win32.Gdi.HDC,
    pString: {"kind""Ptr","child":{"kind":"Void"}},
    cString: {"kind":"Int32"},
    cGlyphs: {"kind":"Int32"},
    iCharset: {"kind":"Int32"},
    dwFlags: {"kind":"UInt32"},
    iReqWidth: {"kind":"Int32"},
    psControl: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_CONTROL},
    psState: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_STATE},
    piDx: {"kind""Ptr","child":{"kind":"Int32"}},
    pTabdef: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_TABDEF},
    pbInClass: {"kind""Ptr","child":{"kind":"Byte"}},
    pssa: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptStringFree(
    pssa: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptString_pSize(
    ssa: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptString_pcOutChars(
    ssa: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptString_pLogAttr(
    ssa: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptStringGetOrder(
    ssa: {"kind""Ptr","child":{"kind":"Void"}},
    puOrder: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptStringCPtoX(
    ssa: {"kind""Ptr","child":{"kind":"Void"}},
    icp: {"kind":"Int32"},
    fTrailing: Windows.Win32.SystemServices.BOOL,
    pX: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptStringXtoCP(
    ssa: {"kind""Ptr","child":{"kind":"Void"}},
    iX: {"kind":"Int32"},
    piCh: {"kind""Ptr","child":{"kind":"Int32"}},
    piTrailing: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptStringGetLogicalWidths(
    ssa: {"kind""Ptr","child":{"kind":"Void"}},
    piDx: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptStringValidate(
    ssa: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptStringOut(
    ssa: {"kind""Ptr","child":{"kind":"Void"}},
    iX: {"kind":"Int32"},
    iY: {"kind":"Int32"},
    uOptions: {"kind":"UInt32"},
    prc: {"kind""Ptr","child":Windows.Win32.DisplayDevices.RECT},
    iMinSel: {"kind":"Int32"},
    iMaxSel: {"kind":"Int32"},
    fDisabled: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptIsComplex(
    pwcInChars: {"kind""Ptr","child":{"kind":"UInt16"}},
    cInChars: {"kind":"Int32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptRecordDigitSubstitution(
    Locale: {"kind":"UInt32"},
    psds: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_DIGITSUBSTITUTE},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptApplyDigitSubstitution(
    psds: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_DIGITSUBSTITUTE},
    psc: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_CONTROL},
    pss: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_STATE},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptShapeOpenType(
    hdc: Windows.Win32.Gdi.HDC,
    psc: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    psa: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_ANALYSIS},
    tagScript: {"kind":"UInt32"},
    tagLangSys: {"kind":"UInt32"},
    rcRangeChars: {"kind""Ptr","child":{"kind":"Int32"}},
    rpRangeProperties: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Intl.textrange_properties}},
    cRanges: {"kind":"Int32"},
    pwcChars: {"kind""Ptr","child":{"kind":"UInt16"}},
    cChars: {"kind":"Int32"},
    cMaxGlyphs: {"kind":"Int32"},
    pwLogClust: {"kind""Ptr","child":{"kind":"UInt16"}},
    pCharProps: {"kind""Ptr","child":Windows.Win32.Intl.script_charprop},
    pwOutGlyphs: {"kind""Ptr","child":{"kind":"UInt16"}},
    pOutGlyphProps: {"kind""Ptr","child":Windows.Win32.Intl.script_glyphprop},
    pcGlyphs: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptPlaceOpenType(
    hdc: Windows.Win32.Gdi.HDC,
    psc: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    psa: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_ANALYSIS},
    tagScript: {"kind":"UInt32"},
    tagLangSys: {"kind":"UInt32"},
    rcRangeChars: {"kind""Ptr","child":{"kind":"Int32"}},
    rpRangeProperties: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Intl.textrange_properties}},
    cRanges: {"kind":"Int32"},
    pwcChars: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwLogClust: {"kind""Ptr","child":{"kind":"UInt16"}},
    pCharProps: {"kind""Ptr","child":Windows.Win32.Intl.script_charprop},
    cChars: {"kind":"Int32"},
    pwGlyphs: {"kind""Ptr","child":{"kind":"UInt16"}},
    pGlyphProps: {"kind""Ptr","child":Windows.Win32.Intl.script_glyphprop},
    cGlyphs: {"kind":"Int32"},
    piAdvance: {"kind""Ptr","child":{"kind":"Int32"}},
    pGoffset: {"kind""Ptr","child":Windows.Win32.Intl.GOFFSET},
    pABC: {"kind""Ptr","child":Windows.Win32.Gdi.ABC},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptItemizeOpenType(
    pwcInChars: {"kind""Ptr","child":{"kind":"UInt16"}},
    cInChars: {"kind":"Int32"},
    cMaxItems: {"kind":"Int32"},
    psControl: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_CONTROL},
    psState: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_STATE},
    pItems: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_ITEM},
    pScriptTags: {"kind""Ptr","child":{"kind":"UInt32"}},
    pcItems: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptGetFontScriptTags(
    hdc: Windows.Win32.Gdi.HDC,
    psc: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    psa: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_ANALYSIS},
    cMaxTags: {"kind":"Int32"},
    pScriptTags: {"kind""Ptr","child":{"kind":"UInt32"}},
    pcTags: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptGetFontLanguageTags(
    hdc: Windows.Win32.Gdi.HDC,
    psc: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    psa: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_ANALYSIS},
    tagScript: {"kind":"UInt32"},
    cMaxTags: {"kind":"Int32"},
    pLangsysTags: {"kind""Ptr","child":{"kind":"UInt32"}},
    pcTags: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptGetFontFeatureTags(
    hdc: Windows.Win32.Gdi.HDC,
    psc: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    psa: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_ANALYSIS},
    tagScript: {"kind":"UInt32"},
    tagLangSys: {"kind":"UInt32"},
    cMaxTags: {"kind":"Int32"},
    pFeatureTags: {"kind""Ptr","child":{"kind":"UInt32"}},
    pcTags: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptGetFontAlternateGlyphs(
    hdc: Windows.Win32.Gdi.HDC,
    psc: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    psa: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_ANALYSIS},
    tagScript: {"kind":"UInt32"},
    tagLangSys: {"kind":"UInt32"},
    tagFeature: {"kind":"UInt32"},
    wGlyphId: {"kind":"UInt16"},
    cMaxAlternates: {"kind":"Int32"},
    pAlternateGlyphs: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcAlternates: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptSubstituteSingleGlyph(
    hdc: Windows.Win32.Gdi.HDC,
    psc: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    psa: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_ANALYSIS},
    tagScript: {"kind":"UInt32"},
    tagLangSys: {"kind":"UInt32"},
    tagFeature: {"kind":"UInt32"},
    lParameter: {"kind":"Int32"},
    wGlyphId: {"kind":"UInt16"},
    pwOutGlyphId: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "USP10" fn ScriptPositionSingleGlyph(
    hdc: Windows.Win32.Gdi.HDC,
    psc: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    psa: {"kind""Ptr","child":Windows.Win32.Intl.SCRIPT_ANALYSIS},
    tagScript: {"kind":"UInt32"},
    tagLangSys: {"kind":"UInt32"},
    tagFeature: {"kind":"UInt32"},
    lParameter: {"kind":"Int32"},
    wGlyphId: {"kind":"UInt16"},
    iAdvance: {"kind":"Int32"},
    GOffset: Windows.Win32.Intl.GOFFSET,
    piOutAdvance: {"kind""Ptr","child":{"kind":"Int32"}},
    pOutGoffset: {"kind""Ptr","child":Windows.Win32.Intl.GOFFSET},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utf8_nextCharSafeBody(
    s: {"kind""Ptr","child":{"kind":"Byte"}},
    pi: {"kind""Ptr","child":{"kind":"Int32"}},
    length: {"kind":"Int32"},
    c: {"kind":"Int32"},
    strict: {"kind":"SByte"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utf8_appendCharSafeBody(
    s: {"kind""Ptr","child":{"kind":"Byte"}},
    i: {"kind":"Int32"},
    length: {"kind":"Int32"},
    c: {"kind":"Int32"},
    pIsError: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utf8_prevCharSafeBody(
    s: {"kind""Ptr","child":{"kind":"Byte"}},
    start: {"kind":"Int32"},
    pi: {"kind""Ptr","child":{"kind":"Int32"}},
    c: {"kind":"Int32"},
    strict: {"kind":"SByte"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utf8_back1SafeBody(
    s: {"kind""Ptr","child":{"kind":"Byte"}},
    start: {"kind":"Int32"},
    i: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_versionFromString(
    versionArray: {"kind""Ptr","child":{"kind":"Byte"}},
    versionString: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_versionFromUString(
    versionArray: {"kind""Ptr","child":{"kind":"Byte"}},
    versionString: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_versionToString(
    versionArray: {"kind""Ptr","child":{"kind":"Byte"}},
    versionString: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_getVersion(
    versionArray: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_errorName(
    code: Windows.Win32.Intl.UErrorCode,

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utrace_setLevel(
    traceLevel: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utrace_getLevel(

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utrace_setFunctions(
    context: {"kind""Ptr","child":{"kind":"Void"}},
    e: {"kind""Ptr","child":Windows.Win32.Intl.UTraceEntry},
    x: {"kind""Ptr","child":Windows.Win32.Intl.UTraceExit},
    d: {"kind""Ptr","child":Windows.Win32.Intl.UTraceData},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utrace_getFunctions(
    context: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    e: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Intl.UTraceEntry}},
    x: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Intl.UTraceExit}},
    d: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Intl.UTraceData}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utrace_vformat(
    outBuf: {"kind""Ptr","child":{"kind":"SByte"}},
    capacity: {"kind":"Int32"},
    indent: {"kind":"Int32"},
    fmt: {"kind""Ptr","child":{"kind":"SByte"}},
    args: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utrace_format(
    outBuf: {"kind""Ptr","child":{"kind":"SByte"}},
    capacity: {"kind":"Int32"},
    indent: {"kind":"Int32"},
    fmt: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utrace_functionName(
    fnNumber: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_shapeArabic(
    source: {"kind""Ptr","child":{"kind":"UInt16"}},
    sourceLength: {"kind":"Int32"},
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    destSize: {"kind":"Int32"},
    options: {"kind":"UInt32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uscript_getCode(
    nameOrAbbrOrLocale: {"kind""Ptr","child":{"kind":"SByte"}},
    fillIn: {"kind""Ptr","child":Windows.Win32.Intl.UScriptCode},
    capacity: {"kind":"Int32"},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uscript_getName(
    scriptCode: Windows.Win32.Intl.UScriptCode,

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uscript_getShortName(
    scriptCode: Windows.Win32.Intl.UScriptCode,

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uscript_getScript(
    codepoint: {"kind":"Int32"},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uscript_hasScript(
    c: {"kind":"Int32"},
    sc: Windows.Win32.Intl.UScriptCode,

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uscript_getScriptExtensions(
    c: {"kind":"Int32"},
    scripts: {"kind""Ptr","child":Windows.Win32.Intl.UScriptCode},
    capacity: {"kind":"Int32"},
    errorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uscript_getSampleString(
    script: Windows.Win32.Intl.UScriptCode,
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    capacity: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uscript_getUsage(
    script: Windows.Win32.Intl.UScriptCode,

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uscript_isRightToLeft(
    script: Windows.Win32.Intl.UScriptCode,

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uscript_breaksBetweenLetters(
    script: Windows.Win32.Intl.UScriptCode,

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uscript_isCased(
    script: Windows.Win32.Intl.UScriptCode,

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uiter_current32(
    iter: {"kind""Ptr","child":Windows.Win32.Intl.UCharIterator},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uiter_next32(
    iter: {"kind""Ptr","child":Windows.Win32.Intl.UCharIterator},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uiter_previous32(
    iter: {"kind""Ptr","child":Windows.Win32.Intl.UCharIterator},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uiter_getState(
    iter: {"kind""Ptr","child":Windows.Win32.Intl.UCharIterator},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uiter_setState(
    iter: {"kind""Ptr","child":Windows.Win32.Intl.UCharIterator},
    state: {"kind":"UInt32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uiter_setString(
    iter: {"kind""Ptr","child":Windows.Win32.Intl.UCharIterator},
    s: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uiter_setUTF16BE(
    iter: {"kind""Ptr","child":Windows.Win32.Intl.UCharIterator},
    s: {"kind""Ptr","child":{"kind":"SByte"}},
    length: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uiter_setUTF8(
    iter: {"kind""Ptr","child":Windows.Win32.Intl.UCharIterator},
    s: {"kind""Ptr","child":{"kind":"SByte"}},
    length: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uenum_close(
    en: {"kind""Ptr","child":Windows.Win32.Intl.UEnumeration},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uenum_count(
    en: {"kind""Ptr","child":Windows.Win32.Intl.UEnumeration},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uenum_unext(
    en: {"kind""Ptr","child":Windows.Win32.Intl.UEnumeration},
    resultLength: {"kind""Ptr","child":{"kind":"Int32"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uenum_next(
    en: {"kind""Ptr","child":Windows.Win32.Intl.UEnumeration},
    resultLength: {"kind""Ptr","child":{"kind":"Int32"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uenum_reset(
    en: {"kind""Ptr","child":Windows.Win32.Intl.UEnumeration},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uenum_openUCharStringsEnumeration(
    strings: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    count: {"kind":"Int32"},
    ec: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uenum_openCharStringsEnumeration(
    strings: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},
    count: {"kind":"Int32"},
    ec: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_getDefault(

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_setDefault(
    localeID: {"kind""Ptr","child":{"kind":"SByte"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_getLanguage(
    localeID: {"kind""Ptr","child":{"kind":"SByte"}},
    language: {"kind""Ptr","child":{"kind":"SByte"}},
    languageCapacity: {"kind":"Int32"},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_getScript(
    localeID: {"kind""Ptr","child":{"kind":"SByte"}},
    script: {"kind""Ptr","child":{"kind":"SByte"}},
    scriptCapacity: {"kind":"Int32"},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_getCountry(
    localeID: {"kind""Ptr","child":{"kind":"SByte"}},
    country: {"kind""Ptr","child":{"kind":"SByte"}},
    countryCapacity: {"kind":"Int32"},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_getVariant(
    localeID: {"kind""Ptr","child":{"kind":"SByte"}},
    variant: {"kind""Ptr","child":{"kind":"SByte"}},
    variantCapacity: {"kind":"Int32"},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_getName(
    localeID: {"kind""Ptr","child":{"kind":"SByte"}},
    name: {"kind""Ptr","child":{"kind":"SByte"}},
    nameCapacity: {"kind":"Int32"},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_canonicalize(
    localeID: {"kind""Ptr","child":{"kind":"SByte"}},
    name: {"kind""Ptr","child":{"kind":"SByte"}},
    nameCapacity: {"kind":"Int32"},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_getISO3Language(
    localeID: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_getISO3Country(
    localeID: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_getLCID(
    localeID: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_getDisplayLanguage(
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    displayLocale: {"kind""Ptr","child":{"kind":"SByte"}},
    language: {"kind""Ptr","child":{"kind":"UInt16"}},
    languageCapacity: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_getDisplayScript(
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    displayLocale: {"kind""Ptr","child":{"kind":"SByte"}},
    script: {"kind""Ptr","child":{"kind":"UInt16"}},
    scriptCapacity: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_getDisplayCountry(
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    displayLocale: {"kind""Ptr","child":{"kind":"SByte"}},
    country: {"kind""Ptr","child":{"kind":"UInt16"}},
    countryCapacity: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_getDisplayVariant(
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    displayLocale: {"kind""Ptr","child":{"kind":"SByte"}},
    variant: {"kind""Ptr","child":{"kind":"UInt16"}},
    variantCapacity: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_getDisplayKeyword(
    keyword: {"kind""Ptr","child":{"kind":"SByte"}},
    displayLocale: {"kind""Ptr","child":{"kind":"SByte"}},
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    destCapacity: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_getDisplayKeywordValue(
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    keyword: {"kind""Ptr","child":{"kind":"SByte"}},
    displayLocale: {"kind""Ptr","child":{"kind":"SByte"}},
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    destCapacity: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_getDisplayName(
    localeID: {"kind""Ptr","child":{"kind":"SByte"}},
    inLocaleID: {"kind""Ptr","child":{"kind":"SByte"}},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    maxResultSize: {"kind":"Int32"},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_getAvailable(
    n: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_countAvailable(

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_getISOLanguages(

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_getISOCountries(

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_getParent(
    localeID: {"kind""Ptr","child":{"kind":"SByte"}},
    parent: {"kind""Ptr","child":{"kind":"SByte"}},
    parentCapacity: {"kind":"Int32"},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_getBaseName(
    localeID: {"kind""Ptr","child":{"kind":"SByte"}},
    name: {"kind""Ptr","child":{"kind":"SByte"}},
    nameCapacity: {"kind":"Int32"},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_openKeywords(
    localeID: {"kind""Ptr","child":{"kind":"SByte"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_getKeywordValue(
    localeID: {"kind""Ptr","child":{"kind":"SByte"}},
    keywordName: {"kind""Ptr","child":{"kind":"SByte"}},
    buffer: {"kind""Ptr","child":{"kind":"SByte"}},
    bufferCapacity: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_setKeywordValue(
    keywordName: {"kind""Ptr","child":{"kind":"SByte"}},
    keywordValue: {"kind""Ptr","child":{"kind":"SByte"}},
    buffer: {"kind""Ptr","child":{"kind":"SByte"}},
    bufferCapacity: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_isRightToLeft(
    locale: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_getCharacterOrientation(
    localeId: {"kind""Ptr","child":{"kind":"SByte"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_getLineOrientation(
    localeId: {"kind""Ptr","child":{"kind":"SByte"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_acceptLanguageFromHTTP(
    result: {"kind""Ptr","child":{"kind":"SByte"}},
    resultAvailable: {"kind":"Int32"},
    outResult: {"kind""Ptr","child":Windows.Win32.Intl.UAcceptResult},
    httpAcceptLanguage: {"kind""Ptr","child":{"kind":"SByte"}},
    availableLocales: {"kind""Ptr","child":Windows.Win32.Intl.UEnumeration},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_acceptLanguage(
    result: {"kind""Ptr","child":{"kind":"SByte"}},
    resultAvailable: {"kind":"Int32"},
    outResult: {"kind""Ptr","child":Windows.Win32.Intl.UAcceptResult},
    acceptList: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},
    acceptListCount: {"kind":"Int32"},
    availableLocales: {"kind""Ptr","child":Windows.Win32.Intl.UEnumeration},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_getLocaleForLCID(
    hostID: {"kind":"UInt32"},
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    localeCapacity: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_addLikelySubtags(
    localeID: {"kind""Ptr","child":{"kind":"SByte"}},
    maximizedLocaleID: {"kind""Ptr","child":{"kind":"SByte"}},
    maximizedLocaleIDCapacity: {"kind":"Int32"},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_minimizeSubtags(
    localeID: {"kind""Ptr","child":{"kind":"SByte"}},
    minimizedLocaleID: {"kind""Ptr","child":{"kind":"SByte"}},
    minimizedLocaleIDCapacity: {"kind":"Int32"},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_forLanguageTag(
    langtag: {"kind""Ptr","child":{"kind":"SByte"}},
    localeID: {"kind""Ptr","child":{"kind":"SByte"}},
    localeIDCapacity: {"kind":"Int32"},
    parsedLength: {"kind""Ptr","child":{"kind":"Int32"}},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_toLanguageTag(
    localeID: {"kind""Ptr","child":{"kind":"SByte"}},
    langtag: {"kind""Ptr","child":{"kind":"SByte"}},
    langtagCapacity: {"kind":"Int32"},
    strict: {"kind":"SByte"},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_toUnicodeLocaleKey(
    keyword: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_toUnicodeLocaleType(
    keyword: {"kind""Ptr","child":{"kind":"SByte"}},
    value: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_toLegacyKey(
    keyword: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uloc_toLegacyType(
    keyword: {"kind""Ptr","child":{"kind":"SByte"}},
    value: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ures_open(
    packageName: {"kind""Ptr","child":{"kind":"SByte"}},
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ures_openDirect(
    packageName: {"kind""Ptr","child":{"kind":"SByte"}},
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ures_openU(
    packageName: {"kind""Ptr","child":{"kind":"UInt16"}},
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ures_close(
    resourceBundle: {"kind""Ptr","child":Windows.Win32.Intl.UResourceBundle},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ures_getVersion(
    resB: {"kind""Ptr","child":Windows.Win32.Intl.UResourceBundle},
    versionInfo: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ures_getLocaleByType(
    resourceBundle: {"kind""Ptr","child":Windows.Win32.Intl.UResourceBundle},
    type: Windows.Win32.Intl.ULocDataLocaleType,
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ures_getString(
    resourceBundle: {"kind""Ptr","child":Windows.Win32.Intl.UResourceBundle},
    len: {"kind""Ptr","child":{"kind":"Int32"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ures_getUTF8String(
    resB: {"kind""Ptr","child":Windows.Win32.Intl.UResourceBundle},
    dest: {"kind""Ptr","child":{"kind":"SByte"}},
    length: {"kind""Ptr","child":{"kind":"Int32"}},
    forceCopy: {"kind":"SByte"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ures_getBinary(
    resourceBundle: {"kind""Ptr","child":Windows.Win32.Intl.UResourceBundle},
    len: {"kind""Ptr","child":{"kind":"Int32"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ures_getIntVector(
    resourceBundle: {"kind""Ptr","child":Windows.Win32.Intl.UResourceBundle},
    len: {"kind""Ptr","child":{"kind":"Int32"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ures_getUInt(
    resourceBundle: {"kind""Ptr","child":Windows.Win32.Intl.UResourceBundle},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ures_getInt(
    resourceBundle: {"kind""Ptr","child":Windows.Win32.Intl.UResourceBundle},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ures_getSize(
    resourceBundle: {"kind""Ptr","child":Windows.Win32.Intl.UResourceBundle},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ures_getType(
    resourceBundle: {"kind""Ptr","child":Windows.Win32.Intl.UResourceBundle},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ures_getKey(
    resourceBundle: {"kind""Ptr","child":Windows.Win32.Intl.UResourceBundle},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ures_resetIterator(
    resourceBundle: {"kind""Ptr","child":Windows.Win32.Intl.UResourceBundle},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ures_hasNext(
    resourceBundle: {"kind""Ptr","child":Windows.Win32.Intl.UResourceBundle},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ures_getNextResource(
    resourceBundle: {"kind""Ptr","child":Windows.Win32.Intl.UResourceBundle},
    fillIn: {"kind""Ptr","child":Windows.Win32.Intl.UResourceBundle},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ures_getNextString(
    resourceBundle: {"kind""Ptr","child":Windows.Win32.Intl.UResourceBundle},
    len: {"kind""Ptr","child":{"kind":"Int32"}},
    key: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ures_getByIndex(
    resourceBundle: {"kind""Ptr","child":Windows.Win32.Intl.UResourceBundle},
    indexR: {"kind":"Int32"},
    fillIn: {"kind""Ptr","child":Windows.Win32.Intl.UResourceBundle},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ures_getStringByIndex(
    resourceBundle: {"kind""Ptr","child":Windows.Win32.Intl.UResourceBundle},
    indexS: {"kind":"Int32"},
    len: {"kind""Ptr","child":{"kind":"Int32"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ures_getUTF8StringByIndex(
    resB: {"kind""Ptr","child":Windows.Win32.Intl.UResourceBundle},
    stringIndex: {"kind":"Int32"},
    dest: {"kind""Ptr","child":{"kind":"SByte"}},
    pLength: {"kind""Ptr","child":{"kind":"Int32"}},
    forceCopy: {"kind":"SByte"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ures_getByKey(
    resourceBundle: {"kind""Ptr","child":Windows.Win32.Intl.UResourceBundle},
    key: {"kind""Ptr","child":{"kind":"SByte"}},
    fillIn: {"kind""Ptr","child":Windows.Win32.Intl.UResourceBundle},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ures_getStringByKey(
    resB: {"kind""Ptr","child":Windows.Win32.Intl.UResourceBundle},
    key: {"kind""Ptr","child":{"kind":"SByte"}},
    len: {"kind""Ptr","child":{"kind":"Int32"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ures_getUTF8StringByKey(
    resB: {"kind""Ptr","child":Windows.Win32.Intl.UResourceBundle},
    key: {"kind""Ptr","child":{"kind":"SByte"}},
    dest: {"kind""Ptr","child":{"kind":"SByte"}},
    pLength: {"kind""Ptr","child":{"kind":"Int32"}},
    forceCopy: {"kind":"SByte"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ures_openAvailableLocales(
    packageName: {"kind""Ptr","child":{"kind":"SByte"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uldn_open(
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    dialectHandling: Windows.Win32.Intl.UDialectHandling,
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uldn_close(
    ldn: {"kind""Ptr","child":Windows.Win32.Intl.ULocaleDisplayNames},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uldn_getLocale(
    ldn: {"kind""Ptr","child":Windows.Win32.Intl.ULocaleDisplayNames},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uldn_getDialectHandling(
    ldn: {"kind""Ptr","child":Windows.Win32.Intl.ULocaleDisplayNames},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uldn_localeDisplayName(
    ldn: {"kind""Ptr","child":Windows.Win32.Intl.ULocaleDisplayNames},
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    maxResultSize: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uldn_languageDisplayName(
    ldn: {"kind""Ptr","child":Windows.Win32.Intl.ULocaleDisplayNames},
    lang: {"kind""Ptr","child":{"kind":"SByte"}},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    maxResultSize: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uldn_scriptDisplayName(
    ldn: {"kind""Ptr","child":Windows.Win32.Intl.ULocaleDisplayNames},
    script: {"kind""Ptr","child":{"kind":"SByte"}},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    maxResultSize: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uldn_scriptCodeDisplayName(
    ldn: {"kind""Ptr","child":Windows.Win32.Intl.ULocaleDisplayNames},
    scriptCode: Windows.Win32.Intl.UScriptCode,
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    maxResultSize: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uldn_regionDisplayName(
    ldn: {"kind""Ptr","child":Windows.Win32.Intl.ULocaleDisplayNames},
    region: {"kind""Ptr","child":{"kind":"SByte"}},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    maxResultSize: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uldn_variantDisplayName(
    ldn: {"kind""Ptr","child":Windows.Win32.Intl.ULocaleDisplayNames},
    variant: {"kind""Ptr","child":{"kind":"SByte"}},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    maxResultSize: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uldn_keyDisplayName(
    ldn: {"kind""Ptr","child":Windows.Win32.Intl.ULocaleDisplayNames},
    key: {"kind""Ptr","child":{"kind":"SByte"}},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    maxResultSize: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uldn_keyValueDisplayName(
    ldn: {"kind""Ptr","child":Windows.Win32.Intl.ULocaleDisplayNames},
    key: {"kind""Ptr","child":{"kind":"SByte"}},
    value: {"kind""Ptr","child":{"kind":"SByte"}},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    maxResultSize: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uldn_openForContext(
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    contexts: {"kind""Ptr","child":Windows.Win32.Intl.UDisplayContext},
    length: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uldn_getContext(
    ldn: {"kind""Ptr","child":Windows.Win32.Intl.ULocaleDisplayNames},
    type: Windows.Win32.Intl.UDisplayContextType,
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucurr_forLocale(
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    buff: {"kind""Ptr","child":{"kind":"UInt16"}},
    buffCapacity: {"kind":"Int32"},
    ec: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucurr_register(
    isoCode: {"kind""Ptr","child":{"kind":"UInt16"}},
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucurr_unregister(
    key: {"kind""Ptr","child":{"kind":"Void"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucurr_getName(
    currency: {"kind""Ptr","child":{"kind":"UInt16"}},
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    nameStyle: Windows.Win32.Intl.UCurrNameStyle,
    isChoiceFormat: {"kind""Ptr","child":{"kind":"SByte"}},
    len: {"kind""Ptr","child":{"kind":"Int32"}},
    ec: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucurr_getPluralName(
    currency: {"kind""Ptr","child":{"kind":"UInt16"}},
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    isChoiceFormat: {"kind""Ptr","child":{"kind":"SByte"}},
    pluralCount: {"kind""Ptr","child":{"kind":"SByte"}},
    len: {"kind""Ptr","child":{"kind":"Int32"}},
    ec: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucurr_getDefaultFractionDigits(
    currency: {"kind""Ptr","child":{"kind":"UInt16"}},
    ec: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucurr_getDefaultFractionDigitsForUsage(
    currency: {"kind""Ptr","child":{"kind":"UInt16"}},
    usage: Windows.Win32.Intl.UCurrencyUsage,
    ec: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucurr_getRoundingIncrement(
    currency: {"kind""Ptr","child":{"kind":"UInt16"}},
    ec: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucurr_getRoundingIncrementForUsage(
    currency: {"kind""Ptr","child":{"kind":"UInt16"}},
    usage: Windows.Win32.Intl.UCurrencyUsage,
    ec: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucurr_openISOCurrencies(
    currType: {"kind":"UInt32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucurr_isAvailable(
    isoCode: {"kind""Ptr","child":{"kind":"UInt16"}},
    from: {"kind":"Double"},
    to: {"kind":"Double"},
    errorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucurr_countCurrencies(
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    date: {"kind":"Double"},
    ec: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucurr_forLocaleAndDate(
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    date: {"kind":"Double"},
    index: {"kind":"Int32"},
    buff: {"kind""Ptr","child":{"kind":"UInt16"}},
    buffCapacity: {"kind":"Int32"},
    ec: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucurr_getKeywordValuesForLocale(
    key: {"kind""Ptr","child":{"kind":"SByte"}},
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    commonlyUsed: {"kind":"SByte"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucurr_getNumericCode(
    currency: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn UCNV_FROM_U_CALLBACK_STOP(
    context: {"kind""Ptr","child":{"kind":"Void"}},
    fromUArgs: {"kind""Ptr","child":Windows.Win32.Intl.UConverterFromUnicodeArgs},
    codeUnits: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},
    codePoint: {"kind":"Int32"},
    reason: Windows.Win32.Intl.UConverterCallbackReason,
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn UCNV_TO_U_CALLBACK_STOP(
    context: {"kind""Ptr","child":{"kind":"Void"}},
    toUArgs: {"kind""Ptr","child":Windows.Win32.Intl.UConverterToUnicodeArgs},
    codeUnits: {"kind""Ptr","child":{"kind":"SByte"}},
    length: {"kind":"Int32"},
    reason: Windows.Win32.Intl.UConverterCallbackReason,
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn UCNV_FROM_U_CALLBACK_SKIP(
    context: {"kind""Ptr","child":{"kind":"Void"}},
    fromUArgs: {"kind""Ptr","child":Windows.Win32.Intl.UConverterFromUnicodeArgs},
    codeUnits: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},
    codePoint: {"kind":"Int32"},
    reason: Windows.Win32.Intl.UConverterCallbackReason,
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn UCNV_FROM_U_CALLBACK_SUBSTITUTE(
    context: {"kind""Ptr","child":{"kind":"Void"}},
    fromUArgs: {"kind""Ptr","child":Windows.Win32.Intl.UConverterFromUnicodeArgs},
    codeUnits: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},
    codePoint: {"kind":"Int32"},
    reason: Windows.Win32.Intl.UConverterCallbackReason,
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn UCNV_FROM_U_CALLBACK_ESCAPE(
    context: {"kind""Ptr","child":{"kind":"Void"}},
    fromUArgs: {"kind""Ptr","child":Windows.Win32.Intl.UConverterFromUnicodeArgs},
    codeUnits: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},
    codePoint: {"kind":"Int32"},
    reason: Windows.Win32.Intl.UConverterCallbackReason,
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn UCNV_TO_U_CALLBACK_SKIP(
    context: {"kind""Ptr","child":{"kind":"Void"}},
    toUArgs: {"kind""Ptr","child":Windows.Win32.Intl.UConverterToUnicodeArgs},
    codeUnits: {"kind""Ptr","child":{"kind":"SByte"}},
    length: {"kind":"Int32"},
    reason: Windows.Win32.Intl.UConverterCallbackReason,
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn UCNV_TO_U_CALLBACK_SUBSTITUTE(
    context: {"kind""Ptr","child":{"kind":"Void"}},
    toUArgs: {"kind""Ptr","child":Windows.Win32.Intl.UConverterToUnicodeArgs},
    codeUnits: {"kind""Ptr","child":{"kind":"SByte"}},
    length: {"kind":"Int32"},
    reason: Windows.Win32.Intl.UConverterCallbackReason,
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn UCNV_TO_U_CALLBACK_ESCAPE(
    context: {"kind""Ptr","child":{"kind":"Void"}},
    toUArgs: {"kind""Ptr","child":Windows.Win32.Intl.UConverterToUnicodeArgs},
    codeUnits: {"kind""Ptr","child":{"kind":"SByte"}},
    length: {"kind":"Int32"},
    reason: Windows.Win32.Intl.UConverterCallbackReason,
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_compareNames(
    name1: {"kind""Ptr","child":{"kind":"SByte"}},
    name2: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_open(
    converterName: {"kind""Ptr","child":{"kind":"SByte"}},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_openU(
    name: {"kind""Ptr","child":{"kind":"UInt16"}},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_openCCSID(
    codepage: {"kind":"Int32"},
    platform: Windows.Win32.Intl.UConverterPlatform,
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_openPackage(
    packageName: {"kind""Ptr","child":{"kind":"SByte"}},
    converterName: {"kind""Ptr","child":{"kind":"SByte"}},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_safeClone(
    cnv: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},
    stackBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    pBufferSize: {"kind""Ptr","child":{"kind":"Int32"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_close(
    converter: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_getSubstChars(
    converter: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},
    subChars: {"kind""Ptr","child":{"kind":"SByte"}},
    len: {"kind""Ptr","child":{"kind":"SByte"}},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_setSubstChars(
    converter: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},
    subChars: {"kind""Ptr","child":{"kind":"SByte"}},
    len: {"kind":"SByte"},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_setSubstString(
    cnv: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},
    s: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_getInvalidChars(
    converter: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},
    errBytes: {"kind""Ptr","child":{"kind":"SByte"}},
    len: {"kind""Ptr","child":{"kind":"SByte"}},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_getInvalidUChars(
    converter: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},
    errUChars: {"kind""Ptr","child":{"kind":"UInt16"}},
    len: {"kind""Ptr","child":{"kind":"SByte"}},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_reset(
    converter: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_resetToUnicode(
    converter: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_resetFromUnicode(
    converter: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_getMaxCharSize(
    converter: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_getMinCharSize(
    converter: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_getDisplayName(
    converter: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},
    displayLocale: {"kind""Ptr","child":{"kind":"SByte"}},
    displayName: {"kind""Ptr","child":{"kind":"UInt16"}},
    displayNameCapacity: {"kind":"Int32"},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_getName(
    converter: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_getCCSID(
    converter: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_getPlatform(
    converter: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_getType(
    converter: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_getStarters(
    converter: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},
    starters: {"kind""Ptr","child":{"kind":"SByte"}},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_getUnicodeSet(
    cnv: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},
    setFillIn: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    whichSet: Windows.Win32.Intl.UConverterUnicodeSet,
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_getToUCallBack(
    converter: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},
    action: {"kind""Ptr","child":Windows.Win32.Intl.UConverterToUCallback},
    context: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_getFromUCallBack(
    converter: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},
    action: {"kind""Ptr","child":Windows.Win32.Intl.UConverterFromUCallback},
    context: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_setToUCallBack(
    converter: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},
    newAction: Windows.Win32.Intl.UConverterToUCallback,
    newContext: {"kind""Ptr","child":{"kind":"Void"}},
    oldAction: {"kind""Ptr","child":Windows.Win32.Intl.UConverterToUCallback},
    oldContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_setFromUCallBack(
    converter: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},
    newAction: Windows.Win32.Intl.UConverterFromUCallback,
    newContext: {"kind""Ptr","child":{"kind":"Void"}},
    oldAction: {"kind""Ptr","child":Windows.Win32.Intl.UConverterFromUCallback},
    oldContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_fromUnicode(
    converter: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},
    target: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},
    targetLimit: {"kind""Ptr","child":{"kind":"SByte"}},
    source: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    sourceLimit: {"kind""Ptr","child":{"kind":"UInt16"}},
    offsets: {"kind""Ptr","child":{"kind":"Int32"}},
    flush: {"kind":"SByte"},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_toUnicode(
    converter: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},
    target: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    targetLimit: {"kind""Ptr","child":{"kind":"UInt16"}},
    source: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},
    sourceLimit: {"kind""Ptr","child":{"kind":"SByte"}},
    offsets: {"kind""Ptr","child":{"kind":"Int32"}},
    flush: {"kind":"SByte"},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_fromUChars(
    cnv: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},
    dest: {"kind""Ptr","child":{"kind":"SByte"}},
    destCapacity: {"kind":"Int32"},
    src: {"kind""Ptr","child":{"kind":"UInt16"}},
    srcLength: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_toUChars(
    cnv: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    destCapacity: {"kind":"Int32"},
    src: {"kind""Ptr","child":{"kind":"SByte"}},
    srcLength: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_getNextUChar(
    converter: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},
    source: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},
    sourceLimit: {"kind""Ptr","child":{"kind":"SByte"}},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_convertEx(
    targetCnv: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},
    sourceCnv: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},
    target: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},
    targetLimit: {"kind""Ptr","child":{"kind":"SByte"}},
    source: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},
    sourceLimit: {"kind""Ptr","child":{"kind":"SByte"}},
    pivotStart: {"kind""Ptr","child":{"kind":"UInt16"}},
    pivotSource: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    pivotTarget: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    pivotLimit: {"kind""Ptr","child":{"kind":"UInt16"}},
    reset: {"kind":"SByte"},
    flush: {"kind":"SByte"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_convert(
    toConverterName: {"kind""Ptr","child":{"kind":"SByte"}},
    fromConverterName: {"kind""Ptr","child":{"kind":"SByte"}},
    target: {"kind""Ptr","child":{"kind":"SByte"}},
    targetCapacity: {"kind":"Int32"},
    source: {"kind""Ptr","child":{"kind":"SByte"}},
    sourceLength: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_toAlgorithmic(
    algorithmicType: Windows.Win32.Intl.UConverterType,
    cnv: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},
    target: {"kind""Ptr","child":{"kind":"SByte"}},
    targetCapacity: {"kind":"Int32"},
    source: {"kind""Ptr","child":{"kind":"SByte"}},
    sourceLength: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_fromAlgorithmic(
    cnv: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},
    algorithmicType: Windows.Win32.Intl.UConverterType,
    target: {"kind""Ptr","child":{"kind":"SByte"}},
    targetCapacity: {"kind":"Int32"},
    source: {"kind""Ptr","child":{"kind":"SByte"}},
    sourceLength: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_flushCache(

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_countAvailable(

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_getAvailableName(
    n: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_openAllNames(
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_countAliases(
    alias: {"kind""Ptr","child":{"kind":"SByte"}},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_getAlias(
    alias: {"kind""Ptr","child":{"kind":"SByte"}},
    n: {"kind":"UInt16"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_getAliases(
    alias: {"kind""Ptr","child":{"kind":"SByte"}},
    aliases: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_openStandardNames(
    convName: {"kind""Ptr","child":{"kind":"SByte"}},
    standard: {"kind""Ptr","child":{"kind":"SByte"}},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_countStandards(

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_getStandard(
    n: {"kind":"UInt16"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_getStandardName(
    name: {"kind""Ptr","child":{"kind":"SByte"}},
    standard: {"kind""Ptr","child":{"kind":"SByte"}},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_getCanonicalName(
    alias: {"kind""Ptr","child":{"kind":"SByte"}},
    standard: {"kind""Ptr","child":{"kind":"SByte"}},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_getDefaultName(

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_setDefaultName(
    name: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_fixFileSeparator(
    cnv: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},
    source: {"kind""Ptr","child":{"kind":"UInt16"}},
    sourceLen: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_isAmbiguous(
    cnv: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_setFallback(
    cnv: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},
    usesFallback: {"kind":"SByte"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_usesFallback(
    cnv: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_detectUnicodeSignature(
    source: {"kind""Ptr","child":{"kind":"SByte"}},
    sourceLength: {"kind":"Int32"},
    signatureLength: {"kind""Ptr","child":{"kind":"Int32"}},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_fromUCountPending(
    cnv: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_toUCountPending(
    cnv: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_isFixedWidth(
    cnv: {"kind""Ptr","child":Windows.Win32.Intl.UConverter},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_cbFromUWriteBytes(
    args: {"kind""Ptr","child":Windows.Win32.Intl.UConverterFromUnicodeArgs},
    source: {"kind""Ptr","child":{"kind":"SByte"}},
    length: {"kind":"Int32"},
    offsetIndex: {"kind":"Int32"},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_cbFromUWriteSub(
    args: {"kind""Ptr","child":Windows.Win32.Intl.UConverterFromUnicodeArgs},
    offsetIndex: {"kind":"Int32"},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_cbFromUWriteUChars(
    args: {"kind""Ptr","child":Windows.Win32.Intl.UConverterFromUnicodeArgs},
    source: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    sourceLimit: {"kind""Ptr","child":{"kind":"UInt16"}},
    offsetIndex: {"kind":"Int32"},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_cbToUWriteUChars(
    args: {"kind""Ptr","child":Windows.Win32.Intl.UConverterToUnicodeArgs},
    source: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},
    offsetIndex: {"kind":"Int32"},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnv_cbToUWriteSub(
    args: {"kind""Ptr","child":Windows.Win32.Intl.UConverterToUnicodeArgs},
    offsetIndex: {"kind":"Int32"},
    err: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_init(
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_cleanup(

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_setMemoryFunctions(
    context: {"kind""Ptr","child":{"kind":"Void"}},
    a: {"kind""Ptr","child":Windows.Win32.Intl.UMemAllocFn},
    r: {"kind""Ptr","child":Windows.Win32.Intl.UMemReallocFn},
    f: {"kind""Ptr","child":Windows.Win32.Intl.UMemFreeFn},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_catopen(
    name: {"kind""Ptr","child":{"kind":"SByte"}},
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    ec: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_catclose(
    catd: {"kind""Ptr","child":Windows.Win32.Intl.UResourceBundle},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_catgets(
    catd: {"kind""Ptr","child":Windows.Win32.Intl.UResourceBundle},
    set_num: {"kind":"Int32"},
    msg_num: {"kind":"Int32"},
    s: {"kind""Ptr","child":{"kind":"UInt16"}},
    len: {"kind""Ptr","child":{"kind":"Int32"}},
    ec: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_hasBinaryProperty(
    c: {"kind":"Int32"},
    which: Windows.Win32.Intl.UProperty,

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_isUAlphabetic(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_isULowercase(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_isUUppercase(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_isUWhiteSpace(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_getIntPropertyValue(
    c: {"kind":"Int32"},
    which: Windows.Win32.Intl.UProperty,

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_getIntPropertyMinValue(
    which: Windows.Win32.Intl.UProperty,

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_getIntPropertyMaxValue(
    which: Windows.Win32.Intl.UProperty,

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_getNumericValue(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_islower(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_isupper(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_istitle(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_isdigit(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_isalpha(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_isalnum(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_isxdigit(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_ispunct(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_isgraph(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_isblank(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_isdefined(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_isspace(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_isJavaSpaceChar(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_isWhitespace(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_iscntrl(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_isISOControl(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_isprint(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_isbase(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_charDirection(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_isMirrored(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_charMirror(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_getBidiPairedBracket(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_charType(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_enumCharTypes(
    enumRange: {"kind""Ptr","child":Windows.Win32.Intl.UCharEnumTypeRange},
    context: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_getCombiningClass(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_charDigitValue(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ublock_getCode(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_charName(
    code: {"kind":"Int32"},
    nameChoice: Windows.Win32.Intl.UCharNameChoice,
    buffer: {"kind""Ptr","child":{"kind":"SByte"}},
    bufferLength: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_charFromName(
    nameChoice: Windows.Win32.Intl.UCharNameChoice,
    name: {"kind""Ptr","child":{"kind":"SByte"}},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_enumCharNames(
    start: {"kind":"Int32"},
    limit: {"kind":"Int32"},
    fn: {"kind""Ptr","child":Windows.Win32.Intl.UEnumCharNamesFn},
    context: {"kind""Ptr","child":{"kind":"Void"}},
    nameChoice: Windows.Win32.Intl.UCharNameChoice,
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_getPropertyName(
    property: Windows.Win32.Intl.UProperty,
    nameChoice: Windows.Win32.Intl.UPropertyNameChoice,

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_getPropertyEnum(
    alias: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_getPropertyValueName(
    property: Windows.Win32.Intl.UProperty,
    value: {"kind":"Int32"},
    nameChoice: Windows.Win32.Intl.UPropertyNameChoice,

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_getPropertyValueEnum(
    property: Windows.Win32.Intl.UProperty,
    alias: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_isIDStart(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_isIDPart(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_isIDIgnorable(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_isJavaIDStart(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_isJavaIDPart(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_tolower(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_toupper(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_totitle(
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_foldCase(
    c: {"kind":"Int32"},
    options: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_digit(
    ch: {"kind":"Int32"},
    radix: {"kind":"SByte"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_forDigit(
    digit: {"kind":"Int32"},
    radix: {"kind":"SByte"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_charAge(
    c: {"kind":"Int32"},
    versionArray: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_getUnicodeVersion(
    versionArray: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_getFC_NFKC_Closure(
    c: {"kind":"Int32"},
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    destCapacity: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_open(

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_openSized(
    maxLength: {"kind":"Int32"},
    maxRunCount: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_close(
    pBiDi: {"kind""Ptr","child":Windows.Win32.Intl.UBiDi},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_setInverse(
    pBiDi: {"kind""Ptr","child":Windows.Win32.Intl.UBiDi},
    isInverse: {"kind":"SByte"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_isInverse(
    pBiDi: {"kind""Ptr","child":Windows.Win32.Intl.UBiDi},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_orderParagraphsLTR(
    pBiDi: {"kind""Ptr","child":Windows.Win32.Intl.UBiDi},
    orderParagraphsLTR: {"kind":"SByte"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_isOrderParagraphsLTR(
    pBiDi: {"kind""Ptr","child":Windows.Win32.Intl.UBiDi},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_setReorderingMode(
    pBiDi: {"kind""Ptr","child":Windows.Win32.Intl.UBiDi},
    reorderingMode: Windows.Win32.Intl.UBiDiReorderingMode,

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_getReorderingMode(
    pBiDi: {"kind""Ptr","child":Windows.Win32.Intl.UBiDi},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_setReorderingOptions(
    pBiDi: {"kind""Ptr","child":Windows.Win32.Intl.UBiDi},
    reorderingOptions: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_getReorderingOptions(
    pBiDi: {"kind""Ptr","child":Windows.Win32.Intl.UBiDi},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_setContext(
    pBiDi: {"kind""Ptr","child":Windows.Win32.Intl.UBiDi},
    prologue: {"kind""Ptr","child":{"kind":"UInt16"}},
    proLength: {"kind":"Int32"},
    epilogue: {"kind""Ptr","child":{"kind":"UInt16"}},
    epiLength: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_setPara(
    pBiDi: {"kind""Ptr","child":Windows.Win32.Intl.UBiDi},
    text: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},
    paraLevel: {"kind":"Byte"},
    embeddingLevels: {"kind""Ptr","child":{"kind":"Byte"}},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_setLine(
    pParaBiDi: {"kind""Ptr","child":Windows.Win32.Intl.UBiDi},
    start: {"kind":"Int32"},
    limit: {"kind":"Int32"},
    pLineBiDi: {"kind""Ptr","child":Windows.Win32.Intl.UBiDi},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_getDirection(
    pBiDi: {"kind""Ptr","child":Windows.Win32.Intl.UBiDi},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_getBaseDirection(
    text: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_getText(
    pBiDi: {"kind""Ptr","child":Windows.Win32.Intl.UBiDi},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_getLength(
    pBiDi: {"kind""Ptr","child":Windows.Win32.Intl.UBiDi},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_getParaLevel(
    pBiDi: {"kind""Ptr","child":Windows.Win32.Intl.UBiDi},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_countParagraphs(
    pBiDi: {"kind""Ptr","child":Windows.Win32.Intl.UBiDi},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_getParagraph(
    pBiDi: {"kind""Ptr","child":Windows.Win32.Intl.UBiDi},
    charIndex: {"kind":"Int32"},
    pParaStart: {"kind""Ptr","child":{"kind":"Int32"}},
    pParaLimit: {"kind""Ptr","child":{"kind":"Int32"}},
    pParaLevel: {"kind""Ptr","child":{"kind":"Byte"}},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_getParagraphByIndex(
    pBiDi: {"kind""Ptr","child":Windows.Win32.Intl.UBiDi},
    paraIndex: {"kind":"Int32"},
    pParaStart: {"kind""Ptr","child":{"kind":"Int32"}},
    pParaLimit: {"kind""Ptr","child":{"kind":"Int32"}},
    pParaLevel: {"kind""Ptr","child":{"kind":"Byte"}},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_getLevelAt(
    pBiDi: {"kind""Ptr","child":Windows.Win32.Intl.UBiDi},
    charIndex: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_getLevels(
    pBiDi: {"kind""Ptr","child":Windows.Win32.Intl.UBiDi},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_getLogicalRun(
    pBiDi: {"kind""Ptr","child":Windows.Win32.Intl.UBiDi},
    logicalPosition: {"kind":"Int32"},
    pLogicalLimit: {"kind""Ptr","child":{"kind":"Int32"}},
    pLevel: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_countRuns(
    pBiDi: {"kind""Ptr","child":Windows.Win32.Intl.UBiDi},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_getVisualRun(
    pBiDi: {"kind""Ptr","child":Windows.Win32.Intl.UBiDi},
    runIndex: {"kind":"Int32"},
    pLogicalStart: {"kind""Ptr","child":{"kind":"Int32"}},
    pLength: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_getVisualIndex(
    pBiDi: {"kind""Ptr","child":Windows.Win32.Intl.UBiDi},
    logicalIndex: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_getLogicalIndex(
    pBiDi: {"kind""Ptr","child":Windows.Win32.Intl.UBiDi},
    visualIndex: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_getLogicalMap(
    pBiDi: {"kind""Ptr","child":Windows.Win32.Intl.UBiDi},
    indexMap: {"kind""Ptr","child":{"kind":"Int32"}},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_getVisualMap(
    pBiDi: {"kind""Ptr","child":Windows.Win32.Intl.UBiDi},
    indexMap: {"kind""Ptr","child":{"kind":"Int32"}},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_reorderLogical(
    levels: {"kind""Ptr","child":{"kind":"Byte"}},
    length: {"kind":"Int32"},
    indexMap: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_reorderVisual(
    levels: {"kind""Ptr","child":{"kind":"Byte"}},
    length: {"kind":"Int32"},
    indexMap: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_invertMap(
    srcMap: {"kind""Ptr","child":{"kind":"Int32"}},
    destMap: {"kind""Ptr","child":{"kind":"Int32"}},
    length: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_getProcessedLength(
    pBiDi: {"kind""Ptr","child":Windows.Win32.Intl.UBiDi},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_getResultLength(
    pBiDi: {"kind""Ptr","child":Windows.Win32.Intl.UBiDi},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_getCustomizedClass(
    pBiDi: {"kind""Ptr","child":Windows.Win32.Intl.UBiDi},
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_setClassCallback(
    pBiDi: {"kind""Ptr","child":Windows.Win32.Intl.UBiDi},
    newFn: {"kind""Ptr","child":Windows.Win32.Intl.UBiDiClassCallback},
    newContext: {"kind""Ptr","child":{"kind":"Void"}},
    oldFn: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Intl.UBiDiClassCallback}},
    oldContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_getClassCallback(
    pBiDi: {"kind""Ptr","child":Windows.Win32.Intl.UBiDi},
    fn: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Intl.UBiDiClassCallback}},
    context: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_writeReordered(
    pBiDi: {"kind""Ptr","child":Windows.Win32.Intl.UBiDi},
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    destSize: {"kind":"Int32"},
    options: {"kind":"UInt16"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubidi_writeReverse(
    src: {"kind""Ptr","child":{"kind":"UInt16"}},
    srcLength: {"kind":"Int32"},
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    destSize: {"kind":"Int32"},
    options: {"kind":"UInt16"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubiditransform_transform(
    pBiDiTransform: {"kind""Ptr","child":Windows.Win32.Intl.UBiDiTransform},
    src: {"kind""Ptr","child":{"kind":"UInt16"}},
    srcLength: {"kind":"Int32"},
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    destSize: {"kind":"Int32"},
    inParaLevel: {"kind":"Byte"},
    inOrder: Windows.Win32.Intl.UBiDiOrder,
    outParaLevel: {"kind":"Byte"},
    outOrder: Windows.Win32.Intl.UBiDiOrder,
    doMirroring: Windows.Win32.Intl.UBiDiMirroring,
    shapingOptions: {"kind":"UInt32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubiditransform_open(
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubiditransform_close(
    pBidiTransform: {"kind""Ptr","child":Windows.Win32.Intl.UBiDiTransform},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utext_close(
    ut: {"kind""Ptr","child":Windows.Win32.Intl.UText},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utext_openUTF8(
    ut: {"kind""Ptr","child":Windows.Win32.Intl.UText},
    s: {"kind""Ptr","child":{"kind":"SByte"}},
    length: {"kind":"Int64"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utext_openUChars(
    ut: {"kind""Ptr","child":Windows.Win32.Intl.UText},
    s: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int64"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utext_clone(
    dest: {"kind""Ptr","child":Windows.Win32.Intl.UText},
    src: {"kind""Ptr","child":Windows.Win32.Intl.UText},
    deep: {"kind":"SByte"},
    readOnly: {"kind":"SByte"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utext_equals(
    a: {"kind""Ptr","child":Windows.Win32.Intl.UText},
    b: {"kind""Ptr","child":Windows.Win32.Intl.UText},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utext_nativeLength(
    ut: {"kind""Ptr","child":Windows.Win32.Intl.UText},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utext_isLengthExpensive(
    ut: {"kind""Ptr","child":Windows.Win32.Intl.UText},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utext_char32At(
    ut: {"kind""Ptr","child":Windows.Win32.Intl.UText},
    nativeIndex: {"kind":"Int64"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utext_current32(
    ut: {"kind""Ptr","child":Windows.Win32.Intl.UText},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utext_next32(
    ut: {"kind""Ptr","child":Windows.Win32.Intl.UText},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utext_previous32(
    ut: {"kind""Ptr","child":Windows.Win32.Intl.UText},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utext_next32From(
    ut: {"kind""Ptr","child":Windows.Win32.Intl.UText},
    nativeIndex: {"kind":"Int64"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utext_previous32From(
    ut: {"kind""Ptr","child":Windows.Win32.Intl.UText},
    nativeIndex: {"kind":"Int64"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utext_getNativeIndex(
    ut: {"kind""Ptr","child":Windows.Win32.Intl.UText},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utext_setNativeIndex(
    ut: {"kind""Ptr","child":Windows.Win32.Intl.UText},
    nativeIndex: {"kind":"Int64"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utext_moveIndex32(
    ut: {"kind""Ptr","child":Windows.Win32.Intl.UText},
    delta: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utext_getPreviousNativeIndex(
    ut: {"kind""Ptr","child":Windows.Win32.Intl.UText},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utext_extract(
    ut: {"kind""Ptr","child":Windows.Win32.Intl.UText},
    nativeStart: {"kind":"Int64"},
    nativeLimit: {"kind":"Int64"},
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    destCapacity: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utext_isWritable(
    ut: {"kind""Ptr","child":Windows.Win32.Intl.UText},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utext_hasMetaData(
    ut: {"kind""Ptr","child":Windows.Win32.Intl.UText},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utext_replace(
    ut: {"kind""Ptr","child":Windows.Win32.Intl.UText},
    nativeStart: {"kind":"Int64"},
    nativeLimit: {"kind":"Int64"},
    replacementText: {"kind""Ptr","child":{"kind":"UInt16"}},
    replacementLength: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utext_copy(
    ut: {"kind""Ptr","child":Windows.Win32.Intl.UText},
    nativeStart: {"kind":"Int64"},
    nativeLimit: {"kind":"Int64"},
    destIndex: {"kind":"Int64"},
    move: {"kind":"SByte"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utext_freeze(
    ut: {"kind""Ptr","child":Windows.Win32.Intl.UText},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utext_setup(
    ut: {"kind""Ptr","child":Windows.Win32.Intl.UText},
    extraSpace: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_openEmpty(

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_open(
    start: {"kind":"Int32"},
    end: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_openPattern(
    pattern: {"kind""Ptr","child":{"kind":"UInt16"}},
    patternLength: {"kind":"Int32"},
    ec: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_openPatternOptions(
    pattern: {"kind""Ptr","child":{"kind":"UInt16"}},
    patternLength: {"kind":"Int32"},
    options: {"kind":"UInt32"},
    ec: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_close(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_clone(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_isFrozen(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_freeze(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_cloneAsThawed(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_set(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    start: {"kind":"Int32"},
    end: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_applyPattern(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    pattern: {"kind""Ptr","child":{"kind":"UInt16"}},
    patternLength: {"kind":"Int32"},
    options: {"kind":"UInt32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_applyIntPropertyValue(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    prop: Windows.Win32.Intl.UProperty,
    value: {"kind":"Int32"},
    ec: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_applyPropertyAlias(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    prop: {"kind""Ptr","child":{"kind":"UInt16"}},
    propLength: {"kind":"Int32"},
    value: {"kind""Ptr","child":{"kind":"UInt16"}},
    valueLength: {"kind":"Int32"},
    ec: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_resemblesPattern(
    pattern: {"kind""Ptr","child":{"kind":"UInt16"}},
    patternLength: {"kind":"Int32"},
    pos: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_toPattern(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultCapacity: {"kind":"Int32"},
    escapeUnprintable: {"kind":"SByte"},
    ec: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_add(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_addAll(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    additionalSet: {"kind""Ptr","child":Windows.Win32.Intl.USet},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_addRange(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    start: {"kind":"Int32"},
    end: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_addString(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    str: {"kind""Ptr","child":{"kind":"UInt16"}},
    strLen: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_addAllCodePoints(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    str: {"kind""Ptr","child":{"kind":"UInt16"}},
    strLen: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_remove(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_removeRange(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    start: {"kind":"Int32"},
    end: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_removeString(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    str: {"kind""Ptr","child":{"kind":"UInt16"}},
    strLen: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_removeAll(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    removeSet: {"kind""Ptr","child":Windows.Win32.Intl.USet},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_retain(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    start: {"kind":"Int32"},
    end: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_retainAll(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    retain: {"kind""Ptr","child":Windows.Win32.Intl.USet},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_compact(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_complement(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_complementAll(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    complement: {"kind""Ptr","child":Windows.Win32.Intl.USet},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_clear(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_closeOver(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    attributes: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_removeAllStrings(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_isEmpty(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_contains(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_containsRange(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    start: {"kind":"Int32"},
    end: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_containsString(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    str: {"kind""Ptr","child":{"kind":"UInt16"}},
    strLen: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_indexOf(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_charAt(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    charIndex: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_size(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_getItemCount(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_getItem(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    itemIndex: {"kind":"Int32"},
    start: {"kind""Ptr","child":{"kind":"Int32"}},
    end: {"kind""Ptr","child":{"kind":"Int32"}},
    str: {"kind""Ptr","child":{"kind":"UInt16"}},
    strCapacity: {"kind":"Int32"},
    ec: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_containsAll(
    set1: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    set2: {"kind""Ptr","child":Windows.Win32.Intl.USet},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_containsAllCodePoints(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    str: {"kind""Ptr","child":{"kind":"UInt16"}},
    strLen: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_containsNone(
    set1: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    set2: {"kind""Ptr","child":Windows.Win32.Intl.USet},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_containsSome(
    set1: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    set2: {"kind""Ptr","child":Windows.Win32.Intl.USet},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_span(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    s: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},
    spanCondition: Windows.Win32.Intl.USetSpanCondition,

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_spanBack(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    s: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},
    spanCondition: Windows.Win32.Intl.USetSpanCondition,

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_spanUTF8(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    s: {"kind""Ptr","child":{"kind":"SByte"}},
    length: {"kind":"Int32"},
    spanCondition: Windows.Win32.Intl.USetSpanCondition,

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_spanBackUTF8(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    s: {"kind""Ptr","child":{"kind":"SByte"}},
    length: {"kind":"Int32"},
    spanCondition: Windows.Win32.Intl.USetSpanCondition,

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_equals(
    set1: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    set2: {"kind""Ptr","child":Windows.Win32.Intl.USet},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_serialize(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    destCapacity: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_getSerializedSet(
    fillSet: {"kind""Ptr","child":Windows.Win32.Intl.USerializedSet},
    src: {"kind""Ptr","child":{"kind":"UInt16"}},
    srcLength: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_setSerializedToOne(
    fillSet: {"kind""Ptr","child":Windows.Win32.Intl.USerializedSet},
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_serializedContains(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USerializedSet},
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_getSerializedRangeCount(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USerializedSet},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uset_getSerializedRange(
    set: {"kind""Ptr","child":Windows.Win32.Intl.USerializedSet},
    rangeIndex: {"kind":"Int32"},
    pStart: {"kind""Ptr","child":{"kind":"Int32"}},
    pEnd: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unorm2_getNFCInstance(
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unorm2_getNFDInstance(
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unorm2_getNFKCInstance(
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unorm2_getNFKDInstance(
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unorm2_getNFKCCasefoldInstance(
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unorm2_getInstance(
    packageName: {"kind""Ptr","child":{"kind":"SByte"}},
    name: {"kind""Ptr","child":{"kind":"SByte"}},
    mode: Windows.Win32.Intl.UNormalization2Mode,
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unorm2_openFiltered(
    norm2: {"kind""Ptr","child":Windows.Win32.Intl.UNormalizer2},
    filterSet: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unorm2_close(
    norm2: {"kind""Ptr","child":Windows.Win32.Intl.UNormalizer2},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unorm2_normalize(
    norm2: {"kind""Ptr","child":Windows.Win32.Intl.UNormalizer2},
    src: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    capacity: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unorm2_normalizeSecondAndAppend(
    norm2: {"kind""Ptr","child":Windows.Win32.Intl.UNormalizer2},
    first: {"kind""Ptr","child":{"kind":"UInt16"}},
    firstLength: {"kind":"Int32"},
    firstCapacity: {"kind":"Int32"},
    second: {"kind""Ptr","child":{"kind":"UInt16"}},
    secondLength: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unorm2_append(
    norm2: {"kind""Ptr","child":Windows.Win32.Intl.UNormalizer2},
    first: {"kind""Ptr","child":{"kind":"UInt16"}},
    firstLength: {"kind":"Int32"},
    firstCapacity: {"kind":"Int32"},
    second: {"kind""Ptr","child":{"kind":"UInt16"}},
    secondLength: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unorm2_getDecomposition(
    norm2: {"kind""Ptr","child":Windows.Win32.Intl.UNormalizer2},
    c: {"kind":"Int32"},
    decomposition: {"kind""Ptr","child":{"kind":"UInt16"}},
    capacity: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unorm2_getRawDecomposition(
    norm2: {"kind""Ptr","child":Windows.Win32.Intl.UNormalizer2},
    c: {"kind":"Int32"},
    decomposition: {"kind""Ptr","child":{"kind":"UInt16"}},
    capacity: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unorm2_composePair(
    norm2: {"kind""Ptr","child":Windows.Win32.Intl.UNormalizer2},
    a: {"kind":"Int32"},
    b: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unorm2_getCombiningClass(
    norm2: {"kind""Ptr","child":Windows.Win32.Intl.UNormalizer2},
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unorm2_isNormalized(
    norm2: {"kind""Ptr","child":Windows.Win32.Intl.UNormalizer2},
    s: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unorm2_quickCheck(
    norm2: {"kind""Ptr","child":Windows.Win32.Intl.UNormalizer2},
    s: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unorm2_spanQuickCheckYes(
    norm2: {"kind""Ptr","child":Windows.Win32.Intl.UNormalizer2},
    s: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unorm2_hasBoundaryBefore(
    norm2: {"kind""Ptr","child":Windows.Win32.Intl.UNormalizer2},
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unorm2_hasBoundaryAfter(
    norm2: {"kind""Ptr","child":Windows.Win32.Intl.UNormalizer2},
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unorm2_isInert(
    norm2: {"kind""Ptr","child":Windows.Win32.Intl.UNormalizer2},
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unorm_compare(
    s1: {"kind""Ptr","child":{"kind":"UInt16"}},
    length1: {"kind":"Int32"},
    s2: {"kind""Ptr","child":{"kind":"UInt16"}},
    length2: {"kind":"Int32"},
    options: {"kind":"UInt32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnvsel_open(
    converterList: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},
    converterListSize: {"kind":"Int32"},
    excludedCodePoints: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    whichSet: Windows.Win32.Intl.UConverterUnicodeSet,
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnvsel_close(
    sel: {"kind""Ptr","child":Windows.Win32.Intl.UConverterSelector},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnvsel_openFromSerialized(
    buffer: {"kind""Ptr","child":{"kind":"Void"}},
    length: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnvsel_serialize(
    sel: {"kind""Ptr","child":Windows.Win32.Intl.UConverterSelector},
    buffer: {"kind""Ptr","child":{"kind":"Void"}},
    bufferCapacity: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnvsel_selectForString(
    sel: {"kind""Ptr","child":Windows.Win32.Intl.UConverterSelector},
    s: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucnvsel_selectForUTF8(
    sel: {"kind""Ptr","child":Windows.Win32.Intl.UConverterSelector},
    s: {"kind""Ptr","child":{"kind":"SByte"}},
    length: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_charsToUChars(
    cs: {"kind""Ptr","child":{"kind":"SByte"}},
    us: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_UCharsToChars(
    us: {"kind""Ptr","child":{"kind":"UInt16"}},
    cs: {"kind""Ptr","child":{"kind":"SByte"}},
    length: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strlen(
    s: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_countChar32(
    s: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strHasMoreChar32Than(
    s: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},
    number: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strcat(
    dst: {"kind""Ptr","child":{"kind":"UInt16"}},
    src: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strncat(
    dst: {"kind""Ptr","child":{"kind":"UInt16"}},
    src: {"kind""Ptr","child":{"kind":"UInt16"}},
    n: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strstr(
    s: {"kind""Ptr","child":{"kind":"UInt16"}},
    substring: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strFindFirst(
    s: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},
    substring: {"kind""Ptr","child":{"kind":"UInt16"}},
    subLength: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strchr(
    s: {"kind""Ptr","child":{"kind":"UInt16"}},
    c: {"kind":"UInt16"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strchr32(
    s: {"kind""Ptr","child":{"kind":"UInt16"}},
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strrstr(
    s: {"kind""Ptr","child":{"kind":"UInt16"}},
    substring: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strFindLast(
    s: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},
    substring: {"kind""Ptr","child":{"kind":"UInt16"}},
    subLength: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strrchr(
    s: {"kind""Ptr","child":{"kind":"UInt16"}},
    c: {"kind":"UInt16"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strrchr32(
    s: {"kind""Ptr","child":{"kind":"UInt16"}},
    c: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strpbrk(
    string: {"kind""Ptr","child":{"kind":"UInt16"}},
    matchSet: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strcspn(
    string: {"kind""Ptr","child":{"kind":"UInt16"}},
    matchSet: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strspn(
    string: {"kind""Ptr","child":{"kind":"UInt16"}},
    matchSet: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strtok_r(
    src: {"kind""Ptr","child":{"kind":"UInt16"}},
    delim: {"kind""Ptr","child":{"kind":"UInt16"}},
    saveState: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strcmp(
    s1: {"kind""Ptr","child":{"kind":"UInt16"}},
    s2: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strcmpCodePointOrder(
    s1: {"kind""Ptr","child":{"kind":"UInt16"}},
    s2: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strCompare(
    s1: {"kind""Ptr","child":{"kind":"UInt16"}},
    length1: {"kind":"Int32"},
    s2: {"kind""Ptr","child":{"kind":"UInt16"}},
    length2: {"kind":"Int32"},
    codePointOrder: {"kind":"SByte"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strCompareIter(
    iter1: {"kind""Ptr","child":Windows.Win32.Intl.UCharIterator},
    iter2: {"kind""Ptr","child":Windows.Win32.Intl.UCharIterator},
    codePointOrder: {"kind":"SByte"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strCaseCompare(
    s1: {"kind""Ptr","child":{"kind":"UInt16"}},
    length1: {"kind":"Int32"},
    s2: {"kind""Ptr","child":{"kind":"UInt16"}},
    length2: {"kind":"Int32"},
    options: {"kind":"UInt32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strncmp(
    ucs1: {"kind""Ptr","child":{"kind":"UInt16"}},
    ucs2: {"kind""Ptr","child":{"kind":"UInt16"}},
    n: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strncmpCodePointOrder(
    s1: {"kind""Ptr","child":{"kind":"UInt16"}},
    s2: {"kind""Ptr","child":{"kind":"UInt16"}},
    n: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strcasecmp(
    s1: {"kind""Ptr","child":{"kind":"UInt16"}},
    s2: {"kind""Ptr","child":{"kind":"UInt16"}},
    options: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strncasecmp(
    s1: {"kind""Ptr","child":{"kind":"UInt16"}},
    s2: {"kind""Ptr","child":{"kind":"UInt16"}},
    n: {"kind":"Int32"},
    options: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_memcasecmp(
    s1: {"kind""Ptr","child":{"kind":"UInt16"}},
    s2: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},
    options: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strcpy(
    dst: {"kind""Ptr","child":{"kind":"UInt16"}},
    src: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strncpy(
    dst: {"kind""Ptr","child":{"kind":"UInt16"}},
    src: {"kind""Ptr","child":{"kind":"UInt16"}},
    n: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_uastrcpy(
    dst: {"kind""Ptr","child":{"kind":"UInt16"}},
    src: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_uastrncpy(
    dst: {"kind""Ptr","child":{"kind":"UInt16"}},
    src: {"kind""Ptr","child":{"kind":"SByte"}},
    n: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_austrcpy(
    dst: {"kind""Ptr","child":{"kind":"SByte"}},
    src: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_austrncpy(
    dst: {"kind""Ptr","child":{"kind":"SByte"}},
    src: {"kind""Ptr","child":{"kind":"UInt16"}},
    n: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_memcpy(
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    src: {"kind""Ptr","child":{"kind":"UInt16"}},
    count: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_memmove(
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    src: {"kind""Ptr","child":{"kind":"UInt16"}},
    count: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_memset(
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    c: {"kind":"UInt16"},
    count: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_memcmp(
    buf1: {"kind""Ptr","child":{"kind":"UInt16"}},
    buf2: {"kind""Ptr","child":{"kind":"UInt16"}},
    count: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_memcmpCodePointOrder(
    s1: {"kind""Ptr","child":{"kind":"UInt16"}},
    s2: {"kind""Ptr","child":{"kind":"UInt16"}},
    count: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_memchr(
    s: {"kind""Ptr","child":{"kind":"UInt16"}},
    c: {"kind":"UInt16"},
    count: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_memchr32(
    s: {"kind""Ptr","child":{"kind":"UInt16"}},
    c: {"kind":"Int32"},
    count: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_memrchr(
    s: {"kind""Ptr","child":{"kind":"UInt16"}},
    c: {"kind":"UInt16"},
    count: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_memrchr32(
    s: {"kind""Ptr","child":{"kind":"UInt16"}},
    c: {"kind":"Int32"},
    count: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_unescape(
    src: {"kind""Ptr","child":{"kind":"SByte"}},
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    destCapacity: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_unescapeAt(
    charAt: Windows.Win32.Intl.UNESCAPE_CHAR_AT,
    offset: {"kind""Ptr","child":{"kind":"Int32"}},
    length: {"kind":"Int32"},
    context: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strToUpper(
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    destCapacity: {"kind":"Int32"},
    src: {"kind""Ptr","child":{"kind":"UInt16"}},
    srcLength: {"kind":"Int32"},
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strToLower(
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    destCapacity: {"kind":"Int32"},
    src: {"kind""Ptr","child":{"kind":"UInt16"}},
    srcLength: {"kind":"Int32"},
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strToTitle(
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    destCapacity: {"kind":"Int32"},
    src: {"kind""Ptr","child":{"kind":"UInt16"}},
    srcLength: {"kind":"Int32"},
    titleIter: {"kind""Ptr","child":Windows.Win32.Intl.UBreakIterator},
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strFoldCase(
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    destCapacity: {"kind":"Int32"},
    src: {"kind""Ptr","child":{"kind":"UInt16"}},
    srcLength: {"kind":"Int32"},
    options: {"kind":"UInt32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strToWCS(
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    destCapacity: {"kind":"Int32"},
    pDestLength: {"kind""Ptr","child":{"kind":"Int32"}},
    src: {"kind""Ptr","child":{"kind":"UInt16"}},
    srcLength: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strFromWCS(
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    destCapacity: {"kind":"Int32"},
    pDestLength: {"kind""Ptr","child":{"kind":"Int32"}},
    src: {"kind""Ptr","child":{"kind":"UInt16"}},
    srcLength: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strToUTF8(
    dest: {"kind""Ptr","child":{"kind":"SByte"}},
    destCapacity: {"kind":"Int32"},
    pDestLength: {"kind""Ptr","child":{"kind":"Int32"}},
    src: {"kind""Ptr","child":{"kind":"UInt16"}},
    srcLength: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strFromUTF8(
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    destCapacity: {"kind":"Int32"},
    pDestLength: {"kind""Ptr","child":{"kind":"Int32"}},
    src: {"kind""Ptr","child":{"kind":"SByte"}},
    srcLength: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strToUTF8WithSub(
    dest: {"kind""Ptr","child":{"kind":"SByte"}},
    destCapacity: {"kind":"Int32"},
    pDestLength: {"kind""Ptr","child":{"kind":"Int32"}},
    src: {"kind""Ptr","child":{"kind":"UInt16"}},
    srcLength: {"kind":"Int32"},
    subchar: {"kind":"Int32"},
    pNumSubstitutions: {"kind""Ptr","child":{"kind":"Int32"}},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strFromUTF8WithSub(
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    destCapacity: {"kind":"Int32"},
    pDestLength: {"kind""Ptr","child":{"kind":"Int32"}},
    src: {"kind""Ptr","child":{"kind":"SByte"}},
    srcLength: {"kind":"Int32"},
    subchar: {"kind":"Int32"},
    pNumSubstitutions: {"kind""Ptr","child":{"kind":"Int32"}},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strFromUTF8Lenient(
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    destCapacity: {"kind":"Int32"},
    pDestLength: {"kind""Ptr","child":{"kind":"Int32"}},
    src: {"kind""Ptr","child":{"kind":"SByte"}},
    srcLength: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strToUTF32(
    dest: {"kind""Ptr","child":{"kind":"Int32"}},
    destCapacity: {"kind":"Int32"},
    pDestLength: {"kind""Ptr","child":{"kind":"Int32"}},
    src: {"kind""Ptr","child":{"kind":"UInt16"}},
    srcLength: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strFromUTF32(
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    destCapacity: {"kind":"Int32"},
    pDestLength: {"kind""Ptr","child":{"kind":"Int32"}},
    src: {"kind""Ptr","child":{"kind":"Int32"}},
    srcLength: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strToUTF32WithSub(
    dest: {"kind""Ptr","child":{"kind":"Int32"}},
    destCapacity: {"kind":"Int32"},
    pDestLength: {"kind""Ptr","child":{"kind":"Int32"}},
    src: {"kind""Ptr","child":{"kind":"UInt16"}},
    srcLength: {"kind":"Int32"},
    subchar: {"kind":"Int32"},
    pNumSubstitutions: {"kind""Ptr","child":{"kind":"Int32"}},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strFromUTF32WithSub(
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    destCapacity: {"kind":"Int32"},
    pDestLength: {"kind""Ptr","child":{"kind":"Int32"}},
    src: {"kind""Ptr","child":{"kind":"Int32"}},
    srcLength: {"kind":"Int32"},
    subchar: {"kind":"Int32"},
    pNumSubstitutions: {"kind""Ptr","child":{"kind":"Int32"}},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strToJavaModifiedUTF8(
    dest: {"kind""Ptr","child":{"kind":"SByte"}},
    destCapacity: {"kind":"Int32"},
    pDestLength: {"kind""Ptr","child":{"kind":"Int32"}},
    src: {"kind""Ptr","child":{"kind":"UInt16"}},
    srcLength: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_strFromJavaModifiedUTF8WithSub(
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    destCapacity: {"kind":"Int32"},
    pDestLength: {"kind""Ptr","child":{"kind":"Int32"}},
    src: {"kind""Ptr","child":{"kind":"SByte"}},
    srcLength: {"kind":"Int32"},
    subchar: {"kind":"Int32"},
    pNumSubstitutions: {"kind""Ptr","child":{"kind":"Int32"}},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucasemap_open(
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    options: {"kind":"UInt32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucasemap_close(
    csm: {"kind""Ptr","child":Windows.Win32.Intl.UCaseMap},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucasemap_getLocale(
    csm: {"kind""Ptr","child":Windows.Win32.Intl.UCaseMap},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucasemap_getOptions(
    csm: {"kind""Ptr","child":Windows.Win32.Intl.UCaseMap},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucasemap_setLocale(
    csm: {"kind""Ptr","child":Windows.Win32.Intl.UCaseMap},
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucasemap_setOptions(
    csm: {"kind""Ptr","child":Windows.Win32.Intl.UCaseMap},
    options: {"kind":"UInt32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucasemap_getBreakIterator(
    csm: {"kind""Ptr","child":Windows.Win32.Intl.UCaseMap},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucasemap_setBreakIterator(
    csm: {"kind""Ptr","child":Windows.Win32.Intl.UCaseMap},
    iterToAdopt: {"kind""Ptr","child":Windows.Win32.Intl.UBreakIterator},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucasemap_toTitle(
    csm: {"kind""Ptr","child":Windows.Win32.Intl.UCaseMap},
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    destCapacity: {"kind":"Int32"},
    src: {"kind""Ptr","child":{"kind":"UInt16"}},
    srcLength: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucasemap_utf8ToLower(
    csm: {"kind""Ptr","child":Windows.Win32.Intl.UCaseMap},
    dest: {"kind""Ptr","child":{"kind":"SByte"}},
    destCapacity: {"kind":"Int32"},
    src: {"kind""Ptr","child":{"kind":"SByte"}},
    srcLength: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucasemap_utf8ToUpper(
    csm: {"kind""Ptr","child":Windows.Win32.Intl.UCaseMap},
    dest: {"kind""Ptr","child":{"kind":"SByte"}},
    destCapacity: {"kind":"Int32"},
    src: {"kind""Ptr","child":{"kind":"SByte"}},
    srcLength: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucasemap_utf8ToTitle(
    csm: {"kind""Ptr","child":Windows.Win32.Intl.UCaseMap},
    dest: {"kind""Ptr","child":{"kind":"SByte"}},
    destCapacity: {"kind":"Int32"},
    src: {"kind""Ptr","child":{"kind":"SByte"}},
    srcLength: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucasemap_utf8FoldCase(
    csm: {"kind""Ptr","child":Windows.Win32.Intl.UCaseMap},
    dest: {"kind""Ptr","child":{"kind":"SByte"}},
    destCapacity: {"kind":"Int32"},
    src: {"kind""Ptr","child":{"kind":"SByte"}},
    srcLength: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn usprep_open(
    path: {"kind""Ptr","child":{"kind":"SByte"}},
    fileName: {"kind""Ptr","child":{"kind":"SByte"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn usprep_openByType(
    type: Windows.Win32.Intl.UStringPrepProfileType,
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn usprep_close(
    profile: {"kind""Ptr","child":Windows.Win32.Intl.UStringPrepProfile},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn usprep_prepare(
    prep: {"kind""Ptr","child":Windows.Win32.Intl.UStringPrepProfile},
    src: {"kind""Ptr","child":{"kind":"UInt16"}},
    srcLength: {"kind":"Int32"},
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    destCapacity: {"kind":"Int32"},
    options: {"kind":"Int32"},
    parseError: {"kind""Ptr","child":Windows.Win32.Intl.UParseError},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uidna_openUTS46(
    options: {"kind":"UInt32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uidna_close(
    idna: {"kind""Ptr","child":Windows.Win32.Intl.UIDNA},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uidna_labelToASCII(
    idna: {"kind""Ptr","child":Windows.Win32.Intl.UIDNA},
    label: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    capacity: {"kind":"Int32"},
    pInfo: {"kind""Ptr","child":Windows.Win32.Intl.UIDNAInfo},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uidna_labelToUnicode(
    idna: {"kind""Ptr","child":Windows.Win32.Intl.UIDNA},
    label: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    capacity: {"kind":"Int32"},
    pInfo: {"kind""Ptr","child":Windows.Win32.Intl.UIDNAInfo},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uidna_nameToASCII(
    idna: {"kind""Ptr","child":Windows.Win32.Intl.UIDNA},
    name: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    capacity: {"kind":"Int32"},
    pInfo: {"kind""Ptr","child":Windows.Win32.Intl.UIDNAInfo},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uidna_nameToUnicode(
    idna: {"kind""Ptr","child":Windows.Win32.Intl.UIDNA},
    name: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    capacity: {"kind":"Int32"},
    pInfo: {"kind""Ptr","child":Windows.Win32.Intl.UIDNAInfo},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uidna_labelToASCII_UTF8(
    idna: {"kind""Ptr","child":Windows.Win32.Intl.UIDNA},
    label: {"kind""Ptr","child":{"kind":"SByte"}},
    length: {"kind":"Int32"},
    dest: {"kind""Ptr","child":{"kind":"SByte"}},
    capacity: {"kind":"Int32"},
    pInfo: {"kind""Ptr","child":Windows.Win32.Intl.UIDNAInfo},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uidna_labelToUnicodeUTF8(
    idna: {"kind""Ptr","child":Windows.Win32.Intl.UIDNA},
    label: {"kind""Ptr","child":{"kind":"SByte"}},
    length: {"kind":"Int32"},
    dest: {"kind""Ptr","child":{"kind":"SByte"}},
    capacity: {"kind":"Int32"},
    pInfo: {"kind""Ptr","child":Windows.Win32.Intl.UIDNAInfo},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uidna_nameToASCII_UTF8(
    idna: {"kind""Ptr","child":Windows.Win32.Intl.UIDNA},
    name: {"kind""Ptr","child":{"kind":"SByte"}},
    length: {"kind":"Int32"},
    dest: {"kind""Ptr","child":{"kind":"SByte"}},
    capacity: {"kind":"Int32"},
    pInfo: {"kind""Ptr","child":Windows.Win32.Intl.UIDNAInfo},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uidna_nameToUnicodeUTF8(
    idna: {"kind""Ptr","child":Windows.Win32.Intl.UIDNA},
    name: {"kind""Ptr","child":{"kind":"SByte"}},
    length: {"kind":"Int32"},
    dest: {"kind""Ptr","child":{"kind":"SByte"}},
    capacity: {"kind":"Int32"},
    pInfo: {"kind""Ptr","child":Windows.Win32.Intl.UIDNAInfo},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubrk_open(
    type: Windows.Win32.Intl.UBreakIteratorType,
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    text: {"kind""Ptr","child":{"kind":"UInt16"}},
    textLength: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubrk_openRules(
    rules: {"kind""Ptr","child":{"kind":"UInt16"}},
    rulesLength: {"kind":"Int32"},
    text: {"kind""Ptr","child":{"kind":"UInt16"}},
    textLength: {"kind":"Int32"},
    parseErr: {"kind""Ptr","child":Windows.Win32.Intl.UParseError},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubrk_openBinaryRules(
    binaryRules: {"kind""Ptr","child":{"kind":"Byte"}},
    rulesLength: {"kind":"Int32"},
    text: {"kind""Ptr","child":{"kind":"UInt16"}},
    textLength: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubrk_safeClone(
    bi: {"kind""Ptr","child":Windows.Win32.Intl.UBreakIterator},
    stackBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    pBufferSize: {"kind""Ptr","child":{"kind":"Int32"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubrk_close(
    bi: {"kind""Ptr","child":Windows.Win32.Intl.UBreakIterator},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubrk_setText(
    bi: {"kind""Ptr","child":Windows.Win32.Intl.UBreakIterator},
    text: {"kind""Ptr","child":{"kind":"UInt16"}},
    textLength: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubrk_setUText(
    bi: {"kind""Ptr","child":Windows.Win32.Intl.UBreakIterator},
    text: {"kind""Ptr","child":Windows.Win32.Intl.UText},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubrk_current(
    bi: {"kind""Ptr","child":Windows.Win32.Intl.UBreakIterator},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubrk_next(
    bi: {"kind""Ptr","child":Windows.Win32.Intl.UBreakIterator},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubrk_previous(
    bi: {"kind""Ptr","child":Windows.Win32.Intl.UBreakIterator},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubrk_first(
    bi: {"kind""Ptr","child":Windows.Win32.Intl.UBreakIterator},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubrk_last(
    bi: {"kind""Ptr","child":Windows.Win32.Intl.UBreakIterator},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubrk_preceding(
    bi: {"kind""Ptr","child":Windows.Win32.Intl.UBreakIterator},
    offset: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubrk_following(
    bi: {"kind""Ptr","child":Windows.Win32.Intl.UBreakIterator},
    offset: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubrk_getAvailable(
    index: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubrk_countAvailable(

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubrk_isBoundary(
    bi: {"kind""Ptr","child":Windows.Win32.Intl.UBreakIterator},
    offset: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubrk_getRuleStatus(
    bi: {"kind""Ptr","child":Windows.Win32.Intl.UBreakIterator},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubrk_getRuleStatusVec(
    bi: {"kind""Ptr","child":Windows.Win32.Intl.UBreakIterator},
    fillInVec: {"kind""Ptr","child":{"kind":"Int32"}},
    capacity: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubrk_getLocaleByType(
    bi: {"kind""Ptr","child":Windows.Win32.Intl.UBreakIterator},
    type: Windows.Win32.Intl.ULocDataLocaleType,
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubrk_refreshUText(
    bi: {"kind""Ptr","child":Windows.Win32.Intl.UBreakIterator},
    text: {"kind""Ptr","child":Windows.Win32.Intl.UText},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ubrk_getBinaryRules(
    bi: {"kind""Ptr","child":Windows.Win32.Intl.UBreakIterator},
    binaryRules: {"kind""Ptr","child":{"kind":"Byte"}},
    rulesCapacity: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_getDataVersion(
    dataVersionFillin: {"kind""Ptr","child":{"kind":"Byte"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_openTimeZoneIDEnumeration(
    zoneType: Windows.Win32.Intl.USystemTimeZoneType,
    region: {"kind""Ptr","child":{"kind":"SByte"}},
    rawOffset: {"kind""Ptr","child":{"kind":"Int32"}},
    ec: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_openTimeZones(
    ec: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_openCountryTimeZones(
    country: {"kind""Ptr","child":{"kind":"SByte"}},
    ec: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_getDefaultTimeZone(
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultCapacity: {"kind":"Int32"},
    ec: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_setDefaultTimeZone(
    zoneID: {"kind""Ptr","child":{"kind":"UInt16"}},
    ec: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_getDSTSavings(
    zoneID: {"kind""Ptr","child":{"kind":"UInt16"}},
    ec: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_getNow(

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_open(
    zoneID: {"kind""Ptr","child":{"kind":"UInt16"}},
    len: {"kind":"Int32"},
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    type: Windows.Win32.Intl.UCalendarType,
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_close(
    cal: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_clone(
    cal: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_setTimeZone(
    cal: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    zoneID: {"kind""Ptr","child":{"kind":"UInt16"}},
    len: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_getTimeZoneID(
    cal: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultLength: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_getTimeZoneDisplayName(
    cal: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    type: Windows.Win32.Intl.UCalendarDisplayNameType,
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultLength: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_inDaylightTime(
    cal: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_setGregorianChange(
    cal: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    date: {"kind":"Double"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_getGregorianChange(
    cal: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_getAttribute(
    cal: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    attr: Windows.Win32.Intl.UCalendarAttribute,

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_setAttribute(
    cal: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    attr: Windows.Win32.Intl.UCalendarAttribute,
    newValue: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_getAvailable(
    localeIndex: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_countAvailable(

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_getMillis(
    cal: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_setMillis(
    cal: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    dateTime: {"kind":"Double"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_setDate(
    cal: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    year: {"kind":"Int32"},
    month: {"kind":"Int32"},
    date: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_setDateTime(
    cal: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    year: {"kind":"Int32"},
    month: {"kind":"Int32"},
    date: {"kind":"Int32"},
    hour: {"kind":"Int32"},
    minute: {"kind":"Int32"},
    second: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_equivalentTo(
    cal1: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    cal2: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_add(
    cal: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    field: Windows.Win32.Intl.UCalendarDateFields,
    amount: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_roll(
    cal: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    field: Windows.Win32.Intl.UCalendarDateFields,
    amount: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_get(
    cal: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    field: Windows.Win32.Intl.UCalendarDateFields,
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_set(
    cal: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    field: Windows.Win32.Intl.UCalendarDateFields,
    value: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_isSet(
    cal: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    field: Windows.Win32.Intl.UCalendarDateFields,

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_clearField(
    cal: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    field: Windows.Win32.Intl.UCalendarDateFields,

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_clear(
    calendar: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_getLimit(
    cal: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    field: Windows.Win32.Intl.UCalendarDateFields,
    type: Windows.Win32.Intl.UCalendarLimitType,
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_getLocaleByType(
    cal: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    type: Windows.Win32.Intl.ULocDataLocaleType,
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_getTZDataVersion(
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_getCanonicalTimeZoneID(
    id: {"kind""Ptr","child":{"kind":"UInt16"}},
    len: {"kind":"Int32"},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultCapacity: {"kind":"Int32"},
    isSystemID: {"kind""Ptr","child":{"kind":"SByte"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_getType(
    cal: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_getKeywordValuesForLocale(
    key: {"kind""Ptr","child":{"kind":"SByte"}},
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    commonlyUsed: {"kind":"SByte"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_getDayOfWeekType(
    cal: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    dayOfWeek: Windows.Win32.Intl.UCalendarDaysOfWeek,
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_getWeekendTransition(
    cal: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    dayOfWeek: Windows.Win32.Intl.UCalendarDaysOfWeek,
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_isWeekend(
    cal: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    date: {"kind":"Double"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_getFieldDifference(
    cal: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    target: {"kind":"Double"},
    field: Windows.Win32.Intl.UCalendarDateFields,
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_getTimeZoneTransitionDate(
    cal: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    type: Windows.Win32.Intl.UTimeZoneTransitionType,
    transition: {"kind""Ptr","child":{"kind":"Double"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_getWindowsTimeZoneID(
    id: {"kind""Ptr","child":{"kind":"UInt16"}},
    len: {"kind":"Int32"},
    winid: {"kind""Ptr","child":{"kind":"UInt16"}},
    winidCapacity: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucal_getTimeZoneIDForWindowsID(
    winid: {"kind""Ptr","child":{"kind":"UInt16"}},
    len: {"kind":"Int32"},
    region: {"kind""Ptr","child":{"kind":"SByte"}},
    id: {"kind""Ptr","child":{"kind":"UInt16"}},
    idCapacity: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_open(
    loc: {"kind""Ptr","child":{"kind":"SByte"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_openRules(
    rules: {"kind""Ptr","child":{"kind":"UInt16"}},
    rulesLength: {"kind":"Int32"},
    normalizationMode: Windows.Win32.Intl.UColAttributeValue,
    strength: Windows.Win32.Intl.UColAttributeValue,
    parseError: {"kind""Ptr","child":Windows.Win32.Intl.UParseError},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_getContractionsAndExpansions(
    coll: {"kind""Ptr","child":Windows.Win32.Intl.UCollator},
    contractions: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    expansions: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    addPrefixes: {"kind":"SByte"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_close(
    coll: {"kind""Ptr","child":Windows.Win32.Intl.UCollator},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_strcoll(
    coll: {"kind""Ptr","child":Windows.Win32.Intl.UCollator},
    source: {"kind""Ptr","child":{"kind":"UInt16"}},
    sourceLength: {"kind":"Int32"},
    target: {"kind""Ptr","child":{"kind":"UInt16"}},
    targetLength: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_strcollUTF8(
    coll: {"kind""Ptr","child":Windows.Win32.Intl.UCollator},
    source: {"kind""Ptr","child":{"kind":"SByte"}},
    sourceLength: {"kind":"Int32"},
    target: {"kind""Ptr","child":{"kind":"SByte"}},
    targetLength: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_greater(
    coll: {"kind""Ptr","child":Windows.Win32.Intl.UCollator},
    source: {"kind""Ptr","child":{"kind":"UInt16"}},
    sourceLength: {"kind":"Int32"},
    target: {"kind""Ptr","child":{"kind":"UInt16"}},
    targetLength: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_greaterOrEqual(
    coll: {"kind""Ptr","child":Windows.Win32.Intl.UCollator},
    source: {"kind""Ptr","child":{"kind":"UInt16"}},
    sourceLength: {"kind":"Int32"},
    target: {"kind""Ptr","child":{"kind":"UInt16"}},
    targetLength: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_equal(
    coll: {"kind""Ptr","child":Windows.Win32.Intl.UCollator},
    source: {"kind""Ptr","child":{"kind":"UInt16"}},
    sourceLength: {"kind":"Int32"},
    target: {"kind""Ptr","child":{"kind":"UInt16"}},
    targetLength: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_strcollIter(
    coll: {"kind""Ptr","child":Windows.Win32.Intl.UCollator},
    sIter: {"kind""Ptr","child":Windows.Win32.Intl.UCharIterator},
    tIter: {"kind""Ptr","child":Windows.Win32.Intl.UCharIterator},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_getStrength(
    coll: {"kind""Ptr","child":Windows.Win32.Intl.UCollator},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_setStrength(
    coll: {"kind""Ptr","child":Windows.Win32.Intl.UCollator},
    strength: Windows.Win32.Intl.UColAttributeValue,

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_getReorderCodes(
    coll: {"kind""Ptr","child":Windows.Win32.Intl.UCollator},
    dest: {"kind""Ptr","child":{"kind":"Int32"}},
    destCapacity: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_setReorderCodes(
    coll: {"kind""Ptr","child":Windows.Win32.Intl.UCollator},
    reorderCodes: {"kind""Ptr","child":{"kind":"Int32"}},
    reorderCodesLength: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_getEquivalentReorderCodes(
    reorderCode: {"kind":"Int32"},
    dest: {"kind""Ptr","child":{"kind":"Int32"}},
    destCapacity: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_getDisplayName(
    objLoc: {"kind""Ptr","child":{"kind":"SByte"}},
    dispLoc: {"kind""Ptr","child":{"kind":"SByte"}},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultLength: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_getAvailable(
    localeIndex: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_countAvailable(

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_openAvailableLocales(
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_getKeywords(
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_getKeywordValues(
    keyword: {"kind""Ptr","child":{"kind":"SByte"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_getKeywordValuesForLocale(
    key: {"kind""Ptr","child":{"kind":"SByte"}},
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    commonlyUsed: {"kind":"SByte"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_getFunctionalEquivalent(
    result: {"kind""Ptr","child":{"kind":"SByte"}},
    resultCapacity: {"kind":"Int32"},
    keyword: {"kind""Ptr","child":{"kind":"SByte"}},
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    isAvailable: {"kind""Ptr","child":{"kind":"SByte"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_getRules(
    coll: {"kind""Ptr","child":Windows.Win32.Intl.UCollator},
    length: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_getSortKey(
    coll: {"kind""Ptr","child":Windows.Win32.Intl.UCollator},
    source: {"kind""Ptr","child":{"kind":"UInt16"}},
    sourceLength: {"kind":"Int32"},
    result: {"kind""Ptr","child":{"kind":"Byte"}},
    resultLength: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_nextSortKeyPart(
    coll: {"kind""Ptr","child":Windows.Win32.Intl.UCollator},
    iter: {"kind""Ptr","child":Windows.Win32.Intl.UCharIterator},
    state: {"kind""Ptr","child":{"kind":"UInt32"}},
    dest: {"kind""Ptr","child":{"kind":"Byte"}},
    count: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_getBound(
    source: {"kind""Ptr","child":{"kind":"Byte"}},
    sourceLength: {"kind":"Int32"},
    boundType: Windows.Win32.Intl.UColBoundMode,
    noOfLevels: {"kind":"UInt32"},
    result: {"kind""Ptr","child":{"kind":"Byte"}},
    resultLength: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_getVersion(
    coll: {"kind""Ptr","child":Windows.Win32.Intl.UCollator},
    info: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_getUCAVersion(
    coll: {"kind""Ptr","child":Windows.Win32.Intl.UCollator},
    info: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_mergeSortkeys(
    src1: {"kind""Ptr","child":{"kind":"Byte"}},
    src1Length: {"kind":"Int32"},
    src2: {"kind""Ptr","child":{"kind":"Byte"}},
    src2Length: {"kind":"Int32"},
    dest: {"kind""Ptr","child":{"kind":"Byte"}},
    destCapacity: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_setAttribute(
    coll: {"kind""Ptr","child":Windows.Win32.Intl.UCollator},
    attr: Windows.Win32.Intl.UColAttribute,
    value: Windows.Win32.Intl.UColAttributeValue,
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_getAttribute(
    coll: {"kind""Ptr","child":Windows.Win32.Intl.UCollator},
    attr: Windows.Win32.Intl.UColAttribute,
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_setMaxVariable(
    coll: {"kind""Ptr","child":Windows.Win32.Intl.UCollator},
    group: Windows.Win32.Intl.UColReorderCode,
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_getMaxVariable(
    coll: {"kind""Ptr","child":Windows.Win32.Intl.UCollator},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_getVariableTop(
    coll: {"kind""Ptr","child":Windows.Win32.Intl.UCollator},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_safeClone(
    coll: {"kind""Ptr","child":Windows.Win32.Intl.UCollator},
    stackBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    pBufferSize: {"kind""Ptr","child":{"kind":"Int32"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_getRulesEx(
    coll: {"kind""Ptr","child":Windows.Win32.Intl.UCollator},
    delta: Windows.Win32.Intl.UColRuleOption,
    buffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    bufferLen: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_getLocaleByType(
    coll: {"kind""Ptr","child":Windows.Win32.Intl.UCollator},
    type: Windows.Win32.Intl.ULocDataLocaleType,
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_getTailoredSet(
    coll: {"kind""Ptr","child":Windows.Win32.Intl.UCollator},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_cloneBinary(
    coll: {"kind""Ptr","child":Windows.Win32.Intl.UCollator},
    buffer: {"kind""Ptr","child":{"kind":"Byte"}},
    capacity: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_openBinary(
    bin: {"kind""Ptr","child":{"kind":"Byte"}},
    length: {"kind":"Int32"},
    base: {"kind""Ptr","child":Windows.Win32.Intl.UCollator},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_openElements(
    coll: {"kind""Ptr","child":Windows.Win32.Intl.UCollator},
    text: {"kind""Ptr","child":{"kind":"UInt16"}},
    textLength: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_keyHashCode(
    key: {"kind""Ptr","child":{"kind":"Byte"}},
    length: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_closeElements(
    elems: {"kind""Ptr","child":Windows.Win32.Intl.UCollationElements},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_reset(
    elems: {"kind""Ptr","child":Windows.Win32.Intl.UCollationElements},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_next(
    elems: {"kind""Ptr","child":Windows.Win32.Intl.UCollationElements},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_previous(
    elems: {"kind""Ptr","child":Windows.Win32.Intl.UCollationElements},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_getMaxExpansion(
    elems: {"kind""Ptr","child":Windows.Win32.Intl.UCollationElements},
    order: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_setText(
    elems: {"kind""Ptr","child":Windows.Win32.Intl.UCollationElements},
    text: {"kind""Ptr","child":{"kind":"UInt16"}},
    textLength: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_getOffset(
    elems: {"kind""Ptr","child":Windows.Win32.Intl.UCollationElements},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_setOffset(
    elems: {"kind""Ptr","child":Windows.Win32.Intl.UCollationElements},
    offset: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_primaryOrder(
    order: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_secondaryOrder(
    order: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucol_tertiaryOrder(
    order: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucsdet_open(
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucsdet_close(
    ucsd: {"kind""Ptr","child":Windows.Win32.Intl.UCharsetDetector},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucsdet_setText(
    ucsd: {"kind""Ptr","child":Windows.Win32.Intl.UCharsetDetector},
    textIn: {"kind""Ptr","child":{"kind":"SByte"}},
    len: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucsdet_setDeclaredEncoding(
    ucsd: {"kind""Ptr","child":Windows.Win32.Intl.UCharsetDetector},
    encoding: {"kind""Ptr","child":{"kind":"SByte"}},
    length: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucsdet_detect(
    ucsd: {"kind""Ptr","child":Windows.Win32.Intl.UCharsetDetector},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucsdet_detectAll(
    ucsd: {"kind""Ptr","child":Windows.Win32.Intl.UCharsetDetector},
    matchesFound: {"kind""Ptr","child":{"kind":"Int32"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucsdet_getName(
    ucsm: {"kind""Ptr","child":Windows.Win32.Intl.UCharsetMatch},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucsdet_getConfidence(
    ucsm: {"kind""Ptr","child":Windows.Win32.Intl.UCharsetMatch},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucsdet_getLanguage(
    ucsm: {"kind""Ptr","child":Windows.Win32.Intl.UCharsetMatch},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucsdet_getUChars(
    ucsm: {"kind""Ptr","child":Windows.Win32.Intl.UCharsetMatch},
    buf: {"kind""Ptr","child":{"kind":"UInt16"}},
    cap: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucsdet_getAllDetectableCharsets(
    ucsd: {"kind""Ptr","child":Windows.Win32.Intl.UCharsetDetector},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucsdet_isInputFilterEnabled(
    ucsd: {"kind""Ptr","child":Windows.Win32.Intl.UCharsetDetector},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ucsdet_enableInputFilter(
    ucsd: {"kind""Ptr","child":Windows.Win32.Intl.UCharsetDetector},
    filter: {"kind":"SByte"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udatpg_open(
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udatpg_openEmpty(
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udatpg_close(
    dtpg: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udatpg_clone(
    dtpg: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udatpg_getBestPattern(
    dtpg: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    skeleton: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},
    bestPattern: {"kind""Ptr","child":{"kind":"UInt16"}},
    capacity: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udatpg_getBestPatternWithOptions(
    dtpg: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    skeleton: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},
    options: Windows.Win32.Intl.UDateTimePatternMatchOptions,
    bestPattern: {"kind""Ptr","child":{"kind":"UInt16"}},
    capacity: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udatpg_getSkeleton(
    unusedDtpg: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pattern: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},
    skeleton: {"kind""Ptr","child":{"kind":"UInt16"}},
    capacity: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udatpg_getBaseSkeleton(
    unusedDtpg: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pattern: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},
    baseSkeleton: {"kind""Ptr","child":{"kind":"UInt16"}},
    capacity: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udatpg_addPattern(
    dtpg: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pattern: {"kind""Ptr","child":{"kind":"UInt16"}},
    patternLength: {"kind":"Int32"},
    override: {"kind":"SByte"},
    conflictingPattern: {"kind""Ptr","child":{"kind":"UInt16"}},
    capacity: {"kind":"Int32"},
    pLength: {"kind""Ptr","child":{"kind":"Int32"}},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udatpg_setAppendItemFormat(
    dtpg: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    field: Windows.Win32.Intl.UDateTimePatternField,
    value: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udatpg_getAppendItemFormat(
    dtpg: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    field: Windows.Win32.Intl.UDateTimePatternField,
    pLength: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udatpg_setAppendItemName(
    dtpg: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    field: Windows.Win32.Intl.UDateTimePatternField,
    value: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udatpg_getAppendItemName(
    dtpg: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    field: Windows.Win32.Intl.UDateTimePatternField,
    pLength: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udatpg_getFieldDisplayName(
    dtpg: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    field: Windows.Win32.Intl.UDateTimePatternField,
    width: Windows.Win32.Intl.UDateTimePGDisplayWidth,
    fieldName: {"kind""Ptr","child":{"kind":"UInt16"}},
    capacity: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udatpg_setDateTimeFormat(
    dtpg: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    dtFormat: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udatpg_getDateTimeFormat(
    dtpg: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pLength: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udatpg_setDecimal(
    dtpg: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    decimal: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udatpg_getDecimal(
    dtpg: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pLength: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udatpg_replaceFieldTypes(
    dtpg: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pattern: {"kind""Ptr","child":{"kind":"UInt16"}},
    patternLength: {"kind":"Int32"},
    skeleton: {"kind""Ptr","child":{"kind":"UInt16"}},
    skeletonLength: {"kind":"Int32"},
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    destCapacity: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udatpg_replaceFieldTypesWithOptions(
    dtpg: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pattern: {"kind""Ptr","child":{"kind":"UInt16"}},
    patternLength: {"kind":"Int32"},
    skeleton: {"kind""Ptr","child":{"kind":"UInt16"}},
    skeletonLength: {"kind":"Int32"},
    options: Windows.Win32.Intl.UDateTimePatternMatchOptions,
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    destCapacity: {"kind":"Int32"},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udatpg_openSkeletons(
    dtpg: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udatpg_openBaseSkeletons(
    dtpg: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udatpg_getPatternForSkeleton(
    dtpg: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    skeleton: {"kind""Ptr","child":{"kind":"UInt16"}},
    skeletonLength: {"kind":"Int32"},
    pLength: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ufieldpositer_open(
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ufieldpositer_close(
    fpositer: {"kind""Ptr","child":Windows.Win32.Intl.UFieldPositionIterator},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ufieldpositer_next(
    fpositer: {"kind""Ptr","child":Windows.Win32.Intl.UFieldPositionIterator},
    beginIndex: {"kind""Ptr","child":{"kind":"Int32"}},
    endIndex: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ufmt_open(
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ufmt_close(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ufmt_getType(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ufmt_isNumeric(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ufmt_getDate(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ufmt_getDouble(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ufmt_getLong(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ufmt_getInt64(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ufmt_getObject(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ufmt_getUChars(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    len: {"kind""Ptr","child":{"kind":"Int32"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ufmt_getArrayLength(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ufmt_getArrayItemByIndex(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    n: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ufmt_getDecNumChars(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    len: {"kind""Ptr","child":{"kind":"Int32"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udtitvfmt_open(
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    skeleton: {"kind""Ptr","child":{"kind":"UInt16"}},
    skeletonLength: {"kind":"Int32"},
    tzID: {"kind""Ptr","child":{"kind":"UInt16"}},
    tzIDLength: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udtitvfmt_close(
    formatter: {"kind""Ptr","child":Windows.Win32.Intl.UDateIntervalFormat},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udtitvfmt_format(
    formatter: {"kind""Ptr","child":Windows.Win32.Intl.UDateIntervalFormat},
    fromDate: {"kind":"Double"},
    toDate: {"kind":"Double"},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultCapacity: {"kind":"Int32"},
    position: {"kind""Ptr","child":Windows.Win32.Intl.UFieldPosition},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ugender_getInstance(
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ugender_getListGender(
    genderInfo: {"kind""Ptr","child":Windows.Win32.Intl.UGenderInfo},
    genders: {"kind""Ptr","child":Windows.Win32.Intl.UGender},
    size: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ulistfmt_open(
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ulistfmt_close(
    listfmt: {"kind""Ptr","child":Windows.Win32.Intl.UListFormatter},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ulistfmt_format(
    listfmt: {"kind""Ptr","child":Windows.Win32.Intl.UListFormatter},
    strings: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    stringLengths: {"kind""Ptr","child":{"kind":"Int32"}},
    stringCount: {"kind":"Int32"},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultCapacity: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ulocdata_open(
    localeID: {"kind""Ptr","child":{"kind":"SByte"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ulocdata_close(
    uld: {"kind""Ptr","child":Windows.Win32.Intl.ULocaleData},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ulocdata_setNoSubstitute(
    uld: {"kind""Ptr","child":Windows.Win32.Intl.ULocaleData},
    setting: {"kind":"SByte"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ulocdata_getNoSubstitute(
    uld: {"kind""Ptr","child":Windows.Win32.Intl.ULocaleData},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ulocdata_getExemplarSet(
    uld: {"kind""Ptr","child":Windows.Win32.Intl.ULocaleData},
    fillIn: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    options: {"kind":"UInt32"},
    extype: Windows.Win32.Intl.ULocaleDataExemplarSetType,
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ulocdata_getDelimiter(
    uld: {"kind""Ptr","child":Windows.Win32.Intl.ULocaleData},
    type: Windows.Win32.Intl.ULocaleDataDelimiterType,
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultLength: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ulocdata_getMeasurementSystem(
    localeID: {"kind""Ptr","child":{"kind":"SByte"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ulocdata_getPaperSize(
    localeID: {"kind""Ptr","child":{"kind":"SByte"}},
    height: {"kind""Ptr","child":{"kind":"Int32"}},
    width: {"kind""Ptr","child":{"kind":"Int32"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ulocdata_getCLDRVersion(
    versionArray: {"kind""Ptr","child":{"kind":"Byte"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ulocdata_getLocaleDisplayPattern(
    uld: {"kind""Ptr","child":Windows.Win32.Intl.ULocaleData},
    pattern: {"kind""Ptr","child":{"kind":"UInt16"}},
    patternCapacity: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ulocdata_getLocaleSeparator(
    uld: {"kind""Ptr","child":Windows.Win32.Intl.ULocaleData},
    separator: {"kind""Ptr","child":{"kind":"UInt16"}},
    separatorCapacity: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_formatMessage(
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    pattern: {"kind""Ptr","child":{"kind":"UInt16"}},
    patternLength: {"kind":"Int32"},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultLength: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_vformatMessage(
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    pattern: {"kind""Ptr","child":{"kind":"UInt16"}},
    patternLength: {"kind":"Int32"},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultLength: {"kind":"Int32"},
    ap: {"kind""Ptr","child":{"kind":"SByte"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_parseMessage(
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    pattern: {"kind""Ptr","child":{"kind":"UInt16"}},
    patternLength: {"kind":"Int32"},
    source: {"kind""Ptr","child":{"kind":"UInt16"}},
    sourceLength: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_vparseMessage(
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    pattern: {"kind""Ptr","child":{"kind":"UInt16"}},
    patternLength: {"kind":"Int32"},
    source: {"kind""Ptr","child":{"kind":"UInt16"}},
    sourceLength: {"kind":"Int32"},
    ap: {"kind""Ptr","child":{"kind":"SByte"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_formatMessageWithError(
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    pattern: {"kind""Ptr","child":{"kind":"UInt16"}},
    patternLength: {"kind":"Int32"},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultLength: {"kind":"Int32"},
    parseError: {"kind""Ptr","child":Windows.Win32.Intl.UParseError},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_vformatMessageWithError(
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    pattern: {"kind""Ptr","child":{"kind":"UInt16"}},
    patternLength: {"kind":"Int32"},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultLength: {"kind":"Int32"},
    parseError: {"kind""Ptr","child":Windows.Win32.Intl.UParseError},
    ap: {"kind""Ptr","child":{"kind":"SByte"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_parseMessageWithError(
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    pattern: {"kind""Ptr","child":{"kind":"UInt16"}},
    patternLength: {"kind":"Int32"},
    source: {"kind""Ptr","child":{"kind":"UInt16"}},
    sourceLength: {"kind":"Int32"},
    parseError: {"kind""Ptr","child":Windows.Win32.Intl.UParseError},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn u_vparseMessageWithError(
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    pattern: {"kind""Ptr","child":{"kind":"UInt16"}},
    patternLength: {"kind":"Int32"},
    source: {"kind""Ptr","child":{"kind":"UInt16"}},
    sourceLength: {"kind":"Int32"},
    ap: {"kind""Ptr","child":{"kind":"SByte"}},
    parseError: {"kind""Ptr","child":Windows.Win32.Intl.UParseError},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn umsg_open(
    pattern: {"kind""Ptr","child":{"kind":"UInt16"}},
    patternLength: {"kind":"Int32"},
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    parseError: {"kind""Ptr","child":Windows.Win32.Intl.UParseError},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn umsg_close(
    format: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn umsg_clone(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn umsg_setLocale(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    locale: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn umsg_getLocale(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn umsg_applyPattern(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pattern: {"kind""Ptr","child":{"kind":"UInt16"}},
    patternLength: {"kind":"Int32"},
    parseError: {"kind""Ptr","child":Windows.Win32.Intl.UParseError},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn umsg_toPattern(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultLength: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn umsg_format(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultLength: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn umsg_vformat(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultLength: {"kind":"Int32"},
    ap: {"kind""Ptr","child":{"kind":"SByte"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn umsg_parse(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    source: {"kind""Ptr","child":{"kind":"UInt16"}},
    sourceLength: {"kind":"Int32"},
    count: {"kind""Ptr","child":{"kind":"Int32"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn umsg_vparse(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    source: {"kind""Ptr","child":{"kind":"UInt16"}},
    sourceLength: {"kind":"Int32"},
    count: {"kind""Ptr","child":{"kind":"Int32"}},
    ap: {"kind""Ptr","child":{"kind":"SByte"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn umsg_autoQuoteApostrophe(
    pattern: {"kind""Ptr","child":{"kind":"UInt16"}},
    patternLength: {"kind":"Int32"},
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    destCapacity: {"kind":"Int32"},
    ec: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unum_open(
    style: Windows.Win32.Intl.UNumberFormatStyle,
    pattern: {"kind""Ptr","child":{"kind":"UInt16"}},
    patternLength: {"kind":"Int32"},
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    parseErr: {"kind""Ptr","child":Windows.Win32.Intl.UParseError},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unum_close(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unum_clone(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unum_format(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    number: {"kind":"Int32"},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultLength: {"kind":"Int32"},
    pos: {"kind""Ptr","child":Windows.Win32.Intl.UFieldPosition},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unum_formatInt64(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    number: {"kind":"Int64"},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultLength: {"kind":"Int32"},
    pos: {"kind""Ptr","child":Windows.Win32.Intl.UFieldPosition},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unum_formatDouble(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    number: {"kind":"Double"},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultLength: {"kind":"Int32"},
    pos: {"kind""Ptr","child":Windows.Win32.Intl.UFieldPosition},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unum_formatDoubleForFields(
    format: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    number: {"kind":"Double"},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultLength: {"kind":"Int32"},
    fpositer: {"kind""Ptr","child":Windows.Win32.Intl.UFieldPositionIterator},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unum_formatDecimal(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    number: {"kind""Ptr","child":{"kind":"SByte"}},
    length: {"kind":"Int32"},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultLength: {"kind":"Int32"},
    pos: {"kind""Ptr","child":Windows.Win32.Intl.UFieldPosition},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unum_formatDoubleCurrency(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    number: {"kind":"Double"},
    currency: {"kind""Ptr","child":{"kind":"UInt16"}},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultLength: {"kind":"Int32"},
    pos: {"kind""Ptr","child":Windows.Win32.Intl.UFieldPosition},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unum_formatUFormattable(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    number: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultLength: {"kind":"Int32"},
    pos: {"kind""Ptr","child":Windows.Win32.Intl.UFieldPosition},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unum_parse(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    text: {"kind""Ptr","child":{"kind":"UInt16"}},
    textLength: {"kind":"Int32"},
    parsePos: {"kind""Ptr","child":{"kind":"Int32"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unum_parseInt64(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    text: {"kind""Ptr","child":{"kind":"UInt16"}},
    textLength: {"kind":"Int32"},
    parsePos: {"kind""Ptr","child":{"kind":"Int32"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unum_parseDouble(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    text: {"kind""Ptr","child":{"kind":"UInt16"}},
    textLength: {"kind":"Int32"},
    parsePos: {"kind""Ptr","child":{"kind":"Int32"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unum_parseDecimal(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    text: {"kind""Ptr","child":{"kind":"UInt16"}},
    textLength: {"kind":"Int32"},
    parsePos: {"kind""Ptr","child":{"kind":"Int32"}},
    outBuf: {"kind""Ptr","child":{"kind":"SByte"}},
    outBufLength: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unum_parseDoubleCurrency(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    text: {"kind""Ptr","child":{"kind":"UInt16"}},
    textLength: {"kind":"Int32"},
    parsePos: {"kind""Ptr","child":{"kind":"Int32"}},
    currency: {"kind""Ptr","child":{"kind":"UInt16"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unum_parseToUFormattable(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    result: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    text: {"kind""Ptr","child":{"kind":"UInt16"}},
    textLength: {"kind":"Int32"},
    parsePos: {"kind""Ptr","child":{"kind":"Int32"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unum_applyPattern(
    format: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    localized: {"kind":"SByte"},
    pattern: {"kind""Ptr","child":{"kind":"UInt16"}},
    patternLength: {"kind":"Int32"},
    parseError: {"kind""Ptr","child":Windows.Win32.Intl.UParseError},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unum_getAvailable(
    localeIndex: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unum_countAvailable(

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unum_getAttribute(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    attr: Windows.Win32.Intl.UNumberFormatAttribute,

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unum_setAttribute(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    attr: Windows.Win32.Intl.UNumberFormatAttribute,
    newValue: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unum_getDoubleAttribute(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    attr: Windows.Win32.Intl.UNumberFormatAttribute,

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unum_setDoubleAttribute(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    attr: Windows.Win32.Intl.UNumberFormatAttribute,
    newValue: {"kind":"Double"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unum_getTextAttribute(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    tag: Windows.Win32.Intl.UNumberFormatTextAttribute,
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultLength: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unum_setTextAttribute(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    tag: Windows.Win32.Intl.UNumberFormatTextAttribute,
    newValue: {"kind""Ptr","child":{"kind":"UInt16"}},
    newValueLength: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unum_toPattern(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    isPatternLocalized: {"kind":"SByte"},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultLength: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unum_getSymbol(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    symbol: Windows.Win32.Intl.UNumberFormatSymbol,
    buffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    size: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unum_setSymbol(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    symbol: Windows.Win32.Intl.UNumberFormatSymbol,
    value: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unum_getLocaleByType(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    type: Windows.Win32.Intl.ULocDataLocaleType,
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unum_setContext(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    value: Windows.Win32.Intl.UDisplayContext,
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unum_getContext(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    type: Windows.Win32.Intl.UDisplayContextType,
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udat_toCalendarDateField(
    field: Windows.Win32.Intl.UDateFormatField,

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udat_open(
    timeStyle: Windows.Win32.Intl.UDateFormatStyle,
    dateStyle: Windows.Win32.Intl.UDateFormatStyle,
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    tzID: {"kind""Ptr","child":{"kind":"UInt16"}},
    tzIDLength: {"kind":"Int32"},
    pattern: {"kind""Ptr","child":{"kind":"UInt16"}},
    patternLength: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udat_close(
    format: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udat_getBooleanAttribute(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    attr: Windows.Win32.Intl.UDateFormatBooleanAttribute,
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udat_setBooleanAttribute(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    attr: Windows.Win32.Intl.UDateFormatBooleanAttribute,
    newValue: {"kind":"SByte"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udat_clone(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udat_format(
    format: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    dateToFormat: {"kind":"Double"},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultLength: {"kind":"Int32"},
    position: {"kind""Ptr","child":Windows.Win32.Intl.UFieldPosition},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udat_formatCalendar(
    format: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    calendar: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    capacity: {"kind":"Int32"},
    position: {"kind""Ptr","child":Windows.Win32.Intl.UFieldPosition},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udat_formatForFields(
    format: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    dateToFormat: {"kind":"Double"},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultLength: {"kind":"Int32"},
    fpositer: {"kind""Ptr","child":Windows.Win32.Intl.UFieldPositionIterator},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udat_formatCalendarForFields(
    format: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    calendar: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    capacity: {"kind":"Int32"},
    fpositer: {"kind""Ptr","child":Windows.Win32.Intl.UFieldPositionIterator},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udat_parse(
    format: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    text: {"kind""Ptr","child":{"kind":"UInt16"}},
    textLength: {"kind":"Int32"},
    parsePos: {"kind""Ptr","child":{"kind":"Int32"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udat_parseCalendar(
    format: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    calendar: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    text: {"kind""Ptr","child":{"kind":"UInt16"}},
    textLength: {"kind":"Int32"},
    parsePos: {"kind""Ptr","child":{"kind":"Int32"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udat_isLenient(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udat_setLenient(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    isLenient: {"kind":"SByte"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udat_getCalendar(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udat_setCalendar(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    calendarToSet: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udat_getNumberFormat(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udat_getNumberFormatForField(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    field: {"kind":"UInt16"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udat_adoptNumberFormatForFields(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    fields: {"kind""Ptr","child":{"kind":"UInt16"}},
    numberFormatToSet: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udat_setNumberFormat(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    numberFormatToSet: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udat_adoptNumberFormat(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    numberFormatToAdopt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udat_getAvailable(
    localeIndex: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udat_countAvailable(

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udat_get2DigitYearStart(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udat_set2DigitYearStart(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    d: {"kind":"Double"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udat_toPattern(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    localized: {"kind":"SByte"},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultLength: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udat_applyPattern(
    format: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    localized: {"kind":"SByte"},
    pattern: {"kind""Ptr","child":{"kind":"UInt16"}},
    patternLength: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udat_getSymbols(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    type: Windows.Win32.Intl.UDateFormatSymbolType,
    symbolIndex: {"kind":"Int32"},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultLength: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udat_countSymbols(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    type: Windows.Win32.Intl.UDateFormatSymbolType,

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udat_setSymbols(
    format: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    type: Windows.Win32.Intl.UDateFormatSymbolType,
    symbolIndex: {"kind":"Int32"},
    value: {"kind""Ptr","child":{"kind":"UInt16"}},
    valueLength: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udat_getLocaleByType(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    type: Windows.Win32.Intl.ULocDataLocaleType,
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udat_setContext(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    value: Windows.Win32.Intl.UDisplayContext,
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn udat_getContext(
    fmt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    type: Windows.Win32.Intl.UDisplayContextType,
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unumf_openForSkeletonAndLocale(
    skeleton: {"kind""Ptr","child":{"kind":"UInt16"}},
    skeletonLen: {"kind":"Int32"},
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    ec: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unumf_openResult(
    ec: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unumf_formatInt(
    uformatter: {"kind""Ptr","child":Windows.Win32.Intl.UNumberFormatter},
    value: {"kind":"Int64"},
    uresult: {"kind""Ptr","child":Windows.Win32.Intl.UFormattedNumber},
    ec: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unumf_formatDouble(
    uformatter: {"kind""Ptr","child":Windows.Win32.Intl.UNumberFormatter},
    value: {"kind":"Double"},
    uresult: {"kind""Ptr","child":Windows.Win32.Intl.UFormattedNumber},
    ec: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unumf_formatDecimal(
    uformatter: {"kind""Ptr","child":Windows.Win32.Intl.UNumberFormatter},
    value: {"kind""Ptr","child":{"kind":"SByte"}},
    valueLen: {"kind":"Int32"},
    uresult: {"kind""Ptr","child":Windows.Win32.Intl.UFormattedNumber},
    ec: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unumf_resultToString(
    uresult: {"kind""Ptr","child":Windows.Win32.Intl.UFormattedNumber},
    buffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    bufferCapacity: {"kind":"Int32"},
    ec: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unumf_resultNextFieldPosition(
    uresult: {"kind""Ptr","child":Windows.Win32.Intl.UFormattedNumber},
    ufpos: {"kind""Ptr","child":Windows.Win32.Intl.UFieldPosition},
    ec: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unumf_resultGetAllFieldPositions(
    uresult: {"kind""Ptr","child":Windows.Win32.Intl.UFormattedNumber},
    ufpositer: {"kind""Ptr","child":Windows.Win32.Intl.UFieldPositionIterator},
    ec: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unumf_close(
    uformatter: {"kind""Ptr","child":Windows.Win32.Intl.UNumberFormatter},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unumf_closeResult(
    uresult: {"kind""Ptr","child":Windows.Win32.Intl.UFormattedNumber},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unumsys_open(
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unumsys_openByName(
    name: {"kind""Ptr","child":{"kind":"SByte"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unumsys_close(
    unumsys: {"kind""Ptr","child":Windows.Win32.Intl.UNumberingSystem},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unumsys_openAvailableNames(
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unumsys_getName(
    unumsys: {"kind""Ptr","child":Windows.Win32.Intl.UNumberingSystem},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unumsys_isAlgorithmic(
    unumsys: {"kind""Ptr","child":Windows.Win32.Intl.UNumberingSystem},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unumsys_getRadix(
    unumsys: {"kind""Ptr","child":Windows.Win32.Intl.UNumberingSystem},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn unumsys_getDescription(
    unumsys: {"kind""Ptr","child":Windows.Win32.Intl.UNumberingSystem},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultLength: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uplrules_open(
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uplrules_openForType(
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    type: Windows.Win32.Intl.UPluralType,
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uplrules_close(
    uplrules: {"kind""Ptr","child":Windows.Win32.Intl.UPluralRules},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uplrules_select(
    uplrules: {"kind""Ptr","child":Windows.Win32.Intl.UPluralRules},
    number: {"kind":"Double"},
    keyword: {"kind""Ptr","child":{"kind":"UInt16"}},
    capacity: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uplrules_getKeywords(
    uplrules: {"kind""Ptr","child":Windows.Win32.Intl.UPluralRules},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_open(
    pattern: {"kind""Ptr","child":{"kind":"UInt16"}},
    patternLength: {"kind":"Int32"},
    flags: {"kind":"UInt32"},
    pe: {"kind""Ptr","child":Windows.Win32.Intl.UParseError},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_openUText(
    pattern: {"kind""Ptr","child":Windows.Win32.Intl.UText},
    flags: {"kind":"UInt32"},
    pe: {"kind""Ptr","child":Windows.Win32.Intl.UParseError},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_openC(
    pattern: {"kind""Ptr","child":{"kind":"SByte"}},
    flags: {"kind":"UInt32"},
    pe: {"kind""Ptr","child":Windows.Win32.Intl.UParseError},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_close(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_clone(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_pattern(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    patLength: {"kind""Ptr","child":{"kind":"Int32"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_patternUText(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_flags(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_setText(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    text: {"kind""Ptr","child":{"kind":"UInt16"}},
    textLength: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_setUText(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    text: {"kind""Ptr","child":Windows.Win32.Intl.UText},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_getText(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    textLength: {"kind""Ptr","child":{"kind":"Int32"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_getUText(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    dest: {"kind""Ptr","child":Windows.Win32.Intl.UText},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_refreshUText(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    text: {"kind""Ptr","child":Windows.Win32.Intl.UText},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_matches(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    startIndex: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_matches64(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    startIndex: {"kind":"Int64"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_lookingAt(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    startIndex: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_lookingAt64(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    startIndex: {"kind":"Int64"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_find(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    startIndex: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_find64(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    startIndex: {"kind":"Int64"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_findNext(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_groupCount(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_groupNumberFromName(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    groupName: {"kind""Ptr","child":{"kind":"UInt16"}},
    nameLength: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_groupNumberFromCName(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    groupName: {"kind""Ptr","child":{"kind":"SByte"}},
    nameLength: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_group(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    groupNum: {"kind":"Int32"},
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    destCapacity: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_groupUText(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    groupNum: {"kind":"Int32"},
    dest: {"kind""Ptr","child":Windows.Win32.Intl.UText},
    groupLength: {"kind""Ptr","child":{"kind":"Int64"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_start(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    groupNum: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_start64(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    groupNum: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_end(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    groupNum: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_end64(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    groupNum: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_reset(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    index: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_reset64(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    index: {"kind":"Int64"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_setRegion(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    regionStart: {"kind":"Int32"},
    regionLimit: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_setRegion64(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    regionStart: {"kind":"Int64"},
    regionLimit: {"kind":"Int64"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_setRegionAndStart(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    regionStart: {"kind":"Int64"},
    regionLimit: {"kind":"Int64"},
    startIndex: {"kind":"Int64"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_regionStart(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_regionStart64(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_regionEnd(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_regionEnd64(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_hasTransparentBounds(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_useTransparentBounds(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    b: {"kind":"SByte"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_hasAnchoringBounds(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_useAnchoringBounds(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    b: {"kind":"SByte"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_hitEnd(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_requireEnd(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_replaceAll(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    replacementText: {"kind""Ptr","child":{"kind":"UInt16"}},
    replacementLength: {"kind":"Int32"},
    destBuf: {"kind""Ptr","child":{"kind":"UInt16"}},
    destCapacity: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_replaceAllUText(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    replacement: {"kind""Ptr","child":Windows.Win32.Intl.UText},
    dest: {"kind""Ptr","child":Windows.Win32.Intl.UText},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_replaceFirst(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    replacementText: {"kind""Ptr","child":{"kind":"UInt16"}},
    replacementLength: {"kind":"Int32"},
    destBuf: {"kind""Ptr","child":{"kind":"UInt16"}},
    destCapacity: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_replaceFirstUText(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    replacement: {"kind""Ptr","child":Windows.Win32.Intl.UText},
    dest: {"kind""Ptr","child":Windows.Win32.Intl.UText},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_appendReplacement(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    replacementText: {"kind""Ptr","child":{"kind":"UInt16"}},
    replacementLength: {"kind":"Int32"},
    destBuf: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    destCapacity: {"kind""Ptr","child":{"kind":"Int32"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_appendReplacementUText(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    replacementText: {"kind""Ptr","child":Windows.Win32.Intl.UText},
    dest: {"kind""Ptr","child":Windows.Win32.Intl.UText},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_appendTail(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    destBuf: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    destCapacity: {"kind""Ptr","child":{"kind":"Int32"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_appendTailUText(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    dest: {"kind""Ptr","child":Windows.Win32.Intl.UText},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_split(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    destBuf: {"kind""Ptr","child":{"kind":"UInt16"}},
    destCapacity: {"kind":"Int32"},
    requiredCapacity: {"kind""Ptr","child":{"kind":"Int32"}},
    destFields: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    destFieldsCapacity: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_splitUText(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    destFields: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Intl.UText}},
    destFieldsCapacity: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_setTimeLimit(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    limit: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_getTimeLimit(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_setStackLimit(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    limit: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_getStackLimit(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_setMatchCallback(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    callback: {"kind""Ptr","child":Windows.Win32.Intl.URegexMatchCallback},
    context: {"kind""Ptr","child":{"kind":"Void"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_getMatchCallback(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    callback: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Intl.URegexMatchCallback}},
    context: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_setFindProgressCallback(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    callback: {"kind""Ptr","child":Windows.Win32.Intl.URegexFindProgressCallback},
    context: {"kind""Ptr","child":{"kind":"Void"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregex_getFindProgressCallback(
    regexp: {"kind""Ptr","child":Windows.Win32.Intl.URegularExpression},
    callback: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Intl.URegexFindProgressCallback}},
    context: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregion_getRegionFromCode(
    regionCode: {"kind""Ptr","child":{"kind":"SByte"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregion_getRegionFromNumericCode(
    code: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregion_getAvailable(
    type: Windows.Win32.Intl.URegionType,
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregion_areEqual(
    uregion: {"kind""Ptr","child":Windows.Win32.Intl.URegion},
    otherRegion: {"kind""Ptr","child":Windows.Win32.Intl.URegion},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregion_getContainingRegion(
    uregion: {"kind""Ptr","child":Windows.Win32.Intl.URegion},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregion_getContainingRegionOfType(
    uregion: {"kind""Ptr","child":Windows.Win32.Intl.URegion},
    type: Windows.Win32.Intl.URegionType,

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregion_getContainedRegions(
    uregion: {"kind""Ptr","child":Windows.Win32.Intl.URegion},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregion_getContainedRegionsOfType(
    uregion: {"kind""Ptr","child":Windows.Win32.Intl.URegion},
    type: Windows.Win32.Intl.URegionType,
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregion_contains(
    uregion: {"kind""Ptr","child":Windows.Win32.Intl.URegion},
    otherRegion: {"kind""Ptr","child":Windows.Win32.Intl.URegion},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregion_getPreferredValues(
    uregion: {"kind""Ptr","child":Windows.Win32.Intl.URegion},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregion_getRegionCode(
    uregion: {"kind""Ptr","child":Windows.Win32.Intl.URegion},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregion_getNumericCode(
    uregion: {"kind""Ptr","child":Windows.Win32.Intl.URegion},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uregion_getType(
    uregion: {"kind""Ptr","child":Windows.Win32.Intl.URegion},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ureldatefmt_open(
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    nfToAdopt: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    width: Windows.Win32.Intl.UDateRelativeDateTimeFormatterStyle,
    capitalizationContext: Windows.Win32.Intl.UDisplayContext,
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ureldatefmt_close(
    reldatefmt: {"kind""Ptr","child":Windows.Win32.Intl.URelativeDateTimeFormatter},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ureldatefmt_formatNumeric(
    reldatefmt: {"kind""Ptr","child":Windows.Win32.Intl.URelativeDateTimeFormatter},
    offset: {"kind":"Double"},
    unit: Windows.Win32.Intl.URelativeDateTimeUnit,
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultCapacity: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ureldatefmt_format(
    reldatefmt: {"kind""Ptr","child":Windows.Win32.Intl.URelativeDateTimeFormatter},
    offset: {"kind":"Double"},
    unit: Windows.Win32.Intl.URelativeDateTimeUnit,
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultCapacity: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn ureldatefmt_combineDateAndTime(
    reldatefmt: {"kind""Ptr","child":Windows.Win32.Intl.URelativeDateTimeFormatter},
    relativeDateString: {"kind""Ptr","child":{"kind":"UInt16"}},
    relativeDateStringLen: {"kind":"Int32"},
    timeString: {"kind""Ptr","child":{"kind":"UInt16"}},
    timeStringLen: {"kind":"Int32"},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultCapacity: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn usearch_open(
    pattern: {"kind""Ptr","child":{"kind":"UInt16"}},
    patternlength: {"kind":"Int32"},
    text: {"kind""Ptr","child":{"kind":"UInt16"}},
    textlength: {"kind":"Int32"},
    locale: {"kind""Ptr","child":{"kind":"SByte"}},
    breakiter: {"kind""Ptr","child":Windows.Win32.Intl.UBreakIterator},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn usearch_openFromCollator(
    pattern: {"kind""Ptr","child":{"kind":"UInt16"}},
    patternlength: {"kind":"Int32"},
    text: {"kind""Ptr","child":{"kind":"UInt16"}},
    textlength: {"kind":"Int32"},
    collator: {"kind""Ptr","child":Windows.Win32.Intl.UCollator},
    breakiter: {"kind""Ptr","child":Windows.Win32.Intl.UBreakIterator},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn usearch_close(
    searchiter: {"kind""Ptr","child":Windows.Win32.Intl.UStringSearch},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn usearch_setOffset(
    strsrch: {"kind""Ptr","child":Windows.Win32.Intl.UStringSearch},
    position: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn usearch_getOffset(
    strsrch: {"kind""Ptr","child":Windows.Win32.Intl.UStringSearch},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn usearch_setAttribute(
    strsrch: {"kind""Ptr","child":Windows.Win32.Intl.UStringSearch},
    attribute: Windows.Win32.Intl.USearchAttribute,
    value: Windows.Win32.Intl.USearchAttributeValue,
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn usearch_getAttribute(
    strsrch: {"kind""Ptr","child":Windows.Win32.Intl.UStringSearch},
    attribute: Windows.Win32.Intl.USearchAttribute,

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn usearch_getMatchedStart(
    strsrch: {"kind""Ptr","child":Windows.Win32.Intl.UStringSearch},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn usearch_getMatchedLength(
    strsrch: {"kind""Ptr","child":Windows.Win32.Intl.UStringSearch},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn usearch_getMatchedText(
    strsrch: {"kind""Ptr","child":Windows.Win32.Intl.UStringSearch},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultCapacity: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn usearch_setBreakIterator(
    strsrch: {"kind""Ptr","child":Windows.Win32.Intl.UStringSearch},
    breakiter: {"kind""Ptr","child":Windows.Win32.Intl.UBreakIterator},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn usearch_getBreakIterator(
    strsrch: {"kind""Ptr","child":Windows.Win32.Intl.UStringSearch},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn usearch_setText(
    strsrch: {"kind""Ptr","child":Windows.Win32.Intl.UStringSearch},
    text: {"kind""Ptr","child":{"kind":"UInt16"}},
    textlength: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn usearch_getText(
    strsrch: {"kind""Ptr","child":Windows.Win32.Intl.UStringSearch},
    length: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn usearch_getCollator(
    strsrch: {"kind""Ptr","child":Windows.Win32.Intl.UStringSearch},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn usearch_setCollator(
    strsrch: {"kind""Ptr","child":Windows.Win32.Intl.UStringSearch},
    collator: {"kind""Ptr","child":Windows.Win32.Intl.UCollator},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn usearch_setPattern(
    strsrch: {"kind""Ptr","child":Windows.Win32.Intl.UStringSearch},
    pattern: {"kind""Ptr","child":{"kind":"UInt16"}},
    patternlength: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn usearch_getPattern(
    strsrch: {"kind""Ptr","child":Windows.Win32.Intl.UStringSearch},
    length: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn usearch_first(
    strsrch: {"kind""Ptr","child":Windows.Win32.Intl.UStringSearch},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn usearch_following(
    strsrch: {"kind""Ptr","child":Windows.Win32.Intl.UStringSearch},
    position: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn usearch_last(
    strsrch: {"kind""Ptr","child":Windows.Win32.Intl.UStringSearch},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn usearch_preceding(
    strsrch: {"kind""Ptr","child":Windows.Win32.Intl.UStringSearch},
    position: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn usearch_next(
    strsrch: {"kind""Ptr","child":Windows.Win32.Intl.UStringSearch},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn usearch_previous(
    strsrch: {"kind""Ptr","child":Windows.Win32.Intl.UStringSearch},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn usearch_reset(
    strsrch: {"kind""Ptr","child":Windows.Win32.Intl.UStringSearch},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uspoof_open(
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uspoof_openFromSerialized(
    data: {"kind""Ptr","child":{"kind":"Void"}},
    length: {"kind":"Int32"},
    pActualLength: {"kind""Ptr","child":{"kind":"Int32"}},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uspoof_openFromSource(
    confusables: {"kind""Ptr","child":{"kind":"SByte"}},
    confusablesLen: {"kind":"Int32"},
    confusablesWholeScript: {"kind""Ptr","child":{"kind":"SByte"}},
    confusablesWholeScriptLen: {"kind":"Int32"},
    errType: {"kind""Ptr","child":{"kind":"Int32"}},
    pe: {"kind""Ptr","child":Windows.Win32.Intl.UParseError},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uspoof_close(
    sc: {"kind""Ptr","child":Windows.Win32.Intl.USpoofChecker},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uspoof_clone(
    sc: {"kind""Ptr","child":Windows.Win32.Intl.USpoofChecker},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uspoof_setChecks(
    sc: {"kind""Ptr","child":Windows.Win32.Intl.USpoofChecker},
    checks: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uspoof_getChecks(
    sc: {"kind""Ptr","child":Windows.Win32.Intl.USpoofChecker},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uspoof_setRestrictionLevel(
    sc: {"kind""Ptr","child":Windows.Win32.Intl.USpoofChecker},
    restrictionLevel: Windows.Win32.Intl.URestrictionLevel,

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uspoof_getRestrictionLevel(
    sc: {"kind""Ptr","child":Windows.Win32.Intl.USpoofChecker},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uspoof_setAllowedLocales(
    sc: {"kind""Ptr","child":Windows.Win32.Intl.USpoofChecker},
    localesList: {"kind""Ptr","child":{"kind":"SByte"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uspoof_getAllowedLocales(
    sc: {"kind""Ptr","child":Windows.Win32.Intl.USpoofChecker},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uspoof_setAllowedChars(
    sc: {"kind""Ptr","child":Windows.Win32.Intl.USpoofChecker},
    chars: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uspoof_getAllowedChars(
    sc: {"kind""Ptr","child":Windows.Win32.Intl.USpoofChecker},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uspoof_check(
    sc: {"kind""Ptr","child":Windows.Win32.Intl.USpoofChecker},
    id: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},
    position: {"kind""Ptr","child":{"kind":"Int32"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uspoof_checkUTF8(
    sc: {"kind""Ptr","child":Windows.Win32.Intl.USpoofChecker},
    id: {"kind""Ptr","child":{"kind":"SByte"}},
    length: {"kind":"Int32"},
    position: {"kind""Ptr","child":{"kind":"Int32"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uspoof_check2(
    sc: {"kind""Ptr","child":Windows.Win32.Intl.USpoofChecker},
    id: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},
    checkResult: {"kind""Ptr","child":Windows.Win32.Intl.USpoofCheckResult},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uspoof_check2UTF8(
    sc: {"kind""Ptr","child":Windows.Win32.Intl.USpoofChecker},
    id: {"kind""Ptr","child":{"kind":"SByte"}},
    length: {"kind":"Int32"},
    checkResult: {"kind""Ptr","child":Windows.Win32.Intl.USpoofCheckResult},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uspoof_openCheckResult(
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uspoof_closeCheckResult(
    checkResult: {"kind""Ptr","child":Windows.Win32.Intl.USpoofCheckResult},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uspoof_getCheckResultChecks(
    checkResult: {"kind""Ptr","child":Windows.Win32.Intl.USpoofCheckResult},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uspoof_getCheckResultRestrictionLevel(
    checkResult: {"kind""Ptr","child":Windows.Win32.Intl.USpoofCheckResult},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uspoof_getCheckResultNumerics(
    checkResult: {"kind""Ptr","child":Windows.Win32.Intl.USpoofCheckResult},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uspoof_areConfusable(
    sc: {"kind""Ptr","child":Windows.Win32.Intl.USpoofChecker},
    id1: {"kind""Ptr","child":{"kind":"UInt16"}},
    length1: {"kind":"Int32"},
    id2: {"kind""Ptr","child":{"kind":"UInt16"}},
    length2: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uspoof_areConfusableUTF8(
    sc: {"kind""Ptr","child":Windows.Win32.Intl.USpoofChecker},
    id1: {"kind""Ptr","child":{"kind":"SByte"}},
    length1: {"kind":"Int32"},
    id2: {"kind""Ptr","child":{"kind":"SByte"}},
    length2: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uspoof_getSkeleton(
    sc: {"kind""Ptr","child":Windows.Win32.Intl.USpoofChecker},
    type: {"kind":"UInt32"},
    id: {"kind""Ptr","child":{"kind":"UInt16"}},
    length: {"kind":"Int32"},
    dest: {"kind""Ptr","child":{"kind":"UInt16"}},
    destCapacity: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uspoof_getSkeletonUTF8(
    sc: {"kind""Ptr","child":Windows.Win32.Intl.USpoofChecker},
    type: {"kind":"UInt32"},
    id: {"kind""Ptr","child":{"kind":"SByte"}},
    length: {"kind":"Int32"},
    dest: {"kind""Ptr","child":{"kind":"SByte"}},
    destCapacity: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uspoof_getInclusionSet(
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uspoof_getRecommendedSet(
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn uspoof_serialize(
    sc: {"kind""Ptr","child":Windows.Win32.Intl.USpoofChecker},
    data: {"kind""Ptr","child":{"kind":"Void"}},
    capacity: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utmscale_getTimeScaleValue(
    timeScale: Windows.Win32.Intl.UDateTimeScale,
    value: Windows.Win32.Intl.UTimeScaleValue,
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utmscale_fromInt64(
    otherTime: {"kind":"Int64"},
    timeScale: Windows.Win32.Intl.UDateTimeScale,
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utmscale_toInt64(
    universalTime: {"kind":"Int64"},
    timeScale: Windows.Win32.Intl.UDateTimeScale,
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utrans_openU(
    id: {"kind""Ptr","child":{"kind":"UInt16"}},
    idLength: {"kind":"Int32"},
    dir: Windows.Win32.Intl.UTransDirection,
    rules: {"kind""Ptr","child":{"kind":"UInt16"}},
    rulesLength: {"kind":"Int32"},
    parseError: {"kind""Ptr","child":Windows.Win32.Intl.UParseError},
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utrans_openInverse(
    trans: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utrans_clone(
    trans: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utrans_close(
    trans: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utrans_getUnicodeID(
    trans: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    resultLength: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utrans_register(
    adoptedTrans: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utrans_unregisterID(
    id: {"kind""Ptr","child":{"kind":"UInt16"}},
    idLength: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utrans_setFilter(
    trans: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    filterPattern: {"kind""Ptr","child":{"kind":"UInt16"}},
    filterPatternLen: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utrans_countAvailableIDs(

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utrans_openIDs(
    pErrorCode: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utrans_trans(
    trans: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    rep: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    repFunc: {"kind""Ptr","child":Windows.Win32.Intl.UReplaceableCallbacks},
    start: {"kind":"Int32"},
    limit: {"kind""Ptr","child":{"kind":"Int32"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utrans_transIncremental(
    trans: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    rep: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    repFunc: {"kind""Ptr","child":Windows.Win32.Intl.UReplaceableCallbacks},
    pos: {"kind""Ptr","child":Windows.Win32.Intl.UTransPosition},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utrans_transUChars(
    trans: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    text: {"kind""Ptr","child":{"kind":"UInt16"}},
    textLength: {"kind""Ptr","child":{"kind":"Int32"}},
    textCapacity: {"kind":"Int32"},
    start: {"kind":"Int32"},
    limit: {"kind""Ptr","child":{"kind":"Int32"}},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utrans_transIncrementalUChars(
    trans: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    text: {"kind""Ptr","child":{"kind":"UInt16"}},
    textLength: {"kind""Ptr","child":{"kind":"Int32"}},
    textCapacity: {"kind":"Int32"},
    pos: {"kind""Ptr","child":Windows.Win32.Intl.UTransPosition},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utrans_toRules(
    trans: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    escapeUnprintable: {"kind":"SByte"},
    result: {"kind""Ptr","child":{"kind":"UInt16"}},
    resultLength: {"kind":"Int32"},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "icu" fn utrans_getSourceSet(
    trans: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    ignoreFilter: {"kind":"SByte"},
    fillIn: {"kind""Ptr","child":Windows.Win32.Intl.USet},
    status: {"kind""Ptr","child":Windows.Win32.Intl.UErrorCode},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn IsTextUnicode(
    lpv: {"kind""Ptr","child":{"kind":"Void"}},
    iSize: {"kind":"Int32"},
    lpiResult: {"kind""Ptr","child":{"kind":"Int32"}},
],

"unicode_aliases": [
     "CPINFOEX"
     "NUMBERFMT"
     "CURRENCYFMT"
     "LOCALE_ENUMPROC"
     "LANGUAGEGROUP_ENUMPROC"
     "LANGGROUPLOCALE_ENUMPROC"
     "UILANGUAGE_ENUMPROC"
     "CODEPAGE_ENUMPROC"
     "DATEFMT_ENUMPROC"
     "DATEFMT_ENUMPROCEX"
     "TIMEFMT_ENUMPROC"
     "CALINFO_ENUMPROC"
     "CALINFO_ENUMPROCEX"
     "REGISTERWORD"
     "STYLEBUF"
     "IMEMENUITEMINFO"
     "REGISTERWORDENUMPROC"
     "GetDateFormat"
     "GetTimeFormat"
     "CompareString"
     "FoldString"
     "GetStringTypeEx"
     "GetStringType"
     "GetCPInfoEx"
     "LCMapString"
     "GetLocaleInfo"
     "SetLocaleInfo"
     "GetCalendarInfo"
     "SetCalendarInfo"
     "GetNumberFormat"
     "GetCurrencyFormat"
     "EnumCalendarInfo"
     "EnumCalendarInfoEx"
     "EnumTimeFormats"
     "EnumDateFormats"
     "EnumDateFormatsEx"
     "GetGeoInfo"
     "EnumSystemLocales"
     "EnumSystemLanguageGroups"
     "EnumLanguageGroupLocales"
     "EnumUILanguages"
     "EnumSystemCodePages"
     "ImmInstallIME"
     "ImmGetDescription"
     "ImmGetIMEFileName"
     "ImmGetCompositionString"
     "ImmSetCompositionString"
     "ImmGetCandidateListCount"
     "ImmGetCandidateList"
     "ImmGetGuideLine"
     "ImmGetCompositionFont"
     "ImmSetCompositionFont"
     "ImmConfigureIME"
     "ImmEscape"
     "ImmGetConversionList"
     "ImmIsUIMessage"
     "ImmRegisterWord"
     "ImmUnregisterWord"
     "ImmGetRegisterWordStyle"
     "ImmEnumRegisterWord"
     "ImmGetImeMenuItems"
     "ImmRequestMessage"
]}
