{
"constants": [
     {
         "name": "g_wszSpeechFormatCaps"
        ,"type": {"kind":"String"}
        ,"value": "SpeechFormatCap"
    }
    ,{
         "name": "g_wszWMCPCodecName"
        ,"type": {"kind":"String"}
        ,"value": "_CODECNAME"
    }
    ,{
         "name": "g_wszWMCPSupportedVBRModes"
        ,"type": {"kind":"String"}
        ,"value": "_SUPPORTEDVBRMODES"
    }
    ,{
         "name": "g_wszWMCPAudioVBRSupported"
        ,"type": {"kind":"String"}
        ,"value": "_VBRENABLED"
    }
    ,{
         "name": "g_wszWMCPAudioVBRQuality"
        ,"type": {"kind":"String"}
        ,"value": "_VBRQUALITY"
    }
    ,{
         "name": "g_wszWMCPMaxPasses"
        ,"type": {"kind":"String"}
        ,"value": "_PASSESRECOMMENDED"
    }
    ,{
         "name": "g_wszWMCPDefaultCrisp"
        ,"type": {"kind":"String"}
        ,"value": "_DEFAULTCRISP"
    }
    ,{
         "name": "COPP_ProtectionType_Unknown"
        ,"type": {"kind":"Int32"}
        ,"value": -2147483648
    }
    ,{
         "name": "COPP_ProtectionType_None"
        ,"type": {"kind":"Int32"}
        ,"value": 0
    }
    ,{
         "name": "COPP_ProtectionType_HDCP"
        ,"type": {"kind":"Int32"}
        ,"value": 1
    }
    ,{
         "name": "COPP_ProtectionType_ACP"
        ,"type": {"kind":"Int32"}
        ,"value": 2
    }
    ,{
         "name": "COPP_ProtectionType_CGMSA"
        ,"type": {"kind":"Int32"}
        ,"value": 4
    }
    ,{
         "name": "COPP_ProtectionType_Mask"
        ,"type": {"kind":"Int32"}
        ,"value": -2147483641
    }
    ,{
         "name": "COPP_ProtectionType_Reserved"
        ,"type": {"kind":"Int32"}
        ,"value": 2147483640
    }
],

"types_definitions": [
// --------------------------------------------------------
// Type: MF_Plugin_Type
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_Plugin_Type = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_FIELD_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_VIDEO_FIELD_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_FRAME_STEREO_FORMAT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_VIDEO_FRAME_STEREO_FORMAT = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_FORMAT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_FORMAT = extern struct {
    Format: Windows.Win32.Dxgi.DXGI_FORMAT,
    ColorSpace: Windows.Win32.Dxgi.DXGI_COLOR_SPACE_TYPE,
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_SAMPLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_SAMPLE = extern struct {
    Width: {"kind":"UInt32"},
    Height: {"kind":"UInt32"},
    Format: Windows.Win32.MediaFoundation.D3D12_VIDEO_FORMAT,
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_VIDEO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_FEATURE_VIDEO = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_BITSTREAM_ENCRYPTION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_BITSTREAM_ENCRYPTION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_DECODE_CONFIGURATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_DECODE_CONFIGURATION = extern struct {
    DecodeProfile: Guid,
    BitstreamEncryption: Windows.Win32.MediaFoundation.D3D12_BITSTREAM_ENCRYPTION_TYPE,
    InterlaceType: Windows.Win32.MediaFoundation.D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE,
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_DECODER_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_DECODER_DESC = extern struct {
    NodeMask: {"kind":"UInt32"},
    Configuration: Windows.Win32.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION,
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_DECODER_HEAP_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_DECODER_HEAP_DESC = extern struct {
    NodeMask: {"kind":"UInt32"},
    Configuration: Windows.Win32.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION,
    DecodeWidth: {"kind":"UInt32"},
    DecodeHeight: {"kind":"UInt32"},
    Format: Windows.Win32.Dxgi.DXGI_FORMAT,
    FrameRate: Windows.Win32.Dxgi.DXGI_RATIONAL,
    BitRate: {"kind":"UInt32"},
    MaxDecodePictureBufferCount: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_SIZE_RANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_SIZE_RANGE = extern struct {
    MaxWidth: {"kind":"UInt32"},
    MaxHeight: {"kind":"UInt32"},
    MinWidth: {"kind":"UInt32"},
    MinHeight: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_PROCESS_FILTER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_VIDEO_PROCESS_FILTER = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_PROCESS_FILTER_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_VIDEO_PROCESS_FILTER_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_PROCESS_ALPHA_BLENDING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_PROCESS_ALPHA_BLENDING = extern struct {
    Enable: Windows.Win32.SystemServices.BOOL,
    Alpha: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_PROCESS_LUMA_KEY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_PROCESS_LUMA_KEY = extern struct {
    Enable: Windows.Win32.SystemServices.BOOL,
    Lower: {"kind":"Single"},
    Upper: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC = extern struct {
    Format: Windows.Win32.Dxgi.DXGI_FORMAT,
    ColorSpace: Windows.Win32.Dxgi.DXGI_COLOR_SPACE_TYPE,
    SourceAspectRatio: Windows.Win32.Dxgi.DXGI_RATIONAL,
    DestinationAspectRatio: Windows.Win32.Dxgi.DXGI_RATIONAL,
    FrameRate: Windows.Win32.Dxgi.DXGI_RATIONAL,
    SourceSizeRange: Windows.Win32.MediaFoundation.D3D12_VIDEO_SIZE_RANGE,
    DestinationSizeRange: Windows.Win32.MediaFoundation.D3D12_VIDEO_SIZE_RANGE,
    EnableOrientation: Windows.Win32.SystemServices.BOOL,
    FilterFlags: Windows.Win32.MediaFoundation.D3D12_VIDEO_PROCESS_FILTER_FLAGS,
    StereoFormat: Windows.Win32.MediaFoundation.D3D12_VIDEO_FRAME_STEREO_FORMAT,
    FieldType: Windows.Win32.MediaFoundation.D3D12_VIDEO_FIELD_TYPE,
    DeinterlaceMode: Windows.Win32.MediaFoundation.D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS,
    EnableAlphaBlending: Windows.Win32.SystemServices.BOOL,
    LumaKey: Windows.Win32.MediaFoundation.D3D12_VIDEO_PROCESS_LUMA_KEY,
    NumPastFrames: {"kind":"UInt32"},
    NumFutureFrames: {"kind":"UInt32"},
    EnableAutoProcessing: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC = extern struct {
    Format: Windows.Win32.Dxgi.DXGI_FORMAT,
    ColorSpace: Windows.Win32.Dxgi.DXGI_COLOR_SPACE_TYPE,
    AlphaFillMode: Windows.Win32.MediaFoundation.D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE,
    AlphaFillModeSourceStreamIndex: {"kind":"UInt32"},
    BackgroundColor: {"kind":"Array","child": {"kind":"Single"}},
    FrameRate: Windows.Win32.Dxgi.DXGI_RATIONAL,
    EnableStereo: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: ID3D12VideoDecoderHeap
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12VideoDecoderHeap = *opaque{
    // TODO: Method 'GetDesc'
};
// --------------------------------------------------------
// Type: ID3D12VideoDevice
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12VideoDevice = *opaque{
    // TODO: Method 'CheckFeatureSupport'
    // TODO: Method 'CreateVideoDecoder'
    // TODO: Method 'CreateVideoDecoderHeap'
    // TODO: Method 'CreateVideoProcessor'
};
// --------------------------------------------------------
// Type: ID3D12VideoDecoder
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12VideoDecoder = *opaque{
    // TODO: Method 'GetDesc'
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_DECODE_TIER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_VIDEO_DECODE_TIER = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_DECODE_SUPPORT_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_VIDEO_DECODE_SUPPORT_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_DECODE_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_VIDEO_DECODE_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_DECODE_ARGUMENT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_VIDEO_DECODE_ARGUMENT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT = extern struct {
    NodeIndex: {"kind":"UInt32"},
    Configuration: Windows.Win32.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION,
    Width: {"kind":"UInt32"},
    Height: {"kind":"UInt32"},
    DecodeFormat: Windows.Win32.Dxgi.DXGI_FORMAT,
    FrameRate: Windows.Win32.Dxgi.DXGI_RATIONAL,
    BitRate: {"kind":"UInt32"},
    SupportFlags: Windows.Win32.MediaFoundation.D3D12_VIDEO_DECODE_SUPPORT_FLAGS,
    ConfigurationFlags: Windows.Win32.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS,
    DecodeTier: Windows.Win32.MediaFoundation.D3D12_VIDEO_DECODE_TIER,
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT = extern struct {
    NodeIndex: {"kind":"UInt32"},
    ProfileCount: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES = extern struct {
    NodeIndex: {"kind":"UInt32"},
    ProfileCount: {"kind":"UInt32"},
    pProfiles: {"kind""Ptr","child":Guid},
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT = extern struct {
    NodeIndex: {"kind":"UInt32"},
    Configuration: Windows.Win32.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION,
    FormatCount: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS = extern struct {
    NodeIndex: {"kind":"UInt32"},
    Configuration: Windows.Win32.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION,
    FormatCount: {"kind":"UInt32"},
    pOutputFormats: {"kind""Ptr","child":Windows.Win32.Dxgi.DXGI_FORMAT},
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE = extern struct {
    IOCoherent: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM = extern struct {
    NodeIndex: {"kind":"UInt32"},
    DecodeProfile: Guid,
    Width: {"kind":"UInt32"},
    Height: {"kind":"UInt32"},
    DecodeFormat: Windows.Win32.Dxgi.DXGI_FORMAT,
    Components: Windows.Win32.MediaFoundation.D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS,
    BinCount: {"kind":"UInt32"},
    CounterBitDepth: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_SCALE_SUPPORT_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_VIDEO_SCALE_SUPPORT_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_SCALE_SUPPORT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_SCALE_SUPPORT = extern struct {
    OutputSizeRange: Windows.Win32.MediaFoundation.D3D12_VIDEO_SIZE_RANGE,
    Flags: Windows.Win32.MediaFoundation.D3D12_VIDEO_SCALE_SUPPORT_FLAGS,
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT = extern struct {
    NodeIndex: {"kind":"UInt32"},
    Configuration: Windows.Win32.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION,
    DecodeSample: Windows.Win32.MediaFoundation.D3D12_VIDEO_SAMPLE,
    OutputFormat: Windows.Win32.MediaFoundation.D3D12_VIDEO_FORMAT,
    FrameRate: Windows.Win32.Dxgi.DXGI_RATIONAL,
    BitRate: {"kind":"UInt32"},
    SupportFlags: Windows.Win32.MediaFoundation.D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS,
    ScaleSupport: Windows.Win32.MediaFoundation.D3D12_VIDEO_SCALE_SUPPORT,
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE = extern struct {
    VideoDecoderHeapDesc: Windows.Win32.MediaFoundation.D3D12_VIDEO_DECODER_HEAP_DESC,
    MemoryPoolL0Size: {"kind":"UInt64"},
    MemoryPoolL1Size: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE = extern struct {
    NodeMask: {"kind":"UInt32"},
    pOutputStreamDesc: {"kind""Ptr","child":Windows.Win32.MediaFoundation.D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC},
    NumInputStreamDescs: {"kind":"UInt32"},
    pInputStreamDescs: {"kind""Ptr","child":Windows.Win32.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC},
    MemoryPoolL0Size: {"kind":"UInt64"},
    MemoryPoolL1Size: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS = extern struct {
    Status: {"kind":"UInt64"},
    NumMacroblocksAffected: {"kind":"UInt64"},
    FrameRate: Windows.Win32.Dxgi.DXGI_RATIONAL,
    BitRate: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_DECODE_FRAME_ARGUMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_DECODE_FRAME_ARGUMENT = extern struct {
    Type: Windows.Win32.MediaFoundation.D3D12_VIDEO_DECODE_ARGUMENT_TYPE,
    Size: {"kind":"UInt32"},
    pData: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_DECODE_REFERENCE_FRAMES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_DECODE_REFERENCE_FRAMES = extern struct {
    NumTexture2Ds: {"kind":"UInt32"},
    ppTexture2Ds: {"kind""Ptr","child":Windows.Win32.Direct3D12.ID3D12Resource},
    pSubresources: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppHeaps: {"kind""Ptr","child":Windows.Win32.MediaFoundation.ID3D12VideoDecoderHeap},
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM = extern struct {
    pBuffer: Windows.Win32.Direct3D12.ID3D12Resource,
    Offset: {"kind":"UInt64"},
    Size: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS = extern struct {
    Enable: Windows.Win32.SystemServices.BOOL,
    pReferenceTexture2D: Windows.Win32.Direct3D12.ID3D12Resource,
    ReferenceSubresource: {"kind":"UInt32"},
    OutputColorSpace: Windows.Win32.Dxgi.DXGI_COLOR_SPACE_TYPE,
    DecodeColorSpace: Windows.Win32.Dxgi.DXGI_COLOR_SPACE_TYPE,
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS = extern struct {
    NumFrameArguments: {"kind":"UInt32"},
    FrameArguments: {"kind":"Array","child": Windows.Win32.MediaFoundation.D3D12_VIDEO_DECODE_FRAME_ARGUMENT},
    ReferenceFrames: Windows.Win32.MediaFoundation.D3D12_VIDEO_DECODE_REFERENCE_FRAMES,
    CompressedBitstream: Windows.Win32.MediaFoundation.D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM,
    pHeap: Windows.Win32.MediaFoundation.ID3D12VideoDecoderHeap,
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS = extern struct {
    pOutputTexture2D: Windows.Win32.Direct3D12.ID3D12Resource,
    OutputSubresource: {"kind":"UInt32"},
    ConversionArguments: Windows.Win32.MediaFoundation.D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS,
};
// --------------------------------------------------------
// Type: ID3D12VideoProcessor
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12VideoProcessor = *opaque{
    // TODO: Method 'GetNodeMask'
    // TODO: Method 'GetNumInputStreamDescs'
    // TODO: Method 'GetInputStreamDescs'
    // TODO: Method 'GetOutputStreamDesc'
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_PROCESS_FEATURE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_VIDEO_PROCESS_FEATURE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_PROCESS_ORIENTATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_VIDEO_PROCESS_ORIENTATION = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_PROCESS_FILTER_RANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_PROCESS_FILTER_RANGE = extern struct {
    Minimum: {"kind":"Int32"},
    Maximum: {"kind":"Int32"},
    Default: {"kind":"Int32"},
    Multiplier: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_PROCESS_SUPPORT_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_VIDEO_PROCESS_SUPPORT_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT = extern struct {
    NodeIndex: {"kind":"UInt32"},
    InputSample: Windows.Win32.MediaFoundation.D3D12_VIDEO_SAMPLE,
    InputFieldType: Windows.Win32.MediaFoundation.D3D12_VIDEO_FIELD_TYPE,
    InputStereoFormat: Windows.Win32.MediaFoundation.D3D12_VIDEO_FRAME_STEREO_FORMAT,
    InputFrameRate: Windows.Win32.Dxgi.DXGI_RATIONAL,
    OutputFormat: Windows.Win32.MediaFoundation.D3D12_VIDEO_FORMAT,
    OutputStereoFormat: Windows.Win32.MediaFoundation.D3D12_VIDEO_FRAME_STEREO_FORMAT,
    OutputFrameRate: Windows.Win32.Dxgi.DXGI_RATIONAL,
    SupportFlags: Windows.Win32.MediaFoundation.D3D12_VIDEO_PROCESS_SUPPORT_FLAGS,
    ScaleSupport: Windows.Win32.MediaFoundation.D3D12_VIDEO_SCALE_SUPPORT,
    FeatureSupport: Windows.Win32.MediaFoundation.D3D12_VIDEO_PROCESS_FEATURE_FLAGS,
    DeinterlaceSupport: Windows.Win32.MediaFoundation.D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS,
    AutoProcessingSupport: Windows.Win32.MediaFoundation.D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS,
    FilterSupport: Windows.Win32.MediaFoundation.D3D12_VIDEO_PROCESS_FILTER_FLAGS,
    FilterRangeSupport: {"kind":"Array","child": Windows.Win32.MediaFoundation.D3D12_VIDEO_PROCESS_FILTER_RANGE},
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS = extern struct {
    NodeIndex: {"kind":"UInt32"},
    MaxInputStreams: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO = extern struct {
    NodeIndex: {"kind":"UInt32"},
    DeinterlaceMode: Windows.Win32.MediaFoundation.D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS,
    Filters: Windows.Win32.MediaFoundation.D3D12_VIDEO_PROCESS_FILTER_FLAGS,
    FeatureSupport: Windows.Win32.MediaFoundation.D3D12_VIDEO_PROCESS_FEATURE_FLAGS,
    InputFrameRate: Windows.Win32.Dxgi.DXGI_RATIONAL,
    OutputFrameRate: Windows.Win32.Dxgi.DXGI_RATIONAL,
    EnableAutoProcessing: Windows.Win32.SystemServices.BOOL,
    PastFrames: {"kind":"UInt32"},
    FutureFrames: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_PROCESS_REFERENCE_SET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_PROCESS_REFERENCE_SET = extern struct {
    NumPastFrames: {"kind":"UInt32"},
    ppPastFrames: {"kind""Ptr","child":Windows.Win32.Direct3D12.ID3D12Resource},
    pPastSubresources: {"kind""Ptr","child":{"kind":"UInt32"}},
    NumFutureFrames: {"kind":"UInt32"},
    ppFutureFrames: {"kind""Ptr","child":Windows.Win32.Direct3D12.ID3D12Resource},
    pFutureSubresources: {"kind""Ptr","child":{"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_PROCESS_TRANSFORM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_PROCESS_TRANSFORM = extern struct {
    SourceRectangle: Windows.Win32.DisplayDevices.RECT,
    DestinationRectangle: Windows.Win32.DisplayDevices.RECT,
    Orientation: Windows.Win32.MediaFoundation.D3D12_VIDEO_PROCESS_ORIENTATION,
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE = extern struct {
    OutputIndex: {"kind":"UInt32"},
    InputFrameOrField: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_PROCESS_INPUT_STREAM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_PROCESS_INPUT_STREAM = extern struct {
    pTexture2D: Windows.Win32.Direct3D12.ID3D12Resource,
    Subresource: {"kind":"UInt32"},
    ReferenceSet: Windows.Win32.MediaFoundation.D3D12_VIDEO_PROCESS_REFERENCE_SET,
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS = extern struct {
    InputStream: {"kind":"Array","child": Windows.Win32.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM},
    Transform: Windows.Win32.MediaFoundation.D3D12_VIDEO_PROCESS_TRANSFORM,
    Flags: Windows.Win32.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS,
    RateInfo: Windows.Win32.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE,
    FilterLevels: {"kind":"Array","child": {"kind":"Int32"}},
    AlphaBlending: Windows.Win32.MediaFoundation.D3D12_VIDEO_PROCESS_ALPHA_BLENDING,
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_PROCESS_OUTPUT_STREAM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_PROCESS_OUTPUT_STREAM = extern struct {
    pTexture2D: Windows.Win32.Direct3D12.ID3D12Resource,
    Subresource: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS = extern struct {
    OutputStream: {"kind":"Array","child": Windows.Win32.MediaFoundation.D3D12_VIDEO_PROCESS_OUTPUT_STREAM},
    TargetRectangle: Windows.Win32.DisplayDevices.RECT,
};
// --------------------------------------------------------
// Type: ID3D12VideoDecodeCommandList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12VideoDecodeCommandList = *opaque{
    // TODO: Method 'Close'
    // TODO: Method 'Reset'
    // TODO: Method 'ClearState'
    // TODO: Method 'ResourceBarrier'
    // TODO: Method 'DiscardResource'
    // TODO: Method 'BeginQuery'
    // TODO: Method 'EndQuery'
    // TODO: Method 'ResolveQueryData'
    // TODO: Method 'SetPredication'
    // TODO: Method 'SetMarker'
    // TODO: Method 'BeginEvent'
    // TODO: Method 'EndEvent'
    // TODO: Method 'DecodeFrame'
    // TODO: Method 'WriteBufferImmediate'
};
// --------------------------------------------------------
// Type: ID3D12VideoProcessCommandList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12VideoProcessCommandList = *opaque{
    // TODO: Method 'Close'
    // TODO: Method 'Reset'
    // TODO: Method 'ClearState'
    // TODO: Method 'ResourceBarrier'
    // TODO: Method 'DiscardResource'
    // TODO: Method 'BeginQuery'
    // TODO: Method 'EndQuery'
    // TODO: Method 'ResolveQueryData'
    // TODO: Method 'SetPredication'
    // TODO: Method 'SetMarker'
    // TODO: Method 'BeginEvent'
    // TODO: Method 'EndEvent'
    // TODO: Method 'ProcessFrames'
    // TODO: Method 'WriteBufferImmediate'
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM = extern struct {
    Offset: {"kind":"UInt64"},
    pBuffer: Windows.Win32.Direct3D12.ID3D12Resource,
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1 = extern struct {
    Enable: Windows.Win32.SystemServices.BOOL,
    pReferenceTexture2D: Windows.Win32.Direct3D12.ID3D12Resource,
    ReferenceSubresource: {"kind":"UInt32"},
    OutputColorSpace: Windows.Win32.Dxgi.DXGI_COLOR_SPACE_TYPE,
    DecodeColorSpace: Windows.Win32.Dxgi.DXGI_COLOR_SPACE_TYPE,
    OutputWidth: {"kind":"UInt32"},
    OutputHeight: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1 = extern struct {
    pOutputTexture2D: Windows.Win32.Direct3D12.ID3D12Resource,
    OutputSubresource: {"kind":"UInt32"},
    ConversionArguments: Windows.Win32.MediaFoundation.D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1,
    Histograms: {"kind":"Array","child": Windows.Win32.MediaFoundation.D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM},
};
// --------------------------------------------------------
// Type: ID3D12VideoDecodeCommandList1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12VideoDecodeCommandList1 = *opaque{
    // TODO: Method 'DecodeFrame1'
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1 = extern struct {
    InputStream: {"kind":"Array","child": Windows.Win32.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM},
    Transform: Windows.Win32.MediaFoundation.D3D12_VIDEO_PROCESS_TRANSFORM,
    Flags: Windows.Win32.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS,
    RateInfo: Windows.Win32.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE,
    FilterLevels: {"kind":"Array","child": {"kind":"Int32"}},
    AlphaBlending: Windows.Win32.MediaFoundation.D3D12_VIDEO_PROCESS_ALPHA_BLENDING,
    FieldType: Windows.Win32.MediaFoundation.D3D12_VIDEO_FIELD_TYPE,
};
// --------------------------------------------------------
// Type: ID3D12VideoProcessCommandList1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12VideoProcessCommandList1 = *opaque{
    // TODO: Method 'ProcessFrames1'
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT = extern struct {
    NodeIndex: {"kind":"UInt32"},
    VideoDecodeSupport: Windows.Win32.SystemServices.BOOL,
    VideoProcessSupport: Windows.Win32.SystemServices.BOOL,
    VideoEncodeSupport: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR = extern struct {
    NodeIndex: {"kind":"UInt32"},
    InputFormat: Windows.Win32.Dxgi.DXGI_FORMAT,
    BlockSizeFlags: Windows.Win32.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS,
    PrecisionFlags: Windows.Win32.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS,
    SizeRange: Windows.Win32.MediaFoundation.D3D12_VIDEO_SIZE_RANGE,
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE = extern struct {
    NodeIndex: {"kind":"UInt32"},
    InputFormat: Windows.Win32.Dxgi.DXGI_FORMAT,
    BlockSize: Windows.Win32.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE,
    Precision: Windows.Win32.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION,
    SizeRange: Windows.Win32.MediaFoundation.D3D12_VIDEO_SIZE_RANGE,
    Protected: Windows.Win32.SystemServices.BOOL,
    MotionVectorHeapMemoryPoolL0Size: {"kind":"UInt64"},
    MotionVectorHeapMemoryPoolL1Size: {"kind":"UInt64"},
    MotionEstimatorMemoryPoolL0Size: {"kind":"UInt64"},
    MotionEstimatorMemoryPoolL1Size: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_MOTION_ESTIMATOR_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_MOTION_ESTIMATOR_DESC = extern struct {
    NodeMask: {"kind":"UInt32"},
    InputFormat: Windows.Win32.Dxgi.DXGI_FORMAT,
    BlockSize: Windows.Win32.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE,
    Precision: Windows.Win32.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION,
    SizeRange: Windows.Win32.MediaFoundation.D3D12_VIDEO_SIZE_RANGE,
};
// --------------------------------------------------------
// Type: ID3D12VideoMotionEstimator
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12VideoMotionEstimator = *opaque{
    // TODO: Method 'GetDesc'
    // TODO: Method 'GetProtectedResourceSession'
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC = extern struct {
    NodeMask: {"kind":"UInt32"},
    InputFormat: Windows.Win32.Dxgi.DXGI_FORMAT,
    BlockSize: Windows.Win32.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE,
    Precision: Windows.Win32.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION,
    SizeRange: Windows.Win32.MediaFoundation.D3D12_VIDEO_SIZE_RANGE,
};
// --------------------------------------------------------
// Type: ID3D12VideoMotionVectorHeap
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12VideoMotionVectorHeap = *opaque{
    // TODO: Method 'GetDesc'
    // TODO: Method 'GetProtectedResourceSession'
};
// --------------------------------------------------------
// Type: ID3D12VideoDevice1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12VideoDevice1 = *opaque{
    // TODO: Method 'CreateVideoMotionEstimator'
    // TODO: Method 'CreateVideoMotionVectorHeap'
};
// --------------------------------------------------------
// Type: D3D12_RESOURCE_COORDINATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RESOURCE_COORDINATE = extern struct {
    X: {"kind":"UInt64"},
    Y: {"kind":"UInt32"},
    Z: {"kind":"UInt32"},
    SubresourceIndex: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT = extern struct {
    pMotionVectorHeap: Windows.Win32.MediaFoundation.ID3D12VideoMotionVectorHeap,
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_MOTION_ESTIMATOR_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_MOTION_ESTIMATOR_INPUT = extern struct {
    pInputTexture2D: Windows.Win32.Direct3D12.ID3D12Resource,
    InputSubresourceIndex: {"kind":"UInt32"},
    pReferenceTexture2D: Windows.Win32.Direct3D12.ID3D12Resource,
    ReferenceSubresourceIndex: {"kind":"UInt32"},
    pHintMotionVectorHeap: Windows.Win32.MediaFoundation.ID3D12VideoMotionVectorHeap,
};
// --------------------------------------------------------
// Type: D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT = extern struct {
    pMotionVectorTexture2D: Windows.Win32.Direct3D12.ID3D12Resource,
    MotionVectorCoordinate: Windows.Win32.MediaFoundation.D3D12_RESOURCE_COORDINATE,
};
// --------------------------------------------------------
// Type: D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT = extern struct {
    pMotionVectorHeap: Windows.Win32.MediaFoundation.ID3D12VideoMotionVectorHeap,
    PixelWidth: {"kind":"UInt32"},
    PixelHeight: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: ID3D12VideoEncodeCommandList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12VideoEncodeCommandList = *opaque{
    // TODO: Method 'Close'
    // TODO: Method 'Reset'
    // TODO: Method 'ClearState'
    // TODO: Method 'ResourceBarrier'
    // TODO: Method 'DiscardResource'
    // TODO: Method 'BeginQuery'
    // TODO: Method 'EndQuery'
    // TODO: Method 'ResolveQueryData'
    // TODO: Method 'SetPredication'
    // TODO: Method 'SetMarker'
    // TODO: Method 'BeginEvent'
    // TODO: Method 'EndEvent'
    // TODO: Method 'EstimateMotion'
    // TODO: Method 'ResolveMotionVectorHeap'
    // TODO: Method 'WriteBufferImmediate'
    // TODO: Method 'SetProtectedResourceSession'
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES = extern struct {
    NodeIndex: {"kind":"UInt32"},
    Configuration: Windows.Win32.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION,
    SupportFlags: Windows.Win32.MediaFoundation.D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS,
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES = extern struct {
    NodeIndex: {"kind":"UInt32"},
    SupportFlags: Windows.Win32.MediaFoundation.D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS,
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES = extern struct {
    NodeIndex: {"kind":"UInt32"},
    SupportFlags: Windows.Win32.MediaFoundation.D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS,
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1 = extern struct {
    VideoDecoderHeapDesc: Windows.Win32.MediaFoundation.D3D12_VIDEO_DECODER_HEAP_DESC,
    Protected: Windows.Win32.SystemServices.BOOL,
    MemoryPoolL0Size: {"kind":"UInt64"},
    MemoryPoolL1Size: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1 = extern struct {
    NodeMask: {"kind":"UInt32"},
    pOutputStreamDesc: {"kind""Ptr","child":Windows.Win32.MediaFoundation.D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC},
    NumInputStreamDescs: {"kind":"UInt32"},
    pInputStreamDescs: {"kind""Ptr","child":Windows.Win32.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC},
    Protected: Windows.Win32.SystemServices.BOOL,
    MemoryPoolL0Size: {"kind":"UInt64"},
    MemoryPoolL1Size: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT = extern struct {
    NodeIndex: {"kind":"UInt32"},
    CommandCount: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_EXTENSION_COMMAND_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_EXTENSION_COMMAND_INFO = extern struct {
    CommandId: Guid,
    Name: {"kind""Ptr","child":{"kind":"UInt16"}},
    CommandListSupportFlags: Windows.Win32.Direct3D12.D3D12_COMMAND_LIST_SUPPORT_FLAGS,
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS = extern struct {
    NodeIndex: {"kind":"UInt32"},
    CommandCount: {"kind":"UInt32"},
    pCommandInfos: {"kind""Ptr","child":Windows.Win32.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_INFO},
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT = extern struct {
    CommandId: Guid,
    Stage: Windows.Win32.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE,
    ParameterCount: {"kind":"UInt32"},
    ParameterPacking: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO = extern struct {
    Name: {"kind""Ptr","child":{"kind":"UInt16"}},
    Type: Windows.Win32.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE,
    Flags: Windows.Win32.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS,
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS = extern struct {
    CommandId: Guid,
    Stage: Windows.Win32.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE,
    ParameterCount: {"kind":"UInt32"},
    pParameterInfos: {"kind""Ptr","child":Windows.Win32.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO},
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT = extern struct {
    NodeIndex: {"kind":"UInt32"},
    CommandId: Guid,
    pInputData: {"kind""Ptr","child":{"kind":"Void"}},
    InputDataSizeInBytes: {"kind":"UIntPtr"},
    pOutputData: {"kind""Ptr","child":{"kind":"Void"}},
    OutputDataSizeInBytes: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE = extern struct {
    NodeIndex: {"kind":"UInt32"},
    CommandId: Guid,
    pCreationParameters: {"kind""Ptr","child":{"kind":"Void"}},
    CreationParametersSizeInBytes: {"kind":"UIntPtr"},
    MemoryPoolL0Size: {"kind":"UInt64"},
    MemoryPoolL1Size: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: D3D12_VIDEO_EXTENSION_COMMAND_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIDEO_EXTENSION_COMMAND_DESC = extern struct {
    NodeMask: {"kind":"UInt32"},
    CommandId: Guid,
};
// --------------------------------------------------------
// Type: ID3D12VideoDecoder1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12VideoDecoder1 = *opaque{
    // TODO: Method 'GetProtectedResourceSession'
};
// --------------------------------------------------------
// Type: ID3D12VideoDecoderHeap1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12VideoDecoderHeap1 = *opaque{
    // TODO: Method 'GetProtectedResourceSession'
};
// --------------------------------------------------------
// Type: ID3D12VideoProcessor1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12VideoProcessor1 = *opaque{
    // TODO: Method 'GetProtectedResourceSession'
};
// --------------------------------------------------------
// Type: ID3D12VideoExtensionCommand
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12VideoExtensionCommand = *opaque{
    // TODO: Method 'GetDesc'
    // TODO: Method 'GetProtectedResourceSession'
};
// --------------------------------------------------------
// Type: ID3D12VideoDevice2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12VideoDevice2 = *opaque{
    // TODO: Method 'CreateVideoDecoder1'
    // TODO: Method 'CreateVideoDecoderHeap1'
    // TODO: Method 'CreateVideoProcessor1'
    // TODO: Method 'CreateVideoExtensionCommand'
    // TODO: Method 'ExecuteExtensionCommand'
};
// --------------------------------------------------------
// Type: ID3D12VideoDecodeCommandList2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12VideoDecodeCommandList2 = *opaque{
    // TODO: Method 'SetProtectedResourceSession'
    // TODO: Method 'InitializeExtensionCommand'
    // TODO: Method 'ExecuteExtensionCommand'
};
// --------------------------------------------------------
// Type: ID3D12VideoProcessCommandList2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12VideoProcessCommandList2 = *opaque{
    // TODO: Method 'SetProtectedResourceSession'
    // TODO: Method 'InitializeExtensionCommand'
    // TODO: Method 'ExecuteExtensionCommand'
};
// --------------------------------------------------------
// Type: ID3D12VideoEncodeCommandList1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12VideoEncodeCommandList1 = *opaque{
    // TODO: Method 'InitializeExtensionCommand'
    // TODO: Method 'ExecuteExtensionCommand'
};
// --------------------------------------------------------
// Type: CMpeg4DecMediaObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMpeg4DecMediaObject = opaque {
};
// --------------------------------------------------------
// Type: CMpeg43DecMediaObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMpeg43DecMediaObject = opaque {
};
// --------------------------------------------------------
// Type: CMpeg4sDecMediaObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMpeg4sDecMediaObject = opaque {
};
// --------------------------------------------------------
// Type: CMpeg4sDecMFT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMpeg4sDecMFT = opaque {
};
// --------------------------------------------------------
// Type: CZuneM4S2DecMediaObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CZuneM4S2DecMediaObject = opaque {
};
// --------------------------------------------------------
// Type: CMpeg4EncMediaObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMpeg4EncMediaObject = opaque {
};
// --------------------------------------------------------
// Type: CMpeg4sEncMediaObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMpeg4sEncMediaObject = opaque {
};
// --------------------------------------------------------
// Type: CMSSCDecMediaObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMSSCDecMediaObject = opaque {
};
// --------------------------------------------------------
// Type: CMSSCEncMediaObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMSSCEncMediaObject = opaque {
};
// --------------------------------------------------------
// Type: CMSSCEncMediaObject2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMSSCEncMediaObject2 = opaque {
};
// --------------------------------------------------------
// Type: CWMADecMediaObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CWMADecMediaObject = opaque {
};
// --------------------------------------------------------
// Type: CWMAEncMediaObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CWMAEncMediaObject = opaque {
};
// --------------------------------------------------------
// Type: CWMATransMediaObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CWMATransMediaObject = opaque {
};
// --------------------------------------------------------
// Type: CWMSPDecMediaObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CWMSPDecMediaObject = opaque {
};
// --------------------------------------------------------
// Type: CWMSPEncMediaObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CWMSPEncMediaObject = opaque {
};
// --------------------------------------------------------
// Type: CWMSPEncMediaObject2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CWMSPEncMediaObject2 = opaque {
};
// --------------------------------------------------------
// Type: CWMTDecMediaObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CWMTDecMediaObject = opaque {
};
// --------------------------------------------------------
// Type: CWMTEncMediaObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CWMTEncMediaObject = opaque {
};
// --------------------------------------------------------
// Type: CWMVDecMediaObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CWMVDecMediaObject = opaque {
};
// --------------------------------------------------------
// Type: CWMVEncMediaObject2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CWMVEncMediaObject2 = opaque {
};
// --------------------------------------------------------
// Type: CWMVXEncMediaObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CWMVXEncMediaObject = opaque {
};
// --------------------------------------------------------
// Type: CWMV9EncMediaObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CWMV9EncMediaObject = opaque {
};
// --------------------------------------------------------
// Type: CWVC1DecMediaObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CWVC1DecMediaObject = opaque {
};
// --------------------------------------------------------
// Type: CWVC1EncMediaObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CWVC1EncMediaObject = opaque {
};
// --------------------------------------------------------
// Type: CDeColorConvMediaObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CDeColorConvMediaObject = opaque {
};
// --------------------------------------------------------
// Type: CDVDecoderMediaObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CDVDecoderMediaObject = opaque {
};
// --------------------------------------------------------
// Type: CDVEncoderMediaObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CDVEncoderMediaObject = opaque {
};
// --------------------------------------------------------
// Type: CMpeg2DecMediaObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMpeg2DecMediaObject = opaque {
};
// --------------------------------------------------------
// Type: CPK_DS_MPEG2Decoder
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CPK_DS_MPEG2Decoder = opaque {
};
// --------------------------------------------------------
// Type: CAC3DecMediaObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CAC3DecMediaObject = opaque {
};
// --------------------------------------------------------
// Type: CPK_DS_AC3Decoder
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CPK_DS_AC3Decoder = opaque {
};
// --------------------------------------------------------
// Type: CMP3DecMediaObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMP3DecMediaObject = opaque {
};
// --------------------------------------------------------
// Type: CResamplerMediaObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CResamplerMediaObject = opaque {
};
// --------------------------------------------------------
// Type: CResizerMediaObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CResizerMediaObject = opaque {
};
// --------------------------------------------------------
// Type: CInterlaceMediaObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CInterlaceMediaObject = opaque {
};
// --------------------------------------------------------
// Type: CWMAudioLFXAPO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CWMAudioLFXAPO = opaque {
};
// --------------------------------------------------------
// Type: CWMAudioGFXAPO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CWMAudioGFXAPO = opaque {
};
// --------------------------------------------------------
// Type: CWMAudioSpdTxDMO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CWMAudioSpdTxDMO = opaque {
};
// --------------------------------------------------------
// Type: CWMAudioAEC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CWMAudioAEC = opaque {
};
// --------------------------------------------------------
// Type: CClusterDetectorDmo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CClusterDetectorDmo = opaque {
};
// --------------------------------------------------------
// Type: CColorControlDmo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CColorControlDmo = opaque {
};
// --------------------------------------------------------
// Type: CColorConvertDMO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CColorConvertDMO = opaque {
};
// --------------------------------------------------------
// Type: CColorLegalizerDmo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CColorLegalizerDmo = opaque {
};
// --------------------------------------------------------
// Type: CFrameInterpDMO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CFrameInterpDMO = opaque {
};
// --------------------------------------------------------
// Type: CFrameRateConvertDmo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CFrameRateConvertDmo = opaque {
};
// --------------------------------------------------------
// Type: CResizerDMO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CResizerDMO = opaque {
};
// --------------------------------------------------------
// Type: CShotDetectorDmo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CShotDetectorDmo = opaque {
};
// --------------------------------------------------------
// Type: CSmpteTransformsDmo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CSmpteTransformsDmo = opaque {
};
// --------------------------------------------------------
// Type: CThumbnailGeneratorDmo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CThumbnailGeneratorDmo = opaque {
};
// --------------------------------------------------------
// Type: CTocGeneratorDmo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CTocGeneratorDmo = opaque {
};
// --------------------------------------------------------
// Type: CMPEGAACDecMediaObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMPEGAACDecMediaObject = opaque {
};
// --------------------------------------------------------
// Type: CNokiaAACDecMediaObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CNokiaAACDecMediaObject = opaque {
};
// --------------------------------------------------------
// Type: CVodafoneAACDecMediaObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CVodafoneAACDecMediaObject = opaque {
};
// --------------------------------------------------------
// Type: CZuneAACCCDecMediaObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CZuneAACCCDecMediaObject = opaque {
};
// --------------------------------------------------------
// Type: CNokiaAACCCDecMediaObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CNokiaAACCCDecMediaObject = opaque {
};
// --------------------------------------------------------
// Type: CVodafoneAACCCDecMediaObject
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CVodafoneAACCCDecMediaObject = opaque {
};
// --------------------------------------------------------
// Type: CMPEG2EncoderDS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMPEG2EncoderDS = opaque {
};
// --------------------------------------------------------
// Type: CMPEG2EncoderVideoDS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMPEG2EncoderVideoDS = opaque {
};
// --------------------------------------------------------
// Type: CMPEG2EncoderAudioDS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMPEG2EncoderAudioDS = opaque {
};
// --------------------------------------------------------
// Type: CMPEG2AudDecoderDS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMPEG2AudDecoderDS = opaque {
};
// --------------------------------------------------------
// Type: CMPEG2VidDecoderDS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMPEG2VidDecoderDS = opaque {
};
// --------------------------------------------------------
// Type: CDTVAudDecoderDS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CDTVAudDecoderDS = opaque {
};
// --------------------------------------------------------
// Type: CDTVVidDecoderDS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CDTVVidDecoderDS = opaque {
};
// --------------------------------------------------------
// Type: CMSAC3Enc
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMSAC3Enc = opaque {
};
// --------------------------------------------------------
// Type: CMSH264DecoderMFT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMSH264DecoderMFT = opaque {
};
// --------------------------------------------------------
// Type: CMSH263EncoderMFT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMSH263EncoderMFT = opaque {
};
// --------------------------------------------------------
// Type: CMSH264EncoderMFT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMSH264EncoderMFT = opaque {
};
// --------------------------------------------------------
// Type: CMSH265EncoderMFT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMSH265EncoderMFT = opaque {
};
// --------------------------------------------------------
// Type: CMSVPXEncoderMFT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMSVPXEncoderMFT = opaque {
};
// --------------------------------------------------------
// Type: CMSH264RemuxMFT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMSH264RemuxMFT = opaque {
};
// --------------------------------------------------------
// Type: CMSAACDecMFT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMSAACDecMFT = opaque {
};
// --------------------------------------------------------
// Type: AACMFTEncoder
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const AACMFTEncoder = opaque {
};
// --------------------------------------------------------
// Type: CMSDDPlusDecMFT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMSDDPlusDecMFT = opaque {
};
// --------------------------------------------------------
// Type: CMPEG2VideoEncoderMFT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMPEG2VideoEncoderMFT = opaque {
};
// --------------------------------------------------------
// Type: CMPEG2AudioEncoderMFT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMPEG2AudioEncoderMFT = opaque {
};
// --------------------------------------------------------
// Type: CMSMPEGDecoderMFT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMSMPEGDecoderMFT = opaque {
};
// --------------------------------------------------------
// Type: CMSMPEGAudDecMFT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMSMPEGAudDecMFT = opaque {
};
// --------------------------------------------------------
// Type: CMSDolbyDigitalEncMFT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMSDolbyDigitalEncMFT = opaque {
};
// --------------------------------------------------------
// Type: MP3ACMCodecWrapper
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const MP3ACMCodecWrapper = opaque {
};
// --------------------------------------------------------
// Type: ALawCodecWrapper
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ALawCodecWrapper = opaque {
};
// --------------------------------------------------------
// Type: MULawCodecWrapper
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const MULawCodecWrapper = opaque {
};
// --------------------------------------------------------
// Type: CMSVideoDSPMFT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMSVideoDSPMFT = opaque {
};
// --------------------------------------------------------
// Type: VorbisDecoderMFT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const VorbisDecoderMFT = opaque {
};
// --------------------------------------------------------
// Type: CMSFLACDecMFT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMSFLACDecMFT = opaque {
};
// --------------------------------------------------------
// Type: CMSFLACEncMFT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMSFLACEncMFT = opaque {
};
// --------------------------------------------------------
// Type: MFFLACBytestreamHandler
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const MFFLACBytestreamHandler = opaque {
};
// --------------------------------------------------------
// Type: MFFLACSinkClassFactory
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const MFFLACSinkClassFactory = opaque {
};
// --------------------------------------------------------
// Type: CMSALACDecMFT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMSALACDecMFT = opaque {
};
// --------------------------------------------------------
// Type: CMSALACEncMFT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMSALACEncMFT = opaque {
};
// --------------------------------------------------------
// Type: CMSOpusDecMFT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMSOpusDecMFT = opaque {
};
// --------------------------------------------------------
// Type: MSAMRNBDecoder
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const MSAMRNBDecoder = opaque {
};
// --------------------------------------------------------
// Type: MSAMRNBEncoder
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const MSAMRNBEncoder = opaque {
};
// --------------------------------------------------------
// Type: MFAMRNBByteStreamHandler
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const MFAMRNBByteStreamHandler = opaque {
};
// --------------------------------------------------------
// Type: MFAMRNBSinkClassFactory
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const MFAMRNBSinkClassFactory = opaque {
};
// --------------------------------------------------------
// Type: _DMO_INPUT_DATA_BUFFER_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _DMO_INPUT_DATA_BUFFER_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: _DMO_OUTPUT_DATA_BUFFER_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _DMO_OUTPUT_DATA_BUFFER_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: _DMO_INPUT_STATUS_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _DMO_INPUT_STATUS_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: _DMO_INPUT_STREAM_INFO_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _DMO_INPUT_STREAM_INFO_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: _DMO_OUTPUT_STREAM_INFO_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _DMO_OUTPUT_STREAM_INFO_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: _DMO_SET_TYPE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _DMO_SET_TYPE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: _DMO_PROCESS_OUTPUT_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _DMO_PROCESS_OUTPUT_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: _DMO_INPLACE_PROCESS_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _DMO_INPLACE_PROCESS_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: _DMO_QUALITY_STATUS_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _DMO_QUALITY_STATUS_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: _DMO_VIDEO_OUTPUT_STREAM_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _DMO_VIDEO_OUTPUT_STREAM_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: WMT_PROP_DATATYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WMT_PROP_DATATYPE = *opaque{
};
// --------------------------------------------------------
// Type: IWMValidate
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWMValidate = *opaque{
    // TODO: Method 'SetIdentifier'
};
// --------------------------------------------------------
// Type: IValidateBinding
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IValidateBinding = *opaque{
    // TODO: Method 'GetIdentifier'
};
// --------------------------------------------------------
// Type: IWMVideoDecoderHurryup
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWMVideoDecoderHurryup = *opaque{
    // TODO: Method 'SetHurryup'
    // TODO: Method 'GetHurryup'
};
// --------------------------------------------------------
// Type: IWMVideoForceKeyFrame
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWMVideoForceKeyFrame = *opaque{
    // TODO: Method 'SetKeyFrame'
};
// --------------------------------------------------------
// Type: IWMCodecStrings
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWMCodecStrings = *opaque{
    // TODO: Method 'GetName'
    // TODO: Method 'GetDescription'
};
// --------------------------------------------------------
// Type: IWMCodecProps
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWMCodecProps = *opaque{
    // TODO: Method 'GetFormatProp'
    // TODO: Method 'GetCodecProp'
};
// --------------------------------------------------------
// Type: IWMCodecLeakyBucket
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWMCodecLeakyBucket = *opaque{
    // TODO: Method 'SetBufferSizeBits'
    // TODO: Method 'GetBufferSizeBits'
    // TODO: Method 'SetBufferFullnessBits'
    // TODO: Method 'GetBufferFullnessBits'
};
// --------------------------------------------------------
// Type: IWMCodecOutputTimestamp
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWMCodecOutputTimestamp = *opaque{
    // TODO: Method 'GetNextOutputTime'
};
// --------------------------------------------------------
// Type: IWMVideoDecoderReconBuffer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWMVideoDecoderReconBuffer = *opaque{
    // TODO: Method 'GetReconstructedVideoFrameSize'
    // TODO: Method 'GetReconstructedVideoFrame'
    // TODO: Method 'SetReconstructedVideoFrame'
};
// --------------------------------------------------------
// Type: IWMCodecPrivateData
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWMCodecPrivateData = *opaque{
    // TODO: Method 'SetPartialOutputType'
    // TODO: Method 'GetPrivateData'
};
// --------------------------------------------------------
// Type: IWMSampleExtensionSupport
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWMSampleExtensionSupport = *opaque{
    // TODO: Method 'SetUseSampleExtensions'
};
// --------------------------------------------------------
// Type: IWMResamplerProps
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWMResamplerProps = *opaque{
    // TODO: Method 'SetHalfFilterLength'
    // TODO: Method 'SetUserChannelMtx'
};
// --------------------------------------------------------
// Type: IWMResizerProps
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWMResizerProps = *opaque{
    // TODO: Method 'SetResizerQuality'
    // TODO: Method 'SetInterlaceMode'
    // TODO: Method 'SetClipRegion'
    // TODO: Method 'SetFullCropRegion'
    // TODO: Method 'GetFullCropRegion'
};
// --------------------------------------------------------
// Type: IWMColorLegalizerProps
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWMColorLegalizerProps = *opaque{
    // TODO: Method 'SetColorLegalizerQuality'
};
// --------------------------------------------------------
// Type: IWMInterlaceProps
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWMInterlaceProps = *opaque{
    // TODO: Method 'SetProcessType'
    // TODO: Method 'SetInitInverseTeleCinePattern'
    // TODO: Method 'SetLastFrame'
};
// --------------------------------------------------------
// Type: IWMFrameInterpProps
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWMFrameInterpProps = *opaque{
    // TODO: Method 'SetFrameRateIn'
    // TODO: Method 'SetFrameRateOut'
    // TODO: Method 'SetFrameInterpEnabled'
    // TODO: Method 'SetComplexityLevel'
};
// --------------------------------------------------------
// Type: IWMColorConvProps
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWMColorConvProps = *opaque{
    // TODO: Method 'SetMode'
    // TODO: Method 'SetFullCroppingParam'
};
// --------------------------------------------------------
// Type: WMV_DYNAMIC_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WMV_DYNAMIC_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: MF_AUVRHP_ROOMMODEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_AUVRHP_ROOMMODEL = *opaque{
};
// --------------------------------------------------------
// Type: AEC_SYSTEM_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AEC_SYSTEM_MODE = *opaque{
};
// --------------------------------------------------------
// Type: AecQualityMetrics_Struct
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AecQualityMetrics_Struct = extern struct {
    i64Timestamp: {"kind":"Int64"},
    ConvergenceFlag: {"kind":"Byte"},
    MicClippedFlag: {"kind":"Byte"},
    MicSilenceFlag: {"kind":"Byte"},
    PstvFeadbackFlag: {"kind":"Byte"},
    SpkClippedFlag: {"kind":"Byte"},
    SpkMuteFlag: {"kind":"Byte"},
    GlitchFlag: {"kind":"Byte"},
    DoubleTalkFlag: {"kind":"Byte"},
    uGlitchCount: {"kind":"UInt32"},
    uMicClipCount: {"kind":"UInt32"},
    fDuration: {"kind":"Single"},
    fTSVariance: {"kind":"Single"},
    fTSDriftRate: {"kind":"Single"},
    fVoiceLevel: {"kind":"Single"},
    fNoiseLevel: {"kind":"Single"},
    fERLE: {"kind":"Single"},
    fAvgERLE: {"kind":"Single"},
    dwReserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: AEC_VAD_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AEC_VAD_MODE = *opaque{
};
// --------------------------------------------------------
// Type: AEC_INPUT_STREAM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AEC_INPUT_STREAM = *opaque{
};
// --------------------------------------------------------
// Type: MIC_ARRAY_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MIC_ARRAY_MODE = *opaque{
};
// --------------------------------------------------------
// Type: MFVideoDSPMode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFVideoDSPMode = *opaque{
};
// --------------------------------------------------------
// Type: TOC_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOC_DESCRIPTOR = extern struct {
    guidID: Guid,
    wStreamNumber: {"kind":"UInt16"},
    guidType: Guid,
    wLanguageIndex: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: TOC_ENTRY_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOC_ENTRY_DESCRIPTOR = extern struct {
    qwStartTime: {"kind":"UInt64"},
    qwEndTime: {"kind":"UInt64"},
    qwStartPacketOffset: {"kind":"UInt64"},
    qwEndPacketOffset: {"kind":"UInt64"},
    qwRepresentativeFrameTime: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: TOC_POS_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TOC_POS_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: ITocEntry
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITocEntry = *opaque{
    // TODO: Method 'SetTitle'
    // TODO: Method 'GetTitle'
    // TODO: Method 'SetDescriptor'
    // TODO: Method 'GetDescriptor'
    // TODO: Method 'SetSubEntries'
    // TODO: Method 'GetSubEntries'
    // TODO: Method 'SetDescriptionData'
    // TODO: Method 'GetDescriptionData'
};
// --------------------------------------------------------
// Type: ITocEntryList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITocEntryList = *opaque{
    // TODO: Method 'GetEntryCount'
    // TODO: Method 'GetEntryByIndex'
    // TODO: Method 'AddEntry'
    // TODO: Method 'AddEntryByIndex'
    // TODO: Method 'RemoveEntryByIndex'
};
// --------------------------------------------------------
// Type: IToc
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IToc = *opaque{
    // TODO: Method 'SetDescriptor'
    // TODO: Method 'GetDescriptor'
    // TODO: Method 'SetDescription'
    // TODO: Method 'GetDescription'
    // TODO: Method 'SetContext'
    // TODO: Method 'GetContext'
    // TODO: Method 'GetEntryListCount'
    // TODO: Method 'GetEntryListByIndex'
    // TODO: Method 'AddEntryList'
    // TODO: Method 'AddEntryListByIndex'
    // TODO: Method 'RemoveEntryListByIndex'
};
// --------------------------------------------------------
// Type: ITocCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITocCollection = *opaque{
    // TODO: Method 'GetEntryCount'
    // TODO: Method 'GetEntryByIndex'
    // TODO: Method 'AddEntry'
    // TODO: Method 'AddEntryByIndex'
    // TODO: Method 'RemoveEntryByIndex'
};
// --------------------------------------------------------
// Type: ITocParser
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITocParser = *opaque{
    // TODO: Method 'Init'
    // TODO: Method 'GetTocCount'
    // TODO: Method 'GetTocByIndex'
    // TODO: Method 'GetTocByType'
    // TODO: Method 'AddToc'
    // TODO: Method 'RemoveTocByIndex'
    // TODO: Method 'RemoveTocByType'
    // TODO: Method 'Commit'
};
// --------------------------------------------------------
// Type: FILE_OPENMODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FILE_OPENMODE = *opaque{
};
// --------------------------------------------------------
// Type: SEEK_ORIGIN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SEEK_ORIGIN = *opaque{
};
// --------------------------------------------------------
// Type: FILE_ACCESSMODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FILE_ACCESSMODE = *opaque{
};
// --------------------------------------------------------
// Type: IFileIo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFileIo = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'GetLength'
    // TODO: Method 'SetLength'
    // TODO: Method 'GetCurrentPosition'
    // TODO: Method 'SetCurrentPosition'
    // TODO: Method 'IsEndOfStream'
    // TODO: Method 'Read'
    // TODO: Method 'Write'
    // TODO: Method 'Seek'
    // TODO: Method 'Close'
};
// --------------------------------------------------------
// Type: IFileClient
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFileClient = *opaque{
    // TODO: Method 'GetObjectDiskSize'
    // TODO: Method 'Write'
    // TODO: Method 'Read'
};
// --------------------------------------------------------
// Type: IClusterDetector
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IClusterDetector = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'Detect'
};
// --------------------------------------------------------
// Type: DXVA_AYUVsample2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA_AYUVsample2 = extern struct {
    bCrValue: {"kind":"Byte"},
    bCbValue: {"kind":"Byte"},
    bY_Value: {"kind":"Byte"},
    bSampleAlpha8: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: DXVA_BufferDescription
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const DXVA_BufferDescription = *opaque{
};
// --------------------------------------------------------
// Type: DXVA_ConfigPictureDecode
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const DXVA_ConfigPictureDecode = *opaque{
};
// --------------------------------------------------------
// Type: DXVA_PictureParameters
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const DXVA_PictureParameters = *opaque{
};
// --------------------------------------------------------
// Type: DXVAUncompDataInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAUncompDataInfo = extern struct {
    UncompWidth: {"kind":"UInt32"},
    UncompHeight: {"kind":"UInt32"},
    UncompFormat: Windows.Win32.Direct3D9.D3DFORMAT,
};
// --------------------------------------------------------
// Type: DXVACompBufferInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVACompBufferInfo = extern struct {
    NumCompBuffers: {"kind":"UInt32"},
    WidthToCreate: {"kind":"UInt32"},
    HeightToCreate: {"kind":"UInt32"},
    BytesToAllocate: {"kind":"UInt32"},
    Usage: {"kind":"UInt32"},
    Pool: Windows.Win32.Direct3D9.D3DPOOL,
    Format: Windows.Win32.Direct3D9.D3DFORMAT,
};
// --------------------------------------------------------
// Type: DXVABufferInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVABufferInfo = extern struct {
    pCompSurface: {"kind""Ptr","child":{"kind":"Void"}},
    DataOffset: {"kind":"UInt32"},
    DataSize: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DXVA_SampleFormat
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXVA_SampleFormat = *opaque{
};
// --------------------------------------------------------
// Type: DXVA_VideoTransferFunction
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXVA_VideoTransferFunction = *opaque{
};
// --------------------------------------------------------
// Type: DXVA_VideoPrimaries
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXVA_VideoPrimaries = *opaque{
};
// --------------------------------------------------------
// Type: DXVA_VideoLighting
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXVA_VideoLighting = *opaque{
};
// --------------------------------------------------------
// Type: DXVA_VideoTransferMatrix
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXVA_VideoTransferMatrix = *opaque{
};
// --------------------------------------------------------
// Type: DXVA_NominalRange
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXVA_NominalRange = *opaque{
};
// --------------------------------------------------------
// Type: DXVA_VideoChromaSubsampling
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXVA_VideoChromaSubsampling = *opaque{
};
// --------------------------------------------------------
// Type: DXVA_ExtendedFormat
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA_ExtendedFormat = extern struct {
    _bitfield: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DXVA_Frequency
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA_Frequency = extern struct {
    Numerator: {"kind":"UInt32"},
    Denominator: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DXVA_VideoDesc
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA_VideoDesc = extern struct {
    Size: {"kind":"UInt32"},
    SampleWidth: {"kind":"UInt32"},
    SampleHeight: {"kind":"UInt32"},
    SampleFormat: {"kind":"UInt32"},
    d3dFormat: Windows.Win32.Direct3D9.D3DFORMAT,
    InputSampleFreq: Windows.Win32.MediaFoundation.DXVA_Frequency,
    OutputFrameFreq: Windows.Win32.MediaFoundation.DXVA_Frequency,
};
// --------------------------------------------------------
// Type: DXVA_VideoProcessCaps
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXVA_VideoProcessCaps = *opaque{
};
// --------------------------------------------------------
// Type: DXVA_DeinterlaceTech
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXVA_DeinterlaceTech = *opaque{
};
// --------------------------------------------------------
// Type: DXVA_VideoSample
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA_VideoSample = extern struct {
    rtStart: {"kind":"Int64"},
    rtEnd: {"kind":"Int64"},
    SampleFormat: Windows.Win32.MediaFoundation.DXVA_SampleFormat,
    lpDDSSrcSurface: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: DXVA_SampleFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXVA_SampleFlags = *opaque{
};
// --------------------------------------------------------
// Type: DXVA_DestinationFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXVA_DestinationFlags = *opaque{
};
// --------------------------------------------------------
// Type: DXVA_VideoSample2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA_VideoSample2 = extern struct {
    rtStart: {"kind":"Int64"},
    rtEnd: {"kind":"Int64"},
    SampleFormat: {"kind":"UInt32"},
    SampleFlags: {"kind":"UInt32"},
    lpDDSSrcSurface: {"kind""Ptr","child":{"kind":"Void"}},
    rcSrc: Windows.Win32.DisplayDevices.RECT,
    rcDst: Windows.Win32.DisplayDevices.RECT,
    Palette: {"kind":"Array","child": Windows.Win32.MediaFoundation.DXVA_AYUVsample2},
};
// --------------------------------------------------------
// Type: DXVA_DeinterlaceCaps
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA_DeinterlaceCaps = extern struct {
    Size: {"kind":"UInt32"},
    NumPreviousOutputFrames: {"kind":"UInt32"},
    InputPool: {"kind":"UInt32"},
    NumForwardRefSamples: {"kind":"UInt32"},
    NumBackwardRefSamples: {"kind":"UInt32"},
    d3dOutputFormat: Windows.Win32.Direct3D9.D3DFORMAT,
    VideoProcessingCaps: Windows.Win32.MediaFoundation.DXVA_VideoProcessCaps,
    DeinterlaceTechnology: Windows.Win32.MediaFoundation.DXVA_DeinterlaceTech,
};
// --------------------------------------------------------
// Type: DXVA_DeinterlaceBlt
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA_DeinterlaceBlt = extern struct {
    Size: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
    rtTarget: {"kind":"Int64"},
    DstRect: Windows.Win32.DisplayDevices.RECT,
    SrcRect: Windows.Win32.DisplayDevices.RECT,
    NumSourceSurfaces: {"kind":"UInt32"},
    Alpha: {"kind":"Single"},
    Source: {"kind":"Array","child": Windows.Win32.MediaFoundation.DXVA_VideoSample},
};
// --------------------------------------------------------
// Type: DXVA_DeinterlaceBltEx
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA_DeinterlaceBltEx = extern struct {
    Size: {"kind":"UInt32"},
    BackgroundColor: Windows.Win32.MediaFoundation.DXVA_AYUVsample2,
    rcTarget: Windows.Win32.DisplayDevices.RECT,
    rtTarget: {"kind":"Int64"},
    NumSourceSurfaces: {"kind":"UInt32"},
    Alpha: {"kind":"Single"},
    Source: {"kind":"Array","child": Windows.Win32.MediaFoundation.DXVA_VideoSample2},
    DestinationFormat: {"kind":"UInt32"},
    DestinationFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DXVA_DeinterlaceQueryAvailableModes
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA_DeinterlaceQueryAvailableModes = extern struct {
    Size: {"kind":"UInt32"},
    NumGuids: {"kind":"UInt32"},
    Guids: {"kind":"Array","child": Guid},
};
// --------------------------------------------------------
// Type: DXVA_DeinterlaceQueryModeCaps
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA_DeinterlaceQueryModeCaps = extern struct {
    Size: {"kind":"UInt32"},
    Guid: Guid,
    VideoDesc: Windows.Win32.MediaFoundation.DXVA_VideoDesc,
};
// --------------------------------------------------------
// Type: DXVA_ProcAmpControlProp
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXVA_ProcAmpControlProp = *opaque{
};
// --------------------------------------------------------
// Type: DXVA_ProcAmpControlCaps
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA_ProcAmpControlCaps = extern struct {
    Size: {"kind":"UInt32"},
    InputPool: {"kind":"UInt32"},
    d3dOutputFormat: Windows.Win32.Direct3D9.D3DFORMAT,
    ProcAmpControlProps: {"kind":"UInt32"},
    VideoProcessingCaps: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DXVA_ProcAmpControlQueryRange
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA_ProcAmpControlQueryRange = extern struct {
    Size: {"kind":"UInt32"},
    ProcAmpControlProp: Windows.Win32.MediaFoundation.DXVA_ProcAmpControlProp,
    VideoDesc: Windows.Win32.MediaFoundation.DXVA_VideoDesc,
};
// --------------------------------------------------------
// Type: DXVA_VideoPropertyRange
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA_VideoPropertyRange = extern struct {
    MinValue: {"kind":"Single"},
    MaxValue: {"kind":"Single"},
    DefaultValue: {"kind":"Single"},
    StepSize: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: DXVA_ProcAmpControlBlt
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA_ProcAmpControlBlt = extern struct {
    Size: {"kind":"UInt32"},
    DstRect: Windows.Win32.DisplayDevices.RECT,
    SrcRect: Windows.Win32.DisplayDevices.RECT,
    Alpha: {"kind":"Single"},
    Brightness: {"kind":"Single"},
    Contrast: {"kind":"Single"},
    Hue: {"kind":"Single"},
    Saturation: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: DXVA_COPPSignature
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA_COPPSignature = extern struct {
    Signature: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: DXVA_COPPCommand
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA_COPPCommand = extern struct {
    macKDI: Guid,
    guidCommandID: Guid,
    dwSequence: {"kind":"UInt32"},
    cbSizeData: {"kind":"UInt32"},
    CommandData: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: DXVA_COPPStatusInput
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA_COPPStatusInput = extern struct {
    rApp: Guid,
    guidStatusRequestID: Guid,
    dwSequence: {"kind":"UInt32"},
    cbSizeData: {"kind":"UInt32"},
    StatusData: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: DXVA_COPPStatusOutput
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA_COPPStatusOutput = extern struct {
    macKDI: Guid,
    cbSizeData: {"kind":"UInt32"},
    COPPStatus: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: DXVAHD_FRAME_FORMAT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXVAHD_FRAME_FORMAT = *opaque{
};
// --------------------------------------------------------
// Type: DXVAHD_DEVICE_USAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXVAHD_DEVICE_USAGE = *opaque{
};
// --------------------------------------------------------
// Type: DXVAHD_SURFACE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXVAHD_SURFACE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DXVAHD_DEVICE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXVAHD_DEVICE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DXVAHD_DEVICE_CAPS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXVAHD_DEVICE_CAPS = *opaque{
};
// --------------------------------------------------------
// Type: DXVAHD_FEATURE_CAPS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXVAHD_FEATURE_CAPS = *opaque{
};
// --------------------------------------------------------
// Type: DXVAHD_FILTER_CAPS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXVAHD_FILTER_CAPS = *opaque{
};
// --------------------------------------------------------
// Type: DXVAHD_INPUT_FORMAT_CAPS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXVAHD_INPUT_FORMAT_CAPS = *opaque{
};
// --------------------------------------------------------
// Type: DXVAHD_PROCESSOR_CAPS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXVAHD_PROCESSOR_CAPS = *opaque{
};
// --------------------------------------------------------
// Type: DXVAHD_ITELECINE_CAPS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXVAHD_ITELECINE_CAPS = *opaque{
};
// --------------------------------------------------------
// Type: DXVAHD_FILTER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXVAHD_FILTER = *opaque{
};
// --------------------------------------------------------
// Type: DXVAHD_BLT_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXVAHD_BLT_STATE = *opaque{
};
// --------------------------------------------------------
// Type: DXVAHD_ALPHA_FILL_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXVAHD_ALPHA_FILL_MODE = *opaque{
};
// --------------------------------------------------------
// Type: DXVAHD_STREAM_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXVAHD_STREAM_STATE = *opaque{
};
// --------------------------------------------------------
// Type: DXVAHD_OUTPUT_RATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXVAHD_OUTPUT_RATE = *opaque{
};
// --------------------------------------------------------
// Type: DXVAHD_RATIONAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAHD_RATIONAL = extern struct {
    Numerator: {"kind":"UInt32"},
    Denominator: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DXVAHD_COLOR_RGBA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAHD_COLOR_RGBA = extern struct {
    R: {"kind":"Single"},
    G: {"kind":"Single"},
    B: {"kind":"Single"},
    A: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: DXVAHD_COLOR_YCbCrA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAHD_COLOR_YCbCrA = extern struct {
    Y: {"kind":"Single"},
    Cb: {"kind":"Single"},
    Cr: {"kind":"Single"},
    A: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: DXVAHD_COLOR
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const DXVAHD_COLOR = *opaque{
};
// --------------------------------------------------------
// Type: DXVAHD_CONTENT_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAHD_CONTENT_DESC = extern struct {
    InputFrameFormat: Windows.Win32.MediaFoundation.DXVAHD_FRAME_FORMAT,
    InputFrameRate: Windows.Win32.MediaFoundation.DXVAHD_RATIONAL,
    InputWidth: {"kind":"UInt32"},
    InputHeight: {"kind":"UInt32"},
    OutputFrameRate: Windows.Win32.MediaFoundation.DXVAHD_RATIONAL,
    OutputWidth: {"kind":"UInt32"},
    OutputHeight: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DXVAHD_VPDEVCAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAHD_VPDEVCAPS = extern struct {
    DeviceType: Windows.Win32.MediaFoundation.DXVAHD_DEVICE_TYPE,
    DeviceCaps: {"kind":"UInt32"},
    FeatureCaps: {"kind":"UInt32"},
    FilterCaps: {"kind":"UInt32"},
    InputFormatCaps: {"kind":"UInt32"},
    InputPool: Windows.Win32.Direct3D9.D3DPOOL,
    OutputFormatCount: {"kind":"UInt32"},
    InputFormatCount: {"kind":"UInt32"},
    VideoProcessorCount: {"kind":"UInt32"},
    MaxInputStreams: {"kind":"UInt32"},
    MaxStreamStates: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DXVAHD_VPCAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAHD_VPCAPS = extern struct {
    VPGuid: Guid,
    PastFrames: {"kind":"UInt32"},
    FutureFrames: {"kind":"UInt32"},
    ProcessorCaps: {"kind":"UInt32"},
    ITelecineCaps: {"kind":"UInt32"},
    CustomRateCount: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DXVAHD_CUSTOM_RATE_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAHD_CUSTOM_RATE_DATA = extern struct {
    CustomRate: Windows.Win32.MediaFoundation.DXVAHD_RATIONAL,
    OutputFrames: {"kind":"UInt32"},
    InputInterlaced: Windows.Win32.SystemServices.BOOL,
    InputFramesOrFields: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DXVAHD_FILTER_RANGE_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAHD_FILTER_RANGE_DATA = extern struct {
    Minimum: {"kind":"Int32"},
    Maximum: {"kind":"Int32"},
    Default: {"kind":"Int32"},
    Multiplier: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: DXVAHD_BLT_STATE_TARGET_RECT_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAHD_BLT_STATE_TARGET_RECT_DATA = extern struct {
    Enable: Windows.Win32.SystemServices.BOOL,
    TargetRect: Windows.Win32.DisplayDevices.RECT,
};
// --------------------------------------------------------
// Type: DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA = extern struct {
    YCbCr: Windows.Win32.SystemServices.BOOL,
    BackgroundColor: Windows.Win32.MediaFoundation.DXVAHD_COLOR,
};
// --------------------------------------------------------
// Type: DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA = extern struct {
    Anonymous: Windows.Win32.MediaFoundation.DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: DXVAHD_BLT_STATE_ALPHA_FILL_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAHD_BLT_STATE_ALPHA_FILL_DATA = extern struct {
    Mode: Windows.Win32.MediaFoundation.DXVAHD_ALPHA_FILL_MODE,
    StreamNumber: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DXVAHD_BLT_STATE_CONSTRICTION_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAHD_BLT_STATE_CONSTRICTION_DATA = extern struct {
    Enable: Windows.Win32.SystemServices.BOOL,
    Size: Windows.Win32.DisplayDevices.SIZE,
};
// --------------------------------------------------------
// Type: DXVAHD_BLT_STATE_PRIVATE_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAHD_BLT_STATE_PRIVATE_DATA = extern struct {
    Guid: Guid,
    DataSize: {"kind":"UInt32"},
    pData: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: DXVAHD_STREAM_STATE_D3DFORMAT_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAHD_STREAM_STATE_D3DFORMAT_DATA = extern struct {
    Format: Windows.Win32.Direct3D9.D3DFORMAT,
};
// --------------------------------------------------------
// Type: DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA = extern struct {
    FrameFormat: Windows.Win32.MediaFoundation.DXVAHD_FRAME_FORMAT,
};
// --------------------------------------------------------
// Type: DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA = extern struct {
    Anonymous: Windows.Win32.MediaFoundation.DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA = extern struct {
    RepeatFrame: Windows.Win32.SystemServices.BOOL,
    OutputRate: Windows.Win32.MediaFoundation.DXVAHD_OUTPUT_RATE,
    CustomRate: Windows.Win32.MediaFoundation.DXVAHD_RATIONAL,
};
// --------------------------------------------------------
// Type: DXVAHD_STREAM_STATE_SOURCE_RECT_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAHD_STREAM_STATE_SOURCE_RECT_DATA = extern struct {
    Enable: Windows.Win32.SystemServices.BOOL,
    SourceRect: Windows.Win32.DisplayDevices.RECT,
};
// --------------------------------------------------------
// Type: DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA = extern struct {
    Enable: Windows.Win32.SystemServices.BOOL,
    DestinationRect: Windows.Win32.DisplayDevices.RECT,
};
// --------------------------------------------------------
// Type: DXVAHD_STREAM_STATE_ALPHA_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAHD_STREAM_STATE_ALPHA_DATA = extern struct {
    Enable: Windows.Win32.SystemServices.BOOL,
    Alpha: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: DXVAHD_STREAM_STATE_PALETTE_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAHD_STREAM_STATE_PALETTE_DATA = extern struct {
    Count: {"kind":"UInt32"},
    pEntries: {"kind""Ptr","child":{"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: DXVAHD_STREAM_STATE_LUMA_KEY_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAHD_STREAM_STATE_LUMA_KEY_DATA = extern struct {
    Enable: Windows.Win32.SystemServices.BOOL,
    Lower: {"kind":"Single"},
    Upper: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA = extern struct {
    Enable: Windows.Win32.SystemServices.BOOL,
    SourceAspectRatio: Windows.Win32.MediaFoundation.DXVAHD_RATIONAL,
    DestinationAspectRatio: Windows.Win32.MediaFoundation.DXVAHD_RATIONAL,
};
// --------------------------------------------------------
// Type: DXVAHD_STREAM_STATE_FILTER_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAHD_STREAM_STATE_FILTER_DATA = extern struct {
    Enable: Windows.Win32.SystemServices.BOOL,
    Level: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: DXVAHD_STREAM_STATE_PRIVATE_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAHD_STREAM_STATE_PRIVATE_DATA = extern struct {
    Guid: Guid,
    DataSize: {"kind":"UInt32"},
    pData: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: DXVAHD_STREAM_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAHD_STREAM_DATA = extern struct {
    Enable: Windows.Win32.SystemServices.BOOL,
    OutputIndex: {"kind":"UInt32"},
    InputFrameOrField: {"kind":"UInt32"},
    PastFrames: {"kind":"UInt32"},
    FutureFrames: {"kind":"UInt32"},
    ppPastSurfaces: {"kind""Ptr","child":Windows.Win32.Direct2D.IDirect3DSurface9},
    pInputSurface: Windows.Win32.Direct2D.IDirect3DSurface9,
    ppFutureSurfaces: {"kind""Ptr","child":Windows.Win32.Direct2D.IDirect3DSurface9},
};
// --------------------------------------------------------
// Type: DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA = extern struct {
    Enable: Windows.Win32.SystemServices.BOOL,
    ITelecineFlags: {"kind":"UInt32"},
    Frames: {"kind":"UInt32"},
    InputField: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IDXVAHD_Device
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXVAHD_Device = *opaque{
    // TODO: Method 'CreateVideoSurface'
    // TODO: Method 'GetVideoProcessorDeviceCaps'
    // TODO: Method 'GetVideoProcessorOutputFormats'
    // TODO: Method 'GetVideoProcessorInputFormats'
    // TODO: Method 'GetVideoProcessorCaps'
    // TODO: Method 'GetVideoProcessorCustomRates'
    // TODO: Method 'GetVideoProcessorFilterRange'
    // TODO: Method 'CreateVideoProcessor'
};
// --------------------------------------------------------
// Type: IDXVAHD_VideoProcessor
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXVAHD_VideoProcessor = *opaque{
    // TODO: Method 'SetVideoProcessBltState'
    // TODO: Method 'GetVideoProcessBltState'
    // TODO: Method 'SetVideoProcessStreamState'
    // TODO: Method 'GetVideoProcessStreamState'
    // TODO: Method 'VideoProcessBltHD'
};
// --------------------------------------------------------
// Type: PDXVAHDSW_CreateDevice
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDXVAHDSW_CreateDevice = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDXVAHDSW_ProposeVideoPrivateFormat
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDXVAHDSW_ProposeVideoPrivateFormat = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDXVAHDSW_GetVideoProcessorDeviceCaps
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDXVAHDSW_GetVideoProcessorDeviceCaps = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDXVAHDSW_GetVideoProcessorOutputFormats
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDXVAHDSW_GetVideoProcessorOutputFormats = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDXVAHDSW_GetVideoProcessorInputFormats
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDXVAHDSW_GetVideoProcessorInputFormats = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDXVAHDSW_GetVideoProcessorCaps
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDXVAHDSW_GetVideoProcessorCaps = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDXVAHDSW_GetVideoProcessorCustomRates
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDXVAHDSW_GetVideoProcessorCustomRates = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDXVAHDSW_GetVideoProcessorFilterRange
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDXVAHDSW_GetVideoProcessorFilterRange = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDXVAHDSW_DestroyDevice
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDXVAHDSW_DestroyDevice = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDXVAHDSW_CreateVideoProcessor
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDXVAHDSW_CreateVideoProcessor = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDXVAHDSW_SetVideoProcessBltState
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDXVAHDSW_SetVideoProcessBltState = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDXVAHDSW_GetVideoProcessBltStatePrivate
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDXVAHDSW_GetVideoProcessBltStatePrivate = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDXVAHDSW_SetVideoProcessStreamState
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDXVAHDSW_SetVideoProcessStreamState = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDXVAHDSW_GetVideoProcessStreamStatePrivate
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDXVAHDSW_GetVideoProcessStreamStatePrivate = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDXVAHDSW_VideoProcessBltHD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDXVAHDSW_VideoProcessBltHD = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDXVAHDSW_DestroyVideoProcessor
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDXVAHDSW_DestroyVideoProcessor = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DXVAHDSW_CALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAHDSW_CALLBACKS = extern struct {
    CreateDevice: Windows.Win32.MediaFoundation.PDXVAHDSW_CreateDevice,
    ProposeVideoPrivateFormat: Windows.Win32.MediaFoundation.PDXVAHDSW_ProposeVideoPrivateFormat,
    GetVideoProcessorDeviceCaps: Windows.Win32.MediaFoundation.PDXVAHDSW_GetVideoProcessorDeviceCaps,
    GetVideoProcessorOutputFormats: Windows.Win32.MediaFoundation.PDXVAHDSW_GetVideoProcessorOutputFormats,
    GetVideoProcessorInputFormats: Windows.Win32.MediaFoundation.PDXVAHDSW_GetVideoProcessorInputFormats,
    GetVideoProcessorCaps: Windows.Win32.MediaFoundation.PDXVAHDSW_GetVideoProcessorCaps,
    GetVideoProcessorCustomRates: Windows.Win32.MediaFoundation.PDXVAHDSW_GetVideoProcessorCustomRates,
    GetVideoProcessorFilterRange: Windows.Win32.MediaFoundation.PDXVAHDSW_GetVideoProcessorFilterRange,
    DestroyDevice: Windows.Win32.MediaFoundation.PDXVAHDSW_DestroyDevice,
    CreateVideoProcessor: Windows.Win32.MediaFoundation.PDXVAHDSW_CreateVideoProcessor,
    SetVideoProcessBltState: Windows.Win32.MediaFoundation.PDXVAHDSW_SetVideoProcessBltState,
    GetVideoProcessBltStatePrivate: Windows.Win32.MediaFoundation.PDXVAHDSW_GetVideoProcessBltStatePrivate,
    SetVideoProcessStreamState: Windows.Win32.MediaFoundation.PDXVAHDSW_SetVideoProcessStreamState,
    GetVideoProcessStreamStatePrivate: Windows.Win32.MediaFoundation.PDXVAHDSW_GetVideoProcessStreamStatePrivate,
    VideoProcessBltHD: Windows.Win32.MediaFoundation.PDXVAHDSW_VideoProcessBltHD,
    DestroyVideoProcessor: Windows.Win32.MediaFoundation.PDXVAHDSW_DestroyVideoProcessor,
};
// --------------------------------------------------------
// Type: PDXVAHDSW_Plugin
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDXVAHDSW_Plugin = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DXVAHDETW_CREATEVIDEOPROCESSOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAHDETW_CREATEVIDEOPROCESSOR = extern struct {
    pObject: {"kind":"UInt64"},
    pD3D9Ex: {"kind":"UInt64"},
    VPGuid: Guid,
};
// --------------------------------------------------------
// Type: DXVAHDETW_VIDEOPROCESSBLTSTATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAHDETW_VIDEOPROCESSBLTSTATE = extern struct {
    pObject: {"kind":"UInt64"},
    State: Windows.Win32.MediaFoundation.DXVAHD_BLT_STATE,
    DataSize: {"kind":"UInt32"},
    SetState: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: DXVAHDETW_VIDEOPROCESSSTREAMSTATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAHDETW_VIDEOPROCESSSTREAMSTATE = extern struct {
    pObject: {"kind":"UInt64"},
    StreamNumber: {"kind":"UInt32"},
    State: Windows.Win32.MediaFoundation.DXVAHD_STREAM_STATE,
    DataSize: {"kind":"UInt32"},
    SetState: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: DXVAHDETW_VIDEOPROCESSBLTHD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAHDETW_VIDEOPROCESSBLTHD = extern struct {
    pObject: {"kind":"UInt64"},
    pOutputSurface: {"kind":"UInt64"},
    TargetRect: Windows.Win32.DisplayDevices.RECT,
    OutputFormat: Windows.Win32.Direct3D9.D3DFORMAT,
    ColorSpace: {"kind":"UInt32"},
    OutputFrame: {"kind":"UInt32"},
    StreamCount: {"kind":"UInt32"},
    Enter: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: DXVAHDETW_VIDEOPROCESSBLTHD_STREAM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAHDETW_VIDEOPROCESSBLTHD_STREAM = extern struct {
    pObject: {"kind":"UInt64"},
    pInputSurface: {"kind":"UInt64"},
    SourceRect: Windows.Win32.DisplayDevices.RECT,
    DestinationRect: Windows.Win32.DisplayDevices.RECT,
    InputFormat: Windows.Win32.Direct3D9.D3DFORMAT,
    FrameFormat: Windows.Win32.MediaFoundation.DXVAHD_FRAME_FORMAT,
    ColorSpace: {"kind":"UInt32"},
    StreamNumber: {"kind":"UInt32"},
    OutputIndex: {"kind":"UInt32"},
    InputFrameOrField: {"kind":"UInt32"},
    PastFrames: {"kind":"UInt32"},
    FutureFrames: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DXVAHDETW_DESTROYVIDEOPROCESSOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVAHDETW_DESTROYVIDEOPROCESSOR = extern struct {
    pObject: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: PDXVAHD_CreateDevice
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDXVAHD_CreateDevice = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DXVA2_ExtendedFormat
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA2_ExtendedFormat = extern struct {
    Anonymous: Windows.Win32.MediaFoundation.DXVA2_ExtendedFormat+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: DXVA2_SampleFormat
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXVA2_SampleFormat = *opaque{
};
// --------------------------------------------------------
// Type: DXVA2_VideoChromaSubSampling
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXVA2_VideoChromaSubSampling = *opaque{
};
// --------------------------------------------------------
// Type: DXVA2_NominalRange
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXVA2_NominalRange = *opaque{
};
// --------------------------------------------------------
// Type: DXVA2_VideoTransferMatrix
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXVA2_VideoTransferMatrix = *opaque{
};
// --------------------------------------------------------
// Type: DXVA2_VideoLighting
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXVA2_VideoLighting = *opaque{
};
// --------------------------------------------------------
// Type: DXVA2_VideoPrimaries
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXVA2_VideoPrimaries = *opaque{
};
// --------------------------------------------------------
// Type: DXVA2_VideoTransferFunction
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXVA2_VideoTransferFunction = *opaque{
};
// --------------------------------------------------------
// Type: DXVA2_Frequency
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA2_Frequency = extern struct {
    Numerator: {"kind":"UInt32"},
    Denominator: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DXVA2_VideoDesc
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA2_VideoDesc = extern struct {
    SampleWidth: {"kind":"UInt32"},
    SampleHeight: {"kind":"UInt32"},
    SampleFormat: Windows.Win32.MediaFoundation.DXVA2_ExtendedFormat,
    Format: Windows.Win32.Direct3D9.D3DFORMAT,
    InputSampleFreq: Windows.Win32.MediaFoundation.DXVA2_Frequency,
    OutputFrameFreq: Windows.Win32.MediaFoundation.DXVA2_Frequency,
    UABProtectionLevel: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_dxva2api_0000_0000_0003
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_dxva2api_0000_0000_0003 = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_dxva2api_0000_0000_0004
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_dxva2api_0000_0000_0004 = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_dxva2api_0000_0000_0005
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_dxva2api_0000_0000_0005 = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_dxva2api_0000_0000_0006
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_dxva2api_0000_0000_0006 = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_dxva2api_0000_0000_0007
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_dxva2api_0000_0000_0007 = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_dxva2api_0000_0000_0008
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_dxva2api_0000_0000_0008 = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_dxva2api_0000_0000_0009
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_dxva2api_0000_0000_0009 = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_dxva2api_0000_0000_0010
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_dxva2api_0000_0000_0010 = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_dxva2api_0000_0000_0011
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_dxva2api_0000_0000_0011 = *opaque{
};
// --------------------------------------------------------
// Type: DXVA2_VideoProcessorCaps
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA2_VideoProcessorCaps = extern struct {
    DeviceCaps: {"kind":"UInt32"},
    InputPool: Windows.Win32.Direct3D9.D3DPOOL,
    NumForwardRefSamples: {"kind":"UInt32"},
    NumBackwardRefSamples: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
    DeinterlaceTechnology: {"kind":"UInt32"},
    ProcAmpControlCaps: {"kind":"UInt32"},
    VideoProcessorOperations: {"kind":"UInt32"},
    NoiseFilterTechnology: {"kind":"UInt32"},
    DetailFilterTechnology: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DXVA2_Fixed32
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA2_Fixed32 = extern struct {
    Anonymous: Windows.Win32.MediaFoundation.DXVA2_Fixed32+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            Fraction: {"kind":"UInt16"},
            Value: {"kind":"Int16"},
        };
    };
};
// --------------------------------------------------------
// Type: DXVA2_AYUVSample8
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA2_AYUVSample8 = extern struct {
    Cr: {"kind":"Byte"},
    Cb: {"kind":"Byte"},
    Y: {"kind":"Byte"},
    Alpha: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: DXVA2_AYUVSample16
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA2_AYUVSample16 = extern struct {
    Cr: {"kind":"UInt16"},
    Cb: {"kind":"UInt16"},
    Y: {"kind":"UInt16"},
    Alpha: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: DXVA2_VideoSample
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA2_VideoSample = extern struct {
    Start: {"kind":"Int64"},
    End: {"kind":"Int64"},
    SampleFormat: Windows.Win32.MediaFoundation.DXVA2_ExtendedFormat,
    SrcSurface: Windows.Win32.Direct2D.IDirect3DSurface9,
    SrcRect: Windows.Win32.DisplayDevices.RECT,
    DstRect: Windows.Win32.DisplayDevices.RECT,
    Pal: {"kind":"Array","child": Windows.Win32.MediaFoundation.DXVA2_AYUVSample8},
    PlanarAlpha: Windows.Win32.MediaFoundation.DXVA2_Fixed32,
    SampleData: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DXVA2_ValueRange
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA2_ValueRange = extern struct {
    MinValue: Windows.Win32.MediaFoundation.DXVA2_Fixed32,
    MaxValue: Windows.Win32.MediaFoundation.DXVA2_Fixed32,
    DefaultValue: Windows.Win32.MediaFoundation.DXVA2_Fixed32,
    StepSize: Windows.Win32.MediaFoundation.DXVA2_Fixed32,
};
// --------------------------------------------------------
// Type: DXVA2_ProcAmpValues
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA2_ProcAmpValues = extern struct {
    Brightness: Windows.Win32.MediaFoundation.DXVA2_Fixed32,
    Contrast: Windows.Win32.MediaFoundation.DXVA2_Fixed32,
    Hue: Windows.Win32.MediaFoundation.DXVA2_Fixed32,
    Saturation: Windows.Win32.MediaFoundation.DXVA2_Fixed32,
};
// --------------------------------------------------------
// Type: DXVA2_FilterValues
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA2_FilterValues = extern struct {
    Level: Windows.Win32.MediaFoundation.DXVA2_Fixed32,
    Threshold: Windows.Win32.MediaFoundation.DXVA2_Fixed32,
    Radius: Windows.Win32.MediaFoundation.DXVA2_Fixed32,
};
// --------------------------------------------------------
// Type: DXVA2_VideoProcessBltParams
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA2_VideoProcessBltParams = extern struct {
    TargetFrame: {"kind":"Int64"},
    TargetRect: Windows.Win32.DisplayDevices.RECT,
    ConstrictionSize: Windows.Win32.DisplayDevices.SIZE,
    StreamingFlags: {"kind":"UInt32"},
    BackgroundColor: Windows.Win32.MediaFoundation.DXVA2_AYUVSample16,
    DestFormat: Windows.Win32.MediaFoundation.DXVA2_ExtendedFormat,
    ProcAmpValues: Windows.Win32.MediaFoundation.DXVA2_ProcAmpValues,
    Alpha: Windows.Win32.MediaFoundation.DXVA2_Fixed32,
    NoiseFilterLuma: Windows.Win32.MediaFoundation.DXVA2_FilterValues,
    NoiseFilterChroma: Windows.Win32.MediaFoundation.DXVA2_FilterValues,
    DetailFilterLuma: Windows.Win32.MediaFoundation.DXVA2_FilterValues,
    DetailFilterChroma: Windows.Win32.MediaFoundation.DXVA2_FilterValues,
    DestData: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_dxva2api_0000_0000_0012
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_dxva2api_0000_0000_0012 = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_dxva2api_0000_0000_0013
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_dxva2api_0000_0000_0013 = *opaque{
};
// --------------------------------------------------------
// Type: DXVA2_ConfigPictureDecode
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA2_ConfigPictureDecode = extern struct {
    guidConfigBitstreamEncryption: Guid,
    guidConfigMBcontrolEncryption: Guid,
    guidConfigResidDiffEncryption: Guid,
    ConfigBitstreamRaw: {"kind":"UInt32"},
    ConfigMBcontrolRasterOrder: {"kind":"UInt32"},
    ConfigResidDiffHost: {"kind":"UInt32"},
    ConfigSpatialResid8: {"kind":"UInt32"},
    ConfigResid8Subtraction: {"kind":"UInt32"},
    ConfigSpatialHost8or9Clipping: {"kind":"UInt32"},
    ConfigSpatialResidInterleaved: {"kind":"UInt32"},
    ConfigIntraResidUnsigned: {"kind":"UInt32"},
    ConfigResidDiffAccelerator: {"kind":"UInt32"},
    ConfigHostInverseScan: {"kind":"UInt32"},
    ConfigSpecificIDCT: {"kind":"UInt32"},
    Config4GroupedCoefs: {"kind":"UInt32"},
    ConfigMinRenderTargetBuffCount: {"kind":"UInt16"},
    ConfigDecoderSpecific: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: DXVA2_DecodeBufferDesc
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA2_DecodeBufferDesc = extern struct {
    CompressedBufferType: {"kind":"UInt32"},
    BufferIndex: {"kind":"UInt32"},
    DataOffset: {"kind":"UInt32"},
    DataSize: {"kind":"UInt32"},
    FirstMBaddress: {"kind":"UInt32"},
    NumMBsInBuffer: {"kind":"UInt32"},
    Width: {"kind":"UInt32"},
    Height: {"kind":"UInt32"},
    Stride: {"kind":"UInt32"},
    ReservedBits: {"kind":"UInt32"},
    pvPVPState: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: DXVA2_AES_CTR_IV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA2_AES_CTR_IV = extern struct {
    IV: {"kind":"UInt64"},
    Count: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: DXVA2_DecodeExtensionData
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA2_DecodeExtensionData = extern struct {
    Function: {"kind":"UInt32"},
    pPrivateInputData: {"kind""Ptr","child":{"kind":"Void"}},
    PrivateInputDataSize: {"kind":"UInt32"},
    pPrivateOutputData: {"kind""Ptr","child":{"kind":"Void"}},
    PrivateOutputDataSize: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DXVA2_DecodeExecuteParams
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXVA2_DecodeExecuteParams = extern struct {
    NumCompBuffers: {"kind":"UInt32"},
    pCompressedBuffers: {"kind""Ptr","child":Windows.Win32.MediaFoundation.DXVA2_DecodeBufferDesc},
    pExtensionData: {"kind""Ptr","child":Windows.Win32.MediaFoundation.DXVA2_DecodeExtensionData},
};
// --------------------------------------------------------
// Type: IDirect3DDeviceManager9
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirect3DDeviceManager9 = *opaque{
    // TODO: Method 'ResetDevice'
    // TODO: Method 'OpenDeviceHandle'
    // TODO: Method 'CloseDeviceHandle'
    // TODO: Method 'TestDevice'
    // TODO: Method 'LockDevice'
    // TODO: Method 'UnlockDevice'
    // TODO: Method 'GetVideoService'
};
// --------------------------------------------------------
// Type: IDirectXVideoAccelerationService
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectXVideoAccelerationService = *opaque{
    // TODO: Method 'CreateSurface'
};
// --------------------------------------------------------
// Type: IDirectXVideoDecoderService
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectXVideoDecoderService = *opaque{
    // TODO: Method 'GetDecoderDeviceGuids'
    // TODO: Method 'GetDecoderRenderTargets'
    // TODO: Method 'GetDecoderConfigurations'
    // TODO: Method 'CreateVideoDecoder'
};
// --------------------------------------------------------
// Type: IDirectXVideoProcessorService
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectXVideoProcessorService = *opaque{
    // TODO: Method 'RegisterVideoProcessorSoftwareDevice'
    // TODO: Method 'GetVideoProcessorDeviceGuids'
    // TODO: Method 'GetVideoProcessorRenderTargets'
    // TODO: Method 'GetVideoProcessorSubStreamFormats'
    // TODO: Method 'GetVideoProcessorCaps'
    // TODO: Method 'GetProcAmpRange'
    // TODO: Method 'GetFilterPropertyRange'
    // TODO: Method 'CreateVideoProcessor'
};
// --------------------------------------------------------
// Type: IDirectXVideoDecoder
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectXVideoDecoder = *opaque{
    // TODO: Method 'GetVideoDecoderService'
    // TODO: Method 'GetCreationParameters'
    // TODO: Method 'GetBuffer'
    // TODO: Method 'ReleaseBuffer'
    // TODO: Method 'BeginFrame'
    // TODO: Method 'EndFrame'
    // TODO: Method 'Execute'
};
// --------------------------------------------------------
// Type: IDirectXVideoProcessor
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectXVideoProcessor = *opaque{
    // TODO: Method 'GetVideoProcessorService'
    // TODO: Method 'GetCreationParameters'
    // TODO: Method 'GetVideoProcessorCaps'
    // TODO: Method 'GetProcAmpRange'
    // TODO: Method 'GetFilterPropertyRange'
    // TODO: Method 'VideoProcessBlt'
};
// --------------------------------------------------------
// Type: DXVA2_SurfaceType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXVA2_SurfaceType = *opaque{
};
// --------------------------------------------------------
// Type: IDirectXVideoMemoryConfiguration
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectXVideoMemoryConfiguration = *opaque{
    // TODO: Method 'GetAvailableSurfaceTypeByIndex'
    // TODO: Method 'SetSurfaceType'
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_opmapi_0000_0000_0001
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_opmapi_0000_0000_0001 = *opaque{
};
// --------------------------------------------------------
// Type: OPM_VIDEO_OUTPUT_SEMANTICS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OPM_VIDEO_OUTPUT_SEMANTICS = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_opmapi_0000_0000_0002
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_opmapi_0000_0000_0002 = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_opmapi_0000_0000_0003
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_opmapi_0000_0000_0003 = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_opmapi_0000_0000_0004
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_opmapi_0000_0000_0004 = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_opmapi_0000_0000_0005
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_opmapi_0000_0000_0005 = *opaque{
};
// --------------------------------------------------------
// Type: OPM_OUTPUT_HARDWARE_PROTECTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OPM_OUTPUT_HARDWARE_PROTECTION = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_opmapi_0000_0000_0006
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_opmapi_0000_0000_0006 = *opaque{
};
// --------------------------------------------------------
// Type: OPM_DPCP_PROTECTION_LEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OPM_DPCP_PROTECTION_LEVEL = *opaque{
};
// --------------------------------------------------------
// Type: OPM_HDCP_PROTECTION_LEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OPM_HDCP_PROTECTION_LEVEL = *opaque{
};
// --------------------------------------------------------
// Type: OPM_TYPE_ENFORCEMENT_HDCP_PROTECTION_LEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OPM_TYPE_ENFORCEMENT_HDCP_PROTECTION_LEVEL = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_opmapi_0000_0000_0007
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_opmapi_0000_0000_0007 = *opaque{
};
// --------------------------------------------------------
// Type: OPM_ACP_PROTECTION_LEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OPM_ACP_PROTECTION_LEVEL = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_opmapi_0000_0000_0008
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_opmapi_0000_0000_0008 = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_opmapi_0000_0000_0009
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_opmapi_0000_0000_0009 = *opaque{
};
// --------------------------------------------------------
// Type: OPM_IMAGE_ASPECT_RATIO_EN300294
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OPM_IMAGE_ASPECT_RATIO_EN300294 = *opaque{
};
// --------------------------------------------------------
// Type: OPM_RANDOM_NUMBER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OPM_RANDOM_NUMBER = extern struct {
    abRandomNumber: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: OPM_OMAC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OPM_OMAC = extern struct {
    abOMAC: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: OPM_ENCRYPTED_INITIALIZATION_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OPM_ENCRYPTED_INITIALIZATION_PARAMETERS = extern struct {
    abEncryptedInitializationParameters: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: OPM_GET_INFO_PARAMETERS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const OPM_GET_INFO_PARAMETERS = *opaque{
};
// --------------------------------------------------------
// Type: OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS = *opaque{
};
// --------------------------------------------------------
// Type: OPM_HDCP_KEY_SELECTION_VECTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OPM_HDCP_KEY_SELECTION_VECTOR = extern struct {
    abKeySelectionVector: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: OPM_CONNECTED_HDCP_DEVICE_INFORMATION
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const OPM_CONNECTED_HDCP_DEVICE_INFORMATION = *opaque{
};
// --------------------------------------------------------
// Type: OPM_REQUESTED_INFORMATION
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const OPM_REQUESTED_INFORMATION = *opaque{
};
// --------------------------------------------------------
// Type: OPM_STANDARD_INFORMATION
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const OPM_STANDARD_INFORMATION = *opaque{
};
// --------------------------------------------------------
// Type: OPM_ACTUAL_OUTPUT_FORMAT
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const OPM_ACTUAL_OUTPUT_FORMAT = *opaque{
};
// --------------------------------------------------------
// Type: OPM_ACP_AND_CGMSA_SIGNALING
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const OPM_ACP_AND_CGMSA_SIGNALING = *opaque{
};
// --------------------------------------------------------
// Type: OPM_OUTPUT_ID_DATA
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const OPM_OUTPUT_ID_DATA = *opaque{
};
// --------------------------------------------------------
// Type: OPM_CONFIGURE_PARAMETERS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const OPM_CONFIGURE_PARAMETERS = *opaque{
};
// --------------------------------------------------------
// Type: OPM_SET_PROTECTION_LEVEL_PARAMETERS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const OPM_SET_PROTECTION_LEVEL_PARAMETERS = *opaque{
};
// --------------------------------------------------------
// Type: OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS = *opaque{
};
// --------------------------------------------------------
// Type: OPM_SET_HDCP_SRM_PARAMETERS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const OPM_SET_HDCP_SRM_PARAMETERS = *opaque{
};
// --------------------------------------------------------
// Type: OPM_GET_CODEC_INFO_PARAMETERS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const OPM_GET_CODEC_INFO_PARAMETERS = *opaque{
};
// --------------------------------------------------------
// Type: OPM_GET_CODEC_INFO_INFORMATION
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const OPM_GET_CODEC_INFO_INFORMATION = *opaque{
};
// --------------------------------------------------------
// Type: IOPMVideoOutput
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOPMVideoOutput = *opaque{
    // TODO: Method 'StartInitialization'
    // TODO: Method 'FinishInitialization'
    // TODO: Method 'GetInformation'
    // TODO: Method 'COPPCompatibleGetInformation'
    // TODO: Method 'Configure'
};
// --------------------------------------------------------
// Type: KSPROPSETID_OPMVideoOutput
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const KSPROPSETID_OPMVideoOutput = opaque {
};
// --------------------------------------------------------
// Type: KSMETHOD_OPMVIDEOOUTPUT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KSMETHOD_OPMVIDEOOUTPUT = *opaque{
};
// --------------------------------------------------------
// Type: MF_ATTRIBUTE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_ATTRIBUTE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: MF_ATTRIBUTES_MATCH_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_ATTRIBUTES_MATCH_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IMFAttributes
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFAttributes = *opaque{
    // TODO: Method 'GetItem'
    // TODO: Method 'GetItemType'
    // TODO: Method 'CompareItem'
    // TODO: Method 'Compare'
    // TODO: Method 'GetUINT32'
    // TODO: Method 'GetUINT64'
    // TODO: Method 'GetDouble'
    // TODO: Method 'GetGUID'
    // TODO: Method 'GetStringLength'
    // TODO: Method 'GetString'
    // TODO: Method 'GetAllocatedString'
    // TODO: Method 'GetBlobSize'
    // TODO: Method 'GetBlob'
    // TODO: Method 'GetAllocatedBlob'
    // TODO: Method 'GetUnknown'
    // TODO: Method 'SetItem'
    // TODO: Method 'DeleteItem'
    // TODO: Method 'DeleteAllItems'
    // TODO: Method 'SetUINT32'
    // TODO: Method 'SetUINT64'
    // TODO: Method 'SetDouble'
    // TODO: Method 'SetGUID'
    // TODO: Method 'SetString'
    // TODO: Method 'SetBlob'
    // TODO: Method 'SetUnknown'
    // TODO: Method 'LockStore'
    // TODO: Method 'UnlockStore'
    // TODO: Method 'GetCount'
    // TODO: Method 'GetItemByIndex'
    // TODO: Method 'CopyAllItems'
};
// --------------------------------------------------------
// Type: MF_ATTRIBUTE_SERIALIZE_OPTIONS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_ATTRIBUTE_SERIALIZE_OPTIONS = *opaque{
};
// --------------------------------------------------------
// Type: IMFMediaBuffer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaBuffer = *opaque{
    // TODO: Method 'Lock'
    // TODO: Method 'Unlock'
    // TODO: Method 'GetCurrentLength'
    // TODO: Method 'SetCurrentLength'
    // TODO: Method 'GetMaxLength'
};
// --------------------------------------------------------
// Type: IMFSample
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSample = *opaque{
    // TODO: Method 'GetSampleFlags'
    // TODO: Method 'SetSampleFlags'
    // TODO: Method 'GetSampleTime'
    // TODO: Method 'SetSampleTime'
    // TODO: Method 'GetSampleDuration'
    // TODO: Method 'SetSampleDuration'
    // TODO: Method 'GetBufferCount'
    // TODO: Method 'GetBufferByIndex'
    // TODO: Method 'ConvertToContiguousBuffer'
    // TODO: Method 'AddBuffer'
    // TODO: Method 'RemoveBufferByIndex'
    // TODO: Method 'RemoveAllBuffers'
    // TODO: Method 'GetTotalLength'
    // TODO: Method 'CopyToBuffer'
};
// --------------------------------------------------------
// Type: IMF2DBuffer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMF2DBuffer = *opaque{
    // TODO: Method 'Lock2D'
    // TODO: Method 'Unlock2D'
    // TODO: Method 'GetScanline0AndPitch'
    // TODO: Method 'IsContiguousFormat'
    // TODO: Method 'GetContiguousLength'
    // TODO: Method 'ContiguousCopyTo'
    // TODO: Method 'ContiguousCopyFrom'
};
// --------------------------------------------------------
// Type: MF2DBuffer_LockFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF2DBuffer_LockFlags = *opaque{
};
// --------------------------------------------------------
// Type: IMF2DBuffer2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMF2DBuffer2 = *opaque{
    // TODO: Method 'Lock2DSize'
    // TODO: Method 'Copy2DTo'
};
// --------------------------------------------------------
// Type: IMFDXGIBuffer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFDXGIBuffer = *opaque{
    // TODO: Method 'GetResource'
    // TODO: Method 'GetSubresourceIndex'
    // TODO: Method 'GetUnknown'
    // TODO: Method 'SetUnknown'
};
// --------------------------------------------------------
// Type: IMFMediaType
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaType = *opaque{
    // TODO: Method 'GetMajorType'
    // TODO: Method 'IsCompressedFormat'
    // TODO: Method 'IsEqual'
    // TODO: Method 'GetRepresentation'
    // TODO: Method 'FreeRepresentation'
};
// --------------------------------------------------------
// Type: IMFAudioMediaType
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFAudioMediaType = *opaque{
    // TODO: Method 'GetAudioFormat'
};
// --------------------------------------------------------
// Type: MFT_REGISTER_TYPE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFT_REGISTER_TYPE_INFO = extern struct {
    guidMajorType: Guid,
    guidSubtype: Guid,
};
// --------------------------------------------------------
// Type: MFVideoInterlaceMode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFVideoInterlaceMode = *opaque{
};
// --------------------------------------------------------
// Type: MFVideoTransferFunction
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFVideoTransferFunction = *opaque{
};
// --------------------------------------------------------
// Type: MFVideoPrimaries
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFVideoPrimaries = *opaque{
};
// --------------------------------------------------------
// Type: MFVideoLighting
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFVideoLighting = *opaque{
};
// --------------------------------------------------------
// Type: MFVideoTransferMatrix
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFVideoTransferMatrix = *opaque{
};
// --------------------------------------------------------
// Type: MFVideoChromaSubsampling
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFVideoChromaSubsampling = *opaque{
};
// --------------------------------------------------------
// Type: MFNominalRange
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFNominalRange = *opaque{
};
// --------------------------------------------------------
// Type: MFVideoFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFVideoFlags = *opaque{
};
// --------------------------------------------------------
// Type: MFRatio
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFRatio = extern struct {
    Numerator: {"kind":"UInt32"},
    Denominator: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MFOffset
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFOffset = extern struct {
    fract: {"kind":"UInt16"},
    value: {"kind":"Int16"},
};
// --------------------------------------------------------
// Type: MFVideoArea
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFVideoArea = extern struct {
    OffsetX: Windows.Win32.MediaFoundation.MFOffset,
    OffsetY: Windows.Win32.MediaFoundation.MFOffset,
    Area: Windows.Win32.DisplayDevices.SIZE,
};
// --------------------------------------------------------
// Type: MFVideoInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFVideoInfo = extern struct {
    dwWidth: {"kind":"UInt32"},
    dwHeight: {"kind":"UInt32"},
    PixelAspectRatio: Windows.Win32.MediaFoundation.MFRatio,
    SourceChromaSubsampling: Windows.Win32.MediaFoundation.MFVideoChromaSubsampling,
    InterlaceMode: Windows.Win32.MediaFoundation.MFVideoInterlaceMode,
    TransferFunction: Windows.Win32.MediaFoundation.MFVideoTransferFunction,
    ColorPrimaries: Windows.Win32.MediaFoundation.MFVideoPrimaries,
    TransferMatrix: Windows.Win32.MediaFoundation.MFVideoTransferMatrix,
    SourceLighting: Windows.Win32.MediaFoundation.MFVideoLighting,
    FramesPerSecond: Windows.Win32.MediaFoundation.MFRatio,
    NominalRange: Windows.Win32.MediaFoundation.MFNominalRange,
    GeometricAperture: Windows.Win32.MediaFoundation.MFVideoArea,
    MinimumDisplayAperture: Windows.Win32.MediaFoundation.MFVideoArea,
    PanScanAperture: Windows.Win32.MediaFoundation.MFVideoArea,
    VideoFlags: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: MFAYUVSample
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFAYUVSample = extern struct {
    bCrValue: {"kind":"Byte"},
    bCbValue: {"kind":"Byte"},
    bYValue: {"kind":"Byte"},
    bSampleAlpha8: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: MFARGB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFARGB = extern struct {
    rgbBlue: {"kind":"Byte"},
    rgbGreen: {"kind":"Byte"},
    rgbRed: {"kind":"Byte"},
    rgbAlpha: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: MFPaletteEntry
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const MFPaletteEntry = *opaque{
};
// --------------------------------------------------------
// Type: MFVideoSurfaceInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFVideoSurfaceInfo = extern struct {
    Format: {"kind":"UInt32"},
    PaletteEntries: {"kind":"UInt32"},
    Palette: {"kind":"Array","child": Windows.Win32.MediaFoundation.MFPaletteEntry},
};
// --------------------------------------------------------
// Type: MFVideoCompressedInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFVideoCompressedInfo = extern struct {
    AvgBitrate: {"kind":"Int64"},
    AvgBitErrorRate: {"kind":"Int64"},
    MaxKeyFrameSpacing: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MFVIDEOFORMAT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFVIDEOFORMAT = extern struct {
    dwSize: {"kind":"UInt32"},
    videoInfo: Windows.Win32.MediaFoundation.MFVideoInfo,
    guidFormat: Guid,
    compressedInfo: Windows.Win32.MediaFoundation.MFVideoCompressedInfo,
    surfaceInfo: Windows.Win32.MediaFoundation.MFVideoSurfaceInfo,
};
// --------------------------------------------------------
// Type: MFStandardVideoFormat
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFStandardVideoFormat = *opaque{
};
// --------------------------------------------------------
// Type: IMFVideoMediaType
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFVideoMediaType = *opaque{
    // TODO: Method 'GetVideoFormat'
    // TODO: Method 'GetVideoRepresentation'
};
// --------------------------------------------------------
// Type: IMFAsyncResult
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFAsyncResult = *opaque{
    // TODO: Method 'GetState'
    // TODO: Method 'GetStatus'
    // TODO: Method 'SetStatus'
    // TODO: Method 'GetObjectA'
    // TODO: Method 'GetStateNoAddRef'
};
// --------------------------------------------------------
// Type: IMFAsyncCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFAsyncCallback = *opaque{
    // TODO: Method 'GetParameters'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: IMFAsyncCallbackLogging
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFAsyncCallbackLogging = *opaque{
    // TODO: Method 'GetObjectPointer'
    // TODO: Method 'GetObjectTag'
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_mfobjects_0000_0012_0001
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_mfobjects_0000_0012_0001 = *opaque{
};
// --------------------------------------------------------
// Type: IMFMediaEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaEvent = *opaque{
    // TODO: Method 'GetType'
    // TODO: Method 'GetExtendedType'
    // TODO: Method 'GetStatus'
    // TODO: Method 'GetValue'
};
// --------------------------------------------------------
// Type: IMFMediaEventGenerator
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaEventGenerator = *opaque{
    // TODO: Method 'GetEvent'
    // TODO: Method 'BeginGetEvent'
    // TODO: Method 'EndGetEvent'
    // TODO: Method 'QueueEvent'
};
// --------------------------------------------------------
// Type: IMFRemoteAsyncCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFRemoteAsyncCallback = *opaque{
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: MFBYTESTREAM_SEEK_ORIGIN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFBYTESTREAM_SEEK_ORIGIN = *opaque{
};
// --------------------------------------------------------
// Type: IMFByteStream
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFByteStream = *opaque{
    // TODO: Method 'GetCapabilities'
    // TODO: Method 'GetLength'
    // TODO: Method 'SetLength'
    // TODO: Method 'GetCurrentPosition'
    // TODO: Method 'SetCurrentPosition'
    // TODO: Method 'IsEndOfStream'
    // TODO: Method 'Read'
    // TODO: Method 'BeginRead'
    // TODO: Method 'EndRead'
    // TODO: Method 'Write'
    // TODO: Method 'BeginWrite'
    // TODO: Method 'EndWrite'
    // TODO: Method 'Seek'
    // TODO: Method 'Flush'
    // TODO: Method 'Close'
};
// --------------------------------------------------------
// Type: IMFByteStreamProxyClassFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFByteStreamProxyClassFactory = *opaque{
    // TODO: Method 'CreateByteStreamProxy'
};
// --------------------------------------------------------
// Type: MF_FILE_ACCESSMODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_FILE_ACCESSMODE = *opaque{
};
// --------------------------------------------------------
// Type: MF_FILE_OPENMODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_FILE_OPENMODE = *opaque{
};
// --------------------------------------------------------
// Type: MF_FILE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_FILE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: IMFSampleOutputStream
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSampleOutputStream = *opaque{
    // TODO: Method 'BeginWriteSample'
    // TODO: Method 'EndWriteSample'
    // TODO: Method 'Close'
};
// --------------------------------------------------------
// Type: IMFCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFCollection = *opaque{
    // TODO: Method 'GetElementCount'
    // TODO: Method 'GetElement'
    // TODO: Method 'AddElement'
    // TODO: Method 'RemoveElement'
    // TODO: Method 'InsertElementAt'
    // TODO: Method 'RemoveAllElements'
};
// --------------------------------------------------------
// Type: IMFMediaEventQueue
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaEventQueue = *opaque{
    // TODO: Method 'GetEvent'
    // TODO: Method 'BeginGetEvent'
    // TODO: Method 'EndGetEvent'
    // TODO: Method 'QueueEvent'
    // TODO: Method 'QueueEventParamVar'
    // TODO: Method 'QueueEventParamUnk'
    // TODO: Method 'Shutdown'
};
// --------------------------------------------------------
// Type: IMFActivate
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFActivate = *opaque{
    // TODO: Method 'ActivateObject'
    // TODO: Method 'ShutdownObject'
    // TODO: Method 'DetachObject'
};
// --------------------------------------------------------
// Type: IMFPluginControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFPluginControl = *opaque{
    // TODO: Method 'GetPreferredClsid'
    // TODO: Method 'GetPreferredClsidByIndex'
    // TODO: Method 'SetPreferredClsid'
    // TODO: Method 'IsDisabled'
    // TODO: Method 'GetDisabledByIndex'
    // TODO: Method 'SetDisabled'
};
// --------------------------------------------------------
// Type: MF_PLUGIN_CONTROL_POLICY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_PLUGIN_CONTROL_POLICY = *opaque{
};
// --------------------------------------------------------
// Type: IMFPluginControl2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFPluginControl2 = *opaque{
    // TODO: Method 'SetPolicy'
};
// --------------------------------------------------------
// Type: IMFDXGIDeviceManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFDXGIDeviceManager = *opaque{
    // TODO: Method 'CloseDeviceHandle'
    // TODO: Method 'GetVideoService'
    // TODO: Method 'LockDevice'
    // TODO: Method 'OpenDeviceHandle'
    // TODO: Method 'ResetDevice'
    // TODO: Method 'TestDevice'
    // TODO: Method 'UnlockDevice'
};
// --------------------------------------------------------
// Type: MF_STREAM_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_STREAM_STATE = *opaque{
};
// --------------------------------------------------------
// Type: IMFMuxStreamAttributesManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMuxStreamAttributesManager = *opaque{
    // TODO: Method 'GetStreamCount'
    // TODO: Method 'GetAttributes'
};
// --------------------------------------------------------
// Type: IMFMuxStreamMediaTypeManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMuxStreamMediaTypeManager = *opaque{
    // TODO: Method 'GetStreamCount'
    // TODO: Method 'GetMediaType'
    // TODO: Method 'GetStreamConfigurationCount'
    // TODO: Method 'AddStreamConfiguration'
    // TODO: Method 'RemoveStreamConfiguration'
    // TODO: Method 'GetStreamConfiguration'
};
// --------------------------------------------------------
// Type: IMFMuxStreamSampleManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMuxStreamSampleManager = *opaque{
    // TODO: Method 'GetStreamCount'
    // TODO: Method 'GetSample'
    // TODO: Method 'GetStreamConfiguration'
};
// --------------------------------------------------------
// Type: IMFSecureBuffer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSecureBuffer = *opaque{
    // TODO: Method 'GetIdentifier'
};
// --------------------------------------------------------
// Type: _MFT_INPUT_DATA_BUFFER_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _MFT_INPUT_DATA_BUFFER_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: _MFT_OUTPUT_DATA_BUFFER_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _MFT_OUTPUT_DATA_BUFFER_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: _MFT_INPUT_STATUS_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _MFT_INPUT_STATUS_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: _MFT_OUTPUT_STATUS_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _MFT_OUTPUT_STATUS_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: _MFT_INPUT_STREAM_INFO_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _MFT_INPUT_STREAM_INFO_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: _MFT_OUTPUT_STREAM_INFO_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _MFT_OUTPUT_STREAM_INFO_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: _MFT_SET_TYPE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _MFT_SET_TYPE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: _MFT_PROCESS_OUTPUT_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _MFT_PROCESS_OUTPUT_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: _MFT_PROCESS_OUTPUT_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _MFT_PROCESS_OUTPUT_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: MFT_DRAIN_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFT_DRAIN_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: MFT_MESSAGE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFT_MESSAGE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: MFT_INPUT_STREAM_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFT_INPUT_STREAM_INFO = extern struct {
    hnsMaxLatency: {"kind":"Int64"},
    dwFlags: {"kind":"UInt32"},
    cbSize: {"kind":"UInt32"},
    cbMaxLookahead: {"kind":"UInt32"},
    cbAlignment: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MFT_OUTPUT_STREAM_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFT_OUTPUT_STREAM_INFO = extern struct {
    dwFlags: {"kind":"UInt32"},
    cbSize: {"kind":"UInt32"},
    cbAlignment: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MFT_OUTPUT_DATA_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFT_OUTPUT_DATA_BUFFER = extern struct {
    dwStreamID: {"kind":"UInt32"},
    pSample: Windows.Win32.MediaFoundation.IMFSample,
    dwStatus: {"kind":"UInt32"},
    pEvents: Windows.Win32.MediaFoundation.IMFCollection,
};
// --------------------------------------------------------
// Type: IMFTransform
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFTransform = *opaque{
    // TODO: Method 'GetStreamLimits'
    // TODO: Method 'GetStreamCount'
    // TODO: Method 'GetStreamIDs'
    // TODO: Method 'GetInputStreamInfo'
    // TODO: Method 'GetOutputStreamInfo'
    // TODO: Method 'GetAttributes'
    // TODO: Method 'GetInputStreamAttributes'
    // TODO: Method 'GetOutputStreamAttributes'
    // TODO: Method 'DeleteInputStream'
    // TODO: Method 'AddInputStreams'
    // TODO: Method 'GetInputAvailableType'
    // TODO: Method 'GetOutputAvailableType'
    // TODO: Method 'SetInputType'
    // TODO: Method 'SetOutputType'
    // TODO: Method 'GetInputCurrentType'
    // TODO: Method 'GetOutputCurrentType'
    // TODO: Method 'GetInputStatus'
    // TODO: Method 'GetOutputStatus'
    // TODO: Method 'SetOutputBounds'
    // TODO: Method 'ProcessEvent'
    // TODO: Method 'ProcessMessage'
    // TODO: Method 'ProcessInput'
    // TODO: Method 'ProcessOutput'
};
// --------------------------------------------------------
// Type: DeviceStreamState
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DeviceStreamState = *opaque{
};
// --------------------------------------------------------
// Type: STREAM_MEDIUM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STREAM_MEDIUM = extern struct {
    gidMedium: Guid,
    unMediumInstance: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MF3DVideoOutputType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF3DVideoOutputType = *opaque{
};
// --------------------------------------------------------
// Type: MFT_AUDIO_DECODER_DEGRADATION_REASON
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFT_AUDIO_DECODER_DEGRADATION_REASON = *opaque{
};
// --------------------------------------------------------
// Type: MFT_AUDIO_DECODER_DEGRADATION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFT_AUDIO_DECODER_DEGRADATION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: MFAudioDecoderDegradationInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFAudioDecoderDegradationInfo = extern struct {
    eDegradationReason: Windows.Win32.MediaFoundation.MFT_AUDIO_DECODER_DEGRADATION_REASON,
    eType: Windows.Win32.MediaFoundation.MFT_AUDIO_DECODER_DEGRADATION_TYPE,
};
// --------------------------------------------------------
// Type: MFT_STREAM_STATE_PARAM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFT_STREAM_STATE_PARAM = extern struct {
    StreamId: {"kind":"UInt32"},
    State: Windows.Win32.MediaFoundation.MF_STREAM_STATE,
};
// --------------------------------------------------------
// Type: MFSESSION_SETTOPOLOGY_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFSESSION_SETTOPOLOGY_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: MFSESSION_GETFULLTOPOLOGY_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFSESSION_GETFULLTOPOLOGY_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: MFPMPSESSION_CREATION_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFPMPSESSION_CREATION_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: IMFMediaSession
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaSession = *opaque{
    // TODO: Method 'SetTopology'
    // TODO: Method 'ClearTopologies'
    // TODO: Method 'Start'
    // TODO: Method 'Pause'
    // TODO: Method 'Stop'
    // TODO: Method 'Close'
    // TODO: Method 'Shutdown'
    // TODO: Method 'GetClock'
    // TODO: Method 'GetSessionCapabilities'
    // TODO: Method 'GetFullTopology'
};
// --------------------------------------------------------
// Type: MF_OBJECT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_OBJECT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_mfidl_0000_0001_0001
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_mfidl_0000_0001_0001 = *opaque{
};
// --------------------------------------------------------
// Type: MF_CONNECT_METHOD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_CONNECT_METHOD = *opaque{
};
// --------------------------------------------------------
// Type: MF_TOPOLOGY_RESOLUTION_STATUS_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_TOPOLOGY_RESOLUTION_STATUS_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: IMFSourceResolver
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSourceResolver = *opaque{
    // TODO: Method 'CreateObjectFromURL'
    // TODO: Method 'CreateObjectFromByteStream'
    // TODO: Method 'BeginCreateObjectFromURL'
    // TODO: Method 'EndCreateObjectFromURL'
    // TODO: Method 'BeginCreateObjectFromByteStream'
    // TODO: Method 'EndCreateObjectFromByteStream'
    // TODO: Method 'CancelObjectCreation'
};
// --------------------------------------------------------
// Type: MFMEDIASOURCE_CHARACTERISTICS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFMEDIASOURCE_CHARACTERISTICS = *opaque{
};
// --------------------------------------------------------
// Type: IMFMediaSource
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaSource = *opaque{
    // TODO: Method 'GetCharacteristics'
    // TODO: Method 'CreatePresentationDescriptor'
    // TODO: Method 'Start'
    // TODO: Method 'Stop'
    // TODO: Method 'Pause'
    // TODO: Method 'Shutdown'
};
// --------------------------------------------------------
// Type: IMFMediaSourceEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaSourceEx = *opaque{
    // TODO: Method 'GetSourceAttributes'
    // TODO: Method 'GetStreamAttributes'
    // TODO: Method 'SetD3DManager'
};
// --------------------------------------------------------
// Type: IMFClockConsumer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFClockConsumer = *opaque{
    // TODO: Method 'SetPresentationClock'
    // TODO: Method 'GetPresentationClock'
};
// --------------------------------------------------------
// Type: IMFMediaStream
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaStream = *opaque{
    // TODO: Method 'GetMediaSource'
    // TODO: Method 'GetStreamDescriptor'
    // TODO: Method 'RequestSample'
};
// --------------------------------------------------------
// Type: IMFMediaSink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaSink = *opaque{
    // TODO: Method 'GetCharacteristics'
    // TODO: Method 'AddStreamSink'
    // TODO: Method 'RemoveStreamSink'
    // TODO: Method 'GetStreamSinkCount'
    // TODO: Method 'GetStreamSinkByIndex'
    // TODO: Method 'GetStreamSinkById'
    // TODO: Method 'SetPresentationClock'
    // TODO: Method 'GetPresentationClock'
    // TODO: Method 'Shutdown'
};
// --------------------------------------------------------
// Type: MFSTREAMSINK_MARKER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFSTREAMSINK_MARKER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IMFStreamSink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFStreamSink = *opaque{
    // TODO: Method 'GetMediaSink'
    // TODO: Method 'GetIdentifier'
    // TODO: Method 'GetMediaTypeHandler'
    // TODO: Method 'ProcessSample'
    // TODO: Method 'PlaceMarker'
    // TODO: Method 'Flush'
};
// --------------------------------------------------------
// Type: IMFVideoSampleAllocator
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFVideoSampleAllocator = *opaque{
    // TODO: Method 'SetDirectXManager'
    // TODO: Method 'UninitializeSampleAllocator'
    // TODO: Method 'InitializeSampleAllocator'
    // TODO: Method 'AllocateSample'
};
// --------------------------------------------------------
// Type: IMFVideoSampleAllocatorNotify
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFVideoSampleAllocatorNotify = *opaque{
    // TODO: Method 'NotifyRelease'
};
// --------------------------------------------------------
// Type: IMFVideoSampleAllocatorNotifyEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFVideoSampleAllocatorNotifyEx = *opaque{
    // TODO: Method 'NotifyPrune'
};
// --------------------------------------------------------
// Type: IMFVideoSampleAllocatorCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFVideoSampleAllocatorCallback = *opaque{
    // TODO: Method 'SetCallback'
    // TODO: Method 'GetFreeSampleCount'
};
// --------------------------------------------------------
// Type: IMFVideoSampleAllocatorEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFVideoSampleAllocatorEx = *opaque{
    // TODO: Method 'InitializeSampleAllocatorEx'
};
// --------------------------------------------------------
// Type: IMFDXGIDeviceManagerSource
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFDXGIDeviceManagerSource = *opaque{
    // TODO: Method 'GetManager'
};
// --------------------------------------------------------
// Type: MF_VIDEO_PROCESSOR_ROTATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_VIDEO_PROCESSOR_ROTATION = *opaque{
};
// --------------------------------------------------------
// Type: MF_VIDEO_PROCESSOR_MIRROR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_VIDEO_PROCESSOR_MIRROR = *opaque{
};
// --------------------------------------------------------
// Type: IMFVideoProcessorControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFVideoProcessorControl = *opaque{
    // TODO: Method 'SetBorderColor'
    // TODO: Method 'SetSourceRectangle'
    // TODO: Method 'SetDestinationRectangle'
    // TODO: Method 'SetMirror'
    // TODO: Method 'SetRotation'
    // TODO: Method 'SetConstrictionSize'
};
// --------------------------------------------------------
// Type: IMFVideoProcessorControl2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFVideoProcessorControl2 = *opaque{
    // TODO: Method 'SetRotationOverride'
    // TODO: Method 'EnableHardwareEffects'
    // TODO: Method 'GetSupportedHardwareEffects'
};
// --------------------------------------------------------
// Type: MFVideoSphericalFormat
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFVideoSphericalFormat = *opaque{
};
// --------------------------------------------------------
// Type: MFVideoSphericalProjectionMode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFVideoSphericalProjectionMode = *opaque{
};
// --------------------------------------------------------
// Type: IMFVideoProcessorControl3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFVideoProcessorControl3 = *opaque{
    // TODO: Method 'GetNaturalOutputType'
    // TODO: Method 'EnableSphericalVideoProcessing'
    // TODO: Method 'SetSphericalVideoProperties'
    // TODO: Method 'SetOutputDevice'
};
// --------------------------------------------------------
// Type: IMFVideoRendererEffectControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFVideoRendererEffectControl = *opaque{
    // TODO: Method 'OnAppServiceConnectionEstablished'
};
// --------------------------------------------------------
// Type: IMFTopology
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFTopology = *opaque{
    // TODO: Method 'GetTopologyID'
    // TODO: Method 'AddNode'
    // TODO: Method 'RemoveNode'
    // TODO: Method 'GetNodeCount'
    // TODO: Method 'GetNode'
    // TODO: Method 'Clear'
    // TODO: Method 'CloneFrom'
    // TODO: Method 'GetNodeByID'
    // TODO: Method 'GetSourceNodeCollection'
    // TODO: Method 'GetOutputNodeCollection'
};
// --------------------------------------------------------
// Type: MFTOPOLOGY_DXVA_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFTOPOLOGY_DXVA_MODE = *opaque{
};
// --------------------------------------------------------
// Type: MFTOPOLOGY_HARDWARE_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFTOPOLOGY_HARDWARE_MODE = *opaque{
};
// --------------------------------------------------------
// Type: MF_TOPOLOGY_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_TOPOLOGY_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IMFTopologyNode
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFTopologyNode = *opaque{
    // TODO: Method 'SetObject'
    // TODO: Method 'GetObjectA'
    // TODO: Method 'GetNodeType'
    // TODO: Method 'GetTopoNodeID'
    // TODO: Method 'SetTopoNodeID'
    // TODO: Method 'GetInputCount'
    // TODO: Method 'GetOutputCount'
    // TODO: Method 'ConnectOutput'
    // TODO: Method 'DisconnectOutput'
    // TODO: Method 'GetInput'
    // TODO: Method 'GetOutput'
    // TODO: Method 'SetOutputPrefType'
    // TODO: Method 'GetOutputPrefType'
    // TODO: Method 'SetInputPrefType'
    // TODO: Method 'GetInputPrefType'
    // TODO: Method 'CloneFrom'
};
// --------------------------------------------------------
// Type: MF_TOPONODE_FLUSH_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_TOPONODE_FLUSH_MODE = *opaque{
};
// --------------------------------------------------------
// Type: MF_TOPONODE_DRAIN_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_TOPONODE_DRAIN_MODE = *opaque{
};
// --------------------------------------------------------
// Type: IMFGetService
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFGetService = *opaque{
    // TODO: Method 'GetService'
};
// --------------------------------------------------------
// Type: MFCLOCK_CHARACTERISTICS_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFCLOCK_CHARACTERISTICS_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: MFCLOCK_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFCLOCK_STATE = *opaque{
};
// --------------------------------------------------------
// Type: MFCLOCK_RELATIONAL_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFCLOCK_RELATIONAL_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: MFCLOCK_PROPERTIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFCLOCK_PROPERTIES = extern struct {
    qwCorrelationRate: {"kind":"UInt64"},
    guidClockId: Guid,
    dwClockFlags: {"kind":"UInt32"},
    qwClockFrequency: {"kind":"UInt64"},
    dwClockTolerance: {"kind":"UInt32"},
    dwClockJitter: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IMFClock
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFClock = *opaque{
    // TODO: Method 'GetClockCharacteristics'
    // TODO: Method 'GetCorrelatedTime'
    // TODO: Method 'GetContinuityKey'
    // TODO: Method 'GetState'
    // TODO: Method 'GetProperties'
};
// --------------------------------------------------------
// Type: IMFPresentationClock
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFPresentationClock = *opaque{
    // TODO: Method 'SetTimeSource'
    // TODO: Method 'GetTimeSource'
    // TODO: Method 'GetTime'
    // TODO: Method 'AddClockStateSink'
    // TODO: Method 'RemoveClockStateSink'
    // TODO: Method 'Start'
    // TODO: Method 'Stop'
    // TODO: Method 'Pause'
};
// --------------------------------------------------------
// Type: IMFPresentationTimeSource
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFPresentationTimeSource = *opaque{
    // TODO: Method 'GetUnderlyingClock'
};
// --------------------------------------------------------
// Type: IMFClockStateSink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFClockStateSink = *opaque{
    // TODO: Method 'OnClockStart'
    // TODO: Method 'OnClockStop'
    // TODO: Method 'OnClockPause'
    // TODO: Method 'OnClockRestart'
    // TODO: Method 'OnClockSetRate'
};
// --------------------------------------------------------
// Type: IMFPresentationDescriptor
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFPresentationDescriptor = *opaque{
    // TODO: Method 'GetStreamDescriptorCount'
    // TODO: Method 'GetStreamDescriptorByIndex'
    // TODO: Method 'SelectStream'
    // TODO: Method 'DeselectStream'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IMFStreamDescriptor
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFStreamDescriptor = *opaque{
    // TODO: Method 'GetStreamIdentifier'
    // TODO: Method 'GetMediaTypeHandler'
};
// --------------------------------------------------------
// Type: IMFMediaTypeHandler
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaTypeHandler = *opaque{
    // TODO: Method 'IsMediaTypeSupported'
    // TODO: Method 'GetMediaTypeCount'
    // TODO: Method 'GetMediaTypeByIndex'
    // TODO: Method 'SetCurrentMediaType'
    // TODO: Method 'GetCurrentMediaType'
    // TODO: Method 'GetMajorType'
};
// --------------------------------------------------------
// Type: MFTIMER_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFTIMER_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: IMFTimer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFTimer = *opaque{
    // TODO: Method 'SetTimer'
    // TODO: Method 'CancelTimer'
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_mfidl_0000_0029_0001
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_mfidl_0000_0029_0001 = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_mfidl_0000_0029_0002
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_mfidl_0000_0029_0002 = *opaque{
};
// --------------------------------------------------------
// Type: MFSHUTDOWN_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFSHUTDOWN_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: IMFShutdown
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFShutdown = *opaque{
    // TODO: Method 'Shutdown'
    // TODO: Method 'GetShutdownStatus'
};
// --------------------------------------------------------
// Type: IMFTopoLoader
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFTopoLoader = *opaque{
    // TODO: Method 'Load'
};
// --------------------------------------------------------
// Type: IMFContentProtectionManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFContentProtectionManager = *opaque{
    // TODO: Method 'BeginEnableContent'
    // TODO: Method 'EndEnableContent'
};
// --------------------------------------------------------
// Type: MF_URL_TRUST_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_URL_TRUST_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: IMFContentEnabler
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFContentEnabler = *opaque{
    // TODO: Method 'GetEnableType'
    // TODO: Method 'GetEnableURL'
    // TODO: Method 'GetEnableData'
    // TODO: Method 'IsAutomaticSupported'
    // TODO: Method 'AutomaticEnable'
    // TODO: Method 'MonitorEnable'
    // TODO: Method 'Cancel'
};
// --------------------------------------------------------
// Type: MFRR_COMPONENT_HASH_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFRR_COMPONENT_HASH_INFO = extern struct {
    ulReason: {"kind":"UInt32"},
    rgHeaderHash: {"kind":"Array","child": {"kind":"UInt16"}},
    rgPublicKeyHash: {"kind":"Array","child": {"kind":"UInt16"}},
    wszName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: MFRR_COMPONENTS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFRR_COMPONENTS = extern struct {
    dwRRInfoVersion: {"kind":"UInt32"},
    dwRRComponents: {"kind":"UInt32"},
    pRRComponents: {"kind""Ptr","child":Windows.Win32.MediaFoundation.MFRR_COMPONENT_HASH_INFO},
};
// --------------------------------------------------------
// Type: ASF_FLAT_PICTURE
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const ASF_FLAT_PICTURE = *opaque{
};
// --------------------------------------------------------
// Type: ASF_FLAT_SYNCHRONISED_LYRICS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const ASF_FLAT_SYNCHRONISED_LYRICS = *opaque{
};
// --------------------------------------------------------
// Type: IMFMetadata
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMetadata = *opaque{
    // TODO: Method 'SetLanguage'
    // TODO: Method 'GetLanguage'
    // TODO: Method 'GetAllLanguages'
    // TODO: Method 'SetProperty'
    // TODO: Method 'GetProperty'
    // TODO: Method 'DeleteProperty'
    // TODO: Method 'GetAllPropertyNames'
};
// --------------------------------------------------------
// Type: IMFMetadataProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMetadataProvider = *opaque{
    // TODO: Method 'GetMFMetadata'
};
// --------------------------------------------------------
// Type: MFRATE_DIRECTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFRATE_DIRECTION = *opaque{
};
// --------------------------------------------------------
// Type: IMFRateSupport
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFRateSupport = *opaque{
    // TODO: Method 'GetSlowestRate'
    // TODO: Method 'GetFastestRate'
    // TODO: Method 'IsRateSupported'
};
// --------------------------------------------------------
// Type: IMFRateControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFRateControl = *opaque{
    // TODO: Method 'SetRate'
    // TODO: Method 'GetRate'
};
// --------------------------------------------------------
// Type: IMFTimecodeTranslate
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFTimecodeTranslate = *opaque{
    // TODO: Method 'BeginConvertTimecodeToHNS'
    // TODO: Method 'EndConvertTimecodeToHNS'
    // TODO: Method 'BeginConvertHNSToTimecode'
    // TODO: Method 'EndConvertHNSToTimecode'
};
// --------------------------------------------------------
// Type: IMFSeekInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSeekInfo = *opaque{
    // TODO: Method 'GetNearestKeyFrames'
};
// --------------------------------------------------------
// Type: IMFSimpleAudioVolume
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSimpleAudioVolume = *opaque{
    // TODO: Method 'SetMasterVolume'
    // TODO: Method 'GetMasterVolume'
    // TODO: Method 'SetMute'
    // TODO: Method 'GetMute'
};
// --------------------------------------------------------
// Type: IMFAudioStreamVolume
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFAudioStreamVolume = *opaque{
    // TODO: Method 'GetChannelCount'
    // TODO: Method 'SetChannelVolume'
    // TODO: Method 'GetChannelVolume'
    // TODO: Method 'SetAllVolumes'
    // TODO: Method 'GetAllVolumes'
};
// --------------------------------------------------------
// Type: IMFAudioPolicy
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFAudioPolicy = *opaque{
    // TODO: Method 'SetGroupingParam'
    // TODO: Method 'GetGroupingParam'
    // TODO: Method 'SetDisplayName'
    // TODO: Method 'GetDisplayName'
    // TODO: Method 'SetIconPath'
    // TODO: Method 'GetIconPath'
};
// --------------------------------------------------------
// Type: IMFSampleGrabberSinkCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSampleGrabberSinkCallback = *opaque{
    // TODO: Method 'OnSetPresentationClock'
    // TODO: Method 'OnProcessSample'
    // TODO: Method 'OnShutdown'
};
// --------------------------------------------------------
// Type: IMFSampleGrabberSinkCallback2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSampleGrabberSinkCallback2 = *opaque{
    // TODO: Method 'OnProcessSampleEx'
};
// --------------------------------------------------------
// Type: IMFWorkQueueServices
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFWorkQueueServices = *opaque{
    // TODO: Method 'BeginRegisterTopologyWorkQueuesWithMMCSS'
    // TODO: Method 'EndRegisterTopologyWorkQueuesWithMMCSS'
    // TODO: Method 'BeginUnregisterTopologyWorkQueuesWithMMCSS'
    // TODO: Method 'EndUnregisterTopologyWorkQueuesWithMMCSS'
    // TODO: Method 'GetTopologyWorkQueueMMCSSClass'
    // TODO: Method 'GetTopologyWorkQueueMMCSSTaskId'
    // TODO: Method 'BeginRegisterPlatformWorkQueueWithMMCSS'
    // TODO: Method 'EndRegisterPlatformWorkQueueWithMMCSS'
    // TODO: Method 'BeginUnregisterPlatformWorkQueueWithMMCSS'
    // TODO: Method 'EndUnregisterPlatformWorkQueueWithMMCSS'
    // TODO: Method 'GetPlaftormWorkQueueMMCSSClass'
    // TODO: Method 'GetPlatformWorkQueueMMCSSTaskId'
};
// --------------------------------------------------------
// Type: IMFWorkQueueServicesEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFWorkQueueServicesEx = *opaque{
    // TODO: Method 'GetTopologyWorkQueueMMCSSPriority'
    // TODO: Method 'BeginRegisterPlatformWorkQueueWithMMCSSEx'
    // TODO: Method 'GetPlatformWorkQueueMMCSSPriority'
};
// --------------------------------------------------------
// Type: MF_QUALITY_DROP_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_QUALITY_DROP_MODE = *opaque{
};
// --------------------------------------------------------
// Type: MF_QUALITY_LEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_QUALITY_LEVEL = *opaque{
};
// --------------------------------------------------------
// Type: MF_QUALITY_ADVISE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_QUALITY_ADVISE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: IMFQualityManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFQualityManager = *opaque{
    // TODO: Method 'NotifyTopology'
    // TODO: Method 'NotifyPresentationClock'
    // TODO: Method 'NotifyProcessInput'
    // TODO: Method 'NotifyProcessOutput'
    // TODO: Method 'NotifyQualityEvent'
    // TODO: Method 'Shutdown'
};
// --------------------------------------------------------
// Type: IMFQualityAdvise
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFQualityAdvise = *opaque{
    // TODO: Method 'SetDropMode'
    // TODO: Method 'SetQualityLevel'
    // TODO: Method 'GetDropMode'
    // TODO: Method 'GetQualityLevel'
    // TODO: Method 'DropTime'
};
// --------------------------------------------------------
// Type: IMFQualityAdvise2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFQualityAdvise2 = *opaque{
    // TODO: Method 'NotifyQualityEvent'
};
// --------------------------------------------------------
// Type: IMFQualityAdviseLimits
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFQualityAdviseLimits = *opaque{
    // TODO: Method 'GetMaximumDropMode'
    // TODO: Method 'GetMinimumQualityLevel'
};
// --------------------------------------------------------
// Type: IMFRealTimeClient
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFRealTimeClient = *opaque{
    // TODO: Method 'RegisterThreads'
    // TODO: Method 'UnregisterThreads'
    // TODO: Method 'SetWorkQueue'
};
// --------------------------------------------------------
// Type: IMFRealTimeClientEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFRealTimeClientEx = *opaque{
    // TODO: Method 'RegisterThreadsEx'
    // TODO: Method 'UnregisterThreads'
    // TODO: Method 'SetWorkQueueEx'
};
// --------------------------------------------------------
// Type: MFSequencerTopologyFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFSequencerTopologyFlags = *opaque{
};
// --------------------------------------------------------
// Type: IMFSequencerSource
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSequencerSource = *opaque{
    // TODO: Method 'AppendTopology'
    // TODO: Method 'DeleteTopology'
    // TODO: Method 'GetPresentationContext'
    // TODO: Method 'UpdateTopology'
    // TODO: Method 'UpdateTopologyFlags'
};
// --------------------------------------------------------
// Type: IMFMediaSourceTopologyProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaSourceTopologyProvider = *opaque{
    // TODO: Method 'GetMediaSourceTopology'
};
// --------------------------------------------------------
// Type: IMFMediaSourcePresentationProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaSourcePresentationProvider = *opaque{
    // TODO: Method 'ForceEndOfPresentation'
};
// --------------------------------------------------------
// Type: MFTOPONODE_ATTRIBUTE_UPDATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFTOPONODE_ATTRIBUTE_UPDATE = extern struct {
    NodeId: {"kind":"UInt64"},
    guidAttributeKey: Guid,
    attrType: Windows.Win32.MediaFoundation.MF_ATTRIBUTE_TYPE,
    Anonymous: Windows.Win32.MediaFoundation.MFTOPONODE_ATTRIBUTE_UPDATE+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IMFTopologyNodeAttributeEditor
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFTopologyNodeAttributeEditor = *opaque{
    // TODO: Method 'UpdateNodeAttributes'
};
// --------------------------------------------------------
// Type: MF_LEAKY_BUCKET_PAIR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MF_LEAKY_BUCKET_PAIR = extern struct {
    dwBitrate: {"kind":"UInt32"},
    msBufferWindow: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MFBYTESTREAM_BUFFERING_PARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFBYTESTREAM_BUFFERING_PARAMS = extern struct {
    cbTotalFileSize: {"kind":"UInt64"},
    cbPlayableDataSize: {"kind":"UInt64"},
    prgBuckets: {"kind""Ptr","child":Windows.Win32.MediaFoundation.MF_LEAKY_BUCKET_PAIR},
    cBuckets: {"kind":"UInt32"},
    qwNetBufferingTime: {"kind":"UInt64"},
    qwExtraBufferingTimeDuringSeek: {"kind":"UInt64"},
    qwPlayDuration: {"kind":"UInt64"},
    dRate: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: IMFByteStreamBuffering
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFByteStreamBuffering = *opaque{
    // TODO: Method 'SetBufferingParams'
    // TODO: Method 'EnableBuffering'
    // TODO: Method 'StopBuffering'
};
// --------------------------------------------------------
// Type: IMFByteStreamCacheControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFByteStreamCacheControl = *opaque{
    // TODO: Method 'StopBackgroundTransfer'
};
// --------------------------------------------------------
// Type: IMFByteStreamTimeSeek
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFByteStreamTimeSeek = *opaque{
    // TODO: Method 'IsTimeSeekSupported'
    // TODO: Method 'TimeSeek'
    // TODO: Method 'GetTimeSeekResult'
};
// --------------------------------------------------------
// Type: MF_BYTE_STREAM_CACHE_RANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MF_BYTE_STREAM_CACHE_RANGE = extern struct {
    qwStartOffset: {"kind":"UInt64"},
    qwEndOffset: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: IMFByteStreamCacheControl2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFByteStreamCacheControl2 = *opaque{
    // TODO: Method 'GetByteRanges'
    // TODO: Method 'SetCacheLimit'
    // TODO: Method 'IsBackgroundTransferActive'
};
// --------------------------------------------------------
// Type: IMFNetCredential
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFNetCredential = *opaque{
    // TODO: Method 'SetUser'
    // TODO: Method 'SetPassword'
    // TODO: Method 'GetUser'
    // TODO: Method 'GetPassword'
    // TODO: Method 'LoggedOnUser'
};
// --------------------------------------------------------
// Type: MFNetCredentialManagerGetParam
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFNetCredentialManagerGetParam = extern struct {
    hrOp: Windows.Win32.Com.HRESULT,
    fAllowLoggedOnUser: Windows.Win32.SystemServices.BOOL,
    fClearTextPackage: Windows.Win32.SystemServices.BOOL,
    pszUrl: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszSite: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszRealm: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszPackage: {"kind""Ptr","child":{"kind":"UInt16"}},
    nRetries: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: IMFNetCredentialManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFNetCredentialManager = *opaque{
    // TODO: Method 'BeginGetCredentials'
    // TODO: Method 'EndGetCredentials'
    // TODO: Method 'SetGood'
};
// --------------------------------------------------------
// Type: MFNetCredentialRequirements
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFNetCredentialRequirements = *opaque{
};
// --------------------------------------------------------
// Type: MFNetCredentialOptions
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFNetCredentialOptions = *opaque{
};
// --------------------------------------------------------
// Type: MFNetAuthenticationFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFNetAuthenticationFlags = *opaque{
};
// --------------------------------------------------------
// Type: IMFNetCredentialCache
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFNetCredentialCache = *opaque{
    // TODO: Method 'GetCredential'
    // TODO: Method 'SetGood'
    // TODO: Method 'SetUserOptions'
};
// --------------------------------------------------------
// Type: IMFSSLCertificateManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSSLCertificateManager = *opaque{
    // TODO: Method 'GetClientCertificate'
    // TODO: Method 'BeginGetClientCertificate'
    // TODO: Method 'EndGetClientCertificate'
    // TODO: Method 'GetCertificatePolicy'
    // TODO: Method 'OnServerCertificate'
};
// --------------------------------------------------------
// Type: IMFNetResourceFilter
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFNetResourceFilter = *opaque{
    // TODO: Method 'OnRedirect'
    // TODO: Method 'OnSendingRequest'
};
// --------------------------------------------------------
// Type: IMFSourceOpenMonitor
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSourceOpenMonitor = *opaque{
    // TODO: Method 'OnSourceEvent'
};
// --------------------------------------------------------
// Type: IMFNetProxyLocator
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFNetProxyLocator = *opaque{
    // TODO: Method 'FindFirstProxy'
    // TODO: Method 'FindNextProxy'
    // TODO: Method 'RegisterProxyResult'
    // TODO: Method 'GetCurrentProxy'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IMFNetProxyLocatorFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFNetProxyLocatorFactory = *opaque{
    // TODO: Method 'CreateProxyLocator'
};
// --------------------------------------------------------
// Type: IMFSaveJob
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSaveJob = *opaque{
    // TODO: Method 'BeginSave'
    // TODO: Method 'EndSave'
    // TODO: Method 'CancelSave'
    // TODO: Method 'GetProgress'
};
// --------------------------------------------------------
// Type: MFNETSOURCE_PROTOCOL_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFNETSOURCE_PROTOCOL_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IMFNetSchemeHandlerConfig
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFNetSchemeHandlerConfig = *opaque{
    // TODO: Method 'GetNumberOfSupportedProtocols'
    // TODO: Method 'GetSupportedProtocolType'
    // TODO: Method 'ResetProtocolRolloverSettings'
};
// --------------------------------------------------------
// Type: MFNETSOURCE_TRANSPORT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFNETSOURCE_TRANSPORT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: MFNETSOURCE_CACHE_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFNETSOURCE_CACHE_STATE = *opaque{
};
// --------------------------------------------------------
// Type: MFNETSOURCE_STATISTICS_IDS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFNETSOURCE_STATISTICS_IDS = *opaque{
};
// --------------------------------------------------------
// Type: MFNET_PROXYSETTINGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFNET_PROXYSETTINGS = *opaque{
};
// --------------------------------------------------------
// Type: IMFSchemeHandler
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSchemeHandler = *opaque{
    // TODO: Method 'BeginCreateObject'
    // TODO: Method 'EndCreateObject'
    // TODO: Method 'CancelObjectCreation'
};
// --------------------------------------------------------
// Type: IMFByteStreamHandler
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFByteStreamHandler = *opaque{
    // TODO: Method 'BeginCreateObject'
    // TODO: Method 'EndCreateObject'
    // TODO: Method 'CancelObjectCreation'
    // TODO: Method 'GetMaxNumberOfBytesRequiredForResolution'
};
// --------------------------------------------------------
// Type: IMFTrustedInput
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFTrustedInput = *opaque{
    // TODO: Method 'GetInputTrustAuthority'
};
// --------------------------------------------------------
// Type: MFPOLICYMANAGER_ACTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFPOLICYMANAGER_ACTION = *opaque{
};
// --------------------------------------------------------
// Type: MFINPUTTRUSTAUTHORITY_ACCESS_ACTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFINPUTTRUSTAUTHORITY_ACCESS_ACTION = extern struct {
    Action: Windows.Win32.MediaFoundation.MFPOLICYMANAGER_ACTION,
    pbTicket: {"kind""Ptr","child":{"kind":"Byte"}},
    cbTicket: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS = extern struct {
    dwSize: {"kind":"UInt32"},
    dwVer: {"kind":"UInt32"},
    cbSignatureOffset: {"kind":"UInt32"},
    cbSignatureSize: {"kind":"UInt32"},
    cbExtensionOffset: {"kind":"UInt32"},
    cbExtensionSize: {"kind":"UInt32"},
    cActions: {"kind":"UInt32"},
    rgOutputActions: {"kind":"Array","child": Windows.Win32.MediaFoundation.MFINPUTTRUSTAUTHORITY_ACCESS_ACTION},
};
// --------------------------------------------------------
// Type: IMFInputTrustAuthority
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFInputTrustAuthority = *opaque{
    // TODO: Method 'GetDecrypter'
    // TODO: Method 'RequestAccess'
    // TODO: Method 'GetPolicy'
    // TODO: Method 'BindAccess'
    // TODO: Method 'UpdateAccess'
    // TODO: Method 'Reset'
};
// --------------------------------------------------------
// Type: IMFTrustedOutput
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFTrustedOutput = *opaque{
    // TODO: Method 'GetOutputTrustAuthorityCount'
    // TODO: Method 'GetOutputTrustAuthorityByIndex'
    // TODO: Method 'IsFinal'
};
// --------------------------------------------------------
// Type: IMFOutputTrustAuthority
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFOutputTrustAuthority = *opaque{
    // TODO: Method 'GetAction'
    // TODO: Method 'SetPolicy'
};
// --------------------------------------------------------
// Type: IMFOutputPolicy
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFOutputPolicy = *opaque{
    // TODO: Method 'GenerateRequiredSchemas'
    // TODO: Method 'GetOriginatorID'
    // TODO: Method 'GetMinimumGRLVersion'
};
// --------------------------------------------------------
// Type: IMFOutputSchema
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFOutputSchema = *opaque{
    // TODO: Method 'GetSchemaType'
    // TODO: Method 'GetConfigurationData'
    // TODO: Method 'GetOriginatorID'
};
// --------------------------------------------------------
// Type: MF_OPM_CGMSA_PROTECTION_LEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_OPM_CGMSA_PROTECTION_LEVEL = *opaque{
};
// --------------------------------------------------------
// Type: MF_OPM_ACP_PROTECTION_LEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_OPM_ACP_PROTECTION_LEVEL = *opaque{
};
// --------------------------------------------------------
// Type: MFAudioConstriction
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFAudioConstriction = *opaque{
};
// --------------------------------------------------------
// Type: IMFSecureChannel
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSecureChannel = *opaque{
    // TODO: Method 'GetCertificate'
    // TODO: Method 'SetupSession'
};
// --------------------------------------------------------
// Type: SAMPLE_PROTECTION_VERSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SAMPLE_PROTECTION_VERSION = *opaque{
};
// --------------------------------------------------------
// Type: IMFSampleProtection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSampleProtection = *opaque{
    // TODO: Method 'GetInputProtectionVersion'
    // TODO: Method 'GetOutputProtectionVersion'
    // TODO: Method 'GetProtectionCertificate'
    // TODO: Method 'InitOutputProtection'
    // TODO: Method 'InitInputProtection'
};
// --------------------------------------------------------
// Type: IMFMediaSinkPreroll
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaSinkPreroll = *opaque{
    // TODO: Method 'NotifyPreroll'
};
// --------------------------------------------------------
// Type: IMFFinalizableMediaSink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFFinalizableMediaSink = *opaque{
    // TODO: Method 'BeginFinalize'
    // TODO: Method 'EndFinalize'
};
// --------------------------------------------------------
// Type: IMFStreamingSinkConfig
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFStreamingSinkConfig = *opaque{
    // TODO: Method 'StartStreaming'
};
// --------------------------------------------------------
// Type: IMFRemoteProxy
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFRemoteProxy = *opaque{
    // TODO: Method 'GetRemoteObject'
    // TODO: Method 'GetRemoteHost'
};
// --------------------------------------------------------
// Type: IMFObjectReferenceStream
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFObjectReferenceStream = *opaque{
    // TODO: Method 'SaveReference'
    // TODO: Method 'LoadReference'
};
// --------------------------------------------------------
// Type: IMFPMPHost
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFPMPHost = *opaque{
    // TODO: Method 'LockProcess'
    // TODO: Method 'UnlockProcess'
    // TODO: Method 'CreateObjectByCLSID'
};
// --------------------------------------------------------
// Type: IMFPMPClient
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFPMPClient = *opaque{
    // TODO: Method 'SetPMPHost'
};
// --------------------------------------------------------
// Type: IMFPMPServer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFPMPServer = *opaque{
    // TODO: Method 'LockProcess'
    // TODO: Method 'UnlockProcess'
    // TODO: Method 'CreateObjectByCLSID'
};
// --------------------------------------------------------
// Type: IMFRemoteDesktopPlugin
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFRemoteDesktopPlugin = *opaque{
    // TODO: Method 'UpdateTopology'
};
// --------------------------------------------------------
// Type: IMFSAMIStyle
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSAMIStyle = *opaque{
    // TODO: Method 'GetStyleCount'
    // TODO: Method 'GetStyles'
    // TODO: Method 'SetSelectedStyle'
    // TODO: Method 'GetSelectedStyle'
};
// --------------------------------------------------------
// Type: IMFTranscodeProfile
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFTranscodeProfile = *opaque{
    // TODO: Method 'SetAudioAttributes'
    // TODO: Method 'GetAudioAttributes'
    // TODO: Method 'SetVideoAttributes'
    // TODO: Method 'GetVideoAttributes'
    // TODO: Method 'SetContainerAttributes'
    // TODO: Method 'GetContainerAttributes'
};
// --------------------------------------------------------
// Type: MF_TRANSCODE_TOPOLOGYMODE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_TRANSCODE_TOPOLOGYMODE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: MF_TRANSCODE_ADJUST_PROFILE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_TRANSCODE_ADJUST_PROFILE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: MF_VIDEO_PROCESSOR_ALGORITHM_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_VIDEO_PROCESSOR_ALGORITHM_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: MF_TRANSCODE_SINK_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MF_TRANSCODE_SINK_INFO = extern struct {
    dwVideoStreamID: {"kind":"UInt32"},
    pVideoMediaType: Windows.Win32.MediaFoundation.IMFMediaType,
    dwAudioStreamID: {"kind":"UInt32"},
    pAudioMediaType: Windows.Win32.MediaFoundation.IMFMediaType,
};
// --------------------------------------------------------
// Type: IMFTranscodeSinkInfoProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFTranscodeSinkInfoProvider = *opaque{
    // TODO: Method 'SetOutputFile'
    // TODO: Method 'SetOutputByteStream'
    // TODO: Method 'SetProfile'
    // TODO: Method 'GetSinkInfo'
};
// --------------------------------------------------------
// Type: IMFFieldOfUseMFTUnlock
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFFieldOfUseMFTUnlock = *opaque{
    // TODO: Method 'Unlock'
};
// --------------------------------------------------------
// Type: MFT_REGISTRATION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFT_REGISTRATION_INFO = extern struct {
    clsid: Guid,
    guidCategory: Guid,
    uiFlags: {"kind":"UInt32"},
    pszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    cInTypes: {"kind":"UInt32"},
    pInTypes: {"kind""Ptr","child":Windows.Win32.MediaFoundation.MFT_REGISTER_TYPE_INFO},
    cOutTypes: {"kind":"UInt32"},
    pOutTypes: {"kind""Ptr","child":Windows.Win32.MediaFoundation.MFT_REGISTER_TYPE_INFO},
};
// --------------------------------------------------------
// Type: IMFLocalMFTRegistration
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFLocalMFTRegistration = *opaque{
    // TODO: Method 'RegisterMFTs'
};
// --------------------------------------------------------
// Type: IMFCapturePhotoConfirmation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFCapturePhotoConfirmation = *opaque{
    // TODO: Method 'SetPhotoConfirmationCallback'
    // TODO: Method 'SetPixelFormat'
    // TODO: Method 'GetPixelFormat'
};
// --------------------------------------------------------
// Type: IMFPMPHostApp
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFPMPHostApp = *opaque{
    // TODO: Method 'LockProcess'
    // TODO: Method 'UnlockProcess'
    // TODO: Method 'ActivateClassById'
};
// --------------------------------------------------------
// Type: IMFPMPClientApp
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFPMPClientApp = *opaque{
    // TODO: Method 'SetPMPHost'
};
// --------------------------------------------------------
// Type: IMFMediaStreamSourceSampleRequest
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaStreamSourceSampleRequest = *opaque{
    // TODO: Method 'SetSample'
};
// --------------------------------------------------------
// Type: IMFTrackedSample
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFTrackedSample = *opaque{
    // TODO: Method 'SetAllocator'
};
// --------------------------------------------------------
// Type: IMFProtectedEnvironmentAccess
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFProtectedEnvironmentAccess = *opaque{
    // TODO: Method 'Call'
    // TODO: Method 'ReadGRL'
};
// --------------------------------------------------------
// Type: IMFSignedLibrary
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSignedLibrary = *opaque{
    // TODO: Method 'GetProcedureAddress'
};
// --------------------------------------------------------
// Type: IMFSystemId
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSystemId = *opaque{
    // TODO: Method 'GetData'
    // TODO: Method 'Setup'
};
// --------------------------------------------------------
// Type: MFCONTENTPROTECTIONDEVICE_INPUT_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFCONTENTPROTECTIONDEVICE_INPUT_DATA = extern struct {
    HWProtectionFunctionID: {"kind":"UInt32"},
    PrivateDataByteCount: {"kind":"UInt32"},
    HWProtectionDataByteCount: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
    InputData: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA = extern struct {
    PrivateDataByteCount: {"kind":"UInt32"},
    MaxHWProtectionDataByteCount: {"kind":"UInt32"},
    HWProtectionDataByteCount: {"kind":"UInt32"},
    Status: Windows.Win32.Com.HRESULT,
    TransportTimeInHundredsOfNanoseconds: {"kind":"Int64"},
    ExecutionTimeInHundredsOfNanoseconds: {"kind":"Int64"},
    OutputData: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA = extern struct {
    TaskIndex: {"kind":"UInt32"},
    ClassName: {"kind":"Array","child": {"kind":"UInt16"}},
    BasePriority: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: IMFContentProtectionDevice
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFContentProtectionDevice = *opaque{
    // TODO: Method 'InvokeFunction'
    // TODO: Method 'GetPrivateDataByteCount'
};
// --------------------------------------------------------
// Type: IMFContentDecryptorContext
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFContentDecryptorContext = *opaque{
    // TODO: Method 'InitializeHardwareKey'
};
// --------------------------------------------------------
// Type: MF_MEDIAKEYSESSION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_MEDIAKEYSESSION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: MF_MEDIAKEY_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_MEDIAKEY_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: MFMediaKeyStatus
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFMediaKeyStatus = extern struct {
    pbKeyId: {"kind""Ptr","child":{"kind":"Byte"}},
    cbKeyId: {"kind":"UInt32"},
    eMediaKeyStatus: Windows.Win32.MediaFoundation.MF_MEDIAKEY_STATUS,
};
// --------------------------------------------------------
// Type: MF_MEDIAKEYSESSION_MESSAGETYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_MEDIAKEYSESSION_MESSAGETYPE = *opaque{
};
// --------------------------------------------------------
// Type: MF_CROSS_ORIGIN_POLICY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_CROSS_ORIGIN_POLICY = *opaque{
};
// --------------------------------------------------------
// Type: IMFNetCrossOriginSupport
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFNetCrossOriginSupport = *opaque{
    // TODO: Method 'GetCrossOriginPolicy'
    // TODO: Method 'GetSourceOrigin'
    // TODO: Method 'IsSameOrigin'
};
// --------------------------------------------------------
// Type: IMFHttpDownloadRequest
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFHttpDownloadRequest = *opaque{
    // TODO: Method 'AddHeader'
    // TODO: Method 'BeginSendRequest'
    // TODO: Method 'EndSendRequest'
    // TODO: Method 'BeginReceiveResponse'
    // TODO: Method 'EndReceiveResponse'
    // TODO: Method 'BeginReadPayload'
    // TODO: Method 'EndReadPayload'
    // TODO: Method 'QueryHeader'
    // TODO: Method 'GetURL'
    // TODO: Method 'HasNullSourceOrigin'
    // TODO: Method 'GetTimeSeekResult'
    // TODO: Method 'GetHttpStatus'
    // TODO: Method 'GetAtEndOfPayload'
    // TODO: Method 'GetTotalLength'
    // TODO: Method 'GetRangeEndOffset'
    // TODO: Method 'Close'
};
// --------------------------------------------------------
// Type: IMFHttpDownloadSession
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFHttpDownloadSession = *opaque{
    // TODO: Method 'SetServer'
    // TODO: Method 'CreateRequest'
    // TODO: Method 'Close'
};
// --------------------------------------------------------
// Type: IMFHttpDownloadSessionProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFHttpDownloadSessionProvider = *opaque{
    // TODO: Method 'CreateHttpDownloadSession'
};
// --------------------------------------------------------
// Type: MF_VIDEO_SPHERICAL_VIEWDIRECTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MF_VIDEO_SPHERICAL_VIEWDIRECTION = extern struct {
    iHeading: {"kind":"Int32"},
    iPitch: {"kind":"Int32"},
    iRoll: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: IMFMediaSource2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaSource2 = *opaque{
    // TODO: Method 'SetMediaType'
};
// --------------------------------------------------------
// Type: IMFMediaStream2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaStream2 = *opaque{
    // TODO: Method 'SetStreamState'
    // TODO: Method 'GetStreamState'
};
// --------------------------------------------------------
// Type: MFSensorDeviceType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFSensorDeviceType = *opaque{
};
// --------------------------------------------------------
// Type: MFSensorStreamType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFSensorStreamType = *opaque{
};
// --------------------------------------------------------
// Type: MFSensorDeviceMode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFSensorDeviceMode = *opaque{
};
// --------------------------------------------------------
// Type: IMFSensorDevice
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSensorDevice = *opaque{
    // TODO: Method 'GetDeviceId'
    // TODO: Method 'GetDeviceType'
    // TODO: Method 'GetFlags'
    // TODO: Method 'GetSymbolicLink'
    // TODO: Method 'GetDeviceAttributes'
    // TODO: Method 'GetStreamAttributesCount'
    // TODO: Method 'GetStreamAttributes'
    // TODO: Method 'SetSensorDeviceMode'
    // TODO: Method 'GetSensorDeviceMode'
};
// --------------------------------------------------------
// Type: IMFSensorGroup
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSensorGroup = *opaque{
    // TODO: Method 'GetSymbolicLink'
    // TODO: Method 'GetFlags'
    // TODO: Method 'GetSensorGroupAttributes'
    // TODO: Method 'GetSensorDeviceCount'
    // TODO: Method 'GetSensorDevice'
    // TODO: Method 'SetDefaultSensorDeviceIndex'
    // TODO: Method 'GetDefaultSensorDeviceIndex'
    // TODO: Method 'CreateMediaSource'
};
// --------------------------------------------------------
// Type: IMFSensorStream
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSensorStream = *opaque{
    // TODO: Method 'GetMediaTypeCount'
    // TODO: Method 'GetMediaType'
    // TODO: Method 'CloneSensorStream'
};
// --------------------------------------------------------
// Type: IMFSensorTransformFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSensorTransformFactory = *opaque{
    // TODO: Method 'GetFactoryAttributes'
    // TODO: Method 'InitializeFactory'
    // TODO: Method 'GetTransformCount'
    // TODO: Method 'GetTransformInformation'
    // TODO: Method 'CreateTransform'
};
// --------------------------------------------------------
// Type: SENSORPROFILEID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SENSORPROFILEID = extern struct {
    Type: Guid,
    Index: {"kind":"UInt32"},
    Unused: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IMFSensorProfile
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSensorProfile = *opaque{
    // TODO: Method 'GetProfileId'
    // TODO: Method 'AddProfileFilter'
    // TODO: Method 'IsMediaTypeSupported'
    // TODO: Method 'AddBlockedControl'
};
// --------------------------------------------------------
// Type: IMFSensorProfileCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSensorProfileCollection = *opaque{
    // TODO: Method 'GetProfileCount'
    // TODO: Method 'GetProfile'
    // TODO: Method 'AddProfile'
    // TODO: Method 'FindProfile'
    // TODO: Method 'RemoveProfileByIndex'
    // TODO: Method 'RemoveProfile'
};
// --------------------------------------------------------
// Type: IMFSensorProcessActivity
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSensorProcessActivity = *opaque{
    // TODO: Method 'GetProcessId'
    // TODO: Method 'GetStreamingState'
    // TODO: Method 'GetStreamingMode'
    // TODO: Method 'GetReportTime'
};
// --------------------------------------------------------
// Type: IMFSensorActivityReport
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSensorActivityReport = *opaque{
    // TODO: Method 'GetFriendlyName'
    // TODO: Method 'GetSymbolicLink'
    // TODO: Method 'GetProcessCount'
    // TODO: Method 'GetProcessActivity'
};
// --------------------------------------------------------
// Type: IMFSensorActivitiesReport
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSensorActivitiesReport = *opaque{
    // TODO: Method 'GetCount'
    // TODO: Method 'GetActivityReport'
    // TODO: Method 'GetActivityReportByDeviceName'
};
// --------------------------------------------------------
// Type: IMFSensorActivitiesReportCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSensorActivitiesReportCallback = *opaque{
    // TODO: Method 'OnActivitiesReport'
};
// --------------------------------------------------------
// Type: IMFSensorActivityMonitor
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSensorActivityMonitor = *opaque{
    // TODO: Method 'Start'
    // TODO: Method 'Stop'
};
// --------------------------------------------------------
// Type: MFCameraIntrinsic_CameraModel
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFCameraIntrinsic_CameraModel = extern struct {
    FocalLength_x: {"kind":"Single"},
    FocalLength_y: {"kind":"Single"},
    PrincipalPoint_x: {"kind":"Single"},
    PrincipalPoint_y: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: MFCameraIntrinsic_DistortionModel6KT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFCameraIntrinsic_DistortionModel6KT = extern struct {
    Radial_k1: {"kind":"Single"},
    Radial_k2: {"kind":"Single"},
    Radial_k3: {"kind":"Single"},
    Radial_k4: {"kind":"Single"},
    Radial_k5: {"kind":"Single"},
    Radial_k6: {"kind":"Single"},
    Tangential_p1: {"kind":"Single"},
    Tangential_p2: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: MFCameraIntrinsic_DistortionModelArcTan
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFCameraIntrinsic_DistortionModelArcTan = extern struct {
    Radial_k0: {"kind":"Single"},
    DistortionCenter_x: {"kind":"Single"},
    DistortionCenter_y: {"kind":"Single"},
    Tangential_x: {"kind":"Single"},
    Tangential_y: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: MFCameraIntrinsic_DistortionModelType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFCameraIntrinsic_DistortionModelType = *opaque{
};
// --------------------------------------------------------
// Type: MFExtendedCameraIntrinsic_IntrinsicModel
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFExtendedCameraIntrinsic_IntrinsicModel = extern struct {
    Width: {"kind":"UInt32"},
    Height: {"kind":"UInt32"},
    SplitFrameId: {"kind":"UInt32"},
    CameraModel: Windows.Win32.MediaFoundation.MFCameraIntrinsic_CameraModel,
};
// --------------------------------------------------------
// Type: IMFExtendedCameraIntrinsicModel
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFExtendedCameraIntrinsicModel = *opaque{
    // TODO: Method 'GetModel'
    // TODO: Method 'SetModel'
    // TODO: Method 'GetDistortionModelType'
};
// --------------------------------------------------------
// Type: IMFExtendedCameraIntrinsicsDistortionModel6KT
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFExtendedCameraIntrinsicsDistortionModel6KT = *opaque{
    // TODO: Method 'GetDistortionModel'
    // TODO: Method 'SetDistortionModel'
};
// --------------------------------------------------------
// Type: IMFExtendedCameraIntrinsicsDistortionModelArcTan
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFExtendedCameraIntrinsicsDistortionModelArcTan = *opaque{
    // TODO: Method 'GetDistortionModel'
    // TODO: Method 'SetDistortionModel'
};
// --------------------------------------------------------
// Type: IMFExtendedCameraIntrinsics
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFExtendedCameraIntrinsics = *opaque{
    // TODO: Method 'InitializeFromBuffer'
    // TODO: Method 'GetBufferSize'
    // TODO: Method 'SerializeToBuffer'
    // TODO: Method 'GetIntrinsicModelCount'
    // TODO: Method 'GetIntrinsicModelByIndex'
    // TODO: Method 'AddIntrinsicModel'
};
// --------------------------------------------------------
// Type: IMFExtendedCameraControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFExtendedCameraControl = *opaque{
    // TODO: Method 'GetCapabilities'
    // TODO: Method 'SetFlags'
    // TODO: Method 'GetFlags'
    // TODO: Method 'LockPayload'
    // TODO: Method 'UnlockPayload'
    // TODO: Method 'CommitSettings'
};
// --------------------------------------------------------
// Type: IMFExtendedCameraController
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFExtendedCameraController = *opaque{
    // TODO: Method 'GetExtendedCameraControl'
};
// --------------------------------------------------------
// Type: IMFRelativePanelReport
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFRelativePanelReport = *opaque{
    // TODO: Method 'GetRelativePanel'
};
// --------------------------------------------------------
// Type: IMFRelativePanelWatcher
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFRelativePanelWatcher = *opaque{
    // TODO: Method 'BeginGetReport'
    // TODO: Method 'EndGetReport'
    // TODO: Method 'GetReport'
};
// --------------------------------------------------------
// Type: IMFVideoCaptureSampleAllocator
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFVideoCaptureSampleAllocator = *opaque{
    // TODO: Method 'InitializeCaptureSampleAllocator'
};
// --------------------------------------------------------
// Type: MFSampleAllocatorUsage
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFSampleAllocatorUsage = *opaque{
};
// --------------------------------------------------------
// Type: IMFSampleAllocatorControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSampleAllocatorControl = *opaque{
    // TODO: Method 'SetDefaultAllocator'
    // TODO: Method 'GetAllocatorUsage'
};
// --------------------------------------------------------
// Type: IMFASFContentInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFASFContentInfo = *opaque{
    // TODO: Method 'GetHeaderSize'
    // TODO: Method 'ParseHeader'
    // TODO: Method 'GenerateHeader'
    // TODO: Method 'GetProfile'
    // TODO: Method 'SetProfile'
    // TODO: Method 'GeneratePresentationDescriptor'
    // TODO: Method 'GetEncodingConfigurationPropertyStore'
};
// --------------------------------------------------------
// Type: IMFASFProfile
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFASFProfile = *opaque{
    // TODO: Method 'GetStreamCount'
    // TODO: Method 'GetStream'
    // TODO: Method 'GetStreamByNumber'
    // TODO: Method 'SetStream'
    // TODO: Method 'RemoveStream'
    // TODO: Method 'CreateStream'
    // TODO: Method 'GetMutualExclusionCount'
    // TODO: Method 'GetMutualExclusion'
    // TODO: Method 'AddMutualExclusion'
    // TODO: Method 'RemoveMutualExclusion'
    // TODO: Method 'CreateMutualExclusion'
    // TODO: Method 'GetStreamPrioritization'
    // TODO: Method 'AddStreamPrioritization'
    // TODO: Method 'RemoveStreamPrioritization'
    // TODO: Method 'CreateStreamPrioritization'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IMFASFStreamConfig
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFASFStreamConfig = *opaque{
    // TODO: Method 'GetStreamType'
    // TODO: Method 'GetStreamNumber'
    // TODO: Method 'SetStreamNumber'
    // TODO: Method 'GetMediaType'
    // TODO: Method 'SetMediaType'
    // TODO: Method 'GetPayloadExtensionCount'
    // TODO: Method 'GetPayloadExtension'
    // TODO: Method 'AddPayloadExtension'
    // TODO: Method 'RemoveAllPayloadExtensions'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IMFASFMutualExclusion
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFASFMutualExclusion = *opaque{
    // TODO: Method 'GetType'
    // TODO: Method 'SetType'
    // TODO: Method 'GetRecordCount'
    // TODO: Method 'GetStreamsForRecord'
    // TODO: Method 'AddStreamForRecord'
    // TODO: Method 'RemoveStreamFromRecord'
    // TODO: Method 'RemoveRecord'
    // TODO: Method 'AddRecord'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IMFASFStreamPrioritization
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFASFStreamPrioritization = *opaque{
    // TODO: Method 'GetStreamCount'
    // TODO: Method 'GetStream'
    // TODO: Method 'AddStream'
    // TODO: Method 'RemoveStream'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: MFASF_INDEXER_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFASF_INDEXER_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: ASF_INDEX_IDENTIFIER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ASF_INDEX_IDENTIFIER = extern struct {
    guidIndexType: Guid,
    wStreamNumber: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: ASF_INDEX_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ASF_INDEX_DESCRIPTOR = extern struct {
    Identifier: Windows.Win32.MediaFoundation.ASF_INDEX_IDENTIFIER,
    cPerEntryBytes: {"kind":"UInt16"},
    szDescription: {"kind":"Array","child": {"kind":"UInt16"}},
    dwInterval: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IMFASFIndexer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFASFIndexer = *opaque{
    // TODO: Method 'SetFlags'
    // TODO: Method 'GetFlags'
    // TODO: Method 'Initialize'
    // TODO: Method 'GetIndexPosition'
    // TODO: Method 'SetIndexByteStreams'
    // TODO: Method 'GetIndexByteStreamCount'
    // TODO: Method 'GetIndexStatus'
    // TODO: Method 'SetIndexStatus'
    // TODO: Method 'GetSeekPositionForValue'
    // TODO: Method 'GenerateIndexEntries'
    // TODO: Method 'CommitIndex'
    // TODO: Method 'GetIndexWriteSpace'
    // TODO: Method 'GetCompletedIndex'
};
// --------------------------------------------------------
// Type: IMFASFSplitter
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFASFSplitter = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'SetFlags'
    // TODO: Method 'GetFlags'
    // TODO: Method 'SelectStreams'
    // TODO: Method 'GetSelectedStreams'
    // TODO: Method 'ParseData'
    // TODO: Method 'GetNextSample'
    // TODO: Method 'Flush'
    // TODO: Method 'GetLastSendTime'
};
// --------------------------------------------------------
// Type: MFASF_SPLITTERFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFASF_SPLITTERFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: ASF_STATUSFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ASF_STATUSFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: MFASF_MULTIPLEXERFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFASF_MULTIPLEXERFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: ASF_MUX_STATISTICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ASF_MUX_STATISTICS = extern struct {
    cFramesWritten: {"kind":"UInt32"},
    cFramesDropped: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IMFASFMultiplexer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFASFMultiplexer = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'SetFlags'
    // TODO: Method 'GetFlags'
    // TODO: Method 'ProcessSample'
    // TODO: Method 'GetNextPacket'
    // TODO: Method 'Flush'
    // TODO: Method 'End'
    // TODO: Method 'GetStatistics'
    // TODO: Method 'SetSyncTolerance'
};
// --------------------------------------------------------
// Type: MFASF_STREAMSELECTOR_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFASF_STREAMSELECTOR_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: ASF_SELECTION_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ASF_SELECTION_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: IMFASFStreamSelector
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFASFStreamSelector = *opaque{
    // TODO: Method 'GetStreamCount'
    // TODO: Method 'GetOutputCount'
    // TODO: Method 'GetOutputStreamCount'
    // TODO: Method 'GetOutputStreamNumbers'
    // TODO: Method 'GetOutputFromStream'
    // TODO: Method 'GetOutputOverride'
    // TODO: Method 'SetOutputOverride'
    // TODO: Method 'GetOutputMutexCount'
    // TODO: Method 'GetOutputMutex'
    // TODO: Method 'SetOutputMutexSelection'
    // TODO: Method 'GetBandwidthStepCount'
    // TODO: Method 'GetBandwidthStep'
    // TODO: Method 'BitrateToStepNumber'
    // TODO: Method 'SetStreamSelectorFlags'
};
// --------------------------------------------------------
// Type: MFSINK_WMDRMACTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFSINK_WMDRMACTION = *opaque{
};
// --------------------------------------------------------
// Type: IMFDRMNetHelper
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFDRMNetHelper = *opaque{
    // TODO: Method 'ProcessLicenseRequest'
    // TODO: Method 'GetChainedLicenseResponse'
};
// --------------------------------------------------------
// Type: MFVideoNormalizedRect
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFVideoNormalizedRect = extern struct {
    left: {"kind":"Single"},
    top: {"kind":"Single"},
    right: {"kind":"Single"},
    bottom: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: MF_CAPTURE_ENGINE_DEVICE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_CAPTURE_ENGINE_DEVICE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: MF_CAPTURE_ENGINE_SINK_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_CAPTURE_ENGINE_SINK_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_mfcaptureengine_0000_0000_0001
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_mfcaptureengine_0000_0000_0001 = *opaque{
};
// --------------------------------------------------------
// Type: MF_CAPTURE_ENGINE_STREAM_CATEGORY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_CAPTURE_ENGINE_STREAM_CATEGORY = *opaque{
};
// --------------------------------------------------------
// Type: MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: MF_CAPTURE_ENGINE_AUDIO_PROCESSING_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_CAPTURE_ENGINE_AUDIO_PROCESSING_MODE = *opaque{
};
// --------------------------------------------------------
// Type: IMFCaptureEngineOnEventCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFCaptureEngineOnEventCallback = *opaque{
    // TODO: Method 'OnEvent'
};
// --------------------------------------------------------
// Type: IMFCaptureEngineOnSampleCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFCaptureEngineOnSampleCallback = *opaque{
    // TODO: Method 'OnSample'
};
// --------------------------------------------------------
// Type: IMFCaptureSink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFCaptureSink = *opaque{
    // TODO: Method 'GetOutputMediaType'
    // TODO: Method 'GetService'
    // TODO: Method 'AddStream'
    // TODO: Method 'Prepare'
    // TODO: Method 'RemoveAllStreams'
};
// --------------------------------------------------------
// Type: IMFCaptureRecordSink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFCaptureRecordSink = *opaque{
    // TODO: Method 'SetOutputByteStream'
    // TODO: Method 'SetOutputFileName'
    // TODO: Method 'SetSampleCallback'
    // TODO: Method 'SetCustomSink'
    // TODO: Method 'GetRotation'
    // TODO: Method 'SetRotation'
};
// --------------------------------------------------------
// Type: IMFCapturePreviewSink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFCapturePreviewSink = *opaque{
    // TODO: Method 'SetRenderHandle'
    // TODO: Method 'SetRenderSurface'
    // TODO: Method 'UpdateVideo'
    // TODO: Method 'SetSampleCallback'
    // TODO: Method 'GetMirrorState'
    // TODO: Method 'SetMirrorState'
    // TODO: Method 'GetRotation'
    // TODO: Method 'SetRotation'
    // TODO: Method 'SetCustomSink'
};
// --------------------------------------------------------
// Type: IMFCapturePhotoSink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFCapturePhotoSink = *opaque{
    // TODO: Method 'SetOutputFileName'
    // TODO: Method 'SetSampleCallback'
    // TODO: Method 'SetOutputByteStream'
};
// --------------------------------------------------------
// Type: IMFCaptureSource
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFCaptureSource = *opaque{
    // TODO: Method 'GetCaptureDeviceSource'
    // TODO: Method 'GetCaptureDeviceActivate'
    // TODO: Method 'GetService'
    // TODO: Method 'AddEffect'
    // TODO: Method 'RemoveEffect'
    // TODO: Method 'RemoveAllEffects'
    // TODO: Method 'GetAvailableDeviceMediaType'
    // TODO: Method 'SetCurrentDeviceMediaType'
    // TODO: Method 'GetCurrentDeviceMediaType'
    // TODO: Method 'GetDeviceStreamCount'
    // TODO: Method 'GetDeviceStreamCategory'
    // TODO: Method 'GetMirrorState'
    // TODO: Method 'SetMirrorState'
    // TODO: Method 'GetStreamIndexFromFriendlyName'
};
// --------------------------------------------------------
// Type: IMFCaptureEngine
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFCaptureEngine = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'StartPreview'
    // TODO: Method 'StopPreview'
    // TODO: Method 'StartRecord'
    // TODO: Method 'StopRecord'
    // TODO: Method 'TakePhoto'
    // TODO: Method 'GetSink'
    // TODO: Method 'GetSource'
};
// --------------------------------------------------------
// Type: IMFCaptureEngineClassFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFCaptureEngineClassFactory = *opaque{
    // TODO: Method 'CreateInstance'
};
// --------------------------------------------------------
// Type: IMFCaptureEngineOnSampleCallback2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFCaptureEngineOnSampleCallback2 = *opaque{
    // TODO: Method 'OnSynchronizedEvent'
};
// --------------------------------------------------------
// Type: IMFCaptureSink2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFCaptureSink2 = *opaque{
    // TODO: Method 'SetOutputMediaType'
};
// --------------------------------------------------------
// Type: MFPERIODICCALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFPERIODICCALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: MFASYNC_WORKQUEUE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFASYNC_WORKQUEUE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: MFASYNCRESULT
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const MFASYNCRESULT = *opaque{
};
// --------------------------------------------------------
// Type: MF_TOPOSTATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_TOPOSTATUS = *opaque{
};
// --------------------------------------------------------
// Type: MFSampleEncryptionProtectionScheme
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFSampleEncryptionProtectionScheme = *opaque{
};
// --------------------------------------------------------
// Type: MOVE_RECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MOVE_RECT = extern struct {
    SourcePoint: Windows.Win32.DisplayDevices.POINT,
    DestRect: Windows.Win32.DisplayDevices.RECT,
};
// --------------------------------------------------------
// Type: DIRTYRECT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIRTYRECT_INFO = extern struct {
    FrameNumber: {"kind":"UInt32"},
    NumDirtyRects: {"kind":"UInt32"},
    DirtyRects: {"kind":"Array","child": Windows.Win32.DisplayDevices.RECT},
};
// --------------------------------------------------------
// Type: MOVEREGION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MOVEREGION_INFO = extern struct {
    FrameNumber: {"kind":"UInt32"},
    NumMoveRegions: {"kind":"UInt32"},
    MoveRegions: {"kind":"Array","child": Windows.Win32.MediaFoundation.MOVE_RECT},
};
// --------------------------------------------------------
// Type: ROI_AREA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ROI_AREA = extern struct {
    rect: Windows.Win32.DisplayDevices.RECT,
    QPDelta: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: MACROBLOCK_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MACROBLOCK_DATA = extern struct {
    flags: {"kind":"UInt32"},
    motionVectorX: {"kind":"Int16"},
    motionVectorY: {"kind":"Int16"},
    QPDelta: {"kind":"Int32"},
};
// --------------------------------------------------------
// Type: _MFT_ENUM_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _MFT_ENUM_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: MFFrameSourceTypes
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFFrameSourceTypes = *opaque{
};
// --------------------------------------------------------
// Type: MFVideo3DFormat
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFVideo3DFormat = *opaque{
};
// --------------------------------------------------------
// Type: MFVideo3DSampleFormat
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFVideo3DSampleFormat = *opaque{
};
// --------------------------------------------------------
// Type: MFVideoRotationFormat
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFVideoRotationFormat = *opaque{
};
// --------------------------------------------------------
// Type: MFDepthMeasurement
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFDepthMeasurement = *opaque{
};
// --------------------------------------------------------
// Type: MF_CUSTOM_DECODE_UNIT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_CUSTOM_DECODE_UNIT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: MFFOLDDOWN_MATRIX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFFOLDDOWN_MATRIX = extern struct {
    cbSize: {"kind":"UInt32"},
    cSrcChannels: {"kind":"UInt32"},
    cDstChannels: {"kind":"UInt32"},
    dwChannelMask: {"kind":"UInt32"},
    Coeff: {"kind":"Array","child": {"kind":"Int32"}},
};
// --------------------------------------------------------
// Type: MFVideoDRMFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFVideoDRMFlags = *opaque{
};
// --------------------------------------------------------
// Type: MFVideoPadFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFVideoPadFlags = *opaque{
};
// --------------------------------------------------------
// Type: MFVideoSrcContentHintFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFVideoSrcContentHintFlags = *opaque{
};
// --------------------------------------------------------
// Type: MT_CUSTOM_VIDEO_PRIMARIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MT_CUSTOM_VIDEO_PRIMARIES = extern struct {
    fRx: {"kind":"Single"},
    fRy: {"kind":"Single"},
    fGx: {"kind":"Single"},
    fGy: {"kind":"Single"},
    fBx: {"kind":"Single"},
    fBy: {"kind":"Single"},
    fWx: {"kind":"Single"},
    fWy: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: MT_ARBITRARY_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MT_ARBITRARY_HEADER = extern struct {
    majortype: Guid,
    subtype: Guid,
    bFixedSizeSamples: Windows.Win32.SystemServices.BOOL,
    bTemporalCompression: Windows.Win32.SystemServices.BOOL,
    lSampleSize: {"kind":"UInt32"},
    formattype: Guid,
};
// --------------------------------------------------------
// Type: MF_FLOAT2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MF_FLOAT2 = extern struct {
    x: {"kind":"Single"},
    y: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: MF_FLOAT3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MF_FLOAT3 = extern struct {
    x: {"kind":"Single"},
    y: {"kind":"Single"},
    z: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: MF_QUATERNION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MF_QUATERNION = extern struct {
    x: {"kind":"Single"},
    y: {"kind":"Single"},
    z: {"kind":"Single"},
    w: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: MFCameraExtrinsic_CalibratedTransform
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFCameraExtrinsic_CalibratedTransform = extern struct {
    CalibrationId: Guid,
    Position: Windows.Win32.MediaFoundation.MF_FLOAT3,
    Orientation: Windows.Win32.MediaFoundation.MF_QUATERNION,
};
// --------------------------------------------------------
// Type: MFCameraExtrinsics
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFCameraExtrinsics = extern struct {
    TransformCount: {"kind":"UInt32"},
    CalibratedTransforms: {"kind":"Array","child": Windows.Win32.MediaFoundation.MFCameraExtrinsic_CalibratedTransform},
};
// --------------------------------------------------------
// Type: MFCameraIntrinsic_PinholeCameraModel
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFCameraIntrinsic_PinholeCameraModel = extern struct {
    FocalLength: Windows.Win32.MediaFoundation.MF_FLOAT2,
    PrincipalPoint: Windows.Win32.MediaFoundation.MF_FLOAT2,
};
// --------------------------------------------------------
// Type: MFCameraIntrinsic_DistortionModel
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFCameraIntrinsic_DistortionModel = extern struct {
    Radial_k1: {"kind":"Single"},
    Radial_k2: {"kind":"Single"},
    Radial_k3: {"kind":"Single"},
    Tangential_p1: {"kind":"Single"},
    Tangential_p2: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: MFPinholeCameraIntrinsic_IntrinsicModel
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFPinholeCameraIntrinsic_IntrinsicModel = extern struct {
    Width: {"kind":"UInt32"},
    Height: {"kind":"UInt32"},
    CameraModel: Windows.Win32.MediaFoundation.MFCameraIntrinsic_PinholeCameraModel,
    DistortionModel: Windows.Win32.MediaFoundation.MFCameraIntrinsic_DistortionModel,
};
// --------------------------------------------------------
// Type: MFPinholeCameraIntrinsics
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFPinholeCameraIntrinsics = extern struct {
    IntrinsicModelCount: {"kind":"UInt32"},
    IntrinsicModels: {"kind":"Array","child": Windows.Win32.MediaFoundation.MFPinholeCameraIntrinsic_IntrinsicModel},
};
// --------------------------------------------------------
// Type: MFWaveFormatExConvertFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFWaveFormatExConvertFlags = *opaque{
};
// --------------------------------------------------------
// Type: EAllocationType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EAllocationType = *opaque{
};
// --------------------------------------------------------
// Type: MF_MEDIA_ENGINE_ERR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_MEDIA_ENGINE_ERR = *opaque{
};
// --------------------------------------------------------
// Type: IMFMediaError
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaError = *opaque{
    // TODO: Method 'GetErrorCode'
    // TODO: Method 'GetExtendedErrorCode'
    // TODO: Method 'SetErrorCode'
    // TODO: Method 'SetExtendedErrorCode'
};
// --------------------------------------------------------
// Type: IMFMediaTimeRange
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaTimeRange = *opaque{
    // TODO: Method 'GetLength'
    // TODO: Method 'GetStart'
    // TODO: Method 'GetEnd'
    // TODO: Method 'ContainsTime'
    // TODO: Method 'AddRange'
    // TODO: Method 'Clear'
};
// --------------------------------------------------------
// Type: MF_MEDIA_ENGINE_EVENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_MEDIA_ENGINE_EVENT = *opaque{
};
// --------------------------------------------------------
// Type: IMFMediaEngineNotify
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaEngineNotify = *opaque{
    // TODO: Method 'EventNotify'
};
// --------------------------------------------------------
// Type: IMFMediaEngineSrcElements
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaEngineSrcElements = *opaque{
    // TODO: Method 'GetLength'
    // TODO: Method 'GetURL'
    // TODO: Method 'GetType'
    // TODO: Method 'GetMedia'
    // TODO: Method 'AddElement'
    // TODO: Method 'RemoveAllElements'
};
// --------------------------------------------------------
// Type: MF_MEDIA_ENGINE_NETWORK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_MEDIA_ENGINE_NETWORK = *opaque{
};
// --------------------------------------------------------
// Type: MF_MEDIA_ENGINE_READY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_MEDIA_ENGINE_READY = *opaque{
};
// --------------------------------------------------------
// Type: MF_MEDIA_ENGINE_CANPLAY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_MEDIA_ENGINE_CANPLAY = *opaque{
};
// --------------------------------------------------------
// Type: MF_MEDIA_ENGINE_PRELOAD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_MEDIA_ENGINE_PRELOAD = *opaque{
};
// --------------------------------------------------------
// Type: IMFMediaEngine
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaEngine = *opaque{
    // TODO: Method 'GetError'
    // TODO: Method 'SetErrorCode'
    // TODO: Method 'SetSourceElements'
    // TODO: Method 'SetSource'
    // TODO: Method 'GetCurrentSource'
    // TODO: Method 'GetNetworkState'
    // TODO: Method 'GetPreload'
    // TODO: Method 'SetPreload'
    // TODO: Method 'GetBuffered'
    // TODO: Method 'Load'
    // TODO: Method 'CanPlayType'
    // TODO: Method 'GetReadyState'
    // TODO: Method 'IsSeeking'
    // TODO: Method 'GetCurrentTime'
    // TODO: Method 'SetCurrentTime'
    // TODO: Method 'GetStartTime'
    // TODO: Method 'GetDuration'
    // TODO: Method 'IsPaused'
    // TODO: Method 'GetDefaultPlaybackRate'
    // TODO: Method 'SetDefaultPlaybackRate'
    // TODO: Method 'GetPlaybackRate'
    // TODO: Method 'SetPlaybackRate'
    // TODO: Method 'GetPlayed'
    // TODO: Method 'GetSeekable'
    // TODO: Method 'IsEnded'
    // TODO: Method 'GetAutoPlay'
    // TODO: Method 'SetAutoPlay'
    // TODO: Method 'GetLoop'
    // TODO: Method 'SetLoop'
    // TODO: Method 'Play'
    // TODO: Method 'Pause'
    // TODO: Method 'GetMuted'
    // TODO: Method 'SetMuted'
    // TODO: Method 'GetVolume'
    // TODO: Method 'SetVolume'
    // TODO: Method 'HasVideo'
    // TODO: Method 'HasAudio'
    // TODO: Method 'GetNativeVideoSize'
    // TODO: Method 'GetVideoAspectRatio'
    // TODO: Method 'Shutdown'
    // TODO: Method 'TransferVideoFrame'
    // TODO: Method 'OnVideoStreamTick'
};
// --------------------------------------------------------
// Type: MF_MEDIA_ENGINE_S3D_PACKING_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_MEDIA_ENGINE_S3D_PACKING_MODE = *opaque{
};
// --------------------------------------------------------
// Type: MF_MEDIA_ENGINE_STATISTIC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_MEDIA_ENGINE_STATISTIC = *opaque{
};
// --------------------------------------------------------
// Type: MF_MEDIA_ENGINE_SEEK_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_MEDIA_ENGINE_SEEK_MODE = *opaque{
};
// --------------------------------------------------------
// Type: IMFMediaEngineEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaEngineEx = *opaque{
    // TODO: Method 'SetSourceFromByteStream'
    // TODO: Method 'GetStatistics'
    // TODO: Method 'UpdateVideoStream'
    // TODO: Method 'GetBalance'
    // TODO: Method 'SetBalance'
    // TODO: Method 'IsPlaybackRateSupported'
    // TODO: Method 'FrameStep'
    // TODO: Method 'GetResourceCharacteristics'
    // TODO: Method 'GetPresentationAttribute'
    // TODO: Method 'GetNumberOfStreams'
    // TODO: Method 'GetStreamAttribute'
    // TODO: Method 'GetStreamSelection'
    // TODO: Method 'SetStreamSelection'
    // TODO: Method 'ApplyStreamSelections'
    // TODO: Method 'IsProtected'
    // TODO: Method 'InsertVideoEffect'
    // TODO: Method 'InsertAudioEffect'
    // TODO: Method 'RemoveAllEffects'
    // TODO: Method 'SetTimelineMarkerTimer'
    // TODO: Method 'GetTimelineMarkerTimer'
    // TODO: Method 'CancelTimelineMarkerTimer'
    // TODO: Method 'IsStereo3D'
    // TODO: Method 'GetStereo3DFramePackingMode'
    // TODO: Method 'SetStereo3DFramePackingMode'
    // TODO: Method 'GetStereo3DRenderMode'
    // TODO: Method 'SetStereo3DRenderMode'
    // TODO: Method 'EnableWindowlessSwapchainMode'
    // TODO: Method 'GetVideoSwapchainHandle'
    // TODO: Method 'EnableHorizontalMirrorMode'
    // TODO: Method 'GetAudioStreamCategory'
    // TODO: Method 'SetAudioStreamCategory'
    // TODO: Method 'GetAudioEndpointRole'
    // TODO: Method 'SetAudioEndpointRole'
    // TODO: Method 'GetRealTimeMode'
    // TODO: Method 'SetRealTimeMode'
    // TODO: Method 'SetCurrentTimeEx'
    // TODO: Method 'EnableTimeUpdateTimer'
};
// --------------------------------------------------------
// Type: IMFMediaEngineAudioEndpointId
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaEngineAudioEndpointId = *opaque{
    // TODO: Method 'SetAudioEndpointId'
    // TODO: Method 'GetAudioEndpointId'
};
// --------------------------------------------------------
// Type: MF_MEDIA_ENGINE_EXTENSION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_MEDIA_ENGINE_EXTENSION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IMFMediaEngineExtension
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaEngineExtension = *opaque{
    // TODO: Method 'CanPlayType'
    // TODO: Method 'BeginCreateObject'
    // TODO: Method 'CancelObjectCreation'
    // TODO: Method 'EndCreateObject'
};
// --------------------------------------------------------
// Type: MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: IMFMediaEngineProtectedContent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaEngineProtectedContent = *opaque{
    // TODO: Method 'ShareResources'
    // TODO: Method 'GetRequiredProtections'
    // TODO: Method 'SetOPMWindow'
    // TODO: Method 'TransferVideoFrame'
    // TODO: Method 'SetContentProtectionManager'
    // TODO: Method 'SetApplicationCertificate'
};
// --------------------------------------------------------
// Type: IAudioSourceProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAudioSourceProvider = *opaque{
    // TODO: Method 'ProvideInput'
};
// --------------------------------------------------------
// Type: IMFMediaEngineWebSupport
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaEngineWebSupport = *opaque{
    // TODO: Method 'ShouldDelayTheLoadEvent'
    // TODO: Method 'ConnectWebAudio'
    // TODO: Method 'DisconnectWebAudio'
};
// --------------------------------------------------------
// Type: MF_MSE_VP9_SUPPORT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_MSE_VP9_SUPPORT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: MF_MSE_OPUS_SUPPORT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_MSE_OPUS_SUPPORT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IMFMediaSourceExtensionNotify
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaSourceExtensionNotify = *opaque{
    // TODO: Method 'OnSourceOpen'
    // TODO: Method 'OnSourceEnded'
    // TODO: Method 'OnSourceClose'
};
// --------------------------------------------------------
// Type: IMFBufferListNotify
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFBufferListNotify = *opaque{
    // TODO: Method 'OnAddSourceBuffer'
    // TODO: Method 'OnRemoveSourceBuffer'
};
// --------------------------------------------------------
// Type: IMFSourceBufferNotify
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSourceBufferNotify = *opaque{
    // TODO: Method 'OnUpdateStart'
    // TODO: Method 'OnAbort'
    // TODO: Method 'OnError'
    // TODO: Method 'OnUpdate'
    // TODO: Method 'OnUpdateEnd'
};
// --------------------------------------------------------
// Type: IMFSourceBuffer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSourceBuffer = *opaque{
    // TODO: Method 'GetUpdating'
    // TODO: Method 'GetBuffered'
    // TODO: Method 'GetTimeStampOffset'
    // TODO: Method 'SetTimeStampOffset'
    // TODO: Method 'GetAppendWindowStart'
    // TODO: Method 'SetAppendWindowStart'
    // TODO: Method 'GetAppendWindowEnd'
    // TODO: Method 'SetAppendWindowEnd'
    // TODO: Method 'Append'
    // TODO: Method 'AppendByteStream'
    // TODO: Method 'Abort'
    // TODO: Method 'Remove'
};
// --------------------------------------------------------
// Type: MF_MSE_APPEND_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_MSE_APPEND_MODE = *opaque{
};
// --------------------------------------------------------
// Type: IMFSourceBufferAppendMode
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSourceBufferAppendMode = *opaque{
    // TODO: Method 'GetAppendMode'
    // TODO: Method 'SetAppendMode'
};
// --------------------------------------------------------
// Type: IMFSourceBufferList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSourceBufferList = *opaque{
    // TODO: Method 'GetLength'
    // TODO: Method 'GetSourceBuffer'
};
// --------------------------------------------------------
// Type: MF_MSE_READY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_MSE_READY = *opaque{
};
// --------------------------------------------------------
// Type: MF_MSE_ERROR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_MSE_ERROR = *opaque{
};
// --------------------------------------------------------
// Type: IMFMediaSourceExtension
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaSourceExtension = *opaque{
    // TODO: Method 'GetSourceBuffers'
    // TODO: Method 'GetActiveSourceBuffers'
    // TODO: Method 'GetReadyState'
    // TODO: Method 'GetDuration'
    // TODO: Method 'SetDuration'
    // TODO: Method 'AddSourceBuffer'
    // TODO: Method 'RemoveSourceBuffer'
    // TODO: Method 'SetEndOfStream'
    // TODO: Method 'IsTypeSupported'
    // TODO: Method 'GetSourceBuffer'
};
// --------------------------------------------------------
// Type: IMFMediaSourceExtensionLiveSeekableRange
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaSourceExtensionLiveSeekableRange = *opaque{
    // TODO: Method 'SetLiveSeekableRange'
    // TODO: Method 'ClearLiveSeekableRange'
};
// --------------------------------------------------------
// Type: IMFMediaEngineEME
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaEngineEME = *opaque{
    // TODO: Method 'get_Keys'
    // TODO: Method 'SetMediaKeys'
};
// --------------------------------------------------------
// Type: IMFMediaEngineSrcElementsEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaEngineSrcElementsEx = *opaque{
    // TODO: Method 'AddElementEx'
    // TODO: Method 'GetKeySystem'
};
// --------------------------------------------------------
// Type: IMFMediaEngineNeedKeyNotify
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaEngineNeedKeyNotify = *opaque{
    // TODO: Method 'NeedKey'
};
// --------------------------------------------------------
// Type: IMFMediaKeys
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaKeys = *opaque{
    // TODO: Method 'CreateSession'
    // TODO: Method 'get_KeySystem'
    // TODO: Method 'Shutdown'
    // TODO: Method 'GetSuspendNotify'
};
// --------------------------------------------------------
// Type: MF_MEDIA_ENGINE_KEYERR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_MEDIA_ENGINE_KEYERR = *opaque{
};
// --------------------------------------------------------
// Type: IMFMediaKeySession
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaKeySession = *opaque{
    // TODO: Method 'GetError'
    // TODO: Method 'get_KeySystem'
    // TODO: Method 'get_SessionId'
    // TODO: Method 'Update'
    // TODO: Method 'Close'
};
// --------------------------------------------------------
// Type: IMFMediaKeySessionNotify
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaKeySessionNotify = *opaque{
    // TODO: Method 'KeyMessage'
    // TODO: Method 'KeyAdded'
    // TODO: Method 'KeyError'
};
// --------------------------------------------------------
// Type: IMFCdmSuspendNotify
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFCdmSuspendNotify = *opaque{
    // TODO: Method 'Begin'
    // TODO: Method 'End'
};
// --------------------------------------------------------
// Type: MF_HDCP_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_HDCP_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: IMFHDCPStatus
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFHDCPStatus = *opaque{
    // TODO: Method 'Query'
    // TODO: Method 'Set'
};
// --------------------------------------------------------
// Type: MF_MEDIA_ENGINE_OPM_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_MEDIA_ENGINE_OPM_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: IMFMediaEngineOPMInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaEngineOPMInfo = *opaque{
    // TODO: Method 'GetOPMInfo'
};
// --------------------------------------------------------
// Type: MF_MEDIA_ENGINE_CREATEFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_MEDIA_ENGINE_CREATEFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: MF_MEDIA_ENGINE_PROTECTION_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_MEDIA_ENGINE_PROTECTION_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: IMFMediaEngineClassFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaEngineClassFactory = *opaque{
    // TODO: Method 'CreateInstance'
    // TODO: Method 'CreateTimeRange'
    // TODO: Method 'CreateError'
};
// --------------------------------------------------------
// Type: IMFMediaEngineClassFactoryEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaEngineClassFactoryEx = *opaque{
    // TODO: Method 'CreateMediaSourceExtension'
    // TODO: Method 'CreateMediaKeys'
    // TODO: Method 'IsTypeSupported'
};
// --------------------------------------------------------
// Type: IMFMediaEngineClassFactory2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaEngineClassFactory2 = *opaque{
    // TODO: Method 'CreateMediaKeys2'
};
// --------------------------------------------------------
// Type: IMFExtendedDRMTypeSupport
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFExtendedDRMTypeSupport = *opaque{
    // TODO: Method 'IsTypeSupportedEx'
};
// --------------------------------------------------------
// Type: IMFMediaEngineSupportsSourceTransfer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaEngineSupportsSourceTransfer = *opaque{
    // TODO: Method 'ShouldTransferSource'
    // TODO: Method 'DetachMediaSource'
    // TODO: Method 'AttachMediaSource'
};
// --------------------------------------------------------
// Type: IMFMediaEngineTransferSource
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaEngineTransferSource = *opaque{
    // TODO: Method 'TransferSourceToMediaEngine'
};
// --------------------------------------------------------
// Type: MF_TIMED_TEXT_TRACK_KIND
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_TIMED_TEXT_TRACK_KIND = *opaque{
};
// --------------------------------------------------------
// Type: MF_TIMED_TEXT_UNIT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_TIMED_TEXT_UNIT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: MF_TIMED_TEXT_FONT_STYLE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_TIMED_TEXT_FONT_STYLE = *opaque{
};
// --------------------------------------------------------
// Type: MF_TIMED_TEXT_ALIGNMENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_TIMED_TEXT_ALIGNMENT = *opaque{
};
// --------------------------------------------------------
// Type: MF_TIMED_TEXT_DISPLAY_ALIGNMENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_TIMED_TEXT_DISPLAY_ALIGNMENT = *opaque{
};
// --------------------------------------------------------
// Type: MF_TIMED_TEXT_DECORATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_TIMED_TEXT_DECORATION = *opaque{
};
// --------------------------------------------------------
// Type: MF_TIMED_TEXT_WRITING_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_TIMED_TEXT_WRITING_MODE = *opaque{
};
// --------------------------------------------------------
// Type: MF_TIMED_TEXT_SCROLL_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_TIMED_TEXT_SCROLL_MODE = *opaque{
};
// --------------------------------------------------------
// Type: MF_TIMED_TEXT_ERROR_CODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_TIMED_TEXT_ERROR_CODE = *opaque{
};
// --------------------------------------------------------
// Type: MF_TIMED_TEXT_CUE_EVENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_TIMED_TEXT_CUE_EVENT = *opaque{
};
// --------------------------------------------------------
// Type: MF_TIMED_TEXT_TRACK_READY_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_TIMED_TEXT_TRACK_READY_STATE = *opaque{
};
// --------------------------------------------------------
// Type: IMFTimedText
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFTimedText = *opaque{
    // TODO: Method 'RegisterNotifications'
    // TODO: Method 'SelectTrack'
    // TODO: Method 'AddDataSource'
    // TODO: Method 'AddDataSourceFromUrl'
    // TODO: Method 'AddTrack'
    // TODO: Method 'RemoveTrack'
    // TODO: Method 'GetCueTimeOffset'
    // TODO: Method 'SetCueTimeOffset'
    // TODO: Method 'GetTracks'
    // TODO: Method 'GetActiveTracks'
    // TODO: Method 'GetTextTracks'
    // TODO: Method 'GetMetadataTracks'
    // TODO: Method 'SetInBandEnabled'
    // TODO: Method 'IsInBandEnabled'
};
// --------------------------------------------------------
// Type: IMFTimedTextNotify
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFTimedTextNotify = *opaque{
    // TODO: Method 'TrackAdded'
    // TODO: Method 'TrackRemoved'
    // TODO: Method 'TrackSelected'
    // TODO: Method 'TrackReadyStateChanged'
    // TODO: Method 'Error'
    // TODO: Method 'Cue'
    // TODO: Method 'Reset'
};
// --------------------------------------------------------
// Type: IMFTimedTextTrack
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFTimedTextTrack = *opaque{
    // TODO: Method 'GetId'
    // TODO: Method 'GetLabel'
    // TODO: Method 'SetLabel'
    // TODO: Method 'GetLanguage'
    // TODO: Method 'GetTrackKind'
    // TODO: Method 'IsInBand'
    // TODO: Method 'GetInBandMetadataTrackDispatchType'
    // TODO: Method 'IsActive'
    // TODO: Method 'GetErrorCode'
    // TODO: Method 'GetExtendedErrorCode'
    // TODO: Method 'GetDataFormat'
    // TODO: Method 'GetReadyState'
    // TODO: Method 'GetCueList'
};
// --------------------------------------------------------
// Type: IMFTimedTextTrackList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFTimedTextTrackList = *opaque{
    // TODO: Method 'GetLength'
    // TODO: Method 'GetTrack'
    // TODO: Method 'GetTrackById'
};
// --------------------------------------------------------
// Type: IMFTimedTextCue
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFTimedTextCue = *opaque{
    // TODO: Method 'GetId'
    // TODO: Method 'GetOriginalId'
    // TODO: Method 'GetCueKind'
    // TODO: Method 'GetStartTime'
    // TODO: Method 'GetDuration'
    // TODO: Method 'GetTrackId'
    // TODO: Method 'GetData'
    // TODO: Method 'GetRegion'
    // TODO: Method 'GetStyle'
    // TODO: Method 'GetLineCount'
    // TODO: Method 'GetLine'
};
// --------------------------------------------------------
// Type: IMFTimedTextFormattedText
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFTimedTextFormattedText = *opaque{
    // TODO: Method 'GetText'
    // TODO: Method 'GetSubformattingCount'
    // TODO: Method 'GetSubformatting'
};
// --------------------------------------------------------
// Type: IMFTimedTextStyle
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFTimedTextStyle = *opaque{
    // TODO: Method 'GetName'
    // TODO: Method 'IsExternal'
    // TODO: Method 'GetFontFamily'
    // TODO: Method 'GetFontSize'
    // TODO: Method 'GetColor'
    // TODO: Method 'GetBackgroundColor'
    // TODO: Method 'GetShowBackgroundAlways'
    // TODO: Method 'GetFontStyle'
    // TODO: Method 'GetBold'
    // TODO: Method 'GetRightToLeft'
    // TODO: Method 'GetTextAlignment'
    // TODO: Method 'GetTextDecoration'
    // TODO: Method 'GetTextOutline'
};
// --------------------------------------------------------
// Type: IMFTimedTextRegion
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFTimedTextRegion = *opaque{
    // TODO: Method 'GetName'
    // TODO: Method 'GetPosition'
    // TODO: Method 'GetExtent'
    // TODO: Method 'GetBackgroundColor'
    // TODO: Method 'GetWritingMode'
    // TODO: Method 'GetDisplayAlignment'
    // TODO: Method 'GetLineHeight'
    // TODO: Method 'GetClipOverflow'
    // TODO: Method 'GetPadding'
    // TODO: Method 'GetWrap'
    // TODO: Method 'GetZIndex'
    // TODO: Method 'GetScrollMode'
};
// --------------------------------------------------------
// Type: IMFTimedTextBinary
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFTimedTextBinary = *opaque{
    // TODO: Method 'GetData'
};
// --------------------------------------------------------
// Type: IMFTimedTextCueList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFTimedTextCueList = *opaque{
    // TODO: Method 'GetLength'
    // TODO: Method 'GetCueByIndex'
    // TODO: Method 'GetCueById'
    // TODO: Method 'GetCueByOriginalId'
    // TODO: Method 'AddTextCue'
    // TODO: Method 'AddDataCue'
    // TODO: Method 'RemoveCue'
};
// --------------------------------------------------------
// Type: MF_MEDIA_ENGINE_STREAMTYPE_FAILED
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_MEDIA_ENGINE_STREAMTYPE_FAILED = *opaque{
};
// --------------------------------------------------------
// Type: IMFMediaEngineEMENotify
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaEngineEMENotify = *opaque{
    // TODO: Method 'Encrypted'
    // TODO: Method 'WaitingForKey'
};
// --------------------------------------------------------
// Type: MF_MEDIAKEYS_REQUIREMENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_MEDIAKEYS_REQUIREMENT = *opaque{
};
// --------------------------------------------------------
// Type: IMFMediaKeySessionNotify2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaKeySessionNotify2 = *opaque{
    // TODO: Method 'KeyMessage2'
    // TODO: Method 'KeyStatusChange'
};
// --------------------------------------------------------
// Type: IMFMediaKeySystemAccess
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaKeySystemAccess = *opaque{
    // TODO: Method 'CreateMediaKeys'
    // TODO: Method 'get_SupportedConfiguration'
    // TODO: Method 'get_KeySystem'
};
// --------------------------------------------------------
// Type: IMFMediaEngineClassFactory3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaEngineClassFactory3 = *opaque{
    // TODO: Method 'CreateMediaKeySystemAccess'
};
// --------------------------------------------------------
// Type: IMFMediaKeys2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaKeys2 = *opaque{
    // TODO: Method 'CreateSession2'
    // TODO: Method 'SetServerCertificate'
    // TODO: Method 'GetDOMException'
};
// --------------------------------------------------------
// Type: IMFMediaKeySession2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaKeySession2 = *opaque{
    // TODO: Method 'get_KeyStatuses'
    // TODO: Method 'Load'
    // TODO: Method 'GenerateRequest'
    // TODO: Method 'get_Expiration'
    // TODO: Method 'Remove'
    // TODO: Method 'Shutdown'
};
// --------------------------------------------------------
// Type: IMFMediaEngineClassFactory4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaEngineClassFactory4 = *opaque{
    // TODO: Method 'CreateContentDecryptionModuleFactory'
};
// --------------------------------------------------------
// Type: IMFDLNASinkInit
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFDLNASinkInit = *opaque{
    // TODO: Method 'Initialize'
};
// --------------------------------------------------------
// Type: MFMPEG2DLNASINKSTATS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFMPEG2DLNASINKSTATS = extern struct {
    cBytesWritten: {"kind":"UInt64"},
    fPAL: Windows.Win32.SystemServices.BOOL,
    fccVideo: {"kind":"UInt32"},
    dwVideoWidth: {"kind":"UInt32"},
    dwVideoHeight: {"kind":"UInt32"},
    cVideoFramesReceived: {"kind":"UInt64"},
    cVideoFramesEncoded: {"kind":"UInt64"},
    cVideoFramesSkipped: {"kind":"UInt64"},
    cBlackVideoFramesEncoded: {"kind":"UInt64"},
    cVideoFramesDuplicated: {"kind":"UInt64"},
    cAudioSamplesPerSec: {"kind":"UInt32"},
    cAudioChannels: {"kind":"UInt32"},
    cAudioBytesReceived: {"kind":"UInt64"},
    cAudioFramesEncoded: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: IMFReadWriteClassFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFReadWriteClassFactory = *opaque{
    // TODO: Method 'CreateInstanceFromURL'
    // TODO: Method 'CreateInstanceFromObject'
};
// --------------------------------------------------------
// Type: MF_SOURCE_READER_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_SOURCE_READER_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: MF_SOURCE_READER_CONTROL_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_SOURCE_READER_CONTROL_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_mfreadwrite_0000_0001_0001
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_mfreadwrite_0000_0001_0001 = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_mfreadwrite_0000_0001_0002
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_mfreadwrite_0000_0001_0002 = *opaque{
};
// --------------------------------------------------------
// Type: IMFSourceReader
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSourceReader = *opaque{
    // TODO: Method 'GetStreamSelection'
    // TODO: Method 'SetStreamSelection'
    // TODO: Method 'GetNativeMediaType'
    // TODO: Method 'GetCurrentMediaType'
    // TODO: Method 'SetCurrentMediaType'
    // TODO: Method 'SetCurrentPosition'
    // TODO: Method 'ReadSample'
    // TODO: Method 'Flush'
    // TODO: Method 'GetServiceForStream'
    // TODO: Method 'GetPresentationAttribute'
};
// --------------------------------------------------------
// Type: IMFSourceReaderEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSourceReaderEx = *opaque{
    // TODO: Method 'SetNativeMediaType'
    // TODO: Method 'AddTransformForStream'
    // TODO: Method 'RemoveAllTransformsForStream'
    // TODO: Method 'GetTransformForStream'
};
// --------------------------------------------------------
// Type: IMFSourceReaderCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSourceReaderCallback = *opaque{
    // TODO: Method 'OnReadSample'
    // TODO: Method 'OnFlush'
    // TODO: Method 'OnEvent'
};
// --------------------------------------------------------
// Type: IMFSourceReaderCallback2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSourceReaderCallback2 = *opaque{
    // TODO: Method 'OnTransformChange'
    // TODO: Method 'OnStreamError'
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_mfreadwrite_0000_0005_0001
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_mfreadwrite_0000_0005_0001 = *opaque{
};
// --------------------------------------------------------
// Type: MF_SINK_WRITER_STATISTICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MF_SINK_WRITER_STATISTICS = extern struct {
    cb: {"kind":"UInt32"},
    llLastTimestampReceived: {"kind":"Int64"},
    llLastTimestampEncoded: {"kind":"Int64"},
    llLastTimestampProcessed: {"kind":"Int64"},
    llLastStreamTickReceived: {"kind":"Int64"},
    llLastSinkSampleRequest: {"kind":"Int64"},
    qwNumSamplesReceived: {"kind":"UInt64"},
    qwNumSamplesEncoded: {"kind":"UInt64"},
    qwNumSamplesProcessed: {"kind":"UInt64"},
    qwNumStreamTicksReceived: {"kind":"UInt64"},
    dwByteCountQueued: {"kind":"UInt32"},
    qwByteCountProcessed: {"kind":"UInt64"},
    dwNumOutstandingSinkSampleRequests: {"kind":"UInt32"},
    dwAverageSampleRateReceived: {"kind":"UInt32"},
    dwAverageSampleRateEncoded: {"kind":"UInt32"},
    dwAverageSampleRateProcessed: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IMFSinkWriter
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSinkWriter = *opaque{
    // TODO: Method 'AddStream'
    // TODO: Method 'SetInputMediaType'
    // TODO: Method 'BeginWriting'
    // TODO: Method 'WriteSample'
    // TODO: Method 'SendStreamTick'
    // TODO: Method 'PlaceMarker'
    // TODO: Method 'NotifyEndOfSegment'
    // TODO: Method 'Flush'
    // TODO: Method 'Finalize'
    // TODO: Method 'GetServiceForStream'
    // TODO: Method 'GetStatistics'
};
// --------------------------------------------------------
// Type: IMFSinkWriterEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSinkWriterEx = *opaque{
    // TODO: Method 'GetTransformForStream'
};
// --------------------------------------------------------
// Type: IMFSinkWriterEncoderConfig
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSinkWriterEncoderConfig = *opaque{
    // TODO: Method 'SetTargetMediaType'
    // TODO: Method 'PlaceEncodingParameters'
};
// --------------------------------------------------------
// Type: IMFSinkWriterCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSinkWriterCallback = *opaque{
    // TODO: Method 'OnFinalize'
    // TODO: Method 'OnMarker'
};
// --------------------------------------------------------
// Type: IMFSinkWriterCallback2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSinkWriterCallback2 = *opaque{
    // TODO: Method 'OnTransformChange'
    // TODO: Method 'OnStreamError'
};
// --------------------------------------------------------
// Type: IMFVideoPositionMapper
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFVideoPositionMapper = *opaque{
    // TODO: Method 'MapOutputCoordinateToInputStream'
};
// --------------------------------------------------------
// Type: IMFVideoDeviceID
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFVideoDeviceID = *opaque{
    // TODO: Method 'GetDeviceID'
};
// --------------------------------------------------------
// Type: MFVideoAspectRatioMode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFVideoAspectRatioMode = *opaque{
};
// --------------------------------------------------------
// Type: MFVideoRenderPrefs
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFVideoRenderPrefs = *opaque{
};
// --------------------------------------------------------
// Type: IMFVideoDisplayControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFVideoDisplayControl = *opaque{
    // TODO: Method 'GetNativeVideoSize'
    // TODO: Method 'GetIdealVideoSize'
    // TODO: Method 'SetVideoPosition'
    // TODO: Method 'GetVideoPosition'
    // TODO: Method 'SetAspectRatioMode'
    // TODO: Method 'GetAspectRatioMode'
    // TODO: Method 'SetVideoWindow'
    // TODO: Method 'GetVideoWindow'
    // TODO: Method 'RepaintVideo'
    // TODO: Method 'GetCurrentImage'
    // TODO: Method 'SetBorderColor'
    // TODO: Method 'GetBorderColor'
    // TODO: Method 'SetRenderingPrefs'
    // TODO: Method 'GetRenderingPrefs'
    // TODO: Method 'SetFullscreen'
    // TODO: Method 'GetFullscreen'
};
// --------------------------------------------------------
// Type: MFVP_MESSAGE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFVP_MESSAGE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IMFVideoPresenter
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFVideoPresenter = *opaque{
    // TODO: Method 'ProcessMessage'
    // TODO: Method 'GetCurrentMediaType'
};
// --------------------------------------------------------
// Type: IMFDesiredSample
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFDesiredSample = *opaque{
    // TODO: Method 'GetDesiredSampleTimeAndDuration'
    // TODO: Method 'SetDesiredSampleTimeAndDuration'
    // TODO: Method 'Clear'
};
// --------------------------------------------------------
// Type: IMFVideoMixerControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFVideoMixerControl = *opaque{
    // TODO: Method 'SetStreamZOrder'
    // TODO: Method 'GetStreamZOrder'
    // TODO: Method 'SetStreamOutputRect'
    // TODO: Method 'GetStreamOutputRect'
};
// --------------------------------------------------------
// Type: MFVideoMixPrefs
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFVideoMixPrefs = *opaque{
};
// --------------------------------------------------------
// Type: IMFVideoMixerControl2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFVideoMixerControl2 = *opaque{
    // TODO: Method 'SetMixingPrefs'
    // TODO: Method 'GetMixingPrefs'
};
// --------------------------------------------------------
// Type: IMFVideoRenderer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFVideoRenderer = *opaque{
    // TODO: Method 'InitializeRenderer'
};
// --------------------------------------------------------
// Type: IEVRFilterConfig
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEVRFilterConfig = *opaque{
    // TODO: Method 'SetNumberOfStreams'
    // TODO: Method 'GetNumberOfStreams'
};
// --------------------------------------------------------
// Type: EVRFilterConfigPrefs
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EVRFilterConfigPrefs = *opaque{
};
// --------------------------------------------------------
// Type: IEVRFilterConfigEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEVRFilterConfigEx = *opaque{
    // TODO: Method 'SetConfigPrefs'
    // TODO: Method 'GetConfigPrefs'
};
// --------------------------------------------------------
// Type: MF_SERVICE_LOOKUP_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_SERVICE_LOOKUP_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IMFTopologyServiceLookup
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFTopologyServiceLookup = *opaque{
    // TODO: Method 'LookupService'
};
// --------------------------------------------------------
// Type: IMFTopologyServiceLookupClient
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFTopologyServiceLookupClient = *opaque{
    // TODO: Method 'InitServicePointers'
    // TODO: Method 'ReleaseServicePointers'
};
// --------------------------------------------------------
// Type: IEVRTrustedVideoPlugin
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEVRTrustedVideoPlugin = *opaque{
    // TODO: Method 'IsInTrustedVideoMode'
    // TODO: Method 'CanConstrict'
    // TODO: Method 'SetConstriction'
    // TODO: Method 'DisableImageExport'
};
// --------------------------------------------------------
// Type: MFP_CREATION_OPTIONS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFP_CREATION_OPTIONS = *opaque{
};
// --------------------------------------------------------
// Type: MFP_MEDIAPLAYER_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFP_MEDIAPLAYER_STATE = *opaque{
};
// --------------------------------------------------------
// Type: _MFP_MEDIAITEM_CHARACTERISTICS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _MFP_MEDIAITEM_CHARACTERISTICS = *opaque{
};
// --------------------------------------------------------
// Type: _MFP_CREDENTIAL_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _MFP_CREDENTIAL_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: IMFPMediaPlayer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFPMediaPlayer = *opaque{
    // TODO: Method 'Play'
    // TODO: Method 'Pause'
    // TODO: Method 'Stop'
    // TODO: Method 'FrameStep'
    // TODO: Method 'SetPosition'
    // TODO: Method 'GetPosition'
    // TODO: Method 'GetDuration'
    // TODO: Method 'SetRate'
    // TODO: Method 'GetRate'
    // TODO: Method 'GetSupportedRates'
    // TODO: Method 'GetState'
    // TODO: Method 'CreateMediaItemFromURL'
    // TODO: Method 'CreateMediaItemFromObject'
    // TODO: Method 'SetMediaItem'
    // TODO: Method 'ClearMediaItem'
    // TODO: Method 'GetMediaItem'
    // TODO: Method 'GetVolume'
    // TODO: Method 'SetVolume'
    // TODO: Method 'GetBalance'
    // TODO: Method 'SetBalance'
    // TODO: Method 'GetMute'
    // TODO: Method 'SetMute'
    // TODO: Method 'GetNativeVideoSize'
    // TODO: Method 'GetIdealVideoSize'
    // TODO: Method 'SetVideoSourceRect'
    // TODO: Method 'GetVideoSourceRect'
    // TODO: Method 'SetAspectRatioMode'
    // TODO: Method 'GetAspectRatioMode'
    // TODO: Method 'GetVideoWindow'
    // TODO: Method 'UpdateVideo'
    // TODO: Method 'SetBorderColor'
    // TODO: Method 'GetBorderColor'
    // TODO: Method 'InsertEffect'
    // TODO: Method 'RemoveEffect'
    // TODO: Method 'RemoveAllEffects'
    // TODO: Method 'Shutdown'
};
// --------------------------------------------------------
// Type: IMFPMediaItem
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFPMediaItem = *opaque{
    // TODO: Method 'GetMediaPlayer'
    // TODO: Method 'GetURL'
    // TODO: Method 'GetObjectA'
    // TODO: Method 'GetUserData'
    // TODO: Method 'SetUserData'
    // TODO: Method 'GetStartStopPosition'
    // TODO: Method 'SetStartStopPosition'
    // TODO: Method 'HasVideo'
    // TODO: Method 'HasAudio'
    // TODO: Method 'IsProtected'
    // TODO: Method 'GetDuration'
    // TODO: Method 'GetNumberOfStreams'
    // TODO: Method 'GetStreamSelection'
    // TODO: Method 'SetStreamSelection'
    // TODO: Method 'GetStreamAttribute'
    // TODO: Method 'GetPresentationAttribute'
    // TODO: Method 'GetCharacteristics'
    // TODO: Method 'SetStreamSink'
    // TODO: Method 'GetMetadata'
};
// --------------------------------------------------------
// Type: MFP_EVENT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFP_EVENT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: MFP_EVENT_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFP_EVENT_HEADER = extern struct {
    eEventType: Windows.Win32.MediaFoundation.MFP_EVENT_TYPE,
    hrEvent: Windows.Win32.Com.HRESULT,
    pMediaPlayer: Windows.Win32.MediaFoundation.IMFPMediaPlayer,
    eState: Windows.Win32.MediaFoundation.MFP_MEDIAPLAYER_STATE,
    pPropertyStore: Windows.Win32.Audio.IPropertyStore,
};
// --------------------------------------------------------
// Type: MFP_PLAY_EVENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFP_PLAY_EVENT = extern struct {
    header: Windows.Win32.MediaFoundation.MFP_EVENT_HEADER,
    pMediaItem: Windows.Win32.MediaFoundation.IMFPMediaItem,
};
// --------------------------------------------------------
// Type: MFP_PAUSE_EVENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFP_PAUSE_EVENT = extern struct {
    header: Windows.Win32.MediaFoundation.MFP_EVENT_HEADER,
    pMediaItem: Windows.Win32.MediaFoundation.IMFPMediaItem,
};
// --------------------------------------------------------
// Type: MFP_STOP_EVENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFP_STOP_EVENT = extern struct {
    header: Windows.Win32.MediaFoundation.MFP_EVENT_HEADER,
    pMediaItem: Windows.Win32.MediaFoundation.IMFPMediaItem,
};
// --------------------------------------------------------
// Type: MFP_POSITION_SET_EVENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFP_POSITION_SET_EVENT = extern struct {
    header: Windows.Win32.MediaFoundation.MFP_EVENT_HEADER,
    pMediaItem: Windows.Win32.MediaFoundation.IMFPMediaItem,
};
// --------------------------------------------------------
// Type: MFP_RATE_SET_EVENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFP_RATE_SET_EVENT = extern struct {
    header: Windows.Win32.MediaFoundation.MFP_EVENT_HEADER,
    pMediaItem: Windows.Win32.MediaFoundation.IMFPMediaItem,
    flRate: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: MFP_MEDIAITEM_CREATED_EVENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFP_MEDIAITEM_CREATED_EVENT = extern struct {
    header: Windows.Win32.MediaFoundation.MFP_EVENT_HEADER,
    pMediaItem: Windows.Win32.MediaFoundation.IMFPMediaItem,
    dwUserData: {"kind":"UIntPtr"},
};
// --------------------------------------------------------
// Type: MFP_MEDIAITEM_SET_EVENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFP_MEDIAITEM_SET_EVENT = extern struct {
    header: Windows.Win32.MediaFoundation.MFP_EVENT_HEADER,
    pMediaItem: Windows.Win32.MediaFoundation.IMFPMediaItem,
};
// --------------------------------------------------------
// Type: MFP_FRAME_STEP_EVENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFP_FRAME_STEP_EVENT = extern struct {
    header: Windows.Win32.MediaFoundation.MFP_EVENT_HEADER,
    pMediaItem: Windows.Win32.MediaFoundation.IMFPMediaItem,
};
// --------------------------------------------------------
// Type: MFP_MEDIAITEM_CLEARED_EVENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFP_MEDIAITEM_CLEARED_EVENT = extern struct {
    header: Windows.Win32.MediaFoundation.MFP_EVENT_HEADER,
    pMediaItem: Windows.Win32.MediaFoundation.IMFPMediaItem,
};
// --------------------------------------------------------
// Type: MFP_MF_EVENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFP_MF_EVENT = extern struct {
    header: Windows.Win32.MediaFoundation.MFP_EVENT_HEADER,
    MFEventType: {"kind":"UInt32"},
    pMFMediaEvent: Windows.Win32.MediaFoundation.IMFMediaEvent,
    pMediaItem: Windows.Win32.MediaFoundation.IMFPMediaItem,
};
// --------------------------------------------------------
// Type: MFP_ERROR_EVENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFP_ERROR_EVENT = extern struct {
    header: Windows.Win32.MediaFoundation.MFP_EVENT_HEADER,
};
// --------------------------------------------------------
// Type: MFP_PLAYBACK_ENDED_EVENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFP_PLAYBACK_ENDED_EVENT = extern struct {
    header: Windows.Win32.MediaFoundation.MFP_EVENT_HEADER,
    pMediaItem: Windows.Win32.MediaFoundation.IMFPMediaItem,
};
// --------------------------------------------------------
// Type: MFP_ACQUIRE_USER_CREDENTIAL_EVENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFP_ACQUIRE_USER_CREDENTIAL_EVENT = extern struct {
    header: Windows.Win32.MediaFoundation.MFP_EVENT_HEADER,
    dwUserData: {"kind":"UIntPtr"},
    fProceedWithAuthentication: Windows.Win32.SystemServices.BOOL,
    hrAuthenticationStatus: Windows.Win32.Com.HRESULT,
    pwszURL: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszSite: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszRealm: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszPackage: {"kind""Ptr","child":{"kind":"UInt16"}},
    nRetries: {"kind":"Int32"},
    flags: {"kind":"UInt32"},
    pCredential: Windows.Win32.MediaFoundation.IMFNetCredential,
};
// --------------------------------------------------------
// Type: IMFPMediaPlayerCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFPMediaPlayerCallback = *opaque{
    // TODO: Method 'OnMediaPlayerEvent'
};
// --------------------------------------------------------
// Type: DEVICE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_INFO = extern struct {
    pFriendlyDeviceName: Windows.Win32.Automation.BSTR,
    pUniqueDeviceName: Windows.Win32.Automation.BSTR,
    pManufacturerName: Windows.Win32.Automation.BSTR,
    pModelName: Windows.Win32.Automation.BSTR,
    pIconURL: Windows.Win32.Automation.BSTR,
};
// --------------------------------------------------------
// Type: MF_SHARING_ENGINE_EVENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_SHARING_ENGINE_EVENT = *opaque{
};
// --------------------------------------------------------
// Type: MF_MEDIA_SHARING_ENGINE_EVENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_MEDIA_SHARING_ENGINE_EVENT = *opaque{
};
// --------------------------------------------------------
// Type: IMFSharingEngineClassFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSharingEngineClassFactory = *opaque{
    // TODO: Method 'CreateInstance'
};
// --------------------------------------------------------
// Type: IMFMediaSharingEngine
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaSharingEngine = *opaque{
    // TODO: Method 'GetDevice'
};
// --------------------------------------------------------
// Type: IMFMediaSharingEngineClassFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFMediaSharingEngineClassFactory = *opaque{
    // TODO: Method 'CreateInstance'
};
// --------------------------------------------------------
// Type: IMFImageSharingEngine
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFImageSharingEngine = *opaque{
    // TODO: Method 'SetSource'
    // TODO: Method 'GetDevice'
    // TODO: Method 'Shutdown'
};
// --------------------------------------------------------
// Type: IMFImageSharingEngineClassFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFImageSharingEngineClassFactory = *opaque{
    // TODO: Method 'CreateInstanceFromUDN'
};
// --------------------------------------------------------
// Type: PLAYTO_SOURCE_CREATEFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLAYTO_SOURCE_CREATEFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: IPlayToControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPlayToControl = *opaque{
    // TODO: Method 'Connect'
    // TODO: Method 'Disconnect'
};
// --------------------------------------------------------
// Type: IPlayToControlWithCapabilities
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPlayToControlWithCapabilities = *opaque{
    // TODO: Method 'GetCapabilities'
};
// --------------------------------------------------------
// Type: IPlayToSourceClassFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPlayToSourceClassFactory = *opaque{
    // TODO: Method 'CreateInstance'
};
// --------------------------------------------------------
// Type: IEVRVideoStreamControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEVRVideoStreamControl = *opaque{
    // TODO: Method 'SetStreamActiveState'
    // TODO: Method 'GetStreamActiveState'
};
// --------------------------------------------------------
// Type: IMFVideoProcessor
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFVideoProcessor = *opaque{
    // TODO: Method 'GetAvailableVideoProcessorModes'
    // TODO: Method 'GetVideoProcessorCaps'
    // TODO: Method 'GetVideoProcessorMode'
    // TODO: Method 'SetVideoProcessorMode'
    // TODO: Method 'GetProcAmpRange'
    // TODO: Method 'GetProcAmpValues'
    // TODO: Method 'SetProcAmpValues'
    // TODO: Method 'GetFilteringRange'
    // TODO: Method 'GetFilteringValue'
    // TODO: Method 'SetFilteringValue'
    // TODO: Method 'GetBackgroundColor'
    // TODO: Method 'SetBackgroundColor'
};
// --------------------------------------------------------
// Type: MFVideoAlphaBitmapParams
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFVideoAlphaBitmapParams = extern struct {
    dwFlags: {"kind":"UInt32"},
    clrSrcKey: {"kind":"UInt32"},
    rcSrc: Windows.Win32.DisplayDevices.RECT,
    nrcDest: Windows.Win32.MediaFoundation.MFVideoNormalizedRect,
    fAlpha: {"kind":"Single"},
    dwFilterMode: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MFVideoAlphaBitmap
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFVideoAlphaBitmap = extern struct {
    GetBitmapFromDC: Windows.Win32.SystemServices.BOOL,
    bitmap: Windows.Win32.MediaFoundation.MFVideoAlphaBitmap+_bitmap_e__Union,
    params: Windows.Win32.MediaFoundation.MFVideoAlphaBitmapParams,
    // --------------------------------------------------------
    // Type: _bitmap_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _bitmap_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: MFVideoAlphaBitmapFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFVideoAlphaBitmapFlags = *opaque{
};
// --------------------------------------------------------
// Type: IMFVideoMixerBitmap
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFVideoMixerBitmap = *opaque{
    // TODO: Method 'SetAlphaBitmap'
    // TODO: Method 'ClearAlphaBitmap'
    // TODO: Method 'UpdateAlphaBitmapParameters'
    // TODO: Method 'GetAlphaBitmapParameters'
};
// --------------------------------------------------------
// Type: IAdvancedMediaCaptureInitializationSettings
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAdvancedMediaCaptureInitializationSettings = *opaque{
    // TODO: Method 'SetDirectxDeviceManager'
};
// --------------------------------------------------------
// Type: IAdvancedMediaCaptureSettings
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAdvancedMediaCaptureSettings = *opaque{
    // TODO: Method 'GetDirectxDeviceManager'
};
// --------------------------------------------------------
// Type: IAdvancedMediaCapture
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAdvancedMediaCapture = *opaque{
    // TODO: Method 'GetAdvancedMediaCaptureSettings'
};
// --------------------------------------------------------
// Type: IMFSpatialAudioObjectBuffer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSpatialAudioObjectBuffer = *opaque{
    // TODO: Method 'SetID'
    // TODO: Method 'GetID'
    // TODO: Method 'SetType'
    // TODO: Method 'GetType'
    // TODO: Method 'GetMetadataItems'
};
// --------------------------------------------------------
// Type: IMFSpatialAudioSample
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFSpatialAudioSample = *opaque{
    // TODO: Method 'GetObjectCount'
    // TODO: Method 'AddSpatialAudioObject'
    // TODO: Method 'GetSpatialAudioObjectByIndex'
};
// --------------------------------------------------------
// Type: IMFContentDecryptionModuleSession
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFContentDecryptionModuleSession = *opaque{
    // TODO: Method 'GetSessionId'
    // TODO: Method 'GetExpiration'
    // TODO: Method 'GetKeyStatuses'
    // TODO: Method 'Load'
    // TODO: Method 'GenerateRequest'
    // TODO: Method 'Update'
    // TODO: Method 'Close'
    // TODO: Method 'Remove'
};
// --------------------------------------------------------
// Type: IMFContentDecryptionModuleSessionCallbacks
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFContentDecryptionModuleSessionCallbacks = *opaque{
    // TODO: Method 'KeyMessage'
    // TODO: Method 'KeyStatusChanged'
};
// --------------------------------------------------------
// Type: IMFContentDecryptionModule
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFContentDecryptionModule = *opaque{
    // TODO: Method 'SetContentEnabler'
    // TODO: Method 'GetSuspendNotify'
    // TODO: Method 'SetPMPHostApp'
    // TODO: Method 'CreateSession'
    // TODO: Method 'SetServerCertificate'
    // TODO: Method 'CreateTrustedInput'
    // TODO: Method 'GetProtectionSystemIds'
};
// --------------------------------------------------------
// Type: IMFContentDecryptionModuleAccess
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFContentDecryptionModuleAccess = *opaque{
    // TODO: Method 'CreateContentDecryptionModule'
    // TODO: Method 'GetConfiguration'
    // TODO: Method 'GetKeySystem'
};
// --------------------------------------------------------
// Type: IMFContentDecryptionModuleFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFContentDecryptionModuleFactory = *opaque{
    // TODO: Method 'IsTypeSupported'
    // TODO: Method 'CreateContentDecryptionModuleAccess'
};
// --------------------------------------------------------
// Type: CodecAPIEventData
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CodecAPIEventData = extern struct {
    guid: Guid,
    dataLength: {"kind":"UInt32"},
    reserved: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: ICodecAPI
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICodecAPI = *opaque{
    // TODO: Method 'IsSupported'
    // TODO: Method 'IsModifiable'
    // TODO: Method 'GetParameterRange'
    // TODO: Method 'GetParameterValues'
    // TODO: Method 'GetDefaultValue'
    // TODO: Method 'GetValue'
    // TODO: Method 'SetValue'
    // TODO: Method 'RegisterForEvent'
    // TODO: Method 'UnregisterForEvent'
    // TODO: Method 'SetAllDefaults'
    // TODO: Method 'SetValueWithNotify'
    // TODO: Method 'SetAllDefaultsWithNotify'
    // TODO: Method 'GetAllSettings'
    // TODO: Method 'SetAllSettings'
    // TODO: Method 'SetAllSettingsWithNotify'
};
// --------------------------------------------------------
// Type: D3DOVERLAYCAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DOVERLAYCAPS = extern struct {
    Caps: {"kind":"UInt32"},
    MaxOverlayDisplayWidth: {"kind":"UInt32"},
    MaxOverlayDisplayHeight: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3DCONTENTPROTECTIONCAPS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const D3DCONTENTPROTECTIONCAPS = *opaque{
};
// --------------------------------------------------------
// Type: IDirect3D9ExOverlayExtension
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirect3D9ExOverlayExtension = *opaque{
    // TODO: Method 'CheckDeviceOverlayType'
};
// --------------------------------------------------------
// Type: IDirect3DDevice9Video
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirect3DDevice9Video = *opaque{
    // TODO: Method 'GetContentProtectionCaps'
    // TODO: Method 'CreateAuthenticatedChannel'
    // TODO: Method 'CreateCryptoSession'
};
// --------------------------------------------------------
// Type: IDirect3DAuthenticatedChannel9
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirect3DAuthenticatedChannel9 = *opaque{
    // TODO: Method 'GetCertificateSize'
    // TODO: Method 'GetCertificate'
    // TODO: Method 'NegotiateKeyExchange'
    // TODO: Method 'Query'
    // TODO: Method 'Configure'
};
// --------------------------------------------------------
// Type: IDirect3DCryptoSession9
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirect3DCryptoSession9 = *opaque{
    // TODO: Method 'GetCertificateSize'
    // TODO: Method 'GetCertificate'
    // TODO: Method 'NegotiateKeyExchange'
    // TODO: Method 'EncryptionBlt'
    // TODO: Method 'DecryptionBlt'
    // TODO: Method 'GetSurfacePitch'
    // TODO: Method 'StartSessionKeyRefresh'
    // TODO: Method 'FinishSessionKeyRefresh'
    // TODO: Method 'GetEncryptionBltKey'
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_DECODER_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_VIDEO_DECODER_DESC = extern struct {
    Guid: Guid,
    SampleWidth: {"kind":"UInt32"},
    SampleHeight: {"kind":"UInt32"},
    OutputFormat: Windows.Win32.Dxgi.DXGI_FORMAT,
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_DECODER_CONFIG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_VIDEO_DECODER_CONFIG = extern struct {
    guidConfigBitstreamEncryption: Guid,
    guidConfigMBcontrolEncryption: Guid,
    guidConfigResidDiffEncryption: Guid,
    ConfigBitstreamRaw: {"kind":"UInt32"},
    ConfigMBcontrolRasterOrder: {"kind":"UInt32"},
    ConfigResidDiffHost: {"kind":"UInt32"},
    ConfigSpatialResid8: {"kind":"UInt32"},
    ConfigResid8Subtraction: {"kind":"UInt32"},
    ConfigSpatialHost8or9Clipping: {"kind":"UInt32"},
    ConfigSpatialResidInterleaved: {"kind":"UInt32"},
    ConfigIntraResidUnsigned: {"kind":"UInt32"},
    ConfigResidDiffAccelerator: {"kind":"UInt32"},
    ConfigHostInverseScan: {"kind":"UInt32"},
    ConfigSpecificIDCT: {"kind":"UInt32"},
    Config4GroupedCoefs: {"kind":"UInt32"},
    ConfigMinRenderTargetBuffCount: {"kind":"UInt16"},
    ConfigDecoderSpecific: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_DECODER_BUFFER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D11_VIDEO_DECODER_BUFFER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D11_AES_CTR_IV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_AES_CTR_IV = extern struct {
    IV: {"kind":"UInt64"},
    Count: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: D3D11_ENCRYPTED_BLOCK_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_ENCRYPTED_BLOCK_INFO = extern struct {
    NumEncryptedBytesAtBeginning: {"kind":"UInt32"},
    NumBytesInSkipPattern: {"kind":"UInt32"},
    NumBytesInEncryptPattern: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_DECODER_BUFFER_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_VIDEO_DECODER_BUFFER_DESC = extern struct {
    BufferType: Windows.Win32.MediaFoundation.D3D11_VIDEO_DECODER_BUFFER_TYPE,
    BufferIndex: {"kind":"UInt32"},
    DataOffset: {"kind":"UInt32"},
    DataSize: {"kind":"UInt32"},
    FirstMBaddress: {"kind":"UInt32"},
    NumMBsInBuffer: {"kind":"UInt32"},
    Width: {"kind":"UInt32"},
    Height: {"kind":"UInt32"},
    Stride: {"kind":"UInt32"},
    ReservedBits: {"kind":"UInt32"},
    pIV: {"kind""Ptr","child":{"kind":"Void"}},
    IVSize: {"kind":"UInt32"},
    PartialEncryption: Windows.Win32.SystemServices.BOOL,
    EncryptedBlockInfo: Windows.Win32.MediaFoundation.D3D11_ENCRYPTED_BLOCK_INFO,
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_DECODER_EXTENSION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_VIDEO_DECODER_EXTENSION = extern struct {
    Function: {"kind":"UInt32"},
    pPrivateInputData: {"kind""Ptr","child":{"kind":"Void"}},
    PrivateInputDataSize: {"kind":"UInt32"},
    pPrivateOutputData: {"kind""Ptr","child":{"kind":"Void"}},
    PrivateOutputDataSize: {"kind":"UInt32"},
    ResourceCount: {"kind":"UInt32"},
    ppResourceList: {"kind""Ptr","child":Windows.Win32.Direct3D11.ID3D11Resource},
};
// --------------------------------------------------------
// Type: ID3D11VideoDecoder
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D11VideoDecoder = *opaque{
    // TODO: Method 'GetCreationParameters'
    // TODO: Method 'GetDriverHandle'
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT = *opaque{
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_PROCESSOR_DEVICE_CAPS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D11_VIDEO_PROCESSOR_DEVICE_CAPS = *opaque{
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_PROCESSOR_FEATURE_CAPS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS = *opaque{
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_PROCESSOR_FILTER_CAPS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D11_VIDEO_PROCESSOR_FILTER_CAPS = *opaque{
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_PROCESSOR_FORMAT_CAPS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D11_VIDEO_PROCESSOR_FORMAT_CAPS = *opaque{
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS = *opaque{
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_PROCESSOR_STEREO_CAPS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D11_VIDEO_PROCESSOR_STEREO_CAPS = *opaque{
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_PROCESSOR_CAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_VIDEO_PROCESSOR_CAPS = extern struct {
    DeviceCaps: {"kind":"UInt32"},
    FeatureCaps: {"kind":"UInt32"},
    FilterCaps: {"kind":"UInt32"},
    InputFormatCaps: {"kind":"UInt32"},
    AutoStreamCaps: {"kind":"UInt32"},
    StereoCaps: {"kind":"UInt32"},
    RateConversionCapsCount: {"kind":"UInt32"},
    MaxInputStreams: {"kind":"UInt32"},
    MaxStreamStates: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS = *opaque{
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS = *opaque{
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS = extern struct {
    PastFrames: {"kind":"UInt32"},
    FutureFrames: {"kind":"UInt32"},
    ProcessorCaps: {"kind":"UInt32"},
    ITelecineCaps: {"kind":"UInt32"},
    CustomRateCount: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3D11_CONTENT_PROTECTION_CAPS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D11_CONTENT_PROTECTION_CAPS = *opaque{
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_CONTENT_PROTECTION_CAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_VIDEO_CONTENT_PROTECTION_CAPS = extern struct {
    Caps: {"kind":"UInt32"},
    KeyExchangeTypeCount: {"kind":"UInt32"},
    BlockAlignmentSize: {"kind":"UInt32"},
    ProtectedMemorySize: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_PROCESSOR_CUSTOM_RATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_VIDEO_PROCESSOR_CUSTOM_RATE = extern struct {
    CustomRate: Windows.Win32.Dxgi.DXGI_RATIONAL,
    OutputFrames: {"kind":"UInt32"},
    InputInterlaced: Windows.Win32.SystemServices.BOOL,
    InputFramesOrFields: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_PROCESSOR_FILTER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D11_VIDEO_PROCESSOR_FILTER = *opaque{
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_PROCESSOR_FILTER_RANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_VIDEO_PROCESSOR_FILTER_RANGE = extern struct {
    Minimum: {"kind":"Int32"},
    Maximum: {"kind":"Int32"},
    Default: {"kind":"Int32"},
    Multiplier: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_FRAME_FORMAT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D11_VIDEO_FRAME_FORMAT = *opaque{
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_USAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D11_VIDEO_USAGE = *opaque{
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_PROCESSOR_CONTENT_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_VIDEO_PROCESSOR_CONTENT_DESC = extern struct {
    InputFrameFormat: Windows.Win32.MediaFoundation.D3D11_VIDEO_FRAME_FORMAT,
    InputFrameRate: Windows.Win32.Dxgi.DXGI_RATIONAL,
    InputWidth: {"kind":"UInt32"},
    InputHeight: {"kind":"UInt32"},
    OutputFrameRate: Windows.Win32.Dxgi.DXGI_RATIONAL,
    OutputWidth: {"kind":"UInt32"},
    OutputHeight: {"kind":"UInt32"},
    Usage: Windows.Win32.MediaFoundation.D3D11_VIDEO_USAGE,
};
// --------------------------------------------------------
// Type: ID3D11VideoProcessorEnumerator
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D11VideoProcessorEnumerator = *opaque{
    // TODO: Method 'GetVideoProcessorContentDesc'
    // TODO: Method 'CheckVideoProcessorFormat'
    // TODO: Method 'GetVideoProcessorCaps'
    // TODO: Method 'GetVideoProcessorRateConversionCaps'
    // TODO: Method 'GetVideoProcessorCustomRate'
    // TODO: Method 'GetVideoProcessorFilterRange'
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_COLOR_RGBA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_VIDEO_COLOR_RGBA = extern struct {
    R: {"kind":"Single"},
    G: {"kind":"Single"},
    B: {"kind":"Single"},
    A: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_COLOR_YCbCrA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_VIDEO_COLOR_YCbCrA = extern struct {
    Y: {"kind":"Single"},
    Cb: {"kind":"Single"},
    Cr: {"kind":"Single"},
    A: {"kind":"Single"},
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_COLOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_VIDEO_COLOR = extern struct {
    Anonymous: Windows.Win32.MediaFoundation.D3D11_VIDEO_COLOR+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE = *opaque{
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_PROCESSOR_COLOR_SPACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_VIDEO_PROCESSOR_COLOR_SPACE = extern struct {
    _bitfield: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE = *opaque{
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_PROCESSOR_OUTPUT_RATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D11_VIDEO_PROCESSOR_OUTPUT_RATE = *opaque{
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_PROCESSOR_STEREO_FORMAT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D11_VIDEO_PROCESSOR_STEREO_FORMAT = *opaque{
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE = *opaque{
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_PROCESSOR_ROTATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D11_VIDEO_PROCESSOR_ROTATION = *opaque{
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_PROCESSOR_STREAM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_VIDEO_PROCESSOR_STREAM = extern struct {
    Enable: Windows.Win32.SystemServices.BOOL,
    OutputIndex: {"kind":"UInt32"},
    InputFrameOrField: {"kind":"UInt32"},
    PastFrames: {"kind":"UInt32"},
    FutureFrames: {"kind":"UInt32"},
    ppPastSurfaces: {"kind""Ptr","child":Windows.Win32.MediaFoundation.ID3D11VideoProcessorInputView},
    pInputSurface: Windows.Win32.MediaFoundation.ID3D11VideoProcessorInputView,
    ppFutureSurfaces: {"kind""Ptr","child":Windows.Win32.MediaFoundation.ID3D11VideoProcessorInputView},
    ppPastSurfacesRight: {"kind""Ptr","child":Windows.Win32.MediaFoundation.ID3D11VideoProcessorInputView},
    pInputSurfaceRight: Windows.Win32.MediaFoundation.ID3D11VideoProcessorInputView,
    ppFutureSurfacesRight: {"kind""Ptr","child":Windows.Win32.MediaFoundation.ID3D11VideoProcessorInputView},
};
// --------------------------------------------------------
// Type: ID3D11VideoProcessor
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D11VideoProcessor = *opaque{
    // TODO: Method 'GetContentDesc'
    // TODO: Method 'GetRateConversionCaps'
};
// --------------------------------------------------------
// Type: D3D11_OMAC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_OMAC = extern struct {
    Omac: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: D3D11_AUTHENTICATED_CHANNEL_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D11_AUTHENTICATED_CHANNEL_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: ID3D11AuthenticatedChannel
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D11AuthenticatedChannel = *opaque{
    // TODO: Method 'GetCertificateSize'
    // TODO: Method 'GetCertificate'
    // TODO: Method 'GetChannelHandle'
};
// --------------------------------------------------------
// Type: D3D11_AUTHENTICATED_QUERY_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_AUTHENTICATED_QUERY_INPUT = extern struct {
    QueryType: Guid,
    hChannel: Windows.Win32.SystemServices.HANDLE,
    SequenceNumber: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3D11_AUTHENTICATED_QUERY_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_AUTHENTICATED_QUERY_OUTPUT = extern struct {
    omac: Windows.Win32.MediaFoundation.D3D11_OMAC,
    QueryType: Guid,
    hChannel: Windows.Win32.SystemServices.HANDLE,
    SequenceNumber: {"kind":"UInt32"},
    ReturnCode: Windows.Win32.Com.HRESULT,
};
// --------------------------------------------------------
// Type: D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT = extern struct {
    Output: Windows.Win32.MediaFoundation.D3D11_AUTHENTICATED_QUERY_OUTPUT,
    ProtectionFlags: Windows.Win32.Direct3D11.D3D11_AUTHENTICATED_PROTECTION_FLAGS,
};
// --------------------------------------------------------
// Type: D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT = extern struct {
    Output: Windows.Win32.MediaFoundation.D3D11_AUTHENTICATED_QUERY_OUTPUT,
    ChannelType: Windows.Win32.MediaFoundation.D3D11_AUTHENTICATED_CHANNEL_TYPE,
};
// --------------------------------------------------------
// Type: D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT = extern struct {
    Output: Windows.Win32.MediaFoundation.D3D11_AUTHENTICATED_QUERY_OUTPUT,
    DeviceHandle: Windows.Win32.SystemServices.HANDLE,
};
// --------------------------------------------------------
// Type: D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT = extern struct {
    Input: Windows.Win32.MediaFoundation.D3D11_AUTHENTICATED_QUERY_INPUT,
    DecoderHandle: Windows.Win32.SystemServices.HANDLE,
};
// --------------------------------------------------------
// Type: D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT = extern struct {
    Output: Windows.Win32.MediaFoundation.D3D11_AUTHENTICATED_QUERY_OUTPUT,
    DecoderHandle: Windows.Win32.SystemServices.HANDLE,
    CryptoSessionHandle: Windows.Win32.SystemServices.HANDLE,
    DeviceHandle: Windows.Win32.SystemServices.HANDLE,
};
// --------------------------------------------------------
// Type: D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT = extern struct {
    Output: Windows.Win32.MediaFoundation.D3D11_AUTHENTICATED_QUERY_OUTPUT,
    RestrictedSharedResourceProcessCount: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT = extern struct {
    Input: Windows.Win32.MediaFoundation.D3D11_AUTHENTICATED_QUERY_INPUT,
    ProcessIndex: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT = extern struct {
    Output: Windows.Win32.MediaFoundation.D3D11_AUTHENTICATED_QUERY_OUTPUT,
    ProcessIndex: {"kind":"UInt32"},
    ProcessIdentifier: Windows.Win32.MediaFoundation.D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE,
    ProcessHandle: Windows.Win32.SystemServices.HANDLE,
};
// --------------------------------------------------------
// Type: D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT = extern struct {
    Output: Windows.Win32.MediaFoundation.D3D11_AUTHENTICATED_QUERY_OUTPUT,
    UnrestrictedProtectedSharedResourceCount: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT = extern struct {
    Input: Windows.Win32.MediaFoundation.D3D11_AUTHENTICATED_QUERY_INPUT,
    DeviceHandle: Windows.Win32.SystemServices.HANDLE,
    CryptoSessionHandle: Windows.Win32.SystemServices.HANDLE,
};
// --------------------------------------------------------
// Type: D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT = extern struct {
    Output: Windows.Win32.MediaFoundation.D3D11_AUTHENTICATED_QUERY_OUTPUT,
    DeviceHandle: Windows.Win32.SystemServices.HANDLE,
    CryptoSessionHandle: Windows.Win32.SystemServices.HANDLE,
    OutputIDCount: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT = extern struct {
    Input: Windows.Win32.MediaFoundation.D3D11_AUTHENTICATED_QUERY_INPUT,
    DeviceHandle: Windows.Win32.SystemServices.HANDLE,
    CryptoSessionHandle: Windows.Win32.SystemServices.HANDLE,
    OutputIDIndex: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT = extern struct {
    Output: Windows.Win32.MediaFoundation.D3D11_AUTHENTICATED_QUERY_OUTPUT,
    DeviceHandle: Windows.Win32.SystemServices.HANDLE,
    CryptoSessionHandle: Windows.Win32.SystemServices.HANDLE,
    OutputIDIndex: {"kind":"UInt32"},
    OutputID: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: D3D11_BUS_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D11_BUS_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_OUTPUT = extern struct {
    Output: Windows.Win32.MediaFoundation.D3D11_AUTHENTICATED_QUERY_OUTPUT,
    BusType: Windows.Win32.MediaFoundation.D3D11_BUS_TYPE,
    AccessibleInContiguousBlocks: Windows.Win32.SystemServices.BOOL,
    AccessibleInNonContiguousBlocks: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT = extern struct {
    Output: Windows.Win32.MediaFoundation.D3D11_AUTHENTICATED_QUERY_OUTPUT,
    EncryptionGuidCount: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT = extern struct {
    Input: Windows.Win32.MediaFoundation.D3D11_AUTHENTICATED_QUERY_INPUT,
    EncryptionGuidIndex: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT = extern struct {
    Output: Windows.Win32.MediaFoundation.D3D11_AUTHENTICATED_QUERY_OUTPUT,
    EncryptionGuidIndex: {"kind":"UInt32"},
    EncryptionGuid: Guid,
};
// --------------------------------------------------------
// Type: D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT = extern struct {
    Output: Windows.Win32.MediaFoundation.D3D11_AUTHENTICATED_QUERY_OUTPUT,
    EncryptionGuid: Guid,
};
// --------------------------------------------------------
// Type: D3D11_AUTHENTICATED_CONFIGURE_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_AUTHENTICATED_CONFIGURE_INPUT = extern struct {
    omac: Windows.Win32.MediaFoundation.D3D11_OMAC,
    ConfigureType: Guid,
    hChannel: Windows.Win32.SystemServices.HANDLE,
    SequenceNumber: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3D11_AUTHENTICATED_CONFIGURE_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_AUTHENTICATED_CONFIGURE_OUTPUT = extern struct {
    omac: Windows.Win32.MediaFoundation.D3D11_OMAC,
    ConfigureType: Guid,
    hChannel: Windows.Win32.SystemServices.HANDLE,
    SequenceNumber: {"kind":"UInt32"},
    ReturnCode: Windows.Win32.Com.HRESULT,
};
// --------------------------------------------------------
// Type: D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT = extern struct {
    Parameters: Windows.Win32.MediaFoundation.D3D11_AUTHENTICATED_CONFIGURE_INPUT,
    StartSequenceQuery: {"kind":"UInt32"},
    StartSequenceConfigure: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT = extern struct {
    Parameters: Windows.Win32.MediaFoundation.D3D11_AUTHENTICATED_CONFIGURE_INPUT,
    Protections: Windows.Win32.Direct3D11.D3D11_AUTHENTICATED_PROTECTION_FLAGS,
};
// --------------------------------------------------------
// Type: D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT = extern struct {
    Parameters: Windows.Win32.MediaFoundation.D3D11_AUTHENTICATED_CONFIGURE_INPUT,
    DecoderHandle: Windows.Win32.SystemServices.HANDLE,
    CryptoSessionHandle: Windows.Win32.SystemServices.HANDLE,
    DeviceHandle: Windows.Win32.SystemServices.HANDLE,
};
// --------------------------------------------------------
// Type: D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT = extern struct {
    Parameters: Windows.Win32.MediaFoundation.D3D11_AUTHENTICATED_CONFIGURE_INPUT,
    ProcessType: Windows.Win32.MediaFoundation.D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE,
    ProcessHandle: Windows.Win32.SystemServices.HANDLE,
    AllowAccess: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT = extern struct {
    Parameters: Windows.Win32.MediaFoundation.D3D11_AUTHENTICATED_CONFIGURE_INPUT,
    EncryptionGuid: Guid,
};
// --------------------------------------------------------
// Type: ID3D11CryptoSession
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D11CryptoSession = *opaque{
    // TODO: Method 'GetCryptoType'
    // TODO: Method 'GetDecoderProfile'
    // TODO: Method 'GetCertificateSize'
    // TODO: Method 'GetCertificate'
    // TODO: Method 'GetCryptoSessionHandle'
};
// --------------------------------------------------------
// Type: D3D11_VDOV_DIMENSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D11_VDOV_DIMENSION = *opaque{
};
// --------------------------------------------------------
// Type: D3D11_TEX2D_VDOV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_TEX2D_VDOV = extern struct {
    ArraySlice: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC = extern struct {
    DecodeProfile: Guid,
    ViewDimension: Windows.Win32.MediaFoundation.D3D11_VDOV_DIMENSION,
    Anonymous: Windows.Win32.MediaFoundation.D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: ID3D11VideoDecoderOutputView
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D11VideoDecoderOutputView = *opaque{
    // TODO: Method 'GetDesc'
};
// --------------------------------------------------------
// Type: D3D11_VPIV_DIMENSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D11_VPIV_DIMENSION = *opaque{
};
// --------------------------------------------------------
// Type: D3D11_TEX2D_VPIV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_TEX2D_VPIV = extern struct {
    MipSlice: {"kind":"UInt32"},
    ArraySlice: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC = extern struct {
    FourCC: {"kind":"UInt32"},
    ViewDimension: Windows.Win32.MediaFoundation.D3D11_VPIV_DIMENSION,
    Anonymous: Windows.Win32.MediaFoundation.D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: ID3D11VideoProcessorInputView
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D11VideoProcessorInputView = *opaque{
    // TODO: Method 'GetDesc'
};
// --------------------------------------------------------
// Type: D3D11_VPOV_DIMENSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D11_VPOV_DIMENSION = *opaque{
};
// --------------------------------------------------------
// Type: D3D11_TEX2D_VPOV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_TEX2D_VPOV = extern struct {
    MipSlice: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3D11_TEX2D_ARRAY_VPOV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_TEX2D_ARRAY_VPOV = extern struct {
    MipSlice: {"kind":"UInt32"},
    FirstArraySlice: {"kind":"UInt32"},
    ArraySize: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC = extern struct {
    ViewDimension: Windows.Win32.MediaFoundation.D3D11_VPOV_DIMENSION,
    Anonymous: Windows.Win32.MediaFoundation.D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: ID3D11VideoProcessorOutputView
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D11VideoProcessorOutputView = *opaque{
    // TODO: Method 'GetDesc'
};
// --------------------------------------------------------
// Type: ID3D11VideoContext
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D11VideoContext = *opaque{
    // TODO: Method 'GetDecoderBuffer'
    // TODO: Method 'ReleaseDecoderBuffer'
    // TODO: Method 'DecoderBeginFrame'
    // TODO: Method 'DecoderEndFrame'
    // TODO: Method 'SubmitDecoderBuffers'
    // TODO: Method 'DecoderExtension'
    // TODO: Method 'VideoProcessorSetOutputTargetRect'
    // TODO: Method 'VideoProcessorSetOutputBackgroundColor'
    // TODO: Method 'VideoProcessorSetOutputColorSpace'
    // TODO: Method 'VideoProcessorSetOutputAlphaFillMode'
    // TODO: Method 'VideoProcessorSetOutputConstriction'
    // TODO: Method 'VideoProcessorSetOutputStereoMode'
    // TODO: Method 'VideoProcessorSetOutputExtension'
    // TODO: Method 'VideoProcessorGetOutputTargetRect'
    // TODO: Method 'VideoProcessorGetOutputBackgroundColor'
    // TODO: Method 'VideoProcessorGetOutputColorSpace'
    // TODO: Method 'VideoProcessorGetOutputAlphaFillMode'
    // TODO: Method 'VideoProcessorGetOutputConstriction'
    // TODO: Method 'VideoProcessorGetOutputStereoMode'
    // TODO: Method 'VideoProcessorGetOutputExtension'
    // TODO: Method 'VideoProcessorSetStreamFrameFormat'
    // TODO: Method 'VideoProcessorSetStreamColorSpace'
    // TODO: Method 'VideoProcessorSetStreamOutputRate'
    // TODO: Method 'VideoProcessorSetStreamSourceRect'
    // TODO: Method 'VideoProcessorSetStreamDestRect'
    // TODO: Method 'VideoProcessorSetStreamAlpha'
    // TODO: Method 'VideoProcessorSetStreamPalette'
    // TODO: Method 'VideoProcessorSetStreamPixelAspectRatio'
    // TODO: Method 'VideoProcessorSetStreamLumaKey'
    // TODO: Method 'VideoProcessorSetStreamStereoFormat'
    // TODO: Method 'VideoProcessorSetStreamAutoProcessingMode'
    // TODO: Method 'VideoProcessorSetStreamFilter'
    // TODO: Method 'VideoProcessorSetStreamExtension'
    // TODO: Method 'VideoProcessorGetStreamFrameFormat'
    // TODO: Method 'VideoProcessorGetStreamColorSpace'
    // TODO: Method 'VideoProcessorGetStreamOutputRate'
    // TODO: Method 'VideoProcessorGetStreamSourceRect'
    // TODO: Method 'VideoProcessorGetStreamDestRect'
    // TODO: Method 'VideoProcessorGetStreamAlpha'
    // TODO: Method 'VideoProcessorGetStreamPalette'
    // TODO: Method 'VideoProcessorGetStreamPixelAspectRatio'
    // TODO: Method 'VideoProcessorGetStreamLumaKey'
    // TODO: Method 'VideoProcessorGetStreamStereoFormat'
    // TODO: Method 'VideoProcessorGetStreamAutoProcessingMode'
    // TODO: Method 'VideoProcessorGetStreamFilter'
    // TODO: Method 'VideoProcessorGetStreamExtension'
    // TODO: Method 'VideoProcessorBlt'
    // TODO: Method 'NegotiateCryptoSessionKeyExchange'
    // TODO: Method 'EncryptionBlt'
    // TODO: Method 'DecryptionBlt'
    // TODO: Method 'StartSessionKeyRefresh'
    // TODO: Method 'FinishSessionKeyRefresh'
    // TODO: Method 'GetEncryptionBltKey'
    // TODO: Method 'NegotiateAuthenticatedChannelKeyExchange'
    // TODO: Method 'QueryAuthenticatedChannel'
    // TODO: Method 'ConfigureAuthenticatedChannel'
    // TODO: Method 'VideoProcessorSetStreamRotation'
    // TODO: Method 'VideoProcessorGetStreamRotation'
};
// --------------------------------------------------------
// Type: ID3D11VideoDevice
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D11VideoDevice = *opaque{
    // TODO: Method 'CreateVideoDecoder'
    // TODO: Method 'CreateVideoProcessor'
    // TODO: Method 'CreateAuthenticatedChannel'
    // TODO: Method 'CreateCryptoSession'
    // TODO: Method 'CreateVideoDecoderOutputView'
    // TODO: Method 'CreateVideoProcessorInputView'
    // TODO: Method 'CreateVideoProcessorOutputView'
    // TODO: Method 'CreateVideoProcessorEnumerator'
    // TODO: Method 'GetVideoDecoderProfileCount'
    // TODO: Method 'GetVideoDecoderProfile'
    // TODO: Method 'CheckVideoDecoderFormat'
    // TODO: Method 'GetVideoDecoderConfigCount'
    // TODO: Method 'GetVideoDecoderConfig'
    // TODO: Method 'GetContentProtectionCaps'
    // TODO: Method 'CheckCryptoKeyExchange'
    // TODO: Method 'SetPrivateData'
    // TODO: Method 'SetPrivateDataInterface'
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK = extern struct {
    ClearSize: {"kind":"UInt32"},
    EncryptedSize: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_DECODER_BUFFER_DESC1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_VIDEO_DECODER_BUFFER_DESC1 = extern struct {
    BufferType: Windows.Win32.MediaFoundation.D3D11_VIDEO_DECODER_BUFFER_TYPE,
    DataOffset: {"kind":"UInt32"},
    DataSize: {"kind":"UInt32"},
    pIV: {"kind""Ptr","child":{"kind":"Void"}},
    IVSize: {"kind":"UInt32"},
    pSubSampleMappingBlock: {"kind""Ptr","child":Windows.Win32.MediaFoundation.D3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK},
    SubSampleMappingCount: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_DECODER_BEGIN_FRAME_CRYPTO_SESSION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_VIDEO_DECODER_BEGIN_FRAME_CRYPTO_SESSION = extern struct {
    pCryptoSession: Windows.Win32.MediaFoundation.ID3D11CryptoSession,
    BlobSize: {"kind":"UInt32"},
    pBlob: {"kind""Ptr","child":{"kind":"Void"}},
    pKeyInfoId: {"kind""Ptr","child":Guid},
    PrivateDataSize: {"kind":"UInt32"},
    pPrivateData: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_DECODER_CAPS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D11_VIDEO_DECODER_CAPS = *opaque{
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINTS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINTS = *opaque{
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT = extern struct {
    Enable: Windows.Win32.SystemServices.BOOL,
    Width: {"kind":"UInt32"},
    Height: {"kind":"UInt32"},
    Format: Windows.Win32.Dxgi.DXGI_FORMAT,
};
// --------------------------------------------------------
// Type: D3D11_CRYPTO_SESSION_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D11_CRYPTO_SESSION_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: D3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA = extern struct {
    PrivateDataSize: {"kind":"UInt32"},
    HWProtectionDataSize: {"kind":"UInt32"},
    pbInput: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: D3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA = extern struct {
    PrivateDataSize: {"kind":"UInt32"},
    MaxHWProtectionDataSize: {"kind":"UInt32"},
    HWProtectionDataSize: {"kind":"UInt32"},
    TransportTime: {"kind":"UInt64"},
    ExecutionTime: {"kind":"UInt64"},
    pbOutput: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: D3D11_KEY_EXCHANGE_HW_PROTECTION_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_KEY_EXCHANGE_HW_PROTECTION_DATA = extern struct {
    HWProtectionFunctionID: {"kind":"UInt32"},
    pInputData: {"kind""Ptr","child":Windows.Win32.MediaFoundation.D3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA},
    pOutputData: {"kind""Ptr","child":Windows.Win32.MediaFoundation.D3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA},
    Status: Windows.Win32.Com.HRESULT,
};
// --------------------------------------------------------
// Type: D3D11_VIDEO_SAMPLE_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_VIDEO_SAMPLE_DESC = extern struct {
    Width: {"kind":"UInt32"},
    Height: {"kind":"UInt32"},
    Format: Windows.Win32.Dxgi.DXGI_FORMAT,
    ColorSpace: Windows.Win32.Dxgi.DXGI_COLOR_SPACE_TYPE,
};
// --------------------------------------------------------
// Type: ID3D11VideoContext1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D11VideoContext1 = *opaque{
    // TODO: Method 'SubmitDecoderBuffers1'
    // TODO: Method 'GetDataForNewHardwareKey'
    // TODO: Method 'CheckCryptoSessionStatus'
    // TODO: Method 'DecoderEnableDownsampling'
    // TODO: Method 'DecoderUpdateDownsampling'
    // TODO: Method 'VideoProcessorSetOutputColorSpace1'
    // TODO: Method 'VideoProcessorSetOutputShaderUsage'
    // TODO: Method 'VideoProcessorGetOutputColorSpace1'
    // TODO: Method 'VideoProcessorGetOutputShaderUsage'
    // TODO: Method 'VideoProcessorSetStreamColorSpace1'
    // TODO: Method 'VideoProcessorSetStreamMirror'
    // TODO: Method 'VideoProcessorGetStreamColorSpace1'
    // TODO: Method 'VideoProcessorGetStreamMirror'
    // TODO: Method 'VideoProcessorGetBehaviorHints'
};
// --------------------------------------------------------
// Type: ID3D11VideoDevice1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D11VideoDevice1 = *opaque{
    // TODO: Method 'GetCryptoSessionPrivateDataSize'
    // TODO: Method 'GetVideoDecoderCaps'
    // TODO: Method 'CheckVideoDecoderDownsampling'
    // TODO: Method 'RecommendVideoDecoderDownsampleParameters'
};
// --------------------------------------------------------
// Type: ID3D11VideoProcessorEnumerator1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D11VideoProcessorEnumerator1 = *opaque{
    // TODO: Method 'CheckVideoProcessorFormatConversion'
};
// --------------------------------------------------------
// Type: ID3D11VideoContext2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D11VideoContext2 = *opaque{
    // TODO: Method 'VideoProcessorSetOutputHDRMetaData'
    // TODO: Method 'VideoProcessorGetOutputHDRMetaData'
    // TODO: Method 'VideoProcessorSetStreamHDRMetaData'
    // TODO: Method 'VideoProcessorGetStreamHDRMetaData'
};
// --------------------------------------------------------
// Type: D3D11_FEATURE_VIDEO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D11_FEATURE_VIDEO = *opaque{
};
],

"func_definitions": [

// set_last_errror=False (can and should we use this?)
pub extern "dxva2" fn DXVAHD_CreateDevice(
    pD3DDevice: Windows.Win32.Direct2D.IDirect3DDevice9Ex,
    pContentDesc: {"kind""Ptr","child":Windows.Win32.MediaFoundation.DXVAHD_CONTENT_DESC},
    Usage: Windows.Win32.MediaFoundation.DXVAHD_DEVICE_USAGE,
    pPlugin: Windows.Win32.MediaFoundation.PDXVAHDSW_Plugin,
    ppDevice: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IDXVAHD_Device},

// set_last_errror=False (can and should we use this?)
pub extern "dxva2" fn DXVA2CreateDirect3DDeviceManager9(
    pResetToken: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppDeviceManager: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IDirect3DDeviceManager9},

// set_last_errror=False (can and should we use this?)
pub extern "dxva2" fn DXVA2CreateVideoService(
    pDD: Windows.Win32.Direct2D.IDirect3DDevice9,
    riid: {"kind""Ptr","child":Guid},
    ppService: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "dxva2" fn OPMGetVideoOutputsFromHMONITOR(
    hMonitor: {"kind":"IntPtr"},
    vos: Windows.Win32.MediaFoundation.OPM_VIDEO_OUTPUT_SEMANTICS,
    pulNumVideoOutputs: {"kind""Ptr","child":{"kind":"UInt32"}},
    pppOPMVideoOutputArray: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.MediaFoundation.IOPMVideoOutput}},

// set_last_errror=False (can and should we use this?)
pub extern "dxva2" fn OPMGetVideoOutputForTarget(
    pAdapterLuid: {"kind""Ptr","child":Windows.Win32.Kernel.LUID},
    VidPnTarget: {"kind":"UInt32"},
    vos: Windows.Win32.MediaFoundation.OPM_VIDEO_OUTPUT_SEMANTICS,
    ppOPMVideoOutput: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IOPMVideoOutput},

// set_last_errror=False (can and should we use this?)
pub extern "dxva2" fn OPMGetVideoOutputsFromIDirect3DDevice9Object(
    pDirect3DDevice9: Windows.Win32.Direct2D.IDirect3DDevice9,
    vos: Windows.Win32.MediaFoundation.OPM_VIDEO_OUTPUT_SEMANTICS,
    pulNumVideoOutputs: {"kind""Ptr","child":{"kind":"UInt32"}},
    pppOPMVideoOutputArray: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.MediaFoundation.IOPMVideoOutput}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFSerializeAttributesToStream(
    pAttr: Windows.Win32.MediaFoundation.IMFAttributes,
    dwOptions: {"kind":"UInt32"},
    pStm: Windows.Win32.StructuredStorage.IStream,

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFDeserializeAttributesFromStream(
    pAttr: Windows.Win32.MediaFoundation.IMFAttributes,
    dwOptions: {"kind":"UInt32"},
    pStm: Windows.Win32.StructuredStorage.IStream,

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateTransformActivate(
    ppActivate: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFActivate},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateMediaSession(
    pConfiguration: Windows.Win32.MediaFoundation.IMFAttributes,
    ppMediaSession: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFMediaSession},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreatePMPMediaSession(
    dwCreationFlags: {"kind":"UInt32"},
    pConfiguration: Windows.Win32.MediaFoundation.IMFAttributes,
    ppMediaSession: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFMediaSession},
    ppEnablerActivate: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFActivate},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateSourceResolver(
    ppISourceResolver: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFSourceResolver},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn CreatePropertyStore(
    ppStore: {"kind""Ptr","child":Windows.Win32.Audio.IPropertyStore},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFGetSupportedSchemes(
    pPropVarSchemeArray: {"kind""Ptr","child":Windows.Win32.StructuredStorage.PROPVARIANT},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFGetSupportedMimeTypes(
    pPropVarMimeTypeArray: {"kind""Ptr","child":Windows.Win32.StructuredStorage.PROPVARIANT},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateTopology(
    ppTopo: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFTopology},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateTopologyNode(
    NodeType: Windows.Win32.MediaFoundation.MF_TOPOLOGY_TYPE,
    ppNode: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFTopologyNode},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFGetTopoNodeCurrentType(
    pNode: Windows.Win32.MediaFoundation.IMFTopologyNode,
    dwStreamIndex: {"kind":"UInt32"},
    fOutput: Windows.Win32.SystemServices.BOOL,
    ppType: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFMediaType},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFGetService(
    punkObject: Windows.Win32.Com.IUnknown,
    guidService: {"kind""Ptr","child":Guid},
    riid: {"kind""Ptr","child":Guid},
    ppvObject: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFGetSystemTime(

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreatePresentationClock(
    ppPresentationClock: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFPresentationClock},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateSystemTimeSource(
    ppSystemTimeSource: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFPresentationTimeSource},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreatePresentationDescriptor(
    cStreamDescriptors: {"kind":"UInt32"},
    apStreamDescriptors: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFStreamDescriptor},
    ppPresentationDescriptor: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFPresentationDescriptor},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFRequireProtectedEnvironment(
    pPresentationDescriptor: Windows.Win32.MediaFoundation.IMFPresentationDescriptor,

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFSerializePresentationDescriptor(
    pPD: Windows.Win32.MediaFoundation.IMFPresentationDescriptor,
    pcbData: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppbData: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFDeserializePresentationDescriptor(
    cbData: {"kind":"UInt32"},
    pbData: {"kind""Ptr","child":{"kind":"Byte"}},
    ppPD: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFPresentationDescriptor},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateStreamDescriptor(
    dwStreamIdentifier: {"kind":"UInt32"},
    cMediaTypes: {"kind":"UInt32"},
    apMediaTypes: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFMediaType},
    ppDescriptor: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFStreamDescriptor},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateSimpleTypeHandler(
    ppHandler: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFMediaTypeHandler},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFShutdownObject(
    pUnk: Windows.Win32.Com.IUnknown,

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateAudioRenderer(
    pAudioAttributes: Windows.Win32.MediaFoundation.IMFAttributes,
    ppSink: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFMediaSink},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateAudioRendererActivate(
    ppActivate: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFActivate},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateVideoRendererActivate(
    hwndVideo: Windows.Win32.WindowsAndMessaging.HWND,
    ppActivate: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFActivate},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateMPEG4MediaSink(
    pIByteStream: Windows.Win32.MediaFoundation.IMFByteStream,
    pVideoMediaType: Windows.Win32.MediaFoundation.IMFMediaType,
    pAudioMediaType: Windows.Win32.MediaFoundation.IMFMediaType,
    ppIMediaSink: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFMediaSink},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreate3GPMediaSink(
    pIByteStream: Windows.Win32.MediaFoundation.IMFByteStream,
    pVideoMediaType: Windows.Win32.MediaFoundation.IMFMediaType,
    pAudioMediaType: Windows.Win32.MediaFoundation.IMFMediaType,
    ppIMediaSink: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFMediaSink},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateMP3MediaSink(
    pTargetByteStream: Windows.Win32.MediaFoundation.IMFByteStream,
    ppMediaSink: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFMediaSink},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateAC3MediaSink(
    pTargetByteStream: Windows.Win32.MediaFoundation.IMFByteStream,
    pAudioMediaType: Windows.Win32.MediaFoundation.IMFMediaType,
    ppMediaSink: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFMediaSink},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateADTSMediaSink(
    pTargetByteStream: Windows.Win32.MediaFoundation.IMFByteStream,
    pAudioMediaType: Windows.Win32.MediaFoundation.IMFMediaType,
    ppMediaSink: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFMediaSink},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateMuxSink(
    guidOutputSubType: Guid,
    pOutputAttributes: Windows.Win32.MediaFoundation.IMFAttributes,
    pOutputByteStream: Windows.Win32.MediaFoundation.IMFByteStream,
    ppMuxSink: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFMediaSink},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateFMPEG4MediaSink(
    pIByteStream: Windows.Win32.MediaFoundation.IMFByteStream,
    pVideoMediaType: Windows.Win32.MediaFoundation.IMFMediaType,
    pAudioMediaType: Windows.Win32.MediaFoundation.IMFMediaType,
    ppIMediaSink: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFMediaSink},

// set_last_errror=False (can and should we use this?)
pub extern "mfsrcsnk" fn MFCreateAVIMediaSink(
    pIByteStream: Windows.Win32.MediaFoundation.IMFByteStream,
    pVideoMediaType: Windows.Win32.MediaFoundation.IMFMediaType,
    pAudioMediaType: Windows.Win32.MediaFoundation.IMFMediaType,
    ppIMediaSink: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFMediaSink},

// set_last_errror=False (can and should we use this?)
pub extern "mfsrcsnk" fn MFCreateWAVEMediaSink(
    pTargetByteStream: Windows.Win32.MediaFoundation.IMFByteStream,
    pAudioMediaType: Windows.Win32.MediaFoundation.IMFMediaType,
    ppMediaSink: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFMediaSink},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateTopoLoader(
    ppObj: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFTopoLoader},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateSampleGrabberSinkActivate(
    pIMFMediaType: Windows.Win32.MediaFoundation.IMFMediaType,
    pIMFSampleGrabberSinkCallback: Windows.Win32.MediaFoundation.IMFSampleGrabberSinkCallback,
    ppIActivate: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFActivate},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateStandardQualityManager(
    ppQualityManager: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFQualityManager},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateSequencerSource(
    pReserved: Windows.Win32.Com.IUnknown,
    ppSequencerSource: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFSequencerSource},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateSequencerSegmentOffset(
    dwId: {"kind":"UInt32"},
    hnsOffset: {"kind":"Int64"},
    pvarSegmentOffset: {"kind""Ptr","child":Windows.Win32.StructuredStorage.PROPVARIANT},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateAggregateSource(
    pSourceCollection: Windows.Win32.MediaFoundation.IMFCollection,
    ppAggSource: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFMediaSource},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateCredentialCache(
    ppCache: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFNetCredentialCache},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateProxyLocator(
    pszProtocol: {"kind""Ptr","child":{"kind":"UInt16"}},
    pProxyConfig: Windows.Win32.Audio.IPropertyStore,
    ppProxyLocator: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFNetProxyLocator},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateNetSchemePlugin(
    riid: {"kind""Ptr","child":Guid},
    ppvHandler: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreatePMPServer(
    dwCreationFlags: {"kind":"UInt32"},
    ppPMPServer: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFPMPServer},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateRemoteDesktopPlugin(
    ppPlugin: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFRemoteDesktopPlugin},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn CreateNamedPropertyStore(
    ppStore: {"kind""Ptr","child":Windows.Win32.Shell.INamedPropertyStore},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateSampleCopierMFT(
    ppCopierMFT: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFTransform},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateTranscodeProfile(
    ppTranscodeProfile: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFTranscodeProfile},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateTranscodeTopology(
    pSrc: Windows.Win32.MediaFoundation.IMFMediaSource,
    pwszOutputFilePath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pProfile: Windows.Win32.MediaFoundation.IMFTranscodeProfile,
    ppTranscodeTopo: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFTopology},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateTranscodeTopologyFromByteStream(
    pSrc: Windows.Win32.MediaFoundation.IMFMediaSource,
    pOutputStream: Windows.Win32.MediaFoundation.IMFByteStream,
    pProfile: Windows.Win32.MediaFoundation.IMFTranscodeProfile,
    ppTranscodeTopo: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFTopology},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFTranscodeGetAudioOutputAvailableTypes(
    guidSubType: {"kind""Ptr","child":Guid},
    dwMFTFlags: {"kind":"UInt32"},
    pCodecConfig: Windows.Win32.MediaFoundation.IMFAttributes,
    ppAvailableTypes: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFCollection},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateTranscodeSinkActivate(
    ppActivate: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFActivate},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateTrackedSample(
    ppMFSample: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFTrackedSample},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateMFByteStreamOnStream(
    pStream: Windows.Win32.StructuredStorage.IStream,
    ppByteStream: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFByteStream},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateStreamOnMFByteStream(
    pByteStream: Windows.Win32.MediaFoundation.IMFByteStream,
    ppStream: {"kind""Ptr","child":Windows.Win32.StructuredStorage.IStream},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateMFByteStreamOnStreamEx(
    punkStream: Windows.Win32.Com.IUnknown,
    ppByteStream: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFByteStream},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateStreamOnMFByteStreamEx(
    pByteStream: Windows.Win32.MediaFoundation.IMFByteStream,
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateMediaTypeFromProperties(
    punkStream: Windows.Win32.Com.IUnknown,
    ppMediaType: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFMediaType},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreatePropertiesFromMediaType(
    pMediaType: Windows.Win32.MediaFoundation.IMFMediaType,
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFEnumDeviceSources(
    pAttributes: Windows.Win32.MediaFoundation.IMFAttributes,
    pppSourceActivate: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFActivate}},
    pcSourceActivate: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateDeviceSource(
    pAttributes: Windows.Win32.MediaFoundation.IMFAttributes,
    ppSource: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFMediaSource},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateDeviceSourceActivate(
    pAttributes: Windows.Win32.MediaFoundation.IMFAttributes,
    ppActivate: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFActivate},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateProtectedEnvironmentAccess(
    ppAccess: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFProtectedEnvironmentAccess},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFLoadSignedLibrary(
    pszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppLib: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFSignedLibrary},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFGetSystemId(
    ppId: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFSystemId},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFGetLocalId(
    verifier: {"kind""Ptr","child":{"kind":"Byte"}},
    size: {"kind":"UInt32"},
    id: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateContentProtectionDevice(
    ProtectionSystemId: {"kind""Ptr","child":Guid},
    ContentProtectionDevice: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFContentProtectionDevice},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFIsContentProtectionDeviceSupported(
    ProtectionSystemId: {"kind""Ptr","child":Guid},
    isSupported: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateContentDecryptorContext(
    guidMediaProtectionSystemId: {"kind""Ptr","child":Guid},
    pD3DManager: Windows.Win32.MediaFoundation.IMFDXGIDeviceManager,
    pContentProtectionDevice: Windows.Win32.MediaFoundation.IMFContentProtectionDevice,
    ppContentDecryptorContext: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFContentDecryptorContext},

// set_last_errror=False (can and should we use this?)
pub extern "MFSENSORGROUP" fn MFCreateSensorGroup(
    SensorGroupSymbolicLink: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppSensorGroup: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFSensorGroup},

// set_last_errror=False (can and should we use this?)
pub extern "MFSENSORGROUP" fn MFCreateSensorStream(
    StreamId: {"kind":"UInt32"},
    pAttributes: Windows.Win32.MediaFoundation.IMFAttributes,
    pMediaTypeCollection: Windows.Win32.MediaFoundation.IMFCollection,
    ppStream: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFSensorStream},

// set_last_errror=False (can and should we use this?)
pub extern "MFSENSORGROUP" fn MFCreateSensorProfile(
    ProfileType: {"kind""Ptr","child":Guid},
    ProfileIndex: {"kind":"UInt32"},
    Constraints: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppProfile: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFSensorProfile},

// set_last_errror=False (can and should we use this?)
pub extern "MFSENSORGROUP" fn MFCreateSensorProfileCollection(
    ppSensorProfile: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFSensorProfileCollection},

// set_last_errror=False (can and should we use this?)
pub extern "MFSENSORGROUP" fn MFCreateSensorActivityMonitor(
    pCallback: Windows.Win32.MediaFoundation.IMFSensorActivitiesReportCallback,
    ppActivityMonitor: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFSensorActivityMonitor},

// set_last_errror=False (can and should we use this?)
pub extern "MFCORE" fn MFCreateExtendedCameraIntrinsics(
    ppExtendedCameraIntrinsics: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFExtendedCameraIntrinsics},

// set_last_errror=False (can and should we use this?)
pub extern "MFCORE" fn MFCreateExtendedCameraIntrinsicModel(
    distortionModelType: Windows.Win32.MediaFoundation.MFCameraIntrinsic_DistortionModelType,
    ppExtendedCameraIntrinsicModel: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFExtendedCameraIntrinsicModel},

// set_last_errror=False (can and should we use this?)
pub extern "MFSENSORGROUP" fn MFCreateRelativePanelWatcher(
    videoDeviceId: {"kind""Ptr","child":{"kind":"UInt16"}},
    displayMonitorDeviceId: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppRelativePanelWatcher: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFRelativePanelWatcher},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateASFContentInfo(
    ppIContentInfo: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFASFContentInfo},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateASFIndexer(
    ppIIndexer: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFASFIndexer},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateASFIndexerByteStream(
    pIContentByteStream: Windows.Win32.MediaFoundation.IMFByteStream,
    cbIndexStartOffset: {"kind":"UInt64"},
    pIIndexByteStream: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFByteStream},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateASFSplitter(
    ppISplitter: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFASFSplitter},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateASFProfile(
    ppIProfile: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFASFProfile},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateASFProfileFromPresentationDescriptor(
    pIPD: Windows.Win32.MediaFoundation.IMFPresentationDescriptor,
    ppIProfile: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFASFProfile},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreatePresentationDescriptorFromASFProfile(
    pIProfile: Windows.Win32.MediaFoundation.IMFASFProfile,
    ppIPD: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFPresentationDescriptor},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateASFMultiplexer(
    ppIMultiplexer: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFASFMultiplexer},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateASFStreamSelector(
    pIASFProfile: Windows.Win32.MediaFoundation.IMFASFProfile,
    ppSelector: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFASFStreamSelector},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateASFMediaSink(
    pIByteStream: Windows.Win32.MediaFoundation.IMFByteStream,
    ppIMediaSink: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFMediaSink},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateASFMediaSinkActivate(
    pwszFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pContentInfo: Windows.Win32.MediaFoundation.IMFASFContentInfo,
    ppIActivate: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFActivate},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateWMVEncoderActivate(
    pMediaType: Windows.Win32.MediaFoundation.IMFMediaType,
    pEncodingConfigurationProperties: Windows.Win32.Audio.IPropertyStore,
    ppActivate: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFActivate},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateWMAEncoderActivate(
    pMediaType: Windows.Win32.MediaFoundation.IMFMediaType,
    pEncodingConfigurationProperties: Windows.Win32.Audio.IPropertyStore,
    ppActivate: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFActivate},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateASFStreamingMediaSink(
    pIByteStream: Windows.Win32.MediaFoundation.IMFByteStream,
    ppIMediaSink: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFMediaSink},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateASFStreamingMediaSinkActivate(
    pByteStreamActivate: Windows.Win32.MediaFoundation.IMFActivate,
    pContentInfo: Windows.Win32.MediaFoundation.IMFASFContentInfo,
    ppIActivate: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFActivate},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFStartup(
    Version: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFShutdown(

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFLockPlatform(

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFUnlockPlatform(

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFPutWorkItem(
    dwQueue: {"kind":"UInt32"},
    pCallback: Windows.Win32.MediaFoundation.IMFAsyncCallback,
    pState: Windows.Win32.Com.IUnknown,

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFPutWorkItem2(
    dwQueue: {"kind":"UInt32"},
    Priority: {"kind":"Int32"},
    pCallback: Windows.Win32.MediaFoundation.IMFAsyncCallback,
    pState: Windows.Win32.Com.IUnknown,

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFPutWorkItemEx(
    dwQueue: {"kind":"UInt32"},
    pResult: Windows.Win32.MediaFoundation.IMFAsyncResult,

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFPutWorkItemEx2(
    dwQueue: {"kind":"UInt32"},
    Priority: {"kind":"Int32"},
    pResult: Windows.Win32.MediaFoundation.IMFAsyncResult,

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFPutWaitingWorkItem(
    hEvent: Windows.Win32.SystemServices.HANDLE,
    Priority: {"kind":"Int32"},
    pResult: Windows.Win32.MediaFoundation.IMFAsyncResult,
    pKey: {"kind""Ptr","child":{"kind":"UInt64"}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFAllocateSerialWorkQueue(
    dwWorkQueue: {"kind":"UInt32"},
    pdwWorkQueue: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFScheduleWorkItemEx(
    pResult: Windows.Win32.MediaFoundation.IMFAsyncResult,
    Timeout: {"kind":"Int64"},
    pKey: {"kind""Ptr","child":{"kind":"UInt64"}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFScheduleWorkItem(
    pCallback: Windows.Win32.MediaFoundation.IMFAsyncCallback,
    pState: Windows.Win32.Com.IUnknown,
    Timeout: {"kind":"Int64"},
    pKey: {"kind""Ptr","child":{"kind":"UInt64"}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCancelWorkItem(
    Key: {"kind":"UInt64"},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFGetTimerPeriodicity(
    Periodicity: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFAddPeriodicCallback(
    Callback: Windows.Win32.MediaFoundation.MFPERIODICCALLBACK,
    pContext: Windows.Win32.Com.IUnknown,
    pdwKey: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFRemovePeriodicCallback(
    dwKey: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFAllocateWorkQueueEx(
    WorkQueueType: Windows.Win32.MediaFoundation.MFASYNC_WORKQUEUE_TYPE,
    pdwWorkQueue: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFAllocateWorkQueue(
    pdwWorkQueue: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFLockWorkQueue(
    dwWorkQueue: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFUnlockWorkQueue(
    dwWorkQueue: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFBeginRegisterWorkQueueWithMMCSS(
    dwWorkQueueId: {"kind":"UInt32"},
    wszClass: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwTaskId: {"kind":"UInt32"},
    pDoneCallback: Windows.Win32.MediaFoundation.IMFAsyncCallback,
    pDoneState: Windows.Win32.Com.IUnknown,

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFBeginRegisterWorkQueueWithMMCSSEx(
    dwWorkQueueId: {"kind":"UInt32"},
    wszClass: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwTaskId: {"kind":"UInt32"},
    lPriority: {"kind":"Int32"},
    pDoneCallback: Windows.Win32.MediaFoundation.IMFAsyncCallback,
    pDoneState: Windows.Win32.Com.IUnknown,

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFEndRegisterWorkQueueWithMMCSS(
    pResult: Windows.Win32.MediaFoundation.IMFAsyncResult,
    pdwTaskId: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFBeginUnregisterWorkQueueWithMMCSS(
    dwWorkQueueId: {"kind":"UInt32"},
    pDoneCallback: Windows.Win32.MediaFoundation.IMFAsyncCallback,
    pDoneState: Windows.Win32.Com.IUnknown,

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFEndUnregisterWorkQueueWithMMCSS(
    pResult: Windows.Win32.MediaFoundation.IMFAsyncResult,

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFGetWorkQueueMMCSSClass(
    dwWorkQueueId: {"kind":"UInt32"},
    pwszClass: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcchClass: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFGetWorkQueueMMCSSTaskId(
    dwWorkQueueId: {"kind":"UInt32"},
    pdwTaskId: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFRegisterPlatformWithMMCSS(
    wszClass: {"kind""Ptr","child":{"kind":"UInt16"}},
    pdwTaskId: {"kind""Ptr","child":{"kind":"UInt32"}},
    lPriority: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFUnregisterPlatformFromMMCSS(

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFLockSharedWorkQueue(
    wszClass: {"kind""Ptr","child":{"kind":"UInt16"}},
    BasePriority: {"kind":"Int32"},
    pdwTaskId: {"kind""Ptr","child":{"kind":"UInt32"}},
    pID: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFGetWorkQueueMMCSSPriority(
    dwWorkQueueId: {"kind":"UInt32"},
    lPriority: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateAsyncResult(
    punkObject: Windows.Win32.Com.IUnknown,
    pCallback: Windows.Win32.MediaFoundation.IMFAsyncCallback,
    punkState: Windows.Win32.Com.IUnknown,
    ppAsyncResult: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFAsyncResult},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFInvokeCallback(
    pAsyncResult: Windows.Win32.MediaFoundation.IMFAsyncResult,

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateFile(
    AccessMode: Windows.Win32.MediaFoundation.MF_FILE_ACCESSMODE,
    OpenMode: Windows.Win32.MediaFoundation.MF_FILE_OPENMODE,
    fFlags: Windows.Win32.MediaFoundation.MF_FILE_FLAGS,
    pwszFileURL: {"kind""Ptr","child":{"kind":"UInt16"}},
    ppIByteStream: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFByteStream},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateTempFile(
    AccessMode: Windows.Win32.MediaFoundation.MF_FILE_ACCESSMODE,
    OpenMode: Windows.Win32.MediaFoundation.MF_FILE_OPENMODE,
    fFlags: Windows.Win32.MediaFoundation.MF_FILE_FLAGS,
    ppIByteStream: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFByteStream},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFBeginCreateFile(
    AccessMode: Windows.Win32.MediaFoundation.MF_FILE_ACCESSMODE,
    OpenMode: Windows.Win32.MediaFoundation.MF_FILE_OPENMODE,
    fFlags: Windows.Win32.MediaFoundation.MF_FILE_FLAGS,
    pwszFilePath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pCallback: Windows.Win32.MediaFoundation.IMFAsyncCallback,
    pState: Windows.Win32.Com.IUnknown,
    ppCancelCookie: {"kind""Ptr","child":Windows.Win32.Com.IUnknown},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFEndCreateFile(
    pResult: Windows.Win32.MediaFoundation.IMFAsyncResult,
    ppFile: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFByteStream},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCancelCreateFile(
    pCancelCookie: Windows.Win32.Com.IUnknown,

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateMemoryBuffer(
    cbMaxLength: {"kind":"UInt32"},
    ppBuffer: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFMediaBuffer},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateMediaBufferWrapper(
    pBuffer: Windows.Win32.MediaFoundation.IMFMediaBuffer,
    cbOffset: {"kind":"UInt32"},
    dwLength: {"kind":"UInt32"},
    ppBuffer: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFMediaBuffer},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateLegacyMediaBufferOnMFMediaBuffer(
    pSample: Windows.Win32.MediaFoundation.IMFSample,
    pMFMediaBuffer: Windows.Win32.MediaFoundation.IMFMediaBuffer,
    cbOffset: {"kind":"UInt32"},
    ppMediaBuffer: {"kind""Ptr","child":Windows.Win32.DirectShow.IMediaBuffer},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFMapDX9FormatToDXGIFormat(
    dx9: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFMapDXGIFormatToDX9Format(
    dx11: Windows.Win32.Dxgi.DXGI_FORMAT,

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFLockDXGIDeviceManager(
    pResetToken: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppManager: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFDXGIDeviceManager},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFUnlockDXGIDeviceManager(

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateDXSurfaceBuffer(
    riid: {"kind""Ptr","child":Guid},
    punkSurface: Windows.Win32.Com.IUnknown,
    fBottomUpWhenLinear: Windows.Win32.SystemServices.BOOL,
    ppBuffer: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFMediaBuffer},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateWICBitmapBuffer(
    riid: {"kind""Ptr","child":Guid},
    punkSurface: Windows.Win32.Com.IUnknown,
    ppBuffer: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFMediaBuffer},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateDXGISurfaceBuffer(
    riid: {"kind""Ptr","child":Guid},
    punkSurface: Windows.Win32.Com.IUnknown,
    uSubresourceIndex: {"kind":"UInt32"},
    fBottomUpWhenLinear: Windows.Win32.SystemServices.BOOL,
    ppBuffer: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFMediaBuffer},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateVideoSampleAllocatorEx(
    riid: {"kind""Ptr","child":Guid},
    ppSampleAllocator: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateDXGIDeviceManager(
    resetToken: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppDeviceManager: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFDXGIDeviceManager},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateAlignedMemoryBuffer(
    cbMaxLength: {"kind":"UInt32"},
    cbAligment: {"kind":"UInt32"},
    ppBuffer: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFMediaBuffer},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateMediaEvent(
    met: {"kind":"UInt32"},
    guidExtendedType: {"kind""Ptr","child":Guid},
    hrStatus: Windows.Win32.Com.HRESULT,
    pvValue: {"kind""Ptr","child":Windows.Win32.StructuredStorage.PROPVARIANT},
    ppEvent: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFMediaEvent},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateEventQueue(
    ppMediaEventQueue: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFMediaEventQueue},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateSample(
    ppIMFSample: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFSample},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateAttributes(
    ppMFAttributes: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFAttributes},
    cInitialSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFInitAttributesFromBlob(
    pAttributes: Windows.Win32.MediaFoundation.IMFAttributes,
    pBuf: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBufSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFGetAttributesAsBlobSize(
    pAttributes: Windows.Win32.MediaFoundation.IMFAttributes,
    pcbBufSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFGetAttributesAsBlob(
    pAttributes: Windows.Win32.MediaFoundation.IMFAttributes,
    pBuf: {"kind""Ptr","child":{"kind":"Byte"}},
    cbBufSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFTRegister(
    clsidMFT: Guid,
    guidCategory: Guid,
    pszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Flags: {"kind":"UInt32"},
    cInputTypes: {"kind":"UInt32"},
    pInputTypes: {"kind""Ptr","child":Windows.Win32.MediaFoundation.MFT_REGISTER_TYPE_INFO},
    cOutputTypes: {"kind":"UInt32"},
    pOutputTypes: {"kind""Ptr","child":Windows.Win32.MediaFoundation.MFT_REGISTER_TYPE_INFO},
    pAttributes: Windows.Win32.MediaFoundation.IMFAttributes,

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFTUnregister(
    clsidMFT: Guid,

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFTRegisterLocal(
    pClassFactory: Windows.Win32.Com.IClassFactory,
    guidCategory: {"kind""Ptr","child":Guid},
    pszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Flags: {"kind":"UInt32"},
    cInputTypes: {"kind":"UInt32"},
    pInputTypes: {"kind""Ptr","child":Windows.Win32.MediaFoundation.MFT_REGISTER_TYPE_INFO},
    cOutputTypes: {"kind":"UInt32"},
    pOutputTypes: {"kind""Ptr","child":Windows.Win32.MediaFoundation.MFT_REGISTER_TYPE_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFTUnregisterLocal(
    pClassFactory: Windows.Win32.Com.IClassFactory,

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFTRegisterLocalByCLSID(
    clisdMFT: {"kind""Ptr","child":Guid},
    guidCategory: {"kind""Ptr","child":Guid},
    pszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Flags: {"kind":"UInt32"},
    cInputTypes: {"kind":"UInt32"},
    pInputTypes: {"kind""Ptr","child":Windows.Win32.MediaFoundation.MFT_REGISTER_TYPE_INFO},
    cOutputTypes: {"kind":"UInt32"},
    pOutputTypes: {"kind""Ptr","child":Windows.Win32.MediaFoundation.MFT_REGISTER_TYPE_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFTUnregisterLocalByCLSID(
    clsidMFT: Guid,

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFTEnum(
    guidCategory: Guid,
    Flags: {"kind":"UInt32"},
    pInputType: {"kind""Ptr","child":Windows.Win32.MediaFoundation.MFT_REGISTER_TYPE_INFO},
    pOutputType: {"kind""Ptr","child":Windows.Win32.MediaFoundation.MFT_REGISTER_TYPE_INFO},
    pAttributes: Windows.Win32.MediaFoundation.IMFAttributes,
    ppclsidMFT: {"kind""Ptr","child":{"kind""Ptr","child":Guid}},
    pcMFTs: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFTEnumEx(
    guidCategory: Guid,
    Flags: {"kind":"UInt32"},
    pInputType: {"kind""Ptr","child":Windows.Win32.MediaFoundation.MFT_REGISTER_TYPE_INFO},
    pOutputType: {"kind""Ptr","child":Windows.Win32.MediaFoundation.MFT_REGISTER_TYPE_INFO},
    pppMFTActivate: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFActivate}},
    pnumMFTActivate: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFTEnum2(
    guidCategory: Guid,
    Flags: {"kind":"UInt32"},
    pInputType: {"kind""Ptr","child":Windows.Win32.MediaFoundation.MFT_REGISTER_TYPE_INFO},
    pOutputType: {"kind""Ptr","child":Windows.Win32.MediaFoundation.MFT_REGISTER_TYPE_INFO},
    pAttributes: Windows.Win32.MediaFoundation.IMFAttributes,
    pppMFTActivate: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFActivate}},
    pnumMFTActivate: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFTGetInfo(
    clsidMFT: Guid,
    pszName: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    ppInputTypes: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.MediaFoundation.MFT_REGISTER_TYPE_INFO}},
    pcInputTypes: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppOutputTypes: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.MediaFoundation.MFT_REGISTER_TYPE_INFO}},
    pcOutputTypes: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppAttributes: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFAttributes},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFGetPluginControl(
    ppPluginControl: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFPluginControl},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFGetMFTMerit(
    pMFT: Windows.Win32.Com.IUnknown,
    cbVerifier: {"kind":"UInt32"},
    verifier: {"kind""Ptr","child":{"kind":"Byte"}},
    merit: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFRegisterLocalSchemeHandler(
    szScheme: {"kind""Ptr","child":{"kind":"UInt16"}},
    pActivate: Windows.Win32.MediaFoundation.IMFActivate,

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFRegisterLocalByteStreamHandler(
    szFileExtension: {"kind""Ptr","child":{"kind":"UInt16"}},
    szMimeType: {"kind""Ptr","child":{"kind":"UInt16"}},
    pActivate: Windows.Win32.MediaFoundation.IMFActivate,

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateMFByteStreamWrapper(
    pStream: Windows.Win32.MediaFoundation.IMFByteStream,
    ppStreamWrapper: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFByteStream},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateMediaExtensionActivate(
    szActivatableClassId: {"kind""Ptr","child":{"kind":"UInt16"}},
    pConfiguration: Windows.Win32.Com.IUnknown,
    riid: {"kind""Ptr","child":Guid},
    ppvObject: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateMuxStreamAttributes(
    pAttributesToMux: Windows.Win32.MediaFoundation.IMFCollection,
    ppMuxAttribs: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFAttributes},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateMuxStreamMediaType(
    pMediaTypesToMux: Windows.Win32.MediaFoundation.IMFCollection,
    ppMuxMediaType: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFMediaType},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateMuxStreamSample(
    pSamplesToMux: Windows.Win32.MediaFoundation.IMFCollection,
    ppMuxSample: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFSample},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFValidateMediaTypeSize(
    FormatType: Guid,
    pBlock: {"kind""Ptr","child":{"kind":"Byte"}},
    cbSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateMediaType(
    ppMFType: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFMediaType},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateMFVideoFormatFromMFMediaType(
    pMFType: Windows.Win32.MediaFoundation.IMFMediaType,
    ppMFVF: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.MediaFoundation.MFVIDEOFORMAT}},
    pcbSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateWaveFormatExFromMFMediaType(
    pMFType: Windows.Win32.MediaFoundation.IMFMediaType,
    ppWF: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Multimedia.WAVEFORMATEX}},
    pcbSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    Flags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFInitMediaTypeFromVideoInfoHeader(
    pMFType: Windows.Win32.MediaFoundation.IMFMediaType,
    pVIH: {"kind""Ptr","child":Windows.Win32.DirectShow.VIDEOINFOHEADER},
    cbBufSize: {"kind":"UInt32"},
    pSubtype: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFInitMediaTypeFromVideoInfoHeader2(
    pMFType: Windows.Win32.MediaFoundation.IMFMediaType,
    pVIH2: {"kind""Ptr","child":Windows.Win32.DirectShow.VIDEOINFOHEADER2},
    cbBufSize: {"kind":"UInt32"},
    pSubtype: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFInitMediaTypeFromMPEG1VideoInfo(
    pMFType: Windows.Win32.MediaFoundation.IMFMediaType,
    pMP1VI: {"kind""Ptr","child":Windows.Win32.DirectShow.MPEG1VIDEOINFO},
    cbBufSize: {"kind":"UInt32"},
    pSubtype: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFInitMediaTypeFromMPEG2VideoInfo(
    pMFType: Windows.Win32.MediaFoundation.IMFMediaType,
    pMP2VI: {"kind""Ptr","child":Windows.Win32.DirectShow.MPEG2VIDEOINFO},
    cbBufSize: {"kind":"UInt32"},
    pSubtype: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCalculateBitmapImageSize(
    pBMIH: {"kind""Ptr","child":Windows.Win32.DirectShow.BITMAPINFOHEADER},
    cbBufSize: {"kind":"UInt32"},
    pcbImageSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    pbKnown: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCalculateImageSize(
    guidSubtype: {"kind""Ptr","child":Guid},
    unWidth: {"kind":"UInt32"},
    unHeight: {"kind":"UInt32"},
    pcbImageSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFFrameRateToAverageTimePerFrame(
    unNumerator: {"kind":"UInt32"},
    unDenominator: {"kind":"UInt32"},
    punAverageTimePerFrame: {"kind""Ptr","child":{"kind":"UInt64"}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFAverageTimePerFrameToFrameRate(
    unAverageTimePerFrame: {"kind":"UInt64"},
    punNumerator: {"kind""Ptr","child":{"kind":"UInt32"}},
    punDenominator: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFInitMediaTypeFromMFVideoFormat(
    pMFType: Windows.Win32.MediaFoundation.IMFMediaType,
    pMFVF: {"kind""Ptr","child":Windows.Win32.MediaFoundation.MFVIDEOFORMAT},
    cbBufSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFInitMediaTypeFromWaveFormatEx(
    pMFType: Windows.Win32.MediaFoundation.IMFMediaType,
    pWaveFormat: {"kind""Ptr","child":Windows.Win32.Multimedia.WAVEFORMATEX},
    cbBufSize: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFInitMediaTypeFromAMMediaType(
    pMFType: Windows.Win32.MediaFoundation.IMFMediaType,
    pAMType: {"kind""Ptr","child":Windows.Win32.DirectShow.AM_MEDIA_TYPE},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFInitAMMediaTypeFromMFMediaType(
    pMFType: Windows.Win32.MediaFoundation.IMFMediaType,
    guidFormatBlockType: Guid,
    pAMType: {"kind""Ptr","child":Windows.Win32.DirectShow.AM_MEDIA_TYPE},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateAMMediaTypeFromMFMediaType(
    pMFType: Windows.Win32.MediaFoundation.IMFMediaType,
    guidFormatBlockType: Guid,
    ppAMType: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.DirectShow.AM_MEDIA_TYPE}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCompareFullToPartialMediaType(
    pMFTypeFull: Windows.Win32.MediaFoundation.IMFMediaType,
    pMFTypePartial: Windows.Win32.MediaFoundation.IMFMediaType,

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFWrapMediaType(
    pOrig: Windows.Win32.MediaFoundation.IMFMediaType,
    MajorType: {"kind""Ptr","child":Guid},
    SubType: {"kind""Ptr","child":Guid},
    ppWrap: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFMediaType},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFUnwrapMediaType(
    pWrap: Windows.Win32.MediaFoundation.IMFMediaType,
    ppOrig: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFMediaType},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateVideoMediaType(
    pVideoFormat: {"kind""Ptr","child":Windows.Win32.MediaFoundation.MFVIDEOFORMAT},
    ppIVideoMediaType: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFVideoMediaType},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateVideoMediaTypeFromSubtype(
    pAMSubtype: {"kind""Ptr","child":Guid},
    ppIVideoMediaType: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFVideoMediaType},

// set_last_errror=False (can and should we use this?)
pub extern "EVR" fn MFIsFormatYUV(
    Format: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateVideoMediaTypeFromBitMapInfoHeader(
    pbmihBitMapInfoHeader: {"kind""Ptr","child":Windows.Win32.DirectShow.BITMAPINFOHEADER},
    dwPixelAspectRatioX: {"kind":"UInt32"},
    dwPixelAspectRatioY: {"kind":"UInt32"},
    InterlaceMode: Windows.Win32.MediaFoundation.MFVideoInterlaceMode,
    VideoFlags: {"kind":"UInt64"},
    qwFramesPerSecondNumerator: {"kind":"UInt64"},
    qwFramesPerSecondDenominator: {"kind":"UInt64"},
    dwMaxBitRate: {"kind":"UInt32"},
    ppIVideoMediaType: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFVideoMediaType},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFGetStrideForBitmapInfoHeader(
    format: {"kind":"UInt32"},
    dwWidth: {"kind":"UInt32"},
    pStride: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFGetPlaneSize(
    format: {"kind":"UInt32"},
    dwWidth: {"kind":"UInt32"},
    dwHeight: {"kind":"UInt32"},
    pdwPlaneSize: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateVideoMediaTypeFromBitMapInfoHeaderEx(
    pbmihBitMapInfoHeader: {"kind""Ptr","child":Windows.Win32.DirectShow.BITMAPINFOHEADER},
    cbBitMapInfoHeader: {"kind":"UInt32"},
    dwPixelAspectRatioX: {"kind":"UInt32"},
    dwPixelAspectRatioY: {"kind":"UInt32"},
    InterlaceMode: Windows.Win32.MediaFoundation.MFVideoInterlaceMode,
    VideoFlags: {"kind":"UInt64"},
    dwFramesPerSecondNumerator: {"kind":"UInt32"},
    dwFramesPerSecondDenominator: {"kind":"UInt32"},
    dwMaxBitRate: {"kind":"UInt32"},
    ppIVideoMediaType: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFVideoMediaType},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateMediaTypeFromRepresentation(
    guidRepresentation: Guid,
    pvRepresentation: {"kind""Ptr","child":{"kind":"Void"}},
    ppIMediaType: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFMediaType},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateAudioMediaType(
    pAudioFormat: {"kind""Ptr","child":Windows.Win32.Multimedia.WAVEFORMATEX},
    ppIAudioMediaType: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFAudioMediaType},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFGetUncompressedVideoFormat(
    pVideoFormat: {"kind""Ptr","child":Windows.Win32.MediaFoundation.MFVIDEOFORMAT},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFInitVideoFormat(
    pVideoFormat: {"kind""Ptr","child":Windows.Win32.MediaFoundation.MFVIDEOFORMAT},
    type: Windows.Win32.MediaFoundation.MFStandardVideoFormat,

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFInitVideoFormat_RGB(
    pVideoFormat: {"kind""Ptr","child":Windows.Win32.MediaFoundation.MFVIDEOFORMAT},
    dwWidth: {"kind":"UInt32"},
    dwHeight: {"kind":"UInt32"},
    D3Dfmt: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFConvertColorInfoToDXVA(
    pdwToDXVA: {"kind""Ptr","child":{"kind":"UInt32"}},
    pFromFormat: {"kind""Ptr","child":Windows.Win32.MediaFoundation.MFVIDEOFORMAT},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFConvertColorInfoFromDXVA(
    pToFormat: {"kind""Ptr","child":Windows.Win32.MediaFoundation.MFVIDEOFORMAT},
    dwFromDXVA: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCopyImage(
    pDest: {"kind""Ptr","child":{"kind":"Byte"}},
    lDestStride: {"kind":"Int32"},
    pSrc: {"kind""Ptr","child":{"kind":"Byte"}},
    lSrcStride: {"kind":"Int32"},
    dwWidthInBytes: {"kind":"UInt32"},
    dwLines: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFConvertFromFP16Array(
    pDest: {"kind""Ptr","child":{"kind":"Single"}},
    pSrc: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwCount: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFConvertToFP16Array(
    pDest: {"kind""Ptr","child":{"kind":"UInt16"}},
    pSrc: {"kind""Ptr","child":{"kind":"Single"}},
    dwCount: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreate2DMediaBuffer(
    dwWidth: {"kind":"UInt32"},
    dwHeight: {"kind":"UInt32"},
    dwFourCC: {"kind":"UInt32"},
    fBottomUp: Windows.Win32.SystemServices.BOOL,
    ppBuffer: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFMediaBuffer},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateMediaBufferFromMediaType(
    pMediaType: Windows.Win32.MediaFoundation.IMFMediaType,
    llDuration: {"kind":"Int64"},
    dwMinLength: {"kind":"UInt32"},
    dwMinAlignment: {"kind":"UInt32"},
    ppBuffer: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFMediaBuffer},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCreateCollection(
    ppIMFCollection: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFCollection},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFHeapAlloc(
    nSize: {"kind":"UIntPtr"},
    dwFlags: {"kind":"UInt32"},
    pszFile: {"kind""Ptr","child":{"kind":"SByte"}},
    line: {"kind":"Int32"},
    eat: Windows.Win32.MediaFoundation.EAllocationType,

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFHeapFree(
    pv: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFllMulDiv(
    a: {"kind":"Int64"},
    b: {"kind":"Int64"},
    c: {"kind":"Int64"},
    d: {"kind":"Int64"},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFGetContentProtectionSystemCLSID(
    guidProtectionSystemID: {"kind""Ptr","child":Guid},
    pclsid: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFCombineSamples(
    pSample: Windows.Win32.MediaFoundation.IMFSample,
    pSampleToAdd: Windows.Win32.MediaFoundation.IMFSample,
    dwMaxMergedDurationInMS: {"kind":"UInt32"},
    pMerged: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlat" fn MFSplitSample(
    pSample: Windows.Win32.MediaFoundation.IMFSample,
    pOutputSamples: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFSample},
    dwOutputSampleMaxCount: {"kind":"UInt32"},
    pdwOutputSampleCount: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "MFReadWrite" fn MFCreateSourceReaderFromURL(
    pwszURL: {"kind""Ptr","child":{"kind":"UInt16"}},
    pAttributes: Windows.Win32.MediaFoundation.IMFAttributes,
    ppSourceReader: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFSourceReader},

// set_last_errror=False (can and should we use this?)
pub extern "MFReadWrite" fn MFCreateSourceReaderFromByteStream(
    pByteStream: Windows.Win32.MediaFoundation.IMFByteStream,
    pAttributes: Windows.Win32.MediaFoundation.IMFAttributes,
    ppSourceReader: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFSourceReader},

// set_last_errror=False (can and should we use this?)
pub extern "MFReadWrite" fn MFCreateSourceReaderFromMediaSource(
    pMediaSource: Windows.Win32.MediaFoundation.IMFMediaSource,
    pAttributes: Windows.Win32.MediaFoundation.IMFAttributes,
    ppSourceReader: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFSourceReader},

// set_last_errror=False (can and should we use this?)
pub extern "MFReadWrite" fn MFCreateSinkWriterFromURL(
    pwszOutputURL: {"kind""Ptr","child":{"kind":"UInt16"}},
    pByteStream: Windows.Win32.MediaFoundation.IMFByteStream,
    pAttributes: Windows.Win32.MediaFoundation.IMFAttributes,
    ppSinkWriter: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFSinkWriter},

// set_last_errror=False (can and should we use this?)
pub extern "MFReadWrite" fn MFCreateSinkWriterFromMediaSink(
    pMediaSink: Windows.Win32.MediaFoundation.IMFMediaSink,
    pAttributes: Windows.Win32.MediaFoundation.IMFAttributes,
    ppSinkWriter: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFSinkWriter},

// set_last_errror=False (can and should we use this?)
pub extern "EVR" fn MFCreateVideoPresenter(
    pOwner: Windows.Win32.Com.IUnknown,
    riidDevice: {"kind""Ptr","child":Guid},
    riid: {"kind""Ptr","child":Guid},
    ppVideoPresenter: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "EVR" fn MFCreateVideoMixer(
    pOwner: Windows.Win32.Com.IUnknown,
    riidDevice: {"kind""Ptr","child":Guid},
    riid: {"kind""Ptr","child":Guid},
    ppv: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "EVR" fn MFCreateVideoMixerAndPresenter(
    pMixerOwner: Windows.Win32.Com.IUnknown,
    pPresenterOwner: Windows.Win32.Com.IUnknown,
    riidMixer: {"kind""Ptr","child":Guid},
    ppvVideoMixer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    riidPresenter: {"kind""Ptr","child":Guid},
    ppvVideoPresenter: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateVideoRenderer(
    riidRenderer: {"kind""Ptr","child":Guid},
    ppVideoRenderer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "EVR" fn MFCreateVideoSampleFromSurface(
    pUnkSurface: Windows.Win32.Com.IUnknown,
    ppSample: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFSample},

// set_last_errror=False (can and should we use this?)
pub extern "EVR" fn MFCreateVideoSampleAllocator(
    riid: {"kind""Ptr","child":Guid},
    ppSampleAllocator: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "MFPlay" fn MFPCreateMediaPlayer(
    pwszURL: {"kind""Ptr","child":{"kind":"UInt16"}},
    fStartPlayback: Windows.Win32.SystemServices.BOOL,
    creationOptions: {"kind":"UInt32"},
    pCallback: Windows.Win32.MediaFoundation.IMFPMediaPlayerCallback,
    hWnd: Windows.Win32.WindowsAndMessaging.HWND,
    ppMediaPlayer: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFPMediaPlayer},

// set_last_errror=False (can and should we use this?)
pub extern "MF" fn MFCreateEncryptedMediaExtensionsStoreActivate(
    pmpHost: Windows.Win32.MediaFoundation.IMFPMPHostApp,
    objectStream: Windows.Win32.StructuredStorage.IStream,
    classId: {"kind""Ptr","child":{"kind":"UInt16"}},
    activate: {"kind""Ptr","child":Windows.Win32.MediaFoundation.IMFActivate},
],

"unicode_aliases": [
]}
