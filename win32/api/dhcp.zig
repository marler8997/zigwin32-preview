//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: DHCPV6CAPI_PARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCPV6CAPI_PARAMS = extern struct {
    Flags: u32,
    OptionId: u32,
    IsVendor: BOOL,
    Data: ?*u8,
    nBytesData: u32,
};
// --------------------------------------------------------
// Type: DHCPV6CAPI_PARAMS_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCPV6CAPI_PARAMS_ARRAY = extern struct {
    nParams: u32,
    Params: ?*DHCPV6CAPI_PARAMS,
};
// --------------------------------------------------------
// Type: DHCPV6CAPI_CLASSID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCPV6CAPI_CLASSID = extern struct {
    Flags: u32,
    Data: ?*u8,
    nBytesData: u32,
};
// --------------------------------------------------------
// Type: StatusCode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const StatusCode = *opaque{
};
// --------------------------------------------------------
// Type: DHCPV6Prefix
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCPV6Prefix = extern struct {
    prefix: ?[*]u8,
    prefixLength: u32,
    preferredLifeTime: u32,
    validLifeTime: u32,
    status: StatusCode,
};
// --------------------------------------------------------
// Type: DHCPV6PrefixLeaseInformation
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCPV6PrefixLeaseInformation = extern struct {
    nPrefixes: u32,
    prefixArray: ?*DHCPV6Prefix,
    iaid: u32,
    T1: i64,
    T2: i64,
    MaxLeaseExpirationTime: i64,
    LastRenewalTime: i64,
    status: StatusCode,
    ServerId: ?*u8,
    ServerIdLen: u32,
};
// --------------------------------------------------------
// Type: DHCPAPI_PARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCPAPI_PARAMS = extern struct {
    Flags: u32,
    OptionId: u32,
    IsVendor: BOOL,
    Data: ?*u8,
    nBytesData: u32,
};
// --------------------------------------------------------
// Type: DHCPCAPI_PARAMS_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCPCAPI_PARAMS_ARRAY = extern struct {
    nParams: u32,
    Params: ?*DHCPAPI_PARAMS,
};
// --------------------------------------------------------
// Type: DHCPCAPI_CLASSID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCPCAPI_CLASSID = extern struct {
    Flags: u32,
    Data: ?*u8,
    nBytesData: u32,
};
// --------------------------------------------------------
// Type: DHCP_SERVER_OPTIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_SERVER_OPTIONS = extern struct {
    MessageType: ?*u8,
    SubnetMask: ?*u32,
    RequestedAddress: ?*u32,
    RequestLeaseTime: ?*u32,
    OverlayFields: ?*u8,
    RouterAddress: ?*u32,
    Server: ?*u32,
    ParameterRequestList: ?*u8,
    ParameterRequestListLength: u32,
    MachineName: ?*i8,
    MachineNameLength: u32,
    ClientHardwareAddressType: u8,
    ClientHardwareAddressLength: u8,
    ClientHardwareAddress: ?*u8,
    ClassIdentifier: ?*i8,
    ClassIdentifierLength: u32,
    VendorClass: ?*u8,
    VendorClassLength: u32,
    DNSFlags: u32,
    DNSNameLength: u32,
    DNSName: ?*u8,
    DSDomainNameRequested: u8,
    DSDomainName: ?*i8,
    DSDomainNameLen: u32,
    ScopeId: ?*u32,
};
// --------------------------------------------------------
// Type: LPDHCP_CONTROL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDHCP_CONTROL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDHCP_NEWPKT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDHCP_NEWPKT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDHCP_DROP_SEND
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDHCP_DROP_SEND = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDHCP_PROB
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDHCP_PROB = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDHCP_GIVE_ADDRESS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDHCP_GIVE_ADDRESS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDHCP_HANDLE_OPTIONS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDHCP_HANDLE_OPTIONS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDHCP_DELETE_CLIENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDHCP_DELETE_CLIENT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DHCP_CALLOUT_TABLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_CALLOUT_TABLE = extern struct {
    DhcpControlHook: LPDHCP_CONTROL,
    DhcpNewPktHook: LPDHCP_NEWPKT,
    DhcpPktDropHook: LPDHCP_DROP_SEND,
    DhcpPktSendHook: LPDHCP_DROP_SEND,
    DhcpAddressDelHook: LPDHCP_PROB,
    DhcpAddressOfferHook: LPDHCP_GIVE_ADDRESS,
    DhcpHandleOptionsHook: LPDHCP_HANDLE_OPTIONS,
    DhcpDeleteClientHook: LPDHCP_DELETE_CLIENT,
    DhcpExtensionHook: ?*opaque{},
    DhcpReservedHook: ?*opaque{},
};
// --------------------------------------------------------
// Type: LPDHCP_ENTRY_POINT_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDHCP_ENTRY_POINT_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DATE_TIME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DATE_TIME = extern struct {
    dwLowDateTime: u32,
    dwHighDateTime: u32,
};
// --------------------------------------------------------
// Type: DHCP_IP_RANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_IP_RANGE = extern struct {
    StartAddress: u32,
    EndAddress: u32,
};
// --------------------------------------------------------
// Type: DHCP_BINARY_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_BINARY_DATA = extern struct {
    DataLength: u32,
    Data: ?*u8,
};
// --------------------------------------------------------
// Type: DHCP_HOST_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_HOST_INFO = extern struct {
    IpAddress: u32,
    NetBiosName: ?*u16,
    HostName: ?*u16,
};
// --------------------------------------------------------
// Type: DHCP_FORCE_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DHCP_FORCE_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: DWORD_DWORD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWORD_DWORD = extern struct {
    DWord1: u32,
    DWord2: u32,
};
// --------------------------------------------------------
// Type: DHCP_SUBNET_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DHCP_SUBNET_STATE = *opaque{
};
// --------------------------------------------------------
// Type: DHCP_SUBNET_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_SUBNET_INFO = extern struct {
    SubnetAddress: u32,
    SubnetMask: u32,
    SubnetName: ?*u16,
    SubnetComment: ?*u16,
    PrimaryHost: DHCP_HOST_INFO,
    SubnetState: DHCP_SUBNET_STATE,
};
// --------------------------------------------------------
// Type: DHCP_SUBNET_INFO_VQ
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_SUBNET_INFO_VQ = extern struct {
    SubnetAddress: u32,
    SubnetMask: u32,
    SubnetName: ?*u16,
    SubnetComment: ?*u16,
    PrimaryHost: DHCP_HOST_INFO,
    SubnetState: DHCP_SUBNET_STATE,
    QuarantineOn: u32,
    Reserved1: u32,
    Reserved2: u32,
    Reserved3: i64,
    Reserved4: i64,
};
// --------------------------------------------------------
// Type: DHCP_IP_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_IP_ARRAY = extern struct {
    NumElements: u32,
    Elements: ?*u32,
};
// --------------------------------------------------------
// Type: DHCP_IP_CLUSTER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_IP_CLUSTER = extern struct {
    ClusterAddress: u32,
    ClusterMask: u32,
};
// --------------------------------------------------------
// Type: DHCP_IP_RESERVATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_IP_RESERVATION = extern struct {
    ReservedIpAddress: u32,
    ReservedForClient: ?*DHCP_BINARY_DATA,
};
// --------------------------------------------------------
// Type: DHCP_SUBNET_ELEMENT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DHCP_SUBNET_ELEMENT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DHCP_SUBNET_ELEMENT_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_SUBNET_ELEMENT_DATA = extern struct {
    ElementType: DHCP_SUBNET_ELEMENT_TYPE,
    Element: DHCP_SUBNET_ELEMENT_UNION,
    // --------------------------------------------------------
    // Type: DHCP_SUBNET_ELEMENT_UNION
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const DHCP_SUBNET_ELEMENT_UNION = *opaque{
    };
};
// --------------------------------------------------------
// Type: DHCP_SUBNET_ELEMENT_UNION
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const DHCP_SUBNET_ELEMENT_UNION = *opaque{
};
// --------------------------------------------------------
// Type: DHCP_SUBNET_ELEMENT_INFO_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_SUBNET_ELEMENT_INFO_ARRAY = extern struct {
    NumElements: u32,
    Elements: ?*DHCP_SUBNET_ELEMENT_DATA,
};
// --------------------------------------------------------
// Type: DHCP_IPV6_ADDRESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_IPV6_ADDRESS = extern struct {
    HighOrderBits: u64,
    LowOrderBits: u64,
};
// --------------------------------------------------------
// Type: DHCP_FILTER_LIST_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DHCP_FILTER_LIST_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DHCP_ADDR_PATTERN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_ADDR_PATTERN = extern struct {
    MatchHWType: BOOL,
    HWType: u8,
    IsWildcard: BOOL,
    Length: u8,
    Pattern: ?[*]u8,
};
// --------------------------------------------------------
// Type: DHCP_FILTER_ADD_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_FILTER_ADD_INFO = extern struct {
    AddrPatt: DHCP_ADDR_PATTERN,
    Comment: ?*u16,
    ListType: DHCP_FILTER_LIST_TYPE,
};
// --------------------------------------------------------
// Type: DHCP_FILTER_GLOBAL_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_FILTER_GLOBAL_INFO = extern struct {
    EnforceAllowList: BOOL,
    EnforceDenyList: BOOL,
};
// --------------------------------------------------------
// Type: DHCP_FILTER_RECORD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_FILTER_RECORD = extern struct {
    AddrPatt: DHCP_ADDR_PATTERN,
    Comment: ?*u16,
};
// --------------------------------------------------------
// Type: DHCP_FILTER_ENUM_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_FILTER_ENUM_INFO = extern struct {
    NumElements: u32,
    pEnumRecords: ?*DHCP_FILTER_RECORD,
};
// --------------------------------------------------------
// Type: DHCP_OPTION_DATA_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DHCP_OPTION_DATA_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DHCP_OPTION_DATA_ELEMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_OPTION_DATA_ELEMENT = extern struct {
    OptionType: DHCP_OPTION_DATA_TYPE,
    Element: DHCP_OPTION_ELEMENT_UNION,
    // --------------------------------------------------------
    // Type: DHCP_OPTION_ELEMENT_UNION
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const DHCP_OPTION_ELEMENT_UNION = *opaque{
    };
};
// --------------------------------------------------------
// Type: DHCP_OPTION_ELEMENT_UNION
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const DHCP_OPTION_ELEMENT_UNION = *opaque{
};
// --------------------------------------------------------
// Type: DHCP_OPTION_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_OPTION_DATA = extern struct {
    NumElements: u32,
    Elements: ?*DHCP_OPTION_DATA_ELEMENT,
};
// --------------------------------------------------------
// Type: DHCP_OPTION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DHCP_OPTION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DHCP_OPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_OPTION = extern struct {
    OptionID: u32,
    OptionName: ?*u16,
    OptionComment: ?*u16,
    DefaultValue: DHCP_OPTION_DATA,
    OptionType: DHCP_OPTION_TYPE,
};
// --------------------------------------------------------
// Type: DHCP_OPTION_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_OPTION_ARRAY = extern struct {
    NumElements: u32,
    Options: ?*DHCP_OPTION,
};
// --------------------------------------------------------
// Type: DHCP_OPTION_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_OPTION_VALUE = extern struct {
    OptionID: u32,
    Value: DHCP_OPTION_DATA,
};
// --------------------------------------------------------
// Type: DHCP_OPTION_VALUE_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_OPTION_VALUE_ARRAY = extern struct {
    NumElements: u32,
    Values: ?*DHCP_OPTION_VALUE,
};
// --------------------------------------------------------
// Type: DHCP_OPTION_SCOPE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DHCP_OPTION_SCOPE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DHCP_RESERVED_SCOPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_RESERVED_SCOPE = extern struct {
    ReservedIpAddress: u32,
    ReservedIpSubnetAddress: u32,
};
// --------------------------------------------------------
// Type: DHCP_OPTION_SCOPE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_OPTION_SCOPE_INFO = extern struct {
    ScopeType: DHCP_OPTION_SCOPE_TYPE,
    ScopeInfo: _DHCP_OPTION_SCOPE_UNION,
    // --------------------------------------------------------
    // Type: _DHCP_OPTION_SCOPE_UNION
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _DHCP_OPTION_SCOPE_UNION = *opaque{
    };
};
// --------------------------------------------------------
// Type: DHCP_OPTION_SCOPE_TYPE6
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DHCP_OPTION_SCOPE_TYPE6 = *opaque{
};
// --------------------------------------------------------
// Type: DHCP_RESERVED_SCOPE6
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_RESERVED_SCOPE6 = extern struct {
    ReservedIpAddress: DHCP_IPV6_ADDRESS,
    ReservedIpSubnetAddress: DHCP_IPV6_ADDRESS,
};
// --------------------------------------------------------
// Type: DHCP_OPTION_SCOPE_INFO6
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_OPTION_SCOPE_INFO6 = extern struct {
    ScopeType: DHCP_OPTION_SCOPE_TYPE6,
    ScopeInfo: DHCP_OPTION_SCOPE_UNION6,
    // --------------------------------------------------------
    // Type: DHCP_OPTION_SCOPE_UNION6
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const DHCP_OPTION_SCOPE_UNION6 = *opaque{
    };
};
// --------------------------------------------------------
// Type: DHCP_OPTION_SCOPE_UNION6
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const DHCP_OPTION_SCOPE_UNION6 = *opaque{
};
// --------------------------------------------------------
// Type: DHCP_OPTION_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_OPTION_LIST = extern struct {
    NumOptions: u32,
    Options: ?*DHCP_OPTION_VALUE,
};
// --------------------------------------------------------
// Type: DHCP_CLIENT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_CLIENT_INFO = extern struct {
    ClientIpAddress: u32,
    SubnetMask: u32,
    ClientHardwareAddress: DHCP_BINARY_DATA,
    ClientName: ?*u16,
    ClientComment: ?*u16,
    ClientLeaseExpires: DATE_TIME,
    OwnerHost: DHCP_HOST_INFO,
};
// --------------------------------------------------------
// Type: DHCP_CLIENT_INFO_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_CLIENT_INFO_ARRAY = extern struct {
    NumElements: u32,
    Clients: ?*?*DHCP_CLIENT_INFO,
};
// --------------------------------------------------------
// Type: QuarantineStatus
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QuarantineStatus = *opaque{
};
// --------------------------------------------------------
// Type: DHCP_CLIENT_INFO_VQ
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_CLIENT_INFO_VQ = extern struct {
    ClientIpAddress: u32,
    SubnetMask: u32,
    ClientHardwareAddress: DHCP_BINARY_DATA,
    ClientName: ?*u16,
    ClientComment: ?*u16,
    ClientLeaseExpires: DATE_TIME,
    OwnerHost: DHCP_HOST_INFO,
    bClientType: u8,
    AddressState: u8,
    Status: QuarantineStatus,
    ProbationEnds: DATE_TIME,
    QuarantineCapable: BOOL,
};
// --------------------------------------------------------
// Type: DHCP_CLIENT_INFO_ARRAY_VQ
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_CLIENT_INFO_ARRAY_VQ = extern struct {
    NumElements: u32,
    Clients: ?*?*DHCP_CLIENT_INFO_VQ,
};
// --------------------------------------------------------
// Type: DHCP_CLIENT_FILTER_STATUS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_CLIENT_FILTER_STATUS_INFO = extern struct {
    ClientIpAddress: u32,
    SubnetMask: u32,
    ClientHardwareAddress: DHCP_BINARY_DATA,
    ClientName: ?*u16,
    ClientComment: ?*u16,
    ClientLeaseExpires: DATE_TIME,
    OwnerHost: DHCP_HOST_INFO,
    bClientType: u8,
    AddressState: u8,
    Status: QuarantineStatus,
    ProbationEnds: DATE_TIME,
    QuarantineCapable: BOOL,
    FilterStatus: u32,
};
// --------------------------------------------------------
// Type: DHCP_CLIENT_FILTER_STATUS_INFO_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_CLIENT_FILTER_STATUS_INFO_ARRAY = extern struct {
    NumElements: u32,
    Clients: ?*?*DHCP_CLIENT_FILTER_STATUS_INFO,
};
// --------------------------------------------------------
// Type: DHCP_CLIENT_INFO_PB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_CLIENT_INFO_PB = extern struct {
    ClientIpAddress: u32,
    SubnetMask: u32,
    ClientHardwareAddress: DHCP_BINARY_DATA,
    ClientName: ?*u16,
    ClientComment: ?*u16,
    ClientLeaseExpires: DATE_TIME,
    OwnerHost: DHCP_HOST_INFO,
    bClientType: u8,
    AddressState: u8,
    Status: QuarantineStatus,
    ProbationEnds: DATE_TIME,
    QuarantineCapable: BOOL,
    FilterStatus: u32,
    PolicyName: ?*u16,
};
// --------------------------------------------------------
// Type: DHCP_CLIENT_INFO_PB_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_CLIENT_INFO_PB_ARRAY = extern struct {
    NumElements: u32,
    Clients: ?*?*DHCP_CLIENT_INFO_PB,
};
// --------------------------------------------------------
// Type: DHCP_SEARCH_INFO_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DHCP_SEARCH_INFO_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DHCP_SEARCH_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_SEARCH_INFO = extern struct {
    SearchType: DHCP_SEARCH_INFO_TYPE,
    SearchInfo: DHCP_CLIENT_SEARCH_UNION,
    // --------------------------------------------------------
    // Type: DHCP_CLIENT_SEARCH_UNION
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const DHCP_CLIENT_SEARCH_UNION = *opaque{
    };
};
// --------------------------------------------------------
// Type: DHCP_CLIENT_SEARCH_UNION
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const DHCP_CLIENT_SEARCH_UNION = *opaque{
};
// --------------------------------------------------------
// Type: DHCP_PROPERTY_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DHCP_PROPERTY_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DHCP_PROPERTY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DHCP_PROPERTY_ID = *opaque{
};
// --------------------------------------------------------
// Type: DHCP_PROPERTY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_PROPERTY = extern struct {
    ID: DHCP_PROPERTY_ID,
    Type: DHCP_PROPERTY_TYPE,
    Value: _DHCP_PROPERTY_VALUE_UNION,
    // --------------------------------------------------------
    // Type: _DHCP_PROPERTY_VALUE_UNION
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _DHCP_PROPERTY_VALUE_UNION = *opaque{
    };
};
// --------------------------------------------------------
// Type: DHCP_PROPERTY_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_PROPERTY_ARRAY = extern struct {
    NumElements: u32,
    Elements: ?*DHCP_PROPERTY,
};
// --------------------------------------------------------
// Type: DHCP_CLIENT_INFO_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_CLIENT_INFO_EX = extern struct {
    ClientIpAddress: u32,
    SubnetMask: u32,
    ClientHardwareAddress: DHCP_BINARY_DATA,
    ClientName: ?*u16,
    ClientComment: ?*u16,
    ClientLeaseExpires: DATE_TIME,
    OwnerHost: DHCP_HOST_INFO,
    bClientType: u8,
    AddressState: u8,
    Status: QuarantineStatus,
    ProbationEnds: DATE_TIME,
    QuarantineCapable: BOOL,
    FilterStatus: u32,
    PolicyName: ?*u16,
    Properties: ?*DHCP_PROPERTY_ARRAY,
};
// --------------------------------------------------------
// Type: DHCP_CLIENT_INFO_EX_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_CLIENT_INFO_EX_ARRAY = extern struct {
    NumElements: u32,
    Clients: ?*?*DHCP_CLIENT_INFO_EX,
};
// --------------------------------------------------------
// Type: SCOPE_MIB_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCOPE_MIB_INFO = extern struct {
    Subnet: u32,
    NumAddressesInuse: u32,
    NumAddressesFree: u32,
    NumPendingOffers: u32,
};
// --------------------------------------------------------
// Type: DHCP_MIB_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_MIB_INFO = extern struct {
    Discovers: u32,
    Offers: u32,
    Requests: u32,
    Acks: u32,
    Naks: u32,
    Declines: u32,
    Releases: u32,
    ServerStartTime: DATE_TIME,
    Scopes: u32,
    ScopeInfo: ?*SCOPE_MIB_INFO,
};
// --------------------------------------------------------
// Type: SCOPE_MIB_INFO_VQ
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCOPE_MIB_INFO_VQ = extern struct {
    Subnet: u32,
    NumAddressesInuse: u32,
    NumAddressesFree: u32,
    NumPendingOffers: u32,
    QtnNumLeases: u32,
    QtnPctQtnLeases: u32,
    QtnProbationLeases: u32,
    QtnNonQtnLeases: u32,
    QtnExemptLeases: u32,
    QtnCapableClients: u32,
};
// --------------------------------------------------------
// Type: DHCP_MIB_INFO_VQ
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_MIB_INFO_VQ = extern struct {
    Discovers: u32,
    Offers: u32,
    Requests: u32,
    Acks: u32,
    Naks: u32,
    Declines: u32,
    Releases: u32,
    ServerStartTime: DATE_TIME,
    QtnNumLeases: u32,
    QtnPctQtnLeases: u32,
    QtnProbationLeases: u32,
    QtnNonQtnLeases: u32,
    QtnExemptLeases: u32,
    QtnCapableClients: u32,
    QtnIASErrors: u32,
    Scopes: u32,
    ScopeInfo: ?*SCOPE_MIB_INFO_VQ,
};
// --------------------------------------------------------
// Type: SCOPE_MIB_INFO_V5
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCOPE_MIB_INFO_V5 = extern struct {
    Subnet: u32,
    NumAddressesInuse: u32,
    NumAddressesFree: u32,
    NumPendingOffers: u32,
};
// --------------------------------------------------------
// Type: DHCP_MIB_INFO_V5
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_MIB_INFO_V5 = extern struct {
    Discovers: u32,
    Offers: u32,
    Requests: u32,
    Acks: u32,
    Naks: u32,
    Declines: u32,
    Releases: u32,
    ServerStartTime: DATE_TIME,
    QtnNumLeases: u32,
    QtnPctQtnLeases: u32,
    QtnProbationLeases: u32,
    QtnNonQtnLeases: u32,
    QtnExemptLeases: u32,
    QtnCapableClients: u32,
    QtnIASErrors: u32,
    DelayedOffers: u32,
    ScopesWithDelayedOffers: u32,
    Scopes: u32,
    ScopeInfo: ?*SCOPE_MIB_INFO_V5,
};
// --------------------------------------------------------
// Type: DHCP_SERVER_CONFIG_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_SERVER_CONFIG_INFO = extern struct {
    APIProtocolSupport: u32,
    DatabaseName: ?*u16,
    DatabasePath: ?*u16,
    BackupPath: ?*u16,
    BackupInterval: u32,
    DatabaseLoggingFlag: u32,
    RestoreFlag: u32,
    DatabaseCleanupInterval: u32,
    DebugFlag: u32,
};
// --------------------------------------------------------
// Type: DHCP_SCAN_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DHCP_SCAN_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: DHCP_SCAN_ITEM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_SCAN_ITEM = extern struct {
    IpAddress: u32,
    ScanFlag: DHCP_SCAN_FLAG,
};
// --------------------------------------------------------
// Type: DHCP_SCAN_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_SCAN_LIST = extern struct {
    NumScanItems: u32,
    ScanItems: ?*DHCP_SCAN_ITEM,
};
// --------------------------------------------------------
// Type: DHCP_CLASS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_CLASS_INFO = extern struct {
    ClassName: ?*u16,
    ClassComment: ?*u16,
    ClassDataLength: u32,
    IsVendor: BOOL,
    Flags: u32,
    ClassData: ?*u8,
};
// --------------------------------------------------------
// Type: DHCP_CLASS_INFO_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_CLASS_INFO_ARRAY = extern struct {
    NumElements: u32,
    Classes: ?*DHCP_CLASS_INFO,
};
// --------------------------------------------------------
// Type: DHCP_CLASS_INFO_V6
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_CLASS_INFO_V6 = extern struct {
    ClassName: ?*u16,
    ClassComment: ?*u16,
    ClassDataLength: u32,
    IsVendor: BOOL,
    EnterpriseNumber: u32,
    Flags: u32,
    ClassData: ?*u8,
};
// --------------------------------------------------------
// Type: DHCP_CLASS_INFO_ARRAY_V6
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_CLASS_INFO_ARRAY_V6 = extern struct {
    NumElements: u32,
    Classes: ?*DHCP_CLASS_INFO_V6,
};
// --------------------------------------------------------
// Type: DHCP_SERVER_SPECIFIC_STRINGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_SERVER_SPECIFIC_STRINGS = extern struct {
    DefaultVendorClassName: ?*u16,
    DefaultUserClassName: ?*u16,
};
// --------------------------------------------------------
// Type: DHCP_IP_RESERVATION_V4
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_IP_RESERVATION_V4 = extern struct {
    ReservedIpAddress: u32,
    ReservedForClient: ?*DHCP_BINARY_DATA,
    bAllowedClientTypes: u8,
};
// --------------------------------------------------------
// Type: DHCP_IP_RESERVATION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_IP_RESERVATION_INFO = extern struct {
    ReservedIpAddress: u32,
    ReservedForClient: DHCP_BINARY_DATA,
    ReservedClientName: ?*u16,
    ReservedClientDesc: ?*u16,
    bAllowedClientTypes: u8,
    fOptionsPresent: u8,
};
// --------------------------------------------------------
// Type: DHCP_RESERVATION_INFO_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_RESERVATION_INFO_ARRAY = extern struct {
    NumElements: u32,
    Elements: ?*?*DHCP_IP_RESERVATION_INFO,
};
// --------------------------------------------------------
// Type: DHCP_SUBNET_ELEMENT_DATA_V4
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_SUBNET_ELEMENT_DATA_V4 = extern struct {
    ElementType: DHCP_SUBNET_ELEMENT_TYPE,
    Element: DHCP_SUBNET_ELEMENT_UNION_V4,
    // --------------------------------------------------------
    // Type: DHCP_SUBNET_ELEMENT_UNION_V4
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const DHCP_SUBNET_ELEMENT_UNION_V4 = *opaque{
    };
};
// --------------------------------------------------------
// Type: DHCP_SUBNET_ELEMENT_UNION_V4
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const DHCP_SUBNET_ELEMENT_UNION_V4 = *opaque{
};
// --------------------------------------------------------
// Type: DHCP_SUBNET_ELEMENT_INFO_ARRAY_V4
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_SUBNET_ELEMENT_INFO_ARRAY_V4 = extern struct {
    NumElements: u32,
    Elements: ?*DHCP_SUBNET_ELEMENT_DATA_V4,
};
// --------------------------------------------------------
// Type: DHCP_CLIENT_INFO_V4
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_CLIENT_INFO_V4 = extern struct {
    ClientIpAddress: u32,
    SubnetMask: u32,
    ClientHardwareAddress: DHCP_BINARY_DATA,
    ClientName: ?*u16,
    ClientComment: ?*u16,
    ClientLeaseExpires: DATE_TIME,
    OwnerHost: DHCP_HOST_INFO,
    bClientType: u8,
};
// --------------------------------------------------------
// Type: DHCP_CLIENT_INFO_ARRAY_V4
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_CLIENT_INFO_ARRAY_V4 = extern struct {
    NumElements: u32,
    Clients: ?*?*DHCP_CLIENT_INFO_V4,
};
// --------------------------------------------------------
// Type: DHCP_SERVER_CONFIG_INFO_V4
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_SERVER_CONFIG_INFO_V4 = extern struct {
    APIProtocolSupport: u32,
    DatabaseName: ?*u16,
    DatabasePath: ?*u16,
    BackupPath: ?*u16,
    BackupInterval: u32,
    DatabaseLoggingFlag: u32,
    RestoreFlag: u32,
    DatabaseCleanupInterval: u32,
    DebugFlag: u32,
    dwPingRetries: u32,
    cbBootTableString: u32,
    wszBootTableString: ?*u16,
    fAuditLog: BOOL,
};
// --------------------------------------------------------
// Type: DHCP_SERVER_CONFIG_INFO_VQ
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_SERVER_CONFIG_INFO_VQ = extern struct {
    APIProtocolSupport: u32,
    DatabaseName: ?*u16,
    DatabasePath: ?*u16,
    BackupPath: ?*u16,
    BackupInterval: u32,
    DatabaseLoggingFlag: u32,
    RestoreFlag: u32,
    DatabaseCleanupInterval: u32,
    DebugFlag: u32,
    dwPingRetries: u32,
    cbBootTableString: u32,
    wszBootTableString: ?*u16,
    fAuditLog: BOOL,
    QuarantineOn: BOOL,
    QuarDefFail: u32,
    QuarRuntimeStatus: BOOL,
};
// --------------------------------------------------------
// Type: DHCP_SERVER_CONFIG_INFO_V6
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_SERVER_CONFIG_INFO_V6 = extern struct {
    UnicastFlag: BOOL,
    RapidCommitFlag: BOOL,
    PreferredLifetime: u32,
    ValidLifetime: u32,
    T1: u32,
    T2: u32,
    PreferredLifetimeIATA: u32,
    ValidLifetimeIATA: u32,
    fAuditLog: BOOL,
};
// --------------------------------------------------------
// Type: DHCP_SUPER_SCOPE_TABLE_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_SUPER_SCOPE_TABLE_ENTRY = extern struct {
    SubnetAddress: u32,
    SuperScopeNumber: u32,
    NextInSuperScope: u32,
    SuperScopeName: ?*u16,
};
// --------------------------------------------------------
// Type: DHCP_SUPER_SCOPE_TABLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_SUPER_SCOPE_TABLE = extern struct {
    cEntries: u32,
    pEntries: ?*DHCP_SUPER_SCOPE_TABLE_ENTRY,
};
// --------------------------------------------------------
// Type: DHCP_CLIENT_INFO_V5
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_CLIENT_INFO_V5 = extern struct {
    ClientIpAddress: u32,
    SubnetMask: u32,
    ClientHardwareAddress: DHCP_BINARY_DATA,
    ClientName: ?*u16,
    ClientComment: ?*u16,
    ClientLeaseExpires: DATE_TIME,
    OwnerHost: DHCP_HOST_INFO,
    bClientType: u8,
    AddressState: u8,
};
// --------------------------------------------------------
// Type: DHCP_CLIENT_INFO_ARRAY_V5
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_CLIENT_INFO_ARRAY_V5 = extern struct {
    NumElements: u32,
    Clients: ?*?*DHCP_CLIENT_INFO_V5,
};
// --------------------------------------------------------
// Type: DHCP_ALL_OPTIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_ALL_OPTIONS = extern struct {
    Flags: u32,
    NonVendorOptions: ?*DHCP_OPTION_ARRAY,
    NumVendorOptions: u32,
    VendorOptions: ?*_Anonymous_e__Struct,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Anonymous_e__Struct = extern struct {
        Option: DHCP_OPTION,
        VendorName: ?*u16,
        ClassName: ?*u16,
    };
};
// --------------------------------------------------------
// Type: DHCP_ALL_OPTION_VALUES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_ALL_OPTION_VALUES = extern struct {
    Flags: u32,
    NumElements: u32,
    Options: ?*_Anonymous_e__Struct,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Anonymous_e__Struct = extern struct {
        ClassName: ?*u16,
        VendorName: ?*u16,
        IsVendor: BOOL,
        OptionsArray: ?*DHCP_OPTION_VALUE_ARRAY,
    };
};
// --------------------------------------------------------
// Type: DHCP_ALL_OPTION_VALUES_PB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_ALL_OPTION_VALUES_PB = extern struct {
    Flags: u32,
    NumElements: u32,
    Options: ?*_Anonymous_e__Struct,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Anonymous_e__Struct = extern struct {
        PolicyName: ?*u16,
        VendorName: ?*u16,
        IsVendor: BOOL,
        OptionsArray: ?*DHCP_OPTION_VALUE_ARRAY,
    };
};
// --------------------------------------------------------
// Type: DHCPDS_SERVER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCPDS_SERVER = extern struct {
    Version: u32,
    ServerName: ?*u16,
    ServerAddress: u32,
    Flags: u32,
    State: u32,
    DsLocation: ?*u16,
    DsLocType: u32,
};
// --------------------------------------------------------
// Type: DHCPDS_SERVERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCPDS_SERVERS = extern struct {
    Flags: u32,
    NumElements: u32,
    Servers: ?*DHCPDS_SERVER,
};
// --------------------------------------------------------
// Type: DHCP_ATTRIB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_ATTRIB = extern struct {
    DhcpAttribId: u32,
    DhcpAttribType: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: DHCP_ATTRIB_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_ATTRIB_ARRAY = extern struct {
    NumElements: u32,
    DhcpAttribs: ?*DHCP_ATTRIB,
};
// --------------------------------------------------------
// Type: DHCP_BOOTP_IP_RANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_BOOTP_IP_RANGE = extern struct {
    StartAddress: u32,
    EndAddress: u32,
    BootpAllocated: u32,
    MaxBootpAllowed: u32,
};
// --------------------------------------------------------
// Type: DHCP_SUBNET_ELEMENT_DATA_V5
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_SUBNET_ELEMENT_DATA_V5 = extern struct {
    ElementType: DHCP_SUBNET_ELEMENT_TYPE,
    Element: _DHCP_SUBNET_ELEMENT_UNION_V5,
    // --------------------------------------------------------
    // Type: _DHCP_SUBNET_ELEMENT_UNION_V5
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _DHCP_SUBNET_ELEMENT_UNION_V5 = *opaque{
    };
};
// --------------------------------------------------------
// Type: DHCP_SUBNET_ELEMENT_INFO_ARRAY_V5
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_SUBNET_ELEMENT_INFO_ARRAY_V5 = extern struct {
    NumElements: u32,
    Elements: ?*DHCP_SUBNET_ELEMENT_DATA_V5,
};
// --------------------------------------------------------
// Type: DHCP_PERF_STATS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_PERF_STATS = extern struct {
    dwNumPacketsReceived: u32,
    dwNumPacketsDuplicate: u32,
    dwNumPacketsExpired: u32,
    dwNumMilliSecondsProcessed: u32,
    dwNumPacketsInActiveQueue: u32,
    dwNumPacketsInPingQueue: u32,
    dwNumDiscoversReceived: u32,
    dwNumOffersSent: u32,
    dwNumRequestsReceived: u32,
    dwNumInformsReceived: u32,
    dwNumAcksSent: u32,
    dwNumNacksSent: u32,
    dwNumDeclinesReceived: u32,
    dwNumReleasesReceived: u32,
    dwNumDelayedOfferInQueue: u32,
    dwNumPacketsProcessed: u32,
    dwNumPacketsInQuarWaitingQueue: u32,
    dwNumPacketsInQuarReadyQueue: u32,
    dwNumPacketsInQuarDecisionQueue: u32,
};
// --------------------------------------------------------
// Type: DHCP_BIND_ELEMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_BIND_ELEMENT = extern struct {
    Flags: u32,
    fBoundToDHCPServer: BOOL,
    AdapterPrimaryAddress: u32,
    AdapterSubnetAddress: u32,
    IfDescription: ?*u16,
    IfIdSize: u32,
    IfId: ?*u8,
};
// --------------------------------------------------------
// Type: DHCP_BIND_ELEMENT_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_BIND_ELEMENT_ARRAY = extern struct {
    NumElements: u32,
    Elements: ?*DHCP_BIND_ELEMENT,
};
// --------------------------------------------------------
// Type: DHCPV6_BIND_ELEMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCPV6_BIND_ELEMENT = extern struct {
    Flags: u32,
    fBoundToDHCPServer: BOOL,
    AdapterPrimaryAddress: DHCP_IPV6_ADDRESS,
    AdapterSubnetAddress: DHCP_IPV6_ADDRESS,
    IfDescription: ?*u16,
    IpV6IfIndex: u32,
    IfIdSize: u32,
    IfId: ?*u8,
};
// --------------------------------------------------------
// Type: DHCPV6_BIND_ELEMENT_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCPV6_BIND_ELEMENT_ARRAY = extern struct {
    NumElements: u32,
    Elements: ?*DHCPV6_BIND_ELEMENT,
};
// --------------------------------------------------------
// Type: DHCP_IP_RANGE_V6
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_IP_RANGE_V6 = extern struct {
    StartAddress: DHCP_IPV6_ADDRESS,
    EndAddress: DHCP_IPV6_ADDRESS,
};
// --------------------------------------------------------
// Type: DHCP_HOST_INFO_V6
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_HOST_INFO_V6 = extern struct {
    IpAddress: DHCP_IPV6_ADDRESS,
    NetBiosName: ?*u16,
    HostName: ?*u16,
};
// --------------------------------------------------------
// Type: DHCP_SUBNET_INFO_V6
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_SUBNET_INFO_V6 = extern struct {
    SubnetAddress: DHCP_IPV6_ADDRESS,
    Prefix: u32,
    Preference: u16,
    SubnetName: ?*u16,
    SubnetComment: ?*u16,
    State: u32,
    ScopeId: u32,
};
// --------------------------------------------------------
// Type: SCOPE_MIB_INFO_V6
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCOPE_MIB_INFO_V6 = extern struct {
    Subnet: DHCP_IPV6_ADDRESS,
    NumAddressesInuse: u64,
    NumAddressesFree: u64,
    NumPendingAdvertises: u64,
};
// --------------------------------------------------------
// Type: DHCP_MIB_INFO_V6
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_MIB_INFO_V6 = extern struct {
    Solicits: u32,
    Advertises: u32,
    Requests: u32,
    Renews: u32,
    Rebinds: u32,
    Replies: u32,
    Confirms: u32,
    Declines: u32,
    Releases: u32,
    Informs: u32,
    ServerStartTime: DATE_TIME,
    Scopes: u32,
    ScopeInfo: ?*SCOPE_MIB_INFO_V6,
};
// --------------------------------------------------------
// Type: DHCP_IP_RESERVATION_V6
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_IP_RESERVATION_V6 = extern struct {
    ReservedIpAddress: DHCP_IPV6_ADDRESS,
    ReservedForClient: ?*DHCP_BINARY_DATA,
    InterfaceId: u32,
};
// --------------------------------------------------------
// Type: DHCP_SUBNET_ELEMENT_TYPE_V6
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DHCP_SUBNET_ELEMENT_TYPE_V6 = *opaque{
};
// --------------------------------------------------------
// Type: DHCP_SUBNET_ELEMENT_DATA_V6
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_SUBNET_ELEMENT_DATA_V6 = extern struct {
    ElementType: DHCP_SUBNET_ELEMENT_TYPE_V6,
    Element: DHCP_SUBNET_ELEMENT_UNION_V6,
    // --------------------------------------------------------
    // Type: DHCP_SUBNET_ELEMENT_UNION_V6
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const DHCP_SUBNET_ELEMENT_UNION_V6 = *opaque{
    };
};
// --------------------------------------------------------
// Type: DHCP_SUBNET_ELEMENT_UNION_V6
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const DHCP_SUBNET_ELEMENT_UNION_V6 = *opaque{
};
// --------------------------------------------------------
// Type: DHCP_SUBNET_ELEMENT_INFO_ARRAY_V6
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_SUBNET_ELEMENT_INFO_ARRAY_V6 = extern struct {
    NumElements: u32,
    Elements: ?*DHCP_SUBNET_ELEMENT_DATA_V6,
};
// --------------------------------------------------------
// Type: DHCP_CLIENT_INFO_V6
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_CLIENT_INFO_V6 = extern struct {
    ClientIpAddress: DHCP_IPV6_ADDRESS,
    ClientDUID: DHCP_BINARY_DATA,
    AddressType: u32,
    IAID: u32,
    ClientName: ?*u16,
    ClientComment: ?*u16,
    ClientValidLeaseExpires: DATE_TIME,
    ClientPrefLeaseExpires: DATE_TIME,
    OwnerHost: DHCP_HOST_INFO_V6,
};
// --------------------------------------------------------
// Type: DHCPV6_IP_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCPV6_IP_ARRAY = extern struct {
    NumElements: u32,
    Elements: ?*DHCP_IPV6_ADDRESS,
};
// --------------------------------------------------------
// Type: DHCP_CLIENT_INFO_ARRAY_V6
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_CLIENT_INFO_ARRAY_V6 = extern struct {
    NumElements: u32,
    Clients: ?*?*DHCP_CLIENT_INFO_V6,
};
// --------------------------------------------------------
// Type: DHCP_SEARCH_INFO_TYPE_V6
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DHCP_SEARCH_INFO_TYPE_V6 = *opaque{
};
// --------------------------------------------------------
// Type: DHCP_SEARCH_INFO_V6
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_SEARCH_INFO_V6 = extern struct {
    SearchType: DHCP_SEARCH_INFO_TYPE_V6,
    SearchInfo: _DHCP_CLIENT_SEARCH_UNION_V6,
    // --------------------------------------------------------
    // Type: _DHCP_CLIENT_SEARCH_UNION_V6
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _DHCP_CLIENT_SEARCH_UNION_V6 = *opaque{
    };
};
// --------------------------------------------------------
// Type: DHCP_POL_ATTR_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DHCP_POL_ATTR_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DHCP_POL_COMPARATOR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DHCP_POL_COMPARATOR = *opaque{
};
// --------------------------------------------------------
// Type: DHCP_POL_LOGIC_OPER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DHCP_POL_LOGIC_OPER = *opaque{
};
// --------------------------------------------------------
// Type: DHCP_POLICY_FIELDS_TO_UPDATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DHCP_POLICY_FIELDS_TO_UPDATE = *opaque{
};
// --------------------------------------------------------
// Type: DHCP_POL_COND
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_POL_COND = extern struct {
    ParentExpr: u32,
    Type: DHCP_POL_ATTR_TYPE,
    OptionID: u32,
    SubOptionID: u32,
    VendorName: ?*u16,
    Operator: DHCP_POL_COMPARATOR,
    Value: ?*u8,
    ValueLength: u32,
};
// --------------------------------------------------------
// Type: DHCP_POL_COND_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_POL_COND_ARRAY = extern struct {
    NumElements: u32,
    Elements: ?*DHCP_POL_COND,
};
// --------------------------------------------------------
// Type: DHCP_POL_EXPR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_POL_EXPR = extern struct {
    ParentExpr: u32,
    Operator: DHCP_POL_LOGIC_OPER,
};
// --------------------------------------------------------
// Type: DHCP_POL_EXPR_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_POL_EXPR_ARRAY = extern struct {
    NumElements: u32,
    Elements: ?*DHCP_POL_EXPR,
};
// --------------------------------------------------------
// Type: DHCP_IP_RANGE_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_IP_RANGE_ARRAY = extern struct {
    NumElements: u32,
    Elements: ?*DHCP_IP_RANGE,
};
// --------------------------------------------------------
// Type: DHCP_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_POLICY = extern struct {
    PolicyName: ?*u16,
    IsGlobalPolicy: BOOL,
    Subnet: u32,
    ProcessingOrder: u32,
    Conditions: ?*DHCP_POL_COND_ARRAY,
    Expressions: ?*DHCP_POL_EXPR_ARRAY,
    Ranges: ?*DHCP_IP_RANGE_ARRAY,
    Description: ?*u16,
    Enabled: BOOL,
};
// --------------------------------------------------------
// Type: DHCP_POLICY_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_POLICY_ARRAY = extern struct {
    NumElements: u32,
    Elements: ?*DHCP_POLICY,
};
// --------------------------------------------------------
// Type: DHCP_POLICY_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_POLICY_EX = extern struct {
    PolicyName: ?*u16,
    IsGlobalPolicy: BOOL,
    Subnet: u32,
    ProcessingOrder: u32,
    Conditions: ?*DHCP_POL_COND_ARRAY,
    Expressions: ?*DHCP_POL_EXPR_ARRAY,
    Ranges: ?*DHCP_IP_RANGE_ARRAY,
    Description: ?*u16,
    Enabled: BOOL,
    Properties: ?*DHCP_PROPERTY_ARRAY,
};
// --------------------------------------------------------
// Type: DHCP_POLICY_EX_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_POLICY_EX_ARRAY = extern struct {
    NumElements: u32,
    Elements: ?*DHCP_POLICY_EX,
};
// --------------------------------------------------------
// Type: DHCPV6_STATELESS_PARAM_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DHCPV6_STATELESS_PARAM_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DHCPV6_STATELESS_PARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCPV6_STATELESS_PARAMS = extern struct {
    Status: BOOL,
    PurgeInterval: u32,
};
// --------------------------------------------------------
// Type: DHCPV6_STATELESS_SCOPE_STATS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCPV6_STATELESS_SCOPE_STATS = extern struct {
    SubnetAddress: DHCP_IPV6_ADDRESS,
    NumStatelessClientsAdded: u64,
    NumStatelessClientsRemoved: u64,
};
// --------------------------------------------------------
// Type: DHCPV6_STATELESS_STATS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCPV6_STATELESS_STATS = extern struct {
    NumScopes: u32,
    ScopeStats: ?*DHCPV6_STATELESS_SCOPE_STATS,
};
// --------------------------------------------------------
// Type: DHCP_FAILOVER_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DHCP_FAILOVER_MODE = *opaque{
};
// --------------------------------------------------------
// Type: DHCP_FAILOVER_SERVER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DHCP_FAILOVER_SERVER = *opaque{
};
// --------------------------------------------------------
// Type: FSM_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FSM_STATE = *opaque{
};
// --------------------------------------------------------
// Type: DHCP_FAILOVER_RELATIONSHIP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_FAILOVER_RELATIONSHIP = extern struct {
    PrimaryServer: u32,
    SecondaryServer: u32,
    Mode: DHCP_FAILOVER_MODE,
    ServerType: DHCP_FAILOVER_SERVER,
    State: FSM_STATE,
    PrevState: FSM_STATE,
    Mclt: u32,
    SafePeriod: u32,
    RelationshipName: ?*u16,
    PrimaryServerName: ?*u16,
    SecondaryServerName: ?*u16,
    pScopes: ?*DHCP_IP_ARRAY,
    Percentage: u8,
    SharedSecret: ?*u16,
};
// --------------------------------------------------------
// Type: DHCP_FAILOVER_RELATIONSHIP_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_FAILOVER_RELATIONSHIP_ARRAY = extern struct {
    NumElements: u32,
    pRelationships: ?*DHCP_FAILOVER_RELATIONSHIP,
};
// --------------------------------------------------------
// Type: DHCPV4_FAILOVER_CLIENT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCPV4_FAILOVER_CLIENT_INFO = extern struct {
    ClientIpAddress: u32,
    SubnetMask: u32,
    ClientHardwareAddress: DHCP_BINARY_DATA,
    ClientName: ?*u16,
    ClientComment: ?*u16,
    ClientLeaseExpires: DATE_TIME,
    OwnerHost: DHCP_HOST_INFO,
    bClientType: u8,
    AddressState: u8,
    Status: QuarantineStatus,
    ProbationEnds: DATE_TIME,
    QuarantineCapable: BOOL,
    SentPotExpTime: u32,
    AckPotExpTime: u32,
    RecvPotExpTime: u32,
    StartTime: u32,
    CltLastTransTime: u32,
    LastBndUpdTime: u32,
    BndMsgStatus: u32,
    PolicyName: ?*u16,
    Flags: u8,
};
// --------------------------------------------------------
// Type: DHCPV4_FAILOVER_CLIENT_INFO_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCPV4_FAILOVER_CLIENT_INFO_ARRAY = extern struct {
    NumElements: u32,
    Clients: ?*?*DHCPV4_FAILOVER_CLIENT_INFO,
};
// --------------------------------------------------------
// Type: DHCPV4_FAILOVER_CLIENT_INFO_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCPV4_FAILOVER_CLIENT_INFO_EX = extern struct {
    ClientIpAddress: u32,
    SubnetMask: u32,
    ClientHardwareAddress: DHCP_BINARY_DATA,
    ClientName: ?*u16,
    ClientComment: ?*u16,
    ClientLeaseExpires: DATE_TIME,
    OwnerHost: DHCP_HOST_INFO,
    bClientType: u8,
    AddressState: u8,
    Status: QuarantineStatus,
    ProbationEnds: DATE_TIME,
    QuarantineCapable: BOOL,
    SentPotExpTime: u32,
    AckPotExpTime: u32,
    RecvPotExpTime: u32,
    StartTime: u32,
    CltLastTransTime: u32,
    LastBndUpdTime: u32,
    BndMsgStatus: u32,
    PolicyName: ?*u16,
    Flags: u8,
    AddressStateEx: u32,
};
// --------------------------------------------------------
// Type: DHCP_FAILOVER_STATISTICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DHCP_FAILOVER_STATISTICS = extern struct {
    NumAddr: u32,
    AddrFree: u32,
    AddrInUse: u32,
    PartnerAddrFree: u32,
    ThisAddrFree: u32,
    PartnerAddrInUse: u32,
    ThisAddrInUse: u32,
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "dhcpcsvc6" fn Dhcpv6CApiInitialize(
    Version: ?*u32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "dhcpcsvc6" fn Dhcpv6CApiCleanup(
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "dhcpcsvc6" fn Dhcpv6RequestParams(
    forceNewInform: BOOL,
    reserved: ?*opaque{},
    adapterName: ?*u16,
    classId: ?*DHCPV6CAPI_CLASSID,
    recdParams: DHCPV6CAPI_PARAMS_ARRAY,
    buffer: ?*u8,
    pSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "dhcpcsvc6" fn Dhcpv6RequestPrefix(
    adapterName: ?*u16,
    pclassId: ?*DHCPV6CAPI_CLASSID,
    prefixleaseInfo: ?*DHCPV6PrefixLeaseInformation,
    pdwTimeToWait: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "dhcpcsvc6" fn Dhcpv6RenewPrefix(
    adapterName: ?*u16,
    pclassId: ?*DHCPV6CAPI_CLASSID,
    prefixleaseInfo: ?*DHCPV6PrefixLeaseInformation,
    pdwTimeToWait: ?*u32,
    bValidatePrefix: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "dhcpcsvc6" fn Dhcpv6ReleasePrefix(
    adapterName: ?*u16,
    classId: ?*DHCPV6CAPI_CLASSID,
    leaseInfo: ?*DHCPV6PrefixLeaseInformation,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "dhcpcsvc" fn DhcpCApiInitialize(
    Version: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "dhcpcsvc" fn DhcpCApiCleanup(
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "dhcpcsvc" fn DhcpRequestParams(
    Flags: u32,
    Reserved: ?*opaque{},
    AdapterName: ?*u16,
    ClassId: ?*DHCPCAPI_CLASSID,
    SendParams: DHCPCAPI_PARAMS_ARRAY,
    RecdParams: DHCPCAPI_PARAMS_ARRAY,
    Buffer: ?*u8,
    pSize: ?*u32,
    RequestIdStr: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "dhcpcsvc" fn DhcpUndoRequestParams(
    Flags: u32,
    Reserved: ?*opaque{},
    AdapterName: ?*u16,
    RequestIdStr: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "dhcpcsvc" fn DhcpRegisterParamChange(
    Flags: u32,
    Reserved: ?*opaque{},
    AdapterName: ?*u16,
    ClassId: ?*DHCPCAPI_CLASSID,
    Params: DHCPCAPI_PARAMS_ARRAY,
    Handle: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "dhcpcsvc" fn DhcpDeRegisterParamChange(
    Flags: u32,
    Reserved: ?*opaque{},
    Event: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "dhcpcsvc" fn DhcpRemoveDNSRegistrations(
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "dhcpcsvc" fn DhcpGetOriginalSubnetMask(
    sAdapterName: ?*u16,
    dwSubnetMask: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpAddFilterV4(
    ServerIpAddress: ?*u16,
    AddFilterInfo: ?*DHCP_FILTER_ADD_INFO,
    ForceFlag: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpDeleteFilterV4(
    ServerIpAddress: ?*u16,
    DeleteFilterInfo: ?*DHCP_ADDR_PATTERN,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpSetFilterV4(
    ServerIpAddress: ?*u16,
    GlobalFilterInfo: ?*DHCP_FILTER_GLOBAL_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpGetFilterV4(
    ServerIpAddress: ?*u16,
    GlobalFilterInfo: ?*DHCP_FILTER_GLOBAL_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpEnumFilterV4(
    ServerIpAddress: ?*u16,
    ResumeHandle: ?*DHCP_ADDR_PATTERN,
    PreferredMaximum: u32,
    ListType: DHCP_FILTER_LIST_TYPE,
    EnumFilterInfo: ?*?*DHCP_FILTER_ENUM_INFO,
    ElementsRead: ?*u32,
    ElementsTotal: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpCreateSubnet(
    ServerIpAddress: ?*u16,
    SubnetAddress: u32,
    SubnetInfo: ?*DHCP_SUBNET_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpSetSubnetInfo(
    ServerIpAddress: ?*u16,
    SubnetAddress: u32,
    SubnetInfo: ?*DHCP_SUBNET_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpGetSubnetInfo(
    ServerIpAddress: ?*u16,
    SubnetAddress: u32,
    SubnetInfo: ?*?*DHCP_SUBNET_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpEnumSubnets(
    ServerIpAddress: ?*u16,
    ResumeHandle: ?*u32,
    PreferredMaximum: u32,
    EnumInfo: ?*?*DHCP_IP_ARRAY,
    ElementsRead: ?*u32,
    ElementsTotal: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpAddSubnetElement(
    ServerIpAddress: ?*u16,
    SubnetAddress: u32,
    AddElementInfo: ?*DHCP_SUBNET_ELEMENT_DATA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpEnumSubnetElements(
    ServerIpAddress: ?*u16,
    SubnetAddress: u32,
    EnumElementType: DHCP_SUBNET_ELEMENT_TYPE,
    ResumeHandle: ?*u32,
    PreferredMaximum: u32,
    EnumElementInfo: ?*?*DHCP_SUBNET_ELEMENT_INFO_ARRAY,
    ElementsRead: ?*u32,
    ElementsTotal: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpRemoveSubnetElement(
    ServerIpAddress: ?*u16,
    SubnetAddress: u32,
    RemoveElementInfo: ?*DHCP_SUBNET_ELEMENT_DATA,
    ForceFlag: DHCP_FORCE_FLAG,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpDeleteSubnet(
    ServerIpAddress: ?*u16,
    SubnetAddress: u32,
    ForceFlag: DHCP_FORCE_FLAG,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpCreateOption(
    ServerIpAddress: ?*u16,
    OptionID: u32,
    OptionInfo: ?*DHCP_OPTION,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpSetOptionInfo(
    ServerIpAddress: ?*u16,
    OptionID: u32,
    OptionInfo: ?*DHCP_OPTION,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpGetOptionInfo(
    ServerIpAddress: ?*u16,
    OptionID: u32,
    OptionInfo: ?*?*DHCP_OPTION,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpEnumOptions(
    ServerIpAddress: ?*u16,
    ResumeHandle: ?*u32,
    PreferredMaximum: u32,
    Options: ?*?*DHCP_OPTION_ARRAY,
    OptionsRead: ?*u32,
    OptionsTotal: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpRemoveOption(
    ServerIpAddress: ?*u16,
    OptionID: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpSetOptionValue(
    ServerIpAddress: ?*u16,
    OptionID: u32,
    ScopeInfo: ?*DHCP_OPTION_SCOPE_INFO,
    OptionValue: ?*DHCP_OPTION_DATA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpSetOptionValues(
    ServerIpAddress: ?*u16,
    ScopeInfo: ?*DHCP_OPTION_SCOPE_INFO,
    OptionValues: ?*DHCP_OPTION_VALUE_ARRAY,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpGetOptionValue(
    ServerIpAddress: ?*u16,
    OptionID: u32,
    ScopeInfo: ?*DHCP_OPTION_SCOPE_INFO,
    OptionValue: ?*?*DHCP_OPTION_VALUE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpEnumOptionValues(
    ServerIpAddress: ?*u16,
    ScopeInfo: ?*DHCP_OPTION_SCOPE_INFO,
    ResumeHandle: ?*u32,
    PreferredMaximum: u32,
    OptionValues: ?*?*DHCP_OPTION_VALUE_ARRAY,
    OptionsRead: ?*u32,
    OptionsTotal: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpRemoveOptionValue(
    ServerIpAddress: ?*u16,
    OptionID: u32,
    ScopeInfo: ?*DHCP_OPTION_SCOPE_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpCreateClientInfoVQ(
    ServerIpAddress: ?*u16,
    ClientInfo: ?*DHCP_CLIENT_INFO_VQ,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpSetClientInfoVQ(
    ServerIpAddress: ?*u16,
    ClientInfo: ?*DHCP_CLIENT_INFO_VQ,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpGetClientInfoVQ(
    ServerIpAddress: ?*u16,
    SearchInfo: ?*DHCP_SEARCH_INFO,
    ClientInfo: ?*?*DHCP_CLIENT_INFO_VQ,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpEnumSubnetClientsVQ(
    ServerIpAddress: ?*u16,
    SubnetAddress: u32,
    ResumeHandle: ?*u32,
    PreferredMaximum: u32,
    ClientInfo: ?*?*DHCP_CLIENT_INFO_ARRAY_VQ,
    ClientsRead: ?*u32,
    ClientsTotal: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpEnumSubnetClientsFilterStatusInfo(
    ServerIpAddress: ?*u16,
    SubnetAddress: u32,
    ResumeHandle: ?*u32,
    PreferredMaximum: u32,
    ClientInfo: ?*?*DHCP_CLIENT_FILTER_STATUS_INFO_ARRAY,
    ClientsRead: ?*u32,
    ClientsTotal: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpCreateClientInfo(
    ServerIpAddress: ?*u16,
    ClientInfo: ?*DHCP_CLIENT_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpSetClientInfo(
    ServerIpAddress: ?*u16,
    ClientInfo: ?*DHCP_CLIENT_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpGetClientInfo(
    ServerIpAddress: ?*u16,
    SearchInfo: ?*DHCP_SEARCH_INFO,
    ClientInfo: ?*?*DHCP_CLIENT_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpDeleteClientInfo(
    ServerIpAddress: ?*u16,
    ClientInfo: ?*DHCP_SEARCH_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpEnumSubnetClients(
    ServerIpAddress: ?*u16,
    SubnetAddress: u32,
    ResumeHandle: ?*u32,
    PreferredMaximum: u32,
    ClientInfo: ?*?*DHCP_CLIENT_INFO_ARRAY,
    ClientsRead: ?*u32,
    ClientsTotal: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpGetClientOptions(
    ServerIpAddress: ?*u16,
    ClientIpAddress: u32,
    ClientSubnetMask: u32,
    ClientOptions: ?*?*DHCP_OPTION_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpGetMibInfo(
    ServerIpAddress: ?*u16,
    MibInfo: ?*?*DHCP_MIB_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpServerSetConfig(
    ServerIpAddress: ?*u16,
    FieldsToSet: u32,
    ConfigInfo: ?*DHCP_SERVER_CONFIG_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpServerGetConfig(
    ServerIpAddress: ?*u16,
    ConfigInfo: ?*?*DHCP_SERVER_CONFIG_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpScanDatabase(
    ServerIpAddress: ?*u16,
    SubnetAddress: u32,
    FixFlag: u32,
    ScanList: ?*?*DHCP_SCAN_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpRpcFreeMemory(
    BufferPointer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpGetVersion(
    ServerIpAddress: ?*u16,
    MajorVersion: ?*u32,
    MinorVersion: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpAddSubnetElementV4(
    ServerIpAddress: ?*u16,
    SubnetAddress: u32,
    AddElementInfo: ?*DHCP_SUBNET_ELEMENT_DATA_V4,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpEnumSubnetElementsV4(
    ServerIpAddress: ?*u16,
    SubnetAddress: u32,
    EnumElementType: DHCP_SUBNET_ELEMENT_TYPE,
    ResumeHandle: ?*u32,
    PreferredMaximum: u32,
    EnumElementInfo: ?*?*DHCP_SUBNET_ELEMENT_INFO_ARRAY_V4,
    ElementsRead: ?*u32,
    ElementsTotal: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpRemoveSubnetElementV4(
    ServerIpAddress: ?*u16,
    SubnetAddress: u32,
    RemoveElementInfo: ?*DHCP_SUBNET_ELEMENT_DATA_V4,
    ForceFlag: DHCP_FORCE_FLAG,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpCreateClientInfoV4(
    ServerIpAddress: ?*u16,
    ClientInfo: ?*DHCP_CLIENT_INFO_V4,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpSetClientInfoV4(
    ServerIpAddress: ?*u16,
    ClientInfo: ?*DHCP_CLIENT_INFO_V4,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpGetClientInfoV4(
    ServerIpAddress: ?*u16,
    SearchInfo: ?*DHCP_SEARCH_INFO,
    ClientInfo: ?*?*DHCP_CLIENT_INFO_V4,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpEnumSubnetClientsV4(
    ServerIpAddress: ?*u16,
    SubnetAddress: u32,
    ResumeHandle: ?*u32,
    PreferredMaximum: u32,
    ClientInfo: ?*?*DHCP_CLIENT_INFO_ARRAY_V4,
    ClientsRead: ?*u32,
    ClientsTotal: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpServerSetConfigV4(
    ServerIpAddress: ?*u16,
    FieldsToSet: u32,
    ConfigInfo: ?*DHCP_SERVER_CONFIG_INFO_V4,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpServerGetConfigV4(
    ServerIpAddress: ?*u16,
    ConfigInfo: ?*?*DHCP_SERVER_CONFIG_INFO_V4,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpSetSuperScopeV4(
    ServerIpAddress: ?*u16,
    SubnetAddress: u32,
    SuperScopeName: ?*u16,
    ChangeExisting: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpDeleteSuperScopeV4(
    ServerIpAddress: ?*u16,
    SuperScopeName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpGetSuperScopeInfoV4(
    ServerIpAddress: ?*u16,
    SuperScopeTable: ?*?*DHCP_SUPER_SCOPE_TABLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpEnumSubnetClientsV5(
    ServerIpAddress: ?*u16,
    SubnetAddress: u32,
    ResumeHandle: ?*u32,
    PreferredMaximum: u32,
    ClientInfo: ?*?*DHCP_CLIENT_INFO_ARRAY_V5,
    ClientsRead: ?*u32,
    ClientsTotal: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpCreateOptionV5(
    ServerIpAddress: ?*u16,
    Flags: u32,
    OptionId: u32,
    ClassName: ?*u16,
    VendorName: ?*u16,
    OptionInfo: ?*DHCP_OPTION,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpSetOptionInfoV5(
    ServerIpAddress: ?*u16,
    Flags: u32,
    OptionID: u32,
    ClassName: ?*u16,
    VendorName: ?*u16,
    OptionInfo: ?*DHCP_OPTION,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpGetOptionInfoV5(
    ServerIpAddress: ?*u16,
    Flags: u32,
    OptionID: u32,
    ClassName: ?*u16,
    VendorName: ?*u16,
    OptionInfo: ?*?*DHCP_OPTION,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpEnumOptionsV5(
    ServerIpAddress: ?*u16,
    Flags: u32,
    ClassName: ?*u16,
    VendorName: ?*u16,
    ResumeHandle: ?*u32,
    PreferredMaximum: u32,
    Options: ?*?*DHCP_OPTION_ARRAY,
    OptionsRead: ?*u32,
    OptionsTotal: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpRemoveOptionV5(
    ServerIpAddress: ?*u16,
    Flags: u32,
    OptionID: u32,
    ClassName: ?*u16,
    VendorName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpSetOptionValueV5(
    ServerIpAddress: ?*u16,
    Flags: u32,
    OptionId: u32,
    ClassName: ?*u16,
    VendorName: ?*u16,
    ScopeInfo: ?*DHCP_OPTION_SCOPE_INFO,
    OptionValue: ?*DHCP_OPTION_DATA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpSetOptionValuesV5(
    ServerIpAddress: ?*u16,
    Flags: u32,
    ClassName: ?*u16,
    VendorName: ?*u16,
    ScopeInfo: ?*DHCP_OPTION_SCOPE_INFO,
    OptionValues: ?*DHCP_OPTION_VALUE_ARRAY,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpGetOptionValueV5(
    ServerIpAddress: ?*u16,
    Flags: u32,
    OptionID: u32,
    ClassName: ?*u16,
    VendorName: ?*u16,
    ScopeInfo: ?*DHCP_OPTION_SCOPE_INFO,
    OptionValue: ?*?*DHCP_OPTION_VALUE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpGetOptionValueV6(
    ServerIpAddress: ?*u16,
    Flags: u32,
    OptionID: u32,
    ClassName: ?*u16,
    VendorName: ?*u16,
    ScopeInfo: ?*DHCP_OPTION_SCOPE_INFO6,
    OptionValue: ?*?*DHCP_OPTION_VALUE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpEnumOptionValuesV5(
    ServerIpAddress: ?*u16,
    Flags: u32,
    ClassName: ?*u16,
    VendorName: ?*u16,
    ScopeInfo: ?*DHCP_OPTION_SCOPE_INFO,
    ResumeHandle: ?*u32,
    PreferredMaximum: u32,
    OptionValues: ?*?*DHCP_OPTION_VALUE_ARRAY,
    OptionsRead: ?*u32,
    OptionsTotal: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpRemoveOptionValueV5(
    ServerIpAddress: ?*u16,
    Flags: u32,
    OptionID: u32,
    ClassName: ?*u16,
    VendorName: ?*u16,
    ScopeInfo: ?*DHCP_OPTION_SCOPE_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpCreateClass(
    ServerIpAddress: ?*u16,
    ReservedMustBeZero: u32,
    ClassInfo: ?*DHCP_CLASS_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpModifyClass(
    ServerIpAddress: ?*u16,
    ReservedMustBeZero: u32,
    ClassInfo: ?*DHCP_CLASS_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpDeleteClass(
    ServerIpAddress: ?*u16,
    ReservedMustBeZero: u32,
    ClassName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpGetClassInfo(
    ServerIpAddress: ?*u16,
    ReservedMustBeZero: u32,
    PartialClassInfo: ?*DHCP_CLASS_INFO,
    FilledClassInfo: ?*?*DHCP_CLASS_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "dhcpcsvc" fn DhcpEnumClasses(
    ServerIpAddress: ?*u16,
    ReservedMustBeZero: u32,
    ResumeHandle: ?*u32,
    PreferredMaximum: u32,
    ClassInfoArray: ?*?*DHCP_CLASS_INFO_ARRAY,
    nRead: ?*u32,
    nTotal: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpGetAllOptions(
    ServerIpAddress: ?*u16,
    Flags: u32,
    OptionStruct: ?*?*DHCP_ALL_OPTIONS,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpGetAllOptionsV6(
    ServerIpAddress: ?*u16,
    Flags: u32,
    OptionStruct: ?*?*DHCP_ALL_OPTIONS,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpGetAllOptionValues(
    ServerIpAddress: ?*u16,
    Flags: u32,
    ScopeInfo: ?*DHCP_OPTION_SCOPE_INFO,
    Values: ?*?*DHCP_ALL_OPTION_VALUES,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpGetAllOptionValuesV6(
    ServerIpAddress: ?*u16,
    Flags: u32,
    ScopeInfo: ?*DHCP_OPTION_SCOPE_INFO6,
    Values: ?*?*DHCP_ALL_OPTION_VALUES,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpEnumServers(
    Flags: u32,
    IdInfo: ?*opaque{},
    Servers: ?*?*DHCPDS_SERVERS,
    CallbackFn: ?*opaque{},
    CallbackData: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpAddServer(
    Flags: u32,
    IdInfo: ?*opaque{},
    NewServer: ?*DHCPDS_SERVER,
    CallbackFn: ?*opaque{},
    CallbackData: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpDeleteServer(
    Flags: u32,
    IdInfo: ?*opaque{},
    NewServer: ?*DHCPDS_SERVER,
    CallbackFn: ?*opaque{},
    CallbackData: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpGetServerBindingInfo(
    ServerIpAddress: ?*u16,
    Flags: u32,
    BindElementsInfo: ?*?*DHCP_BIND_ELEMENT_ARRAY,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpSetServerBindingInfo(
    ServerIpAddress: ?*u16,
    Flags: u32,
    BindElementInfo: ?*DHCP_BIND_ELEMENT_ARRAY,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpAddSubnetElementV5(
    ServerIpAddress: ?*u16,
    SubnetAddress: u32,
    AddElementInfo: ?*DHCP_SUBNET_ELEMENT_DATA_V5,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpEnumSubnetElementsV5(
    ServerIpAddress: ?*u16,
    SubnetAddress: u32,
    EnumElementType: DHCP_SUBNET_ELEMENT_TYPE,
    ResumeHandle: ?*u32,
    PreferredMaximum: u32,
    EnumElementInfo: ?*?*DHCP_SUBNET_ELEMENT_INFO_ARRAY_V5,
    ElementsRead: ?*u32,
    ElementsTotal: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpRemoveSubnetElementV5(
    ServerIpAddress: ?*u16,
    SubnetAddress: u32,
    RemoveElementInfo: ?*DHCP_SUBNET_ELEMENT_DATA_V5,
    ForceFlag: DHCP_FORCE_FLAG,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4EnumSubnetReservations(
    ServerIpAddress: ?*u16,
    SubnetAddress: u32,
    ResumeHandle: ?*u32,
    PreferredMaximum: u32,
    EnumElementInfo: ?*?*DHCP_RESERVATION_INFO_ARRAY,
    ElementsRead: ?*u32,
    ElementsTotal: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpCreateOptionV6(
    ServerIpAddress: ?*u16,
    Flags: u32,
    OptionId: u32,
    ClassName: ?*u16,
    VendorName: ?*u16,
    OptionInfo: ?*DHCP_OPTION,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpRemoveOptionV6(
    ServerIpAddress: ?*u16,
    Flags: u32,
    OptionID: u32,
    ClassName: ?*u16,
    VendorName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpEnumOptionsV6(
    ServerIpAddress: ?*u16,
    Flags: u32,
    ClassName: ?*u16,
    VendorName: ?*u16,
    ResumeHandle: ?*u32,
    PreferredMaximum: u32,
    Options: ?*?*DHCP_OPTION_ARRAY,
    OptionsRead: ?*u32,
    OptionsTotal: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpRemoveOptionValueV6(
    ServerIpAddress: ?*u16,
    Flags: u32,
    OptionID: u32,
    ClassName: ?*u16,
    VendorName: ?*u16,
    ScopeInfo: ?*DHCP_OPTION_SCOPE_INFO6,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpGetOptionInfoV6(
    ServerIpAddress: ?*u16,
    Flags: u32,
    OptionID: u32,
    ClassName: ?*u16,
    VendorName: ?*u16,
    OptionInfo: ?*?*DHCP_OPTION,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpSetOptionInfoV6(
    ServerIpAddress: ?*u16,
    Flags: u32,
    OptionID: u32,
    ClassName: ?*u16,
    VendorName: ?*u16,
    OptionInfo: ?*DHCP_OPTION,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpSetOptionValueV6(
    ServerIpAddress: ?*u16,
    Flags: u32,
    OptionId: u32,
    ClassName: ?*u16,
    VendorName: ?*u16,
    ScopeInfo: ?*DHCP_OPTION_SCOPE_INFO6,
    OptionValue: ?*DHCP_OPTION_DATA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpGetSubnetInfoVQ(
    ServerIpAddress: ?*u16,
    SubnetAddress: u32,
    SubnetInfo: ?*?*DHCP_SUBNET_INFO_VQ,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpCreateSubnetVQ(
    ServerIpAddress: ?*u16,
    SubnetAddress: u32,
    SubnetInfo: ?*DHCP_SUBNET_INFO_VQ,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpSetSubnetInfoVQ(
    ServerIpAddress: ?*u16,
    SubnetAddress: u32,
    SubnetInfo: ?*DHCP_SUBNET_INFO_VQ,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpEnumOptionValuesV6(
    ServerIpAddress: ?*u16,
    Flags: u32,
    ClassName: ?*u16,
    VendorName: ?*u16,
    ScopeInfo: ?*DHCP_OPTION_SCOPE_INFO6,
    ResumeHandle: ?*u32,
    PreferredMaximum: u32,
    OptionValues: ?*?*DHCP_OPTION_VALUE_ARRAY,
    OptionsRead: ?*u32,
    OptionsTotal: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpDsInit(
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpDsCleanup(
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpSetThreadOptions(
    Flags: u32,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpGetThreadOptions(
    pFlags: ?*u32,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpServerQueryAttribute(
    ServerIpAddr: ?*u16,
    dwReserved: u32,
    DhcpAttribId: u32,
    pDhcpAttrib: ?*?*DHCP_ATTRIB,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpServerQueryAttributes(
    ServerIpAddr: ?*u16,
    dwReserved: u32,
    dwAttribCount: u32,
    pDhcpAttribs: ?*u32,
    pDhcpAttribArr: ?*?*DHCP_ATTRIB_ARRAY,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpServerRedoAuthorization(
    ServerIpAddr: ?*u16,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpAuditLogSetParams(
    ServerIpAddress: ?*u16,
    Flags: u32,
    AuditLogDir: ?*u16,
    DiskCheckInterval: u32,
    MaxLogFilesSize: u32,
    MinSpaceOnDisk: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpAuditLogGetParams(
    ServerIpAddress: ?*u16,
    Flags: u32,
    AuditLogDir: ?*?*u16,
    DiskCheckInterval: ?*u32,
    MaxLogFilesSize: ?*u32,
    MinSpaceOnDisk: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpServerQueryDnsRegCredentials(
    ServerIpAddress: ?*u16,
    UnameSize: u32,
    Uname: ?*u16,
    DomainSize: u32,
    Domain: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpServerSetDnsRegCredentials(
    ServerIpAddress: ?*u16,
    Uname: ?*u16,
    Domain: ?*u16,
    Passwd: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpServerSetDnsRegCredentialsV5(
    ServerIpAddress: ?*u16,
    Uname: ?*u16,
    Domain: ?*u16,
    Passwd: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpServerBackupDatabase(
    ServerIpAddress: ?*u16,
    Path: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpServerRestoreDatabase(
    ServerIpAddress: ?*u16,
    Path: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpServerSetConfigVQ(
    ServerIpAddress: ?*u16,
    FieldsToSet: u32,
    ConfigInfo: ?*DHCP_SERVER_CONFIG_INFO_VQ,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpServerGetConfigVQ(
    ServerIpAddress: ?*u16,
    ConfigInfo: ?*?*DHCP_SERVER_CONFIG_INFO_VQ,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpGetServerSpecificStrings(
    ServerIpAddress: ?*u16,
    ServerSpecificStrings: ?*?*DHCP_SERVER_SPECIFIC_STRINGS,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpServerAuditlogParamsFree(
    ConfigInfo: ?*DHCP_SERVER_CONFIG_INFO_VQ,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpCreateSubnetV6(
    ServerIpAddress: ?*u16,
    SubnetAddress: DHCP_IPV6_ADDRESS,
    SubnetInfo: ?*DHCP_SUBNET_INFO_V6,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpDeleteSubnetV6(
    ServerIpAddress: ?*u16,
    SubnetAddress: DHCP_IPV6_ADDRESS,
    ForceFlag: DHCP_FORCE_FLAG,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpEnumSubnetsV6(
    ServerIpAddress: ?*u16,
    ResumeHandle: ?*u32,
    PreferredMaximum: u32,
    EnumInfo: ?*?*DHCPV6_IP_ARRAY,
    ElementsRead: ?*u32,
    ElementsTotal: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpAddSubnetElementV6(
    ServerIpAddress: ?*u16,
    SubnetAddress: DHCP_IPV6_ADDRESS,
    AddElementInfo: ?*DHCP_SUBNET_ELEMENT_DATA_V6,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpRemoveSubnetElementV6(
    ServerIpAddress: ?*u16,
    SubnetAddress: DHCP_IPV6_ADDRESS,
    RemoveElementInfo: ?*DHCP_SUBNET_ELEMENT_DATA_V6,
    ForceFlag: DHCP_FORCE_FLAG,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpEnumSubnetElementsV6(
    ServerIpAddress: ?*u16,
    SubnetAddress: DHCP_IPV6_ADDRESS,
    EnumElementType: DHCP_SUBNET_ELEMENT_TYPE_V6,
    ResumeHandle: ?*u32,
    PreferredMaximum: u32,
    EnumElementInfo: ?*?*DHCP_SUBNET_ELEMENT_INFO_ARRAY_V6,
    ElementsRead: ?*u32,
    ElementsTotal: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpGetSubnetInfoV6(
    ServerIpAddress: ?*u16,
    SubnetAddress: DHCP_IPV6_ADDRESS,
    SubnetInfo: ?*?*DHCP_SUBNET_INFO_V6,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpEnumSubnetClientsV6(
    ServerIpAddress: ?*u16,
    SubnetAddress: DHCP_IPV6_ADDRESS,
    ResumeHandle: ?*DHCP_IPV6_ADDRESS,
    PreferredMaximum: u32,
    ClientInfo: ?*?*DHCP_CLIENT_INFO_ARRAY_V6,
    ClientsRead: ?*u32,
    ClientsTotal: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpServerGetConfigV6(
    ServerIpAddress: ?*u16,
    ScopeInfo: ?*DHCP_OPTION_SCOPE_INFO6,
    ConfigInfo: ?*?*DHCP_SERVER_CONFIG_INFO_V6,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpServerSetConfigV6(
    ServerIpAddress: ?*u16,
    ScopeInfo: ?*DHCP_OPTION_SCOPE_INFO6,
    FieldsToSet: u32,
    ConfigInfo: ?*DHCP_SERVER_CONFIG_INFO_V6,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpSetSubnetInfoV6(
    ServerIpAddress: ?*u16,
    SubnetAddress: DHCP_IPV6_ADDRESS,
    SubnetInfo: ?*DHCP_SUBNET_INFO_V6,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpGetMibInfoV6(
    ServerIpAddress: ?*u16,
    MibInfo: ?*?*DHCP_MIB_INFO_V6,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpGetServerBindingInfoV6(
    ServerIpAddress: ?*u16,
    Flags: u32,
    BindElementsInfo: ?*?*DHCPV6_BIND_ELEMENT_ARRAY,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpSetServerBindingInfoV6(
    ServerIpAddress: ?*u16,
    Flags: u32,
    BindElementInfo: ?*DHCPV6_BIND_ELEMENT_ARRAY,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpSetClientInfoV6(
    ServerIpAddress: ?*u16,
    ClientInfo: ?*DHCP_CLIENT_INFO_V6,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpGetClientInfoV6(
    ServerIpAddress: ?*u16,
    SearchInfo: ?*DHCP_SEARCH_INFO_V6,
    ClientInfo: ?*?*DHCP_CLIENT_INFO_V6,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpDeleteClientInfoV6(
    ServerIpAddress: ?*u16,
    ClientInfo: ?*DHCP_SEARCH_INFO_V6,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpCreateClassV6(
    ServerIpAddress: ?*u16,
    ReservedMustBeZero: u32,
    ClassInfo: ?*DHCP_CLASS_INFO_V6,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpModifyClassV6(
    ServerIpAddress: ?*u16,
    ReservedMustBeZero: u32,
    ClassInfo: ?*DHCP_CLASS_INFO_V6,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpDeleteClassV6(
    ServerIpAddress: ?*u16,
    ReservedMustBeZero: u32,
    ClassName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpEnumClassesV6(
    ServerIpAddress: ?*u16,
    ReservedMustBeZero: u32,
    ResumeHandle: ?*u32,
    PreferredMaximum: u32,
    ClassInfoArray: ?*?*DHCP_CLASS_INFO_ARRAY_V6,
    nRead: ?*u32,
    nTotal: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpSetSubnetDelayOffer(
    ServerIpAddress: ?*u16,
    SubnetAddress: u32,
    TimeDelayInMilliseconds: u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpGetSubnetDelayOffer(
    ServerIpAddress: ?*u16,
    SubnetAddress: u32,
    TimeDelayInMilliseconds: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpGetMibInfoV5(
    ServerIpAddress: ?*u16,
    MibInfo: ?*?*DHCP_MIB_INFO_V5,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpAddSecurityGroup(
    pServer: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4GetOptionValue(
    ServerIpAddress: ?*u16,
    Flags: u32,
    OptionID: u32,
    PolicyName: ?*u16,
    VendorName: ?*u16,
    ScopeInfo: ?*DHCP_OPTION_SCOPE_INFO,
    OptionValue: ?*?*DHCP_OPTION_VALUE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4SetOptionValue(
    ServerIpAddress: ?*u16,
    Flags: u32,
    OptionId: u32,
    PolicyName: ?*u16,
    VendorName: ?*u16,
    ScopeInfo: ?*DHCP_OPTION_SCOPE_INFO,
    OptionValue: ?*DHCP_OPTION_DATA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4SetOptionValues(
    ServerIpAddress: ?*u16,
    Flags: u32,
    PolicyName: ?*u16,
    VendorName: ?*u16,
    ScopeInfo: ?*DHCP_OPTION_SCOPE_INFO,
    OptionValues: ?*DHCP_OPTION_VALUE_ARRAY,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4RemoveOptionValue(
    ServerIpAddress: ?*u16,
    Flags: u32,
    OptionID: u32,
    PolicyName: ?*u16,
    VendorName: ?*u16,
    ScopeInfo: ?*DHCP_OPTION_SCOPE_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4GetAllOptionValues(
    ServerIpAddress: ?*u16,
    Flags: u32,
    ScopeInfo: ?*DHCP_OPTION_SCOPE_INFO,
    Values: ?*?*DHCP_ALL_OPTION_VALUES_PB,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4FailoverCreateRelationship(
    ServerIpAddress: ?*u16,
    pRelationship: ?*DHCP_FAILOVER_RELATIONSHIP,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4FailoverSetRelationship(
    ServerIpAddress: ?*u16,
    Flags: u32,
    pRelationship: ?*DHCP_FAILOVER_RELATIONSHIP,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4FailoverDeleteRelationship(
    ServerIpAddress: ?*u16,
    pRelationshipName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4FailoverGetRelationship(
    ServerIpAddress: ?*u16,
    pRelationshipName: ?*u16,
    pRelationship: ?*?*DHCP_FAILOVER_RELATIONSHIP,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4FailoverEnumRelationship(
    ServerIpAddress: ?*u16,
    ResumeHandle: ?*u32,
    PreferredMaximum: u32,
    pRelationship: ?*?*DHCP_FAILOVER_RELATIONSHIP_ARRAY,
    RelationshipRead: ?*u32,
    RelationshipTotal: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4FailoverAddScopeToRelationship(
    ServerIpAddress: ?*u16,
    pRelationship: ?*DHCP_FAILOVER_RELATIONSHIP,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4FailoverDeleteScopeFromRelationship(
    ServerIpAddress: ?*u16,
    pRelationship: ?*DHCP_FAILOVER_RELATIONSHIP,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4FailoverGetScopeRelationship(
    ServerIpAddress: ?*u16,
    ScopeId: u32,
    pRelationship: ?*?*DHCP_FAILOVER_RELATIONSHIP,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4FailoverGetScopeStatistics(
    ServerIpAddress: ?*u16,
    ScopeId: u32,
    pStats: ?*?*DHCP_FAILOVER_STATISTICS,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4FailoverGetClientInfo(
    ServerIpAddress: ?*u16,
    SearchInfo: ?*DHCP_SEARCH_INFO,
    ClientInfo: ?*?*DHCPV4_FAILOVER_CLIENT_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4FailoverGetSystemTime(
    ServerIpAddress: ?*u16,
    pTime: ?*u32,
    pMaxAllowedDeltaTime: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4FailoverGetAddressStatus(
    ServerIpAddress: ?*u16,
    SubnetAddress: u32,
    pStatus: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4FailoverTriggerAddrAllocation(
    ServerIpAddress: ?*u16,
    pFailRelName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpHlprCreateV4Policy(
    PolicyName: ?*u16,
    fGlobalPolicy: BOOL,
    Subnet: u32,
    ProcessingOrder: u32,
    RootOperator: DHCP_POL_LOGIC_OPER,
    Description: ?*u16,
    Enabled: BOOL,
    Policy: ?*?*DHCP_POLICY,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpHlprCreateV4PolicyEx(
    PolicyName: ?*u16,
    fGlobalPolicy: BOOL,
    Subnet: u32,
    ProcessingOrder: u32,
    RootOperator: DHCP_POL_LOGIC_OPER,
    Description: ?*u16,
    Enabled: BOOL,
    Policy: ?*?*DHCP_POLICY_EX,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpHlprAddV4PolicyExpr(
    Policy: ?*DHCP_POLICY,
    ParentExpr: u32,
    Operator: DHCP_POL_LOGIC_OPER,
    ExprIndex: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpHlprAddV4PolicyCondition(
    Policy: ?*DHCP_POLICY,
    ParentExpr: u32,
    Type: DHCP_POL_ATTR_TYPE,
    OptionID: u32,
    SubOptionID: u32,
    VendorName: ?*u16,
    Operator: DHCP_POL_COMPARATOR,
    Value: ?*u8,
    ValueLength: u32,
    ConditionIndex: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpHlprAddV4PolicyRange(
    Policy: ?*DHCP_POLICY,
    Range: ?*DHCP_IP_RANGE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpHlprResetV4PolicyExpr(
    Policy: ?*DHCP_POLICY,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpHlprModifyV4PolicyExpr(
    Policy: ?*DHCP_POLICY,
    Operator: DHCP_POL_LOGIC_OPER,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpHlprFreeV4Policy(
    Policy: ?*DHCP_POLICY,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpHlprFreeV4PolicyArray(
    PolicyArray: ?*DHCP_POLICY_ARRAY,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpHlprFreeV4PolicyEx(
    PolicyEx: ?*DHCP_POLICY_EX,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpHlprFreeV4PolicyExArray(
    PolicyExArray: ?*DHCP_POLICY_EX_ARRAY,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpHlprFreeV4DhcpProperty(
    Property: ?*DHCP_PROPERTY,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpHlprFreeV4DhcpPropertyArray(
    PropertyArray: ?*DHCP_PROPERTY_ARRAY,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpHlprFindV4DhcpProperty(
    PropertyArray: ?*DHCP_PROPERTY_ARRAY,
    ID: DHCP_PROPERTY_ID,
    Type: DHCP_PROPERTY_TYPE,
) callconv(@import("std").os.windows.WINAPI) ?*DHCP_PROPERTY;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpHlprIsV4PolicySingleUC(
    Policy: ?*DHCP_POLICY,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4QueryPolicyEnforcement(
    ServerIpAddress: ?*u16,
    fGlobalPolicy: BOOL,
    SubnetAddress: u32,
    Enabled: ?*i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4SetPolicyEnforcement(
    ServerIpAddress: ?*u16,
    fGlobalPolicy: BOOL,
    SubnetAddress: u32,
    Enable: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpHlprIsV4PolicyWellFormed(
    pPolicy: ?*DHCP_POLICY,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpHlprIsV4PolicyValid(
    pPolicy: ?*DHCP_POLICY,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4CreatePolicy(
    ServerIpAddress: ?*u16,
    pPolicy: ?*DHCP_POLICY,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4GetPolicy(
    ServerIpAddress: ?*u16,
    fGlobalPolicy: BOOL,
    SubnetAddress: u32,
    PolicyName: ?*u16,
    Policy: ?*?*DHCP_POLICY,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4SetPolicy(
    ServerIpAddress: ?*u16,
    FieldsModified: u32,
    fGlobalPolicy: BOOL,
    SubnetAddress: u32,
    PolicyName: ?*u16,
    Policy: ?*DHCP_POLICY,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4DeletePolicy(
    ServerIpAddress: ?*u16,
    fGlobalPolicy: BOOL,
    SubnetAddress: u32,
    PolicyName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4EnumPolicies(
    ServerIpAddress: ?*u16,
    ResumeHandle: ?*u32,
    PreferredMaximum: u32,
    fGlobalPolicy: BOOL,
    SubnetAddress: u32,
    EnumInfo: ?*?*DHCP_POLICY_ARRAY,
    ElementsRead: ?*u32,
    ElementsTotal: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4AddPolicyRange(
    ServerIpAddress: ?*u16,
    SubnetAddress: u32,
    PolicyName: ?*u16,
    Range: ?*DHCP_IP_RANGE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4RemovePolicyRange(
    ServerIpAddress: ?*u16,
    SubnetAddress: u32,
    PolicyName: ?*u16,
    Range: ?*DHCP_IP_RANGE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV6SetStatelessStoreParams(
    ServerIpAddress: ?*u16,
    fServerLevel: BOOL,
    SubnetAddress: DHCP_IPV6_ADDRESS,
    FieldModified: u32,
    Params: ?*DHCPV6_STATELESS_PARAMS,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV6GetStatelessStoreParams(
    ServerIpAddress: ?*u16,
    fServerLevel: BOOL,
    SubnetAddress: DHCP_IPV6_ADDRESS,
    Params: ?*?*DHCPV6_STATELESS_PARAMS,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV6GetStatelessStatistics(
    ServerIpAddress: ?*u16,
    StatelessStats: ?*?*DHCPV6_STATELESS_STATS,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4CreateClientInfo(
    ServerIpAddress: ?*u16,
    ClientInfo: ?*DHCP_CLIENT_INFO_PB,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4EnumSubnetClients(
    ServerIpAddress: ?*u16,
    SubnetAddress: u32,
    ResumeHandle: ?*u32,
    PreferredMaximum: u32,
    ClientInfo: ?*?*DHCP_CLIENT_INFO_PB_ARRAY,
    ClientsRead: ?*u32,
    ClientsTotal: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4GetClientInfo(
    ServerIpAddress: ?*u16,
    SearchInfo: ?*DHCP_SEARCH_INFO,
    ClientInfo: ?*?*DHCP_CLIENT_INFO_PB,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV6CreateClientInfo(
    ServerIpAddress: ?*u16,
    ClientInfo: ?*DHCP_CLIENT_INFO_V6,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4GetFreeIPAddress(
    ServerIpAddress: ?*u16,
    ScopeId: u32,
    StartIP: u32,
    EndIP: u32,
    NumFreeAddrReq: u32,
    IPAddrList: ?*?*DHCP_IP_ARRAY,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV6GetFreeIPAddress(
    ServerIpAddress: ?*u16,
    ScopeId: DHCP_IPV6_ADDRESS,
    StartIP: DHCP_IPV6_ADDRESS,
    EndIP: DHCP_IPV6_ADDRESS,
    NumFreeAddrReq: u32,
    IPAddrList: ?*?*DHCPV6_IP_ARRAY,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4CreateClientInfoEx(
    ServerIpAddress: ?*u16,
    ClientInfo: ?*DHCP_CLIENT_INFO_EX,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4EnumSubnetClientsEx(
    ServerIpAddress: ?*u16,
    SubnetAddress: u32,
    ResumeHandle: ?*u32,
    PreferredMaximum: u32,
    ClientInfo: ?*?*DHCP_CLIENT_INFO_EX_ARRAY,
    ClientsRead: ?*u32,
    ClientsTotal: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4GetClientInfoEx(
    ServerIpAddress: ?*u16,
    SearchInfo: ?*DHCP_SEARCH_INFO,
    ClientInfo: ?*?*DHCP_CLIENT_INFO_EX,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4CreatePolicyEx(
    ServerIpAddress: ?*u16,
    PolicyEx: ?*DHCP_POLICY_EX,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4GetPolicyEx(
    ServerIpAddress: ?*u16,
    GlobalPolicy: BOOL,
    SubnetAddress: u32,
    PolicyName: ?*u16,
    Policy: ?*?*DHCP_POLICY_EX,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4SetPolicyEx(
    ServerIpAddress: ?*u16,
    FieldsModified: u32,
    GlobalPolicy: BOOL,
    SubnetAddress: u32,
    PolicyName: ?*u16,
    Policy: ?*DHCP_POLICY_EX,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DHCPSAPI" fn DhcpV4EnumPoliciesEx(
    ServerIpAddress: ?*u16,
    ResumeHandle: ?*u32,
    PreferredMaximum: u32,
    GlobalPolicy: BOOL,
    SubnetAddress: u32,
    EnumInfo: ?*?*DHCP_POLICY_EX_ARRAY,
    ElementsRead: ?*u32,
    ElementsTotal: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    else => if (@import("builtin").is_test) struct {
    } else struct {
    },
};

//
// type imports
//
const BOOL = @import("systemservices.zig").BOOL;

test "" {
    const constant_export_count = 0;
    const type_export_count = 163;
    const func_count = 210;
    const unicode_alias_count = 0;
    const type_import_count = 1;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
