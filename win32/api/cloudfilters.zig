//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: CF_CONNECTION_KEY__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CF_CONNECTION_KEY__ = extern struct {
    Internal: i64,
};
// --------------------------------------------------------
// Type: CF_FS_METADATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CF_FS_METADATA = extern struct {
    BasicInfo: FILE_BASIC_INFO,
    FileSize: LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: CF_PLACEHOLDER_CREATE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_PLACEHOLDER_CREATE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CF_PLACEHOLDER_CREATE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CF_PLACEHOLDER_CREATE_INFO = extern struct {
    RelativeFileName: ?*u16,
    FsMetadata: CF_FS_METADATA,
    FileIdentity: ?*opaque{},
    FileIdentityLength: u32,
    Flags: CF_PLACEHOLDER_CREATE_FLAGS,
    Result: HRESULT,
    CreateUsn: i64,
};
// --------------------------------------------------------
// Type: CF_SYNC_PROVIDER_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_SYNC_PROVIDER_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: CF_PROCESS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CF_PROCESS_INFO = extern struct {
    StructSize: u32,
    ProcessId: u32,
    ImagePath: ?*u16,
    PackageName: ?*u16,
    ApplicationId: ?*u16,
    CommandLine: ?*u16,
    SessionId: u32,
};
// --------------------------------------------------------
// Type: CF_PLATFORM_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CF_PLATFORM_INFO = extern struct {
    BuildNumber: u32,
    RevisionNumber: u32,
    IntegrationNumber: u32,
};
// --------------------------------------------------------
// Type: CF_REGISTER_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_REGISTER_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CF_HYDRATION_POLICY_PRIMARY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_HYDRATION_POLICY_PRIMARY = *opaque{
};
// --------------------------------------------------------
// Type: CF_HYDRATION_POLICY_PRIMARY_USHORT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CF_HYDRATION_POLICY_PRIMARY_USHORT = extern struct {
    us: u16,
};
// --------------------------------------------------------
// Type: CF_HYDRATION_POLICY_MODIFIER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_HYDRATION_POLICY_MODIFIER = *opaque{
};
// --------------------------------------------------------
// Type: CF_HYDRATION_POLICY_MODIFIER_USHORT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CF_HYDRATION_POLICY_MODIFIER_USHORT = extern struct {
    us: u16,
};
// --------------------------------------------------------
// Type: CF_HYDRATION_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CF_HYDRATION_POLICY = extern struct {
    Primary: CF_HYDRATION_POLICY_PRIMARY_USHORT,
    Modifier: CF_HYDRATION_POLICY_MODIFIER_USHORT,
};
// --------------------------------------------------------
// Type: CF_POPULATION_POLICY_PRIMARY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_POPULATION_POLICY_PRIMARY = *opaque{
};
// --------------------------------------------------------
// Type: CF_POPULATION_POLICY_PRIMARY_USHORT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CF_POPULATION_POLICY_PRIMARY_USHORT = extern struct {
    us: u16,
};
// --------------------------------------------------------
// Type: CF_POPULATION_POLICY_MODIFIER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_POPULATION_POLICY_MODIFIER = *opaque{
};
// --------------------------------------------------------
// Type: CF_POPULATION_POLICY_MODIFIER_USHORT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CF_POPULATION_POLICY_MODIFIER_USHORT = extern struct {
    us: u16,
};
// --------------------------------------------------------
// Type: CF_POPULATION_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CF_POPULATION_POLICY = extern struct {
    Primary: CF_POPULATION_POLICY_PRIMARY_USHORT,
    Modifier: CF_POPULATION_POLICY_MODIFIER_USHORT,
};
// --------------------------------------------------------
// Type: CF_PLACEHOLDER_MANAGEMENT_POLICY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_PLACEHOLDER_MANAGEMENT_POLICY = *opaque{
};
// --------------------------------------------------------
// Type: CF_INSYNC_POLICY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_INSYNC_POLICY = *opaque{
};
// --------------------------------------------------------
// Type: CF_HARDLINK_POLICY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_HARDLINK_POLICY = *opaque{
};
// --------------------------------------------------------
// Type: CF_SYNC_POLICIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CF_SYNC_POLICIES = extern struct {
    StructSize: u32,
    Hydration: CF_HYDRATION_POLICY,
    Population: CF_POPULATION_POLICY,
    InSync: CF_INSYNC_POLICY,
    HardLink: CF_HARDLINK_POLICY,
    PlaceholderManagement: CF_PLACEHOLDER_MANAGEMENT_POLICY,
};
// --------------------------------------------------------
// Type: CF_SYNC_REGISTRATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CF_SYNC_REGISTRATION = extern struct {
    StructSize: u32,
    ProviderName: ?*u16,
    ProviderVersion: ?*u16,
    SyncRootIdentity: ?*opaque{},
    SyncRootIdentityLength: u32,
    FileIdentity: ?*opaque{},
    FileIdentityLength: u32,
    ProviderId: Guid,
};
// --------------------------------------------------------
// Type: CF_CALLBACK_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CF_CALLBACK_INFO = extern struct {
    StructSize: u32,
    ConnectionKey: CF_CONNECTION_KEY__,
    CallbackContext: ?*opaque{},
    VolumeGuidName: ?*u16,
    VolumeDosName: ?*u16,
    VolumeSerialNumber: u32,
    SyncRootFileId: LARGE_INTEGER,
    SyncRootIdentity: ?*opaque{},
    SyncRootIdentityLength: u32,
    FileId: LARGE_INTEGER,
    FileSize: LARGE_INTEGER,
    FileIdentity: ?*opaque{},
    FileIdentityLength: u32,
    NormalizedPath: ?*u16,
    TransferKey: LARGE_INTEGER,
    PriorityHint: u8,
    CorrelationVector: ?*CORRELATION_VECTOR,
    ProcessInfo: ?*CF_PROCESS_INFO,
    RequestKey: LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: CF_CALLBACK_CANCEL_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_CALLBACK_CANCEL_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CF_CALLBACK_FETCH_DATA_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_CALLBACK_FETCH_DATA_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CF_CALLBACK_VALIDATE_DATA_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_CALLBACK_VALIDATE_DATA_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CF_CALLBACK_FETCH_PLACEHOLDERS_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_CALLBACK_FETCH_PLACEHOLDERS_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CF_CALLBACK_OPEN_COMPLETION_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_CALLBACK_OPEN_COMPLETION_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CF_CALLBACK_CLOSE_COMPLETION_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_CALLBACK_CLOSE_COMPLETION_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CF_CALLBACK_DEHYDRATE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_CALLBACK_DEHYDRATE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CF_CALLBACK_DEHYDRATE_COMPLETION_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_CALLBACK_DEHYDRATE_COMPLETION_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CF_CALLBACK_DELETE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_CALLBACK_DELETE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CF_CALLBACK_DELETE_COMPLETION_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_CALLBACK_DELETE_COMPLETION_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CF_CALLBACK_RENAME_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_CALLBACK_RENAME_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CF_CALLBACK_RENAME_COMPLETION_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_CALLBACK_RENAME_COMPLETION_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CF_CALLBACK_DEHYDRATION_REASON
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_CALLBACK_DEHYDRATION_REASON = *opaque{
};
// --------------------------------------------------------
// Type: CF_CALLBACK_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CF_CALLBACK_PARAMETERS = extern struct {
    ParamSize: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _RenameCompletion_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _RenameCompletion_e__Struct = extern struct {
            Flags: CF_CALLBACK_RENAME_COMPLETION_FLAGS,
            SourcePath: ?*u16,
        };
        // --------------------------------------------------------
        // Type: _DeleteCompletion_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _DeleteCompletion_e__Struct = extern struct {
            Flags: CF_CALLBACK_DELETE_COMPLETION_FLAGS,
        };
        // --------------------------------------------------------
        // Type: _DehydrateCompletion_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _DehydrateCompletion_e__Struct = extern struct {
            Flags: CF_CALLBACK_DEHYDRATE_COMPLETION_FLAGS,
            Reason: CF_CALLBACK_DEHYDRATION_REASON,
        };
        // --------------------------------------------------------
        // Type: _CloseCompletion_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _CloseCompletion_e__Struct = extern struct {
            Flags: CF_CALLBACK_CLOSE_COMPLETION_FLAGS,
        };
        // --------------------------------------------------------
        // Type: _FetchPlaceholders_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _FetchPlaceholders_e__Struct = extern struct {
            Flags: CF_CALLBACK_FETCH_PLACEHOLDERS_FLAGS,
            Pattern: ?*u16,
        };
        // --------------------------------------------------------
        // Type: _FetchData_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _FetchData_e__Struct = extern struct {
            Flags: CF_CALLBACK_FETCH_DATA_FLAGS,
            RequiredFileOffset: LARGE_INTEGER,
            RequiredLength: LARGE_INTEGER,
            OptionalFileOffset: LARGE_INTEGER,
            OptionalLength: LARGE_INTEGER,
            LastDehydrationTime: LARGE_INTEGER,
            LastDehydrationReason: CF_CALLBACK_DEHYDRATION_REASON,
        };
        // --------------------------------------------------------
        // Type: _Cancel_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Cancel_e__Struct = extern struct {
            Flags: CF_CALLBACK_CANCEL_FLAGS,
            Anonymous: _Anonymous_e__Union,
            // --------------------------------------------------------
            // Type: _Anonymous_e__Union
            // TypeLayoutAttr: explicit
            // not generating the actual code for this type because it has an explicit layout
            pub const _Anonymous_e__Union = *opaque{
                // --------------------------------------------------------
                // Type: _FetchData_e__Struct
                // TypeLayoutAttr: sequential
                // TODO: I think this is a struct, but not sure at this point, assuming it is for now
                pub const _FetchData_e__Struct = extern struct {
                    FileOffset: LARGE_INTEGER,
                    Length: LARGE_INTEGER,
                };
            };
        };
        // --------------------------------------------------------
        // Type: _Rename_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Rename_e__Struct = extern struct {
            Flags: CF_CALLBACK_RENAME_FLAGS,
            TargetPath: ?*u16,
        };
        // --------------------------------------------------------
        // Type: _Dehydrate_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Dehydrate_e__Struct = extern struct {
            Flags: CF_CALLBACK_DEHYDRATE_FLAGS,
            Reason: CF_CALLBACK_DEHYDRATION_REASON,
        };
        // --------------------------------------------------------
        // Type: _ValidateData_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _ValidateData_e__Struct = extern struct {
            Flags: CF_CALLBACK_VALIDATE_DATA_FLAGS,
            RequiredFileOffset: LARGE_INTEGER,
            RequiredLength: LARGE_INTEGER,
        };
        // --------------------------------------------------------
        // Type: _OpenCompletion_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _OpenCompletion_e__Struct = extern struct {
            Flags: CF_CALLBACK_OPEN_COMPLETION_FLAGS,
        };
        // --------------------------------------------------------
        // Type: _Delete_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Delete_e__Struct = extern struct {
            Flags: CF_CALLBACK_DELETE_FLAGS,
        };
    };
};
// --------------------------------------------------------
// Type: CF_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CF_CALLBACK_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_CALLBACK_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: CF_CALLBACK_REGISTRATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CF_CALLBACK_REGISTRATION = extern struct {
    Type: CF_CALLBACK_TYPE,
    Callback: CF_CALLBACK,
};
// --------------------------------------------------------
// Type: CF_CONNECT_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_CONNECT_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CF_OPERATION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_OPERATION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: CF_SYNC_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CF_SYNC_STATUS = extern struct {
    StructSize: u32,
    Code: u32,
    DescriptionOffset: u32,
    DescriptionLength: u32,
    DeviceIdOffset: u32,
    DeviceIdLength: u32,
};
// --------------------------------------------------------
// Type: CF_OPERATION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CF_OPERATION_INFO = extern struct {
    StructSize: u32,
    Type: CF_OPERATION_TYPE,
    ConnectionKey: CF_CONNECTION_KEY__,
    TransferKey: LARGE_INTEGER,
    CorrelationVector: ?*CORRELATION_VECTOR,
    SyncStatus: ?*CF_SYNC_STATUS,
    RequestKey: LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: CF_OPERATION_TRANSFER_DATA_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_OPERATION_TRANSFER_DATA_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CF_OPERATION_RETRIEVE_DATA_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_OPERATION_RETRIEVE_DATA_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CF_OPERATION_ACK_DATA_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_OPERATION_ACK_DATA_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CF_OPERATION_RESTART_HYDRATION_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_OPERATION_RESTART_HYDRATION_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CF_OPERATION_TRANSFER_PLACEHOLDERS_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_OPERATION_TRANSFER_PLACEHOLDERS_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CF_OPERATION_ACK_DEHYDRATE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_OPERATION_ACK_DEHYDRATE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CF_OPERATION_ACK_RENAME_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_OPERATION_ACK_RENAME_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CF_OPERATION_ACK_DELETE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_OPERATION_ACK_DELETE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CF_OPERATION_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CF_OPERATION_PARAMETERS = extern struct {
    ParamSize: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _AckDelete_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _AckDelete_e__Struct = extern struct {
            Flags: CF_OPERATION_ACK_DELETE_FLAGS,
            CompletionStatus: NTSTATUS,
        };
        // --------------------------------------------------------
        // Type: _AckDehydrate_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _AckDehydrate_e__Struct = extern struct {
            Flags: CF_OPERATION_ACK_DEHYDRATE_FLAGS,
            CompletionStatus: NTSTATUS,
            FileIdentity: ?*opaque{},
            FileIdentityLength: u32,
        };
        // --------------------------------------------------------
        // Type: _RestartHydration_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _RestartHydration_e__Struct = extern struct {
            Flags: CF_OPERATION_RESTART_HYDRATION_FLAGS,
            FsMetadata: ?*CF_FS_METADATA,
            FileIdentity: ?*opaque{},
            FileIdentityLength: u32,
        };
        // --------------------------------------------------------
        // Type: _RetrieveData_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _RetrieveData_e__Struct = extern struct {
            Flags: CF_OPERATION_RETRIEVE_DATA_FLAGS,
            Buffer: ?*opaque{},
            Offset: LARGE_INTEGER,
            Length: LARGE_INTEGER,
            ReturnedLength: LARGE_INTEGER,
        };
        // --------------------------------------------------------
        // Type: _AckRename_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _AckRename_e__Struct = extern struct {
            Flags: CF_OPERATION_ACK_RENAME_FLAGS,
            CompletionStatus: NTSTATUS,
        };
        // --------------------------------------------------------
        // Type: _AckData_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _AckData_e__Struct = extern struct {
            Flags: CF_OPERATION_ACK_DATA_FLAGS,
            CompletionStatus: NTSTATUS,
            Offset: LARGE_INTEGER,
            Length: LARGE_INTEGER,
        };
        // --------------------------------------------------------
        // Type: _TransferData_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _TransferData_e__Struct = extern struct {
            Flags: CF_OPERATION_TRANSFER_DATA_FLAGS,
            CompletionStatus: NTSTATUS,
            Buffer: ?*opaque{},
            Offset: LARGE_INTEGER,
            Length: LARGE_INTEGER,
        };
        // --------------------------------------------------------
        // Type: _TransferPlaceholders_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _TransferPlaceholders_e__Struct = extern struct {
            Flags: CF_OPERATION_TRANSFER_PLACEHOLDERS_FLAGS,
            CompletionStatus: NTSTATUS,
            PlaceholderTotalCount: LARGE_INTEGER,
            PlaceholderArray: ?*CF_PLACEHOLDER_CREATE_INFO,
            PlaceholderCount: u32,
            EntriesProcessed: u32,
        };
    };
};
// --------------------------------------------------------
// Type: CF_CREATE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_CREATE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CF_OPEN_FILE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_OPEN_FILE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CF_FILE_RANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CF_FILE_RANGE = extern struct {
    StartingOffset: LARGE_INTEGER,
    Length: LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: CF_CONVERT_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_CONVERT_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CF_UPDATE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_UPDATE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CF_REVERT_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_REVERT_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CF_HYDRATE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_HYDRATE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CF_DEHYDRATE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_DEHYDRATE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CF_PIN_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_PIN_STATE = *opaque{
};
// --------------------------------------------------------
// Type: CF_SET_PIN_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_SET_PIN_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CF_IN_SYNC_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_IN_SYNC_STATE = *opaque{
};
// --------------------------------------------------------
// Type: CF_SET_IN_SYNC_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_SET_IN_SYNC_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CF_PLACEHOLDER_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_PLACEHOLDER_STATE = *opaque{
};
// --------------------------------------------------------
// Type: CF_PLACEHOLDER_INFO_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_PLACEHOLDER_INFO_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: CF_PLACEHOLDER_BASIC_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CF_PLACEHOLDER_BASIC_INFO = extern struct {
    PinState: CF_PIN_STATE,
    InSyncState: CF_IN_SYNC_STATE,
    FileId: LARGE_INTEGER,
    SyncRootFileId: LARGE_INTEGER,
    FileIdentityLength: u32,
    FileIdentity: ?[*]u8,
};
// --------------------------------------------------------
// Type: CF_PLACEHOLDER_STANDARD_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CF_PLACEHOLDER_STANDARD_INFO = extern struct {
    OnDiskDataSize: LARGE_INTEGER,
    ValidatedDataSize: LARGE_INTEGER,
    ModifiedDataSize: LARGE_INTEGER,
    PropertiesSize: LARGE_INTEGER,
    PinState: CF_PIN_STATE,
    InSyncState: CF_IN_SYNC_STATE,
    FileId: LARGE_INTEGER,
    SyncRootFileId: LARGE_INTEGER,
    FileIdentityLength: u32,
    FileIdentity: ?[*]u8,
};
// --------------------------------------------------------
// Type: CF_SYNC_ROOT_INFO_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_SYNC_ROOT_INFO_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: CF_SYNC_ROOT_BASIC_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CF_SYNC_ROOT_BASIC_INFO = extern struct {
    SyncRootFileId: LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: CF_SYNC_ROOT_PROVIDER_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CF_SYNC_ROOT_PROVIDER_INFO = extern struct {
    ProviderStatus: CF_SYNC_PROVIDER_STATUS,
    ProviderName: ?[*]u16,
    ProviderVersion: ?[*]u16,
};
// --------------------------------------------------------
// Type: CF_SYNC_ROOT_STANDARD_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CF_SYNC_ROOT_STANDARD_INFO = extern struct {
    SyncRootFileId: LARGE_INTEGER,
    HydrationPolicy: CF_HYDRATION_POLICY,
    PopulationPolicy: CF_POPULATION_POLICY,
    InSyncPolicy: CF_INSYNC_POLICY,
    HardLinkPolicy: CF_HARDLINK_POLICY,
    ProviderStatus: CF_SYNC_PROVIDER_STATUS,
    ProviderName: ?[*]u16,
    ProviderVersion: ?[*]u16,
    SyncRootIdentityLength: u32,
    SyncRootIdentity: ?[*]u8,
};
// --------------------------------------------------------
// Type: CF_PLACEHOLDER_RANGE_INFO_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CF_PLACEHOLDER_RANGE_INFO_CLASS = *opaque{
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "cldapi" fn CfGetPlatformInfo(
    PlatformVersion: ?*CF_PLATFORM_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "cldapi" fn CfRegisterSyncRoot(
    SyncRootPath: ?*u16,
    Registration: ?*CF_SYNC_REGISTRATION,
    Policies: ?*CF_SYNC_POLICIES,
    RegisterFlags: CF_REGISTER_FLAGS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "cldapi" fn CfUnregisterSyncRoot(
    SyncRootPath: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "cldapi" fn CfConnectSyncRoot(
    SyncRootPath: ?*u16,
    CallbackTable: ?*CF_CALLBACK_REGISTRATION,
    CallbackContext: ?*opaque{},
    ConnectFlags: CF_CONNECT_FLAGS,
    ConnectionKey: ?*CF_CONNECTION_KEY__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "cldapi" fn CfDisconnectSyncRoot(
    ConnectionKey: CF_CONNECTION_KEY__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "cldapi" fn CfGetTransferKey(
    FileHandle: HANDLE,
    TransferKey: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "cldapi" fn CfReleaseTransferKey(
    FileHandle: HANDLE,
    TransferKey: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "cldapi" fn CfExecute(
    OpInfo: ?*CF_OPERATION_INFO,
    OpParams: ?*CF_OPERATION_PARAMETERS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "cldapi" fn CfUpdateSyncProviderStatus(
    ConnectionKey: CF_CONNECTION_KEY__,
    ProviderStatus: CF_SYNC_PROVIDER_STATUS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "cldapi" fn CfQuerySyncProviderStatus(
    ConnectionKey: CF_CONNECTION_KEY__,
    ProviderStatus: ?*CF_SYNC_PROVIDER_STATUS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "cldapi" fn CfReportSyncStatus(
    SyncRootPath: ?*u16,
    SyncStatus: ?*CF_SYNC_STATUS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "cldapi" fn CfCreatePlaceholders(
    BaseDirectoryPath: ?*u16,
    PlaceholderArray: ?*CF_PLACEHOLDER_CREATE_INFO,
    PlaceholderCount: u32,
    CreateFlags: CF_CREATE_FLAGS,
    EntriesProcessed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "cldapi" fn CfOpenFileWithOplock(
    FilePath: ?*u16,
    Flags: CF_OPEN_FILE_FLAGS,
    ProtectedHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "cldapi" fn CfReferenceProtectedHandle(
    ProtectedHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "cldapi" fn CfGetWin32HandleFromProtectedHandle(
    ProtectedHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=False (can and should we use this?)
pub extern "cldapi" fn CfReleaseProtectedHandle(
    ProtectedHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "cldapi" fn CfCloseHandle(
    FileHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "cldapi" fn CfConvertToPlaceholder(
    FileHandle: HANDLE,
    FileIdentity: ?*opaque{},
    FileIdentityLength: u32,
    ConvertFlags: CF_CONVERT_FLAGS,
    ConvertUsn: ?*i64,
    Overlapped: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "cldapi" fn CfUpdatePlaceholder(
    FileHandle: HANDLE,
    FsMetadata: ?*CF_FS_METADATA,
    FileIdentity: ?*opaque{},
    FileIdentityLength: u32,
    DehydrateRangeArray: ?*CF_FILE_RANGE,
    DehydrateRangeCount: u32,
    UpdateFlags: CF_UPDATE_FLAGS,
    UpdateUsn: ?*i64,
    Overlapped: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "cldapi" fn CfRevertPlaceholder(
    FileHandle: HANDLE,
    RevertFlags: CF_REVERT_FLAGS,
    Overlapped: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "cldapi" fn CfHydratePlaceholder(
    FileHandle: HANDLE,
    StartingOffset: LARGE_INTEGER,
    Length: LARGE_INTEGER,
    HydrateFlags: CF_HYDRATE_FLAGS,
    Overlapped: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "cldapi" fn CfDehydratePlaceholder(
    FileHandle: HANDLE,
    StartingOffset: LARGE_INTEGER,
    Length: LARGE_INTEGER,
    DehydrateFlags: CF_DEHYDRATE_FLAGS,
    Overlapped: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "cldapi" fn CfSetPinState(
    FileHandle: HANDLE,
    PinState: CF_PIN_STATE,
    PinFlags: CF_SET_PIN_FLAGS,
    Overlapped: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "cldapi" fn CfSetInSyncState(
    FileHandle: HANDLE,
    InSyncState: CF_IN_SYNC_STATE,
    InSyncFlags: CF_SET_IN_SYNC_FLAGS,
    InSyncUsn: ?*i64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "cldapi" fn CfSetCorrelationVector(
    FileHandle: HANDLE,
    CorrelationVector: ?*CORRELATION_VECTOR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "cldapi" fn CfGetCorrelationVector(
    FileHandle: HANDLE,
    CorrelationVector: ?*CORRELATION_VECTOR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "cldapi" fn CfGetPlaceholderStateFromAttributeTag(
    FileAttributes: u32,
    ReparseTag: u32,
) callconv(@import("std").os.windows.WINAPI) CF_PLACEHOLDER_STATE;

// set_last_errror=False (can and should we use this?)
pub extern "cldapi" fn CfGetPlaceholderStateFromFileInfo(
    InfoBuffer: ?*opaque{},
    InfoClass: FILE_INFO_BY_HANDLE_CLASS,
) callconv(@import("std").os.windows.WINAPI) CF_PLACEHOLDER_STATE;

// set_last_errror=False (can and should we use this?)
pub extern "cldapi" fn CfGetPlaceholderStateFromFindData(
    FindData: ?*WIN32_FIND_DATAA,
) callconv(@import("std").os.windows.WINAPI) CF_PLACEHOLDER_STATE;

// set_last_errror=False (can and should we use this?)
pub extern "cldapi" fn CfGetPlaceholderInfo(
    FileHandle: HANDLE,
    InfoClass: CF_PLACEHOLDER_INFO_CLASS,
    InfoBuffer: ?*opaque{},
    InfoBufferLength: u32,
    ReturnedLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "cldapi" fn CfGetSyncRootInfoByPath(
    FilePath: ?*u16,
    InfoClass: CF_SYNC_ROOT_INFO_CLASS,
    InfoBuffer: ?*opaque{},
    InfoBufferLength: u32,
    ReturnedLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "cldapi" fn CfGetSyncRootInfoByHandle(
    FileHandle: HANDLE,
    InfoClass: CF_SYNC_ROOT_INFO_CLASS,
    InfoBuffer: ?*opaque{},
    InfoBufferLength: u32,
    ReturnedLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "cldapi" fn CfGetPlaceholderRangeInfo(
    FileHandle: HANDLE,
    InfoClass: CF_PLACEHOLDER_RANGE_INFO_CLASS,
    StartingOffset: LARGE_INTEGER,
    Length: LARGE_INTEGER,
    InfoBuffer: ?*opaque{},
    InfoBufferLength: u32,
    ReturnedLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "cldapi" fn CfReportProviderProgress(
    ConnectionKey: CF_CONNECTION_KEY__,
    TransferKey: LARGE_INTEGER,
    ProviderProgressTotal: LARGE_INTEGER,
    ProviderProgressCompleted: LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "cldapi" fn CfReportProviderProgress2(
    ConnectionKey: CF_CONNECTION_KEY__,
    TransferKey: LARGE_INTEGER,
    RequestKey: LARGE_INTEGER,
    ProviderProgressTotal: LARGE_INTEGER,
    ProviderProgressCompleted: LARGE_INTEGER,
    TargetSessionId: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    else => if (@import("builtin").is_test) struct {
    } else struct {
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const FILE_BASIC_INFO = @import("filesystem.zig").FILE_BASIC_INFO;
const LARGE_INTEGER = @import("systemservices.zig").LARGE_INTEGER;
const HRESULT = @import("com.zig").HRESULT;
const CORRELATION_VECTOR = @import("systemservices.zig").CORRELATION_VECTOR;
const NTSTATUS = @import("systemservices.zig").NTSTATUS;
const HANDLE = @import("systemservices.zig").HANDLE;
const OVERLAPPED = @import("systemservices.zig").OVERLAPPED;
const FILE_INFO_BY_HANDLE_CLASS = @import("filesystem.zig").FILE_INFO_BY_HANDLE_CLASS;
const WIN32_FIND_DATAA = @import("filesystem.zig").WIN32_FIND_DATAA;

test "" {
    const constant_export_count = 0;
    const type_export_count = 75;
    const func_count = 35;
    const unicode_alias_count = 0;
    const type_import_count = 10;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
