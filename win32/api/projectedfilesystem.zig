//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: PRJ_NOTIFY_TYPES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PRJ_NOTIFY_TYPES = *opaque{
};
// --------------------------------------------------------
// Type: PRJ_NOTIFICATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PRJ_NOTIFICATION = *opaque{
};
// --------------------------------------------------------
// Type: PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT__ = extern struct {
    unused: i32,
};
// --------------------------------------------------------
// Type: PRJ_DIR_ENTRY_BUFFER_HANDLE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRJ_DIR_ENTRY_BUFFER_HANDLE__ = extern struct {
    unused: i32,
};
// --------------------------------------------------------
// Type: PRJ_EXT_INFO_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PRJ_EXT_INFO_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: PRJ_EXTENDED_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRJ_EXTENDED_INFO = extern struct {
    InfoType: PRJ_EXT_INFO_TYPE,
    NextInfoOffset: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Symlink_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Symlink_e__Struct = extern struct {
            TargetName: ?*u16,
        };
    };
};
// --------------------------------------------------------
// Type: PRJ_NOTIFICATION_MAPPING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRJ_NOTIFICATION_MAPPING = extern struct {
    NotificationBitMask: PRJ_NOTIFY_TYPES,
    NotificationRoot: ?*u16,
};
// --------------------------------------------------------
// Type: PRJ_STARTVIRTUALIZING_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PRJ_STARTVIRTUALIZING_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: PRJ_STARTVIRTUALIZING_OPTIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRJ_STARTVIRTUALIZING_OPTIONS = extern struct {
    Flags: PRJ_STARTVIRTUALIZING_FLAGS,
    PoolThreadCount: u32,
    ConcurrentThreadCount: u32,
    NotificationMappings: ?*PRJ_NOTIFICATION_MAPPING,
    NotificationMappingsCount: u32,
};
// --------------------------------------------------------
// Type: PRJ_VIRTUALIZATION_INSTANCE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRJ_VIRTUALIZATION_INSTANCE_INFO = extern struct {
    InstanceID: Guid,
    WriteAlignment: u32,
};
// --------------------------------------------------------
// Type: PRJ_PLACEHOLDER_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PRJ_PLACEHOLDER_ID = *opaque{
};
// --------------------------------------------------------
// Type: PRJ_PLACEHOLDER_VERSION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRJ_PLACEHOLDER_VERSION_INFO = extern struct {
    ProviderID: ?[*]u8,
    ContentID: ?[*]u8,
};
// --------------------------------------------------------
// Type: PRJ_FILE_BASIC_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRJ_FILE_BASIC_INFO = extern struct {
    IsDirectory: u8,
    FileSize: i64,
    CreationTime: LARGE_INTEGER,
    LastAccessTime: LARGE_INTEGER,
    LastWriteTime: LARGE_INTEGER,
    ChangeTime: LARGE_INTEGER,
    FileAttributes: u32,
};
// --------------------------------------------------------
// Type: PRJ_PLACEHOLDER_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRJ_PLACEHOLDER_INFO = extern struct {
    FileBasicInfo: PRJ_FILE_BASIC_INFO,
    EaInformation: _EaInformation_e__Struct,
    SecurityInformation: _SecurityInformation_e__Struct,
    StreamsInformation: _StreamsInformation_e__Struct,
    VersionInfo: PRJ_PLACEHOLDER_VERSION_INFO,
    VariableData: ?[*]u8,
    // --------------------------------------------------------
    // Type: _StreamsInformation_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _StreamsInformation_e__Struct = extern struct {
        StreamsInfoBufferSize: u32,
        OffsetToFirstStreamInfo: u32,
    };
    // --------------------------------------------------------
    // Type: _EaInformation_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _EaInformation_e__Struct = extern struct {
        EaBufferSize: u32,
        OffsetToFirstEa: u32,
    };
    // --------------------------------------------------------
    // Type: _SecurityInformation_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _SecurityInformation_e__Struct = extern struct {
        SecurityBufferSize: u32,
        OffsetToSecurityDescriptor: u32,
    };
};
// --------------------------------------------------------
// Type: PRJ_UPDATE_TYPES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PRJ_UPDATE_TYPES = *opaque{
};
// --------------------------------------------------------
// Type: PRJ_UPDATE_FAILURE_CAUSES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PRJ_UPDATE_FAILURE_CAUSES = *opaque{
};
// --------------------------------------------------------
// Type: PRJ_FILE_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PRJ_FILE_STATE = *opaque{
};
// --------------------------------------------------------
// Type: PRJ_CALLBACK_DATA_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PRJ_CALLBACK_DATA_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: PRJ_CALLBACK_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRJ_CALLBACK_DATA = extern struct {
    Size: u32,
    Flags: PRJ_CALLBACK_DATA_FLAGS,
    NamespaceVirtualizationContext: ?*PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT__,
    CommandId: i32,
    FileId: Guid,
    DataStreamId: Guid,
    FilePathName: ?*u16,
    VersionInfo: ?*PRJ_PLACEHOLDER_VERSION_INFO,
    TriggeringProcessId: u32,
    TriggeringProcessImageFileName: ?*u16,
    InstanceContext: ?*opaque{},
};
// --------------------------------------------------------
// Type: PRJ_START_DIRECTORY_ENUMERATION_CB
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PRJ_START_DIRECTORY_ENUMERATION_CB = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PRJ_GET_DIRECTORY_ENUMERATION_CB
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PRJ_GET_DIRECTORY_ENUMERATION_CB = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PRJ_END_DIRECTORY_ENUMERATION_CB
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PRJ_END_DIRECTORY_ENUMERATION_CB = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PRJ_GET_PLACEHOLDER_INFO_CB
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PRJ_GET_PLACEHOLDER_INFO_CB = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PRJ_GET_FILE_DATA_CB
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PRJ_GET_FILE_DATA_CB = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PRJ_QUERY_FILE_NAME_CB
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PRJ_QUERY_FILE_NAME_CB = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PRJ_NOTIFICATION_PARAMETERS
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const PRJ_NOTIFICATION_PARAMETERS = *opaque{
    // --------------------------------------------------------
    // Type: _FileRenamed_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _FileRenamed_e__Struct = extern struct {
        NotificationMask: PRJ_NOTIFY_TYPES,
    };
    // --------------------------------------------------------
    // Type: _PostCreate_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _PostCreate_e__Struct = extern struct {
        NotificationMask: PRJ_NOTIFY_TYPES,
    };
    // --------------------------------------------------------
    // Type: _FileDeletedOnHandleClose_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _FileDeletedOnHandleClose_e__Struct = extern struct {
        IsFileModified: u8,
    };
};
// --------------------------------------------------------
// Type: PRJ_NOTIFICATION_CB
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PRJ_NOTIFICATION_CB = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PRJ_CANCEL_COMMAND_CB
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PRJ_CANCEL_COMMAND_CB = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PRJ_CALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRJ_CALLBACKS = extern struct {
    StartDirectoryEnumerationCallback: ?*PRJ_START_DIRECTORY_ENUMERATION_CB,
    EndDirectoryEnumerationCallback: ?*PRJ_END_DIRECTORY_ENUMERATION_CB,
    GetDirectoryEnumerationCallback: ?*PRJ_GET_DIRECTORY_ENUMERATION_CB,
    GetPlaceholderInfoCallback: ?*PRJ_GET_PLACEHOLDER_INFO_CB,
    GetFileDataCallback: ?*PRJ_GET_FILE_DATA_CB,
    QueryFileNameCallback: ?*PRJ_QUERY_FILE_NAME_CB,
    NotificationCallback: ?*PRJ_NOTIFICATION_CB,
    CancelCommandCallback: ?*PRJ_CANCEL_COMMAND_CB,
};
// --------------------------------------------------------
// Type: PRJ_COMPLETE_COMMAND_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PRJ_COMPLETE_COMMAND_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: PRJ_COMPLETE_COMMAND_EXTENDED_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRJ_COMPLETE_COMMAND_EXTENDED_PARAMETERS = extern struct {
    CommandType: PRJ_COMPLETE_COMMAND_TYPE,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Notification_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Notification_e__Struct = extern struct {
            NotificationMask: PRJ_NOTIFY_TYPES,
        };
        // --------------------------------------------------------
        // Type: _Enumeration_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Enumeration_e__Struct = extern struct {
            DirEntryBufferHandle: ?*PRJ_DIR_ENTRY_BUFFER_HANDLE__,
        };
    };
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "PROJECTEDFSLIB" fn PrjStartVirtualizing(
    virtualizationRootPath: ?*u16,
    callbacks: ?*PRJ_CALLBACKS,
    instanceContext: ?*opaque{},
    options: ?*PRJ_STARTVIRTUALIZING_OPTIONS,
    namespaceVirtualizationContext: ?*?*PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROJECTEDFSLIB" fn PrjStopVirtualizing(
    namespaceVirtualizationContext: ?*PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT__,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "PROJECTEDFSLIB" fn PrjClearNegativePathCache(
    namespaceVirtualizationContext: ?*PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT__,
    totalEntryNumber: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROJECTEDFSLIB" fn PrjGetVirtualizationInstanceInfo(
    namespaceVirtualizationContext: ?*PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT__,
    virtualizationInstanceInfo: ?*PRJ_VIRTUALIZATION_INSTANCE_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROJECTEDFSLIB" fn PrjMarkDirectoryAsPlaceholder(
    rootPathName: ?*u16,
    targetPathName: ?*u16,
    versionInfo: ?*PRJ_PLACEHOLDER_VERSION_INFO,
    virtualizationInstanceID: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROJECTEDFSLIB" fn PrjWritePlaceholderInfo(
    namespaceVirtualizationContext: ?*PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT__,
    destinationFileName: ?*u16,
    placeholderInfo: ?*PRJ_PLACEHOLDER_INFO,
    placeholderInfoSize: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROJECTEDFSLIB" fn PrjWritePlaceholderInfo2(
    namespaceVirtualizationContext: ?*PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT__,
    destinationFileName: ?*u16,
    placeholderInfo: ?*PRJ_PLACEHOLDER_INFO,
    placeholderInfoSize: u32,
    ExtendedInfo: ?*PRJ_EXTENDED_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROJECTEDFSLIB" fn PrjUpdateFileIfNeeded(
    namespaceVirtualizationContext: ?*PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT__,
    destinationFileName: ?*u16,
    placeholderInfo: ?*PRJ_PLACEHOLDER_INFO,
    placeholderInfoSize: u32,
    updateFlags: PRJ_UPDATE_TYPES,
    failureReason: ?*PRJ_UPDATE_FAILURE_CAUSES,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROJECTEDFSLIB" fn PrjDeleteFile(
    namespaceVirtualizationContext: ?*PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT__,
    destinationFileName: ?*u16,
    updateFlags: PRJ_UPDATE_TYPES,
    failureReason: ?*PRJ_UPDATE_FAILURE_CAUSES,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROJECTEDFSLIB" fn PrjWriteFileData(
    namespaceVirtualizationContext: ?*PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT__,
    dataStreamId: ?*Guid,
    buffer: ?*opaque{},
    byteOffset: u64,
    length: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROJECTEDFSLIB" fn PrjGetOnDiskFileState(
    destinationFileName: ?*u16,
    fileState: ?*PRJ_FILE_STATE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROJECTEDFSLIB" fn PrjAllocateAlignedBuffer(
    namespaceVirtualizationContext: ?*PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT__,
    size: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "PROJECTEDFSLIB" fn PrjFreeAlignedBuffer(
    buffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "PROJECTEDFSLIB" fn PrjCompleteCommand(
    namespaceVirtualizationContext: ?*PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT__,
    commandId: i32,
    completionResult: HRESULT,
    extendedParameters: ?*PRJ_COMPLETE_COMMAND_EXTENDED_PARAMETERS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROJECTEDFSLIB" fn PrjFillDirEntryBuffer(
    fileName: ?*u16,
    fileBasicInfo: ?*PRJ_FILE_BASIC_INFO,
    dirEntryBufferHandle: ?*PRJ_DIR_ENTRY_BUFFER_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROJECTEDFSLIB" fn PrjFillDirEntryBuffer2(
    dirEntryBufferHandle: ?*PRJ_DIR_ENTRY_BUFFER_HANDLE__,
    fileName: ?*u16,
    fileBasicInfo: ?*PRJ_FILE_BASIC_INFO,
    extendedInfo: ?*PRJ_EXTENDED_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROJECTEDFSLIB" fn PrjFileNameMatch(
    fileNameToCheck: ?*u16,
    pattern: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "PROJECTEDFSLIB" fn PrjFileNameCompare(
    fileName1: ?*u16,
    fileName2: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "PROJECTEDFSLIB" fn PrjDoesNameContainWildCards(
    fileName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u8;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    else => if (@import("builtin").is_test) struct {
    } else struct {
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const LARGE_INTEGER = @import("systemservices.zig").LARGE_INTEGER;
const HRESULT = @import("com.zig").HRESULT;

test "" {
    const constant_export_count = 0;
    const type_export_count = 31;
    const func_count = 19;
    const unicode_alias_count = 0;
    const type_import_count = 3;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
