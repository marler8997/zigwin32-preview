//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//
pub const D3D12_16BIT_INDEX_STRIP_CUT_VALUE : u32 = 65535;
pub const D3D12_32BIT_INDEX_STRIP_CUT_VALUE : u32 = 4294967295;
pub const D3D12_8BIT_INDEX_STRIP_CUT_VALUE : u32 = 255;
pub const D3D12_APPEND_ALIGNED_ELEMENT : u32 = 4294967295;
pub const D3D12_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT : u32 = 9;
pub const D3D12_CLIP_OR_CULL_DISTANCE_COUNT : u32 = 8;
pub const D3D12_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT : u32 = 2;
pub const D3D12_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT : u32 = 14;
pub const D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS : u32 = 4;
pub const D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT : u32 = 32;
pub const D3D12_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT : u32 = 15;
pub const D3D12_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT : u32 = 16;
pub const D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS : u32 = 4;
pub const D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT : u32 = 15;
pub const D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST : u32 = 1;
pub const D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS : u32 = 1;
pub const D3D12_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT : u32 = 64;
pub const D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS : u32 = 4;
pub const D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT : u32 = 1;
pub const D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST : u32 = 1;
pub const D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS : u32 = 1;
pub const D3D12_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT : u32 = 32;
pub const D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS : u32 = 1;
pub const D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT : u32 = 128;
pub const D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST : u32 = 1;
pub const D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS : u32 = 1;
pub const D3D12_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT : u32 = 128;
pub const D3D12_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS : u32 = 1;
pub const D3D12_COMMONSHADER_SAMPLER_REGISTER_COUNT : u32 = 16;
pub const D3D12_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST : u32 = 1;
pub const D3D12_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS : u32 = 1;
pub const D3D12_COMMONSHADER_SAMPLER_SLOT_COUNT : u32 = 16;
pub const D3D12_COMMONSHADER_SUBROUTINE_NESTING_LIMIT : u32 = 32;
pub const D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENTS : u32 = 4;
pub const D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT : u32 = 32;
pub const D3D12_COMMONSHADER_TEMP_REGISTER_COUNT : u32 = 4096;
pub const D3D12_COMMONSHADER_TEMP_REGISTER_READS_PER_INST : u32 = 3;
pub const D3D12_COMMONSHADER_TEMP_REGISTER_READ_PORTS : u32 = 3;
pub const D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX : u32 = 10;
pub const D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN : i32 = -10;
pub const D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE : i32 = -8;
pub const D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE : u32 = 7;
pub const D3D12_CONSTANT_BUFFER_DATA_PLACEMENT_ALIGNMENT : u32 = 256;
pub const D3D12_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD : u32 = 256;
pub const D3D12_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP : u32 = 64;
pub const D3D12_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD : u32 = 240;
pub const D3D12_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP : u32 = 68;
pub const D3D12_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD : u32 = 224;
pub const D3D12_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP : u32 = 72;
pub const D3D12_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD : u32 = 208;
pub const D3D12_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP : u32 = 76;
pub const D3D12_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD : u32 = 192;
pub const D3D12_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP : u32 = 84;
pub const D3D12_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD : u32 = 176;
pub const D3D12_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP : u32 = 92;
pub const D3D12_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD : u32 = 160;
pub const D3D12_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP : u32 = 100;
pub const D3D12_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD : u32 = 144;
pub const D3D12_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP : u32 = 112;
pub const D3D12_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD : u32 = 128;
pub const D3D12_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP : u32 = 128;
pub const D3D12_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD : u32 = 112;
pub const D3D12_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP : u32 = 144;
pub const D3D12_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD : u32 = 96;
pub const D3D12_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP : u32 = 168;
pub const D3D12_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD : u32 = 80;
pub const D3D12_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP : u32 = 204;
pub const D3D12_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD : u32 = 64;
pub const D3D12_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP : u32 = 256;
pub const D3D12_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD : u32 = 48;
pub const D3D12_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP : u32 = 340;
pub const D3D12_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD : u32 = 32;
pub const D3D12_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP : u32 = 512;
pub const D3D12_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD : u32 = 16;
pub const D3D12_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP : u32 = 768;
pub const D3D12_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION : u32 = 1;
pub const D3D12_CS_4_X_RAW_UAV_BYTE_ALIGNMENT : u32 = 256;
pub const D3D12_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP : u32 = 768;
pub const D3D12_CS_4_X_THREAD_GROUP_MAX_X : u32 = 768;
pub const D3D12_CS_4_X_THREAD_GROUP_MAX_Y : u32 = 768;
pub const D3D12_CS_4_X_UAV_REGISTER_COUNT : u32 = 1;
pub const D3D12_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION : u32 = 65535;
pub const D3D12_CS_TGSM_REGISTER_COUNT : u32 = 8192;
pub const D3D12_CS_TGSM_REGISTER_READS_PER_INST : u32 = 1;
pub const D3D12_CS_TGSM_RESOURCE_REGISTER_COMPONENTS : u32 = 1;
pub const D3D12_CS_TGSM_RESOURCE_REGISTER_READ_PORTS : u32 = 1;
pub const D3D12_CS_THREADGROUPID_REGISTER_COMPONENTS : u32 = 3;
pub const D3D12_CS_THREADGROUPID_REGISTER_COUNT : u32 = 1;
pub const D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COMPONENTS : u32 = 1;
pub const D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COUNT : u32 = 1;
pub const D3D12_CS_THREADIDINGROUP_REGISTER_COMPONENTS : u32 = 3;
pub const D3D12_CS_THREADIDINGROUP_REGISTER_COUNT : u32 = 1;
pub const D3D12_CS_THREADID_REGISTER_COMPONENTS : u32 = 3;
pub const D3D12_CS_THREADID_REGISTER_COUNT : u32 = 1;
pub const D3D12_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP : u32 = 1024;
pub const D3D12_CS_THREAD_GROUP_MAX_X : u32 = 1024;
pub const D3D12_CS_THREAD_GROUP_MAX_Y : u32 = 1024;
pub const D3D12_CS_THREAD_GROUP_MAX_Z : u32 = 64;
pub const D3D12_CS_THREAD_GROUP_MIN_X : u32 = 1;
pub const D3D12_CS_THREAD_GROUP_MIN_Y : u32 = 1;
pub const D3D12_CS_THREAD_GROUP_MIN_Z : u32 = 1;
pub const D3D12_CS_THREAD_LOCAL_TEMP_REGISTER_POOL : u32 = 16384;
pub const D3D12_DEFAULT_BLEND_FACTOR_ALPHA : f32 = 1;
pub const D3D12_DEFAULT_BLEND_FACTOR_BLUE : f32 = 1;
pub const D3D12_DEFAULT_BLEND_FACTOR_GREEN : f32 = 1;
pub const D3D12_DEFAULT_BLEND_FACTOR_RED : f32 = 1;
pub const D3D12_DEFAULT_BORDER_COLOR_COMPONENT : f32 = 0;
pub const D3D12_DEFAULT_DEPTH_BIAS : i32 = 0;
pub const D3D12_DEFAULT_DEPTH_BIAS_CLAMP : f32 = 0;
pub const D3D12_DEFAULT_MAX_ANISOTROPY : u32 = 16;
pub const D3D12_DEFAULT_MIP_LOD_BIAS : f32 = 0;
pub const D3D12_DEFAULT_MSAA_RESOURCE_PLACEMENT_ALIGNMENT : u32 = 4194304;
pub const D3D12_DEFAULT_RENDER_TARGET_ARRAY_INDEX : u32 = 0;
pub const D3D12_DEFAULT_RESOURCE_PLACEMENT_ALIGNMENT : u32 = 65536;
pub const D3D12_DEFAULT_SAMPLE_MASK : u32 = 4294967295;
pub const D3D12_DEFAULT_SCISSOR_ENDX : u32 = 0;
pub const D3D12_DEFAULT_SCISSOR_ENDY : u32 = 0;
pub const D3D12_DEFAULT_SCISSOR_STARTX : u32 = 0;
pub const D3D12_DEFAULT_SCISSOR_STARTY : u32 = 0;
pub const D3D12_DEFAULT_SLOPE_SCALED_DEPTH_BIAS : f32 = 0;
pub const D3D12_DEFAULT_STENCIL_READ_MASK : u32 = 255;
pub const D3D12_DEFAULT_STENCIL_REFERENCE : u32 = 0;
pub const D3D12_DEFAULT_STENCIL_WRITE_MASK : u32 = 255;
pub const D3D12_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX : u32 = 0;
pub const D3D12_DEFAULT_VIEWPORT_HEIGHT : u32 = 0;
pub const D3D12_DEFAULT_VIEWPORT_MAX_DEPTH : f32 = 0;
pub const D3D12_DEFAULT_VIEWPORT_MIN_DEPTH : f32 = 0;
pub const D3D12_DEFAULT_VIEWPORT_TOPLEFTX : u32 = 0;
pub const D3D12_DEFAULT_VIEWPORT_TOPLEFTY : u32 = 0;
pub const D3D12_DEFAULT_VIEWPORT_WIDTH : u32 = 0;
pub const D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND : u32 = 4294967295;
pub const D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_END : u32 = 4294967287;
pub const D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_START : u32 = 4294967280;
pub const D3D12_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS : u32 = 3968;
pub const D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS : u32 = 4;
pub const D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT : u32 = 32;
pub const D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COUNT : u32 = 32;
pub const D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST : u32 = 2;
pub const D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS : u32 = 1;
pub const D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS : u32 = 3;
pub const D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT : u32 = 32;
pub const D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT : u32 = 1;
pub const D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST : u32 = 2;
pub const D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS : u32 = 1;
pub const D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS : u32 = 4;
pub const D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT : u32 = 32;
pub const D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT : u32 = 32;
pub const D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST : u32 = 2;
pub const D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS : u32 = 1;
pub const D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS : u32 = 1;
pub const D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT : u32 = 32;
pub const D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COUNT : u32 = 1;
pub const D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST : u32 = 2;
pub const D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS : u32 = 1;
pub const D3D12_DS_OUTPUT_REGISTER_COMPONENTS : u32 = 4;
pub const D3D12_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT : u32 = 32;
pub const D3D12_DS_OUTPUT_REGISTER_COUNT : u32 = 32;
pub const D3D12_FLOAT16_FUSED_TOLERANCE_IN_ULP : f32 = 0.6;
pub const D3D12_FLOAT32_MAX : f32 = 3.4028235E+38;
pub const D3D12_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP : f32 = 0.6;
pub const D3D12_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR : f32 = 2.4;
pub const D3D12_FLOAT_TO_SRGB_EXPONENT_NUMERATOR : f32 = 1;
pub const D3D12_FLOAT_TO_SRGB_OFFSET : f32 = 0.055;
pub const D3D12_FLOAT_TO_SRGB_SCALE_1 : f32 = 12.92;
pub const D3D12_FLOAT_TO_SRGB_SCALE_2 : f32 = 1.055;
pub const D3D12_FLOAT_TO_SRGB_THRESHOLD : f32 = 0.0031308;
pub const D3D12_FTOI_INSTRUCTION_MAX_INPUT : f32 = 2.1474836E+09;
pub const D3D12_FTOI_INSTRUCTION_MIN_INPUT : f32 = -2.1474836E+09;
pub const D3D12_FTOU_INSTRUCTION_MAX_INPUT : f32 = 4.2949673E+09;
pub const D3D12_FTOU_INSTRUCTION_MIN_INPUT : f32 = 0;
pub const D3D12_GS_INPUT_INSTANCE_ID_READS_PER_INST : u32 = 2;
pub const D3D12_GS_INPUT_INSTANCE_ID_READ_PORTS : u32 = 1;
pub const D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS : u32 = 1;
pub const D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT : u32 = 32;
pub const D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COUNT : u32 = 1;
pub const D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS : u32 = 1;
pub const D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT : u32 = 32;
pub const D3D12_GS_INPUT_PRIM_CONST_REGISTER_COUNT : u32 = 1;
pub const D3D12_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST : u32 = 2;
pub const D3D12_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS : u32 = 1;
pub const D3D12_GS_INPUT_REGISTER_COMPONENTS : u32 = 4;
pub const D3D12_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT : u32 = 32;
pub const D3D12_GS_INPUT_REGISTER_COUNT : u32 = 32;
pub const D3D12_GS_INPUT_REGISTER_READS_PER_INST : u32 = 2;
pub const D3D12_GS_INPUT_REGISTER_READ_PORTS : u32 = 1;
pub const D3D12_GS_INPUT_REGISTER_VERTICES : u32 = 32;
pub const D3D12_GS_MAX_INSTANCE_COUNT : u32 = 32;
pub const D3D12_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES : u32 = 1024;
pub const D3D12_GS_OUTPUT_ELEMENTS : u32 = 32;
pub const D3D12_GS_OUTPUT_REGISTER_COMPONENTS : u32 = 4;
pub const D3D12_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT : u32 = 32;
pub const D3D12_GS_OUTPUT_REGISTER_COUNT : u32 = 32;
pub const D3D12_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT : u32 = 32;
pub const D3D12_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT : u32 = 32;
pub const D3D12_HS_CONTROL_POINT_REGISTER_COMPONENTS : u32 = 4;
pub const D3D12_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT : u32 = 32;
pub const D3D12_HS_CONTROL_POINT_REGISTER_READS_PER_INST : u32 = 2;
pub const D3D12_HS_CONTROL_POINT_REGISTER_READ_PORTS : u32 = 1;
pub const D3D12_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND : u32 = 4294967295;
pub const D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS : u32 = 1;
pub const D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT : u32 = 32;
pub const D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT : u32 = 1;
pub const D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST : u32 = 2;
pub const D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS : u32 = 1;
pub const D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS : u32 = 1;
pub const D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT : u32 = 32;
pub const D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT : u32 = 1;
pub const D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST : u32 = 2;
pub const D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS : u32 = 1;
pub const D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS : u32 = 1;
pub const D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT : u32 = 32;
pub const D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT : u32 = 1;
pub const D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST : u32 = 2;
pub const D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS : u32 = 1;
pub const D3D12_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND : u32 = 4294967295;
pub const D3D12_HS_MAXTESSFACTOR_LOWER_BOUND : f32 = 1;
pub const D3D12_HS_MAXTESSFACTOR_UPPER_BOUND : f32 = 64;
pub const D3D12_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS : u32 = 3968;
pub const D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS : u32 = 1;
pub const D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT : u32 = 32;
pub const D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT : u32 = 1;
pub const D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST : u32 = 2;
pub const D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS : u32 = 1;
pub const D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS : u32 = 4;
pub const D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT : u32 = 32;
pub const D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT : u32 = 32;
pub const D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST : u32 = 2;
pub const D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS : u32 = 1;
pub const D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_SCALAR_COMPONENTS : u32 = 128;
pub const D3D12_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES : u32 = 0;
pub const D3D12_IA_DEFAULT_PRIMITIVE_TOPOLOGY : u32 = 0;
pub const D3D12_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES : u32 = 0;
pub const D3D12_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT : u32 = 1;
pub const D3D12_IA_INSTANCE_ID_BIT_COUNT : u32 = 32;
pub const D3D12_IA_INTEGER_ARITHMETIC_BIT_COUNT : u32 = 32;
pub const D3D12_IA_PATCH_MAX_CONTROL_POINT_COUNT : u32 = 32;
pub const D3D12_IA_PRIMITIVE_ID_BIT_COUNT : u32 = 32;
pub const D3D12_IA_VERTEX_ID_BIT_COUNT : u32 = 32;
pub const D3D12_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT : u32 = 32;
pub const D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS : u32 = 128;
pub const D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT : u32 = 32;
pub const D3D12_INTEGER_DIVIDE_BY_ZERO_QUOTIENT : u32 = 4294967295;
pub const D3D12_INTEGER_DIVIDE_BY_ZERO_REMAINDER : u32 = 4294967295;
pub const D3D12_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL : u32 = 4294967295;
pub const D3D12_KEEP_UNORDERED_ACCESS_VIEWS : u32 = 4294967295;
pub const D3D12_LINEAR_GAMMA : f32 = 1;
pub const D3D12_MAJOR_VERSION : u32 = 12;
pub const D3D12_MAX_BORDER_COLOR_COMPONENT : f32 = 1;
pub const D3D12_MAX_DEPTH : f32 = 1;
pub const D3D12_MAX_LIVE_STATIC_SAMPLERS : u32 = 2032;
pub const D3D12_MAX_MAXANISOTROPY : u32 = 16;
pub const D3D12_MAX_MULTISAMPLE_SAMPLE_COUNT : u32 = 32;
pub const D3D12_MAX_POSITION_VALUE : f32 = 3.4028236E+34;
pub const D3D12_MAX_ROOT_COST : u32 = 64;
pub const D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_SIZE_TIER_1 : u32 = 1000000;
pub const D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_SIZE_TIER_2 : u32 = 1000000;
pub const D3D12_MAX_SHADER_VISIBLE_SAMPLER_HEAP_SIZE : u32 = 2048;
pub const D3D12_MAX_TEXTURE_DIMENSION_2_TO_EXP : u32 = 17;
pub const D3D12_MAX_VIEW_INSTANCE_COUNT : u32 = 4;
pub const D3D12_MINOR_VERSION : u32 = 0;
pub const D3D12_MIN_BORDER_COLOR_COMPONENT : f32 = 0;
pub const D3D12_MIN_DEPTH : f32 = 0;
pub const D3D12_MIN_MAXANISOTROPY : u32 = 0;
pub const D3D12_MIP_LOD_BIAS_MAX : f32 = 15.99;
pub const D3D12_MIP_LOD_BIAS_MIN : f32 = -16;
pub const D3D12_MIP_LOD_FRACTIONAL_BIT_COUNT : u32 = 8;
pub const D3D12_MIP_LOD_RANGE_BIT_COUNT : u32 = 8;
pub const D3D12_MULTISAMPLE_ANTIALIAS_LINE_WIDTH : f32 = 1.4;
pub const D3D12_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT : u32 = 0;
pub const D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_END : u32 = 4294967295;
pub const D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_START : u32 = 4294967288;
pub const D3D12_PACKED_TILE : u32 = 4294967295;
pub const D3D12_PIXEL_ADDRESS_RANGE_BIT_COUNT : u32 = 15;
pub const D3D12_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT : u32 = 16;
pub const D3D12_PS_CS_UAV_REGISTER_COMPONENTS : u32 = 1;
pub const D3D12_PS_CS_UAV_REGISTER_COUNT : u32 = 8;
pub const D3D12_PS_CS_UAV_REGISTER_READS_PER_INST : u32 = 1;
pub const D3D12_PS_CS_UAV_REGISTER_READ_PORTS : u32 = 1;
pub const D3D12_PS_FRONTFACING_DEFAULT_VALUE : u32 = 4294967295;
pub const D3D12_PS_FRONTFACING_FALSE_VALUE : u32 = 0;
pub const D3D12_PS_FRONTFACING_TRUE_VALUE : u32 = 4294967295;
pub const D3D12_PS_INPUT_REGISTER_COMPONENTS : u32 = 4;
pub const D3D12_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT : u32 = 32;
pub const D3D12_PS_INPUT_REGISTER_COUNT : u32 = 32;
pub const D3D12_PS_INPUT_REGISTER_READS_PER_INST : u32 = 2;
pub const D3D12_PS_INPUT_REGISTER_READ_PORTS : u32 = 1;
pub const D3D12_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT : f32 = 0;
pub const D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS : u32 = 1;
pub const D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT : u32 = 32;
pub const D3D12_PS_OUTPUT_DEPTH_REGISTER_COUNT : u32 = 1;
pub const D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENTS : u32 = 1;
pub const D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT : u32 = 32;
pub const D3D12_PS_OUTPUT_MASK_REGISTER_COUNT : u32 = 1;
pub const D3D12_PS_OUTPUT_REGISTER_COMPONENTS : u32 = 4;
pub const D3D12_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT : u32 = 32;
pub const D3D12_PS_OUTPUT_REGISTER_COUNT : u32 = 8;
pub const D3D12_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT : f32 = 0.5;
pub const D3D12_RAW_UAV_SRV_BYTE_ALIGNMENT : u32 = 16;
pub const D3D12_RAYTRACING_AABB_BYTE_ALIGNMENT : u32 = 8;
pub const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BYTE_ALIGNMENT : u32 = 256;
pub const D3D12_RAYTRACING_INSTANCE_DESCS_BYTE_ALIGNMENT : u32 = 16;
pub const D3D12_RAYTRACING_MAX_ATTRIBUTE_SIZE_IN_BYTES : u32 = 32;
pub const D3D12_RAYTRACING_MAX_DECLARABLE_TRACE_RECURSION_DEPTH : u32 = 31;
pub const D3D12_RAYTRACING_MAX_GEOMETRIES_PER_BOTTOM_LEVEL_ACCELERATION_STRUCTURE : u32 = 16777216;
pub const D3D12_RAYTRACING_MAX_INSTANCES_PER_TOP_LEVEL_ACCELERATION_STRUCTURE : u32 = 16777216;
pub const D3D12_RAYTRACING_MAX_PRIMITIVES_PER_BOTTOM_LEVEL_ACCELERATION_STRUCTURE : u32 = 536870912;
pub const D3D12_RAYTRACING_MAX_RAY_GENERATION_SHADER_THREADS : u32 = 1073741824;
pub const D3D12_RAYTRACING_MAX_SHADER_RECORD_STRIDE : u32 = 4096;
pub const D3D12_RAYTRACING_SHADER_RECORD_BYTE_ALIGNMENT : u32 = 32;
pub const D3D12_RAYTRACING_SHADER_TABLE_BYTE_ALIGNMENT : u32 = 64;
pub const D3D12_RAYTRACING_TRANSFORM3X4_BYTE_ALIGNMENT : u32 = 16;
pub const D3D12_REQ_BLEND_OBJECT_COUNT_PER_DEVICE : u32 = 4096;
pub const D3D12_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP : u32 = 27;
pub const D3D12_REQ_CONSTANT_BUFFER_ELEMENT_COUNT : u32 = 4096;
pub const D3D12_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE : u32 = 4096;
pub const D3D12_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP : u32 = 32;
pub const D3D12_REQ_DRAW_VERTEX_COUNT_2_TO_EXP : u32 = 32;
pub const D3D12_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION : u32 = 16384;
pub const D3D12_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT : u32 = 1024;
pub const D3D12_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT : u32 = 4096;
pub const D3D12_REQ_MAXANISOTROPY : u32 = 16;
pub const D3D12_REQ_MIP_LEVELS : u32 = 15;
pub const D3D12_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES : u32 = 2048;
pub const D3D12_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE : u32 = 4096;
pub const D3D12_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH : u32 = 16384;
pub const D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM : u32 = 128;
pub const D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM : f32 = 0.25;
pub const D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_C_TERM : u32 = 2048;
pub const D3D12_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP : u32 = 20;
pub const D3D12_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE : u32 = 4096;
pub const D3D12_REQ_SUBRESOURCES : u32 = 30720;
pub const D3D12_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION : u32 = 2048;
pub const D3D12_REQ_TEXTURE1D_U_DIMENSION : u32 = 16384;
pub const D3D12_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION : u32 = 2048;
pub const D3D12_REQ_TEXTURE2D_U_OR_V_DIMENSION : u32 = 16384;
pub const D3D12_REQ_TEXTURE3D_U_V_OR_W_DIMENSION : u32 = 2048;
pub const D3D12_REQ_TEXTURECUBE_DIMENSION : u32 = 16384;
pub const D3D12_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL : u32 = 0;
pub const D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES : u32 = 4294967295;
pub const D3D12_RS_SET_SHADING_RATE_COMBINER_COUNT : u32 = 2;
pub const D3D12_SHADER_IDENTIFIER_SIZE_IN_BYTES : u32 = 32;
pub const D3D12_SHADER_MAJOR_VERSION : u32 = 5;
pub const D3D12_SHADER_MAX_INSTANCES : u32 = 65535;
pub const D3D12_SHADER_MAX_INTERFACES : u32 = 253;
pub const D3D12_SHADER_MAX_INTERFACE_CALL_SITES : u32 = 4096;
pub const D3D12_SHADER_MAX_TYPES : u32 = 65535;
pub const D3D12_SHADER_MINOR_VERSION : u32 = 1;
pub const D3D12_SHIFT_INSTRUCTION_PAD_VALUE : u32 = 0;
pub const D3D12_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT : u32 = 5;
pub const D3D12_SIMULTANEOUS_RENDER_TARGET_COUNT : u32 = 8;
pub const D3D12_SMALL_MSAA_RESOURCE_PLACEMENT_ALIGNMENT : u32 = 65536;
pub const D3D12_SMALL_RESOURCE_PLACEMENT_ALIGNMENT : u32 = 4096;
pub const D3D12_SO_BUFFER_MAX_STRIDE_IN_BYTES : u32 = 2048;
pub const D3D12_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES : u32 = 512;
pub const D3D12_SO_BUFFER_SLOT_COUNT : u32 = 4;
pub const D3D12_SO_DDI_REGISTER_INDEX_DENOTING_GAP : u32 = 4294967295;
pub const D3D12_SO_NO_RASTERIZED_STREAM : u32 = 4294967295;
pub const D3D12_SO_OUTPUT_COMPONENT_COUNT : u32 = 128;
pub const D3D12_SO_STREAM_COUNT : u32 = 4;
pub const D3D12_SPEC_DATE_DAY : u32 = 14;
pub const D3D12_SPEC_DATE_MONTH : u32 = 11;
pub const D3D12_SPEC_DATE_YEAR : u32 = 2014;
pub const D3D12_SPEC_VERSION : f32 = 1.16;
pub const D3D12_SRGB_GAMMA : f32 = 2.2;
pub const D3D12_SRGB_TO_FLOAT_DENOMINATOR_1 : f32 = 12.92;
pub const D3D12_SRGB_TO_FLOAT_DENOMINATOR_2 : f32 = 1.055;
pub const D3D12_SRGB_TO_FLOAT_EXPONENT : f32 = 2.4;
pub const D3D12_SRGB_TO_FLOAT_OFFSET : f32 = 0.055;
pub const D3D12_SRGB_TO_FLOAT_THRESHOLD : f32 = 0.04045;
pub const D3D12_SRGB_TO_FLOAT_TOLERANCE_IN_ULP : f32 = 0.5;
pub const D3D12_STANDARD_COMPONENT_BIT_COUNT : u32 = 32;
pub const D3D12_STANDARD_COMPONENT_BIT_COUNT_DOUBLED : u32 = 64;
pub const D3D12_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE : u32 = 4;
pub const D3D12_STANDARD_PIXEL_COMPONENT_COUNT : u32 = 128;
pub const D3D12_STANDARD_PIXEL_ELEMENT_COUNT : u32 = 32;
pub const D3D12_STANDARD_VECTOR_SIZE : u32 = 4;
pub const D3D12_STANDARD_VERTEX_ELEMENT_COUNT : u32 = 32;
pub const D3D12_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT : u32 = 64;
pub const D3D12_SUBPIXEL_FRACTIONAL_BIT_COUNT : u32 = 8;
pub const D3D12_SUBTEXEL_FRACTIONAL_BIT_COUNT : u32 = 8;
pub const D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_END : u32 = 4294967295;
pub const D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_START : u32 = 4294967280;
pub const D3D12_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR : u32 = 64;
pub const D3D12_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR : u32 = 64;
pub const D3D12_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR : u32 = 63;
pub const D3D12_TESSELLATOR_MAX_TESSELLATION_FACTOR : u32 = 64;
pub const D3D12_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR : u32 = 2;
pub const D3D12_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR : u32 = 1;
pub const D3D12_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR : u32 = 1;
pub const D3D12_TEXEL_ADDRESS_RANGE_BIT_COUNT : u32 = 16;
pub const D3D12_TEXTURE_DATA_PITCH_ALIGNMENT : u32 = 256;
pub const D3D12_TEXTURE_DATA_PLACEMENT_ALIGNMENT : u32 = 512;
pub const D3D12_TILED_RESOURCE_TILE_SIZE_IN_BYTES : u32 = 65536;
pub const D3D12_TRACKED_WORKLOAD_MAX_INSTANCES : u32 = 32;
pub const D3D12_UAV_COUNTER_PLACEMENT_ALIGNMENT : u32 = 4096;
pub const D3D12_UAV_SLOT_COUNT : u32 = 64;
pub const D3D12_UNBOUND_MEMORY_ACCESS_RESULT : u32 = 0;
pub const D3D12_VIDEO_DECODE_MAX_ARGUMENTS : u32 = 10;
pub const D3D12_VIDEO_DECODE_MAX_HISTOGRAM_COMPONENTS : u32 = 4;
pub const D3D12_VIDEO_DECODE_MIN_BITSTREAM_OFFSET_ALIGNMENT : u32 = 256;
pub const D3D12_VIDEO_DECODE_MIN_HISTOGRAM_OFFSET_ALIGNMENT : u32 = 256;
pub const D3D12_VIDEO_DECODE_STATUS_MACROBLOCKS_AFFECTED_UNKNOWN : u32 = 4294967295;
pub const D3D12_VIDEO_PROCESS_MAX_FILTERS : u32 = 32;
pub const D3D12_VIDEO_PROCESS_STEREO_VIEWS : u32 = 2;
pub const D3D12_VIEWPORT_AND_SCISSORRECT_MAX_INDEX : u32 = 15;
pub const D3D12_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE : u32 = 16;
pub const D3D12_VIEWPORT_BOUNDS_MAX : u32 = 32767;
pub const D3D12_VIEWPORT_BOUNDS_MIN : i32 = -32768;
pub const D3D12_VS_INPUT_REGISTER_COMPONENTS : u32 = 4;
pub const D3D12_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT : u32 = 32;
pub const D3D12_VS_INPUT_REGISTER_COUNT : u32 = 32;
pub const D3D12_VS_INPUT_REGISTER_READS_PER_INST : u32 = 2;
pub const D3D12_VS_INPUT_REGISTER_READ_PORTS : u32 = 1;
pub const D3D12_VS_OUTPUT_REGISTER_COMPONENTS : u32 = 4;
pub const D3D12_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT : u32 = 32;
pub const D3D12_VS_OUTPUT_REGISTER_COUNT : u32 = 32;
pub const D3D12_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT : u32 = 10;
pub const D3D12_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP : u32 = 25;
pub const D3D12_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP : u32 = 25;
pub const D3D12_SHADER_COMPONENT_MAPPING_MASK : u32 = 7;
pub const D3D12_SHADER_COMPONENT_MAPPING_SHIFT : u32 = 3;
pub const D3D12_SHADER_COMPONENT_MAPPING_ALWAYS_SET_BIT_AVOIDING_ZEROMEM_MISTAKES : u32 = 4096;
pub const D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING : u32 = 5768;
pub const D3D12_FILTER_REDUCTION_TYPE_MASK : u32 = 3;
pub const D3D12_FILTER_REDUCTION_TYPE_SHIFT : u32 = 7;
pub const D3D12_FILTER_TYPE_MASK : u32 = 3;
pub const D3D12_MIN_FILTER_SHIFT : u32 = 4;
pub const D3D12_MAG_FILTER_SHIFT : u32 = 2;
pub const D3D12_MIP_FILTER_SHIFT : u32 = 0;
pub const D3D12_ANISOTROPIC_FILTERING_BIT : u32 = 64;
pub const D3D12_SHADING_RATE_X_AXIS_SHIFT : u32 = 2;
pub const D3D12_SHADING_RATE_VALID_MASK : u32 = 3;

//
// types
//
// --------------------------------------------------------
// Type: D3D12_COMMAND_LIST_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_COMMAND_LIST_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_COMMAND_QUEUE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_COMMAND_QUEUE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_COMMAND_QUEUE_PRIORITY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_COMMAND_QUEUE_PRIORITY = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_COMMAND_QUEUE_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_COMMAND_QUEUE_DESC = extern struct {
    Type: D3D12_COMMAND_LIST_TYPE,
    Priority: i32,
    Flags: D3D12_COMMAND_QUEUE_FLAGS,
    NodeMask: u32,
};
// --------------------------------------------------------
// Type: D3D12_PRIMITIVE_TOPOLOGY_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_PRIMITIVE_TOPOLOGY_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_INPUT_CLASSIFICATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_INPUT_CLASSIFICATION = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_INPUT_ELEMENT_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_INPUT_ELEMENT_DESC = extern struct {
    SemanticName: ?*i8,
    SemanticIndex: u32,
    Format: DXGI_FORMAT,
    InputSlot: u32,
    AlignedByteOffset: u32,
    InputSlotClass: D3D12_INPUT_CLASSIFICATION,
    InstanceDataStepRate: u32,
};
// --------------------------------------------------------
// Type: D3D12_FILL_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_FILL_MODE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_CULL_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_CULL_MODE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_SO_DECLARATION_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_SO_DECLARATION_ENTRY = extern struct {
    Stream: u32,
    SemanticName: ?*i8,
    SemanticIndex: u32,
    StartComponent: u8,
    ComponentCount: u8,
    OutputSlot: u8,
};
// --------------------------------------------------------
// Type: D3D12_VIEWPORT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIEWPORT = extern struct {
    TopLeftX: f32,
    TopLeftY: f32,
    Width: f32,
    Height: f32,
    MinDepth: f32,
    MaxDepth: f32,
};
// --------------------------------------------------------
// Type: D3D12_BOX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_BOX = extern struct {
    left: u32,
    top: u32,
    front: u32,
    right: u32,
    bottom: u32,
    back: u32,
};
// --------------------------------------------------------
// Type: D3D12_COMPARISON_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_COMPARISON_FUNC = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_DEPTH_WRITE_MASK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_DEPTH_WRITE_MASK = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_STENCIL_OP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_STENCIL_OP = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_DEPTH_STENCILOP_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_DEPTH_STENCILOP_DESC = extern struct {
    StencilFailOp: D3D12_STENCIL_OP,
    StencilDepthFailOp: D3D12_STENCIL_OP,
    StencilPassOp: D3D12_STENCIL_OP,
    StencilFunc: D3D12_COMPARISON_FUNC,
};
// --------------------------------------------------------
// Type: D3D12_DEPTH_STENCIL_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_DEPTH_STENCIL_DESC = extern struct {
    DepthEnable: BOOL,
    DepthWriteMask: D3D12_DEPTH_WRITE_MASK,
    DepthFunc: D3D12_COMPARISON_FUNC,
    StencilEnable: BOOL,
    StencilReadMask: u8,
    StencilWriteMask: u8,
    FrontFace: D3D12_DEPTH_STENCILOP_DESC,
    BackFace: D3D12_DEPTH_STENCILOP_DESC,
};
// --------------------------------------------------------
// Type: D3D12_DEPTH_STENCIL_DESC1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_DEPTH_STENCIL_DESC1 = extern struct {
    DepthEnable: BOOL,
    DepthWriteMask: D3D12_DEPTH_WRITE_MASK,
    DepthFunc: D3D12_COMPARISON_FUNC,
    StencilEnable: BOOL,
    StencilReadMask: u8,
    StencilWriteMask: u8,
    FrontFace: D3D12_DEPTH_STENCILOP_DESC,
    BackFace: D3D12_DEPTH_STENCILOP_DESC,
    DepthBoundsTestEnable: BOOL,
};
// --------------------------------------------------------
// Type: D3D12_BLEND
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_BLEND = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_BLEND_OP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_BLEND_OP = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_COLOR_WRITE_ENABLE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_COLOR_WRITE_ENABLE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_LOGIC_OP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_LOGIC_OP = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_RENDER_TARGET_BLEND_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RENDER_TARGET_BLEND_DESC = extern struct {
    BlendEnable: BOOL,
    LogicOpEnable: BOOL,
    SrcBlend: D3D12_BLEND,
    DestBlend: D3D12_BLEND,
    BlendOp: D3D12_BLEND_OP,
    SrcBlendAlpha: D3D12_BLEND,
    DestBlendAlpha: D3D12_BLEND,
    BlendOpAlpha: D3D12_BLEND_OP,
    LogicOp: D3D12_LOGIC_OP,
    RenderTargetWriteMask: u8,
};
// --------------------------------------------------------
// Type: D3D12_BLEND_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_BLEND_DESC = extern struct {
    AlphaToCoverageEnable: BOOL,
    IndependentBlendEnable: BOOL,
    RenderTarget: ?[*]D3D12_RENDER_TARGET_BLEND_DESC,
};
// --------------------------------------------------------
// Type: D3D12_CONSERVATIVE_RASTERIZATION_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_CONSERVATIVE_RASTERIZATION_MODE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_RASTERIZER_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RASTERIZER_DESC = extern struct {
    FillMode: D3D12_FILL_MODE,
    CullMode: D3D12_CULL_MODE,
    FrontCounterClockwise: BOOL,
    DepthBias: i32,
    DepthBiasClamp: f32,
    SlopeScaledDepthBias: f32,
    DepthClipEnable: BOOL,
    MultisampleEnable: BOOL,
    AntialiasedLineEnable: BOOL,
    ForcedSampleCount: u32,
    ConservativeRaster: D3D12_CONSERVATIVE_RASTERIZATION_MODE,
};
// --------------------------------------------------------
// Type: ID3D12Object
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12Object = *opaque{
    // TODO: Method 'GetPrivateData'
    // TODO: Method 'SetPrivateData'
    // TODO: Method 'SetPrivateDataInterface'
    // TODO: Method 'SetName'
};
// --------------------------------------------------------
// Type: ID3D12DeviceChild
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12DeviceChild = *opaque{
    // TODO: Method 'GetDevice'
};
// --------------------------------------------------------
// Type: ID3D12RootSignature
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12RootSignature = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_SHADER_BYTECODE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_SHADER_BYTECODE = extern struct {
    pShaderBytecode: ?*opaque{},
    BytecodeLength: ?*opaque{},
};
// --------------------------------------------------------
// Type: D3D12_STREAM_OUTPUT_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_STREAM_OUTPUT_DESC = extern struct {
    pSODeclaration: ?*D3D12_SO_DECLARATION_ENTRY,
    NumEntries: u32,
    pBufferStrides: ?*u32,
    NumStrides: u32,
    RasterizedStream: u32,
};
// --------------------------------------------------------
// Type: D3D12_INPUT_LAYOUT_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_INPUT_LAYOUT_DESC = extern struct {
    pInputElementDescs: ?*D3D12_INPUT_ELEMENT_DESC,
    NumElements: u32,
};
// --------------------------------------------------------
// Type: D3D12_INDEX_BUFFER_STRIP_CUT_VALUE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_INDEX_BUFFER_STRIP_CUT_VALUE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_CACHED_PIPELINE_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_CACHED_PIPELINE_STATE = extern struct {
    pCachedBlob: ?*opaque{},
    CachedBlobSizeInBytes: ?*opaque{},
};
// --------------------------------------------------------
// Type: D3D12_PIPELINE_STATE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_PIPELINE_STATE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_GRAPHICS_PIPELINE_STATE_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_GRAPHICS_PIPELINE_STATE_DESC = extern struct {
    pRootSignature: ID3D12RootSignature,
    VS: D3D12_SHADER_BYTECODE,
    PS: D3D12_SHADER_BYTECODE,
    DS: D3D12_SHADER_BYTECODE,
    HS: D3D12_SHADER_BYTECODE,
    GS: D3D12_SHADER_BYTECODE,
    StreamOutput: D3D12_STREAM_OUTPUT_DESC,
    BlendState: D3D12_BLEND_DESC,
    SampleMask: u32,
    RasterizerState: D3D12_RASTERIZER_DESC,
    DepthStencilState: D3D12_DEPTH_STENCIL_DESC,
    InputLayout: D3D12_INPUT_LAYOUT_DESC,
    IBStripCutValue: D3D12_INDEX_BUFFER_STRIP_CUT_VALUE,
    PrimitiveTopologyType: D3D12_PRIMITIVE_TOPOLOGY_TYPE,
    NumRenderTargets: u32,
    RTVFormats: ?[*]DXGI_FORMAT,
    DSVFormat: DXGI_FORMAT,
    SampleDesc: DXGI_SAMPLE_DESC,
    NodeMask: u32,
    CachedPSO: D3D12_CACHED_PIPELINE_STATE,
    Flags: D3D12_PIPELINE_STATE_FLAGS,
};
// --------------------------------------------------------
// Type: D3D12_COMPUTE_PIPELINE_STATE_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_COMPUTE_PIPELINE_STATE_DESC = extern struct {
    pRootSignature: ID3D12RootSignature,
    CS: D3D12_SHADER_BYTECODE,
    NodeMask: u32,
    CachedPSO: D3D12_CACHED_PIPELINE_STATE,
    Flags: D3D12_PIPELINE_STATE_FLAGS,
};
// --------------------------------------------------------
// Type: D3D12_RT_FORMAT_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RT_FORMAT_ARRAY = extern struct {
    RTFormats: ?[*]DXGI_FORMAT,
    NumRenderTargets: u32,
};
// --------------------------------------------------------
// Type: D3D12_PIPELINE_STATE_STREAM_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_PIPELINE_STATE_STREAM_DESC = extern struct {
    SizeInBytes: ?*opaque{},
    pPipelineStateSubobjectStream: ?*opaque{},
};
// --------------------------------------------------------
// Type: D3D12_PIPELINE_STATE_SUBOBJECT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_FEATURE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_FEATURE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_SHADER_MIN_PRECISION_SUPPORT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_SHADER_MIN_PRECISION_SUPPORT = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_TILED_RESOURCES_TIER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_TILED_RESOURCES_TIER = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_RESOURCE_BINDING_TIER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_RESOURCE_BINDING_TIER = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_CONSERVATIVE_RASTERIZATION_TIER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_CONSERVATIVE_RASTERIZATION_TIER = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_FORMAT_SUPPORT1
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_FORMAT_SUPPORT1 = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_FORMAT_SUPPORT2
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_FORMAT_SUPPORT2 = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_CROSS_NODE_SHARING_TIER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_CROSS_NODE_SHARING_TIER = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_RESOURCE_HEAP_TIER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_RESOURCE_HEAP_TIER = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_VIEW_INSTANCING_TIER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_VIEW_INSTANCING_TIER = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_D3D12_OPTIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_D3D12_OPTIONS = extern struct {
    DoublePrecisionFloatShaderOps: BOOL,
    OutputMergerLogicOp: BOOL,
    MinPrecisionSupport: D3D12_SHADER_MIN_PRECISION_SUPPORT,
    TiledResourcesTier: D3D12_TILED_RESOURCES_TIER,
    ResourceBindingTier: D3D12_RESOURCE_BINDING_TIER,
    PSSpecifiedStencilRefSupported: BOOL,
    TypedUAVLoadAdditionalFormats: BOOL,
    ROVsSupported: BOOL,
    ConservativeRasterizationTier: D3D12_CONSERVATIVE_RASTERIZATION_TIER,
    MaxGPUVirtualAddressBitsPerResource: u32,
    StandardSwizzle64KBSupported: BOOL,
    CrossNodeSharingTier: D3D12_CROSS_NODE_SHARING_TIER,
    CrossAdapterRowMajorTextureSupported: BOOL,
    VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation: BOOL,
    ResourceHeapTier: D3D12_RESOURCE_HEAP_TIER,
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_D3D12_OPTIONS1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_D3D12_OPTIONS1 = extern struct {
    WaveOps: BOOL,
    WaveLaneCountMin: u32,
    WaveLaneCountMax: u32,
    TotalLaneCount: u32,
    ExpandedComputeResourceStates: BOOL,
    Int64ShaderOps: BOOL,
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_D3D12_OPTIONS2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_D3D12_OPTIONS2 = extern struct {
    DepthBoundsTestSupported: BOOL,
    ProgrammableSamplePositionsTier: D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER,
};
// --------------------------------------------------------
// Type: D3D_ROOT_SIGNATURE_VERSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D_ROOT_SIGNATURE_VERSION = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_ROOT_SIGNATURE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_ROOT_SIGNATURE = extern struct {
    HighestVersion: D3D_ROOT_SIGNATURE_VERSION,
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_ARCHITECTURE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_ARCHITECTURE = extern struct {
    NodeIndex: u32,
    TileBasedRenderer: BOOL,
    UMA: BOOL,
    CacheCoherentUMA: BOOL,
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_ARCHITECTURE1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_ARCHITECTURE1 = extern struct {
    NodeIndex: u32,
    TileBasedRenderer: BOOL,
    UMA: BOOL,
    CacheCoherentUMA: BOOL,
    IsolatedMMU: BOOL,
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_FEATURE_LEVELS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_FEATURE_LEVELS = extern struct {
    NumFeatureLevels: u32,
    pFeatureLevelsRequested: ?*D3D_FEATURE_LEVEL,
    MaxSupportedFeatureLevel: D3D_FEATURE_LEVEL,
};
// --------------------------------------------------------
// Type: D3D_SHADER_MODEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D_SHADER_MODEL = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_SHADER_MODEL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_SHADER_MODEL = extern struct {
    HighestShaderModel: D3D_SHADER_MODEL,
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_FORMAT_SUPPORT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_FORMAT_SUPPORT = extern struct {
    Format: DXGI_FORMAT,
    Support1: D3D12_FORMAT_SUPPORT1,
    Support2: D3D12_FORMAT_SUPPORT2,
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS = extern struct {
    Format: DXGI_FORMAT,
    SampleCount: u32,
    Flags: D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS,
    NumQualityLevels: u32,
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_FORMAT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_FORMAT_INFO = extern struct {
    Format: DXGI_FORMAT,
    PlaneCount: u8,
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT = extern struct {
    MaxGPUVirtualAddressBitsPerResource: u32,
    MaxGPUVirtualAddressBitsPerProcess: u32,
};
// --------------------------------------------------------
// Type: D3D12_SHADER_CACHE_SUPPORT_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_SHADER_CACHE_SUPPORT_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_SHADER_CACHE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_SHADER_CACHE = extern struct {
    SupportFlags: D3D12_SHADER_CACHE_SUPPORT_FLAGS,
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY = extern struct {
    CommandListType: D3D12_COMMAND_LIST_TYPE,
    Priority: u32,
    PriorityForTypeIsSupported: BOOL,
};
// --------------------------------------------------------
// Type: D3D12_COMMAND_LIST_SUPPORT_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_COMMAND_LIST_SUPPORT_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_D3D12_OPTIONS3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_D3D12_OPTIONS3 = extern struct {
    CopyQueueTimestampQueriesSupported: BOOL,
    CastingFullyTypedFormatSupported: BOOL,
    WriteBufferImmediateSupportFlags: D3D12_COMMAND_LIST_SUPPORT_FLAGS,
    ViewInstancingTier: D3D12_VIEW_INSTANCING_TIER,
    BarycentricsSupported: BOOL,
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_EXISTING_HEAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_EXISTING_HEAPS = extern struct {
    Supported: BOOL,
};
// --------------------------------------------------------
// Type: D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_D3D12_OPTIONS4
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_D3D12_OPTIONS4 = extern struct {
    MSAA64KBAlignedTextureSupported: BOOL,
    SharedResourceCompatibilityTier: D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER,
    Native16BitShaderOpsSupported: BOOL,
};
// --------------------------------------------------------
// Type: D3D12_HEAP_SERIALIZATION_TIER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_HEAP_SERIALIZATION_TIER = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_SERIALIZATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_SERIALIZATION = extern struct {
    NodeIndex: u32,
    HeapSerializationTier: D3D12_HEAP_SERIALIZATION_TIER,
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_CROSS_NODE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_CROSS_NODE = extern struct {
    SharingTier: D3D12_CROSS_NODE_SHARING_TIER,
    AtomicShaderInstructions: BOOL,
};
// --------------------------------------------------------
// Type: D3D12_RENDER_PASS_TIER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_RENDER_PASS_TIER = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_RAYTRACING_TIER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_RAYTRACING_TIER = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_D3D12_OPTIONS5
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_D3D12_OPTIONS5 = extern struct {
    SRVOnlyTiledResourceTier3: BOOL,
    RenderPassesTier: D3D12_RENDER_PASS_TIER,
    RaytracingTier: D3D12_RAYTRACING_TIER,
};
// --------------------------------------------------------
// Type: D3D12_VARIABLE_SHADING_RATE_TIER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_VARIABLE_SHADING_RATE_TIER = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_D3D12_OPTIONS6
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_D3D12_OPTIONS6 = extern struct {
    AdditionalShadingRatesSupported: BOOL,
    PerPrimitiveShadingRateSupportedWithViewportIndexing: BOOL,
    VariableShadingRateTier: D3D12_VARIABLE_SHADING_RATE_TIER,
    ShadingRateImageTileSize: u32,
    BackgroundProcessingSupported: BOOL,
};
// --------------------------------------------------------
// Type: D3D12_MESH_SHADER_TIER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_MESH_SHADER_TIER = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_SAMPLER_FEEDBACK_TIER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_SAMPLER_FEEDBACK_TIER = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_D3D12_OPTIONS7
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_D3D12_OPTIONS7 = extern struct {
    MeshShaderTier: D3D12_MESH_SHADER_TIER,
    SamplerFeedbackTier: D3D12_SAMPLER_FEEDBACK_TIER,
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_QUERY_META_COMMAND
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_QUERY_META_COMMAND = extern struct {
    CommandId: Guid,
    NodeMask: u32,
    pQueryInputData: ?*opaque{},
    QueryInputDataSizeInBytes: ?*opaque{},
    pQueryOutputData: ?*opaque{},
    QueryOutputDataSizeInBytes: ?*opaque{},
};
// --------------------------------------------------------
// Type: D3D12_RESOURCE_ALLOCATION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RESOURCE_ALLOCATION_INFO = extern struct {
    SizeInBytes: u64,
    Alignment: u64,
};
// --------------------------------------------------------
// Type: D3D12_RESOURCE_ALLOCATION_INFO1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RESOURCE_ALLOCATION_INFO1 = extern struct {
    Offset: u64,
    Alignment: u64,
    SizeInBytes: u64,
};
// --------------------------------------------------------
// Type: D3D12_HEAP_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_HEAP_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_CPU_PAGE_PROPERTY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_CPU_PAGE_PROPERTY = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_MEMORY_POOL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_MEMORY_POOL = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_HEAP_PROPERTIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_HEAP_PROPERTIES = extern struct {
    Type: D3D12_HEAP_TYPE,
    CPUPageProperty: D3D12_CPU_PAGE_PROPERTY,
    MemoryPoolPreference: D3D12_MEMORY_POOL,
    CreationNodeMask: u32,
    VisibleNodeMask: u32,
};
// --------------------------------------------------------
// Type: D3D12_HEAP_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_HEAP_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_HEAP_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_HEAP_DESC = extern struct {
    SizeInBytes: u64,
    Properties: D3D12_HEAP_PROPERTIES,
    Alignment: u64,
    Flags: D3D12_HEAP_FLAGS,
};
// --------------------------------------------------------
// Type: D3D12_RESOURCE_DIMENSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_RESOURCE_DIMENSION = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_TEXTURE_LAYOUT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_TEXTURE_LAYOUT = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_RESOURCE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_RESOURCE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_MIP_REGION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_MIP_REGION = extern struct {
    Width: u32,
    Height: u32,
    Depth: u32,
};
// --------------------------------------------------------
// Type: D3D12_RESOURCE_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RESOURCE_DESC = extern struct {
    Dimension: D3D12_RESOURCE_DIMENSION,
    Alignment: u64,
    Width: u64,
    Height: u32,
    DepthOrArraySize: u16,
    MipLevels: u16,
    Format: DXGI_FORMAT,
    SampleDesc: DXGI_SAMPLE_DESC,
    Layout: D3D12_TEXTURE_LAYOUT,
    Flags: D3D12_RESOURCE_FLAGS,
};
// --------------------------------------------------------
// Type: D3D12_RESOURCE_DESC1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RESOURCE_DESC1 = extern struct {
    Dimension: D3D12_RESOURCE_DIMENSION,
    Alignment: u64,
    Width: u64,
    Height: u32,
    DepthOrArraySize: u16,
    MipLevels: u16,
    Format: DXGI_FORMAT,
    SampleDesc: DXGI_SAMPLE_DESC,
    Layout: D3D12_TEXTURE_LAYOUT,
    Flags: D3D12_RESOURCE_FLAGS,
    SamplerFeedbackMipRegion: D3D12_MIP_REGION,
};
// --------------------------------------------------------
// Type: D3D12_DEPTH_STENCIL_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_DEPTH_STENCIL_VALUE = extern struct {
    Depth: f32,
    Stencil: u8,
};
// --------------------------------------------------------
// Type: D3D12_CLEAR_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_CLEAR_VALUE = extern struct {
    Format: DXGI_FORMAT,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: D3D12_RANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RANGE = extern struct {
    Begin: ?*opaque{},
    End: ?*opaque{},
};
// --------------------------------------------------------
// Type: D3D12_RANGE_UINT64
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RANGE_UINT64 = extern struct {
    Begin: u64,
    End: u64,
};
// --------------------------------------------------------
// Type: D3D12_SUBRESOURCE_RANGE_UINT64
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_SUBRESOURCE_RANGE_UINT64 = extern struct {
    Subresource: u32,
    Range: D3D12_RANGE_UINT64,
};
// --------------------------------------------------------
// Type: D3D12_SUBRESOURCE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_SUBRESOURCE_INFO = extern struct {
    Offset: u64,
    RowPitch: u32,
    DepthPitch: u32,
};
// --------------------------------------------------------
// Type: D3D12_TILED_RESOURCE_COORDINATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_TILED_RESOURCE_COORDINATE = extern struct {
    X: u32,
    Y: u32,
    Z: u32,
    Subresource: u32,
};
// --------------------------------------------------------
// Type: D3D12_TILE_REGION_SIZE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_TILE_REGION_SIZE = extern struct {
    NumTiles: u32,
    UseBox: BOOL,
    Width: u32,
    Height: u16,
    Depth: u16,
};
// --------------------------------------------------------
// Type: D3D12_TILE_RANGE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_TILE_RANGE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_SUBRESOURCE_TILING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_SUBRESOURCE_TILING = extern struct {
    WidthInTiles: u32,
    HeightInTiles: u16,
    DepthInTiles: u16,
    StartTileIndexInOverallResource: u32,
};
// --------------------------------------------------------
// Type: D3D12_TILE_SHAPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_TILE_SHAPE = extern struct {
    WidthInTexels: u32,
    HeightInTexels: u32,
    DepthInTexels: u32,
};
// --------------------------------------------------------
// Type: D3D12_PACKED_MIP_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_PACKED_MIP_INFO = extern struct {
    NumStandardMips: u8,
    NumPackedMips: u8,
    NumTilesForPackedMips: u32,
    StartTileIndexInOverallResource: u32,
};
// --------------------------------------------------------
// Type: D3D12_TILE_MAPPING_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_TILE_MAPPING_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_TILE_COPY_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_TILE_COPY_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_RESOURCE_STATES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_RESOURCE_STATES = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_RESOURCE_BARRIER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_RESOURCE_BARRIER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_RESOURCE_TRANSITION_BARRIER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RESOURCE_TRANSITION_BARRIER = extern struct {
    pResource: ID3D12Resource,
    Subresource: u32,
    StateBefore: D3D12_RESOURCE_STATES,
    StateAfter: D3D12_RESOURCE_STATES,
};
// --------------------------------------------------------
// Type: D3D12_RESOURCE_ALIASING_BARRIER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RESOURCE_ALIASING_BARRIER = extern struct {
    pResourceBefore: ID3D12Resource,
    pResourceAfter: ID3D12Resource,
};
// --------------------------------------------------------
// Type: D3D12_RESOURCE_UAV_BARRIER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RESOURCE_UAV_BARRIER = extern struct {
    pResource: ID3D12Resource,
};
// --------------------------------------------------------
// Type: D3D12_RESOURCE_BARRIER_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_RESOURCE_BARRIER_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_RESOURCE_BARRIER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RESOURCE_BARRIER = extern struct {
    Type: D3D12_RESOURCE_BARRIER_TYPE,
    Flags: D3D12_RESOURCE_BARRIER_FLAGS,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: D3D12_SUBRESOURCE_FOOTPRINT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_SUBRESOURCE_FOOTPRINT = extern struct {
    Format: DXGI_FORMAT,
    Width: u32,
    Height: u32,
    Depth: u32,
    RowPitch: u32,
};
// --------------------------------------------------------
// Type: D3D12_PLACED_SUBRESOURCE_FOOTPRINT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_PLACED_SUBRESOURCE_FOOTPRINT = extern struct {
    Offset: u64,
    Footprint: D3D12_SUBRESOURCE_FOOTPRINT,
};
// --------------------------------------------------------
// Type: D3D12_TEXTURE_COPY_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_TEXTURE_COPY_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_TEXTURE_COPY_LOCATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_TEXTURE_COPY_LOCATION = extern struct {
    pResource: ID3D12Resource,
    Type: D3D12_TEXTURE_COPY_TYPE,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: D3D12_RESOLVE_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_RESOLVE_MODE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_SAMPLE_POSITION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_SAMPLE_POSITION = extern struct {
    X: i8,
    Y: i8,
};
// --------------------------------------------------------
// Type: D3D12_VIEW_INSTANCE_LOCATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIEW_INSTANCE_LOCATION = extern struct {
    ViewportArrayIndex: u32,
    RenderTargetArrayIndex: u32,
};
// --------------------------------------------------------
// Type: D3D12_VIEW_INSTANCING_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_VIEW_INSTANCING_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_VIEW_INSTANCING_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VIEW_INSTANCING_DESC = extern struct {
    ViewInstanceCount: u32,
    pViewInstanceLocations: ?*D3D12_VIEW_INSTANCE_LOCATION,
    Flags: D3D12_VIEW_INSTANCING_FLAGS,
};
// --------------------------------------------------------
// Type: D3D12_SHADER_COMPONENT_MAPPING
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_SHADER_COMPONENT_MAPPING = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_BUFFER_SRV_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_BUFFER_SRV_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_BUFFER_SRV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_BUFFER_SRV = extern struct {
    FirstElement: u64,
    NumElements: u32,
    StructureByteStride: u32,
    Flags: D3D12_BUFFER_SRV_FLAGS,
};
// --------------------------------------------------------
// Type: D3D12_TEX1D_SRV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_TEX1D_SRV = extern struct {
    MostDetailedMip: u32,
    MipLevels: u32,
    ResourceMinLODClamp: f32,
};
// --------------------------------------------------------
// Type: D3D12_TEX1D_ARRAY_SRV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_TEX1D_ARRAY_SRV = extern struct {
    MostDetailedMip: u32,
    MipLevels: u32,
    FirstArraySlice: u32,
    ArraySize: u32,
    ResourceMinLODClamp: f32,
};
// --------------------------------------------------------
// Type: D3D12_TEX2D_SRV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_TEX2D_SRV = extern struct {
    MostDetailedMip: u32,
    MipLevels: u32,
    PlaneSlice: u32,
    ResourceMinLODClamp: f32,
};
// --------------------------------------------------------
// Type: D3D12_TEX2D_ARRAY_SRV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_TEX2D_ARRAY_SRV = extern struct {
    MostDetailedMip: u32,
    MipLevels: u32,
    FirstArraySlice: u32,
    ArraySize: u32,
    PlaneSlice: u32,
    ResourceMinLODClamp: f32,
};
// --------------------------------------------------------
// Type: D3D12_TEX3D_SRV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_TEX3D_SRV = extern struct {
    MostDetailedMip: u32,
    MipLevels: u32,
    ResourceMinLODClamp: f32,
};
// --------------------------------------------------------
// Type: D3D12_TEXCUBE_SRV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_TEXCUBE_SRV = extern struct {
    MostDetailedMip: u32,
    MipLevels: u32,
    ResourceMinLODClamp: f32,
};
// --------------------------------------------------------
// Type: D3D12_TEXCUBE_ARRAY_SRV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_TEXCUBE_ARRAY_SRV = extern struct {
    MostDetailedMip: u32,
    MipLevels: u32,
    First2DArrayFace: u32,
    NumCubes: u32,
    ResourceMinLODClamp: f32,
};
// --------------------------------------------------------
// Type: D3D12_TEX2DMS_SRV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_TEX2DMS_SRV = extern struct {
    UnusedField_NothingToDefine: u32,
};
// --------------------------------------------------------
// Type: D3D12_TEX2DMS_ARRAY_SRV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_TEX2DMS_ARRAY_SRV = extern struct {
    FirstArraySlice: u32,
    ArraySize: u32,
};
// --------------------------------------------------------
// Type: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV = extern struct {
    Location: u64,
};
// --------------------------------------------------------
// Type: D3D12_SRV_DIMENSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_SRV_DIMENSION = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_SHADER_RESOURCE_VIEW_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_SHADER_RESOURCE_VIEW_DESC = extern struct {
    Format: DXGI_FORMAT,
    ViewDimension: D3D12_SRV_DIMENSION,
    Shader4ComponentMapping: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: D3D12_CONSTANT_BUFFER_VIEW_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_CONSTANT_BUFFER_VIEW_DESC = extern struct {
    BufferLocation: u64,
    SizeInBytes: u32,
};
// --------------------------------------------------------
// Type: D3D12_FILTER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_FILTER = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_FILTER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_FILTER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_FILTER_REDUCTION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_FILTER_REDUCTION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_TEXTURE_ADDRESS_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_TEXTURE_ADDRESS_MODE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_SAMPLER_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_SAMPLER_DESC = extern struct {
    Filter: D3D12_FILTER,
    AddressU: D3D12_TEXTURE_ADDRESS_MODE,
    AddressV: D3D12_TEXTURE_ADDRESS_MODE,
    AddressW: D3D12_TEXTURE_ADDRESS_MODE,
    MipLODBias: f32,
    MaxAnisotropy: u32,
    ComparisonFunc: D3D12_COMPARISON_FUNC,
    BorderColor: ?[*]f32,
    MinLOD: f32,
    MaxLOD: f32,
};
// --------------------------------------------------------
// Type: D3D12_BUFFER_UAV_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_BUFFER_UAV_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_BUFFER_UAV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_BUFFER_UAV = extern struct {
    FirstElement: u64,
    NumElements: u32,
    StructureByteStride: u32,
    CounterOffsetInBytes: u64,
    Flags: D3D12_BUFFER_UAV_FLAGS,
};
// --------------------------------------------------------
// Type: D3D12_TEX1D_UAV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_TEX1D_UAV = extern struct {
    MipSlice: u32,
};
// --------------------------------------------------------
// Type: D3D12_TEX1D_ARRAY_UAV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_TEX1D_ARRAY_UAV = extern struct {
    MipSlice: u32,
    FirstArraySlice: u32,
    ArraySize: u32,
};
// --------------------------------------------------------
// Type: D3D12_TEX2D_UAV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_TEX2D_UAV = extern struct {
    MipSlice: u32,
    PlaneSlice: u32,
};
// --------------------------------------------------------
// Type: D3D12_TEX2D_ARRAY_UAV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_TEX2D_ARRAY_UAV = extern struct {
    MipSlice: u32,
    FirstArraySlice: u32,
    ArraySize: u32,
    PlaneSlice: u32,
};
// --------------------------------------------------------
// Type: D3D12_TEX3D_UAV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_TEX3D_UAV = extern struct {
    MipSlice: u32,
    FirstWSlice: u32,
    WSize: u32,
};
// --------------------------------------------------------
// Type: D3D12_UAV_DIMENSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_UAV_DIMENSION = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_UNORDERED_ACCESS_VIEW_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_UNORDERED_ACCESS_VIEW_DESC = extern struct {
    Format: DXGI_FORMAT,
    ViewDimension: D3D12_UAV_DIMENSION,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: D3D12_BUFFER_RTV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_BUFFER_RTV = extern struct {
    FirstElement: u64,
    NumElements: u32,
};
// --------------------------------------------------------
// Type: D3D12_TEX1D_RTV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_TEX1D_RTV = extern struct {
    MipSlice: u32,
};
// --------------------------------------------------------
// Type: D3D12_TEX1D_ARRAY_RTV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_TEX1D_ARRAY_RTV = extern struct {
    MipSlice: u32,
    FirstArraySlice: u32,
    ArraySize: u32,
};
// --------------------------------------------------------
// Type: D3D12_TEX2D_RTV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_TEX2D_RTV = extern struct {
    MipSlice: u32,
    PlaneSlice: u32,
};
// --------------------------------------------------------
// Type: D3D12_TEX2DMS_RTV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_TEX2DMS_RTV = extern struct {
    UnusedField_NothingToDefine: u32,
};
// --------------------------------------------------------
// Type: D3D12_TEX2D_ARRAY_RTV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_TEX2D_ARRAY_RTV = extern struct {
    MipSlice: u32,
    FirstArraySlice: u32,
    ArraySize: u32,
    PlaneSlice: u32,
};
// --------------------------------------------------------
// Type: D3D12_TEX2DMS_ARRAY_RTV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_TEX2DMS_ARRAY_RTV = extern struct {
    FirstArraySlice: u32,
    ArraySize: u32,
};
// --------------------------------------------------------
// Type: D3D12_TEX3D_RTV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_TEX3D_RTV = extern struct {
    MipSlice: u32,
    FirstWSlice: u32,
    WSize: u32,
};
// --------------------------------------------------------
// Type: D3D12_RTV_DIMENSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_RTV_DIMENSION = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_RENDER_TARGET_VIEW_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RENDER_TARGET_VIEW_DESC = extern struct {
    Format: DXGI_FORMAT,
    ViewDimension: D3D12_RTV_DIMENSION,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: D3D12_TEX1D_DSV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_TEX1D_DSV = extern struct {
    MipSlice: u32,
};
// --------------------------------------------------------
// Type: D3D12_TEX1D_ARRAY_DSV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_TEX1D_ARRAY_DSV = extern struct {
    MipSlice: u32,
    FirstArraySlice: u32,
    ArraySize: u32,
};
// --------------------------------------------------------
// Type: D3D12_TEX2D_DSV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_TEX2D_DSV = extern struct {
    MipSlice: u32,
};
// --------------------------------------------------------
// Type: D3D12_TEX2D_ARRAY_DSV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_TEX2D_ARRAY_DSV = extern struct {
    MipSlice: u32,
    FirstArraySlice: u32,
    ArraySize: u32,
};
// --------------------------------------------------------
// Type: D3D12_TEX2DMS_DSV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_TEX2DMS_DSV = extern struct {
    UnusedField_NothingToDefine: u32,
};
// --------------------------------------------------------
// Type: D3D12_TEX2DMS_ARRAY_DSV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_TEX2DMS_ARRAY_DSV = extern struct {
    FirstArraySlice: u32,
    ArraySize: u32,
};
// --------------------------------------------------------
// Type: D3D12_DSV_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_DSV_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_DSV_DIMENSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_DSV_DIMENSION = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_DEPTH_STENCIL_VIEW_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_DEPTH_STENCIL_VIEW_DESC = extern struct {
    Format: DXGI_FORMAT,
    ViewDimension: D3D12_DSV_DIMENSION,
    Flags: D3D12_DSV_FLAGS,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: D3D12_CLEAR_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_CLEAR_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_FENCE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_FENCE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_DESCRIPTOR_HEAP_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_DESCRIPTOR_HEAP_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_DESCRIPTOR_HEAP_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_DESCRIPTOR_HEAP_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_DESCRIPTOR_HEAP_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_DESCRIPTOR_HEAP_DESC = extern struct {
    Type: D3D12_DESCRIPTOR_HEAP_TYPE,
    NumDescriptors: u32,
    Flags: D3D12_DESCRIPTOR_HEAP_FLAGS,
    NodeMask: u32,
};
// --------------------------------------------------------
// Type: D3D12_DESCRIPTOR_RANGE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_DESCRIPTOR_RANGE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_DESCRIPTOR_RANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_DESCRIPTOR_RANGE = extern struct {
    RangeType: D3D12_DESCRIPTOR_RANGE_TYPE,
    NumDescriptors: u32,
    BaseShaderRegister: u32,
    RegisterSpace: u32,
    OffsetInDescriptorsFromTableStart: u32,
};
// --------------------------------------------------------
// Type: D3D12_ROOT_DESCRIPTOR_TABLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_ROOT_DESCRIPTOR_TABLE = extern struct {
    NumDescriptorRanges: u32,
    pDescriptorRanges: ?*D3D12_DESCRIPTOR_RANGE,
};
// --------------------------------------------------------
// Type: D3D12_ROOT_CONSTANTS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_ROOT_CONSTANTS = extern struct {
    ShaderRegister: u32,
    RegisterSpace: u32,
    Num32BitValues: u32,
};
// --------------------------------------------------------
// Type: D3D12_ROOT_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_ROOT_DESCRIPTOR = extern struct {
    ShaderRegister: u32,
    RegisterSpace: u32,
};
// --------------------------------------------------------
// Type: D3D12_SHADER_VISIBILITY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_SHADER_VISIBILITY = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_ROOT_PARAMETER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_ROOT_PARAMETER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_ROOT_PARAMETER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_ROOT_PARAMETER = extern struct {
    ParameterType: D3D12_ROOT_PARAMETER_TYPE,
    Anonymous: _Anonymous_e__Union,
    ShaderVisibility: D3D12_SHADER_VISIBILITY,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: D3D12_ROOT_SIGNATURE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_ROOT_SIGNATURE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_STATIC_BORDER_COLOR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_STATIC_BORDER_COLOR = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_STATIC_SAMPLER_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_STATIC_SAMPLER_DESC = extern struct {
    Filter: D3D12_FILTER,
    AddressU: D3D12_TEXTURE_ADDRESS_MODE,
    AddressV: D3D12_TEXTURE_ADDRESS_MODE,
    AddressW: D3D12_TEXTURE_ADDRESS_MODE,
    MipLODBias: f32,
    MaxAnisotropy: u32,
    ComparisonFunc: D3D12_COMPARISON_FUNC,
    BorderColor: D3D12_STATIC_BORDER_COLOR,
    MinLOD: f32,
    MaxLOD: f32,
    ShaderRegister: u32,
    RegisterSpace: u32,
    ShaderVisibility: D3D12_SHADER_VISIBILITY,
};
// --------------------------------------------------------
// Type: D3D12_ROOT_SIGNATURE_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_ROOT_SIGNATURE_DESC = extern struct {
    NumParameters: u32,
    pParameters: ?*D3D12_ROOT_PARAMETER,
    NumStaticSamplers: u32,
    pStaticSamplers: ?*D3D12_STATIC_SAMPLER_DESC,
    Flags: D3D12_ROOT_SIGNATURE_FLAGS,
};
// --------------------------------------------------------
// Type: D3D12_DESCRIPTOR_RANGE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_DESCRIPTOR_RANGE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_DESCRIPTOR_RANGE1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_DESCRIPTOR_RANGE1 = extern struct {
    RangeType: D3D12_DESCRIPTOR_RANGE_TYPE,
    NumDescriptors: u32,
    BaseShaderRegister: u32,
    RegisterSpace: u32,
    Flags: D3D12_DESCRIPTOR_RANGE_FLAGS,
    OffsetInDescriptorsFromTableStart: u32,
};
// --------------------------------------------------------
// Type: D3D12_ROOT_DESCRIPTOR_TABLE1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_ROOT_DESCRIPTOR_TABLE1 = extern struct {
    NumDescriptorRanges: u32,
    pDescriptorRanges: ?*D3D12_DESCRIPTOR_RANGE1,
};
// --------------------------------------------------------
// Type: D3D12_ROOT_DESCRIPTOR_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_ROOT_DESCRIPTOR_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_ROOT_DESCRIPTOR1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_ROOT_DESCRIPTOR1 = extern struct {
    ShaderRegister: u32,
    RegisterSpace: u32,
    Flags: D3D12_ROOT_DESCRIPTOR_FLAGS,
};
// --------------------------------------------------------
// Type: D3D12_ROOT_PARAMETER1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_ROOT_PARAMETER1 = extern struct {
    ParameterType: D3D12_ROOT_PARAMETER_TYPE,
    Anonymous: _Anonymous_e__Union,
    ShaderVisibility: D3D12_SHADER_VISIBILITY,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: D3D12_ROOT_SIGNATURE_DESC1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_ROOT_SIGNATURE_DESC1 = extern struct {
    NumParameters: u32,
    pParameters: ?*D3D12_ROOT_PARAMETER1,
    NumStaticSamplers: u32,
    pStaticSamplers: ?*D3D12_STATIC_SAMPLER_DESC,
    Flags: D3D12_ROOT_SIGNATURE_FLAGS,
};
// --------------------------------------------------------
// Type: D3D12_VERSIONED_ROOT_SIGNATURE_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VERSIONED_ROOT_SIGNATURE_DESC = extern struct {
    Version: D3D_ROOT_SIGNATURE_VERSION,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: ID3D12RootSignatureDeserializer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12RootSignatureDeserializer = *opaque{
    // TODO: Method 'GetRootSignatureDesc'
};
// --------------------------------------------------------
// Type: ID3D12VersionedRootSignatureDeserializer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12VersionedRootSignatureDeserializer = *opaque{
    // TODO: Method 'GetRootSignatureDescAtVersion'
    // TODO: Method 'GetUnconvertedRootSignatureDesc'
};
// --------------------------------------------------------
// Type: PFN_D3D12_SERIALIZE_ROOT_SIGNATURE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_D3D12_SERIALIZE_ROOT_SIGNATURE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_D3D12_CREATE_ROOT_SIGNATURE_DESERIALIZER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_D3D12_CREATE_ROOT_SIGNATURE_DESERIALIZER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_D3D12_SERIALIZE_VERSIONED_ROOT_SIGNATURE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_D3D12_SERIALIZE_VERSIONED_ROOT_SIGNATURE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_D3D12_CREATE_VERSIONED_ROOT_SIGNATURE_DESERIALIZER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_D3D12_CREATE_VERSIONED_ROOT_SIGNATURE_DESERIALIZER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: D3D12_CPU_DESCRIPTOR_HANDLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_CPU_DESCRIPTOR_HANDLE = extern struct {
    ptr: ?*opaque{},
};
// --------------------------------------------------------
// Type: D3D12_GPU_DESCRIPTOR_HANDLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_GPU_DESCRIPTOR_HANDLE = extern struct {
    ptr: u64,
};
// --------------------------------------------------------
// Type: D3D12_DISCARD_REGION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_DISCARD_REGION = extern struct {
    NumRects: u32,
    pRects: ?*RECT,
    FirstSubresource: u32,
    NumSubresources: u32,
};
// --------------------------------------------------------
// Type: D3D12_QUERY_HEAP_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_QUERY_HEAP_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_QUERY_HEAP_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_QUERY_HEAP_DESC = extern struct {
    Type: D3D12_QUERY_HEAP_TYPE,
    Count: u32,
    NodeMask: u32,
};
// --------------------------------------------------------
// Type: D3D12_QUERY_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_QUERY_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_PREDICATION_OP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_PREDICATION_OP = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_QUERY_DATA_PIPELINE_STATISTICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_QUERY_DATA_PIPELINE_STATISTICS = extern struct {
    IAVertices: u64,
    IAPrimitives: u64,
    VSInvocations: u64,
    GSInvocations: u64,
    GSPrimitives: u64,
    CInvocations: u64,
    CPrimitives: u64,
    PSInvocations: u64,
    HSInvocations: u64,
    DSInvocations: u64,
    CSInvocations: u64,
};
// --------------------------------------------------------
// Type: D3D12_QUERY_DATA_SO_STATISTICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_QUERY_DATA_SO_STATISTICS = extern struct {
    NumPrimitivesWritten: u64,
    PrimitivesStorageNeeded: u64,
};
// --------------------------------------------------------
// Type: D3D12_STREAM_OUTPUT_BUFFER_VIEW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_STREAM_OUTPUT_BUFFER_VIEW = extern struct {
    BufferLocation: u64,
    SizeInBytes: u64,
    BufferFilledSizeLocation: u64,
};
// --------------------------------------------------------
// Type: D3D12_DRAW_ARGUMENTS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_DRAW_ARGUMENTS = extern struct {
    VertexCountPerInstance: u32,
    InstanceCount: u32,
    StartVertexLocation: u32,
    StartInstanceLocation: u32,
};
// --------------------------------------------------------
// Type: D3D12_DRAW_INDEXED_ARGUMENTS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_DRAW_INDEXED_ARGUMENTS = extern struct {
    IndexCountPerInstance: u32,
    InstanceCount: u32,
    StartIndexLocation: u32,
    BaseVertexLocation: i32,
    StartInstanceLocation: u32,
};
// --------------------------------------------------------
// Type: D3D12_DISPATCH_ARGUMENTS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_DISPATCH_ARGUMENTS = extern struct {
    ThreadGroupCountX: u32,
    ThreadGroupCountY: u32,
    ThreadGroupCountZ: u32,
};
// --------------------------------------------------------
// Type: D3D12_VERTEX_BUFFER_VIEW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VERTEX_BUFFER_VIEW = extern struct {
    BufferLocation: u64,
    SizeInBytes: u32,
    StrideInBytes: u32,
};
// --------------------------------------------------------
// Type: D3D12_INDEX_BUFFER_VIEW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_INDEX_BUFFER_VIEW = extern struct {
    BufferLocation: u64,
    SizeInBytes: u32,
    Format: DXGI_FORMAT,
};
// --------------------------------------------------------
// Type: D3D12_INDIRECT_ARGUMENT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_INDIRECT_ARGUMENT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_INDIRECT_ARGUMENT_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_INDIRECT_ARGUMENT_DESC = extern struct {
    Type: D3D12_INDIRECT_ARGUMENT_TYPE,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _UnorderedAccessView_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _UnorderedAccessView_e__Struct = extern struct {
            RootParameterIndex: u32,
        };
        // --------------------------------------------------------
        // Type: _ConstantBufferView_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _ConstantBufferView_e__Struct = extern struct {
            RootParameterIndex: u32,
        };
        // --------------------------------------------------------
        // Type: _VertexBuffer_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _VertexBuffer_e__Struct = extern struct {
            Slot: u32,
        };
        // --------------------------------------------------------
        // Type: _ShaderResourceView_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _ShaderResourceView_e__Struct = extern struct {
            RootParameterIndex: u32,
        };
        // --------------------------------------------------------
        // Type: _Constant_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Constant_e__Struct = extern struct {
            RootParameterIndex: u32,
            DestOffsetIn32BitValues: u32,
            Num32BitValuesToSet: u32,
        };
    };
};
// --------------------------------------------------------
// Type: D3D12_COMMAND_SIGNATURE_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_COMMAND_SIGNATURE_DESC = extern struct {
    ByteStride: u32,
    NumArgumentDescs: u32,
    pArgumentDescs: ?*D3D12_INDIRECT_ARGUMENT_DESC,
    NodeMask: u32,
};
// --------------------------------------------------------
// Type: ID3D12Pageable
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12Pageable = *opaque{
};
// --------------------------------------------------------
// Type: ID3D12Heap
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12Heap = *opaque{
    // TODO: Method 'GetDesc'
};
// --------------------------------------------------------
// Type: ID3D12Resource
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12Resource = *opaque{
    // TODO: Method 'Map'
    // TODO: Method 'Unmap'
    // TODO: Method 'GetDesc'
    // TODO: Method 'GetGPUVirtualAddress'
    // TODO: Method 'WriteToSubresource'
    // TODO: Method 'ReadFromSubresource'
    // TODO: Method 'GetHeapProperties'
};
// --------------------------------------------------------
// Type: ID3D12CommandAllocator
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12CommandAllocator = *opaque{
    // TODO: Method 'Reset'
};
// --------------------------------------------------------
// Type: ID3D12Fence
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12Fence = *opaque{
    // TODO: Method 'GetCompletedValue'
    // TODO: Method 'SetEventOnCompletion'
    // TODO: Method 'Signal'
};
// --------------------------------------------------------
// Type: ID3D12Fence1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12Fence1 = *opaque{
    // TODO: Method 'GetCreationFlags'
};
// --------------------------------------------------------
// Type: ID3D12PipelineState
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12PipelineState = *opaque{
    // TODO: Method 'GetCachedBlob'
};
// --------------------------------------------------------
// Type: ID3D12DescriptorHeap
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12DescriptorHeap = *opaque{
    // TODO: Method 'GetDesc'
    // TODO: Method 'GetCPUDescriptorHandleForHeapStart'
    // TODO: Method 'GetGPUDescriptorHandleForHeapStart'
};
// --------------------------------------------------------
// Type: ID3D12QueryHeap
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12QueryHeap = *opaque{
};
// --------------------------------------------------------
// Type: ID3D12CommandSignature
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12CommandSignature = *opaque{
};
// --------------------------------------------------------
// Type: ID3D12CommandList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12CommandList = *opaque{
    // TODO: Method 'GetType'
};
// --------------------------------------------------------
// Type: ID3D12GraphicsCommandList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12GraphicsCommandList = *opaque{
    // TODO: Method 'Close'
    // TODO: Method 'Reset'
    // TODO: Method 'ClearState'
    // TODO: Method 'DrawInstanced'
    // TODO: Method 'DrawIndexedInstanced'
    // TODO: Method 'Dispatch'
    // TODO: Method 'CopyBufferRegion'
    // TODO: Method 'CopyTextureRegion'
    // TODO: Method 'CopyResource'
    // TODO: Method 'CopyTiles'
    // TODO: Method 'ResolveSubresource'
    // TODO: Method 'IASetPrimitiveTopology'
    // TODO: Method 'RSSetViewports'
    // TODO: Method 'RSSetScissorRects'
    // TODO: Method 'OMSetBlendFactor'
    // TODO: Method 'OMSetStencilRef'
    // TODO: Method 'SetPipelineState'
    // TODO: Method 'ResourceBarrier'
    // TODO: Method 'ExecuteBundle'
    // TODO: Method 'SetDescriptorHeaps'
    // TODO: Method 'SetComputeRootSignature'
    // TODO: Method 'SetGraphicsRootSignature'
    // TODO: Method 'SetComputeRootDescriptorTable'
    // TODO: Method 'SetGraphicsRootDescriptorTable'
    // TODO: Method 'SetComputeRoot32BitConstant'
    // TODO: Method 'SetGraphicsRoot32BitConstant'
    // TODO: Method 'SetComputeRoot32BitConstants'
    // TODO: Method 'SetGraphicsRoot32BitConstants'
    // TODO: Method 'SetComputeRootConstantBufferView'
    // TODO: Method 'SetGraphicsRootConstantBufferView'
    // TODO: Method 'SetComputeRootShaderResourceView'
    // TODO: Method 'SetGraphicsRootShaderResourceView'
    // TODO: Method 'SetComputeRootUnorderedAccessView'
    // TODO: Method 'SetGraphicsRootUnorderedAccessView'
    // TODO: Method 'IASetIndexBuffer'
    // TODO: Method 'IASetVertexBuffers'
    // TODO: Method 'SOSetTargets'
    // TODO: Method 'OMSetRenderTargets'
    // TODO: Method 'ClearDepthStencilView'
    // TODO: Method 'ClearRenderTargetView'
    // TODO: Method 'ClearUnorderedAccessViewUint'
    // TODO: Method 'ClearUnorderedAccessViewFloat'
    // TODO: Method 'DiscardResource'
    // TODO: Method 'BeginQuery'
    // TODO: Method 'EndQuery'
    // TODO: Method 'ResolveQueryData'
    // TODO: Method 'SetPredication'
    // TODO: Method 'SetMarker'
    // TODO: Method 'BeginEvent'
    // TODO: Method 'EndEvent'
    // TODO: Method 'ExecuteIndirect'
};
// --------------------------------------------------------
// Type: ID3D12GraphicsCommandList1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12GraphicsCommandList1 = *opaque{
    // TODO: Method 'AtomicCopyBufferUINT'
    // TODO: Method 'AtomicCopyBufferUINT64'
    // TODO: Method 'OMSetDepthBounds'
    // TODO: Method 'SetSamplePositions'
    // TODO: Method 'ResolveSubresourceRegion'
    // TODO: Method 'SetViewInstanceMask'
};
// --------------------------------------------------------
// Type: D3D12_WRITEBUFFERIMMEDIATE_PARAMETER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER = extern struct {
    Dest: u64,
    Value: u32,
};
// --------------------------------------------------------
// Type: D3D12_WRITEBUFFERIMMEDIATE_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_WRITEBUFFERIMMEDIATE_MODE = *opaque{
};
// --------------------------------------------------------
// Type: ID3D12GraphicsCommandList2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12GraphicsCommandList2 = *opaque{
    // TODO: Method 'WriteBufferImmediate'
};
// --------------------------------------------------------
// Type: ID3D12CommandQueue
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12CommandQueue = *opaque{
    // TODO: Method 'UpdateTileMappings'
    // TODO: Method 'CopyTileMappings'
    // TODO: Method 'ExecuteCommandLists'
    // TODO: Method 'SetMarker'
    // TODO: Method 'BeginEvent'
    // TODO: Method 'EndEvent'
    // TODO: Method 'Signal'
    // TODO: Method 'Wait'
    // TODO: Method 'GetTimestampFrequency'
    // TODO: Method 'GetClockCalibration'
    // TODO: Method 'GetDesc'
};
// --------------------------------------------------------
// Type: ID3D12Device
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12Device = *opaque{
    // TODO: Method 'GetNodeCount'
    // TODO: Method 'CreateCommandQueue'
    // TODO: Method 'CreateCommandAllocator'
    // TODO: Method 'CreateGraphicsPipelineState'
    // TODO: Method 'CreateComputePipelineState'
    // TODO: Method 'CreateCommandList'
    // TODO: Method 'CheckFeatureSupport'
    // TODO: Method 'CreateDescriptorHeap'
    // TODO: Method 'GetDescriptorHandleIncrementSize'
    // TODO: Method 'CreateRootSignature'
    // TODO: Method 'CreateConstantBufferView'
    // TODO: Method 'CreateShaderResourceView'
    // TODO: Method 'CreateUnorderedAccessView'
    // TODO: Method 'CreateRenderTargetView'
    // TODO: Method 'CreateDepthStencilView'
    // TODO: Method 'CreateSampler'
    // TODO: Method 'CopyDescriptors'
    // TODO: Method 'CopyDescriptorsSimple'
    // TODO: Method 'GetResourceAllocationInfo'
    // TODO: Method 'GetCustomHeapProperties'
    // TODO: Method 'CreateCommittedResource'
    // TODO: Method 'CreateHeap'
    // TODO: Method 'CreatePlacedResource'
    // TODO: Method 'CreateReservedResource'
    // TODO: Method 'CreateSharedHandle'
    // TODO: Method 'OpenSharedHandle'
    // TODO: Method 'OpenSharedHandleByName'
    // TODO: Method 'MakeResident'
    // TODO: Method 'Evict'
    // TODO: Method 'CreateFence'
    // TODO: Method 'GetDeviceRemovedReason'
    // TODO: Method 'GetCopyableFootprints'
    // TODO: Method 'CreateQueryHeap'
    // TODO: Method 'SetStablePowerState'
    // TODO: Method 'CreateCommandSignature'
    // TODO: Method 'GetResourceTiling'
    // TODO: Method 'GetAdapterLuid'
};
// --------------------------------------------------------
// Type: ID3D12PipelineLibrary
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12PipelineLibrary = *opaque{
    // TODO: Method 'StorePipeline'
    // TODO: Method 'LoadGraphicsPipeline'
    // TODO: Method 'LoadComputePipeline'
    // TODO: Method 'GetSerializedSize'
    // TODO: Method 'Serialize'
};
// --------------------------------------------------------
// Type: ID3D12PipelineLibrary1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12PipelineLibrary1 = *opaque{
    // TODO: Method 'LoadPipeline'
};
// --------------------------------------------------------
// Type: D3D12_MULTIPLE_FENCE_WAIT_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_MULTIPLE_FENCE_WAIT_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_RESIDENCY_PRIORITY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_RESIDENCY_PRIORITY = *opaque{
};
// --------------------------------------------------------
// Type: ID3D12Device1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12Device1 = *opaque{
    // TODO: Method 'CreatePipelineLibrary'
    // TODO: Method 'SetEventOnMultipleFenceCompletion'
    // TODO: Method 'SetResidencyPriority'
};
// --------------------------------------------------------
// Type: ID3D12Device2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12Device2 = *opaque{
    // TODO: Method 'CreatePipelineState'
};
// --------------------------------------------------------
// Type: D3D12_RESIDENCY_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_RESIDENCY_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: ID3D12Device3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12Device3 = *opaque{
    // TODO: Method 'OpenExistingHeapFromAddress'
    // TODO: Method 'OpenExistingHeapFromFileMapping'
    // TODO: Method 'EnqueueMakeResident'
};
// --------------------------------------------------------
// Type: D3D12_COMMAND_LIST_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_COMMAND_LIST_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_COMMAND_POOL_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_COMMAND_POOL_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_COMMAND_RECORDER_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_COMMAND_RECORDER_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_PROTECTED_SESSION_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_PROTECTED_SESSION_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: ID3D12ProtectedSession
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12ProtectedSession = *opaque{
    // TODO: Method 'GetStatusFence'
    // TODO: Method 'GetSessionStatus'
};
// --------------------------------------------------------
// Type: D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT = extern struct {
    NodeIndex: u32,
    Support: D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS,
};
// --------------------------------------------------------
// Type: D3D12_PROTECTED_RESOURCE_SESSION_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_PROTECTED_RESOURCE_SESSION_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_PROTECTED_RESOURCE_SESSION_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_PROTECTED_RESOURCE_SESSION_DESC = extern struct {
    NodeMask: u32,
    Flags: D3D12_PROTECTED_RESOURCE_SESSION_FLAGS,
};
// --------------------------------------------------------
// Type: ID3D12ProtectedResourceSession
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12ProtectedResourceSession = *opaque{
    // TODO: Method 'GetDesc'
};
// --------------------------------------------------------
// Type: ID3D12Device4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12Device4 = *opaque{
    // TODO: Method 'CreateCommandList1'
    // TODO: Method 'CreateProtectedResourceSession'
    // TODO: Method 'CreateCommittedResource1'
    // TODO: Method 'CreateHeap1'
    // TODO: Method 'CreateReservedResource1'
    // TODO: Method 'GetResourceAllocationInfo1'
};
// --------------------------------------------------------
// Type: D3D12_LIFETIME_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_LIFETIME_STATE = *opaque{
};
// --------------------------------------------------------
// Type: ID3D12LifetimeOwner
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12LifetimeOwner = *opaque{
    // TODO: Method 'LifetimeStateUpdated'
};
// --------------------------------------------------------
// Type: ID3D12SwapChainAssistant
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12SwapChainAssistant = *opaque{
    // TODO: Method 'GetLUID'
    // TODO: Method 'GetSwapChainObject'
    // TODO: Method 'GetCurrentResourceAndCommandQueue'
    // TODO: Method 'InsertImplicitSync'
};
// --------------------------------------------------------
// Type: ID3D12LifetimeTracker
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12LifetimeTracker = *opaque{
    // TODO: Method 'DestroyOwnedObject'
};
// --------------------------------------------------------
// Type: D3D12_META_COMMAND_PARAMETER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_META_COMMAND_PARAMETER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_META_COMMAND_PARAMETER_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_META_COMMAND_PARAMETER_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_META_COMMAND_PARAMETER_STAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_META_COMMAND_PARAMETER_STAGE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_META_COMMAND_PARAMETER_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_META_COMMAND_PARAMETER_DESC = extern struct {
    Name: ?*u16,
    Type: D3D12_META_COMMAND_PARAMETER_TYPE,
    Flags: D3D12_META_COMMAND_PARAMETER_FLAGS,
    RequiredResourceState: D3D12_RESOURCE_STATES,
    StructureOffset: u32,
};
// --------------------------------------------------------
// Type: D3D12_GRAPHICS_STATES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_GRAPHICS_STATES = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_META_COMMAND_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_META_COMMAND_DESC = extern struct {
    Id: Guid,
    Name: ?*u16,
    InitializationDirtyState: D3D12_GRAPHICS_STATES,
    ExecutionDirtyState: D3D12_GRAPHICS_STATES,
};
// --------------------------------------------------------
// Type: ID3D12StateObject
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12StateObject = *opaque{
};
// --------------------------------------------------------
// Type: ID3D12StateObjectProperties
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12StateObjectProperties = *opaque{
    // TODO: Method 'GetShaderIdentifier'
    // TODO: Method 'GetShaderStackSize'
    // TODO: Method 'GetPipelineStackSize'
    // TODO: Method 'SetPipelineStackSize'
};
// --------------------------------------------------------
// Type: D3D12_STATE_SUBOBJECT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_STATE_SUBOBJECT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_STATE_SUBOBJECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_STATE_SUBOBJECT = extern struct {
    Type: D3D12_STATE_SUBOBJECT_TYPE,
    pDesc: ?*opaque{},
};
// --------------------------------------------------------
// Type: D3D12_STATE_OBJECT_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_STATE_OBJECT_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_STATE_OBJECT_CONFIG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_STATE_OBJECT_CONFIG = extern struct {
    Flags: D3D12_STATE_OBJECT_FLAGS,
};
// --------------------------------------------------------
// Type: D3D12_GLOBAL_ROOT_SIGNATURE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_GLOBAL_ROOT_SIGNATURE = extern struct {
    pGlobalRootSignature: ID3D12RootSignature,
};
// --------------------------------------------------------
// Type: D3D12_LOCAL_ROOT_SIGNATURE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_LOCAL_ROOT_SIGNATURE = extern struct {
    pLocalRootSignature: ID3D12RootSignature,
};
// --------------------------------------------------------
// Type: D3D12_NODE_MASK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_NODE_MASK = extern struct {
    NodeMask: u32,
};
// --------------------------------------------------------
// Type: D3D12_EXPORT_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_EXPORT_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_EXPORT_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_EXPORT_DESC = extern struct {
    Name: ?*u16,
    ExportToRename: ?*u16,
    Flags: D3D12_EXPORT_FLAGS,
};
// --------------------------------------------------------
// Type: D3D12_DXIL_LIBRARY_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_DXIL_LIBRARY_DESC = extern struct {
    DXILLibrary: D3D12_SHADER_BYTECODE,
    NumExports: u32,
    pExports: ?*D3D12_EXPORT_DESC,
};
// --------------------------------------------------------
// Type: D3D12_EXISTING_COLLECTION_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_EXISTING_COLLECTION_DESC = extern struct {
    pExistingCollection: ID3D12StateObject,
    NumExports: u32,
    pExports: ?*D3D12_EXPORT_DESC,
};
// --------------------------------------------------------
// Type: D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION = extern struct {
    pSubobjectToAssociate: ?*D3D12_STATE_SUBOBJECT,
    NumExports: u32,
    pExports: ?*?*u16,
};
// --------------------------------------------------------
// Type: D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION = extern struct {
    SubobjectToAssociate: ?*u16,
    NumExports: u32,
    pExports: ?*?*u16,
};
// --------------------------------------------------------
// Type: D3D12_HIT_GROUP_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_HIT_GROUP_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_HIT_GROUP_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_HIT_GROUP_DESC = extern struct {
    HitGroupExport: ?*u16,
    Type: D3D12_HIT_GROUP_TYPE,
    AnyHitShaderImport: ?*u16,
    ClosestHitShaderImport: ?*u16,
    IntersectionShaderImport: ?*u16,
};
// --------------------------------------------------------
// Type: D3D12_RAYTRACING_SHADER_CONFIG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RAYTRACING_SHADER_CONFIG = extern struct {
    MaxPayloadSizeInBytes: u32,
    MaxAttributeSizeInBytes: u32,
};
// --------------------------------------------------------
// Type: D3D12_RAYTRACING_PIPELINE_CONFIG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RAYTRACING_PIPELINE_CONFIG = extern struct {
    MaxTraceRecursionDepth: u32,
};
// --------------------------------------------------------
// Type: D3D12_RAYTRACING_PIPELINE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_RAYTRACING_PIPELINE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_RAYTRACING_PIPELINE_CONFIG1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RAYTRACING_PIPELINE_CONFIG1 = extern struct {
    MaxTraceRecursionDepth: u32,
    Flags: D3D12_RAYTRACING_PIPELINE_FLAGS,
};
// --------------------------------------------------------
// Type: D3D12_STATE_OBJECT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_STATE_OBJECT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_STATE_OBJECT_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_STATE_OBJECT_DESC = extern struct {
    Type: D3D12_STATE_OBJECT_TYPE,
    NumSubobjects: u32,
    pSubobjects: ?*D3D12_STATE_SUBOBJECT,
};
// --------------------------------------------------------
// Type: D3D12_RAYTRACING_GEOMETRY_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_RAYTRACING_GEOMETRY_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_RAYTRACING_GEOMETRY_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_RAYTRACING_GEOMETRY_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_RAYTRACING_INSTANCE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_RAYTRACING_INSTANCE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE = extern struct {
    StartAddress: u64,
    StrideInBytes: u64,
};
// --------------------------------------------------------
// Type: D3D12_GPU_VIRTUAL_ADDRESS_RANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_GPU_VIRTUAL_ADDRESS_RANGE = extern struct {
    StartAddress: u64,
    SizeInBytes: u64,
};
// --------------------------------------------------------
// Type: D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE = extern struct {
    StartAddress: u64,
    SizeInBytes: u64,
    StrideInBytes: u64,
};
// --------------------------------------------------------
// Type: D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC = extern struct {
    Transform3x4: u64,
    IndexFormat: DXGI_FORMAT,
    VertexFormat: DXGI_FORMAT,
    IndexCount: u32,
    VertexCount: u32,
    IndexBuffer: u64,
    VertexBuffer: D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE,
};
// --------------------------------------------------------
// Type: D3D12_RAYTRACING_AABB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RAYTRACING_AABB = extern struct {
    MinX: f32,
    MinY: f32,
    MinZ: f32,
    MaxX: f32,
    MaxY: f32,
    MaxZ: f32,
};
// --------------------------------------------------------
// Type: D3D12_RAYTRACING_GEOMETRY_AABBS_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RAYTRACING_GEOMETRY_AABBS_DESC = extern struct {
    AABBCount: u64,
    AABBs: D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE,
};
// --------------------------------------------------------
// Type: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_ELEMENTS_LAYOUT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_ELEMENTS_LAYOUT = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC = extern struct {
    DestBuffer: u64,
    InfoType: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE,
};
// --------------------------------------------------------
// Type: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC = extern struct {
    CompactedSizeInBytes: u64,
};
// --------------------------------------------------------
// Type: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC = extern struct {
    DecodedSizeInBytes: u64,
};
// --------------------------------------------------------
// Type: D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER = extern struct {
    Type: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE,
    NumDescs: u32,
};
// --------------------------------------------------------
// Type: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC = extern struct {
    SerializedSizeInBytes: u64,
    NumBottomLevelAccelerationStructurePointers: u64,
};
// --------------------------------------------------------
// Type: D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER = extern struct {
    DriverOpaqueGUID: Guid,
    DriverOpaqueVersioningData: ?[*]u8,
};
// --------------------------------------------------------
// Type: D3D12_SERIALIZED_DATA_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_SERIALIZED_DATA_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER = extern struct {
    DriverMatchingIdentifier: D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER,
    SerializedSizeInBytesIncludingHeader: u64,
    DeserializedSizeInBytes: u64,
    NumBottomLevelAccelerationStructurePointersAfterHeader: u64,
};
// --------------------------------------------------------
// Type: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC = extern struct {
    CurrentSizeInBytes: u64,
};
// --------------------------------------------------------
// Type: D3D12_RAYTRACING_INSTANCE_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RAYTRACING_INSTANCE_DESC = extern struct {
    Transform: ?[*]f32,
    _bitfield1: u32,
    _bitfield2: u32,
    AccelerationStructure: u64,
};
// --------------------------------------------------------
// Type: D3D12_RAYTRACING_GEOMETRY_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RAYTRACING_GEOMETRY_DESC = extern struct {
    Type: D3D12_RAYTRACING_GEOMETRY_TYPE,
    Flags: D3D12_RAYTRACING_GEOMETRY_FLAGS,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS = extern struct {
    Type: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE,
    Flags: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS,
    NumDescs: u32,
    DescsLayout: D3D12_ELEMENTS_LAYOUT,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC = extern struct {
    DestAccelerationStructureData: u64,
    Inputs: D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS,
    SourceAccelerationStructureData: u64,
    ScratchAccelerationStructureData: u64,
};
// --------------------------------------------------------
// Type: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO = extern struct {
    ResultDataMaxSizeInBytes: u64,
    ScratchDataSizeInBytes: u64,
    UpdateScratchDataSizeInBytes: u64,
};
// --------------------------------------------------------
// Type: D3D12_RAY_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_RAY_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_HIT_KIND
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_HIT_KIND = *opaque{
};
// --------------------------------------------------------
// Type: ID3D12Device5
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12Device5 = *opaque{
    // TODO: Method 'CreateLifetimeTracker'
    // TODO: Method 'RemoveDevice'
    // TODO: Method 'EnumerateMetaCommands'
    // TODO: Method 'EnumerateMetaCommandParameters'
    // TODO: Method 'CreateMetaCommand'
    // TODO: Method 'CreateStateObject'
    // TODO: Method 'GetRaytracingAccelerationStructurePrebuildInfo'
    // TODO: Method 'CheckDriverMatchingIdentifier'
};
// --------------------------------------------------------
// Type: D3D12_AUTO_BREADCRUMB_OP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_AUTO_BREADCRUMB_OP = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_AUTO_BREADCRUMB_NODE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_AUTO_BREADCRUMB_NODE = extern struct {
    pCommandListDebugNameA: ?*i8,
    pCommandListDebugNameW: ?*u16,
    pCommandQueueDebugNameA: ?*i8,
    pCommandQueueDebugNameW: ?*u16,
    pCommandList: ID3D12GraphicsCommandList,
    pCommandQueue: ID3D12CommandQueue,
    BreadcrumbCount: u32,
    pLastBreadcrumbValue: ?*u32,
    pCommandHistory: ?*D3D12_AUTO_BREADCRUMB_OP,
    pNext: ?*D3D12_AUTO_BREADCRUMB_NODE,
};
// --------------------------------------------------------
// Type: D3D12_DRED_BREADCRUMB_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_DRED_BREADCRUMB_CONTEXT = extern struct {
    BreadcrumbIndex: u32,
    pContextString: ?*u16,
};
// --------------------------------------------------------
// Type: D3D12_AUTO_BREADCRUMB_NODE1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_AUTO_BREADCRUMB_NODE1 = extern struct {
    pCommandListDebugNameA: ?*i8,
    pCommandListDebugNameW: ?*u16,
    pCommandQueueDebugNameA: ?*i8,
    pCommandQueueDebugNameW: ?*u16,
    pCommandList: ID3D12GraphicsCommandList,
    pCommandQueue: ID3D12CommandQueue,
    BreadcrumbCount: u32,
    pLastBreadcrumbValue: ?*u32,
    pCommandHistory: ?*D3D12_AUTO_BREADCRUMB_OP,
    pNext: ?*D3D12_AUTO_BREADCRUMB_NODE1,
    BreadcrumbContextsCount: u32,
    pBreadcrumbContexts: ?*D3D12_DRED_BREADCRUMB_CONTEXT,
};
// --------------------------------------------------------
// Type: D3D12_DRED_VERSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_DRED_VERSION = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_DRED_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_DRED_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_DRED_ENABLEMENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_DRED_ENABLEMENT = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_DEVICE_REMOVED_EXTENDED_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_DEVICE_REMOVED_EXTENDED_DATA = extern struct {
    Flags: D3D12_DRED_FLAGS,
    pHeadAutoBreadcrumbNode: ?*D3D12_AUTO_BREADCRUMB_NODE,
};
// --------------------------------------------------------
// Type: D3D12_DRED_ALLOCATION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_DRED_ALLOCATION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_DRED_ALLOCATION_NODE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_DRED_ALLOCATION_NODE = extern struct {
    ObjectNameA: ?*i8,
    ObjectNameW: ?*u16,
    AllocationType: D3D12_DRED_ALLOCATION_TYPE,
    pNext: ?*D3D12_DRED_ALLOCATION_NODE,
};
// --------------------------------------------------------
// Type: D3D12_DRED_ALLOCATION_NODE1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_DRED_ALLOCATION_NODE1 = extern struct {
    ObjectNameA: ?*i8,
    ObjectNameW: ?*u16,
    AllocationType: D3D12_DRED_ALLOCATION_TYPE,
    pNext: ?*D3D12_DRED_ALLOCATION_NODE1,
    pObject: IUnknown,
};
// --------------------------------------------------------
// Type: D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT = extern struct {
    pHeadAutoBreadcrumbNode: ?*D3D12_AUTO_BREADCRUMB_NODE,
};
// --------------------------------------------------------
// Type: D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1 = extern struct {
    pHeadAutoBreadcrumbNode: ?*D3D12_AUTO_BREADCRUMB_NODE1,
};
// --------------------------------------------------------
// Type: D3D12_DRED_PAGE_FAULT_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_DRED_PAGE_FAULT_OUTPUT = extern struct {
    PageFaultVA: u64,
    pHeadExistingAllocationNode: ?*D3D12_DRED_ALLOCATION_NODE,
    pHeadRecentFreedAllocationNode: ?*D3D12_DRED_ALLOCATION_NODE,
};
// --------------------------------------------------------
// Type: D3D12_DRED_PAGE_FAULT_OUTPUT1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_DRED_PAGE_FAULT_OUTPUT1 = extern struct {
    PageFaultVA: u64,
    pHeadExistingAllocationNode: ?*D3D12_DRED_ALLOCATION_NODE1,
    pHeadRecentFreedAllocationNode: ?*D3D12_DRED_ALLOCATION_NODE1,
};
// --------------------------------------------------------
// Type: D3D12_DEVICE_REMOVED_EXTENDED_DATA1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_DEVICE_REMOVED_EXTENDED_DATA1 = extern struct {
    DeviceRemovedReason: HRESULT,
    AutoBreadcrumbsOutput: D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT,
    PageFaultOutput: D3D12_DRED_PAGE_FAULT_OUTPUT,
};
// --------------------------------------------------------
// Type: D3D12_DEVICE_REMOVED_EXTENDED_DATA2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_DEVICE_REMOVED_EXTENDED_DATA2 = extern struct {
    DeviceRemovedReason: HRESULT,
    AutoBreadcrumbsOutput: D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1,
    PageFaultOutput: D3D12_DRED_PAGE_FAULT_OUTPUT1,
};
// --------------------------------------------------------
// Type: D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA = extern struct {
    Version: D3D12_DRED_VERSION,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: ID3D12DeviceRemovedExtendedDataSettings
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12DeviceRemovedExtendedDataSettings = *opaque{
    // TODO: Method 'SetAutoBreadcrumbsEnablement'
    // TODO: Method 'SetPageFaultEnablement'
    // TODO: Method 'SetWatsonDumpEnablement'
};
// --------------------------------------------------------
// Type: ID3D12DeviceRemovedExtendedDataSettings1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12DeviceRemovedExtendedDataSettings1 = *opaque{
    // TODO: Method 'SetBreadcrumbContextEnablement'
};
// --------------------------------------------------------
// Type: ID3D12DeviceRemovedExtendedData
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12DeviceRemovedExtendedData = *opaque{
    // TODO: Method 'GetAutoBreadcrumbsOutput'
    // TODO: Method 'GetPageFaultAllocationOutput'
};
// --------------------------------------------------------
// Type: ID3D12DeviceRemovedExtendedData1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12DeviceRemovedExtendedData1 = *opaque{
    // TODO: Method 'GetAutoBreadcrumbsOutput1'
    // TODO: Method 'GetPageFaultAllocationOutput1'
};
// --------------------------------------------------------
// Type: D3D12_BACKGROUND_PROCESSING_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_BACKGROUND_PROCESSING_MODE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_MEASUREMENTS_ACTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_MEASUREMENTS_ACTION = *opaque{
};
// --------------------------------------------------------
// Type: ID3D12Device6
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12Device6 = *opaque{
    // TODO: Method 'SetBackgroundProcessingMode'
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT = extern struct {
    NodeIndex: u32,
    Count: u32,
};
// --------------------------------------------------------
// Type: D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES = extern struct {
    NodeIndex: u32,
    Count: u32,
    pTypes: ?*Guid,
};
// --------------------------------------------------------
// Type: D3D12_PROTECTED_RESOURCE_SESSION_DESC1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_PROTECTED_RESOURCE_SESSION_DESC1 = extern struct {
    NodeMask: u32,
    Flags: D3D12_PROTECTED_RESOURCE_SESSION_FLAGS,
    ProtectionType: Guid,
};
// --------------------------------------------------------
// Type: ID3D12ProtectedResourceSession1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12ProtectedResourceSession1 = *opaque{
    // TODO: Method 'GetDesc1'
};
// --------------------------------------------------------
// Type: ID3D12Device7
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12Device7 = *opaque{
    // TODO: Method 'AddToStateObject'
    // TODO: Method 'CreateProtectedResourceSession1'
};
// --------------------------------------------------------
// Type: ID3D12Device8
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12Device8 = *opaque{
    // TODO: Method 'GetResourceAllocationInfo2'
    // TODO: Method 'CreateCommittedResource2'
    // TODO: Method 'CreatePlacedResource1'
    // TODO: Method 'CreateSamplerFeedbackUnorderedAccessView'
    // TODO: Method 'GetCopyableFootprints1'
};
// --------------------------------------------------------
// Type: ID3D12Resource1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12Resource1 = *opaque{
    // TODO: Method 'GetProtectedResourceSession'
};
// --------------------------------------------------------
// Type: ID3D12Resource2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12Resource2 = *opaque{
    // TODO: Method 'GetDesc1'
};
// --------------------------------------------------------
// Type: ID3D12Heap1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12Heap1 = *opaque{
    // TODO: Method 'GetProtectedResourceSession'
};
// --------------------------------------------------------
// Type: ID3D12GraphicsCommandList3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12GraphicsCommandList3 = *opaque{
    // TODO: Method 'SetProtectedResourceSession'
};
// --------------------------------------------------------
// Type: D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS = extern struct {
    ClearValue: D3D12_CLEAR_VALUE,
};
// --------------------------------------------------------
// Type: D3D12_RENDER_PASS_BEGINNING_ACCESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RENDER_PASS_BEGINNING_ACCESS = extern struct {
    Type: D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: D3D12_RENDER_PASS_ENDING_ACCESS_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_RENDER_PASS_ENDING_ACCESS_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS = extern struct {
    SrcSubresource: u32,
    DstSubresource: u32,
    DstX: u32,
    DstY: u32,
    SrcRect: RECT,
};
// --------------------------------------------------------
// Type: D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS = extern struct {
    pSrcResource: ID3D12Resource,
    pDstResource: ID3D12Resource,
    SubresourceCount: u32,
    pSubresourceParameters: ?*D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS,
    Format: DXGI_FORMAT,
    ResolveMode: D3D12_RESOLVE_MODE,
    PreserveResolveSource: BOOL,
};
// --------------------------------------------------------
// Type: D3D12_RENDER_PASS_ENDING_ACCESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RENDER_PASS_ENDING_ACCESS = extern struct {
    Type: D3D12_RENDER_PASS_ENDING_ACCESS_TYPE,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: D3D12_RENDER_PASS_RENDER_TARGET_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RENDER_PASS_RENDER_TARGET_DESC = extern struct {
    cpuDescriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    BeginningAccess: D3D12_RENDER_PASS_BEGINNING_ACCESS,
    EndingAccess: D3D12_RENDER_PASS_ENDING_ACCESS,
};
// --------------------------------------------------------
// Type: D3D12_RENDER_PASS_DEPTH_STENCIL_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_RENDER_PASS_DEPTH_STENCIL_DESC = extern struct {
    cpuDescriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    DepthBeginningAccess: D3D12_RENDER_PASS_BEGINNING_ACCESS,
    StencilBeginningAccess: D3D12_RENDER_PASS_BEGINNING_ACCESS,
    DepthEndingAccess: D3D12_RENDER_PASS_ENDING_ACCESS,
    StencilEndingAccess: D3D12_RENDER_PASS_ENDING_ACCESS,
};
// --------------------------------------------------------
// Type: D3D12_RENDER_PASS_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_RENDER_PASS_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: ID3D12MetaCommand
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12MetaCommand = *opaque{
    // TODO: Method 'GetRequiredParameterResourceSize'
};
// --------------------------------------------------------
// Type: D3D12_DISPATCH_RAYS_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_DISPATCH_RAYS_DESC = extern struct {
    RayGenerationShaderRecord: D3D12_GPU_VIRTUAL_ADDRESS_RANGE,
    MissShaderTable: D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE,
    HitGroupTable: D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE,
    CallableShaderTable: D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE,
    Width: u32,
    Height: u32,
    Depth: u32,
};
// --------------------------------------------------------
// Type: ID3D12GraphicsCommandList4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12GraphicsCommandList4 = *opaque{
    // TODO: Method 'BeginRenderPass'
    // TODO: Method 'EndRenderPass'
    // TODO: Method 'InitializeMetaCommand'
    // TODO: Method 'ExecuteMetaCommand'
    // TODO: Method 'BuildRaytracingAccelerationStructure'
    // TODO: Method 'EmitRaytracingAccelerationStructurePostbuildInfo'
    // TODO: Method 'CopyRaytracingAccelerationStructure'
    // TODO: Method 'SetPipelineState1'
    // TODO: Method 'DispatchRays'
};
// --------------------------------------------------------
// Type: ID3D12Tools
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12Tools = *opaque{
    // TODO: Method 'EnableShaderInstrumentation'
    // TODO: Method 'ShaderInstrumentationEnabled'
};
// --------------------------------------------------------
// Type: D3D12_SUBRESOURCE_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_SUBRESOURCE_DATA = extern struct {
    pData: ?*opaque{},
    RowPitch: ?*opaque{},
    SlicePitch: ?*opaque{},
};
// --------------------------------------------------------
// Type: D3D12_MEMCPY_DEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_MEMCPY_DEST = extern struct {
    pData: ?*opaque{},
    RowPitch: ?*opaque{},
    SlicePitch: ?*opaque{},
};
// --------------------------------------------------------
// Type: ID3D12Debug
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12Debug = *opaque{
    // TODO: Method 'EnableDebugLayer'
};
// --------------------------------------------------------
// Type: D3D12_GPU_BASED_VALIDATION_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_GPU_BASED_VALIDATION_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: ID3D12Debug1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12Debug1 = *opaque{
    // TODO: Method 'EnableDebugLayer'
    // TODO: Method 'SetEnableGPUBasedValidation'
    // TODO: Method 'SetEnableSynchronizedCommandQueueValidation'
};
// --------------------------------------------------------
// Type: ID3D12Debug2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12Debug2 = *opaque{
    // TODO: Method 'SetGPUBasedValidationFlags'
};
// --------------------------------------------------------
// Type: ID3D12Debug3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12Debug3 = *opaque{
    // TODO: Method 'SetEnableGPUBasedValidation'
    // TODO: Method 'SetEnableSynchronizedCommandQueueValidation'
    // TODO: Method 'SetGPUBasedValidationFlags'
};
// --------------------------------------------------------
// Type: D3D12_RLDO_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_RLDO_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_DEBUG_DEVICE_PARAMETER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_DEBUG_DEVICE_PARAMETER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_DEBUG_FEATURE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_DEBUG_FEATURE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS = extern struct {
    MaxMessagesPerCommandList: u32,
    DefaultShaderPatchMode: D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE,
    PipelineStateCreateFlags: D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS,
};
// --------------------------------------------------------
// Type: D3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR = extern struct {
    SlowdownFactor: f32,
};
// --------------------------------------------------------
// Type: ID3D12DebugDevice1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12DebugDevice1 = *opaque{
    // TODO: Method 'SetDebugParameter'
    // TODO: Method 'GetDebugParameter'
    // TODO: Method 'ReportLiveDeviceObjects'
};
// --------------------------------------------------------
// Type: ID3D12DebugDevice
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12DebugDevice = *opaque{
    // TODO: Method 'SetFeatureMask'
    // TODO: Method 'GetFeatureMask'
    // TODO: Method 'ReportLiveDeviceObjects'
};
// --------------------------------------------------------
// Type: ID3D12DebugDevice2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12DebugDevice2 = *opaque{
    // TODO: Method 'SetDebugParameter'
    // TODO: Method 'GetDebugParameter'
};
// --------------------------------------------------------
// Type: ID3D12DebugCommandQueue
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12DebugCommandQueue = *opaque{
    // TODO: Method 'AssertResourceState'
};
// --------------------------------------------------------
// Type: D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS = extern struct {
    ShaderPatchMode: D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE,
};
// --------------------------------------------------------
// Type: ID3D12DebugCommandList1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12DebugCommandList1 = *opaque{
    // TODO: Method 'AssertResourceState'
    // TODO: Method 'SetDebugParameter'
    // TODO: Method 'GetDebugParameter'
};
// --------------------------------------------------------
// Type: ID3D12DebugCommandList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12DebugCommandList = *opaque{
    // TODO: Method 'AssertResourceState'
    // TODO: Method 'SetFeatureMask'
    // TODO: Method 'GetFeatureMask'
};
// --------------------------------------------------------
// Type: ID3D12DebugCommandList2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12DebugCommandList2 = *opaque{
    // TODO: Method 'SetDebugParameter'
    // TODO: Method 'GetDebugParameter'
};
// --------------------------------------------------------
// Type: ID3D12SharingContract
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12SharingContract = *opaque{
    // TODO: Method 'Present'
    // TODO: Method 'SharedFenceSignal'
    // TODO: Method 'BeginCapturableWork'
    // TODO: Method 'EndCapturableWork'
};
// --------------------------------------------------------
// Type: D3D12_MESSAGE_CATEGORY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_MESSAGE_CATEGORY = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_MESSAGE_SEVERITY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_MESSAGE_SEVERITY = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_MESSAGE_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_MESSAGE_ID = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_MESSAGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_MESSAGE = extern struct {
    Category: D3D12_MESSAGE_CATEGORY,
    Severity: D3D12_MESSAGE_SEVERITY,
    ID: D3D12_MESSAGE_ID,
    pDescription: ?*i8,
    DescriptionByteLength: ?*opaque{},
};
// --------------------------------------------------------
// Type: D3D12_INFO_QUEUE_FILTER_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_INFO_QUEUE_FILTER_DESC = extern struct {
    NumCategories: u32,
    pCategoryList: ?*D3D12_MESSAGE_CATEGORY,
    NumSeverities: u32,
    pSeverityList: ?*D3D12_MESSAGE_SEVERITY,
    NumIDs: u32,
    pIDList: ?*D3D12_MESSAGE_ID,
};
// --------------------------------------------------------
// Type: D3D12_INFO_QUEUE_FILTER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_INFO_QUEUE_FILTER = extern struct {
    AllowList: D3D12_INFO_QUEUE_FILTER_DESC,
    DenyList: D3D12_INFO_QUEUE_FILTER_DESC,
};
// --------------------------------------------------------
// Type: ID3D12InfoQueue
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12InfoQueue = *opaque{
    // TODO: Method 'SetMessageCountLimit'
    // TODO: Method 'ClearStoredMessages'
    // TODO: Method 'GetMessageA'
    // TODO: Method 'GetNumMessagesAllowedByStorageFilter'
    // TODO: Method 'GetNumMessagesDeniedByStorageFilter'
    // TODO: Method 'GetNumStoredMessages'
    // TODO: Method 'GetNumStoredMessagesAllowedByRetrievalFilter'
    // TODO: Method 'GetNumMessagesDiscardedByMessageCountLimit'
    // TODO: Method 'GetMessageCountLimit'
    // TODO: Method 'AddStorageFilterEntries'
    // TODO: Method 'GetStorageFilter'
    // TODO: Method 'ClearStorageFilter'
    // TODO: Method 'PushEmptyStorageFilter'
    // TODO: Method 'PushCopyOfStorageFilter'
    // TODO: Method 'PushStorageFilter'
    // TODO: Method 'PopStorageFilter'
    // TODO: Method 'GetStorageFilterStackSize'
    // TODO: Method 'AddRetrievalFilterEntries'
    // TODO: Method 'GetRetrievalFilter'
    // TODO: Method 'ClearRetrievalFilter'
    // TODO: Method 'PushEmptyRetrievalFilter'
    // TODO: Method 'PushCopyOfRetrievalFilter'
    // TODO: Method 'PushRetrievalFilter'
    // TODO: Method 'PopRetrievalFilter'
    // TODO: Method 'GetRetrievalFilterStackSize'
    // TODO: Method 'AddMessage'
    // TODO: Method 'AddApplicationMessage'
    // TODO: Method 'SetBreakOnCategory'
    // TODO: Method 'SetBreakOnSeverity'
    // TODO: Method 'SetBreakOnID'
    // TODO: Method 'GetBreakOnCategory'
    // TODO: Method 'GetBreakOnSeverity'
    // TODO: Method 'GetBreakOnID'
    // TODO: Method 'SetMuteDebugOutput'
    // TODO: Method 'GetMuteDebugOutput'
};
// --------------------------------------------------------
// Type: PFN_D3D12_CREATE_DEVICE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_D3D12_CREATE_DEVICE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_D3D12_GET_DEBUG_INTERFACE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_D3D12_GET_DEBUG_INTERFACE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: D3D12_AXIS_SHADING_RATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_AXIS_SHADING_RATE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_SHADING_RATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_SHADING_RATE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_SHADING_RATE_COMBINER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_SHADING_RATE_COMBINER = *opaque{
};
// --------------------------------------------------------
// Type: ID3D12GraphicsCommandList5
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12GraphicsCommandList5 = *opaque{
    // TODO: Method 'RSSetShadingRate'
    // TODO: Method 'RSSetShadingRateImage'
};
// --------------------------------------------------------
// Type: D3D12_DISPATCH_MESH_ARGUMENTS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_DISPATCH_MESH_ARGUMENTS = extern struct {
    ThreadGroupCountX: u32,
    ThreadGroupCountY: u32,
    ThreadGroupCountZ: u32,
};
// --------------------------------------------------------
// Type: ID3D12GraphicsCommandList6
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12GraphicsCommandList6 = *opaque{
    // TODO: Method 'DispatchMesh'
};
// --------------------------------------------------------
// Type: PFN_D3D11ON12_CREATE_DEVICE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_D3D11ON12_CREATE_DEVICE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: D3D11_RESOURCE_FLAGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D11_RESOURCE_FLAGS = extern struct {
    BindFlags: u32,
    MiscFlags: u32,
    CPUAccessFlags: u32,
    StructureByteStride: u32,
};
// --------------------------------------------------------
// Type: ID3D11On12Device
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D11On12Device = *opaque{
    // TODO: Method 'CreateWrappedResource'
    // TODO: Method 'ReleaseWrappedResources'
    // TODO: Method 'AcquireWrappedResources'
};
// --------------------------------------------------------
// Type: ID3D11On12Device1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D11On12Device1 = *opaque{
    // TODO: Method 'GetD3D12Device'
};
// --------------------------------------------------------
// Type: ID3D11On12Device2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D11On12Device2 = *opaque{
    // TODO: Method 'UnwrapUnderlyingResource'
    // TODO: Method 'ReturnUnderlyingResource'
};
// --------------------------------------------------------
// Type: D3D12_SHADER_VERSION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D12_SHADER_VERSION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3D12_SIGNATURE_PARAMETER_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_SIGNATURE_PARAMETER_DESC = extern struct {
    SemanticName: ?*i8,
    SemanticIndex: u32,
    Register: u32,
    SystemValueType: D3D_NAME,
    ComponentType: D3D_REGISTER_COMPONENT_TYPE,
    Mask: u8,
    ReadWriteMask: u8,
    Stream: u32,
    MinPrecision: D3D_MIN_PRECISION,
};
// --------------------------------------------------------
// Type: D3D12_SHADER_BUFFER_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_SHADER_BUFFER_DESC = extern struct {
    Name: ?*i8,
    Type: D3D_CBUFFER_TYPE,
    Variables: u32,
    Size: u32,
    uFlags: u32,
};
// --------------------------------------------------------
// Type: D3D12_SHADER_VARIABLE_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_SHADER_VARIABLE_DESC = extern struct {
    Name: ?*i8,
    StartOffset: u32,
    Size: u32,
    uFlags: u32,
    DefaultValue: ?*opaque{},
    StartTexture: u32,
    TextureSize: u32,
    StartSampler: u32,
    SamplerSize: u32,
};
// --------------------------------------------------------
// Type: D3D12_SHADER_TYPE_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_SHADER_TYPE_DESC = extern struct {
    Class: D3D_SHADER_VARIABLE_CLASS,
    Type: D3D_SHADER_VARIABLE_TYPE,
    Rows: u32,
    Columns: u32,
    Elements: u32,
    Members: u32,
    Offset: u32,
    Name: ?*i8,
};
// --------------------------------------------------------
// Type: D3D12_SHADER_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_SHADER_DESC = extern struct {
    Version: u32,
    Creator: ?*i8,
    Flags: u32,
    ConstantBuffers: u32,
    BoundResources: u32,
    InputParameters: u32,
    OutputParameters: u32,
    InstructionCount: u32,
    TempRegisterCount: u32,
    TempArrayCount: u32,
    DefCount: u32,
    DclCount: u32,
    TextureNormalInstructions: u32,
    TextureLoadInstructions: u32,
    TextureCompInstructions: u32,
    TextureBiasInstructions: u32,
    TextureGradientInstructions: u32,
    FloatInstructionCount: u32,
    IntInstructionCount: u32,
    UintInstructionCount: u32,
    StaticFlowControlCount: u32,
    DynamicFlowControlCount: u32,
    MacroInstructionCount: u32,
    ArrayInstructionCount: u32,
    CutInstructionCount: u32,
    EmitInstructionCount: u32,
    GSOutputTopology: D3D_PRIMITIVE_TOPOLOGY,
    GSMaxOutputVertexCount: u32,
    InputPrimitive: D3D_PRIMITIVE,
    PatchConstantParameters: u32,
    cGSInstanceCount: u32,
    cControlPoints: u32,
    HSOutputPrimitive: D3D_TESSELLATOR_OUTPUT_PRIMITIVE,
    HSPartitioning: D3D_TESSELLATOR_PARTITIONING,
    TessellatorDomain: D3D_TESSELLATOR_DOMAIN,
    cBarrierInstructions: u32,
    cInterlockedInstructions: u32,
    cTextureStoreInstructions: u32,
};
// --------------------------------------------------------
// Type: D3D12_SHADER_INPUT_BIND_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_SHADER_INPUT_BIND_DESC = extern struct {
    Name: ?*i8,
    Type: D3D_SHADER_INPUT_TYPE,
    BindPoint: u32,
    BindCount: u32,
    uFlags: u32,
    ReturnType: D3D_RESOURCE_RETURN_TYPE,
    Dimension: D3D_SRV_DIMENSION,
    NumSamples: u32,
    Space: u32,
    uID: u32,
};
// --------------------------------------------------------
// Type: D3D12_LIBRARY_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_LIBRARY_DESC = extern struct {
    Creator: ?*i8,
    Flags: u32,
    FunctionCount: u32,
};
// --------------------------------------------------------
// Type: D3D12_FUNCTION_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_FUNCTION_DESC = extern struct {
    Version: u32,
    Creator: ?*i8,
    Flags: u32,
    ConstantBuffers: u32,
    BoundResources: u32,
    InstructionCount: u32,
    TempRegisterCount: u32,
    TempArrayCount: u32,
    DefCount: u32,
    DclCount: u32,
    TextureNormalInstructions: u32,
    TextureLoadInstructions: u32,
    TextureCompInstructions: u32,
    TextureBiasInstructions: u32,
    TextureGradientInstructions: u32,
    FloatInstructionCount: u32,
    IntInstructionCount: u32,
    UintInstructionCount: u32,
    StaticFlowControlCount: u32,
    DynamicFlowControlCount: u32,
    MacroInstructionCount: u32,
    ArrayInstructionCount: u32,
    MovInstructionCount: u32,
    MovcInstructionCount: u32,
    ConversionInstructionCount: u32,
    BitwiseInstructionCount: u32,
    MinFeatureLevel: D3D_FEATURE_LEVEL,
    RequiredFeatureFlags: u64,
    Name: ?*i8,
    FunctionParameterCount: i32,
    HasReturn: BOOL,
    Has10Level9VertexShader: BOOL,
    Has10Level9PixelShader: BOOL,
};
// --------------------------------------------------------
// Type: D3D12_PARAMETER_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D12_PARAMETER_DESC = extern struct {
    Name: ?*i8,
    SemanticName: ?*i8,
    Type: D3D_SHADER_VARIABLE_TYPE,
    Class: D3D_SHADER_VARIABLE_CLASS,
    Rows: u32,
    Columns: u32,
    InterpolationMode: D3D_INTERPOLATION_MODE,
    Flags: D3D_PARAMETER_FLAGS,
    FirstInRegister: u32,
    FirstInComponent: u32,
    FirstOutRegister: u32,
    FirstOutComponent: u32,
};
// --------------------------------------------------------
// Type: ID3D12ShaderReflectionType
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12ShaderReflectionType = *opaque{
    // TODO: Method 'GetDesc'
    // TODO: Method 'GetMemberTypeByIndex'
    // TODO: Method 'GetMemberTypeByName'
    // TODO: Method 'GetMemberTypeName'
    // TODO: Method 'IsEqual'
    // TODO: Method 'GetSubType'
    // TODO: Method 'GetBaseClass'
    // TODO: Method 'GetNumInterfaces'
    // TODO: Method 'GetInterfaceByIndex'
    // TODO: Method 'IsOfType'
    // TODO: Method 'ImplementsInterface'
};
// --------------------------------------------------------
// Type: ID3D12ShaderReflectionVariable
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12ShaderReflectionVariable = *opaque{
    // TODO: Method 'GetDesc'
    // TODO: Method 'GetType'
    // TODO: Method 'GetBuffer'
    // TODO: Method 'GetInterfaceSlot'
};
// --------------------------------------------------------
// Type: ID3D12ShaderReflectionConstantBuffer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12ShaderReflectionConstantBuffer = *opaque{
    // TODO: Method 'GetDesc'
    // TODO: Method 'GetVariableByIndex'
    // TODO: Method 'GetVariableByName'
};
// --------------------------------------------------------
// Type: ID3D12ShaderReflection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12ShaderReflection = *opaque{
    // TODO: Method 'GetDesc'
    // TODO: Method 'GetConstantBufferByIndex'
    // TODO: Method 'GetConstantBufferByName'
    // TODO: Method 'GetResourceBindingDesc'
    // TODO: Method 'GetInputParameterDesc'
    // TODO: Method 'GetOutputParameterDesc'
    // TODO: Method 'GetPatchConstantParameterDesc'
    // TODO: Method 'GetVariableByName'
    // TODO: Method 'GetResourceBindingDescByName'
    // TODO: Method 'GetMovInstructionCount'
    // TODO: Method 'GetMovcInstructionCount'
    // TODO: Method 'GetConversionInstructionCount'
    // TODO: Method 'GetBitwiseInstructionCount'
    // TODO: Method 'GetGSInputPrimitive'
    // TODO: Method 'IsSampleFrequencyShader'
    // TODO: Method 'GetNumInterfaceSlots'
    // TODO: Method 'GetMinFeatureLevel'
    // TODO: Method 'GetThreadGroupSize'
    // TODO: Method 'GetRequiresFlags'
};
// --------------------------------------------------------
// Type: ID3D12LibraryReflection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12LibraryReflection = *opaque{
    // TODO: Method 'GetDesc'
    // TODO: Method 'GetFunctionByIndex'
};
// --------------------------------------------------------
// Type: ID3D12FunctionReflection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12FunctionReflection = *opaque{
    // TODO: Method 'GetDesc'
    // TODO: Method 'GetConstantBufferByIndex'
    // TODO: Method 'GetConstantBufferByName'
    // TODO: Method 'GetResourceBindingDesc'
    // TODO: Method 'GetVariableByName'
    // TODO: Method 'GetResourceBindingDescByName'
    // TODO: Method 'GetFunctionParameter'
};
// --------------------------------------------------------
// Type: ID3D12FunctionParameterReflection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ID3D12FunctionParameterReflection = *opaque{
    // TODO: Method 'GetDesc'
};
// --------------------------------------------------------
// Type: IHolographicCameraInterop
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHolographicCameraInterop = *opaque{
    // TODO: Method 'CreateDirect3D12BackBufferResource'
    // TODO: Method 'CreateDirect3D12HardwareProtectedBackBufferResource'
    // TODO: Method 'AcquireDirect3D12BufferResource'
    // TODO: Method 'AcquireDirect3D12BufferResourceWithTimeout'
    // TODO: Method 'UnacquireDirect3D12BufferResource'
};
// --------------------------------------------------------
// Type: IHolographicCameraRenderingParametersInterop
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHolographicCameraRenderingParametersInterop = *opaque{
    // TODO: Method 'CommitDirect3D12Resource'
    // TODO: Method 'CommitDirect3D12ResourceWithDepthData'
};
// --------------------------------------------------------
// Type: IHolographicQuadLayerInterop
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHolographicQuadLayerInterop = *opaque{
    // TODO: Method 'CreateDirect3D12ContentBufferResource'
    // TODO: Method 'CreateDirect3D12HardwareProtectedContentBufferResource'
    // TODO: Method 'AcquireDirect3D12BufferResource'
    // TODO: Method 'AcquireDirect3D12BufferResourceWithTimeout'
    // TODO: Method 'UnacquireDirect3D12BufferResource'
};
// --------------------------------------------------------
// Type: IHolographicQuadLayerUpdateParametersInterop
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IHolographicQuadLayerUpdateParametersInterop = *opaque{
    // TODO: Method 'CommitDirect3D12Resource'
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "d3d12" fn D3D12SerializeRootSignature(
    pRootSignature: ?*D3D12_ROOT_SIGNATURE_DESC,
    Version: D3D_ROOT_SIGNATURE_VERSION,
    ppBlob: ?*ID3DBlob,
    ppErrorBlob: ?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "d3d12" fn D3D12CreateRootSignatureDeserializer(
    pSrcData: ?*opaque{},
    SrcDataSizeInBytes: ?*opaque{},
    pRootSignatureDeserializerInterface: ?*Guid,
    ppRootSignatureDeserializer: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "d3d12" fn D3D12SerializeVersionedRootSignature(
    pRootSignature: ?*D3D12_VERSIONED_ROOT_SIGNATURE_DESC,
    ppBlob: ?*ID3DBlob,
    ppErrorBlob: ?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "d3d12" fn D3D12CreateVersionedRootSignatureDeserializer(
    pSrcData: ?*opaque{},
    SrcDataSizeInBytes: ?*opaque{},
    pRootSignatureDeserializerInterface: ?*Guid,
    ppRootSignatureDeserializer: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "d3d12" fn D3D12CreateDevice(
    pAdapter: IUnknown,
    MinimumFeatureLevel: D3D_FEATURE_LEVEL,
    riid: ?*Guid,
    ppDevice: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "d3d12" fn D3D12GetDebugInterface(
    riid: ?*Guid,
    ppvDebug: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "d3d12" fn D3D12EnableExperimentalFeatures(
    NumFeatures: u32,
    pIIDs: ?*Guid,
    pConfigurationStructs: ?*opaque{},
    pConfigurationStructSizes: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "d3d11" fn D3D11On12CreateDevice(
    pDevice: IUnknown,
    Flags: u32,
    pFeatureLevels: ?*D3D_FEATURE_LEVEL,
    FeatureLevels: u32,
    ppCommandQueues: ?*IUnknown,
    NumQueues: u32,
    NodeMask: u32,
    ppDevice: ?*ID3D11Device,
    ppImmediateContext: ?*ID3D11DeviceContext,
    pChosenFeatureLevel: ?*D3D_FEATURE_LEVEL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    else => if (@import("builtin").is_test) struct {
    } else struct {
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const DXGI_FORMAT = @import("dxgi.zig").DXGI_FORMAT;
const BOOL = @import("systemservices.zig").BOOL;
const DXGI_SAMPLE_DESC = @import("dxgi.zig").DXGI_SAMPLE_DESC;
const D3D_FEATURE_LEVEL = @import("direct3d11.zig").D3D_FEATURE_LEVEL;
const RECT = @import("displaydevices.zig").RECT;
const IUnknown = @import("com.zig").IUnknown;
const HRESULT = @import("com.zig").HRESULT;
const D3D_NAME = @import("direct3d11.zig").D3D_NAME;
const D3D_REGISTER_COMPONENT_TYPE = @import("direct3d11.zig").D3D_REGISTER_COMPONENT_TYPE;
const D3D_MIN_PRECISION = @import("direct3d11.zig").D3D_MIN_PRECISION;
const D3D_CBUFFER_TYPE = @import("direct3d11.zig").D3D_CBUFFER_TYPE;
const D3D_SHADER_VARIABLE_CLASS = @import("direct3d11.zig").D3D_SHADER_VARIABLE_CLASS;
const D3D_SHADER_VARIABLE_TYPE = @import("direct3d11.zig").D3D_SHADER_VARIABLE_TYPE;
const D3D_PRIMITIVE_TOPOLOGY = @import("direct3d11.zig").D3D_PRIMITIVE_TOPOLOGY;
const D3D_PRIMITIVE = @import("direct3d11.zig").D3D_PRIMITIVE;
const D3D_TESSELLATOR_OUTPUT_PRIMITIVE = @import("direct3d11.zig").D3D_TESSELLATOR_OUTPUT_PRIMITIVE;
const D3D_TESSELLATOR_PARTITIONING = @import("direct3d11.zig").D3D_TESSELLATOR_PARTITIONING;
const D3D_TESSELLATOR_DOMAIN = @import("direct3d11.zig").D3D_TESSELLATOR_DOMAIN;
const D3D_SHADER_INPUT_TYPE = @import("direct3d11.zig").D3D_SHADER_INPUT_TYPE;
const D3D_RESOURCE_RETURN_TYPE = @import("direct3d11.zig").D3D_RESOURCE_RETURN_TYPE;
const D3D_SRV_DIMENSION = @import("direct3d11.zig").D3D_SRV_DIMENSION;
const D3D_INTERPOLATION_MODE = @import("direct3d11.zig").D3D_INTERPOLATION_MODE;
const D3D_PARAMETER_FLAGS = @import("direct3d11.zig").D3D_PARAMETER_FLAGS;
const ID3DBlob = @import("direct3d11.zig").ID3DBlob;
const ID3D11Device = @import("direct3d11.zig").ID3D11Device;
const ID3D11DeviceContext = @import("direct3d11.zig").ID3D11DeviceContext;

test "" {
    const constant_export_count = 432;
    const type_export_count = 444;
    const func_count = 8;
    const unicode_alias_count = 0;
    const type_import_count = 27;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
