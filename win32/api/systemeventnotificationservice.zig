//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: QOCINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QOCINFO = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwInSpeed: u32,
    dwOutSpeed: u32,
};
// --------------------------------------------------------
// Type: SENS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SENS = opaque {
};
// --------------------------------------------------------
// Type: SENS_QOCINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SENS_QOCINFO = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwOutSpeed: u32,
    dwInSpeed: u32,
};
// --------------------------------------------------------
// Type: ISensNetwork
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISensNetwork = *opaque{
    // TODO: Method 'ConnectionMade'
    // TODO: Method 'ConnectionMadeNoQOCInfo'
    // TODO: Method 'ConnectionLost'
    // TODO: Method 'DestinationReachable'
    // TODO: Method 'DestinationReachableNoQOCInfo'
};
// --------------------------------------------------------
// Type: ISensOnNow
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISensOnNow = *opaque{
    // TODO: Method 'OnACPower'
    // TODO: Method 'OnBatteryPower'
    // TODO: Method 'BatteryLow'
};
// --------------------------------------------------------
// Type: ISensLogon
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISensLogon = *opaque{
    // TODO: Method 'Logon'
    // TODO: Method 'Logoff'
    // TODO: Method 'StartShell'
    // TODO: Method 'DisplayLock'
    // TODO: Method 'DisplayUnlock'
    // TODO: Method 'StartScreenSaver'
    // TODO: Method 'StopScreenSaver'
};
// --------------------------------------------------------
// Type: ISensLogon2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISensLogon2 = *opaque{
    // TODO: Method 'Logon'
    // TODO: Method 'Logoff'
    // TODO: Method 'SessionDisconnect'
    // TODO: Method 'SessionReconnect'
    // TODO: Method 'PostShell'
};

//
// functions
//

// set_last_errror=True (can and should we use this?)
pub extern "SensApi" fn IsDestinationReachableA(
    lpszDestination: ?*i8,
    lpQOCInfo: ?*QOCINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SensApi" fn IsDestinationReachableW(
    lpszDestination: ?*u16,
    lpQOCInfo: ?*QOCINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SensApi" fn IsNetworkAlive(
    lpdwFlags: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const IsDestinationReachable = IsDestinationReachableA;
    },
    .wide => struct {
        pub const IsDestinationReachable = IsDestinationReachableW;
    },
    else => if (@import("builtin").is_test) struct {
        pub const IsDestinationReachable = *opaque{};
    } else struct {
        pub const IsDestinationReachable = @compileError("'IsDestinationReachable' requires that UNICODE be set to true or false in the root module");
    },
};

//
// type imports
//
const BOOL = @import("systemservices.zig").BOOL;

test "" {
    const constant_export_count = 0;
    const type_export_count = 7;
    const func_count = 3;
    const unicode_alias_count = 1;
    const type_import_count = 1;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
