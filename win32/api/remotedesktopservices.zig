//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: WTSSESSION_NOTIFICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTSSESSION_NOTIFICATION = extern struct {
    cbSize: u32,
    dwSessionId: u32,
};
// --------------------------------------------------------
// Type: HwtsVirtualChannelHandle
// TypeLayoutAttr: sequential
// RAIIFree 'WTSVirtualChannelClose' (TODO: can we use this information?)
pub const HwtsVirtualChannelHandle = ?*opaque{};
// --------------------------------------------------------
// Type: TSUserExInterfaces
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const TSUserExInterfaces = opaque {
};
// --------------------------------------------------------
// Type: ADsTSUserEx
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ADsTSUserEx = opaque {
};
// --------------------------------------------------------
// Type: IADsTSUserEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsTSUserEx = *opaque{
    // TODO: Method 'get_TerminalServicesProfilePath'
    // TODO: Method 'put_TerminalServicesProfilePath'
    // TODO: Method 'get_TerminalServicesHomeDirectory'
    // TODO: Method 'put_TerminalServicesHomeDirectory'
    // TODO: Method 'get_TerminalServicesHomeDrive'
    // TODO: Method 'put_TerminalServicesHomeDrive'
    // TODO: Method 'get_AllowLogon'
    // TODO: Method 'put_AllowLogon'
    // TODO: Method 'get_EnableRemoteControl'
    // TODO: Method 'put_EnableRemoteControl'
    // TODO: Method 'get_MaxDisconnectionTime'
    // TODO: Method 'put_MaxDisconnectionTime'
    // TODO: Method 'get_MaxConnectionTime'
    // TODO: Method 'put_MaxConnectionTime'
    // TODO: Method 'get_MaxIdleTime'
    // TODO: Method 'put_MaxIdleTime'
    // TODO: Method 'get_ReconnectionAction'
    // TODO: Method 'put_ReconnectionAction'
    // TODO: Method 'get_BrokenConnectionAction'
    // TODO: Method 'put_BrokenConnectionAction'
    // TODO: Method 'get_ConnectClientDrivesAtLogon'
    // TODO: Method 'put_ConnectClientDrivesAtLogon'
    // TODO: Method 'get_ConnectClientPrintersAtLogon'
    // TODO: Method 'put_ConnectClientPrintersAtLogon'
    // TODO: Method 'get_DefaultToMainPrinter'
    // TODO: Method 'put_DefaultToMainPrinter'
    // TODO: Method 'get_TerminalServicesWorkDirectory'
    // TODO: Method 'put_TerminalServicesWorkDirectory'
    // TODO: Method 'get_TerminalServicesInitialProgram'
    // TODO: Method 'put_TerminalServicesInitialProgram'
};
// --------------------------------------------------------
// Type: AAAuthSchemes
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AAAuthSchemes = *opaque{
};
// --------------------------------------------------------
// Type: AAAccountingDataType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AAAccountingDataType = *opaque{
};
// --------------------------------------------------------
// Type: AAAccountingData
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AAAccountingData = extern struct {
    userName: BSTR,
    clientName: BSTR,
    authType: AAAuthSchemes,
    resourceName: BSTR,
    portNumber: i32,
    protocolName: BSTR,
    numberOfBytesReceived: i32,
    numberOfBytesTransfered: i32,
    reasonForDisconnect: BSTR,
    mainSessionId: Guid,
    subSessionId: i32,
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_tsgpolicyengine_0000_0000_0004
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_tsgpolicyengine_0000_0000_0004 = *opaque{
};
// --------------------------------------------------------
// Type: PolicyAttributeType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PolicyAttributeType = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_tsgpolicyengine_0000_0000_0006
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_tsgpolicyengine_0000_0000_0006 = *opaque{
};
// --------------------------------------------------------
// Type: ITSGAuthorizeConnectionSink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITSGAuthorizeConnectionSink = *opaque{
    // TODO: Method 'OnConnectionAuthorized'
};
// --------------------------------------------------------
// Type: ITSGAuthorizeResourceSink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITSGAuthorizeResourceSink = *opaque{
    // TODO: Method 'OnChannelAuthorized'
};
// --------------------------------------------------------
// Type: ITSGPolicyEngine
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITSGPolicyEngine = *opaque{
    // TODO: Method 'AuthorizeConnection'
    // TODO: Method 'AuthorizeResource'
    // TODO: Method 'Refresh'
    // TODO: Method 'IsQuarantineEnabled'
};
// --------------------------------------------------------
// Type: ITSGAccountingEngine
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITSGAccountingEngine = *opaque{
    // TODO: Method 'DoAccounting'
};
// --------------------------------------------------------
// Type: ITSGAuthenticateUserSink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITSGAuthenticateUserSink = *opaque{
    // TODO: Method 'OnUserAuthenticated'
    // TODO: Method 'OnUserAuthenticationFailed'
    // TODO: Method 'ReauthenticateUser'
    // TODO: Method 'DisconnectUser'
};
// --------------------------------------------------------
// Type: ITSGAuthenticationEngine
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITSGAuthenticationEngine = *opaque{
    // TODO: Method 'AuthenticateUser'
    // TODO: Method 'CancelAuthentication'
};
// --------------------------------------------------------
// Type: WTS_CONNECTSTATE_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WTS_CONNECTSTATE_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: WTS_SERVER_INFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTS_SERVER_INFOW = extern struct {
    pServerName: ?*u16,
};
// --------------------------------------------------------
// Type: WTS_SERVER_INFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTS_SERVER_INFOA = extern struct {
    pServerName: ?*i8,
};
// --------------------------------------------------------
// Type: WTS_SESSION_INFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTS_SESSION_INFOW = extern struct {
    SessionId: u32,
    pWinStationName: ?*u16,
    State: WTS_CONNECTSTATE_CLASS,
};
// --------------------------------------------------------
// Type: WTS_SESSION_INFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTS_SESSION_INFOA = extern struct {
    SessionId: u32,
    pWinStationName: ?*i8,
    State: WTS_CONNECTSTATE_CLASS,
};
// --------------------------------------------------------
// Type: WTS_SESSION_INFO_1W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTS_SESSION_INFO_1W = extern struct {
    ExecEnvId: u32,
    State: WTS_CONNECTSTATE_CLASS,
    SessionId: u32,
    pSessionName: ?*u16,
    pHostName: ?*u16,
    pUserName: ?*u16,
    pDomainName: ?*u16,
    pFarmName: ?*u16,
};
// --------------------------------------------------------
// Type: WTS_SESSION_INFO_1A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTS_SESSION_INFO_1A = extern struct {
    ExecEnvId: u32,
    State: WTS_CONNECTSTATE_CLASS,
    SessionId: u32,
    pSessionName: ?*i8,
    pHostName: ?*i8,
    pUserName: ?*i8,
    pDomainName: ?*i8,
    pFarmName: ?*i8,
};
// --------------------------------------------------------
// Type: WTS_PROCESS_INFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTS_PROCESS_INFOW = extern struct {
    SessionId: u32,
    ProcessId: u32,
    pProcessName: ?*u16,
    pUserSid: ?*opaque{},
};
// --------------------------------------------------------
// Type: WTS_PROCESS_INFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTS_PROCESS_INFOA = extern struct {
    SessionId: u32,
    ProcessId: u32,
    pProcessName: ?*i8,
    pUserSid: ?*opaque{},
};
// --------------------------------------------------------
// Type: WTS_INFO_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WTS_INFO_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: WTSCONFIGINFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTSCONFIGINFOW = extern struct {
    version: u32,
    fConnectClientDrivesAtLogon: u32,
    fConnectPrinterAtLogon: u32,
    fDisablePrinterRedirection: u32,
    fDisableDefaultMainClientPrinter: u32,
    ShadowSettings: u32,
    LogonUserName: ?[*]u16,
    LogonDomain: ?[*]u16,
    WorkDirectory: ?[*]u16,
    InitialProgram: ?[*]u16,
    ApplicationName: ?[*]u16,
};
// --------------------------------------------------------
// Type: WTSCONFIGINFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTSCONFIGINFOA = extern struct {
    version: u32,
    fConnectClientDrivesAtLogon: u32,
    fConnectPrinterAtLogon: u32,
    fDisablePrinterRedirection: u32,
    fDisableDefaultMainClientPrinter: u32,
    ShadowSettings: u32,
    LogonUserName: ?[*]i8,
    LogonDomain: ?[*]i8,
    WorkDirectory: ?[*]i8,
    InitialProgram: ?[*]i8,
    ApplicationName: ?[*]i8,
};
// --------------------------------------------------------
// Type: WTSINFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTSINFOW = extern struct {
    State: WTS_CONNECTSTATE_CLASS,
    SessionId: u32,
    IncomingBytes: u32,
    OutgoingBytes: u32,
    IncomingFrames: u32,
    OutgoingFrames: u32,
    IncomingCompressedBytes: u32,
    OutgoingCompressedBytes: u32,
    WinStationName: ?[*]u16,
    Domain: ?[*]u16,
    UserName: ?[*]u16,
    ConnectTime: LARGE_INTEGER,
    DisconnectTime: LARGE_INTEGER,
    LastInputTime: LARGE_INTEGER,
    LogonTime: LARGE_INTEGER,
    CurrentTime: LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: WTSINFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTSINFOA = extern struct {
    State: WTS_CONNECTSTATE_CLASS,
    SessionId: u32,
    IncomingBytes: u32,
    OutgoingBytes: u32,
    IncomingFrames: u32,
    OutgoingFrames: u32,
    IncomingCompressedBytes: u32,
    OutgoingCompressedBy: u32,
    WinStationName: ?[*]i8,
    Domain: ?[*]i8,
    UserName: ?[*]i8,
    ConnectTime: LARGE_INTEGER,
    DisconnectTime: LARGE_INTEGER,
    LastInputTime: LARGE_INTEGER,
    LogonTime: LARGE_INTEGER,
    CurrentTime: LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: WTSINFOEX_LEVEL1_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTSINFOEX_LEVEL1_W = extern struct {
    SessionId: u32,
    SessionState: WTS_CONNECTSTATE_CLASS,
    SessionFlags: i32,
    WinStationName: ?[*]u16,
    UserName: ?[*]u16,
    DomainName: ?[*]u16,
    LogonTime: LARGE_INTEGER,
    ConnectTime: LARGE_INTEGER,
    DisconnectTime: LARGE_INTEGER,
    LastInputTime: LARGE_INTEGER,
    CurrentTime: LARGE_INTEGER,
    IncomingBytes: u32,
    OutgoingBytes: u32,
    IncomingFrames: u32,
    OutgoingFrames: u32,
    IncomingCompressedBytes: u32,
    OutgoingCompressedBytes: u32,
};
// --------------------------------------------------------
// Type: WTSINFOEX_LEVEL1_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTSINFOEX_LEVEL1_A = extern struct {
    SessionId: u32,
    SessionState: WTS_CONNECTSTATE_CLASS,
    SessionFlags: i32,
    WinStationName: ?[*]i8,
    UserName: ?[*]i8,
    DomainName: ?[*]i8,
    LogonTime: LARGE_INTEGER,
    ConnectTime: LARGE_INTEGER,
    DisconnectTime: LARGE_INTEGER,
    LastInputTime: LARGE_INTEGER,
    CurrentTime: LARGE_INTEGER,
    IncomingBytes: u32,
    OutgoingBytes: u32,
    IncomingFrames: u32,
    OutgoingFrames: u32,
    IncomingCompressedBytes: u32,
    OutgoingCompressedBytes: u32,
};
// --------------------------------------------------------
// Type: WTSINFOEX_LEVEL_W
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const WTSINFOEX_LEVEL_W = *opaque{
};
// --------------------------------------------------------
// Type: WTSINFOEX_LEVEL_A
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const WTSINFOEX_LEVEL_A = *opaque{
};
// --------------------------------------------------------
// Type: WTSINFOEXW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTSINFOEXW = extern struct {
    Level: u32,
    Data: WTSINFOEX_LEVEL_W,
};
// --------------------------------------------------------
// Type: WTSINFOEXA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTSINFOEXA = extern struct {
    Level: u32,
    Data: WTSINFOEX_LEVEL_A,
};
// --------------------------------------------------------
// Type: WTSCLIENTW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTSCLIENTW = extern struct {
    ClientName: ?[*]u16,
    Domain: ?[*]u16,
    UserName: ?[*]u16,
    WorkDirectory: ?[*]u16,
    InitialProgram: ?[*]u16,
    EncryptionLevel: u8,
    ClientAddressFamily: u32,
    ClientAddress: ?[*]u16,
    HRes: u16,
    VRes: u16,
    ColorDepth: u16,
    ClientDirectory: ?[*]u16,
    ClientBuildNumber: u32,
    ClientHardwareId: u32,
    ClientProductId: u16,
    OutBufCountHost: u16,
    OutBufCountClient: u16,
    OutBufLength: u16,
    DeviceId: ?[*]u16,
};
// --------------------------------------------------------
// Type: WTSCLIENTA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTSCLIENTA = extern struct {
    ClientName: ?[*]i8,
    Domain: ?[*]i8,
    UserName: ?[*]i8,
    WorkDirectory: ?[*]i8,
    InitialProgram: ?[*]i8,
    EncryptionLevel: u8,
    ClientAddressFamily: u32,
    ClientAddress: ?[*]u16,
    HRes: u16,
    VRes: u16,
    ColorDepth: u16,
    ClientDirectory: ?[*]i8,
    ClientBuildNumber: u32,
    ClientHardwareId: u32,
    ClientProductId: u16,
    OutBufCountHost: u16,
    OutBufCountClient: u16,
    OutBufLength: u16,
    DeviceId: ?[*]i8,
};
// --------------------------------------------------------
// Type: _WTS_PRODUCT_INFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _WTS_PRODUCT_INFOA = extern struct {
    CompanyName: ?[*]i8,
    ProductID: ?[*]i8,
};
// --------------------------------------------------------
// Type: _WTS_PRODUCT_INFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _WTS_PRODUCT_INFOW = extern struct {
    CompanyName: ?[*]u16,
    ProductID: ?[*]u16,
};
// --------------------------------------------------------
// Type: WTS_VALIDATION_INFORMATIONA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTS_VALIDATION_INFORMATIONA = extern struct {
    ProductInfo: _WTS_PRODUCT_INFOA,
    License: ?[*]u8,
    LicenseLength: u32,
    HardwareID: ?[*]u8,
    HardwareIDLength: u32,
};
// --------------------------------------------------------
// Type: WTS_VALIDATION_INFORMATIONW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTS_VALIDATION_INFORMATIONW = extern struct {
    ProductInfo: _WTS_PRODUCT_INFOW,
    License: ?[*]u8,
    LicenseLength: u32,
    HardwareID: ?[*]u8,
    HardwareIDLength: u32,
};
// --------------------------------------------------------
// Type: WTS_CLIENT_ADDRESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTS_CLIENT_ADDRESS = extern struct {
    AddressFamily: u32,
    Address: ?[*]u8,
};
// --------------------------------------------------------
// Type: WTS_CLIENT_DISPLAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTS_CLIENT_DISPLAY = extern struct {
    HorizontalResolution: u32,
    VerticalResolution: u32,
    ColorDepth: u32,
};
// --------------------------------------------------------
// Type: WTS_CONFIG_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WTS_CONFIG_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: WTS_CONFIG_SOURCE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WTS_CONFIG_SOURCE = *opaque{
};
// --------------------------------------------------------
// Type: WTSUSERCONFIGA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTSUSERCONFIGA = extern struct {
    Source: u32,
    InheritInitialProgram: u32,
    AllowLogonTerminalServer: u32,
    TimeoutSettingsConnections: u32,
    TimeoutSettingsDisconnections: u32,
    TimeoutSettingsIdle: u32,
    DeviceClientDrives: u32,
    DeviceClientPrinters: u32,
    ClientDefaultPrinter: u32,
    BrokenTimeoutSettings: u32,
    ReconnectSettings: u32,
    ShadowingSettings: u32,
    TerminalServerRemoteHomeDir: u32,
    InitialProgram: ?[*]i8,
    WorkDirectory: ?[*]i8,
    TerminalServerProfilePath: ?[*]i8,
    TerminalServerHomeDir: ?[*]i8,
    TerminalServerHomeDirDrive: ?[*]i8,
};
// --------------------------------------------------------
// Type: WTSUSERCONFIGW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTSUSERCONFIGW = extern struct {
    Source: u32,
    InheritInitialProgram: u32,
    AllowLogonTerminalServer: u32,
    TimeoutSettingsConnections: u32,
    TimeoutSettingsDisconnections: u32,
    TimeoutSettingsIdle: u32,
    DeviceClientDrives: u32,
    DeviceClientPrinters: u32,
    ClientDefaultPrinter: u32,
    BrokenTimeoutSettings: u32,
    ReconnectSettings: u32,
    ShadowingSettings: u32,
    TerminalServerRemoteHomeDir: u32,
    InitialProgram: ?[*]u16,
    WorkDirectory: ?[*]u16,
    TerminalServerProfilePath: ?[*]u16,
    TerminalServerHomeDir: ?[*]u16,
    TerminalServerHomeDirDrive: ?[*]u16,
};
// --------------------------------------------------------
// Type: WTS_VIRTUAL_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WTS_VIRTUAL_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: WTS_SESSION_ADDRESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTS_SESSION_ADDRESS = extern struct {
    AddressFamily: u32,
    Address: ?[*]u8,
};
// --------------------------------------------------------
// Type: WTS_PROCESS_INFO_EXW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTS_PROCESS_INFO_EXW = extern struct {
    SessionId: u32,
    ProcessId: u32,
    pProcessName: ?*u16,
    pUserSid: ?*opaque{},
    NumberOfThreads: u32,
    HandleCount: u32,
    PagefileUsage: u32,
    PeakPagefileUsage: u32,
    WorkingSetSize: u32,
    PeakWorkingSetSize: u32,
    UserTime: LARGE_INTEGER,
    KernelTime: LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: WTS_PROCESS_INFO_EXA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTS_PROCESS_INFO_EXA = extern struct {
    SessionId: u32,
    ProcessId: u32,
    pProcessName: ?*i8,
    pUserSid: ?*opaque{},
    NumberOfThreads: u32,
    HandleCount: u32,
    PagefileUsage: u32,
    PeakPagefileUsage: u32,
    WorkingSetSize: u32,
    PeakWorkingSetSize: u32,
    UserTime: LARGE_INTEGER,
    KernelTime: LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: WTS_TYPE_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WTS_TYPE_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: WTSLISTENERCONFIGW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTSLISTENERCONFIGW = extern struct {
    version: u32,
    fEnableListener: u32,
    MaxConnectionCount: u32,
    fPromptForPassword: u32,
    fInheritColorDepth: u32,
    ColorDepth: u32,
    fInheritBrokenTimeoutSettings: u32,
    BrokenTimeoutSettings: u32,
    fDisablePrinterRedirection: u32,
    fDisableDriveRedirection: u32,
    fDisableComPortRedirection: u32,
    fDisableLPTPortRedirection: u32,
    fDisableClipboardRedirection: u32,
    fDisableAudioRedirection: u32,
    fDisablePNPRedirection: u32,
    fDisableDefaultMainClientPrinter: u32,
    LanAdapter: u32,
    PortNumber: u32,
    fInheritShadowSettings: u32,
    ShadowSettings: u32,
    TimeoutSettingsConnection: u32,
    TimeoutSettingsDisconnection: u32,
    TimeoutSettingsIdle: u32,
    SecurityLayer: u32,
    MinEncryptionLevel: u32,
    UserAuthentication: u32,
    Comment: ?[*]u16,
    LogonUserName: ?[*]u16,
    LogonDomain: ?[*]u16,
    WorkDirectory: ?[*]u16,
    InitialProgram: ?[*]u16,
};
// --------------------------------------------------------
// Type: WTSLISTENERCONFIGA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTSLISTENERCONFIGA = extern struct {
    version: u32,
    fEnableListener: u32,
    MaxConnectionCount: u32,
    fPromptForPassword: u32,
    fInheritColorDepth: u32,
    ColorDepth: u32,
    fInheritBrokenTimeoutSettings: u32,
    BrokenTimeoutSettings: u32,
    fDisablePrinterRedirection: u32,
    fDisableDriveRedirection: u32,
    fDisableComPortRedirection: u32,
    fDisableLPTPortRedirection: u32,
    fDisableClipboardRedirection: u32,
    fDisableAudioRedirection: u32,
    fDisablePNPRedirection: u32,
    fDisableDefaultMainClientPrinter: u32,
    LanAdapter: u32,
    PortNumber: u32,
    fInheritShadowSettings: u32,
    ShadowSettings: u32,
    TimeoutSettingsConnection: u32,
    TimeoutSettingsDisconnection: u32,
    TimeoutSettingsIdle: u32,
    SecurityLayer: u32,
    MinEncryptionLevel: u32,
    UserAuthentication: u32,
    Comment: ?[*]i8,
    LogonUserName: ?[*]i8,
    LogonDomain: ?[*]i8,
    WorkDirectory: ?[*]i8,
    InitialProgram: ?[*]i8,
};
// --------------------------------------------------------
// Type: WTSSBX_MACHINE_DRAIN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WTSSBX_MACHINE_DRAIN = *opaque{
};
// --------------------------------------------------------
// Type: WTSSBX_MACHINE_SESSION_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WTSSBX_MACHINE_SESSION_MODE = *opaque{
};
// --------------------------------------------------------
// Type: WTSSBX_ADDRESS_FAMILY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WTSSBX_ADDRESS_FAMILY = *opaque{
};
// --------------------------------------------------------
// Type: WTSSBX_IP_ADDRESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTSSBX_IP_ADDRESS = extern struct {
    AddressFamily: WTSSBX_ADDRESS_FAMILY,
    Address: ?[*]u8,
    PortNumber: u16,
    dwScope: u32,
};
// --------------------------------------------------------
// Type: WTSSBX_MACHINE_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WTSSBX_MACHINE_STATE = *opaque{
};
// --------------------------------------------------------
// Type: WTSSBX_MACHINE_CONNECT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTSSBX_MACHINE_CONNECT_INFO = extern struct {
    wczMachineFQDN: ?[*]u16,
    wczMachineNetBiosName: ?[*]u16,
    dwNumOfIPAddr: u32,
    IPaddr: ?[*]WTSSBX_IP_ADDRESS,
};
// --------------------------------------------------------
// Type: WTSSBX_MACHINE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTSSBX_MACHINE_INFO = extern struct {
    ClientConnectInfo: WTSSBX_MACHINE_CONNECT_INFO,
    wczFarmName: ?[*]u16,
    InternalIPAddress: WTSSBX_IP_ADDRESS,
    dwMaxSessionsLimit: u32,
    ServerWeight: u32,
    SingleSessionMode: WTSSBX_MACHINE_SESSION_MODE,
    InDrain: WTSSBX_MACHINE_DRAIN,
    MachineState: WTSSBX_MACHINE_STATE,
};
// --------------------------------------------------------
// Type: WTSSBX_SESSION_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WTSSBX_SESSION_STATE = *opaque{
};
// --------------------------------------------------------
// Type: WTSSBX_SESSION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTSSBX_SESSION_INFO = extern struct {
    wszUserName: ?[*]u16,
    wszDomainName: ?[*]u16,
    ApplicationType: ?[*]u16,
    dwSessionId: u32,
    CreateTime: FILETIME,
    DisconnectTime: FILETIME,
    SessionState: WTSSBX_SESSION_STATE,
};
// --------------------------------------------------------
// Type: WTSSBX_NOTIFICATION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WTSSBX_NOTIFICATION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IWTSSBPlugin
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWTSSBPlugin = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'WTSSBX_MachineChangeNotification'
    // TODO: Method 'WTSSBX_SessionChangeNotification'
    // TODO: Method 'WTSSBX_GetMostSuitableServer'
    // TODO: Method 'Terminated'
    // TODO: Method 'WTSSBX_GetUserExternalSession'
};
// --------------------------------------------------------
// Type: CHANNEL_DEF
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const CHANNEL_DEF = *opaque{
};
// --------------------------------------------------------
// Type: CHANNEL_PDU_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CHANNEL_PDU_HEADER = extern struct {
    length: u32,
    flags: u32,
};
// --------------------------------------------------------
// Type: CHANNEL_INIT_EVENT_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CHANNEL_INIT_EVENT_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PCHANNEL_INIT_EVENT_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PCHANNEL_INIT_EVENT_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CHANNEL_OPEN_EVENT_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CHANNEL_OPEN_EVENT_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PCHANNEL_OPEN_EVENT_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PCHANNEL_OPEN_EVENT_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VIRTUALCHANNELINIT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VIRTUALCHANNELINIT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PVIRTUALCHANNELINIT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PVIRTUALCHANNELINIT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VIRTUALCHANNELOPEN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VIRTUALCHANNELOPEN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PVIRTUALCHANNELOPEN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PVIRTUALCHANNELOPEN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VIRTUALCHANNELCLOSE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VIRTUALCHANNELCLOSE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PVIRTUALCHANNELCLOSE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PVIRTUALCHANNELCLOSE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VIRTUALCHANNELWRITE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VIRTUALCHANNELWRITE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PVIRTUALCHANNELWRITE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PVIRTUALCHANNELWRITE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CHANNEL_ENTRY_POINTS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CHANNEL_ENTRY_POINTS = extern struct {
    cbSize: u32,
    protocolVersion: u32,
    pVirtualChannelInit: PVIRTUALCHANNELINIT,
    pVirtualChannelOpen: PVIRTUALCHANNELOPEN,
    pVirtualChannelClose: PVIRTUALCHANNELCLOSE,
    pVirtualChannelWrite: PVIRTUALCHANNELWRITE,
};
// --------------------------------------------------------
// Type: VIRTUALCHANNELENTRY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VIRTUALCHANNELENTRY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PVIRTUALCHANNELENTRY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PVIRTUALCHANNELENTRY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: Workspace
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const Workspace = opaque {
};
// --------------------------------------------------------
// Type: IWorkspaceClientExt
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWorkspaceClientExt = *opaque{
    // TODO: Method 'GetResourceId'
    // TODO: Method 'GetResourceDisplayName'
    // TODO: Method 'IssueDisconnect'
};
// --------------------------------------------------------
// Type: IWorkspace
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWorkspace = *opaque{
    // TODO: Method 'GetWorkspaceNames'
    // TODO: Method 'StartRemoteApplication'
    // TODO: Method 'GetProcessId'
};
// --------------------------------------------------------
// Type: IWorkspace2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWorkspace2 = *opaque{
    // TODO: Method 'StartRemoteApplicationEx'
};
// --------------------------------------------------------
// Type: IWorkspace3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWorkspace3 = *opaque{
    // TODO: Method 'GetClaimsToken2'
    // TODO: Method 'SetClaimsToken'
};
// --------------------------------------------------------
// Type: IWorkspaceRegistration
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWorkspaceRegistration = *opaque{
    // TODO: Method 'AddResource'
    // TODO: Method 'RemoveResource'
};
// --------------------------------------------------------
// Type: IWorkspaceRegistration2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWorkspaceRegistration2 = *opaque{
    // TODO: Method 'AddResourceEx'
    // TODO: Method 'RemoveResourceEx'
};
// --------------------------------------------------------
// Type: IWorkspaceScriptable
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWorkspaceScriptable = *opaque{
    // TODO: Method 'DisconnectWorkspace'
    // TODO: Method 'StartWorkspace'
    // TODO: Method 'IsWorkspaceCredentialSpecified'
    // TODO: Method 'IsWorkspaceSSOEnabled'
    // TODO: Method 'ClearWorkspaceCredential'
    // TODO: Method 'OnAuthenticated'
    // TODO: Method 'DisconnectWorkspaceByFriendlyName'
};
// --------------------------------------------------------
// Type: IWorkspaceScriptable2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWorkspaceScriptable2 = *opaque{
    // TODO: Method 'StartWorkspaceEx'
    // TODO: Method 'ResourceDismissed'
};
// --------------------------------------------------------
// Type: IWorkspaceScriptable3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWorkspaceScriptable3 = *opaque{
    // TODO: Method 'StartWorkspaceEx2'
};
// --------------------------------------------------------
// Type: IWorkspaceReportMessage
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWorkspaceReportMessage = *opaque{
    // TODO: Method 'RegisterErrorLogMessage'
    // TODO: Method 'IsErrorMessageRegistered'
    // TODO: Method 'RegisterErrorEvent'
};
// --------------------------------------------------------
// Type: _ITSWkspEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const _ITSWkspEvents = *opaque{
};
// --------------------------------------------------------
// Type: TSSD_AddrV46Type
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TSSD_AddrV46Type = *opaque{
};
// --------------------------------------------------------
// Type: TSSB_NOTIFICATION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TSSB_NOTIFICATION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: TARGET_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TARGET_STATE = *opaque{
};
// --------------------------------------------------------
// Type: TARGET_CHANGE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TARGET_CHANGE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: TARGET_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TARGET_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: TARGET_PATCH_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TARGET_PATCH_STATE = *opaque{
};
// --------------------------------------------------------
// Type: CLIENT_MESSAGE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CLIENT_MESSAGE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: CONNECTION_CHANGE_NOTIFICATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CONNECTION_CHANGE_NOTIFICATION = *opaque{
};
// --------------------------------------------------------
// Type: RD_FARM_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RD_FARM_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: PLUGIN_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLUGIN_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: TSSESSION_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TSSESSION_STATE = *opaque{
};
// --------------------------------------------------------
// Type: TARGET_OWNER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TARGET_OWNER = *opaque{
};
// --------------------------------------------------------
// Type: CLIENT_DISPLAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLIENT_DISPLAY = extern struct {
    HorizontalResolution: u32,
    VerticalResolution: u32,
    ColorDepth: u32,
};
// --------------------------------------------------------
// Type: TSSD_ConnectionPoint
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TSSD_ConnectionPoint = extern struct {
    ServerAddressB: ?[*]u8,
    AddressType: TSSD_AddrV46Type,
    PortNumber: u16,
    AddressScope: u32,
};
// --------------------------------------------------------
// Type: VM_NOTIFY_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VM_NOTIFY_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: VM_NOTIFY_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VM_NOTIFY_ENTRY = extern struct {
    VmName: ?[*]u16,
    VmHost: ?[*]u16,
};
// --------------------------------------------------------
// Type: VM_PATCH_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VM_PATCH_INFO = extern struct {
    dwNumEntries: u32,
    pVmNames: ?*?*u16,
};
// --------------------------------------------------------
// Type: VM_NOTIFY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VM_NOTIFY_INFO = extern struct {
    dwNumEntries: u32,
    ppVmEntries: ?*?*VM_NOTIFY_ENTRY,
};
// --------------------------------------------------------
// Type: VM_HOST_NOTIFY_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VM_HOST_NOTIFY_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: RDV_TASK_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RDV_TASK_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: TS_SB_SORT_BY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TS_SB_SORT_BY = *opaque{
};
// --------------------------------------------------------
// Type: ITsSbPlugin
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITsSbPlugin = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'Terminate'
};
// --------------------------------------------------------
// Type: ITsSbResourcePlugin
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITsSbResourcePlugin = *opaque{
};
// --------------------------------------------------------
// Type: ITsSbServiceNotification
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITsSbServiceNotification = *opaque{
    // TODO: Method 'NotifyServiceFailure'
    // TODO: Method 'NotifyServiceSuccess'
};
// --------------------------------------------------------
// Type: ITsSbLoadBalancing
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITsSbLoadBalancing = *opaque{
    // TODO: Method 'GetMostSuitableTarget'
};
// --------------------------------------------------------
// Type: ITsSbPlacement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITsSbPlacement = *opaque{
    // TODO: Method 'QueryEnvironmentForTarget'
};
// --------------------------------------------------------
// Type: ITsSbOrchestration
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITsSbOrchestration = *opaque{
    // TODO: Method 'PrepareTargetForConnect'
};
// --------------------------------------------------------
// Type: ITsSbEnvironment
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITsSbEnvironment = *opaque{
    // TODO: Method 'get_Name'
    // TODO: Method 'get_ServerWeight'
    // TODO: Method 'get_EnvironmentPropertySet'
    // TODO: Method 'put_EnvironmentPropertySet'
};
// --------------------------------------------------------
// Type: ITsSbLoadBalanceResult
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITsSbLoadBalanceResult = *opaque{
    // TODO: Method 'get_TargetName'
};
// --------------------------------------------------------
// Type: ITsSbTarget
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITsSbTarget = *opaque{
    // TODO: Method 'get_TargetName'
    // TODO: Method 'put_TargetName'
    // TODO: Method 'get_FarmName'
    // TODO: Method 'put_FarmName'
    // TODO: Method 'get_TargetFQDN'
    // TODO: Method 'put_TargetFQDN'
    // TODO: Method 'get_TargetNetbios'
    // TODO: Method 'put_TargetNetbios'
    // TODO: Method 'get_IpAddresses'
    // TODO: Method 'put_IpAddresses'
    // TODO: Method 'get_TargetState'
    // TODO: Method 'put_TargetState'
    // TODO: Method 'get_TargetPropertySet'
    // TODO: Method 'put_TargetPropertySet'
    // TODO: Method 'get_EnvironmentName'
    // TODO: Method 'put_EnvironmentName'
    // TODO: Method 'get_NumSessions'
    // TODO: Method 'get_NumPendingConnections'
    // TODO: Method 'get_TargetLoad'
};
// --------------------------------------------------------
// Type: ITsSbSession
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITsSbSession = *opaque{
    // TODO: Method 'get_SessionId'
    // TODO: Method 'get_TargetName'
    // TODO: Method 'put_TargetName'
    // TODO: Method 'get_Username'
    // TODO: Method 'get_Domain'
    // TODO: Method 'get_State'
    // TODO: Method 'put_State'
    // TODO: Method 'get_CreateTime'
    // TODO: Method 'put_CreateTime'
    // TODO: Method 'get_DisconnectTime'
    // TODO: Method 'put_DisconnectTime'
    // TODO: Method 'get_InitialProgram'
    // TODO: Method 'put_InitialProgram'
    // TODO: Method 'get_ClientDisplay'
    // TODO: Method 'put_ClientDisplay'
    // TODO: Method 'get_ProtocolType'
    // TODO: Method 'put_ProtocolType'
};
// --------------------------------------------------------
// Type: ITsSbResourceNotification
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITsSbResourceNotification = *opaque{
    // TODO: Method 'NotifySessionChange'
    // TODO: Method 'NotifyTargetChange'
    // TODO: Method 'NotifyClientConnectionStateChange'
};
// --------------------------------------------------------
// Type: ITsSbResourceNotificationEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITsSbResourceNotificationEx = *opaque{
    // TODO: Method 'NotifySessionChangeEx'
    // TODO: Method 'NotifyTargetChangeEx'
    // TODO: Method 'NotifyClientConnectionStateChangeEx'
};
// --------------------------------------------------------
// Type: ITsSbTaskInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITsSbTaskInfo = *opaque{
    // TODO: Method 'get_TargetId'
    // TODO: Method 'get_StartTime'
    // TODO: Method 'get_EndTime'
    // TODO: Method 'get_Deadline'
    // TODO: Method 'get_Identifier'
    // TODO: Method 'get_Label'
    // TODO: Method 'get_Context'
    // TODO: Method 'get_Plugin'
    // TODO: Method 'get_Status'
};
// --------------------------------------------------------
// Type: ITsSbTaskPlugin
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITsSbTaskPlugin = *opaque{
    // TODO: Method 'InitializeTaskPlugin'
    // TODO: Method 'SetTaskQueue'
};
// --------------------------------------------------------
// Type: ITsSbPropertySet
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITsSbPropertySet = *opaque{
};
// --------------------------------------------------------
// Type: ITsSbPluginPropertySet
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITsSbPluginPropertySet = *opaque{
};
// --------------------------------------------------------
// Type: ITsSbClientConnectionPropertySet
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITsSbClientConnectionPropertySet = *opaque{
};
// --------------------------------------------------------
// Type: ITsSbTargetPropertySet
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITsSbTargetPropertySet = *opaque{
};
// --------------------------------------------------------
// Type: ITsSbEnvironmentPropertySet
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITsSbEnvironmentPropertySet = *opaque{
};
// --------------------------------------------------------
// Type: ITsSbBaseNotifySink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITsSbBaseNotifySink = *opaque{
    // TODO: Method 'OnError'
    // TODO: Method 'OnReportStatus'
};
// --------------------------------------------------------
// Type: ITsSbPluginNotifySink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITsSbPluginNotifySink = *opaque{
    // TODO: Method 'OnInitialized'
    // TODO: Method 'OnTerminated'
};
// --------------------------------------------------------
// Type: ITsSbLoadBalancingNotifySink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITsSbLoadBalancingNotifySink = *opaque{
    // TODO: Method 'OnGetMostSuitableTarget'
};
// --------------------------------------------------------
// Type: ITsSbPlacementNotifySink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITsSbPlacementNotifySink = *opaque{
    // TODO: Method 'OnQueryEnvironmentCompleted'
};
// --------------------------------------------------------
// Type: ITsSbOrchestrationNotifySink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITsSbOrchestrationNotifySink = *opaque{
    // TODO: Method 'OnReadyToConnect'
};
// --------------------------------------------------------
// Type: ITsSbTaskPluginNotifySink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITsSbTaskPluginNotifySink = *opaque{
    // TODO: Method 'OnSetTaskTime'
    // TODO: Method 'OnDeleteTaskTime'
    // TODO: Method 'OnUpdateTaskStatus'
    // TODO: Method 'OnReportTasks'
};
// --------------------------------------------------------
// Type: ITsSbClientConnection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITsSbClientConnection = *opaque{
    // TODO: Method 'get_UserName'
    // TODO: Method 'get_Domain'
    // TODO: Method 'get_InitialProgram'
    // TODO: Method 'get_LoadBalanceResult'
    // TODO: Method 'get_FarmName'
    // TODO: Method 'PutContext'
    // TODO: Method 'GetContext'
    // TODO: Method 'get_Environment'
    // TODO: Method 'get_ConnectionError'
    // TODO: Method 'get_SamUserAccount'
    // TODO: Method 'get_ClientConnectionPropertySet'
    // TODO: Method 'get_IsFirstAssignment'
    // TODO: Method 'get_RdFarmType'
    // TODO: Method 'get_UserSidString'
    // TODO: Method 'GetDisconnectedSession'
};
// --------------------------------------------------------
// Type: ITsSbProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITsSbProvider = *opaque{
    // TODO: Method 'CreateTargetObject'
    // TODO: Method 'CreateLoadBalanceResultObject'
    // TODO: Method 'CreateSessionObject'
    // TODO: Method 'CreatePluginPropertySet'
    // TODO: Method 'CreateTargetPropertySetObject'
    // TODO: Method 'CreateEnvironmentObject'
    // TODO: Method 'GetResourcePluginStore'
    // TODO: Method 'GetFilterPluginStore'
    // TODO: Method 'RegisterForNotification'
    // TODO: Method 'UnRegisterForNotification'
    // TODO: Method 'GetInstanceOfGlobalStore'
    // TODO: Method 'CreateEnvironmentPropertySetObject'
};
// --------------------------------------------------------
// Type: ITsSbResourcePluginStore
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITsSbResourcePluginStore = *opaque{
    // TODO: Method 'QueryTarget'
    // TODO: Method 'QuerySessionBySessionId'
    // TODO: Method 'AddTargetToStore'
    // TODO: Method 'AddSessionToStore'
    // TODO: Method 'AddEnvironmentToStore'
    // TODO: Method 'RemoveEnvironmentFromStore'
    // TODO: Method 'EnumerateFarms'
    // TODO: Method 'QueryEnvironment'
    // TODO: Method 'EnumerateEnvironments'
    // TODO: Method 'SaveTarget'
    // TODO: Method 'SaveEnvironment'
    // TODO: Method 'SaveSession'
    // TODO: Method 'SetTargetProperty'
    // TODO: Method 'SetEnvironmentProperty'
    // TODO: Method 'SetTargetState'
    // TODO: Method 'SetSessionState'
    // TODO: Method 'EnumerateTargets'
    // TODO: Method 'EnumerateSessions'
    // TODO: Method 'GetFarmProperty'
    // TODO: Method 'DeleteTarget'
    // TODO: Method 'SetTargetPropertyWithVersionCheck'
    // TODO: Method 'SetEnvironmentPropertyWithVersionCheck'
    // TODO: Method 'AcquireTargetLock'
    // TODO: Method 'ReleaseTargetLock'
    // TODO: Method 'TestAndSetServerState'
    // TODO: Method 'SetServerWaitingToStart'
    // TODO: Method 'GetServerState'
    // TODO: Method 'SetServerDrainMode'
};
// --------------------------------------------------------
// Type: ITsSbFilterPluginStore
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITsSbFilterPluginStore = *opaque{
    // TODO: Method 'SaveProperties'
    // TODO: Method 'EnumerateProperties'
    // TODO: Method 'DeleteProperties'
};
// --------------------------------------------------------
// Type: ITsSbGlobalStore
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITsSbGlobalStore = *opaque{
    // TODO: Method 'QueryTarget'
    // TODO: Method 'QuerySessionBySessionId'
    // TODO: Method 'EnumerateFarms'
    // TODO: Method 'EnumerateTargets'
    // TODO: Method 'EnumerateEnvironmentsByProvider'
    // TODO: Method 'EnumerateSessions'
    // TODO: Method 'GetFarmProperty'
};
// --------------------------------------------------------
// Type: ITsSbProvisioningPluginNotifySink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITsSbProvisioningPluginNotifySink = *opaque{
    // TODO: Method 'OnJobCreated'
    // TODO: Method 'OnVirtualMachineStatusChanged'
    // TODO: Method 'OnJobCompleted'
    // TODO: Method 'OnJobCancelled'
    // TODO: Method 'LockVirtualMachine'
    // TODO: Method 'OnVirtualMachineHostStatusChanged'
};
// --------------------------------------------------------
// Type: ITsSbProvisioning
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITsSbProvisioning = *opaque{
    // TODO: Method 'CreateVirtualMachines'
    // TODO: Method 'PatchVirtualMachines'
    // TODO: Method 'DeleteVirtualMachines'
    // TODO: Method 'CancelJob'
};
// --------------------------------------------------------
// Type: ITsSbGenericNotifySink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITsSbGenericNotifySink = *opaque{
    // TODO: Method 'OnCompleted'
    // TODO: Method 'GetWaitTimeout'
};
// --------------------------------------------------------
// Type: pluginResource
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const pluginResource = extern struct {
    alias: ?[*]u16,
    name: ?[*]u16,
    resourceFileContents: ?*u16,
    fileExtension: ?[*]u16,
    resourcePluginType: ?[*]u16,
    isDiscoverable: u8,
    resourceType: i32,
    pceIconSize: u32,
    iconContents: ?*u8,
    pcePluginBlobSize: u32,
    blobContents: ?*u8,
};
// --------------------------------------------------------
// Type: ItsPubPlugin
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ItsPubPlugin = *opaque{
    // TODO: Method 'GetResourceList'
    // TODO: Method 'GetResource'
    // TODO: Method 'GetCacheLastUpdateTime'
    // TODO: Method 'get_pluginName'
    // TODO: Method 'get_pluginVersion'
    // TODO: Method 'ResolveResource'
};
// --------------------------------------------------------
// Type: pluginResource2FileAssociation
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const pluginResource2FileAssociation = extern struct {
    extName: ?[*]u16,
    primaryHandler: u8,
    pceIconSize: u32,
    iconContents: ?*u8,
};
// --------------------------------------------------------
// Type: pluginResource2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const pluginResource2 = extern struct {
    resourceV1: pluginResource,
    pceFileAssocListSize: u32,
    fileAssocList: ?*pluginResource2FileAssociation,
    securityDescriptor: ?*u16,
    pceFolderListSize: u32,
    folderList: ?*?*u16,
};
// --------------------------------------------------------
// Type: TSPUB_PLUGIN_PD_RESOLUTION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TSPUB_PLUGIN_PD_RESOLUTION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: TSPUB_PLUGIN_PD_ASSIGNMENT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TSPUB_PLUGIN_PD_ASSIGNMENT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: ItsPubPlugin2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ItsPubPlugin2 = *opaque{
    // TODO: Method 'GetResource2List'
    // TODO: Method 'GetResource2'
    // TODO: Method 'ResolvePersonalDesktop'
    // TODO: Method 'DeletePersonalDesktopAssignment'
};
// --------------------------------------------------------
// Type: IWorkspaceResTypeRegistry
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWorkspaceResTypeRegistry = *opaque{
    // TODO: Method 'AddResourceType'
    // TODO: Method 'DeleteResourceType'
    // TODO: Method 'GetRegisteredFileExtensions'
    // TODO: Method 'GetResourceTypeInfo'
    // TODO: Method 'ModifyResourceType'
};
// --------------------------------------------------------
// Type: IWTSPlugin
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWTSPlugin = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'Connected'
    // TODO: Method 'Disconnected'
    // TODO: Method 'Terminated'
};
// --------------------------------------------------------
// Type: IWTSListener
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWTSListener = *opaque{
    // TODO: Method 'GetConfiguration'
};
// --------------------------------------------------------
// Type: IWTSListenerCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWTSListenerCallback = *opaque{
    // TODO: Method 'OnNewChannelConnection'
};
// --------------------------------------------------------
// Type: IWTSVirtualChannelCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWTSVirtualChannelCallback = *opaque{
    // TODO: Method 'OnDataReceived'
    // TODO: Method 'OnClose'
};
// --------------------------------------------------------
// Type: IWTSVirtualChannelManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWTSVirtualChannelManager = *opaque{
    // TODO: Method 'CreateListener'
};
// --------------------------------------------------------
// Type: IWTSVirtualChannel
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWTSVirtualChannel = *opaque{
    // TODO: Method 'Write'
    // TODO: Method 'Close'
};
// --------------------------------------------------------
// Type: IWTSPluginServiceProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWTSPluginServiceProvider = *opaque{
    // TODO: Method 'GetService'
};
// --------------------------------------------------------
// Type: BITMAP_RENDERER_STATISTICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BITMAP_RENDERER_STATISTICS = extern struct {
    dwFramesDelivered: u32,
    dwFramesDropped: u32,
};
// --------------------------------------------------------
// Type: IWTSBitmapRenderer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWTSBitmapRenderer = *opaque{
    // TODO: Method 'Render'
    // TODO: Method 'GetRendererStatistics'
    // TODO: Method 'RemoveMapping'
};
// --------------------------------------------------------
// Type: IWTSBitmapRendererCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWTSBitmapRendererCallback = *opaque{
    // TODO: Method 'OnTargetSizeChanged'
};
// --------------------------------------------------------
// Type: IWTSBitmapRenderService
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWTSBitmapRenderService = *opaque{
    // TODO: Method 'GetMappedRenderer'
};
// --------------------------------------------------------
// Type: IWRdsGraphicsChannelEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWRdsGraphicsChannelEvents = *opaque{
    // TODO: Method 'OnDataReceived'
    // TODO: Method 'OnClose'
    // TODO: Method 'OnChannelOpened'
    // TODO: Method 'OnDataSent'
    // TODO: Method 'OnMetricsUpdate'
};
// --------------------------------------------------------
// Type: IWRdsGraphicsChannel
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWRdsGraphicsChannel = *opaque{
    // TODO: Method 'Write'
    // TODO: Method 'Close'
    // TODO: Method 'Open'
};
// --------------------------------------------------------
// Type: WRdsGraphicsChannelType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WRdsGraphicsChannelType = *opaque{
};
// --------------------------------------------------------
// Type: IWRdsGraphicsChannelManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWRdsGraphicsChannelManager = *opaque{
    // TODO: Method 'CreateChannel'
};
// --------------------------------------------------------
// Type: RFX_GFX_RECT
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const RFX_GFX_RECT = *opaque{
};
// --------------------------------------------------------
// Type: RFX_GFX_MSG_HEADER
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const RFX_GFX_MSG_HEADER = *opaque{
};
// --------------------------------------------------------
// Type: RFX_GFX_MONITOR_INFO
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const RFX_GFX_MONITOR_INFO = *opaque{
};
// --------------------------------------------------------
// Type: RFX_GFX_MSG_CLIENT_DESKTOP_INFO_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RFX_GFX_MSG_CLIENT_DESKTOP_INFO_REQUEST = extern struct {
    channelHdr: RFX_GFX_MSG_HEADER,
};
// --------------------------------------------------------
// Type: RFX_GFX_MSG_CLIENT_DESKTOP_INFO_RESPONSE
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const RFX_GFX_MSG_CLIENT_DESKTOP_INFO_RESPONSE = *opaque{
};
// --------------------------------------------------------
// Type: RFX_GFX_MSG_DESKTOP_CONFIG_CHANGE_NOTIFY
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const RFX_GFX_MSG_DESKTOP_CONFIG_CHANGE_NOTIFY = *opaque{
};
// --------------------------------------------------------
// Type: RFX_GFX_MSG_DESKTOP_CONFIG_CHANGE_CONFIRM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RFX_GFX_MSG_DESKTOP_CONFIG_CHANGE_CONFIRM = extern struct {
    channelHdr: RFX_GFX_MSG_HEADER,
};
// --------------------------------------------------------
// Type: RFX_GFX_MSG_DESKTOP_INPUT_RESET
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const RFX_GFX_MSG_DESKTOP_INPUT_RESET = *opaque{
};
// --------------------------------------------------------
// Type: RFX_GFX_MSG_DISCONNECT_NOTIFY
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const RFX_GFX_MSG_DISCONNECT_NOTIFY = *opaque{
};
// --------------------------------------------------------
// Type: RFX_GFX_MSG_DESKTOP_RESEND_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RFX_GFX_MSG_DESKTOP_RESEND_REQUEST = extern struct {
    channelHdr: RFX_GFX_MSG_HEADER,
    RedrawRect: RFX_GFX_RECT,
};
// --------------------------------------------------------
// Type: RFX_GFX_MSG_RDP_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RFX_GFX_MSG_RDP_DATA = extern struct {
    channelHdr: RFX_GFX_MSG_HEADER,
    rdpData: ?[*]u8,
};
// --------------------------------------------------------
// Type: WTS_SOCKADDR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTS_SOCKADDR = extern struct {
    sin_family: u16,
    u: _u_e__Union,
    // --------------------------------------------------------
    // Type: _u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _ipv6_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _ipv6_e__Struct = extern struct {
            sin6_port: u16,
            sin6_flowinfo: u32,
            sin6_addr: ?[*]u16,
            sin6_scope_id: u32,
        };
        // --------------------------------------------------------
        // Type: _ipv4_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _ipv4_e__Struct = extern struct {
            sin_port: u16,
            in_addr: u32,
            sin_zero: ?[*]u8,
        };
    };
};
// --------------------------------------------------------
// Type: WTS_SMALL_RECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTS_SMALL_RECT = extern struct {
    Left: i16,
    Top: i16,
    Right: i16,
    Bottom: i16,
};
// --------------------------------------------------------
// Type: WTS_RCM_SERVICE_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WTS_RCM_SERVICE_STATE = *opaque{
};
// --------------------------------------------------------
// Type: WTS_RCM_DRAIN_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WTS_RCM_DRAIN_STATE = *opaque{
};
// --------------------------------------------------------
// Type: WTS_SERVICE_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTS_SERVICE_STATE = extern struct {
    RcmServiceState: WTS_RCM_SERVICE_STATE,
    RcmDrainState: WTS_RCM_DRAIN_STATE,
};
// --------------------------------------------------------
// Type: WTS_SESSION_ID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTS_SESSION_ID = extern struct {
    SessionUniqueGuid: Guid,
    SessionId: u32,
};
// --------------------------------------------------------
// Type: WTS_USER_CREDENTIAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTS_USER_CREDENTIAL = extern struct {
    UserName: ?[*]u16,
    Password: ?[*]u16,
    Domain: ?[*]u16,
};
// --------------------------------------------------------
// Type: WTS_SYSTEMTIME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTS_SYSTEMTIME = extern struct {
    wYear: u16,
    wMonth: u16,
    wDayOfWeek: u16,
    wDay: u16,
    wHour: u16,
    wMinute: u16,
    wSecond: u16,
    wMilliseconds: u16,
};
// --------------------------------------------------------
// Type: WTS_TIME_ZONE_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTS_TIME_ZONE_INFORMATION = extern struct {
    Bias: i32,
    StandardName: ?[*]u16,
    StandardDate: WTS_SYSTEMTIME,
    StandardBias: i32,
    DaylightName: ?[*]u16,
    DaylightDate: WTS_SYSTEMTIME,
    DaylightBias: i32,
};
// --------------------------------------------------------
// Type: WRDS_DYNAMIC_TIME_ZONE_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WRDS_DYNAMIC_TIME_ZONE_INFORMATION = extern struct {
    Bias: i32,
    StandardName: ?[*]u16,
    StandardDate: WTS_SYSTEMTIME,
    StandardBias: i32,
    DaylightName: ?[*]u16,
    DaylightDate: WTS_SYSTEMTIME,
    DaylightBias: i32,
    TimeZoneKeyName: ?[*]u16,
    DynamicDaylightTimeDisabled: u16,
};
// --------------------------------------------------------
// Type: WTS_CLIENT_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTS_CLIENT_DATA = extern struct {
    fDisableCtrlAltDel: u8,
    fDoubleClickDetect: u8,
    fEnableWindowsKey: u8,
    fHideTitleBar: u8,
    fInheritAutoLogon: BOOL,
    fPromptForPassword: u8,
    fUsingSavedCreds: u8,
    Domain: ?[*]u16,
    UserName: ?[*]u16,
    Password: ?[*]u16,
    fPasswordIsScPin: u8,
    fInheritInitialProgram: BOOL,
    WorkDirectory: ?[*]u16,
    InitialProgram: ?[*]u16,
    fMaximizeShell: u8,
    EncryptionLevel: u8,
    PerformanceFlags: u32,
    ProtocolName: ?[*]u16,
    ProtocolType: u16,
    fInheritColorDepth: BOOL,
    HRes: u16,
    VRes: u16,
    ColorDepth: u16,
    DisplayDriverName: ?[*]u16,
    DisplayDeviceName: ?[*]u16,
    fMouse: u8,
    KeyboardLayout: u32,
    KeyboardType: u32,
    KeyboardSubType: u32,
    KeyboardFunctionKey: u32,
    imeFileName: ?[*]u16,
    ActiveInputLocale: u32,
    fNoAudioPlayback: u8,
    fRemoteConsoleAudio: u8,
    AudioDriverName: ?[*]u16,
    ClientTimeZone: WTS_TIME_ZONE_INFORMATION,
    ClientName: ?[*]u16,
    SerialNumber: u32,
    ClientAddressFamily: u32,
    ClientAddress: ?[*]u16,
    ClientSockAddress: WTS_SOCKADDR,
    ClientDirectory: ?[*]u16,
    ClientBuildNumber: u32,
    ClientProductId: u16,
    OutBufCountHost: u16,
    OutBufCountClient: u16,
    OutBufLength: u16,
    ClientSessionId: u32,
    ClientDigProductId: ?[*]u16,
    fDisableCpm: u8,
    fDisableCdm: u8,
    fDisableCcm: u8,
    fDisableLPT: u8,
    fDisableClip: u8,
    fDisablePNP: u8,
};
// --------------------------------------------------------
// Type: WTS_USER_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTS_USER_DATA = extern struct {
    WorkDirectory: ?[*]u16,
    InitialProgram: ?[*]u16,
    UserTimeZone: WTS_TIME_ZONE_INFORMATION,
};
// --------------------------------------------------------
// Type: WTS_POLICY_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTS_POLICY_DATA = extern struct {
    fDisableEncryption: u8,
    fDisableAutoReconnect: u8,
    ColorDepth: u32,
    MinEncryptionLevel: u8,
    fDisableCpm: u8,
    fDisableCdm: u8,
    fDisableCcm: u8,
    fDisableLPT: u8,
    fDisableClip: u8,
    fDisablePNPRedir: u8,
};
// --------------------------------------------------------
// Type: WTS_PROTOCOL_CACHE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTS_PROTOCOL_CACHE = extern struct {
    CacheReads: u32,
    CacheHits: u32,
};
// --------------------------------------------------------
// Type: WTS_CACHE_STATS_UN
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const WTS_CACHE_STATS_UN = *opaque{
};
// --------------------------------------------------------
// Type: WTS_CACHE_STATS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTS_CACHE_STATS = extern struct {
    Specific: u32,
    Data: WTS_CACHE_STATS_UN,
    ProtocolType: u16,
    Length: u16,
};
// --------------------------------------------------------
// Type: WTS_PROTOCOL_COUNTERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTS_PROTOCOL_COUNTERS = extern struct {
    WdBytes: u32,
    WdFrames: u32,
    WaitForOutBuf: u32,
    Frames: u32,
    Bytes: u32,
    CompressedBytes: u32,
    CompressFlushes: u32,
    Errors: u32,
    Timeouts: u32,
    AsyncFramingError: u32,
    AsyncOverrunError: u32,
    AsyncOverflowError: u32,
    AsyncParityError: u32,
    TdErrors: u32,
    ProtocolType: u16,
    Length: u16,
    Specific: u16,
    Reserved: ?[*]u32,
};
// --------------------------------------------------------
// Type: WTS_PROTOCOL_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTS_PROTOCOL_STATUS = extern struct {
    Output: WTS_PROTOCOL_COUNTERS,
    Input: WTS_PROTOCOL_COUNTERS,
    Cache: WTS_CACHE_STATS,
    AsyncSignal: u32,
    AsyncSignalMask: u32,
    Counters: ?[*]LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: WTS_DISPLAY_IOCTL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTS_DISPLAY_IOCTL = extern struct {
    pDisplayIOCtlData: ?[*]u8,
    cbDisplayIOCtlData: u32,
};
// --------------------------------------------------------
// Type: WTS_LOGON_ERROR_REDIRECTOR_RESPONSE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WTS_LOGON_ERROR_REDIRECTOR_RESPONSE = *opaque{
};
// --------------------------------------------------------
// Type: WTS_PROPERTY_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTS_PROPERTY_VALUE = extern struct {
    Type: u16,
    u: _u_e__Union,
    // --------------------------------------------------------
    // Type: _u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _bVal_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _bVal_e__Struct = extern struct {
            size: u32,
            pbVal: ?*i8,
        };
        // --------------------------------------------------------
        // Type: _strVal_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _strVal_e__Struct = extern struct {
            size: u32,
            pstrVal: ?*u16,
        };
    };
};
// --------------------------------------------------------
// Type: WTS_CERT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WTS_CERT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WTS_LICENSE_CAPABILITIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WTS_LICENSE_CAPABILITIES = extern struct {
    KeyExchangeAlg: u32,
    ProtocolVer: u32,
    fAuthenticateServer: BOOL,
    CertType: WTS_CERT_TYPE,
    cbClientName: u32,
    rgbClientName: ?[*]u8,
};
// --------------------------------------------------------
// Type: WRDS_CONNECTION_SETTING_LEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WRDS_CONNECTION_SETTING_LEVEL = *opaque{
};
// --------------------------------------------------------
// Type: WRDS_LISTENER_SETTING_LEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WRDS_LISTENER_SETTING_LEVEL = *opaque{
};
// --------------------------------------------------------
// Type: WRDS_SETTING_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WRDS_SETTING_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WRDS_SETTING_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WRDS_SETTING_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: WRDS_SETTING_LEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WRDS_SETTING_LEVEL = *opaque{
};
// --------------------------------------------------------
// Type: WRDS_LISTENER_SETTINGS_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WRDS_LISTENER_SETTINGS_1 = extern struct {
    MaxProtocolListenerConnectionCount: u32,
    SecurityDescriptorSize: u32,
    pSecurityDescriptor: ?*u8,
};
// --------------------------------------------------------
// Type: WRDS_LISTENER_SETTING
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const WRDS_LISTENER_SETTING = *opaque{
};
// --------------------------------------------------------
// Type: WRDS_LISTENER_SETTINGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WRDS_LISTENER_SETTINGS = extern struct {
    WRdsListenerSettingLevel: WRDS_LISTENER_SETTING_LEVEL,
    WRdsListenerSetting: WRDS_LISTENER_SETTING,
};
// --------------------------------------------------------
// Type: WRDS_CONNECTION_SETTINGS_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WRDS_CONNECTION_SETTINGS_1 = extern struct {
    fInheritInitialProgram: u8,
    fInheritColorDepth: u8,
    fHideTitleBar: u8,
    fInheritAutoLogon: u8,
    fMaximizeShell: u8,
    fDisablePNP: u8,
    fPasswordIsScPin: u8,
    fPromptForPassword: u8,
    fDisableCpm: u8,
    fDisableCdm: u8,
    fDisableCcm: u8,
    fDisableLPT: u8,
    fDisableClip: u8,
    fResetBroken: u8,
    fDisableEncryption: u8,
    fDisableAutoReconnect: u8,
    fDisableCtrlAltDel: u8,
    fDoubleClickDetect: u8,
    fEnableWindowsKey: u8,
    fUsingSavedCreds: u8,
    fMouse: u8,
    fNoAudioPlayback: u8,
    fRemoteConsoleAudio: u8,
    EncryptionLevel: u8,
    ColorDepth: u16,
    ProtocolType: u16,
    HRes: u16,
    VRes: u16,
    ClientProductId: u16,
    OutBufCountHost: u16,
    OutBufCountClient: u16,
    OutBufLength: u16,
    KeyboardLayout: u32,
    MaxConnectionTime: u32,
    MaxDisconnectionTime: u32,
    MaxIdleTime: u32,
    PerformanceFlags: u32,
    KeyboardType: u32,
    KeyboardSubType: u32,
    KeyboardFunctionKey: u32,
    ActiveInputLocale: u32,
    SerialNumber: u32,
    ClientAddressFamily: u32,
    ClientBuildNumber: u32,
    ClientSessionId: u32,
    WorkDirectory: ?[*]u16,
    InitialProgram: ?[*]u16,
    UserName: ?[*]u16,
    Domain: ?[*]u16,
    Password: ?[*]u16,
    ProtocolName: ?[*]u16,
    DisplayDriverName: ?[*]u16,
    DisplayDeviceName: ?[*]u16,
    imeFileName: ?[*]u16,
    AudioDriverName: ?[*]u16,
    ClientName: ?[*]u16,
    ClientAddress: ?[*]u16,
    ClientDirectory: ?[*]u16,
    ClientDigProductId: ?[*]u16,
    ClientSockAddress: WTS_SOCKADDR,
    ClientTimeZone: WTS_TIME_ZONE_INFORMATION,
    WRdsListenerSettings: WRDS_LISTENER_SETTINGS,
    EventLogActivityId: Guid,
    ContextSize: u32,
    ContextData: ?*u8,
};
// --------------------------------------------------------
// Type: WRDS_SETTINGS_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WRDS_SETTINGS_1 = extern struct {
    WRdsDisableClipStatus: WRDS_SETTING_STATUS,
    WRdsDisableClipValue: u32,
    WRdsDisableLPTStatus: WRDS_SETTING_STATUS,
    WRdsDisableLPTValue: u32,
    WRdsDisableCcmStatus: WRDS_SETTING_STATUS,
    WRdsDisableCcmValue: u32,
    WRdsDisableCdmStatus: WRDS_SETTING_STATUS,
    WRdsDisableCdmValue: u32,
    WRdsDisableCpmStatus: WRDS_SETTING_STATUS,
    WRdsDisableCpmValue: u32,
    WRdsDisablePnpStatus: WRDS_SETTING_STATUS,
    WRdsDisablePnpValue: u32,
    WRdsEncryptionLevelStatus: WRDS_SETTING_STATUS,
    WRdsEncryptionValue: u32,
    WRdsColorDepthStatus: WRDS_SETTING_STATUS,
    WRdsColorDepthValue: u32,
    WRdsDisableAutoReconnecetStatus: WRDS_SETTING_STATUS,
    WRdsDisableAutoReconnecetValue: u32,
    WRdsDisableEncryptionStatus: WRDS_SETTING_STATUS,
    WRdsDisableEncryptionValue: u32,
    WRdsResetBrokenStatus: WRDS_SETTING_STATUS,
    WRdsResetBrokenValue: u32,
    WRdsMaxIdleTimeStatus: WRDS_SETTING_STATUS,
    WRdsMaxIdleTimeValue: u32,
    WRdsMaxDisconnectTimeStatus: WRDS_SETTING_STATUS,
    WRdsMaxDisconnectTimeValue: u32,
    WRdsMaxConnectTimeStatus: WRDS_SETTING_STATUS,
    WRdsMaxConnectTimeValue: u32,
    WRdsKeepAliveStatus: WRDS_SETTING_STATUS,
    WRdsKeepAliveStartValue: u8,
    WRdsKeepAliveIntervalValue: u32,
};
// --------------------------------------------------------
// Type: WRDS_CONNECTION_SETTING
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const WRDS_CONNECTION_SETTING = *opaque{
};
// --------------------------------------------------------
// Type: WRDS_CONNECTION_SETTINGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WRDS_CONNECTION_SETTINGS = extern struct {
    WRdsConnectionSettingLevel: WRDS_CONNECTION_SETTING_LEVEL,
    WRdsConnectionSetting: WRDS_CONNECTION_SETTING,
};
// --------------------------------------------------------
// Type: WRDS_SETTING
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const WRDS_SETTING = *opaque{
};
// --------------------------------------------------------
// Type: WRDS_SETTINGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WRDS_SETTINGS = extern struct {
    WRdsSettingType: WRDS_SETTING_TYPE,
    WRdsSettingLevel: WRDS_SETTING_LEVEL,
    WRdsSetting: WRDS_SETTING,
};
// --------------------------------------------------------
// Type: IWTSProtocolManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWTSProtocolManager = *opaque{
    // TODO: Method 'CreateListener'
    // TODO: Method 'NotifyServiceStateChange'
    // TODO: Method 'NotifySessionOfServiceStart'
    // TODO: Method 'NotifySessionOfServiceStop'
    // TODO: Method 'NotifySessionStateChange'
};
// --------------------------------------------------------
// Type: IWTSProtocolListener
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWTSProtocolListener = *opaque{
    // TODO: Method 'StartListen'
    // TODO: Method 'StopListen'
};
// --------------------------------------------------------
// Type: IWTSProtocolListenerCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWTSProtocolListenerCallback = *opaque{
    // TODO: Method 'OnConnected'
};
// --------------------------------------------------------
// Type: IWTSProtocolConnection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWTSProtocolConnection = *opaque{
    // TODO: Method 'GetLogonErrorRedirector'
    // TODO: Method 'SendPolicyData'
    // TODO: Method 'AcceptConnection'
    // TODO: Method 'GetClientData'
    // TODO: Method 'GetUserCredentials'
    // TODO: Method 'GetLicenseConnection'
    // TODO: Method 'AuthenticateClientToSession'
    // TODO: Method 'NotifySessionId'
    // TODO: Method 'GetProtocolHandles'
    // TODO: Method 'ConnectNotify'
    // TODO: Method 'IsUserAllowedToLogon'
    // TODO: Method 'SessionArbitrationEnumeration'
    // TODO: Method 'LogonNotify'
    // TODO: Method 'GetUserData'
    // TODO: Method 'DisconnectNotify'
    // TODO: Method 'Close'
    // TODO: Method 'GetProtocolStatus'
    // TODO: Method 'GetLastInputTime'
    // TODO: Method 'SetErrorInfo'
    // TODO: Method 'SendBeep'
    // TODO: Method 'CreateVirtualChannel'
    // TODO: Method 'QueryProperty'
    // TODO: Method 'GetShadowConnection'
};
// --------------------------------------------------------
// Type: IWTSProtocolConnectionCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWTSProtocolConnectionCallback = *opaque{
    // TODO: Method 'OnReady'
    // TODO: Method 'BrokenConnection'
    // TODO: Method 'StopScreenUpdates'
    // TODO: Method 'RedrawWindow'
    // TODO: Method 'DisplayIOCtl'
};
// --------------------------------------------------------
// Type: IWTSProtocolShadowConnection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWTSProtocolShadowConnection = *opaque{
    // TODO: Method 'Start'
    // TODO: Method 'Stop'
    // TODO: Method 'DoTarget'
};
// --------------------------------------------------------
// Type: IWTSProtocolShadowCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWTSProtocolShadowCallback = *opaque{
    // TODO: Method 'StopShadow'
    // TODO: Method 'InvokeTargetShadow'
};
// --------------------------------------------------------
// Type: IWTSProtocolLicenseConnection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWTSProtocolLicenseConnection = *opaque{
    // TODO: Method 'RequestLicensingCapabilities'
    // TODO: Method 'SendClientLicense'
    // TODO: Method 'RequestClientLicense'
    // TODO: Method 'ProtocolComplete'
};
// --------------------------------------------------------
// Type: IWTSProtocolLogonErrorRedirector
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWTSProtocolLogonErrorRedirector = *opaque{
    // TODO: Method 'OnBeginPainting'
    // TODO: Method 'RedirectStatus'
    // TODO: Method 'RedirectMessage'
    // TODO: Method 'RedirectLogonError'
};
// --------------------------------------------------------
// Type: IWRdsRemoteFXGraphicsConnection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWRdsRemoteFXGraphicsConnection = *opaque{
    // TODO: Method 'EnableRemoteFXGraphics'
    // TODO: Method 'GetVirtualChannelTransport'
};
// --------------------------------------------------------
// Type: IWRdsProtocolSettings
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWRdsProtocolSettings = *opaque{
    // TODO: Method 'GetSettings'
    // TODO: Method 'MergeSettings'
};
// --------------------------------------------------------
// Type: IWRdsProtocolManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWRdsProtocolManager = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'CreateListener'
    // TODO: Method 'NotifyServiceStateChange'
    // TODO: Method 'NotifySessionOfServiceStart'
    // TODO: Method 'NotifySessionOfServiceStop'
    // TODO: Method 'NotifySessionStateChange'
    // TODO: Method 'NotifySettingsChange'
    // TODO: Method 'Uninitialize'
};
// --------------------------------------------------------
// Type: IWRdsProtocolListener
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWRdsProtocolListener = *opaque{
    // TODO: Method 'GetSettings'
    // TODO: Method 'StartListen'
    // TODO: Method 'StopListen'
};
// --------------------------------------------------------
// Type: IWRdsProtocolListenerCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWRdsProtocolListenerCallback = *opaque{
    // TODO: Method 'OnConnected'
};
// --------------------------------------------------------
// Type: IWRdsProtocolConnection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWRdsProtocolConnection = *opaque{
    // TODO: Method 'GetLogonErrorRedirector'
    // TODO: Method 'AcceptConnection'
    // TODO: Method 'GetClientData'
    // TODO: Method 'GetClientMonitorData'
    // TODO: Method 'GetUserCredentials'
    // TODO: Method 'GetLicenseConnection'
    // TODO: Method 'AuthenticateClientToSession'
    // TODO: Method 'NotifySessionId'
    // TODO: Method 'GetInputHandles'
    // TODO: Method 'GetVideoHandle'
    // TODO: Method 'ConnectNotify'
    // TODO: Method 'IsUserAllowedToLogon'
    // TODO: Method 'SessionArbitrationEnumeration'
    // TODO: Method 'LogonNotify'
    // TODO: Method 'PreDisconnect'
    // TODO: Method 'DisconnectNotify'
    // TODO: Method 'Close'
    // TODO: Method 'GetProtocolStatus'
    // TODO: Method 'GetLastInputTime'
    // TODO: Method 'SetErrorInfo'
    // TODO: Method 'CreateVirtualChannel'
    // TODO: Method 'QueryProperty'
    // TODO: Method 'GetShadowConnection'
    // TODO: Method 'NotifyCommandProcessCreated'
};
// --------------------------------------------------------
// Type: IWRdsProtocolConnectionCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWRdsProtocolConnectionCallback = *opaque{
    // TODO: Method 'OnReady'
    // TODO: Method 'BrokenConnection'
    // TODO: Method 'StopScreenUpdates'
    // TODO: Method 'RedrawWindow'
    // TODO: Method 'GetConnectionId'
};
// --------------------------------------------------------
// Type: IWRdsProtocolShadowConnection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWRdsProtocolShadowConnection = *opaque{
    // TODO: Method 'Start'
    // TODO: Method 'Stop'
    // TODO: Method 'DoTarget'
};
// --------------------------------------------------------
// Type: IWRdsProtocolShadowCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWRdsProtocolShadowCallback = *opaque{
    // TODO: Method 'StopShadow'
    // TODO: Method 'InvokeTargetShadow'
};
// --------------------------------------------------------
// Type: IWRdsProtocolLicenseConnection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWRdsProtocolLicenseConnection = *opaque{
    // TODO: Method 'RequestLicensingCapabilities'
    // TODO: Method 'SendClientLicense'
    // TODO: Method 'RequestClientLicense'
    // TODO: Method 'ProtocolComplete'
};
// --------------------------------------------------------
// Type: IWRdsProtocolLogonErrorRedirector
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWRdsProtocolLogonErrorRedirector = *opaque{
    // TODO: Method 'OnBeginPainting'
    // TODO: Method 'RedirectStatus'
    // TODO: Method 'RedirectMessage'
    // TODO: Method 'RedirectLogonError'
};
// --------------------------------------------------------
// Type: IWRdsWddmIddProps
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWRdsWddmIddProps = *opaque{
    // TODO: Method 'GetHardwareId'
    // TODO: Method 'OnDriverLoad'
    // TODO: Method 'OnDriverUnload'
    // TODO: Method 'EnableWddmIdd'
};
// --------------------------------------------------------
// Type: IWRdsProtocolConnectionSettings
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWRdsProtocolConnectionSettings = *opaque{
    // TODO: Method 'SetConnectionSetting'
    // TODO: Method 'GetConnectionSetting'
};
// --------------------------------------------------------
// Type: __MIDL_IRemoteDesktopClientSettings_0001
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL_IRemoteDesktopClientSettings_0001 = *opaque{
};
// --------------------------------------------------------
// Type: IRemoteDesktopClientSettings
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRemoteDesktopClientSettings = *opaque{
    // TODO: Method 'ApplySettings'
    // TODO: Method 'RetrieveSettings'
    // TODO: Method 'GetRdpProperty'
    // TODO: Method 'SetRdpProperty'
};
// --------------------------------------------------------
// Type: RemoteActionType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RemoteActionType = *opaque{
};
// --------------------------------------------------------
// Type: SnapshotEncodingType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SnapshotEncodingType = *opaque{
};
// --------------------------------------------------------
// Type: SnapshotFormatType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SnapshotFormatType = *opaque{
};
// --------------------------------------------------------
// Type: IRemoteDesktopClientActions
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRemoteDesktopClientActions = *opaque{
    // TODO: Method 'SuspendScreenUpdates'
    // TODO: Method 'ResumeScreenUpdates'
    // TODO: Method 'ExecuteRemoteAction'
    // TODO: Method 'GetSnapshot'
};
// --------------------------------------------------------
// Type: IRemoteDesktopClientTouchPointer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRemoteDesktopClientTouchPointer = *opaque{
    // TODO: Method 'put_Enabled'
    // TODO: Method 'get_Enabled'
    // TODO: Method 'put_EventsEnabled'
    // TODO: Method 'get_EventsEnabled'
    // TODO: Method 'put_PointerSpeed'
    // TODO: Method 'get_PointerSpeed'
};
// --------------------------------------------------------
// Type: __MIDL_IRemoteDesktopClient_0001
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL_IRemoteDesktopClient_0001 = *opaque{
};
// --------------------------------------------------------
// Type: IRemoteDesktopClient
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRemoteDesktopClient = *opaque{
    // TODO: Method 'Connect'
    // TODO: Method 'Disconnect'
    // TODO: Method 'Reconnect'
    // TODO: Method 'get_Settings'
    // TODO: Method 'get_Actions'
    // TODO: Method 'get_TouchPointer'
    // TODO: Method 'DeleteSavedCredentials'
    // TODO: Method 'UpdateSessionDisplaySettings'
    // TODO: Method 'attachEvent'
    // TODO: Method 'detachEvent'
};
// --------------------------------------------------------
// Type: APO_BUFFER_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const APO_BUFFER_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: APO_CONNECTION_PROPERTY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const APO_CONNECTION_PROPERTY = extern struct {
    pBuffer: ?*opaque{},
    u32ValidFrameCount: u32,
    u32BufferFlags: APO_BUFFER_FLAGS,
    u32Signature: u32,
};
// --------------------------------------------------------
// Type: AE_POSITION_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AE_POSITION_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: AE_CURRENT_POSITION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AE_CURRENT_POSITION = extern struct {
    u64DevicePosition: u64,
    u64StreamPosition: u64,
    u64PaddingFrames: u64,
    hnsQPCPosition: i64,
    f32FramesPerSecond: f32,
    Flag: AE_POSITION_FLAGS,
};
// --------------------------------------------------------
// Type: IAudioEndpoint
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAudioEndpoint = *opaque{
    // TODO: Method 'GetFrameFormat'
    // TODO: Method 'GetFramesPerPacket'
    // TODO: Method 'GetLatency'
    // TODO: Method 'SetStreamFlags'
    // TODO: Method 'SetEventHandle'
};
// --------------------------------------------------------
// Type: IAudioEndpointRT
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAudioEndpointRT = *opaque{
    // TODO: Method 'GetCurrentPadding'
    // TODO: Method 'ProcessingComplete'
    // TODO: Method 'SetPinInactive'
    // TODO: Method 'SetPinActive'
};
// --------------------------------------------------------
// Type: IAudioInputEndpointRT
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAudioInputEndpointRT = *opaque{
    // TODO: Method 'GetInputDataPointer'
    // TODO: Method 'ReleaseInputDataPointer'
    // TODO: Method 'PulseEndpoint'
};
// --------------------------------------------------------
// Type: IAudioOutputEndpointRT
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAudioOutputEndpointRT = *opaque{
    // TODO: Method 'GetOutputDataPointer'
    // TODO: Method 'ReleaseOutputDataPointer'
    // TODO: Method 'PulseEndpoint'
};
// --------------------------------------------------------
// Type: IAudioDeviceEndpoint
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAudioDeviceEndpoint = *opaque{
    // TODO: Method 'SetBuffer'
    // TODO: Method 'GetRTCaps'
    // TODO: Method 'GetEventDrivenCapable'
    // TODO: Method 'WriteExclusiveModeParametersToSharedMemory'
};
// --------------------------------------------------------
// Type: IAudioEndpointControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAudioEndpointControl = *opaque{
    // TODO: Method 'Start'
    // TODO: Method 'Reset'
    // TODO: Method 'Stop'
};

//
// functions
//

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSStopRemoteControlSession(
    LogonId: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSStartRemoteControlSessionW(
    pTargetServerName: ?*u16,
    TargetLogonId: u32,
    HotkeyVk: u8,
    HotkeyModifiers: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSStartRemoteControlSessionA(
    pTargetServerName: ?*i8,
    TargetLogonId: u32,
    HotkeyVk: u8,
    HotkeyModifiers: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSConnectSessionA(
    LogonId: u32,
    TargetLogonId: u32,
    pPassword: ?*i8,
    bWait: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSConnectSessionW(
    LogonId: u32,
    TargetLogonId: u32,
    pPassword: ?*u16,
    bWait: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSEnumerateServersW(
    pDomainName: ?*u16,
    Reserved: u32,
    Version: u32,
    ppServerInfo: ?*?*WTS_SERVER_INFOW,
    pCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSEnumerateServersA(
    pDomainName: ?*i8,
    Reserved: u32,
    Version: u32,
    ppServerInfo: ?*?*WTS_SERVER_INFOA,
    pCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WTSAPI32" fn WTSOpenServerW(
    pServerName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=False (can and should we use this?)
pub extern "WTSAPI32" fn WTSOpenServerA(
    pServerName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=False (can and should we use this?)
pub extern "WTSAPI32" fn WTSOpenServerExW(
    pServerName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=False (can and should we use this?)
pub extern "WTSAPI32" fn WTSOpenServerExA(
    pServerName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=False (can and should we use this?)
pub extern "WTSAPI32" fn WTSCloseServer(
    hServer: HANDLE,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSEnumerateSessionsW(
    hServer: HANDLE,
    Reserved: u32,
    Version: u32,
    ppSessionInfo: ?*?*WTS_SESSION_INFOW,
    pCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSEnumerateSessionsA(
    hServer: HANDLE,
    Reserved: u32,
    Version: u32,
    ppSessionInfo: ?*?*WTS_SESSION_INFOA,
    pCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSEnumerateSessionsExW(
    hServer: HANDLE,
    pLevel: ?*u32,
    Filter: u32,
    ppSessionInfo: ?*?*WTS_SESSION_INFO_1W,
    pCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSEnumerateSessionsExA(
    hServer: HANDLE,
    pLevel: ?*u32,
    Filter: u32,
    ppSessionInfo: ?*?*WTS_SESSION_INFO_1A,
    pCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSEnumerateProcessesW(
    hServer: HANDLE,
    Reserved: u32,
    Version: u32,
    ppProcessInfo: ?*?*WTS_PROCESS_INFOW,
    pCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSEnumerateProcessesA(
    hServer: HANDLE,
    Reserved: u32,
    Version: u32,
    ppProcessInfo: ?*?*WTS_PROCESS_INFOA,
    pCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSTerminateProcess(
    hServer: HANDLE,
    ProcessId: u32,
    ExitCode: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSQuerySessionInformationW(
    hServer: HANDLE,
    SessionId: u32,
    WTSInfoClass: WTS_INFO_CLASS,
    ppBuffer: ?*?*u16,
    pBytesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSQuerySessionInformationA(
    hServer: HANDLE,
    SessionId: u32,
    WTSInfoClass: WTS_INFO_CLASS,
    ppBuffer: ?*?*i8,
    pBytesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSQueryUserConfigW(
    pServerName: ?*u16,
    pUserName: ?*u16,
    WTSConfigClass: WTS_CONFIG_CLASS,
    ppBuffer: ?*?*u16,
    pBytesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSQueryUserConfigA(
    pServerName: ?*i8,
    pUserName: ?*i8,
    WTSConfigClass: WTS_CONFIG_CLASS,
    ppBuffer: ?*?*i8,
    pBytesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSSetUserConfigW(
    pServerName: ?*u16,
    pUserName: ?*u16,
    WTSConfigClass: WTS_CONFIG_CLASS,
    pBuffer: ?*u16,
    DataLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSSetUserConfigA(
    pServerName: ?*i8,
    pUserName: ?*i8,
    WTSConfigClass: WTS_CONFIG_CLASS,
    pBuffer: ?*i8,
    DataLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSSendMessageW(
    hServer: HANDLE,
    SessionId: u32,
    pTitle: ?*u16,
    TitleLength: u32,
    pMessage: ?*u16,
    MessageLength: u32,
    Style: u32,
    Timeout: u32,
    pResponse: ?*u32,
    bWait: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSSendMessageA(
    hServer: HANDLE,
    SessionId: u32,
    pTitle: ?*i8,
    TitleLength: u32,
    pMessage: ?*i8,
    MessageLength: u32,
    Style: u32,
    Timeout: u32,
    pResponse: ?*u32,
    bWait: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSDisconnectSession(
    hServer: HANDLE,
    SessionId: u32,
    bWait: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSLogoffSession(
    hServer: HANDLE,
    SessionId: u32,
    bWait: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSShutdownSystem(
    hServer: HANDLE,
    ShutdownFlag: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSWaitSystemEvent(
    hServer: HANDLE,
    EventMask: u32,
    pEventFlags: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSVirtualChannelOpen(
    hServer: HANDLE,
    SessionId: u32,
    pVirtualName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) HwtsVirtualChannelHandle;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSVirtualChannelOpenEx(
    SessionId: u32,
    pVirtualName: ?*i8,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) HwtsVirtualChannelHandle;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSVirtualChannelClose(
    hChannelHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSVirtualChannelRead(
    hChannelHandle: HANDLE,
    TimeOut: u32,
    Buffer: ?*i8,
    BufferSize: u32,
    pBytesRead: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSVirtualChannelWrite(
    hChannelHandle: HANDLE,
    Buffer: ?*i8,
    Length: u32,
    pBytesWritten: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSVirtualChannelPurgeInput(
    hChannelHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSVirtualChannelPurgeOutput(
    hChannelHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSVirtualChannelQuery(
    hChannelHandle: HANDLE,
    param1: WTS_VIRTUAL_CLASS,
    ppBuffer: ?*?*opaque{},
    pBytesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WTSAPI32" fn WTSFreeMemory(
    pMemory: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSRegisterSessionNotification(
    hWnd: HWND,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSUnRegisterSessionNotification(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WINSTA" fn WTSRegisterSessionNotificationEx(
    hServer: HANDLE,
    hWnd: HWND,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WINSTA" fn WTSUnRegisterSessionNotificationEx(
    hServer: HANDLE,
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSQueryUserToken(
    SessionId: u32,
    phToken: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSFreeMemoryExW(
    WTSTypeClass: WTS_TYPE_CLASS,
    pMemory: ?*opaque{},
    NumberOfEntries: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSFreeMemoryExA(
    WTSTypeClass: WTS_TYPE_CLASS,
    pMemory: ?*opaque{},
    NumberOfEntries: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSEnumerateProcessesExW(
    hServer: HANDLE,
    pLevel: ?*u32,
    SessionId: u32,
    ppProcessInfo: ?*?*u16,
    pCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSEnumerateProcessesExA(
    hServer: HANDLE,
    pLevel: ?*u32,
    SessionId: u32,
    ppProcessInfo: ?*?*i8,
    pCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSEnumerateListenersW(
    hServer: HANDLE,
    pReserved: ?*opaque{},
    Reserved: u32,
    pListeners: ?*?*u16,
    pCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSEnumerateListenersA(
    hServer: HANDLE,
    pReserved: ?*opaque{},
    Reserved: u32,
    pListeners: ?*?*i8,
    pCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSQueryListenerConfigW(
    hServer: HANDLE,
    pReserved: ?*opaque{},
    Reserved: u32,
    pListenerName: ?*u16,
    pBuffer: ?*WTSLISTENERCONFIGW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSQueryListenerConfigA(
    hServer: HANDLE,
    pReserved: ?*opaque{},
    Reserved: u32,
    pListenerName: ?*i8,
    pBuffer: ?*WTSLISTENERCONFIGA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSCreateListenerW(
    hServer: HANDLE,
    pReserved: ?*opaque{},
    Reserved: u32,
    pListenerName: ?*u16,
    pBuffer: ?*WTSLISTENERCONFIGW,
    flag: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSCreateListenerA(
    hServer: HANDLE,
    pReserved: ?*opaque{},
    Reserved: u32,
    pListenerName: ?*i8,
    pBuffer: ?*WTSLISTENERCONFIGA,
    flag: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSSetListenerSecurityW(
    hServer: HANDLE,
    pReserved: ?*opaque{},
    Reserved: u32,
    pListenerName: ?*u16,
    SecurityInformation: u32,
    pSecurityDescriptor: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSSetListenerSecurityA(
    hServer: HANDLE,
    pReserved: ?*opaque{},
    Reserved: u32,
    pListenerName: ?*i8,
    SecurityInformation: u32,
    pSecurityDescriptor: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSGetListenerSecurityW(
    hServer: HANDLE,
    pReserved: ?*opaque{},
    Reserved: u32,
    pListenerName: ?*u16,
    SecurityInformation: u32,
    pSecurityDescriptor: ?*opaque{},
    nLength: u32,
    lpnLengthNeeded: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WTSAPI32" fn WTSGetListenerSecurityA(
    hServer: HANDLE,
    pReserved: ?*opaque{},
    Reserved: u32,
    pListenerName: ?*i8,
    SecurityInformation: u32,
    pSecurityDescriptor: ?*opaque{},
    nLength: u32,
    lpnLengthNeeded: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WTSAPI32" fn WTSEnableChildSessions(
    bEnable: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WTSAPI32" fn WTSIsChildSessionsEnabled(
    pbEnabled: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WTSAPI32" fn WTSGetChildSessionId(
    pSessionId: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WTSAPI32" fn WTSSetRenderHint(
    pRenderHintID: ?*u64,
    hwndOwner: HWND,
    renderHintType: u32,
    cbHintDataLength: u32,
    pHintData: ?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn ProcessIdToSessionId(
    dwProcessId: u32,
    pSessionId: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn WTSGetActiveConsoleSessionId(
) callconv(@import("std").os.windows.WINAPI) u32;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const WTS_SERVER_INFO = WTS_SERVER_INFOA;
        pub const WTS_SESSION_INFO = WTS_SESSION_INFOA;
        pub const WTS_SESSION_INFO_1 = WTS_SESSION_INFO_1A;
        pub const WTS_PROCESS_INFO = WTS_PROCESS_INFOA;
        pub const WTSCONFIGINFO = WTSCONFIGINFOA;
        pub const WTSINFO = WTSINFOA;
        pub const WTSINFOEX_LEVEL1_ = WTSINFOEX_LEVEL1_A;
        pub const WTSINFOEX_LEVEL_ = WTSINFOEX_LEVEL_A;
        pub const WTSINFOEX = WTSINFOEXA;
        pub const WTSCLIENT = WTSCLIENTA;
        pub const _WTS_PRODUCT_INFO = _WTS_PRODUCT_INFOA;
        pub const WTS_VALIDATION_INFORMATION = WTS_VALIDATION_INFORMATIONA;
        pub const WTSUSERCONFIG = WTSUSERCONFIGA;
        pub const WTS_PROCESS_INFO_EX = WTS_PROCESS_INFO_EXA;
        pub const WTSLISTENERCONFIG = WTSLISTENERCONFIGA;
        pub const WTSStartRemoteControlSession = WTSStartRemoteControlSessionA;
        pub const WTSConnectSession = WTSConnectSessionA;
        pub const WTSEnumerateServers = WTSEnumerateServersA;
        pub const WTSOpenServer = WTSOpenServerA;
        pub const WTSOpenServerEx = WTSOpenServerExA;
        pub const WTSEnumerateSessions = WTSEnumerateSessionsA;
        pub const WTSEnumerateSessionsEx = WTSEnumerateSessionsExA;
        pub const WTSEnumerateProcesses = WTSEnumerateProcessesA;
        pub const WTSQuerySessionInformation = WTSQuerySessionInformationA;
        pub const WTSQueryUserConfig = WTSQueryUserConfigA;
        pub const WTSSetUserConfig = WTSSetUserConfigA;
        pub const WTSSendMessage = WTSSendMessageA;
        pub const WTSFreeMemoryEx = WTSFreeMemoryExA;
        pub const WTSEnumerateProcessesEx = WTSEnumerateProcessesExA;
        pub const WTSEnumerateListeners = WTSEnumerateListenersA;
        pub const WTSQueryListenerConfig = WTSQueryListenerConfigA;
        pub const WTSCreateListener = WTSCreateListenerA;
        pub const WTSSetListenerSecurity = WTSSetListenerSecurityA;
        pub const WTSGetListenerSecurity = WTSGetListenerSecurityA;
    },
    .wide => struct {
        pub const WTS_SERVER_INFO = WTS_SERVER_INFOW;
        pub const WTS_SESSION_INFO = WTS_SESSION_INFOW;
        pub const WTS_SESSION_INFO_1 = WTS_SESSION_INFO_1W;
        pub const WTS_PROCESS_INFO = WTS_PROCESS_INFOW;
        pub const WTSCONFIGINFO = WTSCONFIGINFOW;
        pub const WTSINFO = WTSINFOW;
        pub const WTSINFOEX_LEVEL1_ = WTSINFOEX_LEVEL1_W;
        pub const WTSINFOEX_LEVEL_ = WTSINFOEX_LEVEL_W;
        pub const WTSINFOEX = WTSINFOEXW;
        pub const WTSCLIENT = WTSCLIENTW;
        pub const _WTS_PRODUCT_INFO = _WTS_PRODUCT_INFOW;
        pub const WTS_VALIDATION_INFORMATION = WTS_VALIDATION_INFORMATIONW;
        pub const WTSUSERCONFIG = WTSUSERCONFIGW;
        pub const WTS_PROCESS_INFO_EX = WTS_PROCESS_INFO_EXW;
        pub const WTSLISTENERCONFIG = WTSLISTENERCONFIGW;
        pub const WTSStartRemoteControlSession = WTSStartRemoteControlSessionW;
        pub const WTSConnectSession = WTSConnectSessionW;
        pub const WTSEnumerateServers = WTSEnumerateServersW;
        pub const WTSOpenServer = WTSOpenServerW;
        pub const WTSOpenServerEx = WTSOpenServerExW;
        pub const WTSEnumerateSessions = WTSEnumerateSessionsW;
        pub const WTSEnumerateSessionsEx = WTSEnumerateSessionsExW;
        pub const WTSEnumerateProcesses = WTSEnumerateProcessesW;
        pub const WTSQuerySessionInformation = WTSQuerySessionInformationW;
        pub const WTSQueryUserConfig = WTSQueryUserConfigW;
        pub const WTSSetUserConfig = WTSSetUserConfigW;
        pub const WTSSendMessage = WTSSendMessageW;
        pub const WTSFreeMemoryEx = WTSFreeMemoryExW;
        pub const WTSEnumerateProcessesEx = WTSEnumerateProcessesExW;
        pub const WTSEnumerateListeners = WTSEnumerateListenersW;
        pub const WTSQueryListenerConfig = WTSQueryListenerConfigW;
        pub const WTSCreateListener = WTSCreateListenerW;
        pub const WTSSetListenerSecurity = WTSSetListenerSecurityW;
        pub const WTSGetListenerSecurity = WTSGetListenerSecurityW;
    },
    else => if (@import("builtin").is_test) struct {
        pub const WTS_SERVER_INFO = *opaque{};
        pub const WTS_SESSION_INFO = *opaque{};
        pub const WTS_SESSION_INFO_1 = *opaque{};
        pub const WTS_PROCESS_INFO = *opaque{};
        pub const WTSCONFIGINFO = *opaque{};
        pub const WTSINFO = *opaque{};
        pub const WTSINFOEX_LEVEL1_ = *opaque{};
        pub const WTSINFOEX_LEVEL_ = *opaque{};
        pub const WTSINFOEX = *opaque{};
        pub const WTSCLIENT = *opaque{};
        pub const _WTS_PRODUCT_INFO = *opaque{};
        pub const WTS_VALIDATION_INFORMATION = *opaque{};
        pub const WTSUSERCONFIG = *opaque{};
        pub const WTS_PROCESS_INFO_EX = *opaque{};
        pub const WTSLISTENERCONFIG = *opaque{};
        pub const WTSStartRemoteControlSession = *opaque{};
        pub const WTSConnectSession = *opaque{};
        pub const WTSEnumerateServers = *opaque{};
        pub const WTSOpenServer = *opaque{};
        pub const WTSOpenServerEx = *opaque{};
        pub const WTSEnumerateSessions = *opaque{};
        pub const WTSEnumerateSessionsEx = *opaque{};
        pub const WTSEnumerateProcesses = *opaque{};
        pub const WTSQuerySessionInformation = *opaque{};
        pub const WTSQueryUserConfig = *opaque{};
        pub const WTSSetUserConfig = *opaque{};
        pub const WTSSendMessage = *opaque{};
        pub const WTSFreeMemoryEx = *opaque{};
        pub const WTSEnumerateProcessesEx = *opaque{};
        pub const WTSEnumerateListeners = *opaque{};
        pub const WTSQueryListenerConfig = *opaque{};
        pub const WTSCreateListener = *opaque{};
        pub const WTSSetListenerSecurity = *opaque{};
        pub const WTSGetListenerSecurity = *opaque{};
    } else struct {
        pub const WTS_SERVER_INFO = @compileError("'WTS_SERVER_INFO' requires that UNICODE be set to true or false in the root module");
        pub const WTS_SESSION_INFO = @compileError("'WTS_SESSION_INFO' requires that UNICODE be set to true or false in the root module");
        pub const WTS_SESSION_INFO_1 = @compileError("'WTS_SESSION_INFO_1' requires that UNICODE be set to true or false in the root module");
        pub const WTS_PROCESS_INFO = @compileError("'WTS_PROCESS_INFO' requires that UNICODE be set to true or false in the root module");
        pub const WTSCONFIGINFO = @compileError("'WTSCONFIGINFO' requires that UNICODE be set to true or false in the root module");
        pub const WTSINFO = @compileError("'WTSINFO' requires that UNICODE be set to true or false in the root module");
        pub const WTSINFOEX_LEVEL1_ = @compileError("'WTSINFOEX_LEVEL1_' requires that UNICODE be set to true or false in the root module");
        pub const WTSINFOEX_LEVEL_ = @compileError("'WTSINFOEX_LEVEL_' requires that UNICODE be set to true or false in the root module");
        pub const WTSINFOEX = @compileError("'WTSINFOEX' requires that UNICODE be set to true or false in the root module");
        pub const WTSCLIENT = @compileError("'WTSCLIENT' requires that UNICODE be set to true or false in the root module");
        pub const _WTS_PRODUCT_INFO = @compileError("'_WTS_PRODUCT_INFO' requires that UNICODE be set to true or false in the root module");
        pub const WTS_VALIDATION_INFORMATION = @compileError("'WTS_VALIDATION_INFORMATION' requires that UNICODE be set to true or false in the root module");
        pub const WTSUSERCONFIG = @compileError("'WTSUSERCONFIG' requires that UNICODE be set to true or false in the root module");
        pub const WTS_PROCESS_INFO_EX = @compileError("'WTS_PROCESS_INFO_EX' requires that UNICODE be set to true or false in the root module");
        pub const WTSLISTENERCONFIG = @compileError("'WTSLISTENERCONFIG' requires that UNICODE be set to true or false in the root module");
        pub const WTSStartRemoteControlSession = @compileError("'WTSStartRemoteControlSession' requires that UNICODE be set to true or false in the root module");
        pub const WTSConnectSession = @compileError("'WTSConnectSession' requires that UNICODE be set to true or false in the root module");
        pub const WTSEnumerateServers = @compileError("'WTSEnumerateServers' requires that UNICODE be set to true or false in the root module");
        pub const WTSOpenServer = @compileError("'WTSOpenServer' requires that UNICODE be set to true or false in the root module");
        pub const WTSOpenServerEx = @compileError("'WTSOpenServerEx' requires that UNICODE be set to true or false in the root module");
        pub const WTSEnumerateSessions = @compileError("'WTSEnumerateSessions' requires that UNICODE be set to true or false in the root module");
        pub const WTSEnumerateSessionsEx = @compileError("'WTSEnumerateSessionsEx' requires that UNICODE be set to true or false in the root module");
        pub const WTSEnumerateProcesses = @compileError("'WTSEnumerateProcesses' requires that UNICODE be set to true or false in the root module");
        pub const WTSQuerySessionInformation = @compileError("'WTSQuerySessionInformation' requires that UNICODE be set to true or false in the root module");
        pub const WTSQueryUserConfig = @compileError("'WTSQueryUserConfig' requires that UNICODE be set to true or false in the root module");
        pub const WTSSetUserConfig = @compileError("'WTSSetUserConfig' requires that UNICODE be set to true or false in the root module");
        pub const WTSSendMessage = @compileError("'WTSSendMessage' requires that UNICODE be set to true or false in the root module");
        pub const WTSFreeMemoryEx = @compileError("'WTSFreeMemoryEx' requires that UNICODE be set to true or false in the root module");
        pub const WTSEnumerateProcessesEx = @compileError("'WTSEnumerateProcessesEx' requires that UNICODE be set to true or false in the root module");
        pub const WTSEnumerateListeners = @compileError("'WTSEnumerateListeners' requires that UNICODE be set to true or false in the root module");
        pub const WTSQueryListenerConfig = @compileError("'WTSQueryListenerConfig' requires that UNICODE be set to true or false in the root module");
        pub const WTSCreateListener = @compileError("'WTSCreateListener' requires that UNICODE be set to true or false in the root module");
        pub const WTSSetListenerSecurity = @compileError("'WTSSetListenerSecurity' requires that UNICODE be set to true or false in the root module");
        pub const WTSGetListenerSecurity = @compileError("'WTSGetListenerSecurity' requires that UNICODE be set to true or false in the root module");
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const BSTR = @import("automation.zig").BSTR;
const LARGE_INTEGER = @import("systemservices.zig").LARGE_INTEGER;
const FILETIME = @import("windowsprogramming.zig").FILETIME;
const BOOL = @import("systemservices.zig").BOOL;
const HANDLE = @import("systemservices.zig").HANDLE;
const HWND = @import("windowsandmessaging.zig").HWND;
const HRESULT = @import("com.zig").HRESULT;

test "" {
    const constant_export_count = 0;
    const type_export_count = 262;
    const func_count = 65;
    const unicode_alias_count = 34;
    const type_import_count = 8;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
