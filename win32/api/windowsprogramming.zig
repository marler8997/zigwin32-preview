//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: NETLOGON_INFO_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NETLOGON_INFO_1 = extern struct {
    netlog1_flags: u32,
    netlog1_pdc_connection_status: u32,
};
// --------------------------------------------------------
// Type: NETLOGON_INFO_2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NETLOGON_INFO_2 = extern struct {
    netlog2_flags: u32,
    netlog2_pdc_connection_status: u32,
    netlog2_trusted_dc_name: ?*u16,
    netlog2_tc_connection_status: u32,
};
// --------------------------------------------------------
// Type: NETLOGON_INFO_3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NETLOGON_INFO_3 = extern struct {
    netlog3_flags: u32,
    netlog3_logon_attempts: u32,
    netlog3_reserved1: u32,
    netlog3_reserved2: u32,
    netlog3_reserved3: u32,
    netlog3_reserved4: u32,
    netlog3_reserved5: u32,
};
// --------------------------------------------------------
// Type: NETLOGON_INFO_4
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NETLOGON_INFO_4 = extern struct {
    netlog4_trusted_dc_name: ?*u16,
    netlog4_trusted_domain_name: ?*u16,
};
// --------------------------------------------------------
// Type: PROCESS_CREATION_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROCESS_CREATION_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: HANDLE_FLAG_OPTIONS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HANDLE_FLAG_OPTIONS = *opaque{
};
// --------------------------------------------------------
// Type: DUPLICATE_HANDLE_OPTIONS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DUPLICATE_HANDLE_OPTIONS = *opaque{
};
// --------------------------------------------------------
// Type: STD_HANDLE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STD_HANDLE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: VER_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VER_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: ProcessAccessRights
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ProcessAccessRights = *opaque{
};
// --------------------------------------------------------
// Type: EventLogHandle
// TypeLayoutAttr: sequential
// RAIIFree 'CloseEventLog' (TODO: can we use this information?)
pub const EventLogHandle = ?*opaque{};
// --------------------------------------------------------
// Type: EventSourceHandle
// TypeLayoutAttr: sequential
// RAIIFree 'DeregisterEventSource' (TODO: can we use this information?)
pub const EventSourceHandle = ?*opaque{};
// --------------------------------------------------------
// Type: HeapHandle
// TypeLayoutAttr: sequential
// RAIIFree 'HeapDestroy' (TODO: can we use this information?)
pub const HeapHandle = ?*opaque{};
// --------------------------------------------------------
// Type: HKEY
// TypeLayoutAttr: sequential
// RAIIFree 'RegCloseKey' (TODO: can we use this information?)
pub const HKEY = ?*opaque{};
// --------------------------------------------------------
// Type: FIRMWARE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FIRMWARE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: OSVERSIONINFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OSVERSIONINFOA = extern struct {
    dwOSVersionInfoSize: u32,
    dwMajorVersion: u32,
    dwMinorVersion: u32,
    dwBuildNumber: u32,
    dwPlatformId: u32,
    szCSDVersion: ?[*]i8,
};
// --------------------------------------------------------
// Type: OSVERSIONINFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OSVERSIONINFOW = extern struct {
    dwOSVersionInfoSize: u32,
    dwMajorVersion: u32,
    dwMinorVersion: u32,
    dwBuildNumber: u32,
    dwPlatformId: u32,
    szCSDVersion: ?[*]u16,
};
// --------------------------------------------------------
// Type: OSVERSIONINFOEXA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OSVERSIONINFOEXA = extern struct {
    dwOSVersionInfoSize: u32,
    dwMajorVersion: u32,
    dwMinorVersion: u32,
    dwBuildNumber: u32,
    dwPlatformId: u32,
    szCSDVersion: ?[*]i8,
    wServicePackMajor: u16,
    wServicePackMinor: u16,
    wSuiteMask: u16,
    wProductType: u8,
    wReserved: u8,
};
// --------------------------------------------------------
// Type: OSVERSIONINFOEXW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OSVERSIONINFOEXW = extern struct {
    dwOSVersionInfoSize: u32,
    dwMajorVersion: u32,
    dwMinorVersion: u32,
    dwBuildNumber: u32,
    dwPlatformId: u32,
    szCSDVersion: ?[*]u16,
    wServicePackMajor: u16,
    wServicePackMinor: u16,
    wSuiteMask: u16,
    wProductType: u8,
    wReserved: u8,
};
// --------------------------------------------------------
// Type: FILETIME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILETIME = extern struct {
    dwLowDateTime: u32,
    dwHighDateTime: u32,
};
// --------------------------------------------------------
// Type: SYSTEMTIME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEMTIME = extern struct {
    wYear: u16,
    wMonth: u16,
    wDayOfWeek: u16,
    wDay: u16,
    wHour: u16,
    wMinute: u16,
    wSecond: u16,
    wMilliseconds: u16,
};
// --------------------------------------------------------
// Type: UpdateImpactLevel
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UpdateImpactLevel = *opaque{
};
// --------------------------------------------------------
// Type: UpdateAssessmentStatus
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UpdateAssessmentStatus = *opaque{
};
// --------------------------------------------------------
// Type: UpdateAssessment
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UpdateAssessment = extern struct {
    status: UpdateAssessmentStatus,
    impact: UpdateImpactLevel,
    daysOutOfDate: u32,
};
// --------------------------------------------------------
// Type: OSUpdateAssessment
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OSUpdateAssessment = extern struct {
    isEndOfSupport: BOOL,
    assessmentForCurrent: UpdateAssessment,
    assessmentForUpToDate: UpdateAssessment,
    securityStatus: UpdateAssessmentStatus,
    assessmentTime: FILETIME,
    releaseInfoTime: FILETIME,
    currentOSBuild: ?*u16,
    currentOSReleaseTime: FILETIME,
    upToDateOSBuild: ?*u16,
    upToDateOSReleaseTime: FILETIME,
};
// --------------------------------------------------------
// Type: EXTENDED_NAME_FORMAT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EXTENDED_NAME_FORMAT = *opaque{
};
// --------------------------------------------------------
// Type: STRING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STRING = extern struct {
    Length: u16,
    MaximumLength: u16,
    Buffer: ?*i8,
};
// --------------------------------------------------------
// Type: _PROC_THREAD_ATTRIBUTE_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _PROC_THREAD_ATTRIBUTE_LIST = opaque {
};
// --------------------------------------------------------
// Type: THREAD_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const THREAD_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: SYSTEM_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_INFO = extern struct {
    Anonymous: _Anonymous_e__Union,
    dwPageSize: u32,
    lpMinimumApplicationAddress: ?*opaque{},
    lpMaximumApplicationAddress: ?*opaque{},
    dwActiveProcessorMask: ?*opaque{},
    dwNumberOfProcessors: u32,
    dwProcessorType: u32,
    dwAllocationGranularity: u32,
    wProcessorLevel: u16,
    wProcessorRevision: u16,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            wProcessorArchitecture: u16,
            wReserved: u16,
        };
    };
};
// --------------------------------------------------------
// Type: COMPUTER_NAME_FORMAT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const COMPUTER_NAME_FORMAT = *opaque{
};
// --------------------------------------------------------
// Type: LPFIBER_START_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFIBER_START_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFIBER_CALLOUT_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFIBER_CALLOUT_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: JIT_DEBUG_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const JIT_DEBUG_INFO = extern struct {
    dwSize: u32,
    dwProcessorArchitecture: u32,
    dwThreadID: u32,
    dwReserved0: u32,
    lpExceptionAddress: u64,
    lpExceptionRecord: u64,
    lpContextRecord: u64,
};
// --------------------------------------------------------
// Type: PUMS_SCHEDULER_ENTRY_POINT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PUMS_SCHEDULER_ENTRY_POINT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DEP_SYSTEM_POLICY_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DEP_SYSTEM_POLICY_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: PROC_THREAD_ATTRIBUTE_NUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROC_THREAD_ATTRIBUTE_NUM = *opaque{
};
// --------------------------------------------------------
// Type: PGET_SYSTEM_WOW64_DIRECTORY_A
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PGET_SYSTEM_WOW64_DIRECTORY_A = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PGET_SYSTEM_WOW64_DIRECTORY_W
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PGET_SYSTEM_WOW64_DIRECTORY_W = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: HW_PROFILE_INFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HW_PROFILE_INFOA = extern struct {
    dwDockInfo: u32,
    szHwProfileGuid: ?[*]i8,
    szHwProfileName: ?[*]i8,
};
// --------------------------------------------------------
// Type: HW_PROFILE_INFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HW_PROFILE_INFOW = extern struct {
    dwDockInfo: u32,
    szHwProfileGuid: ?[*]u16,
    szHwProfileName: ?[*]u16,
};
// --------------------------------------------------------
// Type: TIME_ZONE_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TIME_ZONE_INFORMATION = extern struct {
    Bias: i32,
    StandardName: ?[*]u16,
    StandardDate: SYSTEMTIME,
    StandardBias: i32,
    DaylightName: ?[*]u16,
    DaylightDate: SYSTEMTIME,
    DaylightBias: i32,
};
// --------------------------------------------------------
// Type: DYNAMIC_TIME_ZONE_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DYNAMIC_TIME_ZONE_INFORMATION = extern struct {
    Bias: i32,
    StandardName: ?[*]u16,
    StandardDate: SYSTEMTIME,
    StandardBias: i32,
    DaylightName: ?[*]u16,
    DaylightDate: SYSTEMTIME,
    DaylightBias: i32,
    TimeZoneKeyName: ?[*]u16,
    DynamicDaylightTimeDisabled: u8,
};
// --------------------------------------------------------
// Type: ACTCTX_SECTION_KEYED_DATA_2600
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACTCTX_SECTION_KEYED_DATA_2600 = extern struct {
    cbSize: u32,
    ulDataFormatVersion: u32,
    lpData: ?*opaque{},
    ulLength: u32,
    lpSectionGlobalData: ?*opaque{},
    ulSectionGlobalDataLength: u32,
    lpSectionBase: ?*opaque{},
    ulSectionTotalLength: u32,
    hActCtx: HANDLE,
    ulAssemblyRosterIndex: u32,
};
// --------------------------------------------------------
// Type: ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = extern struct {
    lpInformation: ?*opaque{},
    lpSectionBase: ?*opaque{},
    ulSectionLength: u32,
    lpSectionGlobalDataBase: ?*opaque{},
    ulSectionGlobalDataLength: u32,
};
// --------------------------------------------------------
// Type: ACTIVATION_CONTEXT_BASIC_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACTIVATION_CONTEXT_BASIC_INFORMATION = extern struct {
    hActCtx: HANDLE,
    dwFlags: u32,
};
// --------------------------------------------------------
// Type: PQUERYACTCTXW_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PQUERYACTCTXW_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: APPLICATION_RECOVERY_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const APPLICATION_RECOVERY_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FILE_CASE_SENSITIVE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_CASE_SENSITIVE_INFO = extern struct {
    Flags: u32,
};
// --------------------------------------------------------
// Type: FILE_DISPOSITION_INFO_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_DISPOSITION_INFO_EX = extern struct {
    Flags: u32,
};
// --------------------------------------------------------
// Type: val_context
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const val_context = extern struct {
    valuelen: i32,
    value_context: ?*opaque{},
    val_buff_ptr: ?*opaque{},
};
// --------------------------------------------------------
// Type: pvalueA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const pvalueA = extern struct {
    pv_valuename: ?*i8,
    pv_valuelen: i32,
    pv_value_context: ?*opaque{},
    pv_type: u32,
};
// --------------------------------------------------------
// Type: pvalueW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const pvalueW = extern struct {
    pv_valuename: ?*u16,
    pv_valuelen: i32,
    pv_value_context: ?*opaque{},
    pv_type: u32,
};
// --------------------------------------------------------
// Type: QUERYHANDLER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QUERYHANDLER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PQUERYHANDLER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PQUERYHANDLER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: provider_info
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const provider_info = extern struct {
    pi_R0_1val: PQUERYHANDLER,
    pi_R0_allvals: PQUERYHANDLER,
    pi_R3_1val: PQUERYHANDLER,
    pi_R3_allvals: PQUERYHANDLER,
    pi_flags: u32,
    pi_key_context: ?*opaque{},
};
// --------------------------------------------------------
// Type: VALENTA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VALENTA = extern struct {
    ve_valuename: ?*i8,
    ve_valuelen: u32,
    ve_valueptr: ?*opaque{},
    ve_type: u32,
};
// --------------------------------------------------------
// Type: VALENTW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VALENTW = extern struct {
    ve_valuename: ?*u16,
    ve_valuelen: u32,
    ve_valueptr: ?*opaque{},
    ve_type: u32,
};
// --------------------------------------------------------
// Type: DOMDocument
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DOMDocument = opaque {
};
// --------------------------------------------------------
// Type: DOMFreeThreadedDocument
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DOMFreeThreadedDocument = opaque {
};
// --------------------------------------------------------
// Type: XMLHTTPRequest
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const XMLHTTPRequest = opaque {
};
// --------------------------------------------------------
// Type: XMLDSOControl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const XMLDSOControl = opaque {
};
// --------------------------------------------------------
// Type: XMLDocument
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const XMLDocument = opaque {
};
// --------------------------------------------------------
// Type: XML_ERROR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const XML_ERROR = extern struct {
    _nLine: u32,
    _pchBuf: BSTR,
    _cchBuf: u32,
    _ich: u32,
    _pszFound: BSTR,
    _pszExpected: BSTR,
    _reserved1: u32,
    _reserved2: u32,
};
// --------------------------------------------------------
// Type: DOMNodeType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOMNodeType = *opaque{
};
// --------------------------------------------------------
// Type: XMLEMEM_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const XMLEMEM_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IXMLDOMImplementation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMImplementation = *opaque{
    // TODO: Method 'hasFeature'
};
// --------------------------------------------------------
// Type: IXMLDOMNode
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMNode = *opaque{
    // TODO: Method 'get_nodeName'
    // TODO: Method 'get_nodeValue'
    // TODO: Method 'put_nodeValue'
    // TODO: Method 'get_nodeType'
    // TODO: Method 'get_parentNode'
    // TODO: Method 'get_childNodes'
    // TODO: Method 'get_firstChild'
    // TODO: Method 'get_lastChild'
    // TODO: Method 'get_previousSibling'
    // TODO: Method 'get_nextSibling'
    // TODO: Method 'get_attributes'
    // TODO: Method 'insertBefore'
    // TODO: Method 'replaceChild'
    // TODO: Method 'removeChild'
    // TODO: Method 'appendChild'
    // TODO: Method 'hasChildNodes'
    // TODO: Method 'get_ownerDocument'
    // TODO: Method 'cloneNode'
    // TODO: Method 'get_nodeTypeString'
    // TODO: Method 'get_text'
    // TODO: Method 'put_text'
    // TODO: Method 'get_specified'
    // TODO: Method 'get_definition'
    // TODO: Method 'get_nodeTypedValue'
    // TODO: Method 'put_nodeTypedValue'
    // TODO: Method 'get_dataType'
    // TODO: Method 'put_dataType'
    // TODO: Method 'get_xml'
    // TODO: Method 'transformNode'
    // TODO: Method 'selectNodes'
    // TODO: Method 'selectSingleNode'
    // TODO: Method 'get_parsed'
    // TODO: Method 'get_namespaceURI'
    // TODO: Method 'get_prefix'
    // TODO: Method 'get_baseName'
    // TODO: Method 'transformNodeToObject'
};
// --------------------------------------------------------
// Type: IXMLDOMDocumentFragment
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMDocumentFragment = *opaque{
};
// --------------------------------------------------------
// Type: IXMLDOMDocument
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMDocument = *opaque{
    // TODO: Method 'get_doctype'
    // TODO: Method 'get_implementation'
    // TODO: Method 'get_documentElement'
    // TODO: Method 'putref_documentElement'
    // TODO: Method 'createElement'
    // TODO: Method 'createDocumentFragment'
    // TODO: Method 'createTextNode'
    // TODO: Method 'createComment'
    // TODO: Method 'createCDATASection'
    // TODO: Method 'createProcessingInstruction'
    // TODO: Method 'createAttribute'
    // TODO: Method 'createEntityReference'
    // TODO: Method 'getElementsByTagName'
    // TODO: Method 'createNode'
    // TODO: Method 'nodeFromID'
    // TODO: Method 'load'
    // TODO: Method 'get_readyState'
    // TODO: Method 'get_parseError'
    // TODO: Method 'get_url'
    // TODO: Method 'get_async'
    // TODO: Method 'put_async'
    // TODO: Method 'abort'
    // TODO: Method 'loadXML'
    // TODO: Method 'save'
    // TODO: Method 'get_validateOnParse'
    // TODO: Method 'put_validateOnParse'
    // TODO: Method 'get_resolveExternals'
    // TODO: Method 'put_resolveExternals'
    // TODO: Method 'get_preserveWhiteSpace'
    // TODO: Method 'put_preserveWhiteSpace'
    // TODO: Method 'put_onreadystatechange'
    // TODO: Method 'put_ondataavailable'
    // TODO: Method 'put_ontransformnode'
};
// --------------------------------------------------------
// Type: IXMLDOMNodeList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMNodeList = *opaque{
    // TODO: Method 'get_item'
    // TODO: Method 'get_length'
    // TODO: Method 'nextNode'
    // TODO: Method 'reset'
    // TODO: Method 'get__newEnum'
};
// --------------------------------------------------------
// Type: IXMLDOMNamedNodeMap
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMNamedNodeMap = *opaque{
    // TODO: Method 'getNamedItem'
    // TODO: Method 'setNamedItem'
    // TODO: Method 'removeNamedItem'
    // TODO: Method 'get_item'
    // TODO: Method 'get_length'
    // TODO: Method 'getQualifiedItem'
    // TODO: Method 'removeQualifiedItem'
    // TODO: Method 'nextNode'
    // TODO: Method 'reset'
    // TODO: Method 'get__newEnum'
};
// --------------------------------------------------------
// Type: IXMLDOMCharacterData
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMCharacterData = *opaque{
    // TODO: Method 'get_data'
    // TODO: Method 'put_data'
    // TODO: Method 'get_length'
    // TODO: Method 'substringData'
    // TODO: Method 'appendData'
    // TODO: Method 'insertData'
    // TODO: Method 'deleteData'
    // TODO: Method 'replaceData'
};
// --------------------------------------------------------
// Type: IXMLDOMAttribute
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMAttribute = *opaque{
    // TODO: Method 'get_name'
    // TODO: Method 'get_value'
    // TODO: Method 'put_value'
};
// --------------------------------------------------------
// Type: IXMLDOMElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMElement = *opaque{
    // TODO: Method 'get_tagName'
    // TODO: Method 'getAttribute'
    // TODO: Method 'setAttribute'
    // TODO: Method 'removeAttribute'
    // TODO: Method 'getAttributeNode'
    // TODO: Method 'setAttributeNode'
    // TODO: Method 'removeAttributeNode'
    // TODO: Method 'getElementsByTagName'
    // TODO: Method 'normalize'
};
// --------------------------------------------------------
// Type: IXMLDOMText
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMText = *opaque{
    // TODO: Method 'splitText'
};
// --------------------------------------------------------
// Type: IXMLDOMComment
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMComment = *opaque{
};
// --------------------------------------------------------
// Type: IXMLDOMProcessingInstruction
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMProcessingInstruction = *opaque{
    // TODO: Method 'get_target'
    // TODO: Method 'get_data'
    // TODO: Method 'put_data'
};
// --------------------------------------------------------
// Type: IXMLDOMCDATASection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMCDATASection = *opaque{
};
// --------------------------------------------------------
// Type: IXMLDOMDocumentType
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMDocumentType = *opaque{
    // TODO: Method 'get_name'
    // TODO: Method 'get_entities'
    // TODO: Method 'get_notations'
};
// --------------------------------------------------------
// Type: IXMLDOMNotation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMNotation = *opaque{
    // TODO: Method 'get_publicId'
    // TODO: Method 'get_systemId'
};
// --------------------------------------------------------
// Type: IXMLDOMEntity
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMEntity = *opaque{
    // TODO: Method 'get_publicId'
    // TODO: Method 'get_systemId'
    // TODO: Method 'get_notationName'
};
// --------------------------------------------------------
// Type: IXMLDOMEntityReference
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMEntityReference = *opaque{
};
// --------------------------------------------------------
// Type: IXMLDOMParseError
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDOMParseError = *opaque{
    // TODO: Method 'get_errorCode'
    // TODO: Method 'get_url'
    // TODO: Method 'get_reason'
    // TODO: Method 'get_srcText'
    // TODO: Method 'get_line'
    // TODO: Method 'get_linepos'
    // TODO: Method 'get_filepos'
};
// --------------------------------------------------------
// Type: IXTLRuntime
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXTLRuntime = *opaque{
    // TODO: Method 'uniqueID'
    // TODO: Method 'depth'
    // TODO: Method 'childNumber'
    // TODO: Method 'ancestorChildNumber'
    // TODO: Method 'absoluteChildNumber'
    // TODO: Method 'formatIndex'
    // TODO: Method 'formatNumber'
    // TODO: Method 'formatDate'
    // TODO: Method 'formatTime'
};
// --------------------------------------------------------
// Type: XMLDOMDocumentEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const XMLDOMDocumentEvents = *opaque{
};
// --------------------------------------------------------
// Type: IXMLHttpRequest
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLHttpRequest = *opaque{
    // TODO: Method 'open'
    // TODO: Method 'setRequestHeader'
    // TODO: Method 'getResponseHeader'
    // TODO: Method 'getAllResponseHeaders'
    // TODO: Method 'send'
    // TODO: Method 'abort'
    // TODO: Method 'get_status'
    // TODO: Method 'get_statusText'
    // TODO: Method 'get_responseXML'
    // TODO: Method 'get_responseText'
    // TODO: Method 'get_responseBody'
    // TODO: Method 'get_responseStream'
    // TODO: Method 'get_readyState'
    // TODO: Method 'put_onreadystatechange'
};
// --------------------------------------------------------
// Type: IXMLDSOControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDSOControl = *opaque{
    // TODO: Method 'get_XMLDocument'
    // TODO: Method 'put_XMLDocument'
    // TODO: Method 'get_JavaDSOCompatible'
    // TODO: Method 'put_JavaDSOCompatible'
    // TODO: Method 'get_readyState'
};
// --------------------------------------------------------
// Type: IXMLElementCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLElementCollection = *opaque{
    // TODO: Method 'put_length'
    // TODO: Method 'get_length'
    // TODO: Method 'get__newEnum'
    // TODO: Method 'item'
};
// --------------------------------------------------------
// Type: IXMLDocument
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDocument = *opaque{
    // TODO: Method 'get_root'
    // TODO: Method 'get_fileSize'
    // TODO: Method 'get_fileModifiedDate'
    // TODO: Method 'get_fileUpdatedDate'
    // TODO: Method 'get_URL'
    // TODO: Method 'put_URL'
    // TODO: Method 'get_mimeType'
    // TODO: Method 'get_readyState'
    // TODO: Method 'get_charset'
    // TODO: Method 'put_charset'
    // TODO: Method 'get_version'
    // TODO: Method 'get_doctype'
    // TODO: Method 'get_dtdURL'
    // TODO: Method 'createElement'
};
// --------------------------------------------------------
// Type: IXMLDocument2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLDocument2 = *opaque{
    // TODO: Method 'get_root'
    // TODO: Method 'get_fileSize'
    // TODO: Method 'get_fileModifiedDate'
    // TODO: Method 'get_fileUpdatedDate'
    // TODO: Method 'get_URL'
    // TODO: Method 'put_URL'
    // TODO: Method 'get_mimeType'
    // TODO: Method 'get_readyState'
    // TODO: Method 'get_charset'
    // TODO: Method 'put_charset'
    // TODO: Method 'get_version'
    // TODO: Method 'get_doctype'
    // TODO: Method 'get_dtdURL'
    // TODO: Method 'createElement'
    // TODO: Method 'get_async'
    // TODO: Method 'put_async'
};
// --------------------------------------------------------
// Type: IXMLElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLElement = *opaque{
    // TODO: Method 'get_tagName'
    // TODO: Method 'put_tagName'
    // TODO: Method 'get_parent'
    // TODO: Method 'setAttribute'
    // TODO: Method 'getAttribute'
    // TODO: Method 'removeAttribute'
    // TODO: Method 'get_children'
    // TODO: Method 'get_type'
    // TODO: Method 'get_text'
    // TODO: Method 'put_text'
    // TODO: Method 'addChild'
    // TODO: Method 'removeChild'
};
// --------------------------------------------------------
// Type: IXMLElement2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLElement2 = *opaque{
    // TODO: Method 'get_tagName'
    // TODO: Method 'put_tagName'
    // TODO: Method 'get_parent'
    // TODO: Method 'setAttribute'
    // TODO: Method 'getAttribute'
    // TODO: Method 'removeAttribute'
    // TODO: Method 'get_children'
    // TODO: Method 'get_type'
    // TODO: Method 'get_text'
    // TODO: Method 'put_text'
    // TODO: Method 'addChild'
    // TODO: Method 'removeChild'
    // TODO: Method 'get_attributes'
};
// --------------------------------------------------------
// Type: IXMLAttribute
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLAttribute = *opaque{
    // TODO: Method 'get_name'
    // TODO: Method 'get_value'
};
// --------------------------------------------------------
// Type: IXMLError
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXMLError = *opaque{
    // TODO: Method 'GetErrorInfo'
};
// --------------------------------------------------------
// Type: CLIENT_ID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLIENT_ID = extern struct {
    UniqueProcess: HANDLE,
    UniqueThread: HANDLE,
};
// --------------------------------------------------------
// Type: LDR_DATA_TABLE_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LDR_DATA_TABLE_ENTRY = extern struct {
    Reserved1: ?[*]?*opaque{},
    InMemoryOrderLinks: LIST_ENTRY,
    Reserved2: ?[*]?*opaque{},
    DllBase: ?*opaque{},
    Reserved3: ?[*]?*opaque{},
    FullDllName: UNICODE_STRING,
    Reserved4: ?[*]u8,
    Reserved5: ?[*]?*opaque{},
    Anonymous: _Anonymous_e__Union,
    TimeDateStamp: u32,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PPS_POST_PROCESS_INIT_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PPS_POST_PROCESS_INIT_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: OBJECT_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OBJECT_ATTRIBUTES = extern struct {
    Length: u32,
    RootDirectory: HANDLE,
    ObjectName: ?*UNICODE_STRING,
    Attributes: u32,
    SecurityDescriptor: ?*opaque{},
    SecurityQualityOfService: ?*opaque{},
};
// --------------------------------------------------------
// Type: IO_STATUS_BLOCK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IO_STATUS_BLOCK = extern struct {
    Anonymous: _Anonymous_e__Union,
    Information: ?*opaque{},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PIO_APC_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PIO_APC_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PROCESS_BASIC_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESS_BASIC_INFORMATION = extern struct {
    Reserved1: ?*opaque{},
    PebBaseAddress: ?*PEB,
    Reserved2: ?[*]?*opaque{},
    UniqueProcessId: ?*opaque{},
    Reserved3: ?*opaque{},
};
// --------------------------------------------------------
// Type: SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION = extern struct {
    IdleTime: LARGE_INTEGER,
    KernelTime: LARGE_INTEGER,
    UserTime: LARGE_INTEGER,
    Reserved1: ?[*]LARGE_INTEGER,
    Reserved2: u32,
};
// --------------------------------------------------------
// Type: SYSTEM_PROCESS_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_PROCESS_INFORMATION = extern struct {
    NextEntryOffset: u32,
    NumberOfThreads: u32,
    Reserved1: ?[*]u8,
    ImageName: UNICODE_STRING,
    BasePriority: i32,
    UniqueProcessId: HANDLE,
    Reserved2: ?*opaque{},
    HandleCount: u32,
    SessionId: u32,
    Reserved3: ?*opaque{},
    PeakVirtualSize: ?*opaque{},
    VirtualSize: ?*opaque{},
    Reserved4: u32,
    PeakWorkingSetSize: ?*opaque{},
    WorkingSetSize: ?*opaque{},
    Reserved5: ?*opaque{},
    QuotaPagedPoolUsage: ?*opaque{},
    Reserved6: ?*opaque{},
    QuotaNonPagedPoolUsage: ?*opaque{},
    PagefileUsage: ?*opaque{},
    PeakPagefileUsage: ?*opaque{},
    PrivatePageCount: ?*opaque{},
    Reserved7: ?[*]LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: SYSTEM_THREAD_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_THREAD_INFORMATION = extern struct {
    Reserved1: ?[*]LARGE_INTEGER,
    Reserved2: u32,
    StartAddress: ?*opaque{},
    ClientId: CLIENT_ID,
    Priority: i32,
    BasePriority: i32,
    Reserved3: u32,
    ThreadState: u32,
    WaitReason: u32,
};
// --------------------------------------------------------
// Type: SYSTEM_REGISTRY_QUOTA_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_REGISTRY_QUOTA_INFORMATION = extern struct {
    RegistryQuotaAllowed: u32,
    RegistryQuotaUsed: u32,
    Reserved1: ?*opaque{},
};
// --------------------------------------------------------
// Type: SYSTEM_BASIC_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_BASIC_INFORMATION = extern struct {
    Reserved1: ?[*]u8,
    Reserved2: ?[*]?*opaque{},
    NumberOfProcessors: i8,
};
// --------------------------------------------------------
// Type: SYSTEM_TIMEOFDAY_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_TIMEOFDAY_INFORMATION = extern struct {
    Reserved1: ?[*]u8,
};
// --------------------------------------------------------
// Type: SYSTEM_PERFORMANCE_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_PERFORMANCE_INFORMATION = extern struct {
    Reserved1: ?[*]u8,
};
// --------------------------------------------------------
// Type: SYSTEM_EXCEPTION_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_EXCEPTION_INFORMATION = extern struct {
    Reserved1: ?[*]u8,
};
// --------------------------------------------------------
// Type: SYSTEM_LOOKASIDE_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_LOOKASIDE_INFORMATION = extern struct {
    Reserved1: ?[*]u8,
};
// --------------------------------------------------------
// Type: SYSTEM_INTERRUPT_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_INTERRUPT_INFORMATION = extern struct {
    Reserved1: ?[*]u8,
};
// --------------------------------------------------------
// Type: SYSTEM_POLICY_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_POLICY_INFORMATION = extern struct {
    Reserved1: ?[*]?*opaque{},
    Reserved2: ?[*]u32,
};
// --------------------------------------------------------
// Type: FILE_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FILE_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: PROCESSINFOCLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROCESSINFOCLASS = *opaque{
};
// --------------------------------------------------------
// Type: THREADINFOCLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const THREADINFOCLASS = *opaque{
};
// --------------------------------------------------------
// Type: SYSTEM_CODEINTEGRITY_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_CODEINTEGRITY_INFORMATION = extern struct {
    Length: u32,
    CodeIntegrityOptions: u32,
};
// --------------------------------------------------------
// Type: SYSTEM_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SYSTEM_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: OBJECT_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OBJECT_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: PUBLIC_OBJECT_BASIC_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PUBLIC_OBJECT_BASIC_INFORMATION = extern struct {
    Attributes: u32,
    GrantedAccess: u32,
    HandleCount: u32,
    PointerCount: u32,
    Reserved: ?[*]u32,
};
// --------------------------------------------------------
// Type: __PUBLIC_OBJECT_TYPE_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const __PUBLIC_OBJECT_TYPE_INFORMATION = extern struct {
    TypeName: UNICODE_STRING,
    Reserved: ?[*]u32,
};
// --------------------------------------------------------
// Type: KEY_VALUE_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KEY_VALUE_ENTRY = extern struct {
    ValueName: ?*UNICODE_STRING,
    DataLength: u32,
    DataOffset: u32,
    Type: u32,
};
// --------------------------------------------------------
// Type: KEY_SET_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KEY_SET_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: WINSTATIONINFOCLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WINSTATIONINFOCLASS = *opaque{
};
// --------------------------------------------------------
// Type: WINSTATIONINFORMATIONW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WINSTATIONINFORMATIONW = extern struct {
    Reserved2: ?[*]u8,
    LogonId: u32,
    Reserved3: ?[*]u8,
};
// --------------------------------------------------------
// Type: PWINSTATIONQUERYINFORMATIONW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWINSTATIONQUERYINFORMATIONW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: AVRF_BACKTRACE_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AVRF_BACKTRACE_INFORMATION = extern struct {
    Depth: u32,
    Index: u32,
    ReturnAddresses: ?[*]u64,
};
// --------------------------------------------------------
// Type: eUserAllocationState
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const eUserAllocationState = *opaque{
};
// --------------------------------------------------------
// Type: eHeapAllocationState
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const eHeapAllocationState = *opaque{
};
// --------------------------------------------------------
// Type: eHeapEnumerationLevel
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const eHeapEnumerationLevel = *opaque{
};
// --------------------------------------------------------
// Type: AVRF_HEAP_ALLOCATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AVRF_HEAP_ALLOCATION = extern struct {
    HeapHandle: u64,
    UserAllocation: u64,
    UserAllocationSize: u64,
    Allocation: u64,
    AllocationSize: u64,
    UserAllocationState: u32,
    HeapState: u32,
    HeapContext: u64,
    BackTraceInformation: ?*AVRF_BACKTRACE_INFORMATION,
};
// --------------------------------------------------------
// Type: eHANDLE_TRACE_OPERATIONS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const eHANDLE_TRACE_OPERATIONS = *opaque{
};
// --------------------------------------------------------
// Type: AVRF_HANDLE_OPERATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AVRF_HANDLE_OPERATION = extern struct {
    Handle: u64,
    ProcessId: u32,
    ThreadId: u32,
    OperationType: u32,
    Spare0: u32,
    BackTraceInformation: AVRF_BACKTRACE_INFORMATION,
};
// --------------------------------------------------------
// Type: eAvrfResourceTypes
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const eAvrfResourceTypes = *opaque{
};
// --------------------------------------------------------
// Type: AVRF_RESOURCE_ENUMERATE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AVRF_RESOURCE_ENUMERATE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: AVRF_HEAPALLOCATION_ENUMERATE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AVRF_HEAPALLOCATION_ENUMERATE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: AVRF_HANDLEOPERATION_ENUMERATE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AVRF_HANDLEOPERATION_ENUMERATE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CameraUIControl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CameraUIControl = opaque {
};
// --------------------------------------------------------
// Type: CameraUIControlMode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CameraUIControlMode = *opaque{
};
// --------------------------------------------------------
// Type: CameraUIControlLinearSelectionMode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CameraUIControlLinearSelectionMode = *opaque{
};
// --------------------------------------------------------
// Type: CameraUIControlCaptureMode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CameraUIControlCaptureMode = *opaque{
};
// --------------------------------------------------------
// Type: CameraUIControlPhotoFormat
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CameraUIControlPhotoFormat = *opaque{
};
// --------------------------------------------------------
// Type: CameraUIControlVideoFormat
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CameraUIControlVideoFormat = *opaque{
};
// --------------------------------------------------------
// Type: CameraUIControlViewType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CameraUIControlViewType = *opaque{
};
// --------------------------------------------------------
// Type: ICameraUIControlEventCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICameraUIControlEventCallback = *opaque{
    // TODO: Method 'OnStartupComplete'
    // TODO: Method 'OnSuspendComplete'
    // TODO: Method 'OnItemCaptured'
    // TODO: Method 'OnItemDeleted'
    // TODO: Method 'OnClosed'
};
// --------------------------------------------------------
// Type: ICameraUIControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICameraUIControl = *opaque{
    // TODO: Method 'Show'
    // TODO: Method 'Close'
    // TODO: Method 'Suspend'
    // TODO: Method 'Resume'
    // TODO: Method 'GetCurrentViewType'
    // TODO: Method 'GetActiveItem'
    // TODO: Method 'GetSelectedItems'
    // TODO: Method 'RemoveCapturedItem'
};
// --------------------------------------------------------
// Type: ERF
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ERF = extern struct {
    erfOper: i32,
    erfType: i32,
    fError: BOOL,
};
// --------------------------------------------------------
// Type: FCIERROR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FCIERROR = *opaque{
};
// --------------------------------------------------------
// Type: CCAB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CCAB = extern struct {
    cb: u32,
    cbFolderThresh: u32,
    cbReserveCFHeader: u32,
    cbReserveCFFolder: u32,
    cbReserveCFData: u32,
    iCab: i32,
    iDisk: i32,
    fFailOnIncompressible: i32,
    setID: u16,
    szDisk: ?[*]i8,
    szCab: ?[*]i8,
    szCabPath: ?[*]i8,
};
// --------------------------------------------------------
// Type: PFNFCIALLOC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNFCIALLOC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNFCIFREE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNFCIFREE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNFCIOPEN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNFCIOPEN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNFCIREAD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNFCIREAD = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNFCIWRITE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNFCIWRITE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNFCICLOSE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNFCICLOSE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNFCISEEK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNFCISEEK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNFCIDELETE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNFCIDELETE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNFCIGETNEXTCABINET
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNFCIGETNEXTCABINET = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNFCIFILEPLACED
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNFCIFILEPLACED = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNFCIGETOPENINFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNFCIGETOPENINFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNFCISTATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNFCISTATUS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNFCIGETTEMPFILE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNFCIGETTEMPFILE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FDIERROR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FDIERROR = *opaque{
};
// --------------------------------------------------------
// Type: FDICABINETINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FDICABINETINFO = extern struct {
    cbCabinet: i32,
    cFolders: u16,
    cFiles: u16,
    setID: u16,
    iCabinet: u16,
    fReserve: BOOL,
    hasprev: BOOL,
    hasnext: BOOL,
};
// --------------------------------------------------------
// Type: FDIDECRYPTTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FDIDECRYPTTYPE = *opaque{
};
// --------------------------------------------------------
// Type: FDIDECRYPT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FDIDECRYPT = extern struct {
    fdidt: FDIDECRYPTTYPE,
    pvUser: ?*opaque{},
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _decrypt_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _decrypt_e__Struct = extern struct {
            pDataReserve: ?*opaque{},
            cbDataReserve: u16,
            pbData: ?*opaque{},
            cbData: u16,
            fSplit: BOOL,
            cbPartial: u16,
        };
        // --------------------------------------------------------
        // Type: _cabinet_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _cabinet_e__Struct = extern struct {
            pHeaderReserve: ?*opaque{},
            cbHeaderReserve: u16,
            setID: u16,
            iCabinet: i32,
        };
        // --------------------------------------------------------
        // Type: _folder_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _folder_e__Struct = extern struct {
            pFolderReserve: ?*opaque{},
            cbFolderReserve: u16,
            iFolder: u16,
        };
    };
};
// --------------------------------------------------------
// Type: PFNALLOC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNALLOC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNFREE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNFREE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNOPEN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNOPEN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNREAD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNREAD = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNWRITE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNWRITE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNCLOSE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNCLOSE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNSEEK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNSEEK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNFDIDECRYPT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNFDIDECRYPT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FDINOTIFICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FDINOTIFICATION = extern struct {
    cb: i32,
    psz1: ?*i8,
    psz2: ?*i8,
    psz3: ?*i8,
    pv: ?*opaque{},
    hf: ?*opaque{},
    date: u16,
    time: u16,
    attribs: u16,
    setID: u16,
    iCabinet: u16,
    iFolder: u16,
    fdie: FDIERROR,
};
// --------------------------------------------------------
// Type: FDINOTIFICATIONTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FDINOTIFICATIONTYPE = *opaque{
};
// --------------------------------------------------------
// Type: PFNFDINOTIFY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNFDINOTIFY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FDISPILLFILE
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const FDISPILLFILE = *opaque{
};
// --------------------------------------------------------
// Type: VDMCONTEXT_WITHOUT_XSAVE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDMCONTEXT_WITHOUT_XSAVE = extern struct {
    ContextFlags: u32,
    Dr0: u32,
    Dr1: u32,
    Dr2: u32,
    Dr3: u32,
    Dr6: u32,
    Dr7: u32,
    FloatSave: FLOATING_SAVE_AREA,
    SegGs: u32,
    SegFs: u32,
    SegEs: u32,
    SegDs: u32,
    Edi: u32,
    Esi: u32,
    Ebx: u32,
    Edx: u32,
    Ecx: u32,
    Eax: u32,
    Ebp: u32,
    Eip: u32,
    SegCs: u32,
    EFlags: u32,
    Esp: u32,
    SegSs: u32,
};
// --------------------------------------------------------
// Type: SEGMENT_NOTE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEGMENT_NOTE = extern struct {
    Selector1: u16,
    Selector2: u16,
    Segment: u16,
    Module: ?[*]i8,
    FileName: ?[*]i8,
    Type: u16,
    Length: u32,
};
// --------------------------------------------------------
// Type: IMAGE_NOTE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMAGE_NOTE = extern struct {
    Module: ?[*]i8,
    FileName: ?[*]i8,
    hModule: u16,
    hTask: u16,
};
// --------------------------------------------------------
// Type: MODULEENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MODULEENTRY = extern struct {
    dwSize: u32,
    szModule: ?[*]i8,
    hModule: HANDLE,
    wcUsage: u16,
    szExePath: ?[*]i8,
    wNext: u16,
};
// --------------------------------------------------------
// Type: TEMP_BP_NOTE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TEMP_BP_NOTE = extern struct {
    Seg: u16,
    Offset: u32,
    bPM: BOOL,
};
// --------------------------------------------------------
// Type: VDM_SEGINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VDM_SEGINFO = extern struct {
    Selector: u16,
    SegNumber: u16,
    Length: u32,
    Type: u16,
    ModuleName: ?[*]i8,
    FileName: ?[*]i8,
};
// --------------------------------------------------------
// Type: GLOBALENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GLOBALENTRY = extern struct {
    dwSize: u32,
    dwAddress: u32,
    dwBlockSize: u32,
    hBlock: HANDLE,
    wcLock: u16,
    wcPageLock: u16,
    wFlags: u16,
    wHeapPresent: BOOL,
    hOwner: HANDLE,
    wType: u16,
    wData: u16,
    dwNext: u32,
    dwNextAlt: u32,
};
// --------------------------------------------------------
// Type: DEBUGEVENTPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DEBUGEVENTPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PROCESSENUMPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROCESSENUMPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: TASKENUMPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TASKENUMPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: TASKENUMPROCEX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TASKENUMPROCEX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMPROCESSEXCEPTIONPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMPROCESSEXCEPTIONPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMGETTHREADSELECTORENTRYPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMGETTHREADSELECTORENTRYPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMGETPOINTERPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMGETPOINTERPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMGETCONTEXTPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMGETCONTEXTPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMSETCONTEXTPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMSETCONTEXTPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMKILLWOWPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMKILLWOWPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMDETECTWOWPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMDETECTWOWPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMBREAKTHREADPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMBREAKTHREADPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMGETSELECTORMODULEPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMGETSELECTORMODULEPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMGETMODULESELECTORPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMGETMODULESELECTORPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMMODULEFIRSTPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMMODULEFIRSTPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMMODULENEXTPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMMODULENEXTPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMGLOBALFIRSTPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMGLOBALFIRSTPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMGLOBALNEXTPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMGLOBALNEXTPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMENUMPROCESSWOWPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMENUMPROCESSWOWPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMENUMTASKWOWPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMENUMTASKWOWPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMENUMTASKWOWEXPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMENUMTASKWOWEXPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMTERMINATETASKINWOWPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMTERMINATETASKINWOWPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMSTARTTASKINWOWPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMSTARTTASKINWOWPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMGETDBGFLAGSPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMGETDBGFLAGSPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMSETDBGFLAGSPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMSETDBGFLAGSPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMISMODULELOADEDPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMISMODULELOADEDPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMGETSEGMENTINFOPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMGETSEGMENTINFOPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMGETSYMBOLPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMGETSYMBOLPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VDMGETADDREXPRESSIONPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VDMGETADDREXPRESSIONPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: EditionUpgradeHelper
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const EditionUpgradeHelper = opaque {
};
// --------------------------------------------------------
// Type: EditionUpgradeBroker
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const EditionUpgradeBroker = opaque {
};
// --------------------------------------------------------
// Type: IEditionUpgradeHelper
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEditionUpgradeHelper = *opaque{
    // TODO: Method 'CanUpgrade'
    // TODO: Method 'UpdateOperatingSystem'
    // TODO: Method 'ShowProductKeyUI'
    // TODO: Method 'GetOsProductContentId'
    // TODO: Method 'GetGenuineLocalStatus'
};
// --------------------------------------------------------
// Type: IWindowsLockModeHelper
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWindowsLockModeHelper = *opaque{
    // TODO: Method 'GetSMode'
};
// --------------------------------------------------------
// Type: IEditionUpgradeBroker
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEditionUpgradeBroker = *opaque{
    // TODO: Method 'InitializeParentWindow'
    // TODO: Method 'UpdateOperatingSystem'
    // TODO: Method 'ShowProductKeyUI'
    // TODO: Method 'CanUpgrade'
};
// --------------------------------------------------------
// Type: IContainerActivationHelper
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IContainerActivationHelper = *opaque{
    // TODO: Method 'CanActivateClientVM'
};
// --------------------------------------------------------
// Type: IClipServiceNotificationHelper
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IClipServiceNotificationHelper = *opaque{
    // TODO: Method 'ShowToast'
};
// --------------------------------------------------------
// Type: FEATURE_CHANGE_TIME
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FEATURE_CHANGE_TIME = *opaque{
};
// --------------------------------------------------------
// Type: FEATURE_ENABLED_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FEATURE_ENABLED_STATE = *opaque{
};
// --------------------------------------------------------
// Type: FEATURE_ERROR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FEATURE_ERROR = extern struct {
    hr: HRESULT,
    lineNumber: u16,
    file: ?*i8,
    process: ?*i8,
    module: ?*i8,
    callerReturnAddressOffset: u32,
    callerModule: ?*i8,
    message: ?*i8,
    originLineNumber: u16,
    originFile: ?*i8,
    originModule: ?*i8,
    originCallerReturnAddressOffset: u32,
    originCallerModule: ?*i8,
    originName: ?*i8,
};
// --------------------------------------------------------
// Type: FEATURE_STATE_CHANGE_SUBSCRIPTION__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FEATURE_STATE_CHANGE_SUBSCRIPTION__ = extern struct {
    unused: i32,
};
// --------------------------------------------------------
// Type: FEATURE_STATE_CHANGE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FEATURE_STATE_CHANGE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFEATURE_STATE_CHANGE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFEATURE_STATE_CHANGE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FhConfigMgr
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const FhConfigMgr = opaque {
};
// --------------------------------------------------------
// Type: FhReassociation
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const FhReassociation = opaque {
};
// --------------------------------------------------------
// Type: FH_TARGET_PROPERTY_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FH_TARGET_PROPERTY_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: FH_TARGET_DRIVE_TYPES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FH_TARGET_DRIVE_TYPES = *opaque{
};
// --------------------------------------------------------
// Type: IFhTarget
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFhTarget = *opaque{
    // TODO: Method 'GetStringProperty'
    // TODO: Method 'GetNumericalProperty'
};
// --------------------------------------------------------
// Type: IFhScopeIterator
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFhScopeIterator = *opaque{
    // TODO: Method 'MoveToNextItem'
    // TODO: Method 'GetItem'
};
// --------------------------------------------------------
// Type: FH_PROTECTED_ITEM_CATEGORY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FH_PROTECTED_ITEM_CATEGORY = *opaque{
};
// --------------------------------------------------------
// Type: FH_LOCAL_POLICY_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FH_LOCAL_POLICY_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: FH_RETENTION_TYPES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FH_RETENTION_TYPES = *opaque{
};
// --------------------------------------------------------
// Type: FH_BACKUP_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FH_BACKUP_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: FH_DEVICE_VALIDATION_RESULT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FH_DEVICE_VALIDATION_RESULT = *opaque{
};
// --------------------------------------------------------
// Type: IFhConfigMgr
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFhConfigMgr = *opaque{
    // TODO: Method 'LoadConfiguration'
    // TODO: Method 'CreateDefaultConfiguration'
    // TODO: Method 'SaveConfiguration'
    // TODO: Method 'AddRemoveExcludeRule'
    // TODO: Method 'GetIncludeExcludeRules'
    // TODO: Method 'GetLocalPolicy'
    // TODO: Method 'SetLocalPolicy'
    // TODO: Method 'GetBackupStatus'
    // TODO: Method 'SetBackupStatus'
    // TODO: Method 'GetDefaultTarget'
    // TODO: Method 'ValidateTarget'
    // TODO: Method 'ProvisionAndSetNewTarget'
    // TODO: Method 'ChangeDefaultTargetRecommendation'
    // TODO: Method 'QueryProtectionStatus'
};
// --------------------------------------------------------
// Type: IFhReassociation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFhReassociation = *opaque{
    // TODO: Method 'ValidateTarget'
    // TODO: Method 'ScanTargetForConfigurations'
    // TODO: Method 'GetConfigurationDetails'
    // TODO: Method 'SelectConfiguration'
    // TODO: Method 'PerformReassociation'
};
// --------------------------------------------------------
// Type: FhBackupStopReason
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FhBackupStopReason = *opaque{
};
// --------------------------------------------------------
// Type: FH_SERVICE_PIPE_HANDLE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FH_SERVICE_PIPE_HANDLE__ = extern struct {
    unused: i32,
};
// --------------------------------------------------------
// Type: DCICMD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DCICMD = extern struct {
    dwCommand: u32,
    dwParam1: u32,
    dwParam2: u32,
    dwVersion: u32,
    dwReserved: u32,
};
// --------------------------------------------------------
// Type: DCICREATEINPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DCICREATEINPUT = extern struct {
    cmd: DCICMD,
    dwCompression: u32,
    dwMask: ?[*]u32,
    dwWidth: u32,
    dwHeight: u32,
    dwDCICaps: u32,
    dwBitCount: u32,
    lpSurface: ?*opaque{},
};
// --------------------------------------------------------
// Type: DCISURFACEINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DCISURFACEINFO = extern struct {
    dwSize: u32,
    dwDCICaps: u32,
    dwCompression: u32,
    dwMask: ?[*]u32,
    dwWidth: u32,
    dwHeight: u32,
    lStride: i32,
    dwBitCount: u32,
    dwOffSurface: ?*opaque{},
    wSelSurface: u16,
    wReserved: u16,
    dwReserved1: u32,
    dwReserved2: u32,
    dwReserved3: u32,
    BeginAccess: ?*opaque{},
    EndAccess: ?*opaque{},
    DestroySurface: ?*opaque{},
};
// --------------------------------------------------------
// Type: ENUM_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ENUM_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DCIENUMINPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DCIENUMINPUT = extern struct {
    cmd: DCICMD,
    rSrc: RECT,
    rDst: RECT,
    EnumCallback: ?*opaque{},
    lpContext: ?*opaque{},
};
// --------------------------------------------------------
// Type: DCIOFFSCREEN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DCIOFFSCREEN = extern struct {
    dciInfo: DCISURFACEINFO,
    Draw: ?*opaque{},
    SetClipList: ?*opaque{},
    SetDestination: ?*opaque{},
};
// --------------------------------------------------------
// Type: DCIOVERLAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DCIOVERLAY = extern struct {
    dciInfo: DCISURFACEINFO,
    dwChromakeyValue: u32,
    dwChromakeyMask: u32,
};
// --------------------------------------------------------
// Type: HWINWATCH__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HWINWATCH__ = extern struct {
    unused: i32,
};
// --------------------------------------------------------
// Type: WINWATCHNOTIFYPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WINWATCHNOTIFYPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WaaSAssessor
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WaaSAssessor = opaque {
};
// --------------------------------------------------------
// Type: IWaaSAssessor
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWaaSAssessor = *opaque{
    // TODO: Method 'GetOSUpdateAssessment'
};
// --------------------------------------------------------
// Type: VMEML
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VMEML = extern struct {
    next: ?*VMEML,
    ptr: ?*opaque{},
    size: u32,
    bDiscardable: BOOL,
};
// --------------------------------------------------------
// Type: VMEMR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VMEMR = extern struct {
    next: ?*VMEMR,
    prev: ?*VMEMR,
    pUp: ?*VMEMR,
    pDown: ?*VMEMR,
    pLeft: ?*VMEMR,
    pRight: ?*VMEMR,
    ptr: ?*opaque{},
    size: u32,
    x: u32,
    y: u32,
    cx: u32,
    cy: u32,
    flags: u32,
    pBits: ?*opaque{},
    bDiscardable: BOOL,
};
// --------------------------------------------------------
// Type: PROCESS_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROCESS_LIST = extern struct {
    lpLink: ?*PROCESS_LIST,
    dwProcessId: u32,
    dwRefCnt: u32,
    dwAlphaDepth: u32,
    dwZDepth: u32,
};
// --------------------------------------------------------
// Type: DDMONITORINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDMONITORINFO = extern struct {
    Manufacturer: u16,
    Product: u16,
    SerialNumber: u32,
    DeviceIdentifier: Guid,
    Mode640x480: i32,
    Mode800x600: i32,
    Mode1024x768: i32,
    Mode1280x1024: i32,
    Mode1600x1200: i32,
    ModeReserved1: i32,
    ModeReserved2: i32,
    ModeReserved3: i32,
};
// --------------------------------------------------------
// Type: IDirectDrawClipperVtbl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDirectDrawClipperVtbl = opaque {
};
// --------------------------------------------------------
// Type: IDirectDrawPaletteVtbl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDirectDrawPaletteVtbl = opaque {
};
// --------------------------------------------------------
// Type: IDirectDrawSurfaceVtbl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDirectDrawSurfaceVtbl = opaque {
};
// --------------------------------------------------------
// Type: IDirectDrawSurface2Vtbl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDirectDrawSurface2Vtbl = opaque {
};
// --------------------------------------------------------
// Type: IDirectDrawSurface3Vtbl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDirectDrawSurface3Vtbl = opaque {
};
// --------------------------------------------------------
// Type: IDirectDrawSurface4Vtbl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDirectDrawSurface4Vtbl = opaque {
};
// --------------------------------------------------------
// Type: IDirectDrawSurface7Vtbl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDirectDrawSurface7Vtbl = opaque {
};
// --------------------------------------------------------
// Type: IDirectDrawColorControlVtbl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDirectDrawColorControlVtbl = opaque {
};
// --------------------------------------------------------
// Type: IDirectDrawVtbl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDirectDrawVtbl = opaque {
};
// --------------------------------------------------------
// Type: IDirectDraw2Vtbl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDirectDraw2Vtbl = opaque {
};
// --------------------------------------------------------
// Type: IDirectDraw4Vtbl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDirectDraw4Vtbl = opaque {
};
// --------------------------------------------------------
// Type: IDirectDraw7Vtbl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDirectDraw7Vtbl = opaque {
};
// --------------------------------------------------------
// Type: IDirectDrawKernelVtbl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDirectDrawKernelVtbl = opaque {
};
// --------------------------------------------------------
// Type: IDirectDrawSurfaceKernelVtbl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDirectDrawSurfaceKernelVtbl = opaque {
};
// --------------------------------------------------------
// Type: IDirectDrawGammaControlVtbl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IDirectDrawGammaControlVtbl = opaque {
};
// --------------------------------------------------------
// Type: DD32BITDRIVERDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD32BITDRIVERDATA = extern struct {
    szName: ?[*]i8,
    szEntryPoint: ?[*]i8,
    dwContext: u32,
};
// --------------------------------------------------------
// Type: DDVERSIONDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDVERSIONDATA = extern struct {
    dwHALVersion: u32,
    dwReserved1: ?*opaque{},
    dwReserved2: ?*opaque{},
};
// --------------------------------------------------------
// Type: LPDD32BITDRIVERINIT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDD32BITDRIVERINIT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VIDMEM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDMEM = extern struct {
    dwFlags: u32,
    fpStart: ?*opaque{},
    Anonymous1: _Anonymous1_e__Union,
    ddsCaps: DDSCAPS,
    ddsCapsAlt: DDSCAPS,
    Anonymous2: _Anonymous2_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: VIDMEMINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDMEMINFO = extern struct {
    fpPrimary: ?*opaque{},
    dwFlags: u32,
    dwDisplayWidth: u32,
    dwDisplayHeight: u32,
    lDisplayPitch: i32,
    ddpfDisplay: DDPIXELFORMAT,
    dwOffscreenAlign: u32,
    dwOverlayAlign: u32,
    dwTextureAlign: u32,
    dwZBufferAlign: u32,
    dwAlphaAlign: u32,
    dwNumHeaps: u32,
    pvmList: ?*VIDMEM,
};
// --------------------------------------------------------
// Type: HEAPALIAS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HEAPALIAS = extern struct {
    fpVidMem: ?*opaque{},
    lpAlias: ?*opaque{},
    dwAliasSize: u32,
};
// --------------------------------------------------------
// Type: HEAPALIASINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HEAPALIASINFO = extern struct {
    dwRefCnt: u32,
    dwFlags: u32,
    dwNumHeaps: u32,
    lpAliases: ?*HEAPALIAS,
};
// --------------------------------------------------------
// Type: IUNKNOWN_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IUNKNOWN_LIST = extern struct {
    lpLink: ?*IUNKNOWN_LIST,
    lpGuid: ?*Guid,
    lpIUnknown: IUnknown,
};
// --------------------------------------------------------
// Type: LPDDHEL_INIT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHEL_INIT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHAL_SETCOLORKEY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_SETCOLORKEY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHAL_CANCREATESURFACE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_CANCREATESURFACE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHAL_WAITFORVERTICALBLANK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_WAITFORVERTICALBLANK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHAL_CREATESURFACE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_CREATESURFACE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHAL_DESTROYDRIVER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_DESTROYDRIVER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHAL_SETMODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_SETMODE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHAL_CREATEPALETTE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_CREATEPALETTE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHAL_GETSCANLINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_GETSCANLINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHAL_SETEXCLUSIVEMODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_SETEXCLUSIVEMODE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHAL_FLIPTOGDISURFACE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_FLIPTOGDISURFACE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHAL_GETDRIVERINFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_GETDRIVERINFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DDHAL_DDCALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_DDCALLBACKS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    DestroyDriver: LPDDHAL_DESTROYDRIVER,
    CreateSurface: LPDDHAL_CREATESURFACE,
    SetColorKey: LPDDHAL_SETCOLORKEY,
    SetMode: LPDDHAL_SETMODE,
    WaitForVerticalBlank: LPDDHAL_WAITFORVERTICALBLANK,
    CanCreateSurface: LPDDHAL_CANCREATESURFACE,
    CreatePalette: LPDDHAL_CREATEPALETTE,
    GetScanLine: LPDDHAL_GETSCANLINE,
    SetExclusiveMode: LPDDHAL_SETEXCLUSIVEMODE,
    FlipToGDISurface: LPDDHAL_FLIPTOGDISURFACE,
};
// --------------------------------------------------------
// Type: LPDDHALPALCB_DESTROYPALETTE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALPALCB_DESTROYPALETTE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALPALCB_SETENTRIES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALPALCB_SETENTRIES = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DDHAL_DDPALETTECALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_DDPALETTECALLBACKS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    DestroyPalette: LPDDHALPALCB_DESTROYPALETTE,
    SetEntries: LPDDHALPALCB_SETENTRIES,
};
// --------------------------------------------------------
// Type: LPDDHALSURFCB_LOCK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALSURFCB_LOCK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALSURFCB_UNLOCK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALSURFCB_UNLOCK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALSURFCB_BLT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALSURFCB_BLT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALSURFCB_UPDATEOVERLAY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALSURFCB_UPDATEOVERLAY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALSURFCB_SETOVERLAYPOSITION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALSURFCB_SETOVERLAYPOSITION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALSURFCB_SETPALETTE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALSURFCB_SETPALETTE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALSURFCB_FLIP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALSURFCB_FLIP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALSURFCB_DESTROYSURFACE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALSURFCB_DESTROYSURFACE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALSURFCB_SETCLIPLIST
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALSURFCB_SETCLIPLIST = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALSURFCB_ADDATTACHEDSURFACE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALSURFCB_ADDATTACHEDSURFACE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALSURFCB_SETCOLORKEY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALSURFCB_SETCOLORKEY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALSURFCB_GETBLTSTATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALSURFCB_GETBLTSTATUS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALSURFCB_GETFLIPSTATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALSURFCB_GETFLIPSTATUS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DDHAL_DDSURFACECALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_DDSURFACECALLBACKS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    DestroySurface: LPDDHALSURFCB_DESTROYSURFACE,
    Flip: LPDDHALSURFCB_FLIP,
    SetClipList: LPDDHALSURFCB_SETCLIPLIST,
    Lock: LPDDHALSURFCB_LOCK,
    Unlock: LPDDHALSURFCB_UNLOCK,
    Blt: LPDDHALSURFCB_BLT,
    SetColorKey: LPDDHALSURFCB_SETCOLORKEY,
    AddAttachedSurface: LPDDHALSURFCB_ADDATTACHEDSURFACE,
    GetBltStatus: LPDDHALSURFCB_GETBLTSTATUS,
    GetFlipStatus: LPDDHALSURFCB_GETFLIPSTATUS,
    UpdateOverlay: LPDDHALSURFCB_UPDATEOVERLAY,
    SetOverlayPosition: LPDDHALSURFCB_SETOVERLAYPOSITION,
    reserved4: ?*opaque{},
    SetPalette: LPDDHALSURFCB_SETPALETTE,
};
// --------------------------------------------------------
// Type: LPDDHAL_GETAVAILDRIVERMEMORY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_GETAVAILDRIVERMEMORY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHAL_UPDATENONLOCALHEAP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_UPDATENONLOCALHEAP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHAL_GETHEAPALIGNMENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_GETHEAPALIGNMENT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DDHAL_DDMISCELLANEOUSCALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_DDMISCELLANEOUSCALLBACKS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    GetAvailDriverMemory: LPDDHAL_GETAVAILDRIVERMEMORY,
    UpdateNonLocalHeap: LPDDHAL_UPDATENONLOCALHEAP,
    GetHeapAlignment: LPDDHAL_GETHEAPALIGNMENT,
    GetSysmemBltStatus: LPDDHALSURFCB_GETBLTSTATUS,
};
// --------------------------------------------------------
// Type: LPDDHAL_CREATESURFACEEX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_CREATESURFACEEX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHAL_GETDRIVERSTATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_GETDRIVERSTATE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHAL_DESTROYDDLOCAL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_DESTROYDDLOCAL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DDHAL_DDMISCELLANEOUS2CALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_DDMISCELLANEOUS2CALLBACKS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    Reserved: ?*opaque{},
    CreateSurfaceEx: LPDDHAL_CREATESURFACEEX,
    GetDriverState: LPDDHAL_GETDRIVERSTATE,
    DestroyDDLocal: LPDDHAL_DESTROYDDLOCAL,
};
// --------------------------------------------------------
// Type: LPDDHALEXEBUFCB_CANCREATEEXEBUF
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALEXEBUFCB_CANCREATEEXEBUF = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALEXEBUFCB_CREATEEXEBUF
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALEXEBUFCB_CREATEEXEBUF = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALEXEBUFCB_DESTROYEXEBUF
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALEXEBUFCB_DESTROYEXEBUF = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALEXEBUFCB_LOCKEXEBUF
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALEXEBUFCB_LOCKEXEBUF = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALEXEBUFCB_UNLOCKEXEBUF
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALEXEBUFCB_UNLOCKEXEBUF = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DDHAL_DDEXEBUFCALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_DDEXEBUFCALLBACKS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    CanCreateExecuteBuffer: LPDDHALEXEBUFCB_CANCREATEEXEBUF,
    CreateExecuteBuffer: LPDDHALEXEBUFCB_CREATEEXEBUF,
    DestroyExecuteBuffer: LPDDHALEXEBUFCB_DESTROYEXEBUF,
    LockExecuteBuffer: LPDDHALEXEBUFCB_LOCKEXEBUF,
    UnlockExecuteBuffer: LPDDHALEXEBUFCB_UNLOCKEXEBUF,
};
// --------------------------------------------------------
// Type: LPDDHALVPORTCB_CANCREATEVIDEOPORT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALVPORTCB_CANCREATEVIDEOPORT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALVPORTCB_CREATEVIDEOPORT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALVPORTCB_CREATEVIDEOPORT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALVPORTCB_FLIP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALVPORTCB_FLIP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALVPORTCB_GETBANDWIDTH
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALVPORTCB_GETBANDWIDTH = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALVPORTCB_GETINPUTFORMATS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALVPORTCB_GETINPUTFORMATS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALVPORTCB_GETOUTPUTFORMATS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALVPORTCB_GETOUTPUTFORMATS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALVPORTCB_GETFIELD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALVPORTCB_GETFIELD = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALVPORTCB_GETLINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALVPORTCB_GETLINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALVPORTCB_GETVPORTCONNECT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALVPORTCB_GETVPORTCONNECT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALVPORTCB_DESTROYVPORT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALVPORTCB_DESTROYVPORT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALVPORTCB_GETFLIPSTATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALVPORTCB_GETFLIPSTATUS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALVPORTCB_UPDATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALVPORTCB_UPDATE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALVPORTCB_WAITFORSYNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALVPORTCB_WAITFORSYNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALVPORTCB_GETSIGNALSTATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALVPORTCB_GETSIGNALSTATUS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALVPORTCB_COLORCONTROL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALVPORTCB_COLORCONTROL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DDHAL_DDVIDEOPORTCALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_DDVIDEOPORTCALLBACKS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    CanCreateVideoPort: LPDDHALVPORTCB_CANCREATEVIDEOPORT,
    CreateVideoPort: LPDDHALVPORTCB_CREATEVIDEOPORT,
    FlipVideoPort: LPDDHALVPORTCB_FLIP,
    GetVideoPortBandwidth: LPDDHALVPORTCB_GETBANDWIDTH,
    GetVideoPortInputFormats: LPDDHALVPORTCB_GETINPUTFORMATS,
    GetVideoPortOutputFormats: LPDDHALVPORTCB_GETOUTPUTFORMATS,
    lpReserved1: ?*opaque{},
    GetVideoPortField: LPDDHALVPORTCB_GETFIELD,
    GetVideoPortLine: LPDDHALVPORTCB_GETLINE,
    GetVideoPortConnectInfo: LPDDHALVPORTCB_GETVPORTCONNECT,
    DestroyVideoPort: LPDDHALVPORTCB_DESTROYVPORT,
    GetVideoPortFlipStatus: LPDDHALVPORTCB_GETFLIPSTATUS,
    UpdateVideoPort: LPDDHALVPORTCB_UPDATE,
    WaitForVideoPortSync: LPDDHALVPORTCB_WAITFORSYNC,
    GetVideoSignalStatus: LPDDHALVPORTCB_GETSIGNALSTATUS,
    ColorControl: LPDDHALVPORTCB_COLORCONTROL,
};
// --------------------------------------------------------
// Type: LPDDHALCOLORCB_COLORCONTROL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALCOLORCB_COLORCONTROL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DDHAL_DDCOLORCONTROLCALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_DDCOLORCONTROLCALLBACKS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    ColorControl: LPDDHALCOLORCB_COLORCONTROL,
};
// --------------------------------------------------------
// Type: LPDDHALKERNELCB_SYNCSURFACE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALKERNELCB_SYNCSURFACE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALKERNELCB_SYNCVIDEOPORT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALKERNELCB_SYNCVIDEOPORT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DDHAL_DDKERNELCALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_DDKERNELCALLBACKS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    SyncSurfaceData: LPDDHALKERNELCB_SYNCSURFACE,
    SyncVideoPortData: LPDDHALKERNELCB_SYNCVIDEOPORT,
};
// --------------------------------------------------------
// Type: LPDDGAMMACALIBRATORPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDGAMMACALIBRATORPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALMOCOMPCB_GETGUIDS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALMOCOMPCB_GETGUIDS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALMOCOMPCB_GETFORMATS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALMOCOMPCB_GETFORMATS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALMOCOMPCB_CREATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALMOCOMPCB_CREATE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALMOCOMPCB_GETCOMPBUFFINFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALMOCOMPCB_GETCOMPBUFFINFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALMOCOMPCB_GETINTERNALINFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALMOCOMPCB_GETINTERNALINFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALMOCOMPCB_BEGINFRAME
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALMOCOMPCB_BEGINFRAME = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALMOCOMPCB_ENDFRAME
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALMOCOMPCB_ENDFRAME = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALMOCOMPCB_RENDER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALMOCOMPCB_RENDER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALMOCOMPCB_QUERYSTATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALMOCOMPCB_QUERYSTATUS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHALMOCOMPCB_DESTROY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHALMOCOMPCB_DESTROY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DDHAL_DDMOTIONCOMPCALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_DDMOTIONCOMPCALLBACKS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    GetMoCompGuids: LPDDHALMOCOMPCB_GETGUIDS,
    GetMoCompFormats: LPDDHALMOCOMPCB_GETFORMATS,
    CreateMoComp: LPDDHALMOCOMPCB_CREATE,
    GetMoCompBuffInfo: LPDDHALMOCOMPCB_GETCOMPBUFFINFO,
    GetInternalMoCompInfo: LPDDHALMOCOMPCB_GETINTERNALINFO,
    BeginMoCompFrame: LPDDHALMOCOMPCB_BEGINFRAME,
    EndMoCompFrame: LPDDHALMOCOMPCB_ENDFRAME,
    RenderMoComp: LPDDHALMOCOMPCB_RENDER,
    QueryMoCompStatus: LPDDHALMOCOMPCB_QUERYSTATUS,
    DestroyMoComp: LPDDHALMOCOMPCB_DESTROY,
};
// --------------------------------------------------------
// Type: DDNONLOCALVIDMEMCAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDNONLOCALVIDMEMCAPS = extern struct {
    dwSize: u32,
    dwNLVBCaps: u32,
    dwNLVBCaps2: u32,
    dwNLVBCKeyCaps: u32,
    dwNLVBFXCaps: u32,
    dwNLVBRops: ?[*]u32,
};
// --------------------------------------------------------
// Type: DDMORESURFACECAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDMORESURFACECAPS = extern struct {
    dwSize: u32,
    ddsCapsMore: DDSCAPSEX,
    ddsExtendedHeapRestrictions: ?[*]tagExtendedHeapRestrictions,
    // --------------------------------------------------------
    // Type: tagExtendedHeapRestrictions
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const tagExtendedHeapRestrictions = extern struct {
        ddsCapsEx: DDSCAPSEX,
        ddsCapsExAlt: DDSCAPSEX,
    };
};
// --------------------------------------------------------
// Type: DDSTEREOMODE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDSTEREOMODE = extern struct {
    dwSize: u32,
    dwHeight: u32,
    dwWidth: u32,
    dwBpp: u32,
    dwRefreshRate: u32,
    bSupported: BOOL,
};
// --------------------------------------------------------
// Type: DDRAWI_DDRAWPALETTE_INT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DDRAWPALETTE_INT = extern struct {
    lpVtbl: ?*opaque{},
    lpLcl: ?*DDRAWI_DDRAWPALETTE_LCL,
    lpLink: ?*DDRAWI_DDRAWPALETTE_INT,
    dwIntRefCnt: u32,
};
// --------------------------------------------------------
// Type: DDRAWI_DDRAWPALETTE_GBL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DDRAWPALETTE_GBL = extern struct {
    dwRefCnt: u32,
    dwFlags: u32,
    lpDD_lcl: ?*DDRAWI_DIRECTDRAW_LCL,
    dwProcessId: u32,
    lpColorTable: ?*PALETTEENTRY,
    Anonymous: _Anonymous_e__Union,
    dwDriverReserved: u32,
    dwContentsStamp: u32,
    dwSaveStamp: u32,
    dwHandle: u32,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: DDRAWI_DDRAWPALETTE_LCL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DDRAWPALETTE_LCL = extern struct {
    lpPalMore: u32,
    lpGbl: ?*DDRAWI_DDRAWPALETTE_GBL,
    dwUnused0: ?*opaque{},
    dwLocalRefCnt: u32,
    pUnkOuter: IUnknown,
    lpDD_lcl: ?*DDRAWI_DIRECTDRAW_LCL,
    dwReserved1: ?*opaque{},
    dwDDRAWReserved1: ?*opaque{},
    dwDDRAWReserved2: ?*opaque{},
    dwDDRAWReserved3: ?*opaque{},
};
// --------------------------------------------------------
// Type: DDRAWI_DDRAWCLIPPER_INT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DDRAWCLIPPER_INT = extern struct {
    lpVtbl: ?*opaque{},
    lpLcl: ?*DDRAWI_DDRAWCLIPPER_LCL,
    lpLink: ?*DDRAWI_DDRAWCLIPPER_INT,
    dwIntRefCnt: u32,
};
// --------------------------------------------------------
// Type: DDRAWI_DDRAWCLIPPER_GBL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DDRAWCLIPPER_GBL = extern struct {
    dwRefCnt: u32,
    dwFlags: u32,
    lpDD: ?*DDRAWI_DIRECTDRAW_GBL,
    dwProcessId: u32,
    dwReserved1: ?*opaque{},
    hWnd: ?*opaque{},
    lpStaticClipList: ?*RGNDATA,
};
// --------------------------------------------------------
// Type: DDRAWI_DDRAWCLIPPER_LCL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DDRAWCLIPPER_LCL = extern struct {
    lpClipMore: u32,
    lpGbl: ?*DDRAWI_DDRAWCLIPPER_GBL,
    lpDD_lcl: ?*DDRAWI_DIRECTDRAW_LCL,
    dwLocalRefCnt: u32,
    pUnkOuter: IUnknown,
    lpDD_int: ?*DDRAWI_DIRECTDRAW_INT,
    dwReserved1: ?*opaque{},
    pAddrefedThisOwner: IUnknown,
};
// --------------------------------------------------------
// Type: ATTACHLIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ATTACHLIST = extern struct {
    dwFlags: u32,
    lpLink: ?*ATTACHLIST,
    lpAttached: ?*DDRAWI_DDRAWSURFACE_LCL,
    lpIAttached: ?*DDRAWI_DDRAWSURFACE_INT,
};
// --------------------------------------------------------
// Type: DBLNODE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DBLNODE = extern struct {
    next: ?*DBLNODE,
    prev: ?*DBLNODE,
    object: ?*DDRAWI_DDRAWSURFACE_LCL,
    object_int: ?*DDRAWI_DDRAWSURFACE_INT,
};
// --------------------------------------------------------
// Type: ACCESSRECTLIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACCESSRECTLIST = extern struct {
    lpLink: ?*ACCESSRECTLIST,
    rDest: RECT,
    lpOwner: ?*DDRAWI_DIRECTDRAW_LCL,
    lpSurfaceData: ?*opaque{},
    dwFlags: u32,
    lpHeapAliasInfo: ?*HEAPALIASINFO,
};
// --------------------------------------------------------
// Type: DDRAWI_DDRAWSURFACE_INT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DDRAWSURFACE_INT = extern struct {
    lpVtbl: ?*opaque{},
    lpLcl: ?*DDRAWI_DDRAWSURFACE_LCL,
    lpLink: ?*DDRAWI_DDRAWSURFACE_INT,
    dwIntRefCnt: u32,
};
// --------------------------------------------------------
// Type: DDRAWI_DDRAWSURFACE_GBL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DDRAWSURFACE_GBL = extern struct {
    dwRefCnt: u32,
    dwGlobalFlags: u32,
    Anonymous1: _Anonymous1_e__Union,
    Anonymous2: _Anonymous2_e__Union,
    Anonymous3: _Anonymous3_e__Union,
    fpVidMem: ?*opaque{},
    Anonymous4: _Anonymous4_e__Union,
    wHeight: u16,
    wWidth: u16,
    dwUsageCount: u32,
    dwReserved1: ?*opaque{},
    ddpfSurface: DDPIXELFORMAT,
    // --------------------------------------------------------
    // Type: _Anonymous3_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous3_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous4_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous4_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: DDRAWI_DDRAWSURFACE_GBL_MORE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DDRAWSURFACE_GBL_MORE = extern struct {
    dwSize: u32,
    Anonymous: _Anonymous_e__Union,
    pPageTable: ?*u32,
    cPages: u32,
    dwSavedDCContext: ?*opaque{},
    fpAliasedVidMem: ?*opaque{},
    dwDriverReserved: ?*opaque{},
    dwHELReserved: ?*opaque{},
    cPageUnlocks: u32,
    hKernelSurface: ?*opaque{},
    dwKernelRefCnt: u32,
    lpColorInfo: ?*DDCOLORCONTROL,
    fpNTAlias: ?*opaque{},
    dwContentsStamp: u32,
    lpvUnswappedDriverReserved: ?*opaque{},
    lpDDRAWReserved2: ?*opaque{},
    dwDDRAWReserved1: u32,
    dwDDRAWReserved2: u32,
    fpAliasOfVidMem: ?*opaque{},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: DDRAWI_DDRAWSURFACE_MORE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DDRAWSURFACE_MORE = extern struct {
    dwSize: u32,
    lpIUnknowns: ?*IUNKNOWN_LIST,
    lpDD_lcl: ?*DDRAWI_DIRECTDRAW_LCL,
    dwPageLockCount: u32,
    dwBytesAllocated: u32,
    lpDD_int: ?*DDRAWI_DIRECTDRAW_INT,
    dwMipMapCount: u32,
    lpDDIClipper: ?*DDRAWI_DDRAWCLIPPER_INT,
    lpHeapAliasInfo: ?*HEAPALIASINFO,
    dwOverlayFlags: u32,
    rgjunc: ?*opaque{},
    lpVideoPort: ?*DDRAWI_DDVIDEOPORT_LCL,
    lpddOverlayFX: ?*DDOVERLAYFX,
    ddsCapsEx: DDSCAPSEX,
    dwTextureStage: u32,
    lpDDRAWReserved: ?*opaque{},
    lpDDRAWReserved2: ?*opaque{},
    lpDDrawReserved3: ?*opaque{},
    dwDDrawReserved4: u32,
    lpDDrawReserved5: ?*opaque{},
    lpGammaRamp: ?*u32,
    lpOriginalGammaRamp: ?*u32,
    lpDDrawReserved6: ?*opaque{},
    dwSurfaceHandle: u32,
    qwDDrawReserved8: ?[*]u32,
    lpDDrawReserved9: ?*opaque{},
    cSurfaces: u32,
    pCreatedDDSurfaceDesc2: ?*DDSURFACEDESC2,
    slist: ?*?*DDRAWI_DDRAWSURFACE_LCL,
    dwFVF: u32,
    lpVB: ?*opaque{},
};
// --------------------------------------------------------
// Type: DDRAWI_DDRAWSURFACE_LCL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DDRAWSURFACE_LCL = extern struct {
    lpSurfMore: ?*DDRAWI_DDRAWSURFACE_MORE,
    lpGbl: ?*DDRAWI_DDRAWSURFACE_GBL,
    hDDSurface: ?*opaque{},
    lpAttachList: ?*ATTACHLIST,
    lpAttachListFrom: ?*ATTACHLIST,
    dwLocalRefCnt: u32,
    dwProcessId: u32,
    dwFlags: u32,
    ddsCaps: DDSCAPS,
    Anonymous1: _Anonymous1_e__Union,
    Anonymous2: _Anonymous2_e__Union,
    dwModeCreatedIn: u32,
    dwBackBufferCount: u32,
    ddckCKDestBlt: DDCOLORKEY,
    ddckCKSrcBlt: DDCOLORKEY,
    hDC: ?*opaque{},
    dwReserved1: ?*opaque{},
    ddckCKSrcOverlay: DDCOLORKEY,
    ddckCKDestOverlay: DDCOLORKEY,
    lpSurfaceOverlaying: ?*DDRAWI_DDRAWSURFACE_INT,
    dbnOverlayNode: DBLNODE,
    rcOverlaySrc: RECT,
    rcOverlayDest: RECT,
    dwClrXparent: u32,
    dwAlpha: u32,
    lOverlayX: i32,
    lOverlayY: i32,
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: DDHALMODEINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHALMODEINFO = extern struct {
    dwWidth: u32,
    dwHeight: u32,
    lPitch: i32,
    dwBPP: u32,
    wFlags: u16,
    wRefreshRate: u16,
    dwRBitMask: u32,
    dwGBitMask: u32,
    dwBBitMask: u32,
    dwAlphaBitMask: u32,
};
// --------------------------------------------------------
// Type: DDRAWI_DIRECTDRAW_INT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DIRECTDRAW_INT = extern struct {
    lpVtbl: ?*opaque{},
    lpLcl: ?*DDRAWI_DIRECTDRAW_LCL,
    lpLink: ?*DDRAWI_DIRECTDRAW_INT,
    dwIntRefCnt: u32,
};
// --------------------------------------------------------
// Type: DDHAL_CALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_CALLBACKS = extern struct {
    cbDDCallbacks: DDHAL_DDCALLBACKS,
    cbDDSurfaceCallbacks: DDHAL_DDSURFACECALLBACKS,
    cbDDPaletteCallbacks: DDHAL_DDPALETTECALLBACKS,
    HALDD: DDHAL_DDCALLBACKS,
    HALDDSurface: DDHAL_DDSURFACECALLBACKS,
    HALDDPalette: DDHAL_DDPALETTECALLBACKS,
    HELDD: DDHAL_DDCALLBACKS,
    HELDDSurface: DDHAL_DDSURFACECALLBACKS,
    HELDDPalette: DDHAL_DDPALETTECALLBACKS,
    cbDDExeBufCallbacks: DDHAL_DDEXEBUFCALLBACKS,
    HALDDExeBuf: DDHAL_DDEXEBUFCALLBACKS,
    HELDDExeBuf: DDHAL_DDEXEBUFCALLBACKS,
    cbDDVideoPortCallbacks: DDHAL_DDVIDEOPORTCALLBACKS,
    HALDDVideoPort: DDHAL_DDVIDEOPORTCALLBACKS,
    cbDDColorControlCallbacks: DDHAL_DDCOLORCONTROLCALLBACKS,
    HALDDColorControl: DDHAL_DDCOLORCONTROLCALLBACKS,
    cbDDMiscellaneousCallbacks: DDHAL_DDMISCELLANEOUSCALLBACKS,
    HALDDMiscellaneous: DDHAL_DDMISCELLANEOUSCALLBACKS,
    cbDDKernelCallbacks: DDHAL_DDKERNELCALLBACKS,
    HALDDKernel: DDHAL_DDKERNELCALLBACKS,
    cbDDMotionCompCallbacks: DDHAL_DDMOTIONCOMPCALLBACKS,
    HALDDMotionComp: DDHAL_DDMOTIONCOMPCALLBACKS,
};
// --------------------------------------------------------
// Type: DDRAWI_DIRECTDRAW_GBL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DIRECTDRAW_GBL = extern struct {
    dwRefCnt: u32,
    dwFlags: u32,
    fpPrimaryOrig: ?*opaque{},
    ddCaps: DDCORECAPS,
    dwInternal1: u32,
    dwUnused1: ?[*]u32,
    lpDDCBtmp: ?*DDHAL_CALLBACKS,
    dsList: ?*DDRAWI_DDRAWSURFACE_INT,
    palList: ?*DDRAWI_DDRAWPALETTE_INT,
    clipperList: ?*DDRAWI_DDRAWCLIPPER_INT,
    lp16DD: ?*DDRAWI_DIRECTDRAW_GBL,
    dwMaxOverlays: u32,
    dwCurrOverlays: u32,
    dwMonitorFrequency: u32,
    ddHELCaps: DDCORECAPS,
    dwUnused2: ?[*]u32,
    ddckCKDestOverlay: DDCOLORKEY,
    ddckCKSrcOverlay: DDCOLORKEY,
    vmiData: VIDMEMINFO,
    lpDriverHandle: ?*opaque{},
    lpExclusiveOwner: ?*DDRAWI_DIRECTDRAW_LCL,
    dwModeIndex: u32,
    dwModeIndexOrig: u32,
    dwNumFourCC: u32,
    lpdwFourCC: ?*u32,
    dwNumModes: u32,
    lpModeInfo: ?*DDHALMODEINFO,
    plProcessList: PROCESS_LIST,
    dwSurfaceLockCount: u32,
    dwAliasedLockCnt: u32,
    dwReserved3: ?*opaque{},
    hDD: ?*opaque{},
    cObsolete: ?[*]i8,
    dwReserved1: u32,
    dwReserved2: u32,
    dbnOverlayRoot: DBLNODE,
    lpwPDeviceFlags: ?*u16,
    dwPDevice: u32,
    dwWin16LockCnt: u32,
    dwUnused3: u32,
    hInstance: u32,
    dwEvent16: u32,
    dwSaveNumModes: u32,
    lpD3DGlobalDriverData: ?*opaque{},
    lpD3DHALCallbacks: ?*opaque{},
    ddBothCaps: DDCORECAPS,
    lpDDVideoPortCaps: ?*DDVIDEOPORTCAPS,
    dvpList: ?*DDRAWI_DDVIDEOPORT_INT,
    lpD3DHALCallbacks2: ?*opaque{},
    rectDevice: RECT,
    cMonitors: u32,
    gpbmiSrc: ?*opaque{},
    gpbmiDest: ?*opaque{},
    phaiHeapAliases: ?*HEAPALIASINFO,
    hKernelHandle: ?*opaque{},
    pfnNotifyProc: ?*opaque{},
    lpDDKernelCaps: ?*DDKERNELCAPS,
    lpddNLVCaps: ?*DDNONLOCALVIDMEMCAPS,
    lpddNLVHELCaps: ?*DDNONLOCALVIDMEMCAPS,
    lpddNLVBothCaps: ?*DDNONLOCALVIDMEMCAPS,
    lpD3DExtendedCaps: ?*opaque{},
    dwDOSBoxEvent: u32,
    rectDesktop: RECT,
    cDriverName: ?[*]i8,
    lpD3DHALCallbacks3: ?*opaque{},
    dwNumZPixelFormats: u32,
    lpZPixelFormats: ?*DDPIXELFORMAT,
    mcList: ?*DDRAWI_DDMOTIONCOMP_INT,
    hDDVxd: u32,
    ddsCapsMore: DDSCAPSEX,
};
// --------------------------------------------------------
// Type: DDRAWI_DIRECTDRAW_LCL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DIRECTDRAW_LCL = extern struct {
    lpDDMore: u32,
    lpGbl: ?*DDRAWI_DIRECTDRAW_GBL,
    dwUnused0: u32,
    dwLocalFlags: u32,
    dwLocalRefCnt: u32,
    dwProcessId: u32,
    pUnkOuter: IUnknown,
    dwObsolete1: u32,
    hWnd: ?*opaque{},
    hDC: ?*opaque{},
    dwErrorMode: u32,
    lpPrimary: ?*DDRAWI_DDRAWSURFACE_INT,
    lpCB: ?*DDRAWI_DDRAWSURFACE_INT,
    dwPreferredMode: u32,
    hD3DInstance: HINSTANCE,
    pD3DIUnknown: IUnknown,
    lpDDCB: ?*DDHAL_CALLBACKS,
    hDDVxd: ?*opaque{},
    dwAppHackFlags: u32,
    hFocusWnd: ?*opaque{},
    dwHotTracking: u32,
    dwIMEState: u32,
    hWndPopup: ?*opaque{},
    hDD: ?*opaque{},
    hGammaCalibrator: ?*opaque{},
    lpGammaCalibrator: LPDDGAMMACALIBRATORPROC,
};
// --------------------------------------------------------
// Type: DDRAWI_DDVIDEOPORT_INT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DDVIDEOPORT_INT = extern struct {
    lpVtbl: ?*opaque{},
    lpLcl: ?*DDRAWI_DDVIDEOPORT_LCL,
    lpLink: ?*DDRAWI_DDVIDEOPORT_INT,
    dwIntRefCnt: u32,
    dwFlags: u32,
};
// --------------------------------------------------------
// Type: DDRAWI_DDVIDEOPORT_LCL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DDVIDEOPORT_LCL = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_LCL,
    ddvpDesc: DDVIDEOPORTDESC,
    ddvpInfo: DDVIDEOPORTINFO,
    lpSurface: ?*DDRAWI_DDRAWSURFACE_INT,
    lpVBISurface: ?*DDRAWI_DDRAWSURFACE_INT,
    lpFlipInts: ?*?*DDRAWI_DDRAWSURFACE_INT,
    dwNumAutoflip: u32,
    dwProcessID: u32,
    dwStateFlags: u32,
    dwFlags: u32,
    dwRefCnt: u32,
    fpLastFlip: ?*opaque{},
    dwReserved1: ?*opaque{},
    dwReserved2: ?*opaque{},
    hDDVideoPort: HANDLE,
    dwNumVBIAutoflip: u32,
    lpVBIDesc: ?*DDVIDEOPORTDESC,
    lpVideoDesc: ?*DDVIDEOPORTDESC,
    lpVBIInfo: ?*DDVIDEOPORTINFO,
    lpVideoInfo: ?*DDVIDEOPORTINFO,
    dwVBIProcessID: u32,
    lpVPNotify: ?*DDRAWI_DDVIDEOPORT_INT,
};
// --------------------------------------------------------
// Type: DDRAWI_DDMOTIONCOMP_INT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DDMOTIONCOMP_INT = extern struct {
    lpVtbl: ?*opaque{},
    lpLcl: ?*DDRAWI_DDMOTIONCOMP_LCL,
    lpLink: ?*DDRAWI_DDMOTIONCOMP_INT,
    dwIntRefCnt: u32,
};
// --------------------------------------------------------
// Type: DDRAWI_DDMOTIONCOMP_LCL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDRAWI_DDMOTIONCOMP_LCL = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_LCL,
    guid: Guid,
    dwUncompWidth: u32,
    dwUncompHeight: u32,
    ddUncompPixelFormat: DDPIXELFORMAT,
    dwInternalFlags: u32,
    dwRefCnt: u32,
    dwProcessId: u32,
    hMoComp: HANDLE,
    dwDriverReserved1: u32,
    dwDriverReserved2: u32,
    dwDriverReserved3: u32,
    lpDriverReserved1: ?*opaque{},
    lpDriverReserved2: ?*opaque{},
    lpDriverReserved3: ?*opaque{},
};
// --------------------------------------------------------
// Type: DDHALINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHALINFO = extern struct {
    dwSize: u32,
    lpDDCallbacks: ?*DDHAL_DDCALLBACKS,
    lpDDSurfaceCallbacks: ?*DDHAL_DDSURFACECALLBACKS,
    lpDDPaletteCallbacks: ?*DDHAL_DDPALETTECALLBACKS,
    vmiData: VIDMEMINFO,
    ddCaps: DDCORECAPS,
    dwMonitorFrequency: u32,
    GetDriverInfo: LPDDHAL_GETDRIVERINFO,
    dwModeIndex: u32,
    lpdwFourCC: ?*u32,
    dwNumModes: u32,
    lpModeInfo: ?*DDHALMODEINFO,
    dwFlags: u32,
    lpPDevice: ?*opaque{},
    hInstance: u32,
    lpD3DGlobalDriverData: ?*opaque{},
    lpD3DHALCallbacks: ?*opaque{},
    lpDDExeBufCallbacks: ?*DDHAL_DDEXEBUFCALLBACKS,
};
// --------------------------------------------------------
// Type: LPDDHAL_SETINFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_SETINFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHAL_VIDMEMALLOC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_VIDMEMALLOC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDDHAL_VIDMEMFREE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDDHAL_VIDMEMFREE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DDHALDDRAWFNS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHALDDRAWFNS = extern struct {
    dwSize: u32,
    lpSetInfo: LPDDHAL_SETINFO,
    lpVidMemAlloc: LPDDHAL_VIDMEMALLOC,
    lpVidMemFree: LPDDHAL_VIDMEMFREE,
};
// --------------------------------------------------------
// Type: DDHAL_BLTDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_BLTDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_GBL,
    lpDDDestSurface: ?*DDRAWI_DDRAWSURFACE_LCL,
    rDest: RECTL,
    lpDDSrcSurface: ?*DDRAWI_DDRAWSURFACE_LCL,
    rSrc: RECTL,
    dwFlags: u32,
    dwROPFlags: u32,
    bltFX: DDBLTFX,
    ddRVal: HRESULT,
    Blt: LPDDHALSURFCB_BLT,
    IsClipped: BOOL,
    rOrigDest: RECTL,
    rOrigSrc: RECTL,
    dwRectCnt: u32,
    prDestRects: ?*RECT,
};
// --------------------------------------------------------
// Type: DDHAL_LOCKDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_LOCKDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_GBL,
    lpDDSurface: ?*DDRAWI_DDRAWSURFACE_LCL,
    bHasRect: u32,
    rArea: RECTL,
    lpSurfData: ?*opaque{},
    ddRVal: HRESULT,
    Lock: LPDDHALSURFCB_LOCK,
    dwFlags: u32,
};
// --------------------------------------------------------
// Type: DDHAL_UNLOCKDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_UNLOCKDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_GBL,
    lpDDSurface: ?*DDRAWI_DDRAWSURFACE_LCL,
    ddRVal: HRESULT,
    Unlock: LPDDHALSURFCB_UNLOCK,
};
// --------------------------------------------------------
// Type: DDHAL_UPDATEOVERLAYDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_UPDATEOVERLAYDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_GBL,
    lpDDDestSurface: ?*DDRAWI_DDRAWSURFACE_LCL,
    rDest: RECTL,
    lpDDSrcSurface: ?*DDRAWI_DDRAWSURFACE_LCL,
    rSrc: RECTL,
    dwFlags: u32,
    overlayFX: DDOVERLAYFX,
    ddRVal: HRESULT,
    UpdateOverlay: LPDDHALSURFCB_UPDATEOVERLAY,
};
// --------------------------------------------------------
// Type: DDHAL_SETOVERLAYPOSITIONDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_SETOVERLAYPOSITIONDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_GBL,
    lpDDSrcSurface: ?*DDRAWI_DDRAWSURFACE_LCL,
    lpDDDestSurface: ?*DDRAWI_DDRAWSURFACE_LCL,
    lXPos: i32,
    lYPos: i32,
    ddRVal: HRESULT,
    SetOverlayPosition: LPDDHALSURFCB_SETOVERLAYPOSITION,
};
// --------------------------------------------------------
// Type: DDHAL_SETPALETTEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_SETPALETTEDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_GBL,
    lpDDSurface: ?*DDRAWI_DDRAWSURFACE_LCL,
    lpDDPalette: ?*DDRAWI_DDRAWPALETTE_GBL,
    ddRVal: HRESULT,
    SetPalette: LPDDHALSURFCB_SETPALETTE,
    Attach: BOOL,
};
// --------------------------------------------------------
// Type: DDHAL_FLIPDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_FLIPDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_GBL,
    lpSurfCurr: ?*DDRAWI_DDRAWSURFACE_LCL,
    lpSurfTarg: ?*DDRAWI_DDRAWSURFACE_LCL,
    dwFlags: u32,
    ddRVal: HRESULT,
    Flip: LPDDHALSURFCB_FLIP,
    lpSurfCurrLeft: ?*DDRAWI_DDRAWSURFACE_LCL,
    lpSurfTargLeft: ?*DDRAWI_DDRAWSURFACE_LCL,
};
// --------------------------------------------------------
// Type: DDHAL_DESTROYSURFACEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_DESTROYSURFACEDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_GBL,
    lpDDSurface: ?*DDRAWI_DDRAWSURFACE_LCL,
    ddRVal: HRESULT,
    DestroySurface: LPDDHALSURFCB_DESTROYSURFACE,
};
// --------------------------------------------------------
// Type: DDHAL_SETCLIPLISTDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_SETCLIPLISTDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_GBL,
    lpDDSurface: ?*DDRAWI_DDRAWSURFACE_LCL,
    ddRVal: HRESULT,
    SetClipList: LPDDHALSURFCB_SETCLIPLIST,
};
// --------------------------------------------------------
// Type: DDHAL_ADDATTACHEDSURFACEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_ADDATTACHEDSURFACEDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_GBL,
    lpDDSurface: ?*DDRAWI_DDRAWSURFACE_LCL,
    lpSurfAttached: ?*DDRAWI_DDRAWSURFACE_LCL,
    ddRVal: HRESULT,
    AddAttachedSurface: LPDDHALSURFCB_ADDATTACHEDSURFACE,
};
// --------------------------------------------------------
// Type: DDHAL_SETCOLORKEYDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_SETCOLORKEYDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_GBL,
    lpDDSurface: ?*DDRAWI_DDRAWSURFACE_LCL,
    dwFlags: u32,
    ckNew: DDCOLORKEY,
    ddRVal: HRESULT,
    SetColorKey: LPDDHALSURFCB_SETCOLORKEY,
};
// --------------------------------------------------------
// Type: DDHAL_GETBLTSTATUSDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETBLTSTATUSDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_GBL,
    lpDDSurface: ?*DDRAWI_DDRAWSURFACE_LCL,
    dwFlags: u32,
    ddRVal: HRESULT,
    GetBltStatus: LPDDHALSURFCB_GETBLTSTATUS,
};
// --------------------------------------------------------
// Type: DDHAL_GETFLIPSTATUSDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETFLIPSTATUSDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_GBL,
    lpDDSurface: ?*DDRAWI_DDRAWSURFACE_LCL,
    dwFlags: u32,
    ddRVal: HRESULT,
    GetFlipStatus: LPDDHALSURFCB_GETFLIPSTATUS,
};
// --------------------------------------------------------
// Type: DDHAL_DESTROYPALETTEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_DESTROYPALETTEDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_GBL,
    lpDDPalette: ?*DDRAWI_DDRAWPALETTE_GBL,
    ddRVal: HRESULT,
    DestroyPalette: LPDDHALPALCB_DESTROYPALETTE,
};
// --------------------------------------------------------
// Type: DDHAL_SETENTRIESDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_SETENTRIESDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_GBL,
    lpDDPalette: ?*DDRAWI_DDRAWPALETTE_GBL,
    dwBase: u32,
    dwNumEntries: u32,
    lpEntries: ?*PALETTEENTRY,
    ddRVal: HRESULT,
    SetEntries: LPDDHALPALCB_SETENTRIES,
};
// --------------------------------------------------------
// Type: DDHAL_CREATESURFACEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_CREATESURFACEDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_GBL,
    lpDDSurfaceDesc: ?*DDSURFACEDESC,
    lplpSList: ?*?*DDRAWI_DDRAWSURFACE_LCL,
    dwSCnt: u32,
    ddRVal: HRESULT,
    CreateSurface: LPDDHAL_CREATESURFACE,
};
// --------------------------------------------------------
// Type: DDHAL_CANCREATESURFACEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_CANCREATESURFACEDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_GBL,
    lpDDSurfaceDesc: ?*DDSURFACEDESC,
    bIsDifferentPixelFormat: u32,
    ddRVal: HRESULT,
    CanCreateSurface: LPDDHAL_CANCREATESURFACE,
};
// --------------------------------------------------------
// Type: DDHAL_CREATEPALETTEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_CREATEPALETTEDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_GBL,
    lpDDPalette: ?*DDRAWI_DDRAWPALETTE_GBL,
    lpColorTable: ?*PALETTEENTRY,
    ddRVal: HRESULT,
    CreatePalette: LPDDHAL_CREATEPALETTE,
    is_excl: BOOL,
};
// --------------------------------------------------------
// Type: DDHAL_DESTROYDRIVERDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_DESTROYDRIVERDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_GBL,
    ddRVal: HRESULT,
    DestroyDriver: LPDDHAL_DESTROYDRIVER,
};
// --------------------------------------------------------
// Type: DDHAL_SETMODEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_SETMODEDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_GBL,
    dwModeIndex: u32,
    ddRVal: HRESULT,
    SetMode: LPDDHAL_SETMODE,
    inexcl: BOOL,
    useRefreshRate: BOOL,
};
// --------------------------------------------------------
// Type: DDHAL_DRVSETCOLORKEYDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_DRVSETCOLORKEYDATA = extern struct {
    lpDDSurface: ?*DDRAWI_DDRAWSURFACE_LCL,
    dwFlags: u32,
    ckNew: DDCOLORKEY,
    ddRVal: HRESULT,
    SetColorKey: LPDDHAL_SETCOLORKEY,
};
// --------------------------------------------------------
// Type: DDHAL_GETSCANLINEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETSCANLINEDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_GBL,
    dwScanLine: u32,
    ddRVal: HRESULT,
    GetScanLine: LPDDHAL_GETSCANLINE,
};
// --------------------------------------------------------
// Type: DDHAL_SETEXCLUSIVEMODEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_SETEXCLUSIVEMODEDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_GBL,
    dwEnterExcl: u32,
    dwReserved: u32,
    ddRVal: HRESULT,
    SetExclusiveMode: LPDDHAL_SETEXCLUSIVEMODE,
};
// --------------------------------------------------------
// Type: DDHAL_FLIPTOGDISURFACEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_FLIPTOGDISURFACEDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_GBL,
    dwToGDI: u32,
    dwReserved: u32,
    ddRVal: HRESULT,
    FlipToGDISurface: LPDDHAL_FLIPTOGDISURFACE,
};
// --------------------------------------------------------
// Type: DDHAL_CANCREATEVPORTDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_CANCREATEVPORTDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_LCL,
    lpDDVideoPortDesc: ?*DDVIDEOPORTDESC,
    ddRVal: HRESULT,
    CanCreateVideoPort: LPDDHALVPORTCB_CANCREATEVIDEOPORT,
};
// --------------------------------------------------------
// Type: DDHAL_CREATEVPORTDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_CREATEVPORTDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_LCL,
    lpDDVideoPortDesc: ?*DDVIDEOPORTDESC,
    lpVideoPort: ?*DDRAWI_DDVIDEOPORT_LCL,
    ddRVal: HRESULT,
    CreateVideoPort: LPDDHALVPORTCB_CREATEVIDEOPORT,
};
// --------------------------------------------------------
// Type: DDHAL_FLIPVPORTDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_FLIPVPORTDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_LCL,
    lpVideoPort: ?*DDRAWI_DDVIDEOPORT_LCL,
    lpSurfCurr: ?*DDRAWI_DDRAWSURFACE_LCL,
    lpSurfTarg: ?*DDRAWI_DDRAWSURFACE_LCL,
    ddRVal: HRESULT,
    FlipVideoPort: LPDDHALVPORTCB_FLIP,
};
// --------------------------------------------------------
// Type: DDHAL_GETVPORTBANDWIDTHDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETVPORTBANDWIDTHDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_LCL,
    lpVideoPort: ?*DDRAWI_DDVIDEOPORT_LCL,
    lpddpfFormat: ?*DDPIXELFORMAT,
    dwWidth: u32,
    dwHeight: u32,
    dwFlags: u32,
    lpBandwidth: ?*DDVIDEOPORTBANDWIDTH,
    ddRVal: HRESULT,
    GetVideoPortBandwidth: LPDDHALVPORTCB_GETBANDWIDTH,
};
// --------------------------------------------------------
// Type: DDHAL_GETVPORTINPUTFORMATDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETVPORTINPUTFORMATDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_LCL,
    lpVideoPort: ?*DDRAWI_DDVIDEOPORT_LCL,
    dwFlags: u32,
    lpddpfFormat: ?*DDPIXELFORMAT,
    dwNumFormats: u32,
    ddRVal: HRESULT,
    GetVideoPortInputFormats: LPDDHALVPORTCB_GETINPUTFORMATS,
};
// --------------------------------------------------------
// Type: DDHAL_GETVPORTOUTPUTFORMATDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETVPORTOUTPUTFORMATDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_LCL,
    lpVideoPort: ?*DDRAWI_DDVIDEOPORT_LCL,
    dwFlags: u32,
    lpddpfInputFormat: ?*DDPIXELFORMAT,
    lpddpfOutputFormats: ?*DDPIXELFORMAT,
    dwNumFormats: u32,
    ddRVal: HRESULT,
    GetVideoPortOutputFormats: LPDDHALVPORTCB_GETOUTPUTFORMATS,
};
// --------------------------------------------------------
// Type: DDHAL_GETVPORTFIELDDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETVPORTFIELDDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_LCL,
    lpVideoPort: ?*DDRAWI_DDVIDEOPORT_LCL,
    bField: BOOL,
    ddRVal: HRESULT,
    GetVideoPortField: LPDDHALVPORTCB_GETFIELD,
};
// --------------------------------------------------------
// Type: DDHAL_GETVPORTLINEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETVPORTLINEDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_LCL,
    lpVideoPort: ?*DDRAWI_DDVIDEOPORT_LCL,
    dwLine: u32,
    ddRVal: HRESULT,
    GetVideoPortLine: LPDDHALVPORTCB_GETLINE,
};
// --------------------------------------------------------
// Type: DDHAL_GETVPORTCONNECTDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETVPORTCONNECTDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_LCL,
    dwPortId: u32,
    lpConnect: ?*DDVIDEOPORTCONNECT,
    dwNumEntries: u32,
    ddRVal: HRESULT,
    GetVideoPortConnectInfo: LPDDHALVPORTCB_GETVPORTCONNECT,
};
// --------------------------------------------------------
// Type: DDHAL_DESTROYVPORTDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_DESTROYVPORTDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_LCL,
    lpVideoPort: ?*DDRAWI_DDVIDEOPORT_LCL,
    ddRVal: HRESULT,
    DestroyVideoPort: LPDDHALVPORTCB_DESTROYVPORT,
};
// --------------------------------------------------------
// Type: DDHAL_GETVPORTFLIPSTATUSDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETVPORTFLIPSTATUSDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_LCL,
    fpSurface: ?*opaque{},
    ddRVal: HRESULT,
    GetVideoPortFlipStatus: LPDDHALVPORTCB_GETFLIPSTATUS,
};
// --------------------------------------------------------
// Type: DDHAL_UPDATEVPORTDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_UPDATEVPORTDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_LCL,
    lpVideoPort: ?*DDRAWI_DDVIDEOPORT_LCL,
    lplpDDSurface: ?*?*DDRAWI_DDRAWSURFACE_INT,
    lplpDDVBISurface: ?*?*DDRAWI_DDRAWSURFACE_INT,
    lpVideoInfo: ?*DDVIDEOPORTINFO,
    dwFlags: u32,
    dwNumAutoflip: u32,
    dwNumVBIAutoflip: u32,
    ddRVal: HRESULT,
    UpdateVideoPort: LPDDHALVPORTCB_UPDATE,
};
// --------------------------------------------------------
// Type: DDHAL_WAITFORVPORTSYNCDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_WAITFORVPORTSYNCDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_LCL,
    lpVideoPort: ?*DDRAWI_DDVIDEOPORT_LCL,
    dwFlags: u32,
    dwLine: u32,
    dwTimeOut: u32,
    ddRVal: HRESULT,
    WaitForVideoPortSync: LPDDHALVPORTCB_WAITFORSYNC,
};
// --------------------------------------------------------
// Type: DDHAL_GETVPORTSIGNALDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETVPORTSIGNALDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_LCL,
    lpVideoPort: ?*DDRAWI_DDVIDEOPORT_LCL,
    dwStatus: u32,
    ddRVal: HRESULT,
    GetVideoSignalStatus: LPDDHALVPORTCB_GETSIGNALSTATUS,
};
// --------------------------------------------------------
// Type: DDHAL_VPORTCOLORDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_VPORTCOLORDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_LCL,
    lpVideoPort: ?*DDRAWI_DDVIDEOPORT_LCL,
    dwFlags: u32,
    lpColorData: ?*DDCOLORCONTROL,
    ddRVal: HRESULT,
    ColorControl: LPDDHALVPORTCB_COLORCONTROL,
};
// --------------------------------------------------------
// Type: DDHAL_COLORCONTROLDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_COLORCONTROLDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_GBL,
    lpDDSurface: ?*DDRAWI_DDRAWSURFACE_LCL,
    lpColorData: ?*DDCOLORCONTROL,
    dwFlags: u32,
    ddRVal: HRESULT,
    ColorControl: LPDDHALCOLORCB_COLORCONTROL,
};
// --------------------------------------------------------
// Type: DDHAL_GETDRIVERINFODATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETDRIVERINFODATA = extern struct {
    dwSize: u32,
    dwFlags: u32,
    guidInfo: Guid,
    dwExpectedSize: u32,
    lpvData: ?*opaque{},
    dwActualSize: u32,
    ddRVal: HRESULT,
    dwContext: ?*opaque{},
};
// --------------------------------------------------------
// Type: DDHAL_GETAVAILDRIVERMEMORYDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETAVAILDRIVERMEMORYDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_GBL,
    DDSCaps: DDSCAPS,
    dwTotal: u32,
    dwFree: u32,
    ddRVal: HRESULT,
    GetAvailDriverMemory: LPDDHAL_GETAVAILDRIVERMEMORY,
    ddsCapsEx: DDSCAPSEX,
};
// --------------------------------------------------------
// Type: DDHAL_UPDATENONLOCALHEAPDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_UPDATENONLOCALHEAPDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_GBL,
    dwHeap: u32,
    fpGARTLin: ?*opaque{},
    fpGARTDev: ?*opaque{},
    ulPolicyMaxBytes: ?*opaque{},
    ddRVal: HRESULT,
    UpdateNonLocalHeap: LPDDHAL_UPDATENONLOCALHEAP,
};
// --------------------------------------------------------
// Type: DDHAL_GETHEAPALIGNMENTDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETHEAPALIGNMENTDATA = extern struct {
    dwInstance: ?*opaque{},
    dwHeap: u32,
    ddRVal: HRESULT,
    GetHeapAlignment: LPDDHAL_GETHEAPALIGNMENT,
    Alignment: HEAPALIGNMENT,
};
// --------------------------------------------------------
// Type: DDHAL_CREATESURFACEEXDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_CREATESURFACEEXDATA = extern struct {
    dwFlags: u32,
    lpDDLcl: ?*DDRAWI_DIRECTDRAW_LCL,
    lpDDSLcl: ?*DDRAWI_DDRAWSURFACE_LCL,
    ddRVal: HRESULT,
};
// --------------------------------------------------------
// Type: DDHAL_GETDRIVERSTATEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETDRIVERSTATEDATA = extern struct {
    dwFlags: u32,
    Anonymous: _Anonymous_e__Union,
    lpdwStates: ?*u32,
    dwLength: u32,
    ddRVal: HRESULT,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: DDHAL_SYNCSURFACEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_SYNCSURFACEDATA = extern struct {
    dwSize: u32,
    lpDD: ?*DDRAWI_DIRECTDRAW_LCL,
    lpDDSurface: ?*DDRAWI_DDRAWSURFACE_LCL,
    dwSurfaceOffset: u32,
    fpLockPtr: ?*opaque{},
    lPitch: i32,
    dwOverlayOffset: u32,
    dwOverlaySrcWidth: u32,
    dwOverlaySrcHeight: u32,
    dwOverlayDestWidth: u32,
    dwOverlayDestHeight: u32,
    dwDriverReserved1: ?*opaque{},
    dwDriverReserved2: ?*opaque{},
    dwDriverReserved3: ?*opaque{},
    ddRVal: HRESULT,
};
// --------------------------------------------------------
// Type: DDHAL_SYNCVIDEOPORTDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_SYNCVIDEOPORTDATA = extern struct {
    dwSize: u32,
    lpDD: ?*DDRAWI_DIRECTDRAW_LCL,
    lpVideoPort: ?*DDRAWI_DDVIDEOPORT_LCL,
    dwOriginOffset: u32,
    dwHeight: u32,
    dwVBIHeight: u32,
    dwDriverReserved1: ?*opaque{},
    dwDriverReserved2: ?*opaque{},
    dwDriverReserved3: ?*opaque{},
    ddRVal: HRESULT,
};
// --------------------------------------------------------
// Type: DDHAL_GETMOCOMPGUIDSDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETMOCOMPGUIDSDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_LCL,
    dwNumGuids: u32,
    lpGuids: ?*Guid,
    ddRVal: HRESULT,
    GetMoCompGuids: LPDDHALMOCOMPCB_GETGUIDS,
};
// --------------------------------------------------------
// Type: DDHAL_GETMOCOMPFORMATSDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETMOCOMPFORMATSDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_LCL,
    lpGuid: ?*Guid,
    dwNumFormats: u32,
    lpFormats: ?*DDPIXELFORMAT,
    ddRVal: HRESULT,
    GetMoCompFormats: LPDDHALMOCOMPCB_GETFORMATS,
};
// --------------------------------------------------------
// Type: DDHAL_CREATEMOCOMPDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_CREATEMOCOMPDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_LCL,
    lpMoComp: ?*DDRAWI_DDMOTIONCOMP_LCL,
    lpGuid: ?*Guid,
    dwUncompWidth: u32,
    dwUncompHeight: u32,
    ddUncompPixelFormat: DDPIXELFORMAT,
    lpData: ?*opaque{},
    dwDataSize: u32,
    ddRVal: HRESULT,
    CreateMoComp: LPDDHALMOCOMPCB_CREATE,
};
// --------------------------------------------------------
// Type: DDMCCOMPBUFFERINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDMCCOMPBUFFERINFO = extern struct {
    dwSize: u32,
    dwNumCompBuffers: u32,
    dwWidthToCreate: u32,
    dwHeightToCreate: u32,
    dwBytesToAllocate: u32,
    ddCompCaps: DDSCAPS2,
    ddPixelFormat: DDPIXELFORMAT,
};
// --------------------------------------------------------
// Type: DDHAL_GETMOCOMPCOMPBUFFDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETMOCOMPCOMPBUFFDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_LCL,
    lpGuid: ?*Guid,
    dwWidth: u32,
    dwHeight: u32,
    ddPixelFormat: DDPIXELFORMAT,
    dwNumTypesCompBuffs: u32,
    lpCompBuffInfo: ?*DDMCCOMPBUFFERINFO,
    ddRVal: HRESULT,
    GetMoCompBuffInfo: LPDDHALMOCOMPCB_GETCOMPBUFFINFO,
};
// --------------------------------------------------------
// Type: DDHAL_GETINTERNALMOCOMPDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_GETINTERNALMOCOMPDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_LCL,
    lpGuid: ?*Guid,
    dwWidth: u32,
    dwHeight: u32,
    ddPixelFormat: DDPIXELFORMAT,
    dwScratchMemAlloc: u32,
    ddRVal: HRESULT,
    GetInternalMoCompInfo: LPDDHALMOCOMPCB_GETINTERNALINFO,
};
// --------------------------------------------------------
// Type: DDHAL_BEGINMOCOMPFRAMEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_BEGINMOCOMPFRAMEDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_LCL,
    lpMoComp: ?*DDRAWI_DDMOTIONCOMP_LCL,
    lpDestSurface: ?*DDRAWI_DDRAWSURFACE_LCL,
    dwInputDataSize: u32,
    lpInputData: ?*opaque{},
    dwOutputDataSize: u32,
    lpOutputData: ?*opaque{},
    ddRVal: HRESULT,
    BeginMoCompFrame: LPDDHALMOCOMPCB_BEGINFRAME,
};
// --------------------------------------------------------
// Type: DDHAL_ENDMOCOMPFRAMEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_ENDMOCOMPFRAMEDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_LCL,
    lpMoComp: ?*DDRAWI_DDMOTIONCOMP_LCL,
    lpInputData: ?*opaque{},
    dwInputDataSize: u32,
    ddRVal: HRESULT,
    EndMoCompFrame: LPDDHALMOCOMPCB_ENDFRAME,
};
// --------------------------------------------------------
// Type: DDMCBUFFERINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDMCBUFFERINFO = extern struct {
    dwSize: u32,
    lpCompSurface: ?*DDRAWI_DDRAWSURFACE_LCL,
    dwDataOffset: u32,
    dwDataSize: u32,
    lpPrivate: ?*opaque{},
};
// --------------------------------------------------------
// Type: DDHAL_RENDERMOCOMPDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_RENDERMOCOMPDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_LCL,
    lpMoComp: ?*DDRAWI_DDMOTIONCOMP_LCL,
    dwNumBuffers: u32,
    lpBufferInfo: ?*DDMCBUFFERINFO,
    dwFunction: u32,
    lpInputData: ?*opaque{},
    dwInputDataSize: u32,
    lpOutputData: ?*opaque{},
    dwOutputDataSize: u32,
    ddRVal: HRESULT,
    RenderMoComp: LPDDHALMOCOMPCB_RENDER,
};
// --------------------------------------------------------
// Type: DDHAL_QUERYMOCOMPSTATUSDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_QUERYMOCOMPSTATUSDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_LCL,
    lpMoComp: ?*DDRAWI_DDMOTIONCOMP_LCL,
    lpSurface: ?*DDRAWI_DDRAWSURFACE_LCL,
    dwFlags: u32,
    ddRVal: HRESULT,
    QueryMoCompStatus: LPDDHALMOCOMPCB_QUERYSTATUS,
};
// --------------------------------------------------------
// Type: DDHAL_DESTROYMOCOMPDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_DESTROYMOCOMPDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_LCL,
    lpMoComp: ?*DDRAWI_DDMOTIONCOMP_LCL,
    ddRVal: HRESULT,
    DestroyMoComp: LPDDHALMOCOMPCB_DESTROY,
};
// --------------------------------------------------------
// Type: PFNCHECKCONNECTIONWIZARD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNCHECKCONNECTIONWIZARD = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNSETSHELLNEXT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNSETSHELLNEXT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: _D3DHAL_CALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _D3DHAL_CALLBACKS = opaque {
};
// --------------------------------------------------------
// Type: _D3DHAL_GLOBALDRIVERDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _D3DHAL_GLOBALDRIVERDATA = opaque {
};
// --------------------------------------------------------
// Type: STRENTRYA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STRENTRYA = extern struct {
    pszName: ?*i8,
    pszValue: ?*i8,
};
// --------------------------------------------------------
// Type: STRENTRYW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STRENTRYW = extern struct {
    pszName: ?*u16,
    pszValue: ?*u16,
};
// --------------------------------------------------------
// Type: STRTABLEA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STRTABLEA = extern struct {
    cEntries: u32,
    pse: ?*STRENTRYA,
};
// --------------------------------------------------------
// Type: STRTABLEW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STRTABLEW = extern struct {
    cEntries: u32,
    pse: ?*STRENTRYW,
};
// --------------------------------------------------------
// Type: REGINSTALLA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const REGINSTALLA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: _CabInfoA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _CabInfoA = extern struct {
    pszCab: ?*i8,
    pszInf: ?*i8,
    pszSection: ?*i8,
    szSrcPath: ?[*]i8,
    dwFlags: u32,
};
// --------------------------------------------------------
// Type: _CabInfoW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _CabInfoW = extern struct {
    pszCab: ?*u16,
    pszInf: ?*u16,
    pszSection: ?*u16,
    szSrcPath: ?[*]u16,
    dwFlags: u32,
};
// --------------------------------------------------------
// Type: PERUSERSECTIONA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PERUSERSECTIONA = extern struct {
    szGUID: ?[*]i8,
    szDispName: ?[*]i8,
    szLocale: ?[*]i8,
    szStub: ?[*]i8,
    szVersion: ?[*]i8,
    szCompID: ?[*]i8,
    dwIsInstalled: u32,
    bRollback: BOOL,
};
// --------------------------------------------------------
// Type: PERUSERSECTIONW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PERUSERSECTIONW = extern struct {
    szGUID: ?[*]u16,
    szDispName: ?[*]u16,
    szLocale: ?[*]u16,
    szStub: ?[*]u16,
    szVersion: ?[*]u16,
    szCompID: ?[*]u16,
    dwIsInstalled: u32,
    bRollback: BOOL,
};
// --------------------------------------------------------
// Type: IMESTRUCT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMESTRUCT = extern struct {
    fnc: u32,
    wParam: WPARAM,
    wCount: u32,
    dchSource: u32,
    dchDest: u32,
    lParam1: LPARAM,
    lParam2: LPARAM,
    lParam3: LPARAM,
};
// --------------------------------------------------------
// Type: UNDETERMINESTRUCT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UNDETERMINESTRUCT = extern struct {
    dwSize: u32,
    uDefIMESize: u32,
    uDefIMEPos: u32,
    uUndetTextLen: u32,
    uUndetTextPos: u32,
    uUndetAttrPos: u32,
    uCursorPos: u32,
    uDeltaStart: u32,
    uDetermineTextLen: u32,
    uDetermineTextPos: u32,
    uDetermineDelimPos: u32,
    uYomiTextLen: u32,
    uYomiTextPos: u32,
    uYomiDelimPos: u32,
};
// --------------------------------------------------------
// Type: STRINGEXSTRUCT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STRINGEXSTRUCT = extern struct {
    dwSize: u32,
    uDeterminePos: u32,
    uDetermineDelimPos: u32,
    uYomiPos: u32,
    uYomiDelimPos: u32,
};
// --------------------------------------------------------
// Type: DATETIME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DATETIME = extern struct {
    year: u16,
    month: u16,
    day: u16,
    hour: u16,
    min: u16,
    sec: u16,
};
// --------------------------------------------------------
// Type: IMEPROA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMEPROA = extern struct {
    hWnd: HWND,
    InstDate: DATETIME,
    wVersion: u32,
    szDescription: ?[*]u8,
    szName: ?[*]u8,
    szOptions: ?[*]u8,
};
// --------------------------------------------------------
// Type: IMEPROW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IMEPROW = extern struct {
    hWnd: HWND,
    InstDate: DATETIME,
    wVersion: u32,
    szDescription: ?[*]u16,
    szName: ?[*]u16,
    szOptions: ?[*]u16,
};
// --------------------------------------------------------
// Type: WebBrowser_V1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WebBrowser_V1 = opaque {
};
// --------------------------------------------------------
// Type: WebBrowser
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WebBrowser = opaque {
};
// --------------------------------------------------------
// Type: InternetExplorer
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const InternetExplorer = opaque {
};
// --------------------------------------------------------
// Type: InternetExplorerMedium
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const InternetExplorerMedium = opaque {
};
// --------------------------------------------------------
// Type: ShellBrowserWindow
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ShellBrowserWindow = opaque {
};
// --------------------------------------------------------
// Type: ShellWindows
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ShellWindows = opaque {
};
// --------------------------------------------------------
// Type: ShellUIHelper
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ShellUIHelper = opaque {
};
// --------------------------------------------------------
// Type: ShellNameSpace
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ShellNameSpace = opaque {
};
// --------------------------------------------------------
// Type: CScriptErrorList
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CScriptErrorList = opaque {
};
// --------------------------------------------------------
// Type: CommandStateChangeConstants
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CommandStateChangeConstants = *opaque{
};
// --------------------------------------------------------
// Type: SecureLockIconConstants
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SecureLockIconConstants = *opaque{
};
// --------------------------------------------------------
// Type: NewProcessCauseConstants
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NewProcessCauseConstants = *opaque{
};
// --------------------------------------------------------
// Type: BrowserNavConstants
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BrowserNavConstants = *opaque{
};
// --------------------------------------------------------
// Type: RefreshConstants
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RefreshConstants = *opaque{
};
// --------------------------------------------------------
// Type: IWebBrowser
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWebBrowser = *opaque{
    // TODO: Method 'GoBack'
    // TODO: Method 'GoForward'
    // TODO: Method 'GoHome'
    // TODO: Method 'GoSearch'
    // TODO: Method 'Navigate'
    // TODO: Method 'Refresh'
    // TODO: Method 'Refresh2'
    // TODO: Method 'Stop'
    // TODO: Method 'get_Application'
    // TODO: Method 'get_Parent'
    // TODO: Method 'get_Container'
    // TODO: Method 'get_Document'
    // TODO: Method 'get_TopLevelContainer'
    // TODO: Method 'get_Type'
    // TODO: Method 'get_Left'
    // TODO: Method 'put_Left'
    // TODO: Method 'get_Top'
    // TODO: Method 'put_Top'
    // TODO: Method 'get_Width'
    // TODO: Method 'put_Width'
    // TODO: Method 'get_Height'
    // TODO: Method 'put_Height'
    // TODO: Method 'get_LocationName'
    // TODO: Method 'get_LocationURL'
    // TODO: Method 'get_Busy'
};
// --------------------------------------------------------
// Type: DWebBrowserEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DWebBrowserEvents = *opaque{
};
// --------------------------------------------------------
// Type: IWebBrowserApp
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWebBrowserApp = *opaque{
    // TODO: Method 'Quit'
    // TODO: Method 'ClientToWindow'
    // TODO: Method 'PutProperty'
    // TODO: Method 'GetProperty'
    // TODO: Method 'get_Name'
    // TODO: Method 'get_HWND'
    // TODO: Method 'get_FullName'
    // TODO: Method 'get_Path'
    // TODO: Method 'get_Visible'
    // TODO: Method 'put_Visible'
    // TODO: Method 'get_StatusBar'
    // TODO: Method 'put_StatusBar'
    // TODO: Method 'get_StatusText'
    // TODO: Method 'put_StatusText'
    // TODO: Method 'get_ToolBar'
    // TODO: Method 'put_ToolBar'
    // TODO: Method 'get_MenuBar'
    // TODO: Method 'put_MenuBar'
    // TODO: Method 'get_FullScreen'
    // TODO: Method 'put_FullScreen'
};
// --------------------------------------------------------
// Type: IWebBrowser2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWebBrowser2 = *opaque{
    // TODO: Method 'Navigate2'
    // TODO: Method 'QueryStatusWB'
    // TODO: Method 'ExecWB'
    // TODO: Method 'ShowBrowserBar'
    // TODO: Method 'get_ReadyState'
    // TODO: Method 'get_Offline'
    // TODO: Method 'put_Offline'
    // TODO: Method 'get_Silent'
    // TODO: Method 'put_Silent'
    // TODO: Method 'get_RegisterAsBrowser'
    // TODO: Method 'put_RegisterAsBrowser'
    // TODO: Method 'get_RegisterAsDropTarget'
    // TODO: Method 'put_RegisterAsDropTarget'
    // TODO: Method 'get_TheaterMode'
    // TODO: Method 'put_TheaterMode'
    // TODO: Method 'get_AddressBar'
    // TODO: Method 'put_AddressBar'
    // TODO: Method 'get_Resizable'
    // TODO: Method 'put_Resizable'
};
// --------------------------------------------------------
// Type: DWebBrowserEvents2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DWebBrowserEvents2 = *opaque{
};
// --------------------------------------------------------
// Type: DShellWindowsEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DShellWindowsEvents = *opaque{
};
// --------------------------------------------------------
// Type: IShellUIHelper
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellUIHelper = *opaque{
    // TODO: Method 'ResetFirstBootMode'
    // TODO: Method 'ResetSafeMode'
    // TODO: Method 'RefreshOfflineDesktop'
    // TODO: Method 'AddFavorite'
    // TODO: Method 'AddChannel'
    // TODO: Method 'AddDesktopComponent'
    // TODO: Method 'IsSubscribed'
    // TODO: Method 'NavigateAndFind'
    // TODO: Method 'ImportExportFavorites'
    // TODO: Method 'AutoCompleteSaveForm'
    // TODO: Method 'AutoScan'
    // TODO: Method 'AutoCompleteAttach'
    // TODO: Method 'ShowBrowserUI'
};
// --------------------------------------------------------
// Type: IShellUIHelper2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellUIHelper2 = *opaque{
    // TODO: Method 'AddSearchProvider'
    // TODO: Method 'RunOnceShown'
    // TODO: Method 'SkipRunOnce'
    // TODO: Method 'CustomizeSettings'
    // TODO: Method 'SqmEnabled'
    // TODO: Method 'PhishingEnabled'
    // TODO: Method 'BrandImageUri'
    // TODO: Method 'SkipTabsWelcome'
    // TODO: Method 'DiagnoseConnection'
    // TODO: Method 'CustomizeClearType'
    // TODO: Method 'IsSearchProviderInstalled'
    // TODO: Method 'IsSearchMigrated'
    // TODO: Method 'DefaultSearchProvider'
    // TODO: Method 'RunOnceRequiredSettingsComplete'
    // TODO: Method 'RunOnceHasShown'
    // TODO: Method 'SearchGuideUrl'
};
// --------------------------------------------------------
// Type: IShellUIHelper3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellUIHelper3 = *opaque{
    // TODO: Method 'AddService'
    // TODO: Method 'IsServiceInstalled'
    // TODO: Method 'InPrivateFilteringEnabled'
    // TODO: Method 'AddToFavoritesBar'
    // TODO: Method 'BuildNewTabPage'
    // TODO: Method 'SetRecentlyClosedVisible'
    // TODO: Method 'SetActivitiesVisible'
    // TODO: Method 'ContentDiscoveryReset'
    // TODO: Method 'IsSuggestedSitesEnabled'
    // TODO: Method 'EnableSuggestedSites'
    // TODO: Method 'NavigateToSuggestedSites'
    // TODO: Method 'ShowTabsHelp'
    // TODO: Method 'ShowInPrivateHelp'
};
// --------------------------------------------------------
// Type: IShellUIHelper4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellUIHelper4 = *opaque{
    // TODO: Method 'msIsSiteMode'
    // TODO: Method 'msSiteModeShowThumbBar'
    // TODO: Method 'msSiteModeAddThumbBarButton'
    // TODO: Method 'msSiteModeUpdateThumbBarButton'
    // TODO: Method 'msSiteModeSetIconOverlay'
    // TODO: Method 'msSiteModeClearIconOverlay'
    // TODO: Method 'msAddSiteMode'
    // TODO: Method 'msSiteModeCreateJumpList'
    // TODO: Method 'msSiteModeAddJumpListItem'
    // TODO: Method 'msSiteModeClearJumpList'
    // TODO: Method 'msSiteModeShowJumpList'
    // TODO: Method 'msSiteModeAddButtonStyle'
    // TODO: Method 'msSiteModeShowButtonStyle'
    // TODO: Method 'msSiteModeActivate'
    // TODO: Method 'msIsSiteModeFirstRun'
    // TODO: Method 'msAddTrackingProtectionList'
    // TODO: Method 'msTrackingProtectionEnabled'
    // TODO: Method 'msActiveXFilteringEnabled'
};
// --------------------------------------------------------
// Type: IShellUIHelper5
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellUIHelper5 = *opaque{
    // TODO: Method 'msProvisionNetworks'
    // TODO: Method 'msReportSafeUrl'
    // TODO: Method 'msSiteModeRefreshBadge'
    // TODO: Method 'msSiteModeClearBadge'
    // TODO: Method 'msDiagnoseConnectionUILess'
    // TODO: Method 'msLaunchNetworkClientHelp'
    // TODO: Method 'msChangeDefaultBrowser'
};
// --------------------------------------------------------
// Type: IShellUIHelper6
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellUIHelper6 = *opaque{
    // TODO: Method 'msStopPeriodicTileUpdate'
    // TODO: Method 'msStartPeriodicTileUpdate'
    // TODO: Method 'msStartPeriodicTileUpdateBatch'
    // TODO: Method 'msClearTile'
    // TODO: Method 'msEnableTileNotificationQueue'
    // TODO: Method 'msPinnedSiteState'
    // TODO: Method 'msEnableTileNotificationQueueForSquare150x150'
    // TODO: Method 'msEnableTileNotificationQueueForWide310x150'
    // TODO: Method 'msEnableTileNotificationQueueForSquare310x310'
    // TODO: Method 'msScheduledTileNotification'
    // TODO: Method 'msRemoveScheduledTileNotification'
    // TODO: Method 'msStartPeriodicBadgeUpdate'
    // TODO: Method 'msStopPeriodicBadgeUpdate'
    // TODO: Method 'msLaunchInternetOptions'
};
// --------------------------------------------------------
// Type: IShellUIHelper7
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellUIHelper7 = *opaque{
    // TODO: Method 'SetExperimentalFlag'
    // TODO: Method 'GetExperimentalFlag'
    // TODO: Method 'SetExperimentalValue'
    // TODO: Method 'GetExperimentalValue'
    // TODO: Method 'ResetAllExperimentalFlagsAndValues'
    // TODO: Method 'GetNeedIEAutoLaunchFlag'
    // TODO: Method 'SetNeedIEAutoLaunchFlag'
    // TODO: Method 'HasNeedIEAutoLaunchFlag'
    // TODO: Method 'LaunchIE'
};
// --------------------------------------------------------
// Type: IShellUIHelper8
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellUIHelper8 = *opaque{
    // TODO: Method 'GetCVListData'
    // TODO: Method 'GetCVListLocalData'
    // TODO: Method 'GetEMIEListData'
    // TODO: Method 'GetEMIEListLocalData'
    // TODO: Method 'OpenFavoritesPane'
    // TODO: Method 'OpenFavoritesSettings'
    // TODO: Method 'LaunchInHVSI'
};
// --------------------------------------------------------
// Type: IShellUIHelper9
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellUIHelper9 = *opaque{
    // TODO: Method 'GetOSSku'
};
// --------------------------------------------------------
// Type: DShellNameSpaceEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DShellNameSpaceEvents = *opaque{
};
// --------------------------------------------------------
// Type: IShellFavoritesNameSpace
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellFavoritesNameSpace = *opaque{
    // TODO: Method 'MoveSelectionUp'
    // TODO: Method 'MoveSelectionDown'
    // TODO: Method 'ResetSort'
    // TODO: Method 'NewFolder'
    // TODO: Method 'Synchronize'
    // TODO: Method 'Import'
    // TODO: Method 'Export'
    // TODO: Method 'InvokeContextMenuCommand'
    // TODO: Method 'MoveSelectionTo'
    // TODO: Method 'get_SubscriptionsEnabled'
    // TODO: Method 'CreateSubscriptionForSelection'
    // TODO: Method 'DeleteSubscriptionForSelection'
    // TODO: Method 'SetRoot'
};
// --------------------------------------------------------
// Type: IShellNameSpace
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IShellNameSpace = *opaque{
    // TODO: Method 'get_EnumOptions'
    // TODO: Method 'put_EnumOptions'
    // TODO: Method 'get_SelectedItem'
    // TODO: Method 'put_SelectedItem'
    // TODO: Method 'get_Root'
    // TODO: Method 'put_Root'
    // TODO: Method 'get_Depth'
    // TODO: Method 'put_Depth'
    // TODO: Method 'get_Mode'
    // TODO: Method 'put_Mode'
    // TODO: Method 'get_Flags'
    // TODO: Method 'put_Flags'
    // TODO: Method 'put_TVFlags'
    // TODO: Method 'get_TVFlags'
    // TODO: Method 'get_Columns'
    // TODO: Method 'put_Columns'
    // TODO: Method 'get_CountViewTypes'
    // TODO: Method 'SetViewType'
    // TODO: Method 'SelectedItems'
    // TODO: Method 'Expand'
    // TODO: Method 'UnselectAll'
};
// --------------------------------------------------------
// Type: IScriptErrorList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IScriptErrorList = *opaque{
    // TODO: Method 'advanceError'
    // TODO: Method 'retreatError'
    // TODO: Method 'canAdvanceError'
    // TODO: Method 'canRetreatError'
    // TODO: Method 'getErrorLine'
    // TODO: Method 'getErrorChar'
    // TODO: Method 'getErrorCode'
    // TODO: Method 'getErrorMsg'
    // TODO: Method 'getErrorUrl'
    // TODO: Method 'getAlwaysShowLockState'
    // TODO: Method 'getDetailsPaneOpen'
    // TODO: Method 'setDetailsPaneOpen'
    // TODO: Method 'getPerErrorDisplay'
    // TODO: Method 'setPerErrorDisplay'
};
// --------------------------------------------------------
// Type: JAVA_TRUST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const JAVA_TRUST = extern struct {
    cbSize: u32,
    flag: u32,
    fAllActiveXPermissions: BOOL,
    fAllPermissions: BOOL,
    dwEncodingType: u32,
    pbJavaPermissions: ?*u8,
    cbJavaPermissions: u32,
    pbSigner: ?*u8,
    cbSigner: u32,
    pwszZone: ?*u16,
    guidZone: Guid,
    hVerify: HRESULT,
};
// --------------------------------------------------------
// Type: IsolatedAppLauncher
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IsolatedAppLauncher = opaque {
};
// --------------------------------------------------------
// Type: IsolatedAppLauncherTelemetryParameters
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IsolatedAppLauncherTelemetryParameters = extern struct {
    EnableForLaunch: BOOL,
    CorrelationGUID: Guid,
};
// --------------------------------------------------------
// Type: IIsolatedAppLauncher
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IIsolatedAppLauncher = *opaque{
    // TODO: Method 'Launch'
};
// --------------------------------------------------------
// Type: WSCProductList
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WSCProductList = opaque {
};
// --------------------------------------------------------
// Type: WSCDefaultProduct
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WSCDefaultProduct = opaque {
};
// --------------------------------------------------------
// Type: WSC_SECURITY_PRODUCT_SUBSTATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSC_SECURITY_PRODUCT_SUBSTATUS = *opaque{
};
// --------------------------------------------------------
// Type: WSC_SECURITY_PRODUCT_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSC_SECURITY_PRODUCT_STATE = *opaque{
};
// --------------------------------------------------------
// Type: SECURITY_PRODUCT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SECURITY_PRODUCT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WSC_SECURITY_SIGNATURE_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSC_SECURITY_SIGNATURE_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: IWscProduct
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWscProduct = *opaque{
    // TODO: Method 'get_ProductName'
    // TODO: Method 'get_ProductState'
    // TODO: Method 'get_SignatureStatus'
    // TODO: Method 'get_RemediationPath'
    // TODO: Method 'get_ProductStateTimestamp'
    // TODO: Method 'get_ProductGuid'
    // TODO: Method 'get_ProductIsDefault'
};
// --------------------------------------------------------
// Type: IWscProduct2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWscProduct2 = *opaque{
    // TODO: Method 'get_AntivirusScanSubstatus'
    // TODO: Method 'get_AntivirusSettingsSubstatus'
    // TODO: Method 'get_AntivirusProtectionUpdateSubstatus'
    // TODO: Method 'get_FirewallDomainProfileSubstatus'
    // TODO: Method 'get_FirewallPrivateProfileSubstatus'
    // TODO: Method 'get_FirewallPublicProfileSubstatus'
};
// --------------------------------------------------------
// Type: IWscProduct3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWscProduct3 = *opaque{
    // TODO: Method 'get_AntivirusDaysUntilExpired'
};
// --------------------------------------------------------
// Type: IWSCProductList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWSCProductList = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_Count'
    // TODO: Method 'get_Item'
};
// --------------------------------------------------------
// Type: IWSCDefaultProduct
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWSCDefaultProduct = *opaque{
    // TODO: Method 'SetDefaultProduct'
};
// --------------------------------------------------------
// Type: WSC_SECURITY_PROVIDER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSC_SECURITY_PROVIDER = *opaque{
};
// --------------------------------------------------------
// Type: WSC_SECURITY_PROVIDER_HEALTH
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSC_SECURITY_PROVIDER_HEALTH = *opaque{
};
// --------------------------------------------------------
// Type: PFN_IO_COMPLETION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_IO_COMPLETION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FH_OVERLAPPED
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FH_OVERLAPPED = extern struct {
    Internal: ?*opaque{},
    InternalHigh: ?*opaque{},
    Offset: u32,
    OffsetHigh: u32,
    hEvent: HANDLE,
    pfnCompletion: PFN_IO_COMPLETION,
    Reserved1: ?*opaque{},
    Reserved2: ?*opaque{},
    Reserved3: ?*opaque{},
    Reserved4: ?*opaque{},
};
// --------------------------------------------------------
// Type: FIO_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FIO_CONTEXT = extern struct {
    m_dwTempHack: u32,
    m_dwSignature: u32,
    m_hFile: HANDLE,
    m_dwLinesOffset: u32,
    m_dwHeaderLength: u32,
};
// --------------------------------------------------------
// Type: FCACHE_CREATE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FCACHE_CREATE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FCACHE_RICHCREATE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FCACHE_RICHCREATE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CACHE_KEY_COMPARE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CACHE_KEY_COMPARE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CACHE_KEY_HASH
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CACHE_KEY_HASH = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CACHE_READ_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CACHE_READ_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CACHE_DESTROY_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CACHE_DESTROY_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CACHE_ACCESS_CHECK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CACHE_ACCESS_CHECK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: NAME_CACHE_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NAME_CACHE_CONTEXT = extern struct {
    m_dwSignature: u32,
};
// --------------------------------------------------------
// Type: TDIEntityID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TDIEntityID = extern struct {
    tei_entity: u32,
    tei_instance: u32,
};
// --------------------------------------------------------
// Type: TDIObjectID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TDIObjectID = extern struct {
    toi_entity: TDIEntityID,
    toi_class: u32,
    toi_type: u32,
    toi_id: u32,
};
// --------------------------------------------------------
// Type: tcp_request_query_information_ex_xp
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tcp_request_query_information_ex_xp = extern struct {
    ID: TDIObjectID,
    Context: ?[*]?*opaque{},
};
// --------------------------------------------------------
// Type: tcp_request_query_information_ex_w2k
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tcp_request_query_information_ex_w2k = extern struct {
    ID: TDIObjectID,
    Context: ?[*]u8,
};
// --------------------------------------------------------
// Type: tcp_request_set_information_ex
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tcp_request_set_information_ex = extern struct {
    ID: TDIObjectID,
    BufferSize: u32,
    Buffer: ?[*]u8,
};
// --------------------------------------------------------
// Type: TDI_TL_IO_CONTROL_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TDI_TL_IO_CONTROL_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: TDI_TL_IO_CONTROL_ENDPOINT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TDI_TL_IO_CONTROL_ENDPOINT = extern struct {
    Type: TDI_TL_IO_CONTROL_TYPE,
    Level: u32,
    Anonymous: _Anonymous_e__Union,
    InputBuffer: ?*opaque{},
    InputBufferLength: u32,
    OutputBuffer: ?*opaque{},
    OutputBufferLength: u32,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: WLDP_HOST
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WLDP_HOST = *opaque{
};
// --------------------------------------------------------
// Type: WLDP_HOST_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WLDP_HOST_ID = *opaque{
};
// --------------------------------------------------------
// Type: DECISION_LOCATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DECISION_LOCATION = *opaque{
};
// --------------------------------------------------------
// Type: WLDP_KEY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WLDP_KEY = *opaque{
};
// --------------------------------------------------------
// Type: VALUENAME
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VALUENAME = *opaque{
};
// --------------------------------------------------------
// Type: WLDP_WINDOWS_LOCKDOWN_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WLDP_WINDOWS_LOCKDOWN_MODE = *opaque{
};
// --------------------------------------------------------
// Type: WLDP_WINDOWS_LOCKDOWN_RESTRICTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WLDP_WINDOWS_LOCKDOWN_RESTRICTION = *opaque{
};
// --------------------------------------------------------
// Type: WLDP_HOST_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLDP_HOST_INFORMATION = extern struct {
    dwRevision: u32,
    dwHostId: WLDP_HOST_ID,
    szSource: ?*u16,
    hSource: HANDLE,
};
// --------------------------------------------------------
// Type: PWLDP_SETDYNAMICCODETRUST_API
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLDP_SETDYNAMICCODETRUST_API = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLDP_ISDYNAMICCODEPOLICYENABLED_API
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLDP_ISDYNAMICCODEPOLICYENABLED_API = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLDP_QUERYDYNAMICODETRUST_API
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLDP_QUERYDYNAMICODETRUST_API = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLDP_QUERYWINDOWSLOCKDOWNMODE_API
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLDP_QUERYWINDOWSLOCKDOWNMODE_API = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLDP_QUERYWINDOWSLOCKDOWNRESTRICTION_API
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLDP_QUERYWINDOWSLOCKDOWNRESTRICTION_API = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLDP_SETWINDOWSLOCKDOWNRESTRICTION_API
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLDP_SETWINDOWSLOCKDOWNRESTRICTION_API = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLDP_WLDPISAPPAPPROVEDBYPOLICY_API
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLDP_WLDPISAPPAPPROVEDBYPOLICY_API = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: XmlNodeType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const XmlNodeType = *opaque{
};
// --------------------------------------------------------
// Type: XmlConformanceLevel
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const XmlConformanceLevel = *opaque{
};
// --------------------------------------------------------
// Type: DtdProcessing
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DtdProcessing = *opaque{
};
// --------------------------------------------------------
// Type: XmlReadState
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const XmlReadState = *opaque{
};
// --------------------------------------------------------
// Type: XmlReaderProperty
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const XmlReaderProperty = *opaque{
};
// --------------------------------------------------------
// Type: XmlError
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const XmlError = *opaque{
};
// --------------------------------------------------------
// Type: XmlStandalone
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const XmlStandalone = *opaque{
};
// --------------------------------------------------------
// Type: XmlWriterProperty
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const XmlWriterProperty = *opaque{
};
// --------------------------------------------------------
// Type: IXmlReader
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXmlReader = *opaque{
    // TODO: Method 'SetInput'
    // TODO: Method 'GetProperty'
    // TODO: Method 'SetProperty'
    // TODO: Method 'Read'
    // TODO: Method 'GetNodeType'
    // TODO: Method 'MoveToFirstAttribute'
    // TODO: Method 'MoveToNextAttribute'
    // TODO: Method 'MoveToAttributeByName'
    // TODO: Method 'MoveToElement'
    // TODO: Method 'GetQualifiedName'
    // TODO: Method 'GetNamespaceUri'
    // TODO: Method 'GetLocalName'
    // TODO: Method 'GetPrefix'
    // TODO: Method 'GetValue'
    // TODO: Method 'ReadValueChunk'
    // TODO: Method 'GetBaseUri'
    // TODO: Method 'IsDefault'
    // TODO: Method 'IsEmptyElement'
    // TODO: Method 'GetLineNumber'
    // TODO: Method 'GetLinePosition'
    // TODO: Method 'GetAttributeCount'
    // TODO: Method 'GetDepth'
    // TODO: Method 'IsEOF'
};
// --------------------------------------------------------
// Type: IXmlResolver
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXmlResolver = *opaque{
    // TODO: Method 'ResolveUri'
};
// --------------------------------------------------------
// Type: IXmlWriter
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXmlWriter = *opaque{
    // TODO: Method 'SetOutput'
    // TODO: Method 'GetProperty'
    // TODO: Method 'SetProperty'
    // TODO: Method 'WriteAttributes'
    // TODO: Method 'WriteAttributeString'
    // TODO: Method 'WriteCData'
    // TODO: Method 'WriteCharEntity'
    // TODO: Method 'WriteChars'
    // TODO: Method 'WriteComment'
    // TODO: Method 'WriteDocType'
    // TODO: Method 'WriteElementString'
    // TODO: Method 'WriteEndDocument'
    // TODO: Method 'WriteEndElement'
    // TODO: Method 'WriteEntityRef'
    // TODO: Method 'WriteFullEndElement'
    // TODO: Method 'WriteName'
    // TODO: Method 'WriteNmToken'
    // TODO: Method 'WriteNode'
    // TODO: Method 'WriteNodeShallow'
    // TODO: Method 'WriteProcessingInstruction'
    // TODO: Method 'WriteQualifiedName'
    // TODO: Method 'WriteRaw'
    // TODO: Method 'WriteRawChars'
    // TODO: Method 'WriteStartDocument'
    // TODO: Method 'WriteStartElement'
    // TODO: Method 'WriteString'
    // TODO: Method 'WriteSurrogateCharEntity'
    // TODO: Method 'WriteWhitespace'
    // TODO: Method 'Flush'
};
// --------------------------------------------------------
// Type: IXmlWriterLite
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXmlWriterLite = *opaque{
    // TODO: Method 'SetOutput'
    // TODO: Method 'GetProperty'
    // TODO: Method 'SetProperty'
    // TODO: Method 'WriteAttributes'
    // TODO: Method 'WriteAttributeString'
    // TODO: Method 'WriteCData'
    // TODO: Method 'WriteCharEntity'
    // TODO: Method 'WriteChars'
    // TODO: Method 'WriteComment'
    // TODO: Method 'WriteDocType'
    // TODO: Method 'WriteElementString'
    // TODO: Method 'WriteEndDocument'
    // TODO: Method 'WriteEndElement'
    // TODO: Method 'WriteEntityRef'
    // TODO: Method 'WriteFullEndElement'
    // TODO: Method 'WriteName'
    // TODO: Method 'WriteNmToken'
    // TODO: Method 'WriteNode'
    // TODO: Method 'WriteNodeShallow'
    // TODO: Method 'WriteProcessingInstruction'
    // TODO: Method 'WriteRaw'
    // TODO: Method 'WriteRawChars'
    // TODO: Method 'WriteStartDocument'
    // TODO: Method 'WriteStartElement'
    // TODO: Method 'WriteString'
    // TODO: Method 'WriteSurrogateCharEntity'
    // TODO: Method 'WriteWhitespace'
    // TODO: Method 'Flush'
};
// --------------------------------------------------------
// Type: DEVPROP_OPERATOR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DEVPROP_OPERATOR = *opaque{
};
// --------------------------------------------------------
// Type: DEVPROP_FILTER_EXPRESSION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVPROP_FILTER_EXPRESSION = extern struct {
    Operator: DEVPROP_OPERATOR,
    Property: DEVPROPERTY,
};
// --------------------------------------------------------
// Type: DEV_OBJECT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DEV_OBJECT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DEV_QUERY_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DEV_QUERY_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: DEV_QUERY_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DEV_QUERY_STATE = *opaque{
};
// --------------------------------------------------------
// Type: DEV_QUERY_RESULT_ACTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DEV_QUERY_RESULT_ACTION = *opaque{
};
// --------------------------------------------------------
// Type: DEV_OBJECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEV_OBJECT = extern struct {
    ObjectType: DEV_OBJECT_TYPE,
    pszObjectId: ?*u16,
    cPropertyCount: u32,
    pProperties: ?*DEVPROPERTY,
};
// --------------------------------------------------------
// Type: DEV_QUERY_RESULT_ACTION_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEV_QUERY_RESULT_ACTION_DATA = extern struct {
    Action: DEV_QUERY_RESULT_ACTION,
    Data: _DEV_QUERY_RESULT_UPDATE_PAYLOAD,
    // --------------------------------------------------------
    // Type: _DEV_QUERY_RESULT_UPDATE_PAYLOAD
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _DEV_QUERY_RESULT_UPDATE_PAYLOAD = *opaque{
    };
};
// --------------------------------------------------------
// Type: DEV_QUERY_PARAMETER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEV_QUERY_PARAMETER = extern struct {
    Key: DEVPROPKEY,
    Type: u32,
    BufferSize: u32,
    Buffer: ?*opaque{},
};
// --------------------------------------------------------
// Type: HDEVQUERY__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HDEVQUERY__ = extern struct {
    unused: i32,
};
// --------------------------------------------------------
// Type: PDEV_QUERY_RESULT_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDEV_QUERY_RESULT_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: _GlobalFilter
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _GlobalFilter = *opaque{
};
// --------------------------------------------------------
// Type: _PfForwardAction
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _PfForwardAction = *opaque{
};
// --------------------------------------------------------
// Type: _PfAddresType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _PfAddresType = *opaque{
};
// --------------------------------------------------------
// Type: PF_FILTER_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PF_FILTER_DESCRIPTOR = extern struct {
    dwFilterFlags: u32,
    dwRule: u32,
    pfatType: _PfAddresType,
    SrcAddr: ?*u8,
    SrcMask: ?*u8,
    DstAddr: ?*u8,
    DstMask: ?*u8,
    dwProtocol: u32,
    fLateBound: u32,
    wSrcPort: u16,
    wDstPort: u16,
    wSrcPortHighRange: u16,
    wDstPortHighRange: u16,
};
// --------------------------------------------------------
// Type: PF_FILTER_STATS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PF_FILTER_STATS = extern struct {
    dwNumPacketsFiltered: u32,
    info: PF_FILTER_DESCRIPTOR,
};
// --------------------------------------------------------
// Type: PF_INTERFACE_STATS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PF_INTERFACE_STATS = extern struct {
    pvDriverContext: ?*opaque{},
    dwFlags: u32,
    dwInDrops: u32,
    dwOutDrops: u32,
    eaInAction: _PfForwardAction,
    eaOutAction: _PfForwardAction,
    dwNumInFilters: u32,
    dwNumOutFilters: u32,
    dwFrag: u32,
    dwSpoof: u32,
    dwReserved1: u32,
    dwReserved2: u32,
    liSYN: LARGE_INTEGER,
    liTotalLogged: LARGE_INTEGER,
    dwLostLogEntries: u32,
    FilterInfo: ?[*]PF_FILTER_STATS,
};
// --------------------------------------------------------
// Type: PF_LATEBIND_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PF_LATEBIND_INFO = extern struct {
    SrcAddr: ?*u8,
    DstAddr: ?*u8,
    Mask: ?*u8,
};
// --------------------------------------------------------
// Type: _PfFrameType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _PfFrameType = *opaque{
};
// --------------------------------------------------------
// Type: _pfLogFrame
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _pfLogFrame = extern struct {
    Timestamp: LARGE_INTEGER,
    pfeTypeOfFrame: _PfFrameType,
    dwTotalSizeUsed: u32,
    dwFilterRule: u32,
    wSizeOfAdditionalData: u16,
    wSizeOfIpHeader: u16,
    dwInterfaceName: u32,
    dwIPIndex: u32,
    bPacketData: ?[*]u8,
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn I_NetLogonControl2(
    ServerName: ?*u16,
    FunctionCode: u32,
    QueryLevel: u32,
    Data: ?*u8,
    Buffer: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn DisableProcessWindowsGhosting(
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "loadperf" fn InstallPerfDllW(
    szComputerName: ?*u16,
    lpIniFile: ?*u16,
    dwFlags: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "loadperf" fn InstallPerfDllA(
    szComputerName: ?*i8,
    lpIniFile: ?*i8,
    dwFlags: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn RtlRaiseException(
    ExceptionRecord: ?*EXCEPTION_RECORD,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "ole32" fn CoInstall(
    pbc: IBindCtx,
    dwFlags: u32,
    pClassSpec: ?*uCLSSPEC,
    pQuery: ?*QUERYCONTEXT,
    pszCodeBase: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn CompareFileTime(
    lpFileTime1: ?*FILETIME,
    lpFileTime2: ?*FILETIME,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FileTimeToLocalFileTime(
    lpFileTime: ?*FILETIME,
    lpLocalFileTime: ?*FILETIME,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetFileTime(
    hFile: HANDLE,
    lpCreationTime: ?*FILETIME,
    lpLastAccessTime: ?*FILETIME,
    lpLastWriteTime: ?*FILETIME,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn LocalFileTimeToFileTime(
    lpLocalFileTime: ?*FILETIME,
    lpFileTime: ?*FILETIME,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetFileTime(
    hFile: HANDLE,
    lpCreationTime: ?*FILETIME,
    lpLastAccessTime: ?*FILETIME,
    lpLastWriteTime: ?*FILETIME,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetSystemWow64DirectoryA(
    lpBuffer: ?*i8,
    uSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetSystemWow64DirectoryW(
    lpBuffer: ?*u16,
    uSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "api-ms-win-core-wow64-l1-1-1" fn GetSystemWow64Directory2A(
    lpBuffer: ?*i8,
    uSize: u32,
    ImageFileMachineType: u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "api-ms-win-core-wow64-l1-1-1" fn GetSystemWow64Directory2W(
    lpBuffer: ?*u16,
    uSize: u32,
    ImageFileMachineType: u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn IsWow64GuestMachineSupported(
    WowGuestMachine: u16,
    MachineIsSupported: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=True (can and should we use this?)
pub extern "SspiCli" fn GetUserNameExA(
    NameFormat: EXTENDED_NAME_FORMAT,
    lpNameBuffer: ?*i8,
    nSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=True (can and should we use this?)
pub extern "SspiCli" fn GetUserNameExW(
    NameFormat: EXTENDED_NAME_FORMAT,
    lpNameBuffer: ?*u16,
    nSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=True (can and should we use this?)
pub extern "SECUR32" fn GetComputerObjectNameA(
    NameFormat: EXTENDED_NAME_FORMAT,
    lpNameBuffer: ?*i8,
    nSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=True (can and should we use this?)
pub extern "SECUR32" fn GetComputerObjectNameW(
    NameFormat: EXTENDED_NAME_FORMAT,
    lpNameBuffer: ?*u16,
    nSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=True (can and should we use this?)
pub extern "SECUR32" fn TranslateNameA(
    lpAccountName: ?*i8,
    AccountNameFormat: EXTENDED_NAME_FORMAT,
    DesiredNameFormat: EXTENDED_NAME_FORMAT,
    lpTranslatedName: ?*i8,
    nSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=True (can and should we use this?)
pub extern "SECUR32" fn TranslateNameW(
    lpAccountName: ?*u16,
    AccountNameFormat: EXTENDED_NAME_FORMAT,
    DesiredNameFormat: EXTENDED_NAME_FORMAT,
    lpTranslatedName: ?*u16,
    nSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrSimpleStructMarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrComplexStructMarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantArrayMarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrComplexArrayMarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrSimpleStructUnmarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    ppMemory: ?*?*u8,
    pFormat: ?*u8,
    fMustAlloc: u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrComplexStructUnmarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    ppMemory: ?*?*u8,
    pFormat: ?*u8,
    fMustAlloc: u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrComplexArrayUnmarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    ppMemory: ?*?*u8,
    pFormat: ?*u8,
    fMustAlloc: u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrUserMarshalUnmarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    ppMemory: ?*?*u8,
    pFormat: ?*u8,
    fMustAlloc: u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrSimpleStructBufferSize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrComplexStructBufferSize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantArrayBufferSize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrComplexArrayBufferSize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-apiquery-l2-1-0" fn IsApiSetImplemented(
    Contract: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetEnvironmentStringsW(
    NewEnvironment: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetStdHandle(
    nStdHandle: STD_HANDLE_TYPE,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetStdHandle(
    nStdHandle: STD_HANDLE_TYPE,
    hHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetStdHandleEx(
    nStdHandle: STD_HANDLE_TYPE,
    hHandle: HANDLE,
    phPrevValue: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn ExpandEnvironmentStringsA(
    lpSrc: ?*i8,
    lpDst: ?*i8,
    nSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn ExpandEnvironmentStringsW(
    lpSrc: ?*u16,
    lpDst: ?*u16,
    nSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetCurrentDirectoryA(
    lpPathName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetCurrentDirectoryW(
    lpPathName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetCurrentDirectoryA(
    nBufferLength: u32,
    lpBuffer: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetCurrentDirectoryW(
    nBufferLength: u32,
    lpBuffer: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CloseHandle(
    hObject: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn DuplicateHandle(
    hSourceProcessHandle: HANDLE,
    hSourceHandle: HANDLE,
    hTargetProcessHandle: HANDLE,
    lpTargetHandle: ?*?*opaque{},
    dwDesiredAccess: u32,
    bInheritHandle: BOOL,
    dwOptions: DUPLICATE_HANDLE_OPTIONS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-handle-l1-1-0" fn CompareObjectHandles(
    hFirstObjectHandle: HANDLE,
    hSecondObjectHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetHandleInformation(
    hObject: HANDLE,
    lpdwFlags: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetHandleInformation(
    hObject: HANDLE,
    dwMask: u32,
    dwFlags: HANDLE_FLAG_OPTIONS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn QueryPerformanceCounter(
    lpPerformanceCount: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn QueryPerformanceFrequency(
    lpFrequency: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetProcessDynamicEHContinuationTargets(
    Process: HANDLE,
    NumberOfTargets: u16,
    Targets: ?*PROCESS_DYNAMIC_EH_CONTINUATION_TARGET,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn IsProcessorFeaturePresent(
    ProcessorFeature: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetSystemTimes(
    lpIdleTime: ?*FILETIME,
    lpKernelTime: ?*FILETIME,
    lpUserTime: ?*FILETIME,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetSystemCpuSetInformation(
    Information: ?*SYSTEM_CPU_SET_INFORMATION,
    BufferLength: u32,
    ReturnedLength: ?*u32,
    Process: HANDLE,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetProcessDefaultCpuSets(
    Process: HANDLE,
    CpuSetIds: ?*u32,
    CpuSetIdCount: u32,
    RequiredIdCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetProcessDefaultCpuSets(
    Process: HANDLE,
    CpuSetIds: ?*u32,
    CpuSetIdCount: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetThreadSelectedCpuSets(
    Thread: HANDLE,
    CpuSetIds: ?*u32,
    CpuSetIdCount: u32,
    RequiredIdCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetThreadSelectedCpuSets(
    Thread: HANDLE,
    CpuSetIds: ?*u32,
    CpuSetIdCount: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetSystemInfo(
    lpSystemInfo: ?*SYSTEM_INFO,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetSystemTime(
    lpSystemTime: ?*SYSTEMTIME,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetSystemTimeAsFileTime(
    lpSystemTimeAsFileTime: ?*FILETIME,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetLocalTime(
    lpSystemTime: ?*SYSTEMTIME,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn IsUserCetAvailableInEnvironment(
    UserCetEnvironment: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetSystemLeapSecondInformation(
    Enabled: ?*i32,
    Flags: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetVersion(
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetLocalTime(
    lpSystemTime: ?*SYSTEMTIME,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetTickCount(
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetTickCount64(
) callconv(@import("std").os.windows.WINAPI) u64;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetSystemTimeAdjustment(
    lpTimeAdjustment: ?*u32,
    lpTimeIncrement: ?*u32,
    lpTimeAdjustmentDisabled: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "api-ms-win-core-sysinfo-l1-2-4" fn GetSystemTimeAdjustmentPrecise(
    lpTimeAdjustment: ?*u64,
    lpTimeIncrement: ?*u64,
    lpTimeAdjustmentDisabled: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetSystemDirectoryA(
    lpBuffer: ?*i8,
    uSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetSystemDirectoryW(
    lpBuffer: ?*u16,
    uSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetWindowsDirectoryA(
    lpBuffer: ?*i8,
    uSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetWindowsDirectoryW(
    lpBuffer: ?*u16,
    uSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetSystemWindowsDirectoryA(
    lpBuffer: ?*i8,
    uSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetSystemWindowsDirectoryW(
    lpBuffer: ?*u16,
    uSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetComputerNameExA(
    NameType: COMPUTER_NAME_FORMAT,
    lpBuffer: ?*i8,
    nSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetComputerNameExW(
    NameType: COMPUTER_NAME_FORMAT,
    lpBuffer: ?*u16,
    nSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetComputerNameExW(
    NameType: COMPUTER_NAME_FORMAT,
    lpBuffer: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetSystemTime(
    lpSystemTime: ?*SYSTEMTIME,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetVersionExA(
    lpVersionInformation: ?*OSVERSIONINFOA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetVersionExW(
    lpVersionInformation: ?*OSVERSIONINFOW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetNativeSystemInfo(
    lpSystemInfo: ?*SYSTEM_INFO,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetSystemTimePreciseAsFileTime(
    lpSystemTimeAsFileTime: ?*FILETIME,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetProductInfo(
    dwOSMajorVersion: u32,
    dwOSMinorVersion: u32,
    dwSpMajorVersion: u32,
    dwSpMinorVersion: u32,
    pdwReturnedProductType: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn VerSetConditionMask(
    ConditionMask: u64,
    TypeMask: u32,
    Condition: u8,
) callconv(@import("std").os.windows.WINAPI) u64;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-sysinfo-l1-2-0" fn GetOsSafeBootMode(
    Flags: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn EnumSystemFirmwareTables(
    FirmwareTableProviderSignature: u32,
    pFirmwareTableEnumBuffer: ?*opaque{},
    BufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetSystemFirmwareTable(
    FirmwareTableProviderSignature: u32,
    FirmwareTableID: u32,
    pFirmwareTableBuffer: ?*opaque{},
    BufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn DnsHostnameToComputerNameExW(
    Hostname: ?*u16,
    ComputerName: ?*u16,
    nSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetComputerNameEx2W(
    NameType: COMPUTER_NAME_FORMAT,
    Flags: u32,
    lpBuffer: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetSystemTimeAdjustment(
    dwTimeAdjustment: u32,
    bTimeAdjustmentDisabled: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "api-ms-win-core-sysinfo-l1-2-4" fn SetSystemTimeAdjustmentPrecise(
    dwTimeAdjustment: u64,
    bTimeAdjustmentDisabled: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-sysinfo-l1-2-3" fn GetOsManufacturingMode(
    pbEnabled: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-sysinfo-l1-2-3" fn GetIntegratedDisplaySize(
    sizeInInches: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetComputerNameA(
    lpComputerName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetComputerNameW(
    lpComputerName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetComputerNameExA(
    NameType: COMPUTER_NAME_FORMAT,
    lpBuffer: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-realtime-l1-1-1" fn QueryInterruptTimePrecise(
    lpInterruptTimePrecise: ?*u64,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-realtime-l1-1-1" fn QueryUnbiasedInterruptTimePrecise(
    lpUnbiasedInterruptTimePrecise: ?*u64,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-realtime-l1-1-1" fn QueryInterruptTime(
    lpInterruptTime: ?*u64,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn QueryUnbiasedInterruptTime(
    UnbiasedTime: ?*u64,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-realtime-l1-1-2" fn QueryAuxiliaryCounterFrequency(
    lpAuxiliaryCounterFrequency: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-realtime-l1-1-2" fn ConvertAuxiliaryCounterToPerformanceCounter(
    ullAuxiliaryCounterValue: u64,
    lpPerformanceCounterValue: ?*u64,
    lpConversionError: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-realtime-l1-1-2" fn ConvertPerformanceCounterToAuxiliaryCounter(
    ullPerformanceCounterValue: u64,
    lpAuxiliaryCounterValue: ?*u64,
    lpConversionError: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GlobalCompact(
    dwMinFree: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GlobalFix(
    hMem: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GlobalUnfix(
    hMem: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GlobalWire(
    hMem: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GlobalUnWire(
    hMem: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn LocalShrink(
    hMem: ?*opaque{},
    cbNewSize: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn LocalCompact(
    uMinFree: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetEnvironmentStringsA(
    NewEnvironment: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetHandleCount(
    uNumber: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn RequestDeviceWakeup(
    hDevice: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn CancelDeviceWakeupRequest(
    hDevice: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetMessageWaitingIndicator(
    hMsgIndicator: HANDLE,
    ulMsgCount: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn MulDiv(
    nNumber: i32,
    nNumerator: i32,
    nDenominator: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetSystemRegistryQuota(
    pdwQuotaAllowed: ?*u32,
    pdwQuotaUsed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FileTimeToDosDateTime(
    lpFileTime: ?*FILETIME,
    lpFatDate: ?*u16,
    lpFatTime: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn DosDateTimeToFileTime(
    wFatDate: u16,
    wFatTime: u16,
    lpFileTime: ?*FILETIME,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn _lopen(
    lpPathName: ?*i8,
    iReadWrite: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn _lcreat(
    lpPathName: ?*i8,
    iAttribute: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn _lread(
    hFile: i32,
    lpBuffer: ?*opaque{},
    uBytes: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn _lwrite(
    hFile: i32,
    lpBuffer: ?*i8,
    uBytes: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn _hread(
    hFile: i32,
    lpBuffer: ?*opaque{},
    lBytes: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn _hwrite(
    hFile: i32,
    lpBuffer: ?*i8,
    lBytes: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn _lclose(
    hFile: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn _llseek(
    hFile: i32,
    lOffset: i32,
    iOrigin: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn OpenMutexA(
    dwDesiredAccess: u32,
    bInheritHandle: BOOL,
    lpName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn OpenSemaphoreA(
    dwDesiredAccess: u32,
    bInheritHandle: BOOL,
    lpName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn CreateWaitableTimerA(
    lpTimerAttributes: ?*SECURITY_ATTRIBUTES,
    bManualReset: BOOL,
    lpTimerName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn OpenWaitableTimerA(
    dwDesiredAccess: u32,
    bInheritHandle: BOOL,
    lpTimerName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn CreateWaitableTimerExA(
    lpTimerAttributes: ?*SECURITY_ATTRIBUTES,
    lpTimerName: ?*i8,
    dwFlags: u32,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetStartupInfoA(
    lpStartupInfo: ?*STARTUPINFOA,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetFirmwareEnvironmentVariableA(
    lpName: ?*i8,
    lpGuid: ?*i8,
    pBuffer: ?*opaque{},
    nSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetFirmwareEnvironmentVariableW(
    lpName: ?*u16,
    lpGuid: ?*u16,
    pBuffer: ?*opaque{},
    nSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetFirmwareEnvironmentVariableExA(
    lpName: ?*i8,
    lpGuid: ?*i8,
    pBuffer: ?*opaque{},
    nSize: u32,
    pdwAttribubutes: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetFirmwareEnvironmentVariableExW(
    lpName: ?*u16,
    lpGuid: ?*u16,
    pBuffer: ?*opaque{},
    nSize: u32,
    pdwAttribubutes: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetFirmwareEnvironmentVariableA(
    lpName: ?*i8,
    lpGuid: ?*i8,
    pValue: ?*opaque{},
    nSize: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetFirmwareEnvironmentVariableW(
    lpName: ?*u16,
    lpGuid: ?*u16,
    pValue: ?*opaque{},
    nSize: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetFirmwareEnvironmentVariableExA(
    lpName: ?*i8,
    lpGuid: ?*i8,
    pValue: ?*opaque{},
    nSize: u32,
    dwAttributes: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetFirmwareEnvironmentVariableExW(
    lpName: ?*u16,
    lpGuid: ?*u16,
    pValue: ?*opaque{},
    nSize: u32,
    dwAttributes: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetFirmwareType(
    FirmwareType: ?*FIRMWARE_TYPE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn IsNativeVhdBoot(
    NativeVhdBoot: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetProfileIntA(
    lpAppName: ?*i8,
    lpKeyName: ?*i8,
    nDefault: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetProfileIntW(
    lpAppName: ?*u16,
    lpKeyName: ?*u16,
    nDefault: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetProfileStringA(
    lpAppName: ?*i8,
    lpKeyName: ?*i8,
    lpDefault: ?*i8,
    lpReturnedString: ?*i8,
    nSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetProfileStringW(
    lpAppName: ?*u16,
    lpKeyName: ?*u16,
    lpDefault: ?*u16,
    lpReturnedString: ?*u16,
    nSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn WriteProfileStringA(
    lpAppName: ?*i8,
    lpKeyName: ?*i8,
    lpString: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn WriteProfileStringW(
    lpAppName: ?*u16,
    lpKeyName: ?*u16,
    lpString: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetProfileSectionA(
    lpAppName: ?*i8,
    lpReturnedString: ?*i8,
    nSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetProfileSectionW(
    lpAppName: ?*u16,
    lpReturnedString: ?*u16,
    nSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn WriteProfileSectionA(
    lpAppName: ?*i8,
    lpString: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn WriteProfileSectionW(
    lpAppName: ?*u16,
    lpString: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetPrivateProfileIntA(
    lpAppName: ?*i8,
    lpKeyName: ?*i8,
    nDefault: i32,
    lpFileName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetPrivateProfileIntW(
    lpAppName: ?*u16,
    lpKeyName: ?*u16,
    nDefault: i32,
    lpFileName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetPrivateProfileStringA(
    lpAppName: ?*i8,
    lpKeyName: ?*i8,
    lpDefault: ?*i8,
    lpReturnedString: ?*i8,
    nSize: u32,
    lpFileName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetPrivateProfileStringW(
    lpAppName: ?*u16,
    lpKeyName: ?*u16,
    lpDefault: ?*u16,
    lpReturnedString: ?*u16,
    nSize: u32,
    lpFileName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn WritePrivateProfileStringA(
    lpAppName: ?*i8,
    lpKeyName: ?*i8,
    lpString: ?*i8,
    lpFileName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn WritePrivateProfileStringW(
    lpAppName: ?*u16,
    lpKeyName: ?*u16,
    lpString: ?*u16,
    lpFileName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetPrivateProfileSectionA(
    lpAppName: ?*i8,
    lpReturnedString: ?*i8,
    nSize: u32,
    lpFileName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetPrivateProfileSectionW(
    lpAppName: ?*u16,
    lpReturnedString: ?*u16,
    nSize: u32,
    lpFileName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn WritePrivateProfileSectionA(
    lpAppName: ?*i8,
    lpString: ?*i8,
    lpFileName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn WritePrivateProfileSectionW(
    lpAppName: ?*u16,
    lpString: ?*u16,
    lpFileName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetPrivateProfileSectionNamesA(
    lpszReturnBuffer: ?*i8,
    nSize: u32,
    lpFileName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetPrivateProfileSectionNamesW(
    lpszReturnBuffer: ?*u16,
    nSize: u32,
    lpFileName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetPrivateProfileStructA(
    lpszSection: ?*i8,
    lpszKey: ?*i8,
    lpStruct: ?*opaque{},
    uSizeStruct: u32,
    szFile: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetPrivateProfileStructW(
    lpszSection: ?*u16,
    lpszKey: ?*u16,
    lpStruct: ?*opaque{},
    uSizeStruct: u32,
    szFile: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn WritePrivateProfileStructA(
    lpszSection: ?*i8,
    lpszKey: ?*i8,
    lpStruct: ?*opaque{},
    uSizeStruct: u32,
    szFile: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn WritePrivateProfileStructW(
    lpszSection: ?*u16,
    lpszKey: ?*u16,
    lpStruct: ?*opaque{},
    uSizeStruct: u32,
    szFile: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn IsBadHugeReadPtr(
    lp: ?*opaque{},
    ucb: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn IsBadHugeWritePtr(
    lp: ?*opaque{},
    ucb: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetComputerNameA(
    lpBuffer: ?*i8,
    nSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetComputerNameW(
    lpBuffer: ?*u16,
    nSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn DnsHostnameToComputerNameA(
    Hostname: ?*i8,
    ComputerName: ?*i8,
    nSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn DnsHostnameToComputerNameW(
    Hostname: ?*u16,
    ComputerName: ?*u16,
    nSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetUserNameA(
    lpBuffer: ?*i8,
    pcbBuffer: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetUserNameW(
    lpBuffer: ?*u16,
    pcbBuffer: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn IsTokenUntrusted(
    TokenHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetTimerQueueTimer(
    TimerQueue: HANDLE,
    Callback: WAITORTIMERCALLBACK,
    Parameter: ?*opaque{},
    DueTime: u32,
    Period: u32,
    PreferIo: BOOL,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn CancelTimerQueueTimer(
    TimerQueue: HANDLE,
    Timer: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetCurrentHwProfileA(
    lpHwProfileInfo: ?*HW_PROFILE_INFOA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetCurrentHwProfileW(
    lpHwProfileInfo: ?*HW_PROFILE_INFOW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn VerifyVersionInfoA(
    lpVersionInformation: ?*OSVERSIONINFOEXA,
    dwTypeMask: u32,
    dwlConditionMask: u64,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn VerifyVersionInfoW(
    lpVersionInformation: ?*OSVERSIONINFOEXW,
    dwTypeMask: u32,
    dwlConditionMask: u64,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SystemTimeToTzSpecificLocalTime(
    lpTimeZoneInformation: ?*TIME_ZONE_INFORMATION,
    lpUniversalTime: ?*SYSTEMTIME,
    lpLocalTime: ?*SYSTEMTIME,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn TzSpecificLocalTimeToSystemTime(
    lpTimeZoneInformation: ?*TIME_ZONE_INFORMATION,
    lpLocalTime: ?*SYSTEMTIME,
    lpUniversalTime: ?*SYSTEMTIME,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FileTimeToSystemTime(
    lpFileTime: ?*FILETIME,
    lpSystemTime: ?*SYSTEMTIME,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SystemTimeToFileTime(
    lpSystemTime: ?*SYSTEMTIME,
    lpFileTime: ?*FILETIME,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetTimeZoneInformation(
    lpTimeZoneInformation: ?*TIME_ZONE_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetTimeZoneInformation(
    lpTimeZoneInformation: ?*TIME_ZONE_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetDynamicTimeZoneInformation(
    lpTimeZoneInformation: ?*DYNAMIC_TIME_ZONE_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetDynamicTimeZoneInformation(
    pTimeZoneInformation: ?*DYNAMIC_TIME_ZONE_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetTimeZoneInformationForYear(
    wYear: u16,
    pdtzi: ?*DYNAMIC_TIME_ZONE_INFORMATION,
    ptzi: ?*TIME_ZONE_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn EnumDynamicTimeZoneInformation(
    dwIndex: u32,
    lpTimeZoneInformation: ?*DYNAMIC_TIME_ZONE_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetDynamicTimeZoneInformationEffectiveYears(
    lpTimeZoneInformation: ?*DYNAMIC_TIME_ZONE_INFORMATION,
    FirstYear: ?*u32,
    LastYear: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SystemTimeToTzSpecificLocalTimeEx(
    lpTimeZoneInformation: ?*DYNAMIC_TIME_ZONE_INFORMATION,
    lpUniversalTime: ?*SYSTEMTIME,
    lpLocalTime: ?*SYSTEMTIME,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn TzSpecificLocalTimeToSystemTimeEx(
    lpTimeZoneInformation: ?*DYNAMIC_TIME_ZONE_INFORMATION,
    lpLocalTime: ?*SYSTEMTIME,
    lpUniversalTime: ?*SYSTEMTIME,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn LocalFileTimeToLocalSystemTime(
    timeZoneInformation: ?*TIME_ZONE_INFORMATION,
    localFileTime: ?*FILETIME,
    localSystemTime: ?*SYSTEMTIME,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn LocalSystemTimeToLocalFileTime(
    timeZoneInformation: ?*TIME_ZONE_INFORMATION,
    localSystemTime: ?*SYSTEMTIME,
    localFileTime: ?*FILETIME,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn CreateJobSet(
    NumJob: u32,
    UserJobSet: ?*JOB_SET_ARRAY,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn ReplacePartitionUnit(
    TargetPartition: ?*u16,
    SparePartition: ?*u16,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn InitializeContext2(
    Buffer: ?*opaque{},
    ContextFlags: u32,
    Context: ?*?*CONTEXT,
    ContextLength: ?*u32,
    XStateCompactionMask: u64,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-backgroundtask-l1-1-0" fn RaiseCustomSystemEventTrigger(
    CustomSystemEventTriggerConfig: ?*CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegCloseKey(
    hKey: HKEY,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegOverridePredefKey(
    hKey: HKEY,
    hNewHKey: HKEY,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegOpenUserClassesRoot(
    hToken: HANDLE,
    dwOptions: u32,
    samDesired: u32,
    phkResult: ?*HKEY,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegOpenCurrentUser(
    samDesired: u32,
    phkResult: ?*HKEY,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegDisablePredefinedCache(
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegDisablePredefinedCacheEx(
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegConnectRegistryA(
    lpMachineName: ?*i8,
    hKey: HKEY,
    phkResult: ?*HKEY,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegConnectRegistryW(
    lpMachineName: ?*u16,
    hKey: HKEY,
    phkResult: ?*HKEY,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegConnectRegistryExA(
    lpMachineName: ?*i8,
    hKey: HKEY,
    Flags: u32,
    phkResult: ?*HKEY,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegConnectRegistryExW(
    lpMachineName: ?*u16,
    hKey: HKEY,
    Flags: u32,
    phkResult: ?*HKEY,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegCreateKeyA(
    hKey: HKEY,
    lpSubKey: ?*i8,
    phkResult: ?*HKEY,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegCreateKeyW(
    hKey: HKEY,
    lpSubKey: ?*u16,
    phkResult: ?*HKEY,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegCreateKeyExA(
    hKey: HKEY,
    lpSubKey: ?*i8,
    Reserved: u32,
    lpClass: ?*i8,
    dwOptions: u32,
    samDesired: u32,
    lpSecurityAttributes: ?*SECURITY_ATTRIBUTES,
    phkResult: ?*HKEY,
    lpdwDisposition: ?*u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegCreateKeyExW(
    hKey: HKEY,
    lpSubKey: ?*u16,
    Reserved: u32,
    lpClass: ?*u16,
    dwOptions: u32,
    samDesired: u32,
    lpSecurityAttributes: ?*SECURITY_ATTRIBUTES,
    phkResult: ?*HKEY,
    lpdwDisposition: ?*u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegCreateKeyTransactedA(
    hKey: HKEY,
    lpSubKey: ?*i8,
    Reserved: u32,
    lpClass: ?*i8,
    dwOptions: u32,
    samDesired: u32,
    lpSecurityAttributes: ?*SECURITY_ATTRIBUTES,
    phkResult: ?*HKEY,
    lpdwDisposition: ?*u32,
    hTransaction: HANDLE,
    pExtendedParemeter: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegCreateKeyTransactedW(
    hKey: HKEY,
    lpSubKey: ?*u16,
    Reserved: u32,
    lpClass: ?*u16,
    dwOptions: u32,
    samDesired: u32,
    lpSecurityAttributes: ?*SECURITY_ATTRIBUTES,
    phkResult: ?*HKEY,
    lpdwDisposition: ?*u32,
    hTransaction: HANDLE,
    pExtendedParemeter: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegDeleteKeyA(
    hKey: HKEY,
    lpSubKey: ?*i8,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegDeleteKeyW(
    hKey: HKEY,
    lpSubKey: ?*u16,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegDeleteKeyExA(
    hKey: HKEY,
    lpSubKey: ?*i8,
    samDesired: u32,
    Reserved: u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegDeleteKeyExW(
    hKey: HKEY,
    lpSubKey: ?*u16,
    samDesired: u32,
    Reserved: u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegDeleteKeyTransactedA(
    hKey: HKEY,
    lpSubKey: ?*i8,
    samDesired: u32,
    Reserved: u32,
    hTransaction: HANDLE,
    pExtendedParameter: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegDeleteKeyTransactedW(
    hKey: HKEY,
    lpSubKey: ?*u16,
    samDesired: u32,
    Reserved: u32,
    hTransaction: HANDLE,
    pExtendedParameter: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegDisableReflectionKey(
    hBase: HKEY,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegEnableReflectionKey(
    hBase: HKEY,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegQueryReflectionKey(
    hBase: HKEY,
    bIsReflectionDisabled: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegDeleteValueA(
    hKey: HKEY,
    lpValueName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegDeleteValueW(
    hKey: HKEY,
    lpValueName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegEnumKeyA(
    hKey: HKEY,
    dwIndex: u32,
    lpName: ?*i8,
    cchName: u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegEnumKeyW(
    hKey: HKEY,
    dwIndex: u32,
    lpName: ?*u16,
    cchName: u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegEnumKeyExA(
    hKey: HKEY,
    dwIndex: u32,
    lpName: ?*i8,
    lpcchName: ?*u32,
    lpReserved: ?*u32,
    lpClass: ?*i8,
    lpcchClass: ?*u32,
    lpftLastWriteTime: ?*FILETIME,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegEnumKeyExW(
    hKey: HKEY,
    dwIndex: u32,
    lpName: ?*u16,
    lpcchName: ?*u32,
    lpReserved: ?*u32,
    lpClass: ?*u16,
    lpcchClass: ?*u32,
    lpftLastWriteTime: ?*FILETIME,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegEnumValueA(
    hKey: HKEY,
    dwIndex: u32,
    lpValueName: ?*i8,
    lpcchValueName: ?*u32,
    lpReserved: ?*u32,
    lpType: ?*u32,
    lpData: ?*u8,
    lpcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegEnumValueW(
    hKey: HKEY,
    dwIndex: u32,
    lpValueName: ?*u16,
    lpcchValueName: ?*u32,
    lpReserved: ?*u32,
    lpType: ?*u32,
    lpData: ?*u8,
    lpcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegFlushKey(
    hKey: HKEY,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegLoadKeyA(
    hKey: HKEY,
    lpSubKey: ?*i8,
    lpFile: ?*i8,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegLoadKeyW(
    hKey: HKEY,
    lpSubKey: ?*u16,
    lpFile: ?*u16,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegNotifyChangeKeyValue(
    hKey: HKEY,
    bWatchSubtree: BOOL,
    dwNotifyFilter: u32,
    hEvent: HANDLE,
    fAsynchronous: BOOL,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegOpenKeyA(
    hKey: HKEY,
    lpSubKey: ?*i8,
    phkResult: ?*HKEY,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegOpenKeyW(
    hKey: HKEY,
    lpSubKey: ?*u16,
    phkResult: ?*HKEY,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegOpenKeyExA(
    hKey: HKEY,
    lpSubKey: ?*i8,
    ulOptions: u32,
    samDesired: u32,
    phkResult: ?*HKEY,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegOpenKeyExW(
    hKey: HKEY,
    lpSubKey: ?*u16,
    ulOptions: u32,
    samDesired: u32,
    phkResult: ?*HKEY,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegOpenKeyTransactedA(
    hKey: HKEY,
    lpSubKey: ?*i8,
    ulOptions: u32,
    samDesired: u32,
    phkResult: ?*HKEY,
    hTransaction: HANDLE,
    pExtendedParemeter: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegOpenKeyTransactedW(
    hKey: HKEY,
    lpSubKey: ?*u16,
    ulOptions: u32,
    samDesired: u32,
    phkResult: ?*HKEY,
    hTransaction: HANDLE,
    pExtendedParemeter: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegQueryInfoKeyA(
    hKey: HKEY,
    lpClass: ?*i8,
    lpcchClass: ?*u32,
    lpReserved: ?*u32,
    lpcSubKeys: ?*u32,
    lpcbMaxSubKeyLen: ?*u32,
    lpcbMaxClassLen: ?*u32,
    lpcValues: ?*u32,
    lpcbMaxValueNameLen: ?*u32,
    lpcbMaxValueLen: ?*u32,
    lpcbSecurityDescriptor: ?*u32,
    lpftLastWriteTime: ?*FILETIME,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegQueryInfoKeyW(
    hKey: HKEY,
    lpClass: ?*u16,
    lpcchClass: ?*u32,
    lpReserved: ?*u32,
    lpcSubKeys: ?*u32,
    lpcbMaxSubKeyLen: ?*u32,
    lpcbMaxClassLen: ?*u32,
    lpcValues: ?*u32,
    lpcbMaxValueNameLen: ?*u32,
    lpcbMaxValueLen: ?*u32,
    lpcbSecurityDescriptor: ?*u32,
    lpftLastWriteTime: ?*FILETIME,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegQueryValueA(
    hKey: HKEY,
    lpSubKey: ?*i8,
    lpData: ?*i8,
    lpcbData: ?*i32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegQueryValueW(
    hKey: HKEY,
    lpSubKey: ?*u16,
    lpData: ?*u16,
    lpcbData: ?*i32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegQueryMultipleValuesA(
    hKey: HKEY,
    val_list: ?*VALENTA,
    num_vals: u32,
    lpValueBuf: ?*i8,
    ldwTotsize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegQueryMultipleValuesW(
    hKey: HKEY,
    val_list: ?*VALENTW,
    num_vals: u32,
    lpValueBuf: ?*u16,
    ldwTotsize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegQueryValueExA(
    hKey: HKEY,
    lpValueName: ?*i8,
    lpReserved: ?*u32,
    lpType: ?*u32,
    lpData: ?*u8,
    lpcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegQueryValueExW(
    hKey: HKEY,
    lpValueName: ?*u16,
    lpReserved: ?*u32,
    lpType: ?*u32,
    lpData: ?*u8,
    lpcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegReplaceKeyA(
    hKey: HKEY,
    lpSubKey: ?*i8,
    lpNewFile: ?*i8,
    lpOldFile: ?*i8,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegReplaceKeyW(
    hKey: HKEY,
    lpSubKey: ?*u16,
    lpNewFile: ?*u16,
    lpOldFile: ?*u16,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegRestoreKeyA(
    hKey: HKEY,
    lpFile: ?*i8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegRestoreKeyW(
    hKey: HKEY,
    lpFile: ?*u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegRenameKey(
    hKey: HKEY,
    lpSubKeyName: ?*u16,
    lpNewKeyName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegSaveKeyA(
    hKey: HKEY,
    lpFile: ?*i8,
    lpSecurityAttributes: ?*SECURITY_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegSaveKeyW(
    hKey: HKEY,
    lpFile: ?*u16,
    lpSecurityAttributes: ?*SECURITY_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegSetValueA(
    hKey: HKEY,
    lpSubKey: ?*i8,
    dwType: u32,
    lpData: ?*i8,
    cbData: u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegSetValueW(
    hKey: HKEY,
    lpSubKey: ?*u16,
    dwType: u32,
    lpData: ?*u16,
    cbData: u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegSetValueExA(
    hKey: HKEY,
    lpValueName: ?*i8,
    Reserved: u32,
    dwType: u32,
    lpData: ?*u8,
    cbData: u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegSetValueExW(
    hKey: HKEY,
    lpValueName: ?*u16,
    Reserved: u32,
    dwType: u32,
    lpData: ?*u8,
    cbData: u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegUnLoadKeyA(
    hKey: HKEY,
    lpSubKey: ?*i8,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegUnLoadKeyW(
    hKey: HKEY,
    lpSubKey: ?*u16,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegDeleteKeyValueA(
    hKey: HKEY,
    lpSubKey: ?*i8,
    lpValueName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegDeleteKeyValueW(
    hKey: HKEY,
    lpSubKey: ?*u16,
    lpValueName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegSetKeyValueA(
    hKey: HKEY,
    lpSubKey: ?*i8,
    lpValueName: ?*i8,
    dwType: u32,
    lpData: ?*opaque{},
    cbData: u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegSetKeyValueW(
    hKey: HKEY,
    lpSubKey: ?*u16,
    lpValueName: ?*u16,
    dwType: u32,
    lpData: ?*opaque{},
    cbData: u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegDeleteTreeA(
    hKey: HKEY,
    lpSubKey: ?*i8,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegDeleteTreeW(
    hKey: HKEY,
    lpSubKey: ?*u16,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegCopyTreeA(
    hKeySrc: HKEY,
    lpSubKey: ?*i8,
    hKeyDest: HKEY,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegGetValueA(
    hkey: HKEY,
    lpSubKey: ?*i8,
    lpValue: ?*i8,
    dwFlags: u32,
    pdwType: ?*u32,
    pvData: ?*opaque{},
    pcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegGetValueW(
    hkey: HKEY,
    lpSubKey: ?*u16,
    lpValue: ?*u16,
    dwFlags: u32,
    pdwType: ?*u32,
    pvData: ?*opaque{},
    pcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegCopyTreeW(
    hKeySrc: HKEY,
    lpSubKey: ?*u16,
    hKeyDest: HKEY,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegLoadMUIStringA(
    hKey: HKEY,
    pszValue: ?*i8,
    pszOutBuf: ?*i8,
    cbOutBuf: u32,
    pcbData: ?*u32,
    Flags: u32,
    pszDirectory: ?*i8,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegLoadMUIStringW(
    hKey: HKEY,
    pszValue: ?*u16,
    pszOutBuf: ?*u16,
    cbOutBuf: u32,
    pcbData: ?*u32,
    Flags: u32,
    pszDirectory: ?*u16,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegLoadAppKeyA(
    lpFile: ?*i8,
    phkResult: ?*HKEY,
    samDesired: u32,
    dwOptions: u32,
    Reserved: u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegLoadAppKeyW(
    lpFile: ?*u16,
    phkResult: ?*HKEY,
    samDesired: u32,
    dwOptions: u32,
    Reserved: u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn CheckForHiberboot(
    pHiberboot: ?*u8,
    bClearFlag: u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegSaveKeyExA(
    hKey: HKEY,
    lpFile: ?*i8,
    lpSecurityAttributes: ?*SECURITY_ATTRIBUTES,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegSaveKeyExW(
    hKey: HKEY,
    lpFile: ?*u16,
    lpSecurityAttributes: ?*SECURITY_ATTRIBUTES,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn NtClose(
    Handle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn NtCreateFile(
    FileHandle: ?*?*opaque{},
    DesiredAccess: u32,
    ObjectAttributes: ?*OBJECT_ATTRIBUTES,
    IoStatusBlock: ?*IO_STATUS_BLOCK,
    AllocationSize: ?*LARGE_INTEGER,
    FileAttributes: u32,
    ShareAccess: u32,
    CreateDisposition: u32,
    CreateOptions: u32,
    EaBuffer: ?*opaque{},
    EaLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn NtOpenFile(
    FileHandle: ?*?*opaque{},
    DesiredAccess: u32,
    ObjectAttributes: ?*OBJECT_ATTRIBUTES,
    IoStatusBlock: ?*IO_STATUS_BLOCK,
    ShareAccess: u32,
    OpenOptions: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn NtRenameKey(
    KeyHandle: HANDLE,
    NewName: ?*UNICODE_STRING,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn NtNotifyChangeMultipleKeys(
    MasterKeyHandle: HANDLE,
    Count: u32,
    SubordinateObjects: ?*OBJECT_ATTRIBUTES,
    Event: HANDLE,
    ApcRoutine: PIO_APC_ROUTINE,
    ApcContext: ?*opaque{},
    IoStatusBlock: ?*IO_STATUS_BLOCK,
    CompletionFilter: u32,
    WatchTree: u8,
    Buffer: ?*opaque{},
    BufferSize: u32,
    Asynchronous: u8,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn NtQueryMultipleValueKey(
    KeyHandle: HANDLE,
    ValueEntries: ?*KEY_VALUE_ENTRY,
    EntryCount: u32,
    ValueBuffer: ?*opaque{},
    BufferLength: ?*u32,
    RequiredBufferLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn NtSetInformationKey(
    KeyHandle: HANDLE,
    KeySetInformationClass: KEY_SET_INFORMATION_CLASS,
    KeySetInformation: ?*opaque{},
    KeySetInformationLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn NtDeviceIoControlFile(
    FileHandle: HANDLE,
    Event: HANDLE,
    ApcRoutine: PIO_APC_ROUTINE,
    ApcContext: ?*opaque{},
    IoStatusBlock: ?*IO_STATUS_BLOCK,
    IoControlCode: u32,
    InputBuffer: ?*opaque{},
    InputBufferLength: u32,
    OutputBuffer: ?*opaque{},
    OutputBufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn NtWaitForSingleObject(
    Handle: HANDLE,
    Alertable: u8,
    Timeout: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlIsNameLegalDOS8Dot3(
    Name: ?*UNICODE_STRING,
    OemName: ?*STRING,
    NameContainsSpaces: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn NtQueryObject(
    Handle: HANDLE,
    ObjectInformationClass: OBJECT_INFORMATION_CLASS,
    ObjectInformation: ?*opaque{},
    ObjectInformationLength: u32,
    ReturnLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn NtQuerySystemInformation(
    SystemInformationClass: SYSTEM_INFORMATION_CLASS,
    SystemInformation: ?*opaque{},
    SystemInformationLength: u32,
    ReturnLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn NtQuerySystemTime(
    SystemTime: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlLocalTimeToSystemTime(
    LocalTime: ?*LARGE_INTEGER,
    SystemTime: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlTimeToSecondsSince1970(
    Time: ?*LARGE_INTEGER,
    ElapsedSeconds: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlFreeAnsiString(
    AnsiString: ?*STRING,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlFreeUnicodeString(
    UnicodeString: ?*UNICODE_STRING,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlFreeOemString(
    OemString: ?*STRING,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlInitString(
    DestinationString: ?*STRING,
    SourceString: ?*i8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlInitStringEx(
    DestinationString: ?*STRING,
    SourceString: ?*i8,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlInitAnsiString(
    DestinationString: ?*STRING,
    SourceString: ?*i8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlInitAnsiStringEx(
    DestinationString: ?*STRING,
    SourceString: ?*i8,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlInitUnicodeString(
    DestinationString: ?*UNICODE_STRING,
    SourceString: ?*u16,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlAnsiStringToUnicodeString(
    DestinationString: ?*UNICODE_STRING,
    SourceString: ?*STRING,
    AllocateDestinationString: u8,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlUnicodeStringToAnsiString(
    DestinationString: ?*STRING,
    SourceString: ?*UNICODE_STRING,
    AllocateDestinationString: u8,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlUnicodeStringToOemString(
    DestinationString: ?*STRING,
    SourceString: ?*UNICODE_STRING,
    AllocateDestinationString: u8,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlUnicodeToMultiByteSize(
    BytesInMultiByteString: ?*u32,
    UnicodeString: ?*u16,
    BytesInUnicodeString: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlCharToInteger(
    String: ?*i8,
    Base: u32,
    Value: ?*u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlUniform(
    Seed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "Cabinet" fn FCICreate(
    perf: ?*ERF,
    pfnfcifp: PFNFCIFILEPLACED,
    pfna: PFNFCIALLOC,
    pfnf: PFNFCIFREE,
    pfnopen: PFNFCIOPEN,
    pfnread: PFNFCIREAD,
    pfnwrite: PFNFCIWRITE,
    pfnclose: PFNFCICLOSE,
    pfnseek: PFNFCISEEK,
    pfndelete: PFNFCIDELETE,
    pfnfcigtf: PFNFCIGETTEMPFILE,
    pccab: ?*CCAB,
    pv: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "Cabinet" fn FCIAddFile(
    hfci: ?*opaque{},
    pszSourceFile: ?*i8,
    pszFileName: ?*i8,
    fExecute: BOOL,
    pfnfcignc: PFNFCIGETNEXTCABINET,
    pfnfcis: PFNFCISTATUS,
    pfnfcigoi: PFNFCIGETOPENINFO,
    typeCompress: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "Cabinet" fn FCIFlushCabinet(
    hfci: ?*opaque{},
    fGetNextCab: BOOL,
    pfnfcignc: PFNFCIGETNEXTCABINET,
    pfnfcis: PFNFCISTATUS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "Cabinet" fn FCIFlushFolder(
    hfci: ?*opaque{},
    pfnfcignc: PFNFCIGETNEXTCABINET,
    pfnfcis: PFNFCISTATUS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "Cabinet" fn FCIDestroy(
    hfci: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "Cabinet" fn FDICreate(
    pfnalloc: PFNALLOC,
    pfnfree: PFNFREE,
    pfnopen: PFNOPEN,
    pfnread: PFNREAD,
    pfnwrite: PFNWRITE,
    pfnclose: PFNCLOSE,
    pfnseek: PFNSEEK,
    cpuType: i32,
    perf: ?*ERF,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "Cabinet" fn FDIIsCabinet(
    hfdi: ?*opaque{},
    hf: ?*opaque{},
    pfdici: ?*FDICABINETINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "Cabinet" fn FDICopy(
    hfdi: ?*opaque{},
    pszCabinet: ?*i8,
    pszCabPath: ?*i8,
    flags: i32,
    pfnfdin: PFNFDINOTIFY,
    pfnfdid: PFNFDIDECRYPT,
    pvUser: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "Cabinet" fn FDIDestroy(
    hfdi: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "Cabinet" fn FDITruncateCabinet(
    hfdi: ?*opaque{},
    pszCabinetName: ?*i8,
    iFolderToDelete: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-featurestaging-l1-1-0" fn GetFeatureEnabledState(
    featureId: u32,
    changeTime: FEATURE_CHANGE_TIME,
) callconv(@import("std").os.windows.WINAPI) FEATURE_ENABLED_STATE;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-featurestaging-l1-1-0" fn RecordFeatureUsage(
    featureId: u32,
    kind: u32,
    addend: u32,
    originName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-featurestaging-l1-1-0" fn RecordFeatureError(
    featureId: u32,
    @"error": ?*FEATURE_ERROR,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-featurestaging-l1-1-0" fn SubscribeFeatureStateChangeNotification(
    subscription: ?*?*FEATURE_STATE_CHANGE_SUBSCRIPTION__,
    callback: PFEATURE_STATE_CHANGE_CALLBACK,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-featurestaging-l1-1-0" fn UnsubscribeFeatureStateChangeNotification(
    subscription: ?*FEATURE_STATE_CHANGE_SUBSCRIPTION__,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-featurestaging-l1-1-1" fn GetFeatureVariant(
    featureId: u32,
    changeTime: FEATURE_CHANGE_TIME,
    payloadId: ?*u32,
    hasNotification: ?*i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fhsvcctl" fn FhServiceOpenPipe(
    StartServiceIfStopped: BOOL,
    Pipe: ?*?*FH_SERVICE_PIPE_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "fhsvcctl" fn FhServiceClosePipe(
    Pipe: ?*FH_SERVICE_PIPE_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "fhsvcctl" fn FhServiceStartBackup(
    Pipe: ?*FH_SERVICE_PIPE_HANDLE__,
    LowPriorityIo: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "fhsvcctl" fn FhServiceStopBackup(
    Pipe: ?*FH_SERVICE_PIPE_HANDLE__,
    StopTracking: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "fhsvcctl" fn FhServiceReloadConfiguration(
    Pipe: ?*FH_SERVICE_PIPE_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "fhsvcctl" fn FhServiceBlockBackup(
    Pipe: ?*FH_SERVICE_PIPE_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "fhsvcctl" fn FhServiceUnblockBackup(
    Pipe: ?*FH_SERVICE_PIPE_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn DCIOpenProvider(
) callconv(@import("std").os.windows.WINAPI) HDC;

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn DCICloseProvider(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn DCICreatePrimary(
    hdc: HDC,
    lplpSurface: ?*?*DCISURFACEINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn DCICreateOffscreen(
    hdc: HDC,
    dwCompression: u32,
    dwRedMask: u32,
    dwGreenMask: u32,
    dwBlueMask: u32,
    dwWidth: u32,
    dwHeight: u32,
    dwDCICaps: u32,
    dwBitCount: u32,
    lplpSurface: ?*?*DCIOFFSCREEN,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn DCICreateOverlay(
    hdc: HDC,
    lpOffscreenSurf: ?*opaque{},
    lplpSurface: ?*?*DCIOVERLAY,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn DCIEnum(
    hdc: HDC,
    lprDst: ?*RECT,
    lprSrc: ?*RECT,
    lpFnCallback: ?*opaque{},
    lpContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn DCISetSrcDestClip(
    pdci: ?*DCIOFFSCREEN,
    srcrc: ?*RECT,
    destrc: ?*RECT,
    prd: ?*RGNDATA,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn WinWatchOpen(
    hwnd: HWND,
) callconv(@import("std").os.windows.WINAPI) ?*HWINWATCH__;

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn WinWatchClose(
    hWW: ?*HWINWATCH__,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn WinWatchGetClipList(
    hWW: ?*HWINWATCH__,
    prc: ?*RECT,
    size: u32,
    prd: ?*RGNDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn WinWatchDidStatusChange(
    hWW: ?*HWINWATCH__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn GetWindowRegionData(
    hwnd: HWND,
    size: u32,
    prd: ?*RGNDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn GetDCRegionData(
    hdc: HDC,
    size: u32,
    prd: ?*RGNDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn WinWatchNotify(
    hWW: ?*HWINWATCH__,
    NotifyCallback: WINWATCHNOTIFYPROC,
    NotifyParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn DCIEndAccess(
    pdci: ?*DCISURFACEINFO,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn DCIBeginAccess(
    pdci: ?*DCISURFACEINFO,
    x: i32,
    y: i32,
    dx: i32,
    dy: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn DCIDestroy(
    pdci: ?*DCISURFACEINFO,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn DCIDraw(
    pdci: ?*DCIOFFSCREEN,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn DCISetClipList(
    pdci: ?*DCIOFFSCREEN,
    prd: ?*RGNDATA,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "DCIMAN32" fn DCISetDestination(
    pdci: ?*DCIOFFSCREEN,
    dst: ?*RECT,
    src: ?*RECT,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-dx-d3dkmt-l1-1-0" fn GdiEntry13(
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn RunSetupCommandA(
    hWnd: HWND,
    szCmdName: ?*i8,
    szInfSection: ?*i8,
    szDir: ?*i8,
    lpszTitle: ?*i8,
    phEXE: ?*HANDLE,
    dwFlags: u32,
    pvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn RunSetupCommandW(
    hWnd: HWND,
    szCmdName: ?*u16,
    szInfSection: ?*u16,
    szDir: ?*u16,
    lpszTitle: ?*u16,
    phEXE: ?*HANDLE,
    dwFlags: u32,
    pvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn NeedRebootInit(
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn NeedReboot(
    dwRebootCheck: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn RebootCheckOnInstallA(
    hwnd: HWND,
    pszINF: ?*i8,
    pszSec: ?*i8,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn RebootCheckOnInstallW(
    hwnd: HWND,
    pszINF: ?*u16,
    pszSec: ?*u16,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn TranslateInfStringA(
    pszInfFilename: ?*i8,
    pszInstallSection: ?*i8,
    pszTranslateSection: ?*i8,
    pszTranslateKey: ?*i8,
    pszBuffer: ?*i8,
    cchBuffer: u32,
    pdwRequiredSize: ?*u32,
    pvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn TranslateInfStringW(
    pszInfFilename: ?*u16,
    pszInstallSection: ?*u16,
    pszTranslateSection: ?*u16,
    pszTranslateKey: ?*u16,
    pszBuffer: ?*u16,
    cchBuffer: u32,
    pdwRequiredSize: ?*u32,
    pvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn RegInstallA(
    hmod: ?*opaque{},
    pszSection: ?*i8,
    pstTable: ?*STRTABLEA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn RegInstallW(
    hmod: ?*opaque{},
    pszSection: ?*u16,
    pstTable: ?*STRTABLEW,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn LaunchINFSectionExW(
    hwnd: HWND,
    hInstance: HINSTANCE,
    pszParms: ?*u16,
    nShow: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn ExecuteCabA(
    hwnd: HWND,
    pCab: ?*_CabInfoA,
    pReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn ExecuteCabW(
    hwnd: HWND,
    pCab: ?*_CabInfoW,
    pReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn AdvInstallFileA(
    hwnd: HWND,
    lpszSourceDir: ?*i8,
    lpszSourceFile: ?*i8,
    lpszDestDir: ?*i8,
    lpszDestFile: ?*i8,
    dwFlags: u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn AdvInstallFileW(
    hwnd: HWND,
    lpszSourceDir: ?*u16,
    lpszSourceFile: ?*u16,
    lpszDestDir: ?*u16,
    lpszDestFile: ?*u16,
    dwFlags: u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn RegSaveRestoreA(
    hWnd: HWND,
    pszTitleString: ?*i8,
    hkBckupKey: HKEY,
    pcszRootKey: ?*i8,
    pcszSubKey: ?*i8,
    pcszValueName: ?*i8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn RegSaveRestoreW(
    hWnd: HWND,
    pszTitleString: ?*u16,
    hkBckupKey: HKEY,
    pcszRootKey: ?*u16,
    pcszSubKey: ?*u16,
    pcszValueName: ?*u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn RegSaveRestoreOnINFA(
    hWnd: HWND,
    pszTitle: ?*i8,
    pszINF: ?*i8,
    pszSection: ?*i8,
    hHKLMBackKey: HKEY,
    hHKCUBackKey: HKEY,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn RegSaveRestoreOnINFW(
    hWnd: HWND,
    pszTitle: ?*u16,
    pszINF: ?*u16,
    pszSection: ?*u16,
    hHKLMBackKey: HKEY,
    hHKCUBackKey: HKEY,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn RegRestoreAllA(
    hWnd: HWND,
    pszTitleString: ?*i8,
    hkBckupKey: HKEY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn RegRestoreAllW(
    hWnd: HWND,
    pszTitleString: ?*u16,
    hkBckupKey: HKEY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn FileSaveRestoreW(
    hDlg: HWND,
    lpFileList: ?*u16,
    lpDir: ?*u16,
    lpBaseName: ?*u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn FileSaveRestoreOnINFA(
    hWnd: HWND,
    pszTitle: ?*i8,
    pszINF: ?*i8,
    pszSection: ?*i8,
    pszBackupDir: ?*i8,
    pszBaseBackupFile: ?*i8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn FileSaveRestoreOnINFW(
    hWnd: HWND,
    pszTitle: ?*u16,
    pszINF: ?*u16,
    pszSection: ?*u16,
    pszBackupDir: ?*u16,
    pszBaseBackupFile: ?*u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn AddDelBackupEntryA(
    lpcszFileList: ?*i8,
    lpcszBackupDir: ?*i8,
    lpcszBaseName: ?*i8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn AddDelBackupEntryW(
    lpcszFileList: ?*u16,
    lpcszBackupDir: ?*u16,
    lpcszBaseName: ?*u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn FileSaveMarkNotExistA(
    lpFileList: ?*i8,
    lpDir: ?*i8,
    lpBaseName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn FileSaveMarkNotExistW(
    lpFileList: ?*u16,
    lpDir: ?*u16,
    lpBaseName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn GetVersionFromFileA(
    lpszFilename: ?*i8,
    pdwMSVer: ?*u32,
    pdwLSVer: ?*u32,
    bVersion: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn GetVersionFromFileW(
    lpszFilename: ?*u16,
    pdwMSVer: ?*u32,
    pdwLSVer: ?*u32,
    bVersion: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn GetVersionFromFileExA(
    lpszFilename: ?*i8,
    pdwMSVer: ?*u32,
    pdwLSVer: ?*u32,
    bVersion: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn GetVersionFromFileExW(
    lpszFilename: ?*u16,
    pdwMSVer: ?*u32,
    pdwLSVer: ?*u32,
    bVersion: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn IsNTAdmin(
    dwReserved: u32,
    lpdwReserved: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn DelNodeA(
    pszFileOrDirName: ?*i8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn DelNodeW(
    pszFileOrDirName: ?*u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn DelNodeRunDLL32W(
    hwnd: HWND,
    hInstance: HINSTANCE,
    pszParms: ?*u16,
    nShow: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn OpenINFEngineA(
    pszInfFilename: ?*i8,
    pszInstallSection: ?*i8,
    dwFlags: u32,
    phInf: ?*?*opaque{},
    pvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn OpenINFEngineW(
    pszInfFilename: ?*u16,
    pszInstallSection: ?*u16,
    dwFlags: u32,
    phInf: ?*?*opaque{},
    pvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn TranslateInfStringExA(
    hInf: ?*opaque{},
    pszInfFilename: ?*i8,
    pszTranslateSection: ?*i8,
    pszTranslateKey: ?*i8,
    pszBuffer: ?*i8,
    dwBufferSize: u32,
    pdwRequiredSize: ?*u32,
    pvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn TranslateInfStringExW(
    hInf: ?*opaque{},
    pszInfFilename: ?*u16,
    pszTranslateSection: ?*u16,
    pszTranslateKey: ?*u16,
    pszBuffer: ?*u16,
    dwBufferSize: u32,
    pdwRequiredSize: ?*u32,
    pvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn CloseINFEngine(
    hInf: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn ExtractFilesA(
    pszCabName: ?*i8,
    pszExpandDir: ?*i8,
    dwFlags: u32,
    pszFileList: ?*i8,
    lpReserved: ?*opaque{},
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn ExtractFilesW(
    pszCabName: ?*u16,
    pszExpandDir: ?*u16,
    dwFlags: u32,
    pszFileList: ?*u16,
    lpReserved: ?*opaque{},
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn LaunchINFSectionW(
    hwndOwner: HWND,
    hInstance: HINSTANCE,
    pszParams: ?*u16,
    nShow: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn UserInstStubWrapperA(
    hwnd: HWND,
    hInstance: HINSTANCE,
    pszParms: ?*i8,
    nShow: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn UserInstStubWrapperW(
    hwnd: HWND,
    hInstance: HINSTANCE,
    pszParms: ?*u16,
    nShow: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn UserUnInstStubWrapperA(
    hwnd: HWND,
    hInstance: HINSTANCE,
    pszParms: ?*i8,
    nShow: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn UserUnInstStubWrapperW(
    hwnd: HWND,
    hInstance: HINSTANCE,
    pszParms: ?*u16,
    nShow: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn SetPerUserSecValuesA(
    pPerUser: ?*PERUSERSECTIONA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVPACK" fn SetPerUserSecValuesW(
    pPerUser: ?*PERUSERSECTIONW,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn SendIMEMessageExA(
    param0: HWND,
    param1: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn SendIMEMessageExW(
    param0: HWND,
    param1: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn IMPGetIMEA(
    param0: HWND,
    param1: ?*IMEPROA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn IMPGetIMEW(
    param0: HWND,
    param1: ?*IMEPROW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn IMPQueryIMEA(
    param0: ?*IMEPROA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn IMPQueryIMEW(
    param0: ?*IMEPROW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn IMPSetIMEA(
    param0: HWND,
    param1: ?*IMEPROA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn IMPSetIMEW(
    param0: HWND,
    param1: ?*IMEPROW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn WINNLSGetIMEHotkey(
    param0: HWND,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn WINNLSEnableIME(
    param0: HWND,
    param1: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn WINNLSGetEnableStatus(
    param0: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-security-isolatedcontainer-l1-1-1" fn IsProcessInWDAGContainer(
    Reserved: ?*opaque{},
    isProcessInWDAGContainer: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-security-isolatedcontainer-l1-1-0" fn IsProcessInIsolatedContainer(
    isProcessInIsolatedContainer: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WSCAPI" fn WscRegisterForChanges(
    Reserved: ?*opaque{},
    phCallbackRegistration: ?*?*opaque{},
    lpCallbackAddress: LPTHREAD_START_ROUTINE,
    pContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WSCAPI" fn WscUnRegisterChanges(
    hRegistrationHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WSCAPI" fn WscRegisterForUserNotifications(
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WSCAPI" fn WscGetSecurityProviderHealth(
    Providers: u32,
    pHealth: ?*WSC_SECURITY_PROVIDER_HEALTH,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WSCAPI" fn WscQueryAntiMalwareUri(
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WSCAPI" fn WscGetAntiMalwareUri(
    ppszUri: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "APPHELP" fn ApphelpCheckShellObject(
    ObjectCLSID: ?*Guid,
    bShimIfNecessary: BOOL,
    pullFlags: ?*u64,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "Wldp" fn WldpGetLockdownPolicy(
    hostInformation: ?*WLDP_HOST_INFORMATION,
    lockdownState: ?*u32,
    lockdownFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "Wldp" fn WldpIsClassInApprovedList(
    classID: ?*Guid,
    hostInformation: ?*WLDP_HOST_INFORMATION,
    isApproved: ?*i32,
    optionalFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "Wldp" fn WldpSetDynamicCodeTrust(
    fileHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "Wldp" fn WldpIsDynamicCodePolicyEnabled(
    isEnabled: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "Wldp" fn WldpQueryDynamicCodeTrust(
    fileHandle: HANDLE,
    baseImage: ?*opaque{},
    imageSize: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn CeipIsOptedIn(
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "XmlLite" fn CreateXmlReader(
    riid: ?*Guid,
    ppvObject: ?*?*opaque{},
    pMalloc: IMalloc,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "XmlLite" fn CreateXmlReaderInputWithEncodingCodePage(
    pInputStream: IUnknown,
    pMalloc: IMalloc,
    nEncodingCodePage: u32,
    fEncodingHint: BOOL,
    pwszBaseUri: ?*u16,
    ppInput: ?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "XmlLite" fn CreateXmlReaderInputWithEncodingName(
    pInputStream: IUnknown,
    pMalloc: IMalloc,
    pwszEncodingName: ?*u16,
    fEncodingHint: BOOL,
    pwszBaseUri: ?*u16,
    ppInput: ?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "XmlLite" fn CreateXmlWriter(
    riid: ?*Guid,
    ppvObject: ?*?*opaque{},
    pMalloc: IMalloc,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "XmlLite" fn CreateXmlWriterOutputWithEncodingCodePage(
    pOutputStream: IUnknown,
    pMalloc: IMalloc,
    nEncodingCodePage: u32,
    ppOutput: ?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "XmlLite" fn CreateXmlWriterOutputWithEncodingName(
    pOutputStream: IUnknown,
    pMalloc: IMalloc,
    pwszEncodingName: ?*u16,
    ppOutput: ?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-query-l1-1-0" fn DevCreateObjectQuery(
    ObjectType: DEV_OBJECT_TYPE,
    QueryFlags: u32,
    cRequestedProperties: u32,
    pRequestedProperties: ?*DEVPROPCOMPKEY,
    cFilterExpressionCount: u32,
    pFilter: ?*DEVPROP_FILTER_EXPRESSION,
    pCallback: PDEV_QUERY_RESULT_CALLBACK,
    pContext: ?*opaque{},
    phDevQuery: ?*?*HDEVQUERY__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-query-l1-1-1" fn DevCreateObjectQueryEx(
    ObjectType: DEV_OBJECT_TYPE,
    QueryFlags: u32,
    cRequestedProperties: u32,
    pRequestedProperties: ?*DEVPROPCOMPKEY,
    cFilterExpressionCount: u32,
    pFilter: ?*DEVPROP_FILTER_EXPRESSION,
    cExtendedParameterCount: u32,
    pExtendedParameters: ?*DEV_QUERY_PARAMETER,
    pCallback: PDEV_QUERY_RESULT_CALLBACK,
    pContext: ?*opaque{},
    phDevQuery: ?*?*HDEVQUERY__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-query-l1-1-0" fn DevCreateObjectQueryFromId(
    ObjectType: DEV_OBJECT_TYPE,
    pszObjectId: ?*u16,
    QueryFlags: u32,
    cRequestedProperties: u32,
    pRequestedProperties: ?*DEVPROPCOMPKEY,
    cFilterExpressionCount: u32,
    pFilter: ?*DEVPROP_FILTER_EXPRESSION,
    pCallback: PDEV_QUERY_RESULT_CALLBACK,
    pContext: ?*opaque{},
    phDevQuery: ?*?*HDEVQUERY__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-query-l1-1-1" fn DevCreateObjectQueryFromIdEx(
    ObjectType: DEV_OBJECT_TYPE,
    pszObjectId: ?*u16,
    QueryFlags: u32,
    cRequestedProperties: u32,
    pRequestedProperties: ?*DEVPROPCOMPKEY,
    cFilterExpressionCount: u32,
    pFilter: ?*DEVPROP_FILTER_EXPRESSION,
    cExtendedParameterCount: u32,
    pExtendedParameters: ?*DEV_QUERY_PARAMETER,
    pCallback: PDEV_QUERY_RESULT_CALLBACK,
    pContext: ?*opaque{},
    phDevQuery: ?*?*HDEVQUERY__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-query-l1-1-0" fn DevCreateObjectQueryFromIds(
    ObjectType: DEV_OBJECT_TYPE,
    pszzObjectIds: ?*u16,
    QueryFlags: u32,
    cRequestedProperties: u32,
    pRequestedProperties: ?*DEVPROPCOMPKEY,
    cFilterExpressionCount: u32,
    pFilter: ?*DEVPROP_FILTER_EXPRESSION,
    pCallback: PDEV_QUERY_RESULT_CALLBACK,
    pContext: ?*opaque{},
    phDevQuery: ?*?*HDEVQUERY__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-query-l1-1-1" fn DevCreateObjectQueryFromIdsEx(
    ObjectType: DEV_OBJECT_TYPE,
    pszzObjectIds: ?*u16,
    QueryFlags: u32,
    cRequestedProperties: u32,
    pRequestedProperties: ?*DEVPROPCOMPKEY,
    cFilterExpressionCount: u32,
    pFilter: ?*DEVPROP_FILTER_EXPRESSION,
    cExtendedParameterCount: u32,
    pExtendedParameters: ?*DEV_QUERY_PARAMETER,
    pCallback: PDEV_QUERY_RESULT_CALLBACK,
    pContext: ?*opaque{},
    phDevQuery: ?*?*HDEVQUERY__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-query-l1-1-0" fn DevCloseObjectQuery(
    hDevQuery: ?*HDEVQUERY__,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-query-l1-1-0" fn DevGetObjects(
    ObjectType: DEV_OBJECT_TYPE,
    QueryFlags: u32,
    cRequestedProperties: u32,
    pRequestedProperties: ?*DEVPROPCOMPKEY,
    cFilterExpressionCount: u32,
    pFilter: ?*DEVPROP_FILTER_EXPRESSION,
    pcObjectCount: ?*u32,
    ppObjects: ?*?*DEV_OBJECT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-query-l1-1-1" fn DevGetObjectsEx(
    ObjectType: DEV_OBJECT_TYPE,
    QueryFlags: u32,
    cRequestedProperties: u32,
    pRequestedProperties: ?*DEVPROPCOMPKEY,
    cFilterExpressionCount: u32,
    pFilter: ?*DEVPROP_FILTER_EXPRESSION,
    cExtendedParameterCount: u32,
    pExtendedParameters: ?*DEV_QUERY_PARAMETER,
    pcObjectCount: ?*u32,
    ppObjects: ?*?*DEV_OBJECT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-query-l1-1-0" fn DevFreeObjects(
    cObjectCount: u32,
    pObjects: ?*DEV_OBJECT,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-query-l1-1-0" fn DevGetObjectProperties(
    ObjectType: DEV_OBJECT_TYPE,
    pszObjectId: ?*u16,
    QueryFlags: u32,
    cRequestedProperties: u32,
    pRequestedProperties: ?*DEVPROPCOMPKEY,
    pcPropertyCount: ?*u32,
    ppProperties: ?*?*DEVPROPERTY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-query-l1-1-1" fn DevGetObjectPropertiesEx(
    ObjectType: DEV_OBJECT_TYPE,
    pszObjectId: ?*u16,
    QueryFlags: u32,
    cRequestedProperties: u32,
    pRequestedProperties: ?*DEVPROPCOMPKEY,
    cExtendedParameterCount: u32,
    pExtendedParameters: ?*DEV_QUERY_PARAMETER,
    pcPropertyCount: ?*u32,
    ppProperties: ?*?*DEVPROPERTY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-query-l1-1-0" fn DevFreeObjectProperties(
    cPropertyCount: u32,
    pProperties: ?*DEVPROPERTY,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-query-l1-1-0" fn DevFindProperty(
    pKey: ?*DEVPROPKEY,
    Store: DEVPROPSTORE,
    pszLocaleName: ?*u16,
    cProperties: u32,
    pProperties: ?*DEVPROPERTY,
) callconv(@import("std").os.windows.WINAPI) ?*DEVPROPERTY;

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn PfCreateInterface(
    dwName: u32,
    inAction: _PfForwardAction,
    outAction: _PfForwardAction,
    bUseLog: BOOL,
    bMustBeUnique: BOOL,
    ppInterface: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn PfDeleteInterface(
    pInterface: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn PfAddFiltersToInterface(
    ih: ?*opaque{},
    cInFilters: u32,
    pfiltIn: ?*PF_FILTER_DESCRIPTOR,
    cOutFilters: u32,
    pfiltOut: ?*PF_FILTER_DESCRIPTOR,
    pfHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn PfRemoveFiltersFromInterface(
    ih: ?*opaque{},
    cInFilters: u32,
    pfiltIn: ?*PF_FILTER_DESCRIPTOR,
    cOutFilters: u32,
    pfiltOut: ?*PF_FILTER_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn PfRemoveFilterHandles(
    pInterface: ?*opaque{},
    cFilters: u32,
    pvHandles: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn PfUnBindInterface(
    pInterface: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn PfBindInterfaceToIndex(
    pInterface: ?*opaque{},
    dwIndex: u32,
    pfatLinkType: _PfAddresType,
    LinkIPAddress: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn PfBindInterfaceToIPAddress(
    pInterface: ?*opaque{},
    pfatType: _PfAddresType,
    IPAddress: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn PfRebindFilters(
    pInterface: ?*opaque{},
    pLateBindInfo: ?*PF_LATEBIND_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn PfAddGlobalFilterToInterface(
    pInterface: ?*opaque{},
    gfFilter: _GlobalFilter,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn PfRemoveGlobalFilterFromInterface(
    pInterface: ?*opaque{},
    gfFilter: _GlobalFilter,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn PfMakeLog(
    hEvent: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn PfSetLogBuffer(
    pbBuffer: ?*u8,
    dwSize: u32,
    dwThreshold: u32,
    dwEntries: u32,
    pdwLoggedEntries: ?*u32,
    pdwLostEntries: ?*u32,
    pdwSizeUsed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn PfDeleteLog(
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn PfGetInterfaceStatistics(
    pInterface: ?*opaque{},
    ppfStats: ?*PF_INTERFACE_STATS,
    pdwBufferSize: ?*u32,
    fResetCounters: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn PfTestPacket(
    pInInterface: ?*opaque{},
    pOutInterface: ?*opaque{},
    cBytes: u32,
    pbPacket: ?*u8,
    ppAction: ?*_PfForwardAction,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-state-helpers-l1-1-0" fn GetRegistryValueWithFallbackW(
    hkeyPrimary: HKEY,
    pwszPrimarySubKey: ?*u16,
    hkeyFallback: HKEY,
    pwszFallbackSubKey: ?*u16,
    pwszValue: ?*u16,
    dwFlags: u32,
    pdwType: ?*u32,
    pvData: ?*opaque{},
    cbDataIn: u32,
    pcbDataOut: ?*u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const OSVERSIONINFO = OSVERSIONINFOA;
        pub const OSVERSIONINFOEX = OSVERSIONINFOEXA;
        pub const PGET_SYSTEM_WOW64_DIRECTORY_ = PGET_SYSTEM_WOW64_DIRECTORY_A;
        pub const HW_PROFILE_INFO = HW_PROFILE_INFOA;
        pub const pvalue = pvalueA;
        pub const VALENT = VALENTA;
        pub const STRENTRY = STRENTRYA;
        pub const STRTABLE = STRTABLEA;
        pub const _CabInfo = _CabInfoA;
        pub const PERUSERSECTION = PERUSERSECTIONA;
        pub const IMEPRO = IMEPROA;
        pub const InstallPerfDll = InstallPerfDllA;
        pub const GetSystemWow64Directory = GetSystemWow64DirectoryA;
        pub const GetSystemWow64Directory2 = GetSystemWow64Directory2A;
        pub const GetUserNameEx = GetUserNameExA;
        pub const GetComputerObjectName = GetComputerObjectNameA;
        pub const TranslateName = TranslateNameA;
        pub const SetEnvironmentStrings = SetEnvironmentStringsA;
        pub const ExpandEnvironmentStrings = ExpandEnvironmentStringsA;
        pub const SetCurrentDirectory = SetCurrentDirectoryA;
        pub const GetCurrentDirectory = GetCurrentDirectoryA;
        pub const GetSystemDirectory = GetSystemDirectoryA;
        pub const GetWindowsDirectory = GetWindowsDirectoryA;
        pub const GetSystemWindowsDirectory = GetSystemWindowsDirectoryA;
        pub const GetComputerNameEx = GetComputerNameExA;
        pub const SetComputerNameEx = SetComputerNameExA;
        pub const GetVersionEx = GetVersionExA;
        pub const SetComputerName = SetComputerNameA;
        pub const GetFirmwareEnvironmentVariable = GetFirmwareEnvironmentVariableA;
        pub const GetFirmwareEnvironmentVariableEx = GetFirmwareEnvironmentVariableExA;
        pub const SetFirmwareEnvironmentVariable = SetFirmwareEnvironmentVariableA;
        pub const SetFirmwareEnvironmentVariableEx = SetFirmwareEnvironmentVariableExA;
        pub const GetProfileInt = GetProfileIntA;
        pub const GetProfileString = GetProfileStringA;
        pub const WriteProfileString = WriteProfileStringA;
        pub const GetProfileSection = GetProfileSectionA;
        pub const WriteProfileSection = WriteProfileSectionA;
        pub const GetPrivateProfileInt = GetPrivateProfileIntA;
        pub const GetPrivateProfileString = GetPrivateProfileStringA;
        pub const WritePrivateProfileString = WritePrivateProfileStringA;
        pub const GetPrivateProfileSection = GetPrivateProfileSectionA;
        pub const WritePrivateProfileSection = WritePrivateProfileSectionA;
        pub const GetPrivateProfileSectionNames = GetPrivateProfileSectionNamesA;
        pub const GetPrivateProfileStruct = GetPrivateProfileStructA;
        pub const WritePrivateProfileStruct = WritePrivateProfileStructA;
        pub const GetComputerName = GetComputerNameA;
        pub const DnsHostnameToComputerName = DnsHostnameToComputerNameA;
        pub const GetUserName = GetUserNameA;
        pub const GetCurrentHwProfile = GetCurrentHwProfileA;
        pub const VerifyVersionInfo = VerifyVersionInfoA;
        pub const RegConnectRegistry = RegConnectRegistryA;
        pub const RegConnectRegistryEx = RegConnectRegistryExA;
        pub const RegCreateKey = RegCreateKeyA;
        pub const RegCreateKeyEx = RegCreateKeyExA;
        pub const RegCreateKeyTransacted = RegCreateKeyTransactedA;
        pub const RegDeleteKey = RegDeleteKeyA;
        pub const RegDeleteKeyEx = RegDeleteKeyExA;
        pub const RegDeleteKeyTransacted = RegDeleteKeyTransactedA;
        pub const RegDeleteValue = RegDeleteValueA;
        pub const RegEnumKey = RegEnumKeyA;
        pub const RegEnumKeyEx = RegEnumKeyExA;
        pub const RegEnumValue = RegEnumValueA;
        pub const RegLoadKey = RegLoadKeyA;
        pub const RegOpenKey = RegOpenKeyA;
        pub const RegOpenKeyEx = RegOpenKeyExA;
        pub const RegOpenKeyTransacted = RegOpenKeyTransactedA;
        pub const RegQueryInfoKey = RegQueryInfoKeyA;
        pub const RegQueryValue = RegQueryValueA;
        pub const RegQueryMultipleValues = RegQueryMultipleValuesA;
        pub const RegQueryValueEx = RegQueryValueExA;
        pub const RegReplaceKey = RegReplaceKeyA;
        pub const RegRestoreKey = RegRestoreKeyA;
        pub const RegSaveKey = RegSaveKeyA;
        pub const RegSetValue = RegSetValueA;
        pub const RegSetValueEx = RegSetValueExA;
        pub const RegUnLoadKey = RegUnLoadKeyA;
        pub const RegDeleteKeyValue = RegDeleteKeyValueA;
        pub const RegSetKeyValue = RegSetKeyValueA;
        pub const RegDeleteTree = RegDeleteTreeA;
        pub const RegCopyTree = RegCopyTreeA;
        pub const RegGetValue = RegGetValueA;
        pub const RegLoadMUIString = RegLoadMUIStringA;
        pub const RegLoadAppKey = RegLoadAppKeyA;
        pub const RegSaveKeyEx = RegSaveKeyExA;
        pub const RunSetupCommand = RunSetupCommandA;
        pub const RebootCheckOnInstall = RebootCheckOnInstallA;
        pub const TranslateInfString = TranslateInfStringA;
        pub const RegInstall = RegInstallA;
        pub const ExecuteCab = ExecuteCabA;
        pub const AdvInstallFile = AdvInstallFileA;
        pub const RegSaveRestore = RegSaveRestoreA;
        pub const RegSaveRestoreOnINF = RegSaveRestoreOnINFA;
        pub const RegRestoreAll = RegRestoreAllA;
        pub const FileSaveRestoreOnINF = FileSaveRestoreOnINFA;
        pub const AddDelBackupEntry = AddDelBackupEntryA;
        pub const FileSaveMarkNotExist = FileSaveMarkNotExistA;
        pub const GetVersionFromFile = GetVersionFromFileA;
        pub const GetVersionFromFileEx = GetVersionFromFileExA;
        pub const DelNode = DelNodeA;
        pub const OpenINFEngine = OpenINFEngineA;
        pub const TranslateInfStringEx = TranslateInfStringExA;
        pub const ExtractFiles = ExtractFilesA;
        pub const UserInstStubWrapper = UserInstStubWrapperA;
        pub const UserUnInstStubWrapper = UserUnInstStubWrapperA;
        pub const SetPerUserSecValues = SetPerUserSecValuesA;
        pub const SendIMEMessageEx = SendIMEMessageExA;
        pub const IMPGetIME = IMPGetIMEA;
        pub const IMPQueryIME = IMPQueryIMEA;
        pub const IMPSetIME = IMPSetIMEA;
    },
    .wide => struct {
        pub const OSVERSIONINFO = OSVERSIONINFOW;
        pub const OSVERSIONINFOEX = OSVERSIONINFOEXW;
        pub const PGET_SYSTEM_WOW64_DIRECTORY_ = PGET_SYSTEM_WOW64_DIRECTORY_W;
        pub const HW_PROFILE_INFO = HW_PROFILE_INFOW;
        pub const pvalue = pvalueW;
        pub const VALENT = VALENTW;
        pub const STRENTRY = STRENTRYW;
        pub const STRTABLE = STRTABLEW;
        pub const _CabInfo = _CabInfoW;
        pub const PERUSERSECTION = PERUSERSECTIONW;
        pub const IMEPRO = IMEPROW;
        pub const InstallPerfDll = InstallPerfDllW;
        pub const GetSystemWow64Directory = GetSystemWow64DirectoryW;
        pub const GetSystemWow64Directory2 = GetSystemWow64Directory2W;
        pub const GetUserNameEx = GetUserNameExW;
        pub const GetComputerObjectName = GetComputerObjectNameW;
        pub const TranslateName = TranslateNameW;
        pub const SetEnvironmentStrings = SetEnvironmentStringsW;
        pub const ExpandEnvironmentStrings = ExpandEnvironmentStringsW;
        pub const SetCurrentDirectory = SetCurrentDirectoryW;
        pub const GetCurrentDirectory = GetCurrentDirectoryW;
        pub const GetSystemDirectory = GetSystemDirectoryW;
        pub const GetWindowsDirectory = GetWindowsDirectoryW;
        pub const GetSystemWindowsDirectory = GetSystemWindowsDirectoryW;
        pub const GetComputerNameEx = GetComputerNameExW;
        pub const SetComputerNameEx = SetComputerNameExW;
        pub const GetVersionEx = GetVersionExW;
        pub const SetComputerName = SetComputerNameW;
        pub const GetFirmwareEnvironmentVariable = GetFirmwareEnvironmentVariableW;
        pub const GetFirmwareEnvironmentVariableEx = GetFirmwareEnvironmentVariableExW;
        pub const SetFirmwareEnvironmentVariable = SetFirmwareEnvironmentVariableW;
        pub const SetFirmwareEnvironmentVariableEx = SetFirmwareEnvironmentVariableExW;
        pub const GetProfileInt = GetProfileIntW;
        pub const GetProfileString = GetProfileStringW;
        pub const WriteProfileString = WriteProfileStringW;
        pub const GetProfileSection = GetProfileSectionW;
        pub const WriteProfileSection = WriteProfileSectionW;
        pub const GetPrivateProfileInt = GetPrivateProfileIntW;
        pub const GetPrivateProfileString = GetPrivateProfileStringW;
        pub const WritePrivateProfileString = WritePrivateProfileStringW;
        pub const GetPrivateProfileSection = GetPrivateProfileSectionW;
        pub const WritePrivateProfileSection = WritePrivateProfileSectionW;
        pub const GetPrivateProfileSectionNames = GetPrivateProfileSectionNamesW;
        pub const GetPrivateProfileStruct = GetPrivateProfileStructW;
        pub const WritePrivateProfileStruct = WritePrivateProfileStructW;
        pub const GetComputerName = GetComputerNameW;
        pub const DnsHostnameToComputerName = DnsHostnameToComputerNameW;
        pub const GetUserName = GetUserNameW;
        pub const GetCurrentHwProfile = GetCurrentHwProfileW;
        pub const VerifyVersionInfo = VerifyVersionInfoW;
        pub const RegConnectRegistry = RegConnectRegistryW;
        pub const RegConnectRegistryEx = RegConnectRegistryExW;
        pub const RegCreateKey = RegCreateKeyW;
        pub const RegCreateKeyEx = RegCreateKeyExW;
        pub const RegCreateKeyTransacted = RegCreateKeyTransactedW;
        pub const RegDeleteKey = RegDeleteKeyW;
        pub const RegDeleteKeyEx = RegDeleteKeyExW;
        pub const RegDeleteKeyTransacted = RegDeleteKeyTransactedW;
        pub const RegDeleteValue = RegDeleteValueW;
        pub const RegEnumKey = RegEnumKeyW;
        pub const RegEnumKeyEx = RegEnumKeyExW;
        pub const RegEnumValue = RegEnumValueW;
        pub const RegLoadKey = RegLoadKeyW;
        pub const RegOpenKey = RegOpenKeyW;
        pub const RegOpenKeyEx = RegOpenKeyExW;
        pub const RegOpenKeyTransacted = RegOpenKeyTransactedW;
        pub const RegQueryInfoKey = RegQueryInfoKeyW;
        pub const RegQueryValue = RegQueryValueW;
        pub const RegQueryMultipleValues = RegQueryMultipleValuesW;
        pub const RegQueryValueEx = RegQueryValueExW;
        pub const RegReplaceKey = RegReplaceKeyW;
        pub const RegRestoreKey = RegRestoreKeyW;
        pub const RegSaveKey = RegSaveKeyW;
        pub const RegSetValue = RegSetValueW;
        pub const RegSetValueEx = RegSetValueExW;
        pub const RegUnLoadKey = RegUnLoadKeyW;
        pub const RegDeleteKeyValue = RegDeleteKeyValueW;
        pub const RegSetKeyValue = RegSetKeyValueW;
        pub const RegDeleteTree = RegDeleteTreeW;
        pub const RegCopyTree = RegCopyTreeW;
        pub const RegGetValue = RegGetValueW;
        pub const RegLoadMUIString = RegLoadMUIStringW;
        pub const RegLoadAppKey = RegLoadAppKeyW;
        pub const RegSaveKeyEx = RegSaveKeyExW;
        pub const RunSetupCommand = RunSetupCommandW;
        pub const RebootCheckOnInstall = RebootCheckOnInstallW;
        pub const TranslateInfString = TranslateInfStringW;
        pub const RegInstall = RegInstallW;
        pub const ExecuteCab = ExecuteCabW;
        pub const AdvInstallFile = AdvInstallFileW;
        pub const RegSaveRestore = RegSaveRestoreW;
        pub const RegSaveRestoreOnINF = RegSaveRestoreOnINFW;
        pub const RegRestoreAll = RegRestoreAllW;
        pub const FileSaveRestoreOnINF = FileSaveRestoreOnINFW;
        pub const AddDelBackupEntry = AddDelBackupEntryW;
        pub const FileSaveMarkNotExist = FileSaveMarkNotExistW;
        pub const GetVersionFromFile = GetVersionFromFileW;
        pub const GetVersionFromFileEx = GetVersionFromFileExW;
        pub const DelNode = DelNodeW;
        pub const OpenINFEngine = OpenINFEngineW;
        pub const TranslateInfStringEx = TranslateInfStringExW;
        pub const ExtractFiles = ExtractFilesW;
        pub const UserInstStubWrapper = UserInstStubWrapperW;
        pub const UserUnInstStubWrapper = UserUnInstStubWrapperW;
        pub const SetPerUserSecValues = SetPerUserSecValuesW;
        pub const SendIMEMessageEx = SendIMEMessageExW;
        pub const IMPGetIME = IMPGetIMEW;
        pub const IMPQueryIME = IMPQueryIMEW;
        pub const IMPSetIME = IMPSetIMEW;
    },
    else => if (@import("builtin").is_test) struct {
        pub const OSVERSIONINFO = *opaque{};
        pub const OSVERSIONINFOEX = *opaque{};
        pub const PGET_SYSTEM_WOW64_DIRECTORY_ = *opaque{};
        pub const HW_PROFILE_INFO = *opaque{};
        pub const pvalue = *opaque{};
        pub const VALENT = *opaque{};
        pub const STRENTRY = *opaque{};
        pub const STRTABLE = *opaque{};
        pub const _CabInfo = *opaque{};
        pub const PERUSERSECTION = *opaque{};
        pub const IMEPRO = *opaque{};
        pub const InstallPerfDll = *opaque{};
        pub const GetSystemWow64Directory = *opaque{};
        pub const GetSystemWow64Directory2 = *opaque{};
        pub const GetUserNameEx = *opaque{};
        pub const GetComputerObjectName = *opaque{};
        pub const TranslateName = *opaque{};
        pub const SetEnvironmentStrings = *opaque{};
        pub const ExpandEnvironmentStrings = *opaque{};
        pub const SetCurrentDirectory = *opaque{};
        pub const GetCurrentDirectory = *opaque{};
        pub const GetSystemDirectory = *opaque{};
        pub const GetWindowsDirectory = *opaque{};
        pub const GetSystemWindowsDirectory = *opaque{};
        pub const GetComputerNameEx = *opaque{};
        pub const SetComputerNameEx = *opaque{};
        pub const GetVersionEx = *opaque{};
        pub const SetComputerName = *opaque{};
        pub const GetFirmwareEnvironmentVariable = *opaque{};
        pub const GetFirmwareEnvironmentVariableEx = *opaque{};
        pub const SetFirmwareEnvironmentVariable = *opaque{};
        pub const SetFirmwareEnvironmentVariableEx = *opaque{};
        pub const GetProfileInt = *opaque{};
        pub const GetProfileString = *opaque{};
        pub const WriteProfileString = *opaque{};
        pub const GetProfileSection = *opaque{};
        pub const WriteProfileSection = *opaque{};
        pub const GetPrivateProfileInt = *opaque{};
        pub const GetPrivateProfileString = *opaque{};
        pub const WritePrivateProfileString = *opaque{};
        pub const GetPrivateProfileSection = *opaque{};
        pub const WritePrivateProfileSection = *opaque{};
        pub const GetPrivateProfileSectionNames = *opaque{};
        pub const GetPrivateProfileStruct = *opaque{};
        pub const WritePrivateProfileStruct = *opaque{};
        pub const GetComputerName = *opaque{};
        pub const DnsHostnameToComputerName = *opaque{};
        pub const GetUserName = *opaque{};
        pub const GetCurrentHwProfile = *opaque{};
        pub const VerifyVersionInfo = *opaque{};
        pub const RegConnectRegistry = *opaque{};
        pub const RegConnectRegistryEx = *opaque{};
        pub const RegCreateKey = *opaque{};
        pub const RegCreateKeyEx = *opaque{};
        pub const RegCreateKeyTransacted = *opaque{};
        pub const RegDeleteKey = *opaque{};
        pub const RegDeleteKeyEx = *opaque{};
        pub const RegDeleteKeyTransacted = *opaque{};
        pub const RegDeleteValue = *opaque{};
        pub const RegEnumKey = *opaque{};
        pub const RegEnumKeyEx = *opaque{};
        pub const RegEnumValue = *opaque{};
        pub const RegLoadKey = *opaque{};
        pub const RegOpenKey = *opaque{};
        pub const RegOpenKeyEx = *opaque{};
        pub const RegOpenKeyTransacted = *opaque{};
        pub const RegQueryInfoKey = *opaque{};
        pub const RegQueryValue = *opaque{};
        pub const RegQueryMultipleValues = *opaque{};
        pub const RegQueryValueEx = *opaque{};
        pub const RegReplaceKey = *opaque{};
        pub const RegRestoreKey = *opaque{};
        pub const RegSaveKey = *opaque{};
        pub const RegSetValue = *opaque{};
        pub const RegSetValueEx = *opaque{};
        pub const RegUnLoadKey = *opaque{};
        pub const RegDeleteKeyValue = *opaque{};
        pub const RegSetKeyValue = *opaque{};
        pub const RegDeleteTree = *opaque{};
        pub const RegCopyTree = *opaque{};
        pub const RegGetValue = *opaque{};
        pub const RegLoadMUIString = *opaque{};
        pub const RegLoadAppKey = *opaque{};
        pub const RegSaveKeyEx = *opaque{};
        pub const RunSetupCommand = *opaque{};
        pub const RebootCheckOnInstall = *opaque{};
        pub const TranslateInfString = *opaque{};
        pub const RegInstall = *opaque{};
        pub const ExecuteCab = *opaque{};
        pub const AdvInstallFile = *opaque{};
        pub const RegSaveRestore = *opaque{};
        pub const RegSaveRestoreOnINF = *opaque{};
        pub const RegRestoreAll = *opaque{};
        pub const FileSaveRestoreOnINF = *opaque{};
        pub const AddDelBackupEntry = *opaque{};
        pub const FileSaveMarkNotExist = *opaque{};
        pub const GetVersionFromFile = *opaque{};
        pub const GetVersionFromFileEx = *opaque{};
        pub const DelNode = *opaque{};
        pub const OpenINFEngine = *opaque{};
        pub const TranslateInfStringEx = *opaque{};
        pub const ExtractFiles = *opaque{};
        pub const UserInstStubWrapper = *opaque{};
        pub const UserUnInstStubWrapper = *opaque{};
        pub const SetPerUserSecValues = *opaque{};
        pub const SendIMEMessageEx = *opaque{};
        pub const IMPGetIME = *opaque{};
        pub const IMPQueryIME = *opaque{};
        pub const IMPSetIME = *opaque{};
    } else struct {
        pub const OSVERSIONINFO = @compileError("'OSVERSIONINFO' requires that UNICODE be set to true or false in the root module");
        pub const OSVERSIONINFOEX = @compileError("'OSVERSIONINFOEX' requires that UNICODE be set to true or false in the root module");
        pub const PGET_SYSTEM_WOW64_DIRECTORY_ = @compileError("'PGET_SYSTEM_WOW64_DIRECTORY_' requires that UNICODE be set to true or false in the root module");
        pub const HW_PROFILE_INFO = @compileError("'HW_PROFILE_INFO' requires that UNICODE be set to true or false in the root module");
        pub const pvalue = @compileError("'pvalue' requires that UNICODE be set to true or false in the root module");
        pub const VALENT = @compileError("'VALENT' requires that UNICODE be set to true or false in the root module");
        pub const STRENTRY = @compileError("'STRENTRY' requires that UNICODE be set to true or false in the root module");
        pub const STRTABLE = @compileError("'STRTABLE' requires that UNICODE be set to true or false in the root module");
        pub const _CabInfo = @compileError("'_CabInfo' requires that UNICODE be set to true or false in the root module");
        pub const PERUSERSECTION = @compileError("'PERUSERSECTION' requires that UNICODE be set to true or false in the root module");
        pub const IMEPRO = @compileError("'IMEPRO' requires that UNICODE be set to true or false in the root module");
        pub const InstallPerfDll = @compileError("'InstallPerfDll' requires that UNICODE be set to true or false in the root module");
        pub const GetSystemWow64Directory = @compileError("'GetSystemWow64Directory' requires that UNICODE be set to true or false in the root module");
        pub const GetSystemWow64Directory2 = @compileError("'GetSystemWow64Directory2' requires that UNICODE be set to true or false in the root module");
        pub const GetUserNameEx = @compileError("'GetUserNameEx' requires that UNICODE be set to true or false in the root module");
        pub const GetComputerObjectName = @compileError("'GetComputerObjectName' requires that UNICODE be set to true or false in the root module");
        pub const TranslateName = @compileError("'TranslateName' requires that UNICODE be set to true or false in the root module");
        pub const SetEnvironmentStrings = @compileError("'SetEnvironmentStrings' requires that UNICODE be set to true or false in the root module");
        pub const ExpandEnvironmentStrings = @compileError("'ExpandEnvironmentStrings' requires that UNICODE be set to true or false in the root module");
        pub const SetCurrentDirectory = @compileError("'SetCurrentDirectory' requires that UNICODE be set to true or false in the root module");
        pub const GetCurrentDirectory = @compileError("'GetCurrentDirectory' requires that UNICODE be set to true or false in the root module");
        pub const GetSystemDirectory = @compileError("'GetSystemDirectory' requires that UNICODE be set to true or false in the root module");
        pub const GetWindowsDirectory = @compileError("'GetWindowsDirectory' requires that UNICODE be set to true or false in the root module");
        pub const GetSystemWindowsDirectory = @compileError("'GetSystemWindowsDirectory' requires that UNICODE be set to true or false in the root module");
        pub const GetComputerNameEx = @compileError("'GetComputerNameEx' requires that UNICODE be set to true or false in the root module");
        pub const SetComputerNameEx = @compileError("'SetComputerNameEx' requires that UNICODE be set to true or false in the root module");
        pub const GetVersionEx = @compileError("'GetVersionEx' requires that UNICODE be set to true or false in the root module");
        pub const SetComputerName = @compileError("'SetComputerName' requires that UNICODE be set to true or false in the root module");
        pub const GetFirmwareEnvironmentVariable = @compileError("'GetFirmwareEnvironmentVariable' requires that UNICODE be set to true or false in the root module");
        pub const GetFirmwareEnvironmentVariableEx = @compileError("'GetFirmwareEnvironmentVariableEx' requires that UNICODE be set to true or false in the root module");
        pub const SetFirmwareEnvironmentVariable = @compileError("'SetFirmwareEnvironmentVariable' requires that UNICODE be set to true or false in the root module");
        pub const SetFirmwareEnvironmentVariableEx = @compileError("'SetFirmwareEnvironmentVariableEx' requires that UNICODE be set to true or false in the root module");
        pub const GetProfileInt = @compileError("'GetProfileInt' requires that UNICODE be set to true or false in the root module");
        pub const GetProfileString = @compileError("'GetProfileString' requires that UNICODE be set to true or false in the root module");
        pub const WriteProfileString = @compileError("'WriteProfileString' requires that UNICODE be set to true or false in the root module");
        pub const GetProfileSection = @compileError("'GetProfileSection' requires that UNICODE be set to true or false in the root module");
        pub const WriteProfileSection = @compileError("'WriteProfileSection' requires that UNICODE be set to true or false in the root module");
        pub const GetPrivateProfileInt = @compileError("'GetPrivateProfileInt' requires that UNICODE be set to true or false in the root module");
        pub const GetPrivateProfileString = @compileError("'GetPrivateProfileString' requires that UNICODE be set to true or false in the root module");
        pub const WritePrivateProfileString = @compileError("'WritePrivateProfileString' requires that UNICODE be set to true or false in the root module");
        pub const GetPrivateProfileSection = @compileError("'GetPrivateProfileSection' requires that UNICODE be set to true or false in the root module");
        pub const WritePrivateProfileSection = @compileError("'WritePrivateProfileSection' requires that UNICODE be set to true or false in the root module");
        pub const GetPrivateProfileSectionNames = @compileError("'GetPrivateProfileSectionNames' requires that UNICODE be set to true or false in the root module");
        pub const GetPrivateProfileStruct = @compileError("'GetPrivateProfileStruct' requires that UNICODE be set to true or false in the root module");
        pub const WritePrivateProfileStruct = @compileError("'WritePrivateProfileStruct' requires that UNICODE be set to true or false in the root module");
        pub const GetComputerName = @compileError("'GetComputerName' requires that UNICODE be set to true or false in the root module");
        pub const DnsHostnameToComputerName = @compileError("'DnsHostnameToComputerName' requires that UNICODE be set to true or false in the root module");
        pub const GetUserName = @compileError("'GetUserName' requires that UNICODE be set to true or false in the root module");
        pub const GetCurrentHwProfile = @compileError("'GetCurrentHwProfile' requires that UNICODE be set to true or false in the root module");
        pub const VerifyVersionInfo = @compileError("'VerifyVersionInfo' requires that UNICODE be set to true or false in the root module");
        pub const RegConnectRegistry = @compileError("'RegConnectRegistry' requires that UNICODE be set to true or false in the root module");
        pub const RegConnectRegistryEx = @compileError("'RegConnectRegistryEx' requires that UNICODE be set to true or false in the root module");
        pub const RegCreateKey = @compileError("'RegCreateKey' requires that UNICODE be set to true or false in the root module");
        pub const RegCreateKeyEx = @compileError("'RegCreateKeyEx' requires that UNICODE be set to true or false in the root module");
        pub const RegCreateKeyTransacted = @compileError("'RegCreateKeyTransacted' requires that UNICODE be set to true or false in the root module");
        pub const RegDeleteKey = @compileError("'RegDeleteKey' requires that UNICODE be set to true or false in the root module");
        pub const RegDeleteKeyEx = @compileError("'RegDeleteKeyEx' requires that UNICODE be set to true or false in the root module");
        pub const RegDeleteKeyTransacted = @compileError("'RegDeleteKeyTransacted' requires that UNICODE be set to true or false in the root module");
        pub const RegDeleteValue = @compileError("'RegDeleteValue' requires that UNICODE be set to true or false in the root module");
        pub const RegEnumKey = @compileError("'RegEnumKey' requires that UNICODE be set to true or false in the root module");
        pub const RegEnumKeyEx = @compileError("'RegEnumKeyEx' requires that UNICODE be set to true or false in the root module");
        pub const RegEnumValue = @compileError("'RegEnumValue' requires that UNICODE be set to true or false in the root module");
        pub const RegLoadKey = @compileError("'RegLoadKey' requires that UNICODE be set to true or false in the root module");
        pub const RegOpenKey = @compileError("'RegOpenKey' requires that UNICODE be set to true or false in the root module");
        pub const RegOpenKeyEx = @compileError("'RegOpenKeyEx' requires that UNICODE be set to true or false in the root module");
        pub const RegOpenKeyTransacted = @compileError("'RegOpenKeyTransacted' requires that UNICODE be set to true or false in the root module");
        pub const RegQueryInfoKey = @compileError("'RegQueryInfoKey' requires that UNICODE be set to true or false in the root module");
        pub const RegQueryValue = @compileError("'RegQueryValue' requires that UNICODE be set to true or false in the root module");
        pub const RegQueryMultipleValues = @compileError("'RegQueryMultipleValues' requires that UNICODE be set to true or false in the root module");
        pub const RegQueryValueEx = @compileError("'RegQueryValueEx' requires that UNICODE be set to true or false in the root module");
        pub const RegReplaceKey = @compileError("'RegReplaceKey' requires that UNICODE be set to true or false in the root module");
        pub const RegRestoreKey = @compileError("'RegRestoreKey' requires that UNICODE be set to true or false in the root module");
        pub const RegSaveKey = @compileError("'RegSaveKey' requires that UNICODE be set to true or false in the root module");
        pub const RegSetValue = @compileError("'RegSetValue' requires that UNICODE be set to true or false in the root module");
        pub const RegSetValueEx = @compileError("'RegSetValueEx' requires that UNICODE be set to true or false in the root module");
        pub const RegUnLoadKey = @compileError("'RegUnLoadKey' requires that UNICODE be set to true or false in the root module");
        pub const RegDeleteKeyValue = @compileError("'RegDeleteKeyValue' requires that UNICODE be set to true or false in the root module");
        pub const RegSetKeyValue = @compileError("'RegSetKeyValue' requires that UNICODE be set to true or false in the root module");
        pub const RegDeleteTree = @compileError("'RegDeleteTree' requires that UNICODE be set to true or false in the root module");
        pub const RegCopyTree = @compileError("'RegCopyTree' requires that UNICODE be set to true or false in the root module");
        pub const RegGetValue = @compileError("'RegGetValue' requires that UNICODE be set to true or false in the root module");
        pub const RegLoadMUIString = @compileError("'RegLoadMUIString' requires that UNICODE be set to true or false in the root module");
        pub const RegLoadAppKey = @compileError("'RegLoadAppKey' requires that UNICODE be set to true or false in the root module");
        pub const RegSaveKeyEx = @compileError("'RegSaveKeyEx' requires that UNICODE be set to true or false in the root module");
        pub const RunSetupCommand = @compileError("'RunSetupCommand' requires that UNICODE be set to true or false in the root module");
        pub const RebootCheckOnInstall = @compileError("'RebootCheckOnInstall' requires that UNICODE be set to true or false in the root module");
        pub const TranslateInfString = @compileError("'TranslateInfString' requires that UNICODE be set to true or false in the root module");
        pub const RegInstall = @compileError("'RegInstall' requires that UNICODE be set to true or false in the root module");
        pub const ExecuteCab = @compileError("'ExecuteCab' requires that UNICODE be set to true or false in the root module");
        pub const AdvInstallFile = @compileError("'AdvInstallFile' requires that UNICODE be set to true or false in the root module");
        pub const RegSaveRestore = @compileError("'RegSaveRestore' requires that UNICODE be set to true or false in the root module");
        pub const RegSaveRestoreOnINF = @compileError("'RegSaveRestoreOnINF' requires that UNICODE be set to true or false in the root module");
        pub const RegRestoreAll = @compileError("'RegRestoreAll' requires that UNICODE be set to true or false in the root module");
        pub const FileSaveRestoreOnINF = @compileError("'FileSaveRestoreOnINF' requires that UNICODE be set to true or false in the root module");
        pub const AddDelBackupEntry = @compileError("'AddDelBackupEntry' requires that UNICODE be set to true or false in the root module");
        pub const FileSaveMarkNotExist = @compileError("'FileSaveMarkNotExist' requires that UNICODE be set to true or false in the root module");
        pub const GetVersionFromFile = @compileError("'GetVersionFromFile' requires that UNICODE be set to true or false in the root module");
        pub const GetVersionFromFileEx = @compileError("'GetVersionFromFileEx' requires that UNICODE be set to true or false in the root module");
        pub const DelNode = @compileError("'DelNode' requires that UNICODE be set to true or false in the root module");
        pub const OpenINFEngine = @compileError("'OpenINFEngine' requires that UNICODE be set to true or false in the root module");
        pub const TranslateInfStringEx = @compileError("'TranslateInfStringEx' requires that UNICODE be set to true or false in the root module");
        pub const ExtractFiles = @compileError("'ExtractFiles' requires that UNICODE be set to true or false in the root module");
        pub const UserInstStubWrapper = @compileError("'UserInstStubWrapper' requires that UNICODE be set to true or false in the root module");
        pub const UserUnInstStubWrapper = @compileError("'UserUnInstStubWrapper' requires that UNICODE be set to true or false in the root module");
        pub const SetPerUserSecValues = @compileError("'SetPerUserSecValues' requires that UNICODE be set to true or false in the root module");
        pub const SendIMEMessageEx = @compileError("'SendIMEMessageEx' requires that UNICODE be set to true or false in the root module");
        pub const IMPGetIME = @compileError("'IMPGetIME' requires that UNICODE be set to true or false in the root module");
        pub const IMPQueryIME = @compileError("'IMPQueryIME' requires that UNICODE be set to true or false in the root module");
        pub const IMPSetIME = @compileError("'IMPSetIME' requires that UNICODE be set to true or false in the root module");
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("systemservices.zig").BOOL;
const HANDLE = @import("systemservices.zig").HANDLE;
const BSTR = @import("automation.zig").BSTR;
const LIST_ENTRY = @import("kernel.zig").LIST_ENTRY;
const UNICODE_STRING = @import("security.zig").UNICODE_STRING;
const PEB = @import("systemservices.zig").PEB;
const LARGE_INTEGER = @import("systemservices.zig").LARGE_INTEGER;
const FLOATING_SAVE_AREA = @import("systemservices.zig").FLOATING_SAVE_AREA;
const HRESULT = @import("com.zig").HRESULT;
const RECT = @import("displaydevices.zig").RECT;
const DDSCAPS = @import("directdraw.zig").DDSCAPS;
const DDPIXELFORMAT = @import("directdraw.zig").DDPIXELFORMAT;
const IUnknown = @import("com.zig").IUnknown;
const DDSCAPSEX = @import("directdraw.zig").DDSCAPSEX;
const PALETTEENTRY = @import("direct2d.zig").PALETTEENTRY;
const RGNDATA = @import("gdi.zig").RGNDATA;
const DDCOLORCONTROL = @import("directdraw.zig").DDCOLORCONTROL;
const DDOVERLAYFX = @import("directdraw.zig").DDOVERLAYFX;
const DDSURFACEDESC2 = @import("directdraw.zig").DDSURFACEDESC2;
const DDCOLORKEY = @import("directshow.zig").DDCOLORKEY;
const DDCORECAPS = @import("displaydevices.zig").DDCORECAPS;
const DDVIDEOPORTCAPS = @import("displaydevices.zig").DDVIDEOPORTCAPS;
const DDKERNELCAPS = @import("displaydevices.zig").DDKERNELCAPS;
const HINSTANCE = @import("systemservices.zig").HINSTANCE;
const DDVIDEOPORTDESC = @import("displaydevices.zig").DDVIDEOPORTDESC;
const DDVIDEOPORTINFO = @import("displaydevices.zig").DDVIDEOPORTINFO;
const RECTL = @import("displaydevices.zig").RECTL;
const DDBLTFX = @import("directdraw.zig").DDBLTFX;
const DDSURFACEDESC = @import("directdraw.zig").DDSURFACEDESC;
const DDVIDEOPORTBANDWIDTH = @import("displaydevices.zig").DDVIDEOPORTBANDWIDTH;
const DDVIDEOPORTCONNECT = @import("coreaudio.zig").DDVIDEOPORTCONNECT;
const HEAPALIGNMENT = @import("displaydevices.zig").HEAPALIGNMENT;
const DDSCAPS2 = @import("directdraw.zig").DDSCAPS2;
const WPARAM = @import("windowsandmessaging.zig").WPARAM;
const LPARAM = @import("windowsandmessaging.zig").LPARAM;
const HWND = @import("windowsandmessaging.zig").HWND;
const DEVPROPERTY = @import("systemservices.zig").DEVPROPERTY;
const DEVPROPKEY = @import("systemservices.zig").DEVPROPKEY;
const EXCEPTION_RECORD = @import("debug.zig").EXCEPTION_RECORD;
const IBindCtx = @import("com.zig").IBindCtx;
const uCLSSPEC = @import("systemservices.zig").uCLSSPEC;
const QUERYCONTEXT = @import("com.zig").QUERYCONTEXT;
const MIDL_STUB_MESSAGE = @import("rpc.zig").MIDL_STUB_MESSAGE;
const PROCESS_DYNAMIC_EH_CONTINUATION_TARGET = @import("systemservices.zig").PROCESS_DYNAMIC_EH_CONTINUATION_TARGET;
const SYSTEM_CPU_SET_INFORMATION = @import("systemservices.zig").SYSTEM_CPU_SET_INFORMATION;
const SECURITY_ATTRIBUTES = @import("systemservices.zig").SECURITY_ATTRIBUTES;
const STARTUPINFOA = @import("systemservices.zig").STARTUPINFOA;
const WAITORTIMERCALLBACK = @import("systemservices.zig").WAITORTIMERCALLBACK;
const JOB_SET_ARRAY = @import("systemservices.zig").JOB_SET_ARRAY;
const CONTEXT = @import("debug.zig").CONTEXT;
const CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG = @import("systemservices.zig").CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG;
const LSTATUS = @import("systemservices.zig").LSTATUS;
const NTSTATUS = @import("systemservices.zig").NTSTATUS;
const HDC = @import("gdi.zig").HDC;
const LRESULT = @import("systemservices.zig").LRESULT;
const LPTHREAD_START_ROUTINE = @import("systemservices.zig").LPTHREAD_START_ROUTINE;
const IMalloc = @import("com.zig").IMalloc;
const DEVPROPCOMPKEY = @import("systemservices.zig").DEVPROPCOMPKEY;
const DEVPROPSTORE = @import("systemservices.zig").DEVPROPSTORE;

test "" {
    const constant_export_count = 0;
    const type_export_count = 582;
    const func_count = 474;
    const unicode_alias_count = 109;
    const type_import_count = 60;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
