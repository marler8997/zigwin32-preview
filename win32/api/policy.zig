//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: CriticalPolicySectionHandle
// TypeLayoutAttr: sequential
// RAIIFree 'LeaveCriticalPolicySection' (TODO: can we use this information?)
pub const CriticalPolicySectionHandle = ?*opaque{};
// --------------------------------------------------------
// Type: GPO_LINK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const GPO_LINK = *opaque{
};
// --------------------------------------------------------
// Type: GROUP_POLICY_OBJECTA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GROUP_POLICY_OBJECTA = extern struct {
    dwOptions: u32,
    dwVersion: u32,
    lpDSPath: ?*i8,
    lpFileSysPath: ?*i8,
    lpDisplayName: ?*i8,
    szGPOName: ?[*]i8,
    GPOLink: GPO_LINK,
    lParam: LPARAM,
    pNext: ?*GROUP_POLICY_OBJECTA,
    pPrev: ?*GROUP_POLICY_OBJECTA,
    lpExtensions: ?*i8,
    lParam2: LPARAM,
    lpLink: ?*i8,
};
// --------------------------------------------------------
// Type: GROUP_POLICY_OBJECTW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GROUP_POLICY_OBJECTW = extern struct {
    dwOptions: u32,
    dwVersion: u32,
    lpDSPath: ?*u16,
    lpFileSysPath: ?*u16,
    lpDisplayName: ?*u16,
    szGPOName: ?[*]u16,
    GPOLink: GPO_LINK,
    lParam: LPARAM,
    pNext: ?*GROUP_POLICY_OBJECTW,
    pPrev: ?*GROUP_POLICY_OBJECTW,
    lpExtensions: ?*u16,
    lParam2: LPARAM,
    lpLink: ?*u16,
};
// --------------------------------------------------------
// Type: PFNSTATUSMESSAGECALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNSTATUSMESSAGECALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNPROCESSGROUPPOLICY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNPROCESSGROUPPOLICY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNPROCESSGROUPPOLICYEX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNPROCESSGROUPPOLICYEX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RSOP_TARGET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RSOP_TARGET = extern struct {
    pwszAccountName: ?*u16,
    pwszNewSOM: ?*u16,
    psaSecurityGroups: ?*SAFEARRAY,
    pRsopToken: ?*opaque{},
    pGPOList: ?*GROUP_POLICY_OBJECTA,
    pWbemServices: IWbemServices,
};
// --------------------------------------------------------
// Type: PFNGENERATEGROUPPOLICY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNGENERATEGROUPPOLICY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SETTINGSTATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SETTINGSTATUS = *opaque{
};
// --------------------------------------------------------
// Type: POLICYSETTINGSTATUSINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICYSETTINGSTATUSINFO = extern struct {
    szKey: ?*u16,
    szEventSource: ?*u16,
    szEventLogName: ?*u16,
    dwEventID: u32,
    dwErrorCode: u32,
    status: SETTINGSTATUS,
    timeLogged: SYSTEMTIME,
};
// --------------------------------------------------------
// Type: INSTALLSPECTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const INSTALLSPECTYPE = *opaque{
};
// --------------------------------------------------------
// Type: INSTALLSPEC
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const INSTALLSPEC = *opaque{
    // --------------------------------------------------------
    // Type: _AppName_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _AppName_e__Struct = extern struct {
        Name: ?*u16,
        GPOId: Guid,
    };
    // --------------------------------------------------------
    // Type: _COMClass_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _COMClass_e__Struct = extern struct {
        Clsid: Guid,
        ClsCtx: u32,
    };
};
// --------------------------------------------------------
// Type: INSTALLDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INSTALLDATA = extern struct {
    Type: INSTALLSPECTYPE,
    Spec: INSTALLSPEC,
};
// --------------------------------------------------------
// Type: APPSTATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const APPSTATE = *opaque{
};
// --------------------------------------------------------
// Type: LOCALMANAGEDAPPLICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LOCALMANAGEDAPPLICATION = extern struct {
    pszDeploymentName: ?*u16,
    pszPolicyName: ?*u16,
    pszProductId: ?*u16,
    dwState: u32,
};
// --------------------------------------------------------
// Type: MANAGEDAPPLICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MANAGEDAPPLICATION = extern struct {
    pszPackageName: ?*u16,
    pszPublisher: ?*u16,
    dwVersionHi: u32,
    dwVersionLo: u32,
    dwRevision: u32,
    GpoId: Guid,
    pszPolicyName: ?*u16,
    ProductId: Guid,
    Language: u16,
    pszOwner: ?*u16,
    pszCompany: ?*u16,
    pszComments: ?*u16,
    pszContact: ?*u16,
    pszSupportUrl: ?*u16,
    dwPathType: u32,
    bInstalled: BOOL,
};
// --------------------------------------------------------
// Type: GROUP_POLICY_OBJECT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const GROUP_POLICY_OBJECT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: GROUP_POLICY_HINT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const GROUP_POLICY_HINT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IGPEInformation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IGPEInformation = *opaque{
    // TODO: Method 'GetName'
    // TODO: Method 'GetDisplayName'
    // TODO: Method 'GetRegistryKey'
    // TODO: Method 'GetDSPath'
    // TODO: Method 'GetFileSysPath'
    // TODO: Method 'GetOptions'
    // TODO: Method 'GetType'
    // TODO: Method 'GetHint'
    // TODO: Method 'PolicyChanged'
};
// --------------------------------------------------------
// Type: IGroupPolicyObject
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IGroupPolicyObject = *opaque{
    // TODO: Method 'New'
    // TODO: Method 'OpenDSGPO'
    // TODO: Method 'OpenLocalMachineGPO'
    // TODO: Method 'OpenRemoteMachineGPO'
    // TODO: Method 'Save'
    // TODO: Method 'Delete'
    // TODO: Method 'GetName'
    // TODO: Method 'GetDisplayName'
    // TODO: Method 'SetDisplayName'
    // TODO: Method 'GetPath'
    // TODO: Method 'GetDSPath'
    // TODO: Method 'GetFileSysPath'
    // TODO: Method 'GetRegistryKey'
    // TODO: Method 'GetOptions'
    // TODO: Method 'SetOptions'
    // TODO: Method 'GetType'
    // TODO: Method 'GetMachineName'
    // TODO: Method 'GetPropertySheetPages'
};
// --------------------------------------------------------
// Type: IRSOPInformation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRSOPInformation = *opaque{
    // TODO: Method 'GetNamespace'
    // TODO: Method 'GetFlags'
    // TODO: Method 'GetEventLogEntryText'
};
// --------------------------------------------------------
// Type: GPOBROWSEINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GPOBROWSEINFO = extern struct {
    dwSize: u32,
    dwFlags: u32,
    hwndOwner: HWND,
    lpTitle: ?*u16,
    lpInitialOU: ?*u16,
    lpDSPath: ?*u16,
    dwDSPathSize: u32,
    lpName: ?*u16,
    dwNameSize: u32,
    gpoType: GROUP_POLICY_OBJECT_TYPE,
    gpoHint: GROUP_POLICY_HINT_TYPE,
};

//
// functions
//

// set_last_errror=True (can and should we use this?)
pub extern "USERENV" fn RefreshPolicy(
    bMachine: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "USERENV" fn RefreshPolicyEx(
    bMachine: BOOL,
    dwOptions: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "USERENV" fn EnterCriticalPolicySection(
    bMachine: BOOL,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=True (can and should we use this?)
pub extern "USERENV" fn LeaveCriticalPolicySection(
    hSection: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "USERENV" fn RegisterGPNotification(
    hEvent: HANDLE,
    bMachine: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "USERENV" fn UnregisterGPNotification(
    hEvent: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "USERENV" fn GetGPOListA(
    hToken: HANDLE,
    lpName: ?*i8,
    lpHostName: ?*i8,
    lpComputerName: ?*i8,
    dwFlags: u32,
    pGPOList: ?*?*GROUP_POLICY_OBJECTA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "USERENV" fn GetGPOListW(
    hToken: HANDLE,
    lpName: ?*u16,
    lpHostName: ?*u16,
    lpComputerName: ?*u16,
    dwFlags: u32,
    pGPOList: ?*?*GROUP_POLICY_OBJECTW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "USERENV" fn FreeGPOListA(
    pGPOList: ?*GROUP_POLICY_OBJECTA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "USERENV" fn FreeGPOListW(
    pGPOList: ?*GROUP_POLICY_OBJECTW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USERENV" fn GetAppliedGPOListA(
    dwFlags: u32,
    pMachineName: ?*i8,
    pSidUser: ?*opaque{},
    pGuidExtension: ?*Guid,
    ppGPOList: ?*?*GROUP_POLICY_OBJECTA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "USERENV" fn GetAppliedGPOListW(
    dwFlags: u32,
    pMachineName: ?*u16,
    pSidUser: ?*opaque{},
    pGuidExtension: ?*Guid,
    ppGPOList: ?*?*GROUP_POLICY_OBJECTW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "USERENV" fn ProcessGroupPolicyCompleted(
    extensionId: ?*Guid,
    pAsyncHandle: ?*opaque{},
    dwStatus: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "USERENV" fn ProcessGroupPolicyCompletedEx(
    extensionId: ?*Guid,
    pAsyncHandle: ?*opaque{},
    dwStatus: u32,
    RsopStatus: HRESULT,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "USERENV" fn RsopAccessCheckByType(
    pSecurityDescriptor: ?*opaque{},
    pPrincipalSelfSid: ?*opaque{},
    pRsopToken: ?*opaque{},
    dwDesiredAccessMask: u32,
    pObjectTypeList: ?*OBJECT_TYPE_LIST,
    ObjectTypeListLength: u32,
    pGenericMapping: ?*GENERIC_MAPPING,
    pPrivilegeSet: ?*PRIVILEGE_SET,
    pdwPrivilegeSetLength: ?*u32,
    pdwGrantedAccessMask: ?*u32,
    pbAccessStatus: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "USERENV" fn RsopFileAccessCheck(
    pszFileName: ?*u16,
    pRsopToken: ?*opaque{},
    dwDesiredAccessMask: u32,
    pdwGrantedAccessMask: ?*u32,
    pbAccessStatus: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "USERENV" fn RsopSetPolicySettingStatus(
    dwFlags: u32,
    pServices: IWbemServices,
    pSettingInstance: IWbemClassObject,
    nInfo: u32,
    pStatus: ?*POLICYSETTINGSTATUSINFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "USERENV" fn RsopResetPolicySettingStatus(
    dwFlags: u32,
    pServices: IWbemServices,
    pSettingInstance: IWbemClassObject,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "USERENV" fn GenerateGPNotification(
    bMachine: BOOL,
    lpwszMgmtProduct: ?*u16,
    dwMgmtProductOptions: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn InstallApplication(
    pInstallInfo: ?*INSTALLDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn UninstallApplication(
    ProductCode: ?*u16,
    dwStatus: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn CommandLineFromMsiDescriptor(
    Descriptor: ?*u16,
    CommandLine: ?*u16,
    CommandLineLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetManagedApplications(
    pCategory: ?*Guid,
    dwQueryFlags: u32,
    dwInfoLevel: u32,
    pdwApps: ?*u32,
    prgManagedApps: ?*?*MANAGEDAPPLICATION,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetLocalManagedApplications(
    bUserApps: BOOL,
    pdwApps: ?*u32,
    prgLocalApps: ?*?*LOCALMANAGEDAPPLICATION,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetLocalManagedApplicationData(
    ProductCode: ?*u16,
    DisplayName: ?*?*u16,
    SupportUrl: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetManagedApplicationCategories(
    dwReserved: u32,
    pAppCategory: ?*APPCATEGORYINFOLIST,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GPEDIT" fn CreateGPOLink(
    lpGPO: ?*u16,
    lpContainer: ?*u16,
    fHighPriority: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "GPEDIT" fn DeleteGPOLink(
    lpGPO: ?*u16,
    lpContainer: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "GPEDIT" fn DeleteAllGPOLinks(
    lpContainer: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "GPEDIT" fn BrowseForGPO(
    lpBrowseInfo: ?*GPOBROWSEINFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "GPEDIT" fn ImportRSoPData(
    lpNameSpace: ?*u16,
    lpFileName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "GPEDIT" fn ExportRSoPData(
    lpNameSpace: ?*u16,
    lpFileName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const GROUP_POLICY_OBJECT = GROUP_POLICY_OBJECTA;
        pub const GetGPOList = GetGPOListA;
        pub const FreeGPOList = FreeGPOListA;
        pub const GetAppliedGPOList = GetAppliedGPOListA;
    },
    .wide => struct {
        pub const GROUP_POLICY_OBJECT = GROUP_POLICY_OBJECTW;
        pub const GetGPOList = GetGPOListW;
        pub const FreeGPOList = FreeGPOListW;
        pub const GetAppliedGPOList = GetAppliedGPOListW;
    },
    else => if (@import("builtin").is_test) struct {
        pub const GROUP_POLICY_OBJECT = *opaque{};
        pub const GetGPOList = *opaque{};
        pub const FreeGPOList = *opaque{};
        pub const GetAppliedGPOList = *opaque{};
    } else struct {
        pub const GROUP_POLICY_OBJECT = @compileError("'GROUP_POLICY_OBJECT' requires that UNICODE be set to true or false in the root module");
        pub const GetGPOList = @compileError("'GetGPOList' requires that UNICODE be set to true or false in the root module");
        pub const FreeGPOList = @compileError("'FreeGPOList' requires that UNICODE be set to true or false in the root module");
        pub const GetAppliedGPOList = @compileError("'GetAppliedGPOList' requires that UNICODE be set to true or false in the root module");
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const LPARAM = @import("windowsandmessaging.zig").LPARAM;
const SAFEARRAY = @import("automation.zig").SAFEARRAY;
const IWbemServices = @import("wmi.zig").IWbemServices;
const SYSTEMTIME = @import("windowsprogramming.zig").SYSTEMTIME;
const BOOL = @import("systemservices.zig").BOOL;
const HWND = @import("windowsandmessaging.zig").HWND;
const HANDLE = @import("systemservices.zig").HANDLE;
const HRESULT = @import("com.zig").HRESULT;
const OBJECT_TYPE_LIST = @import("security.zig").OBJECT_TYPE_LIST;
const GENERIC_MAPPING = @import("security.zig").GENERIC_MAPPING;
const PRIVILEGE_SET = @import("security.zig").PRIVILEGE_SET;
const IWbemClassObject = @import("wmi.zig").IWbemClassObject;
const APPCATEGORYINFOLIST = @import("shell.zig").APPCATEGORYINFOLIST;

test "" {
    const constant_export_count = 0;
    const type_export_count = 23;
    const func_count = 32;
    const unicode_alias_count = 4;
    const type_import_count = 14;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
