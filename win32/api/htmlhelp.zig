//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//
pub const HHWIN_NAVTYPE_TOC : i32 = 0;
pub const HHWIN_NAVTYPE_INDEX : i32 = 1;
pub const HHWIN_NAVTYPE_SEARCH : i32 = 2;
pub const HHWIN_NAVTYPE_FAVORITES : i32 = 3;
pub const HHWIN_NAVTYPE_HISTORY : i32 = 4;
pub const HHWIN_NAVTYPE_AUTHOR : i32 = 5;
pub const HHWIN_NAVTYPE_CUSTOM_FIRST : i32 = 11;
pub const IT_INCLUSIVE : i32 = 0;
pub const IT_EXCLUSIVE : i32 = 1;
pub const IT_HIDDEN : i32 = 2;
pub const HHWIN_NAVTAB_TOP : i32 = 0;
pub const HHWIN_NAVTAB_LEFT : i32 = 1;
pub const HHWIN_NAVTAB_BOTTOM : i32 = 2;
pub const HH_TAB_CONTENTS : i32 = 0;
pub const HH_TAB_INDEX : i32 = 1;
pub const HH_TAB_SEARCH : i32 = 2;
pub const HH_TAB_FAVORITES : i32 = 3;
pub const HH_TAB_HISTORY : i32 = 4;
pub const HH_TAB_AUTHOR : i32 = 5;
pub const HH_TAB_CUSTOM_FIRST : i32 = 11;
pub const HH_TAB_CUSTOM_LAST : i32 = 19;
pub const HHACT_TAB_CONTENTS : i32 = 0;
pub const HHACT_TAB_INDEX : i32 = 1;
pub const HHACT_TAB_SEARCH : i32 = 2;
pub const HHACT_TAB_HISTORY : i32 = 3;
pub const HHACT_TAB_FAVORITES : i32 = 4;
pub const HHACT_EXPAND : i32 = 5;
pub const HHACT_CONTRACT : i32 = 6;
pub const HHACT_BACK : i32 = 7;
pub const HHACT_FORWARD : i32 = 8;
pub const HHACT_STOP : i32 = 9;
pub const HHACT_REFRESH : i32 = 10;
pub const HHACT_HOME : i32 = 11;
pub const HHACT_SYNC : i32 = 12;
pub const HHACT_OPTIONS : i32 = 13;
pub const HHACT_PRINT : i32 = 14;
pub const HHACT_HIGHLIGHT : i32 = 15;
pub const HHACT_CUSTOMIZE : i32 = 16;
pub const HHACT_JUMP1 : i32 = 17;
pub const HHACT_JUMP2 : i32 = 18;
pub const HHACT_ZOOM : i32 = 19;
pub const HHACT_TOC_NEXT : i32 = 20;
pub const HHACT_TOC_PREV : i32 = 21;
pub const HHACT_NOTES : i32 = 22;
pub const HHACT_LAST_ENUM : i32 = 23;

//
// types
//
// --------------------------------------------------------
// Type: HHN_NOTIFY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HHN_NOTIFY = extern struct {
    hdr: NMHDR,
    pszUrl: ?*i8,
};
// --------------------------------------------------------
// Type: HH_POPUP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HH_POPUP = extern struct {
    cbStruct: i32,
    hinst: HINSTANCE,
    idString: u32,
    pszText: ?*i8,
    pt: POINT,
    clrForeground: u32,
    clrBackground: u32,
    rcMargins: RECT,
    pszFont: ?*i8,
};
// --------------------------------------------------------
// Type: HH_AKLINK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HH_AKLINK = extern struct {
    cbStruct: i32,
    fReserved: BOOL,
    pszKeywords: ?*i8,
    pszUrl: ?*i8,
    pszMsgText: ?*i8,
    pszMsgTitle: ?*i8,
    pszWindow: ?*i8,
    fIndexOnFail: BOOL,
};
// --------------------------------------------------------
// Type: HH_ENUM_IT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HH_ENUM_IT = extern struct {
    cbStruct: i32,
    iType: i32,
    pszCatName: ?*i8,
    pszITName: ?*i8,
    pszITDescription: ?*i8,
};
// --------------------------------------------------------
// Type: HH_ENUM_CAT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HH_ENUM_CAT = extern struct {
    cbStruct: i32,
    pszCatName: ?*i8,
    pszCatDescription: ?*i8,
};
// --------------------------------------------------------
// Type: HH_SET_INFOTYPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HH_SET_INFOTYPE = extern struct {
    cbStruct: i32,
    pszCatName: ?*i8,
    pszInfoTypeName: ?*i8,
};
// --------------------------------------------------------
// Type: HH_FTS_QUERY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HH_FTS_QUERY = extern struct {
    cbStruct: i32,
    fUniCodeStrings: BOOL,
    pszSearchQuery: ?*i8,
    iProximity: i32,
    fStemmedSearch: BOOL,
    fTitleOnly: BOOL,
    fExecute: BOOL,
    pszWindow: ?*i8,
};
// --------------------------------------------------------
// Type: HH_WINTYPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HH_WINTYPE = extern struct {
    cbStruct: i32,
    fUniCodeStrings: BOOL,
    pszType: ?*i8,
    fsValidMembers: u32,
    fsWinProperties: u32,
    pszCaption: ?*i8,
    dwStyles: u32,
    dwExStyles: u32,
    rcWindowPos: RECT,
    nShowState: i32,
    hwndHelp: HWND,
    hwndCaller: HWND,
    paInfoTypes: ?*u32,
    hwndToolBar: HWND,
    hwndNavigation: HWND,
    hwndHTML: HWND,
    iNavWidth: i32,
    rcHTML: RECT,
    pszToc: ?*i8,
    pszIndex: ?*i8,
    pszFile: ?*i8,
    pszHome: ?*i8,
    fsToolBarFlags: u32,
    fNotExpanded: BOOL,
    curNavType: i32,
    tabpos: i32,
    idNotify: i32,
    tabOrder: ?[*]u8,
    cHistory: i32,
    pszJump1: ?*i8,
    pszJump2: ?*i8,
    pszUrlJump1: ?*i8,
    pszUrlJump2: ?*i8,
    rcMinSize: RECT,
    cbInfoTypes: i32,
    pszCustomTabs: ?*i8,
};
// --------------------------------------------------------
// Type: HHNTRACK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HHNTRACK = extern struct {
    hdr: NMHDR,
    pszCurUrl: ?*i8,
    idAction: i32,
    phhWinType: ?*HH_WINTYPE,
};
// --------------------------------------------------------
// Type: HH_GPROPID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HH_GPROPID = *opaque{
};
// --------------------------------------------------------
// Type: HH_GLOBAL_PROPERTY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HH_GLOBAL_PROPERTY = extern struct {
    id: HH_GPROPID,
    @"var": VARIANT,
};
// --------------------------------------------------------
// Type: CProperty
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CProperty = extern struct {
    dwPropID: u32,
    cbData: u32,
    dwType: u32,
    Anonymous: _Anonymous_e__Union,
    fPersist: BOOL,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IITPropList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IITPropList = *opaque{
    // TODO: Method 'Set'
    // TODO: Method 'Set'
    // TODO: Method 'Set'
    // TODO: Method 'Add'
    // TODO: Method 'Get'
    // TODO: Method 'Clear'
    // TODO: Method 'SetPersist'
    // TODO: Method 'SetPersist'
    // TODO: Method 'GetFirst'
    // TODO: Method 'GetNext'
    // TODO: Method 'GetPropCount'
    // TODO: Method 'SaveHeader'
    // TODO: Method 'SaveData'
    // TODO: Method 'GetHeaderSize'
    // TODO: Method 'GetDataSize'
    // TODO: Method 'SaveDataToStream'
    // TODO: Method 'LoadFromMem'
    // TODO: Method 'SaveToMem'
};
// --------------------------------------------------------
// Type: IITDatabase
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IITDatabase = *opaque{
    // TODO: Method 'Open'
    // TODO: Method 'Close'
    // TODO: Method 'CreateObject'
    // TODO: Method 'GetObjectA'
    // TODO: Method 'GetObjectPersistence'
};
// --------------------------------------------------------
// Type: IITGroup
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IITGroup = opaque {
};
// --------------------------------------------------------
// Type: IITQuery
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IITQuery = opaque {
};
// --------------------------------------------------------
// Type: IITWordWheel
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IITWordWheel = *opaque{
    // TODO: Method 'Open'
    // TODO: Method 'Close'
    // TODO: Method 'GetLocaleInfoA'
    // TODO: Method 'GetSorterInstance'
    // TODO: Method 'Count'
    // TODO: Method 'Lookup'
    // TODO: Method 'Lookup'
    // TODO: Method 'Lookup'
    // TODO: Method 'SetGroup'
    // TODO: Method 'GetGroup'
    // TODO: Method 'GetDataCount'
    // TODO: Method 'GetData'
    // TODO: Method 'GetDataColumns'
};
// --------------------------------------------------------
// Type: IStemSink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IStemSink = *opaque{
    // TODO: Method 'PutAltWord'
    // TODO: Method 'PutWord'
};
// --------------------------------------------------------
// Type: IStemmerConfig
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IStemmerConfig = *opaque{
    // TODO: Method 'SetLocaleInfoA'
    // TODO: Method 'GetLocaleInfoA'
    // TODO: Method 'SetControlInfo'
    // TODO: Method 'GetControlInfo'
    // TODO: Method 'LoadExternalStemmerData'
};
// --------------------------------------------------------
// Type: IITStopWordList
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const IITStopWordList = opaque {
};
// --------------------------------------------------------
// Type: IWordBreakerConfig
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWordBreakerConfig = *opaque{
    // TODO: Method 'SetLocaleInfoA'
    // TODO: Method 'GetLocaleInfoA'
    // TODO: Method 'SetBreakWordType'
    // TODO: Method 'GetBreakWordType'
    // TODO: Method 'SetControlInfo'
    // TODO: Method 'GetControlInfo'
    // TODO: Method 'LoadExternalBreakerData'
    // TODO: Method 'SetWordStemmer'
    // TODO: Method 'GetWordStemmer'
};
// --------------------------------------------------------
// Type: PRIORITY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PRIORITY = *opaque{
};
// --------------------------------------------------------
// Type: ROWSTATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ROWSTATUS = extern struct {
    lRowFirst: i32,
    cRows: i32,
    cProperties: i32,
    cRowsTotal: i32,
};
// --------------------------------------------------------
// Type: COLUMNSTATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COLUMNSTATUS = extern struct {
    cPropCount: i32,
    cPropsLoaded: i32,
};
// --------------------------------------------------------
// Type: PFNCOLHEAPFREE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNCOLHEAPFREE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: IITResultSet
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IITResultSet = *opaque{
    // TODO: Method 'SetColumnPriority'
    // TODO: Method 'SetColumnHeap'
    // TODO: Method 'SetKeyProp'
    // TODO: Method 'Add'
    // TODO: Method 'Add'
    // TODO: Method 'Add'
    // TODO: Method 'Add'
    // TODO: Method 'Append'
    // TODO: Method 'Set'
    // TODO: Method 'Set'
    // TODO: Method 'Set'
    // TODO: Method 'Set'
    // TODO: Method 'Copy'
    // TODO: Method 'AppendRows'
    // TODO: Method 'Get'
    // TODO: Method 'GetKeyProp'
    // TODO: Method 'GetColumnPriority'
    // TODO: Method 'GetRowCount'
    // TODO: Method 'GetColumnCount'
    // TODO: Method 'GetColumn'
    // TODO: Method 'GetColumn'
    // TODO: Method 'GetColumnFromPropID'
    // TODO: Method 'Clear'
    // TODO: Method 'ClearRows'
    // TODO: Method 'Free'
    // TODO: Method 'IsCompleted'
    // TODO: Method 'Cancel'
    // TODO: Method 'Pause'
    // TODO: Method 'GetRowStatus'
    // TODO: Method 'GetColumnStatus'
};

//
// functions
//

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    else => if (@import("builtin").is_test) struct {
    } else struct {
    },
};

//
// type imports
//
const NMHDR = @import("controls.zig").NMHDR;
const HINSTANCE = @import("systemservices.zig").HINSTANCE;
const POINT = @import("displaydevices.zig").POINT;
const RECT = @import("displaydevices.zig").RECT;
const BOOL = @import("systemservices.zig").BOOL;
const HWND = @import("windowsandmessaging.zig").HWND;
const VARIANT = @import("automation.zig").VARIANT;

test "" {
    const constant_export_count = 45;
    const type_export_count = 26;
    const func_count = 0;
    const unicode_alias_count = 0;
    const type_import_count = 7;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
