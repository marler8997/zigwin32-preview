//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: SCSI_PASS_THROUGH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCSI_PASS_THROUGH = extern struct {
    Length: u16,
    ScsiStatus: u8,
    PathId: u8,
    TargetId: u8,
    Lun: u8,
    CdbLength: u8,
    SenseInfoLength: u8,
    DataIn: u8,
    DataTransferLength: u32,
    TimeOutValue: u32,
    DataBufferOffset: ?*opaque{},
    SenseInfoOffset: u32,
    Cdb: ?[*]u8,
};
// --------------------------------------------------------
// Type: SCSI_PASS_THROUGH_DIRECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCSI_PASS_THROUGH_DIRECT = extern struct {
    Length: u16,
    ScsiStatus: u8,
    PathId: u8,
    TargetId: u8,
    Lun: u8,
    CdbLength: u8,
    SenseInfoLength: u8,
    DataIn: u8,
    DataTransferLength: u32,
    TimeOutValue: u32,
    DataBuffer: ?*opaque{},
    SenseInfoOffset: u32,
    Cdb: ?[*]u8,
};
// --------------------------------------------------------
// Type: SCSI_PASS_THROUGH_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCSI_PASS_THROUGH_EX = extern struct {
    Version: u32,
    Length: u32,
    CdbLength: u32,
    StorAddressLength: u32,
    ScsiStatus: u8,
    SenseInfoLength: u8,
    DataDirection: u8,
    Reserved: u8,
    TimeOutValue: u32,
    StorAddressOffset: u32,
    SenseInfoOffset: u32,
    DataOutTransferLength: u32,
    DataInTransferLength: u32,
    DataOutBufferOffset: ?*opaque{},
    DataInBufferOffset: ?*opaque{},
    Cdb: ?[*]u8,
};
// --------------------------------------------------------
// Type: SCSI_PASS_THROUGH_DIRECT_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCSI_PASS_THROUGH_DIRECT_EX = extern struct {
    Version: u32,
    Length: u32,
    CdbLength: u32,
    StorAddressLength: u32,
    ScsiStatus: u8,
    SenseInfoLength: u8,
    DataDirection: u8,
    Reserved: u8,
    TimeOutValue: u32,
    StorAddressOffset: u32,
    SenseInfoOffset: u32,
    DataOutTransferLength: u32,
    DataInTransferLength: u32,
    DataOutBuffer: ?*opaque{},
    DataInBuffer: ?*opaque{},
    Cdb: ?[*]u8,
};
// --------------------------------------------------------
// Type: ATA_PASS_THROUGH_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ATA_PASS_THROUGH_EX = extern struct {
    Length: u16,
    AtaFlags: u16,
    PathId: u8,
    TargetId: u8,
    Lun: u8,
    ReservedAsUchar: u8,
    DataTransferLength: u32,
    TimeOutValue: u32,
    ReservedAsUlong: u32,
    DataBufferOffset: ?*opaque{},
    PreviousTaskFile: ?[*]u8,
    CurrentTaskFile: ?[*]u8,
};
// --------------------------------------------------------
// Type: ATA_PASS_THROUGH_DIRECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ATA_PASS_THROUGH_DIRECT = extern struct {
    Length: u16,
    AtaFlags: u16,
    PathId: u8,
    TargetId: u8,
    Lun: u8,
    ReservedAsUchar: u8,
    DataTransferLength: u32,
    TimeOutValue: u32,
    ReservedAsUlong: u32,
    DataBuffer: ?*opaque{},
    PreviousTaskFile: ?[*]u8,
    CurrentTaskFile: ?[*]u8,
};
// --------------------------------------------------------
// Type: IDE_IO_CONTROL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IDE_IO_CONTROL = extern struct {
    HeaderLength: u32,
    Signature: ?[*]u8,
    Timeout: u32,
    ControlCode: u32,
    ReturnStatus: u32,
    DataLength: u32,
};
// --------------------------------------------------------
// Type: MPIO_PASS_THROUGH_PATH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MPIO_PASS_THROUGH_PATH = extern struct {
    PassThrough: SCSI_PASS_THROUGH,
    Version: u32,
    Length: u16,
    Flags: u8,
    PortNumber: u8,
    MpioPathId: u64,
};
// --------------------------------------------------------
// Type: MPIO_PASS_THROUGH_PATH_DIRECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MPIO_PASS_THROUGH_PATH_DIRECT = extern struct {
    PassThrough: SCSI_PASS_THROUGH_DIRECT,
    Version: u32,
    Length: u16,
    Flags: u8,
    PortNumber: u8,
    MpioPathId: u64,
};
// --------------------------------------------------------
// Type: MPIO_PASS_THROUGH_PATH_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MPIO_PASS_THROUGH_PATH_EX = extern struct {
    PassThroughOffset: u32,
    Version: u32,
    Length: u16,
    Flags: u8,
    PortNumber: u8,
    MpioPathId: u64,
};
// --------------------------------------------------------
// Type: MPIO_PASS_THROUGH_PATH_DIRECT_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MPIO_PASS_THROUGH_PATH_DIRECT_EX = extern struct {
    PassThroughOffset: u32,
    Version: u32,
    Length: u16,
    Flags: u8,
    PortNumber: u8,
    MpioPathId: u64,
};
// --------------------------------------------------------
// Type: SCSI_BUS_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCSI_BUS_DATA = extern struct {
    NumberOfLogicalUnits: u8,
    InitiatorBusId: u8,
    InquiryDataOffset: u32,
};
// --------------------------------------------------------
// Type: SCSI_ADAPTER_BUS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCSI_ADAPTER_BUS_INFO = extern struct {
    NumberOfBuses: u8,
    BusData: ?[*]SCSI_BUS_DATA,
};
// --------------------------------------------------------
// Type: SCSI_INQUIRY_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCSI_INQUIRY_DATA = extern struct {
    PathId: u8,
    TargetId: u8,
    Lun: u8,
    DeviceClaimed: u8,
    InquiryDataLength: u32,
    NextInquiryDataOffset: u32,
    InquiryData: ?[*]u8,
};
// --------------------------------------------------------
// Type: SRB_IO_CONTROL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SRB_IO_CONTROL = extern struct {
    HeaderLength: u32,
    Signature: ?[*]u8,
    Timeout: u32,
    ControlCode: u32,
    ReturnCode: u32,
    Length: u32,
};
// --------------------------------------------------------
// Type: NVCACHE_REQUEST_BLOCK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NVCACHE_REQUEST_BLOCK = extern struct {
    NRBSize: u32,
    Function: u16,
    NRBFlags: u32,
    NRBStatus: u32,
    Count: u32,
    LBA: u64,
    DataBufSize: u32,
    NVCacheStatus: u32,
    NVCacheSubStatus: u32,
};
// --------------------------------------------------------
// Type: NV_FEATURE_PARAMETER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NV_FEATURE_PARAMETER = extern struct {
    NVPowerModeEnabled: u16,
    NVParameterReserv1: u16,
    NVCmdEnabled: u16,
    NVParameterReserv2: u16,
    NVPowerModeVer: u16,
    NVCmdVer: u16,
    NVSize: u32,
    NVReadSpeed: u16,
    NVWrtSpeed: u16,
    DeviceSpinUpTime: u32,
};
// --------------------------------------------------------
// Type: NVCACHE_HINT_PAYLOAD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NVCACHE_HINT_PAYLOAD = extern struct {
    Command: u8,
    Feature7_0: u8,
    Feature15_8: u8,
    Count15_8: u8,
    LBA7_0: u8,
    LBA15_8: u8,
    LBA23_16: u8,
    LBA31_24: u8,
    LBA39_32: u8,
    LBA47_40: u8,
    Auxiliary7_0: u8,
    Auxiliary23_16: u8,
    Reserved: ?[*]u8,
};
// --------------------------------------------------------
// Type: NV_SEP_CACHE_PARAMETER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NV_SEP_CACHE_PARAMETER = extern struct {
    Version: u32,
    Size: u32,
    Flags: _Flags_e__Union,
    WriteCacheType: u8,
    WriteCacheTypeEffective: u8,
    ParameterReserve1: ?[*]u8,
    // --------------------------------------------------------
    // Type: _Flags_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Flags_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _CacheFlags_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _CacheFlags_e__Struct = extern struct {
            _bitfield: u8,
        };
    };
};
// --------------------------------------------------------
// Type: NV_SEP_WRITE_CACHE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NV_SEP_WRITE_CACHE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: MP_STORAGE_DIAGNOSTIC_LEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MP_STORAGE_DIAGNOSTIC_LEVEL = *opaque{
};
// --------------------------------------------------------
// Type: MP_STORAGE_DIAGNOSTIC_TARGET_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MP_STORAGE_DIAGNOSTIC_TARGET_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_DIAGNOSTIC_MP_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_DIAGNOSTIC_MP_REQUEST = extern struct {
    Version: u32,
    Size: u32,
    TargetType: MP_STORAGE_DIAGNOSTIC_TARGET_TYPE,
    Level: MP_STORAGE_DIAGNOSTIC_LEVEL,
    ProviderId: Guid,
    BufferSize: u32,
    Reserved: u32,
    DataBuffer: ?[*]u8,
};
// --------------------------------------------------------
// Type: MP_DEVICE_DATA_SET_RANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MP_DEVICE_DATA_SET_RANGE = extern struct {
    StartingOffset: i64,
    LengthInBytes: u64,
};
// --------------------------------------------------------
// Type: DSM_NOTIFICATION_REQUEST_BLOCK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSM_NOTIFICATION_REQUEST_BLOCK = extern struct {
    Size: u32,
    Version: u32,
    NotifyFlags: u32,
    DataSetProfile: u32,
    Reserved: ?[*]u32,
    DataSetRangesCount: u32,
    DataSetRanges: ?[*]MP_DEVICE_DATA_SET_RANGE,
};
// --------------------------------------------------------
// Type: HYBRID_REQUEST_BLOCK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HYBRID_REQUEST_BLOCK = extern struct {
    Version: u32,
    Size: u32,
    Function: u32,
    Flags: u32,
    DataBufferOffset: u32,
    DataBufferLength: u32,
};
// --------------------------------------------------------
// Type: NVCACHE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NVCACHE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: NVCACHE_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NVCACHE_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: NVCACHE_PRIORITY_LEVEL_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NVCACHE_PRIORITY_LEVEL_DESCRIPTOR = extern struct {
    PriorityLevel: u8,
    Reserved0: ?[*]u8,
    ConsumedNVMSizeFraction: u32,
    ConsumedMappingResourcesFraction: u32,
    ConsumedNVMSizeForDirtyDataFraction: u32,
    ConsumedMappingResourcesForDirtyDataFraction: u32,
    Reserved1: u32,
};
// --------------------------------------------------------
// Type: HYBRID_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HYBRID_INFORMATION = extern struct {
    Version: u32,
    Size: u32,
    HybridSupported: u8,
    Status: NVCACHE_STATUS,
    CacheTypeEffective: NVCACHE_TYPE,
    CacheTypeDefault: NVCACHE_TYPE,
    FractionBase: u32,
    CacheSize: u64,
    Attributes: _Attributes_e__Struct,
    Priorities: _Priorities_e__Struct,
    // --------------------------------------------------------
    // Type: _Priorities_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Priorities_e__Struct = extern struct {
        PriorityLevelCount: u8,
        MaxPriorityBehavior: u8,
        OptimalWriteGranularity: u8,
        Reserved: u8,
        DirtyThresholdLow: u32,
        DirtyThresholdHigh: u32,
        SupportedCommands: _SupportedCommands_e__Struct,
        Priority: ?[*]NVCACHE_PRIORITY_LEVEL_DESCRIPTOR,
        // --------------------------------------------------------
        // Type: _SupportedCommands_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _SupportedCommands_e__Struct = extern struct {
            _bitfield: u32,
            MaxEvictCommands: u32,
            MaxLbaRangeCountForEvict: u32,
            MaxLbaRangeCountForChangeLba: u32,
        };
    };
    // --------------------------------------------------------
    // Type: _Attributes_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Attributes_e__Struct = extern struct {
        _bitfield: u32,
    };
};
// --------------------------------------------------------
// Type: HYBRID_DIRTY_THRESHOLDS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HYBRID_DIRTY_THRESHOLDS = extern struct {
    Version: u32,
    Size: u32,
    DirtyLowThreshold: u32,
    DirtyHighThreshold: u32,
};
// --------------------------------------------------------
// Type: HYBRID_DEMOTE_BY_SIZE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HYBRID_DEMOTE_BY_SIZE = extern struct {
    Version: u32,
    Size: u32,
    SourcePriority: u8,
    TargetPriority: u8,
    Reserved0: u16,
    Reserved1: u32,
    LbaCount: u64,
};
// --------------------------------------------------------
// Type: FIRMWARE_REQUEST_BLOCK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FIRMWARE_REQUEST_BLOCK = extern struct {
    Version: u32,
    Size: u32,
    Function: u32,
    Flags: u32,
    DataBufferOffset: u32,
    DataBufferLength: u32,
};
// --------------------------------------------------------
// Type: STORAGE_FIRMWARE_SLOT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_FIRMWARE_SLOT_INFO = extern struct {
    SlotNumber: u8,
    ReadOnly: u8,
    Reserved: ?[*]u8,
    Revision: _Revision_e__Union,
    // --------------------------------------------------------
    // Type: _Revision_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Revision_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: STORAGE_FIRMWARE_SLOT_INFO_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_FIRMWARE_SLOT_INFO_V2 = extern struct {
    SlotNumber: u8,
    ReadOnly: u8,
    Reserved: ?[*]u8,
    Revision: ?[*]u8,
};
// --------------------------------------------------------
// Type: STORAGE_FIRMWARE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_FIRMWARE_INFO = extern struct {
    Version: u32,
    Size: u32,
    UpgradeSupport: u8,
    SlotCount: u8,
    ActiveSlot: u8,
    PendingActivateSlot: u8,
    Reserved: u32,
    Slot: ?[*]STORAGE_FIRMWARE_SLOT_INFO,
};
// --------------------------------------------------------
// Type: STORAGE_FIRMWARE_INFO_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_FIRMWARE_INFO_V2 = extern struct {
    Version: u32,
    Size: u32,
    UpgradeSupport: u8,
    SlotCount: u8,
    ActiveSlot: u8,
    PendingActivateSlot: u8,
    FirmwareShared: u8,
    Reserved: ?[*]u8,
    ImagePayloadAlignment: u32,
    ImagePayloadMaxSize: u32,
    Slot: ?[*]STORAGE_FIRMWARE_SLOT_INFO_V2,
};
// --------------------------------------------------------
// Type: STORAGE_FIRMWARE_DOWNLOAD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_FIRMWARE_DOWNLOAD = extern struct {
    Version: u32,
    Size: u32,
    Offset: u64,
    BufferSize: u64,
    ImageBuffer: ?[*]u8,
};
// --------------------------------------------------------
// Type: STORAGE_FIRMWARE_DOWNLOAD_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_FIRMWARE_DOWNLOAD_V2 = extern struct {
    Version: u32,
    Size: u32,
    Offset: u64,
    BufferSize: u64,
    Slot: u8,
    Reserved: ?[*]u8,
    ImageSize: u32,
    ImageBuffer: ?[*]u8,
};
// --------------------------------------------------------
// Type: STORAGE_FIRMWARE_ACTIVATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_FIRMWARE_ACTIVATE = extern struct {
    Version: u32,
    Size: u32,
    SlotToActivate: u8,
    Reserved0: ?[*]u8,
};
// --------------------------------------------------------
// Type: IO_SCSI_CAPABILITIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IO_SCSI_CAPABILITIES = extern struct {
    Length: u32,
    MaximumTransferLength: u32,
    MaximumPhysicalPages: u32,
    SupportedAsynchronousEvents: u32,
    AlignmentMask: u32,
    TaggedQueuing: u8,
    AdapterScansDown: u8,
    AdapterUsesPio: u8,
};
// --------------------------------------------------------
// Type: SCSI_ADDRESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCSI_ADDRESS = extern struct {
    Length: u32,
    PortNumber: u8,
    PathId: u8,
    TargetId: u8,
    Lun: u8,
};
// --------------------------------------------------------
// Type: _ADAPTER_OBJECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _ADAPTER_OBJECT = opaque {
};
// --------------------------------------------------------
// Type: DUMP_DEVICE_POWERON_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DUMP_DEVICE_POWERON_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDUMP_DEVICE_POWERON_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDUMP_DEVICE_POWERON_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DUMP_POINTERS_VERSION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DUMP_POINTERS_VERSION = extern struct {
    Version: u32,
    Size: u32,
};
// --------------------------------------------------------
// Type: DUMP_POINTERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DUMP_POINTERS = extern struct {
    AdapterObject: ?*_ADAPTER_OBJECT,
    MappedRegisterBase: ?*opaque{},
    DumpData: ?*opaque{},
    CommonBufferVa: ?*opaque{},
    CommonBufferPa: LARGE_INTEGER,
    CommonBufferSize: u32,
    AllocateCommonBuffers: u8,
    UseDiskDump: u8,
    Spare1: ?[*]u8,
    DeviceObject: ?*opaque{},
};
// --------------------------------------------------------
// Type: DUMP_POINTERS_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DUMP_POINTERS_EX = extern struct {
    Header: DUMP_POINTERS_VERSION,
    DumpData: ?*opaque{},
    CommonBufferVa: ?*opaque{},
    CommonBufferSize: u32,
    AllocateCommonBuffers: u8,
    DeviceObject: ?*opaque{},
    DriverList: ?*opaque{},
    dwPortFlags: u32,
    MaxDeviceDumpSectionSize: u32,
    MaxDeviceDumpLevel: u32,
    MaxTransferSize: u32,
    AdapterObject: ?*opaque{},
    MappedRegisterBase: ?*opaque{},
    DeviceReady: ?*u8,
    DumpDevicePowerOn: PDUMP_DEVICE_POWERON_ROUTINE,
    DumpDevicePowerOnContext: ?*opaque{},
};
// --------------------------------------------------------
// Type: DUMP_DRIVER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DUMP_DRIVER = extern struct {
    DumpDriverList: ?*opaque{},
    DriverName: ?[*]u16,
    BaseName: ?[*]u16,
};
// --------------------------------------------------------
// Type: NTSCSI_UNICODE_STRING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTSCSI_UNICODE_STRING = extern struct {
    Length: u16,
    MaximumLength: u16,
    Buffer: ?*u16,
};
// --------------------------------------------------------
// Type: DUMP_DRIVER_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DUMP_DRIVER_EX = extern struct {
    DumpDriverList: ?*opaque{},
    DriverName: ?[*]u16,
    BaseName: ?[*]u16,
    DriverFullPath: NTSCSI_UNICODE_STRING,
};
// --------------------------------------------------------
// Type: STORAGE_ENDURANCE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_ENDURANCE_INFO = extern struct {
    ValidFields: u32,
    GroupId: u32,
    Flags: _Flags_e__Struct,
    LifePercentage: u32,
    BytesReadCount: ?[*]u8,
    ByteWriteCount: ?[*]u8,
    // --------------------------------------------------------
    // Type: _Flags_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Flags_e__Struct = extern struct {
        _bitfield: u32,
    };
};
// --------------------------------------------------------
// Type: STORAGE_ENDURANCE_DATA_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_ENDURANCE_DATA_DESCRIPTOR = extern struct {
    Version: u32,
    Size: u32,
    EnduranceInfo: STORAGE_ENDURANCE_INFO,
};
// --------------------------------------------------------
// Type: ISCSI_DIGEST_TYPES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ISCSI_DIGEST_TYPES = *opaque{
};
// --------------------------------------------------------
// Type: ISCSI_AUTH_TYPES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ISCSI_AUTH_TYPES = *opaque{
};
// --------------------------------------------------------
// Type: ISCSI_LOGIN_OPTIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ISCSI_LOGIN_OPTIONS = extern struct {
    Version: u32,
    InformationSpecified: u32,
    LoginFlags: u32,
    AuthType: ISCSI_AUTH_TYPES,
    HeaderDigest: ISCSI_DIGEST_TYPES,
    DataDigest: ISCSI_DIGEST_TYPES,
    MaximumConnections: u32,
    DefaultTime2Wait: u32,
    DefaultTime2Retain: u32,
    UsernameLength: u32,
    PasswordLength: u32,
    Username: ?*u8,
    Password: ?*u8,
};
// --------------------------------------------------------
// Type: IKE_AUTHENTICATION_METHOD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IKE_AUTHENTICATION_METHOD = *opaque{
};
// --------------------------------------------------------
// Type: IKE_AUTHENTICATION_PRESHARED_KEY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKE_AUTHENTICATION_PRESHARED_KEY = extern struct {
    SecurityFlags: u64,
    IdType: u8,
    IdLengthInBytes: u32,
    Id: ?*u8,
    KeyLengthInBytes: u32,
    Key: ?*u8,
};
// --------------------------------------------------------
// Type: IKE_AUTHENTICATION_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKE_AUTHENTICATION_INFORMATION = extern struct {
    AuthMethod: IKE_AUTHENTICATION_METHOD,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: ISCSI_UNIQUE_SESSION_ID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ISCSI_UNIQUE_SESSION_ID = extern struct {
    AdapterUnique: u64,
    AdapterSpecific: u64,
};
// --------------------------------------------------------
// Type: SCSI_LUN_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCSI_LUN_LIST = extern struct {
    OSLUN: u32,
    TargetLUN: u64,
};
// --------------------------------------------------------
// Type: ISCSI_TARGET_MAPPINGW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ISCSI_TARGET_MAPPINGW = extern struct {
    InitiatorName: ?[*]u16,
    TargetName: ?[*]u16,
    OSDeviceName: ?[*]u16,
    SessionId: ISCSI_UNIQUE_SESSION_ID,
    OSBusNumber: u32,
    OSTargetNumber: u32,
    LUNCount: u32,
    LUNList: ?*SCSI_LUN_LIST,
};
// --------------------------------------------------------
// Type: ISCSI_TARGET_MAPPINGA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ISCSI_TARGET_MAPPINGA = extern struct {
    InitiatorName: ?[*]i8,
    TargetName: ?[*]i8,
    OSDeviceName: ?[*]i8,
    SessionId: ISCSI_UNIQUE_SESSION_ID,
    OSBusNumber: u32,
    OSTargetNumber: u32,
    LUNCount: u32,
    LUNList: ?*SCSI_LUN_LIST,
};
// --------------------------------------------------------
// Type: ISCSI_TARGET_PORTALW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ISCSI_TARGET_PORTALW = extern struct {
    SymbolicName: ?[*]u16,
    Address: ?[*]u16,
    Socket: u16,
};
// --------------------------------------------------------
// Type: ISCSI_TARGET_PORTALA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ISCSI_TARGET_PORTALA = extern struct {
    SymbolicName: ?[*]i8,
    Address: ?[*]i8,
    Socket: u16,
};
// --------------------------------------------------------
// Type: ISCSI_TARGET_PORTAL_INFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ISCSI_TARGET_PORTAL_INFOW = extern struct {
    InitiatorName: ?[*]u16,
    InitiatorPortNumber: u32,
    SymbolicName: ?[*]u16,
    Address: ?[*]u16,
    Socket: u16,
};
// --------------------------------------------------------
// Type: ISCSI_TARGET_PORTAL_INFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ISCSI_TARGET_PORTAL_INFOA = extern struct {
    InitiatorName: ?[*]i8,
    InitiatorPortNumber: u32,
    SymbolicName: ?[*]i8,
    Address: ?[*]i8,
    Socket: u16,
};
// --------------------------------------------------------
// Type: ISCSI_TARGET_PORTAL_INFO_EXW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ISCSI_TARGET_PORTAL_INFO_EXW = extern struct {
    InitiatorName: ?[*]u16,
    InitiatorPortNumber: u32,
    SymbolicName: ?[*]u16,
    Address: ?[*]u16,
    Socket: u16,
    SecurityFlags: u64,
    LoginOptions: ISCSI_LOGIN_OPTIONS,
};
// --------------------------------------------------------
// Type: ISCSI_TARGET_PORTAL_INFO_EXA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ISCSI_TARGET_PORTAL_INFO_EXA = extern struct {
    InitiatorName: ?[*]i8,
    InitiatorPortNumber: u32,
    SymbolicName: ?[*]i8,
    Address: ?[*]i8,
    Socket: u16,
    SecurityFlags: u64,
    LoginOptions: ISCSI_LOGIN_OPTIONS,
};
// --------------------------------------------------------
// Type: ISCSI_TARGET_PORTAL_GROUPW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ISCSI_TARGET_PORTAL_GROUPW = extern struct {
    Count: u32,
    Portals: ?[*]ISCSI_TARGET_PORTALW,
};
// --------------------------------------------------------
// Type: ISCSI_TARGET_PORTAL_GROUPA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ISCSI_TARGET_PORTAL_GROUPA = extern struct {
    Count: u32,
    Portals: ?[*]ISCSI_TARGET_PORTALA,
};
// --------------------------------------------------------
// Type: ISCSI_CONNECTION_INFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ISCSI_CONNECTION_INFOW = extern struct {
    ConnectionId: ISCSI_UNIQUE_SESSION_ID,
    InitiatorAddress: ?*u16,
    TargetAddress: ?*u16,
    InitiatorSocket: u16,
    TargetSocket: u16,
    CID: ?[*]u8,
};
// --------------------------------------------------------
// Type: ISCSI_SESSION_INFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ISCSI_SESSION_INFOW = extern struct {
    SessionId: ISCSI_UNIQUE_SESSION_ID,
    InitiatorName: ?*u16,
    TargetNodeName: ?*u16,
    TargetName: ?*u16,
    ISID: ?[*]u8,
    TSID: ?[*]u8,
    ConnectionCount: u32,
    Connections: ?*ISCSI_CONNECTION_INFOW,
};
// --------------------------------------------------------
// Type: ISCSI_CONNECTION_INFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ISCSI_CONNECTION_INFOA = extern struct {
    ConnectionId: ISCSI_UNIQUE_SESSION_ID,
    InitiatorAddress: ?*i8,
    TargetAddress: ?*i8,
    InitiatorSocket: u16,
    TargetSocket: u16,
    CID: ?[*]u8,
};
// --------------------------------------------------------
// Type: ISCSI_SESSION_INFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ISCSI_SESSION_INFOA = extern struct {
    SessionId: ISCSI_UNIQUE_SESSION_ID,
    InitiatorName: ?*i8,
    TargetNodeName: ?*i8,
    TargetName: ?*i8,
    ISID: ?[*]u8,
    TSID: ?[*]u8,
    ConnectionCount: u32,
    Connections: ?*ISCSI_CONNECTION_INFOA,
};
// --------------------------------------------------------
// Type: ISCSI_CONNECTION_INFO_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ISCSI_CONNECTION_INFO_EX = extern struct {
    ConnectionId: ISCSI_UNIQUE_SESSION_ID,
    State: u8,
    Protocol: u8,
    HeaderDigest: u8,
    DataDigest: u8,
    MaxRecvDataSegmentLength: u32,
    AuthType: ISCSI_AUTH_TYPES,
    EstimatedThroughput: u64,
    MaxDatagramSize: u32,
};
// --------------------------------------------------------
// Type: ISCSI_SESSION_INFO_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ISCSI_SESSION_INFO_EX = extern struct {
    SessionId: ISCSI_UNIQUE_SESSION_ID,
    InitialR2t: u8,
    ImmediateData: u8,
    Type: u8,
    DataSequenceInOrder: u8,
    DataPduInOrder: u8,
    ErrorRecoveryLevel: u8,
    MaxOutstandingR2t: u32,
    FirstBurstLength: u32,
    MaxBurstLength: u32,
    MaximumConnections: u32,
    ConnectionCount: u32,
    Connections: ?*ISCSI_CONNECTION_INFO_EX,
};
// --------------------------------------------------------
// Type: ISCSI_DEVICE_ON_SESSIONW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ISCSI_DEVICE_ON_SESSIONW = extern struct {
    InitiatorName: ?[*]u16,
    TargetName: ?[*]u16,
    ScsiAddress: SCSI_ADDRESS,
    DeviceInterfaceType: Guid,
    DeviceInterfaceName: ?[*]u16,
    LegacyName: ?[*]u16,
    StorageDeviceNumber: STORAGE_DEVICE_NUMBER,
    DeviceInstance: u32,
};
// --------------------------------------------------------
// Type: ISCSI_DEVICE_ON_SESSIONA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ISCSI_DEVICE_ON_SESSIONA = extern struct {
    InitiatorName: ?[*]i8,
    TargetName: ?[*]i8,
    ScsiAddress: SCSI_ADDRESS,
    DeviceInterfaceType: Guid,
    DeviceInterfaceName: ?[*]i8,
    LegacyName: ?[*]i8,
    StorageDeviceNumber: STORAGE_DEVICE_NUMBER,
    DeviceInstance: u32,
};
// --------------------------------------------------------
// Type: PERSISTENT_ISCSI_LOGIN_INFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PERSISTENT_ISCSI_LOGIN_INFOW = extern struct {
    TargetName: ?[*]u16,
    IsInformationalSession: u8,
    InitiatorInstance: ?[*]u16,
    InitiatorPortNumber: u32,
    TargetPortal: ISCSI_TARGET_PORTALW,
    SecurityFlags: u64,
    Mappings: ?*ISCSI_TARGET_MAPPINGW,
    LoginOptions: ISCSI_LOGIN_OPTIONS,
};
// --------------------------------------------------------
// Type: PERSISTENT_ISCSI_LOGIN_INFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PERSISTENT_ISCSI_LOGIN_INFOA = extern struct {
    TargetName: ?[*]i8,
    IsInformationalSession: u8,
    InitiatorInstance: ?[*]i8,
    InitiatorPortNumber: u32,
    TargetPortal: ISCSI_TARGET_PORTALA,
    SecurityFlags: u64,
    Mappings: ?*ISCSI_TARGET_MAPPINGA,
    LoginOptions: ISCSI_LOGIN_OPTIONS,
};
// --------------------------------------------------------
// Type: TARGETPROTOCOLTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TARGETPROTOCOLTYPE = *opaque{
};
// --------------------------------------------------------
// Type: TARGET_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TARGET_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: ISCSI_VERSION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ISCSI_VERSION_INFO = extern struct {
    MajorVersion: u32,
    MinorVersion: u32,
    BuildNumber: u32,
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn GetIScsiVersionInformation(
    VersionInfo: ?*ISCSI_VERSION_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn GetIScsiTargetInformationW(
    TargetName: ?*u16,
    DiscoveryMechanism: ?*u16,
    InfoClass: TARGET_INFORMATION_CLASS,
    BufferSize: ?*u32,
    Buffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn GetIScsiTargetInformationA(
    TargetName: ?*i8,
    DiscoveryMechanism: ?*i8,
    InfoClass: TARGET_INFORMATION_CLASS,
    BufferSize: ?*u32,
    Buffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn AddIScsiConnectionW(
    UniqueSessionId: ?*ISCSI_UNIQUE_SESSION_ID,
    Reserved: ?*opaque{},
    InitiatorPortNumber: u32,
    TargetPortal: ?*ISCSI_TARGET_PORTALW,
    SecurityFlags: u64,
    LoginOptions: ?*ISCSI_LOGIN_OPTIONS,
    KeySize: u32,
    Key: ?*i8,
    ConnectionId: ?*ISCSI_UNIQUE_SESSION_ID,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn AddIScsiConnectionA(
    UniqueSessionId: ?*ISCSI_UNIQUE_SESSION_ID,
    Reserved: ?*opaque{},
    InitiatorPortNumber: u32,
    TargetPortal: ?*ISCSI_TARGET_PORTALA,
    SecurityFlags: u64,
    LoginOptions: ?*ISCSI_LOGIN_OPTIONS,
    KeySize: u32,
    Key: ?*i8,
    ConnectionId: ?*ISCSI_UNIQUE_SESSION_ID,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn RemoveIScsiConnection(
    UniqueSessionId: ?*ISCSI_UNIQUE_SESSION_ID,
    ConnectionId: ?*ISCSI_UNIQUE_SESSION_ID,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn ReportIScsiTargetsW(
    ForceUpdate: u8,
    BufferSize: ?*u32,
    Buffer: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn ReportIScsiTargetsA(
    ForceUpdate: u8,
    BufferSize: ?*u32,
    Buffer: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn AddIScsiStaticTargetW(
    TargetName: ?*u16,
    TargetAlias: ?*u16,
    TargetFlags: u32,
    Persist: u8,
    Mappings: ?*ISCSI_TARGET_MAPPINGW,
    LoginOptions: ?*ISCSI_LOGIN_OPTIONS,
    PortalGroup: ?*ISCSI_TARGET_PORTAL_GROUPW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn AddIScsiStaticTargetA(
    TargetName: ?*i8,
    TargetAlias: ?*i8,
    TargetFlags: u32,
    Persist: u8,
    Mappings: ?*ISCSI_TARGET_MAPPINGA,
    LoginOptions: ?*ISCSI_LOGIN_OPTIONS,
    PortalGroup: ?*ISCSI_TARGET_PORTAL_GROUPA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn RemoveIScsiStaticTargetW(
    TargetName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn RemoveIScsiStaticTargetA(
    TargetName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn AddIScsiSendTargetPortalW(
    InitiatorInstance: ?*u16,
    InitiatorPortNumber: u32,
    LoginOptions: ?*ISCSI_LOGIN_OPTIONS,
    SecurityFlags: u64,
    Portal: ?*ISCSI_TARGET_PORTALW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn AddIScsiSendTargetPortalA(
    InitiatorInstance: ?*i8,
    InitiatorPortNumber: u32,
    LoginOptions: ?*ISCSI_LOGIN_OPTIONS,
    SecurityFlags: u64,
    Portal: ?*ISCSI_TARGET_PORTALA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn RemoveIScsiSendTargetPortalW(
    InitiatorInstance: ?*u16,
    InitiatorPortNumber: u32,
    Portal: ?*ISCSI_TARGET_PORTALW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn RemoveIScsiSendTargetPortalA(
    InitiatorInstance: ?*i8,
    InitiatorPortNumber: u32,
    Portal: ?*ISCSI_TARGET_PORTALA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn RefreshIScsiSendTargetPortalW(
    InitiatorInstance: ?*u16,
    InitiatorPortNumber: u32,
    Portal: ?*ISCSI_TARGET_PORTALW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn RefreshIScsiSendTargetPortalA(
    InitiatorInstance: ?*i8,
    InitiatorPortNumber: u32,
    Portal: ?*ISCSI_TARGET_PORTALA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn ReportIScsiSendTargetPortalsW(
    PortalCount: ?*u32,
    PortalInfo: ?*ISCSI_TARGET_PORTAL_INFOW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn ReportIScsiSendTargetPortalsA(
    PortalCount: ?*u32,
    PortalInfo: ?*ISCSI_TARGET_PORTAL_INFOA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn ReportIScsiSendTargetPortalsExW(
    PortalCount: ?*u32,
    PortalInfoSize: ?*u32,
    PortalInfo: ?*ISCSI_TARGET_PORTAL_INFO_EXW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn ReportIScsiSendTargetPortalsExA(
    PortalCount: ?*u32,
    PortalInfoSize: ?*u32,
    PortalInfo: ?*ISCSI_TARGET_PORTAL_INFO_EXA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn LoginIScsiTargetW(
    TargetName: ?*u16,
    IsInformationalSession: u8,
    InitiatorInstance: ?*u16,
    InitiatorPortNumber: u32,
    TargetPortal: ?*ISCSI_TARGET_PORTALW,
    SecurityFlags: u64,
    Mappings: ?*ISCSI_TARGET_MAPPINGW,
    LoginOptions: ?*ISCSI_LOGIN_OPTIONS,
    KeySize: u32,
    Key: ?*i8,
    IsPersistent: u8,
    UniqueSessionId: ?*ISCSI_UNIQUE_SESSION_ID,
    UniqueConnectionId: ?*ISCSI_UNIQUE_SESSION_ID,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn LoginIScsiTargetA(
    TargetName: ?*i8,
    IsInformationalSession: u8,
    InitiatorInstance: ?*i8,
    InitiatorPortNumber: u32,
    TargetPortal: ?*ISCSI_TARGET_PORTALA,
    SecurityFlags: u64,
    Mappings: ?*ISCSI_TARGET_MAPPINGA,
    LoginOptions: ?*ISCSI_LOGIN_OPTIONS,
    KeySize: u32,
    Key: ?*i8,
    IsPersistent: u8,
    UniqueSessionId: ?*ISCSI_UNIQUE_SESSION_ID,
    UniqueConnectionId: ?*ISCSI_UNIQUE_SESSION_ID,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn ReportIScsiPersistentLoginsW(
    Count: ?*u32,
    PersistentLoginInfo: ?*PERSISTENT_ISCSI_LOGIN_INFOW,
    BufferSizeInBytes: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn ReportIScsiPersistentLoginsA(
    Count: ?*u32,
    PersistentLoginInfo: ?*PERSISTENT_ISCSI_LOGIN_INFOA,
    BufferSizeInBytes: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn LogoutIScsiTarget(
    UniqueSessionId: ?*ISCSI_UNIQUE_SESSION_ID,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn RemoveIScsiPersistentTargetW(
    InitiatorInstance: ?*u16,
    InitiatorPortNumber: u32,
    TargetName: ?*u16,
    Portal: ?*ISCSI_TARGET_PORTALW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn RemoveIScsiPersistentTargetA(
    InitiatorInstance: ?*i8,
    InitiatorPortNumber: u32,
    TargetName: ?*i8,
    Portal: ?*ISCSI_TARGET_PORTALA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn SendScsiInquiry(
    UniqueSessionId: ?*ISCSI_UNIQUE_SESSION_ID,
    Lun: u64,
    EvpdCmddt: u8,
    PageCode: u8,
    ScsiStatus: ?*u8,
    ResponseSize: ?*u32,
    ResponseBuffer: ?*u8,
    SenseSize: ?*u32,
    SenseBuffer: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn SendScsiReadCapacity(
    UniqueSessionId: ?*ISCSI_UNIQUE_SESSION_ID,
    Lun: u64,
    ScsiStatus: ?*u8,
    ResponseSize: ?*u32,
    ResponseBuffer: ?*u8,
    SenseSize: ?*u32,
    SenseBuffer: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn SendScsiReportLuns(
    UniqueSessionId: ?*ISCSI_UNIQUE_SESSION_ID,
    ScsiStatus: ?*u8,
    ResponseSize: ?*u32,
    ResponseBuffer: ?*u8,
    SenseSize: ?*u32,
    SenseBuffer: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn ReportIScsiInitiatorListW(
    BufferSize: ?*u32,
    Buffer: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn ReportIScsiInitiatorListA(
    BufferSize: ?*u32,
    Buffer: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn ReportActiveIScsiTargetMappingsW(
    BufferSize: ?*u32,
    MappingCount: ?*u32,
    Mappings: ?*ISCSI_TARGET_MAPPINGW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn ReportActiveIScsiTargetMappingsA(
    BufferSize: ?*u32,
    MappingCount: ?*u32,
    Mappings: ?*ISCSI_TARGET_MAPPINGA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn SetIScsiTunnelModeOuterAddressW(
    InitiatorName: ?*u16,
    InitiatorPortNumber: u32,
    DestinationAddress: ?*u16,
    OuterModeAddress: ?*u16,
    Persist: u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn SetIScsiTunnelModeOuterAddressA(
    InitiatorName: ?*i8,
    InitiatorPortNumber: u32,
    DestinationAddress: ?*i8,
    OuterModeAddress: ?*i8,
    Persist: u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn SetIScsiIKEInfoW(
    InitiatorName: ?*u16,
    InitiatorPortNumber: u32,
    AuthInfo: ?*IKE_AUTHENTICATION_INFORMATION,
    Persist: u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn SetIScsiIKEInfoA(
    InitiatorName: ?*i8,
    InitiatorPortNumber: u32,
    AuthInfo: ?*IKE_AUTHENTICATION_INFORMATION,
    Persist: u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn GetIScsiIKEInfoW(
    InitiatorName: ?*u16,
    InitiatorPortNumber: u32,
    Reserved: ?*u32,
    AuthInfo: ?*IKE_AUTHENTICATION_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn GetIScsiIKEInfoA(
    InitiatorName: ?*i8,
    InitiatorPortNumber: u32,
    Reserved: ?*u32,
    AuthInfo: ?*IKE_AUTHENTICATION_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn SetIScsiGroupPresharedKey(
    KeyLength: u32,
    Key: ?*u8,
    Persist: u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn SetIScsiInitiatorCHAPSharedSecret(
    SharedSecretLength: u32,
    SharedSecret: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn SetIScsiInitiatorRADIUSSharedSecret(
    SharedSecretLength: u32,
    SharedSecret: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn SetIScsiInitiatorNodeNameW(
    InitiatorNodeName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn SetIScsiInitiatorNodeNameA(
    InitiatorNodeName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn GetIScsiInitiatorNodeNameW(
    InitiatorNodeName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn GetIScsiInitiatorNodeNameA(
    InitiatorNodeName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn AddISNSServerW(
    Address: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn AddISNSServerA(
    Address: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn RemoveISNSServerW(
    Address: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn RemoveISNSServerA(
    Address: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn RefreshISNSServerW(
    Address: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn RefreshISNSServerA(
    Address: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn ReportISNSServerListW(
    BufferSizeInChar: ?*u32,
    Buffer: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn ReportISNSServerListA(
    BufferSizeInChar: ?*u32,
    Buffer: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn GetIScsiSessionListW(
    BufferSize: ?*u32,
    SessionCount: ?*u32,
    SessionInfo: ?*ISCSI_SESSION_INFOW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn GetIScsiSessionListA(
    BufferSize: ?*u32,
    SessionCount: ?*u32,
    SessionInfo: ?*ISCSI_SESSION_INFOA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn GetIScsiSessionListEx(
    BufferSize: ?*u32,
    SessionCountPtr: ?*u32,
    SessionInfo: ?*ISCSI_SESSION_INFO_EX,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn GetDevicesForIScsiSessionW(
    UniqueSessionId: ?*ISCSI_UNIQUE_SESSION_ID,
    DeviceCount: ?*u32,
    Devices: ?*ISCSI_DEVICE_ON_SESSIONW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn GetDevicesForIScsiSessionA(
    UniqueSessionId: ?*ISCSI_UNIQUE_SESSION_ID,
    DeviceCount: ?*u32,
    Devices: ?*ISCSI_DEVICE_ON_SESSIONA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn SetupPersistentIScsiVolumes(
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn SetupPersistentIScsiDevices(
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn AddPersistentIScsiDeviceW(
    DevicePath: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn AddPersistentIScsiDeviceA(
    DevicePath: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn RemovePersistentIScsiDeviceW(
    DevicePath: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn RemovePersistentIScsiDeviceA(
    DevicePath: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn ClearPersistentIScsiDevices(
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn ReportPersistentIScsiDevicesW(
    BufferSizeInChar: ?*u32,
    Buffer: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn ReportPersistentIScsiDevicesA(
    BufferSizeInChar: ?*u32,
    Buffer: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn ReportIScsiTargetPortalsW(
    InitiatorName: ?*u16,
    TargetName: ?*u16,
    TargetPortalTag: ?*u16,
    ElementCount: ?*u32,
    Portals: ?*ISCSI_TARGET_PORTALW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn ReportIScsiTargetPortalsA(
    InitiatorName: ?*i8,
    TargetName: ?*i8,
    TargetPortalTag: ?*u16,
    ElementCount: ?*u32,
    Portals: ?*ISCSI_TARGET_PORTALA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn AddRadiusServerW(
    Address: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn AddRadiusServerA(
    Address: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn RemoveRadiusServerW(
    Address: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn RemoveRadiusServerA(
    Address: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn ReportRadiusServerListW(
    BufferSizeInChar: ?*u32,
    Buffer: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ISCSIDSC" fn ReportRadiusServerListA(
    BufferSizeInChar: ?*u32,
    Buffer: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const ISCSI_TARGET_MAPPING = ISCSI_TARGET_MAPPINGA;
        pub const ISCSI_TARGET_PORTAL = ISCSI_TARGET_PORTALA;
        pub const ISCSI_TARGET_PORTAL_INFO = ISCSI_TARGET_PORTAL_INFOA;
        pub const ISCSI_TARGET_PORTAL_INFO_EX = ISCSI_TARGET_PORTAL_INFO_EXA;
        pub const ISCSI_TARGET_PORTAL_GROUP = ISCSI_TARGET_PORTAL_GROUPA;
        pub const ISCSI_CONNECTION_INFO = ISCSI_CONNECTION_INFOA;
        pub const ISCSI_SESSION_INFO = ISCSI_SESSION_INFOA;
        pub const ISCSI_DEVICE_ON_SESSION = ISCSI_DEVICE_ON_SESSIONA;
        pub const PERSISTENT_ISCSI_LOGIN_INFO = PERSISTENT_ISCSI_LOGIN_INFOA;
        pub const GetIScsiTargetInformation = GetIScsiTargetInformationA;
        pub const AddIScsiConnection = AddIScsiConnectionA;
        pub const ReportIScsiTargets = ReportIScsiTargetsA;
        pub const AddIScsiStaticTarget = AddIScsiStaticTargetA;
        pub const RemoveIScsiStaticTarget = RemoveIScsiStaticTargetA;
        pub const AddIScsiSendTargetPortal = AddIScsiSendTargetPortalA;
        pub const RemoveIScsiSendTargetPortal = RemoveIScsiSendTargetPortalA;
        pub const RefreshIScsiSendTargetPortal = RefreshIScsiSendTargetPortalA;
        pub const ReportIScsiSendTargetPortals = ReportIScsiSendTargetPortalsA;
        pub const ReportIScsiSendTargetPortalsEx = ReportIScsiSendTargetPortalsExA;
        pub const LoginIScsiTarget = LoginIScsiTargetA;
        pub const ReportIScsiPersistentLogins = ReportIScsiPersistentLoginsA;
        pub const RemoveIScsiPersistentTarget = RemoveIScsiPersistentTargetA;
        pub const ReportIScsiInitiatorList = ReportIScsiInitiatorListA;
        pub const ReportActiveIScsiTargetMappings = ReportActiveIScsiTargetMappingsA;
        pub const SetIScsiTunnelModeOuterAddress = SetIScsiTunnelModeOuterAddressA;
        pub const SetIScsiIKEInfo = SetIScsiIKEInfoA;
        pub const GetIScsiIKEInfo = GetIScsiIKEInfoA;
        pub const SetIScsiInitiatorNodeName = SetIScsiInitiatorNodeNameA;
        pub const GetIScsiInitiatorNodeName = GetIScsiInitiatorNodeNameA;
        pub const AddISNSServer = AddISNSServerA;
        pub const RemoveISNSServer = RemoveISNSServerA;
        pub const RefreshISNSServer = RefreshISNSServerA;
        pub const ReportISNSServerList = ReportISNSServerListA;
        pub const GetIScsiSessionList = GetIScsiSessionListA;
        pub const GetDevicesForIScsiSession = GetDevicesForIScsiSessionA;
        pub const AddPersistentIScsiDevice = AddPersistentIScsiDeviceA;
        pub const RemovePersistentIScsiDevice = RemovePersistentIScsiDeviceA;
        pub const ReportPersistentIScsiDevices = ReportPersistentIScsiDevicesA;
        pub const ReportIScsiTargetPortals = ReportIScsiTargetPortalsA;
        pub const AddRadiusServer = AddRadiusServerA;
        pub const RemoveRadiusServer = RemoveRadiusServerA;
        pub const ReportRadiusServerList = ReportRadiusServerListA;
    },
    .wide => struct {
        pub const ISCSI_TARGET_MAPPING = ISCSI_TARGET_MAPPINGW;
        pub const ISCSI_TARGET_PORTAL = ISCSI_TARGET_PORTALW;
        pub const ISCSI_TARGET_PORTAL_INFO = ISCSI_TARGET_PORTAL_INFOW;
        pub const ISCSI_TARGET_PORTAL_INFO_EX = ISCSI_TARGET_PORTAL_INFO_EXW;
        pub const ISCSI_TARGET_PORTAL_GROUP = ISCSI_TARGET_PORTAL_GROUPW;
        pub const ISCSI_CONNECTION_INFO = ISCSI_CONNECTION_INFOW;
        pub const ISCSI_SESSION_INFO = ISCSI_SESSION_INFOW;
        pub const ISCSI_DEVICE_ON_SESSION = ISCSI_DEVICE_ON_SESSIONW;
        pub const PERSISTENT_ISCSI_LOGIN_INFO = PERSISTENT_ISCSI_LOGIN_INFOW;
        pub const GetIScsiTargetInformation = GetIScsiTargetInformationW;
        pub const AddIScsiConnection = AddIScsiConnectionW;
        pub const ReportIScsiTargets = ReportIScsiTargetsW;
        pub const AddIScsiStaticTarget = AddIScsiStaticTargetW;
        pub const RemoveIScsiStaticTarget = RemoveIScsiStaticTargetW;
        pub const AddIScsiSendTargetPortal = AddIScsiSendTargetPortalW;
        pub const RemoveIScsiSendTargetPortal = RemoveIScsiSendTargetPortalW;
        pub const RefreshIScsiSendTargetPortal = RefreshIScsiSendTargetPortalW;
        pub const ReportIScsiSendTargetPortals = ReportIScsiSendTargetPortalsW;
        pub const ReportIScsiSendTargetPortalsEx = ReportIScsiSendTargetPortalsExW;
        pub const LoginIScsiTarget = LoginIScsiTargetW;
        pub const ReportIScsiPersistentLogins = ReportIScsiPersistentLoginsW;
        pub const RemoveIScsiPersistentTarget = RemoveIScsiPersistentTargetW;
        pub const ReportIScsiInitiatorList = ReportIScsiInitiatorListW;
        pub const ReportActiveIScsiTargetMappings = ReportActiveIScsiTargetMappingsW;
        pub const SetIScsiTunnelModeOuterAddress = SetIScsiTunnelModeOuterAddressW;
        pub const SetIScsiIKEInfo = SetIScsiIKEInfoW;
        pub const GetIScsiIKEInfo = GetIScsiIKEInfoW;
        pub const SetIScsiInitiatorNodeName = SetIScsiInitiatorNodeNameW;
        pub const GetIScsiInitiatorNodeName = GetIScsiInitiatorNodeNameW;
        pub const AddISNSServer = AddISNSServerW;
        pub const RemoveISNSServer = RemoveISNSServerW;
        pub const RefreshISNSServer = RefreshISNSServerW;
        pub const ReportISNSServerList = ReportISNSServerListW;
        pub const GetIScsiSessionList = GetIScsiSessionListW;
        pub const GetDevicesForIScsiSession = GetDevicesForIScsiSessionW;
        pub const AddPersistentIScsiDevice = AddPersistentIScsiDeviceW;
        pub const RemovePersistentIScsiDevice = RemovePersistentIScsiDeviceW;
        pub const ReportPersistentIScsiDevices = ReportPersistentIScsiDevicesW;
        pub const ReportIScsiTargetPortals = ReportIScsiTargetPortalsW;
        pub const AddRadiusServer = AddRadiusServerW;
        pub const RemoveRadiusServer = RemoveRadiusServerW;
        pub const ReportRadiusServerList = ReportRadiusServerListW;
    },
    else => if (@import("builtin").is_test) struct {
        pub const ISCSI_TARGET_MAPPING = *opaque{};
        pub const ISCSI_TARGET_PORTAL = *opaque{};
        pub const ISCSI_TARGET_PORTAL_INFO = *opaque{};
        pub const ISCSI_TARGET_PORTAL_INFO_EX = *opaque{};
        pub const ISCSI_TARGET_PORTAL_GROUP = *opaque{};
        pub const ISCSI_CONNECTION_INFO = *opaque{};
        pub const ISCSI_SESSION_INFO = *opaque{};
        pub const ISCSI_DEVICE_ON_SESSION = *opaque{};
        pub const PERSISTENT_ISCSI_LOGIN_INFO = *opaque{};
        pub const GetIScsiTargetInformation = *opaque{};
        pub const AddIScsiConnection = *opaque{};
        pub const ReportIScsiTargets = *opaque{};
        pub const AddIScsiStaticTarget = *opaque{};
        pub const RemoveIScsiStaticTarget = *opaque{};
        pub const AddIScsiSendTargetPortal = *opaque{};
        pub const RemoveIScsiSendTargetPortal = *opaque{};
        pub const RefreshIScsiSendTargetPortal = *opaque{};
        pub const ReportIScsiSendTargetPortals = *opaque{};
        pub const ReportIScsiSendTargetPortalsEx = *opaque{};
        pub const LoginIScsiTarget = *opaque{};
        pub const ReportIScsiPersistentLogins = *opaque{};
        pub const RemoveIScsiPersistentTarget = *opaque{};
        pub const ReportIScsiInitiatorList = *opaque{};
        pub const ReportActiveIScsiTargetMappings = *opaque{};
        pub const SetIScsiTunnelModeOuterAddress = *opaque{};
        pub const SetIScsiIKEInfo = *opaque{};
        pub const GetIScsiIKEInfo = *opaque{};
        pub const SetIScsiInitiatorNodeName = *opaque{};
        pub const GetIScsiInitiatorNodeName = *opaque{};
        pub const AddISNSServer = *opaque{};
        pub const RemoveISNSServer = *opaque{};
        pub const RefreshISNSServer = *opaque{};
        pub const ReportISNSServerList = *opaque{};
        pub const GetIScsiSessionList = *opaque{};
        pub const GetDevicesForIScsiSession = *opaque{};
        pub const AddPersistentIScsiDevice = *opaque{};
        pub const RemovePersistentIScsiDevice = *opaque{};
        pub const ReportPersistentIScsiDevices = *opaque{};
        pub const ReportIScsiTargetPortals = *opaque{};
        pub const AddRadiusServer = *opaque{};
        pub const RemoveRadiusServer = *opaque{};
        pub const ReportRadiusServerList = *opaque{};
    } else struct {
        pub const ISCSI_TARGET_MAPPING = @compileError("'ISCSI_TARGET_MAPPING' requires that UNICODE be set to true or false in the root module");
        pub const ISCSI_TARGET_PORTAL = @compileError("'ISCSI_TARGET_PORTAL' requires that UNICODE be set to true or false in the root module");
        pub const ISCSI_TARGET_PORTAL_INFO = @compileError("'ISCSI_TARGET_PORTAL_INFO' requires that UNICODE be set to true or false in the root module");
        pub const ISCSI_TARGET_PORTAL_INFO_EX = @compileError("'ISCSI_TARGET_PORTAL_INFO_EX' requires that UNICODE be set to true or false in the root module");
        pub const ISCSI_TARGET_PORTAL_GROUP = @compileError("'ISCSI_TARGET_PORTAL_GROUP' requires that UNICODE be set to true or false in the root module");
        pub const ISCSI_CONNECTION_INFO = @compileError("'ISCSI_CONNECTION_INFO' requires that UNICODE be set to true or false in the root module");
        pub const ISCSI_SESSION_INFO = @compileError("'ISCSI_SESSION_INFO' requires that UNICODE be set to true or false in the root module");
        pub const ISCSI_DEVICE_ON_SESSION = @compileError("'ISCSI_DEVICE_ON_SESSION' requires that UNICODE be set to true or false in the root module");
        pub const PERSISTENT_ISCSI_LOGIN_INFO = @compileError("'PERSISTENT_ISCSI_LOGIN_INFO' requires that UNICODE be set to true or false in the root module");
        pub const GetIScsiTargetInformation = @compileError("'GetIScsiTargetInformation' requires that UNICODE be set to true or false in the root module");
        pub const AddIScsiConnection = @compileError("'AddIScsiConnection' requires that UNICODE be set to true or false in the root module");
        pub const ReportIScsiTargets = @compileError("'ReportIScsiTargets' requires that UNICODE be set to true or false in the root module");
        pub const AddIScsiStaticTarget = @compileError("'AddIScsiStaticTarget' requires that UNICODE be set to true or false in the root module");
        pub const RemoveIScsiStaticTarget = @compileError("'RemoveIScsiStaticTarget' requires that UNICODE be set to true or false in the root module");
        pub const AddIScsiSendTargetPortal = @compileError("'AddIScsiSendTargetPortal' requires that UNICODE be set to true or false in the root module");
        pub const RemoveIScsiSendTargetPortal = @compileError("'RemoveIScsiSendTargetPortal' requires that UNICODE be set to true or false in the root module");
        pub const RefreshIScsiSendTargetPortal = @compileError("'RefreshIScsiSendTargetPortal' requires that UNICODE be set to true or false in the root module");
        pub const ReportIScsiSendTargetPortals = @compileError("'ReportIScsiSendTargetPortals' requires that UNICODE be set to true or false in the root module");
        pub const ReportIScsiSendTargetPortalsEx = @compileError("'ReportIScsiSendTargetPortalsEx' requires that UNICODE be set to true or false in the root module");
        pub const LoginIScsiTarget = @compileError("'LoginIScsiTarget' requires that UNICODE be set to true or false in the root module");
        pub const ReportIScsiPersistentLogins = @compileError("'ReportIScsiPersistentLogins' requires that UNICODE be set to true or false in the root module");
        pub const RemoveIScsiPersistentTarget = @compileError("'RemoveIScsiPersistentTarget' requires that UNICODE be set to true or false in the root module");
        pub const ReportIScsiInitiatorList = @compileError("'ReportIScsiInitiatorList' requires that UNICODE be set to true or false in the root module");
        pub const ReportActiveIScsiTargetMappings = @compileError("'ReportActiveIScsiTargetMappings' requires that UNICODE be set to true or false in the root module");
        pub const SetIScsiTunnelModeOuterAddress = @compileError("'SetIScsiTunnelModeOuterAddress' requires that UNICODE be set to true or false in the root module");
        pub const SetIScsiIKEInfo = @compileError("'SetIScsiIKEInfo' requires that UNICODE be set to true or false in the root module");
        pub const GetIScsiIKEInfo = @compileError("'GetIScsiIKEInfo' requires that UNICODE be set to true or false in the root module");
        pub const SetIScsiInitiatorNodeName = @compileError("'SetIScsiInitiatorNodeName' requires that UNICODE be set to true or false in the root module");
        pub const GetIScsiInitiatorNodeName = @compileError("'GetIScsiInitiatorNodeName' requires that UNICODE be set to true or false in the root module");
        pub const AddISNSServer = @compileError("'AddISNSServer' requires that UNICODE be set to true or false in the root module");
        pub const RemoveISNSServer = @compileError("'RemoveISNSServer' requires that UNICODE be set to true or false in the root module");
        pub const RefreshISNSServer = @compileError("'RefreshISNSServer' requires that UNICODE be set to true or false in the root module");
        pub const ReportISNSServerList = @compileError("'ReportISNSServerList' requires that UNICODE be set to true or false in the root module");
        pub const GetIScsiSessionList = @compileError("'GetIScsiSessionList' requires that UNICODE be set to true or false in the root module");
        pub const GetDevicesForIScsiSession = @compileError("'GetDevicesForIScsiSession' requires that UNICODE be set to true or false in the root module");
        pub const AddPersistentIScsiDevice = @compileError("'AddPersistentIScsiDevice' requires that UNICODE be set to true or false in the root module");
        pub const RemovePersistentIScsiDevice = @compileError("'RemovePersistentIScsiDevice' requires that UNICODE be set to true or false in the root module");
        pub const ReportPersistentIScsiDevices = @compileError("'ReportPersistentIScsiDevices' requires that UNICODE be set to true or false in the root module");
        pub const ReportIScsiTargetPortals = @compileError("'ReportIScsiTargetPortals' requires that UNICODE be set to true or false in the root module");
        pub const AddRadiusServer = @compileError("'AddRadiusServer' requires that UNICODE be set to true or false in the root module");
        pub const RemoveRadiusServer = @compileError("'RemoveRadiusServer' requires that UNICODE be set to true or false in the root module");
        pub const ReportRadiusServerList = @compileError("'ReportRadiusServerList' requires that UNICODE be set to true or false in the root module");
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const LARGE_INTEGER = @import("systemservices.zig").LARGE_INTEGER;
const STORAGE_DEVICE_NUMBER = @import("systemservices.zig").STORAGE_DEVICE_NUMBER;

test "" {
    const constant_export_count = 0;
    const type_export_count = 84;
    const func_count = 79;
    const unicode_alias_count = 42;
    const type_import_count = 3;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
