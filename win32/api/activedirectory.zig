//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: CQFORM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CQFORM = extern struct {
    cbStruct: u32,
    dwFlags: u32,
    clsid: Guid,
    hIcon: HICON,
    pszTitle: ?*u16,
};
// --------------------------------------------------------
// Type: LPCQADDFORMSPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPCQADDFORMSPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPCQADDPAGESPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPCQADDPAGESPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPCQPAGEPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPCQPAGEPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CQPAGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CQPAGE = extern struct {
    cbStruct: u32,
    dwFlags: u32,
    pPageProc: LPCQPAGEPROC,
    hInstance: HINSTANCE,
    idPageName: i32,
    idPageTemplate: i32,
    pDlgProc: DLGPROC,
    lParam: LPARAM,
};
// --------------------------------------------------------
// Type: IQueryForm
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IQueryForm = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'AddForms'
    // TODO: Method 'AddPages'
};
// --------------------------------------------------------
// Type: IPersistQuery
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPersistQuery = *opaque{
    // TODO: Method 'WriteString'
    // TODO: Method 'ReadString'
    // TODO: Method 'WriteInt'
    // TODO: Method 'ReadInt'
    // TODO: Method 'WriteStruct'
    // TODO: Method 'ReadStruct'
    // TODO: Method 'Clear'
};
// --------------------------------------------------------
// Type: OPENQUERYWINDOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OPENQUERYWINDOW = extern struct {
    cbStruct: u32,
    dwFlags: u32,
    clsidHandler: Guid,
    pHandlerParameters: ?*opaque{},
    clsidDefaultForm: Guid,
    pPersistQuery: IPersistQuery,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: ICommonQuery
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICommonQuery = *opaque{
    // TODO: Method 'OpenQueryWindow'
};
// --------------------------------------------------------
// Type: PropertyEntry
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const PropertyEntry = opaque {
};
// --------------------------------------------------------
// Type: PropertyValue
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const PropertyValue = opaque {
};
// --------------------------------------------------------
// Type: AccessControlEntry
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const AccessControlEntry = opaque {
};
// --------------------------------------------------------
// Type: AccessControlList
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const AccessControlList = opaque {
};
// --------------------------------------------------------
// Type: SecurityDescriptor
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SecurityDescriptor = opaque {
};
// --------------------------------------------------------
// Type: LargeInteger
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const LargeInteger = opaque {
};
// --------------------------------------------------------
// Type: NameTranslate
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const NameTranslate = opaque {
};
// --------------------------------------------------------
// Type: CaseIgnoreList
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CaseIgnoreList = opaque {
};
// --------------------------------------------------------
// Type: FaxNumber
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const FaxNumber = opaque {
};
// --------------------------------------------------------
// Type: NetAddress
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const NetAddress = opaque {
};
// --------------------------------------------------------
// Type: OctetList
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const OctetList = opaque {
};
// --------------------------------------------------------
// Type: Email
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const Email = opaque {
};
// --------------------------------------------------------
// Type: Path
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const Path = opaque {
};
// --------------------------------------------------------
// Type: ReplicaPointer
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ReplicaPointer = opaque {
};
// --------------------------------------------------------
// Type: Timestamp
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const Timestamp = opaque {
};
// --------------------------------------------------------
// Type: PostalAddress
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const PostalAddress = opaque {
};
// --------------------------------------------------------
// Type: BackLink
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const BackLink = opaque {
};
// --------------------------------------------------------
// Type: TypedName
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const TypedName = opaque {
};
// --------------------------------------------------------
// Type: Hold
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const Hold = opaque {
};
// --------------------------------------------------------
// Type: Pathname
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const Pathname = opaque {
};
// --------------------------------------------------------
// Type: ADSystemInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ADSystemInfo = opaque {
};
// --------------------------------------------------------
// Type: WinNTSystemInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WinNTSystemInfo = opaque {
};
// --------------------------------------------------------
// Type: DNWithBinary
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DNWithBinary = opaque {
};
// --------------------------------------------------------
// Type: DNWithString
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DNWithString = opaque {
};
// --------------------------------------------------------
// Type: ADsSecurityUtility
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ADsSecurityUtility = opaque {
};
// --------------------------------------------------------
// Type: ADSTYPEENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADSTYPEENUM = *opaque{
};
// --------------------------------------------------------
// Type: ADS_OCTET_STRING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ADS_OCTET_STRING = extern struct {
    dwLength: u32,
    lpValue: ?*u8,
};
// --------------------------------------------------------
// Type: ADS_NT_SECURITY_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ADS_NT_SECURITY_DESCRIPTOR = extern struct {
    dwLength: u32,
    lpValue: ?*u8,
};
// --------------------------------------------------------
// Type: ADS_PROV_SPECIFIC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ADS_PROV_SPECIFIC = extern struct {
    dwLength: u32,
    lpValue: ?*u8,
};
// --------------------------------------------------------
// Type: ADS_CASEIGNORE_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ADS_CASEIGNORE_LIST = extern struct {
    Next: ?*ADS_CASEIGNORE_LIST,
    String: ?*u16,
};
// --------------------------------------------------------
// Type: ADS_OCTET_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ADS_OCTET_LIST = extern struct {
    Next: ?*ADS_OCTET_LIST,
    Length: u32,
    Data: ?*u8,
};
// --------------------------------------------------------
// Type: ADS_PATH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ADS_PATH = extern struct {
    Type: u32,
    VolumeName: ?*u16,
    Path: ?*u16,
};
// --------------------------------------------------------
// Type: ADS_POSTALADDRESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ADS_POSTALADDRESS = extern struct {
    PostalAddress: ?[*]?*u16,
};
// --------------------------------------------------------
// Type: ADS_TIMESTAMP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ADS_TIMESTAMP = extern struct {
    WholeSeconds: u32,
    EventID: u32,
};
// --------------------------------------------------------
// Type: ADS_BACKLINK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ADS_BACKLINK = extern struct {
    RemoteID: u32,
    ObjectName: ?*u16,
};
// --------------------------------------------------------
// Type: ADS_TYPEDNAME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ADS_TYPEDNAME = extern struct {
    ObjectName: ?*u16,
    Level: u32,
    Interval: u32,
};
// --------------------------------------------------------
// Type: ADS_HOLD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ADS_HOLD = extern struct {
    ObjectName: ?*u16,
    Amount: u32,
};
// --------------------------------------------------------
// Type: ADS_NETADDRESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ADS_NETADDRESS = extern struct {
    AddressType: u32,
    AddressLength: u32,
    Address: ?*u8,
};
// --------------------------------------------------------
// Type: ADS_REPLICAPOINTER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ADS_REPLICAPOINTER = extern struct {
    ServerName: ?*u16,
    ReplicaType: u32,
    ReplicaNumber: u32,
    Count: u32,
    ReplicaAddressHints: ?*ADS_NETADDRESS,
};
// --------------------------------------------------------
// Type: ADS_FAXNUMBER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ADS_FAXNUMBER = extern struct {
    TelephoneNumber: ?*u16,
    NumberOfBits: u32,
    Parameters: ?*u8,
};
// --------------------------------------------------------
// Type: ADS_EMAIL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ADS_EMAIL = extern struct {
    Address: ?*u16,
    Type: u32,
};
// --------------------------------------------------------
// Type: ADS_DN_WITH_BINARY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ADS_DN_WITH_BINARY = extern struct {
    dwLength: u32,
    lpBinaryValue: ?*u8,
    pszDNString: ?*u16,
};
// --------------------------------------------------------
// Type: ADS_DN_WITH_STRING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ADS_DN_WITH_STRING = extern struct {
    pszStringValue: ?*u16,
    pszDNString: ?*u16,
};
// --------------------------------------------------------
// Type: ADSVALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ADSVALUE = extern struct {
    dwType: ADSTYPEENUM,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: ADS_ATTR_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ADS_ATTR_INFO = extern struct {
    pszAttrName: ?*u16,
    dwControlCode: u32,
    dwADsType: ADSTYPEENUM,
    pADsValues: ?*ADSVALUE,
    dwNumValues: u32,
};
// --------------------------------------------------------
// Type: ADS_AUTHENTICATION_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADS_AUTHENTICATION_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: ADS_OBJECT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ADS_OBJECT_INFO = extern struct {
    pszRDN: ?*u16,
    pszObjectDN: ?*u16,
    pszParentDN: ?*u16,
    pszSchemaDN: ?*u16,
    pszClassName: ?*u16,
};
// --------------------------------------------------------
// Type: ADS_STATUSENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADS_STATUSENUM = *opaque{
};
// --------------------------------------------------------
// Type: ADS_DEREFENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADS_DEREFENUM = *opaque{
};
// --------------------------------------------------------
// Type: ADS_SCOPEENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADS_SCOPEENUM = *opaque{
};
// --------------------------------------------------------
// Type: ADS_PREFERENCES_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADS_PREFERENCES_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: ADSI_DIALECT_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADSI_DIALECT_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: ADS_CHASE_REFERRALS_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADS_CHASE_REFERRALS_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: ADS_SEARCHPREF_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADS_SEARCHPREF_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: ADS_PASSWORD_ENCODING_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADS_PASSWORD_ENCODING_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: ads_searchpref_info
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ads_searchpref_info = extern struct {
    dwSearchPref: ADS_SEARCHPREF_ENUM,
    vValue: ADSVALUE,
    dwStatus: ADS_STATUSENUM,
};
// --------------------------------------------------------
// Type: ads_search_column
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ads_search_column = extern struct {
    pszAttrName: ?*u16,
    dwADsType: ADSTYPEENUM,
    pADsValues: ?*ADSVALUE,
    dwNumValues: u32,
    hReserved: HANDLE,
};
// --------------------------------------------------------
// Type: ADS_ATTR_DEF
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ADS_ATTR_DEF = extern struct {
    pszAttrName: ?*u16,
    dwADsType: ADSTYPEENUM,
    dwMinRange: u32,
    dwMaxRange: u32,
    fMultiValued: BOOL,
};
// --------------------------------------------------------
// Type: ADS_CLASS_DEF
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ADS_CLASS_DEF = extern struct {
    pszClassName: ?*u16,
    dwMandatoryAttrs: u32,
    ppszMandatoryAttrs: ?*?*u16,
    optionalAttrs: u32,
    ppszOptionalAttrs: ?*?*?*u16,
    dwNamingAttrs: u32,
    ppszNamingAttrs: ?*?*?*u16,
    dwSuperClasses: u32,
    ppszSuperClasses: ?*?*?*u16,
    fIsContainer: BOOL,
};
// --------------------------------------------------------
// Type: ADS_SORTKEY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ADS_SORTKEY = extern struct {
    pszAttrType: ?*u16,
    pszReserved: ?*u16,
    fReverseorder: u8,
};
// --------------------------------------------------------
// Type: ADS_VLV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ADS_VLV = extern struct {
    dwBeforeCount: u32,
    dwAfterCount: u32,
    dwOffset: u32,
    dwContentCount: u32,
    pszTarget: ?*u16,
    dwContextIDLength: u32,
    lpContextID: ?*u8,
};
// --------------------------------------------------------
// Type: ADS_PROPERTY_OPERATION_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADS_PROPERTY_OPERATION_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: ADS_SYSTEMFLAG_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADS_SYSTEMFLAG_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: ADS_GROUP_TYPE_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADS_GROUP_TYPE_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: ADS_USER_FLAG_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADS_USER_FLAG_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: ADS_RIGHTS_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADS_RIGHTS_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: ADS_ACETYPE_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADS_ACETYPE_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: ADS_ACEFLAG_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADS_ACEFLAG_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: ADS_FLAGTYPE_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADS_FLAGTYPE_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: ADS_SD_CONTROL_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADS_SD_CONTROL_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: ADS_SD_REVISION_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADS_SD_REVISION_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: ADS_NAME_TYPE_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADS_NAME_TYPE_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: ADS_NAME_INITTYPE_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADS_NAME_INITTYPE_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: ADS_OPTION_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADS_OPTION_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: ADS_SECURITY_INFO_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADS_SECURITY_INFO_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: ADS_SETTYPE_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADS_SETTYPE_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: ADS_FORMAT_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADS_FORMAT_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: ADS_DISPLAY_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADS_DISPLAY_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: ADS_ESCAPE_MODE_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADS_ESCAPE_MODE_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: ADS_PATHTYPE_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADS_PATHTYPE_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: ADS_SD_FORMAT_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADS_SD_FORMAT_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: IADs
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADs = *opaque{
    // TODO: Method 'get_Name'
    // TODO: Method 'get_Class'
    // TODO: Method 'get_GUID'
    // TODO: Method 'get_ADsPath'
    // TODO: Method 'get_Parent'
    // TODO: Method 'get_Schema'
    // TODO: Method 'GetInfo'
    // TODO: Method 'SetInfo'
    // TODO: Method 'Get'
    // TODO: Method 'Put'
    // TODO: Method 'GetEx'
    // TODO: Method 'PutEx'
    // TODO: Method 'GetInfoEx'
};
// --------------------------------------------------------
// Type: IADsContainer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsContainer = *opaque{
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'get_Filter'
    // TODO: Method 'put_Filter'
    // TODO: Method 'get_Hints'
    // TODO: Method 'put_Hints'
    // TODO: Method 'GetObjectA'
    // TODO: Method 'Create'
    // TODO: Method 'Delete'
    // TODO: Method 'CopyHere'
    // TODO: Method 'MoveHere'
};
// --------------------------------------------------------
// Type: IADsCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsCollection = *opaque{
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'GetObjectA'
};
// --------------------------------------------------------
// Type: IADsMembers
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsMembers = *opaque{
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'get_Filter'
    // TODO: Method 'put_Filter'
};
// --------------------------------------------------------
// Type: IADsPropertyList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsPropertyList = *opaque{
    // TODO: Method 'get_PropertyCount'
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Item'
    // TODO: Method 'GetPropertyItem'
    // TODO: Method 'PutPropertyItem'
    // TODO: Method 'ResetPropertyItem'
    // TODO: Method 'PurgePropertyList'
};
// --------------------------------------------------------
// Type: IADsPropertyEntry
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsPropertyEntry = *opaque{
    // TODO: Method 'Clear'
    // TODO: Method 'get_Name'
    // TODO: Method 'put_Name'
    // TODO: Method 'get_ADsType'
    // TODO: Method 'put_ADsType'
    // TODO: Method 'get_ControlCode'
    // TODO: Method 'put_ControlCode'
    // TODO: Method 'get_Values'
    // TODO: Method 'put_Values'
};
// --------------------------------------------------------
// Type: IADsPropertyValue
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsPropertyValue = *opaque{
    // TODO: Method 'Clear'
    // TODO: Method 'get_ADsType'
    // TODO: Method 'put_ADsType'
    // TODO: Method 'get_DNString'
    // TODO: Method 'put_DNString'
    // TODO: Method 'get_CaseExactString'
    // TODO: Method 'put_CaseExactString'
    // TODO: Method 'get_CaseIgnoreString'
    // TODO: Method 'put_CaseIgnoreString'
    // TODO: Method 'get_PrintableString'
    // TODO: Method 'put_PrintableString'
    // TODO: Method 'get_NumericString'
    // TODO: Method 'put_NumericString'
    // TODO: Method 'get_Boolean'
    // TODO: Method 'put_Boolean'
    // TODO: Method 'get_Integer'
    // TODO: Method 'put_Integer'
    // TODO: Method 'get_OctetString'
    // TODO: Method 'put_OctetString'
    // TODO: Method 'get_SecurityDescriptor'
    // TODO: Method 'put_SecurityDescriptor'
    // TODO: Method 'get_LargeInteger'
    // TODO: Method 'put_LargeInteger'
    // TODO: Method 'get_UTCTime'
    // TODO: Method 'put_UTCTime'
};
// --------------------------------------------------------
// Type: IADsPropertyValue2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsPropertyValue2 = *opaque{
    // TODO: Method 'GetObjectProperty'
    // TODO: Method 'PutObjectProperty'
};
// --------------------------------------------------------
// Type: IPrivateDispatch
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPrivateDispatch = *opaque{
    // TODO: Method 'ADSIInitializeDispatchManager'
    // TODO: Method 'ADSIGetTypeInfoCount'
    // TODO: Method 'ADSIGetTypeInfo'
    // TODO: Method 'ADSIGetIDsOfNames'
    // TODO: Method 'ADSIInvoke'
};
// --------------------------------------------------------
// Type: IPrivateUnknown
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPrivateUnknown = *opaque{
    // TODO: Method 'ADSIInitializeObject'
    // TODO: Method 'ADSIReleaseObject'
};
// --------------------------------------------------------
// Type: IADsExtension
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsExtension = *opaque{
    // TODO: Method 'Operate'
    // TODO: Method 'PrivateGetIDsOfNames'
    // TODO: Method 'PrivateInvoke'
};
// --------------------------------------------------------
// Type: IADsDeleteOps
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsDeleteOps = *opaque{
    // TODO: Method 'DeleteObject'
};
// --------------------------------------------------------
// Type: IADsNamespaces
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsNamespaces = *opaque{
    // TODO: Method 'get_DefaultContainer'
    // TODO: Method 'put_DefaultContainer'
};
// --------------------------------------------------------
// Type: IADsClass
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsClass = *opaque{
    // TODO: Method 'get_PrimaryInterface'
    // TODO: Method 'get_CLSID'
    // TODO: Method 'put_CLSID'
    // TODO: Method 'get_OID'
    // TODO: Method 'put_OID'
    // TODO: Method 'get_Abstract'
    // TODO: Method 'put_Abstract'
    // TODO: Method 'get_Auxiliary'
    // TODO: Method 'put_Auxiliary'
    // TODO: Method 'get_MandatoryProperties'
    // TODO: Method 'put_MandatoryProperties'
    // TODO: Method 'get_OptionalProperties'
    // TODO: Method 'put_OptionalProperties'
    // TODO: Method 'get_NamingProperties'
    // TODO: Method 'put_NamingProperties'
    // TODO: Method 'get_DerivedFrom'
    // TODO: Method 'put_DerivedFrom'
    // TODO: Method 'get_AuxDerivedFrom'
    // TODO: Method 'put_AuxDerivedFrom'
    // TODO: Method 'get_PossibleSuperiors'
    // TODO: Method 'put_PossibleSuperiors'
    // TODO: Method 'get_Containment'
    // TODO: Method 'put_Containment'
    // TODO: Method 'get_Container'
    // TODO: Method 'put_Container'
    // TODO: Method 'get_HelpFileName'
    // TODO: Method 'put_HelpFileName'
    // TODO: Method 'get_HelpFileContext'
    // TODO: Method 'put_HelpFileContext'
    // TODO: Method 'Qualifiers'
};
// --------------------------------------------------------
// Type: IADsProperty
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsProperty = *opaque{
    // TODO: Method 'get_OID'
    // TODO: Method 'put_OID'
    // TODO: Method 'get_Syntax'
    // TODO: Method 'put_Syntax'
    // TODO: Method 'get_MaxRange'
    // TODO: Method 'put_MaxRange'
    // TODO: Method 'get_MinRange'
    // TODO: Method 'put_MinRange'
    // TODO: Method 'get_MultiValued'
    // TODO: Method 'put_MultiValued'
    // TODO: Method 'Qualifiers'
};
// --------------------------------------------------------
// Type: IADsSyntax
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsSyntax = *opaque{
    // TODO: Method 'get_OleAutoDataType'
    // TODO: Method 'put_OleAutoDataType'
};
// --------------------------------------------------------
// Type: IADsLocality
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsLocality = *opaque{
    // TODO: Method 'get_Description'
    // TODO: Method 'put_Description'
    // TODO: Method 'get_LocalityName'
    // TODO: Method 'put_LocalityName'
    // TODO: Method 'get_PostalAddress'
    // TODO: Method 'put_PostalAddress'
    // TODO: Method 'get_SeeAlso'
    // TODO: Method 'put_SeeAlso'
};
// --------------------------------------------------------
// Type: IADsO
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsO = *opaque{
    // TODO: Method 'get_Description'
    // TODO: Method 'put_Description'
    // TODO: Method 'get_LocalityName'
    // TODO: Method 'put_LocalityName'
    // TODO: Method 'get_PostalAddress'
    // TODO: Method 'put_PostalAddress'
    // TODO: Method 'get_TelephoneNumber'
    // TODO: Method 'put_TelephoneNumber'
    // TODO: Method 'get_FaxNumber'
    // TODO: Method 'put_FaxNumber'
    // TODO: Method 'get_SeeAlso'
    // TODO: Method 'put_SeeAlso'
};
// --------------------------------------------------------
// Type: IADsOU
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsOU = *opaque{
    // TODO: Method 'get_Description'
    // TODO: Method 'put_Description'
    // TODO: Method 'get_LocalityName'
    // TODO: Method 'put_LocalityName'
    // TODO: Method 'get_PostalAddress'
    // TODO: Method 'put_PostalAddress'
    // TODO: Method 'get_TelephoneNumber'
    // TODO: Method 'put_TelephoneNumber'
    // TODO: Method 'get_FaxNumber'
    // TODO: Method 'put_FaxNumber'
    // TODO: Method 'get_SeeAlso'
    // TODO: Method 'put_SeeAlso'
    // TODO: Method 'get_BusinessCategory'
    // TODO: Method 'put_BusinessCategory'
};
// --------------------------------------------------------
// Type: IADsDomain
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsDomain = *opaque{
    // TODO: Method 'get_IsWorkgroup'
    // TODO: Method 'get_MinPasswordLength'
    // TODO: Method 'put_MinPasswordLength'
    // TODO: Method 'get_MinPasswordAge'
    // TODO: Method 'put_MinPasswordAge'
    // TODO: Method 'get_MaxPasswordAge'
    // TODO: Method 'put_MaxPasswordAge'
    // TODO: Method 'get_MaxBadPasswordsAllowed'
    // TODO: Method 'put_MaxBadPasswordsAllowed'
    // TODO: Method 'get_PasswordHistoryLength'
    // TODO: Method 'put_PasswordHistoryLength'
    // TODO: Method 'get_PasswordAttributes'
    // TODO: Method 'put_PasswordAttributes'
    // TODO: Method 'get_AutoUnlockInterval'
    // TODO: Method 'put_AutoUnlockInterval'
    // TODO: Method 'get_LockoutObservationInterval'
    // TODO: Method 'put_LockoutObservationInterval'
};
// --------------------------------------------------------
// Type: IADsComputer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsComputer = *opaque{
    // TODO: Method 'get_ComputerID'
    // TODO: Method 'get_Site'
    // TODO: Method 'get_Description'
    // TODO: Method 'put_Description'
    // TODO: Method 'get_Location'
    // TODO: Method 'put_Location'
    // TODO: Method 'get_PrimaryUser'
    // TODO: Method 'put_PrimaryUser'
    // TODO: Method 'get_Owner'
    // TODO: Method 'put_Owner'
    // TODO: Method 'get_Division'
    // TODO: Method 'put_Division'
    // TODO: Method 'get_Department'
    // TODO: Method 'put_Department'
    // TODO: Method 'get_Role'
    // TODO: Method 'put_Role'
    // TODO: Method 'get_OperatingSystem'
    // TODO: Method 'put_OperatingSystem'
    // TODO: Method 'get_OperatingSystemVersion'
    // TODO: Method 'put_OperatingSystemVersion'
    // TODO: Method 'get_Model'
    // TODO: Method 'put_Model'
    // TODO: Method 'get_Processor'
    // TODO: Method 'put_Processor'
    // TODO: Method 'get_ProcessorCount'
    // TODO: Method 'put_ProcessorCount'
    // TODO: Method 'get_MemorySize'
    // TODO: Method 'put_MemorySize'
    // TODO: Method 'get_StorageCapacity'
    // TODO: Method 'put_StorageCapacity'
    // TODO: Method 'get_NetAddresses'
    // TODO: Method 'put_NetAddresses'
};
// --------------------------------------------------------
// Type: IADsComputerOperations
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsComputerOperations = *opaque{
    // TODO: Method 'Status'
    // TODO: Method 'Shutdown'
};
// --------------------------------------------------------
// Type: IADsGroup
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsGroup = *opaque{
    // TODO: Method 'get_Description'
    // TODO: Method 'put_Description'
    // TODO: Method 'Members'
    // TODO: Method 'IsMember'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
};
// --------------------------------------------------------
// Type: IADsUser
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsUser = *opaque{
    // TODO: Method 'get_BadLoginAddress'
    // TODO: Method 'get_BadLoginCount'
    // TODO: Method 'get_LastLogin'
    // TODO: Method 'get_LastLogoff'
    // TODO: Method 'get_LastFailedLogin'
    // TODO: Method 'get_PasswordLastChanged'
    // TODO: Method 'get_Description'
    // TODO: Method 'put_Description'
    // TODO: Method 'get_Division'
    // TODO: Method 'put_Division'
    // TODO: Method 'get_Department'
    // TODO: Method 'put_Department'
    // TODO: Method 'get_EmployeeID'
    // TODO: Method 'put_EmployeeID'
    // TODO: Method 'get_FullName'
    // TODO: Method 'put_FullName'
    // TODO: Method 'get_FirstName'
    // TODO: Method 'put_FirstName'
    // TODO: Method 'get_LastName'
    // TODO: Method 'put_LastName'
    // TODO: Method 'get_OtherName'
    // TODO: Method 'put_OtherName'
    // TODO: Method 'get_NamePrefix'
    // TODO: Method 'put_NamePrefix'
    // TODO: Method 'get_NameSuffix'
    // TODO: Method 'put_NameSuffix'
    // TODO: Method 'get_Title'
    // TODO: Method 'put_Title'
    // TODO: Method 'get_Manager'
    // TODO: Method 'put_Manager'
    // TODO: Method 'get_TelephoneHome'
    // TODO: Method 'put_TelephoneHome'
    // TODO: Method 'get_TelephoneMobile'
    // TODO: Method 'put_TelephoneMobile'
    // TODO: Method 'get_TelephoneNumber'
    // TODO: Method 'put_TelephoneNumber'
    // TODO: Method 'get_TelephonePager'
    // TODO: Method 'put_TelephonePager'
    // TODO: Method 'get_FaxNumber'
    // TODO: Method 'put_FaxNumber'
    // TODO: Method 'get_OfficeLocations'
    // TODO: Method 'put_OfficeLocations'
    // TODO: Method 'get_PostalAddresses'
    // TODO: Method 'put_PostalAddresses'
    // TODO: Method 'get_PostalCodes'
    // TODO: Method 'put_PostalCodes'
    // TODO: Method 'get_SeeAlso'
    // TODO: Method 'put_SeeAlso'
    // TODO: Method 'get_AccountDisabled'
    // TODO: Method 'put_AccountDisabled'
    // TODO: Method 'get_AccountExpirationDate'
    // TODO: Method 'put_AccountExpirationDate'
    // TODO: Method 'get_GraceLoginsAllowed'
    // TODO: Method 'put_GraceLoginsAllowed'
    // TODO: Method 'get_GraceLoginsRemaining'
    // TODO: Method 'put_GraceLoginsRemaining'
    // TODO: Method 'get_IsAccountLocked'
    // TODO: Method 'put_IsAccountLocked'
    // TODO: Method 'get_LoginHours'
    // TODO: Method 'put_LoginHours'
    // TODO: Method 'get_LoginWorkstations'
    // TODO: Method 'put_LoginWorkstations'
    // TODO: Method 'get_MaxLogins'
    // TODO: Method 'put_MaxLogins'
    // TODO: Method 'get_MaxStorage'
    // TODO: Method 'put_MaxStorage'
    // TODO: Method 'get_PasswordExpirationDate'
    // TODO: Method 'put_PasswordExpirationDate'
    // TODO: Method 'get_PasswordMinimumLength'
    // TODO: Method 'put_PasswordMinimumLength'
    // TODO: Method 'get_PasswordRequired'
    // TODO: Method 'put_PasswordRequired'
    // TODO: Method 'get_RequireUniquePassword'
    // TODO: Method 'put_RequireUniquePassword'
    // TODO: Method 'get_EmailAddress'
    // TODO: Method 'put_EmailAddress'
    // TODO: Method 'get_HomeDirectory'
    // TODO: Method 'put_HomeDirectory'
    // TODO: Method 'get_Languages'
    // TODO: Method 'put_Languages'
    // TODO: Method 'get_Profile'
    // TODO: Method 'put_Profile'
    // TODO: Method 'get_LoginScript'
    // TODO: Method 'put_LoginScript'
    // TODO: Method 'get_Picture'
    // TODO: Method 'put_Picture'
    // TODO: Method 'get_HomePage'
    // TODO: Method 'put_HomePage'
    // TODO: Method 'Groups'
    // TODO: Method 'SetPassword'
    // TODO: Method 'ChangePassword'
};
// --------------------------------------------------------
// Type: IADsPrintQueue
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsPrintQueue = *opaque{
    // TODO: Method 'get_PrinterPath'
    // TODO: Method 'put_PrinterPath'
    // TODO: Method 'get_Model'
    // TODO: Method 'put_Model'
    // TODO: Method 'get_Datatype'
    // TODO: Method 'put_Datatype'
    // TODO: Method 'get_PrintProcessor'
    // TODO: Method 'put_PrintProcessor'
    // TODO: Method 'get_Description'
    // TODO: Method 'put_Description'
    // TODO: Method 'get_Location'
    // TODO: Method 'put_Location'
    // TODO: Method 'get_StartTime'
    // TODO: Method 'put_StartTime'
    // TODO: Method 'get_UntilTime'
    // TODO: Method 'put_UntilTime'
    // TODO: Method 'get_DefaultJobPriority'
    // TODO: Method 'put_DefaultJobPriority'
    // TODO: Method 'get_Priority'
    // TODO: Method 'put_Priority'
    // TODO: Method 'get_BannerPage'
    // TODO: Method 'put_BannerPage'
    // TODO: Method 'get_PrintDevices'
    // TODO: Method 'put_PrintDevices'
    // TODO: Method 'get_NetAddresses'
    // TODO: Method 'put_NetAddresses'
};
// --------------------------------------------------------
// Type: IADsPrintQueueOperations
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsPrintQueueOperations = *opaque{
    // TODO: Method 'get_Status'
    // TODO: Method 'PrintJobs'
    // TODO: Method 'Pause'
    // TODO: Method 'Resume'
    // TODO: Method 'Purge'
};
// --------------------------------------------------------
// Type: IADsPrintJob
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsPrintJob = *opaque{
    // TODO: Method 'get_HostPrintQueue'
    // TODO: Method 'get_User'
    // TODO: Method 'get_UserPath'
    // TODO: Method 'get_TimeSubmitted'
    // TODO: Method 'get_TotalPages'
    // TODO: Method 'get_Size'
    // TODO: Method 'get_Description'
    // TODO: Method 'put_Description'
    // TODO: Method 'get_Priority'
    // TODO: Method 'put_Priority'
    // TODO: Method 'get_StartTime'
    // TODO: Method 'put_StartTime'
    // TODO: Method 'get_UntilTime'
    // TODO: Method 'put_UntilTime'
    // TODO: Method 'get_Notify'
    // TODO: Method 'put_Notify'
    // TODO: Method 'get_NotifyPath'
    // TODO: Method 'put_NotifyPath'
};
// --------------------------------------------------------
// Type: IADsPrintJobOperations
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsPrintJobOperations = *opaque{
    // TODO: Method 'get_Status'
    // TODO: Method 'get_TimeElapsed'
    // TODO: Method 'get_PagesPrinted'
    // TODO: Method 'get_Position'
    // TODO: Method 'put_Position'
    // TODO: Method 'Pause'
    // TODO: Method 'Resume'
};
// --------------------------------------------------------
// Type: IADsService
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsService = *opaque{
    // TODO: Method 'get_HostComputer'
    // TODO: Method 'put_HostComputer'
    // TODO: Method 'get_DisplayName'
    // TODO: Method 'put_DisplayName'
    // TODO: Method 'get_Version'
    // TODO: Method 'put_Version'
    // TODO: Method 'get_ServiceType'
    // TODO: Method 'put_ServiceType'
    // TODO: Method 'get_StartType'
    // TODO: Method 'put_StartType'
    // TODO: Method 'get_Path'
    // TODO: Method 'put_Path'
    // TODO: Method 'get_StartupParameters'
    // TODO: Method 'put_StartupParameters'
    // TODO: Method 'get_ErrorControl'
    // TODO: Method 'put_ErrorControl'
    // TODO: Method 'get_LoadOrderGroup'
    // TODO: Method 'put_LoadOrderGroup'
    // TODO: Method 'get_ServiceAccountName'
    // TODO: Method 'put_ServiceAccountName'
    // TODO: Method 'get_ServiceAccountPath'
    // TODO: Method 'put_ServiceAccountPath'
    // TODO: Method 'get_Dependencies'
    // TODO: Method 'put_Dependencies'
};
// --------------------------------------------------------
// Type: IADsServiceOperations
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsServiceOperations = *opaque{
    // TODO: Method 'get_Status'
    // TODO: Method 'Start'
    // TODO: Method 'Stop'
    // TODO: Method 'Pause'
    // TODO: Method 'Continue'
    // TODO: Method 'SetPassword'
};
// --------------------------------------------------------
// Type: IADsFileService
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsFileService = *opaque{
    // TODO: Method 'get_Description'
    // TODO: Method 'put_Description'
    // TODO: Method 'get_MaxUserCount'
    // TODO: Method 'put_MaxUserCount'
};
// --------------------------------------------------------
// Type: IADsFileServiceOperations
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsFileServiceOperations = *opaque{
    // TODO: Method 'Sessions'
    // TODO: Method 'Resources'
};
// --------------------------------------------------------
// Type: IADsFileShare
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsFileShare = *opaque{
    // TODO: Method 'get_CurrentUserCount'
    // TODO: Method 'get_Description'
    // TODO: Method 'put_Description'
    // TODO: Method 'get_HostComputer'
    // TODO: Method 'put_HostComputer'
    // TODO: Method 'get_Path'
    // TODO: Method 'put_Path'
    // TODO: Method 'get_MaxUserCount'
    // TODO: Method 'put_MaxUserCount'
};
// --------------------------------------------------------
// Type: IADsSession
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsSession = *opaque{
    // TODO: Method 'get_User'
    // TODO: Method 'get_UserPath'
    // TODO: Method 'get_Computer'
    // TODO: Method 'get_ComputerPath'
    // TODO: Method 'get_ConnectTime'
    // TODO: Method 'get_IdleTime'
};
// --------------------------------------------------------
// Type: IADsResource
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsResource = *opaque{
    // TODO: Method 'get_User'
    // TODO: Method 'get_UserPath'
    // TODO: Method 'get_Path'
    // TODO: Method 'get_LockCount'
};
// --------------------------------------------------------
// Type: IADsOpenDSObject
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsOpenDSObject = *opaque{
    // TODO: Method 'OpenDSObject'
};
// --------------------------------------------------------
// Type: IDirectoryObject
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectoryObject = *opaque{
    // TODO: Method 'GetObjectInformation'
    // TODO: Method 'GetObjectAttributes'
    // TODO: Method 'SetObjectAttributes'
    // TODO: Method 'CreateDSObject'
    // TODO: Method 'DeleteDSObject'
};
// --------------------------------------------------------
// Type: IDirectorySearch
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectorySearch = *opaque{
    // TODO: Method 'SetSearchPreference'
    // TODO: Method 'ExecuteSearch'
    // TODO: Method 'AbandonSearch'
    // TODO: Method 'GetFirstRow'
    // TODO: Method 'GetNextRow'
    // TODO: Method 'GetPreviousRow'
    // TODO: Method 'GetNextColumnName'
    // TODO: Method 'GetColumn'
    // TODO: Method 'FreeColumn'
    // TODO: Method 'CloseSearchHandle'
};
// --------------------------------------------------------
// Type: IDirectorySchemaMgmt
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectorySchemaMgmt = *opaque{
    // TODO: Method 'EnumAttributes'
    // TODO: Method 'CreateAttributeDefinition'
    // TODO: Method 'WriteAttributeDefinition'
    // TODO: Method 'DeleteAttributeDefinition'
    // TODO: Method 'EnumClasses'
    // TODO: Method 'WriteClassDefinition'
    // TODO: Method 'CreateClassDefinition'
    // TODO: Method 'DeleteClassDefinition'
};
// --------------------------------------------------------
// Type: IADsAggregatee
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsAggregatee = *opaque{
    // TODO: Method 'ConnectAsAggregatee'
    // TODO: Method 'DisconnectAsAggregatee'
    // TODO: Method 'RelinquishInterface'
    // TODO: Method 'RestoreInterface'
};
// --------------------------------------------------------
// Type: IADsAggregator
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsAggregator = *opaque{
    // TODO: Method 'ConnectAsAggregator'
    // TODO: Method 'DisconnectAsAggregator'
};
// --------------------------------------------------------
// Type: IADsAccessControlEntry
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsAccessControlEntry = *opaque{
    // TODO: Method 'get_AccessMask'
    // TODO: Method 'put_AccessMask'
    // TODO: Method 'get_AceType'
    // TODO: Method 'put_AceType'
    // TODO: Method 'get_AceFlags'
    // TODO: Method 'put_AceFlags'
    // TODO: Method 'get_Flags'
    // TODO: Method 'put_Flags'
    // TODO: Method 'get_ObjectType'
    // TODO: Method 'put_ObjectType'
    // TODO: Method 'get_InheritedObjectType'
    // TODO: Method 'put_InheritedObjectType'
    // TODO: Method 'get_Trustee'
    // TODO: Method 'put_Trustee'
};
// --------------------------------------------------------
// Type: IADsAccessControlList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsAccessControlList = *opaque{
    // TODO: Method 'get_AclRevision'
    // TODO: Method 'put_AclRevision'
    // TODO: Method 'get_AceCount'
    // TODO: Method 'put_AceCount'
    // TODO: Method 'AddAce'
    // TODO: Method 'RemoveAce'
    // TODO: Method 'CopyAccessList'
    // TODO: Method 'get__NewEnum'
};
// --------------------------------------------------------
// Type: IADsSecurityDescriptor
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsSecurityDescriptor = *opaque{
    // TODO: Method 'get_Revision'
    // TODO: Method 'put_Revision'
    // TODO: Method 'get_Control'
    // TODO: Method 'put_Control'
    // TODO: Method 'get_Owner'
    // TODO: Method 'put_Owner'
    // TODO: Method 'get_OwnerDefaulted'
    // TODO: Method 'put_OwnerDefaulted'
    // TODO: Method 'get_Group'
    // TODO: Method 'put_Group'
    // TODO: Method 'get_GroupDefaulted'
    // TODO: Method 'put_GroupDefaulted'
    // TODO: Method 'get_DiscretionaryAcl'
    // TODO: Method 'put_DiscretionaryAcl'
    // TODO: Method 'get_DaclDefaulted'
    // TODO: Method 'put_DaclDefaulted'
    // TODO: Method 'get_SystemAcl'
    // TODO: Method 'put_SystemAcl'
    // TODO: Method 'get_SaclDefaulted'
    // TODO: Method 'put_SaclDefaulted'
    // TODO: Method 'CopySecurityDescriptor'
};
// --------------------------------------------------------
// Type: IADsLargeInteger
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsLargeInteger = *opaque{
    // TODO: Method 'get_HighPart'
    // TODO: Method 'put_HighPart'
    // TODO: Method 'get_LowPart'
    // TODO: Method 'put_LowPart'
};
// --------------------------------------------------------
// Type: IADsNameTranslate
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsNameTranslate = *opaque{
    // TODO: Method 'put_ChaseReferral'
    // TODO: Method 'Init'
    // TODO: Method 'InitEx'
    // TODO: Method 'Set'
    // TODO: Method 'Get'
    // TODO: Method 'SetEx'
    // TODO: Method 'GetEx'
};
// --------------------------------------------------------
// Type: IADsCaseIgnoreList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsCaseIgnoreList = *opaque{
    // TODO: Method 'get_CaseIgnoreList'
    // TODO: Method 'put_CaseIgnoreList'
};
// --------------------------------------------------------
// Type: IADsFaxNumber
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsFaxNumber = *opaque{
    // TODO: Method 'get_TelephoneNumber'
    // TODO: Method 'put_TelephoneNumber'
    // TODO: Method 'get_Parameters'
    // TODO: Method 'put_Parameters'
};
// --------------------------------------------------------
// Type: IADsNetAddress
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsNetAddress = *opaque{
    // TODO: Method 'get_AddressType'
    // TODO: Method 'put_AddressType'
    // TODO: Method 'get_Address'
    // TODO: Method 'put_Address'
};
// --------------------------------------------------------
// Type: IADsOctetList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsOctetList = *opaque{
    // TODO: Method 'get_OctetList'
    // TODO: Method 'put_OctetList'
};
// --------------------------------------------------------
// Type: IADsEmail
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsEmail = *opaque{
    // TODO: Method 'get_Type'
    // TODO: Method 'put_Type'
    // TODO: Method 'get_Address'
    // TODO: Method 'put_Address'
};
// --------------------------------------------------------
// Type: IADsPath
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsPath = *opaque{
    // TODO: Method 'get_Type'
    // TODO: Method 'put_Type'
    // TODO: Method 'get_VolumeName'
    // TODO: Method 'put_VolumeName'
    // TODO: Method 'get_Path'
    // TODO: Method 'put_Path'
};
// --------------------------------------------------------
// Type: IADsReplicaPointer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsReplicaPointer = *opaque{
    // TODO: Method 'get_ServerName'
    // TODO: Method 'put_ServerName'
    // TODO: Method 'get_ReplicaType'
    // TODO: Method 'put_ReplicaType'
    // TODO: Method 'get_ReplicaNumber'
    // TODO: Method 'put_ReplicaNumber'
    // TODO: Method 'get_Count'
    // TODO: Method 'put_Count'
    // TODO: Method 'get_ReplicaAddressHints'
    // TODO: Method 'put_ReplicaAddressHints'
};
// --------------------------------------------------------
// Type: IADsAcl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsAcl = *opaque{
    // TODO: Method 'get_ProtectedAttrName'
    // TODO: Method 'put_ProtectedAttrName'
    // TODO: Method 'get_SubjectName'
    // TODO: Method 'put_SubjectName'
    // TODO: Method 'get_Privileges'
    // TODO: Method 'put_Privileges'
    // TODO: Method 'CopyAcl'
};
// --------------------------------------------------------
// Type: IADsTimestamp
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsTimestamp = *opaque{
    // TODO: Method 'get_WholeSeconds'
    // TODO: Method 'put_WholeSeconds'
    // TODO: Method 'get_EventID'
    // TODO: Method 'put_EventID'
};
// --------------------------------------------------------
// Type: IADsPostalAddress
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsPostalAddress = *opaque{
    // TODO: Method 'get_PostalAddress'
    // TODO: Method 'put_PostalAddress'
};
// --------------------------------------------------------
// Type: IADsBackLink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsBackLink = *opaque{
    // TODO: Method 'get_RemoteID'
    // TODO: Method 'put_RemoteID'
    // TODO: Method 'get_ObjectName'
    // TODO: Method 'put_ObjectName'
};
// --------------------------------------------------------
// Type: IADsTypedName
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsTypedName = *opaque{
    // TODO: Method 'get_ObjectName'
    // TODO: Method 'put_ObjectName'
    // TODO: Method 'get_Level'
    // TODO: Method 'put_Level'
    // TODO: Method 'get_Interval'
    // TODO: Method 'put_Interval'
};
// --------------------------------------------------------
// Type: IADsHold
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsHold = *opaque{
    // TODO: Method 'get_ObjectName'
    // TODO: Method 'put_ObjectName'
    // TODO: Method 'get_Amount'
    // TODO: Method 'put_Amount'
};
// --------------------------------------------------------
// Type: IADsObjectOptions
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsObjectOptions = *opaque{
    // TODO: Method 'GetOption'
    // TODO: Method 'SetOption'
};
// --------------------------------------------------------
// Type: IADsPathname
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsPathname = *opaque{
    // TODO: Method 'Set'
    // TODO: Method 'SetDisplayType'
    // TODO: Method 'Retrieve'
    // TODO: Method 'GetNumElements'
    // TODO: Method 'GetElement'
    // TODO: Method 'AddLeafElement'
    // TODO: Method 'RemoveLeafElement'
    // TODO: Method 'CopyPath'
    // TODO: Method 'GetEscapedElement'
    // TODO: Method 'get_EscapedMode'
    // TODO: Method 'put_EscapedMode'
};
// --------------------------------------------------------
// Type: IADsADSystemInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsADSystemInfo = *opaque{
    // TODO: Method 'get_UserName'
    // TODO: Method 'get_ComputerName'
    // TODO: Method 'get_SiteName'
    // TODO: Method 'get_DomainShortName'
    // TODO: Method 'get_DomainDNSName'
    // TODO: Method 'get_ForestDNSName'
    // TODO: Method 'get_PDCRoleOwner'
    // TODO: Method 'get_SchemaRoleOwner'
    // TODO: Method 'get_IsNativeMode'
    // TODO: Method 'GetAnyDCName'
    // TODO: Method 'GetDCSiteName'
    // TODO: Method 'RefreshSchemaCache'
    // TODO: Method 'GetTrees'
};
// --------------------------------------------------------
// Type: IADsWinNTSystemInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsWinNTSystemInfo = *opaque{
    // TODO: Method 'get_UserName'
    // TODO: Method 'get_ComputerName'
    // TODO: Method 'get_DomainName'
    // TODO: Method 'get_PDC'
};
// --------------------------------------------------------
// Type: IADsDNWithBinary
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsDNWithBinary = *opaque{
    // TODO: Method 'get_BinaryValue'
    // TODO: Method 'put_BinaryValue'
    // TODO: Method 'get_DNString'
    // TODO: Method 'put_DNString'
};
// --------------------------------------------------------
// Type: IADsDNWithString
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsDNWithString = *opaque{
    // TODO: Method 'get_StringValue'
    // TODO: Method 'put_StringValue'
    // TODO: Method 'get_DNString'
    // TODO: Method 'put_DNString'
};
// --------------------------------------------------------
// Type: IADsSecurityUtility
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IADsSecurityUtility = *opaque{
    // TODO: Method 'GetSecurityDescriptor'
    // TODO: Method 'SetSecurityDescriptor'
    // TODO: Method 'ConvertSecurityDescriptor'
    // TODO: Method 'get_SecurityMask'
    // TODO: Method 'put_SecurityMask'
};
// --------------------------------------------------------
// Type: DSOBJECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSOBJECT = extern struct {
    dwFlags: u32,
    dwProviderFlags: u32,
    offsetName: u32,
    offsetClass: u32,
};
// --------------------------------------------------------
// Type: DSOBJECTNAMES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSOBJECTNAMES = extern struct {
    clsidNamespace: Guid,
    cItems: u32,
    aObjects: ?[*]DSOBJECT,
};
// --------------------------------------------------------
// Type: DSDISPLAYSPECOPTIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSDISPLAYSPECOPTIONS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    offsetAttribPrefix: u32,
    offsetUserName: u32,
    offsetPassword: u32,
    offsetServer: u32,
    offsetServerConfigPath: u32,
};
// --------------------------------------------------------
// Type: DSPROPERTYPAGEINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSPROPERTYPAGEINFO = extern struct {
    offsetString: u32,
};
// --------------------------------------------------------
// Type: DOMAINDESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOMAINDESC = extern struct {
    pszName: ?*u16,
    pszPath: ?*u16,
    pszNCName: ?*u16,
    pszTrustParent: ?*u16,
    pszObjectClass: ?*u16,
    ulFlags: u32,
    fDownLevel: BOOL,
    pdChildList: ?*DOMAINDESC,
    pdNextSibling: ?*DOMAINDESC,
};
// --------------------------------------------------------
// Type: DOMAIN_TREE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOMAIN_TREE = extern struct {
    dsSize: u32,
    dwCount: u32,
    aDomains: ?[*]DOMAINDESC,
};
// --------------------------------------------------------
// Type: IDsBrowseDomainTree
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDsBrowseDomainTree = *opaque{
    // TODO: Method 'BrowseTo'
    // TODO: Method 'GetDomains'
    // TODO: Method 'FreeDomains'
    // TODO: Method 'FlushCachedDomains'
    // TODO: Method 'SetComputer'
};
// --------------------------------------------------------
// Type: LPDSENUMATTRIBUTES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDSENUMATTRIBUTES = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DSCLASSCREATIONINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSCLASSCREATIONINFO = extern struct {
    dwFlags: u32,
    clsidWizardDialog: Guid,
    clsidWizardPrimaryPage: Guid,
    cWizardExtensions: u32,
    aWizardExtensions: ?[*]Guid,
};
// --------------------------------------------------------
// Type: IDsDisplaySpecifier
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDsDisplaySpecifier = *opaque{
    // TODO: Method 'SetServer'
    // TODO: Method 'SetLanguageID'
    // TODO: Method 'GetDisplaySpecifier'
    // TODO: Method 'GetIconLocation'
    // TODO: Method 'GetIcon'
    // TODO: Method 'GetFriendlyClassName'
    // TODO: Method 'GetFriendlyAttributeName'
    // TODO: Method 'IsClassContainer'
    // TODO: Method 'GetClassCreationInfo'
    // TODO: Method 'EnumClassAttributes'
    // TODO: Method 'GetAttributeADsType'
};
// --------------------------------------------------------
// Type: DSBROWSEINFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSBROWSEINFOW = extern struct {
    cbStruct: u32,
    hwndOwner: HWND,
    pszCaption: ?*u16,
    pszTitle: ?*u16,
    pszRoot: ?*u16,
    pszPath: ?*u16,
    cchPath: u32,
    dwFlags: u32,
    pfnCallback: BFFCALLBACK,
    lParam: LPARAM,
    dwReturnFormat: u32,
    pUserName: ?*u16,
    pPassword: ?*u16,
    pszObjectClass: ?*u16,
    cchObjectClass: u32,
};
// --------------------------------------------------------
// Type: DSBROWSEINFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSBROWSEINFOA = extern struct {
    cbStruct: u32,
    hwndOwner: HWND,
    pszCaption: ?*i8,
    pszTitle: ?*i8,
    pszRoot: ?*u16,
    pszPath: ?*u16,
    cchPath: u32,
    dwFlags: u32,
    pfnCallback: BFFCALLBACK,
    lParam: LPARAM,
    dwReturnFormat: u32,
    pUserName: ?*u16,
    pPassword: ?*u16,
    pszObjectClass: ?*u16,
    cchObjectClass: u32,
};
// --------------------------------------------------------
// Type: DSBITEMW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSBITEMW = extern struct {
    cbStruct: u32,
    pszADsPath: ?*u16,
    pszClass: ?*u16,
    dwMask: u32,
    dwState: u32,
    dwStateMask: u32,
    szDisplayName: ?[*]u16,
    szIconLocation: ?[*]u16,
    iIconResID: i32,
};
// --------------------------------------------------------
// Type: DSBITEMA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSBITEMA = extern struct {
    cbStruct: u32,
    pszADsPath: ?*u16,
    pszClass: ?*u16,
    dwMask: u32,
    dwState: u32,
    dwStateMask: u32,
    szDisplayName: ?[*]i8,
    szIconLocation: ?[*]i8,
    iIconResID: i32,
};
// --------------------------------------------------------
// Type: DSOP_UPLEVEL_FILTER_FLAGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSOP_UPLEVEL_FILTER_FLAGS = extern struct {
    flBothModes: u32,
    flMixedModeOnly: u32,
    flNativeModeOnly: u32,
};
// --------------------------------------------------------
// Type: DSOP_FILTER_FLAGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSOP_FILTER_FLAGS = extern struct {
    Uplevel: DSOP_UPLEVEL_FILTER_FLAGS,
    flDownlevel: u32,
};
// --------------------------------------------------------
// Type: DSOP_SCOPE_INIT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSOP_SCOPE_INIT_INFO = extern struct {
    cbSize: u32,
    flType: u32,
    flScope: u32,
    FilterFlags: DSOP_FILTER_FLAGS,
    pwzDcName: ?*u16,
    pwzADsPath: ?*u16,
    hr: HRESULT,
};
// --------------------------------------------------------
// Type: DSOP_INIT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSOP_INIT_INFO = extern struct {
    cbSize: u32,
    pwzTargetComputer: ?*u16,
    cDsScopeInfos: u32,
    aDsScopeInfos: ?*DSOP_SCOPE_INIT_INFO,
    flOptions: u32,
    cAttributesToFetch: u32,
    apwzAttributeNames: ?*?*u16,
};
// --------------------------------------------------------
// Type: DS_SELECTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_SELECTION = extern struct {
    pwzName: ?*u16,
    pwzADsPath: ?*u16,
    pwzClass: ?*u16,
    pwzUPN: ?*u16,
    pvarFetchedAttributes: ?*VARIANT,
    flScopeType: u32,
};
// --------------------------------------------------------
// Type: DS_SELECTION_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_SELECTION_LIST = extern struct {
    cItems: u32,
    cFetchedAttributes: u32,
    aDsSelection: ?[*]DS_SELECTION,
};
// --------------------------------------------------------
// Type: IDsObjectPicker
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDsObjectPicker = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'InvokeDialog'
};
// --------------------------------------------------------
// Type: IDsObjectPickerCredentials
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDsObjectPickerCredentials = *opaque{
    // TODO: Method 'SetCredentials'
};
// --------------------------------------------------------
// Type: DSQUERYINITPARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSQUERYINITPARAMS = extern struct {
    cbStruct: u32,
    dwFlags: u32,
    pDefaultScope: ?*u16,
    pDefaultSaveLocation: ?*u16,
    pUserName: ?*u16,
    pPassword: ?*u16,
    pServer: ?*u16,
};
// --------------------------------------------------------
// Type: DSCOLUMN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSCOLUMN = extern struct {
    dwFlags: u32,
    fmt: i32,
    cx: i32,
    idsName: i32,
    offsetProperty: i32,
    dwReserved: u32,
};
// --------------------------------------------------------
// Type: DSQUERYPARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSQUERYPARAMS = extern struct {
    cbStruct: u32,
    dwFlags: u32,
    hInstance: HINSTANCE,
    offsetQuery: i32,
    iColumns: i32,
    dwReserved: u32,
    aColumns: ?[*]DSCOLUMN,
};
// --------------------------------------------------------
// Type: DSQUERYCLASSLIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSQUERYCLASSLIST = extern struct {
    cbStruct: u32,
    cClasses: i32,
    offsetClass: ?[*]u32,
};
// --------------------------------------------------------
// Type: IDsAdminCreateObj
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDsAdminCreateObj = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'CreateModal'
};
// --------------------------------------------------------
// Type: IDsAdminNewObj
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDsAdminNewObj = *opaque{
    // TODO: Method 'SetButtons'
    // TODO: Method 'GetPageCounts'
};
// --------------------------------------------------------
// Type: IDsAdminNewObjPrimarySite
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDsAdminNewObjPrimarySite = *opaque{
    // TODO: Method 'CreateNew'
    // TODO: Method 'Commit'
};
// --------------------------------------------------------
// Type: DSA_NEWOBJ_DISPINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSA_NEWOBJ_DISPINFO = extern struct {
    dwSize: u32,
    hObjClassIcon: HICON,
    lpszWizTitle: ?*u16,
    lpszContDisplayName: ?*u16,
};
// --------------------------------------------------------
// Type: IDsAdminNewObjExt
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDsAdminNewObjExt = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'AddPages'
    // TODO: Method 'SetObject'
    // TODO: Method 'WriteData'
    // TODO: Method 'OnError'
    // TODO: Method 'GetSummaryInfo'
};
// --------------------------------------------------------
// Type: IDsAdminNotifyHandler
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDsAdminNotifyHandler = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'Begin'
    // TODO: Method 'Notify'
    // TODO: Method 'End'
};
// --------------------------------------------------------
// Type: ADSPROPINITPARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ADSPROPINITPARAMS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    hr: HRESULT,
    pDsObj: IDirectoryObject,
    pwzCN: ?*u16,
    pWritableAttrs: ?*ADS_ATTR_INFO,
};
// --------------------------------------------------------
// Type: ADSPROPERROR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ADSPROPERROR = extern struct {
    hwndPage: HWND,
    pszPageTitle: ?*u16,
    pszObjPath: ?*u16,
    pszObjClass: ?*u16,
    hr: HRESULT,
    pszError: ?*u16,
};
// --------------------------------------------------------
// Type: SCHEDULE_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCHEDULE_HEADER = extern struct {
    Type: u32,
    Offset: u32,
};
// --------------------------------------------------------
// Type: SCHEDULE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCHEDULE = extern struct {
    Size: u32,
    Bandwidth: u32,
    NumberOfSchedules: u32,
    Schedules: ?[*]SCHEDULE_HEADER,
};
// --------------------------------------------------------
// Type: DS_MANGLE_FOR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DS_MANGLE_FOR = *opaque{
};
// --------------------------------------------------------
// Type: DS_NAME_FORMAT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DS_NAME_FORMAT = *opaque{
};
// --------------------------------------------------------
// Type: DS_NAME_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DS_NAME_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: DS_NAME_ERROR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DS_NAME_ERROR = *opaque{
};
// --------------------------------------------------------
// Type: DS_SPN_NAME_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DS_SPN_NAME_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DS_SPN_WRITE_OP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DS_SPN_WRITE_OP = *opaque{
};
// --------------------------------------------------------
// Type: DS_NAME_RESULT_ITEMA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_NAME_RESULT_ITEMA = extern struct {
    status: u32,
    pDomain: ?*i8,
    pName: ?*i8,
};
// --------------------------------------------------------
// Type: DS_NAME_RESULTA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_NAME_RESULTA = extern struct {
    cItems: u32,
    rItems: ?*DS_NAME_RESULT_ITEMA,
};
// --------------------------------------------------------
// Type: DS_NAME_RESULT_ITEMW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_NAME_RESULT_ITEMW = extern struct {
    status: u32,
    pDomain: ?*u16,
    pName: ?*u16,
};
// --------------------------------------------------------
// Type: DS_NAME_RESULTW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_NAME_RESULTW = extern struct {
    cItems: u32,
    rItems: ?*DS_NAME_RESULT_ITEMW,
};
// --------------------------------------------------------
// Type: DS_REPSYNCALL_ERROR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DS_REPSYNCALL_ERROR = *opaque{
};
// --------------------------------------------------------
// Type: DS_REPSYNCALL_EVENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DS_REPSYNCALL_EVENT = *opaque{
};
// --------------------------------------------------------
// Type: DS_REPSYNCALL_SYNCA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPSYNCALL_SYNCA = extern struct {
    pszSrcId: ?*i8,
    pszDstId: ?*i8,
    pszNC: ?*i8,
    pguidSrc: ?*Guid,
    pguidDst: ?*Guid,
};
// --------------------------------------------------------
// Type: DS_REPSYNCALL_SYNCW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPSYNCALL_SYNCW = extern struct {
    pszSrcId: ?*u16,
    pszDstId: ?*u16,
    pszNC: ?*u16,
    pguidSrc: ?*Guid,
    pguidDst: ?*Guid,
};
// --------------------------------------------------------
// Type: DS_REPSYNCALL_ERRINFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPSYNCALL_ERRINFOA = extern struct {
    pszSvrId: ?*i8,
    @"error": DS_REPSYNCALL_ERROR,
    dwWin32Err: u32,
    pszSrcId: ?*i8,
};
// --------------------------------------------------------
// Type: DS_REPSYNCALL_ERRINFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPSYNCALL_ERRINFOW = extern struct {
    pszSvrId: ?*u16,
    @"error": DS_REPSYNCALL_ERROR,
    dwWin32Err: u32,
    pszSrcId: ?*u16,
};
// --------------------------------------------------------
// Type: DS_REPSYNCALL_UPDATEA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPSYNCALL_UPDATEA = extern struct {
    event: DS_REPSYNCALL_EVENT,
    pErrInfo: ?*DS_REPSYNCALL_ERRINFOA,
    pSync: ?*DS_REPSYNCALL_SYNCA,
};
// --------------------------------------------------------
// Type: DS_REPSYNCALL_UPDATEW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPSYNCALL_UPDATEW = extern struct {
    event: DS_REPSYNCALL_EVENT,
    pErrInfo: ?*DS_REPSYNCALL_ERRINFOW,
    pSync: ?*DS_REPSYNCALL_SYNCW,
};
// --------------------------------------------------------
// Type: DS_SITE_COST_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_SITE_COST_INFO = extern struct {
    errorCode: u32,
    cost: u32,
};
// --------------------------------------------------------
// Type: DS_SCHEMA_GUID_MAPA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_SCHEMA_GUID_MAPA = extern struct {
    guid: Guid,
    guidType: u32,
    pName: ?*i8,
};
// --------------------------------------------------------
// Type: DS_SCHEMA_GUID_MAPW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_SCHEMA_GUID_MAPW = extern struct {
    guid: Guid,
    guidType: u32,
    pName: ?*u16,
};
// --------------------------------------------------------
// Type: DS_DOMAIN_CONTROLLER_INFO_1A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_DOMAIN_CONTROLLER_INFO_1A = extern struct {
    NetbiosName: ?*i8,
    DnsHostName: ?*i8,
    SiteName: ?*i8,
    ComputerObjectName: ?*i8,
    ServerObjectName: ?*i8,
    fIsPdc: BOOL,
    fDsEnabled: BOOL,
};
// --------------------------------------------------------
// Type: DS_DOMAIN_CONTROLLER_INFO_1W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_DOMAIN_CONTROLLER_INFO_1W = extern struct {
    NetbiosName: ?*u16,
    DnsHostName: ?*u16,
    SiteName: ?*u16,
    ComputerObjectName: ?*u16,
    ServerObjectName: ?*u16,
    fIsPdc: BOOL,
    fDsEnabled: BOOL,
};
// --------------------------------------------------------
// Type: DS_DOMAIN_CONTROLLER_INFO_2A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_DOMAIN_CONTROLLER_INFO_2A = extern struct {
    NetbiosName: ?*i8,
    DnsHostName: ?*i8,
    SiteName: ?*i8,
    SiteObjectName: ?*i8,
    ComputerObjectName: ?*i8,
    ServerObjectName: ?*i8,
    NtdsDsaObjectName: ?*i8,
    fIsPdc: BOOL,
    fDsEnabled: BOOL,
    fIsGc: BOOL,
    SiteObjectGuid: Guid,
    ComputerObjectGuid: Guid,
    ServerObjectGuid: Guid,
    NtdsDsaObjectGuid: Guid,
};
// --------------------------------------------------------
// Type: DS_DOMAIN_CONTROLLER_INFO_2W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_DOMAIN_CONTROLLER_INFO_2W = extern struct {
    NetbiosName: ?*u16,
    DnsHostName: ?*u16,
    SiteName: ?*u16,
    SiteObjectName: ?*u16,
    ComputerObjectName: ?*u16,
    ServerObjectName: ?*u16,
    NtdsDsaObjectName: ?*u16,
    fIsPdc: BOOL,
    fDsEnabled: BOOL,
    fIsGc: BOOL,
    SiteObjectGuid: Guid,
    ComputerObjectGuid: Guid,
    ServerObjectGuid: Guid,
    NtdsDsaObjectGuid: Guid,
};
// --------------------------------------------------------
// Type: DS_DOMAIN_CONTROLLER_INFO_3A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_DOMAIN_CONTROLLER_INFO_3A = extern struct {
    NetbiosName: ?*i8,
    DnsHostName: ?*i8,
    SiteName: ?*i8,
    SiteObjectName: ?*i8,
    ComputerObjectName: ?*i8,
    ServerObjectName: ?*i8,
    NtdsDsaObjectName: ?*i8,
    fIsPdc: BOOL,
    fDsEnabled: BOOL,
    fIsGc: BOOL,
    fIsRodc: BOOL,
    SiteObjectGuid: Guid,
    ComputerObjectGuid: Guid,
    ServerObjectGuid: Guid,
    NtdsDsaObjectGuid: Guid,
};
// --------------------------------------------------------
// Type: DS_DOMAIN_CONTROLLER_INFO_3W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_DOMAIN_CONTROLLER_INFO_3W = extern struct {
    NetbiosName: ?*u16,
    DnsHostName: ?*u16,
    SiteName: ?*u16,
    SiteObjectName: ?*u16,
    ComputerObjectName: ?*u16,
    ServerObjectName: ?*u16,
    NtdsDsaObjectName: ?*u16,
    fIsPdc: BOOL,
    fDsEnabled: BOOL,
    fIsGc: BOOL,
    fIsRodc: BOOL,
    SiteObjectGuid: Guid,
    ComputerObjectGuid: Guid,
    ServerObjectGuid: Guid,
    NtdsDsaObjectGuid: Guid,
};
// --------------------------------------------------------
// Type: DS_KCC_TASKID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DS_KCC_TASKID = *opaque{
};
// --------------------------------------------------------
// Type: DS_REPL_INFO_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DS_REPL_INFO_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DS_REPL_NEIGHBORW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPL_NEIGHBORW = extern struct {
    pszNamingContext: ?*u16,
    pszSourceDsaDN: ?*u16,
    pszSourceDsaAddress: ?*u16,
    pszAsyncIntersiteTransportDN: ?*u16,
    dwReplicaFlags: u32,
    dwReserved: u32,
    uuidNamingContextObjGuid: Guid,
    uuidSourceDsaObjGuid: Guid,
    uuidSourceDsaInvocationID: Guid,
    uuidAsyncIntersiteTransportObjGuid: Guid,
    usnLastObjChangeSynced: i64,
    usnAttributeFilter: i64,
    ftimeLastSyncSuccess: FILETIME,
    ftimeLastSyncAttempt: FILETIME,
    dwLastSyncResult: u32,
    cNumConsecutiveSyncFailures: u32,
};
// --------------------------------------------------------
// Type: DS_REPL_NEIGHBORW_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPL_NEIGHBORW_BLOB = extern struct {
    oszNamingContext: u32,
    oszSourceDsaDN: u32,
    oszSourceDsaAddress: u32,
    oszAsyncIntersiteTransportDN: u32,
    dwReplicaFlags: u32,
    dwReserved: u32,
    uuidNamingContextObjGuid: Guid,
    uuidSourceDsaObjGuid: Guid,
    uuidSourceDsaInvocationID: Guid,
    uuidAsyncIntersiteTransportObjGuid: Guid,
    usnLastObjChangeSynced: i64,
    usnAttributeFilter: i64,
    ftimeLastSyncSuccess: FILETIME,
    ftimeLastSyncAttempt: FILETIME,
    dwLastSyncResult: u32,
    cNumConsecutiveSyncFailures: u32,
};
// --------------------------------------------------------
// Type: DS_REPL_NEIGHBORSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPL_NEIGHBORSW = extern struct {
    cNumNeighbors: u32,
    dwReserved: u32,
    rgNeighbor: ?[*]DS_REPL_NEIGHBORW,
};
// --------------------------------------------------------
// Type: DS_REPL_CURSOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPL_CURSOR = extern struct {
    uuidSourceDsaInvocationID: Guid,
    usnAttributeFilter: i64,
};
// --------------------------------------------------------
// Type: DS_REPL_CURSOR_2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPL_CURSOR_2 = extern struct {
    uuidSourceDsaInvocationID: Guid,
    usnAttributeFilter: i64,
    ftimeLastSyncSuccess: FILETIME,
};
// --------------------------------------------------------
// Type: DS_REPL_CURSOR_3W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPL_CURSOR_3W = extern struct {
    uuidSourceDsaInvocationID: Guid,
    usnAttributeFilter: i64,
    ftimeLastSyncSuccess: FILETIME,
    pszSourceDsaDN: ?*u16,
};
// --------------------------------------------------------
// Type: DS_REPL_CURSOR_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPL_CURSOR_BLOB = extern struct {
    uuidSourceDsaInvocationID: Guid,
    usnAttributeFilter: i64,
    ftimeLastSyncSuccess: FILETIME,
    oszSourceDsaDN: u32,
};
// --------------------------------------------------------
// Type: DS_REPL_CURSORS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPL_CURSORS = extern struct {
    cNumCursors: u32,
    dwReserved: u32,
    rgCursor: ?[*]DS_REPL_CURSOR,
};
// --------------------------------------------------------
// Type: DS_REPL_CURSORS_2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPL_CURSORS_2 = extern struct {
    cNumCursors: u32,
    dwEnumerationContext: u32,
    rgCursor: ?[*]DS_REPL_CURSOR_2,
};
// --------------------------------------------------------
// Type: DS_REPL_CURSORS_3W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPL_CURSORS_3W = extern struct {
    cNumCursors: u32,
    dwEnumerationContext: u32,
    rgCursor: ?[*]DS_REPL_CURSOR_3W,
};
// --------------------------------------------------------
// Type: DS_REPL_ATTR_META_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPL_ATTR_META_DATA = extern struct {
    pszAttributeName: ?*u16,
    dwVersion: u32,
    ftimeLastOriginatingChange: FILETIME,
    uuidLastOriginatingDsaInvocationID: Guid,
    usnOriginatingChange: i64,
    usnLocalChange: i64,
};
// --------------------------------------------------------
// Type: DS_REPL_ATTR_META_DATA_2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPL_ATTR_META_DATA_2 = extern struct {
    pszAttributeName: ?*u16,
    dwVersion: u32,
    ftimeLastOriginatingChange: FILETIME,
    uuidLastOriginatingDsaInvocationID: Guid,
    usnOriginatingChange: i64,
    usnLocalChange: i64,
    pszLastOriginatingDsaDN: ?*u16,
};
// --------------------------------------------------------
// Type: DS_REPL_ATTR_META_DATA_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPL_ATTR_META_DATA_BLOB = extern struct {
    oszAttributeName: u32,
    dwVersion: u32,
    ftimeLastOriginatingChange: FILETIME,
    uuidLastOriginatingDsaInvocationID: Guid,
    usnOriginatingChange: i64,
    usnLocalChange: i64,
    oszLastOriginatingDsaDN: u32,
};
// --------------------------------------------------------
// Type: DS_REPL_OBJ_META_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPL_OBJ_META_DATA = extern struct {
    cNumEntries: u32,
    dwReserved: u32,
    rgMetaData: ?[*]DS_REPL_ATTR_META_DATA,
};
// --------------------------------------------------------
// Type: DS_REPL_OBJ_META_DATA_2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPL_OBJ_META_DATA_2 = extern struct {
    cNumEntries: u32,
    dwReserved: u32,
    rgMetaData: ?[*]DS_REPL_ATTR_META_DATA_2,
};
// --------------------------------------------------------
// Type: DS_REPL_KCC_DSA_FAILUREW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPL_KCC_DSA_FAILUREW = extern struct {
    pszDsaDN: ?*u16,
    uuidDsaObjGuid: Guid,
    ftimeFirstFailure: FILETIME,
    cNumFailures: u32,
    dwLastResult: u32,
};
// --------------------------------------------------------
// Type: DS_REPL_KCC_DSA_FAILUREW_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPL_KCC_DSA_FAILUREW_BLOB = extern struct {
    oszDsaDN: u32,
    uuidDsaObjGuid: Guid,
    ftimeFirstFailure: FILETIME,
    cNumFailures: u32,
    dwLastResult: u32,
};
// --------------------------------------------------------
// Type: DS_REPL_KCC_DSA_FAILURESW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPL_KCC_DSA_FAILURESW = extern struct {
    cNumEntries: u32,
    dwReserved: u32,
    rgDsaFailure: ?[*]DS_REPL_KCC_DSA_FAILUREW,
};
// --------------------------------------------------------
// Type: DS_REPL_OP_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DS_REPL_OP_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DS_REPL_OPW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPL_OPW = extern struct {
    ftimeEnqueued: FILETIME,
    ulSerialNumber: u32,
    ulPriority: u32,
    OpType: DS_REPL_OP_TYPE,
    ulOptions: u32,
    pszNamingContext: ?*u16,
    pszDsaDN: ?*u16,
    pszDsaAddress: ?*u16,
    uuidNamingContextObjGuid: Guid,
    uuidDsaObjGuid: Guid,
};
// --------------------------------------------------------
// Type: DS_REPL_OPW_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPL_OPW_BLOB = extern struct {
    ftimeEnqueued: FILETIME,
    ulSerialNumber: u32,
    ulPriority: u32,
    OpType: DS_REPL_OP_TYPE,
    ulOptions: u32,
    oszNamingContext: u32,
    oszDsaDN: u32,
    oszDsaAddress: u32,
    uuidNamingContextObjGuid: Guid,
    uuidDsaObjGuid: Guid,
};
// --------------------------------------------------------
// Type: DS_REPL_PENDING_OPSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPL_PENDING_OPSW = extern struct {
    ftimeCurrentOpStarted: FILETIME,
    cNumPendingOps: u32,
    rgPendingOp: ?[*]DS_REPL_OPW,
};
// --------------------------------------------------------
// Type: DS_REPL_VALUE_META_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPL_VALUE_META_DATA = extern struct {
    pszAttributeName: ?*u16,
    pszObjectDn: ?*u16,
    cbData: u32,
    pbData: ?*u8,
    ftimeDeleted: FILETIME,
    ftimeCreated: FILETIME,
    dwVersion: u32,
    ftimeLastOriginatingChange: FILETIME,
    uuidLastOriginatingDsaInvocationID: Guid,
    usnOriginatingChange: i64,
    usnLocalChange: i64,
};
// --------------------------------------------------------
// Type: DS_REPL_VALUE_META_DATA_2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPL_VALUE_META_DATA_2 = extern struct {
    pszAttributeName: ?*u16,
    pszObjectDn: ?*u16,
    cbData: u32,
    pbData: ?*u8,
    ftimeDeleted: FILETIME,
    ftimeCreated: FILETIME,
    dwVersion: u32,
    ftimeLastOriginatingChange: FILETIME,
    uuidLastOriginatingDsaInvocationID: Guid,
    usnOriginatingChange: i64,
    usnLocalChange: i64,
    pszLastOriginatingDsaDN: ?*u16,
};
// --------------------------------------------------------
// Type: DS_REPL_VALUE_META_DATA_EXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPL_VALUE_META_DATA_EXT = extern struct {
    pszAttributeName: ?*u16,
    pszObjectDn: ?*u16,
    cbData: u32,
    pbData: ?*u8,
    ftimeDeleted: FILETIME,
    ftimeCreated: FILETIME,
    dwVersion: u32,
    ftimeLastOriginatingChange: FILETIME,
    uuidLastOriginatingDsaInvocationID: Guid,
    usnOriginatingChange: i64,
    usnLocalChange: i64,
    pszLastOriginatingDsaDN: ?*u16,
    dwUserIdentifier: u32,
    dwPriorLinkState: u32,
    dwCurrentLinkState: u32,
};
// --------------------------------------------------------
// Type: DS_REPL_VALUE_META_DATA_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPL_VALUE_META_DATA_BLOB = extern struct {
    oszAttributeName: u32,
    oszObjectDn: u32,
    cbData: u32,
    obData: u32,
    ftimeDeleted: FILETIME,
    ftimeCreated: FILETIME,
    dwVersion: u32,
    ftimeLastOriginatingChange: FILETIME,
    uuidLastOriginatingDsaInvocationID: Guid,
    usnOriginatingChange: i64,
    usnLocalChange: i64,
    oszLastOriginatingDsaDN: u32,
};
// --------------------------------------------------------
// Type: DS_REPL_VALUE_META_DATA_BLOB_EXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPL_VALUE_META_DATA_BLOB_EXT = extern struct {
    oszAttributeName: u32,
    oszObjectDn: u32,
    cbData: u32,
    obData: u32,
    ftimeDeleted: FILETIME,
    ftimeCreated: FILETIME,
    dwVersion: u32,
    ftimeLastOriginatingChange: FILETIME,
    uuidLastOriginatingDsaInvocationID: Guid,
    usnOriginatingChange: i64,
    usnLocalChange: i64,
    oszLastOriginatingDsaDN: u32,
    dwUserIdentifier: u32,
    dwPriorLinkState: u32,
    dwCurrentLinkState: u32,
};
// --------------------------------------------------------
// Type: DS_REPL_ATTR_VALUE_META_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPL_ATTR_VALUE_META_DATA = extern struct {
    cNumEntries: u32,
    dwEnumerationContext: u32,
    rgMetaData: ?[*]DS_REPL_VALUE_META_DATA,
};
// --------------------------------------------------------
// Type: DS_REPL_ATTR_VALUE_META_DATA_2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPL_ATTR_VALUE_META_DATA_2 = extern struct {
    cNumEntries: u32,
    dwEnumerationContext: u32,
    rgMetaData: ?[*]DS_REPL_VALUE_META_DATA_2,
};
// --------------------------------------------------------
// Type: DS_REPL_ATTR_VALUE_META_DATA_EXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPL_ATTR_VALUE_META_DATA_EXT = extern struct {
    cNumEntries: u32,
    dwEnumerationContext: u32,
    rgMetaData: ?[*]DS_REPL_VALUE_META_DATA_EXT,
};
// --------------------------------------------------------
// Type: DS_REPL_QUEUE_STATISTICSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_REPL_QUEUE_STATISTICSW = extern struct {
    ftimeCurrentOpStarted: FILETIME,
    cNumPendingOps: u32,
    ftimeOldestSync: FILETIME,
    ftimeOldestAdd: FILETIME,
    ftimeOldestMod: FILETIME,
    ftimeOldestDel: FILETIME,
    ftimeOldestUpdRefs: FILETIME,
};
// --------------------------------------------------------
// Type: DSROLE_MACHINE_ROLE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DSROLE_MACHINE_ROLE = *opaque{
};
// --------------------------------------------------------
// Type: DSROLE_SERVER_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DSROLE_SERVER_STATE = *opaque{
};
// --------------------------------------------------------
// Type: DSROLE_PRIMARY_DOMAIN_INFO_LEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DSROLE_PRIMARY_DOMAIN_INFO_LEVEL = *opaque{
};
// --------------------------------------------------------
// Type: DSROLE_PRIMARY_DOMAIN_INFO_BASIC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSROLE_PRIMARY_DOMAIN_INFO_BASIC = extern struct {
    MachineRole: DSROLE_MACHINE_ROLE,
    Flags: u32,
    DomainNameFlat: ?*u16,
    DomainNameDns: ?*u16,
    DomainForestName: ?*u16,
    DomainGuid: Guid,
};
// --------------------------------------------------------
// Type: DSROLE_UPGRADE_STATUS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSROLE_UPGRADE_STATUS_INFO = extern struct {
    OperationState: u32,
    PreviousServerState: DSROLE_SERVER_STATE,
};
// --------------------------------------------------------
// Type: DSROLE_OPERATION_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DSROLE_OPERATION_STATE = *opaque{
};
// --------------------------------------------------------
// Type: DSROLE_OPERATION_STATE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSROLE_OPERATION_STATE_INFO = extern struct {
    OperationState: DSROLE_OPERATION_STATE,
};
// --------------------------------------------------------
// Type: DOMAIN_CONTROLLER_INFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOMAIN_CONTROLLER_INFOA = extern struct {
    DomainControllerName: ?*i8,
    DomainControllerAddress: ?*i8,
    DomainControllerAddressType: u32,
    DomainGuid: Guid,
    DomainName: ?*i8,
    DnsForestName: ?*i8,
    Flags: u32,
    DcSiteName: ?*i8,
    ClientSiteName: ?*i8,
};
// --------------------------------------------------------
// Type: DOMAIN_CONTROLLER_INFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOMAIN_CONTROLLER_INFOW = extern struct {
    DomainControllerName: ?*u16,
    DomainControllerAddress: ?*u16,
    DomainControllerAddressType: u32,
    DomainGuid: Guid,
    DomainName: ?*u16,
    DnsForestName: ?*u16,
    Flags: u32,
    DcSiteName: ?*u16,
    ClientSiteName: ?*u16,
};
// --------------------------------------------------------
// Type: DS_DOMAIN_TRUSTSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_DOMAIN_TRUSTSW = extern struct {
    NetbiosDomainName: ?*u16,
    DnsDomainName: ?*u16,
    Flags: u32,
    ParentIndex: u32,
    TrustType: u32,
    TrustAttributes: u32,
    DomainSid: ?*opaque{},
    DomainGuid: Guid,
};
// --------------------------------------------------------
// Type: DS_DOMAIN_TRUSTSA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS_DOMAIN_TRUSTSA = extern struct {
    NetbiosDomainName: ?*i8,
    DnsDomainName: ?*i8,
    Flags: u32,
    ParentIndex: u32,
    TrustType: u32,
    TrustAttributes: u32,
    DomainSid: ?*opaque{},
    DomainGuid: Guid,
};
// --------------------------------------------------------
// Type: BFFCALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BFFCALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: GetDcContextHandle
// TypeLayoutAttr: sequential
// RAIIFree 'DsGetDcCloseW' (TODO: can we use this information?)
pub const GetDcContextHandle = ?*opaque{};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "ACTIVEDS" fn ADsGetObject(
    lpszPathName: ?*u16,
    riid: ?*Guid,
    ppObject: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ACTIVEDS" fn ADsBuildEnumerator(
    pADsContainer: IADsContainer,
    ppEnumVariant: ?*IEnumVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ACTIVEDS" fn ADsFreeEnumerator(
    pEnumVariant: IEnumVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ACTIVEDS" fn ADsEnumerateNext(
    pEnumVariant: IEnumVARIANT,
    cElements: u32,
    pvar: ?*VARIANT,
    pcElementsFetched: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ACTIVEDS" fn ADsBuildVarArrayStr(
    lppPathNames: ?*?*u16,
    dwPathNames: u32,
    pVar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ACTIVEDS" fn ADsBuildVarArrayInt(
    lpdwObjectTypes: ?*u32,
    dwObjectTypes: u32,
    pVar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ACTIVEDS" fn ADsOpenObject(
    lpszPathName: ?*u16,
    lpszUserName: ?*u16,
    lpszPassword: ?*u16,
    dwReserved: u32,
    riid: ?*Guid,
    ppObject: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=True (can and should we use this?)
pub extern "ACTIVEDS" fn ADsGetLastError(
    lpError: ?*u32,
    lpErrorBuf: ?*u16,
    dwErrorBufLen: u32,
    lpNameBuf: ?*u16,
    dwNameBufLen: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ACTIVEDS" fn ADsSetLastError(
    dwErr: u32,
    pszError: ?*u16,
    pszProvider: ?*u16,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "ACTIVEDS" fn AllocADsMem(
    cb: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "ACTIVEDS" fn FreeADsMem(
    pMem: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ACTIVEDS" fn ReallocADsMem(
    pOldMem: ?*opaque{},
    cbOld: u32,
    cbNew: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "ACTIVEDS" fn AllocADsStr(
    pStr: ?*u16,
) callconv(@import("std").os.windows.WINAPI) ?*u16;

// set_last_errror=False (can and should we use this?)
pub extern "ACTIVEDS" fn FreeADsStr(
    pStr: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ACTIVEDS" fn ReallocADsStr(
    ppStr: ?*?*u16,
    pStr: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ACTIVEDS" fn ADsEncodeBinaryData(
    pbSrcData: ?*u8,
    dwSrcLen: u32,
    ppszDestData: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ACTIVEDS" fn ADsDecodeBinaryData(
    szSrcData: ?*u16,
    ppbDestData: ?*?*u8,
    pdwDestLen: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ACTIVEDS" fn PropVariantToAdsType(
    pVariant: ?*VARIANT,
    dwNumVariant: u32,
    ppAdsValues: ?*?*ADSVALUE,
    pdwNumValues: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ACTIVEDS" fn AdsTypeToPropVariant(
    pAdsValues: ?*ADSVALUE,
    dwNumValues: u32,
    pVariant: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ACTIVEDS" fn AdsFreeAdsValues(
    pAdsValues: ?*ADSVALUE,
    dwNumValues: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "ACTIVEDS" fn BinarySDToSecurityDescriptor(
    pSecurityDescriptor: ?*opaque{},
    pVarsec: ?*VARIANT,
    pszServerName: ?*u16,
    userName: ?*u16,
    passWord: ?*u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ACTIVEDS" fn SecurityDescriptorToBinarySD(
    vVarSecDes: VARIANT,
    ppSecurityDescriptor: ?*?*opaque{},
    pdwSDLength: ?*u32,
    pszServerName: ?*u16,
    userName: ?*u16,
    passWord: ?*u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dsuiext" fn DsBrowseForContainerW(
    pInfo: ?*DSBROWSEINFOW,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "dsuiext" fn DsBrowseForContainerA(
    pInfo: ?*DSBROWSEINFOA,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "dsuiext" fn DsGetIcon(
    dwFlags: u32,
    pszObjectClass: ?*u16,
    cxImage: i32,
    cyImage: i32,
) callconv(@import("std").os.windows.WINAPI) HICON;

// set_last_errror=False (can and should we use this?)
pub extern "dsuiext" fn DsGetFriendlyClassName(
    pszObjectClass: ?*u16,
    pszBuffer: ?*u16,
    cchBuffer: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dsprop" fn ADsPropCreateNotifyObj(
    pAppThdDataObj: IDataObject,
    pwzADsObjName: ?*u16,
    phNotifyObj: ?*HWND,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dsprop" fn ADsPropGetInitInfo(
    hNotifyObj: HWND,
    pInitParams: ?*ADSPROPINITPARAMS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "dsprop" fn ADsPropSetHwndWithTitle(
    hNotifyObj: HWND,
    hPage: HWND,
    ptzTitle: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "dsprop" fn ADsPropSetHwnd(
    hNotifyObj: HWND,
    hPage: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "dsprop" fn ADsPropCheckIfWritable(
    pwzAttr: ?*u16,
    pWritableAttrs: ?*ADS_ATTR_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "dsprop" fn ADsPropSendErrorMessage(
    hNotifyObj: HWND,
    pError: ?*ADSPROPERROR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "dsprop" fn ADsPropShowErrorDialog(
    hNotifyObj: HWND,
    hPage: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "DSPARSE" fn DsMakeSpnW(
    ServiceClass: ?*u16,
    ServiceName: ?*u16,
    InstanceName: ?*u16,
    InstancePort: u16,
    Referrer: ?*u16,
    pcSpnLength: ?*u32,
    pszSpn: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DSPARSE" fn DsMakeSpnA(
    ServiceClass: ?*i8,
    ServiceName: ?*i8,
    InstanceName: ?*i8,
    InstancePort: u16,
    Referrer: ?*i8,
    pcSpnLength: ?*u32,
    pszSpn: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DSPARSE" fn DsCrackSpnA(
    pszSpn: ?*i8,
    pcServiceClass: ?*u32,
    ServiceClass: ?*i8,
    pcServiceName: ?*u32,
    ServiceName: ?*i8,
    pcInstanceName: ?*u32,
    InstanceName: ?*i8,
    pInstancePort: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DSPARSE" fn DsCrackSpnW(
    pszSpn: ?*u16,
    pcServiceClass: ?*u32,
    ServiceClass: ?*u16,
    pcServiceName: ?*u32,
    ServiceName: ?*u16,
    pcInstanceName: ?*u32,
    InstanceName: ?*u16,
    pInstancePort: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DSPARSE" fn DsQuoteRdnValueW(
    cUnquotedRdnValueLength: u32,
    psUnquotedRdnValue: ?*u16,
    pcQuotedRdnValueLength: ?*u32,
    psQuotedRdnValue: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DSPARSE" fn DsQuoteRdnValueA(
    cUnquotedRdnValueLength: u32,
    psUnquotedRdnValue: ?*i8,
    pcQuotedRdnValueLength: ?*u32,
    psQuotedRdnValue: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DSPARSE" fn DsUnquoteRdnValueW(
    cQuotedRdnValueLength: u32,
    psQuotedRdnValue: ?*u16,
    pcUnquotedRdnValueLength: ?*u32,
    psUnquotedRdnValue: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DSPARSE" fn DsUnquoteRdnValueA(
    cQuotedRdnValueLength: u32,
    psQuotedRdnValue: ?*i8,
    pcUnquotedRdnValueLength: ?*u32,
    psUnquotedRdnValue: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DSPARSE" fn DsGetRdnW(
    ppDN: ?*?*u16,
    pcDN: ?*u32,
    ppKey: ?*?*u16,
    pcKey: ?*u32,
    ppVal: ?*?*u16,
    pcVal: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DSPARSE" fn DsCrackUnquotedMangledRdnW(
    pszRDN: ?*u16,
    cchRDN: u32,
    pGuid: ?*Guid,
    peDsMangleFor: ?*DS_MANGLE_FOR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "DSPARSE" fn DsCrackUnquotedMangledRdnA(
    pszRDN: ?*i8,
    cchRDN: u32,
    pGuid: ?*Guid,
    peDsMangleFor: ?*DS_MANGLE_FOR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "DSPARSE" fn DsIsMangledRdnValueW(
    pszRdn: ?*u16,
    cRdn: u32,
    eDsMangleForDesired: DS_MANGLE_FOR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "DSPARSE" fn DsIsMangledRdnValueA(
    pszRdn: ?*i8,
    cRdn: u32,
    eDsMangleForDesired: DS_MANGLE_FOR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "DSPARSE" fn DsIsMangledDnA(
    pszDn: ?*i8,
    eDsMangleFor: DS_MANGLE_FOR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "DSPARSE" fn DsIsMangledDnW(
    pszDn: ?*u16,
    eDsMangleFor: DS_MANGLE_FOR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "DSPARSE" fn DsCrackSpn2A(
    pszSpn: ?*i8,
    cSpn: u32,
    pcServiceClass: ?*u32,
    ServiceClass: ?*i8,
    pcServiceName: ?*u32,
    ServiceName: ?*i8,
    pcInstanceName: ?*u32,
    InstanceName: ?*i8,
    pInstancePort: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DSPARSE" fn DsCrackSpn2W(
    pszSpn: ?*u16,
    cSpn: u32,
    pcServiceClass: ?*u32,
    ServiceClass: ?*u16,
    pcServiceName: ?*u32,
    ServiceName: ?*u16,
    pcInstanceName: ?*u32,
    InstanceName: ?*u16,
    pInstancePort: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DSPARSE" fn DsCrackSpn3W(
    pszSpn: ?*u16,
    cSpn: u32,
    pcHostName: ?*u32,
    HostName: ?*u16,
    pcInstanceName: ?*u32,
    InstanceName: ?*u16,
    pPortNumber: ?*u16,
    pcDomainName: ?*u32,
    DomainName: ?*u16,
    pcRealmName: ?*u32,
    RealmName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DSPARSE" fn DsCrackSpn4W(
    pszSpn: ?*u16,
    cSpn: u32,
    pcHostName: ?*u32,
    HostName: ?*u16,
    pcInstanceName: ?*u32,
    InstanceName: ?*u16,
    pcPortName: ?*u32,
    PortName: ?*u16,
    pcDomainName: ?*u32,
    DomainName: ?*u16,
    pcRealmName: ?*u32,
    RealmName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsBindW(
    DomainControllerName: ?*u16,
    DnsDomainName: ?*u16,
    phDS: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsBindA(
    DomainControllerName: ?*i8,
    DnsDomainName: ?*i8,
    phDS: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsBindWithCredW(
    DomainControllerName: ?*u16,
    DnsDomainName: ?*u16,
    AuthIdentity: ?*opaque{},
    phDS: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsBindWithCredA(
    DomainControllerName: ?*i8,
    DnsDomainName: ?*i8,
    AuthIdentity: ?*opaque{},
    phDS: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsBindWithSpnW(
    DomainControllerName: ?*u16,
    DnsDomainName: ?*u16,
    AuthIdentity: ?*opaque{},
    ServicePrincipalName: ?*u16,
    phDS: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsBindWithSpnA(
    DomainControllerName: ?*i8,
    DnsDomainName: ?*i8,
    AuthIdentity: ?*opaque{},
    ServicePrincipalName: ?*i8,
    phDS: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsBindWithSpnExW(
    DomainControllerName: ?*u16,
    DnsDomainName: ?*u16,
    AuthIdentity: ?*opaque{},
    ServicePrincipalName: ?*u16,
    BindFlags: u32,
    phDS: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsBindWithSpnExA(
    DomainControllerName: ?*i8,
    DnsDomainName: ?*i8,
    AuthIdentity: ?*opaque{},
    ServicePrincipalName: ?*i8,
    BindFlags: u32,
    phDS: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsBindByInstanceW(
    ServerName: ?*u16,
    Annotation: ?*u16,
    InstanceGuid: ?*Guid,
    DnsDomainName: ?*u16,
    AuthIdentity: ?*opaque{},
    ServicePrincipalName: ?*u16,
    BindFlags: u32,
    phDS: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsBindByInstanceA(
    ServerName: ?*i8,
    Annotation: ?*i8,
    InstanceGuid: ?*Guid,
    DnsDomainName: ?*i8,
    AuthIdentity: ?*opaque{},
    ServicePrincipalName: ?*i8,
    BindFlags: u32,
    phDS: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsBindToISTGW(
    SiteName: ?*u16,
    phDS: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsBindToISTGA(
    SiteName: ?*i8,
    phDS: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsBindingSetTimeout(
    hDS: HANDLE,
    cTimeoutSecs: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsUnBindW(
    phDS: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsUnBindA(
    phDS: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsMakePasswordCredentialsW(
    User: ?*u16,
    Domain: ?*u16,
    Password: ?*u16,
    pAuthIdentity: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsMakePasswordCredentialsA(
    User: ?*i8,
    Domain: ?*i8,
    Password: ?*i8,
    pAuthIdentity: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsFreePasswordCredentials(
    AuthIdentity: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsCrackNamesW(
    hDS: HANDLE,
    flags: DS_NAME_FLAGS,
    formatOffered: DS_NAME_FORMAT,
    formatDesired: DS_NAME_FORMAT,
    cNames: u32,
    rpNames: ?*?*u16,
    ppResult: ?*?*DS_NAME_RESULTW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsCrackNamesA(
    hDS: HANDLE,
    flags: DS_NAME_FLAGS,
    formatOffered: DS_NAME_FORMAT,
    formatDesired: DS_NAME_FORMAT,
    cNames: u32,
    rpNames: ?*?*i8,
    ppResult: ?*?*DS_NAME_RESULTA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsFreeNameResultW(
    pResult: ?*DS_NAME_RESULTW,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsFreeNameResultA(
    pResult: ?*DS_NAME_RESULTA,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsGetSpnA(
    ServiceType: DS_SPN_NAME_TYPE,
    ServiceClass: ?*i8,
    ServiceName: ?*i8,
    InstancePort: u16,
    cInstanceNames: u16,
    pInstanceNames: ?*?*i8,
    pInstancePorts: ?*u16,
    pcSpn: ?*u32,
    prpszSpn: ?*?*?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsGetSpnW(
    ServiceType: DS_SPN_NAME_TYPE,
    ServiceClass: ?*u16,
    ServiceName: ?*u16,
    InstancePort: u16,
    cInstanceNames: u16,
    pInstanceNames: ?*?*u16,
    pInstancePorts: ?*u16,
    pcSpn: ?*u32,
    prpszSpn: ?*?*?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsFreeSpnArrayA(
    cSpn: u32,
    rpszSpn: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsFreeSpnArrayW(
    cSpn: u32,
    rpszSpn: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsWriteAccountSpnA(
    hDS: HANDLE,
    Operation: DS_SPN_WRITE_OP,
    pszAccount: ?*i8,
    cSpn: u32,
    rpszSpn: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsWriteAccountSpnW(
    hDS: HANDLE,
    Operation: DS_SPN_WRITE_OP,
    pszAccount: ?*u16,
    cSpn: u32,
    rpszSpn: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsClientMakeSpnForTargetServerW(
    ServiceClass: ?*u16,
    ServiceName: ?*u16,
    pcSpnLength: ?*u32,
    pszSpn: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsClientMakeSpnForTargetServerA(
    ServiceClass: ?*i8,
    ServiceName: ?*i8,
    pcSpnLength: ?*u32,
    pszSpn: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsServerRegisterSpnA(
    Operation: DS_SPN_WRITE_OP,
    ServiceClass: ?*i8,
    UserObjectDN: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsServerRegisterSpnW(
    Operation: DS_SPN_WRITE_OP,
    ServiceClass: ?*u16,
    UserObjectDN: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsReplicaSyncA(
    hDS: HANDLE,
    NameContext: ?*i8,
    pUuidDsaSrc: ?*Guid,
    Options: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsReplicaSyncW(
    hDS: HANDLE,
    NameContext: ?*u16,
    pUuidDsaSrc: ?*Guid,
    Options: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsReplicaAddA(
    hDS: HANDLE,
    NameContext: ?*i8,
    SourceDsaDn: ?*i8,
    TransportDn: ?*i8,
    SourceDsaAddress: ?*i8,
    pSchedule: ?*SCHEDULE,
    Options: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsReplicaAddW(
    hDS: HANDLE,
    NameContext: ?*u16,
    SourceDsaDn: ?*u16,
    TransportDn: ?*u16,
    SourceDsaAddress: ?*u16,
    pSchedule: ?*SCHEDULE,
    Options: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsReplicaDelA(
    hDS: HANDLE,
    NameContext: ?*i8,
    DsaSrc: ?*i8,
    Options: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsReplicaDelW(
    hDS: HANDLE,
    NameContext: ?*u16,
    DsaSrc: ?*u16,
    Options: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsReplicaModifyA(
    hDS: HANDLE,
    NameContext: ?*i8,
    pUuidSourceDsa: ?*Guid,
    TransportDn: ?*i8,
    SourceDsaAddress: ?*i8,
    pSchedule: ?*SCHEDULE,
    ReplicaFlags: u32,
    ModifyFields: u32,
    Options: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsReplicaModifyW(
    hDS: HANDLE,
    NameContext: ?*u16,
    pUuidSourceDsa: ?*Guid,
    TransportDn: ?*u16,
    SourceDsaAddress: ?*u16,
    pSchedule: ?*SCHEDULE,
    ReplicaFlags: u32,
    ModifyFields: u32,
    Options: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsReplicaUpdateRefsA(
    hDS: HANDLE,
    NameContext: ?*i8,
    DsaDest: ?*i8,
    pUuidDsaDest: ?*Guid,
    Options: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsReplicaUpdateRefsW(
    hDS: HANDLE,
    NameContext: ?*u16,
    DsaDest: ?*u16,
    pUuidDsaDest: ?*Guid,
    Options: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsReplicaSyncAllA(
    hDS: HANDLE,
    pszNameContext: ?*i8,
    ulFlags: u32,
    pFnCallBack: ?*?*?*?*?*?*?*?*?*?*?*BOOL,
    pCallbackData: ?*opaque{},
    pErrors: ?*?*?*DS_REPSYNCALL_ERRINFOA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsReplicaSyncAllW(
    hDS: HANDLE,
    pszNameContext: ?*u16,
    ulFlags: u32,
    pFnCallBack: ?*?*?*?*?*?*?*?*?*?*?*BOOL,
    pCallbackData: ?*opaque{},
    pErrors: ?*?*?*DS_REPSYNCALL_ERRINFOW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsRemoveDsServerW(
    hDs: HANDLE,
    ServerDN: ?*u16,
    DomainDN: ?*u16,
    fLastDcInDomain: ?*i32,
    fCommit: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsRemoveDsServerA(
    hDs: HANDLE,
    ServerDN: ?*i8,
    DomainDN: ?*i8,
    fLastDcInDomain: ?*i32,
    fCommit: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsRemoveDsDomainW(
    hDs: HANDLE,
    DomainDN: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsRemoveDsDomainA(
    hDs: HANDLE,
    DomainDN: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsListSitesA(
    hDs: HANDLE,
    ppSites: ?*?*DS_NAME_RESULTA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsListSitesW(
    hDs: HANDLE,
    ppSites: ?*?*DS_NAME_RESULTW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsListServersInSiteA(
    hDs: HANDLE,
    site: ?*i8,
    ppServers: ?*?*DS_NAME_RESULTA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsListServersInSiteW(
    hDs: HANDLE,
    site: ?*u16,
    ppServers: ?*?*DS_NAME_RESULTW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsListDomainsInSiteA(
    hDs: HANDLE,
    site: ?*i8,
    ppDomains: ?*?*DS_NAME_RESULTA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsListDomainsInSiteW(
    hDs: HANDLE,
    site: ?*u16,
    ppDomains: ?*?*DS_NAME_RESULTW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsListServersForDomainInSiteA(
    hDs: HANDLE,
    domain: ?*i8,
    site: ?*i8,
    ppServers: ?*?*DS_NAME_RESULTA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsListServersForDomainInSiteW(
    hDs: HANDLE,
    domain: ?*u16,
    site: ?*u16,
    ppServers: ?*?*DS_NAME_RESULTW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsListInfoForServerA(
    hDs: HANDLE,
    server: ?*i8,
    ppInfo: ?*?*DS_NAME_RESULTA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsListInfoForServerW(
    hDs: HANDLE,
    server: ?*u16,
    ppInfo: ?*?*DS_NAME_RESULTW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsListRolesA(
    hDs: HANDLE,
    ppRoles: ?*?*DS_NAME_RESULTA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsListRolesW(
    hDs: HANDLE,
    ppRoles: ?*?*DS_NAME_RESULTW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsQuerySitesByCostW(
    hDS: HANDLE,
    pwszFromSite: ?*u16,
    rgwszToSites: ?*?*u16,
    cToSites: u32,
    dwFlags: u32,
    prgSiteInfo: ?*?*DS_SITE_COST_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsQuerySitesByCostA(
    hDS: HANDLE,
    pszFromSite: ?*i8,
    rgszToSites: ?*?*i8,
    cToSites: u32,
    dwFlags: u32,
    prgSiteInfo: ?*?*DS_SITE_COST_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsQuerySitesFree(
    rgSiteInfo: ?*DS_SITE_COST_INFO,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsMapSchemaGuidsA(
    hDs: HANDLE,
    cGuids: u32,
    rGuids: ?*Guid,
    ppGuidMap: ?*?*DS_SCHEMA_GUID_MAPA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsFreeSchemaGuidMapA(
    pGuidMap: ?*DS_SCHEMA_GUID_MAPA,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsMapSchemaGuidsW(
    hDs: HANDLE,
    cGuids: u32,
    rGuids: ?*Guid,
    ppGuidMap: ?*?*DS_SCHEMA_GUID_MAPW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsFreeSchemaGuidMapW(
    pGuidMap: ?*DS_SCHEMA_GUID_MAPW,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsGetDomainControllerInfoA(
    hDs: HANDLE,
    DomainName: ?*i8,
    InfoLevel: u32,
    pcOut: ?*u32,
    ppInfo: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsGetDomainControllerInfoW(
    hDs: HANDLE,
    DomainName: ?*u16,
    InfoLevel: u32,
    pcOut: ?*u32,
    ppInfo: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsFreeDomainControllerInfoA(
    InfoLevel: u32,
    cInfo: u32,
    pInfo: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsFreeDomainControllerInfoW(
    InfoLevel: u32,
    cInfo: u32,
    pInfo: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsReplicaConsistencyCheck(
    hDS: HANDLE,
    TaskID: DS_KCC_TASKID,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsReplicaVerifyObjectsW(
    hDS: HANDLE,
    NameContext: ?*u16,
    pUuidDsaSrc: ?*Guid,
    ulOptions: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsReplicaVerifyObjectsA(
    hDS: HANDLE,
    NameContext: ?*i8,
    pUuidDsaSrc: ?*Guid,
    ulOptions: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsReplicaGetInfoW(
    hDS: HANDLE,
    InfoType: DS_REPL_INFO_TYPE,
    pszObject: ?*u16,
    puuidForSourceDsaObjGuid: ?*Guid,
    ppInfo: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsReplicaGetInfo2W(
    hDS: HANDLE,
    InfoType: DS_REPL_INFO_TYPE,
    pszObject: ?*u16,
    puuidForSourceDsaObjGuid: ?*Guid,
    pszAttributeName: ?*u16,
    pszValue: ?*u16,
    dwFlags: u32,
    dwEnumerationContext: u32,
    ppInfo: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsReplicaFreeInfo(
    InfoType: DS_REPL_INFO_TYPE,
    pInfo: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsAddSidHistoryW(
    hDS: HANDLE,
    Flags: u32,
    SrcDomain: ?*u16,
    SrcPrincipal: ?*u16,
    SrcDomainController: ?*u16,
    SrcDomainCreds: ?*opaque{},
    DstDomain: ?*u16,
    DstPrincipal: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsAddSidHistoryA(
    hDS: HANDLE,
    Flags: u32,
    SrcDomain: ?*i8,
    SrcPrincipal: ?*i8,
    SrcDomainController: ?*i8,
    SrcDomainCreds: ?*opaque{},
    DstDomain: ?*i8,
    DstPrincipal: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsInheritSecurityIdentityW(
    hDS: HANDLE,
    Flags: u32,
    SrcPrincipal: ?*u16,
    DstPrincipal: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTDSAPI" fn DsInheritSecurityIdentityA(
    hDS: HANDLE,
    Flags: u32,
    SrcPrincipal: ?*i8,
    DstPrincipal: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DSROLE" fn DsRoleGetPrimaryDomainInformation(
    lpServer: ?*u16,
    InfoLevel: DSROLE_PRIMARY_DOMAIN_INFO_LEVEL,
    Buffer: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "DSROLE" fn DsRoleFreeMemory(
    Buffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "logoncli" fn DsGetDcNameA(
    ComputerName: ?*i8,
    DomainName: ?*i8,
    DomainGuid: ?*Guid,
    SiteName: ?*i8,
    Flags: u32,
    DomainControllerInfo: ?*?*DOMAIN_CONTROLLER_INFOA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "logoncli" fn DsGetDcNameW(
    ComputerName: ?*u16,
    DomainName: ?*u16,
    DomainGuid: ?*Guid,
    SiteName: ?*u16,
    Flags: u32,
    DomainControllerInfo: ?*?*DOMAIN_CONTROLLER_INFOW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "logoncli" fn DsGetSiteNameA(
    ComputerName: ?*i8,
    SiteName: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "logoncli" fn DsGetSiteNameW(
    ComputerName: ?*u16,
    SiteName: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "logoncli" fn DsValidateSubnetNameW(
    SubnetName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "logoncli" fn DsValidateSubnetNameA(
    SubnetName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "logoncli" fn DsAddressToSiteNamesW(
    ComputerName: ?*u16,
    EntryCount: u32,
    SocketAddresses: ?*SOCKET_ADDRESS,
    SiteNames: ?*?*?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "logoncli" fn DsAddressToSiteNamesA(
    ComputerName: ?*i8,
    EntryCount: u32,
    SocketAddresses: ?*SOCKET_ADDRESS,
    SiteNames: ?*?*?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "logoncli" fn DsAddressToSiteNamesExW(
    ComputerName: ?*u16,
    EntryCount: u32,
    SocketAddresses: ?*SOCKET_ADDRESS,
    SiteNames: ?*?*?*u16,
    SubnetNames: ?*?*?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "logoncli" fn DsAddressToSiteNamesExA(
    ComputerName: ?*i8,
    EntryCount: u32,
    SocketAddresses: ?*SOCKET_ADDRESS,
    SiteNames: ?*?*?*i8,
    SubnetNames: ?*?*?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "logoncli" fn DsEnumerateDomainTrustsW(
    ServerName: ?*u16,
    Flags: u32,
    Domains: ?*?*DS_DOMAIN_TRUSTSW,
    DomainCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "logoncli" fn DsEnumerateDomainTrustsA(
    ServerName: ?*i8,
    Flags: u32,
    Domains: ?*?*DS_DOMAIN_TRUSTSA,
    DomainCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "logoncli" fn DsGetForestTrustInformationW(
    ServerName: ?*u16,
    TrustedDomainName: ?*u16,
    Flags: u32,
    ForestTrustInfo: ?*?*LSA_FOREST_TRUST_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "logoncli" fn DsMergeForestTrustInformationW(
    DomainName: ?*u16,
    NewForestTrustInfo: ?*LSA_FOREST_TRUST_INFORMATION,
    OldForestTrustInfo: ?*LSA_FOREST_TRUST_INFORMATION,
    MergedForestTrustInfo: ?*?*LSA_FOREST_TRUST_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "logoncli" fn DsGetDcSiteCoverageW(
    ServerName: ?*u16,
    EntryCount: ?*u32,
    SiteNames: ?*?*?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "logoncli" fn DsGetDcSiteCoverageA(
    ServerName: ?*i8,
    EntryCount: ?*u32,
    SiteNames: ?*?*?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "logoncli" fn DsDeregisterDnsHostRecordsW(
    ServerName: ?*u16,
    DnsDomainName: ?*u16,
    DomainGuid: ?*Guid,
    DsaGuid: ?*Guid,
    DnsHostName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "logoncli" fn DsDeregisterDnsHostRecordsA(
    ServerName: ?*i8,
    DnsDomainName: ?*i8,
    DomainGuid: ?*Guid,
    DsaGuid: ?*Guid,
    DnsHostName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "logoncli" fn DsGetDcOpenW(
    DnsName: ?*u16,
    OptionFlags: u32,
    SiteName: ?*u16,
    DomainGuid: ?*Guid,
    DnsForestName: ?*u16,
    DcFlags: u32,
    RetGetDcContext: ?*GetDcContextHandle,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "logoncli" fn DsGetDcOpenA(
    DnsName: ?*i8,
    OptionFlags: u32,
    SiteName: ?*i8,
    DomainGuid: ?*Guid,
    DnsForestName: ?*i8,
    DcFlags: u32,
    RetGetDcContext: ?*GetDcContextHandle,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "logoncli" fn DsGetDcNextW(
    GetDcContextHandle: HANDLE,
    SockAddressCount: ?*u32,
    SockAddresses: ?*?*SOCKET_ADDRESS,
    DnsHostName: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "logoncli" fn DsGetDcNextA(
    GetDcContextHandle: HANDLE,
    SockAddressCount: ?*u32,
    SockAddresses: ?*?*SOCKET_ADDRESS,
    DnsHostName: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "logoncli" fn DsGetDcCloseW(
    GetDcContextHandle: GetDcContextHandle,
) callconv(@import("std").os.windows.WINAPI) void;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const DSBROWSEINFO = DSBROWSEINFOA;
        pub const DSBITEM = DSBITEMA;
        pub const DS_NAME_RESULT_ITEM = DS_NAME_RESULT_ITEMA;
        pub const DS_NAME_RESULT = DS_NAME_RESULTA;
        pub const DS_REPSYNCALL_SYNC = DS_REPSYNCALL_SYNCA;
        pub const DS_REPSYNCALL_ERRINFO = DS_REPSYNCALL_ERRINFOA;
        pub const DS_REPSYNCALL_UPDATE = DS_REPSYNCALL_UPDATEA;
        pub const DS_SCHEMA_GUID_MAP = DS_SCHEMA_GUID_MAPA;
        pub const DS_DOMAIN_CONTROLLER_INFO_1 = DS_DOMAIN_CONTROLLER_INFO_1A;
        pub const DS_DOMAIN_CONTROLLER_INFO_2 = DS_DOMAIN_CONTROLLER_INFO_2A;
        pub const DS_DOMAIN_CONTROLLER_INFO_3 = DS_DOMAIN_CONTROLLER_INFO_3A;
        pub const DOMAIN_CONTROLLER_INFO = DOMAIN_CONTROLLER_INFOA;
        pub const DS_DOMAIN_TRUSTS = DS_DOMAIN_TRUSTSA;
        pub const DsBrowseForContainer = DsBrowseForContainerA;
        pub const DsMakeSpn = DsMakeSpnA;
        pub const DsCrackSpn = DsCrackSpnA;
        pub const DsQuoteRdnValue = DsQuoteRdnValueA;
        pub const DsUnquoteRdnValue = DsUnquoteRdnValueA;
        pub const DsCrackUnquotedMangledRdn = DsCrackUnquotedMangledRdnA;
        pub const DsIsMangledRdnValue = DsIsMangledRdnValueA;
        pub const DsIsMangledDn = DsIsMangledDnA;
        pub const DsCrackSpn2 = DsCrackSpn2A;
        pub const DsBind = DsBindA;
        pub const DsBindWithCred = DsBindWithCredA;
        pub const DsBindWithSpn = DsBindWithSpnA;
        pub const DsBindWithSpnEx = DsBindWithSpnExA;
        pub const DsBindByInstance = DsBindByInstanceA;
        pub const DsBindToISTG = DsBindToISTGA;
        pub const DsUnBind = DsUnBindA;
        pub const DsMakePasswordCredentials = DsMakePasswordCredentialsA;
        pub const DsCrackNames = DsCrackNamesA;
        pub const DsFreeNameResult = DsFreeNameResultA;
        pub const DsGetSpn = DsGetSpnA;
        pub const DsFreeSpnArray = DsFreeSpnArrayA;
        pub const DsWriteAccountSpn = DsWriteAccountSpnA;
        pub const DsClientMakeSpnForTargetServer = DsClientMakeSpnForTargetServerA;
        pub const DsServerRegisterSpn = DsServerRegisterSpnA;
        pub const DsReplicaSync = DsReplicaSyncA;
        pub const DsReplicaAdd = DsReplicaAddA;
        pub const DsReplicaDel = DsReplicaDelA;
        pub const DsReplicaModify = DsReplicaModifyA;
        pub const DsReplicaUpdateRefs = DsReplicaUpdateRefsA;
        pub const DsReplicaSyncAll = DsReplicaSyncAllA;
        pub const DsRemoveDsServer = DsRemoveDsServerA;
        pub const DsRemoveDsDomain = DsRemoveDsDomainA;
        pub const DsListSites = DsListSitesA;
        pub const DsListServersInSite = DsListServersInSiteA;
        pub const DsListDomainsInSite = DsListDomainsInSiteA;
        pub const DsListServersForDomainInSite = DsListServersForDomainInSiteA;
        pub const DsListInfoForServer = DsListInfoForServerA;
        pub const DsListRoles = DsListRolesA;
        pub const DsQuerySitesByCost = DsQuerySitesByCostA;
        pub const DsMapSchemaGuids = DsMapSchemaGuidsA;
        pub const DsFreeSchemaGuidMap = DsFreeSchemaGuidMapA;
        pub const DsGetDomainControllerInfo = DsGetDomainControllerInfoA;
        pub const DsFreeDomainControllerInfo = DsFreeDomainControllerInfoA;
        pub const DsReplicaVerifyObjects = DsReplicaVerifyObjectsA;
        pub const DsAddSidHistory = DsAddSidHistoryA;
        pub const DsInheritSecurityIdentity = DsInheritSecurityIdentityA;
        pub const DsGetDcName = DsGetDcNameA;
        pub const DsGetSiteName = DsGetSiteNameA;
        pub const DsValidateSubnetName = DsValidateSubnetNameA;
        pub const DsAddressToSiteNames = DsAddressToSiteNamesA;
        pub const DsAddressToSiteNamesEx = DsAddressToSiteNamesExA;
        pub const DsEnumerateDomainTrusts = DsEnumerateDomainTrustsA;
        pub const DsGetDcSiteCoverage = DsGetDcSiteCoverageA;
        pub const DsDeregisterDnsHostRecords = DsDeregisterDnsHostRecordsA;
        pub const DsGetDcOpen = DsGetDcOpenA;
        pub const DsGetDcNext = DsGetDcNextA;
    },
    .wide => struct {
        pub const DSBROWSEINFO = DSBROWSEINFOW;
        pub const DSBITEM = DSBITEMW;
        pub const DS_NAME_RESULT_ITEM = DS_NAME_RESULT_ITEMW;
        pub const DS_NAME_RESULT = DS_NAME_RESULTW;
        pub const DS_REPSYNCALL_SYNC = DS_REPSYNCALL_SYNCW;
        pub const DS_REPSYNCALL_ERRINFO = DS_REPSYNCALL_ERRINFOW;
        pub const DS_REPSYNCALL_UPDATE = DS_REPSYNCALL_UPDATEW;
        pub const DS_SCHEMA_GUID_MAP = DS_SCHEMA_GUID_MAPW;
        pub const DS_DOMAIN_CONTROLLER_INFO_1 = DS_DOMAIN_CONTROLLER_INFO_1W;
        pub const DS_DOMAIN_CONTROLLER_INFO_2 = DS_DOMAIN_CONTROLLER_INFO_2W;
        pub const DS_DOMAIN_CONTROLLER_INFO_3 = DS_DOMAIN_CONTROLLER_INFO_3W;
        pub const DOMAIN_CONTROLLER_INFO = DOMAIN_CONTROLLER_INFOW;
        pub const DS_DOMAIN_TRUSTS = DS_DOMAIN_TRUSTSW;
        pub const DsBrowseForContainer = DsBrowseForContainerW;
        pub const DsMakeSpn = DsMakeSpnW;
        pub const DsCrackSpn = DsCrackSpnW;
        pub const DsQuoteRdnValue = DsQuoteRdnValueW;
        pub const DsUnquoteRdnValue = DsUnquoteRdnValueW;
        pub const DsCrackUnquotedMangledRdn = DsCrackUnquotedMangledRdnW;
        pub const DsIsMangledRdnValue = DsIsMangledRdnValueW;
        pub const DsIsMangledDn = DsIsMangledDnW;
        pub const DsCrackSpn2 = DsCrackSpn2W;
        pub const DsBind = DsBindW;
        pub const DsBindWithCred = DsBindWithCredW;
        pub const DsBindWithSpn = DsBindWithSpnW;
        pub const DsBindWithSpnEx = DsBindWithSpnExW;
        pub const DsBindByInstance = DsBindByInstanceW;
        pub const DsBindToISTG = DsBindToISTGW;
        pub const DsUnBind = DsUnBindW;
        pub const DsMakePasswordCredentials = DsMakePasswordCredentialsW;
        pub const DsCrackNames = DsCrackNamesW;
        pub const DsFreeNameResult = DsFreeNameResultW;
        pub const DsGetSpn = DsGetSpnW;
        pub const DsFreeSpnArray = DsFreeSpnArrayW;
        pub const DsWriteAccountSpn = DsWriteAccountSpnW;
        pub const DsClientMakeSpnForTargetServer = DsClientMakeSpnForTargetServerW;
        pub const DsServerRegisterSpn = DsServerRegisterSpnW;
        pub const DsReplicaSync = DsReplicaSyncW;
        pub const DsReplicaAdd = DsReplicaAddW;
        pub const DsReplicaDel = DsReplicaDelW;
        pub const DsReplicaModify = DsReplicaModifyW;
        pub const DsReplicaUpdateRefs = DsReplicaUpdateRefsW;
        pub const DsReplicaSyncAll = DsReplicaSyncAllW;
        pub const DsRemoveDsServer = DsRemoveDsServerW;
        pub const DsRemoveDsDomain = DsRemoveDsDomainW;
        pub const DsListSites = DsListSitesW;
        pub const DsListServersInSite = DsListServersInSiteW;
        pub const DsListDomainsInSite = DsListDomainsInSiteW;
        pub const DsListServersForDomainInSite = DsListServersForDomainInSiteW;
        pub const DsListInfoForServer = DsListInfoForServerW;
        pub const DsListRoles = DsListRolesW;
        pub const DsQuerySitesByCost = DsQuerySitesByCostW;
        pub const DsMapSchemaGuids = DsMapSchemaGuidsW;
        pub const DsFreeSchemaGuidMap = DsFreeSchemaGuidMapW;
        pub const DsGetDomainControllerInfo = DsGetDomainControllerInfoW;
        pub const DsFreeDomainControllerInfo = DsFreeDomainControllerInfoW;
        pub const DsReplicaVerifyObjects = DsReplicaVerifyObjectsW;
        pub const DsAddSidHistory = DsAddSidHistoryW;
        pub const DsInheritSecurityIdentity = DsInheritSecurityIdentityW;
        pub const DsGetDcName = DsGetDcNameW;
        pub const DsGetSiteName = DsGetSiteNameW;
        pub const DsValidateSubnetName = DsValidateSubnetNameW;
        pub const DsAddressToSiteNames = DsAddressToSiteNamesW;
        pub const DsAddressToSiteNamesEx = DsAddressToSiteNamesExW;
        pub const DsEnumerateDomainTrusts = DsEnumerateDomainTrustsW;
        pub const DsGetDcSiteCoverage = DsGetDcSiteCoverageW;
        pub const DsDeregisterDnsHostRecords = DsDeregisterDnsHostRecordsW;
        pub const DsGetDcOpen = DsGetDcOpenW;
        pub const DsGetDcNext = DsGetDcNextW;
    },
    else => if (@import("builtin").is_test) struct {
        pub const DSBROWSEINFO = *opaque{};
        pub const DSBITEM = *opaque{};
        pub const DS_NAME_RESULT_ITEM = *opaque{};
        pub const DS_NAME_RESULT = *opaque{};
        pub const DS_REPSYNCALL_SYNC = *opaque{};
        pub const DS_REPSYNCALL_ERRINFO = *opaque{};
        pub const DS_REPSYNCALL_UPDATE = *opaque{};
        pub const DS_SCHEMA_GUID_MAP = *opaque{};
        pub const DS_DOMAIN_CONTROLLER_INFO_1 = *opaque{};
        pub const DS_DOMAIN_CONTROLLER_INFO_2 = *opaque{};
        pub const DS_DOMAIN_CONTROLLER_INFO_3 = *opaque{};
        pub const DOMAIN_CONTROLLER_INFO = *opaque{};
        pub const DS_DOMAIN_TRUSTS = *opaque{};
        pub const DsBrowseForContainer = *opaque{};
        pub const DsMakeSpn = *opaque{};
        pub const DsCrackSpn = *opaque{};
        pub const DsQuoteRdnValue = *opaque{};
        pub const DsUnquoteRdnValue = *opaque{};
        pub const DsCrackUnquotedMangledRdn = *opaque{};
        pub const DsIsMangledRdnValue = *opaque{};
        pub const DsIsMangledDn = *opaque{};
        pub const DsCrackSpn2 = *opaque{};
        pub const DsBind = *opaque{};
        pub const DsBindWithCred = *opaque{};
        pub const DsBindWithSpn = *opaque{};
        pub const DsBindWithSpnEx = *opaque{};
        pub const DsBindByInstance = *opaque{};
        pub const DsBindToISTG = *opaque{};
        pub const DsUnBind = *opaque{};
        pub const DsMakePasswordCredentials = *opaque{};
        pub const DsCrackNames = *opaque{};
        pub const DsFreeNameResult = *opaque{};
        pub const DsGetSpn = *opaque{};
        pub const DsFreeSpnArray = *opaque{};
        pub const DsWriteAccountSpn = *opaque{};
        pub const DsClientMakeSpnForTargetServer = *opaque{};
        pub const DsServerRegisterSpn = *opaque{};
        pub const DsReplicaSync = *opaque{};
        pub const DsReplicaAdd = *opaque{};
        pub const DsReplicaDel = *opaque{};
        pub const DsReplicaModify = *opaque{};
        pub const DsReplicaUpdateRefs = *opaque{};
        pub const DsReplicaSyncAll = *opaque{};
        pub const DsRemoveDsServer = *opaque{};
        pub const DsRemoveDsDomain = *opaque{};
        pub const DsListSites = *opaque{};
        pub const DsListServersInSite = *opaque{};
        pub const DsListDomainsInSite = *opaque{};
        pub const DsListServersForDomainInSite = *opaque{};
        pub const DsListInfoForServer = *opaque{};
        pub const DsListRoles = *opaque{};
        pub const DsQuerySitesByCost = *opaque{};
        pub const DsMapSchemaGuids = *opaque{};
        pub const DsFreeSchemaGuidMap = *opaque{};
        pub const DsGetDomainControllerInfo = *opaque{};
        pub const DsFreeDomainControllerInfo = *opaque{};
        pub const DsReplicaVerifyObjects = *opaque{};
        pub const DsAddSidHistory = *opaque{};
        pub const DsInheritSecurityIdentity = *opaque{};
        pub const DsGetDcName = *opaque{};
        pub const DsGetSiteName = *opaque{};
        pub const DsValidateSubnetName = *opaque{};
        pub const DsAddressToSiteNames = *opaque{};
        pub const DsAddressToSiteNamesEx = *opaque{};
        pub const DsEnumerateDomainTrusts = *opaque{};
        pub const DsGetDcSiteCoverage = *opaque{};
        pub const DsDeregisterDnsHostRecords = *opaque{};
        pub const DsGetDcOpen = *opaque{};
        pub const DsGetDcNext = *opaque{};
    } else struct {
        pub const DSBROWSEINFO = @compileError("'DSBROWSEINFO' requires that UNICODE be set to true or false in the root module");
        pub const DSBITEM = @compileError("'DSBITEM' requires that UNICODE be set to true or false in the root module");
        pub const DS_NAME_RESULT_ITEM = @compileError("'DS_NAME_RESULT_ITEM' requires that UNICODE be set to true or false in the root module");
        pub const DS_NAME_RESULT = @compileError("'DS_NAME_RESULT' requires that UNICODE be set to true or false in the root module");
        pub const DS_REPSYNCALL_SYNC = @compileError("'DS_REPSYNCALL_SYNC' requires that UNICODE be set to true or false in the root module");
        pub const DS_REPSYNCALL_ERRINFO = @compileError("'DS_REPSYNCALL_ERRINFO' requires that UNICODE be set to true or false in the root module");
        pub const DS_REPSYNCALL_UPDATE = @compileError("'DS_REPSYNCALL_UPDATE' requires that UNICODE be set to true or false in the root module");
        pub const DS_SCHEMA_GUID_MAP = @compileError("'DS_SCHEMA_GUID_MAP' requires that UNICODE be set to true or false in the root module");
        pub const DS_DOMAIN_CONTROLLER_INFO_1 = @compileError("'DS_DOMAIN_CONTROLLER_INFO_1' requires that UNICODE be set to true or false in the root module");
        pub const DS_DOMAIN_CONTROLLER_INFO_2 = @compileError("'DS_DOMAIN_CONTROLLER_INFO_2' requires that UNICODE be set to true or false in the root module");
        pub const DS_DOMAIN_CONTROLLER_INFO_3 = @compileError("'DS_DOMAIN_CONTROLLER_INFO_3' requires that UNICODE be set to true or false in the root module");
        pub const DOMAIN_CONTROLLER_INFO = @compileError("'DOMAIN_CONTROLLER_INFO' requires that UNICODE be set to true or false in the root module");
        pub const DS_DOMAIN_TRUSTS = @compileError("'DS_DOMAIN_TRUSTS' requires that UNICODE be set to true or false in the root module");
        pub const DsBrowseForContainer = @compileError("'DsBrowseForContainer' requires that UNICODE be set to true or false in the root module");
        pub const DsMakeSpn = @compileError("'DsMakeSpn' requires that UNICODE be set to true or false in the root module");
        pub const DsCrackSpn = @compileError("'DsCrackSpn' requires that UNICODE be set to true or false in the root module");
        pub const DsQuoteRdnValue = @compileError("'DsQuoteRdnValue' requires that UNICODE be set to true or false in the root module");
        pub const DsUnquoteRdnValue = @compileError("'DsUnquoteRdnValue' requires that UNICODE be set to true or false in the root module");
        pub const DsCrackUnquotedMangledRdn = @compileError("'DsCrackUnquotedMangledRdn' requires that UNICODE be set to true or false in the root module");
        pub const DsIsMangledRdnValue = @compileError("'DsIsMangledRdnValue' requires that UNICODE be set to true or false in the root module");
        pub const DsIsMangledDn = @compileError("'DsIsMangledDn' requires that UNICODE be set to true or false in the root module");
        pub const DsCrackSpn2 = @compileError("'DsCrackSpn2' requires that UNICODE be set to true or false in the root module");
        pub const DsBind = @compileError("'DsBind' requires that UNICODE be set to true or false in the root module");
        pub const DsBindWithCred = @compileError("'DsBindWithCred' requires that UNICODE be set to true or false in the root module");
        pub const DsBindWithSpn = @compileError("'DsBindWithSpn' requires that UNICODE be set to true or false in the root module");
        pub const DsBindWithSpnEx = @compileError("'DsBindWithSpnEx' requires that UNICODE be set to true or false in the root module");
        pub const DsBindByInstance = @compileError("'DsBindByInstance' requires that UNICODE be set to true or false in the root module");
        pub const DsBindToISTG = @compileError("'DsBindToISTG' requires that UNICODE be set to true or false in the root module");
        pub const DsUnBind = @compileError("'DsUnBind' requires that UNICODE be set to true or false in the root module");
        pub const DsMakePasswordCredentials = @compileError("'DsMakePasswordCredentials' requires that UNICODE be set to true or false in the root module");
        pub const DsCrackNames = @compileError("'DsCrackNames' requires that UNICODE be set to true or false in the root module");
        pub const DsFreeNameResult = @compileError("'DsFreeNameResult' requires that UNICODE be set to true or false in the root module");
        pub const DsGetSpn = @compileError("'DsGetSpn' requires that UNICODE be set to true or false in the root module");
        pub const DsFreeSpnArray = @compileError("'DsFreeSpnArray' requires that UNICODE be set to true or false in the root module");
        pub const DsWriteAccountSpn = @compileError("'DsWriteAccountSpn' requires that UNICODE be set to true or false in the root module");
        pub const DsClientMakeSpnForTargetServer = @compileError("'DsClientMakeSpnForTargetServer' requires that UNICODE be set to true or false in the root module");
        pub const DsServerRegisterSpn = @compileError("'DsServerRegisterSpn' requires that UNICODE be set to true or false in the root module");
        pub const DsReplicaSync = @compileError("'DsReplicaSync' requires that UNICODE be set to true or false in the root module");
        pub const DsReplicaAdd = @compileError("'DsReplicaAdd' requires that UNICODE be set to true or false in the root module");
        pub const DsReplicaDel = @compileError("'DsReplicaDel' requires that UNICODE be set to true or false in the root module");
        pub const DsReplicaModify = @compileError("'DsReplicaModify' requires that UNICODE be set to true or false in the root module");
        pub const DsReplicaUpdateRefs = @compileError("'DsReplicaUpdateRefs' requires that UNICODE be set to true or false in the root module");
        pub const DsReplicaSyncAll = @compileError("'DsReplicaSyncAll' requires that UNICODE be set to true or false in the root module");
        pub const DsRemoveDsServer = @compileError("'DsRemoveDsServer' requires that UNICODE be set to true or false in the root module");
        pub const DsRemoveDsDomain = @compileError("'DsRemoveDsDomain' requires that UNICODE be set to true or false in the root module");
        pub const DsListSites = @compileError("'DsListSites' requires that UNICODE be set to true or false in the root module");
        pub const DsListServersInSite = @compileError("'DsListServersInSite' requires that UNICODE be set to true or false in the root module");
        pub const DsListDomainsInSite = @compileError("'DsListDomainsInSite' requires that UNICODE be set to true or false in the root module");
        pub const DsListServersForDomainInSite = @compileError("'DsListServersForDomainInSite' requires that UNICODE be set to true or false in the root module");
        pub const DsListInfoForServer = @compileError("'DsListInfoForServer' requires that UNICODE be set to true or false in the root module");
        pub const DsListRoles = @compileError("'DsListRoles' requires that UNICODE be set to true or false in the root module");
        pub const DsQuerySitesByCost = @compileError("'DsQuerySitesByCost' requires that UNICODE be set to true or false in the root module");
        pub const DsMapSchemaGuids = @compileError("'DsMapSchemaGuids' requires that UNICODE be set to true or false in the root module");
        pub const DsFreeSchemaGuidMap = @compileError("'DsFreeSchemaGuidMap' requires that UNICODE be set to true or false in the root module");
        pub const DsGetDomainControllerInfo = @compileError("'DsGetDomainControllerInfo' requires that UNICODE be set to true or false in the root module");
        pub const DsFreeDomainControllerInfo = @compileError("'DsFreeDomainControllerInfo' requires that UNICODE be set to true or false in the root module");
        pub const DsReplicaVerifyObjects = @compileError("'DsReplicaVerifyObjects' requires that UNICODE be set to true or false in the root module");
        pub const DsAddSidHistory = @compileError("'DsAddSidHistory' requires that UNICODE be set to true or false in the root module");
        pub const DsInheritSecurityIdentity = @compileError("'DsInheritSecurityIdentity' requires that UNICODE be set to true or false in the root module");
        pub const DsGetDcName = @compileError("'DsGetDcName' requires that UNICODE be set to true or false in the root module");
        pub const DsGetSiteName = @compileError("'DsGetSiteName' requires that UNICODE be set to true or false in the root module");
        pub const DsValidateSubnetName = @compileError("'DsValidateSubnetName' requires that UNICODE be set to true or false in the root module");
        pub const DsAddressToSiteNames = @compileError("'DsAddressToSiteNames' requires that UNICODE be set to true or false in the root module");
        pub const DsAddressToSiteNamesEx = @compileError("'DsAddressToSiteNamesEx' requires that UNICODE be set to true or false in the root module");
        pub const DsEnumerateDomainTrusts = @compileError("'DsEnumerateDomainTrusts' requires that UNICODE be set to true or false in the root module");
        pub const DsGetDcSiteCoverage = @compileError("'DsGetDcSiteCoverage' requires that UNICODE be set to true or false in the root module");
        pub const DsDeregisterDnsHostRecords = @compileError("'DsDeregisterDnsHostRecords' requires that UNICODE be set to true or false in the root module");
        pub const DsGetDcOpen = @compileError("'DsGetDcOpen' requires that UNICODE be set to true or false in the root module");
        pub const DsGetDcNext = @compileError("'DsGetDcNext' requires that UNICODE be set to true or false in the root module");
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const HICON = @import("gdi.zig").HICON;
const HINSTANCE = @import("systemservices.zig").HINSTANCE;
const DLGPROC = @import("windowsandmessaging.zig").DLGPROC;
const LPARAM = @import("windowsandmessaging.zig").LPARAM;
const HANDLE = @import("systemservices.zig").HANDLE;
const BOOL = @import("systemservices.zig").BOOL;
const HWND = @import("windowsandmessaging.zig").HWND;
const HRESULT = @import("com.zig").HRESULT;
const VARIANT = @import("automation.zig").VARIANT;
const FILETIME = @import("windowsprogramming.zig").FILETIME;
const IEnumVARIANT = @import("automation.zig").IEnumVARIANT;
const IDataObject = @import("com.zig").IDataObject;
const SOCKET_ADDRESS = @import("winsock.zig").SOCKET_ADDRESS;
const LSA_FOREST_TRUST_INFORMATION = @import("security.zig").LSA_FOREST_TRUST_INFORMATION;

test "" {
    const constant_export_count = 0;
    const type_export_count = 265;
    const func_count = 158;
    const unicode_alias_count = 69;
    const type_import_count = 15;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
