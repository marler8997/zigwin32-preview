//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//

//
// functions
//

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ChangeServiceConfigA(
    hService: ?*SC_HANDLE__,
    dwServiceType: u32,
    dwStartType: u32,
    dwErrorControl: u32,
    lpBinaryPathName: ?*i8,
    lpLoadOrderGroup: ?*i8,
    lpdwTagId: ?*u32,
    lpDependencies: ?*i8,
    lpServiceStartName: ?*i8,
    lpPassword: ?*i8,
    lpDisplayName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ChangeServiceConfigW(
    hService: ?*SC_HANDLE__,
    dwServiceType: u32,
    dwStartType: u32,
    dwErrorControl: u32,
    lpBinaryPathName: ?*u16,
    lpLoadOrderGroup: ?*u16,
    lpdwTagId: ?*u32,
    lpDependencies: ?*u16,
    lpServiceStartName: ?*u16,
    lpPassword: ?*u16,
    lpDisplayName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CreateServiceA(
    hSCManager: ?*SC_HANDLE__,
    lpServiceName: ?*i8,
    lpDisplayName: ?*i8,
    dwDesiredAccess: u32,
    dwServiceType: u32,
    dwStartType: u32,
    dwErrorControl: u32,
    lpBinaryPathName: ?*i8,
    lpLoadOrderGroup: ?*i8,
    lpdwTagId: ?*u32,
    lpDependencies: ?*i8,
    lpServiceStartName: ?*i8,
    lpPassword: ?*i8,
) callconv(@import("std").os.windows.WINAPI) ?*SC_HANDLE__;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CreateServiceW(
    hSCManager: ?*SC_HANDLE__,
    lpServiceName: ?*u16,
    lpDisplayName: ?*u16,
    dwDesiredAccess: u32,
    dwServiceType: u32,
    dwStartType: u32,
    dwErrorControl: u32,
    lpBinaryPathName: ?*u16,
    lpLoadOrderGroup: ?*u16,
    lpdwTagId: ?*u32,
    lpDependencies: ?*u16,
    lpServiceStartName: ?*u16,
    lpPassword: ?*u16,
) callconv(@import("std").os.windows.WINAPI) ?*SC_HANDLE__;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const ChangeServiceConfig = ChangeServiceConfigA;
        pub const CreateService = CreateServiceA;
    },
    .wide => struct {
        pub const ChangeServiceConfig = ChangeServiceConfigW;
        pub const CreateService = CreateServiceW;
    },
    else => if (@import("builtin").is_test) struct {
        pub const ChangeServiceConfig = *opaque{};
        pub const CreateService = *opaque{};
    } else struct {
        pub const ChangeServiceConfig = @compileError("'ChangeServiceConfig' requires that UNICODE be set to true or false in the root module");
        pub const CreateService = @compileError("'CreateService' requires that UNICODE be set to true or false in the root module");
    },
};

//
// type imports
//
const SC_HANDLE__ = @import("security.zig").SC_HANDLE__;
const BOOL = @import("systemservices.zig").BOOL;

test "" {
    const constant_export_count = 0;
    const type_export_count = 0;
    const func_count = 4;
    const unicode_alias_count = 2;
    const type_import_count = 2;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
