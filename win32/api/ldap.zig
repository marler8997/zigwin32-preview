//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: LDAP_RETCODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LDAP_RETCODE = *opaque{
};
// --------------------------------------------------------
// Type: ldap
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ldap = extern struct {
    ld_sb: _ld_sb_e__Struct,
    ld_host: ?*i8,
    ld_version: u32,
    ld_lberoptions: u8,
    ld_deref: u32,
    ld_timelimit: u32,
    ld_sizelimit: u32,
    ld_errno: u32,
    ld_matched: ?*i8,
    ld_error: ?*i8,
    ld_msgid: u32,
    Reserved3: ?[*]u8,
    ld_cldaptries: u32,
    ld_cldaptimeout: u32,
    ld_refhoplimit: u32,
    ld_options: u32,
    // --------------------------------------------------------
    // Type: _ld_sb_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _ld_sb_e__Struct = extern struct {
        sb_sd: ?*opaque{},
        Reserved1: ?[*]u8,
        sb_naddr: ?*opaque{},
        Reserved2: ?[*]u8,
    };
};
// --------------------------------------------------------
// Type: LDAP_TIMEVAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LDAP_TIMEVAL = extern struct {
    tv_sec: i32,
    tv_usec: i32,
};
// --------------------------------------------------------
// Type: LDAP_BERVAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LDAP_BERVAL = extern struct {
    bv_len: u32,
    bv_val: ?*i8,
};
// --------------------------------------------------------
// Type: LDAPMessage
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LDAPMessage = extern struct {
    lm_msgid: u32,
    lm_msgtype: u32,
    lm_ber: ?*opaque{},
    lm_chain: ?*LDAPMessage,
    lm_next: ?*LDAPMessage,
    lm_time: u32,
    Connection: ?*ldap,
    Request: ?*opaque{},
    lm_returncode: u32,
    lm_referral: u16,
    lm_chased: u8,
    lm_eom: u8,
    ConnectionReferenced: u8,
};
// --------------------------------------------------------
// Type: ldapcontrolA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ldapcontrolA = extern struct {
    ldctl_oid: ?*i8,
    ldctl_value: LDAP_BERVAL,
    ldctl_iscritical: u8,
};
// --------------------------------------------------------
// Type: ldapcontrolW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ldapcontrolW = extern struct {
    ldctl_oid: ?*u16,
    ldctl_value: LDAP_BERVAL,
    ldctl_iscritical: u8,
};
// --------------------------------------------------------
// Type: ldapmodW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ldapmodW = extern struct {
    mod_op: u32,
    mod_type: ?*u16,
    mod_vals: _mod_vals_e__Union,
    // --------------------------------------------------------
    // Type: _mod_vals_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _mod_vals_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: ldapmodA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ldapmodA = extern struct {
    mod_op: u32,
    mod_type: ?*i8,
    mod_vals: _mod_vals_e__Union,
    // --------------------------------------------------------
    // Type: _mod_vals_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _mod_vals_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: berelement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const berelement = extern struct {
    @"opaque": ?*i8,
};
// --------------------------------------------------------
// Type: ldap_version_info
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ldap_version_info = extern struct {
    lv_size: u32,
    lv_major: u32,
    lv_minor: u32,
};
// --------------------------------------------------------
// Type: ldapapiinfoA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ldapapiinfoA = extern struct {
    ldapai_info_version: i32,
    ldapai_api_version: i32,
    ldapai_protocol_version: i32,
    ldapai_extensions: ?*?*i8,
    ldapai_vendor_name: ?*i8,
    ldapai_vendor_version: i32,
};
// --------------------------------------------------------
// Type: ldapapiinfoW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ldapapiinfoW = extern struct {
    ldapai_info_version: i32,
    ldapai_api_version: i32,
    ldapai_protocol_version: i32,
    ldapai_extensions: ?*?*u16,
    ldapai_vendor_name: ?*u16,
    ldapai_vendor_version: i32,
};
// --------------------------------------------------------
// Type: LDAPAPIFeatureInfoA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LDAPAPIFeatureInfoA = extern struct {
    ldapaif_info_version: i32,
    ldapaif_name: ?*i8,
    ldapaif_version: i32,
};
// --------------------------------------------------------
// Type: LDAPAPIFeatureInfoW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LDAPAPIFeatureInfoW = extern struct {
    ldapaif_info_version: i32,
    ldapaif_name: ?*u16,
    ldapaif_version: i32,
};
// --------------------------------------------------------
// Type: DBGPRINT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DBGPRINT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ldapsearch
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ldapsearch = opaque {
};
// --------------------------------------------------------
// Type: ldapsortkeyW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ldapsortkeyW = extern struct {
    sk_attrtype: ?*u16,
    sk_matchruleoid: ?*u16,
    sk_reverseorder: u8,
};
// --------------------------------------------------------
// Type: ldapsortkeyA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ldapsortkeyA = extern struct {
    sk_attrtype: ?*i8,
    sk_matchruleoid: ?*i8,
    sk_reverseorder: u8,
};
// --------------------------------------------------------
// Type: ldapvlvinfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ldapvlvinfo = extern struct {
    ldvlv_version: i32,
    ldvlv_before_count: u32,
    ldvlv_after_count: u32,
    ldvlv_offset: u32,
    ldvlv_count: u32,
    ldvlv_attrvalue: ?*LDAP_BERVAL,
    ldvlv_context: ?*LDAP_BERVAL,
    ldvlv_extradata: ?*opaque{},
};
// --------------------------------------------------------
// Type: QUERYFORCONNECTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QUERYFORCONNECTION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: NOTIFYOFNEWCONNECTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NOTIFYOFNEWCONNECTION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DEREFERENCECONNECTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DEREFERENCECONNECTION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LDAP_REFERRAL_CALLBACK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LDAP_REFERRAL_CALLBACK = extern struct {
    SizeOfCallbacks: u32,
    QueryForConnection: ?*QUERYFORCONNECTION,
    NotifyRoutine: ?*NOTIFYOFNEWCONNECTION,
    DereferenceRoutine: ?*DEREFERENCECONNECTION,
};
// --------------------------------------------------------
// Type: QUERYCLIENTCERT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QUERYCLIENTCERT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VERIFYSERVERCERT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VERIFYSERVERCERT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_openW(
    HostName: ?*u16,
    PortNumber: u32,
) callconv(@import("std").os.windows.WINAPI) ?*ldap;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_openA(
    HostName: ?*i8,
    PortNumber: u32,
) callconv(@import("std").os.windows.WINAPI) ?*ldap;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_initW(
    HostName: ?*u16,
    PortNumber: u32,
) callconv(@import("std").os.windows.WINAPI) ?*ldap;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_initA(
    HostName: ?*i8,
    PortNumber: u32,
) callconv(@import("std").os.windows.WINAPI) ?*ldap;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_sslinitW(
    HostName: ?*u16,
    PortNumber: u32,
    secure: i32,
) callconv(@import("std").os.windows.WINAPI) ?*ldap;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_sslinitA(
    HostName: ?*i8,
    PortNumber: u32,
    secure: i32,
) callconv(@import("std").os.windows.WINAPI) ?*ldap;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_connect(
    ld: ?*ldap,
    timeout: ?*LDAP_TIMEVAL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_open(
    HostName: ?*i8,
    PortNumber: u32,
) callconv(@import("std").os.windows.WINAPI) ?*ldap;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_init(
    HostName: ?*i8,
    PortNumber: u32,
) callconv(@import("std").os.windows.WINAPI) ?*ldap;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_sslinit(
    HostName: ?*i8,
    PortNumber: u32,
    secure: i32,
) callconv(@import("std").os.windows.WINAPI) ?*ldap;

// set_last_errror=True (can and should we use this?)
pub extern "WLDAP32" fn cldap_openW(
    HostName: ?*u16,
    PortNumber: u32,
) callconv(@import("std").os.windows.WINAPI) ?*ldap;

// set_last_errror=True (can and should we use this?)
pub extern "WLDAP32" fn cldap_openA(
    HostName: ?*i8,
    PortNumber: u32,
) callconv(@import("std").os.windows.WINAPI) ?*ldap;

// set_last_errror=True (can and should we use this?)
pub extern "WLDAP32" fn cldap_open(
    HostName: ?*i8,
    PortNumber: u32,
) callconv(@import("std").os.windows.WINAPI) ?*ldap;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_unbind(
    ld: ?*ldap,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_unbind_s(
    ld: ?*ldap,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_get_option(
    ld: ?*ldap,
    option: i32,
    outvalue: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_get_optionW(
    ld: ?*ldap,
    option: i32,
    outvalue: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_set_option(
    ld: ?*ldap,
    option: i32,
    invalue: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_set_optionW(
    ld: ?*ldap,
    option: i32,
    invalue: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_simple_bindW(
    ld: ?*ldap,
    dn: ?*u16,
    passwd: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_simple_bindA(
    ld: ?*ldap,
    dn: ?*i8,
    passwd: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_simple_bind_sW(
    ld: ?*ldap,
    dn: ?*u16,
    passwd: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_simple_bind_sA(
    ld: ?*ldap,
    dn: ?*i8,
    passwd: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_bindW(
    ld: ?*ldap,
    dn: ?*u16,
    cred: ?*u16,
    method: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_bindA(
    ld: ?*ldap,
    dn: ?*i8,
    cred: ?*i8,
    method: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_bind_sW(
    ld: ?*ldap,
    dn: ?*u16,
    cred: ?*u16,
    method: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_bind_sA(
    ld: ?*ldap,
    dn: ?*i8,
    cred: ?*i8,
    method: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_sasl_bindA(
    ExternalHandle: ?*ldap,
    DistName: ?*i8,
    AuthMechanism: ?*i8,
    cred: ?*LDAP_BERVAL,
    ServerCtrls: ?*?*ldapcontrolA,
    ClientCtrls: ?*?*ldapcontrolA,
    MessageNumber: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_sasl_bindW(
    ExternalHandle: ?*ldap,
    DistName: ?*u16,
    AuthMechanism: ?*u16,
    cred: ?*LDAP_BERVAL,
    ServerCtrls: ?*?*ldapcontrolW,
    ClientCtrls: ?*?*ldapcontrolW,
    MessageNumber: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_sasl_bind_sA(
    ExternalHandle: ?*ldap,
    DistName: ?*i8,
    AuthMechanism: ?*i8,
    cred: ?*LDAP_BERVAL,
    ServerCtrls: ?*?*ldapcontrolA,
    ClientCtrls: ?*?*ldapcontrolA,
    ServerData: ?*?*LDAP_BERVAL,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_sasl_bind_sW(
    ExternalHandle: ?*ldap,
    DistName: ?*u16,
    AuthMechanism: ?*u16,
    cred: ?*LDAP_BERVAL,
    ServerCtrls: ?*?*ldapcontrolW,
    ClientCtrls: ?*?*ldapcontrolW,
    ServerData: ?*?*LDAP_BERVAL,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_simple_bind(
    ld: ?*ldap,
    dn: ?*i8,
    passwd: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_simple_bind_s(
    ld: ?*ldap,
    dn: ?*i8,
    passwd: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_bind(
    ld: ?*ldap,
    dn: ?*i8,
    cred: ?*i8,
    method: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_bind_s(
    ld: ?*ldap,
    dn: ?*i8,
    cred: ?*i8,
    method: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_searchW(
    ld: ?*ldap,
    base: ?*u16,
    scope: u32,
    filter: ?*u16,
    attrs: ?*?*u16,
    attrsonly: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_searchA(
    ld: ?*ldap,
    base: ?*i8,
    scope: u32,
    filter: ?*i8,
    attrs: ?*?*i8,
    attrsonly: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_search_sW(
    ld: ?*ldap,
    base: ?*u16,
    scope: u32,
    filter: ?*u16,
    attrs: ?*?*u16,
    attrsonly: u32,
    res: ?*?*LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_search_sA(
    ld: ?*ldap,
    base: ?*i8,
    scope: u32,
    filter: ?*i8,
    attrs: ?*?*i8,
    attrsonly: u32,
    res: ?*?*LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_search_stW(
    ld: ?*ldap,
    base: ?*u16,
    scope: u32,
    filter: ?*u16,
    attrs: ?*?*u16,
    attrsonly: u32,
    timeout: ?*LDAP_TIMEVAL,
    res: ?*?*LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_search_stA(
    ld: ?*ldap,
    base: ?*i8,
    scope: u32,
    filter: ?*i8,
    attrs: ?*?*i8,
    attrsonly: u32,
    timeout: ?*LDAP_TIMEVAL,
    res: ?*?*LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_search_extW(
    ld: ?*ldap,
    base: ?*u16,
    scope: u32,
    filter: ?*u16,
    attrs: ?*?*u16,
    attrsonly: u32,
    ServerControls: ?*?*ldapcontrolW,
    ClientControls: ?*?*ldapcontrolW,
    TimeLimit: u32,
    SizeLimit: u32,
    MessageNumber: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_search_extA(
    ld: ?*ldap,
    base: ?*i8,
    scope: u32,
    filter: ?*i8,
    attrs: ?*?*i8,
    attrsonly: u32,
    ServerControls: ?*?*ldapcontrolA,
    ClientControls: ?*?*ldapcontrolA,
    TimeLimit: u32,
    SizeLimit: u32,
    MessageNumber: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_search_ext_sW(
    ld: ?*ldap,
    base: ?*u16,
    scope: u32,
    filter: ?*u16,
    attrs: ?*?*u16,
    attrsonly: u32,
    ServerControls: ?*?*ldapcontrolW,
    ClientControls: ?*?*ldapcontrolW,
    timeout: ?*LDAP_TIMEVAL,
    SizeLimit: u32,
    res: ?*?*LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_search_ext_sA(
    ld: ?*ldap,
    base: ?*i8,
    scope: u32,
    filter: ?*i8,
    attrs: ?*?*i8,
    attrsonly: u32,
    ServerControls: ?*?*ldapcontrolA,
    ClientControls: ?*?*ldapcontrolA,
    timeout: ?*LDAP_TIMEVAL,
    SizeLimit: u32,
    res: ?*?*LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_search(
    ld: ?*ldap,
    base: ?*i8,
    scope: u32,
    filter: ?*i8,
    attrs: ?*?*i8,
    attrsonly: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_search_s(
    ld: ?*ldap,
    base: ?*i8,
    scope: u32,
    filter: ?*i8,
    attrs: ?*?*i8,
    attrsonly: u32,
    res: ?*?*LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_search_st(
    ld: ?*ldap,
    base: ?*i8,
    scope: u32,
    filter: ?*i8,
    attrs: ?*?*i8,
    attrsonly: u32,
    timeout: ?*LDAP_TIMEVAL,
    res: ?*?*LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_search_ext(
    ld: ?*ldap,
    base: ?*i8,
    scope: u32,
    filter: ?*i8,
    attrs: ?*?*i8,
    attrsonly: u32,
    ServerControls: ?*?*ldapcontrolA,
    ClientControls: ?*?*ldapcontrolA,
    TimeLimit: u32,
    SizeLimit: u32,
    MessageNumber: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_search_ext_s(
    ld: ?*ldap,
    base: ?*i8,
    scope: u32,
    filter: ?*i8,
    attrs: ?*?*i8,
    attrsonly: u32,
    ServerControls: ?*?*ldapcontrolA,
    ClientControls: ?*?*ldapcontrolA,
    timeout: ?*LDAP_TIMEVAL,
    SizeLimit: u32,
    res: ?*?*LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_check_filterW(
    ld: ?*ldap,
    SearchFilter: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_check_filterA(
    ld: ?*ldap,
    SearchFilter: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_modifyW(
    ld: ?*ldap,
    dn: ?*u16,
    mods: ?*?*ldapmodW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_modifyA(
    ld: ?*ldap,
    dn: ?*i8,
    mods: ?*?*ldapmodA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_modify_sW(
    ld: ?*ldap,
    dn: ?*u16,
    mods: ?*?*ldapmodW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_modify_sA(
    ld: ?*ldap,
    dn: ?*i8,
    mods: ?*?*ldapmodA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_modify_extW(
    ld: ?*ldap,
    dn: ?*u16,
    mods: ?*?*ldapmodW,
    ServerControls: ?*?*ldapcontrolW,
    ClientControls: ?*?*ldapcontrolW,
    MessageNumber: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_modify_extA(
    ld: ?*ldap,
    dn: ?*i8,
    mods: ?*?*ldapmodA,
    ServerControls: ?*?*ldapcontrolA,
    ClientControls: ?*?*ldapcontrolA,
    MessageNumber: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_modify_ext_sW(
    ld: ?*ldap,
    dn: ?*u16,
    mods: ?*?*ldapmodW,
    ServerControls: ?*?*ldapcontrolW,
    ClientControls: ?*?*ldapcontrolW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_modify_ext_sA(
    ld: ?*ldap,
    dn: ?*i8,
    mods: ?*?*ldapmodA,
    ServerControls: ?*?*ldapcontrolA,
    ClientControls: ?*?*ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_modify(
    ld: ?*ldap,
    dn: ?*i8,
    mods: ?*?*ldapmodA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_modify_s(
    ld: ?*ldap,
    dn: ?*i8,
    mods: ?*?*ldapmodA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_modify_ext(
    ld: ?*ldap,
    dn: ?*i8,
    mods: ?*?*ldapmodA,
    ServerControls: ?*?*ldapcontrolA,
    ClientControls: ?*?*ldapcontrolA,
    MessageNumber: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_modify_ext_s(
    ld: ?*ldap,
    dn: ?*i8,
    mods: ?*?*ldapmodA,
    ServerControls: ?*?*ldapcontrolA,
    ClientControls: ?*?*ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_modrdn2W(
    ExternalHandle: ?*ldap,
    DistinguishedName: ?*u16,
    NewDistinguishedName: ?*u16,
    DeleteOldRdn: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_modrdn2A(
    ExternalHandle: ?*ldap,
    DistinguishedName: ?*i8,
    NewDistinguishedName: ?*i8,
    DeleteOldRdn: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_modrdnW(
    ExternalHandle: ?*ldap,
    DistinguishedName: ?*u16,
    NewDistinguishedName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_modrdnA(
    ExternalHandle: ?*ldap,
    DistinguishedName: ?*i8,
    NewDistinguishedName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_modrdn2_sW(
    ExternalHandle: ?*ldap,
    DistinguishedName: ?*u16,
    NewDistinguishedName: ?*u16,
    DeleteOldRdn: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_modrdn2_sA(
    ExternalHandle: ?*ldap,
    DistinguishedName: ?*i8,
    NewDistinguishedName: ?*i8,
    DeleteOldRdn: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_modrdn_sW(
    ExternalHandle: ?*ldap,
    DistinguishedName: ?*u16,
    NewDistinguishedName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_modrdn_sA(
    ExternalHandle: ?*ldap,
    DistinguishedName: ?*i8,
    NewDistinguishedName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_modrdn2(
    ExternalHandle: ?*ldap,
    DistinguishedName: ?*i8,
    NewDistinguishedName: ?*i8,
    DeleteOldRdn: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_modrdn(
    ExternalHandle: ?*ldap,
    DistinguishedName: ?*i8,
    NewDistinguishedName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_modrdn2_s(
    ExternalHandle: ?*ldap,
    DistinguishedName: ?*i8,
    NewDistinguishedName: ?*i8,
    DeleteOldRdn: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_modrdn_s(
    ExternalHandle: ?*ldap,
    DistinguishedName: ?*i8,
    NewDistinguishedName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_rename_extW(
    ld: ?*ldap,
    dn: ?*u16,
    NewRDN: ?*u16,
    NewParent: ?*u16,
    DeleteOldRdn: i32,
    ServerControls: ?*?*ldapcontrolW,
    ClientControls: ?*?*ldapcontrolW,
    MessageNumber: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_rename_extA(
    ld: ?*ldap,
    dn: ?*i8,
    NewRDN: ?*i8,
    NewParent: ?*i8,
    DeleteOldRdn: i32,
    ServerControls: ?*?*ldapcontrolA,
    ClientControls: ?*?*ldapcontrolA,
    MessageNumber: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_rename_ext_sW(
    ld: ?*ldap,
    dn: ?*u16,
    NewRDN: ?*u16,
    NewParent: ?*u16,
    DeleteOldRdn: i32,
    ServerControls: ?*?*ldapcontrolW,
    ClientControls: ?*?*ldapcontrolW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_rename_ext_sA(
    ld: ?*ldap,
    dn: ?*i8,
    NewRDN: ?*i8,
    NewParent: ?*i8,
    DeleteOldRdn: i32,
    ServerControls: ?*?*ldapcontrolA,
    ClientControls: ?*?*ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_rename_ext(
    ld: ?*ldap,
    dn: ?*i8,
    NewRDN: ?*i8,
    NewParent: ?*i8,
    DeleteOldRdn: i32,
    ServerControls: ?*?*ldapcontrolA,
    ClientControls: ?*?*ldapcontrolA,
    MessageNumber: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_rename_ext_s(
    ld: ?*ldap,
    dn: ?*i8,
    NewRDN: ?*i8,
    NewParent: ?*i8,
    DeleteOldRdn: i32,
    ServerControls: ?*?*ldapcontrolA,
    ClientControls: ?*?*ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_addW(
    ld: ?*ldap,
    dn: ?*u16,
    attrs: ?*?*ldapmodW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_addA(
    ld: ?*ldap,
    dn: ?*i8,
    attrs: ?*?*ldapmodA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_add_sW(
    ld: ?*ldap,
    dn: ?*u16,
    attrs: ?*?*ldapmodW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_add_sA(
    ld: ?*ldap,
    dn: ?*i8,
    attrs: ?*?*ldapmodA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_add_extW(
    ld: ?*ldap,
    dn: ?*u16,
    attrs: ?*?*ldapmodW,
    ServerControls: ?*?*ldapcontrolW,
    ClientControls: ?*?*ldapcontrolW,
    MessageNumber: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_add_extA(
    ld: ?*ldap,
    dn: ?*i8,
    attrs: ?*?*ldapmodA,
    ServerControls: ?*?*ldapcontrolA,
    ClientControls: ?*?*ldapcontrolA,
    MessageNumber: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_add_ext_sW(
    ld: ?*ldap,
    dn: ?*u16,
    attrs: ?*?*ldapmodW,
    ServerControls: ?*?*ldapcontrolW,
    ClientControls: ?*?*ldapcontrolW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_add_ext_sA(
    ld: ?*ldap,
    dn: ?*i8,
    attrs: ?*?*ldapmodA,
    ServerControls: ?*?*ldapcontrolA,
    ClientControls: ?*?*ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_add(
    ld: ?*ldap,
    dn: ?*i8,
    attrs: ?*?*ldapmodA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_add_s(
    ld: ?*ldap,
    dn: ?*i8,
    attrs: ?*?*ldapmodA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_add_ext(
    ld: ?*ldap,
    dn: ?*i8,
    attrs: ?*?*ldapmodA,
    ServerControls: ?*?*ldapcontrolA,
    ClientControls: ?*?*ldapcontrolA,
    MessageNumber: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_add_ext_s(
    ld: ?*ldap,
    dn: ?*i8,
    attrs: ?*?*ldapmodA,
    ServerControls: ?*?*ldapcontrolA,
    ClientControls: ?*?*ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_compareW(
    ld: ?*ldap,
    dn: ?*u16,
    attr: ?*u16,
    value: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_compareA(
    ld: ?*ldap,
    dn: ?*i8,
    attr: ?*i8,
    value: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_compare_sW(
    ld: ?*ldap,
    dn: ?*u16,
    attr: ?*u16,
    value: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_compare_sA(
    ld: ?*ldap,
    dn: ?*i8,
    attr: ?*i8,
    value: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_compare(
    ld: ?*ldap,
    dn: ?*i8,
    attr: ?*i8,
    value: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_compare_s(
    ld: ?*ldap,
    dn: ?*i8,
    attr: ?*i8,
    value: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_compare_extW(
    ld: ?*ldap,
    dn: ?*u16,
    Attr: ?*u16,
    Value: ?*u16,
    Data: ?*LDAP_BERVAL,
    ServerControls: ?*?*ldapcontrolW,
    ClientControls: ?*?*ldapcontrolW,
    MessageNumber: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_compare_extA(
    ld: ?*ldap,
    dn: ?*i8,
    Attr: ?*i8,
    Value: ?*i8,
    Data: ?*LDAP_BERVAL,
    ServerControls: ?*?*ldapcontrolA,
    ClientControls: ?*?*ldapcontrolA,
    MessageNumber: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_compare_ext_sW(
    ld: ?*ldap,
    dn: ?*u16,
    Attr: ?*u16,
    Value: ?*u16,
    Data: ?*LDAP_BERVAL,
    ServerControls: ?*?*ldapcontrolW,
    ClientControls: ?*?*ldapcontrolW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_compare_ext_sA(
    ld: ?*ldap,
    dn: ?*i8,
    Attr: ?*i8,
    Value: ?*i8,
    Data: ?*LDAP_BERVAL,
    ServerControls: ?*?*ldapcontrolA,
    ClientControls: ?*?*ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_compare_ext(
    ld: ?*ldap,
    dn: ?*i8,
    Attr: ?*i8,
    Value: ?*i8,
    Data: ?*LDAP_BERVAL,
    ServerControls: ?*?*ldapcontrolA,
    ClientControls: ?*?*ldapcontrolA,
    MessageNumber: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_compare_ext_s(
    ld: ?*ldap,
    dn: ?*i8,
    Attr: ?*i8,
    Value: ?*i8,
    Data: ?*LDAP_BERVAL,
    ServerControls: ?*?*ldapcontrolA,
    ClientControls: ?*?*ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_deleteW(
    ld: ?*ldap,
    dn: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_deleteA(
    ld: ?*ldap,
    dn: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_delete_sW(
    ld: ?*ldap,
    dn: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_delete_sA(
    ld: ?*ldap,
    dn: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_delete_extW(
    ld: ?*ldap,
    dn: ?*u16,
    ServerControls: ?*?*ldapcontrolW,
    ClientControls: ?*?*ldapcontrolW,
    MessageNumber: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_delete_extA(
    ld: ?*ldap,
    dn: ?*i8,
    ServerControls: ?*?*ldapcontrolA,
    ClientControls: ?*?*ldapcontrolA,
    MessageNumber: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_delete_ext_sW(
    ld: ?*ldap,
    dn: ?*u16,
    ServerControls: ?*?*ldapcontrolW,
    ClientControls: ?*?*ldapcontrolW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_delete_ext_sA(
    ld: ?*ldap,
    dn: ?*i8,
    ServerControls: ?*?*ldapcontrolA,
    ClientControls: ?*?*ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_delete(
    ld: ?*ldap,
    dn: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_delete_s(
    ld: ?*ldap,
    dn: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_delete_ext(
    ld: ?*ldap,
    dn: ?*i8,
    ServerControls: ?*?*ldapcontrolA,
    ClientControls: ?*?*ldapcontrolA,
    MessageNumber: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_delete_ext_s(
    ld: ?*ldap,
    dn: ?*i8,
    ServerControls: ?*?*ldapcontrolA,
    ClientControls: ?*?*ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_abandon(
    ld: ?*ldap,
    msgid: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_result(
    ld: ?*ldap,
    msgid: u32,
    all: u32,
    timeout: ?*LDAP_TIMEVAL,
    res: ?*?*LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_msgfree(
    res: ?*LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_result2error(
    ld: ?*ldap,
    res: ?*LDAPMessage,
    freeit: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_parse_resultW(
    Connection: ?*ldap,
    ResultMessage: ?*LDAPMessage,
    ReturnCode: ?*u32,
    MatchedDNs: ?*?*u16,
    ErrorMessage: ?*?*u16,
    Referrals: ?*?*?*u16,
    ServerControls: ?*?*?*ldapcontrolW,
    Freeit: u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_parse_resultA(
    Connection: ?*ldap,
    ResultMessage: ?*LDAPMessage,
    ReturnCode: ?*u32,
    MatchedDNs: ?*?*i8,
    ErrorMessage: ?*?*i8,
    Referrals: ?*?*?*i8,
    ServerControls: ?*?*?*ldapcontrolA,
    Freeit: u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_parse_extended_resultA(
    Connection: ?*ldap,
    ResultMessage: ?*LDAPMessage,
    ResultOID: ?*?*i8,
    ResultData: ?*?*LDAP_BERVAL,
    Freeit: u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_parse_extended_resultW(
    Connection: ?*ldap,
    ResultMessage: ?*LDAPMessage,
    ResultOID: ?*?*u16,
    ResultData: ?*?*LDAP_BERVAL,
    Freeit: u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_controls_freeA(
    Controls: ?*?*ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_control_freeA(
    Controls: ?*ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_controls_freeW(
    Control: ?*?*ldapcontrolW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_control_freeW(
    Control: ?*ldapcontrolW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_free_controlsW(
    Controls: ?*?*ldapcontrolW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_free_controlsA(
    Controls: ?*?*ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_parse_result(
    Connection: ?*ldap,
    ResultMessage: ?*LDAPMessage,
    ReturnCode: ?*u32,
    MatchedDNs: ?*?*i8,
    ErrorMessage: ?*?*i8,
    Referrals: ?*?*?*i8,
    ServerControls: ?*?*?*ldapcontrolA,
    Freeit: u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_controls_free(
    Controls: ?*?*ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_control_free(
    Control: ?*ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_free_controls(
    Controls: ?*?*ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_err2stringW(
    err: u32,
) callconv(@import("std").os.windows.WINAPI) ?*u16;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_err2stringA(
    err: u32,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_err2string(
    err: u32,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_perror(
    ld: ?*ldap,
    msg: ?*i8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_first_entry(
    ld: ?*ldap,
    res: ?*LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) ?*LDAPMessage;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_next_entry(
    ld: ?*ldap,
    entry: ?*LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) ?*LDAPMessage;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_count_entries(
    ld: ?*ldap,
    res: ?*LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_first_attributeW(
    ld: ?*ldap,
    entry: ?*LDAPMessage,
    ptr: ?*?*berelement,
) callconv(@import("std").os.windows.WINAPI) ?*u16;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_first_attributeA(
    ld: ?*ldap,
    entry: ?*LDAPMessage,
    ptr: ?*?*berelement,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_first_attribute(
    ld: ?*ldap,
    entry: ?*LDAPMessage,
    ptr: ?*?*berelement,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_next_attributeW(
    ld: ?*ldap,
    entry: ?*LDAPMessage,
    ptr: ?*berelement,
) callconv(@import("std").os.windows.WINAPI) ?*u16;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_next_attributeA(
    ld: ?*ldap,
    entry: ?*LDAPMessage,
    ptr: ?*berelement,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_next_attribute(
    ld: ?*ldap,
    entry: ?*LDAPMessage,
    ptr: ?*berelement,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_get_valuesW(
    ld: ?*ldap,
    entry: ?*LDAPMessage,
    attr: ?*u16,
) callconv(@import("std").os.windows.WINAPI) ?*?*u16;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_get_valuesA(
    ld: ?*ldap,
    entry: ?*LDAPMessage,
    attr: ?*i8,
) callconv(@import("std").os.windows.WINAPI) ?*?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_get_values(
    ld: ?*ldap,
    entry: ?*LDAPMessage,
    attr: ?*i8,
) callconv(@import("std").os.windows.WINAPI) ?*?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_get_values_lenW(
    ExternalHandle: ?*ldap,
    Message: ?*LDAPMessage,
    attr: ?*u16,
) callconv(@import("std").os.windows.WINAPI) ?*?*LDAP_BERVAL;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_get_values_lenA(
    ExternalHandle: ?*ldap,
    Message: ?*LDAPMessage,
    attr: ?*i8,
) callconv(@import("std").os.windows.WINAPI) ?*?*LDAP_BERVAL;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_get_values_len(
    ExternalHandle: ?*ldap,
    Message: ?*LDAPMessage,
    attr: ?*i8,
) callconv(@import("std").os.windows.WINAPI) ?*?*LDAP_BERVAL;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_count_valuesW(
    vals: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_count_valuesA(
    vals: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_count_values(
    vals: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_count_values_len(
    vals: ?*?*LDAP_BERVAL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_value_freeW(
    vals: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_value_freeA(
    vals: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_value_free(
    vals: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_value_free_len(
    vals: ?*?*LDAP_BERVAL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_get_dnW(
    ld: ?*ldap,
    entry: ?*LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) ?*u16;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_get_dnA(
    ld: ?*ldap,
    entry: ?*LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_get_dn(
    ld: ?*ldap,
    entry: ?*LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_explode_dnW(
    dn: ?*u16,
    notypes: u32,
) callconv(@import("std").os.windows.WINAPI) ?*?*u16;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_explode_dnA(
    dn: ?*i8,
    notypes: u32,
) callconv(@import("std").os.windows.WINAPI) ?*?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_explode_dn(
    dn: ?*i8,
    notypes: u32,
) callconv(@import("std").os.windows.WINAPI) ?*?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_dn2ufnW(
    dn: ?*u16,
) callconv(@import("std").os.windows.WINAPI) ?*u16;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_dn2ufnA(
    dn: ?*i8,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_dn2ufn(
    dn: ?*i8,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_memfreeW(
    Block: ?*u16,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_memfreeA(
    Block: ?*i8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ber_bvfree(
    bv: ?*LDAP_BERVAL,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_memfree(
    Block: ?*i8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_ufn2dnW(
    ufn: ?*u16,
    pDn: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_ufn2dnA(
    ufn: ?*i8,
    pDn: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_ufn2dn(
    ufn: ?*i8,
    pDn: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_startup(
    version: ?*ldap_version_info,
    Instance: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_cleanup(
    hInstance: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_escape_filter_elementW(
    sourceFilterElement: ?*i8,
    sourceLength: u32,
    destFilterElement: ?*u16,
    destLength: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_escape_filter_elementA(
    sourceFilterElement: ?*i8,
    sourceLength: u32,
    destFilterElement: ?*i8,
    destLength: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_escape_filter_element(
    sourceFilterElement: ?*i8,
    sourceLength: u32,
    destFilterElement: ?*i8,
    destLength: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_set_dbg_flags(
    NewFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_set_dbg_routine(
    DebugPrintRoutine: DBGPRINT,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=True (can and should we use this?)
pub extern "WLDAP32" fn LdapUTF8ToUnicode(
    lpSrcStr: ?*i8,
    cchSrc: i32,
    lpDestStr: ?*u16,
    cchDest: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=True (can and should we use this?)
pub extern "WLDAP32" fn LdapUnicodeToUTF8(
    lpSrcStr: ?*u16,
    cchSrc: i32,
    lpDestStr: ?*i8,
    cchDest: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_create_sort_controlA(
    ExternalHandle: ?*ldap,
    SortKeys: ?*?*ldapsortkeyA,
    IsCritical: u8,
    Control: ?*?*ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_create_sort_controlW(
    ExternalHandle: ?*ldap,
    SortKeys: ?*?*ldapsortkeyW,
    IsCritical: u8,
    Control: ?*?*ldapcontrolW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_parse_sort_controlA(
    ExternalHandle: ?*ldap,
    Control: ?*?*ldapcontrolA,
    Result: ?*u32,
    Attribute: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_parse_sort_controlW(
    ExternalHandle: ?*ldap,
    Control: ?*?*ldapcontrolW,
    Result: ?*u32,
    Attribute: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_create_sort_control(
    ExternalHandle: ?*ldap,
    SortKeys: ?*?*ldapsortkeyA,
    IsCritical: u8,
    Control: ?*?*ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_parse_sort_control(
    ExternalHandle: ?*ldap,
    Control: ?*?*ldapcontrolA,
    Result: ?*u32,
    Attribute: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_encode_sort_controlW(
    ExternalHandle: ?*ldap,
    SortKeys: ?*?*ldapsortkeyW,
    Control: ?*ldapcontrolW,
    Criticality: u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_encode_sort_controlA(
    ExternalHandle: ?*ldap,
    SortKeys: ?*?*ldapsortkeyA,
    Control: ?*ldapcontrolA,
    Criticality: u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_create_page_controlW(
    ExternalHandle: ?*ldap,
    PageSize: u32,
    Cookie: ?*LDAP_BERVAL,
    IsCritical: u8,
    Control: ?*?*ldapcontrolW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_create_page_controlA(
    ExternalHandle: ?*ldap,
    PageSize: u32,
    Cookie: ?*LDAP_BERVAL,
    IsCritical: u8,
    Control: ?*?*ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_parse_page_controlW(
    ExternalHandle: ?*ldap,
    ServerControls: ?*?*ldapcontrolW,
    TotalCount: ?*u32,
    Cookie: ?*?*LDAP_BERVAL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_parse_page_controlA(
    ExternalHandle: ?*ldap,
    ServerControls: ?*?*ldapcontrolA,
    TotalCount: ?*u32,
    Cookie: ?*?*LDAP_BERVAL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_create_page_control(
    ExternalHandle: ?*ldap,
    PageSize: u32,
    Cookie: ?*LDAP_BERVAL,
    IsCritical: u8,
    Control: ?*?*ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_parse_page_control(
    ExternalHandle: ?*ldap,
    ServerControls: ?*?*ldapcontrolA,
    TotalCount: ?*u32,
    Cookie: ?*?*LDAP_BERVAL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "WLDAP32" fn ldap_search_init_pageW(
    ExternalHandle: ?*ldap,
    DistinguishedName: ?*u16,
    ScopeOfSearch: u32,
    SearchFilter: ?*u16,
    AttributeList: ?*?*u16,
    AttributesOnly: u32,
    ServerControls: ?*?*ldapcontrolW,
    ClientControls: ?*?*ldapcontrolW,
    PageTimeLimit: u32,
    TotalSizeLimit: u32,
    SortKeys: ?*?*ldapsortkeyW,
) callconv(@import("std").os.windows.WINAPI) ?*ldapsearch;

// set_last_errror=True (can and should we use this?)
pub extern "WLDAP32" fn ldap_search_init_pageA(
    ExternalHandle: ?*ldap,
    DistinguishedName: ?*i8,
    ScopeOfSearch: u32,
    SearchFilter: ?*i8,
    AttributeList: ?*?*i8,
    AttributesOnly: u32,
    ServerControls: ?*?*ldapcontrolA,
    ClientControls: ?*?*ldapcontrolA,
    PageTimeLimit: u32,
    TotalSizeLimit: u32,
    SortKeys: ?*?*ldapsortkeyA,
) callconv(@import("std").os.windows.WINAPI) ?*ldapsearch;

// set_last_errror=True (can and should we use this?)
pub extern "WLDAP32" fn ldap_search_init_page(
    ExternalHandle: ?*ldap,
    DistinguishedName: ?*i8,
    ScopeOfSearch: u32,
    SearchFilter: ?*i8,
    AttributeList: ?*?*i8,
    AttributesOnly: u32,
    ServerControls: ?*?*ldapcontrolA,
    ClientControls: ?*?*ldapcontrolA,
    PageTimeLimit: u32,
    TotalSizeLimit: u32,
    SortKeys: ?*?*ldapsortkeyA,
) callconv(@import("std").os.windows.WINAPI) ?*ldapsearch;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_get_next_page(
    ExternalHandle: ?*ldap,
    SearchHandle: ?*ldapsearch,
    PageSize: u32,
    MessageNumber: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_get_next_page_s(
    ExternalHandle: ?*ldap,
    SearchHandle: ?*ldapsearch,
    timeout: ?*LDAP_TIMEVAL,
    PageSize: u32,
    TotalCount: ?*u32,
    Results: ?*?*LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_get_paged_count(
    ExternalHandle: ?*ldap,
    SearchBlock: ?*ldapsearch,
    TotalCount: ?*u32,
    Results: ?*LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_search_abandon_page(
    ExternalHandle: ?*ldap,
    SearchBlock: ?*ldapsearch,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_create_vlv_controlW(
    ExternalHandle: ?*ldap,
    VlvInfo: ?*ldapvlvinfo,
    IsCritical: u8,
    Control: ?*?*ldapcontrolW,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_create_vlv_controlA(
    ExternalHandle: ?*ldap,
    VlvInfo: ?*ldapvlvinfo,
    IsCritical: u8,
    Control: ?*?*ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_parse_vlv_controlW(
    ExternalHandle: ?*ldap,
    Control: ?*?*ldapcontrolW,
    TargetPos: ?*u32,
    ListCount: ?*u32,
    Context: ?*?*LDAP_BERVAL,
    ErrCode: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_parse_vlv_controlA(
    ExternalHandle: ?*ldap,
    Control: ?*?*ldapcontrolA,
    TargetPos: ?*u32,
    ListCount: ?*u32,
    Context: ?*?*LDAP_BERVAL,
    ErrCode: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_start_tls_sW(
    ExternalHandle: ?*ldap,
    ServerReturnValue: ?*u32,
    result: ?*?*LDAPMessage,
    ServerControls: ?*?*ldapcontrolW,
    ClientControls: ?*?*ldapcontrolW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_start_tls_sA(
    ExternalHandle: ?*ldap,
    ServerReturnValue: ?*u32,
    result: ?*?*LDAPMessage,
    ServerControls: ?*?*ldapcontrolA,
    ClientControls: ?*?*ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_stop_tls_s(
    ExternalHandle: ?*ldap,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_first_reference(
    ld: ?*ldap,
    res: ?*LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) ?*LDAPMessage;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_next_reference(
    ld: ?*ldap,
    entry: ?*LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) ?*LDAPMessage;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_count_references(
    ld: ?*ldap,
    res: ?*LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_parse_referenceW(
    Connection: ?*ldap,
    ResultMessage: ?*LDAPMessage,
    Referrals: ?*?*?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_parse_referenceA(
    Connection: ?*ldap,
    ResultMessage: ?*LDAPMessage,
    Referrals: ?*?*?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_parse_reference(
    Connection: ?*ldap,
    ResultMessage: ?*LDAPMessage,
    Referrals: ?*?*?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_extended_operationW(
    ld: ?*ldap,
    Oid: ?*u16,
    Data: ?*LDAP_BERVAL,
    ServerControls: ?*?*ldapcontrolW,
    ClientControls: ?*?*ldapcontrolW,
    MessageNumber: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_extended_operationA(
    ld: ?*ldap,
    Oid: ?*i8,
    Data: ?*LDAP_BERVAL,
    ServerControls: ?*?*ldapcontrolA,
    ClientControls: ?*?*ldapcontrolA,
    MessageNumber: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_extended_operation_sA(
    ExternalHandle: ?*ldap,
    Oid: ?*i8,
    Data: ?*LDAP_BERVAL,
    ServerControls: ?*?*ldapcontrolA,
    ClientControls: ?*?*ldapcontrolA,
    ReturnedOid: ?*?*i8,
    ReturnedData: ?*?*LDAP_BERVAL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_extended_operation_sW(
    ExternalHandle: ?*ldap,
    Oid: ?*u16,
    Data: ?*LDAP_BERVAL,
    ServerControls: ?*?*ldapcontrolW,
    ClientControls: ?*?*ldapcontrolW,
    ReturnedOid: ?*?*u16,
    ReturnedData: ?*?*LDAP_BERVAL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_extended_operation(
    ld: ?*ldap,
    Oid: ?*i8,
    Data: ?*LDAP_BERVAL,
    ServerControls: ?*?*ldapcontrolA,
    ClientControls: ?*?*ldapcontrolA,
    MessageNumber: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_close_extended_op(
    ld: ?*ldap,
    MessageNumber: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn LdapGetLastError(
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn LdapMapErrorToWin32(
    LdapError: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ldap_conn_from_msg(
    PrimaryConn: ?*ldap,
    res: ?*LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) ?*ldap;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ber_init(
    pBerVal: ?*LDAP_BERVAL,
) callconv(@import("std").os.windows.WINAPI) ?*berelement;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ber_free(
    pBerElement: ?*berelement,
    fbuf: i32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ber_bvecfree(
    pBerVal: ?*?*LDAP_BERVAL,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ber_bvdup(
    pBerVal: ?*LDAP_BERVAL,
) callconv(@import("std").os.windows.WINAPI) ?*LDAP_BERVAL;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ber_alloc_t(
    options: i32,
) callconv(@import("std").os.windows.WINAPI) ?*berelement;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ber_skip_tag(
    pBerElement: ?*berelement,
    pLen: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ber_peek_tag(
    pBerElement: ?*berelement,
    pLen: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ber_first_element(
    pBerElement: ?*berelement,
    pLen: ?*u32,
    ppOpaque: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ber_next_element(
    pBerElement: ?*berelement,
    pLen: ?*u32,
    @"opaque": ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ber_flatten(
    pBerElement: ?*berelement,
    pBerVal: ?*?*LDAP_BERVAL,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ber_printf(
    pBerElement: ?*berelement,
    fmt: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WLDAP32" fn ber_scanf(
    pBerElement: ?*berelement,
    fmt: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const ldapcontrol = ldapcontrolA;
        pub const ldapmod = ldapmodA;
        pub const ldapapiinfo = ldapapiinfoA;
        pub const LDAPAPIFeatureInfo = LDAPAPIFeatureInfoA;
        pub const ldapsortkey = ldapsortkeyA;
        pub const ldap_sasl_bind = ldap_sasl_bindA;
        pub const ldap_sasl_bind_s = ldap_sasl_bind_sA;
        pub const ldap_check_filter = ldap_check_filterA;
        pub const ldap_parse_extended_result = ldap_parse_extended_resultA;
        pub const ldap_encode_sort_control = ldap_encode_sort_controlA;
        pub const ldap_create_vlv_control = ldap_create_vlv_controlA;
        pub const ldap_parse_vlv_control = ldap_parse_vlv_controlA;
        pub const ldap_start_tls_s = ldap_start_tls_sA;
        pub const ldap_extended_operation_s = ldap_extended_operation_sA;
    },
    .wide => struct {
        pub const ldapcontrol = ldapcontrolW;
        pub const ldapmod = ldapmodW;
        pub const ldapapiinfo = ldapapiinfoW;
        pub const LDAPAPIFeatureInfo = LDAPAPIFeatureInfoW;
        pub const ldapsortkey = ldapsortkeyW;
        pub const ldap_sasl_bind = ldap_sasl_bindW;
        pub const ldap_sasl_bind_s = ldap_sasl_bind_sW;
        pub const ldap_check_filter = ldap_check_filterW;
        pub const ldap_parse_extended_result = ldap_parse_extended_resultW;
        pub const ldap_encode_sort_control = ldap_encode_sort_controlW;
        pub const ldap_create_vlv_control = ldap_create_vlv_controlW;
        pub const ldap_parse_vlv_control = ldap_parse_vlv_controlW;
        pub const ldap_start_tls_s = ldap_start_tls_sW;
        pub const ldap_extended_operation_s = ldap_extended_operation_sW;
    },
    else => if (@import("builtin").is_test) struct {
        pub const ldapcontrol = *opaque{};
        pub const ldapmod = *opaque{};
        pub const ldapapiinfo = *opaque{};
        pub const LDAPAPIFeatureInfo = *opaque{};
        pub const ldapsortkey = *opaque{};
        pub const ldap_sasl_bind = *opaque{};
        pub const ldap_sasl_bind_s = *opaque{};
        pub const ldap_check_filter = *opaque{};
        pub const ldap_parse_extended_result = *opaque{};
        pub const ldap_encode_sort_control = *opaque{};
        pub const ldap_create_vlv_control = *opaque{};
        pub const ldap_parse_vlv_control = *opaque{};
        pub const ldap_start_tls_s = *opaque{};
        pub const ldap_extended_operation_s = *opaque{};
    } else struct {
        pub const ldapcontrol = @compileError("'ldapcontrol' requires that UNICODE be set to true or false in the root module");
        pub const ldapmod = @compileError("'ldapmod' requires that UNICODE be set to true or false in the root module");
        pub const ldapapiinfo = @compileError("'ldapapiinfo' requires that UNICODE be set to true or false in the root module");
        pub const LDAPAPIFeatureInfo = @compileError("'LDAPAPIFeatureInfo' requires that UNICODE be set to true or false in the root module");
        pub const ldapsortkey = @compileError("'ldapsortkey' requires that UNICODE be set to true or false in the root module");
        pub const ldap_sasl_bind = @compileError("'ldap_sasl_bind' requires that UNICODE be set to true or false in the root module");
        pub const ldap_sasl_bind_s = @compileError("'ldap_sasl_bind_s' requires that UNICODE be set to true or false in the root module");
        pub const ldap_check_filter = @compileError("'ldap_check_filter' requires that UNICODE be set to true or false in the root module");
        pub const ldap_parse_extended_result = @compileError("'ldap_parse_extended_result' requires that UNICODE be set to true or false in the root module");
        pub const ldap_encode_sort_control = @compileError("'ldap_encode_sort_control' requires that UNICODE be set to true or false in the root module");
        pub const ldap_create_vlv_control = @compileError("'ldap_create_vlv_control' requires that UNICODE be set to true or false in the root module");
        pub const ldap_parse_vlv_control = @compileError("'ldap_parse_vlv_control' requires that UNICODE be set to true or false in the root module");
        pub const ldap_start_tls_s = @compileError("'ldap_start_tls_s' requires that UNICODE be set to true or false in the root module");
        pub const ldap_extended_operation_s = @compileError("'ldap_extended_operation_s' requires that UNICODE be set to true or false in the root module");
    },
};

//
// type imports
//
const HANDLE = @import("systemservices.zig").HANDLE;

test "" {
    const constant_export_count = 0;
    const type_export_count = 26;
    const func_count = 243;
    const unicode_alias_count = 14;
    const type_import_count = 1;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
