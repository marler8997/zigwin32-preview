//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: SP_ALTPLATFORM_INFO_V3
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_ALTPLATFORM_INFO_V3 = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: SP_DEVINFO_DATA
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_DEVINFO_DATA = *opaque{
};
// --------------------------------------------------------
// Type: SP_DEVICE_INTERFACE_DATA
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_DEVICE_INTERFACE_DATA = *opaque{
};
// --------------------------------------------------------
// Type: SP_DEVICE_INTERFACE_DETAIL_DATA_A
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_DEVICE_INTERFACE_DETAIL_DATA_A = *opaque{
};
// --------------------------------------------------------
// Type: SP_DEVICE_INTERFACE_DETAIL_DATA_W
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_DEVICE_INTERFACE_DETAIL_DATA_W = *opaque{
};
// --------------------------------------------------------
// Type: SP_DEVINFO_LIST_DETAIL_DATA_A
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_DEVINFO_LIST_DETAIL_DATA_A = *opaque{
};
// --------------------------------------------------------
// Type: SP_DEVINFO_LIST_DETAIL_DATA_W
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_DEVINFO_LIST_DETAIL_DATA_W = *opaque{
};
// --------------------------------------------------------
// Type: SP_DEVINSTALL_PARAMS_A
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_DEVINSTALL_PARAMS_A = *opaque{
};
// --------------------------------------------------------
// Type: SP_DEVINSTALL_PARAMS_W
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_DEVINSTALL_PARAMS_W = *opaque{
};
// --------------------------------------------------------
// Type: SP_CLASSINSTALL_HEADER
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_CLASSINSTALL_HEADER = *opaque{
};
// --------------------------------------------------------
// Type: SP_ENABLECLASS_PARAMS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_ENABLECLASS_PARAMS = *opaque{
};
// --------------------------------------------------------
// Type: SP_PROPCHANGE_PARAMS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_PROPCHANGE_PARAMS = *opaque{
};
// --------------------------------------------------------
// Type: SP_REMOVEDEVICE_PARAMS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_REMOVEDEVICE_PARAMS = *opaque{
};
// --------------------------------------------------------
// Type: SP_UNREMOVEDEVICE_PARAMS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_UNREMOVEDEVICE_PARAMS = *opaque{
};
// --------------------------------------------------------
// Type: SP_SELECTDEVICE_PARAMS_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SP_SELECTDEVICE_PARAMS_A = extern struct {
    ClassInstallHeader: SP_CLASSINSTALL_HEADER,
    Title: ?[*]i8,
    Instructions: ?[*]i8,
    ListLabel: ?[*]i8,
    SubTitle: ?[*]i8,
    Reserved: ?[*]u8,
};
// --------------------------------------------------------
// Type: SP_SELECTDEVICE_PARAMS_W
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_SELECTDEVICE_PARAMS_W = *opaque{
};
// --------------------------------------------------------
// Type: PDETECT_PROGRESS_NOTIFY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDETECT_PROGRESS_NOTIFY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SP_DETECTDEVICE_PARAMS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_DETECTDEVICE_PARAMS = *opaque{
};
// --------------------------------------------------------
// Type: SP_INSTALLWIZARD_DATA
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_INSTALLWIZARD_DATA = *opaque{
};
// --------------------------------------------------------
// Type: SP_NEWDEVICEWIZARD_DATA
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_NEWDEVICEWIZARD_DATA = *opaque{
};
// --------------------------------------------------------
// Type: SP_TROUBLESHOOTER_PARAMS_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SP_TROUBLESHOOTER_PARAMS_A = extern struct {
    ClassInstallHeader: SP_CLASSINSTALL_HEADER,
    ChmFile: ?[*]i8,
    HtmlTroubleShooter: ?[*]i8,
};
// --------------------------------------------------------
// Type: SP_TROUBLESHOOTER_PARAMS_W
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_TROUBLESHOOTER_PARAMS_W = *opaque{
};
// --------------------------------------------------------
// Type: SP_POWERMESSAGEWAKE_PARAMS_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SP_POWERMESSAGEWAKE_PARAMS_A = extern struct {
    ClassInstallHeader: SP_CLASSINSTALL_HEADER,
    PowerMessageWake: ?[*]i8,
};
// --------------------------------------------------------
// Type: SP_POWERMESSAGEWAKE_PARAMS_W
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_POWERMESSAGEWAKE_PARAMS_W = *opaque{
};
// --------------------------------------------------------
// Type: SP_DRVINFO_DATA_V2_A
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_DRVINFO_DATA_V2_A = *opaque{
};
// --------------------------------------------------------
// Type: SP_DRVINFO_DATA_V2_W
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_DRVINFO_DATA_V2_W = *opaque{
};
// --------------------------------------------------------
// Type: SP_DRVINFO_DATA_V1_A
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_DRVINFO_DATA_V1_A = *opaque{
};
// --------------------------------------------------------
// Type: SP_DRVINFO_DATA_V1_W
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_DRVINFO_DATA_V1_W = *opaque{
};
// --------------------------------------------------------
// Type: SP_DRVINFO_DETAIL_DATA_A
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_DRVINFO_DETAIL_DATA_A = *opaque{
};
// --------------------------------------------------------
// Type: SP_DRVINFO_DETAIL_DATA_W
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_DRVINFO_DETAIL_DATA_W = *opaque{
};
// --------------------------------------------------------
// Type: SP_DRVINSTALL_PARAMS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_DRVINSTALL_PARAMS = *opaque{
};
// --------------------------------------------------------
// Type: PSP_DETSIG_CMPPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PSP_DETSIG_CMPPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: COINSTALLER_CONTEXT_DATA
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const COINSTALLER_CONTEXT_DATA = *opaque{
};
// --------------------------------------------------------
// Type: SP_CLASSIMAGELIST_DATA
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_CLASSIMAGELIST_DATA = *opaque{
};
// --------------------------------------------------------
// Type: SP_PROPSHEETPAGE_REQUEST
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_PROPSHEETPAGE_REQUEST = *opaque{
};
// --------------------------------------------------------
// Type: SP_BACKUP_QUEUE_PARAMS_V2_A
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_BACKUP_QUEUE_PARAMS_V2_A = *opaque{
};
// --------------------------------------------------------
// Type: SP_BACKUP_QUEUE_PARAMS_V2_W
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_BACKUP_QUEUE_PARAMS_V2_W = *opaque{
};
// --------------------------------------------------------
// Type: SP_BACKUP_QUEUE_PARAMS_V1_A
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_BACKUP_QUEUE_PARAMS_V1_A = *opaque{
};
// --------------------------------------------------------
// Type: SP_BACKUP_QUEUE_PARAMS_V1_W
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_BACKUP_QUEUE_PARAMS_V1_W = *opaque{
};
// --------------------------------------------------------
// Type: SetupFileLogInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SetupFileLogInfo = *opaque{
};
// --------------------------------------------------------
// Type: PNP_VETO_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PNP_VETO_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: CONFLICT_DETAILS_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CONFLICT_DETAILS_A = extern struct {
    CD_ulSize: u32,
    CD_ulMask: u32,
    CD_dnDevInst: u32,
    CD_rdResDes: ?*opaque{},
    CD_ulFlags: u32,
    CD_szDescription: ?[*]i8,
};
// --------------------------------------------------------
// Type: CONFLICT_DETAILS_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CONFLICT_DETAILS_W = extern struct {
    CD_ulSize: u32,
    CD_ulMask: u32,
    CD_dnDevInst: u32,
    CD_rdResDes: ?*opaque{},
    CD_ulFlags: u32,
    CD_szDescription: ?[*]u16,
};
// --------------------------------------------------------
// Type: MEM_RANGE
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const MEM_RANGE = *opaque{
};
// --------------------------------------------------------
// Type: MEM_DES
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const MEM_DES = *opaque{
};
// --------------------------------------------------------
// Type: MEM_RESOURCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MEM_RESOURCE = extern struct {
    MEM_Header: MEM_DES,
    MEM_Data: ?[*]MEM_RANGE,
};
// --------------------------------------------------------
// Type: Mem_Large_Range_s
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const Mem_Large_Range_s = *opaque{
};
// --------------------------------------------------------
// Type: Mem_Large_Des_s
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const Mem_Large_Des_s = *opaque{
};
// --------------------------------------------------------
// Type: Mem_Large_Resource_s
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const Mem_Large_Resource_s = extern struct {
    MEM_LARGE_Header: Mem_Large_Des_s,
    MEM_LARGE_Data: ?[*]Mem_Large_Range_s,
};
// --------------------------------------------------------
// Type: IO_RANGE
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const IO_RANGE = *opaque{
};
// --------------------------------------------------------
// Type: IO_DES
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const IO_DES = *opaque{
};
// --------------------------------------------------------
// Type: IO_RESOURCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IO_RESOURCE = extern struct {
    IO_Header: IO_DES,
    IO_Data: ?[*]IO_RANGE,
};
// --------------------------------------------------------
// Type: DMA_RANGE
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const DMA_RANGE = *opaque{
};
// --------------------------------------------------------
// Type: DMA_DES
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const DMA_DES = *opaque{
};
// --------------------------------------------------------
// Type: DMA_RESOURCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DMA_RESOURCE = extern struct {
    DMA_Header: DMA_DES,
    DMA_Data: ?[*]DMA_RANGE,
};
// --------------------------------------------------------
// Type: IRQ_RANGE
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const IRQ_RANGE = *opaque{
};
// --------------------------------------------------------
// Type: IRQ_DES_32
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const IRQ_DES_32 = *opaque{
};
// --------------------------------------------------------
// Type: IRQ_DES_64
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const IRQ_DES_64 = *opaque{
};
// --------------------------------------------------------
// Type: IRQ_RESOURCE_32
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IRQ_RESOURCE_32 = extern struct {
    IRQ_Header: IRQ_DES_32,
    IRQ_Data: ?[*]IRQ_RANGE,
};
// --------------------------------------------------------
// Type: IRQ_RESOURCE_64
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IRQ_RESOURCE_64 = extern struct {
    IRQ_Header: IRQ_DES_64,
    IRQ_Data: ?[*]IRQ_RANGE,
};
// --------------------------------------------------------
// Type: DevPrivate_Range_s
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const DevPrivate_Range_s = *opaque{
};
// --------------------------------------------------------
// Type: DevPrivate_Des_s
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const DevPrivate_Des_s = *opaque{
};
// --------------------------------------------------------
// Type: DevPrivate_Resource_s
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DevPrivate_Resource_s = extern struct {
    PRV_Header: DevPrivate_Des_s,
    PRV_Data: ?[*]DevPrivate_Range_s,
};
// --------------------------------------------------------
// Type: CS_DES
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const CS_DES = *opaque{
};
// --------------------------------------------------------
// Type: CS_RESOURCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CS_RESOURCE = extern struct {
    CS_Header: CS_DES,
};
// --------------------------------------------------------
// Type: PCCARD_DES
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const PCCARD_DES = *opaque{
};
// --------------------------------------------------------
// Type: PCCARD_RESOURCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PCCARD_RESOURCE = extern struct {
    PcCard_Header: PCCARD_DES,
};
// --------------------------------------------------------
// Type: MFCARD_DES
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const MFCARD_DES = *opaque{
};
// --------------------------------------------------------
// Type: MFCARD_RESOURCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFCARD_RESOURCE = extern struct {
    MfCard_Header: MFCARD_DES,
};
// --------------------------------------------------------
// Type: BUSNUMBER_RANGE
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const BUSNUMBER_RANGE = *opaque{
};
// --------------------------------------------------------
// Type: BUSNUMBER_DES
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const BUSNUMBER_DES = *opaque{
};
// --------------------------------------------------------
// Type: BUSNUMBER_RESOURCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BUSNUMBER_RESOURCE = extern struct {
    BusNumber_Header: BUSNUMBER_DES,
    BusNumber_Data: ?[*]BUSNUMBER_RANGE,
};
// --------------------------------------------------------
// Type: Connection_Des_s
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const Connection_Des_s = *opaque{
};
// --------------------------------------------------------
// Type: Connection_Resource_s
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const Connection_Resource_s = extern struct {
    Connection_Header: Connection_Des_s,
};
// --------------------------------------------------------
// Type: HWProfileInfo_sA
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const HWProfileInfo_sA = *opaque{
};
// --------------------------------------------------------
// Type: HWProfileInfo_sW
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const HWProfileInfo_sW = *opaque{
};
// --------------------------------------------------------
// Type: HCMNOTIFICATION__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HCMNOTIFICATION__ = extern struct {
    unused: i32,
};
// --------------------------------------------------------
// Type: CM_NOTIFY_FILTER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CM_NOTIFY_FILTER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: CM_NOTIFY_FILTER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CM_NOTIFY_FILTER = extern struct {
    cbSize: u32,
    Flags: u32,
    FilterType: CM_NOTIFY_FILTER_TYPE,
    Reserved: u32,
    u: _u_e__Union,
    // --------------------------------------------------------
    // Type: _u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _DeviceHandle_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _DeviceHandle_e__Struct = extern struct {
            hTarget: HANDLE,
        };
        // --------------------------------------------------------
        // Type: _DeviceInstance_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _DeviceInstance_e__Struct = extern struct {
            InstanceId: ?[*]u16,
        };
        // --------------------------------------------------------
        // Type: _DeviceInterface_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _DeviceInterface_e__Struct = extern struct {
            ClassGuid: Guid,
        };
    };
};
// --------------------------------------------------------
// Type: CM_NOTIFY_ACTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CM_NOTIFY_ACTION = *opaque{
};
// --------------------------------------------------------
// Type: CM_NOTIFY_EVENT_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CM_NOTIFY_EVENT_DATA = extern struct {
    FilterType: CM_NOTIFY_FILTER_TYPE,
    Reserved: u32,
    u: _u_e__Union,
    // --------------------------------------------------------
    // Type: _u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _DeviceInstance_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _DeviceInstance_e__Struct = extern struct {
            InstanceId: ?[*]u16,
        };
        // --------------------------------------------------------
        // Type: _DeviceInterface_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _DeviceInterface_e__Struct = extern struct {
            ClassGuid: Guid,
            SymbolicLink: ?[*]u16,
        };
        // --------------------------------------------------------
        // Type: _DeviceHandle_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _DeviceHandle_e__Struct = extern struct {
            EventGuid: Guid,
            NameOffset: i32,
            DataSize: u32,
            Data: ?[*]u8,
        };
    };
};
// --------------------------------------------------------
// Type: PCM_NOTIFY_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PCM_NOTIFY_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};

//
// functions
//

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetInfDriverStoreLocationA(
    FileName: ?*i8,
    AlternatePlatformInfo: ?*SP_ALTPLATFORM_INFO_V2,
    LocaleName: ?*i8,
    ReturnBuffer: ?*i8,
    ReturnBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetInfDriverStoreLocationW(
    FileName: ?*u16,
    AlternatePlatformInfo: ?*SP_ALTPLATFORM_INFO_V2,
    LocaleName: ?*u16,
    ReturnBuffer: ?*u16,
    ReturnBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetInfPublishedNameA(
    DriverStoreLocation: ?*i8,
    ReturnBuffer: ?*i8,
    ReturnBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetInfPublishedNameW(
    DriverStoreLocation: ?*u16,
    ReturnBuffer: ?*u16,
    ReturnBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetThreadLogToken(
) callconv(@import("std").os.windows.WINAPI) u64;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn SetupSetThreadLogToken(
    LogToken: u64,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn SetupWriteTextLog(
    LogToken: u64,
    Category: u32,
    Flags: u32,
    MessageStr: ?*i8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn SetupWriteTextLogError(
    LogToken: u64,
    Category: u32,
    LogFlags: u32,
    Error: u32,
    MessageStr: ?*i8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn SetupWriteTextLogInfLine(
    LogToken: u64,
    Flags: u32,
    InfHandle: ?*opaque{},
    Context: ?*INFCONTEXT,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetBackupInformationA(
    QueueHandle: ?*opaque{},
    BackupParams: ?*SP_BACKUP_QUEUE_PARAMS_V2_A,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetBackupInformationW(
    QueueHandle: ?*opaque{},
    BackupParams: ?*SP_BACKUP_QUEUE_PARAMS_V2_W,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn SetupPrepareQueueForRestoreA(
    QueueHandle: ?*opaque{},
    BackupPath: ?*i8,
    RestoreFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn SetupPrepareQueueForRestoreW(
    QueueHandle: ?*opaque{},
    BackupPath: ?*u16,
    RestoreFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn SetupSetNonInteractiveMode(
    NonInteractiveFlag: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetNonInteractiveMode(
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiCreateDeviceInfoList(
    ClassGuid: ?*Guid,
    hwndParent: HWND,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiCreateDeviceInfoListExA(
    ClassGuid: ?*Guid,
    hwndParent: HWND,
    MachineName: ?*i8,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiCreateDeviceInfoListExW(
    ClassGuid: ?*Guid,
    hwndParent: HWND,
    MachineName: ?*u16,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetDeviceInfoListClass(
    DeviceInfoSet: ?*opaque{},
    ClassGuid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetDeviceInfoListDetailA(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoSetDetailData: ?*SP_DEVINFO_LIST_DETAIL_DATA_A,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetDeviceInfoListDetailW(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoSetDetailData: ?*SP_DEVINFO_LIST_DETAIL_DATA_W,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiCreateDeviceInfoA(
    DeviceInfoSet: ?*opaque{},
    DeviceName: ?*i8,
    ClassGuid: ?*Guid,
    DeviceDescription: ?*i8,
    hwndParent: HWND,
    CreationFlags: u32,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiCreateDeviceInfoW(
    DeviceInfoSet: ?*opaque{},
    DeviceName: ?*u16,
    ClassGuid: ?*Guid,
    DeviceDescription: ?*u16,
    hwndParent: HWND,
    CreationFlags: u32,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiOpenDeviceInfoA(
    DeviceInfoSet: ?*opaque{},
    DeviceInstanceId: ?*i8,
    hwndParent: HWND,
    OpenFlags: u32,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiOpenDeviceInfoW(
    DeviceInfoSet: ?*opaque{},
    DeviceInstanceId: ?*u16,
    hwndParent: HWND,
    OpenFlags: u32,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetDeviceInstanceIdA(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DeviceInstanceId: ?*i8,
    DeviceInstanceIdSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetDeviceInstanceIdW(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DeviceInstanceId: ?*u16,
    DeviceInstanceIdSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiDeleteDeviceInfo(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiEnumDeviceInfo(
    DeviceInfoSet: ?*opaque{},
    MemberIndex: u32,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiDestroyDeviceInfoList(
    DeviceInfoSet: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiEnumDeviceInterfaces(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    InterfaceClassGuid: ?*Guid,
    MemberIndex: u32,
    DeviceInterfaceData: ?*SP_DEVICE_INTERFACE_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiCreateDeviceInterfaceA(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    InterfaceClassGuid: ?*Guid,
    ReferenceString: ?*i8,
    CreationFlags: u32,
    DeviceInterfaceData: ?*SP_DEVICE_INTERFACE_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiCreateDeviceInterfaceW(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    InterfaceClassGuid: ?*Guid,
    ReferenceString: ?*u16,
    CreationFlags: u32,
    DeviceInterfaceData: ?*SP_DEVICE_INTERFACE_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiOpenDeviceInterfaceA(
    DeviceInfoSet: ?*opaque{},
    DevicePath: ?*i8,
    OpenFlags: u32,
    DeviceInterfaceData: ?*SP_DEVICE_INTERFACE_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiOpenDeviceInterfaceW(
    DeviceInfoSet: ?*opaque{},
    DevicePath: ?*u16,
    OpenFlags: u32,
    DeviceInterfaceData: ?*SP_DEVICE_INTERFACE_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetDeviceInterfaceAlias(
    DeviceInfoSet: ?*opaque{},
    DeviceInterfaceData: ?*SP_DEVICE_INTERFACE_DATA,
    AliasInterfaceClassGuid: ?*Guid,
    AliasDeviceInterfaceData: ?*SP_DEVICE_INTERFACE_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiDeleteDeviceInterfaceData(
    DeviceInfoSet: ?*opaque{},
    DeviceInterfaceData: ?*SP_DEVICE_INTERFACE_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiRemoveDeviceInterface(
    DeviceInfoSet: ?*opaque{},
    DeviceInterfaceData: ?*SP_DEVICE_INTERFACE_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetDeviceInterfaceDetailA(
    DeviceInfoSet: ?*opaque{},
    DeviceInterfaceData: ?*SP_DEVICE_INTERFACE_DATA,
    DeviceInterfaceDetailData: ?*SP_DEVICE_INTERFACE_DETAIL_DATA_A,
    DeviceInterfaceDetailDataSize: u32,
    RequiredSize: ?*u32,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetDeviceInterfaceDetailW(
    DeviceInfoSet: ?*opaque{},
    DeviceInterfaceData: ?*SP_DEVICE_INTERFACE_DATA,
    DeviceInterfaceDetailData: ?*SP_DEVICE_INTERFACE_DETAIL_DATA_W,
    DeviceInterfaceDetailDataSize: u32,
    RequiredSize: ?*u32,
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiInstallDeviceInterfaces(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiSetDeviceInterfaceDefault(
    DeviceInfoSet: ?*opaque{},
    DeviceInterfaceData: ?*SP_DEVICE_INTERFACE_DATA,
    Flags: u32,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiRegisterDeviceInfo(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    Flags: u32,
    CompareProc: PSP_DETSIG_CMPPROC,
    CompareContext: ?*opaque{},
    DupDeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiBuildDriverInfoList(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DriverType: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiCancelDriverInfoSearch(
    DeviceInfoSet: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiEnumDriverInfoA(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DriverType: u32,
    MemberIndex: u32,
    DriverInfoData: ?*SP_DRVINFO_DATA_V2_A,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiEnumDriverInfoW(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DriverType: u32,
    MemberIndex: u32,
    DriverInfoData: ?*SP_DRVINFO_DATA_V2_W,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetSelectedDriverA(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DriverInfoData: ?*SP_DRVINFO_DATA_V2_A,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetSelectedDriverW(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DriverInfoData: ?*SP_DRVINFO_DATA_V2_W,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiSetSelectedDriverA(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DriverInfoData: ?*SP_DRVINFO_DATA_V2_A,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiSetSelectedDriverW(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DriverInfoData: ?*SP_DRVINFO_DATA_V2_W,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetDriverInfoDetailA(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DriverInfoData: ?*SP_DRVINFO_DATA_V2_A,
    DriverInfoDetailData: ?*SP_DRVINFO_DETAIL_DATA_A,
    DriverInfoDetailDataSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetDriverInfoDetailW(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DriverInfoData: ?*SP_DRVINFO_DATA_V2_W,
    DriverInfoDetailData: ?*SP_DRVINFO_DETAIL_DATA_W,
    DriverInfoDetailDataSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiDestroyDriverInfoList(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DriverType: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetClassDevsW(
    ClassGuid: ?*Guid,
    Enumerator: ?*u16,
    hwndParent: HWND,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetClassDevsExA(
    ClassGuid: ?*Guid,
    Enumerator: ?*i8,
    hwndParent: HWND,
    Flags: u32,
    DeviceInfoSet: ?*opaque{},
    MachineName: ?*i8,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetClassDevsExW(
    ClassGuid: ?*Guid,
    Enumerator: ?*u16,
    hwndParent: HWND,
    Flags: u32,
    DeviceInfoSet: ?*opaque{},
    MachineName: ?*u16,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetINFClassA(
    InfName: ?*i8,
    ClassGuid: ?*Guid,
    ClassName: ?*i8,
    ClassNameSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetINFClassW(
    InfName: ?*u16,
    ClassGuid: ?*Guid,
    ClassName: ?*u16,
    ClassNameSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiBuildClassInfoList(
    Flags: u32,
    ClassGuidList: ?*Guid,
    ClassGuidListSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiBuildClassInfoListExA(
    Flags: u32,
    ClassGuidList: ?*Guid,
    ClassGuidListSize: u32,
    RequiredSize: ?*u32,
    MachineName: ?*i8,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiBuildClassInfoListExW(
    Flags: u32,
    ClassGuidList: ?*Guid,
    ClassGuidListSize: u32,
    RequiredSize: ?*u32,
    MachineName: ?*u16,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetClassDescriptionA(
    ClassGuid: ?*Guid,
    ClassDescription: ?*i8,
    ClassDescriptionSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetClassDescriptionW(
    ClassGuid: ?*Guid,
    ClassDescription: ?*u16,
    ClassDescriptionSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetClassDescriptionExA(
    ClassGuid: ?*Guid,
    ClassDescription: ?*i8,
    ClassDescriptionSize: u32,
    RequiredSize: ?*u32,
    MachineName: ?*i8,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetClassDescriptionExW(
    ClassGuid: ?*Guid,
    ClassDescription: ?*u16,
    ClassDescriptionSize: u32,
    RequiredSize: ?*u32,
    MachineName: ?*u16,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiCallClassInstaller(
    InstallFunction: u32,
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiSelectDevice(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiSelectBestCompatDrv(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiInstallDevice(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiInstallDriverFiles(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiRegisterCoDeviceInstallers(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiRemoveDevice(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiUnremoveDevice(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiRestartDevices(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiChangeState(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiInstallClassA(
    hwndParent: HWND,
    InfFileName: ?*i8,
    Flags: u32,
    FileQueue: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiInstallClassW(
    hwndParent: HWND,
    InfFileName: ?*u16,
    Flags: u32,
    FileQueue: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiInstallClassExA(
    hwndParent: HWND,
    InfFileName: ?*i8,
    Flags: u32,
    FileQueue: ?*opaque{},
    InterfaceClassGuid: ?*Guid,
    Reserved1: ?*opaque{},
    Reserved2: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiInstallClassExW(
    hwndParent: HWND,
    InfFileName: ?*u16,
    Flags: u32,
    FileQueue: ?*opaque{},
    InterfaceClassGuid: ?*Guid,
    Reserved1: ?*opaque{},
    Reserved2: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiOpenClassRegKey(
    ClassGuid: ?*Guid,
    samDesired: u32,
) callconv(@import("std").os.windows.WINAPI) HKEY;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiOpenClassRegKeyExA(
    ClassGuid: ?*Guid,
    samDesired: u32,
    Flags: u32,
    MachineName: ?*i8,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HKEY;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiOpenClassRegKeyExW(
    ClassGuid: ?*Guid,
    samDesired: u32,
    Flags: u32,
    MachineName: ?*u16,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HKEY;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiCreateDeviceInterfaceRegKeyA(
    DeviceInfoSet: ?*opaque{},
    DeviceInterfaceData: ?*SP_DEVICE_INTERFACE_DATA,
    Reserved: u32,
    samDesired: u32,
    InfHandle: ?*opaque{},
    InfSectionName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) HKEY;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiCreateDeviceInterfaceRegKeyW(
    DeviceInfoSet: ?*opaque{},
    DeviceInterfaceData: ?*SP_DEVICE_INTERFACE_DATA,
    Reserved: u32,
    samDesired: u32,
    InfHandle: ?*opaque{},
    InfSectionName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HKEY;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiOpenDeviceInterfaceRegKey(
    DeviceInfoSet: ?*opaque{},
    DeviceInterfaceData: ?*SP_DEVICE_INTERFACE_DATA,
    Reserved: u32,
    samDesired: u32,
) callconv(@import("std").os.windows.WINAPI) HKEY;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiDeleteDeviceInterfaceRegKey(
    DeviceInfoSet: ?*opaque{},
    DeviceInterfaceData: ?*SP_DEVICE_INTERFACE_DATA,
    Reserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiCreateDevRegKeyA(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    Scope: u32,
    HwProfile: u32,
    KeyType: u32,
    InfHandle: ?*opaque{},
    InfSectionName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) HKEY;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiCreateDevRegKeyW(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    Scope: u32,
    HwProfile: u32,
    KeyType: u32,
    InfHandle: ?*opaque{},
    InfSectionName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HKEY;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiOpenDevRegKey(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    Scope: u32,
    HwProfile: u32,
    KeyType: u32,
    samDesired: u32,
) callconv(@import("std").os.windows.WINAPI) HKEY;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiDeleteDevRegKey(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    Scope: u32,
    HwProfile: u32,
    KeyType: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetHwProfileList(
    HwProfileList: ?*u32,
    HwProfileListSize: u32,
    RequiredSize: ?*u32,
    CurrentlyActiveIndex: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetHwProfileListExA(
    HwProfileList: ?*u32,
    HwProfileListSize: u32,
    RequiredSize: ?*u32,
    CurrentlyActiveIndex: ?*u32,
    MachineName: ?*i8,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetHwProfileListExW(
    HwProfileList: ?*u32,
    HwProfileListSize: u32,
    RequiredSize: ?*u32,
    CurrentlyActiveIndex: ?*u32,
    MachineName: ?*u16,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetDevicePropertyKeys(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    PropertyKeyArray: ?*DEVPROPKEY,
    PropertyKeyCount: u32,
    RequiredPropertyKeyCount: ?*u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetDevicePropertyW(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    PropertyKey: ?*DEVPROPKEY,
    PropertyType: ?*u32,
    PropertyBuffer: ?*u8,
    PropertyBufferSize: u32,
    RequiredSize: ?*u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiSetDevicePropertyW(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    PropertyKey: ?*DEVPROPKEY,
    PropertyType: u32,
    PropertyBuffer: ?*u8,
    PropertyBufferSize: u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetDeviceInterfacePropertyKeys(
    DeviceInfoSet: ?*opaque{},
    DeviceInterfaceData: ?*SP_DEVICE_INTERFACE_DATA,
    PropertyKeyArray: ?*DEVPROPKEY,
    PropertyKeyCount: u32,
    RequiredPropertyKeyCount: ?*u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetDeviceInterfacePropertyW(
    DeviceInfoSet: ?*opaque{},
    DeviceInterfaceData: ?*SP_DEVICE_INTERFACE_DATA,
    PropertyKey: ?*DEVPROPKEY,
    PropertyType: ?*u32,
    PropertyBuffer: ?*u8,
    PropertyBufferSize: u32,
    RequiredSize: ?*u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiSetDeviceInterfacePropertyW(
    DeviceInfoSet: ?*opaque{},
    DeviceInterfaceData: ?*SP_DEVICE_INTERFACE_DATA,
    PropertyKey: ?*DEVPROPKEY,
    PropertyType: u32,
    PropertyBuffer: ?*u8,
    PropertyBufferSize: u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetClassPropertyKeys(
    ClassGuid: ?*Guid,
    PropertyKeyArray: ?*DEVPROPKEY,
    PropertyKeyCount: u32,
    RequiredPropertyKeyCount: ?*u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetClassPropertyKeysExW(
    ClassGuid: ?*Guid,
    PropertyKeyArray: ?*DEVPROPKEY,
    PropertyKeyCount: u32,
    RequiredPropertyKeyCount: ?*u32,
    Flags: u32,
    MachineName: ?*u16,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetClassPropertyW(
    ClassGuid: ?*Guid,
    PropertyKey: ?*DEVPROPKEY,
    PropertyType: ?*u32,
    PropertyBuffer: ?*u8,
    PropertyBufferSize: u32,
    RequiredSize: ?*u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetClassPropertyExW(
    ClassGuid: ?*Guid,
    PropertyKey: ?*DEVPROPKEY,
    PropertyType: ?*u32,
    PropertyBuffer: ?*u8,
    PropertyBufferSize: u32,
    RequiredSize: ?*u32,
    Flags: u32,
    MachineName: ?*u16,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiSetClassPropertyW(
    ClassGuid: ?*Guid,
    PropertyKey: ?*DEVPROPKEY,
    PropertyType: u32,
    PropertyBuffer: ?*u8,
    PropertyBufferSize: u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiSetClassPropertyExW(
    ClassGuid: ?*Guid,
    PropertyKey: ?*DEVPROPKEY,
    PropertyType: u32,
    PropertyBuffer: ?*u8,
    PropertyBufferSize: u32,
    Flags: u32,
    MachineName: ?*u16,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetDeviceRegistryPropertyA(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    Property: u32,
    PropertyRegDataType: ?*u32,
    PropertyBuffer: ?*u8,
    PropertyBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetDeviceRegistryPropertyW(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    Property: u32,
    PropertyRegDataType: ?*u32,
    PropertyBuffer: ?*u8,
    PropertyBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetClassRegistryPropertyA(
    ClassGuid: ?*Guid,
    Property: u32,
    PropertyRegDataType: ?*u32,
    PropertyBuffer: ?*u8,
    PropertyBufferSize: u32,
    RequiredSize: ?*u32,
    MachineName: ?*i8,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetClassRegistryPropertyW(
    ClassGuid: ?*Guid,
    Property: u32,
    PropertyRegDataType: ?*u32,
    PropertyBuffer: ?*u8,
    PropertyBufferSize: u32,
    RequiredSize: ?*u32,
    MachineName: ?*u16,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiSetDeviceRegistryPropertyA(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    Property: u32,
    PropertyBuffer: ?*u8,
    PropertyBufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiSetDeviceRegistryPropertyW(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    Property: u32,
    PropertyBuffer: ?*u8,
    PropertyBufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiSetClassRegistryPropertyA(
    ClassGuid: ?*Guid,
    Property: u32,
    PropertyBuffer: ?*u8,
    PropertyBufferSize: u32,
    MachineName: ?*i8,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiSetClassRegistryPropertyW(
    ClassGuid: ?*Guid,
    Property: u32,
    PropertyBuffer: ?*u8,
    PropertyBufferSize: u32,
    MachineName: ?*u16,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetDeviceInstallParamsA(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DeviceInstallParams: ?*SP_DEVINSTALL_PARAMS_A,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetDeviceInstallParamsW(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DeviceInstallParams: ?*SP_DEVINSTALL_PARAMS_W,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetClassInstallParamsA(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    ClassInstallParams: ?*SP_CLASSINSTALL_HEADER,
    ClassInstallParamsSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetClassInstallParamsW(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    ClassInstallParams: ?*SP_CLASSINSTALL_HEADER,
    ClassInstallParamsSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiSetDeviceInstallParamsA(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DeviceInstallParams: ?*SP_DEVINSTALL_PARAMS_A,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiSetDeviceInstallParamsW(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DeviceInstallParams: ?*SP_DEVINSTALL_PARAMS_W,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiSetClassInstallParamsA(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    ClassInstallParams: ?*SP_CLASSINSTALL_HEADER,
    ClassInstallParamsSize: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiSetClassInstallParamsW(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    ClassInstallParams: ?*SP_CLASSINSTALL_HEADER,
    ClassInstallParamsSize: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetDriverInstallParamsA(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DriverInfoData: ?*SP_DRVINFO_DATA_V2_A,
    DriverInstallParams: ?*SP_DRVINSTALL_PARAMS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetDriverInstallParamsW(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DriverInfoData: ?*SP_DRVINFO_DATA_V2_W,
    DriverInstallParams: ?*SP_DRVINSTALL_PARAMS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiSetDriverInstallParamsA(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DriverInfoData: ?*SP_DRVINFO_DATA_V2_A,
    DriverInstallParams: ?*SP_DRVINSTALL_PARAMS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiSetDriverInstallParamsW(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DriverInfoData: ?*SP_DRVINFO_DATA_V2_W,
    DriverInstallParams: ?*SP_DRVINSTALL_PARAMS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiLoadClassIcon(
    ClassGuid: ?*Guid,
    LargeIcon: ?*HICON,
    MiniIconIndex: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiLoadDeviceIcon(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    cxIcon: u32,
    cyIcon: u32,
    Flags: u32,
    hIcon: ?*HICON,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiDrawMiniIcon(
    hdc: HDC,
    rc: RECT,
    MiniIconIndex: i32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetClassBitmapIndex(
    ClassGuid: ?*Guid,
    MiniIconIndex: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetClassImageList(
    ClassImageListData: ?*SP_CLASSIMAGELIST_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetClassImageListExA(
    ClassImageListData: ?*SP_CLASSIMAGELIST_DATA,
    MachineName: ?*i8,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetClassImageListExW(
    ClassImageListData: ?*SP_CLASSIMAGELIST_DATA,
    MachineName: ?*u16,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetClassImageIndex(
    ClassImageListData: ?*SP_CLASSIMAGELIST_DATA,
    ClassGuid: ?*Guid,
    ImageIndex: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiDestroyClassImageList(
    ClassImageListData: ?*SP_CLASSIMAGELIST_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetClassDevPropertySheetsA(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    PropertySheetHeader: ?*PROPSHEETHEADERA_V2,
    PropertySheetHeaderPageListSize: u32,
    RequiredSize: ?*u32,
    PropertySheetType: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetClassDevPropertySheetsW(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    PropertySheetHeader: ?*PROPSHEETHEADERW_V2,
    PropertySheetHeaderPageListSize: u32,
    RequiredSize: ?*u32,
    PropertySheetType: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiAskForOEMDisk(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiSelectOEMDrv(
    hwndParent: HWND,
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiClassNameFromGuidA(
    ClassGuid: ?*Guid,
    ClassName: ?*i8,
    ClassNameSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiClassNameFromGuidW(
    ClassGuid: ?*Guid,
    ClassName: ?*u16,
    ClassNameSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiClassNameFromGuidExA(
    ClassGuid: ?*Guid,
    ClassName: ?*i8,
    ClassNameSize: u32,
    RequiredSize: ?*u32,
    MachineName: ?*i8,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiClassNameFromGuidExW(
    ClassGuid: ?*Guid,
    ClassName: ?*u16,
    ClassNameSize: u32,
    RequiredSize: ?*u32,
    MachineName: ?*u16,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiClassGuidsFromNameA(
    ClassName: ?*i8,
    ClassGuidList: ?*Guid,
    ClassGuidListSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiClassGuidsFromNameW(
    ClassName: ?*u16,
    ClassGuidList: ?*Guid,
    ClassGuidListSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiClassGuidsFromNameExA(
    ClassName: ?*i8,
    ClassGuidList: ?*Guid,
    ClassGuidListSize: u32,
    RequiredSize: ?*u32,
    MachineName: ?*i8,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiClassGuidsFromNameExW(
    ClassName: ?*u16,
    ClassGuidList: ?*Guid,
    ClassGuidListSize: u32,
    RequiredSize: ?*u32,
    MachineName: ?*u16,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetHwProfileFriendlyNameA(
    HwProfile: u32,
    FriendlyName: ?*i8,
    FriendlyNameSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetHwProfileFriendlyNameW(
    HwProfile: u32,
    FriendlyName: ?*u16,
    FriendlyNameSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetHwProfileFriendlyNameExA(
    HwProfile: u32,
    FriendlyName: ?*i8,
    FriendlyNameSize: u32,
    RequiredSize: ?*u32,
    MachineName: ?*i8,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetHwProfileFriendlyNameExW(
    HwProfile: u32,
    FriendlyName: ?*u16,
    FriendlyNameSize: u32,
    RequiredSize: ?*u32,
    MachineName: ?*u16,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetWizardPage(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    InstallWizardData: ?*SP_INSTALLWIZARD_DATA,
    PageType: u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) HPROPSHEETPAGE;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetSelectedDevice(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiSetSelectedDevice(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetActualModelsSectionA(
    Context: ?*INFCONTEXT,
    AlternatePlatformInfo: ?*SP_ALTPLATFORM_INFO_V2,
    InfSectionWithExt: ?*i8,
    InfSectionWithExtSize: u32,
    RequiredSize: ?*u32,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetActualModelsSectionW(
    Context: ?*INFCONTEXT,
    AlternatePlatformInfo: ?*SP_ALTPLATFORM_INFO_V2,
    InfSectionWithExt: ?*u16,
    InfSectionWithExtSize: u32,
    RequiredSize: ?*u32,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetActualSectionToInstallA(
    InfHandle: ?*opaque{},
    InfSectionName: ?*i8,
    InfSectionWithExt: ?*i8,
    InfSectionWithExtSize: u32,
    RequiredSize: ?*u32,
    Extension: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetActualSectionToInstallW(
    InfHandle: ?*opaque{},
    InfSectionName: ?*u16,
    InfSectionWithExt: ?*u16,
    InfSectionWithExtSize: u32,
    RequiredSize: ?*u32,
    Extension: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetActualSectionToInstallExA(
    InfHandle: ?*opaque{},
    InfSectionName: ?*i8,
    AlternatePlatformInfo: ?*SP_ALTPLATFORM_INFO_V2,
    InfSectionWithExt: ?*i8,
    InfSectionWithExtSize: u32,
    RequiredSize: ?*u32,
    Extension: ?*?*i8,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetActualSectionToInstallExW(
    InfHandle: ?*opaque{},
    InfSectionName: ?*u16,
    AlternatePlatformInfo: ?*SP_ALTPLATFORM_INFO_V2,
    InfSectionWithExt: ?*u16,
    InfSectionWithExtSize: u32,
    RequiredSize: ?*u32,
    Extension: ?*?*u16,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetCustomDevicePropertyA(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    CustomPropertyName: ?*i8,
    Flags: u32,
    PropertyRegDataType: ?*u32,
    PropertyBuffer: ?*u8,
    PropertyBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetCustomDevicePropertyW(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    CustomPropertyName: ?*u16,
    Flags: u32,
    PropertyRegDataType: ?*u32,
    PropertyBuffer: ?*u8,
    PropertyBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Add_Empty_Log_Conf(
    plcLogConf: ?*?*opaque{},
    dnDevInst: u32,
    Priority: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Add_Empty_Log_Conf_Ex(
    plcLogConf: ?*?*opaque{},
    dnDevInst: u32,
    Priority: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Add_IDA(
    dnDevInst: u32,
    pszID: ?*i8,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Add_IDW(
    dnDevInst: u32,
    pszID: ?*u16,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Add_ID_ExA(
    dnDevInst: u32,
    pszID: ?*i8,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Add_ID_ExW(
    dnDevInst: u32,
    pszID: ?*u16,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Add_Range(
    ullStartValue: u64,
    ullEndValue: u64,
    rlh: ?*opaque{},
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Add_Res_Des(
    prdResDes: ?*?*opaque{},
    lcLogConf: ?*opaque{},
    ResourceID: u32,
    ResourceData: ?*opaque{},
    ResourceLen: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Add_Res_Des_Ex(
    prdResDes: ?*?*opaque{},
    lcLogConf: ?*opaque{},
    ResourceID: u32,
    ResourceData: ?*opaque{},
    ResourceLen: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Connect_MachineA(
    UNCServerName: ?*i8,
    phMachine: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Connect_MachineW(
    UNCServerName: ?*u16,
    phMachine: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Create_DevNodeA(
    pdnDevInst: ?*u32,
    pDeviceID: ?*i8,
    dnParent: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Create_DevNodeW(
    pdnDevInst: ?*u32,
    pDeviceID: ?*u16,
    dnParent: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Create_DevNode_ExA(
    pdnDevInst: ?*u32,
    pDeviceID: ?*i8,
    dnParent: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Create_DevNode_ExW(
    pdnDevInst: ?*u32,
    pDeviceID: ?*u16,
    dnParent: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Create_Range_List(
    prlh: ?*?*opaque{},
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Delete_Class_Key(
    ClassGuid: ?*Guid,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Delete_Class_Key_Ex(
    ClassGuid: ?*Guid,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Delete_DevNode_Key(
    dnDevNode: u32,
    ulHardwareProfile: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Delete_DevNode_Key_Ex(
    dnDevNode: u32,
    ulHardwareProfile: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Delete_Range(
    ullStartValue: u64,
    ullEndValue: u64,
    rlh: ?*opaque{},
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Detect_Resource_Conflict(
    dnDevInst: u32,
    ResourceID: u32,
    ResourceData: ?*opaque{},
    ResourceLen: u32,
    pbConflictDetected: ?*i32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Detect_Resource_Conflict_Ex(
    dnDevInst: u32,
    ResourceID: u32,
    ResourceData: ?*opaque{},
    ResourceLen: u32,
    pbConflictDetected: ?*i32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Disable_DevNode(
    dnDevInst: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Disable_DevNode_Ex(
    dnDevInst: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Disconnect_Machine(
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Dup_Range_List(
    rlhOld: ?*opaque{},
    rlhNew: ?*opaque{},
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Enable_DevNode(
    dnDevInst: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Enable_DevNode_Ex(
    dnDevInst: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Enumerate_Classes(
    ulClassIndex: u32,
    ClassGuid: ?*Guid,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Enumerate_Classes_Ex(
    ulClassIndex: u32,
    ClassGuid: ?*Guid,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Enumerate_EnumeratorsA(
    ulEnumIndex: u32,
    Buffer: ?*i8,
    pulLength: ?*u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Enumerate_EnumeratorsW(
    ulEnumIndex: u32,
    Buffer: ?*u16,
    pulLength: ?*u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Enumerate_Enumerators_ExA(
    ulEnumIndex: u32,
    Buffer: ?*i8,
    pulLength: ?*u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Enumerate_Enumerators_ExW(
    ulEnumIndex: u32,
    Buffer: ?*u16,
    pulLength: ?*u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Find_Range(
    pullStart: ?*u64,
    ullStart: u64,
    ulLength: u32,
    ullAlignment: u64,
    ullEnd: u64,
    rlh: ?*opaque{},
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_First_Range(
    rlh: ?*opaque{},
    pullStart: ?*u64,
    pullEnd: ?*u64,
    preElement: ?*?*opaque{},
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Free_Log_Conf(
    lcLogConfToBeFreed: ?*opaque{},
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Free_Log_Conf_Ex(
    lcLogConfToBeFreed: ?*opaque{},
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Free_Log_Conf_Handle(
    lcLogConf: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Free_Range_List(
    rlh: ?*opaque{},
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Free_Res_Des(
    prdResDes: ?*?*opaque{},
    rdResDes: ?*opaque{},
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Free_Res_Des_Ex(
    prdResDes: ?*?*opaque{},
    rdResDes: ?*opaque{},
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Free_Res_Des_Handle(
    rdResDes: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Child(
    pdnDevInst: ?*u32,
    dnDevInst: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Child_Ex(
    pdnDevInst: ?*u32,
    dnDevInst: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Class_NameA(
    ClassGuid: ?*Guid,
    Buffer: ?*i8,
    pulLength: ?*u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Class_NameW(
    ClassGuid: ?*Guid,
    Buffer: ?*u16,
    pulLength: ?*u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Class_Name_ExA(
    ClassGuid: ?*Guid,
    Buffer: ?*i8,
    pulLength: ?*u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Class_Name_ExW(
    ClassGuid: ?*Guid,
    Buffer: ?*u16,
    pulLength: ?*u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Class_Key_NameA(
    ClassGuid: ?*Guid,
    pszKeyName: ?*i8,
    pulLength: ?*u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Class_Key_NameW(
    ClassGuid: ?*Guid,
    pszKeyName: ?*u16,
    pulLength: ?*u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Class_Key_Name_ExA(
    ClassGuid: ?*Guid,
    pszKeyName: ?*i8,
    pulLength: ?*u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Class_Key_Name_ExW(
    ClassGuid: ?*Guid,
    pszKeyName: ?*u16,
    pulLength: ?*u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Depth(
    pulDepth: ?*u32,
    dnDevInst: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Depth_Ex(
    pulDepth: ?*u32,
    dnDevInst: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Device_IDA(
    dnDevInst: u32,
    Buffer: ?*i8,
    BufferLen: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Device_IDW(
    dnDevInst: u32,
    Buffer: ?*u16,
    BufferLen: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Device_ID_ExA(
    dnDevInst: u32,
    Buffer: ?*i8,
    BufferLen: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Device_ID_ExW(
    dnDevInst: u32,
    Buffer: ?*u16,
    BufferLen: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Device_ID_ListA(
    pszFilter: ?*i8,
    Buffer: ?*i8,
    BufferLen: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Device_ID_ListW(
    pszFilter: ?*u16,
    Buffer: ?*u16,
    BufferLen: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Device_ID_List_ExA(
    pszFilter: ?*i8,
    Buffer: ?*i8,
    BufferLen: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Device_ID_List_ExW(
    pszFilter: ?*u16,
    Buffer: ?*u16,
    BufferLen: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Device_ID_List_SizeA(
    pulLen: ?*u32,
    pszFilter: ?*i8,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Device_ID_List_SizeW(
    pulLen: ?*u32,
    pszFilter: ?*u16,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Device_ID_List_Size_ExA(
    pulLen: ?*u32,
    pszFilter: ?*i8,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Device_ID_List_Size_ExW(
    pulLen: ?*u32,
    pszFilter: ?*u16,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Device_ID_Size(
    pulLen: ?*u32,
    dnDevInst: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Device_ID_Size_Ex(
    pulLen: ?*u32,
    dnDevInst: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-config-l1-1-1" fn CM_Get_DevNode_PropertyW(
    dnDevInst: u32,
    PropertyKey: ?*DEVPROPKEY,
    PropertyType: ?*u32,
    PropertyBuffer: ?*u8,
    PropertyBufferSize: ?*u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "CFGMGR32" fn CM_Get_DevNode_Property_ExW(
    dnDevInst: u32,
    PropertyKey: ?*DEVPROPKEY,
    PropertyType: ?*u32,
    PropertyBuffer: ?*u8,
    PropertyBufferSize: ?*u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-config-l1-1-1" fn CM_Get_DevNode_Property_Keys(
    dnDevInst: u32,
    PropertyKeyArray: ?*DEVPROPKEY,
    PropertyKeyCount: ?*u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "CFGMGR32" fn CM_Get_DevNode_Property_Keys_Ex(
    dnDevInst: u32,
    PropertyKeyArray: ?*DEVPROPKEY,
    PropertyKeyCount: ?*u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_DevNode_Registry_PropertyA(
    dnDevInst: u32,
    ulProperty: u32,
    pulRegDataType: ?*u32,
    Buffer: ?*opaque{},
    pulLength: ?*u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_DevNode_Registry_PropertyW(
    dnDevInst: u32,
    ulProperty: u32,
    pulRegDataType: ?*u32,
    Buffer: ?*opaque{},
    pulLength: ?*u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_DevNode_Registry_Property_ExA(
    dnDevInst: u32,
    ulProperty: u32,
    pulRegDataType: ?*u32,
    Buffer: ?*opaque{},
    pulLength: ?*u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_DevNode_Registry_Property_ExW(
    dnDevInst: u32,
    ulProperty: u32,
    pulRegDataType: ?*u32,
    Buffer: ?*opaque{},
    pulLength: ?*u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_DevNode_Custom_PropertyA(
    dnDevInst: u32,
    pszCustomPropertyName: ?*i8,
    pulRegDataType: ?*u32,
    Buffer: ?*opaque{},
    pulLength: ?*u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_DevNode_Custom_PropertyW(
    dnDevInst: u32,
    pszCustomPropertyName: ?*u16,
    pulRegDataType: ?*u32,
    Buffer: ?*opaque{},
    pulLength: ?*u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_DevNode_Custom_Property_ExA(
    dnDevInst: u32,
    pszCustomPropertyName: ?*i8,
    pulRegDataType: ?*u32,
    Buffer: ?*opaque{},
    pulLength: ?*u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_DevNode_Custom_Property_ExW(
    dnDevInst: u32,
    pszCustomPropertyName: ?*u16,
    pulRegDataType: ?*u32,
    Buffer: ?*opaque{},
    pulLength: ?*u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_DevNode_Status(
    pulStatus: ?*u32,
    pulProblemNumber: ?*u32,
    dnDevInst: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_DevNode_Status_Ex(
    pulStatus: ?*u32,
    pulProblemNumber: ?*u32,
    dnDevInst: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_First_Log_Conf(
    plcLogConf: ?*?*opaque{},
    dnDevInst: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_First_Log_Conf_Ex(
    plcLogConf: ?*?*opaque{},
    dnDevInst: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Global_State(
    pulState: ?*u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Global_State_Ex(
    pulState: ?*u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Hardware_Profile_InfoA(
    ulIndex: u32,
    pHWProfileInfo: ?*HWProfileInfo_sA,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Hardware_Profile_Info_ExA(
    ulIndex: u32,
    pHWProfileInfo: ?*HWProfileInfo_sA,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Hardware_Profile_InfoW(
    ulIndex: u32,
    pHWProfileInfo: ?*HWProfileInfo_sW,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Hardware_Profile_Info_ExW(
    ulIndex: u32,
    pHWProfileInfo: ?*HWProfileInfo_sW,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_HW_Prof_FlagsA(
    pDeviceID: ?*i8,
    ulHardwareProfile: u32,
    pulValue: ?*u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_HW_Prof_FlagsW(
    pDeviceID: ?*u16,
    ulHardwareProfile: u32,
    pulValue: ?*u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_HW_Prof_Flags_ExA(
    pDeviceID: ?*i8,
    ulHardwareProfile: u32,
    pulValue: ?*u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_HW_Prof_Flags_ExW(
    pDeviceID: ?*u16,
    ulHardwareProfile: u32,
    pulValue: ?*u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Device_Interface_AliasA(
    pszDeviceInterface: ?*i8,
    AliasInterfaceGuid: ?*Guid,
    pszAliasDeviceInterface: ?*i8,
    pulLength: ?*u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Device_Interface_AliasW(
    pszDeviceInterface: ?*u16,
    AliasInterfaceGuid: ?*Guid,
    pszAliasDeviceInterface: ?*u16,
    pulLength: ?*u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Device_Interface_Alias_ExA(
    pszDeviceInterface: ?*i8,
    AliasInterfaceGuid: ?*Guid,
    pszAliasDeviceInterface: ?*i8,
    pulLength: ?*u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Device_Interface_Alias_ExW(
    pszDeviceInterface: ?*u16,
    AliasInterfaceGuid: ?*Guid,
    pszAliasDeviceInterface: ?*u16,
    pulLength: ?*u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Device_Interface_ListA(
    InterfaceClassGuid: ?*Guid,
    pDeviceID: ?*i8,
    Buffer: ?*i8,
    BufferLen: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Device_Interface_ListW(
    InterfaceClassGuid: ?*Guid,
    pDeviceID: ?*u16,
    Buffer: ?*u16,
    BufferLen: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Device_Interface_List_ExA(
    InterfaceClassGuid: ?*Guid,
    pDeviceID: ?*i8,
    Buffer: ?*i8,
    BufferLen: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Device_Interface_List_ExW(
    InterfaceClassGuid: ?*Guid,
    pDeviceID: ?*u16,
    Buffer: ?*u16,
    BufferLen: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Device_Interface_List_SizeA(
    pulLen: ?*u32,
    InterfaceClassGuid: ?*Guid,
    pDeviceID: ?*i8,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Device_Interface_List_SizeW(
    pulLen: ?*u32,
    InterfaceClassGuid: ?*Guid,
    pDeviceID: ?*u16,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Device_Interface_List_Size_ExA(
    pulLen: ?*u32,
    InterfaceClassGuid: ?*Guid,
    pDeviceID: ?*i8,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Device_Interface_List_Size_ExW(
    pulLen: ?*u32,
    InterfaceClassGuid: ?*Guid,
    pDeviceID: ?*u16,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-config-l1-1-1" fn CM_Get_Device_Interface_PropertyW(
    pszDeviceInterface: ?*u16,
    PropertyKey: ?*DEVPROPKEY,
    PropertyType: ?*u32,
    PropertyBuffer: ?*u8,
    PropertyBufferSize: ?*u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "CFGMGR32" fn CM_Get_Device_Interface_Property_ExW(
    pszDeviceInterface: ?*u16,
    PropertyKey: ?*DEVPROPKEY,
    PropertyType: ?*u32,
    PropertyBuffer: ?*u8,
    PropertyBufferSize: ?*u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-config-l1-1-1" fn CM_Get_Device_Interface_Property_KeysW(
    pszDeviceInterface: ?*u16,
    PropertyKeyArray: ?*DEVPROPKEY,
    PropertyKeyCount: ?*u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "CFGMGR32" fn CM_Get_Device_Interface_Property_Keys_ExW(
    pszDeviceInterface: ?*u16,
    PropertyKeyArray: ?*DEVPROPKEY,
    PropertyKeyCount: ?*u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Log_Conf_Priority(
    lcLogConf: ?*opaque{},
    pPriority: ?*u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Log_Conf_Priority_Ex(
    lcLogConf: ?*opaque{},
    pPriority: ?*u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Next_Log_Conf(
    plcLogConf: ?*?*opaque{},
    lcLogConf: ?*opaque{},
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Next_Log_Conf_Ex(
    plcLogConf: ?*?*opaque{},
    lcLogConf: ?*opaque{},
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Parent(
    pdnDevInst: ?*u32,
    dnDevInst: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Parent_Ex(
    pdnDevInst: ?*u32,
    dnDevInst: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Res_Des_Data(
    rdResDes: ?*opaque{},
    Buffer: ?*opaque{},
    BufferLen: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Res_Des_Data_Ex(
    rdResDes: ?*opaque{},
    Buffer: ?*opaque{},
    BufferLen: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Res_Des_Data_Size(
    pulSize: ?*u32,
    rdResDes: ?*opaque{},
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Res_Des_Data_Size_Ex(
    pulSize: ?*u32,
    rdResDes: ?*opaque{},
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Sibling(
    pdnDevInst: ?*u32,
    dnDevInst: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Sibling_Ex(
    pdnDevInst: ?*u32,
    dnDevInst: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Version(
) callconv(@import("std").os.windows.WINAPI) u16;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Version_Ex(
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u16;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Is_Version_Available(
    wVersion: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Is_Version_Available_Ex(
    wVersion: u16,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Intersect_Range_List(
    rlhOld1: ?*opaque{},
    rlhOld2: ?*opaque{},
    rlhNew: ?*opaque{},
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Invert_Range_List(
    rlhOld: ?*opaque{},
    rlhNew: ?*opaque{},
    ullMaxValue: u64,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Locate_DevNodeA(
    pdnDevInst: ?*u32,
    pDeviceID: ?*i8,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Locate_DevNodeW(
    pdnDevInst: ?*u32,
    pDeviceID: ?*u16,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Locate_DevNode_ExA(
    pdnDevInst: ?*u32,
    pDeviceID: ?*i8,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Locate_DevNode_ExW(
    pdnDevInst: ?*u32,
    pDeviceID: ?*u16,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Merge_Range_List(
    rlhOld1: ?*opaque{},
    rlhOld2: ?*opaque{},
    rlhNew: ?*opaque{},
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Modify_Res_Des(
    prdResDes: ?*?*opaque{},
    rdResDes: ?*opaque{},
    ResourceID: u32,
    ResourceData: ?*opaque{},
    ResourceLen: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Modify_Res_Des_Ex(
    prdResDes: ?*?*opaque{},
    rdResDes: ?*opaque{},
    ResourceID: u32,
    ResourceData: ?*opaque{},
    ResourceLen: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Move_DevNode(
    dnFromDevInst: u32,
    dnToDevInst: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Move_DevNode_Ex(
    dnFromDevInst: u32,
    dnToDevInst: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Next_Range(
    preElement: ?*?*opaque{},
    pullStart: ?*u64,
    pullEnd: ?*u64,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Next_Res_Des(
    prdResDes: ?*?*opaque{},
    rdResDes: ?*opaque{},
    ForResource: u32,
    pResourceID: ?*u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Next_Res_Des_Ex(
    prdResDes: ?*?*opaque{},
    rdResDes: ?*opaque{},
    ForResource: u32,
    pResourceID: ?*u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Open_Class_KeyA(
    ClassGuid: ?*Guid,
    pszClassName: ?*i8,
    samDesired: u32,
    Disposition: u32,
    phkClass: ?*HKEY,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Open_Class_KeyW(
    ClassGuid: ?*Guid,
    pszClassName: ?*u16,
    samDesired: u32,
    Disposition: u32,
    phkClass: ?*HKEY,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Open_Class_Key_ExA(
    ClassGuid: ?*Guid,
    pszClassName: ?*i8,
    samDesired: u32,
    Disposition: u32,
    phkClass: ?*HKEY,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Open_Class_Key_ExW(
    ClassGuid: ?*Guid,
    pszClassName: ?*u16,
    samDesired: u32,
    Disposition: u32,
    phkClass: ?*HKEY,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Open_DevNode_Key(
    dnDevNode: u32,
    samDesired: u32,
    ulHardwareProfile: u32,
    Disposition: u32,
    phkDevice: ?*HKEY,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Open_DevNode_Key_Ex(
    dnDevNode: u32,
    samDesired: u32,
    ulHardwareProfile: u32,
    Disposition: u32,
    phkDevice: ?*HKEY,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Open_Device_Interface_KeyA(
    pszDeviceInterface: ?*i8,
    samDesired: u32,
    Disposition: u32,
    phkDeviceInterface: ?*HKEY,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Open_Device_Interface_KeyW(
    pszDeviceInterface: ?*u16,
    samDesired: u32,
    Disposition: u32,
    phkDeviceInterface: ?*HKEY,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Open_Device_Interface_Key_ExA(
    pszDeviceInterface: ?*i8,
    samDesired: u32,
    Disposition: u32,
    phkDeviceInterface: ?*HKEY,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Open_Device_Interface_Key_ExW(
    pszDeviceInterface: ?*u16,
    samDesired: u32,
    Disposition: u32,
    phkDeviceInterface: ?*HKEY,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Delete_Device_Interface_KeyA(
    pszDeviceInterface: ?*i8,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Delete_Device_Interface_KeyW(
    pszDeviceInterface: ?*u16,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Delete_Device_Interface_Key_ExA(
    pszDeviceInterface: ?*i8,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Delete_Device_Interface_Key_ExW(
    pszDeviceInterface: ?*u16,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Query_Arbitrator_Free_Data(
    pData: ?*opaque{},
    DataLen: u32,
    dnDevInst: u32,
    ResourceID: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Query_Arbitrator_Free_Data_Ex(
    pData: ?*opaque{},
    DataLen: u32,
    dnDevInst: u32,
    ResourceID: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Query_Arbitrator_Free_Size(
    pulSize: ?*u32,
    dnDevInst: u32,
    ResourceID: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Query_Arbitrator_Free_Size_Ex(
    pulSize: ?*u32,
    dnDevInst: u32,
    ResourceID: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Query_Remove_SubTree(
    dnAncestor: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Query_Remove_SubTree_Ex(
    dnAncestor: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Query_And_Remove_SubTreeA(
    dnAncestor: u32,
    pVetoType: ?*PNP_VETO_TYPE,
    pszVetoName: ?*i8,
    ulNameLength: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Query_And_Remove_SubTreeW(
    dnAncestor: u32,
    pVetoType: ?*PNP_VETO_TYPE,
    pszVetoName: ?*u16,
    ulNameLength: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Query_And_Remove_SubTree_ExA(
    dnAncestor: u32,
    pVetoType: ?*PNP_VETO_TYPE,
    pszVetoName: ?*i8,
    ulNameLength: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Query_And_Remove_SubTree_ExW(
    dnAncestor: u32,
    pVetoType: ?*PNP_VETO_TYPE,
    pszVetoName: ?*u16,
    ulNameLength: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Request_Device_EjectA(
    dnDevInst: u32,
    pVetoType: ?*PNP_VETO_TYPE,
    pszVetoName: ?*i8,
    ulNameLength: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Request_Device_Eject_ExA(
    dnDevInst: u32,
    pVetoType: ?*PNP_VETO_TYPE,
    pszVetoName: ?*i8,
    ulNameLength: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Request_Device_EjectW(
    dnDevInst: u32,
    pVetoType: ?*PNP_VETO_TYPE,
    pszVetoName: ?*u16,
    ulNameLength: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Request_Device_Eject_ExW(
    dnDevInst: u32,
    pVetoType: ?*PNP_VETO_TYPE,
    pszVetoName: ?*u16,
    ulNameLength: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Reenumerate_DevNode(
    dnDevInst: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Reenumerate_DevNode_Ex(
    dnDevInst: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Register_Device_InterfaceA(
    dnDevInst: u32,
    InterfaceClassGuid: ?*Guid,
    pszReference: ?*i8,
    pszDeviceInterface: ?*i8,
    pulLength: ?*u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Register_Device_InterfaceW(
    dnDevInst: u32,
    InterfaceClassGuid: ?*Guid,
    pszReference: ?*u16,
    pszDeviceInterface: ?*u16,
    pulLength: ?*u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Register_Device_Interface_ExA(
    dnDevInst: u32,
    InterfaceClassGuid: ?*Guid,
    pszReference: ?*i8,
    pszDeviceInterface: ?*i8,
    pulLength: ?*u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Register_Device_Interface_ExW(
    dnDevInst: u32,
    InterfaceClassGuid: ?*Guid,
    pszReference: ?*u16,
    pszDeviceInterface: ?*u16,
    pulLength: ?*u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Set_DevNode_Problem_Ex(
    dnDevInst: u32,
    ulProblem: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Set_DevNode_Problem(
    dnDevInst: u32,
    ulProblem: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Unregister_Device_InterfaceA(
    pszDeviceInterface: ?*i8,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Unregister_Device_InterfaceW(
    pszDeviceInterface: ?*u16,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Unregister_Device_Interface_ExA(
    pszDeviceInterface: ?*i8,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Unregister_Device_Interface_ExW(
    pszDeviceInterface: ?*u16,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Register_Device_Driver(
    dnDevInst: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Register_Device_Driver_Ex(
    dnDevInst: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Remove_SubTree(
    dnAncestor: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Remove_SubTree_Ex(
    dnAncestor: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-config-l1-1-1" fn CM_Set_DevNode_PropertyW(
    dnDevInst: u32,
    PropertyKey: ?*DEVPROPKEY,
    PropertyType: u32,
    PropertyBuffer: ?*u8,
    PropertyBufferSize: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "CFGMGR32" fn CM_Set_DevNode_Property_ExW(
    dnDevInst: u32,
    PropertyKey: ?*DEVPROPKEY,
    PropertyType: u32,
    PropertyBuffer: ?*u8,
    PropertyBufferSize: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Set_DevNode_Registry_PropertyA(
    dnDevInst: u32,
    ulProperty: u32,
    Buffer: ?*opaque{},
    ulLength: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Set_DevNode_Registry_PropertyW(
    dnDevInst: u32,
    ulProperty: u32,
    Buffer: ?*opaque{},
    ulLength: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Set_DevNode_Registry_Property_ExA(
    dnDevInst: u32,
    ulProperty: u32,
    Buffer: ?*opaque{},
    ulLength: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Set_DevNode_Registry_Property_ExW(
    dnDevInst: u32,
    ulProperty: u32,
    Buffer: ?*opaque{},
    ulLength: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-config-l1-1-1" fn CM_Set_Device_Interface_PropertyW(
    pszDeviceInterface: ?*u16,
    PropertyKey: ?*DEVPROPKEY,
    PropertyType: u32,
    PropertyBuffer: ?*u8,
    PropertyBufferSize: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "CFGMGR32" fn CM_Set_Device_Interface_Property_ExW(
    pszDeviceInterface: ?*u16,
    PropertyKey: ?*DEVPROPKEY,
    PropertyType: u32,
    PropertyBuffer: ?*u8,
    PropertyBufferSize: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Is_Dock_Station_Present(
    pbPresent: ?*i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Is_Dock_Station_Present_Ex(
    pbPresent: ?*i32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Request_Eject_PC(
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Request_Eject_PC_Ex(
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Set_HW_Prof_FlagsA(
    pDeviceID: ?*i8,
    ulConfig: u32,
    ulValue: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Set_HW_Prof_FlagsW(
    pDeviceID: ?*u16,
    ulConfig: u32,
    ulValue: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Set_HW_Prof_Flags_ExA(
    pDeviceID: ?*i8,
    ulConfig: u32,
    ulValue: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Set_HW_Prof_Flags_ExW(
    pDeviceID: ?*u16,
    ulConfig: u32,
    ulValue: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Setup_DevNode(
    dnDevInst: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Setup_DevNode_Ex(
    dnDevInst: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Test_Range_Available(
    ullStartValue: u64,
    ullEndValue: u64,
    rlh: ?*opaque{},
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Uninstall_DevNode(
    dnDevInst: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Uninstall_DevNode_Ex(
    dnDevInst: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Run_Detection(
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Run_Detection_Ex(
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Set_HW_Prof(
    ulHardwareProfile: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Set_HW_Prof_Ex(
    ulHardwareProfile: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Query_Resource_Conflict_List(
    pclConflictList: ?*?*opaque{},
    dnDevInst: u32,
    ResourceID: u32,
    ResourceData: ?*opaque{},
    ResourceLen: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Free_Resource_Conflict_Handle(
    clConflictList: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Resource_Conflict_Count(
    clConflictList: ?*opaque{},
    pulCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Resource_Conflict_DetailsA(
    clConflictList: ?*opaque{},
    ulIndex: u32,
    pConflictDetails: ?*CONFLICT_DETAILS_A,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Resource_Conflict_DetailsW(
    clConflictList: ?*opaque{},
    ulIndex: u32,
    pConflictDetails: ?*CONFLICT_DETAILS_W,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-config-l1-1-1" fn CM_Get_Class_PropertyW(
    ClassGUID: ?*Guid,
    PropertyKey: ?*DEVPROPKEY,
    PropertyType: ?*u32,
    PropertyBuffer: ?*u8,
    PropertyBufferSize: ?*u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "CFGMGR32" fn CM_Get_Class_Property_ExW(
    ClassGUID: ?*Guid,
    PropertyKey: ?*DEVPROPKEY,
    PropertyType: ?*u32,
    PropertyBuffer: ?*u8,
    PropertyBufferSize: ?*u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-config-l1-1-1" fn CM_Get_Class_Property_Keys(
    ClassGUID: ?*Guid,
    PropertyKeyArray: ?*DEVPROPKEY,
    PropertyKeyCount: ?*u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "CFGMGR32" fn CM_Get_Class_Property_Keys_Ex(
    ClassGUID: ?*Guid,
    PropertyKeyArray: ?*DEVPROPKEY,
    PropertyKeyCount: ?*u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-config-l1-1-1" fn CM_Set_Class_PropertyW(
    ClassGUID: ?*Guid,
    PropertyKey: ?*DEVPROPKEY,
    PropertyType: u32,
    PropertyBuffer: ?*u8,
    PropertyBufferSize: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "CFGMGR32" fn CM_Set_Class_Property_ExW(
    ClassGUID: ?*Guid,
    PropertyKey: ?*DEVPROPKEY,
    PropertyType: u32,
    PropertyBuffer: ?*u8,
    PropertyBufferSize: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Class_Registry_PropertyA(
    ClassGuid: ?*Guid,
    ulProperty: u32,
    pulRegDataType: ?*u32,
    Buffer: ?*opaque{},
    pulLength: ?*u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Get_Class_Registry_PropertyW(
    ClassGuid: ?*Guid,
    ulProperty: u32,
    pulRegDataType: ?*u32,
    Buffer: ?*opaque{},
    pulLength: ?*u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Set_Class_Registry_PropertyA(
    ClassGuid: ?*Guid,
    ulProperty: u32,
    Buffer: ?*opaque{},
    ulLength: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CM_Set_Class_Registry_PropertyW(
    ClassGuid: ?*Guid,
    ulProperty: u32,
    Buffer: ?*opaque{},
    ulLength: u32,
    ulFlags: u32,
    hMachine: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn CMP_WaitNoPendingInstallEvents(
    dwTimeout: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-config-l1-1-1" fn CM_Register_Notification(
    pFilter: ?*CM_NOTIFY_FILTER,
    pContext: ?*opaque{},
    pCallback: PCM_NOTIFY_CALLBACK,
    pNotifyContext: ?*?*HCMNOTIFICATION__,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-config-l1-1-1" fn CM_Unregister_Notification(
    NotifyContext: ?*HCMNOTIFICATION__,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-devices-config-l1-1-1" fn CM_MapCrToWin32Err(
    CmReturnCode: u32,
    DefaultErr: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "newdev" fn UpdateDriverForPlugAndPlayDevicesA(
    hwndParent: HWND,
    HardwareId: ?*i8,
    FullInfPath: ?*i8,
    InstallFlags: u32,
    bRebootRequired: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "newdev" fn UpdateDriverForPlugAndPlayDevicesW(
    hwndParent: HWND,
    HardwareId: ?*u16,
    FullInfPath: ?*u16,
    InstallFlags: u32,
    bRebootRequired: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "newdev" fn DiInstallDevice(
    hwndParent: HWND,
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    DriverInfoData: ?*SP_DRVINFO_DATA_V2_A,
    Flags: u32,
    NeedReboot: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "newdev" fn DiInstallDriverW(
    hwndParent: HWND,
    InfPath: ?*u16,
    Flags: u32,
    NeedReboot: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "newdev" fn DiInstallDriverA(
    hwndParent: HWND,
    InfPath: ?*i8,
    Flags: u32,
    NeedReboot: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "newdev" fn DiUninstallDevice(
    hwndParent: HWND,
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    Flags: u32,
    NeedReboot: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "newdev" fn DiUninstallDriverW(
    hwndParent: HWND,
    InfPath: ?*u16,
    Flags: u32,
    NeedReboot: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "newdev" fn DiUninstallDriverA(
    hwndParent: HWND,
    InfPath: ?*i8,
    Flags: u32,
    NeedReboot: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "newdev" fn DiShowUpdateDevice(
    hwndParent: HWND,
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    Flags: u32,
    NeedReboot: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "newdev" fn DiRollbackDriver(
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    hwndParent: HWND,
    Flags: u32,
    NeedReboot: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "newdev" fn DiShowUpdateDriver(
    hwndParent: HWND,
    FilePath: ?*u16,
    Flags: u32,
    NeedReboot: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const SP_DEVICE_INTERFACE_DETAIL_DATA_ = SP_DEVICE_INTERFACE_DETAIL_DATA_A;
        pub const SP_DEVINFO_LIST_DETAIL_DATA_ = SP_DEVINFO_LIST_DETAIL_DATA_A;
        pub const SP_DEVINSTALL_PARAMS_ = SP_DEVINSTALL_PARAMS_A;
        pub const SP_SELECTDEVICE_PARAMS_ = SP_SELECTDEVICE_PARAMS_A;
        pub const SP_TROUBLESHOOTER_PARAMS_ = SP_TROUBLESHOOTER_PARAMS_A;
        pub const SP_POWERMESSAGEWAKE_PARAMS_ = SP_POWERMESSAGEWAKE_PARAMS_A;
        pub const SP_DRVINFO_DATA_V2_ = SP_DRVINFO_DATA_V2_A;
        pub const SP_DRVINFO_DATA_V1_ = SP_DRVINFO_DATA_V1_A;
        pub const SP_DRVINFO_DETAIL_DATA_ = SP_DRVINFO_DETAIL_DATA_A;
        pub const SP_BACKUP_QUEUE_PARAMS_V2_ = SP_BACKUP_QUEUE_PARAMS_V2_A;
        pub const SP_BACKUP_QUEUE_PARAMS_V1_ = SP_BACKUP_QUEUE_PARAMS_V1_A;
        pub const CONFLICT_DETAILS_ = CONFLICT_DETAILS_A;
        pub const HWProfileInfo_s = HWProfileInfo_sA;
        pub const SetupGetInfDriverStoreLocation = SetupGetInfDriverStoreLocationA;
        pub const SetupGetInfPublishedName = SetupGetInfPublishedNameA;
        pub const SetupGetBackupInformation = SetupGetBackupInformationA;
        pub const SetupPrepareQueueForRestore = SetupPrepareQueueForRestoreA;
        pub const SetupDiCreateDeviceInfoListEx = SetupDiCreateDeviceInfoListExA;
        pub const SetupDiGetDeviceInfoListDetail = SetupDiGetDeviceInfoListDetailA;
        pub const SetupDiCreateDeviceInfo = SetupDiCreateDeviceInfoA;
        pub const SetupDiOpenDeviceInfo = SetupDiOpenDeviceInfoA;
        pub const SetupDiGetDeviceInstanceId = SetupDiGetDeviceInstanceIdA;
        pub const SetupDiCreateDeviceInterface = SetupDiCreateDeviceInterfaceA;
        pub const SetupDiOpenDeviceInterface = SetupDiOpenDeviceInterfaceA;
        pub const SetupDiGetDeviceInterfaceDetail = SetupDiGetDeviceInterfaceDetailA;
        pub const SetupDiEnumDriverInfo = SetupDiEnumDriverInfoA;
        pub const SetupDiGetSelectedDriver = SetupDiGetSelectedDriverA;
        pub const SetupDiSetSelectedDriver = SetupDiSetSelectedDriverA;
        pub const SetupDiGetDriverInfoDetail = SetupDiGetDriverInfoDetailA;
        pub const SetupDiGetClassDevsEx = SetupDiGetClassDevsExA;
        pub const SetupDiGetINFClass = SetupDiGetINFClassA;
        pub const SetupDiBuildClassInfoListEx = SetupDiBuildClassInfoListExA;
        pub const SetupDiGetClassDescription = SetupDiGetClassDescriptionA;
        pub const SetupDiGetClassDescriptionEx = SetupDiGetClassDescriptionExA;
        pub const SetupDiInstallClass = SetupDiInstallClassA;
        pub const SetupDiInstallClassEx = SetupDiInstallClassExA;
        pub const SetupDiOpenClassRegKeyEx = SetupDiOpenClassRegKeyExA;
        pub const SetupDiCreateDeviceInterfaceRegKey = SetupDiCreateDeviceInterfaceRegKeyA;
        pub const SetupDiCreateDevRegKey = SetupDiCreateDevRegKeyA;
        pub const SetupDiGetHwProfileListEx = SetupDiGetHwProfileListExA;
        pub const SetupDiGetDeviceRegistryProperty = SetupDiGetDeviceRegistryPropertyA;
        pub const SetupDiGetClassRegistryProperty = SetupDiGetClassRegistryPropertyA;
        pub const SetupDiSetDeviceRegistryProperty = SetupDiSetDeviceRegistryPropertyA;
        pub const SetupDiSetClassRegistryProperty = SetupDiSetClassRegistryPropertyA;
        pub const SetupDiGetDeviceInstallParams = SetupDiGetDeviceInstallParamsA;
        pub const SetupDiGetClassInstallParams = SetupDiGetClassInstallParamsA;
        pub const SetupDiSetDeviceInstallParams = SetupDiSetDeviceInstallParamsA;
        pub const SetupDiSetClassInstallParams = SetupDiSetClassInstallParamsA;
        pub const SetupDiGetDriverInstallParams = SetupDiGetDriverInstallParamsA;
        pub const SetupDiSetDriverInstallParams = SetupDiSetDriverInstallParamsA;
        pub const SetupDiGetClassImageListEx = SetupDiGetClassImageListExA;
        pub const SetupDiGetClassDevPropertySheets = SetupDiGetClassDevPropertySheetsA;
        pub const SetupDiClassNameFromGuid = SetupDiClassNameFromGuidA;
        pub const SetupDiClassNameFromGuidEx = SetupDiClassNameFromGuidExA;
        pub const SetupDiClassGuidsFromName = SetupDiClassGuidsFromNameA;
        pub const SetupDiClassGuidsFromNameEx = SetupDiClassGuidsFromNameExA;
        pub const SetupDiGetHwProfileFriendlyName = SetupDiGetHwProfileFriendlyNameA;
        pub const SetupDiGetHwProfileFriendlyNameEx = SetupDiGetHwProfileFriendlyNameExA;
        pub const SetupDiGetActualModelsSection = SetupDiGetActualModelsSectionA;
        pub const SetupDiGetActualSectionToInstall = SetupDiGetActualSectionToInstallA;
        pub const SetupDiGetActualSectionToInstallEx = SetupDiGetActualSectionToInstallExA;
        pub const SetupDiGetCustomDeviceProperty = SetupDiGetCustomDevicePropertyA;
        pub const CM_Add_ID = CM_Add_IDA;
        pub const CM_Add_ID_Ex = CM_Add_ID_ExA;
        pub const CM_Connect_Machine = CM_Connect_MachineA;
        pub const CM_Create_DevNode = CM_Create_DevNodeA;
        pub const CM_Create_DevNode_Ex = CM_Create_DevNode_ExA;
        pub const CM_Enumerate_Enumerators = CM_Enumerate_EnumeratorsA;
        pub const CM_Enumerate_Enumerators_Ex = CM_Enumerate_Enumerators_ExA;
        pub const CM_Get_Class_Name = CM_Get_Class_NameA;
        pub const CM_Get_Class_Name_Ex = CM_Get_Class_Name_ExA;
        pub const CM_Get_Class_Key_Name = CM_Get_Class_Key_NameA;
        pub const CM_Get_Class_Key_Name_Ex = CM_Get_Class_Key_Name_ExA;
        pub const CM_Get_Device_ID = CM_Get_Device_IDA;
        pub const CM_Get_Device_ID_Ex = CM_Get_Device_ID_ExA;
        pub const CM_Get_Device_ID_List = CM_Get_Device_ID_ListA;
        pub const CM_Get_Device_ID_List_Ex = CM_Get_Device_ID_List_ExA;
        pub const CM_Get_Device_ID_List_Size = CM_Get_Device_ID_List_SizeA;
        pub const CM_Get_Device_ID_List_Size_Ex = CM_Get_Device_ID_List_Size_ExA;
        pub const CM_Get_DevNode_Registry_Property = CM_Get_DevNode_Registry_PropertyA;
        pub const CM_Get_DevNode_Registry_Property_Ex = CM_Get_DevNode_Registry_Property_ExA;
        pub const CM_Get_DevNode_Custom_Property = CM_Get_DevNode_Custom_PropertyA;
        pub const CM_Get_DevNode_Custom_Property_Ex = CM_Get_DevNode_Custom_Property_ExA;
        pub const CM_Get_Hardware_Profile_Info = CM_Get_Hardware_Profile_InfoA;
        pub const CM_Get_Hardware_Profile_Info_Ex = CM_Get_Hardware_Profile_Info_ExA;
        pub const CM_Get_HW_Prof_Flags = CM_Get_HW_Prof_FlagsA;
        pub const CM_Get_HW_Prof_Flags_Ex = CM_Get_HW_Prof_Flags_ExA;
        pub const CM_Get_Device_Interface_Alias = CM_Get_Device_Interface_AliasA;
        pub const CM_Get_Device_Interface_Alias_Ex = CM_Get_Device_Interface_Alias_ExA;
        pub const CM_Get_Device_Interface_List = CM_Get_Device_Interface_ListA;
        pub const CM_Get_Device_Interface_List_Ex = CM_Get_Device_Interface_List_ExA;
        pub const CM_Get_Device_Interface_List_Size = CM_Get_Device_Interface_List_SizeA;
        pub const CM_Get_Device_Interface_List_Size_Ex = CM_Get_Device_Interface_List_Size_ExA;
        pub const CM_Locate_DevNode = CM_Locate_DevNodeA;
        pub const CM_Locate_DevNode_Ex = CM_Locate_DevNode_ExA;
        pub const CM_Open_Class_Key = CM_Open_Class_KeyA;
        pub const CM_Open_Class_Key_Ex = CM_Open_Class_Key_ExA;
        pub const CM_Open_Device_Interface_Key = CM_Open_Device_Interface_KeyA;
        pub const CM_Open_Device_Interface_Key_Ex = CM_Open_Device_Interface_Key_ExA;
        pub const CM_Delete_Device_Interface_Key = CM_Delete_Device_Interface_KeyA;
        pub const CM_Delete_Device_Interface_Key_Ex = CM_Delete_Device_Interface_Key_ExA;
        pub const CM_Query_And_Remove_SubTree = CM_Query_And_Remove_SubTreeA;
        pub const CM_Query_And_Remove_SubTree_Ex = CM_Query_And_Remove_SubTree_ExA;
        pub const CM_Request_Device_Eject = CM_Request_Device_EjectA;
        pub const CM_Request_Device_Eject_Ex = CM_Request_Device_Eject_ExA;
        pub const CM_Register_Device_Interface = CM_Register_Device_InterfaceA;
        pub const CM_Register_Device_Interface_Ex = CM_Register_Device_Interface_ExA;
        pub const CM_Unregister_Device_Interface = CM_Unregister_Device_InterfaceA;
        pub const CM_Unregister_Device_Interface_Ex = CM_Unregister_Device_Interface_ExA;
        pub const CM_Set_DevNode_Registry_Property = CM_Set_DevNode_Registry_PropertyA;
        pub const CM_Set_DevNode_Registry_Property_Ex = CM_Set_DevNode_Registry_Property_ExA;
        pub const CM_Set_HW_Prof_Flags = CM_Set_HW_Prof_FlagsA;
        pub const CM_Set_HW_Prof_Flags_Ex = CM_Set_HW_Prof_Flags_ExA;
        pub const CM_Get_Resource_Conflict_Details = CM_Get_Resource_Conflict_DetailsA;
        pub const CM_Get_Class_Registry_Property = CM_Get_Class_Registry_PropertyA;
        pub const CM_Set_Class_Registry_Property = CM_Set_Class_Registry_PropertyA;
        pub const UpdateDriverForPlugAndPlayDevices = UpdateDriverForPlugAndPlayDevicesA;
        pub const DiInstallDriver = DiInstallDriverA;
        pub const DiUninstallDriver = DiUninstallDriverA;
    },
    .wide => struct {
        pub const SP_DEVICE_INTERFACE_DETAIL_DATA_ = SP_DEVICE_INTERFACE_DETAIL_DATA_W;
        pub const SP_DEVINFO_LIST_DETAIL_DATA_ = SP_DEVINFO_LIST_DETAIL_DATA_W;
        pub const SP_DEVINSTALL_PARAMS_ = SP_DEVINSTALL_PARAMS_W;
        pub const SP_SELECTDEVICE_PARAMS_ = SP_SELECTDEVICE_PARAMS_W;
        pub const SP_TROUBLESHOOTER_PARAMS_ = SP_TROUBLESHOOTER_PARAMS_W;
        pub const SP_POWERMESSAGEWAKE_PARAMS_ = SP_POWERMESSAGEWAKE_PARAMS_W;
        pub const SP_DRVINFO_DATA_V2_ = SP_DRVINFO_DATA_V2_W;
        pub const SP_DRVINFO_DATA_V1_ = SP_DRVINFO_DATA_V1_W;
        pub const SP_DRVINFO_DETAIL_DATA_ = SP_DRVINFO_DETAIL_DATA_W;
        pub const SP_BACKUP_QUEUE_PARAMS_V2_ = SP_BACKUP_QUEUE_PARAMS_V2_W;
        pub const SP_BACKUP_QUEUE_PARAMS_V1_ = SP_BACKUP_QUEUE_PARAMS_V1_W;
        pub const CONFLICT_DETAILS_ = CONFLICT_DETAILS_W;
        pub const HWProfileInfo_s = HWProfileInfo_sW;
        pub const SetupGetInfDriverStoreLocation = SetupGetInfDriverStoreLocationW;
        pub const SetupGetInfPublishedName = SetupGetInfPublishedNameW;
        pub const SetupGetBackupInformation = SetupGetBackupInformationW;
        pub const SetupPrepareQueueForRestore = SetupPrepareQueueForRestoreW;
        pub const SetupDiCreateDeviceInfoListEx = SetupDiCreateDeviceInfoListExW;
        pub const SetupDiGetDeviceInfoListDetail = SetupDiGetDeviceInfoListDetailW;
        pub const SetupDiCreateDeviceInfo = SetupDiCreateDeviceInfoW;
        pub const SetupDiOpenDeviceInfo = SetupDiOpenDeviceInfoW;
        pub const SetupDiGetDeviceInstanceId = SetupDiGetDeviceInstanceIdW;
        pub const SetupDiCreateDeviceInterface = SetupDiCreateDeviceInterfaceW;
        pub const SetupDiOpenDeviceInterface = SetupDiOpenDeviceInterfaceW;
        pub const SetupDiGetDeviceInterfaceDetail = SetupDiGetDeviceInterfaceDetailW;
        pub const SetupDiEnumDriverInfo = SetupDiEnumDriverInfoW;
        pub const SetupDiGetSelectedDriver = SetupDiGetSelectedDriverW;
        pub const SetupDiSetSelectedDriver = SetupDiSetSelectedDriverW;
        pub const SetupDiGetDriverInfoDetail = SetupDiGetDriverInfoDetailW;
        pub const SetupDiGetClassDevsEx = SetupDiGetClassDevsExW;
        pub const SetupDiGetINFClass = SetupDiGetINFClassW;
        pub const SetupDiBuildClassInfoListEx = SetupDiBuildClassInfoListExW;
        pub const SetupDiGetClassDescription = SetupDiGetClassDescriptionW;
        pub const SetupDiGetClassDescriptionEx = SetupDiGetClassDescriptionExW;
        pub const SetupDiInstallClass = SetupDiInstallClassW;
        pub const SetupDiInstallClassEx = SetupDiInstallClassExW;
        pub const SetupDiOpenClassRegKeyEx = SetupDiOpenClassRegKeyExW;
        pub const SetupDiCreateDeviceInterfaceRegKey = SetupDiCreateDeviceInterfaceRegKeyW;
        pub const SetupDiCreateDevRegKey = SetupDiCreateDevRegKeyW;
        pub const SetupDiGetHwProfileListEx = SetupDiGetHwProfileListExW;
        pub const SetupDiGetDeviceRegistryProperty = SetupDiGetDeviceRegistryPropertyW;
        pub const SetupDiGetClassRegistryProperty = SetupDiGetClassRegistryPropertyW;
        pub const SetupDiSetDeviceRegistryProperty = SetupDiSetDeviceRegistryPropertyW;
        pub const SetupDiSetClassRegistryProperty = SetupDiSetClassRegistryPropertyW;
        pub const SetupDiGetDeviceInstallParams = SetupDiGetDeviceInstallParamsW;
        pub const SetupDiGetClassInstallParams = SetupDiGetClassInstallParamsW;
        pub const SetupDiSetDeviceInstallParams = SetupDiSetDeviceInstallParamsW;
        pub const SetupDiSetClassInstallParams = SetupDiSetClassInstallParamsW;
        pub const SetupDiGetDriverInstallParams = SetupDiGetDriverInstallParamsW;
        pub const SetupDiSetDriverInstallParams = SetupDiSetDriverInstallParamsW;
        pub const SetupDiGetClassImageListEx = SetupDiGetClassImageListExW;
        pub const SetupDiGetClassDevPropertySheets = SetupDiGetClassDevPropertySheetsW;
        pub const SetupDiClassNameFromGuid = SetupDiClassNameFromGuidW;
        pub const SetupDiClassNameFromGuidEx = SetupDiClassNameFromGuidExW;
        pub const SetupDiClassGuidsFromName = SetupDiClassGuidsFromNameW;
        pub const SetupDiClassGuidsFromNameEx = SetupDiClassGuidsFromNameExW;
        pub const SetupDiGetHwProfileFriendlyName = SetupDiGetHwProfileFriendlyNameW;
        pub const SetupDiGetHwProfileFriendlyNameEx = SetupDiGetHwProfileFriendlyNameExW;
        pub const SetupDiGetActualModelsSection = SetupDiGetActualModelsSectionW;
        pub const SetupDiGetActualSectionToInstall = SetupDiGetActualSectionToInstallW;
        pub const SetupDiGetActualSectionToInstallEx = SetupDiGetActualSectionToInstallExW;
        pub const SetupDiGetCustomDeviceProperty = SetupDiGetCustomDevicePropertyW;
        pub const CM_Add_ID = CM_Add_IDW;
        pub const CM_Add_ID_Ex = CM_Add_ID_ExW;
        pub const CM_Connect_Machine = CM_Connect_MachineW;
        pub const CM_Create_DevNode = CM_Create_DevNodeW;
        pub const CM_Create_DevNode_Ex = CM_Create_DevNode_ExW;
        pub const CM_Enumerate_Enumerators = CM_Enumerate_EnumeratorsW;
        pub const CM_Enumerate_Enumerators_Ex = CM_Enumerate_Enumerators_ExW;
        pub const CM_Get_Class_Name = CM_Get_Class_NameW;
        pub const CM_Get_Class_Name_Ex = CM_Get_Class_Name_ExW;
        pub const CM_Get_Class_Key_Name = CM_Get_Class_Key_NameW;
        pub const CM_Get_Class_Key_Name_Ex = CM_Get_Class_Key_Name_ExW;
        pub const CM_Get_Device_ID = CM_Get_Device_IDW;
        pub const CM_Get_Device_ID_Ex = CM_Get_Device_ID_ExW;
        pub const CM_Get_Device_ID_List = CM_Get_Device_ID_ListW;
        pub const CM_Get_Device_ID_List_Ex = CM_Get_Device_ID_List_ExW;
        pub const CM_Get_Device_ID_List_Size = CM_Get_Device_ID_List_SizeW;
        pub const CM_Get_Device_ID_List_Size_Ex = CM_Get_Device_ID_List_Size_ExW;
        pub const CM_Get_DevNode_Registry_Property = CM_Get_DevNode_Registry_PropertyW;
        pub const CM_Get_DevNode_Registry_Property_Ex = CM_Get_DevNode_Registry_Property_ExW;
        pub const CM_Get_DevNode_Custom_Property = CM_Get_DevNode_Custom_PropertyW;
        pub const CM_Get_DevNode_Custom_Property_Ex = CM_Get_DevNode_Custom_Property_ExW;
        pub const CM_Get_Hardware_Profile_Info = CM_Get_Hardware_Profile_InfoW;
        pub const CM_Get_Hardware_Profile_Info_Ex = CM_Get_Hardware_Profile_Info_ExW;
        pub const CM_Get_HW_Prof_Flags = CM_Get_HW_Prof_FlagsW;
        pub const CM_Get_HW_Prof_Flags_Ex = CM_Get_HW_Prof_Flags_ExW;
        pub const CM_Get_Device_Interface_Alias = CM_Get_Device_Interface_AliasW;
        pub const CM_Get_Device_Interface_Alias_Ex = CM_Get_Device_Interface_Alias_ExW;
        pub const CM_Get_Device_Interface_List = CM_Get_Device_Interface_ListW;
        pub const CM_Get_Device_Interface_List_Ex = CM_Get_Device_Interface_List_ExW;
        pub const CM_Get_Device_Interface_List_Size = CM_Get_Device_Interface_List_SizeW;
        pub const CM_Get_Device_Interface_List_Size_Ex = CM_Get_Device_Interface_List_Size_ExW;
        pub const CM_Locate_DevNode = CM_Locate_DevNodeW;
        pub const CM_Locate_DevNode_Ex = CM_Locate_DevNode_ExW;
        pub const CM_Open_Class_Key = CM_Open_Class_KeyW;
        pub const CM_Open_Class_Key_Ex = CM_Open_Class_Key_ExW;
        pub const CM_Open_Device_Interface_Key = CM_Open_Device_Interface_KeyW;
        pub const CM_Open_Device_Interface_Key_Ex = CM_Open_Device_Interface_Key_ExW;
        pub const CM_Delete_Device_Interface_Key = CM_Delete_Device_Interface_KeyW;
        pub const CM_Delete_Device_Interface_Key_Ex = CM_Delete_Device_Interface_Key_ExW;
        pub const CM_Query_And_Remove_SubTree = CM_Query_And_Remove_SubTreeW;
        pub const CM_Query_And_Remove_SubTree_Ex = CM_Query_And_Remove_SubTree_ExW;
        pub const CM_Request_Device_Eject = CM_Request_Device_EjectW;
        pub const CM_Request_Device_Eject_Ex = CM_Request_Device_Eject_ExW;
        pub const CM_Register_Device_Interface = CM_Register_Device_InterfaceW;
        pub const CM_Register_Device_Interface_Ex = CM_Register_Device_Interface_ExW;
        pub const CM_Unregister_Device_Interface = CM_Unregister_Device_InterfaceW;
        pub const CM_Unregister_Device_Interface_Ex = CM_Unregister_Device_Interface_ExW;
        pub const CM_Set_DevNode_Registry_Property = CM_Set_DevNode_Registry_PropertyW;
        pub const CM_Set_DevNode_Registry_Property_Ex = CM_Set_DevNode_Registry_Property_ExW;
        pub const CM_Set_HW_Prof_Flags = CM_Set_HW_Prof_FlagsW;
        pub const CM_Set_HW_Prof_Flags_Ex = CM_Set_HW_Prof_Flags_ExW;
        pub const CM_Get_Resource_Conflict_Details = CM_Get_Resource_Conflict_DetailsW;
        pub const CM_Get_Class_Registry_Property = CM_Get_Class_Registry_PropertyW;
        pub const CM_Set_Class_Registry_Property = CM_Set_Class_Registry_PropertyW;
        pub const UpdateDriverForPlugAndPlayDevices = UpdateDriverForPlugAndPlayDevicesW;
        pub const DiInstallDriver = DiInstallDriverW;
        pub const DiUninstallDriver = DiUninstallDriverW;
    },
    else => if (@import("builtin").is_test) struct {
        pub const SP_DEVICE_INTERFACE_DETAIL_DATA_ = *opaque{};
        pub const SP_DEVINFO_LIST_DETAIL_DATA_ = *opaque{};
        pub const SP_DEVINSTALL_PARAMS_ = *opaque{};
        pub const SP_SELECTDEVICE_PARAMS_ = *opaque{};
        pub const SP_TROUBLESHOOTER_PARAMS_ = *opaque{};
        pub const SP_POWERMESSAGEWAKE_PARAMS_ = *opaque{};
        pub const SP_DRVINFO_DATA_V2_ = *opaque{};
        pub const SP_DRVINFO_DATA_V1_ = *opaque{};
        pub const SP_DRVINFO_DETAIL_DATA_ = *opaque{};
        pub const SP_BACKUP_QUEUE_PARAMS_V2_ = *opaque{};
        pub const SP_BACKUP_QUEUE_PARAMS_V1_ = *opaque{};
        pub const CONFLICT_DETAILS_ = *opaque{};
        pub const HWProfileInfo_s = *opaque{};
        pub const SetupGetInfDriverStoreLocation = *opaque{};
        pub const SetupGetInfPublishedName = *opaque{};
        pub const SetupGetBackupInformation = *opaque{};
        pub const SetupPrepareQueueForRestore = *opaque{};
        pub const SetupDiCreateDeviceInfoListEx = *opaque{};
        pub const SetupDiGetDeviceInfoListDetail = *opaque{};
        pub const SetupDiCreateDeviceInfo = *opaque{};
        pub const SetupDiOpenDeviceInfo = *opaque{};
        pub const SetupDiGetDeviceInstanceId = *opaque{};
        pub const SetupDiCreateDeviceInterface = *opaque{};
        pub const SetupDiOpenDeviceInterface = *opaque{};
        pub const SetupDiGetDeviceInterfaceDetail = *opaque{};
        pub const SetupDiEnumDriverInfo = *opaque{};
        pub const SetupDiGetSelectedDriver = *opaque{};
        pub const SetupDiSetSelectedDriver = *opaque{};
        pub const SetupDiGetDriverInfoDetail = *opaque{};
        pub const SetupDiGetClassDevsEx = *opaque{};
        pub const SetupDiGetINFClass = *opaque{};
        pub const SetupDiBuildClassInfoListEx = *opaque{};
        pub const SetupDiGetClassDescription = *opaque{};
        pub const SetupDiGetClassDescriptionEx = *opaque{};
        pub const SetupDiInstallClass = *opaque{};
        pub const SetupDiInstallClassEx = *opaque{};
        pub const SetupDiOpenClassRegKeyEx = *opaque{};
        pub const SetupDiCreateDeviceInterfaceRegKey = *opaque{};
        pub const SetupDiCreateDevRegKey = *opaque{};
        pub const SetupDiGetHwProfileListEx = *opaque{};
        pub const SetupDiGetDeviceRegistryProperty = *opaque{};
        pub const SetupDiGetClassRegistryProperty = *opaque{};
        pub const SetupDiSetDeviceRegistryProperty = *opaque{};
        pub const SetupDiSetClassRegistryProperty = *opaque{};
        pub const SetupDiGetDeviceInstallParams = *opaque{};
        pub const SetupDiGetClassInstallParams = *opaque{};
        pub const SetupDiSetDeviceInstallParams = *opaque{};
        pub const SetupDiSetClassInstallParams = *opaque{};
        pub const SetupDiGetDriverInstallParams = *opaque{};
        pub const SetupDiSetDriverInstallParams = *opaque{};
        pub const SetupDiGetClassImageListEx = *opaque{};
        pub const SetupDiGetClassDevPropertySheets = *opaque{};
        pub const SetupDiClassNameFromGuid = *opaque{};
        pub const SetupDiClassNameFromGuidEx = *opaque{};
        pub const SetupDiClassGuidsFromName = *opaque{};
        pub const SetupDiClassGuidsFromNameEx = *opaque{};
        pub const SetupDiGetHwProfileFriendlyName = *opaque{};
        pub const SetupDiGetHwProfileFriendlyNameEx = *opaque{};
        pub const SetupDiGetActualModelsSection = *opaque{};
        pub const SetupDiGetActualSectionToInstall = *opaque{};
        pub const SetupDiGetActualSectionToInstallEx = *opaque{};
        pub const SetupDiGetCustomDeviceProperty = *opaque{};
        pub const CM_Add_ID = *opaque{};
        pub const CM_Add_ID_Ex = *opaque{};
        pub const CM_Connect_Machine = *opaque{};
        pub const CM_Create_DevNode = *opaque{};
        pub const CM_Create_DevNode_Ex = *opaque{};
        pub const CM_Enumerate_Enumerators = *opaque{};
        pub const CM_Enumerate_Enumerators_Ex = *opaque{};
        pub const CM_Get_Class_Name = *opaque{};
        pub const CM_Get_Class_Name_Ex = *opaque{};
        pub const CM_Get_Class_Key_Name = *opaque{};
        pub const CM_Get_Class_Key_Name_Ex = *opaque{};
        pub const CM_Get_Device_ID = *opaque{};
        pub const CM_Get_Device_ID_Ex = *opaque{};
        pub const CM_Get_Device_ID_List = *opaque{};
        pub const CM_Get_Device_ID_List_Ex = *opaque{};
        pub const CM_Get_Device_ID_List_Size = *opaque{};
        pub const CM_Get_Device_ID_List_Size_Ex = *opaque{};
        pub const CM_Get_DevNode_Registry_Property = *opaque{};
        pub const CM_Get_DevNode_Registry_Property_Ex = *opaque{};
        pub const CM_Get_DevNode_Custom_Property = *opaque{};
        pub const CM_Get_DevNode_Custom_Property_Ex = *opaque{};
        pub const CM_Get_Hardware_Profile_Info = *opaque{};
        pub const CM_Get_Hardware_Profile_Info_Ex = *opaque{};
        pub const CM_Get_HW_Prof_Flags = *opaque{};
        pub const CM_Get_HW_Prof_Flags_Ex = *opaque{};
        pub const CM_Get_Device_Interface_Alias = *opaque{};
        pub const CM_Get_Device_Interface_Alias_Ex = *opaque{};
        pub const CM_Get_Device_Interface_List = *opaque{};
        pub const CM_Get_Device_Interface_List_Ex = *opaque{};
        pub const CM_Get_Device_Interface_List_Size = *opaque{};
        pub const CM_Get_Device_Interface_List_Size_Ex = *opaque{};
        pub const CM_Locate_DevNode = *opaque{};
        pub const CM_Locate_DevNode_Ex = *opaque{};
        pub const CM_Open_Class_Key = *opaque{};
        pub const CM_Open_Class_Key_Ex = *opaque{};
        pub const CM_Open_Device_Interface_Key = *opaque{};
        pub const CM_Open_Device_Interface_Key_Ex = *opaque{};
        pub const CM_Delete_Device_Interface_Key = *opaque{};
        pub const CM_Delete_Device_Interface_Key_Ex = *opaque{};
        pub const CM_Query_And_Remove_SubTree = *opaque{};
        pub const CM_Query_And_Remove_SubTree_Ex = *opaque{};
        pub const CM_Request_Device_Eject = *opaque{};
        pub const CM_Request_Device_Eject_Ex = *opaque{};
        pub const CM_Register_Device_Interface = *opaque{};
        pub const CM_Register_Device_Interface_Ex = *opaque{};
        pub const CM_Unregister_Device_Interface = *opaque{};
        pub const CM_Unregister_Device_Interface_Ex = *opaque{};
        pub const CM_Set_DevNode_Registry_Property = *opaque{};
        pub const CM_Set_DevNode_Registry_Property_Ex = *opaque{};
        pub const CM_Set_HW_Prof_Flags = *opaque{};
        pub const CM_Set_HW_Prof_Flags_Ex = *opaque{};
        pub const CM_Get_Resource_Conflict_Details = *opaque{};
        pub const CM_Get_Class_Registry_Property = *opaque{};
        pub const CM_Set_Class_Registry_Property = *opaque{};
        pub const UpdateDriverForPlugAndPlayDevices = *opaque{};
        pub const DiInstallDriver = *opaque{};
        pub const DiUninstallDriver = *opaque{};
    } else struct {
        pub const SP_DEVICE_INTERFACE_DETAIL_DATA_ = @compileError("'SP_DEVICE_INTERFACE_DETAIL_DATA_' requires that UNICODE be set to true or false in the root module");
        pub const SP_DEVINFO_LIST_DETAIL_DATA_ = @compileError("'SP_DEVINFO_LIST_DETAIL_DATA_' requires that UNICODE be set to true or false in the root module");
        pub const SP_DEVINSTALL_PARAMS_ = @compileError("'SP_DEVINSTALL_PARAMS_' requires that UNICODE be set to true or false in the root module");
        pub const SP_SELECTDEVICE_PARAMS_ = @compileError("'SP_SELECTDEVICE_PARAMS_' requires that UNICODE be set to true or false in the root module");
        pub const SP_TROUBLESHOOTER_PARAMS_ = @compileError("'SP_TROUBLESHOOTER_PARAMS_' requires that UNICODE be set to true or false in the root module");
        pub const SP_POWERMESSAGEWAKE_PARAMS_ = @compileError("'SP_POWERMESSAGEWAKE_PARAMS_' requires that UNICODE be set to true or false in the root module");
        pub const SP_DRVINFO_DATA_V2_ = @compileError("'SP_DRVINFO_DATA_V2_' requires that UNICODE be set to true or false in the root module");
        pub const SP_DRVINFO_DATA_V1_ = @compileError("'SP_DRVINFO_DATA_V1_' requires that UNICODE be set to true or false in the root module");
        pub const SP_DRVINFO_DETAIL_DATA_ = @compileError("'SP_DRVINFO_DETAIL_DATA_' requires that UNICODE be set to true or false in the root module");
        pub const SP_BACKUP_QUEUE_PARAMS_V2_ = @compileError("'SP_BACKUP_QUEUE_PARAMS_V2_' requires that UNICODE be set to true or false in the root module");
        pub const SP_BACKUP_QUEUE_PARAMS_V1_ = @compileError("'SP_BACKUP_QUEUE_PARAMS_V1_' requires that UNICODE be set to true or false in the root module");
        pub const CONFLICT_DETAILS_ = @compileError("'CONFLICT_DETAILS_' requires that UNICODE be set to true or false in the root module");
        pub const HWProfileInfo_s = @compileError("'HWProfileInfo_s' requires that UNICODE be set to true or false in the root module");
        pub const SetupGetInfDriverStoreLocation = @compileError("'SetupGetInfDriverStoreLocation' requires that UNICODE be set to true or false in the root module");
        pub const SetupGetInfPublishedName = @compileError("'SetupGetInfPublishedName' requires that UNICODE be set to true or false in the root module");
        pub const SetupGetBackupInformation = @compileError("'SetupGetBackupInformation' requires that UNICODE be set to true or false in the root module");
        pub const SetupPrepareQueueForRestore = @compileError("'SetupPrepareQueueForRestore' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiCreateDeviceInfoListEx = @compileError("'SetupDiCreateDeviceInfoListEx' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetDeviceInfoListDetail = @compileError("'SetupDiGetDeviceInfoListDetail' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiCreateDeviceInfo = @compileError("'SetupDiCreateDeviceInfo' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiOpenDeviceInfo = @compileError("'SetupDiOpenDeviceInfo' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetDeviceInstanceId = @compileError("'SetupDiGetDeviceInstanceId' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiCreateDeviceInterface = @compileError("'SetupDiCreateDeviceInterface' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiOpenDeviceInterface = @compileError("'SetupDiOpenDeviceInterface' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetDeviceInterfaceDetail = @compileError("'SetupDiGetDeviceInterfaceDetail' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiEnumDriverInfo = @compileError("'SetupDiEnumDriverInfo' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetSelectedDriver = @compileError("'SetupDiGetSelectedDriver' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiSetSelectedDriver = @compileError("'SetupDiSetSelectedDriver' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetDriverInfoDetail = @compileError("'SetupDiGetDriverInfoDetail' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetClassDevsEx = @compileError("'SetupDiGetClassDevsEx' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetINFClass = @compileError("'SetupDiGetINFClass' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiBuildClassInfoListEx = @compileError("'SetupDiBuildClassInfoListEx' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetClassDescription = @compileError("'SetupDiGetClassDescription' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetClassDescriptionEx = @compileError("'SetupDiGetClassDescriptionEx' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiInstallClass = @compileError("'SetupDiInstallClass' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiInstallClassEx = @compileError("'SetupDiInstallClassEx' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiOpenClassRegKeyEx = @compileError("'SetupDiOpenClassRegKeyEx' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiCreateDeviceInterfaceRegKey = @compileError("'SetupDiCreateDeviceInterfaceRegKey' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiCreateDevRegKey = @compileError("'SetupDiCreateDevRegKey' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetHwProfileListEx = @compileError("'SetupDiGetHwProfileListEx' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetDeviceRegistryProperty = @compileError("'SetupDiGetDeviceRegistryProperty' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetClassRegistryProperty = @compileError("'SetupDiGetClassRegistryProperty' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiSetDeviceRegistryProperty = @compileError("'SetupDiSetDeviceRegistryProperty' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiSetClassRegistryProperty = @compileError("'SetupDiSetClassRegistryProperty' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetDeviceInstallParams = @compileError("'SetupDiGetDeviceInstallParams' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetClassInstallParams = @compileError("'SetupDiGetClassInstallParams' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiSetDeviceInstallParams = @compileError("'SetupDiSetDeviceInstallParams' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiSetClassInstallParams = @compileError("'SetupDiSetClassInstallParams' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetDriverInstallParams = @compileError("'SetupDiGetDriverInstallParams' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiSetDriverInstallParams = @compileError("'SetupDiSetDriverInstallParams' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetClassImageListEx = @compileError("'SetupDiGetClassImageListEx' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetClassDevPropertySheets = @compileError("'SetupDiGetClassDevPropertySheets' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiClassNameFromGuid = @compileError("'SetupDiClassNameFromGuid' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiClassNameFromGuidEx = @compileError("'SetupDiClassNameFromGuidEx' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiClassGuidsFromName = @compileError("'SetupDiClassGuidsFromName' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiClassGuidsFromNameEx = @compileError("'SetupDiClassGuidsFromNameEx' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetHwProfileFriendlyName = @compileError("'SetupDiGetHwProfileFriendlyName' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetHwProfileFriendlyNameEx = @compileError("'SetupDiGetHwProfileFriendlyNameEx' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetActualModelsSection = @compileError("'SetupDiGetActualModelsSection' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetActualSectionToInstall = @compileError("'SetupDiGetActualSectionToInstall' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetActualSectionToInstallEx = @compileError("'SetupDiGetActualSectionToInstallEx' requires that UNICODE be set to true or false in the root module");
        pub const SetupDiGetCustomDeviceProperty = @compileError("'SetupDiGetCustomDeviceProperty' requires that UNICODE be set to true or false in the root module");
        pub const CM_Add_ID = @compileError("'CM_Add_ID' requires that UNICODE be set to true or false in the root module");
        pub const CM_Add_ID_Ex = @compileError("'CM_Add_ID_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Connect_Machine = @compileError("'CM_Connect_Machine' requires that UNICODE be set to true or false in the root module");
        pub const CM_Create_DevNode = @compileError("'CM_Create_DevNode' requires that UNICODE be set to true or false in the root module");
        pub const CM_Create_DevNode_Ex = @compileError("'CM_Create_DevNode_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Enumerate_Enumerators = @compileError("'CM_Enumerate_Enumerators' requires that UNICODE be set to true or false in the root module");
        pub const CM_Enumerate_Enumerators_Ex = @compileError("'CM_Enumerate_Enumerators_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Class_Name = @compileError("'CM_Get_Class_Name' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Class_Name_Ex = @compileError("'CM_Get_Class_Name_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Class_Key_Name = @compileError("'CM_Get_Class_Key_Name' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Class_Key_Name_Ex = @compileError("'CM_Get_Class_Key_Name_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Device_ID = @compileError("'CM_Get_Device_ID' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Device_ID_Ex = @compileError("'CM_Get_Device_ID_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Device_ID_List = @compileError("'CM_Get_Device_ID_List' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Device_ID_List_Ex = @compileError("'CM_Get_Device_ID_List_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Device_ID_List_Size = @compileError("'CM_Get_Device_ID_List_Size' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Device_ID_List_Size_Ex = @compileError("'CM_Get_Device_ID_List_Size_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_DevNode_Registry_Property = @compileError("'CM_Get_DevNode_Registry_Property' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_DevNode_Registry_Property_Ex = @compileError("'CM_Get_DevNode_Registry_Property_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_DevNode_Custom_Property = @compileError("'CM_Get_DevNode_Custom_Property' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_DevNode_Custom_Property_Ex = @compileError("'CM_Get_DevNode_Custom_Property_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Hardware_Profile_Info = @compileError("'CM_Get_Hardware_Profile_Info' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Hardware_Profile_Info_Ex = @compileError("'CM_Get_Hardware_Profile_Info_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_HW_Prof_Flags = @compileError("'CM_Get_HW_Prof_Flags' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_HW_Prof_Flags_Ex = @compileError("'CM_Get_HW_Prof_Flags_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Device_Interface_Alias = @compileError("'CM_Get_Device_Interface_Alias' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Device_Interface_Alias_Ex = @compileError("'CM_Get_Device_Interface_Alias_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Device_Interface_List = @compileError("'CM_Get_Device_Interface_List' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Device_Interface_List_Ex = @compileError("'CM_Get_Device_Interface_List_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Device_Interface_List_Size = @compileError("'CM_Get_Device_Interface_List_Size' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Device_Interface_List_Size_Ex = @compileError("'CM_Get_Device_Interface_List_Size_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Locate_DevNode = @compileError("'CM_Locate_DevNode' requires that UNICODE be set to true or false in the root module");
        pub const CM_Locate_DevNode_Ex = @compileError("'CM_Locate_DevNode_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Open_Class_Key = @compileError("'CM_Open_Class_Key' requires that UNICODE be set to true or false in the root module");
        pub const CM_Open_Class_Key_Ex = @compileError("'CM_Open_Class_Key_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Open_Device_Interface_Key = @compileError("'CM_Open_Device_Interface_Key' requires that UNICODE be set to true or false in the root module");
        pub const CM_Open_Device_Interface_Key_Ex = @compileError("'CM_Open_Device_Interface_Key_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Delete_Device_Interface_Key = @compileError("'CM_Delete_Device_Interface_Key' requires that UNICODE be set to true or false in the root module");
        pub const CM_Delete_Device_Interface_Key_Ex = @compileError("'CM_Delete_Device_Interface_Key_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Query_And_Remove_SubTree = @compileError("'CM_Query_And_Remove_SubTree' requires that UNICODE be set to true or false in the root module");
        pub const CM_Query_And_Remove_SubTree_Ex = @compileError("'CM_Query_And_Remove_SubTree_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Request_Device_Eject = @compileError("'CM_Request_Device_Eject' requires that UNICODE be set to true or false in the root module");
        pub const CM_Request_Device_Eject_Ex = @compileError("'CM_Request_Device_Eject_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Register_Device_Interface = @compileError("'CM_Register_Device_Interface' requires that UNICODE be set to true or false in the root module");
        pub const CM_Register_Device_Interface_Ex = @compileError("'CM_Register_Device_Interface_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Unregister_Device_Interface = @compileError("'CM_Unregister_Device_Interface' requires that UNICODE be set to true or false in the root module");
        pub const CM_Unregister_Device_Interface_Ex = @compileError("'CM_Unregister_Device_Interface_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Set_DevNode_Registry_Property = @compileError("'CM_Set_DevNode_Registry_Property' requires that UNICODE be set to true or false in the root module");
        pub const CM_Set_DevNode_Registry_Property_Ex = @compileError("'CM_Set_DevNode_Registry_Property_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Set_HW_Prof_Flags = @compileError("'CM_Set_HW_Prof_Flags' requires that UNICODE be set to true or false in the root module");
        pub const CM_Set_HW_Prof_Flags_Ex = @compileError("'CM_Set_HW_Prof_Flags_Ex' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Resource_Conflict_Details = @compileError("'CM_Get_Resource_Conflict_Details' requires that UNICODE be set to true or false in the root module");
        pub const CM_Get_Class_Registry_Property = @compileError("'CM_Get_Class_Registry_Property' requires that UNICODE be set to true or false in the root module");
        pub const CM_Set_Class_Registry_Property = @compileError("'CM_Set_Class_Registry_Property' requires that UNICODE be set to true or false in the root module");
        pub const UpdateDriverForPlugAndPlayDevices = @compileError("'UpdateDriverForPlugAndPlayDevices' requires that UNICODE be set to true or false in the root module");
        pub const DiInstallDriver = @compileError("'DiInstallDriver' requires that UNICODE be set to true or false in the root module");
        pub const DiUninstallDriver = @compileError("'DiUninstallDriver' requires that UNICODE be set to true or false in the root module");
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const HANDLE = @import("systemservices.zig").HANDLE;
const SP_ALTPLATFORM_INFO_V2 = @import("applicationinstallationandservicing.zig").SP_ALTPLATFORM_INFO_V2;
const BOOL = @import("systemservices.zig").BOOL;
const INFCONTEXT = @import("applicationinstallationandservicing.zig").INFCONTEXT;
const HWND = @import("windowsandmessaging.zig").HWND;
const HKEY = @import("windowsprogramming.zig").HKEY;
const DEVPROPKEY = @import("systemservices.zig").DEVPROPKEY;
const HICON = @import("gdi.zig").HICON;
const HDC = @import("gdi.zig").HDC;
const RECT = @import("displaydevices.zig").RECT;
const PROPSHEETHEADERA_V2 = @import("controls.zig").PROPSHEETHEADERA_V2;
const PROPSHEETHEADERW_V2 = @import("controls.zig").PROPSHEETHEADERW_V2;
const HPROPSHEETPAGE = @import("controls.zig").HPROPSHEETPAGE;

test "" {
    const constant_export_count = 0;
    const type_export_count = 82;
    const func_count = 403;
    const unicode_alias_count = 119;
    const type_import_count = 14;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
