//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: EC_SUBSCRIPTION_PROPERTY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EC_SUBSCRIPTION_PROPERTY_ID = *opaque{
};
// --------------------------------------------------------
// Type: EC_SUBSCRIPTION_CREDENTIALS_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EC_SUBSCRIPTION_CREDENTIALS_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: EC_SUBSCRIPTION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EC_SUBSCRIPTION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: EC_SUBSCRIPTION_RUNTIME_STATUS_INFO_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EC_SUBSCRIPTION_RUNTIME_STATUS_INFO_ID = *opaque{
};
// --------------------------------------------------------
// Type: EC_VARIANT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EC_VARIANT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: EC_VARIANT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EC_VARIANT = extern struct {
    Anonymous: _Anonymous_e__Union,
    Count: u32,
    Type: u32,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: EC_SUBSCRIPTION_CONFIGURATION_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EC_SUBSCRIPTION_CONFIGURATION_MODE = *opaque{
};
// --------------------------------------------------------
// Type: EC_SUBSCRIPTION_DELIVERY_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EC_SUBSCRIPTION_DELIVERY_MODE = *opaque{
};
// --------------------------------------------------------
// Type: EC_SUBSCRIPTION_CONTENT_FORMAT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EC_SUBSCRIPTION_CONTENT_FORMAT = *opaque{
};
// --------------------------------------------------------
// Type: EC_SUBSCRIPTION_RUNTIME_STATUS_ACTIVE_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EC_SUBSCRIPTION_RUNTIME_STATUS_ACTIVE_STATUS = *opaque{
};

//
// functions
//

// set_last_errror=True (can and should we use this?)
pub extern "WecApi" fn EcOpenSubscriptionEnum(
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "WecApi" fn EcEnumNextSubscription(
    SubscriptionEnum: ?*opaque{},
    SubscriptionNameBufferSize: u32,
    SubscriptionNameBuffer: ?*u16,
    SubscriptionNameBufferUsed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WecApi" fn EcOpenSubscription(
    SubscriptionName: ?*u16,
    AccessMask: u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "WecApi" fn EcSetSubscriptionProperty(
    Subscription: ?*opaque{},
    PropertyId: EC_SUBSCRIPTION_PROPERTY_ID,
    Flags: u32,
    PropertyValue: ?*EC_VARIANT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WecApi" fn EcGetSubscriptionProperty(
    Subscription: ?*opaque{},
    PropertyId: EC_SUBSCRIPTION_PROPERTY_ID,
    Flags: u32,
    PropertyValueBufferSize: u32,
    PropertyValueBuffer: ?*EC_VARIANT,
    PropertyValueBufferUsed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WecApi" fn EcSaveSubscription(
    Subscription: ?*opaque{},
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WecApi" fn EcDeleteSubscription(
    SubscriptionName: ?*u16,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WecApi" fn EcGetObjectArraySize(
    ObjectArray: ?*opaque{},
    ObjectArraySize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WecApi" fn EcSetObjectArrayProperty(
    ObjectArray: ?*opaque{},
    PropertyId: EC_SUBSCRIPTION_PROPERTY_ID,
    ArrayIndex: u32,
    Flags: u32,
    PropertyValue: ?*EC_VARIANT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WecApi" fn EcGetObjectArrayProperty(
    ObjectArray: ?*opaque{},
    PropertyId: EC_SUBSCRIPTION_PROPERTY_ID,
    ArrayIndex: u32,
    Flags: u32,
    PropertyValueBufferSize: u32,
    PropertyValueBuffer: ?*EC_VARIANT,
    PropertyValueBufferUsed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WecApi" fn EcInsertObjectArrayElement(
    ObjectArray: ?*opaque{},
    ArrayIndex: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WecApi" fn EcRemoveObjectArrayElement(
    ObjectArray: ?*opaque{},
    ArrayIndex: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WecApi" fn EcGetSubscriptionRunTimeStatus(
    SubscriptionName: ?*u16,
    StatusInfoId: EC_SUBSCRIPTION_RUNTIME_STATUS_INFO_ID,
    EventSourceName: ?*u16,
    Flags: u32,
    StatusValueBufferSize: u32,
    StatusValueBuffer: ?*EC_VARIANT,
    StatusValueBufferUsed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WecApi" fn EcRetrySubscription(
    SubscriptionName: ?*u16,
    EventSourceName: ?*u16,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WecApi" fn EcClose(
    Object: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    else => if (@import("builtin").is_test) struct {
    } else struct {
    },
};

//
// type imports
//
const BOOL = @import("systemservices.zig").BOOL;

test "" {
    const constant_export_count = 0;
    const type_export_count = 10;
    const func_count = 15;
    const unicode_alias_count = 0;
    const type_import_count = 1;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
