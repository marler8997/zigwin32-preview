//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: VisualMutationType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VisualMutationType = *opaque{
};
// --------------------------------------------------------
// Type: BaseValueSource
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BaseValueSource = *opaque{
};
// --------------------------------------------------------
// Type: SourceInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SourceInfo = extern struct {
    FileName: BSTR,
    LineNumber: u32,
    ColumnNumber: u32,
    CharPosition: u32,
    Hash: BSTR,
};
// --------------------------------------------------------
// Type: ParentChildRelation
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ParentChildRelation = extern struct {
    Parent: u64,
    Child: u64,
    ChildIndex: u32,
};
// --------------------------------------------------------
// Type: VisualElement
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VisualElement = extern struct {
    Handle: u64,
    SrcInfo: SourceInfo,
    Type: BSTR,
    Name: BSTR,
    NumChildren: u32,
};
// --------------------------------------------------------
// Type: PropertyChainSource
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PropertyChainSource = extern struct {
    Handle: u64,
    TargetType: BSTR,
    Name: BSTR,
    Source: BaseValueSource,
    SrcInfo: SourceInfo,
};
// --------------------------------------------------------
// Type: MetadataBit
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MetadataBit = *opaque{
};
// --------------------------------------------------------
// Type: PropertyChainValue
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PropertyChainValue = extern struct {
    Index: u32,
    Type: BSTR,
    DeclaringType: BSTR,
    ValueType: BSTR,
    ItemType: BSTR,
    Value: BSTR,
    Overridden: BOOL,
    MetadataBits: i64,
    PropertyName: BSTR,
    PropertyChainIndex: u32,
};
// --------------------------------------------------------
// Type: EnumType
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EnumType = extern struct {
    Name: BSTR,
    ValueInts: ?*SAFEARRAY,
    ValueStrings: ?*SAFEARRAY,
};
// --------------------------------------------------------
// Type: CollectionElementValue
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CollectionElementValue = extern struct {
    Index: u32,
    ValueType: BSTR,
    Value: BSTR,
    MetadataBits: i64,
};
// --------------------------------------------------------
// Type: RenderTargetBitmapOptions
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RenderTargetBitmapOptions = *opaque{
};
// --------------------------------------------------------
// Type: BitmapDescription
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BitmapDescription = extern struct {
    Width: u32,
    Height: u32,
    Format: DXGI_FORMAT,
    AlphaMode: DXGI_ALPHA_MODE,
};
// --------------------------------------------------------
// Type: ResourceType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ResourceType = *opaque{
};
// --------------------------------------------------------
// Type: VisualElementState
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VisualElementState = *opaque{
};
// --------------------------------------------------------
// Type: IVisualTreeServiceCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVisualTreeServiceCallback = *opaque{
    // TODO: Method 'OnVisualTreeChange'
};
// --------------------------------------------------------
// Type: IVisualTreeServiceCallback2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVisualTreeServiceCallback2 = *opaque{
    // TODO: Method 'OnElementStateChanged'
};
// --------------------------------------------------------
// Type: IVisualTreeService
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVisualTreeService = *opaque{
    // TODO: Method 'AdviseVisualTreeChange'
    // TODO: Method 'UnadviseVisualTreeChange'
    // TODO: Method 'GetEnums'
    // TODO: Method 'CreateInstance'
    // TODO: Method 'GetPropertyValuesChain'
    // TODO: Method 'SetProperty'
    // TODO: Method 'ClearProperty'
    // TODO: Method 'GetCollectionCount'
    // TODO: Method 'GetCollectionElements'
    // TODO: Method 'AddChild'
    // TODO: Method 'RemoveChild'
    // TODO: Method 'ClearChildren'
};
// --------------------------------------------------------
// Type: IXamlDiagnostics
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IXamlDiagnostics = *opaque{
    // TODO: Method 'GetDispatcher'
    // TODO: Method 'GetUiLayer'
    // TODO: Method 'GetApplication'
    // TODO: Method 'GetIInspectableFromHandle'
    // TODO: Method 'GetHandleFromIInspectable'
    // TODO: Method 'HitTest'
    // TODO: Method 'RegisterInstance'
    // TODO: Method 'GetInitializationData'
};
// --------------------------------------------------------
// Type: IBitmapData
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IBitmapData = *opaque{
    // TODO: Method 'CopyBytesTo'
    // TODO: Method 'GetStride'
    // TODO: Method 'GetBitmapDescription'
    // TODO: Method 'GetSourceBitmapDescription'
};
// --------------------------------------------------------
// Type: IVisualTreeService2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVisualTreeService2 = *opaque{
    // TODO: Method 'GetPropertyIndex'
    // TODO: Method 'GetProperty'
    // TODO: Method 'ReplaceResource'
    // TODO: Method 'RenderTargetBitmap'
};
// --------------------------------------------------------
// Type: IVisualTreeService3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVisualTreeService3 = *opaque{
    // TODO: Method 'ResolveResource'
    // TODO: Method 'GetDictionaryItem'
    // TODO: Method 'AddDictionaryItem'
    // TODO: Method 'RemoveDictionaryItem'
};

//
// functions
//

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    else => if (@import("builtin").is_test) struct {
    } else struct {
    },
};

//
// type imports
//
const BSTR = @import("automation.zig").BSTR;
const BOOL = @import("systemservices.zig").BOOL;
const SAFEARRAY = @import("automation.zig").SAFEARRAY;
const DXGI_FORMAT = @import("dxgi.zig").DXGI_FORMAT;
const DXGI_ALPHA_MODE = @import("dxgi.zig").DXGI_ALPHA_MODE;

test "" {
    const constant_export_count = 0;
    const type_export_count = 21;
    const func_count = 0;
    const unicode_alias_count = 0;
    const type_import_count = 5;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
