//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: USB_DEVICE_SPEED
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const USB_DEVICE_SPEED = *opaque{
};
// --------------------------------------------------------
// Type: USB_DEVICE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const USB_DEVICE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: BM_REQUEST_TYPE
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const BM_REQUEST_TYPE = *opaque{
    // --------------------------------------------------------
    // Type: _BM
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _BM = extern struct {
        _bitfield: u8,
    };
};
// --------------------------------------------------------
// Type: USB_DEFAULT_PIPE_SETUP_PACKET
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const USB_DEFAULT_PIPE_SETUP_PACKET = *opaque{
    // --------------------------------------------------------
    // Type: _wIndex
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _wIndex = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            LowByte: u8,
            HiByte: u8,
        };
    };
    // --------------------------------------------------------
    // Type: _wValue
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _wValue = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            LowByte: u8,
            HiByte: u8,
        };
    };
};
// --------------------------------------------------------
// Type: USB_DEVICE_STATUS
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const USB_DEVICE_STATUS = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
    pub const _Anonymous_e__Struct = *opaque{
    };
};
// --------------------------------------------------------
// Type: USB_INTERFACE_STATUS
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const USB_INTERFACE_STATUS = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
    pub const _Anonymous_e__Struct = *opaque{
    };
};
// --------------------------------------------------------
// Type: USB_ENDPOINT_STATUS
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const USB_ENDPOINT_STATUS = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
    pub const _Anonymous_e__Struct = *opaque{
    };
};
// --------------------------------------------------------
// Type: USB_COMMON_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USB_COMMON_DESCRIPTOR = extern struct {
    bLength: u8,
    bDescriptorType: u8,
};
// --------------------------------------------------------
// Type: USB_DEVICE_DESCRIPTOR
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const USB_DEVICE_DESCRIPTOR = *opaque{
};
// --------------------------------------------------------
// Type: USB_DEVICE_QUALIFIER_DESCRIPTOR
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const USB_DEVICE_QUALIFIER_DESCRIPTOR = *opaque{
};
// --------------------------------------------------------
// Type: USB_BOS_DESCRIPTOR
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const USB_BOS_DESCRIPTOR = *opaque{
};
// --------------------------------------------------------
// Type: USB_DEVICE_CAPABILITY_USB20_EXTENSION_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USB_DEVICE_CAPABILITY_USB20_EXTENSION_DESCRIPTOR = extern struct {
    bLength: u8,
    bDescriptorType: u8,
    bDevCapabilityType: u8,
    bmAttributes: _bmAttributes_e__Union,
    // --------------------------------------------------------
    // Type: _bmAttributes_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _bmAttributes_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
        pub const _Anonymous_e__Struct = *opaque{
        };
    };
};
// --------------------------------------------------------
// Type: USB_DEVICE_CAPABILITY_POWER_DELIVERY_DESCRIPTOR
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const USB_DEVICE_CAPABILITY_POWER_DELIVERY_DESCRIPTOR = *opaque{
    // --------------------------------------------------------
    // Type: _bmAttributes_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _bmAttributes_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
        pub const _Anonymous_e__Struct = *opaque{
        };
    };
};
// --------------------------------------------------------
// Type: USB_DEVICE_CAPABILITY_PD_CONSUMER_PORT_DESCRIPTOR
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const USB_DEVICE_CAPABILITY_PD_CONSUMER_PORT_DESCRIPTOR = *opaque{
    // --------------------------------------------------------
    // Type: _bmCapabilities_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _bmCapabilities_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
        pub const _Anonymous_e__Struct = *opaque{
        };
    };
};
// --------------------------------------------------------
// Type: USB_DEVICE_CAPABILITY_SUPERSPEED_USB_DESCRIPTOR
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const USB_DEVICE_CAPABILITY_SUPERSPEED_USB_DESCRIPTOR = *opaque{
};
// --------------------------------------------------------
// Type: USB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_SPEED
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const USB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_SPEED = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
    pub const _Anonymous_e__Struct = *opaque{
    };
};
// --------------------------------------------------------
// Type: USB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_USB_DESCRIPTOR
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const USB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_USB_DESCRIPTOR = *opaque{
    // --------------------------------------------------------
    // Type: _wFunctionalitySupport_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _wFunctionalitySupport_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
        pub const _Anonymous_e__Struct = *opaque{
        };
    };
    // --------------------------------------------------------
    // Type: _bmAttributes_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _bmAttributes_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
        pub const _Anonymous_e__Struct = *opaque{
        };
    };
};
// --------------------------------------------------------
// Type: USB_DEVICE_CAPABILITY_CONTAINER_ID_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USB_DEVICE_CAPABILITY_CONTAINER_ID_DESCRIPTOR = extern struct {
    bLength: u8,
    bDescriptorType: u8,
    bDevCapabilityType: u8,
    bReserved: u8,
    ContainerID: ?[*]u8,
};
// --------------------------------------------------------
// Type: USB_DEVICE_CAPABILITY_PLATFORM_DESCRIPTOR
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const USB_DEVICE_CAPABILITY_PLATFORM_DESCRIPTOR = *opaque{
};
// --------------------------------------------------------
// Type: USB_DEVICE_CAPABILITY_BILLBOARD_DESCRIPTOR
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const USB_DEVICE_CAPABILITY_BILLBOARD_DESCRIPTOR = *opaque{
    // --------------------------------------------------------
    // Type: _VconnPower_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _VconnPower_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
        pub const _Anonymous_e__Struct = *opaque{
        };
    };
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
    pub const _Anonymous_e__Struct = *opaque{
    };
};
// --------------------------------------------------------
// Type: USB_DEVICE_CAPABILITY_FIRMWARE_STATUS_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USB_DEVICE_CAPABILITY_FIRMWARE_STATUS_DESCRIPTOR = extern struct {
    bLength: u8,
    bDescriptorType: u8,
    bDevCapabilityType: u8,
    bcdDescriptorVersion: u8,
    bmAttributes: _bmAttributes_e__Union,
    // --------------------------------------------------------
    // Type: _bmAttributes_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _bmAttributes_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
        pub const _Anonymous_e__Struct = *opaque{
        };
    };
};
// --------------------------------------------------------
// Type: USB_DEVICE_CAPABILITY_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USB_DEVICE_CAPABILITY_DESCRIPTOR = extern struct {
    bLength: u8,
    bDescriptorType: u8,
    bDevCapabilityType: u8,
};
// --------------------------------------------------------
// Type: USB_CONFIGURATION_DESCRIPTOR
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const USB_CONFIGURATION_DESCRIPTOR = *opaque{
};
// --------------------------------------------------------
// Type: USB_INTERFACE_ASSOCIATION_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USB_INTERFACE_ASSOCIATION_DESCRIPTOR = extern struct {
    bLength: u8,
    bDescriptorType: u8,
    bFirstInterface: u8,
    bInterfaceCount: u8,
    bFunctionClass: u8,
    bFunctionSubClass: u8,
    bFunctionProtocol: u8,
    iFunction: u8,
};
// --------------------------------------------------------
// Type: USB_INTERFACE_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USB_INTERFACE_DESCRIPTOR = extern struct {
    bLength: u8,
    bDescriptorType: u8,
    bInterfaceNumber: u8,
    bAlternateSetting: u8,
    bNumEndpoints: u8,
    bInterfaceClass: u8,
    bInterfaceSubClass: u8,
    bInterfaceProtocol: u8,
    iInterface: u8,
};
// --------------------------------------------------------
// Type: USB_ENDPOINT_DESCRIPTOR
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const USB_ENDPOINT_DESCRIPTOR = *opaque{
};
// --------------------------------------------------------
// Type: USB_HIGH_SPEED_MAXPACKET
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const USB_HIGH_SPEED_MAXPACKET = *opaque{
    // --------------------------------------------------------
    // Type: _MP
    // TypeLayoutAttr: sequential
    // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
    pub const _MP = *opaque{
    };
};
// --------------------------------------------------------
// Type: USB_STRING_DESCRIPTOR
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const USB_STRING_DESCRIPTOR = *opaque{
};
// --------------------------------------------------------
// Type: USB_SUPERSPEED_ENDPOINT_COMPANION_DESCRIPTOR
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const USB_SUPERSPEED_ENDPOINT_COMPANION_DESCRIPTOR = *opaque{
    // --------------------------------------------------------
    // Type: _bmAttributes_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _bmAttributes_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Isochronous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Isochronous_e__Struct = extern struct {
            _bitfield: u8,
        };
        // --------------------------------------------------------
        // Type: _Bulk_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Bulk_e__Struct = extern struct {
            _bitfield: u8,
        };
    };
};
// --------------------------------------------------------
// Type: USB_SUPERSPEEDPLUS_ISOCH_ENDPOINT_COMPANION_DESCRIPTOR
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const USB_SUPERSPEEDPLUS_ISOCH_ENDPOINT_COMPANION_DESCRIPTOR = *opaque{
};
// --------------------------------------------------------
// Type: USB_HUB_DESCRIPTOR
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const USB_HUB_DESCRIPTOR = *opaque{
};
// --------------------------------------------------------
// Type: USB_30_HUB_DESCRIPTOR
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const USB_30_HUB_DESCRIPTOR = *opaque{
};
// --------------------------------------------------------
// Type: USB_HUB_STATUS
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const USB_HUB_STATUS = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
    pub const _Anonymous_e__Struct = *opaque{
    };
};
// --------------------------------------------------------
// Type: USB_HUB_CHANGE
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const USB_HUB_CHANGE = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
    pub const _Anonymous_e__Struct = *opaque{
    };
};
// --------------------------------------------------------
// Type: USB_HUB_STATUS_AND_CHANGE
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const USB_HUB_STATUS_AND_CHANGE = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Anonymous_e__Struct = extern struct {
        HubStatus: USB_HUB_STATUS,
        HubChange: USB_HUB_CHANGE,
    };
};
// --------------------------------------------------------
// Type: USB_20_PORT_STATUS
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const USB_20_PORT_STATUS = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
    pub const _Anonymous_e__Struct = *opaque{
    };
};
// --------------------------------------------------------
// Type: USB_20_PORT_CHANGE
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const USB_20_PORT_CHANGE = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
    pub const _Anonymous_e__Struct = *opaque{
    };
};
// --------------------------------------------------------
// Type: USB_30_PORT_STATUS
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const USB_30_PORT_STATUS = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
    pub const _Anonymous_e__Struct = *opaque{
    };
};
// --------------------------------------------------------
// Type: USB_30_PORT_CHANGE
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const USB_30_PORT_CHANGE = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
    pub const _Anonymous_e__Struct = *opaque{
    };
};
// --------------------------------------------------------
// Type: USB_PORT_STATUS
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const USB_PORT_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: USB_PORT_CHANGE
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const USB_PORT_CHANGE = *opaque{
};
// --------------------------------------------------------
// Type: USB_PORT_EXT_STATUS
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const USB_PORT_EXT_STATUS = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
    pub const _Anonymous_e__Struct = *opaque{
    };
};
// --------------------------------------------------------
// Type: USB_PORT_STATUS_AND_CHANGE
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const USB_PORT_STATUS_AND_CHANGE = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Anonymous_e__Struct = extern struct {
        PortStatus: USB_PORT_STATUS,
        PortChange: USB_PORT_CHANGE,
    };
};
// --------------------------------------------------------
// Type: USB_PORT_EXT_STATUS_AND_CHANGE
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const USB_PORT_EXT_STATUS_AND_CHANGE = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Anonymous_e__Struct = extern struct {
        PortStatusChange: USB_PORT_STATUS_AND_CHANGE,
        PortExtStatus: USB_PORT_EXT_STATUS,
    };
};
// --------------------------------------------------------
// Type: USB_HUB_30_PORT_REMOTE_WAKE_MASK
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const USB_HUB_30_PORT_REMOTE_WAKE_MASK = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Anonymous_e__Struct = extern struct {
        _bitfield: u8,
    };
};
// --------------------------------------------------------
// Type: USB_FUNCTION_SUSPEND_OPTIONS
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const USB_FUNCTION_SUSPEND_OPTIONS = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Anonymous_e__Struct = extern struct {
        _bitfield: u8,
    };
};
// --------------------------------------------------------
// Type: USB_CONFIGURATION_POWER_DESCRIPTOR
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const USB_CONFIGURATION_POWER_DESCRIPTOR = *opaque{
};
// --------------------------------------------------------
// Type: USB_INTERFACE_POWER_DESCRIPTOR
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const USB_INTERFACE_POWER_DESCRIPTOR = *opaque{
};
// --------------------------------------------------------
// Type: USB_CONTROLLER_FLAVOR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const USB_CONTROLLER_FLAVOR = *opaque{
};
// --------------------------------------------------------
// Type: USBD_VERSION_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USBD_VERSION_INFORMATION = extern struct {
    USBDI_Version: u32,
    Supported_USB_Version: u32,
};
// --------------------------------------------------------
// Type: USBD_PIPE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const USBD_PIPE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: USBD_DEVICE_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USBD_DEVICE_INFORMATION = extern struct {
    OffsetNext: u32,
    UsbdDeviceHandle: ?*opaque{},
    DeviceDescriptor: USB_DEVICE_DESCRIPTOR,
};
// --------------------------------------------------------
// Type: USBD_PIPE_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USBD_PIPE_INFORMATION = extern struct {
    MaximumPacketSize: u16,
    EndpointAddress: u8,
    Interval: u8,
    PipeType: USBD_PIPE_TYPE,
    PipeHandle: ?*opaque{},
    MaximumTransferSize: u32,
    PipeFlags: u32,
};
// --------------------------------------------------------
// Type: USBD_ENDPOINT_OFFLOAD_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const USBD_ENDPOINT_OFFLOAD_MODE = *opaque{
};
// --------------------------------------------------------
// Type: USBD_ENDPOINT_OFFLOAD_INFORMATION
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const USBD_ENDPOINT_OFFLOAD_INFORMATION = *opaque{
};
// --------------------------------------------------------
// Type: USBD_INTERFACE_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USBD_INTERFACE_INFORMATION = extern struct {
    Length: u16,
    InterfaceNumber: u8,
    AlternateSetting: u8,
    Class: u8,
    SubClass: u8,
    Protocol: u8,
    Reserved: u8,
    InterfaceHandle: ?*opaque{},
    NumberOfPipes: u32,
    Pipes: ?[*]USBD_PIPE_INFORMATION,
};
// --------------------------------------------------------
// Type: _URB_HCD_AREA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _URB_HCD_AREA = extern struct {
    Reserved8: ?[*]?*opaque{},
};
// --------------------------------------------------------
// Type: _URB_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _URB_HEADER = extern struct {
    Length: u16,
    Function: u16,
    Status: i32,
    UsbdDeviceHandle: ?*opaque{},
    UsbdFlags: u32,
};
// --------------------------------------------------------
// Type: _URB_SELECT_INTERFACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _URB_SELECT_INTERFACE = extern struct {
    Hdr: _URB_HEADER,
    ConfigurationHandle: ?*opaque{},
    Interface: USBD_INTERFACE_INFORMATION,
};
// --------------------------------------------------------
// Type: _URB_SELECT_CONFIGURATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _URB_SELECT_CONFIGURATION = extern struct {
    Hdr: _URB_HEADER,
    ConfigurationDescriptor: ?*USB_CONFIGURATION_DESCRIPTOR,
    ConfigurationHandle: ?*opaque{},
    Interface: USBD_INTERFACE_INFORMATION,
};
// --------------------------------------------------------
// Type: _URB_PIPE_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _URB_PIPE_REQUEST = extern struct {
    Hdr: _URB_HEADER,
    PipeHandle: ?*opaque{},
    Reserved: u32,
};
// --------------------------------------------------------
// Type: _URB_FRAME_LENGTH_CONTROL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _URB_FRAME_LENGTH_CONTROL = extern struct {
    Hdr: _URB_HEADER,
};
// --------------------------------------------------------
// Type: _URB_GET_FRAME_LENGTH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _URB_GET_FRAME_LENGTH = extern struct {
    Hdr: _URB_HEADER,
    FrameLength: u32,
    FrameNumber: u32,
};
// --------------------------------------------------------
// Type: _URB_SET_FRAME_LENGTH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _URB_SET_FRAME_LENGTH = extern struct {
    Hdr: _URB_HEADER,
    FrameLengthDelta: i32,
};
// --------------------------------------------------------
// Type: _URB_GET_CURRENT_FRAME_NUMBER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _URB_GET_CURRENT_FRAME_NUMBER = extern struct {
    Hdr: _URB_HEADER,
    FrameNumber: u32,
};
// --------------------------------------------------------
// Type: _URB_CONTROL_DESCRIPTOR_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _URB_CONTROL_DESCRIPTOR_REQUEST = extern struct {
    Hdr: _URB_HEADER,
    Reserved: ?*opaque{},
    Reserved0: u32,
    TransferBufferLength: u32,
    TransferBuffer: ?*opaque{},
    TransferBufferMDL: ?*opaque{},
    UrbLink: ?*URB,
    hca: _URB_HCD_AREA,
    Reserved1: u16,
    Index: u8,
    DescriptorType: u8,
    LanguageId: u16,
    Reserved2: u16,
};
// --------------------------------------------------------
// Type: _URB_CONTROL_GET_STATUS_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _URB_CONTROL_GET_STATUS_REQUEST = extern struct {
    Hdr: _URB_HEADER,
    Reserved: ?*opaque{},
    Reserved0: u32,
    TransferBufferLength: u32,
    TransferBuffer: ?*opaque{},
    TransferBufferMDL: ?*opaque{},
    UrbLink: ?*URB,
    hca: _URB_HCD_AREA,
    Reserved1: ?[*]u8,
    Index: u16,
    Reserved2: u16,
};
// --------------------------------------------------------
// Type: _URB_CONTROL_FEATURE_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _URB_CONTROL_FEATURE_REQUEST = extern struct {
    Hdr: _URB_HEADER,
    Reserved: ?*opaque{},
    Reserved2: u32,
    Reserved3: u32,
    Reserved4: ?*opaque{},
    Reserved5: ?*opaque{},
    UrbLink: ?*URB,
    hca: _URB_HCD_AREA,
    Reserved0: u16,
    FeatureSelector: u16,
    Index: u16,
    Reserved1: u16,
};
// --------------------------------------------------------
// Type: _URB_CONTROL_VENDOR_OR_CLASS_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _URB_CONTROL_VENDOR_OR_CLASS_REQUEST = extern struct {
    Hdr: _URB_HEADER,
    Reserved: ?*opaque{},
    TransferFlags: u32,
    TransferBufferLength: u32,
    TransferBuffer: ?*opaque{},
    TransferBufferMDL: ?*opaque{},
    UrbLink: ?*URB,
    hca: _URB_HCD_AREA,
    RequestTypeReservedBits: u8,
    Request: u8,
    Value: u16,
    Index: u16,
    Reserved1: u16,
};
// --------------------------------------------------------
// Type: _URB_CONTROL_GET_INTERFACE_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _URB_CONTROL_GET_INTERFACE_REQUEST = extern struct {
    Hdr: _URB_HEADER,
    Reserved: ?*opaque{},
    Reserved0: u32,
    TransferBufferLength: u32,
    TransferBuffer: ?*opaque{},
    TransferBufferMDL: ?*opaque{},
    UrbLink: ?*URB,
    hca: _URB_HCD_AREA,
    Reserved1: ?[*]u8,
    Interface: u16,
    Reserved2: u16,
};
// --------------------------------------------------------
// Type: _URB_CONTROL_GET_CONFIGURATION_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _URB_CONTROL_GET_CONFIGURATION_REQUEST = extern struct {
    Hdr: _URB_HEADER,
    Reserved: ?*opaque{},
    Reserved0: u32,
    TransferBufferLength: u32,
    TransferBuffer: ?*opaque{},
    TransferBufferMDL: ?*opaque{},
    UrbLink: ?*URB,
    hca: _URB_HCD_AREA,
    Reserved1: ?[*]u8,
};
// --------------------------------------------------------
// Type: OS_STRING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OS_STRING = extern struct {
    bLength: u8,
    bDescriptorType: u8,
    MicrosoftString: ?[*]u16,
    bVendorCode: u8,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: _URB_OS_FEATURE_DESCRIPTOR_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _URB_OS_FEATURE_DESCRIPTOR_REQUEST = extern struct {
    Hdr: _URB_HEADER,
    Reserved: ?*opaque{},
    Reserved0: u32,
    TransferBufferLength: u32,
    TransferBuffer: ?*opaque{},
    TransferBufferMDL: ?*opaque{},
    UrbLink: ?*URB,
    hca: _URB_HCD_AREA,
    _bitfield: u8,
    Reserved2: u8,
    InterfaceNumber: u8,
    MS_PageIndex: u8,
    MS_FeatureDescriptorIndex: u16,
    Reserved3: u16,
};
// --------------------------------------------------------
// Type: _URB_CONTROL_TRANSFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _URB_CONTROL_TRANSFER = extern struct {
    Hdr: _URB_HEADER,
    PipeHandle: ?*opaque{},
    TransferFlags: u32,
    TransferBufferLength: u32,
    TransferBuffer: ?*opaque{},
    TransferBufferMDL: ?*opaque{},
    UrbLink: ?*URB,
    hca: _URB_HCD_AREA,
    SetupPacket: ?[*]u8,
};
// --------------------------------------------------------
// Type: _URB_CONTROL_TRANSFER_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _URB_CONTROL_TRANSFER_EX = extern struct {
    Hdr: _URB_HEADER,
    PipeHandle: ?*opaque{},
    TransferFlags: u32,
    TransferBufferLength: u32,
    TransferBuffer: ?*opaque{},
    TransferBufferMDL: ?*opaque{},
    Timeout: u32,
    hca: _URB_HCD_AREA,
    SetupPacket: ?[*]u8,
};
// --------------------------------------------------------
// Type: _URB_BULK_OR_INTERRUPT_TRANSFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _URB_BULK_OR_INTERRUPT_TRANSFER = extern struct {
    Hdr: _URB_HEADER,
    PipeHandle: ?*opaque{},
    TransferFlags: u32,
    TransferBufferLength: u32,
    TransferBuffer: ?*opaque{},
    TransferBufferMDL: ?*opaque{},
    UrbLink: ?*URB,
    hca: _URB_HCD_AREA,
};
// --------------------------------------------------------
// Type: USBD_ISO_PACKET_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USBD_ISO_PACKET_DESCRIPTOR = extern struct {
    Offset: u32,
    Length: u32,
    Status: i32,
};
// --------------------------------------------------------
// Type: _URB_ISOCH_TRANSFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _URB_ISOCH_TRANSFER = extern struct {
    Hdr: _URB_HEADER,
    PipeHandle: ?*opaque{},
    TransferFlags: u32,
    TransferBufferLength: u32,
    TransferBuffer: ?*opaque{},
    TransferBufferMDL: ?*opaque{},
    UrbLink: ?*URB,
    hca: _URB_HCD_AREA,
    StartFrame: u32,
    NumberOfPackets: u32,
    ErrorCount: u32,
    IsoPacket: ?[*]USBD_ISO_PACKET_DESCRIPTOR,
};
// --------------------------------------------------------
// Type: USBD_STREAM_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USBD_STREAM_INFORMATION = extern struct {
    PipeHandle: ?*opaque{},
    StreamID: u32,
    MaximumTransferSize: u32,
    PipeFlags: u32,
};
// --------------------------------------------------------
// Type: _URB_OPEN_STATIC_STREAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _URB_OPEN_STATIC_STREAMS = extern struct {
    Hdr: _URB_HEADER,
    PipeHandle: ?*opaque{},
    NumberOfStreams: u32,
    StreamInfoVersion: u16,
    StreamInfoSize: u16,
    Streams: ?*USBD_STREAM_INFORMATION,
};
// --------------------------------------------------------
// Type: _URB_GET_ISOCH_PIPE_TRANSFER_PATH_DELAYS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _URB_GET_ISOCH_PIPE_TRANSFER_PATH_DELAYS = extern struct {
    Hdr: _URB_HEADER,
    PipeHandle: ?*opaque{},
    MaximumSendPathDelayInMilliSeconds: u32,
    MaximumCompletionPathDelayInMilliSeconds: u32,
};
// --------------------------------------------------------
// Type: URB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const URB = extern struct {
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: USB_IDLE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const USB_IDLE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: USB_IDLE_CALLBACK_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USB_IDLE_CALLBACK_INFO = extern struct {
    IdleCallback: USB_IDLE_CALLBACK,
    IdleContext: ?*opaque{},
};
// --------------------------------------------------------
// Type: USB_USER_ERROR_CODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const USB_USER_ERROR_CODE = *opaque{
};
// --------------------------------------------------------
// Type: USBUSER_REQUEST_HEADER
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const USBUSER_REQUEST_HEADER = *opaque{
};
// --------------------------------------------------------
// Type: PACKET_PARAMETERS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const PACKET_PARAMETERS = *opaque{
};
// --------------------------------------------------------
// Type: USBUSER_SEND_ONE_PACKET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USBUSER_SEND_ONE_PACKET = extern struct {
    Header: USBUSER_REQUEST_HEADER,
    PacketParameters: PACKET_PARAMETERS,
};
// --------------------------------------------------------
// Type: RAW_RESET_PORT_PARAMETERS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const RAW_RESET_PORT_PARAMETERS = *opaque{
};
// --------------------------------------------------------
// Type: USBUSER_RAW_RESET_ROOT_PORT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USBUSER_RAW_RESET_ROOT_PORT = extern struct {
    Header: USBUSER_REQUEST_HEADER,
    Parameters: RAW_RESET_PORT_PARAMETERS,
};
// --------------------------------------------------------
// Type: RAW_ROOTPORT_FEATURE
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const RAW_ROOTPORT_FEATURE = *opaque{
};
// --------------------------------------------------------
// Type: USBUSER_ROOTPORT_FEATURE_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USBUSER_ROOTPORT_FEATURE_REQUEST = extern struct {
    Header: USBUSER_REQUEST_HEADER,
    Parameters: RAW_ROOTPORT_FEATURE,
};
// --------------------------------------------------------
// Type: RAW_ROOTPORT_PARAMETERS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const RAW_ROOTPORT_PARAMETERS = *opaque{
};
// --------------------------------------------------------
// Type: USBUSER_ROOTPORT_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USBUSER_ROOTPORT_PARAMETERS = extern struct {
    Header: USBUSER_REQUEST_HEADER,
    Parameters: RAW_ROOTPORT_PARAMETERS,
};
// --------------------------------------------------------
// Type: USB_CONTROLLER_INFO_0
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const USB_CONTROLLER_INFO_0 = *opaque{
};
// --------------------------------------------------------
// Type: USBUSER_CONTROLLER_INFO_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USBUSER_CONTROLLER_INFO_0 = extern struct {
    Header: USBUSER_REQUEST_HEADER,
    Info0: USB_CONTROLLER_INFO_0,
};
// --------------------------------------------------------
// Type: USB_UNICODE_NAME
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const USB_UNICODE_NAME = *opaque{
};
// --------------------------------------------------------
// Type: USBUSER_CONTROLLER_UNICODE_NAME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USBUSER_CONTROLLER_UNICODE_NAME = extern struct {
    Header: USBUSER_REQUEST_HEADER,
    UnicodeName: USB_UNICODE_NAME,
};
// --------------------------------------------------------
// Type: USB_PASS_THRU_PARAMETERS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const USB_PASS_THRU_PARAMETERS = *opaque{
};
// --------------------------------------------------------
// Type: USBUSER_PASS_THRU_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USBUSER_PASS_THRU_REQUEST = extern struct {
    Header: USBUSER_REQUEST_HEADER,
    PassThru: USB_PASS_THRU_PARAMETERS,
};
// --------------------------------------------------------
// Type: WDMUSB_POWER_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WDMUSB_POWER_STATE = *opaque{
};
// --------------------------------------------------------
// Type: USB_POWER_INFO
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const USB_POWER_INFO = *opaque{
};
// --------------------------------------------------------
// Type: USBUSER_POWER_INFO_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USBUSER_POWER_INFO_REQUEST = extern struct {
    Header: USBUSER_REQUEST_HEADER,
    PowerInformation: USB_POWER_INFO,
};
// --------------------------------------------------------
// Type: USB_OPEN_RAW_DEVICE_PARAMETERS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const USB_OPEN_RAW_DEVICE_PARAMETERS = *opaque{
};
// --------------------------------------------------------
// Type: USBUSER_OPEN_RAW_DEVICE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USBUSER_OPEN_RAW_DEVICE = extern struct {
    Header: USBUSER_REQUEST_HEADER,
    Parameters: USB_OPEN_RAW_DEVICE_PARAMETERS,
};
// --------------------------------------------------------
// Type: USB_CLOSE_RAW_DEVICE_PARAMETERS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const USB_CLOSE_RAW_DEVICE_PARAMETERS = *opaque{
};
// --------------------------------------------------------
// Type: USBUSER_CLOSE_RAW_DEVICE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USBUSER_CLOSE_RAW_DEVICE = extern struct {
    Header: USBUSER_REQUEST_HEADER,
    Parameters: USB_CLOSE_RAW_DEVICE_PARAMETERS,
};
// --------------------------------------------------------
// Type: USB_SEND_RAW_COMMAND_PARAMETERS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const USB_SEND_RAW_COMMAND_PARAMETERS = *opaque{
};
// --------------------------------------------------------
// Type: USBUSER_SEND_RAW_COMMAND
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USBUSER_SEND_RAW_COMMAND = extern struct {
    Header: USBUSER_REQUEST_HEADER,
    Parameters: USB_SEND_RAW_COMMAND_PARAMETERS,
};
// --------------------------------------------------------
// Type: USB_BANDWIDTH_INFO
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const USB_BANDWIDTH_INFO = *opaque{
};
// --------------------------------------------------------
// Type: USBUSER_BANDWIDTH_INFO_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USBUSER_BANDWIDTH_INFO_REQUEST = extern struct {
    Header: USBUSER_REQUEST_HEADER,
    BandwidthInformation: USB_BANDWIDTH_INFO,
};
// --------------------------------------------------------
// Type: USB_BUS_STATISTICS_0
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const USB_BUS_STATISTICS_0 = *opaque{
};
// --------------------------------------------------------
// Type: USBUSER_BUS_STATISTICS_0_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USBUSER_BUS_STATISTICS_0_REQUEST = extern struct {
    Header: USBUSER_REQUEST_HEADER,
    BusStatistics0: USB_BUS_STATISTICS_0,
};
// --------------------------------------------------------
// Type: USB_DRIVER_VERSION_PARAMETERS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const USB_DRIVER_VERSION_PARAMETERS = *opaque{
};
// --------------------------------------------------------
// Type: USBUSER_GET_DRIVER_VERSION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USBUSER_GET_DRIVER_VERSION = extern struct {
    Header: USBUSER_REQUEST_HEADER,
    Parameters: USB_DRIVER_VERSION_PARAMETERS,
};
// --------------------------------------------------------
// Type: USB_USB2HW_VERSION_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USB_USB2HW_VERSION_PARAMETERS = extern struct {
    Usb2HwRevision: u8,
};
// --------------------------------------------------------
// Type: USBUSER_GET_USB2HW_VERSION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USBUSER_GET_USB2HW_VERSION = extern struct {
    Header: USBUSER_REQUEST_HEADER,
    Parameters: USB_USB2HW_VERSION_PARAMETERS,
};
// --------------------------------------------------------
// Type: USBUSER_REFRESH_HCT_REG
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const USBUSER_REFRESH_HCT_REG = *opaque{
};
// --------------------------------------------------------
// Type: WINUSB_PIPE_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WINUSB_PIPE_INFORMATION = extern struct {
    PipeType: USBD_PIPE_TYPE,
    PipeId: u8,
    MaximumPacketSize: u16,
    Interval: u8,
};
// --------------------------------------------------------
// Type: WINUSB_PIPE_INFORMATION_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WINUSB_PIPE_INFORMATION_EX = extern struct {
    PipeType: USBD_PIPE_TYPE,
    PipeId: u8,
    MaximumPacketSize: u16,
    Interval: u8,
    MaximumBytesPerInterval: u32,
};
// --------------------------------------------------------
// Type: WINUSB_SETUP_PACKET
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const WINUSB_SETUP_PACKET = *opaque{
};
// --------------------------------------------------------
// Type: USB_START_TRACKING_FOR_TIME_SYNC_INFORMATION
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const USB_START_TRACKING_FOR_TIME_SYNC_INFORMATION = *opaque{
};
// --------------------------------------------------------
// Type: USB_STOP_TRACKING_FOR_TIME_SYNC_INFORMATION
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const USB_STOP_TRACKING_FOR_TIME_SYNC_INFORMATION = *opaque{
};
// --------------------------------------------------------
// Type: USB_FRAME_NUMBER_AND_QPC_FOR_TIME_SYNC_INFORMATION
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const USB_FRAME_NUMBER_AND_QPC_FOR_TIME_SYNC_INFORMATION = *opaque{
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "WINUSB" fn WinUsb_Initialize(
    DeviceHandle: HANDLE,
    InterfaceHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINUSB" fn WinUsb_Free(
    InterfaceHandle: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINUSB" fn WinUsb_GetAssociatedInterface(
    InterfaceHandle: ?*opaque{},
    AssociatedInterfaceIndex: u8,
    AssociatedInterfaceHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINUSB" fn WinUsb_GetDescriptor(
    InterfaceHandle: ?*opaque{},
    DescriptorType: u8,
    Index: u8,
    LanguageID: u16,
    Buffer: ?*u8,
    BufferLength: u32,
    LengthTransferred: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINUSB" fn WinUsb_QueryInterfaceSettings(
    InterfaceHandle: ?*opaque{},
    AlternateInterfaceNumber: u8,
    UsbAltInterfaceDescriptor: ?*USB_INTERFACE_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINUSB" fn WinUsb_QueryDeviceInformation(
    InterfaceHandle: ?*opaque{},
    InformationType: u32,
    BufferLength: ?*u32,
    Buffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINUSB" fn WinUsb_SetCurrentAlternateSetting(
    InterfaceHandle: ?*opaque{},
    SettingNumber: u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINUSB" fn WinUsb_GetCurrentAlternateSetting(
    InterfaceHandle: ?*opaque{},
    SettingNumber: ?*u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINUSB" fn WinUsb_QueryPipe(
    InterfaceHandle: ?*opaque{},
    AlternateInterfaceNumber: u8,
    PipeIndex: u8,
    PipeInformation: ?*WINUSB_PIPE_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINUSB" fn WinUsb_QueryPipeEx(
    InterfaceHandle: ?*opaque{},
    AlternateSettingNumber: u8,
    PipeIndex: u8,
    PipeInformationEx: ?*WINUSB_PIPE_INFORMATION_EX,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINUSB" fn WinUsb_SetPipePolicy(
    InterfaceHandle: ?*opaque{},
    PipeID: u8,
    PolicyType: u32,
    ValueLength: u32,
    Value: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINUSB" fn WinUsb_GetPipePolicy(
    InterfaceHandle: ?*opaque{},
    PipeID: u8,
    PolicyType: u32,
    ValueLength: ?*u32,
    Value: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINUSB" fn WinUsb_ReadPipe(
    InterfaceHandle: ?*opaque{},
    PipeID: u8,
    Buffer: ?*u8,
    BufferLength: u32,
    LengthTransferred: ?*u32,
    Overlapped: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINUSB" fn WinUsb_WritePipe(
    InterfaceHandle: ?*opaque{},
    PipeID: u8,
    Buffer: ?*u8,
    BufferLength: u32,
    LengthTransferred: ?*u32,
    Overlapped: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINUSB" fn WinUsb_ControlTransfer(
    InterfaceHandle: ?*opaque{},
    SetupPacket: WINUSB_SETUP_PACKET,
    Buffer: ?*u8,
    BufferLength: u32,
    LengthTransferred: ?*u32,
    Overlapped: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINUSB" fn WinUsb_ResetPipe(
    InterfaceHandle: ?*opaque{},
    PipeID: u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINUSB" fn WinUsb_AbortPipe(
    InterfaceHandle: ?*opaque{},
    PipeID: u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINUSB" fn WinUsb_FlushPipe(
    InterfaceHandle: ?*opaque{},
    PipeID: u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINUSB" fn WinUsb_SetPowerPolicy(
    InterfaceHandle: ?*opaque{},
    PolicyType: u32,
    ValueLength: u32,
    Value: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINUSB" fn WinUsb_GetPowerPolicy(
    InterfaceHandle: ?*opaque{},
    PolicyType: u32,
    ValueLength: ?*u32,
    Value: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINUSB" fn WinUsb_GetOverlappedResult(
    InterfaceHandle: ?*opaque{},
    lpOverlapped: ?*OVERLAPPED,
    lpNumberOfBytesTransferred: ?*u32,
    bWait: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINUSB" fn WinUsb_ParseConfigurationDescriptor(
    ConfigurationDescriptor: ?*USB_CONFIGURATION_DESCRIPTOR,
    StartPosition: ?*opaque{},
    InterfaceNumber: i32,
    AlternateSetting: i32,
    InterfaceClass: i32,
    InterfaceSubClass: i32,
    InterfaceProtocol: i32,
) callconv(@import("std").os.windows.WINAPI) ?*USB_INTERFACE_DESCRIPTOR;

// set_last_errror=False (can and should we use this?)
pub extern "WINUSB" fn WinUsb_ParseDescriptors(
    DescriptorBuffer: ?*opaque{},
    TotalLength: u32,
    StartPosition: ?*opaque{},
    DescriptorType: i32,
) callconv(@import("std").os.windows.WINAPI) ?*USB_COMMON_DESCRIPTOR;

// set_last_errror=False (can and should we use this?)
pub extern "WINUSB" fn WinUsb_GetCurrentFrameNumber(
    InterfaceHandle: ?*opaque{},
    CurrentFrameNumber: ?*u32,
    TimeStamp: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINUSB" fn WinUsb_GetAdjustedFrameNumber(
    CurrentFrameNumber: ?*u32,
    TimeStamp: LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINUSB" fn WinUsb_RegisterIsochBuffer(
    InterfaceHandle: ?*opaque{},
    PipeID: u8,
    Buffer: ?*u8,
    BufferLength: u32,
    IsochBufferHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINUSB" fn WinUsb_UnregisterIsochBuffer(
    IsochBufferHandle: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINUSB" fn WinUsb_WriteIsochPipe(
    BufferHandle: ?*opaque{},
    Offset: u32,
    Length: u32,
    FrameNumber: ?*u32,
    Overlapped: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINUSB" fn WinUsb_ReadIsochPipe(
    BufferHandle: ?*opaque{},
    Offset: u32,
    Length: u32,
    FrameNumber: ?*u32,
    NumberOfPackets: u32,
    IsoPacketDescriptors: ?*USBD_ISO_PACKET_DESCRIPTOR,
    Overlapped: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINUSB" fn WinUsb_WriteIsochPipeAsap(
    BufferHandle: ?*opaque{},
    Offset: u32,
    Length: u32,
    ContinueStream: BOOL,
    Overlapped: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINUSB" fn WinUsb_ReadIsochPipeAsap(
    BufferHandle: ?*opaque{},
    Offset: u32,
    Length: u32,
    ContinueStream: BOOL,
    NumberOfPackets: u32,
    IsoPacketDescriptors: ?*USBD_ISO_PACKET_DESCRIPTOR,
    Overlapped: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINUSB" fn WinUsb_StartTrackingForTimeSync(
    InterfaceHandle: ?*opaque{},
    StartTrackingInfo: ?*USB_START_TRACKING_FOR_TIME_SYNC_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINUSB" fn WinUsb_GetCurrentFrameNumberAndQpc(
    InterfaceHandle: ?*opaque{},
    FrameQpcInfo: ?*USB_FRAME_NUMBER_AND_QPC_FOR_TIME_SYNC_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINUSB" fn WinUsb_StopTrackingForTimeSync(
    InterfaceHandle: ?*opaque{},
    StopTrackingInfo: ?*USB_STOP_TRACKING_FOR_TIME_SYNC_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) BOOL;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    else => if (@import("builtin").is_test) struct {
    } else struct {
    },
};

//
// type imports
//
const HANDLE = @import("systemservices.zig").HANDLE;
const BOOL = @import("systemservices.zig").BOOL;
const OVERLAPPED = @import("systemservices.zig").OVERLAPPED;
const LARGE_INTEGER = @import("systemservices.zig").LARGE_INTEGER;

test "" {
    const constant_export_count = 0;
    const type_export_count = 124;
    const func_count = 34;
    const unicode_alias_count = 0;
    const type_import_count = 4;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
