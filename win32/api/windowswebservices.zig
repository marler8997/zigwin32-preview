//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//
pub const WS_HTTP_HEADER_MAPPING_COMMA_SEPARATOR : i32 = 1;
pub const WS_HTTP_HEADER_MAPPING_SEMICOLON_SEPARATOR : i32 = 2;
pub const WS_HTTP_HEADER_MAPPING_QUOTED_VALUE : i32 = 4;
pub const WS_HTTP_RESPONSE_MAPPING_STATUS_CODE : i32 = 1;
pub const WS_HTTP_RESPONSE_MAPPING_STATUS_TEXT : i32 = 2;
pub const WS_HTTP_REQUEST_MAPPING_VERB : i32 = 2;
pub const WS_MATCH_URL_DNS_HOST : i32 = 1;
pub const WS_MATCH_URL_DNS_FULLY_QUALIFIED_HOST : i32 = 2;
pub const WS_MATCH_URL_NETBIOS_HOST : i32 = 4;
pub const WS_MATCH_URL_LOCAL_HOST : i32 = 8;
pub const WS_MATCH_URL_HOST_ADDRESSES : i32 = 16;
pub const WS_MATCH_URL_THIS_HOST : i32 = 31;
pub const WS_MATCH_URL_PORT : i32 = 32;
pub const WS_MATCH_URL_EXACT_PATH : i32 = 64;
pub const WS_MATCH_URL_PREFIX_PATH : i32 = 128;
pub const WS_MATCH_URL_NO_QUERY : i32 = 256;
pub const WS_MUST_UNDERSTAND_HEADER_ATTRIBUTE : i32 = 1;
pub const WS_RELAY_HEADER_ATTRIBUTE : i32 = 2;
pub const WS_HTTP_HEADER_AUTH_SCHEME_NONE : i32 = 1;
pub const WS_HTTP_HEADER_AUTH_SCHEME_BASIC : i32 = 2;
pub const WS_HTTP_HEADER_AUTH_SCHEME_DIGEST : i32 = 4;
pub const WS_HTTP_HEADER_AUTH_SCHEME_NTLM : i32 = 8;
pub const WS_HTTP_HEADER_AUTH_SCHEME_NEGOTIATE : i32 = 16;
pub const WS_HTTP_HEADER_AUTH_SCHEME_PASSPORT : i32 = 32;
pub const WS_CERT_FAILURE_CN_MISMATCH : i32 = 1;
pub const WS_CERT_FAILURE_INVALID_DATE : i32 = 2;
pub const WS_CERT_FAILURE_UNTRUSTED_ROOT : i32 = 4;
pub const WS_CERT_FAILURE_WRONG_USAGE : i32 = 8;
pub const WS_CERT_FAILURE_REVOCATION_OFFLINE : i32 = 16;
pub const WS_STRUCT_ABSTRACT : i32 = 1;
pub const WS_STRUCT_IGNORE_TRAILING_ELEMENT_CONTENT : i32 = 2;
pub const WS_STRUCT_IGNORE_UNHANDLED_ATTRIBUTES : i32 = 4;
pub const WS_FIELD_POINTER : i32 = 1;
pub const WS_FIELD_OPTIONAL : i32 = 2;
pub const WS_FIELD_NILLABLE : i32 = 4;
pub const WS_FIELD_NILLABLE_ITEM : i32 = 8;
pub const WS_FIELD_OTHER_NAMESPACE : i32 = 16;
pub const WS_SERVICE_OPERATION_MESSAGE_NILLABLE_ELEMENT : i32 = 1;
pub const WS_URL_FLAGS_ALLOW_HOST_WILDCARDS : i32 = 1;
pub const WS_URL_FLAGS_NO_PATH_COLLAPSE : i32 = 2;
pub const WS_URL_FLAGS_ZERO_TERMINATE : i32 = 4;

//
// types
//
// --------------------------------------------------------
// Type: WS_XML_READER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WS_XML_READER = opaque {
};
// --------------------------------------------------------
// Type: WS_XML_WRITER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WS_XML_WRITER = opaque {
};
// --------------------------------------------------------
// Type: WS_XML_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WS_XML_BUFFER = opaque {
};
// --------------------------------------------------------
// Type: WS_CHANNEL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WS_CHANNEL = opaque {
};
// --------------------------------------------------------
// Type: WS_OPERATION_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WS_OPERATION_CONTEXT = opaque {
};
// --------------------------------------------------------
// Type: WS_ERROR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WS_ERROR = opaque {
};
// --------------------------------------------------------
// Type: WS_HEAP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WS_HEAP = opaque {
};
// --------------------------------------------------------
// Type: WS_LISTENER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WS_LISTENER = opaque {
};
// --------------------------------------------------------
// Type: WS_MESSAGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WS_MESSAGE = opaque {
};
// --------------------------------------------------------
// Type: WS_SECURITY_TOKEN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WS_SECURITY_TOKEN = opaque {
};
// --------------------------------------------------------
// Type: WS_SECURITY_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WS_SECURITY_CONTEXT = opaque {
};
// --------------------------------------------------------
// Type: WS_SERVICE_HOST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WS_SERVICE_HOST = opaque {
};
// --------------------------------------------------------
// Type: WS_SERVICE_PROXY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WS_SERVICE_PROXY = opaque {
};
// --------------------------------------------------------
// Type: WS_METADATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WS_METADATA = opaque {
};
// --------------------------------------------------------
// Type: WS_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WS_POLICY = opaque {
};
// --------------------------------------------------------
// Type: WS_XML_READER_PROPERTY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_XML_READER_PROPERTY_ID = *opaque{
};
// --------------------------------------------------------
// Type: WS_XML_CANONICALIZATION_ALGORITHM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_XML_CANONICALIZATION_ALGORITHM = *opaque{
};
// --------------------------------------------------------
// Type: WS_XML_CANONICALIZATION_PROPERTY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_XML_CANONICALIZATION_PROPERTY_ID = *opaque{
};
// --------------------------------------------------------
// Type: WS_XML_WRITER_PROPERTY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_XML_WRITER_PROPERTY_ID = *opaque{
};
// --------------------------------------------------------
// Type: WS_XML_BUFFER_PROPERTY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_XML_BUFFER_PROPERTY_ID = *opaque{
};
// --------------------------------------------------------
// Type: WS_XML_TEXT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_XML_TEXT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WS_XML_NODE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_XML_NODE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WS_MOVE_TO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_MOVE_TO = *opaque{
};
// --------------------------------------------------------
// Type: WS_VALUE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_VALUE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WS_XML_READER_INPUT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_XML_READER_INPUT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WS_XML_READER_ENCODING_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_XML_READER_ENCODING_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WS_CHARSET
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_CHARSET = *opaque{
};
// --------------------------------------------------------
// Type: WS_XML_WRITER_ENCODING_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_XML_WRITER_ENCODING_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WS_XML_WRITER_OUTPUT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_XML_WRITER_OUTPUT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WS_CALLBACK_MODEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_CALLBACK_MODEL = *opaque{
};
// --------------------------------------------------------
// Type: WS_ENCODING
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_ENCODING = *opaque{
};
// --------------------------------------------------------
// Type: WS_CHANNEL_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_CHANNEL_STATE = *opaque{
};
// --------------------------------------------------------
// Type: WS_RECEIVE_OPTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_RECEIVE_OPTION = *opaque{
};
// --------------------------------------------------------
// Type: WS_CHANNEL_BINDING
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_CHANNEL_BINDING = *opaque{
};
// --------------------------------------------------------
// Type: WS_CHANNEL_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_CHANNEL_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WS_TRANSFER_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_TRANSFER_MODE = *opaque{
};
// --------------------------------------------------------
// Type: WS_HTTP_PROXY_SETTING_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_HTTP_PROXY_SETTING_MODE = *opaque{
};
// --------------------------------------------------------
// Type: WS_CHANNEL_PROPERTY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_CHANNEL_PROPERTY_ID = *opaque{
};
// --------------------------------------------------------
// Type: WS_COOKIE_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_COOKIE_MODE = *opaque{
};
// --------------------------------------------------------
// Type: WS_OPERATION_CONTEXT_PROPERTY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_OPERATION_CONTEXT_PROPERTY_ID = *opaque{
};
// --------------------------------------------------------
// Type: WS_ENDPOINT_IDENTITY_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_ENDPOINT_IDENTITY_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WS_ENDPOINT_ADDRESS_EXTENSION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_ENDPOINT_ADDRESS_EXTENSION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WS_ERROR_PROPERTY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_ERROR_PROPERTY_ID = *opaque{
};
// --------------------------------------------------------
// Type: WS_EXCEPTION_CODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_EXCEPTION_CODE = *opaque{
};
// --------------------------------------------------------
// Type: WS_FAULT_ERROR_PROPERTY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_FAULT_ERROR_PROPERTY_ID = *opaque{
};
// --------------------------------------------------------
// Type: WS_FAULT_DISCLOSURE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_FAULT_DISCLOSURE = *opaque{
};
// --------------------------------------------------------
// Type: WS_HEAP_PROPERTY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_HEAP_PROPERTY_ID = *opaque{
};
// --------------------------------------------------------
// Type: WS_LISTENER_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_LISTENER_STATE = *opaque{
};
// --------------------------------------------------------
// Type: WS_LISTENER_PROPERTY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_LISTENER_PROPERTY_ID = *opaque{
};
// --------------------------------------------------------
// Type: WS_IP_VERSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_IP_VERSION = *opaque{
};
// --------------------------------------------------------
// Type: WS_MESSAGE_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_MESSAGE_STATE = *opaque{
};
// --------------------------------------------------------
// Type: WS_MESSAGE_INITIALIZATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_MESSAGE_INITIALIZATION = *opaque{
};
// --------------------------------------------------------
// Type: WS_REPEATING_HEADER_OPTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_REPEATING_HEADER_OPTION = *opaque{
};
// --------------------------------------------------------
// Type: WS_HEADER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_HEADER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WS_ADDRESSING_VERSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_ADDRESSING_VERSION = *opaque{
};
// --------------------------------------------------------
// Type: WS_ENVELOPE_VERSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_ENVELOPE_VERSION = *opaque{
};
// --------------------------------------------------------
// Type: WS_MESSAGE_PROPERTY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_MESSAGE_PROPERTY_ID = *opaque{
};
// --------------------------------------------------------
// Type: WS_SECURITY_BINDING_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_SECURITY_BINDING_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WS_HTTP_HEADER_AUTH_TARGET
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_HTTP_HEADER_AUTH_TARGET = *opaque{
};
// --------------------------------------------------------
// Type: WS_WINDOWS_INTEGRATED_AUTH_PACKAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_WINDOWS_INTEGRATED_AUTH_PACKAGE = *opaque{
};
// --------------------------------------------------------
// Type: WS_SECURITY_HEADER_VERSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_SECURITY_HEADER_VERSION = *opaque{
};
// --------------------------------------------------------
// Type: WS_TRUST_VERSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_TRUST_VERSION = *opaque{
};
// --------------------------------------------------------
// Type: WS_REQUEST_SECURITY_TOKEN_ACTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_REQUEST_SECURITY_TOKEN_ACTION = *opaque{
};
// --------------------------------------------------------
// Type: WS_SECURE_CONVERSATION_VERSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_SECURE_CONVERSATION_VERSION = *opaque{
};
// --------------------------------------------------------
// Type: WS_SECURE_PROTOCOL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_SECURE_PROTOCOL = *opaque{
};
// --------------------------------------------------------
// Type: WS_SECURITY_TIMESTAMP_USAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_SECURITY_TIMESTAMP_USAGE = *opaque{
};
// --------------------------------------------------------
// Type: WS_SECURITY_HEADER_LAYOUT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_SECURITY_HEADER_LAYOUT = *opaque{
};
// --------------------------------------------------------
// Type: WS_SECURITY_ALGORITHM_PROPERTY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_SECURITY_ALGORITHM_PROPERTY_ID = *opaque{
};
// --------------------------------------------------------
// Type: WS_SECURITY_ALGORITHM_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_SECURITY_ALGORITHM_ID = *opaque{
};
// --------------------------------------------------------
// Type: WS_PROTECTION_LEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_PROTECTION_LEVEL = *opaque{
};
// --------------------------------------------------------
// Type: WS_SECURITY_PROPERTY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_SECURITY_PROPERTY_ID = *opaque{
};
// --------------------------------------------------------
// Type: WS_SECURITY_KEY_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_SECURITY_KEY_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WS_SECURITY_ALGORITHM_SUITE_NAME
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_SECURITY_ALGORITHM_SUITE_NAME = *opaque{
};
// --------------------------------------------------------
// Type: WS_SECURITY_TOKEN_REFERENCE_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_SECURITY_TOKEN_REFERENCE_MODE = *opaque{
};
// --------------------------------------------------------
// Type: WS_SECURITY_KEY_ENTROPY_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_SECURITY_KEY_ENTROPY_MODE = *opaque{
};
// --------------------------------------------------------
// Type: WS_EXTENDED_PROTECTION_POLICY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_EXTENDED_PROTECTION_POLICY = *opaque{
};
// --------------------------------------------------------
// Type: WS_EXTENDED_PROTECTION_SCENARIO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_EXTENDED_PROTECTION_SCENARIO = *opaque{
};
// --------------------------------------------------------
// Type: WS_SECURITY_BINDING_PROPERTY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_SECURITY_BINDING_PROPERTY_ID = *opaque{
};
// --------------------------------------------------------
// Type: WS_CERT_CREDENTIAL_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_CERT_CREDENTIAL_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WS_USERNAME_CREDENTIAL_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_USERNAME_CREDENTIAL_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WS_SECURITY_TOKEN_PROPERTY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_SECURITY_TOKEN_PROPERTY_ID = *opaque{
};
// --------------------------------------------------------
// Type: WS_SECURITY_KEY_HANDLE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_SECURITY_KEY_HANDLE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WS_MESSAGE_SECURITY_USAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_MESSAGE_SECURITY_USAGE = *opaque{
};
// --------------------------------------------------------
// Type: WS_SECURITY_CONTEXT_PROPERTY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_SECURITY_CONTEXT_PROPERTY_ID = *opaque{
};
// --------------------------------------------------------
// Type: WS_XML_SECURITY_TOKEN_PROPERTY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_XML_SECURITY_TOKEN_PROPERTY_ID = *opaque{
};
// --------------------------------------------------------
// Type: WS_SAML_AUTHENTICATOR_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_SAML_AUTHENTICATOR_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WS_REQUEST_SECURITY_TOKEN_PROPERTY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_REQUEST_SECURITY_TOKEN_PROPERTY_ID = *opaque{
};
// --------------------------------------------------------
// Type: WS_SECURITY_BEARER_KEY_TYPE_VERSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_SECURITY_BEARER_KEY_TYPE_VERSION = *opaque{
};
// --------------------------------------------------------
// Type: WS_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WS_FIELD_MAPPING
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_FIELD_MAPPING = *opaque{
};
// --------------------------------------------------------
// Type: WS_TYPE_MAPPING
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_TYPE_MAPPING = *opaque{
};
// --------------------------------------------------------
// Type: WS_READ_OPTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_READ_OPTION = *opaque{
};
// --------------------------------------------------------
// Type: WS_WRITE_OPTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_WRITE_OPTION = *opaque{
};
// --------------------------------------------------------
// Type: WS_SERVICE_CANCEL_REASON
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_SERVICE_CANCEL_REASON = *opaque{
};
// --------------------------------------------------------
// Type: WS_OPERATION_STYLE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_OPERATION_STYLE = *opaque{
};
// --------------------------------------------------------
// Type: WS_PARAMETER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_PARAMETER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WS_SERVICE_ENDPOINT_PROPERTY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_SERVICE_ENDPOINT_PROPERTY_ID = *opaque{
};
// --------------------------------------------------------
// Type: WS_METADATA_EXCHANGE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_METADATA_EXCHANGE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WS_SERVICE_PROPERTY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_SERVICE_PROPERTY_ID = *opaque{
};
// --------------------------------------------------------
// Type: WS_SERVICE_HOST_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_SERVICE_HOST_STATE = *opaque{
};
// --------------------------------------------------------
// Type: WS_SERVICE_PROXY_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_SERVICE_PROXY_STATE = *opaque{
};
// --------------------------------------------------------
// Type: WS_PROXY_PROPERTY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_PROXY_PROPERTY_ID = *opaque{
};
// --------------------------------------------------------
// Type: WS_CALL_PROPERTY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_CALL_PROPERTY_ID = *opaque{
};
// --------------------------------------------------------
// Type: WS_TRACE_API
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_TRACE_API = *opaque{
};
// --------------------------------------------------------
// Type: WS_URL_SCHEME_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_URL_SCHEME_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WS_DATETIME_FORMAT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_DATETIME_FORMAT = *opaque{
};
// --------------------------------------------------------
// Type: WS_METADATA_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_METADATA_STATE = *opaque{
};
// --------------------------------------------------------
// Type: WS_METADATA_PROPERTY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_METADATA_PROPERTY_ID = *opaque{
};
// --------------------------------------------------------
// Type: WS_POLICY_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_POLICY_STATE = *opaque{
};
// --------------------------------------------------------
// Type: WS_POLICY_PROPERTY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_POLICY_PROPERTY_ID = *opaque{
};
// --------------------------------------------------------
// Type: WS_SECURITY_BINDING_CONSTRAINT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_SECURITY_BINDING_CONSTRAINT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WS_POLICY_EXTENSION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_POLICY_EXTENSION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WS_BINDING_TEMPLATE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_BINDING_TEMPLATE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WS_READ_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_READ_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_WRITE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_WRITE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_PUSH_BYTES_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_PUSH_BYTES_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_PULL_BYTES_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_PULL_BYTES_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_DYNAMIC_STRING_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_DYNAMIC_STRING_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_ASYNC_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_ASYNC_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_ASYNC_FUNCTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_ASYNC_FUNCTION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_CREATE_CHANNEL_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_CREATE_CHANNEL_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_FREE_CHANNEL_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_FREE_CHANNEL_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_RESET_CHANNEL_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_RESET_CHANNEL_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_ABORT_CHANNEL_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_ABORT_CHANNEL_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_OPEN_CHANNEL_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_OPEN_CHANNEL_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_CLOSE_CHANNEL_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_CLOSE_CHANNEL_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_SET_CHANNEL_PROPERTY_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_SET_CHANNEL_PROPERTY_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_GET_CHANNEL_PROPERTY_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_GET_CHANNEL_PROPERTY_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_READ_MESSAGE_START_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_READ_MESSAGE_START_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_READ_MESSAGE_END_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_READ_MESSAGE_END_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_WRITE_MESSAGE_START_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_WRITE_MESSAGE_START_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_WRITE_MESSAGE_END_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_WRITE_MESSAGE_END_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_ABANDON_MESSAGE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_ABANDON_MESSAGE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_SHUTDOWN_SESSION_CHANNEL_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_SHUTDOWN_SESSION_CHANNEL_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_CREATE_ENCODER_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_CREATE_ENCODER_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_ENCODER_GET_CONTENT_TYPE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_ENCODER_GET_CONTENT_TYPE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_ENCODER_START_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_ENCODER_START_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_ENCODER_ENCODE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_ENCODER_ENCODE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_ENCODER_END_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_ENCODER_END_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_FREE_ENCODER_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_FREE_ENCODER_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_CREATE_DECODER_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_CREATE_DECODER_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_DECODER_GET_CONTENT_TYPE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_DECODER_GET_CONTENT_TYPE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_DECODER_START_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_DECODER_START_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_DECODER_DECODE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_DECODER_DECODE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_DECODER_END_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_DECODER_END_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_FREE_DECODER_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_FREE_DECODER_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_HTTP_REDIRECT_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_HTTP_REDIRECT_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_CREATE_LISTENER_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_CREATE_LISTENER_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_FREE_LISTENER_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_FREE_LISTENER_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_RESET_LISTENER_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_RESET_LISTENER_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_OPEN_LISTENER_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_OPEN_LISTENER_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_CLOSE_LISTENER_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_CLOSE_LISTENER_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_GET_LISTENER_PROPERTY_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_GET_LISTENER_PROPERTY_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_SET_LISTENER_PROPERTY_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_SET_LISTENER_PROPERTY_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_ACCEPT_CHANNEL_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_ACCEPT_CHANNEL_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_ABORT_LISTENER_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_ABORT_LISTENER_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_CREATE_CHANNEL_FOR_LISTENER_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_CREATE_CHANNEL_FOR_LISTENER_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_MESSAGE_DONE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_MESSAGE_DONE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_CERTIFICATE_VALIDATION_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_CERTIFICATE_VALIDATION_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_GET_CERT_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_GET_CERT_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_CERT_ISSUER_LIST_NOTIFICATION_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_CERT_ISSUER_LIST_NOTIFICATION_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_VALIDATE_PASSWORD_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_VALIDATE_PASSWORD_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_VALIDATE_SAML_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_VALIDATE_SAML_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_DURATION_COMPARISON_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_DURATION_COMPARISON_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_READ_TYPE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_READ_TYPE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_WRITE_TYPE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_WRITE_TYPE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_IS_DEFAULT_VALUE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_IS_DEFAULT_VALUE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_SERVICE_MESSAGE_RECEIVE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_SERVICE_MESSAGE_RECEIVE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_OPERATION_CANCEL_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_OPERATION_CANCEL_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_OPERATION_FREE_STATE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_OPERATION_FREE_STATE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_SERVICE_STUB_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_SERVICE_STUB_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_SERVICE_ACCEPT_CHANNEL_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_SERVICE_ACCEPT_CHANNEL_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_SERVICE_CLOSE_CHANNEL_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_SERVICE_CLOSE_CHANNEL_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_SERVICE_SECURITY_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_SERVICE_SECURITY_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_PROXY_MESSAGE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WS_PROXY_MESSAGE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WS_XML_DICTIONARY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_DICTIONARY = extern struct {
    guid: Guid,
    strings: ?*WS_XML_STRING,
    stringCount: u32,
    isConst: BOOL,
};
// --------------------------------------------------------
// Type: WS_XML_STRING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_STRING = extern struct {
    length: u32,
    bytes: ?*u8,
    dictionary: ?*WS_XML_DICTIONARY,
    id: u32,
};
// --------------------------------------------------------
// Type: WS_XML_QNAME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_QNAME = extern struct {
    localName: WS_XML_STRING,
    ns: WS_XML_STRING,
};
// --------------------------------------------------------
// Type: WS_XML_NODE_POSITION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_NODE_POSITION = extern struct {
    buffer: ?*WS_XML_BUFFER,
    node: ?*opaque{},
};
// --------------------------------------------------------
// Type: WS_XML_READER_PROPERTY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_READER_PROPERTY = extern struct {
    id: WS_XML_READER_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
};
// --------------------------------------------------------
// Type: WS_XML_CANONICALIZATION_INCLUSIVE_PREFIXES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_CANONICALIZATION_INCLUSIVE_PREFIXES = extern struct {
    prefixCount: u32,
    prefixes: ?*WS_XML_STRING,
};
// --------------------------------------------------------
// Type: WS_XML_CANONICALIZATION_PROPERTY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_CANONICALIZATION_PROPERTY = extern struct {
    id: WS_XML_CANONICALIZATION_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
};
// --------------------------------------------------------
// Type: WS_XML_WRITER_PROPERTY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_WRITER_PROPERTY = extern struct {
    id: WS_XML_WRITER_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
};
// --------------------------------------------------------
// Type: WS_XML_BUFFER_PROPERTY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_BUFFER_PROPERTY = extern struct {
    id: WS_XML_BUFFER_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
};
// --------------------------------------------------------
// Type: WS_XML_TEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_TEXT = extern struct {
    textType: WS_XML_TEXT_TYPE,
};
// --------------------------------------------------------
// Type: WS_XML_UTF8_TEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_UTF8_TEXT = extern struct {
    text: WS_XML_TEXT,
    value: WS_XML_STRING,
};
// --------------------------------------------------------
// Type: WS_XML_UTF16_TEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_UTF16_TEXT = extern struct {
    text: WS_XML_TEXT,
    bytes: ?*u8,
    byteCount: u32,
};
// --------------------------------------------------------
// Type: WS_XML_BASE64_TEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_BASE64_TEXT = extern struct {
    text: WS_XML_TEXT,
    bytes: ?*u8,
    length: u32,
};
// --------------------------------------------------------
// Type: WS_XML_BOOL_TEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_BOOL_TEXT = extern struct {
    text: WS_XML_TEXT,
    value: BOOL,
};
// --------------------------------------------------------
// Type: WS_XML_INT32_TEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_INT32_TEXT = extern struct {
    text: WS_XML_TEXT,
    value: i32,
};
// --------------------------------------------------------
// Type: WS_XML_INT64_TEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_INT64_TEXT = extern struct {
    text: WS_XML_TEXT,
    value: i64,
};
// --------------------------------------------------------
// Type: WS_XML_UINT64_TEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_UINT64_TEXT = extern struct {
    text: WS_XML_TEXT,
    value: u64,
};
// --------------------------------------------------------
// Type: WS_XML_FLOAT_TEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_FLOAT_TEXT = extern struct {
    text: WS_XML_TEXT,
    value: f32,
};
// --------------------------------------------------------
// Type: WS_XML_DOUBLE_TEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_DOUBLE_TEXT = extern struct {
    text: WS_XML_TEXT,
    value: f64,
};
// --------------------------------------------------------
// Type: WS_XML_DECIMAL_TEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_DECIMAL_TEXT = extern struct {
    text: WS_XML_TEXT,
    value: DECIMAL,
};
// --------------------------------------------------------
// Type: WS_XML_GUID_TEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_GUID_TEXT = extern struct {
    text: WS_XML_TEXT,
    value: Guid,
};
// --------------------------------------------------------
// Type: WS_XML_UNIQUE_ID_TEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_UNIQUE_ID_TEXT = extern struct {
    text: WS_XML_TEXT,
    value: Guid,
};
// --------------------------------------------------------
// Type: WS_DATETIME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_DATETIME = extern struct {
    ticks: u64,
    format: WS_DATETIME_FORMAT,
};
// --------------------------------------------------------
// Type: WS_XML_DATETIME_TEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_DATETIME_TEXT = extern struct {
    text: WS_XML_TEXT,
    value: WS_DATETIME,
};
// --------------------------------------------------------
// Type: WS_TIMESPAN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_TIMESPAN = extern struct {
    ticks: i64,
};
// --------------------------------------------------------
// Type: WS_XML_TIMESPAN_TEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_TIMESPAN_TEXT = extern struct {
    text: WS_XML_TEXT,
    value: WS_TIMESPAN,
};
// --------------------------------------------------------
// Type: WS_XML_QNAME_TEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_QNAME_TEXT = extern struct {
    text: WS_XML_TEXT,
    prefix: ?*WS_XML_STRING,
    localName: ?*WS_XML_STRING,
    ns: ?*WS_XML_STRING,
};
// --------------------------------------------------------
// Type: WS_XML_LIST_TEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_LIST_TEXT = extern struct {
    text: WS_XML_TEXT,
    itemCount: u32,
    items: ?*?*WS_XML_TEXT,
};
// --------------------------------------------------------
// Type: WS_XML_NODE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_NODE = extern struct {
    nodeType: WS_XML_NODE_TYPE,
};
// --------------------------------------------------------
// Type: WS_XML_ATTRIBUTE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_ATTRIBUTE = extern struct {
    singleQuote: u8,
    isXmlNs: u8,
    prefix: ?*WS_XML_STRING,
    localName: ?*WS_XML_STRING,
    ns: ?*WS_XML_STRING,
    value: ?*WS_XML_TEXT,
};
// --------------------------------------------------------
// Type: WS_XML_ELEMENT_NODE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_ELEMENT_NODE = extern struct {
    node: WS_XML_NODE,
    prefix: ?*WS_XML_STRING,
    localName: ?*WS_XML_STRING,
    ns: ?*WS_XML_STRING,
    attributeCount: u32,
    attributes: ?*?*WS_XML_ATTRIBUTE,
    isEmpty: BOOL,
};
// --------------------------------------------------------
// Type: WS_XML_TEXT_NODE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_TEXT_NODE = extern struct {
    node: WS_XML_NODE,
    text: ?*WS_XML_TEXT,
};
// --------------------------------------------------------
// Type: WS_XML_COMMENT_NODE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_COMMENT_NODE = extern struct {
    node: WS_XML_NODE,
    value: WS_XML_STRING,
};
// --------------------------------------------------------
// Type: WS_XML_READER_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_READER_INPUT = extern struct {
    inputType: WS_XML_READER_INPUT_TYPE,
};
// --------------------------------------------------------
// Type: WS_XML_READER_BUFFER_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_READER_BUFFER_INPUT = extern struct {
    input: WS_XML_READER_INPUT,
    encodedData: ?*opaque{},
    encodedDataSize: u32,
};
// --------------------------------------------------------
// Type: WS_XML_READER_STREAM_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_READER_STREAM_INPUT = extern struct {
    input: WS_XML_READER_INPUT,
    readCallback: WS_READ_CALLBACK,
    readCallbackState: ?*opaque{},
};
// --------------------------------------------------------
// Type: WS_XML_READER_ENCODING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_READER_ENCODING = extern struct {
    encodingType: WS_XML_READER_ENCODING_TYPE,
};
// --------------------------------------------------------
// Type: WS_XML_READER_TEXT_ENCODING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_READER_TEXT_ENCODING = extern struct {
    encoding: WS_XML_READER_ENCODING,
    charSet: WS_CHARSET,
};
// --------------------------------------------------------
// Type: WS_XML_READER_BINARY_ENCODING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_READER_BINARY_ENCODING = extern struct {
    encoding: WS_XML_READER_ENCODING,
    staticDictionary: ?*WS_XML_DICTIONARY,
    dynamicDictionary: ?*WS_XML_DICTIONARY,
};
// --------------------------------------------------------
// Type: WS_STRING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_STRING = extern struct {
    length: u32,
    chars: ?*u16,
};
// --------------------------------------------------------
// Type: WS_XML_READER_MTOM_ENCODING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_READER_MTOM_ENCODING = extern struct {
    encoding: WS_XML_READER_ENCODING,
    textEncoding: ?*WS_XML_READER_ENCODING,
    readMimeHeader: BOOL,
    startInfo: WS_STRING,
    boundary: WS_STRING,
    startUri: WS_STRING,
};
// --------------------------------------------------------
// Type: WS_XML_READER_RAW_ENCODING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_READER_RAW_ENCODING = extern struct {
    encoding: WS_XML_READER_ENCODING,
};
// --------------------------------------------------------
// Type: WS_XML_WRITER_ENCODING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_WRITER_ENCODING = extern struct {
    encodingType: WS_XML_WRITER_ENCODING_TYPE,
};
// --------------------------------------------------------
// Type: WS_XML_WRITER_TEXT_ENCODING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_WRITER_TEXT_ENCODING = extern struct {
    encoding: WS_XML_WRITER_ENCODING,
    charSet: WS_CHARSET,
};
// --------------------------------------------------------
// Type: WS_XML_WRITER_BINARY_ENCODING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_WRITER_BINARY_ENCODING = extern struct {
    encoding: WS_XML_WRITER_ENCODING,
    staticDictionary: ?*WS_XML_DICTIONARY,
    dynamicStringCallback: WS_DYNAMIC_STRING_CALLBACK,
    dynamicStringCallbackState: ?*opaque{},
};
// --------------------------------------------------------
// Type: WS_XML_WRITER_MTOM_ENCODING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_WRITER_MTOM_ENCODING = extern struct {
    encoding: WS_XML_WRITER_ENCODING,
    textEncoding: ?*WS_XML_WRITER_ENCODING,
    writeMimeHeader: BOOL,
    boundary: WS_STRING,
    startInfo: WS_STRING,
    startUri: WS_STRING,
    maxInlineByteCount: u32,
};
// --------------------------------------------------------
// Type: WS_XML_WRITER_RAW_ENCODING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_WRITER_RAW_ENCODING = extern struct {
    encoding: WS_XML_WRITER_ENCODING,
};
// --------------------------------------------------------
// Type: WS_XML_WRITER_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_WRITER_OUTPUT = extern struct {
    outputType: WS_XML_WRITER_OUTPUT_TYPE,
};
// --------------------------------------------------------
// Type: WS_XML_WRITER_BUFFER_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_WRITER_BUFFER_OUTPUT = extern struct {
    output: WS_XML_WRITER_OUTPUT,
};
// --------------------------------------------------------
// Type: WS_XML_WRITER_STREAM_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_WRITER_STREAM_OUTPUT = extern struct {
    output: WS_XML_WRITER_OUTPUT,
    writeCallback: WS_WRITE_CALLBACK,
    writeCallbackState: ?*opaque{},
};
// --------------------------------------------------------
// Type: WS_XML_WRITER_PROPERTIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_WRITER_PROPERTIES = extern struct {
    properties: ?*WS_XML_WRITER_PROPERTY,
    propertyCount: u32,
};
// --------------------------------------------------------
// Type: WS_XML_READER_PROPERTIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_READER_PROPERTIES = extern struct {
    properties: ?*WS_XML_READER_PROPERTY,
    propertyCount: u32,
};
// --------------------------------------------------------
// Type: WS_ASYNC_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_ASYNC_CONTEXT = extern struct {
    callback: WS_ASYNC_CALLBACK,
    callbackState: ?*opaque{},
};
// --------------------------------------------------------
// Type: WS_ASYNC_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_ASYNC_STATE = extern struct {
    internal0: ?*opaque{},
    internal1: ?*opaque{},
    internal2: ?*opaque{},
    internal3: ?*opaque{},
    internal4: ?*opaque{},
};
// --------------------------------------------------------
// Type: WS_ASYNC_OPERATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_ASYNC_OPERATION = extern struct {
    function: WS_ASYNC_FUNCTION,
};
// --------------------------------------------------------
// Type: WS_CHANNEL_PROPERTY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_CHANNEL_PROPERTY = extern struct {
    id: WS_CHANNEL_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
};
// --------------------------------------------------------
// Type: WS_CUSTOM_HTTP_PROXY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_CUSTOM_HTTP_PROXY = extern struct {
    servers: WS_STRING,
    bypass: WS_STRING,
};
// --------------------------------------------------------
// Type: WS_CHANNEL_PROPERTIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_CHANNEL_PROPERTIES = extern struct {
    properties: ?*WS_CHANNEL_PROPERTY,
    propertyCount: u32,
};
// --------------------------------------------------------
// Type: WS_CUSTOM_CHANNEL_CALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_CUSTOM_CHANNEL_CALLBACKS = extern struct {
    createChannelCallback: WS_CREATE_CHANNEL_CALLBACK,
    freeChannelCallback: WS_FREE_CHANNEL_CALLBACK,
    resetChannelCallback: WS_RESET_CHANNEL_CALLBACK,
    openChannelCallback: WS_OPEN_CHANNEL_CALLBACK,
    closeChannelCallback: WS_CLOSE_CHANNEL_CALLBACK,
    abortChannelCallback: WS_ABORT_CHANNEL_CALLBACK,
    getChannelPropertyCallback: WS_GET_CHANNEL_PROPERTY_CALLBACK,
    setChannelPropertyCallback: WS_SET_CHANNEL_PROPERTY_CALLBACK,
    writeMessageStartCallback: WS_WRITE_MESSAGE_START_CALLBACK,
    writeMessageEndCallback: WS_WRITE_MESSAGE_END_CALLBACK,
    readMessageStartCallback: WS_READ_MESSAGE_START_CALLBACK,
    readMessageEndCallback: WS_READ_MESSAGE_END_CALLBACK,
    abandonMessageCallback: WS_ABANDON_MESSAGE_CALLBACK,
    shutdownSessionChannelCallback: WS_SHUTDOWN_SESSION_CHANNEL_CALLBACK,
};
// --------------------------------------------------------
// Type: WS_HTTP_HEADER_MAPPING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_HTTP_HEADER_MAPPING = extern struct {
    headerName: WS_XML_STRING,
    headerMappingOptions: u32,
};
// --------------------------------------------------------
// Type: WS_HTTP_MESSAGE_MAPPING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_HTTP_MESSAGE_MAPPING = extern struct {
    requestMappingOptions: u32,
    responseMappingOptions: u32,
    requestHeaderMappings: ?*?*WS_HTTP_HEADER_MAPPING,
    requestHeaderMappingCount: u32,
    responseHeaderMappings: ?*?*WS_HTTP_HEADER_MAPPING,
    responseHeaderMappingCount: u32,
};
// --------------------------------------------------------
// Type: WS_ELEMENT_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_ELEMENT_DESCRIPTION = extern struct {
    elementLocalName: ?*WS_XML_STRING,
    elementNs: ?*WS_XML_STRING,
    type: WS_TYPE,
    typeDescription: ?*opaque{},
};
// --------------------------------------------------------
// Type: WS_MESSAGE_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_MESSAGE_DESCRIPTION = extern struct {
    action: ?*WS_XML_STRING,
    bodyElementDescription: ?*WS_ELEMENT_DESCRIPTION,
};
// --------------------------------------------------------
// Type: WS_CHANNEL_ENCODER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_CHANNEL_ENCODER = extern struct {
    createContext: ?*opaque{},
    createEncoderCallback: WS_CREATE_ENCODER_CALLBACK,
    encoderGetContentTypeCallback: WS_ENCODER_GET_CONTENT_TYPE_CALLBACK,
    encoderStartCallback: WS_ENCODER_START_CALLBACK,
    encoderEncodeCallback: WS_ENCODER_ENCODE_CALLBACK,
    encoderEndCallback: WS_ENCODER_END_CALLBACK,
    freeEncoderCallback: WS_FREE_ENCODER_CALLBACK,
};
// --------------------------------------------------------
// Type: WS_CHANNEL_DECODER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_CHANNEL_DECODER = extern struct {
    createContext: ?*opaque{},
    createDecoderCallback: WS_CREATE_DECODER_CALLBACK,
    decoderGetContentTypeCallback: WS_DECODER_GET_CONTENT_TYPE_CALLBACK,
    decoderStartCallback: WS_DECODER_START_CALLBACK,
    decoderDecodeCallback: WS_DECODER_DECODE_CALLBACK,
    decoderEndCallback: WS_DECODER_END_CALLBACK,
    freeDecoderCallback: WS_FREE_DECODER_CALLBACK,
};
// --------------------------------------------------------
// Type: WS_HTTP_REDIRECT_CALLBACK_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_HTTP_REDIRECT_CALLBACK_CONTEXT = extern struct {
    callback: WS_HTTP_REDIRECT_CALLBACK,
    state: ?*opaque{},
};
// --------------------------------------------------------
// Type: WS_ENDPOINT_IDENTITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_ENDPOINT_IDENTITY = extern struct {
    identityType: WS_ENDPOINT_IDENTITY_TYPE,
};
// --------------------------------------------------------
// Type: WS_ENDPOINT_ADDRESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_ENDPOINT_ADDRESS = extern struct {
    url: WS_STRING,
    headers: ?*WS_XML_BUFFER,
    extensions: ?*WS_XML_BUFFER,
    identity: ?*WS_ENDPOINT_IDENTITY,
};
// --------------------------------------------------------
// Type: WS_DNS_ENDPOINT_IDENTITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_DNS_ENDPOINT_IDENTITY = extern struct {
    identity: WS_ENDPOINT_IDENTITY,
    dns: WS_STRING,
};
// --------------------------------------------------------
// Type: WS_UPN_ENDPOINT_IDENTITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_UPN_ENDPOINT_IDENTITY = extern struct {
    identity: WS_ENDPOINT_IDENTITY,
    upn: WS_STRING,
};
// --------------------------------------------------------
// Type: WS_SPN_ENDPOINT_IDENTITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SPN_ENDPOINT_IDENTITY = extern struct {
    identity: WS_ENDPOINT_IDENTITY,
    spn: WS_STRING,
};
// --------------------------------------------------------
// Type: WS_BYTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_BYTES = extern struct {
    length: u32,
    bytes: ?*u8,
};
// --------------------------------------------------------
// Type: WS_RSA_ENDPOINT_IDENTITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_RSA_ENDPOINT_IDENTITY = extern struct {
    identity: WS_ENDPOINT_IDENTITY,
    modulus: WS_BYTES,
    exponent: WS_BYTES,
};
// --------------------------------------------------------
// Type: WS_CERT_ENDPOINT_IDENTITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_CERT_ENDPOINT_IDENTITY = extern struct {
    identity: WS_ENDPOINT_IDENTITY,
    rawCertificateData: WS_BYTES,
};
// --------------------------------------------------------
// Type: WS_UNKNOWN_ENDPOINT_IDENTITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_UNKNOWN_ENDPOINT_IDENTITY = extern struct {
    identity: WS_ENDPOINT_IDENTITY,
    element: ?*WS_XML_BUFFER,
};
// --------------------------------------------------------
// Type: WS_ERROR_PROPERTY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_ERROR_PROPERTY = extern struct {
    id: WS_ERROR_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
};
// --------------------------------------------------------
// Type: WS_FAULT_REASON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_FAULT_REASON = extern struct {
    text: WS_STRING,
    lang: WS_STRING,
};
// --------------------------------------------------------
// Type: WS_FAULT_CODE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_FAULT_CODE = extern struct {
    value: WS_XML_QNAME,
    subCode: ?*WS_FAULT_CODE,
};
// --------------------------------------------------------
// Type: WS_FAULT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_FAULT = extern struct {
    code: ?*WS_FAULT_CODE,
    reasons: ?*WS_FAULT_REASON,
    reasonCount: u32,
    actor: WS_STRING,
    node: WS_STRING,
    detail: ?*WS_XML_BUFFER,
};
// --------------------------------------------------------
// Type: WS_FAULT_DETAIL_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_FAULT_DETAIL_DESCRIPTION = extern struct {
    action: ?*WS_XML_STRING,
    detailElementDescription: ?*WS_ELEMENT_DESCRIPTION,
};
// --------------------------------------------------------
// Type: WS_HEAP_PROPERTY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_HEAP_PROPERTY = extern struct {
    id: WS_HEAP_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
};
// --------------------------------------------------------
// Type: WS_HEAP_PROPERTIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_HEAP_PROPERTIES = extern struct {
    properties: ?*WS_HEAP_PROPERTY,
    propertyCount: u32,
};
// --------------------------------------------------------
// Type: WS_LISTENER_PROPERTY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_LISTENER_PROPERTY = extern struct {
    id: WS_LISTENER_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
};
// --------------------------------------------------------
// Type: WS_DISALLOWED_USER_AGENT_SUBSTRINGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_DISALLOWED_USER_AGENT_SUBSTRINGS = extern struct {
    subStringCount: u32,
    subStrings: ?*?*WS_STRING,
};
// --------------------------------------------------------
// Type: WS_LISTENER_PROPERTIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_LISTENER_PROPERTIES = extern struct {
    properties: ?*WS_LISTENER_PROPERTY,
    propertyCount: u32,
};
// --------------------------------------------------------
// Type: WS_HOST_NAMES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_HOST_NAMES = extern struct {
    hostNames: ?*WS_STRING,
    hostNameCount: u32,
};
// --------------------------------------------------------
// Type: WS_CUSTOM_LISTENER_CALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_CUSTOM_LISTENER_CALLBACKS = extern struct {
    createListenerCallback: WS_CREATE_LISTENER_CALLBACK,
    freeListenerCallback: WS_FREE_LISTENER_CALLBACK,
    resetListenerCallback: WS_RESET_LISTENER_CALLBACK,
    openListenerCallback: WS_OPEN_LISTENER_CALLBACK,
    closeListenerCallback: WS_CLOSE_LISTENER_CALLBACK,
    abortListenerCallback: WS_ABORT_LISTENER_CALLBACK,
    getListenerPropertyCallback: WS_GET_LISTENER_PROPERTY_CALLBACK,
    setListenerPropertyCallback: WS_SET_LISTENER_PROPERTY_CALLBACK,
    createChannelForListenerCallback: WS_CREATE_CHANNEL_FOR_LISTENER_CALLBACK,
    acceptChannelCallback: WS_ACCEPT_CHANNEL_CALLBACK,
};
// --------------------------------------------------------
// Type: WS_MESSAGE_PROPERTY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_MESSAGE_PROPERTY = extern struct {
    id: WS_MESSAGE_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
};
// --------------------------------------------------------
// Type: WS_MESSAGE_PROPERTIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_MESSAGE_PROPERTIES = extern struct {
    properties: ?*WS_MESSAGE_PROPERTY,
    propertyCount: u32,
};
// --------------------------------------------------------
// Type: WS_SECURITY_ALGORITHM_PROPERTY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SECURITY_ALGORITHM_PROPERTY = extern struct {
    id: WS_SECURITY_ALGORITHM_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
};
// --------------------------------------------------------
// Type: WS_SECURITY_ALGORITHM_SUITE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SECURITY_ALGORITHM_SUITE = extern struct {
    canonicalizationAlgorithm: WS_SECURITY_ALGORITHM_ID,
    digestAlgorithm: WS_SECURITY_ALGORITHM_ID,
    symmetricSignatureAlgorithm: WS_SECURITY_ALGORITHM_ID,
    asymmetricSignatureAlgorithm: WS_SECURITY_ALGORITHM_ID,
    encryptionAlgorithm: WS_SECURITY_ALGORITHM_ID,
    keyDerivationAlgorithm: WS_SECURITY_ALGORITHM_ID,
    symmetricKeyWrapAlgorithm: WS_SECURITY_ALGORITHM_ID,
    asymmetricKeyWrapAlgorithm: WS_SECURITY_ALGORITHM_ID,
    minSymmetricKeyLength: u32,
    maxSymmetricKeyLength: u32,
    minAsymmetricKeyLength: u32,
    maxAsymmetricKeyLength: u32,
    properties: ?*WS_SECURITY_ALGORITHM_PROPERTY,
    propertyCount: u32,
};
// --------------------------------------------------------
// Type: WS_SECURITY_PROPERTY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SECURITY_PROPERTY = extern struct {
    id: WS_SECURITY_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
};
// --------------------------------------------------------
// Type: WS_SECURITY_PROPERTIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SECURITY_PROPERTIES = extern struct {
    properties: ?*WS_SECURITY_PROPERTY,
    propertyCount: u32,
};
// --------------------------------------------------------
// Type: WS_SECURITY_BINDING_PROPERTY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SECURITY_BINDING_PROPERTY = extern struct {
    id: WS_SECURITY_BINDING_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
};
// --------------------------------------------------------
// Type: WS_SECURITY_BINDING_PROPERTIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SECURITY_BINDING_PROPERTIES = extern struct {
    properties: ?*WS_SECURITY_BINDING_PROPERTY,
    propertyCount: u32,
};
// --------------------------------------------------------
// Type: WS_SERVICE_SECURITY_IDENTITIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SERVICE_SECURITY_IDENTITIES = extern struct {
    serviceIdentities: ?*WS_STRING,
    serviceIdentityCount: u32,
};
// --------------------------------------------------------
// Type: WS_CERTIFICATE_VALIDATION_CALLBACK_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_CERTIFICATE_VALIDATION_CALLBACK_CONTEXT = extern struct {
    callback: WS_CERTIFICATE_VALIDATION_CALLBACK,
    state: ?*opaque{},
};
// --------------------------------------------------------
// Type: WS_CERT_CREDENTIAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_CERT_CREDENTIAL = extern struct {
    credentialType: WS_CERT_CREDENTIAL_TYPE,
};
// --------------------------------------------------------
// Type: WS_SUBJECT_NAME_CERT_CREDENTIAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SUBJECT_NAME_CERT_CREDENTIAL = extern struct {
    credential: WS_CERT_CREDENTIAL,
    storeLocation: u32,
    storeName: WS_STRING,
    subjectName: WS_STRING,
};
// --------------------------------------------------------
// Type: WS_THUMBPRINT_CERT_CREDENTIAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_THUMBPRINT_CERT_CREDENTIAL = extern struct {
    credential: WS_CERT_CREDENTIAL,
    storeLocation: u32,
    storeName: WS_STRING,
    thumbprint: WS_STRING,
};
// --------------------------------------------------------
// Type: WS_CUSTOM_CERT_CREDENTIAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_CUSTOM_CERT_CREDENTIAL = extern struct {
    credential: WS_CERT_CREDENTIAL,
    getCertCallback: WS_GET_CERT_CALLBACK,
    getCertCallbackState: ?*opaque{},
    certIssuerListNotificationCallback: WS_CERT_ISSUER_LIST_NOTIFICATION_CALLBACK,
    certIssuerListNotificationCallbackState: ?*opaque{},
};
// --------------------------------------------------------
// Type: WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL = extern struct {
    credentialType: WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL_TYPE,
};
// --------------------------------------------------------
// Type: WS_STRING_WINDOWS_INTEGRATED_AUTH_CREDENTIAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_STRING_WINDOWS_INTEGRATED_AUTH_CREDENTIAL = extern struct {
    credential: WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL,
    username: WS_STRING,
    password: WS_STRING,
    domain: WS_STRING,
};
// --------------------------------------------------------
// Type: WS_DEFAULT_WINDOWS_INTEGRATED_AUTH_CREDENTIAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_DEFAULT_WINDOWS_INTEGRATED_AUTH_CREDENTIAL = extern struct {
    credential: WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL,
};
// --------------------------------------------------------
// Type: WS_OPAQUE_WINDOWS_INTEGRATED_AUTH_CREDENTIAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_OPAQUE_WINDOWS_INTEGRATED_AUTH_CREDENTIAL = extern struct {
    credential: WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL,
    opaqueAuthIdentity: ?*opaque{},
};
// --------------------------------------------------------
// Type: WS_USERNAME_CREDENTIAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_USERNAME_CREDENTIAL = extern struct {
    credentialType: WS_USERNAME_CREDENTIAL_TYPE,
};
// --------------------------------------------------------
// Type: WS_STRING_USERNAME_CREDENTIAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_STRING_USERNAME_CREDENTIAL = extern struct {
    credential: WS_USERNAME_CREDENTIAL,
    username: WS_STRING,
    password: WS_STRING,
};
// --------------------------------------------------------
// Type: WS_SECURITY_KEY_HANDLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SECURITY_KEY_HANDLE = extern struct {
    keyHandleType: WS_SECURITY_KEY_HANDLE_TYPE,
};
// --------------------------------------------------------
// Type: WS_RAW_SYMMETRIC_SECURITY_KEY_HANDLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_RAW_SYMMETRIC_SECURITY_KEY_HANDLE = extern struct {
    keyHandle: WS_SECURITY_KEY_HANDLE,
    rawKeyBytes: WS_BYTES,
};
// --------------------------------------------------------
// Type: WS_NCRYPT_ASYMMETRIC_SECURITY_KEY_HANDLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_NCRYPT_ASYMMETRIC_SECURITY_KEY_HANDLE = extern struct {
    keyHandle: WS_SECURITY_KEY_HANDLE,
    asymmetricKey: ?*opaque{},
};
// --------------------------------------------------------
// Type: WS_CAPI_ASYMMETRIC_SECURITY_KEY_HANDLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_CAPI_ASYMMETRIC_SECURITY_KEY_HANDLE = extern struct {
    keyHandle: WS_SECURITY_KEY_HANDLE,
    provider: ?*opaque{},
    keySpec: u32,
};
// --------------------------------------------------------
// Type: WS_SECURITY_BINDING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SECURITY_BINDING = extern struct {
    bindingType: WS_SECURITY_BINDING_TYPE,
    properties: ?*WS_SECURITY_BINDING_PROPERTY,
    propertyCount: u32,
};
// --------------------------------------------------------
// Type: WS_SSL_TRANSPORT_SECURITY_BINDING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SSL_TRANSPORT_SECURITY_BINDING = extern struct {
    binding: WS_SECURITY_BINDING,
    localCertCredential: ?*WS_CERT_CREDENTIAL,
};
// --------------------------------------------------------
// Type: WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING = extern struct {
    binding: WS_SECURITY_BINDING,
    clientCredential: ?*WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL,
};
// --------------------------------------------------------
// Type: WS_NAMEDPIPE_SSPI_TRANSPORT_SECURITY_BINDING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_NAMEDPIPE_SSPI_TRANSPORT_SECURITY_BINDING = extern struct {
    binding: WS_SECURITY_BINDING,
    clientCredential: ?*WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL,
};
// --------------------------------------------------------
// Type: WS_HTTP_HEADER_AUTH_SECURITY_BINDING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_HTTP_HEADER_AUTH_SECURITY_BINDING = extern struct {
    binding: WS_SECURITY_BINDING,
    clientCredential: ?*WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL,
};
// --------------------------------------------------------
// Type: WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING = extern struct {
    binding: WS_SECURITY_BINDING,
    bindingUsage: WS_MESSAGE_SECURITY_USAGE,
    clientCredential: ?*WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL,
};
// --------------------------------------------------------
// Type: WS_USERNAME_MESSAGE_SECURITY_BINDING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_USERNAME_MESSAGE_SECURITY_BINDING = extern struct {
    binding: WS_SECURITY_BINDING,
    bindingUsage: WS_MESSAGE_SECURITY_USAGE,
    clientCredential: ?*WS_USERNAME_CREDENTIAL,
    passwordValidator: WS_VALIDATE_PASSWORD_CALLBACK,
    passwordValidatorCallbackState: ?*opaque{},
};
// --------------------------------------------------------
// Type: WS_SECURITY_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SECURITY_DESCRIPTION = extern struct {
    securityBindings: ?*?*WS_SECURITY_BINDING,
    securityBindingCount: u32,
    properties: ?*WS_SECURITY_PROPERTY,
    propertyCount: u32,
};
// --------------------------------------------------------
// Type: WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING = extern struct {
    binding: WS_SECURITY_BINDING,
    bindingUsage: WS_MESSAGE_SECURITY_USAGE,
    bootstrapSecurityDescription: ?*WS_SECURITY_DESCRIPTION,
};
// --------------------------------------------------------
// Type: WS_SECURITY_CONTEXT_PROPERTY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SECURITY_CONTEXT_PROPERTY = extern struct {
    id: WS_SECURITY_CONTEXT_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
};
// --------------------------------------------------------
// Type: WS_XML_SECURITY_TOKEN_PROPERTY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_SECURITY_TOKEN_PROPERTY = extern struct {
    id: WS_XML_SECURITY_TOKEN_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
};
// --------------------------------------------------------
// Type: WS_XML_TOKEN_MESSAGE_SECURITY_BINDING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_TOKEN_MESSAGE_SECURITY_BINDING = extern struct {
    binding: WS_SECURITY_BINDING,
    bindingUsage: WS_MESSAGE_SECURITY_USAGE,
    xmlToken: ?*WS_SECURITY_TOKEN,
};
// --------------------------------------------------------
// Type: WS_SAML_AUTHENTICATOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SAML_AUTHENTICATOR = extern struct {
    authenticatorType: WS_SAML_AUTHENTICATOR_TYPE,
};
// --------------------------------------------------------
// Type: WS_CERT_SIGNED_SAML_AUTHENTICATOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_CERT_SIGNED_SAML_AUTHENTICATOR = extern struct {
    authenticator: WS_SAML_AUTHENTICATOR,
    trustedIssuerCerts: ?*?*CERT_CONTEXT,
    trustedIssuerCertCount: u32,
    decryptionCert: ?*CERT_CONTEXT,
    samlValidator: WS_VALIDATE_SAML_CALLBACK,
    samlValidatorCallbackState: ?*opaque{},
};
// --------------------------------------------------------
// Type: WS_SAML_MESSAGE_SECURITY_BINDING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SAML_MESSAGE_SECURITY_BINDING = extern struct {
    binding: WS_SECURITY_BINDING,
    bindingUsage: WS_MESSAGE_SECURITY_USAGE,
    authenticator: ?*WS_SAML_AUTHENTICATOR,
};
// --------------------------------------------------------
// Type: WS_REQUEST_SECURITY_TOKEN_PROPERTY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_REQUEST_SECURITY_TOKEN_PROPERTY = extern struct {
    id: WS_REQUEST_SECURITY_TOKEN_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
};
// --------------------------------------------------------
// Type: WS_ANY_ATTRIBUTE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_ANY_ATTRIBUTE = extern struct {
    localName: WS_XML_STRING,
    ns: WS_XML_STRING,
    value: ?*WS_XML_TEXT,
};
// --------------------------------------------------------
// Type: WS_ANY_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_ANY_ATTRIBUTES = extern struct {
    attributes: ?*WS_ANY_ATTRIBUTE,
    attributeCount: u32,
};
// --------------------------------------------------------
// Type: WS_BOOL_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_BOOL_DESCRIPTION = extern struct {
    value: BOOL,
};
// --------------------------------------------------------
// Type: WS_GUID_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_GUID_DESCRIPTION = extern struct {
    value: Guid,
};
// --------------------------------------------------------
// Type: WS_DATETIME_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_DATETIME_DESCRIPTION = extern struct {
    minValue: WS_DATETIME,
    maxValue: WS_DATETIME,
};
// --------------------------------------------------------
// Type: WS_DURATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_DURATION = extern struct {
    negative: BOOL,
    years: u32,
    months: u32,
    days: u32,
    hours: u32,
    minutes: u32,
    seconds: u32,
    milliseconds: u32,
    ticks: u32,
};
// --------------------------------------------------------
// Type: WS_DURATION_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_DURATION_DESCRIPTION = extern struct {
    minValue: WS_DURATION,
    maxValue: WS_DURATION,
    comparer: WS_DURATION_COMPARISON_CALLBACK,
};
// --------------------------------------------------------
// Type: WS_TIMESPAN_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_TIMESPAN_DESCRIPTION = extern struct {
    minValue: WS_TIMESPAN,
    maxValue: WS_TIMESPAN,
};
// --------------------------------------------------------
// Type: WS_UNIQUE_ID_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_UNIQUE_ID_DESCRIPTION = extern struct {
    minCharCount: u32,
    maxCharCount: u32,
};
// --------------------------------------------------------
// Type: WS_STRING_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_STRING_DESCRIPTION = extern struct {
    minCharCount: u32,
    maxCharCount: u32,
};
// --------------------------------------------------------
// Type: WS_XML_STRING_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_STRING_DESCRIPTION = extern struct {
    minByteCount: u32,
    maxByteCount: u32,
};
// --------------------------------------------------------
// Type: WS_XML_QNAME_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_XML_QNAME_DESCRIPTION = extern struct {
    minLocalNameByteCount: u32,
    maxLocalNameByteCount: u32,
    minNsByteCount: u32,
    maxNsByteCount: u32,
};
// --------------------------------------------------------
// Type: WS_CHAR_ARRAY_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_CHAR_ARRAY_DESCRIPTION = extern struct {
    minCharCount: u32,
    maxCharCount: u32,
};
// --------------------------------------------------------
// Type: WS_BYTE_ARRAY_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_BYTE_ARRAY_DESCRIPTION = extern struct {
    minByteCount: u32,
    maxByteCount: u32,
};
// --------------------------------------------------------
// Type: WS_UTF8_ARRAY_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_UTF8_ARRAY_DESCRIPTION = extern struct {
    minByteCount: u32,
    maxByteCount: u32,
};
// --------------------------------------------------------
// Type: WS_WSZ_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_WSZ_DESCRIPTION = extern struct {
    minCharCount: u32,
    maxCharCount: u32,
};
// --------------------------------------------------------
// Type: WS_INT8_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_INT8_DESCRIPTION = extern struct {
    minValue: i8,
    maxValue: i8,
};
// --------------------------------------------------------
// Type: WS_UINT8_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_UINT8_DESCRIPTION = extern struct {
    minValue: u8,
    maxValue: u8,
};
// --------------------------------------------------------
// Type: WS_INT16_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_INT16_DESCRIPTION = extern struct {
    minValue: i16,
    maxValue: i16,
};
// --------------------------------------------------------
// Type: WS_UINT16_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_UINT16_DESCRIPTION = extern struct {
    minValue: u16,
    maxValue: u16,
};
// --------------------------------------------------------
// Type: WS_INT32_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_INT32_DESCRIPTION = extern struct {
    minValue: i32,
    maxValue: i32,
};
// --------------------------------------------------------
// Type: WS_UINT32_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_UINT32_DESCRIPTION = extern struct {
    minValue: u32,
    maxValue: u32,
};
// --------------------------------------------------------
// Type: WS_INT64_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_INT64_DESCRIPTION = extern struct {
    minValue: i64,
    maxValue: i64,
};
// --------------------------------------------------------
// Type: WS_UINT64_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_UINT64_DESCRIPTION = extern struct {
    minValue: u64,
    maxValue: u64,
};
// --------------------------------------------------------
// Type: WS_FLOAT_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_FLOAT_DESCRIPTION = extern struct {
    minValue: f32,
    maxValue: f32,
};
// --------------------------------------------------------
// Type: WS_DOUBLE_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_DOUBLE_DESCRIPTION = extern struct {
    minValue: f64,
    maxValue: f64,
};
// --------------------------------------------------------
// Type: WS_DECIMAL_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_DECIMAL_DESCRIPTION = extern struct {
    minValue: DECIMAL,
    maxValue: DECIMAL,
};
// --------------------------------------------------------
// Type: WS_BYTES_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_BYTES_DESCRIPTION = extern struct {
    minByteCount: u32,
    maxByteCount: u32,
};
// --------------------------------------------------------
// Type: WS_ENUM_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_ENUM_VALUE = extern struct {
    value: i32,
    name: ?*WS_XML_STRING,
};
// --------------------------------------------------------
// Type: WS_ENUM_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_ENUM_DESCRIPTION = extern struct {
    values: ?*WS_ENUM_VALUE,
    valueCount: u32,
    maxByteCount: u32,
    nameIndices: ?*u32,
};
// --------------------------------------------------------
// Type: WS_ITEM_RANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_ITEM_RANGE = extern struct {
    minItemCount: u32,
    maxItemCount: u32,
};
// --------------------------------------------------------
// Type: WS_DEFAULT_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_DEFAULT_VALUE = extern struct {
    value: ?*opaque{},
    valueSize: u32,
};
// --------------------------------------------------------
// Type: WS_FIELD_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_FIELD_DESCRIPTION = extern struct {
    mapping: WS_FIELD_MAPPING,
    localName: ?*WS_XML_STRING,
    ns: ?*WS_XML_STRING,
    type: WS_TYPE,
    typeDescription: ?*opaque{},
    offset: u32,
    options: u32,
    defaultValue: ?*WS_DEFAULT_VALUE,
    countOffset: u32,
    itemLocalName: ?*WS_XML_STRING,
    itemNs: ?*WS_XML_STRING,
    itemRange: ?*WS_ITEM_RANGE,
};
// --------------------------------------------------------
// Type: WS_UNION_FIELD_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_UNION_FIELD_DESCRIPTION = extern struct {
    value: i32,
    field: WS_FIELD_DESCRIPTION,
};
// --------------------------------------------------------
// Type: WS_STRUCT_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_STRUCT_DESCRIPTION = extern struct {
    size: u32,
    alignment: u32,
    fields: ?*?*WS_FIELD_DESCRIPTION,
    fieldCount: u32,
    typeLocalName: ?*WS_XML_STRING,
    typeNs: ?*WS_XML_STRING,
    parentType: ?*WS_STRUCT_DESCRIPTION,
    subTypes: ?*?*WS_STRUCT_DESCRIPTION,
    subTypeCount: u32,
    structOptions: u32,
};
// --------------------------------------------------------
// Type: WS_UNION_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_UNION_DESCRIPTION = extern struct {
    size: u32,
    alignment: u32,
    fields: ?*?*WS_UNION_FIELD_DESCRIPTION,
    fieldCount: u32,
    enumOffset: u32,
    noneEnumValue: i32,
    valueIndices: ?*u32,
};
// --------------------------------------------------------
// Type: WS_ENDPOINT_ADDRESS_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_ENDPOINT_ADDRESS_DESCRIPTION = extern struct {
    addressingVersion: WS_ADDRESSING_VERSION,
};
// --------------------------------------------------------
// Type: WS_FAULT_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_FAULT_DESCRIPTION = extern struct {
    envelopeVersion: WS_ENVELOPE_VERSION,
};
// --------------------------------------------------------
// Type: WS_VOID_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_VOID_DESCRIPTION = extern struct {
    size: u32,
};
// --------------------------------------------------------
// Type: WS_CUSTOM_TYPE_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_CUSTOM_TYPE_DESCRIPTION = extern struct {
    size: u32,
    alignment: u32,
    readCallback: WS_READ_TYPE_CALLBACK,
    writeCallback: WS_WRITE_TYPE_CALLBACK,
    descriptionData: ?*opaque{},
    isDefaultValueCallback: WS_IS_DEFAULT_VALUE_CALLBACK,
};
// --------------------------------------------------------
// Type: WS_ATTRIBUTE_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_ATTRIBUTE_DESCRIPTION = extern struct {
    attributeLocalName: ?*WS_XML_STRING,
    attributeNs: ?*WS_XML_STRING,
    type: WS_TYPE,
    typeDescription: ?*opaque{},
};
// --------------------------------------------------------
// Type: WS_PARAMETER_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_PARAMETER_DESCRIPTION = extern struct {
    parameterType: WS_PARAMETER_TYPE,
    inputMessageIndex: u16,
    outputMessageIndex: u16,
};
// --------------------------------------------------------
// Type: WS_OPERATION_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_OPERATION_DESCRIPTION = extern struct {
    versionInfo: u32,
    inputMessageDescription: ?*WS_MESSAGE_DESCRIPTION,
    outputMessageDescription: ?*WS_MESSAGE_DESCRIPTION,
    inputMessageOptions: u32,
    outputMessageOptions: u32,
    parameterCount: u16,
    parameterDescription: ?*WS_PARAMETER_DESCRIPTION,
    stubCallback: WS_SERVICE_STUB_CALLBACK,
    style: WS_OPERATION_STYLE,
};
// --------------------------------------------------------
// Type: WS_CONTRACT_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_CONTRACT_DESCRIPTION = extern struct {
    operationCount: u32,
    operations: ?*?*WS_OPERATION_DESCRIPTION,
};
// --------------------------------------------------------
// Type: WS_SERVICE_CONTRACT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SERVICE_CONTRACT = extern struct {
    contractDescription: ?*WS_CONTRACT_DESCRIPTION,
    defaultMessageHandlerCallback: WS_SERVICE_MESSAGE_RECEIVE_CALLBACK,
    methodTable: ?*opaque{},
};
// --------------------------------------------------------
// Type: WS_SERVICE_PROPERTY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SERVICE_PROPERTY = extern struct {
    id: WS_SERVICE_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
};
// --------------------------------------------------------
// Type: WS_SERVICE_ENDPOINT_PROPERTY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SERVICE_ENDPOINT_PROPERTY = extern struct {
    id: WS_SERVICE_ENDPOINT_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
};
// --------------------------------------------------------
// Type: WS_SERVICE_PROPERTY_ACCEPT_CALLBACK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SERVICE_PROPERTY_ACCEPT_CALLBACK = extern struct {
    callback: WS_SERVICE_ACCEPT_CHANNEL_CALLBACK,
};
// --------------------------------------------------------
// Type: WS_SERVICE_METADATA_DOCUMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SERVICE_METADATA_DOCUMENT = extern struct {
    content: ?*WS_XML_STRING,
    name: ?*WS_STRING,
};
// --------------------------------------------------------
// Type: WS_SERVICE_METADATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SERVICE_METADATA = extern struct {
    documentCount: u32,
    documents: ?*?*WS_SERVICE_METADATA_DOCUMENT,
    serviceName: ?*WS_XML_STRING,
    serviceNs: ?*WS_XML_STRING,
};
// --------------------------------------------------------
// Type: WS_SERVICE_PROPERTY_CLOSE_CALLBACK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SERVICE_PROPERTY_CLOSE_CALLBACK = extern struct {
    callback: WS_SERVICE_CLOSE_CHANNEL_CALLBACK,
};
// --------------------------------------------------------
// Type: WS_SERVICE_ENDPOINT_METADATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SERVICE_ENDPOINT_METADATA = extern struct {
    portName: ?*WS_XML_STRING,
    bindingName: ?*WS_XML_STRING,
    bindingNs: ?*WS_XML_STRING,
};
// --------------------------------------------------------
// Type: WS_SERVICE_ENDPOINT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SERVICE_ENDPOINT = extern struct {
    address: WS_ENDPOINT_ADDRESS,
    channelBinding: WS_CHANNEL_BINDING,
    channelType: WS_CHANNEL_TYPE,
    securityDescription: ?*WS_SECURITY_DESCRIPTION,
    contract: ?*WS_SERVICE_CONTRACT,
    authorizationCallback: WS_SERVICE_SECURITY_CALLBACK,
    properties: ?*WS_SERVICE_ENDPOINT_PROPERTY,
    propertyCount: u32,
    channelProperties: WS_CHANNEL_PROPERTIES,
};
// --------------------------------------------------------
// Type: WS_PROXY_PROPERTY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_PROXY_PROPERTY = extern struct {
    id: WS_PROXY_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
};
// --------------------------------------------------------
// Type: WS_PROXY_MESSAGE_CALLBACK_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_PROXY_MESSAGE_CALLBACK_CONTEXT = extern struct {
    callback: WS_PROXY_MESSAGE_CALLBACK,
    state: ?*opaque{},
};
// --------------------------------------------------------
// Type: WS_CALL_PROPERTY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_CALL_PROPERTY = extern struct {
    id: WS_CALL_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
};
// --------------------------------------------------------
// Type: WS_URL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_URL = extern struct {
    scheme: WS_URL_SCHEME_TYPE,
};
// --------------------------------------------------------
// Type: WS_HTTP_URL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_HTTP_URL = extern struct {
    url: WS_URL,
    host: WS_STRING,
    port: u16,
    portAsString: WS_STRING,
    path: WS_STRING,
    query: WS_STRING,
    fragment: WS_STRING,
};
// --------------------------------------------------------
// Type: WS_HTTPS_URL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_HTTPS_URL = extern struct {
    url: WS_URL,
    host: WS_STRING,
    port: u16,
    portAsString: WS_STRING,
    path: WS_STRING,
    query: WS_STRING,
    fragment: WS_STRING,
};
// --------------------------------------------------------
// Type: WS_NETTCP_URL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_NETTCP_URL = extern struct {
    url: WS_URL,
    host: WS_STRING,
    port: u16,
    portAsString: WS_STRING,
    path: WS_STRING,
    query: WS_STRING,
    fragment: WS_STRING,
};
// --------------------------------------------------------
// Type: WS_SOAPUDP_URL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SOAPUDP_URL = extern struct {
    url: WS_URL,
    host: WS_STRING,
    port: u16,
    portAsString: WS_STRING,
    path: WS_STRING,
    query: WS_STRING,
    fragment: WS_STRING,
};
// --------------------------------------------------------
// Type: WS_NETPIPE_URL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_NETPIPE_URL = extern struct {
    url: WS_URL,
    host: WS_STRING,
    port: u16,
    portAsString: WS_STRING,
    path: WS_STRING,
    query: WS_STRING,
    fragment: WS_STRING,
};
// --------------------------------------------------------
// Type: WS_UNIQUE_ID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_UNIQUE_ID = extern struct {
    uri: WS_STRING,
    guid: Guid,
};
// --------------------------------------------------------
// Type: WS_BUFFERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_BUFFERS = extern struct {
    bufferCount: u32,
    buffers: ?*WS_BYTES,
};
// --------------------------------------------------------
// Type: WS_METADATA_ENDPOINT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_METADATA_ENDPOINT = extern struct {
    endpointAddress: WS_ENDPOINT_ADDRESS,
    endpointPolicy: ?*WS_POLICY,
    portName: ?*WS_XML_STRING,
    serviceName: ?*WS_XML_STRING,
    serviceNs: ?*WS_XML_STRING,
    bindingName: ?*WS_XML_STRING,
    bindingNs: ?*WS_XML_STRING,
    portTypeName: ?*WS_XML_STRING,
    portTypeNs: ?*WS_XML_STRING,
};
// --------------------------------------------------------
// Type: WS_METADATA_ENDPOINTS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_METADATA_ENDPOINTS = extern struct {
    endpoints: ?*WS_METADATA_ENDPOINT,
    endpointCount: u32,
};
// --------------------------------------------------------
// Type: WS_METADATA_PROPERTY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_METADATA_PROPERTY = extern struct {
    id: WS_METADATA_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
};
// --------------------------------------------------------
// Type: WS_POLICY_PROPERTY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_POLICY_PROPERTY = extern struct {
    id: WS_POLICY_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
};
// --------------------------------------------------------
// Type: WS_POLICY_PROPERTIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_POLICY_PROPERTIES = extern struct {
    properties: ?*WS_POLICY_PROPERTY,
    propertyCount: u32,
};
// --------------------------------------------------------
// Type: WS_SECURITY_BINDING_PROPERTY_CONSTRAINT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SECURITY_BINDING_PROPERTY_CONSTRAINT = extern struct {
    id: WS_SECURITY_BINDING_PROPERTY_ID,
    allowedValues: ?*opaque{},
    allowedValuesSize: u32,
    out: _out_e__Struct,
    // --------------------------------------------------------
    // Type: _out_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _out_e__Struct = extern struct {
        securityBindingProperty: WS_SECURITY_BINDING_PROPERTY,
    };
};
// --------------------------------------------------------
// Type: WS_SECURITY_BINDING_CONSTRAINT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SECURITY_BINDING_CONSTRAINT = extern struct {
    type: WS_SECURITY_BINDING_CONSTRAINT_TYPE,
    propertyConstraints: ?*WS_SECURITY_BINDING_PROPERTY_CONSTRAINT,
    propertyConstraintCount: u32,
};
// --------------------------------------------------------
// Type: WS_SSL_TRANSPORT_SECURITY_BINDING_CONSTRAINT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SSL_TRANSPORT_SECURITY_BINDING_CONSTRAINT = extern struct {
    bindingConstraint: WS_SECURITY_BINDING_CONSTRAINT,
    out: _out_e__Struct,
    // --------------------------------------------------------
    // Type: _out_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _out_e__Struct = extern struct {
        clientCertCredentialRequired: BOOL,
    };
};
// --------------------------------------------------------
// Type: WS_USERNAME_MESSAGE_SECURITY_BINDING_CONSTRAINT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_USERNAME_MESSAGE_SECURITY_BINDING_CONSTRAINT = extern struct {
    bindingConstraint: WS_SECURITY_BINDING_CONSTRAINT,
    bindingUsage: WS_MESSAGE_SECURITY_USAGE,
};
// --------------------------------------------------------
// Type: WS_HTTP_HEADER_AUTH_SECURITY_BINDING_CONSTRAINT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_HTTP_HEADER_AUTH_SECURITY_BINDING_CONSTRAINT = extern struct {
    bindingConstraint: WS_SECURITY_BINDING_CONSTRAINT,
};
// --------------------------------------------------------
// Type: WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_CONSTRAINT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_CONSTRAINT = extern struct {
    bindingConstraint: WS_SECURITY_BINDING_CONSTRAINT,
};
// --------------------------------------------------------
// Type: WS_CERT_MESSAGE_SECURITY_BINDING_CONSTRAINT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_CERT_MESSAGE_SECURITY_BINDING_CONSTRAINT = extern struct {
    bindingConstraint: WS_SECURITY_BINDING_CONSTRAINT,
    bindingUsage: WS_MESSAGE_SECURITY_USAGE,
};
// --------------------------------------------------------
// Type: WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_CONSTRAINT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_CONSTRAINT = extern struct {
    bindingConstraint: WS_SECURITY_BINDING_CONSTRAINT,
    bindingUsage: WS_MESSAGE_SECURITY_USAGE,
};
// --------------------------------------------------------
// Type: WS_REQUEST_SECURITY_TOKEN_PROPERTY_CONSTRAINT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_REQUEST_SECURITY_TOKEN_PROPERTY_CONSTRAINT = extern struct {
    id: WS_REQUEST_SECURITY_TOKEN_PROPERTY_ID,
    allowedValues: ?*opaque{},
    allowedValuesSize: u32,
    out: _out_e__Struct,
    // --------------------------------------------------------
    // Type: _out_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _out_e__Struct = extern struct {
        requestSecurityTokenProperty: WS_REQUEST_SECURITY_TOKEN_PROPERTY,
    };
};
// --------------------------------------------------------
// Type: WS_ISSUED_TOKEN_MESSAGE_SECURITY_BINDING_CONSTRAINT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_ISSUED_TOKEN_MESSAGE_SECURITY_BINDING_CONSTRAINT = extern struct {
    bindingConstraint: WS_SECURITY_BINDING_CONSTRAINT,
    bindingUsage: WS_MESSAGE_SECURITY_USAGE,
    claimConstraints: ?*WS_XML_STRING,
    claimConstraintCount: u32,
    requestSecurityTokenPropertyConstraints: ?*WS_REQUEST_SECURITY_TOKEN_PROPERTY_CONSTRAINT,
    requestSecurityTokenPropertyConstraintCount: u32,
    out: _out_e__Struct,
    // --------------------------------------------------------
    // Type: _out_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _out_e__Struct = extern struct {
        issuerAddress: ?*WS_ENDPOINT_ADDRESS,
        requestSecurityTokenTemplate: ?*WS_XML_BUFFER,
    };
};
// --------------------------------------------------------
// Type: WS_SECURITY_PROPERTY_CONSTRAINT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SECURITY_PROPERTY_CONSTRAINT = extern struct {
    id: WS_SECURITY_PROPERTY_ID,
    allowedValues: ?*opaque{},
    allowedValuesSize: u32,
    out: _out_e__Struct,
    // --------------------------------------------------------
    // Type: _out_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _out_e__Struct = extern struct {
        securityProperty: WS_SECURITY_PROPERTY,
    };
};
// --------------------------------------------------------
// Type: WS_SECURITY_CONSTRAINTS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SECURITY_CONSTRAINTS = extern struct {
    securityPropertyConstraints: ?*WS_SECURITY_PROPERTY_CONSTRAINT,
    securityPropertyConstraintCount: u32,
    securityBindingConstraints: ?*?*WS_SECURITY_BINDING_CONSTRAINT,
    securityBindingConstraintCount: u32,
};
// --------------------------------------------------------
// Type: WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_CONSTRAINT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_CONSTRAINT = extern struct {
    bindingConstraint: WS_SECURITY_BINDING_CONSTRAINT,
    bindingUsage: WS_MESSAGE_SECURITY_USAGE,
    bootstrapSecurityConstraint: ?*WS_SECURITY_CONSTRAINTS,
};
// --------------------------------------------------------
// Type: WS_CHANNEL_PROPERTY_CONSTRAINT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_CHANNEL_PROPERTY_CONSTRAINT = extern struct {
    id: WS_CHANNEL_PROPERTY_ID,
    allowedValues: ?*opaque{},
    allowedValuesSize: u32,
    out: _out_e__Struct,
    // --------------------------------------------------------
    // Type: _out_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _out_e__Struct = extern struct {
        channelProperty: WS_CHANNEL_PROPERTY,
    };
};
// --------------------------------------------------------
// Type: WS_POLICY_EXTENSION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_POLICY_EXTENSION = extern struct {
    type: WS_POLICY_EXTENSION_TYPE,
};
// --------------------------------------------------------
// Type: WS_ENDPOINT_POLICY_EXTENSION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_ENDPOINT_POLICY_EXTENSION = extern struct {
    policyExtension: WS_POLICY_EXTENSION,
    assertionName: ?*WS_XML_STRING,
    assertionNs: ?*WS_XML_STRING,
    out: _out_e__Struct,
    // --------------------------------------------------------
    // Type: _out_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _out_e__Struct = extern struct {
        assertionValue: ?*WS_XML_BUFFER,
    };
};
// --------------------------------------------------------
// Type: WS_POLICY_CONSTRAINTS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_POLICY_CONSTRAINTS = extern struct {
    channelBinding: WS_CHANNEL_BINDING,
    channelPropertyConstraints: ?*WS_CHANNEL_PROPERTY_CONSTRAINT,
    channelPropertyConstraintCount: u32,
    securityConstraints: ?*WS_SECURITY_CONSTRAINTS,
    policyExtensions: ?*?*WS_POLICY_EXTENSION,
    policyExtensionCount: u32,
};
// --------------------------------------------------------
// Type: WS_HTTP_POLICY_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_HTTP_POLICY_DESCRIPTION = extern struct {
    channelProperties: WS_CHANNEL_PROPERTIES,
};
// --------------------------------------------------------
// Type: WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION = extern struct {
    securityBindingProperties: WS_SECURITY_BINDING_PROPERTIES,
};
// --------------------------------------------------------
// Type: WS_HTTP_SSL_POLICY_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_HTTP_SSL_POLICY_DESCRIPTION = extern struct {
    channelProperties: WS_CHANNEL_PROPERTIES,
    securityProperties: WS_SECURITY_PROPERTIES,
    sslTransportSecurityBinding: WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION,
};
// --------------------------------------------------------
// Type: WS_HTTP_HEADER_AUTH_SECURITY_BINDING_POLICY_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_HTTP_HEADER_AUTH_SECURITY_BINDING_POLICY_DESCRIPTION = extern struct {
    securityBindingProperties: WS_SECURITY_BINDING_PROPERTIES,
};
// --------------------------------------------------------
// Type: WS_HTTP_HEADER_AUTH_POLICY_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_HTTP_HEADER_AUTH_POLICY_DESCRIPTION = extern struct {
    channelProperties: WS_CHANNEL_PROPERTIES,
    securityProperties: WS_SECURITY_PROPERTIES,
    httpHeaderAuthSecurityBinding: WS_HTTP_HEADER_AUTH_SECURITY_BINDING_POLICY_DESCRIPTION,
};
// --------------------------------------------------------
// Type: WS_HTTP_SSL_HEADER_AUTH_POLICY_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_HTTP_SSL_HEADER_AUTH_POLICY_DESCRIPTION = extern struct {
    channelProperties: WS_CHANNEL_PROPERTIES,
    securityProperties: WS_SECURITY_PROPERTIES,
    sslTransportSecurityBinding: WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION,
    httpHeaderAuthSecurityBinding: WS_HTTP_HEADER_AUTH_SECURITY_BINDING_POLICY_DESCRIPTION,
};
// --------------------------------------------------------
// Type: WS_USERNAME_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_USERNAME_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION = extern struct {
    securityBindingProperties: WS_SECURITY_BINDING_PROPERTIES,
    bindingUsage: WS_MESSAGE_SECURITY_USAGE,
};
// --------------------------------------------------------
// Type: WS_HTTP_SSL_USERNAME_POLICY_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_HTTP_SSL_USERNAME_POLICY_DESCRIPTION = extern struct {
    channelProperties: WS_CHANNEL_PROPERTIES,
    securityProperties: WS_SECURITY_PROPERTIES,
    sslTransportSecurityBinding: WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION,
    usernameMessageSecurityBinding: WS_USERNAME_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION,
};
// --------------------------------------------------------
// Type: WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION = extern struct {
    securityBindingProperties: WS_SECURITY_BINDING_PROPERTIES,
    bindingUsage: WS_MESSAGE_SECURITY_USAGE,
};
// --------------------------------------------------------
// Type: WS_HTTP_SSL_KERBEROS_APREQ_POLICY_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_HTTP_SSL_KERBEROS_APREQ_POLICY_DESCRIPTION = extern struct {
    channelProperties: WS_CHANNEL_PROPERTIES,
    securityProperties: WS_SECURITY_PROPERTIES,
    sslTransportSecurityBinding: WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION,
    kerberosApreqMessageSecurityBinding: WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION,
};
// --------------------------------------------------------
// Type: WS_TCP_POLICY_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_TCP_POLICY_DESCRIPTION = extern struct {
    channelProperties: WS_CHANNEL_PROPERTIES,
};
// --------------------------------------------------------
// Type: WS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION = extern struct {
    securityBindingProperties: WS_SECURITY_BINDING_PROPERTIES,
};
// --------------------------------------------------------
// Type: WS_TCP_SSPI_POLICY_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_TCP_SSPI_POLICY_DESCRIPTION = extern struct {
    channelProperties: WS_CHANNEL_PROPERTIES,
    securityProperties: WS_SECURITY_PROPERTIES,
    sspiTransportSecurityBinding: WS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION,
};
// --------------------------------------------------------
// Type: WS_TCP_SSPI_USERNAME_POLICY_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_TCP_SSPI_USERNAME_POLICY_DESCRIPTION = extern struct {
    channelProperties: WS_CHANNEL_PROPERTIES,
    securityProperties: WS_SECURITY_PROPERTIES,
    sspiTransportSecurityBinding: WS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION,
    usernameMessageSecurityBinding: WS_USERNAME_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION,
};
// --------------------------------------------------------
// Type: WS_TCP_SSPI_KERBEROS_APREQ_POLICY_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_TCP_SSPI_KERBEROS_APREQ_POLICY_DESCRIPTION = extern struct {
    channelProperties: WS_CHANNEL_PROPERTIES,
    securityProperties: WS_SECURITY_PROPERTIES,
    sspiTransportSecurityBinding: WS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION,
    kerberosApreqMessageSecurityBinding: WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION,
};
// --------------------------------------------------------
// Type: WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION = extern struct {
    securityBindingProperties: WS_SECURITY_BINDING_PROPERTIES,
    bindingUsage: WS_MESSAGE_SECURITY_USAGE,
};
// --------------------------------------------------------
// Type: WS_SECURITY_CONTEXT_SECURITY_BINDING_POLICY_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SECURITY_CONTEXT_SECURITY_BINDING_POLICY_DESCRIPTION = extern struct {
    securityContextMessageSecurityBinding: WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION,
    securityProperties: WS_SECURITY_PROPERTIES,
};
// --------------------------------------------------------
// Type: WS_TCP_SSPI_KERBEROS_APREQ_SECURITY_CONTEXT_POLICY_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_TCP_SSPI_KERBEROS_APREQ_SECURITY_CONTEXT_POLICY_DESCRIPTION = extern struct {
    channelProperties: WS_CHANNEL_PROPERTIES,
    securityProperties: WS_SECURITY_PROPERTIES,
    sspiTransportSecurityBinding: WS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION,
    kerberosApreqMessageSecurityBinding: WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION,
    securityContextSecurityBinding: WS_SECURITY_CONTEXT_SECURITY_BINDING_POLICY_DESCRIPTION,
};
// --------------------------------------------------------
// Type: WS_TCP_SSPI_USERNAME_SECURITY_CONTEXT_POLICY_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_TCP_SSPI_USERNAME_SECURITY_CONTEXT_POLICY_DESCRIPTION = extern struct {
    channelProperties: WS_CHANNEL_PROPERTIES,
    securityProperties: WS_SECURITY_PROPERTIES,
    sspiTransportSecurityBinding: WS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION,
    usernameMessageSecurityBinding: WS_USERNAME_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION,
    securityContextSecurityBinding: WS_SECURITY_CONTEXT_SECURITY_BINDING_POLICY_DESCRIPTION,
};
// --------------------------------------------------------
// Type: WS_HTTP_SSL_USERNAME_SECURITY_CONTEXT_POLICY_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_HTTP_SSL_USERNAME_SECURITY_CONTEXT_POLICY_DESCRIPTION = extern struct {
    channelProperties: WS_CHANNEL_PROPERTIES,
    securityProperties: WS_SECURITY_PROPERTIES,
    sslTransportSecurityBinding: WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION,
    usernameMessageSecurityBinding: WS_USERNAME_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION,
    securityContextSecurityBinding: WS_SECURITY_CONTEXT_SECURITY_BINDING_POLICY_DESCRIPTION,
};
// --------------------------------------------------------
// Type: WS_HTTP_SSL_KERBEROS_APREQ_SECURITY_CONTEXT_POLICY_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_HTTP_SSL_KERBEROS_APREQ_SECURITY_CONTEXT_POLICY_DESCRIPTION = extern struct {
    channelProperties: WS_CHANNEL_PROPERTIES,
    securityProperties: WS_SECURITY_PROPERTIES,
    sslTransportSecurityBinding: WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION,
    kerberosApreqMessageSecurityBinding: WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION,
    securityContextSecurityBinding: WS_SECURITY_CONTEXT_SECURITY_BINDING_POLICY_DESCRIPTION,
};
// --------------------------------------------------------
// Type: WS_HTTP_BINDING_TEMPLATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_HTTP_BINDING_TEMPLATE = extern struct {
    channelProperties: WS_CHANNEL_PROPERTIES,
};
// --------------------------------------------------------
// Type: WS_TCP_BINDING_TEMPLATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_TCP_BINDING_TEMPLATE = extern struct {
    channelProperties: WS_CHANNEL_PROPERTIES,
};
// --------------------------------------------------------
// Type: WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE = extern struct {
    securityBindingProperties: WS_SECURITY_BINDING_PROPERTIES,
    localCertCredential: ?*WS_CERT_CREDENTIAL,
};
// --------------------------------------------------------
// Type: WS_HTTP_SSL_BINDING_TEMPLATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_HTTP_SSL_BINDING_TEMPLATE = extern struct {
    channelProperties: WS_CHANNEL_PROPERTIES,
    securityProperties: WS_SECURITY_PROPERTIES,
    sslTransportSecurityBinding: WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE,
};
// --------------------------------------------------------
// Type: WS_HTTP_HEADER_AUTH_SECURITY_BINDING_TEMPLATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_HTTP_HEADER_AUTH_SECURITY_BINDING_TEMPLATE = extern struct {
    securityBindingProperties: WS_SECURITY_BINDING_PROPERTIES,
    clientCredential: ?*WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL,
};
// --------------------------------------------------------
// Type: WS_HTTP_HEADER_AUTH_BINDING_TEMPLATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_HTTP_HEADER_AUTH_BINDING_TEMPLATE = extern struct {
    channelProperties: WS_CHANNEL_PROPERTIES,
    securityProperties: WS_SECURITY_PROPERTIES,
    httpHeaderAuthSecurityBinding: WS_HTTP_HEADER_AUTH_SECURITY_BINDING_TEMPLATE,
};
// --------------------------------------------------------
// Type: WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE = extern struct {
    securityBindingProperties: WS_SECURITY_BINDING_PROPERTIES,
    clientCredential: ?*WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL,
};
// --------------------------------------------------------
// Type: WS_TCP_SSPI_BINDING_TEMPLATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_TCP_SSPI_BINDING_TEMPLATE = extern struct {
    channelProperties: WS_CHANNEL_PROPERTIES,
    securityProperties: WS_SECURITY_PROPERTIES,
    sspiTransportSecurityBinding: WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE,
};
// --------------------------------------------------------
// Type: WS_HTTP_SSL_HEADER_AUTH_BINDING_TEMPLATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_HTTP_SSL_HEADER_AUTH_BINDING_TEMPLATE = extern struct {
    channelProperties: WS_CHANNEL_PROPERTIES,
    securityProperties: WS_SECURITY_PROPERTIES,
    sslTransportSecurityBinding: WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE,
    httpHeaderAuthSecurityBinding: WS_HTTP_HEADER_AUTH_SECURITY_BINDING_TEMPLATE,
};
// --------------------------------------------------------
// Type: WS_USERNAME_MESSAGE_SECURITY_BINDING_TEMPLATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_USERNAME_MESSAGE_SECURITY_BINDING_TEMPLATE = extern struct {
    securityBindingProperties: WS_SECURITY_BINDING_PROPERTIES,
    clientCredential: ?*WS_USERNAME_CREDENTIAL,
    passwordValidator: WS_VALIDATE_PASSWORD_CALLBACK,
    passwordValidatorCallbackState: ?*opaque{},
};
// --------------------------------------------------------
// Type: WS_HTTP_SSL_USERNAME_BINDING_TEMPLATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_HTTP_SSL_USERNAME_BINDING_TEMPLATE = extern struct {
    channelProperties: WS_CHANNEL_PROPERTIES,
    securityProperties: WS_SECURITY_PROPERTIES,
    sslTransportSecurityBinding: WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE,
    usernameMessageSecurityBinding: WS_USERNAME_MESSAGE_SECURITY_BINDING_TEMPLATE,
};
// --------------------------------------------------------
// Type: WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TEMPLATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TEMPLATE = extern struct {
    securityBindingProperties: WS_SECURITY_BINDING_PROPERTIES,
    clientCredential: ?*WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL,
};
// --------------------------------------------------------
// Type: WS_HTTP_SSL_KERBEROS_APREQ_BINDING_TEMPLATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_HTTP_SSL_KERBEROS_APREQ_BINDING_TEMPLATE = extern struct {
    channelProperties: WS_CHANNEL_PROPERTIES,
    securityProperties: WS_SECURITY_PROPERTIES,
    sslTransportSecurityBinding: WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE,
    kerberosApreqMessageSecurityBinding: WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TEMPLATE,
};
// --------------------------------------------------------
// Type: WS_TCP_SSPI_USERNAME_BINDING_TEMPLATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_TCP_SSPI_USERNAME_BINDING_TEMPLATE = extern struct {
    channelProperties: WS_CHANNEL_PROPERTIES,
    securityProperties: WS_SECURITY_PROPERTIES,
    sspiTransportSecurityBinding: WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE,
    usernameMessageSecurityBinding: WS_USERNAME_MESSAGE_SECURITY_BINDING_TEMPLATE,
};
// --------------------------------------------------------
// Type: WS_TCP_SSPI_KERBEROS_APREQ_BINDING_TEMPLATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_TCP_SSPI_KERBEROS_APREQ_BINDING_TEMPLATE = extern struct {
    channelProperties: WS_CHANNEL_PROPERTIES,
    securityProperties: WS_SECURITY_PROPERTIES,
    sspiTransportSecurityBinding: WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE,
    kerberosApreqMessageSecurityBinding: WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TEMPLATE,
};
// --------------------------------------------------------
// Type: WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_TEMPLATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_TEMPLATE = extern struct {
    securityBindingProperties: WS_SECURITY_BINDING_PROPERTIES,
};
// --------------------------------------------------------
// Type: WS_SECURITY_CONTEXT_SECURITY_BINDING_TEMPLATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_SECURITY_CONTEXT_SECURITY_BINDING_TEMPLATE = extern struct {
    securityContextMessageSecurityBinding: WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_TEMPLATE,
    securityProperties: WS_SECURITY_PROPERTIES,
};
// --------------------------------------------------------
// Type: WS_HTTP_SSL_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_HTTP_SSL_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE = extern struct {
    channelProperties: WS_CHANNEL_PROPERTIES,
    securityProperties: WS_SECURITY_PROPERTIES,
    sslTransportSecurityBinding: WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE,
    usernameMessageSecurityBinding: WS_USERNAME_MESSAGE_SECURITY_BINDING_TEMPLATE,
    securityContextSecurityBinding: WS_SECURITY_CONTEXT_SECURITY_BINDING_TEMPLATE,
};
// --------------------------------------------------------
// Type: WS_HTTP_SSL_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_HTTP_SSL_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE = extern struct {
    channelProperties: WS_CHANNEL_PROPERTIES,
    securityProperties: WS_SECURITY_PROPERTIES,
    sslTransportSecurityBinding: WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE,
    kerberosApreqMessageSecurityBinding: WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TEMPLATE,
    securityContextSecurityBinding: WS_SECURITY_CONTEXT_SECURITY_BINDING_TEMPLATE,
};
// --------------------------------------------------------
// Type: WS_TCP_SSPI_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_TCP_SSPI_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE = extern struct {
    channelProperties: WS_CHANNEL_PROPERTIES,
    securityProperties: WS_SECURITY_PROPERTIES,
    sspiTransportSecurityBinding: WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE,
    usernameMessageSecurityBinding: WS_USERNAME_MESSAGE_SECURITY_BINDING_TEMPLATE,
    securityContextSecurityBinding: WS_SECURITY_CONTEXT_SECURITY_BINDING_TEMPLATE,
};
// --------------------------------------------------------
// Type: WS_TCP_SSPI_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WS_TCP_SSPI_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE = extern struct {
    channelProperties: WS_CHANNEL_PROPERTIES,
    securityProperties: WS_SECURITY_PROPERTIES,
    sspiTransportSecurityBinding: WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE,
    kerberosApreqMessageSecurityBinding: WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TEMPLATE,
    securityContextSecurityBinding: WS_SECURITY_CONTEXT_SECURITY_BINDING_TEMPLATE,
};
// --------------------------------------------------------
// Type: IContentPrefetcherTaskTrigger
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IContentPrefetcherTaskTrigger = *opaque{
    // TODO: Method 'TriggerContentPrefetcherTask'
    // TODO: Method 'IsRegisteredForContentPrefetch'
};
// --------------------------------------------------------
// Type: WEBAUTHN_RP_ENTITY_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WEBAUTHN_RP_ENTITY_INFORMATION = extern struct {
    dwVersion: u32,
    pwszId: ?*u16,
    pwszName: ?*u16,
    pwszIcon: ?*u16,
};
// --------------------------------------------------------
// Type: WEBAUTHN_USER_ENTITY_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WEBAUTHN_USER_ENTITY_INFORMATION = extern struct {
    dwVersion: u32,
    cbId: u32,
    pbId: ?*u8,
    pwszName: ?*u16,
    pwszIcon: ?*u16,
    pwszDisplayName: ?*u16,
};
// --------------------------------------------------------
// Type: WEBAUTHN_CLIENT_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WEBAUTHN_CLIENT_DATA = extern struct {
    dwVersion: u32,
    cbClientDataJSON: u32,
    pbClientDataJSON: ?*u8,
    pwszHashAlgId: ?*u16,
};
// --------------------------------------------------------
// Type: WEBAUTHN_COSE_CREDENTIAL_PARAMETER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WEBAUTHN_COSE_CREDENTIAL_PARAMETER = extern struct {
    dwVersion: u32,
    pwszCredentialType: ?*u16,
    lAlg: i32,
};
// --------------------------------------------------------
// Type: WEBAUTHN_COSE_CREDENTIAL_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WEBAUTHN_COSE_CREDENTIAL_PARAMETERS = extern struct {
    cCredentialParameters: u32,
    pCredentialParameters: ?*WEBAUTHN_COSE_CREDENTIAL_PARAMETER,
};
// --------------------------------------------------------
// Type: WEBAUTHN_CREDENTIAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WEBAUTHN_CREDENTIAL = extern struct {
    dwVersion: u32,
    cbId: u32,
    pbId: ?*u8,
    pwszCredentialType: ?*u16,
};
// --------------------------------------------------------
// Type: WEBAUTHN_CREDENTIALS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WEBAUTHN_CREDENTIALS = extern struct {
    cCredentials: u32,
    pCredentials: ?*WEBAUTHN_CREDENTIAL,
};
// --------------------------------------------------------
// Type: WEBAUTHN_CREDENTIAL_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WEBAUTHN_CREDENTIAL_EX = extern struct {
    dwVersion: u32,
    cbId: u32,
    pbId: ?*u8,
    pwszCredentialType: ?*u16,
    dwTransports: u32,
};
// --------------------------------------------------------
// Type: WEBAUTHN_CREDENTIAL_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WEBAUTHN_CREDENTIAL_LIST = extern struct {
    cCredentials: u32,
    ppCredentials: ?*?*WEBAUTHN_CREDENTIAL_EX,
};
// --------------------------------------------------------
// Type: WEBAUTHN_CRED_PROTECT_EXTENSION_IN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WEBAUTHN_CRED_PROTECT_EXTENSION_IN = extern struct {
    dwCredProtect: u32,
    bRequireCredProtect: BOOL,
};
// --------------------------------------------------------
// Type: WEBAUTHN_EXTENSION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WEBAUTHN_EXTENSION = extern struct {
    pwszExtensionIdentifier: ?*u16,
    cbExtension: u32,
    pvExtension: ?*opaque{},
};
// --------------------------------------------------------
// Type: WEBAUTHN_EXTENSIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WEBAUTHN_EXTENSIONS = extern struct {
    cExtensions: u32,
    pExtensions: ?*WEBAUTHN_EXTENSION,
};
// --------------------------------------------------------
// Type: WEBAUTHN_AUTHENTICATOR_MAKE_CREDENTIAL_OPTIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WEBAUTHN_AUTHENTICATOR_MAKE_CREDENTIAL_OPTIONS = extern struct {
    dwVersion: u32,
    dwTimeoutMilliseconds: u32,
    CredentialList: WEBAUTHN_CREDENTIALS,
    Extensions: WEBAUTHN_EXTENSIONS,
    dwAuthenticatorAttachment: u32,
    bRequireResidentKey: BOOL,
    dwUserVerificationRequirement: u32,
    dwAttestationConveyancePreference: u32,
    dwFlags: u32,
    pCancellationId: ?*Guid,
    pExcludeCredentialList: ?*WEBAUTHN_CREDENTIAL_LIST,
};
// --------------------------------------------------------
// Type: WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS = extern struct {
    dwVersion: u32,
    dwTimeoutMilliseconds: u32,
    CredentialList: WEBAUTHN_CREDENTIALS,
    Extensions: WEBAUTHN_EXTENSIONS,
    dwAuthenticatorAttachment: u32,
    dwUserVerificationRequirement: u32,
    dwFlags: u32,
    pwszU2fAppId: ?*u16,
    pbU2fAppId: ?*i32,
    pCancellationId: ?*Guid,
    pAllowCredentialList: ?*WEBAUTHN_CREDENTIAL_LIST,
};
// --------------------------------------------------------
// Type: WEBAUTHN_X5C
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WEBAUTHN_X5C = extern struct {
    cbData: u32,
    pbData: ?*u8,
};
// --------------------------------------------------------
// Type: WEBAUTHN_COMMON_ATTESTATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WEBAUTHN_COMMON_ATTESTATION = extern struct {
    dwVersion: u32,
    pwszAlg: ?*u16,
    lAlg: i32,
    cbSignature: u32,
    pbSignature: ?*u8,
    cX5c: u32,
    pX5c: ?*WEBAUTHN_X5C,
    pwszVer: ?*u16,
    cbCertInfo: u32,
    pbCertInfo: ?*u8,
    cbPubArea: u32,
    pbPubArea: ?*u8,
};
// --------------------------------------------------------
// Type: WEBAUTHN_CREDENTIAL_ATTESTATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WEBAUTHN_CREDENTIAL_ATTESTATION = extern struct {
    dwVersion: u32,
    pwszFormatType: ?*u16,
    cbAuthenticatorData: u32,
    pbAuthenticatorData: ?*u8,
    cbAttestation: u32,
    pbAttestation: ?*u8,
    dwAttestationDecodeType: u32,
    pvAttestationDecode: ?*opaque{},
    cbAttestationObject: u32,
    pbAttestationObject: ?*u8,
    cbCredentialId: u32,
    pbCredentialId: ?*u8,
    Extensions: WEBAUTHN_EXTENSIONS,
    dwUsedTransport: u32,
};
// --------------------------------------------------------
// Type: WEBAUTHN_ASSERTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WEBAUTHN_ASSERTION = extern struct {
    dwVersion: u32,
    cbAuthenticatorData: u32,
    pbAuthenticatorData: ?*u8,
    cbSignature: u32,
    pbSignature: ?*u8,
    Credential: WEBAUTHN_CREDENTIAL,
    cbUserId: u32,
    pbUserId: ?*u8,
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsStartReaderCanonicalization(
    reader: ?*WS_XML_READER,
    writeCallback: WS_WRITE_CALLBACK,
    writeCallbackState: ?*opaque{},
    properties: ?*WS_XML_CANONICALIZATION_PROPERTY,
    propertyCount: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsEndReaderCanonicalization(
    reader: ?*WS_XML_READER,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsStartWriterCanonicalization(
    writer: ?*WS_XML_WRITER,
    writeCallback: WS_WRITE_CALLBACK,
    writeCallbackState: ?*opaque{},
    properties: ?*WS_XML_CANONICALIZATION_PROPERTY,
    propertyCount: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsEndWriterCanonicalization(
    writer: ?*WS_XML_WRITER,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsCreateXmlBuffer(
    heap: ?*WS_HEAP,
    properties: ?*WS_XML_BUFFER_PROPERTY,
    propertyCount: u32,
    buffer: ?*?*WS_XML_BUFFER,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsRemoveNode(
    nodePosition: ?*WS_XML_NODE_POSITION,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsCreateReader(
    properties: ?*WS_XML_READER_PROPERTY,
    propertyCount: u32,
    reader: ?*?*WS_XML_READER,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsSetInput(
    reader: ?*WS_XML_READER,
    encoding: ?*WS_XML_READER_ENCODING,
    input: ?*WS_XML_READER_INPUT,
    properties: ?*WS_XML_READER_PROPERTY,
    propertyCount: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsSetInputToBuffer(
    reader: ?*WS_XML_READER,
    buffer: ?*WS_XML_BUFFER,
    properties: ?*WS_XML_READER_PROPERTY,
    propertyCount: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsFreeReader(
    reader: ?*WS_XML_READER,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsGetReaderProperty(
    reader: ?*WS_XML_READER,
    id: WS_XML_READER_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsGetReaderNode(
    xmlReader: ?*WS_XML_READER,
    node: ?*?*WS_XML_NODE,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsFillReader(
    reader: ?*WS_XML_READER,
    minSize: u32,
    asyncContext: ?*WS_ASYNC_CONTEXT,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsReadStartElement(
    reader: ?*WS_XML_READER,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsReadToStartElement(
    reader: ?*WS_XML_READER,
    localName: ?*WS_XML_STRING,
    ns: ?*WS_XML_STRING,
    found: ?*i32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsReadStartAttribute(
    reader: ?*WS_XML_READER,
    attributeIndex: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsReadEndAttribute(
    reader: ?*WS_XML_READER,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsReadNode(
    reader: ?*WS_XML_READER,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsSkipNode(
    reader: ?*WS_XML_READER,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsReadEndElement(
    reader: ?*WS_XML_READER,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsFindAttribute(
    reader: ?*WS_XML_READER,
    localName: ?*WS_XML_STRING,
    ns: ?*WS_XML_STRING,
    required: BOOL,
    attributeIndex: ?*u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsReadValue(
    reader: ?*WS_XML_READER,
    valueType: WS_VALUE_TYPE,
    value: ?*opaque{},
    valueSize: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsReadChars(
    reader: ?*WS_XML_READER,
    chars: ?*u16,
    maxCharCount: u32,
    actualCharCount: ?*u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsReadCharsUtf8(
    reader: ?*WS_XML_READER,
    bytes: ?*u8,
    maxByteCount: u32,
    actualByteCount: ?*u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsReadBytes(
    reader: ?*WS_XML_READER,
    bytes: ?*opaque{},
    maxByteCount: u32,
    actualByteCount: ?*u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsReadArray(
    reader: ?*WS_XML_READER,
    localName: ?*WS_XML_STRING,
    ns: ?*WS_XML_STRING,
    valueType: WS_VALUE_TYPE,
    array: ?*opaque{},
    arraySize: u32,
    itemOffset: u32,
    itemCount: u32,
    actualItemCount: ?*u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsGetReaderPosition(
    reader: ?*WS_XML_READER,
    nodePosition: ?*WS_XML_NODE_POSITION,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsSetReaderPosition(
    reader: ?*WS_XML_READER,
    nodePosition: ?*WS_XML_NODE_POSITION,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsMoveReader(
    reader: ?*WS_XML_READER,
    moveTo: WS_MOVE_TO,
    found: ?*i32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsCreateWriter(
    properties: ?*WS_XML_WRITER_PROPERTY,
    propertyCount: u32,
    writer: ?*?*WS_XML_WRITER,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsFreeWriter(
    writer: ?*WS_XML_WRITER,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsSetOutput(
    writer: ?*WS_XML_WRITER,
    encoding: ?*WS_XML_WRITER_ENCODING,
    output: ?*WS_XML_WRITER_OUTPUT,
    properties: ?*WS_XML_WRITER_PROPERTY,
    propertyCount: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsSetOutputToBuffer(
    writer: ?*WS_XML_WRITER,
    buffer: ?*WS_XML_BUFFER,
    properties: ?*WS_XML_WRITER_PROPERTY,
    propertyCount: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsGetWriterProperty(
    writer: ?*WS_XML_WRITER,
    id: WS_XML_WRITER_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsFlushWriter(
    writer: ?*WS_XML_WRITER,
    minSize: u32,
    asyncContext: ?*WS_ASYNC_CONTEXT,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsWriteStartElement(
    writer: ?*WS_XML_WRITER,
    prefix: ?*WS_XML_STRING,
    localName: ?*WS_XML_STRING,
    ns: ?*WS_XML_STRING,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsWriteEndStartElement(
    writer: ?*WS_XML_WRITER,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsWriteXmlnsAttribute(
    writer: ?*WS_XML_WRITER,
    prefix: ?*WS_XML_STRING,
    ns: ?*WS_XML_STRING,
    singleQuote: BOOL,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsWriteStartAttribute(
    writer: ?*WS_XML_WRITER,
    prefix: ?*WS_XML_STRING,
    localName: ?*WS_XML_STRING,
    ns: ?*WS_XML_STRING,
    singleQuote: BOOL,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsWriteEndAttribute(
    writer: ?*WS_XML_WRITER,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsWriteValue(
    writer: ?*WS_XML_WRITER,
    valueType: WS_VALUE_TYPE,
    value: ?*opaque{},
    valueSize: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsWriteXmlBuffer(
    writer: ?*WS_XML_WRITER,
    xmlBuffer: ?*WS_XML_BUFFER,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsReadXmlBuffer(
    reader: ?*WS_XML_READER,
    heap: ?*WS_HEAP,
    xmlBuffer: ?*?*WS_XML_BUFFER,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsWriteXmlBufferToBytes(
    writer: ?*WS_XML_WRITER,
    xmlBuffer: ?*WS_XML_BUFFER,
    encoding: ?*WS_XML_WRITER_ENCODING,
    properties: ?*WS_XML_WRITER_PROPERTY,
    propertyCount: u32,
    heap: ?*WS_HEAP,
    bytes: ?*?*opaque{},
    byteCount: ?*u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsReadXmlBufferFromBytes(
    reader: ?*WS_XML_READER,
    encoding: ?*WS_XML_READER_ENCODING,
    properties: ?*WS_XML_READER_PROPERTY,
    propertyCount: u32,
    bytes: ?*opaque{},
    byteCount: u32,
    heap: ?*WS_HEAP,
    xmlBuffer: ?*?*WS_XML_BUFFER,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsWriteArray(
    writer: ?*WS_XML_WRITER,
    localName: ?*WS_XML_STRING,
    ns: ?*WS_XML_STRING,
    valueType: WS_VALUE_TYPE,
    array: ?*opaque{},
    arraySize: u32,
    itemOffset: u32,
    itemCount: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsWriteQualifiedName(
    writer: ?*WS_XML_WRITER,
    prefix: ?*WS_XML_STRING,
    localName: ?*WS_XML_STRING,
    ns: ?*WS_XML_STRING,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsWriteChars(
    writer: ?*WS_XML_WRITER,
    chars: ?*u16,
    charCount: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsWriteCharsUtf8(
    writer: ?*WS_XML_WRITER,
    bytes: ?*u8,
    byteCount: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsWriteBytes(
    writer: ?*WS_XML_WRITER,
    bytes: ?*opaque{},
    byteCount: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsPushBytes(
    writer: ?*WS_XML_WRITER,
    callback: WS_PUSH_BYTES_CALLBACK,
    callbackState: ?*opaque{},
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsPullBytes(
    writer: ?*WS_XML_WRITER,
    callback: WS_PULL_BYTES_CALLBACK,
    callbackState: ?*opaque{},
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsWriteEndElement(
    writer: ?*WS_XML_WRITER,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsWriteText(
    writer: ?*WS_XML_WRITER,
    text: ?*WS_XML_TEXT,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsWriteStartCData(
    writer: ?*WS_XML_WRITER,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsWriteEndCData(
    writer: ?*WS_XML_WRITER,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsWriteNode(
    writer: ?*WS_XML_WRITER,
    node: ?*WS_XML_NODE,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsGetPrefixFromNamespace(
    writer: ?*WS_XML_WRITER,
    ns: ?*WS_XML_STRING,
    required: BOOL,
    prefix: ?*?*WS_XML_STRING,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsGetWriterPosition(
    writer: ?*WS_XML_WRITER,
    nodePosition: ?*WS_XML_NODE_POSITION,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsSetWriterPosition(
    writer: ?*WS_XML_WRITER,
    nodePosition: ?*WS_XML_NODE_POSITION,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsMoveWriter(
    writer: ?*WS_XML_WRITER,
    moveTo: WS_MOVE_TO,
    found: ?*i32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsTrimXmlWhitespace(
    chars: ?*u16,
    charCount: u32,
    trimmedChars: ?*?*u16,
    trimmedCount: ?*u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsVerifyXmlNCName(
    ncNameChars: ?*u16,
    ncNameCharCount: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsXmlStringEquals(
    string1: ?*WS_XML_STRING,
    string2: ?*WS_XML_STRING,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsGetNamespaceFromPrefix(
    reader: ?*WS_XML_READER,
    prefix: ?*WS_XML_STRING,
    required: BOOL,
    ns: ?*?*WS_XML_STRING,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsReadQualifiedName(
    reader: ?*WS_XML_READER,
    heap: ?*WS_HEAP,
    prefix: ?*WS_XML_STRING,
    localName: ?*WS_XML_STRING,
    ns: ?*WS_XML_STRING,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsGetXmlAttribute(
    reader: ?*WS_XML_READER,
    localName: ?*WS_XML_STRING,
    heap: ?*WS_HEAP,
    valueChars: ?*?*u16,
    valueCharCount: ?*u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsCopyNode(
    writer: ?*WS_XML_WRITER,
    reader: ?*WS_XML_READER,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsAsyncExecute(
    asyncState: ?*WS_ASYNC_STATE,
    operation: WS_ASYNC_FUNCTION,
    callbackModel: WS_CALLBACK_MODEL,
    callbackState: ?*opaque{},
    asyncContext: ?*WS_ASYNC_CONTEXT,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsCreateChannel(
    channelType: WS_CHANNEL_TYPE,
    channelBinding: WS_CHANNEL_BINDING,
    properties: ?*WS_CHANNEL_PROPERTY,
    propertyCount: u32,
    securityDescription: ?*WS_SECURITY_DESCRIPTION,
    channel: ?*?*WS_CHANNEL,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsOpenChannel(
    channel: ?*WS_CHANNEL,
    endpointAddress: ?*WS_ENDPOINT_ADDRESS,
    asyncContext: ?*WS_ASYNC_CONTEXT,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsSendMessage(
    channel: ?*WS_CHANNEL,
    message: ?*WS_MESSAGE,
    messageDescription: ?*WS_MESSAGE_DESCRIPTION,
    writeOption: WS_WRITE_OPTION,
    bodyValue: ?*opaque{},
    bodyValueSize: u32,
    asyncContext: ?*WS_ASYNC_CONTEXT,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsReceiveMessage(
    channel: ?*WS_CHANNEL,
    message: ?*WS_MESSAGE,
    messageDescriptions: ?*?*WS_MESSAGE_DESCRIPTION,
    messageDescriptionCount: u32,
    receiveOption: WS_RECEIVE_OPTION,
    readBodyOption: WS_READ_OPTION,
    heap: ?*WS_HEAP,
    value: ?*opaque{},
    valueSize: u32,
    index: ?*u32,
    asyncContext: ?*WS_ASYNC_CONTEXT,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsRequestReply(
    channel: ?*WS_CHANNEL,
    requestMessage: ?*WS_MESSAGE,
    requestMessageDescription: ?*WS_MESSAGE_DESCRIPTION,
    writeOption: WS_WRITE_OPTION,
    requestBodyValue: ?*opaque{},
    requestBodyValueSize: u32,
    replyMessage: ?*WS_MESSAGE,
    replyMessageDescription: ?*WS_MESSAGE_DESCRIPTION,
    readOption: WS_READ_OPTION,
    heap: ?*WS_HEAP,
    value: ?*opaque{},
    valueSize: u32,
    asyncContext: ?*WS_ASYNC_CONTEXT,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsSendReplyMessage(
    channel: ?*WS_CHANNEL,
    replyMessage: ?*WS_MESSAGE,
    replyMessageDescription: ?*WS_MESSAGE_DESCRIPTION,
    writeOption: WS_WRITE_OPTION,
    replyBodyValue: ?*opaque{},
    replyBodyValueSize: u32,
    requestMessage: ?*WS_MESSAGE,
    asyncContext: ?*WS_ASYNC_CONTEXT,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsSendFaultMessageForError(
    channel: ?*WS_CHANNEL,
    replyMessage: ?*WS_MESSAGE,
    faultError: ?*WS_ERROR,
    faultErrorCode: HRESULT,
    faultDisclosure: WS_FAULT_DISCLOSURE,
    requestMessage: ?*WS_MESSAGE,
    asyncContext: ?*WS_ASYNC_CONTEXT,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsGetChannelProperty(
    channel: ?*WS_CHANNEL,
    id: WS_CHANNEL_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsSetChannelProperty(
    channel: ?*WS_CHANNEL,
    id: WS_CHANNEL_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsWriteMessageStart(
    channel: ?*WS_CHANNEL,
    message: ?*WS_MESSAGE,
    asyncContext: ?*WS_ASYNC_CONTEXT,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsWriteMessageEnd(
    channel: ?*WS_CHANNEL,
    message: ?*WS_MESSAGE,
    asyncContext: ?*WS_ASYNC_CONTEXT,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsReadMessageStart(
    channel: ?*WS_CHANNEL,
    message: ?*WS_MESSAGE,
    asyncContext: ?*WS_ASYNC_CONTEXT,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsReadMessageEnd(
    channel: ?*WS_CHANNEL,
    message: ?*WS_MESSAGE,
    asyncContext: ?*WS_ASYNC_CONTEXT,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsCloseChannel(
    channel: ?*WS_CHANNEL,
    asyncContext: ?*WS_ASYNC_CONTEXT,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsAbortChannel(
    channel: ?*WS_CHANNEL,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsFreeChannel(
    channel: ?*WS_CHANNEL,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsResetChannel(
    channel: ?*WS_CHANNEL,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsAbandonMessage(
    channel: ?*WS_CHANNEL,
    message: ?*WS_MESSAGE,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsShutdownSessionChannel(
    channel: ?*WS_CHANNEL,
    asyncContext: ?*WS_ASYNC_CONTEXT,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsGetOperationContextProperty(
    context: ?*WS_OPERATION_CONTEXT,
    id: WS_OPERATION_CONTEXT_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsGetDictionary(
    encoding: WS_ENCODING,
    dictionary: ?*?*WS_XML_DICTIONARY,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsReadEndpointAddressExtension(
    reader: ?*WS_XML_READER,
    endpointAddress: ?*WS_ENDPOINT_ADDRESS,
    extensionType: WS_ENDPOINT_ADDRESS_EXTENSION_TYPE,
    readOption: WS_READ_OPTION,
    heap: ?*WS_HEAP,
    value: ?*opaque{},
    valueSize: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsCreateError(
    properties: ?*WS_ERROR_PROPERTY,
    propertyCount: u32,
    @"error": ?*?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsAddErrorString(
    @"error": ?*WS_ERROR,
    string: ?*WS_STRING,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsGetErrorString(
    @"error": ?*WS_ERROR,
    index: u32,
    string: ?*WS_STRING,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsCopyError(
    source: ?*WS_ERROR,
    destination: ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsGetErrorProperty(
    @"error": ?*WS_ERROR,
    id: WS_ERROR_PROPERTY_ID,
    buffer: ?*opaque{},
    bufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsSetErrorProperty(
    @"error": ?*WS_ERROR,
    id: WS_ERROR_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsResetError(
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsFreeError(
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsGetFaultErrorProperty(
    @"error": ?*WS_ERROR,
    id: WS_FAULT_ERROR_PROPERTY_ID,
    buffer: ?*opaque{},
    bufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsSetFaultErrorProperty(
    @"error": ?*WS_ERROR,
    id: WS_FAULT_ERROR_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsCreateFaultFromError(
    @"error": ?*WS_ERROR,
    faultErrorCode: HRESULT,
    faultDisclosure: WS_FAULT_DISCLOSURE,
    heap: ?*WS_HEAP,
    fault: ?*WS_FAULT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsSetFaultErrorDetail(
    @"error": ?*WS_ERROR,
    faultDetailDescription: ?*WS_FAULT_DETAIL_DESCRIPTION,
    writeOption: WS_WRITE_OPTION,
    value: ?*opaque{},
    valueSize: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsGetFaultErrorDetail(
    @"error": ?*WS_ERROR,
    faultDetailDescription: ?*WS_FAULT_DETAIL_DESCRIPTION,
    readOption: WS_READ_OPTION,
    heap: ?*WS_HEAP,
    value: ?*opaque{},
    valueSize: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsCreateHeap(
    maxSize: ?*opaque{},
    trimSize: ?*opaque{},
    properties: ?*WS_HEAP_PROPERTY,
    propertyCount: u32,
    heap: ?*?*WS_HEAP,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsAlloc(
    heap: ?*WS_HEAP,
    size: ?*opaque{},
    ptr: ?*?*opaque{},
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsGetHeapProperty(
    heap: ?*WS_HEAP,
    id: WS_HEAP_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsResetHeap(
    heap: ?*WS_HEAP,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsFreeHeap(
    heap: ?*WS_HEAP,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsCreateListener(
    channelType: WS_CHANNEL_TYPE,
    channelBinding: WS_CHANNEL_BINDING,
    properties: ?*WS_LISTENER_PROPERTY,
    propertyCount: u32,
    securityDescription: ?*WS_SECURITY_DESCRIPTION,
    listener: ?*?*WS_LISTENER,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsOpenListener(
    listener: ?*WS_LISTENER,
    url: ?*WS_STRING,
    asyncContext: ?*WS_ASYNC_CONTEXT,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsAcceptChannel(
    listener: ?*WS_LISTENER,
    channel: ?*WS_CHANNEL,
    asyncContext: ?*WS_ASYNC_CONTEXT,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsCloseListener(
    listener: ?*WS_LISTENER,
    asyncContext: ?*WS_ASYNC_CONTEXT,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsAbortListener(
    listener: ?*WS_LISTENER,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsResetListener(
    listener: ?*WS_LISTENER,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsFreeListener(
    listener: ?*WS_LISTENER,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsGetListenerProperty(
    listener: ?*WS_LISTENER,
    id: WS_LISTENER_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsSetListenerProperty(
    listener: ?*WS_LISTENER,
    id: WS_LISTENER_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsCreateChannelForListener(
    listener: ?*WS_LISTENER,
    properties: ?*WS_CHANNEL_PROPERTY,
    propertyCount: u32,
    channel: ?*?*WS_CHANNEL,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsCreateMessage(
    envelopeVersion: WS_ENVELOPE_VERSION,
    addressingVersion: WS_ADDRESSING_VERSION,
    properties: ?*WS_MESSAGE_PROPERTY,
    propertyCount: u32,
    message: ?*?*WS_MESSAGE,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsCreateMessageForChannel(
    channel: ?*WS_CHANNEL,
    properties: ?*WS_MESSAGE_PROPERTY,
    propertyCount: u32,
    message: ?*?*WS_MESSAGE,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsInitializeMessage(
    message: ?*WS_MESSAGE,
    initialization: WS_MESSAGE_INITIALIZATION,
    sourceMessage: ?*WS_MESSAGE,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsResetMessage(
    message: ?*WS_MESSAGE,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsFreeMessage(
    message: ?*WS_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsGetHeaderAttributes(
    message: ?*WS_MESSAGE,
    reader: ?*WS_XML_READER,
    headerAttributes: ?*u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsGetHeader(
    message: ?*WS_MESSAGE,
    headerType: WS_HEADER_TYPE,
    valueType: WS_TYPE,
    readOption: WS_READ_OPTION,
    heap: ?*WS_HEAP,
    value: ?*opaque{},
    valueSize: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsGetCustomHeader(
    message: ?*WS_MESSAGE,
    customHeaderDescription: ?*WS_ELEMENT_DESCRIPTION,
    repeatingOption: WS_REPEATING_HEADER_OPTION,
    headerIndex: u32,
    readOption: WS_READ_OPTION,
    heap: ?*WS_HEAP,
    value: ?*opaque{},
    valueSize: u32,
    headerAttributes: ?*u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsRemoveHeader(
    message: ?*WS_MESSAGE,
    headerType: WS_HEADER_TYPE,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsSetHeader(
    message: ?*WS_MESSAGE,
    headerType: WS_HEADER_TYPE,
    valueType: WS_TYPE,
    writeOption: WS_WRITE_OPTION,
    value: ?*opaque{},
    valueSize: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsRemoveCustomHeader(
    message: ?*WS_MESSAGE,
    headerName: ?*WS_XML_STRING,
    headerNs: ?*WS_XML_STRING,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsAddCustomHeader(
    message: ?*WS_MESSAGE,
    headerDescription: ?*WS_ELEMENT_DESCRIPTION,
    writeOption: WS_WRITE_OPTION,
    value: ?*opaque{},
    valueSize: u32,
    headerAttributes: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsAddMappedHeader(
    message: ?*WS_MESSAGE,
    headerName: ?*WS_XML_STRING,
    valueType: WS_TYPE,
    writeOption: WS_WRITE_OPTION,
    value: ?*opaque{},
    valueSize: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsRemoveMappedHeader(
    message: ?*WS_MESSAGE,
    headerName: ?*WS_XML_STRING,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsGetMappedHeader(
    message: ?*WS_MESSAGE,
    headerName: ?*WS_XML_STRING,
    repeatingOption: WS_REPEATING_HEADER_OPTION,
    headerIndex: u32,
    valueType: WS_TYPE,
    readOption: WS_READ_OPTION,
    heap: ?*WS_HEAP,
    value: ?*opaque{},
    valueSize: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsWriteBody(
    message: ?*WS_MESSAGE,
    bodyDescription: ?*WS_ELEMENT_DESCRIPTION,
    writeOption: WS_WRITE_OPTION,
    value: ?*opaque{},
    valueSize: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsReadBody(
    message: ?*WS_MESSAGE,
    bodyDescription: ?*WS_ELEMENT_DESCRIPTION,
    readOption: WS_READ_OPTION,
    heap: ?*WS_HEAP,
    value: ?*opaque{},
    valueSize: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsWriteEnvelopeStart(
    message: ?*WS_MESSAGE,
    writer: ?*WS_XML_WRITER,
    doneCallback: WS_MESSAGE_DONE_CALLBACK,
    doneCallbackState: ?*opaque{},
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsWriteEnvelopeEnd(
    message: ?*WS_MESSAGE,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsReadEnvelopeStart(
    message: ?*WS_MESSAGE,
    reader: ?*WS_XML_READER,
    doneCallback: WS_MESSAGE_DONE_CALLBACK,
    doneCallbackState: ?*opaque{},
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsReadEnvelopeEnd(
    message: ?*WS_MESSAGE,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsGetMessageProperty(
    message: ?*WS_MESSAGE,
    id: WS_MESSAGE_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsSetMessageProperty(
    message: ?*WS_MESSAGE,
    id: WS_MESSAGE_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsAddressMessage(
    message: ?*WS_MESSAGE,
    address: ?*WS_ENDPOINT_ADDRESS,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsCheckMustUnderstandHeaders(
    message: ?*WS_MESSAGE,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsMarkHeaderAsUnderstood(
    message: ?*WS_MESSAGE,
    headerPosition: ?*WS_XML_NODE_POSITION,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsFillBody(
    message: ?*WS_MESSAGE,
    minSize: u32,
    asyncContext: ?*WS_ASYNC_CONTEXT,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsFlushBody(
    message: ?*WS_MESSAGE,
    minSize: u32,
    asyncContext: ?*WS_ASYNC_CONTEXT,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsRequestSecurityToken(
    channel: ?*WS_CHANNEL,
    properties: ?*WS_REQUEST_SECURITY_TOKEN_PROPERTY,
    propertyCount: u32,
    token: ?*?*WS_SECURITY_TOKEN,
    asyncContext: ?*WS_ASYNC_CONTEXT,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsGetSecurityTokenProperty(
    securityToken: ?*WS_SECURITY_TOKEN,
    id: WS_SECURITY_TOKEN_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
    heap: ?*WS_HEAP,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsCreateXmlSecurityToken(
    tokenXml: ?*WS_XML_BUFFER,
    tokenKey: ?*WS_SECURITY_KEY_HANDLE,
    properties: ?*WS_XML_SECURITY_TOKEN_PROPERTY,
    propertyCount: u32,
    token: ?*?*WS_SECURITY_TOKEN,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsFreeSecurityToken(
    token: ?*WS_SECURITY_TOKEN,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsRevokeSecurityContext(
    securityContext: ?*WS_SECURITY_CONTEXT,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsGetSecurityContextProperty(
    securityContext: ?*WS_SECURITY_CONTEXT,
    id: WS_SECURITY_CONTEXT_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsReadElement(
    reader: ?*WS_XML_READER,
    elementDescription: ?*WS_ELEMENT_DESCRIPTION,
    readOption: WS_READ_OPTION,
    heap: ?*WS_HEAP,
    value: ?*opaque{},
    valueSize: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsReadAttribute(
    reader: ?*WS_XML_READER,
    attributeDescription: ?*WS_ATTRIBUTE_DESCRIPTION,
    readOption: WS_READ_OPTION,
    heap: ?*WS_HEAP,
    value: ?*opaque{},
    valueSize: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsReadType(
    reader: ?*WS_XML_READER,
    typeMapping: WS_TYPE_MAPPING,
    type: WS_TYPE,
    typeDescription: ?*opaque{},
    readOption: WS_READ_OPTION,
    heap: ?*WS_HEAP,
    value: ?*opaque{},
    valueSize: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsWriteElement(
    writer: ?*WS_XML_WRITER,
    elementDescription: ?*WS_ELEMENT_DESCRIPTION,
    writeOption: WS_WRITE_OPTION,
    value: ?*opaque{},
    valueSize: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsWriteAttribute(
    writer: ?*WS_XML_WRITER,
    attributeDescription: ?*WS_ATTRIBUTE_DESCRIPTION,
    writeOption: WS_WRITE_OPTION,
    value: ?*opaque{},
    valueSize: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsWriteType(
    writer: ?*WS_XML_WRITER,
    typeMapping: WS_TYPE_MAPPING,
    type: WS_TYPE,
    typeDescription: ?*opaque{},
    writeOption: WS_WRITE_OPTION,
    value: ?*opaque{},
    valueSize: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsRegisterOperationForCancel(
    context: ?*WS_OPERATION_CONTEXT,
    cancelCallback: WS_OPERATION_CANCEL_CALLBACK,
    freestateCallback: WS_OPERATION_FREE_STATE_CALLBACK,
    userState: ?*opaque{},
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsGetServiceHostProperty(
    serviceHost: ?*WS_SERVICE_HOST,
    id: WS_SERVICE_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsCreateServiceHost(
    endpoints: ?*?*WS_SERVICE_ENDPOINT,
    endpointCount: u16,
    serviceProperties: ?*WS_SERVICE_PROPERTY,
    servicePropertyCount: u32,
    serviceHost: ?*?*WS_SERVICE_HOST,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsOpenServiceHost(
    serviceHost: ?*WS_SERVICE_HOST,
    asyncContext: ?*WS_ASYNC_CONTEXT,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsCloseServiceHost(
    serviceHost: ?*WS_SERVICE_HOST,
    asyncContext: ?*WS_ASYNC_CONTEXT,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsAbortServiceHost(
    serviceHost: ?*WS_SERVICE_HOST,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsFreeServiceHost(
    serviceHost: ?*WS_SERVICE_HOST,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsResetServiceHost(
    serviceHost: ?*WS_SERVICE_HOST,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsGetServiceProxyProperty(
    serviceProxy: ?*WS_SERVICE_PROXY,
    id: WS_PROXY_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsCreateServiceProxy(
    channelType: WS_CHANNEL_TYPE,
    channelBinding: WS_CHANNEL_BINDING,
    securityDescription: ?*WS_SECURITY_DESCRIPTION,
    properties: ?*WS_PROXY_PROPERTY,
    propertyCount: u32,
    channelProperties: ?*WS_CHANNEL_PROPERTY,
    channelPropertyCount: u32,
    serviceProxy: ?*?*WS_SERVICE_PROXY,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsOpenServiceProxy(
    serviceProxy: ?*WS_SERVICE_PROXY,
    address: ?*WS_ENDPOINT_ADDRESS,
    asyncContext: ?*WS_ASYNC_CONTEXT,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsCloseServiceProxy(
    serviceProxy: ?*WS_SERVICE_PROXY,
    asyncContext: ?*WS_ASYNC_CONTEXT,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsAbortServiceProxy(
    serviceProxy: ?*WS_SERVICE_PROXY,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsFreeServiceProxy(
    serviceProxy: ?*WS_SERVICE_PROXY,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsResetServiceProxy(
    serviceProxy: ?*WS_SERVICE_PROXY,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsAbandonCall(
    serviceProxy: ?*WS_SERVICE_PROXY,
    callId: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsCall(
    serviceProxy: ?*WS_SERVICE_PROXY,
    operation: ?*WS_OPERATION_DESCRIPTION,
    arguments: ?*?*opaque{},
    heap: ?*WS_HEAP,
    callProperties: ?*WS_CALL_PROPERTY,
    callPropertyCount: u32,
    asyncContext: ?*WS_ASYNC_CONTEXT,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsDecodeUrl(
    url: ?*WS_STRING,
    flags: u32,
    heap: ?*WS_HEAP,
    outUrl: ?*?*WS_URL,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsEncodeUrl(
    url: ?*WS_URL,
    flags: u32,
    heap: ?*WS_HEAP,
    outUrl: ?*WS_STRING,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsCombineUrl(
    baseUrl: ?*WS_STRING,
    referenceUrl: ?*WS_STRING,
    flags: u32,
    heap: ?*WS_HEAP,
    resultUrl: ?*WS_STRING,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsDateTimeToFileTime(
    dateTime: ?*WS_DATETIME,
    fileTime: ?*FILETIME,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsFileTimeToDateTime(
    fileTime: ?*FILETIME,
    dateTime: ?*WS_DATETIME,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsCreateMetadata(
    properties: ?*WS_METADATA_PROPERTY,
    propertyCount: u32,
    metadata: ?*?*WS_METADATA,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsReadMetadata(
    metadata: ?*WS_METADATA,
    reader: ?*WS_XML_READER,
    url: ?*WS_STRING,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsFreeMetadata(
    metadata: ?*WS_METADATA,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsResetMetadata(
    metadata: ?*WS_METADATA,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsGetMetadataProperty(
    metadata: ?*WS_METADATA,
    id: WS_METADATA_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsGetMissingMetadataDocumentAddress(
    metadata: ?*WS_METADATA,
    address: ?*?*WS_ENDPOINT_ADDRESS,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsGetMetadataEndpoints(
    metadata: ?*WS_METADATA,
    endpoints: ?*WS_METADATA_ENDPOINTS,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsMatchPolicyAlternative(
    policy: ?*WS_POLICY,
    alternativeIndex: u32,
    policyConstraints: ?*WS_POLICY_CONSTRAINTS,
    matchRequired: BOOL,
    heap: ?*WS_HEAP,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsGetPolicyProperty(
    policy: ?*WS_POLICY,
    id: WS_POLICY_PROPERTY_ID,
    value: ?*opaque{},
    valueSize: u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsGetPolicyAlternativeCount(
    policy: ?*WS_POLICY,
    count: ?*u32,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsCreateServiceProxyFromTemplate(
    channelType: WS_CHANNEL_TYPE,
    properties: ?*WS_PROXY_PROPERTY,
    propertyCount: u32,
    templateType: WS_BINDING_TEMPLATE_TYPE,
    templateValue: ?*opaque{},
    templateSize: u32,
    templateDescription: ?*opaque{},
    templateDescriptionSize: u32,
    serviceProxy: ?*?*WS_SERVICE_PROXY,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webservices" fn WsCreateServiceEndpointFromTemplate(
    channelType: WS_CHANNEL_TYPE,
    properties: ?*WS_SERVICE_ENDPOINT_PROPERTY,
    propertyCount: u32,
    addressUrl: ?*WS_STRING,
    contract: ?*WS_SERVICE_CONTRACT,
    authorizationCallback: WS_SERVICE_SECURITY_CALLBACK,
    heap: ?*WS_HEAP,
    templateType: WS_BINDING_TEMPLATE_TYPE,
    templateValue: ?*opaque{},
    templateSize: u32,
    templateDescription: ?*opaque{},
    templateDescriptionSize: u32,
    serviceEndpoint: ?*?*WS_SERVICE_ENDPOINT,
    @"error": ?*WS_ERROR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webauthn" fn WebAuthNGetApiVersionNumber(
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "webauthn" fn WebAuthNIsUserVerifyingPlatformAuthenticatorAvailable(
    pbIsUserVerifyingPlatformAuthenticatorAvailable: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webauthn" fn WebAuthNAuthenticatorMakeCredential(
    hWnd: HWND,
    pRpInformation: ?*WEBAUTHN_RP_ENTITY_INFORMATION,
    pUserInformation: ?*WEBAUTHN_USER_ENTITY_INFORMATION,
    pPubKeyCredParams: ?*WEBAUTHN_COSE_CREDENTIAL_PARAMETERS,
    pWebAuthNClientData: ?*WEBAUTHN_CLIENT_DATA,
    pWebAuthNMakeCredentialOptions: ?*WEBAUTHN_AUTHENTICATOR_MAKE_CREDENTIAL_OPTIONS,
    ppWebAuthNCredentialAttestation: ?*?*WEBAUTHN_CREDENTIAL_ATTESTATION,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webauthn" fn WebAuthNAuthenticatorGetAssertion(
    hWnd: HWND,
    pwszRpId: ?*u16,
    pWebAuthNClientData: ?*WEBAUTHN_CLIENT_DATA,
    pWebAuthNGetAssertionOptions: ?*WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS,
    ppWebAuthNAssertion: ?*?*WEBAUTHN_ASSERTION,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webauthn" fn WebAuthNFreeCredentialAttestation(
    pWebAuthNCredentialAttestation: ?*WEBAUTHN_CREDENTIAL_ATTESTATION,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "webauthn" fn WebAuthNFreeAssertion(
    pWebAuthNAssertion: ?*WEBAUTHN_ASSERTION,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "webauthn" fn WebAuthNGetCancellationId(
    pCancellationId: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webauthn" fn WebAuthNCancelCurrentOperation(
    pCancellationId: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "webauthn" fn WebAuthNGetErrorName(
    hr: HRESULT,
) callconv(@import("std").os.windows.WINAPI) ?*u16;

// set_last_errror=False (can and should we use this?)
pub extern "webauthn" fn WebAuthNGetW3CExceptionDOMError(
    hr: HRESULT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    else => if (@import("builtin").is_test) struct {
    } else struct {
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("systemservices.zig").BOOL;
const DECIMAL = @import("systemservices.zig").DECIMAL;
const CERT_CONTEXT = @import("security.zig").CERT_CONTEXT;
const HRESULT = @import("com.zig").HRESULT;
const FILETIME = @import("windowsprogramming.zig").FILETIME;
const HWND = @import("windowsandmessaging.zig").HWND;

test "" {
    const constant_export_count = 41;
    const type_export_count = 450;
    const func_count = 203;
    const unicode_alias_count = 0;
    const type_import_count = 7;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
